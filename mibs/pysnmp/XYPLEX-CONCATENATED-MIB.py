#
# PySNMP MIB module XYPLEX-CONCATENATED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYPLEX-CONCATENATED-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:39:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, IpAddress, Gauge32, ModuleIdentity, iso, Counter32, Counter64, enterprises, Integer32, experimental, Bits, MibIdentifier, mgmt, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "IpAddress", "Gauge32", "ModuleIdentity", "iso", "Counter32", "Counter64", "enterprises", "Integer32", "experimental", "Bits", "MibIdentifier", "mgmt", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mib_2 = MibIdentifier((1, 3, 6, 1, 2, 1)).setLabel("mib-2")
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

system = MibIdentifier((1, 3, 6, 1, 2, 1, 1))
interfaces = MibIdentifier((1, 3, 6, 1, 2, 1, 2))
at = MibIdentifier((1, 3, 6, 1, 2, 1, 3))
ip = MibIdentifier((1, 3, 6, 1, 2, 1, 4))
icmp = MibIdentifier((1, 3, 6, 1, 2, 1, 5))
tcp = MibIdentifier((1, 3, 6, 1, 2, 1, 6))
udp = MibIdentifier((1, 3, 6, 1, 2, 1, 7))
egp = MibIdentifier((1, 3, 6, 1, 2, 1, 8))
transmission = MibIdentifier((1, 3, 6, 1, 2, 1, 10))
snmp = MibIdentifier((1, 3, 6, 1, 2, 1, 11))
sysDescr = MibScalar((1, 3, 6, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDescr.setStatus('mandatory')
sysObjectID = MibScalar((1, 3, 6, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysObjectID.setStatus('mandatory')
sysUpTime = MibScalar((1, 3, 6, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUpTime.setStatus('mandatory')
sysContact = MibScalar((1, 3, 6, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContact.setStatus('mandatory')
sysName = MibScalar((1, 3, 6, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysName.setStatus('mandatory')
sysLocation = MibScalar((1, 3, 6, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocation.setStatus('mandatory')
sysServices = MibScalar((1, 3, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServices.setStatus('mandatory')
ifNumber = MibScalar((1, 3, 6, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifNumber.setStatus('mandatory')
ifTable = MibTable((1, 3, 6, 1, 2, 1, 2, 2), )
if mibBuilder.loadTexts: ifTable.setStatus('mandatory')
ifEntry = MibTableRow((1, 3, 6, 1, 2, 1, 2, 2, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifEntry.setStatus('mandatory')
ifIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndex.setStatus('mandatory')
ifDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDescr.setStatus('mandatory')
ifType = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifType.setStatus('mandatory')
ifMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMtu.setStatus('mandatory')
ifSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpeed.setStatus('mandatory')
ifPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPhysAddress.setStatus('mandatory')
ifAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifAdminStatus.setStatus('mandatory')
ifOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOperStatus.setStatus('mandatory')
ifLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLastChange.setStatus('mandatory')
ifInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInOctets.setStatus('mandatory')
ifInUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInUcastPkts.setStatus('mandatory')
ifInNUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInNUcastPkts.setStatus('mandatory')
ifInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInDiscards.setStatus('mandatory')
ifInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInErrors.setStatus('mandatory')
ifInUnknownProtos = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInUnknownProtos.setStatus('mandatory')
ifOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutOctets.setStatus('mandatory')
ifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutUcastPkts.setStatus('mandatory')
ifOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutNUcastPkts.setStatus('mandatory')
ifOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutDiscards.setStatus('mandatory')
ifOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutErrors.setStatus('mandatory')
ifOutQLen = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutQLen.setStatus('mandatory')
ifSpecific = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpecific.setStatus('mandatory')
atTable = MibTable((1, 3, 6, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: atTable.setStatus('deprecated')
atEntry = MibTableRow((1, 3, 6, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "atIfIndex"), (0, "XYPLEX-CONCATENATED-MIB", "atNetAddress"))
if mibBuilder.loadTexts: atEntry.setStatus('deprecated')
atIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atIfIndex.setStatus('deprecated')
atPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 3, 1, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atPhysAddress.setStatus('deprecated')
atNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetAddress.setStatus('deprecated')
ipForwarding = MibScalar((1, 3, 6, 1, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("not-forwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwarding.setStatus('mandatory')
ipDefaultTTL = MibScalar((1, 3, 6, 1, 2, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDefaultTTL.setStatus('mandatory')
ipInReceives = MibScalar((1, 3, 6, 1, 2, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInReceives.setStatus('mandatory')
ipInHdrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInHdrErrors.setStatus('mandatory')
ipInAddrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInAddrErrors.setStatus('mandatory')
ipForwDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipForwDatagrams.setStatus('mandatory')
ipInUnknownProtos = MibScalar((1, 3, 6, 1, 2, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInUnknownProtos.setStatus('mandatory')
ipInDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInDiscards.setStatus('mandatory')
ipInDelivers = MibScalar((1, 3, 6, 1, 2, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInDelivers.setStatus('mandatory')
ipOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutRequests.setStatus('mandatory')
ipOutDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutDiscards.setStatus('mandatory')
ipOutNoRoutes = MibScalar((1, 3, 6, 1, 2, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutNoRoutes.setStatus('mandatory')
ipReasmTimeout = MibScalar((1, 3, 6, 1, 2, 1, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmTimeout.setStatus('mandatory')
ipReasmReqds = MibScalar((1, 3, 6, 1, 2, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmReqds.setStatus('mandatory')
ipReasmOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmOKs.setStatus('mandatory')
ipReasmFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmFails.setStatus('mandatory')
ipFragOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragOKs.setStatus('mandatory')
ipFragFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragFails.setStatus('mandatory')
ipFragCreates = MibScalar((1, 3, 6, 1, 2, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragCreates.setStatus('mandatory')
ipAddrTable = MibTable((1, 3, 6, 1, 2, 1, 4, 20), )
if mibBuilder.loadTexts: ipAddrTable.setStatus('mandatory')
ipAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 20, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "ipAdEntAddr"))
if mibBuilder.loadTexts: ipAddrEntry.setStatus('mandatory')
ipAdEntAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntAddr.setStatus('mandatory')
ipAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntIfIndex.setStatus('mandatory')
ipAdEntNetMask = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntNetMask.setStatus('mandatory')
ipAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntBcastAddr.setStatus('mandatory')
ipAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntReasmMaxSize.setStatus('mandatory')
ipRouteTable = MibTable((1, 3, 6, 1, 2, 1, 4, 21), )
if mibBuilder.loadTexts: ipRouteTable.setStatus('mandatory')
ipRouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 21, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "ipRouteDest"))
if mibBuilder.loadTexts: ipRouteEntry.setStatus('mandatory')
ipRouteDest = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteDest.setStatus('mandatory')
ipRouteIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteIfIndex.setStatus('mandatory')
ipRouteMetric1 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric1.setStatus('mandatory')
ipRouteMetric2 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric2.setStatus('mandatory')
ipRouteMetric3 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric3.setStatus('mandatory')
ipRouteMetric4 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric4.setStatus('mandatory')
ipRouteNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteNextHop.setStatus('mandatory')
ipRouteType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteType.setStatus('mandatory')
ipRouteProto = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteProto.setStatus('mandatory')
ipRouteAge = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteAge.setStatus('mandatory')
ipRouteMask = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMask.setStatus('mandatory')
ipRouteMetric5 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric5.setStatus('mandatory')
ipRouteInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfo.setStatus('mandatory')
ipNetToMediaTable = MibTable((1, 3, 6, 1, 2, 1, 4, 22), )
if mibBuilder.loadTexts: ipNetToMediaTable.setStatus('mandatory')
ipNetToMediaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 22, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "ipNetToMediaIfIndex"), (0, "XYPLEX-CONCATENATED-MIB", "ipNetToMediaNetAddress"))
if mibBuilder.loadTexts: ipNetToMediaEntry.setStatus('mandatory')
ipNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaIfIndex.setStatus('mandatory')
ipNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaPhysAddress.setStatus('mandatory')
ipNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaNetAddress.setStatus('mandatory')
ipNetToMediaType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaType.setStatus('mandatory')
ipRoutingDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoutingDiscards.setStatus('mandatory')
icmpInMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInMsgs.setStatus('mandatory')
icmpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInErrors.setStatus('mandatory')
icmpInDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInDestUnreachs.setStatus('mandatory')
icmpInTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimeExcds.setStatus('mandatory')
icmpInParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInParmProbs.setStatus('mandatory')
icmpInSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInSrcQuenchs.setStatus('mandatory')
icmpInRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInRedirects.setStatus('mandatory')
icmpInEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInEchos.setStatus('mandatory')
icmpInEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInEchoReps.setStatus('mandatory')
icmpInTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimestamps.setStatus('mandatory')
icmpInTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimestampReps.setStatus('mandatory')
icmpInAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInAddrMasks.setStatus('mandatory')
icmpInAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInAddrMaskReps.setStatus('mandatory')
icmpOutMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutMsgs.setStatus('mandatory')
icmpOutErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutErrors.setStatus('mandatory')
icmpOutDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutDestUnreachs.setStatus('mandatory')
icmpOutTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimeExcds.setStatus('mandatory')
icmpOutParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutParmProbs.setStatus('mandatory')
icmpOutSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutSrcQuenchs.setStatus('mandatory')
icmpOutRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutRedirects.setStatus('mandatory')
icmpOutEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutEchos.setStatus('mandatory')
icmpOutEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutEchoReps.setStatus('mandatory')
icmpOutTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimestamps.setStatus('mandatory')
icmpOutTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimestampReps.setStatus('mandatory')
icmpOutAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutAddrMasks.setStatus('mandatory')
icmpOutAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutAddrMaskReps.setStatus('mandatory')
tcpRtoAlgorithm = MibScalar((1, 3, 6, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("constant", 2), ("rsre", 3), ("vanj", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRtoAlgorithm.setStatus('mandatory')
tcpRtoMin = MibScalar((1, 3, 6, 1, 2, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRtoMin.setStatus('mandatory')
tcpRtoMax = MibScalar((1, 3, 6, 1, 2, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRtoMax.setStatus('mandatory')
tcpMaxConn = MibScalar((1, 3, 6, 1, 2, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxConn.setStatus('mandatory')
tcpActiveOpens = MibScalar((1, 3, 6, 1, 2, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpActiveOpens.setStatus('mandatory')
tcpPassiveOpens = MibScalar((1, 3, 6, 1, 2, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpPassiveOpens.setStatus('mandatory')
tcpAttemptFails = MibScalar((1, 3, 6, 1, 2, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpAttemptFails.setStatus('mandatory')
tcpEstabResets = MibScalar((1, 3, 6, 1, 2, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpEstabResets.setStatus('mandatory')
tcpCurrEstab = MibScalar((1, 3, 6, 1, 2, 1, 6, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurrEstab.setStatus('mandatory')
tcpInSegs = MibScalar((1, 3, 6, 1, 2, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInSegs.setStatus('mandatory')
tcpOutSegs = MibScalar((1, 3, 6, 1, 2, 1, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOutSegs.setStatus('mandatory')
tcpRetransSegs = MibScalar((1, 3, 6, 1, 2, 1, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRetransSegs.setStatus('mandatory')
tcpConnTable = MibTable((1, 3, 6, 1, 2, 1, 6, 13), )
if mibBuilder.loadTexts: tcpConnTable.setStatus('mandatory')
tcpConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 6, 13, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "tcpConnLocalAddress"), (0, "XYPLEX-CONCATENATED-MIB", "tcpConnLocalPort"), (0, "XYPLEX-CONCATENATED-MIB", "tcpConnRemAddress"), (0, "XYPLEX-CONCATENATED-MIB", "tcpConnRemPort"))
if mibBuilder.loadTexts: tcpConnEntry.setStatus('mandatory')
tcpConnState = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpConnState.setStatus('mandatory')
tcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnLocalAddress.setStatus('mandatory')
tcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnLocalPort.setStatus('mandatory')
tcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRemAddress.setStatus('mandatory')
tcpConnRemPort = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRemPort.setStatus('mandatory')
tcpInErrs = MibScalar((1, 3, 6, 1, 2, 1, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInErrs.setStatus('mandatory')
tcpOutRsts = MibScalar((1, 3, 6, 1, 2, 1, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOutRsts.setStatus('mandatory')
udpInDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInDatagrams.setStatus('mandatory')
udpNoPorts = MibScalar((1, 3, 6, 1, 2, 1, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpNoPorts.setStatus('mandatory')
udpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInErrors.setStatus('mandatory')
udpOutDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpOutDatagrams.setStatus('mandatory')
udpTable = MibTable((1, 3, 6, 1, 2, 1, 7, 5), )
if mibBuilder.loadTexts: udpTable.setStatus('mandatory')
udpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 7, 5, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "udpLocalAddress"), (0, "XYPLEX-CONCATENATED-MIB", "udpLocalPort"))
if mibBuilder.loadTexts: udpEntry.setStatus('mandatory')
udpLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 7, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpLocalAddress.setStatus('mandatory')
udpLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpLocalPort.setStatus('mandatory')
snmpInPkts = MibScalar((1, 3, 6, 1, 2, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInPkts.setStatus('mandatory')
snmpOutPkts = MibScalar((1, 3, 6, 1, 2, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutPkts.setStatus('mandatory')
snmpInBadVersions = MibScalar((1, 3, 6, 1, 2, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadVersions.setStatus('mandatory')
snmpInBadCommunityNames = MibScalar((1, 3, 6, 1, 2, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadCommunityNames.setStatus('mandatory')
snmpInBadCommunityUses = MibScalar((1, 3, 6, 1, 2, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadCommunityUses.setStatus('mandatory')
snmpInASNParseErrs = MibScalar((1, 3, 6, 1, 2, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInASNParseErrs.setStatus('mandatory')
snmpInTooBigs = MibScalar((1, 3, 6, 1, 2, 1, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTooBigs.setStatus('mandatory')
snmpInNoSuchNames = MibScalar((1, 3, 6, 1, 2, 1, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInNoSuchNames.setStatus('mandatory')
snmpInBadValues = MibScalar((1, 3, 6, 1, 2, 1, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadValues.setStatus('mandatory')
snmpInReadOnlys = MibScalar((1, 3, 6, 1, 2, 1, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInReadOnlys.setStatus('mandatory')
snmpInGenErrs = MibScalar((1, 3, 6, 1, 2, 1, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGenErrs.setStatus('mandatory')
snmpInTotalReqVars = MibScalar((1, 3, 6, 1, 2, 1, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTotalReqVars.setStatus('mandatory')
snmpInTotalSetVars = MibScalar((1, 3, 6, 1, 2, 1, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTotalSetVars.setStatus('mandatory')
snmpInGetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGetRequests.setStatus('mandatory')
snmpInGetNexts = MibScalar((1, 3, 6, 1, 2, 1, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGetNexts.setStatus('mandatory')
snmpInSetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInSetRequests.setStatus('mandatory')
snmpInGetResponses = MibScalar((1, 3, 6, 1, 2, 1, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGetResponses.setStatus('mandatory')
snmpInTraps = MibScalar((1, 3, 6, 1, 2, 1, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTraps.setStatus('mandatory')
snmpOutTooBigs = MibScalar((1, 3, 6, 1, 2, 1, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutTooBigs.setStatus('mandatory')
snmpOutNoSuchNames = MibScalar((1, 3, 6, 1, 2, 1, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutNoSuchNames.setStatus('mandatory')
snmpOutBadValues = MibScalar((1, 3, 6, 1, 2, 1, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutBadValues.setStatus('mandatory')
snmpOutGenErrs = MibScalar((1, 3, 6, 1, 2, 1, 11, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGenErrs.setStatus('mandatory')
snmpOutGetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGetRequests.setStatus('mandatory')
snmpOutGetNexts = MibScalar((1, 3, 6, 1, 2, 1, 11, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGetNexts.setStatus('mandatory')
snmpOutSetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutSetRequests.setStatus('mandatory')
snmpOutGetResponses = MibScalar((1, 3, 6, 1, 2, 1, 11, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGetResponses.setStatus('mandatory')
snmpOutTraps = MibScalar((1, 3, 6, 1, 2, 1, 11, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutTraps.setStatus('mandatory')
snmpEnableAuthenTraps = MibScalar((1, 3, 6, 1, 2, 1, 11, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnableAuthenTraps.setStatus('mandatory')
xyplex = MibIdentifier((1, 3, 6, 1, 4, 1, 33))
xSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 1))
class DateTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class AddressType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("local", 3), ("ip", 4), ("ethernet", 5))

sysIdent = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIdent.setStatus('mandatory')
sysDefineMode = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permOnly", 1), ("operAndPerm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDefineMode.setStatus('mandatory')
sysDateTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 3), DateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDateTime.setStatus('mandatory')
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('mandatory')
sysLoadSoftware = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoadSoftware.setStatus('mandatory')
sysDump = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDump.setStatus('mandatory')
sysMaintenancePassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMaintenancePassword.setStatus('mandatory')
sysLocalName = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalName.setStatus('mandatory')
sysSoftwareVersionType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2), ("production", 3), ("special", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSoftwareVersionType.setStatus('mandatory')
sysSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSoftwareVersion.setStatus('mandatory')
sysRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRomVersion.setStatus('mandatory')
sysHardwareType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareType.setStatus('mandatory')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('mandatory')
sysChassisType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mx45xx", 1), ("other", 2), ("lanbusII", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisType.setStatus('mandatory')
sysChassisVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisVersion.setStatus('mandatory')
sysCrash = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCrash.setStatus('mandatory')
sysInitialize = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("conditionalExecute", 2), ("unconditionalExecute", 3), ("cancel", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysInitialize.setStatus('mandatory')
sysInitializeDelay = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysInitializeDelay.setStatus('mandatory')
sysZeroAll = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysZeroAll.setStatus('mandatory')
sysZeroBase = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysZeroBase.setStatus('mandatory')
sysZeroBaseTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysZeroBaseTime.setStatus('mandatory')
sysLoaderName = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoaderName.setStatus('mandatory')
sysLoaderAddressType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 23), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoaderAddressType.setStatus('mandatory')
sysLoaderAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoaderAddress.setStatus('mandatory')
sysDumperAddressType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 25), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDumperAddressType.setStatus('mandatory')
sysDumperAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDumperAddress.setStatus('mandatory')
sysResourceLacks = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResourceLacks.setStatus('mandatory')
sysChassisState = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noFault", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisState.setStatus('mandatory')
sysChassisFaultTransitions = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisFaultTransitions.setStatus('mandatory')
sysResourceNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResourceNumber.setStatus('mandatory')
sysFeatureNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFeatureNumber.setStatus('mandatory')
resTable = MibTable((1, 3, 6, 1, 4, 1, 33, 1, 32), )
if mibBuilder.loadTexts: resTable.setStatus('mandatory')
resEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 1, 32, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "resType"))
if mibBuilder.loadTexts: resEntry.setStatus('mandatory')
resType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("cpuPercent", 1), ("memoryPercent", 2), ("process", 3), ("timer", 4), ("packetBuffer", 5), ("ipcMessage", 6), ("textPool", 7), ("freeMemory", 8), ("globalMemoryPercent", 9), ("phivDecnetRouteCache", 10), ("ipFilterCache", 11), ("ipRouteCache", 12), ("ipxRouteCache", 13), ("ipPolicyTable", 14), ("ipFilterTable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resType.setStatus('mandatory')
resCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resCurrent.setStatus('mandatory')
resWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resWorst.setStatus('mandatory')
resAdminMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resAdminMaximum.setStatus('mandatory')
resLacks = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resLacks.setStatus('mandatory')
resLackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 6), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resLackTime.setStatus('mandatory')
resOperMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resOperMaximum.setStatus('mandatory')
featTable = MibTable((1, 3, 6, 1, 4, 1, 33, 1, 33), )
if mibBuilder.loadTexts: featTable.setStatus('mandatory')
featEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 1, 33, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "featType"))
if mibBuilder.loadTexts: featEntry.setStatus('mandatory')
featType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("help", 1), ("snmp", 2), ("xremote", 3), ("tn3270", 4), ("menu", 5), ("multisessions", 6), ("lat", 7), ("eventLog", 8), ("internetSecurity", 9), ("slip", 10), ("scriptServer", 11), ("kerberos", 12), ("telnet", 13), ("rlogin", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: featType.setStatus('mandatory')
featStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: featStatus.setStatus('mandatory')
bootControl = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 1, 34))
bootControlLoadInternetFile = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadInternetFile.setStatus('mandatory')
bootControlLoadInternetServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadInternetServer.setStatus('mandatory')
bootControlLoadInternetGateway = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadInternetGateway.setStatus('mandatory')
bootControlLoadBootpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadBootpTftp.setStatus('mandatory')
bootControlLoadTftpDirect = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadTftpDirect.setStatus('mandatory')
bootControlLoadLocal = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadLocal.setStatus('mandatory')
bootControlLoadMop = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadMop.setStatus('mandatory')
bootControlLoadProprietary = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadProprietary.setStatus('mandatory')
bootControlLoadRarpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadRarpTftp.setStatus('mandatory')
bootControlDumpBootpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpBootpTftp.setStatus('mandatory')
bootControlDumpLocal = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpLocal.setStatus('mandatory')
bootControlDumpMop = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpMop.setStatus('mandatory')
bootControlDumpProprietary = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpProprietary.setStatus('mandatory')
bootControlDumpRarpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpRarpTftp.setStatus('mandatory')
bootControlParamBootpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamBootpTftp.setStatus('mandatory')
bootControlParamLocal = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamLocal.setStatus('mandatory')
bootControlParamMop = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamMop.setStatus('mandatory')
bootControlParamProprietary = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamProprietary.setStatus('mandatory')
bootControlParamRarpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamRarpTftp.setStatus('mandatory')
sysInstalledMemory = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInstalledMemory.setStatus('mandatory')
resourceLack = NotificationType((1, 3, 6, 1, 4, 1, 33, 1) + (0,1)).setObjects(("XYPLEX-CONCATENATED-MIB", "resType"))
bootClient = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 12))
bootClientStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 12, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootClientStatus.setStatus('mandatory')
bootServer = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6))
bsBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 1))
dump = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 2))
load = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 3))
param = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 4))
basicLogLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLogLimit.setStatus('mandatory')
basicActiveLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicActiveLimit.setStatus('mandatory')
basicActiveNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActiveNumber.setStatus('mandatory')
basicClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicClientNumber.setStatus('mandatory')
basicOffersSent = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicOffersSent.setStatus('mandatory')
basicEventTotal = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicEventTotal.setStatus('mandatory')
basicEventPurge = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicEventPurge.setStatus('mandatory')
activeTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 8), )
if mibBuilder.loadTexts: activeTable.setStatus('mandatory')
activeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "activeIdentificationType"), (0, "XYPLEX-CONCATENATED-MIB", "activeIdentification"))
if mibBuilder.loadTexts: activeEntry.setStatus('mandatory')
activeIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeIdentificationType.setStatus('mandatory')
activeIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeIdentification.setStatus('mandatory')
activeFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("parameterStore", 1), ("load", 2), ("dump", 3), ("imageUpdate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeFunction.setStatus('mandatory')
activeSoftwareVersionType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2), ("production", 3), ("special", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeSoftwareVersionType.setStatus('mandatory')
activeSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeSoftwareVersion.setStatus('mandatory')
activeParameterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeParameterVersion.setStatus('mandatory')
activeCurrentSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCurrentSequence.setStatus('mandatory')
activeBytesRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeBytesRemaining.setStatus('mandatory')
activeFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeFile.setStatus('mandatory')
activeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("fileTooLarge", 2), ("notImageFile", 3), ("notExecutableFile", 4), ("badFileData", 5), ("deviceWriteProtected", 6), ("operationTimeout", 7), ("remoteFileNotFound", 8), ("remoteFileAccessViolation", 9), ("protocolError", 10), ("fileSystemError", 11), ("temporaryResourceConflict", 12), ("success", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeStatus.setStatus('mandatory')
activeState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("idle", 1), ("internal1", 2), ("internal2", 3), ("openPartner", 4), ("openFile", 5), ("receivePartner", 6), ("writeFile", 7), ("closePartner", 8), ("closeFile", 9), ("cleanup", 10), ("done", 11), ("error", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeState.setStatus('mandatory')
clientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 9), )
if mibBuilder.loadTexts: clientTable.setStatus('mandatory')
clientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "clientIdentificationType"), (0, "XYPLEX-CONCATENATED-MIB", "clientIdentification"))
if mibBuilder.loadTexts: clientEntry.setStatus('mandatory')
clientIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 1), AddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientIdentificationType.setStatus('mandatory')
clientIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientIdentification.setStatus('mandatory')
clientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientEntryStatus.setStatus('mandatory')
clientName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientName.setStatus('mandatory')
clientLoadFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientLoadFile.setStatus('mandatory')
clientDiagnosticFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientDiagnosticFile.setStatus('mandatory')
clientLoadService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientLoadService.setStatus('mandatory')
clientDumpService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientDumpService.setStatus('mandatory')
namedTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 10), )
if mibBuilder.loadTexts: namedTable.setStatus('mandatory')
namedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "namedName"))
if mibBuilder.loadTexts: namedEntry.setStatus('mandatory')
namedIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 1), AddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namedIdentificationType.setStatus('mandatory')
namedIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namedIdentification.setStatus('mandatory')
namedEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namedEntryStatus.setStatus('mandatory')
namedName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namedName.setStatus('mandatory')
namedLoadFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namedLoadFile.setStatus('mandatory')
namedDiagnosticFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namedDiagnosticFile.setStatus('mandatory')
namedLoadService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namedLoadService.setStatus('mandatory')
namedDumpService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namedDumpService.setStatus('mandatory')
eventTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 11), )
if mibBuilder.loadTexts: eventTable.setStatus('mandatory')
eventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 11, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "eventIndex"))
if mibBuilder.loadTexts: eventEntry.setStatus('mandatory')
eventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventIndex.setStatus('mandatory')
eventText = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventText.setStatus('mandatory')
basicDeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDeviceNumber.setStatus('mandatory')
deviceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 13), )
if mibBuilder.loadTexts: deviceTable.setStatus('mandatory')
deviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "deviceIndex"))
if mibBuilder.loadTexts: deviceEntry.setStatus('mandatory')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIndex.setStatus('mandatory')
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceName.setStatus('mandatory')
deviceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDescr.setStatus('mandatory')
deviceOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("format", 3), ("idle", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOperation.setStatus('mandatory')
deviceFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unformatted", 1), ("formatted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFormat.setStatus('mandatory')
deviceProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("write-enabled", 1), ("write-protected", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceProtection.setStatus('mandatory')
deviceFormatMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFormatMedium.setStatus('mandatory')
deviceGetFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFile.setStatus('mandatory')
deviceGetFileHostIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 9), AddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileHostIdentificationType.setStatus('mandatory')
deviceGetFileHostIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileHostIdentification.setStatus('mandatory')
deviceGetFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileName.setStatus('mandatory')
dumpService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpService.setStatus('mandatory')
dumpDrive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpDrive.setStatus('mandatory')
dumpMerit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpMerit.setStatus('mandatory')
dumpSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("small", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpSize.setStatus('mandatory')
dumpCompleted = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpCompleted.setStatus('mandatory')
dumpActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpActive.setStatus('mandatory')
dumpFileNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileNumber.setStatus('mandatory')
dumpFileTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 2, 8), )
if mibBuilder.loadTexts: dumpFileTable.setStatus('mandatory')
dumpFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "dumpFileIdentificationType"), (0, "XYPLEX-CONCATENATED-MIB", "dumpFileIdentification"))
if mibBuilder.loadTexts: dumpFileEntry.setStatus('mandatory')
dumpFileIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileIdentificationType.setStatus('mandatory')
dumpFileIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileIdentification.setStatus('mandatory')
dumpFileEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpFileEntryStatus.setStatus('mandatory')
dumpFileCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 4), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileCreation.setStatus('mandatory')
dumpFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileSize.setStatus('mandatory')
loadService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadService.setStatus('mandatory')
loadMerit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMerit.setStatus('mandatory')
loadCompleted = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadCompleted.setStatus('mandatory')
loadActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadActive.setStatus('mandatory')
loadFileNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileNumber.setStatus('mandatory')
loadFileTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 3, 6), )
if mibBuilder.loadTexts: loadFileTable.setStatus('mandatory')
loadFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "loadFileName"))
if mibBuilder.loadTexts: loadFileEntry.setStatus('mandatory')
loadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileName.setStatus('mandatory')
loadFileCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 2), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileCreation.setStatus('mandatory')
loadFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileSize.setStatus('mandatory')
loadFileSoftwareVersionType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2), ("production", 3), ("special", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileSoftwareVersionType.setStatus('mandatory')
loadFileSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileSoftwareVersion.setStatus('mandatory')
paramService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramService.setStatus('mandatory')
paramDefaultService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramDefaultService.setStatus('mandatory')
paramDrive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramDrive.setStatus('mandatory')
paramActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramActive.setStatus('mandatory')
paramStorageActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramStorageActive.setStatus('mandatory')
paramFileNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileNumber.setStatus('mandatory')
paramFileTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 4, 7), )
if mibBuilder.loadTexts: paramFileTable.setStatus('mandatory')
paramFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "paramFileIdentificationType"), (0, "XYPLEX-CONCATENATED-MIB", "paramFileIdentification"))
if mibBuilder.loadTexts: paramFileEntry.setStatus('mandatory')
paramFileIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileIdentificationType.setStatus('mandatory')
paramFileIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileIdentification.setStatus('mandatory')
paramFileEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramFileEntryStatus.setStatus('mandatory')
paramFileWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 4), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileWrite.setStatus('mandatory')
paramFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileSize.setStatus('mandatory')
paramFileParameterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileParameterVersion.setStatus('mandatory')
characterDep = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 2))
character = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13))
basic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 1))
queue = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 2))
menu = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 3))
netLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 4))
dial = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 5))
sessionLog = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 6))
basicBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicBroadcast.setStatus('mandatory')
basicErrorReport = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicErrorReport.setStatus('mandatory')
basicLock = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLock.setStatus('mandatory')
basicInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicInactivityTimer.setStatus('mandatory')
basicPasswordRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPasswordRetryLimit.setStatus('mandatory')
basicPrivilegedPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPrivilegedPassword.setStatus('mandatory')
basicLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLoginPassword.setStatus('mandatory')
basicLoginPrompt = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLoginPrompt.setStatus('mandatory')
basicWelcome = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicWelcome.setStatus('mandatory')
basicActivePorts = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActivePorts.setStatus('mandatory')
basicActivePortsHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActivePortsHigh.setStatus('mandatory')
basicActiveUsers = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActiveUsers.setStatus('mandatory')
basicActiveUsersHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActiveUsersHigh.setStatus('mandatory')
basicSessions = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSessions.setStatus('mandatory')
basicSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSessionsHigh.setStatus('mandatory')
basicSessionsLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSessionsLimit.setStatus('mandatory')
basicPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 17), )
if mibBuilder.loadTexts: basicPortTable.setStatus('mandatory')
basicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "basicPortIndex"))
if mibBuilder.loadTexts: basicPortEntry.setStatus('mandatory')
basicPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortIndex.setStatus('mandatory')
basicPortDefaultDestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("preferred", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestAction.setStatus('mandatory')
basicPortDefaultDestProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lat", 1), ("telnet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestProtocol.setStatus('mandatory')
basicPortDefaultDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestName.setStatus('mandatory')
basicPortDefaultDestLATNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestLATNodeName.setStatus('mandatory')
basicPortDefaultDestLATPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestLATPortName.setStatus('mandatory')
basicPortAutoConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAutoConnect.setStatus('mandatory')
basicPortAutoLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAutoLogin.setStatus('mandatory')
basicPortBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortBroadcast.setStatus('mandatory')
basicPortConnectResume = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortConnectResume.setStatus('mandatory')
basicPortDialup = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDialup.setStatus('mandatory')
basicPortIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortIdleTimeout.setStatus('mandatory')
basicPortInactivityLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortInactivityLogout.setStatus('mandatory')
basicPortLossNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortLossNotification.setStatus('mandatory')
basicPortMessageCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortMessageCodes.setStatus('mandatory')
basicPortMultisessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortMultisessions.setStatus('mandatory')
basicPortDefaultUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultUserName.setStatus('mandatory')
basicPortVerification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortVerification.setStatus('mandatory')
basicPortDefaultProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lat", 1), ("telnet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultProtocol.setStatus('mandatory')
basicPortLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortLogins.setStatus('mandatory')
basicPortRemoteSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortRemoteSessions.setStatus('mandatory')
basicPortIdleTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortIdleTimeouts.setStatus('mandatory')
basicPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("idle", 1), ("local", 2), ("waitInput", 3), ("executingCommand", 4), ("connecting", 5), ("checkConnect", 6), ("waitOutput", 7), ("connected", 8), ("disconnecting", 9), ("disconnect", 10), ("suspended", 11), ("locked", 12), ("permanent", 13), ("loginWait", 14), ("retryConnect", 15), ("connectWait", 16), ("logout", 17), ("login", 18), ("waitSession", 19), ("reset", 20), ("testServiceWait", 21), ("testServiceOut", 22), ("connectPassword", 23), ("waitLogout", 24), ("waitQueue", 25), ("cancelQueue", 26), ("autobaud", 27), ("available", 28), ("checkModem", 29), ("slip", 30), ("signalWait", 31), ("scriptSearch", 32), ("scriptLoad", 33), ("scriptRun", 34), ("dialback1", 35), ("dialback2", 36), ("dialback3", 37), ("xremote", 38)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortStatus.setStatus('mandatory')
basicPortLastInCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortLastInCharacter.setStatus('mandatory')
basicPortLastOutCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortLastOutCharacter.setStatus('mandatory')
basicPortActiveUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortActiveUserName.setStatus('mandatory')
basicPortDefaultSessionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("interactive", 1), ("binary", 2), ("binaryWithFlow", 3), ("transparent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultSessionMode.setStatus('mandatory')
basicPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortZero.setStatus('mandatory')
basicPortZeroTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortZeroTime.setStatus('mandatory')
basicSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 18), )
if mibBuilder.loadTexts: basicSerialPortTable.setStatus('mandatory')
basicSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "basicSerialPortIndex"))
if mibBuilder.loadTexts: basicSerialPortEntry.setStatus('mandatory')
basicSerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSerialPortIndex.setStatus('mandatory')
basicSerialPortBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("localSwitch", 2), ("sendRemote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortBreak.setStatus('mandatory')
basicSerialPortInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortInterrupts.setStatus('mandatory')
basicSerialPortNoLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortNoLoss.setStatus('mandatory')
basicSerialPortPause = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPause.setStatus('mandatory')
basicSerialPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPrompt.setStatus('mandatory')
basicSerialPortTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ansi", 1), ("hardcopy", 2), ("softcopy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortTerminalType.setStatus('mandatory')
basicSerialPortTypeaheadLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortTypeaheadLimit.setStatus('mandatory')
basicSerialPortBackwardSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortBackwardSwitch.setStatus('mandatory')
basicSerialPortForwardSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortForwardSwitch.setStatus('mandatory')
basicSerialPortLocalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLocalSwitch.setStatus('mandatory')
basicSerialPortModemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortModemControl.setStatus('mandatory')
basicSerialPortSignalCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortSignalCheck.setStatus('mandatory')
basicSerialPortDSRLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDSRLogout.setStatus('mandatory')
basicSerialPortDSRObserve = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDSRObserve.setStatus('mandatory')
basicSerialPortDCDTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDCDTimeout.setStatus('mandatory')
basicSerialPortDTRAssert = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("always", 1), ("onConnectionOrRing", 2), ("onConnection", 3), ("onRing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDTRAssert.setStatus('mandatory')
basicSerialPortLimitedCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLimitedCommands.setStatus('mandatory')
basicSerialPortLimitedView = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLimitedView.setStatus('mandatory')
basicSerialPortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPassword.setStatus('mandatory')
basicSerialPortLineEditor = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditor.setStatus('mandatory')
basicSerialPortLineEditorBackspace = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorBackspace.setStatus('mandatory')
basicSerialPortLineEditorBeginning = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorBeginning.setStatus('mandatory')
basicSerialPortLineEditorCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorCancel.setStatus('mandatory')
basicSerialPortLineEditorDeleteBeginning = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorDeleteBeginning.setStatus('mandatory')
basicSerialPortLineEditorDeleteLine = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorDeleteLine.setStatus('mandatory')
basicSerialPortLineEditorEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorEnd.setStatus('mandatory')
basicSerialPortLineEditorForward = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorForward.setStatus('mandatory')
basicSerialPortLineEditorInsertToggle = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorInsertToggle.setStatus('mandatory')
basicSerialPortLineEditorNextLine = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorNextLine.setStatus('mandatory')
basicSerialPortLineEditorPreviousLine = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorPreviousLine.setStatus('mandatory')
basicSerialPortLineEditorQuotingCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorQuotingCharacter.setStatus('mandatory')
basicSerialPortLineEditorRedisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorRedisplay.setStatus('mandatory')
basicConsoleLogoutDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicConsoleLogoutDisconnect.setStatus('mandatory')
queueLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueLimit.setStatus('mandatory')
queueHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueHigh.setStatus('mandatory')
queueNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueNumber.setStatus('mandatory')
queueTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 2, 4), )
if mibBuilder.loadTexts: queueTable.setStatus('mandatory')
queueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "queueJob"))
if mibBuilder.loadTexts: queueEntry.setStatus('mandatory')
queueJob = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueJob.setStatus('mandatory')
queueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueStatus.setStatus('mandatory')
queueSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueSourceName.setStatus('mandatory')
queueServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueServiceName.setStatus('mandatory')
queueServicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueServicePortIndex.setStatus('mandatory')
queueServicePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueServicePortName.setStatus('mandatory')
queuePortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 2, 5), )
if mibBuilder.loadTexts: queuePortTable.setStatus('mandatory')
queuePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 2, 5, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "queuePortIndex"))
if mibBuilder.loadTexts: queuePortEntry.setStatus('mandatory')
queuePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortIndex.setStatus('mandatory')
queuePortQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuePortQueuing.setStatus('mandatory')
menuNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuNumber.setStatus('mandatory')
menuContinuePrompt = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuContinuePrompt.setStatus('mandatory')
menuSelectionPrompt = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuSelectionPrompt.setStatus('mandatory')
menuTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 3, 4), )
if mibBuilder.loadTexts: menuTable.setStatus('mandatory')
menuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "menuIndex"))
if mibBuilder.loadTexts: menuEntry.setStatus('mandatory')
menuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuIndex.setStatus('mandatory')
menuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuStatus.setStatus('mandatory')
menuText = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuText.setStatus('mandatory')
menuCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuCommand.setStatus('mandatory')
menuPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 3, 5), )
if mibBuilder.loadTexts: menuPortTable.setStatus('mandatory')
menuPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "menuPortIndex"))
if mibBuilder.loadTexts: menuPortEntry.setStatus('mandatory')
menuPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuPortIndex.setStatus('mandatory')
menuPortMenuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("privileged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuPortMenuStatus.setStatus('mandatory')
netLoginNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginNumber.setStatus('mandatory')
netLoginServerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 4, 2), )
if mibBuilder.loadTexts: netLoginServerTable.setStatus('mandatory')
netLoginServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "netLoginServerName"))
if mibBuilder.loadTexts: netLoginServerEntry.setStatus('mandatory')
netLoginServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginServerName.setStatus('mandatory')
netLoginServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginServerStatus.setStatus('mandatory')
netLoginServerPath = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginServerPath.setStatus('mandatory')
netLoginPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 4, 3), )
if mibBuilder.loadTexts: netLoginPortTable.setStatus('mandatory')
netLoginPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "netLoginPortIndex"))
if mibBuilder.loadTexts: netLoginPortEntry.setStatus('mandatory')
netLoginPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortIndex.setStatus('mandatory')
netLoginPortScriptUse = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("required", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginPortScriptUse.setStatus('mandatory')
netLoginPortScriptEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginPortScriptEcho.setStatus('mandatory')
netLoginPortLoaderAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 4), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortLoaderAddressType.setStatus('mandatory')
netLoginPortLoaderAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortLoaderAddress.setStatus('mandatory')
netLoginPortLoaderFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortLoaderFile.setStatus('mandatory')
dialPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 5, 1), )
if mibBuilder.loadTexts: dialPortTable.setStatus('mandatory')
dialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "dialPortIndex"))
if mibBuilder.loadTexts: dialPortEntry.setStatus('mandatory')
dialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialPortIndex.setStatus('mandatory')
dialPortDialback = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPortDialback.setStatus('mandatory')
dialPortDialbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPortDialbackTimeout.setStatus('mandatory')
sessionLogLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogLimit.setStatus('mandatory')
sessionLogTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 6, 2), )
if mibBuilder.loadTexts: sessionLogTable.setStatus('mandatory')
sessionLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "sessionLogIndex"))
if mibBuilder.loadTexts: sessionLogEntry.setStatus('mandatory')
sessionLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogIndex.setStatus('mandatory')
sessionLogConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogConnectionID.setStatus('mandatory')
sessionLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogPort.setStatus('mandatory')
sessionLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("login", 1), ("connectLocal", 2), ("connectRemote", 3), ("disconnect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogEvent.setStatus('mandatory')
sessionLogEventDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("none", 1), ("protocolBadCircuit", 2), ("protocolBadCredits", 3), ("protocolBadStartOrRun", 4), ("protocolBadRange", 5), ("duplicateQueueID", 6), ("noUsers", 7), ("noServiceResourced", 8), ("serviceUserDisconnect", 9), ("serviceUnavailable", 10), ("serverUserDisconnect", 11), ("noNodeResources", 12), ("systemShutdown", 13), ("nodeUserdisconnect", 14), ("badCircuitTimer", 15), ("badServiceClass", 16), ("badMessageOrSlot", 17), ("timeout", 18), ("noProgress", 19), ("serviceNotOnPort", 20), ("noSuchPort", 21), ("badPassword", 22), ("serviceBusy", 23), ("noSuchService", 24), ("serviceDisabled", 25), ("notInQueue", 26), ("noImmeditatAccess", 27), ("accessDenied", 28), ("protocolBadSolicit", 29), ("protocolBadReasonCode", 30), ("unsupportedTest", 31), ("domainTooLong", 32), ("noSuchNode", 33), ("noSuchServiceOnNode", 34), ("rejectService", 35), ("internetConnectDisabled", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogEventDetail.setStatus('mandatory')
sessionLogUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogUserName.setStatus('mandatory')
sessionLogRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogRemoteName.setStatus('mandatory')
sessionLogConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 8), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogConnectTime.setStatus('mandatory')
sessionLogDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 9), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogDisconnectTime.setStatus('mandatory')
sessionLogInCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogInCharacters.setStatus('mandatory')
sessionLogOutCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogOutCharacters.setStatus('mandatory')
decnet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14))
rcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 1))
rcpRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpRemoteAddress.setStatus('mandatory')
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 11))
etherTable = MibTable((1, 3, 6, 1, 4, 1, 33, 11, 1), )
if mibBuilder.loadTexts: etherTable.setStatus('mandatory')
etherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 11, 1, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "etherIndex"))
if mibBuilder.loadTexts: etherEntry.setStatus('mandatory')
etherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIndex.setStatus('mandatory')
etherAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherAlignmentErrors.setStatus('mandatory')
etherFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherFCSErrors.setStatus('mandatory')
etherTxTable = MibTable((1, 3, 6, 1, 4, 1, 33, 11, 2), )
if mibBuilder.loadTexts: etherTxTable.setStatus('mandatory')
etherTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 11, 2, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "etherTxIndex"))
if mibBuilder.loadTexts: etherTxEntry.setStatus('mandatory')
etherTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherTxIndex.setStatus('mandatory')
etherTxSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherTxSingleCollisionFrames.setStatus('mandatory')
etherTxMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherTxMultipleCollisionFrames.setStatus('mandatory')
etherMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 33, 11, 3), )
if mibBuilder.loadTexts: etherMulticastTable.setStatus('mandatory')
etherMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 11, 3, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "etherMulticastIndex"))
if mibBuilder.loadTexts: etherMulticastEntry.setStatus('mandatory')
etherMulticastIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherMulticastIndex.setStatus('mandatory')
etherMulticastBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherMulticastBytesIn.setStatus('mandatory')
etherMulticastBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherMulticastBytesOut.setStatus('mandatory')
etherXTxTable = MibTable((1, 3, 6, 1, 4, 1, 33, 11, 4), )
if mibBuilder.loadTexts: etherXTxTable.setStatus('mandatory')
etherXTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 11, 4, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "etherXTxIndex"))
if mibBuilder.loadTexts: etherXTxEntry.setStatus('mandatory')
etherXTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherXTxIndex.setStatus('mandatory')
etherXTxExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherXTxExcessiveCollisions.setStatus('mandatory')
xInternetDep = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 4))
xInternet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10))
xIp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 1))
xTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 2))
snmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 3))
domainResolver = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 4))
slip = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 5))
telnet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 6))
tn3270 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 7))
kerberos = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 8))
portSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 9))
xremote = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 10))
rotary = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 11))
xEgp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 12))
ospf = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 13))
routerIp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 14))
routerUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 15))
routerPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16))
ipGatewayAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayAddress1.setStatus('mandatory')
ipGatewayAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayAddress2.setStatus('mandatory')
ipAutoSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAutoSubnetMask.setStatus('mandatory')
ipReassembly = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipReassembly.setStatus('mandatory')
tcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 2, 1), )
if mibBuilder.loadTexts: tcpPortTable.setStatus('mandatory')
tcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "tcpPortIndex"))
if mibBuilder.loadTexts: tcpPortEntry.setStatus('mandatory')
tcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpPortIndex.setStatus('mandatory')
tcpPortConnectByAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortConnectByAddress.setStatus('mandatory')
tcpPortWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortWindowSize.setStatus('mandatory')
snmpAgentGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentGetCommunity.setStatus('mandatory')
snmpAgentSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentSetCommunity.setStatus('mandatory')
snmpAgentTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapCommunity.setStatus('mandatory')
snmpAgentGetClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentGetClientNumber.setStatus('mandatory')
snmpAgentSetClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentSetClientNumber.setStatus('mandatory')
snmpAgentTrapClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientNumber.setStatus('mandatory')
getClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 7), )
if mibBuilder.loadTexts: getClientTable.setStatus('mandatory')
getClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "getClientIndex"))
if mibBuilder.loadTexts: getClientEntry.setStatus('mandatory')
getClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getClientIndex.setStatus('mandatory')
getClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientEntryStatus.setStatus('mandatory')
getClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientAddressType.setStatus('mandatory')
getClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientAddress.setStatus('mandatory')
setClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 8), )
if mibBuilder.loadTexts: setClientTable.setStatus('mandatory')
setClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "setClientIndex"))
if mibBuilder.loadTexts: setClientEntry.setStatus('mandatory')
setClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setClientIndex.setStatus('mandatory')
setClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientEntryStatus.setStatus('mandatory')
setClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientAddressType.setStatus('mandatory')
setClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientAddress.setStatus('mandatory')
trapClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 9), )
if mibBuilder.loadTexts: trapClientTable.setStatus('mandatory')
trapClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "trapClientIndex"))
if mibBuilder.loadTexts: trapClientEntry.setStatus('mandatory')
trapClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientIndex.setStatus('mandatory')
trapClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientEntryStatus.setStatus('mandatory')
trapClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientAddressType.setStatus('mandatory')
trapClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientAddress.setStatus('mandatory')
domainResolverSuffix = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 115))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverSuffix.setStatus('mandatory')
domainResolverAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverAddress1.setStatus('mandatory')
domainResolverAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverAddress2.setStatus('mandatory')
domainResolverTtl = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverTtl.setStatus('mandatory')
domainResolverNameNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainResolverNameNumber.setStatus('mandatory')
nameTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 4, 6), )
if mibBuilder.loadTexts: nameTable.setStatus('mandatory')
nameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "nameName"), (0, "XYPLEX-CONCATENATED-MIB", "nameAddress"))
if mibBuilder.loadTexts: nameEntry.setStatus('mandatory')
nameName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameName.setStatus('mandatory')
nameAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameAddress.setStatus('mandatory')
nameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameStatus.setStatus('mandatory')
nameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manager", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameSource.setStatus('mandatory')
nameTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameTtl.setStatus('mandatory')
slipTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 5, 1), )
if mibBuilder.loadTexts: slipTable.setStatus('mandatory')
slipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "slipIndex"))
if mibBuilder.loadTexts: slipEntry.setStatus('mandatory')
slipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipIndex.setStatus('mandatory')
slipState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipState.setStatus('mandatory')
slipLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipLocalAddress.setStatus('mandatory')
slipRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipRemoteAddress.setStatus('mandatory')
slipMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipMask.setStatus('mandatory')
slipPortPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsReceived.setStatus('mandatory')
slipPortPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsSent.setStatus('mandatory')
slipPortPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsDiscarded.setStatus('mandatory')
slipPortPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketLengthErrors.setStatus('mandatory')
slipPortPacketChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketChecksumErrors.setStatus('mandatory')
slipNetworkPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsReceived.setStatus('mandatory')
slipNetworkPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsSent.setStatus('mandatory')
slipNetworkPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsDiscarded.setStatus('mandatory')
telnetPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 6, 1), )
if mibBuilder.loadTexts: telnetPortTable.setStatus('mandatory')
telnetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "telnetPortIndex"))
if mibBuilder.loadTexts: telnetPortEntry.setStatus('mandatory')
telnetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetPortIndex.setStatus('mandatory')
telnetPortIncomingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortIncomingTcpPort.setStatus('mandatory')
telnetPortOutgoingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetPortOutgoingTcpPort.setStatus('mandatory')
telnetPortNewlineTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("cr", 2), ("crNull", 3), ("crLf", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNewlineTranslation.setStatus('mandatory')
telnetPortTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortTerminalType.setStatus('mandatory')
telnetPortEorReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortEorReflection.setStatus('mandatory')
telnetPortBinaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flowControl", 1), ("complete", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortBinaryMode.setStatus('mandatory')
telnetSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 6, 2), )
if mibBuilder.loadTexts: telnetSerialPortTable.setStatus('mandatory')
telnetSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "telnetSerialPortIndex"))
if mibBuilder.loadTexts: telnetSerialPortEntry.setStatus('mandatory')
telnetSerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetSerialPortIndex.setStatus('mandatory')
telnetSerialPortOptionDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortOptionDisplay.setStatus('mandatory')
telnetSerialPortCsiEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortCsiEscape.setStatus('mandatory')
telnetSerialPortEchoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEchoMode.setStatus('mandatory')
telnetSerialPortNewlineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crNull", 1), ("crLf", 2), ("verbatim", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortNewlineMode.setStatus('mandatory')
telnetSerialPortTransmitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("immediate", 1), ("buffered", 2), ("timed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitMode.setStatus('mandatory')
telnetSerialPortTransmitCharacterTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitCharacterTimes.setStatus('mandatory')
telnetSerialPortAbortOutputCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortAbortOutputCharacter.setStatus('mandatory')
telnetSerialPortAttentionCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortAttentionCharacter.setStatus('mandatory')
telnetSerialPortEraseKeyCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEraseKeyCharacter.setStatus('mandatory')
telnetSerialPortEraseLineCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEraseLineCharacter.setStatus('mandatory')
telnetSerialPortInterruptCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortInterruptCharacter.setStatus('mandatory')
telnetSerialPortQueryCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortQueryCharacter.setStatus('mandatory')
telnetSerialPortSynchronizeCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortSynchronizeCharacter.setStatus('mandatory')
tn3270DeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceNumber.setStatus('mandatory')
tn3270LanguageNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270LanguageNumber.setStatus('mandatory')
tn3270PortKeymapStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortKeymapStatus.setStatus('mandatory')
tn3270DeviceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 4), )
if mibBuilder.loadTexts: tn3270DeviceTable.setStatus('mandatory')
tn3270DeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "tn3270DeviceName"))
if mibBuilder.loadTexts: tn3270DeviceEntry.setStatus('mandatory')
tn3270DeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270DeviceName.setStatus('mandatory')
tn3270DeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270DeviceStatus.setStatus('mandatory')
tn3270DeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270DeviceType.setStatus('mandatory')
tn3270Device3278Model = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("model2", 1), ("model5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270Device3278Model.setStatus('mandatory')
tn3270DeviceKeyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceKeyNumber.setStatus('mandatory')
tn3270DeviceScreenNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceScreenNumber.setStatus('mandatory')
tn3270KeyTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 5), )
if mibBuilder.loadTexts: tn3270KeyTable.setStatus('mandatory')
tn3270KeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "tn3270KeyDeviceName"), (0, "XYPLEX-CONCATENATED-MIB", "tn3270KeyName"))
if mibBuilder.loadTexts: tn3270KeyEntry.setStatus('mandatory')
tn3270KeyDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270KeyDeviceName.setStatus('mandatory')
tn3270KeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70))).clone(namedValues=NamedValues(("newline", 1), ("tab", 2), ("backtab", 3), ("cursorup", 4), ("cursorleft", 5), ("cursorright", 6), ("cursordown", 7), ("home", 8), ("delete", 9), ("eraseeof", 10), ("eraseinput", 11), ("insert", 12), ("flushinput", 13), ("refresh", 14), ("centsign", 15), ("duplicate", 16), ("fieldmark", 17), ("scroll", 18), ("status", 19), ("reset", 20), ("fastleft", 21), ("fastright", 22), ("showkeys", 23), ("print", 24), ("pf1", 39), ("pf2", 40), ("pf3", 41), ("pf4", 42), ("pf5", 43), ("pf6", 44), ("pf7", 45), ("pf8", 46), ("pf9", 47), ("pf10", 48), ("pf11", 49), ("pf12", 50), ("pf13", 51), ("pf14", 52), ("pf15", 53), ("pf16", 54), ("pf17", 55), ("pf18", 56), ("pf19", 57), ("pf20", 58), ("pf21", 59), ("pf22", 60), ("pf23", 61), ("pf24", 62), ("pa1", 63), ("pa2", 64), ("pa3", 65), ("sysreq", 66), ("enter", 67), ("clear", 68), ("cursorsel", 69), ("test", 70)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270KeyName.setStatus('mandatory')
tn3270KeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyStatus.setStatus('mandatory')
tn3270KeyCharacterSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyCharacterSequence.setStatus('mandatory')
tn3270KeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyDescription.setStatus('mandatory')
tn3270ScreenTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 6), )
if mibBuilder.loadTexts: tn3270ScreenTable.setStatus('mandatory')
tn3270ScreenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "tn3270ScreenDeviceName"), (0, "XYPLEX-CONCATENATED-MIB", "tn3270ScreenActionName"))
if mibBuilder.loadTexts: tn3270ScreenEntry.setStatus('mandatory')
tn3270ScreenDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270ScreenDeviceName.setStatus('mandatory')
tn3270ScreenActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("eraseeol", 1), ("clearscr", 2), ("movecursor", 3), ("col132", 4), ("col80", 5), ("beep", 6), ("charset", 7), ("boldon", 8), ("boldoff", 9), ("blinkon", 10), ("blinkoff", 11), ("underscoreon", 12), ("underscoreoff", 13), ("reverseon", 14), ("reverseoff", 15), ("status1", 26), ("status2", 27), ("reset1", 28), ("reset2", 29), ("reset3", 30), ("reset4", 31), ("base", 32), ("sgr", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270ScreenActionName.setStatus('mandatory')
tn3270ScreenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270ScreenStatus.setStatus('mandatory')
tn3270ScreenCharacterSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270ScreenCharacterSequence.setStatus('mandatory')
tn3270LanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 7), )
if mibBuilder.loadTexts: tn3270LanguageTable.setStatus('mandatory')
tn3270LanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "tn3270LanguageName"))
if mibBuilder.loadTexts: tn3270LanguageEntry.setStatus('mandatory')
tn3270LanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270LanguageName.setStatus('mandatory')
tn3270LanguageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270LanguageStatus.setStatus('mandatory')
eToALanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 8), )
if mibBuilder.loadTexts: eToALanguageTable.setStatus('mandatory')
eToALanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "eToALanguageName"), (0, "XYPLEX-CONCATENATED-MIB", "eToAOffset"))
if mibBuilder.loadTexts: eToALanguageEntry.setStatus('mandatory')
eToALanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eToALanguageName.setStatus('mandatory')
eToAOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(65, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eToAOffset.setStatus('mandatory')
eToAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eToAValue.setStatus('mandatory')
aToELanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 9), )
if mibBuilder.loadTexts: aToELanguageTable.setStatus('mandatory')
aToELanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "aToELanguageName"), (0, "XYPLEX-CONCATENATED-MIB", "aToEOffset"))
if mibBuilder.loadTexts: aToELanguageEntry.setStatus('mandatory')
aToELanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aToELanguageName.setStatus('mandatory')
aToEOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(33, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aToEOffset.setStatus('mandatory')
aToEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aToEValue.setStatus('mandatory')
tn3270PortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 10), )
if mibBuilder.loadTexts: tn3270PortTable.setStatus('mandatory')
tn3270PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "tn3270PortIndex"))
if mibBuilder.loadTexts: tn3270PortEntry.setStatus('mandatory')
tn3270PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270PortIndex.setStatus('mandatory')
tn3270PortDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortDeviceName.setStatus('mandatory')
tn3270PortLanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortLanguageName.setStatus('mandatory')
tn3270PortExtendedAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortExtendedAttributes.setStatus('mandatory')
tn3270PortEorNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortEorNegotiation.setStatus('mandatory')
tn3270PortErrorLock = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortErrorLock.setStatus('mandatory')
kerbStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("login", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbStatus.setStatus('mandatory')
kerbRealm = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbRealm.setStatus('mandatory')
kerbQueryLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbQueryLimit.setStatus('mandatory')
kerbMasterName = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbMasterName.setStatus('mandatory')
kerbServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerName1.setStatus('mandatory')
kerbServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerName2.setStatus('mandatory')
kerbInsecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbInsecureLogins.setStatus('mandatory')
kerbSecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbSecureLogins.setStatus('mandatory')
kerbSecureLoginsFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbSecureLoginsFailed.setStatus('mandatory')
kerbPasswordChangeFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbPasswordChangeFailed.setStatus('mandatory')
kerbError = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbError.setStatus('mandatory')
kerbErrorTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 12), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbErrorTime.setStatus('mandatory')
kerbMasterAccess = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbMasterAccess.setStatus('mandatory')
kerbMasterAccessFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbMasterAccessFailed.setStatus('mandatory')
kerbServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccess1.setStatus('mandatory')
kerbServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccessFailed1.setStatus('mandatory')
kerbServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccess2.setStatus('mandatory')
kerbServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccessFailed2.setStatus('mandatory')
kerbPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 8, 19), )
if mibBuilder.loadTexts: kerbPortTable.setStatus('mandatory')
kerbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "kerbPortIndex"))
if mibBuilder.loadTexts: kerbPortEntry.setStatus('mandatory')
kerbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbPortIndex.setStatus('mandatory')
kerbPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("login", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbPortStatus.setStatus('mandatory')
psEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryNumber.setStatus('mandatory')
psEntryNumberLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryNumberLimit.setStatus('mandatory')
psEntryInvalidIndex = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryInvalidIndex.setStatus('mandatory')
psPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 9, 4), )
if mibBuilder.loadTexts: psPortTable.setStatus('mandatory')
psPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "psPortIndex"))
if mibBuilder.loadTexts: psPortEntry.setStatus('mandatory')
psPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPortIndex.setStatus('mandatory')
psPortDefaultInboundAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPortDefaultInboundAccess.setStatus('mandatory')
psPortDefaultOutboundAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPortDefaultOutboundAccess.setStatus('mandatory')
psTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 9, 5), )
if mibBuilder.loadTexts: psTable.setStatus('mandatory')
psEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "psEntryIndex"))
if mibBuilder.loadTexts: psEntry.setStatus('mandatory')
psEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryIndex.setStatus('mandatory')
psEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryStatus.setStatus('mandatory')
psEntryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryAddress.setStatus('mandatory')
psEntryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryMask.setStatus('mandatory')
psEntryAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryAccess.setStatus('mandatory')
psEntryDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryDirection.setStatus('mandatory')
psEntryPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryPortMap.setStatus('mandatory')
xremoteServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremoteServerName1.setStatus('mandatory')
xremoteServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremoteServerName2.setStatus('mandatory')
xremoteServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccess1.setStatus('mandatory')
xremoteServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccessFailed1.setStatus('mandatory')
xremoteServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccess2.setStatus('mandatory')
xremoteServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccessFailed2.setStatus('mandatory')
xremoteSessions = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteSessions.setStatus('mandatory')
xremotePortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 10, 8), )
if mibBuilder.loadTexts: xremotePortTable.setStatus('mandatory')
xremotePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "psPortIndex"))
if mibBuilder.loadTexts: xremotePortEntry.setStatus('mandatory')
xremotePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremotePortIndex.setStatus('mandatory')
xremotePortXremote = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXremote.setStatus('mandatory')
xremotePortXdmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("specific", 1), ("broadcast", 2), ("indirect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXdmQuery.setStatus('mandatory')
xremotePortXdmHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXdmHost.setStatus('mandatory')
xremoteServerClients = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerClients.setStatus('mandatory')
rotaryNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rotaryNumber.setStatus('mandatory')
rotaryTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 11, 2), )
if mibBuilder.loadTexts: rotaryTable.setStatus('mandatory')
rotaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "rotaryAddress"))
if mibBuilder.loadTexts: rotaryEntry.setStatus('mandatory')
rotaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rotaryAddress.setStatus('mandatory')
rotaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rotaryStatus.setStatus('mandatory')
rotaryPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rotaryPortMap.setStatus('mandatory')
lat = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 3))
latAnnounceServices = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latAnnounceServices.setStatus('mandatory')
latCircuitTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latCircuitTimer.setStatus('mandatory')
latIdentificationLengthLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latIdentificationLengthLimit.setStatus('mandatory')
latKeepaliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latKeepaliveTimer.setStatus('mandatory')
latMulticastTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latMulticastTimer.setStatus('mandatory')
latNodeLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNodeLimit.setStatus('mandatory')
latNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNumber.setStatus('mandatory')
latRetransmitLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latRetransmitLimit.setStatus('mandatory')
latLocalServiceGroups = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latLocalServiceGroups.setStatus('mandatory')
latGroupPurge = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latGroupPurge.setStatus('mandatory')
latNodePurge = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNodePurge.setStatus('mandatory')
latNodesRejected = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodesRejected.setStatus('mandatory')
latInMessages = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInMessages.setStatus('mandatory')
latOutMessages = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latOutMessages.setStatus('mandatory')
latInSessionsAccepted = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInSessionsAccepted.setStatus('mandatory')
latInSessionsRejected = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInSessionsRejected.setStatus('mandatory')
latAddressChange = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latAddressChange.setStatus('mandatory')
latInDuplicates = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInDuplicates.setStatus('mandatory')
latOutRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latOutRetransmits.setStatus('mandatory')
latInBadMessages = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInBadMessages.setStatus('mandatory')
latInBadSlots = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInBadSlots.setStatus('mandatory')
latInBadMulticasts = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInBadMulticasts.setStatus('mandatory')
latPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 23), )
if mibBuilder.loadTexts: latPortTable.setStatus('mandatory')
latPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 23, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "latPortIndex"))
if mibBuilder.loadTexts: latPortEntry.setStatus('mandatory')
latPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latPortIndex.setStatus('mandatory')
latPortAuthorizedGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortAuthorizedGroups.setStatus('mandatory')
latPortAutoPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortAutoPrompt.setStatus('mandatory')
latPortCurrentGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortCurrentGroups.setStatus('mandatory')
latPortRemoteModification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortRemoteModification.setStatus('mandatory')
latOfferedServiceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 24), )
if mibBuilder.loadTexts: latOfferedServiceTable.setStatus('mandatory')
latOfferedServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 24, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "latOfferedServiceName"))
if mibBuilder.loadTexts: latOfferedServiceEntry.setStatus('mandatory')
latOfferedServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceName.setStatus('mandatory')
latOfferedServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceStatus.setStatus('mandatory')
latOfferedServiceAllowConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceAllowConnections.setStatus('mandatory')
latOfferedServiceIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceIdentification.setStatus('mandatory')
latOfferedServicePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServicePassword.setStatus('mandatory')
latOfferedServicePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServicePortMap.setStatus('mandatory')
latOfferedServiceQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceQueuing.setStatus('mandatory')
latVisibleServiceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 25), )
if mibBuilder.loadTexts: latVisibleServiceTable.setStatus('mandatory')
latVisibleServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 25, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "latVisibleServiceName"))
if mibBuilder.loadTexts: latVisibleServiceEntry.setStatus('mandatory')
latVisibleServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceName.setStatus('mandatory')
latVisibleServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2), ("unknown", 3), ("unreachable", 4), ("reachable", 5), ("connected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceStatus.setStatus('mandatory')
latVisibleServiceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceNode.setStatus('mandatory')
latVisibleServiceConnectedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceConnectedSessions.setStatus('mandatory')
latVisibleServiceIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceIdentification.setStatus('mandatory')
latVisibleServiceRating = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceRating.setStatus('mandatory')
latNodeTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 26), )
if mibBuilder.loadTexts: latNodeTable.setStatus('mandatory')
latNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 26, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "latNodeName"))
if mibBuilder.loadTexts: latNodeEntry.setStatus('mandatory')
latNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeName.setStatus('mandatory')
latNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2), ("unknown", 3), ("unreachable", 4), ("reachable", 5), ("connected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeStatus.setStatus('mandatory')
latNodeConnectedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeConnectedSessions.setStatus('mandatory')
latNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeAddress.setStatus('mandatory')
latNodeDataLinkFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeDataLinkFrame.setStatus('mandatory')
latNodeIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeIdentification.setStatus('mandatory')
latNodeGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNodeGroups.setStatus('mandatory')
latNodeServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeServiceNumber.setStatus('mandatory')
latNodeZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNodeZero.setStatus('mandatory')
latNodeZeroTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeZeroTime.setStatus('mandatory')
latNodeInMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInMessages.setStatus('mandatory')
latNodeOutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutMessages.setStatus('mandatory')
latNodeInSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInSlots.setStatus('mandatory')
latNodeOutSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutSlots.setStatus('mandatory')
latNodeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInBytes.setStatus('mandatory')
latNodeOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutBytes.setStatus('mandatory')
latNodeAddressChange = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeAddressChange.setStatus('mandatory')
latNodeInDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInDuplicates.setStatus('mandatory')
latNodeOutRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutRetransmits.setStatus('mandatory')
latNodeInBadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInBadMessages.setStatus('mandatory')
latNodeInBadSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInBadSlots.setStatus('mandatory')
latNodeInSessionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInSessionsAccepted.setStatus('mandatory')
latNodeInSessionsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInSessionsRejected.setStatus('mandatory')
paramClient = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 7))
paramClientLoaderName = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientLoaderName.setStatus('mandatory')
paramClientLoaderAddressType = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 2), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientLoaderAddressType.setStatus('mandatory')
paramClientLoaderAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientLoaderAddress.setStatus('mandatory')
paramClientParameterVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientParameterVersion.setStatus('mandatory')
paramClientUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 5), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientUpdateTime.setStatus('mandatory')
paramClientServerCheck = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientServerCheck.setStatus('mandatory')
paramClientCheckInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientCheckInterval.setStatus('mandatory')
paramClientCheckNow = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientCheckNow.setStatus('mandatory')
paramClientServerLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientServerLimit.setStatus('mandatory')
paramClientRetransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientRetransmitInterval.setStatus('mandatory')
paramClientRetransmitLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientRetransmitLimit.setStatus('mandatory')
paramClientState = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("internal1", 3), ("internal2", 4), ("internal3", 5), ("internal4", 6), ("internal5", 7), ("internal6", 8), ("internal7", 9), ("internal8", 10), ("hold", 11), ("retry", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientState.setStatus('mandatory')
paramClientProtocolErrors = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientProtocolErrors.setStatus('mandatory')
paramClientServerRejects = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientServerRejects.setStatus('mandatory')
paramClientServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientServerNumber.setStatus('mandatory')
paramServerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 7, 16), )
if mibBuilder.loadTexts: paramServerTable.setStatus('mandatory')
paramServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 7, 16, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "paramServerName"))
if mibBuilder.loadTexts: paramServerEntry.setStatus('mandatory')
paramServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramServerName.setStatus('mandatory')
paramServerEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramServerEntryStatus.setStatus('mandatory')
paramServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramServerAddressType.setStatus('mandatory')
paramServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramServerAddress.setStatus('mandatory')
paramServerStoredVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramServerStoredVersion.setStatus('mandatory')
paramServerStoredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 6), DateTime().clone(hexValue="00")).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramServerStoredTime.setStatus('mandatory')
paramServerStoredStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("current", 2), ("ahead", 3), ("behind", 4), ("failing", 5), ("failed", 6), ("query", 7))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramServerStoredStatus.setStatus('mandatory')
paramServerStoredFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("protocolOut", 3), ("open", 4), ("read", 5), ("write", 6), ("resource", 7), ("protocolIn", 8), ("response", 9), ("close", 10), ("delete", 11), ("rename", 12), ("fileData", 13))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramServerStoredFailure.setStatus('mandatory')
char = MibIdentifier((1, 3, 6, 1, 3, 19))
class AutonomousType(ObjectIdentifier):
    pass

class InstancePointer(ObjectIdentifier):
    pass

charNumber = MibScalar((1, 3, 6, 1, 3, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charNumber.setStatus('mandatory')
charPortTable = MibTable((1, 3, 6, 1, 3, 19, 2), )
if mibBuilder.loadTexts: charPortTable.setStatus('mandatory')
charPortEntry = MibTableRow((1, 3, 6, 1, 3, 19, 2, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "charPortIndex"))
if mibBuilder.loadTexts: charPortEntry.setStatus('mandatory')
charPortIndex = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortIndex.setStatus('mandatory')
charPortName = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortName.setStatus('mandatory')
charPortType = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("physical", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortType.setStatus('mandatory')
charPortHardware = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 4), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortHardware.setStatus('mandatory')
charPortReset = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortReset.setStatus('mandatory')
charPortAdminStatus = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("off", 3), ("maintenance", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortAdminStatus.setStatus('mandatory')
charPortOperStatus = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("maintenance", 3), ("absent", 4), ("active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortOperStatus.setStatus('mandatory')
charPortLastChange = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortLastChange.setStatus('mandatory')
charPortInFlowType = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2), ("hardware", 3), ("ctsRts", 4), ("dsrDtr", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortInFlowType.setStatus('mandatory')
charPortOutFlowType = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2), ("hardware", 3), ("ctsRts", 4), ("dsrDtr", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortOutFlowType.setStatus('mandatory')
charPortInFlowState = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("stop", 3), ("go", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortInFlowState.setStatus('mandatory')
charPortOutFlowState = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("stop", 3), ("go", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortOutFlowState.setStatus('mandatory')
charPortInCharacters = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortInCharacters.setStatus('mandatory')
charPortOutCharacters = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortOutCharacters.setStatus('mandatory')
charPortAdminOrigin = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dynamic", 1), ("network", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortAdminOrigin.setStatus('mandatory')
charPortSessionMaximum = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortSessionMaximum.setStatus('mandatory')
charPortSessionNumber = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortSessionNumber.setStatus('mandatory')
charPortSessionIndex = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortSessionIndex.setStatus('mandatory')
charSessTable = MibTable((1, 3, 6, 1, 3, 19, 3), )
if mibBuilder.loadTexts: charSessTable.setStatus('mandatory')
charSessEntry = MibTableRow((1, 3, 6, 1, 3, 19, 3, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "charSessPortIndex"), (0, "XYPLEX-CONCATENATED-MIB", "charSessIndex"))
if mibBuilder.loadTexts: charSessEntry.setStatus('mandatory')
charSessPortIndex = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessPortIndex.setStatus('mandatory')
charSessIndex = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessIndex.setStatus('mandatory')
charSessKill = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charSessKill.setStatus('mandatory')
charSessState = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connecting", 1), ("connected", 2), ("disconnecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessState.setStatus('mandatory')
charSessProtocol = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 5), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessProtocol.setStatus('mandatory')
wellKnownProtocols = MibIdentifier((1, 3, 6, 1, 3, 19, 4))
protocolOther = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 1))
protocolTelnet = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 2))
protocolRlogin = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 3))
protocolLat = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 4))
protocolX29 = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 5))
protocolVtp = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 6))
charSessOperOrigin = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("network", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessOperOrigin.setStatus('mandatory')
charSessInCharacters = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessInCharacters.setStatus('mandatory')
charSessOutCharacters = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessOutCharacters.setStatus('mandatory')
charSessConnectionId = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 9), InstancePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessConnectionId.setStatus('mandatory')
charSessStartTime = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessStartTime.setStatus('mandatory')
rs232 = MibIdentifier((1, 3, 6, 1, 3, 20))
rs232Number = MibScalar((1, 3, 6, 1, 3, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232Number.setStatus('mandatory')
rs232PortTable = MibTable((1, 3, 6, 1, 3, 20, 2), )
if mibBuilder.loadTexts: rs232PortTable.setStatus('mandatory')
rs232PortEntry = MibTableRow((1, 3, 6, 1, 3, 20, 2, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "rs232PortIndex"))
if mibBuilder.loadTexts: rs232PortEntry.setStatus('mandatory')
rs232PortIndex = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortIndex.setStatus('mandatory')
rs232PortType = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("rs232", 2), ("rs422", 3), ("rs423", 4), ("v35", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortType.setStatus('mandatory')
rs232PortInSigNumber = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortInSigNumber.setStatus('mandatory')
rs232PortOutSigNumber = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortOutSigNumber.setStatus('mandatory')
rs232PortInSpeed = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232PortInSpeed.setStatus('mandatory')
rs232PortOutSpeed = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232PortOutSpeed.setStatus('mandatory')
rs232AsyncPortTable = MibTable((1, 3, 6, 1, 3, 20, 3), )
if mibBuilder.loadTexts: rs232AsyncPortTable.setStatus('mandatory')
rs232AsyncPortEntry = MibTableRow((1, 3, 6, 1, 3, 20, 3, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "rs232AsyncPortIndex"))
if mibBuilder.loadTexts: rs232AsyncPortEntry.setStatus('mandatory')
rs232AsyncPortIndex = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortIndex.setStatus('mandatory')
rs232AsyncPortBits = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortBits.setStatus('mandatory')
rs232AsyncPortStopBits = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("one-and-half", 3), ("dynamic", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortStopBits.setStatus('mandatory')
rs232AsyncPortParity = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortParity.setStatus('mandatory')
rs232AsyncPortAutobaud = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortAutobaud.setStatus('mandatory')
rs232AsyncPortParityErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortParityErrs.setStatus('mandatory')
rs232AsyncPortFramingErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortFramingErrs.setStatus('mandatory')
rs232AsyncPortOverrunErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortOverrunErrs.setStatus('mandatory')
rs232SyncPortTable = MibTable((1, 3, 6, 1, 3, 20, 4), )
if mibBuilder.loadTexts: rs232SyncPortTable.setStatus('mandatory')
rs232SyncPortEntry = MibTableRow((1, 3, 6, 1, 3, 20, 4, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "rs232SyncPortIndex"))
if mibBuilder.loadTexts: rs232SyncPortEntry.setStatus('mandatory')
rs232SyncPortIndex = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortIndex.setStatus('mandatory')
rs232SyncPortClockSource = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("split", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortClockSource.setStatus('mandatory')
rs232SyncPortFrameCheckErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortFrameCheckErrs.setStatus('mandatory')
rs232SyncPortTransmitUnderrunErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortTransmitUnderrunErrs.setStatus('mandatory')
rs232SyncPortReceiveOverrunErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortReceiveOverrunErrs.setStatus('mandatory')
rs232SyncPortInterruptedFrames = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortInterruptedFrames.setStatus('mandatory')
rs232SyncPortAbortedFrames = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortAbortedFrames.setStatus('mandatory')
rs232InSigTable = MibTable((1, 3, 6, 1, 3, 20, 5), )
if mibBuilder.loadTexts: rs232InSigTable.setStatus('mandatory')
rs232InSigEntry = MibTableRow((1, 3, 6, 1, 3, 20, 5, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "rs232InSigPortIndex"), (0, "XYPLEX-CONCATENATED-MIB", "rs232InSigName"))
if mibBuilder.loadTexts: rs232InSigEntry.setStatus('mandatory')
rs232InSigPortIndex = MibTableColumn((1, 3, 6, 1, 3, 20, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigPortIndex.setStatus('mandatory')
rs232InSigName = MibTableColumn((1, 3, 6, 1, 3, 20, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("rts", 1), ("cts", 2), ("dsr", 3), ("dtr", 4), ("ri", 5), ("dcd", 6), ("sq", 7), ("srs", 8), ("srts", 9), ("scts", 10), ("sdcd", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigName.setStatus('mandatory')
rs232InSigState = MibTableColumn((1, 3, 6, 1, 3, 20, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigState.setStatus('mandatory')
rs232InSigChanges = MibTableColumn((1, 3, 6, 1, 3, 20, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigChanges.setStatus('mandatory')
rs232OutSigTable = MibTable((1, 3, 6, 1, 3, 20, 6), )
if mibBuilder.loadTexts: rs232OutSigTable.setStatus('mandatory')
rs232OutSigEntry = MibTableRow((1, 3, 6, 1, 3, 20, 6, 1), ).setIndexNames((0, "XYPLEX-CONCATENATED-MIB", "rs232OutSigPortIndex"), (0, "XYPLEX-CONCATENATED-MIB", "rs232OutSigName"))
if mibBuilder.loadTexts: rs232OutSigEntry.setStatus('mandatory')
rs232OutSigPortIndex = MibTableColumn((1, 3, 6, 1, 3, 20, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigPortIndex.setStatus('mandatory')
rs232OutSigName = MibTableColumn((1, 3, 6, 1, 3, 20, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("rts", 1), ("cts", 2), ("dsr", 3), ("dtr", 4), ("ri", 5), ("dcd", 6), ("sq", 7), ("srs", 8), ("srts", 9), ("scts", 10), ("sdcd", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigName.setStatus('mandatory')
rs232OutSigState = MibTableColumn((1, 3, 6, 1, 3, 20, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigState.setStatus('mandatory')
rs232OutSigChanges = MibTableColumn((1, 3, 6, 1, 3, 20, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigChanges.setStatus('mandatory')
mibBuilder.exportSymbols("XYPLEX-CONCATENATED-MIB", sysDateTime=sysDateTime, etherTxMultipleCollisionFrames=etherTxMultipleCollisionFrames, snmpAgentSetCommunity=snmpAgentSetCommunity, ipInHdrErrors=ipInHdrErrors, ipInReceives=ipInReceives, netLoginPortLoaderAddressType=netLoginPortLoaderAddressType, psPortIndex=psPortIndex, rs232PortOutSigNumber=rs232PortOutSigNumber, basicPortIdleTimeout=basicPortIdleTimeout, transmission=transmission, tcpConnLocalAddress=tcpConnLocalAddress, rcp=rcp, activeTable=activeTable, icmpInAddrMasks=icmpInAddrMasks, sessionLogTable=sessionLogTable, atEntry=atEntry, ipRouteMetric2=ipRouteMetric2, bootControlDumpBootpTftp=bootControlDumpBootpTftp, netLogin=netLogin, paramClientServerLimit=paramClientServerLimit, tcpPortEntry=tcpPortEntry, charPortHardware=charPortHardware, tn3270LanguageStatus=tn3270LanguageStatus, basicPortLogins=basicPortLogins, kerbServerAccessFailed2=kerbServerAccessFailed2, basicSerialPortBreak=basicSerialPortBreak, sysHardwareType=sysHardwareType, basicSerialPortLineEditorNextLine=basicSerialPortLineEditorNextLine, rotaryAddress=rotaryAddress, paramServerTable=paramServerTable, psEntryNumber=psEntryNumber, featType=featType, loadFileCreation=loadFileCreation, basicPortAutoConnect=basicPortAutoConnect, sysSoftwareVersionType=sysSoftwareVersionType, xInternet=xInternet, etherAlignmentErrors=etherAlignmentErrors, latInBadSlots=latInBadSlots, etherXTxIndex=etherXTxIndex, latNodePurge=latNodePurge, ifOutUcastPkts=ifOutUcastPkts, snmpInNoSuchNames=snmpInNoSuchNames, snmp=snmp, basicSerialPortModemControl=basicSerialPortModemControl, kerbServerAccessFailed1=kerbServerAccessFailed1, protocolOther=protocolOther, basicSerialPortInterrupts=basicSerialPortInterrupts, sysResourceLacks=sysResourceLacks, latPortIndex=latPortIndex, bootControlParamProprietary=bootControlParamProprietary, deviceProtection=deviceProtection, rcpRemoteAddress=rcpRemoteAddress, loadFileTable=loadFileTable, basicSerialPortPause=basicSerialPortPause, paramDrive=paramDrive, latOfferedServiceEntry=latOfferedServiceEntry, etherXTxExcessiveCollisions=etherXTxExcessiveCollisions, ifTable=ifTable, sysDumperAddress=sysDumperAddress, sessionLogEvent=sessionLogEvent, rs232SyncPortReceiveOverrunErrs=rs232SyncPortReceiveOverrunErrs, setClientTable=setClientTable, sessionLogConnectionID=sessionLogConnectionID, tn3270LanguageName=tn3270LanguageName, psPortTable=psPortTable, charSessEntry=charSessEntry, tcpEstabResets=tcpEstabResets, bootControlLoadBootpTftp=bootControlLoadBootpTftp, psEntryInvalidIndex=psEntryInvalidIndex, xremotePortXremote=xremotePortXremote, snmpInBadCommunityNames=snmpInBadCommunityNames, ipNetToMediaEntry=ipNetToMediaEntry, bootControlLoadMop=bootControlLoadMop, icmp=icmp, queuePortIndex=queuePortIndex, latPortEntry=latPortEntry, dialPortDialbackTimeout=dialPortDialbackTimeout, ipAdEntBcastAddr=ipAdEntBcastAddr, ipAutoSubnetMask=ipAutoSubnetMask, deviceFormatMedium=deviceFormatMedium, etherTable=etherTable, slipEntry=slipEntry, latRetransmitLimit=latRetransmitLimit, ifMtu=ifMtu, icmpInTimeExcds=icmpInTimeExcds, netLoginServerName=netLoginServerName, domainResolverNameNumber=domainResolverNameNumber, icmpOutEchoReps=icmpOutEchoReps, aToEValue=aToEValue, DisplayString=DisplayString, featTable=featTable, atPhysAddress=atPhysAddress, latOfferedServiceName=latOfferedServiceName, latNodeServiceNumber=latNodeServiceNumber, queueStatus=queueStatus, rs232SyncPortTable=rs232SyncPortTable, ipRouteDest=ipRouteDest, sessionLogLimit=sessionLogLimit, snmpAgentGetClientNumber=snmpAgentGetClientNumber, slipLocalAddress=slipLocalAddress, dumpFileEntry=dumpFileEntry, aToELanguageEntry=aToELanguageEntry, latInDuplicates=latInDuplicates, menuCommand=menuCommand, tn3270LanguageTable=tn3270LanguageTable, deviceGetFileHostIdentification=deviceGetFileHostIdentification, udpLocalPort=udpLocalPort, paramServerAddress=paramServerAddress, basicSerialPortLineEditorBeginning=basicSerialPortLineEditorBeginning, udpNoPorts=udpNoPorts, tn3270=tn3270, latNodeAddressChange=latNodeAddressChange, icmpOutTimeExcds=icmpOutTimeExcds, ipAddrEntry=ipAddrEntry, sysObjectID=sysObjectID, domainResolverAddress1=domainResolverAddress1, namedIdentification=namedIdentification, snmpInGetResponses=snmpInGetResponses, nameSource=nameSource, slipPortPacketsDiscarded=slipPortPacketsDiscarded, sysMaintenancePassword=sysMaintenancePassword, basicSerialPortIndex=basicSerialPortIndex, paramServerName=paramServerName, basicInactivityTimer=basicInactivityTimer, paramServerStoredFailure=paramServerStoredFailure, deviceOperation=deviceOperation, netLoginPortScriptUse=netLoginPortScriptUse, xremotePortTable=xremotePortTable, paramServerEntry=paramServerEntry, ipReasmReqds=ipReasmReqds, charPortName=charPortName, snmpInGetNexts=snmpInGetNexts, basicSessions=basicSessions, paramFileIdentification=paramFileIdentification, psEntryPortMap=psEntryPortMap, tcpAttemptFails=tcpAttemptFails, charPortOperStatus=charPortOperStatus, loadActive=loadActive, sessionLog=sessionLog, latPortAutoPrompt=latPortAutoPrompt, tn3270PortLanguageName=tn3270PortLanguageName, snmpOutTooBigs=snmpOutTooBigs, psEntryAddress=psEntryAddress, latVisibleServiceTable=latVisibleServiceTable, ipAddrTable=ipAddrTable, latNodeZeroTime=latNodeZeroTime, latPortCurrentGroups=latPortCurrentGroups, basicLoginPassword=basicLoginPassword, basicPrivilegedPassword=basicPrivilegedPassword, rs232PortTable=rs232PortTable, rs232AsyncPortEntry=rs232AsyncPortEntry, dumpFileNumber=dumpFileNumber, kerbPortEntry=kerbPortEntry, rotaryPortMap=rotaryPortMap, ospf=ospf, latOfferedServiceTable=latOfferedServiceTable, rs232SyncPortFrameCheckErrs=rs232SyncPortFrameCheckErrs, snmpAgentTrapClientNumber=snmpAgentTrapClientNumber, latInSessionsRejected=latInSessionsRejected, rs232OutSigPortIndex=rs232OutSigPortIndex, ipRouteEntry=ipRouteEntry, rs232AsyncPortStopBits=rs232AsyncPortStopBits, ifEntry=ifEntry, latNodeInSlots=latNodeInSlots, ifInNUcastPkts=ifInNUcastPkts, loadFileNumber=loadFileNumber, rs232InSigPortIndex=rs232InSigPortIndex, etherTxIndex=etherTxIndex, kerbPasswordChangeFailed=kerbPasswordChangeFailed, basicPortRemoteSessions=basicPortRemoteSessions, bootClient=bootClient, latNodeOutSlots=latNodeOutSlots, tn3270PortKeymapStatus=tn3270PortKeymapStatus, tcpRtoAlgorithm=tcpRtoAlgorithm, queuePortQueuing=queuePortQueuing, menuPortIndex=menuPortIndex, paramClientServerCheck=paramClientServerCheck, ipRouteProto=ipRouteProto, xIp=xIp, xremoteServerAccess1=xremoteServerAccess1, bootControlLoadProprietary=bootControlLoadProprietary, trapClientEntryStatus=trapClientEntryStatus, eToAOffset=eToAOffset, eventText=eventText, bootControlLoadLocal=bootControlLoadLocal, resLacks=resLacks, queueServiceName=queueServiceName, basicPortMessageCodes=basicPortMessageCodes, nameAddress=nameAddress, tn3270PortDeviceName=tn3270PortDeviceName, eToALanguageTable=eToALanguageTable, getClientAddress=getClientAddress, latKeepaliveTimer=latKeepaliveTimer, resLackTime=resLackTime, tn3270KeyTable=tn3270KeyTable, bootControlLoadRarpTftp=bootControlLoadRarpTftp, udp=udp, etherEntry=etherEntry, psEntryDirection=psEntryDirection, ipRouteNextHop=ipRouteNextHop, mib_2=mib_2, clientIdentification=clientIdentification, ifNumber=ifNumber, ifDescr=ifDescr, slipPortPacketLengthErrors=slipPortPacketLengthErrors, tn3270LanguageEntry=tn3270LanguageEntry, kerbServerName2=kerbServerName2, ipOutDiscards=ipOutDiscards, tcpPassiveOpens=tcpPassiveOpens, sessionLogUserName=sessionLogUserName, basicPortMultisessions=basicPortMultisessions, slipMask=slipMask, latOfferedServiceAllowConnections=latOfferedServiceAllowConnections, decnet=decnet, sysDumperAddressType=sysDumperAddressType, slipNetworkPacketsDiscarded=slipNetworkPacketsDiscarded, rs232InSigTable=rs232InSigTable, charPortAdminOrigin=charPortAdminOrigin, dialPortEntry=dialPortEntry, telnetSerialPortIndex=telnetSerialPortIndex, ipFragCreates=ipFragCreates, charSessStartTime=charSessStartTime, basicPortZero=basicPortZero, icmpOutTimestampReps=icmpOutTimestampReps, tn3270KeyDeviceName=tn3270KeyDeviceName, tn3270KeyName=tn3270KeyName, latInMessages=latInMessages, kerbMasterName=kerbMasterName, etherMulticastBytesOut=etherMulticastBytesOut, getClientTable=getClientTable, psPortDefaultOutboundAccess=psPortDefaultOutboundAccess, queueServicePortName=queueServicePortName, clientIdentificationType=clientIdentificationType, tcpOutRsts=tcpOutRsts, sysFeatureNumber=sysFeatureNumber, rs232OutSigTable=rs232OutSigTable, telnetSerialPortEntry=telnetSerialPortEntry, icmpInEchoReps=icmpInEchoReps, psEntryIndex=psEntryIndex, dumpSize=dumpSize, rs232PortInSpeed=rs232PortInSpeed, snmpOutSetRequests=snmpOutSetRequests, latCircuitTimer=latCircuitTimer, kerbServerName1=kerbServerName1, basicPortIdleTimeouts=basicPortIdleTimeouts, telnetPortIncomingTcpPort=telnetPortIncomingTcpPort, xremoteServerAccessFailed2=xremoteServerAccessFailed2, charPortOutFlowState=charPortOutFlowState, ipRoutingDiscards=ipRoutingDiscards, latVisibleServiceName=latVisibleServiceName, ipForwDatagrams=ipForwDatagrams, sysInitializeDelay=sysInitializeDelay, kerbSecureLoginsFailed=kerbSecureLoginsFailed, basicSerialPortLineEditorBackspace=basicSerialPortLineEditorBackspace)
mibBuilder.exportSymbols("XYPLEX-CONCATENATED-MIB", wellKnownProtocols=wellKnownProtocols, snmpInBadValues=snmpInBadValues, snmpOutPkts=snmpOutPkts, paramClientUpdateTime=paramClientUpdateTime, tcpRtoMin=tcpRtoMin, rotaryEntry=rotaryEntry, rs232OutSigName=rs232OutSigName, domainResolverTtl=domainResolverTtl, sysInitialize=sysInitialize, ipNetToMediaTable=ipNetToMediaTable, sysHardwareVersion=sysHardwareVersion, rs232=rs232, menu=menu, latNodeTable=latNodeTable, ip=ip, ifOutDiscards=ifOutDiscards, basicSerialPortEntry=basicSerialPortEntry, sessionLogConnectTime=sessionLogConnectTime, latNodeOutBytes=latNodeOutBytes, telnetSerialPortTransmitCharacterTimes=telnetSerialPortTransmitCharacterTimes, sessionLogIndex=sessionLogIndex, ipGatewayAddress2=ipGatewayAddress2, snmpOutGetNexts=snmpOutGetNexts, tcpRetransSegs=tcpRetransSegs, DateTime=DateTime, getClientAddressType=getClientAddressType, xTcp=xTcp, tn3270DeviceName=tn3270DeviceName, tcp=tcp, sysDefineMode=sysDefineMode, ipRouteType=ipRouteType, dumpDrive=dumpDrive, slipState=slipState, domainResolver=domainResolver, paramClientCheckNow=paramClientCheckNow, latNodesRejected=latNodesRejected, ipRouteInfo=ipRouteInfo, getClientIndex=getClientIndex, sessionLogPort=sessionLogPort, telnetSerialPortOptionDisplay=telnetSerialPortOptionDisplay, ipReasmTimeout=ipReasmTimeout, char=char, basicPortZeroTime=basicPortZeroTime, latNodeInSessionsAccepted=latNodeInSessionsAccepted, tn3270DeviceStatus=tn3270DeviceStatus, paramFileEntry=paramFileEntry, paramClientLoaderAddress=paramClientLoaderAddress, psPortEntry=psPortEntry, xremotePortEntry=xremotePortEntry, trapClientAddressType=trapClientAddressType, kerbRealm=kerbRealm, namedLoadService=namedLoadService, charSessPortIndex=charSessPortIndex, rs232AsyncPortParityErrs=rs232AsyncPortParityErrs, snmpInBadVersions=snmpInBadVersions, icmpOutMsgs=icmpOutMsgs, ipDefaultTTL=ipDefaultTTL, activeParameterVersion=activeParameterVersion, latInSessionsAccepted=latInSessionsAccepted, snmpInGenErrs=snmpInGenErrs, charSessOperOrigin=charSessOperOrigin, sysUpTime=sysUpTime, rs232OutSigChanges=rs232OutSigChanges, icmpInParmProbs=icmpInParmProbs, ipInDiscards=ipInDiscards, icmpInTimestampReps=icmpInTimestampReps, loadFileSize=loadFileSize, kerbPortStatus=kerbPortStatus, snmpOutBadValues=snmpOutBadValues, tn3270KeyCharacterSequence=tn3270KeyCharacterSequence, basicEventTotal=basicEventTotal, activeSoftwareVersionType=activeSoftwareVersionType, icmpInRedirects=icmpInRedirects, charPortInFlowState=charPortInFlowState, tn3270ScreenDeviceName=tn3270ScreenDeviceName, icmpOutAddrMaskReps=icmpOutAddrMaskReps, namedLoadFile=namedLoadFile, snmpAgent=snmpAgent, icmpOutDestUnreachs=icmpOutDestUnreachs, paramClientRetransmitLimit=paramClientRetransmitLimit, loadMerit=loadMerit, kerbError=kerbError, namedIdentificationType=namedIdentificationType, basicSerialPortLineEditorDeleteBeginning=basicSerialPortLineEditorDeleteBeginning, icmpOutTimestamps=icmpOutTimestamps, sysName=sysName, tn3270PortEorNegotiation=tn3270PortEorNegotiation, charPortInFlowType=charPortInFlowType, activeFunction=activeFunction, xEgp=xEgp, basicSerialPortDTRAssert=basicSerialPortDTRAssert, telnetPortNewlineTranslation=telnetPortNewlineTranslation, basicErrorReport=basicErrorReport, dump=dump, paramServerAddressType=paramServerAddressType, routerIp=routerIp, bootControlLoadInternetServer=bootControlLoadInternetServer, charPortSessionMaximum=charPortSessionMaximum, basicLoginPrompt=basicLoginPrompt, telnetSerialPortTransmitMode=telnetSerialPortTransmitMode, queueServicePortIndex=queueServicePortIndex, basicSerialPortLocalSwitch=basicSerialPortLocalSwitch, sysZeroBase=sysZeroBase, netLoginPortLoaderFile=netLoginPortLoaderFile, telnetSerialPortEraseLineCharacter=telnetSerialPortEraseLineCharacter, latVisibleServiceRating=latVisibleServiceRating, setClientEntry=setClientEntry, basicPortBroadcast=basicPortBroadcast, queueJob=queueJob, sysZeroBaseTime=sysZeroBaseTime, atNetAddress=atNetAddress, snmpAgentGetCommunity=snmpAgentGetCommunity, icmpOutEchos=icmpOutEchos, trapClientAddress=trapClientAddress, eToALanguageEntry=eToALanguageEntry, aToELanguageName=aToELanguageName, deviceName=deviceName, ifOperStatus=ifOperStatus, ifInOctets=ifInOctets, xyplex=xyplex, tn3270DeviceKeyNumber=tn3270DeviceKeyNumber, basicSessionsLimit=basicSessionsLimit, paramFileTable=paramFileTable, slipPortPacketsSent=slipPortPacketsSent, basicPortIndex=basicPortIndex, setClientIndex=setClientIndex, eventTable=eventTable, deviceFormat=deviceFormat, basicBroadcast=basicBroadcast, xremoteSessions=xremoteSessions, paramClientServerRejects=paramClientServerRejects, paramServerStoredTime=paramServerStoredTime, eToAValue=eToAValue, deviceGetFileName=deviceGetFileName, clientTable=clientTable, clientEntry=clientEntry, deviceGetFileHostIdentificationType=deviceGetFileHostIdentificationType, basicSerialPortTable=basicSerialPortTable, dialPortDialback=dialPortDialback, telnetPortEorReflection=telnetPortEorReflection, charSessState=charSessState, latNodeIdentification=latNodeIdentification, netLoginPortScriptEcho=netLoginPortScriptEcho, paramClient=paramClient, tcpOutSegs=tcpOutSegs, latOfferedServicePortMap=latOfferedServicePortMap, ifInUnknownProtos=ifInUnknownProtos, deviceIndex=deviceIndex, basicSessionsHigh=basicSessionsHigh, snmpInReadOnlys=snmpInReadOnlys, rs232AsyncPortIndex=rs232AsyncPortIndex, loadCompleted=loadCompleted, domainResolverSuffix=domainResolverSuffix, basicPortStatus=basicPortStatus, snmpInTotalSetVars=snmpInTotalSetVars, resType=resType, tcpInSegs=tcpInSegs, dumpActive=dumpActive, snmpEnableAuthenTraps=snmpEnableAuthenTraps, icmpOutParmProbs=icmpOutParmProbs, tcpPortTable=tcpPortTable, tcpPortIndex=tcpPortIndex, ipRouteAge=ipRouteAge, paramClientCheckInterval=paramClientCheckInterval, charSessIndex=charSessIndex, rs232Number=rs232Number, tcpConnLocalPort=tcpConnLocalPort, sysRomVersion=sysRomVersion, paramFileNumber=paramFileNumber, latOutRetransmits=latOutRetransmits, latMulticastTimer=latMulticastTimer, ifLastChange=ifLastChange, basicSerialPortTypeaheadLimit=basicSerialPortTypeaheadLimit, latNodeInBadSlots=latNodeInBadSlots, ipRouteMetric5=ipRouteMetric5, netLoginServerEntry=netLoginServerEntry, netLoginPortLoaderAddress=netLoginPortLoaderAddress, latOfferedServiceQueuing=latOfferedServiceQueuing, latIdentificationLengthLimit=latIdentificationLengthLimit, basicPortDefaultDestLATNodeName=basicPortDefaultDestLATNodeName, etherIndex=etherIndex, latInBadMulticasts=latInBadMulticasts, etherXTxTable=etherXTxTable, basicSerialPortLineEditorPreviousLine=basicSerialPortLineEditorPreviousLine, atIfIndex=atIfIndex, bootControlLoadTftpDirect=bootControlLoadTftpDirect, tcpConnRemAddress=tcpConnRemAddress, sessionLogRemoteName=sessionLogRemoteName, kerbMasterAccessFailed=kerbMasterAccessFailed, dumpFileIdentification=dumpFileIdentification, tn3270PortErrorLock=tn3270PortErrorLock, kerbMasterAccess=kerbMasterAccess, sysZeroAll=sysZeroAll, basicSerialPortLineEditorCancel=basicSerialPortLineEditorCancel, tn3270KeyStatus=tn3270KeyStatus, latOfferedServiceIdentification=latOfferedServiceIdentification, snmpInTotalReqVars=snmpInTotalReqVars, snmpInGetRequests=snmpInGetRequests, bootControlDumpLocal=bootControlDumpLocal, loadFileSoftwareVersion=loadFileSoftwareVersion, basicActivePorts=basicActivePorts, routerUdp=routerUdp, kerbPortTable=kerbPortTable, system=system, basicPortVerification=basicPortVerification, xremotePortXdmQuery=xremotePortXdmQuery, basicWelcome=basicWelcome, ipInDelivers=ipInDelivers, tn3270ScreenCharacterSequence=tn3270ScreenCharacterSequence, telnetPortTerminalType=telnetPortTerminalType, sessionLogEntry=sessionLogEntry, charPortSessionIndex=charPortSessionIndex, paramClientRetransmitInterval=paramClientRetransmitInterval, ipNetToMediaType=ipNetToMediaType, menuSelectionPrompt=menuSelectionPrompt, rs232InSigName=rs232InSigName, kerbStatus=kerbStatus, xremoteServerAccess2=xremoteServerAccess2, resWorst=resWorst, telnetPortTable=telnetPortTable, tcpInErrs=tcpInErrs, resEntry=resEntry, dumpFileCreation=dumpFileCreation, ipGatewayAddress1=ipGatewayAddress1, sysDump=sysDump, domainResolverAddress2=domainResolverAddress2, latNodeLimit=latNodeLimit, xremoteServerName1=xremoteServerName1, charPortIndex=charPortIndex, queueNumber=queueNumber, tn3270ScreenActionName=tn3270ScreenActionName, rotaryStatus=rotaryStatus, ifSpeed=ifSpeed, queueLimit=queueLimit, psTable=psTable, bootControl=bootControl, netLoginServerStatus=netLoginServerStatus, xremote=xremote, rs232AsyncPortParity=rs232AsyncPortParity, snmpOutGenErrs=snmpOutGenErrs, sysIdent=sysIdent, deviceEntry=deviceEntry, ifOutNUcastPkts=ifOutNUcastPkts, ipForwarding=ipForwarding, clientDiagnosticFile=clientDiagnosticFile, menuPortTable=menuPortTable, charPortSessionNumber=charPortSessionNumber, eventEntry=eventEntry, slipPortPacketChecksumErrors=slipPortPacketChecksumErrors, aToEOffset=aToEOffset, xremotePortIndex=xremotePortIndex, featEntry=featEntry, activeIdentificationType=activeIdentificationType, tn3270PortTable=tn3270PortTable)
mibBuilder.exportSymbols("XYPLEX-CONCATENATED-MIB", telnetSerialPortInterruptCharacter=telnetSerialPortInterruptCharacter, latAnnounceServices=latAnnounceServices, slipPortPacketsReceived=slipPortPacketsReceived, rs232OutSigState=rs232OutSigState, sysCrash=sysCrash, rs232SyncPortClockSource=rs232SyncPortClockSource, namedDumpService=namedDumpService, snmpInBadCommunityUses=snmpInBadCommunityUses, namedDiagnosticFile=namedDiagnosticFile, udpEntry=udpEntry, paramServerStoredVersion=paramServerStoredVersion, menuIndex=menuIndex, ipAdEntIfIndex=ipAdEntIfIndex, udpOutDatagrams=udpOutDatagrams, xremotePortXdmHost=xremotePortXdmHost, paramClientProtocolErrors=paramClientProtocolErrors, tcpMaxConn=tcpMaxConn, latNodeStatus=latNodeStatus, tn3270Device3278Model=tn3270Device3278Model, xremoteServerAccessFailed1=xremoteServerAccessFailed1, AutonomousType=AutonomousType, basicPortDefaultUserName=basicPortDefaultUserName, rs232SyncPortIndex=rs232SyncPortIndex, basicPortLastInCharacter=basicPortLastInCharacter, rs232SyncPortInterruptedFrames=rs232SyncPortInterruptedFrames, clientLoadService=clientLoadService, characterDep=characterDep, setClientAddress=setClientAddress, paramClientLoaderAddressType=paramClientLoaderAddressType, charPortTable=charPortTable, telnetSerialPortNewlineMode=telnetSerialPortNewlineMode, paramClientState=paramClientState, tcpConnState=tcpConnState, basicLock=basicLock, latNodeInDuplicates=latNodeInDuplicates, basicActivePortsHigh=basicActivePortsHigh, protocolTelnet=protocolTelnet, basicSerialPortDCDTimeout=basicSerialPortDCDTimeout, psEntryMask=psEntryMask, trapClientTable=trapClientTable, nameEntry=nameEntry, charPortEntry=charPortEntry, charSessKill=charSessKill, kerbServerAccess2=kerbServerAccess2, bootControlDumpProprietary=bootControlDumpProprietary, sysLoaderAddress=sysLoaderAddress, basicDeviceNumber=basicDeviceNumber, charPortReset=charPortReset, bootClientStatus=bootClientStatus, sysTimeZone=sysTimeZone, at=at, rs232InSigState=rs232InSigState, ipReasmFails=ipReasmFails, paramFileParameterVersion=paramFileParameterVersion, dialPortIndex=dialPortIndex, ifIndex=ifIndex, activeSoftwareVersion=activeSoftwareVersion, ifSpecific=ifSpecific, bootControlLoadInternetGateway=bootControlLoadInternetGateway, basicSerialPortBackwardSwitch=basicSerialPortBackwardSwitch, tn3270ScreenTable=tn3270ScreenTable, tn3270PortIndex=tn3270PortIndex, latPortTable=latPortTable, netLoginPortEntry=netLoginPortEntry, menuPortMenuStatus=menuPortMenuStatus, rs232PortOutSpeed=rs232PortOutSpeed, bootServer=bootServer, xremoteServerName2=xremoteServerName2, telnet=telnet, charSessOutCharacters=charSessOutCharacters, kerberos=kerberos, basicSerialPortPassword=basicSerialPortPassword, charNumber=charNumber, ipRouteMetric1=ipRouteMetric1, eToALanguageName=eToALanguageName, loadFileName=loadFileName, PhysAddress=PhysAddress, ifInDiscards=ifInDiscards, rotaryTable=rotaryTable, tn3270KeyDescription=tn3270KeyDescription, telnetSerialPortEraseKeyCharacter=telnetSerialPortEraseKeyCharacter, resTable=resTable, clientName=clientName, ifOutOctets=ifOutOctets, nameName=nameName, snmpAgentTrapCommunity=snmpAgentTrapCommunity, basicPortDefaultDestAction=basicPortDefaultDestAction, menuText=menuText, latPortAuthorizedGroups=latPortAuthorizedGroups, dumpFileSize=dumpFileSize, slip=slip, latNodeEntry=latNodeEntry, ipAdEntReasmMaxSize=ipAdEntReasmMaxSize, latOfferedServiceStatus=latOfferedServiceStatus, dumpFileTable=dumpFileTable, latAddressChange=latAddressChange, ipNetToMediaIfIndex=ipNetToMediaIfIndex, queuePortTable=queuePortTable, resAdminMaximum=resAdminMaximum, eventIndex=eventIndex, basicPortLossNotification=basicPortLossNotification, param=param, latVisibleServiceIdentification=latVisibleServiceIdentification, namedName=namedName, sysSoftwareVersion=sysSoftwareVersion, psEntryStatus=psEntryStatus, rs232SyncPortTransmitUnderrunErrs=rs232SyncPortTransmitUnderrunErrs, queueHigh=queueHigh, latNodeInBadMessages=latNodeInBadMessages, icmpOutAddrMasks=icmpOutAddrMasks, dumpService=dumpService, sysLoadSoftware=sysLoadSoftware, basicSerialPortLineEditorInsertToggle=basicSerialPortLineEditorInsertToggle, snmpOutNoSuchNames=snmpOutNoSuchNames, paramFileIdentificationType=paramFileIdentificationType, netLoginPortTable=netLoginPortTable, basicPortTable=basicPortTable, kerbServerAccess1=kerbServerAccess1, paramClientLoaderName=paramClientLoaderName, snmpOutTraps=snmpOutTraps, latVisibleServiceEntry=latVisibleServiceEntry, atTable=atTable, ipRouteIfIndex=ipRouteIfIndex, activeIdentification=activeIdentification, etherTxEntry=etherTxEntry, latNodeOutRetransmits=latNodeOutRetransmits, latNodeGroups=latNodeGroups, portSecurity=portSecurity, ipOutNoRoutes=ipOutNoRoutes, slipNetworkPacketsReceived=slipNetworkPacketsReceived, icmpInMsgs=icmpInMsgs, basicEventPurge=basicEventPurge, xInternetDep=xInternetDep, bootControlParamRarpTftp=bootControlParamRarpTftp, getClientEntry=getClientEntry, tn3270DeviceType=tn3270DeviceType, sysContact=sysContact, sysLocation=sysLocation, egp=egp, ipAdEntNetMask=ipAdEntNetMask, tn3270LanguageNumber=tn3270LanguageNumber, load=load, kerbQueryLimit=kerbQueryLimit, AddressType=AddressType, lat=lat, queuePortEntry=queuePortEntry, paramClientServerNumber=paramClientServerNumber, icmpInAddrMaskReps=icmpInAddrMaskReps, dial=dial, latNodeConnectedSessions=latNodeConnectedSessions, telnetSerialPortCsiEscape=telnetSerialPortCsiEscape, namedEntry=namedEntry, tcpPortConnectByAddress=tcpPortConnectByAddress, ipInAddrErrors=ipInAddrErrors, bootControlDumpMop=bootControlDumpMop, basicPortLastOutCharacter=basicPortLastOutCharacter, dumpFileEntryStatus=dumpFileEntryStatus, telnetSerialPortEchoMode=telnetSerialPortEchoMode, udpTable=udpTable, menuEntry=menuEntry, ifOutQLen=ifOutQLen, ipOutRequests=ipOutRequests, icmpOutSrcQuenchs=icmpOutSrcQuenchs, xSystem=xSystem, sysChassisFaultTransitions=sysChassisFaultTransitions, resCurrent=resCurrent, deviceDescr=deviceDescr, basicActiveUsers=basicActiveUsers, latNodeZero=latNodeZero, basicSerialPortPrompt=basicSerialPortPrompt, InstancePointer=InstancePointer, basicSerialPortDSRObserve=basicSerialPortDSRObserve, deviceGetFile=deviceGetFile, latNumber=latNumber, tcpActiveOpens=tcpActiveOpens, telnetPortIndex=telnetPortIndex, tcpConnRemPort=tcpConnRemPort, tn3270PortExtendedAttributes=tn3270PortExtendedAttributes, latNodeInMessages=latNodeInMessages, activeCurrentSequence=activeCurrentSequence, queueEntry=queueEntry, trapClientEntry=trapClientEntry, charSessTable=charSessTable, basicPortAutoLogin=basicPortAutoLogin, snmpInASNParseErrs=snmpInASNParseErrs, tcpConnEntry=tcpConnEntry, protocolRlogin=protocolRlogin, character=character, rs232AsyncPortFramingErrs=rs232AsyncPortFramingErrs, telnetSerialPortSynchronizeCharacter=telnetSerialPortSynchronizeCharacter, nameTable=nameTable, telnetSerialPortQueryCharacter=telnetSerialPortQueryCharacter, rs232PortIndex=rs232PortIndex, getClientEntryStatus=getClientEntryStatus, psEntryAccess=psEntryAccess, menuStatus=menuStatus, bootControlParamLocal=bootControlParamLocal, menuNumber=menuNumber, icmpOutRedirects=icmpOutRedirects, paramFileSize=paramFileSize, loadFileEntry=loadFileEntry, kerbErrorTime=kerbErrorTime, sysLoaderName=sysLoaderName, rs232PortType=rs232PortType, basicPortDefaultDestProtocol=basicPortDefaultDestProtocol, basicPortDefaultProtocol=basicPortDefaultProtocol, activeStatus=activeStatus, tcpPortWindowSize=tcpPortWindowSize, dumpMerit=dumpMerit, snmpOutGetRequests=snmpOutGetRequests, tcpRtoMax=tcpRtoMax, etherTxTable=etherTxTable, clientDumpService=clientDumpService, ipRouteMetric3=ipRouteMetric3, charPortLastChange=charPortLastChange, psEntryNumberLimit=psEntryNumberLimit, paramStorageActive=paramStorageActive, ipFragOKs=ipFragOKs, dumpFileIdentificationType=dumpFileIdentificationType, etherMulticastBytesIn=etherMulticastBytesIn, sysChassisVersion=sysChassisVersion, namedTable=namedTable, charSessConnectionId=charSessConnectionId, etherTxSingleCollisionFrames=etherTxSingleCollisionFrames, telnetPortBinaryMode=telnetPortBinaryMode, rotary=rotary, netLoginPortIndex=netLoginPortIndex, basicClientNumber=basicClientNumber, basicLogLimit=basicLogLimit, latGroupPurge=latGroupPurge, netLoginServerPath=netLoginServerPath, paramActive=paramActive, tcpConnTable=tcpConnTable, basicPortDefaultDestName=basicPortDefaultDestName, basicSerialPortLimitedCommands=basicSerialPortLimitedCommands, latOfferedServicePassword=latOfferedServicePassword, latOutMessages=latOutMessages, rs232AsyncPortBits=rs232AsyncPortBits, latNodeAddress=latNodeAddress, rs232OutSigEntry=rs232OutSigEntry, ipNetToMediaNetAddress=ipNetToMediaNetAddress, basicPasswordRetryLimit=basicPasswordRetryLimit, etherMulticastIndex=etherMulticastIndex, ipNetToMediaPhysAddress=ipNetToMediaPhysAddress, routerPolicy=routerPolicy, charSessProtocol=charSessProtocol, paramFileEntryStatus=paramFileEntryStatus, rs232AsyncPortOverrunErrs=rs232AsyncPortOverrunErrs, activeState=activeState, latNodeOutMessages=latNodeOutMessages, snmpInPkts=snmpInPkts, ethernet=ethernet, sysChassisState=sysChassisState, paramDefaultService=paramDefaultService)
mibBuilder.exportSymbols("XYPLEX-CONCATENATED-MIB", loadService=loadService, aToELanguageTable=aToELanguageTable, xremoteServerClients=xremoteServerClients, ipAdEntAddr=ipAdEntAddr, sysDescr=sysDescr, icmpInEchos=icmpInEchos, deviceTable=deviceTable, etherMulticastTable=etherMulticastTable, loadFileSoftwareVersionType=loadFileSoftwareVersionType, basicSerialPortTerminalType=basicSerialPortTerminalType, setClientAddressType=setClientAddressType, slipNetworkPacketsSent=slipNetworkPacketsSent, sessionLogDisconnectTime=sessionLogDisconnectTime, namedEntryStatus=namedEntryStatus, protocolX29=protocolX29, basicSerialPortDSRLogout=basicSerialPortDSRLogout, protocolLat=protocolLat, basicPortDialup=basicPortDialup, rs232InSigChanges=rs232InSigChanges, menuPortEntry=menuPortEntry, telnetPortOutgoingTcpPort=telnetPortOutgoingTcpPort, slipIndex=slipIndex, clientLoadFile=clientLoadFile, snmpOutGetResponses=snmpOutGetResponses, latPortRemoteModification=latPortRemoteModification, latInBadMessages=latInBadMessages, resOperMaximum=resOperMaximum, basicSerialPortForwardSwitch=basicSerialPortForwardSwitch, charSessInCharacters=charSessInCharacters, paramServerEntryStatus=paramServerEntryStatus, dumpCompleted=dumpCompleted, activeEntry=activeEntry, menuTable=menuTable, bootControlParamMop=bootControlParamMop, sysInstalledMemory=sysInstalledMemory, tn3270DeviceNumber=tn3270DeviceNumber, kerbInsecureLogins=kerbInsecureLogins, nameStatus=nameStatus, charPortAdminStatus=charPortAdminStatus, charPortOutFlowType=charPortOutFlowType, rs232PortInSigNumber=rs232PortInSigNumber, basicSerialPortLimitedView=basicSerialPortLimitedView, sysServices=sysServices, ipRouteMask=ipRouteMask, tn3270KeyEntry=tn3270KeyEntry, menuContinuePrompt=menuContinuePrompt, latNodeName=latNodeName, latNodeInBytes=latNodeInBytes, snmpInTooBigs=snmpInTooBigs, slipTable=slipTable, queue=queue, kerbSecureLogins=kerbSecureLogins, tn3270PortEntry=tn3270PortEntry, bsBasic=bsBasic, basicSerialPortLineEditorEnd=basicSerialPortLineEditorEnd, queueSourceName=queueSourceName, latVisibleServiceNode=latVisibleServiceNode, bootControlParamBootpTftp=bootControlParamBootpTftp, nameTtl=nameTtl, queueTable=queueTable, rotaryNumber=rotaryNumber, icmpInTimestamps=icmpInTimestamps, basicSerialPortSignalCheck=basicSerialPortSignalCheck, basicSerialPortLineEditor=basicSerialPortLineEditor, ipRouteMetric4=ipRouteMetric4, bootControlDumpRarpTftp=bootControlDumpRarpTftp, telnetSerialPortTable=telnetSerialPortTable, rs232PortEntry=rs232PortEntry, basicPortDefaultSessionMode=basicPortDefaultSessionMode, ipRouteTable=ipRouteTable, paramClientParameterVersion=paramClientParameterVersion, ifInErrors=ifInErrors, bootControlLoadInternetFile=bootControlLoadInternetFile, psEntry=psEntry, basicSerialPortLineEditorDeleteLine=basicSerialPortLineEditorDeleteLine, udpInErrors=udpInErrors, netLoginNumber=netLoginNumber, tn3270ScreenEntry=tn3270ScreenEntry, rs232SyncPortEntry=rs232SyncPortEntry, latLocalServiceGroups=latLocalServiceGroups, basicConsoleLogoutDisconnect=basicConsoleLogoutDisconnect, charPortInCharacters=charPortInCharacters, ipInUnknownProtos=ipInUnknownProtos, basicPortDefaultDestLATPortName=basicPortDefaultDestLATPortName, clientEntryStatus=clientEntryStatus, sysResourceNumber=sysResourceNumber, paramFileWrite=paramFileWrite, tn3270DeviceScreenNumber=tn3270DeviceScreenNumber, sessionLogOutCharacters=sessionLogOutCharacters, ipReassembly=ipReassembly, etherMulticastEntry=etherMulticastEntry, basicSerialPortNoLoss=basicSerialPortNoLoss, tn3270ScreenStatus=tn3270ScreenStatus, resourceLack=resourceLack, ifType=ifType, charPortType=charPortType, basicActiveNumber=basicActiveNumber, basicActiveUsersHigh=basicActiveUsersHigh, protocolVtp=protocolVtp, paramService=paramService, icmpInDestUnreachs=icmpInDestUnreachs, telnetSerialPortAttentionCharacter=telnetSerialPortAttentionCharacter, rs232AsyncPortAutobaud=rs232AsyncPortAutobaud, etherXTxEntry=etherXTxEntry, sysLocalName=sysLocalName, netLoginServerTable=netLoginServerTable, basicActiveLimit=basicActiveLimit, snmpInTraps=snmpInTraps, basicPortEntry=basicPortEntry, rs232InSigEntry=rs232InSigEntry, dialPortTable=dialPortTable, charPortOutCharacters=charPortOutCharacters, ipReasmOKs=ipReasmOKs, snmpInSetRequests=snmpInSetRequests, tn3270DeviceTable=tn3270DeviceTable, sysChassisType=sysChassisType, basicPortConnectResume=basicPortConnectResume, tcpCurrEstab=tcpCurrEstab, basicOffersSent=basicOffersSent, trapClientIndex=trapClientIndex, icmpInSrcQuenchs=icmpInSrcQuenchs, sessionLogEventDetail=sessionLogEventDetail, basicSerialPortLineEditorRedisplay=basicSerialPortLineEditorRedisplay, sessionLogInCharacters=sessionLogInCharacters, telnetSerialPortAbortOutputCharacter=telnetSerialPortAbortOutputCharacter, latNodeDataLinkFrame=latNodeDataLinkFrame, basicSerialPortLineEditorForward=basicSerialPortLineEditorForward, ifAdminStatus=ifAdminStatus, latNodeInSessionsRejected=latNodeInSessionsRejected, psPortDefaultInboundAccess=psPortDefaultInboundAccess, activeFile=activeFile, featStatus=featStatus, basicPortActiveUserName=basicPortActiveUserName, ipFragFails=ipFragFails, icmpInErrors=icmpInErrors, latVisibleServiceStatus=latVisibleServiceStatus, latVisibleServiceConnectedSessions=latVisibleServiceConnectedSessions, rs232SyncPortAbortedFrames=rs232SyncPortAbortedFrames, icmpOutErrors=icmpOutErrors, snmpAgentSetClientNumber=snmpAgentSetClientNumber, paramServerStoredStatus=paramServerStoredStatus, activeBytesRemaining=activeBytesRemaining, interfaces=interfaces, basicSerialPortLineEditorQuotingCharacter=basicSerialPortLineEditorQuotingCharacter, basicPortInactivityLogout=basicPortInactivityLogout, kerbPortIndex=kerbPortIndex, rs232AsyncPortTable=rs232AsyncPortTable, etherFCSErrors=etherFCSErrors, setClientEntryStatus=setClientEntryStatus, ifPhysAddress=ifPhysAddress, tn3270DeviceEntry=tn3270DeviceEntry, slipRemoteAddress=slipRemoteAddress, udpInDatagrams=udpInDatagrams, udpLocalAddress=udpLocalAddress, ifOutErrors=ifOutErrors, telnetPortEntry=telnetPortEntry, basic=basic, ifInUcastPkts=ifInUcastPkts, sysLoaderAddressType=sysLoaderAddressType)
