#
# PySNMP MIB module DES-1210-10_AXME (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES-1210-10_AXME
# Produced by pysmi-0.3.4 at Mon Apr 29 18:23:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, SnmpSecurityLevel, SnmpEngineID = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString", "SnmpSecurityLevel", "SnmpEngineID")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, iso, TimeTicks, Counter64, ModuleIdentity, Gauge32, IpAddress, Bits, ObjectIdentity, NotificationType, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "iso", "TimeTicks", "Counter64", "ModuleIdentity", "Gauge32", "IpAddress", "Bits", "ObjectIdentity", "NotificationType", "Unsigned32", "Counter32")
TruthValue, TextualConvention, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "DisplayString", "RowStatus")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DES1210SeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75)).setLabel("dlink-DES1210SeriesProd")
des_1210_10axme = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14)).setLabel("des-1210-10axme")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class OwnerString(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class RmonStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1))
dhcpBOOTPRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 1))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 2))
dhcpBOOTPRelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2))
dhcpBOOTPRelayManagementOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 3))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 4))
companySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5))
companySTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7))
companyLA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8))
companyStaticMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10))
companyGVRPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14))
companyACLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 18))
companyStaticMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 19))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20))
companyVoiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21))
companyRMON = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22))
companyAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23))
companyGuestVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 24))
companyMacNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 25))
companySMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 26))
companyISMVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27))
companyDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28))
companyDHCPLocalRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 29))
companyTrapSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 30))
companyLLDPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32))
companyCPUInterfaceFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33))
companyAutoSurveillanceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysLoginTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setStatus('current')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
sysGroupInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 1225), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGroupInterval.setStatus('current')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
sysPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 13), )
if mibBuilder.loadTexts: sysPortCtrlTable.setStatus('current')
sysPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 13, 1), ).setIndexNames((0, "DES-1210-10_AXME", "sysPortCtrlIndex"), (0, "DES-1210-10_AXME", "sysPortCtrlMediumType"))
if mibBuilder.loadTexts: sysPortCtrlEntry.setStatus('current')
sysPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlIndex.setStatus('current')
sysPortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101, 102))).clone(namedValues=NamedValues(("copper", 100), ("fiber1G", 101), ("fiber100M", 102)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlMediumType.setStatus('current')
sysPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1000M-Full", 1), ("rate100M-Full", 2), ("rate100M-Half", 3), ("rate10M-Full", 4), ("rate10M-Half", 5), ("auto", 6), ("disable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlSpeed.setStatus('current')
sysPortCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("rate1000M-Full", 2), ("rate100M-Full", 3), ("rate100M-Half", 4), ("rate10M-Full", 5), ("rate10M-Half", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setStatus('current')
sysPortCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlMDI.setStatus('current')
sysPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setStatus('current')
sysPortCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setStatus('current')
sysPortCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100BaseSFPModule", 3), ("fiberwith1000BaseSFPModule", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlType.setStatus('current')
sysPortDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 14), )
if mibBuilder.loadTexts: sysPortDescriptionTable.setStatus('current')
sysPortDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 14, 1), ).setIndexNames((0, "DES-1210-10_AXME", "sysPortDescIndex"), (0, "DES-1210-10_AXME", "sysPortDescMediumType"))
if mibBuilder.loadTexts: sysPortDescriptionEntry.setStatus('current')
sysPortDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortDescIndex.setStatus('current')
sysPortDescMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101, 102))).clone(namedValues=NamedValues(("copper", 100), ("fiber1G", 101), ("fiber100M", 102)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortDescMediumType.setStatus('current')
sysPortDescString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortDescString.setStatus('current')
sysPortErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 15), )
if mibBuilder.loadTexts: sysPortErrTable.setStatus('current')
sysPortErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 15, 1), ).setIndexNames((0, "DES-1210-10_AXME", "sysPortErrPortIndex"))
if mibBuilder.loadTexts: sysPortErrEntry.setStatus('current')
sysPortErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortIndex.setStatus('current')
sysPortErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortState.setStatus('current')
sysPortErrPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortStatus.setStatus('current')
sysPortErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("lbd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortReason.setStatus('current')
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
sysWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebState.setStatus('current')
sysWebPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebPortNumber.setStatus('current')
sysARPAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysARPAgingTime.setStatus('current')
sysMACAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMACAgingTime.setStatus('current')
telnetsettingManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetsettingManagementOnOff.setStatus('current')
telnetUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetUDPPort.setStatus('current')
autoRefreshConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("refreshimenever", 0), ("refreshtime10secs", 1), ("refreshtime30secs", 2), ("refreshtime1min", 3), ("refreshtime5mins", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoRefreshConfiguration.setStatus('current')
sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddrCfgMode.setStatus('current')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpSubnetMask.setStatus('current')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
dhcpOption12Status = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12Status.setStatus('current')
dhcpOption12HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 2, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12HostName.setStatus('current')
tftpFwServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwServerIpAddress.setStatus('current')
tftpFwImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwImageFileName.setStatus('current')
tftpFwTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTftpOperation.setStatus('current')
tftpFwTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTftpOperationStatus.setStatus('current')
tftpCfgServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgServerIpAddress.setStatus('current')
tftpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigFileName.setStatus('current')
tftpConfigTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigTftpOperation.setStatus('current')
tftpConfigTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpConfigTftpOperationStatus.setStatus('current')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('current')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('current')
stpBridgeGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1))
stpModuleStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpModuleStatus.setStatus('current')
stpProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2), ("mstp", 3))).clone('mstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpProtocolVersion.setStatus('current')
stpBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgePriority.setStatus('current')
stpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTxHoldCount.setStatus('current')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 5), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 6), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 7), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
stpFowardBPDU = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpFowardBPDU.setStatus('current')
stpRootBridge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootBridge.setStatus('current')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setStatus('current')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMaxAge.setStatus('current')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('current')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setStatus('current')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "stpPort"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
stpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPort.setStatus('current')
stpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortStatus.setStatus('current')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
stpAdminPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminPortPathCost.setStatus('current')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
stpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortProtocolMigration.setStatus('current')
stpPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 0), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEdge.setStatus('current')
stpPortAdminP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortAdminP2P.setStatus('current')
stpPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedRole.setStatus('current')
stpPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedTCN.setStatus('current')
stpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 11), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortHelloTime.setStatus('current')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortState.setStatus('current')
stpPortFowardBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortFowardBPDU.setStatus('current')
mstConfigurationIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3))
mstiConfigurationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiConfigurationName.setStatus('current')
mstiRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiRevisionLevel.setStatus('current')
mstCistVlanMapped = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped.setStatus('current')
mstCistVlanMapped2k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped2k.setStatus('current')
mstCistVlanMapped3k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped3k.setStatus('current')
mstCistVlanMapped4k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped4k.setStatus('current')
mstVlanMstiMappingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 7), )
if mibBuilder.loadTexts: mstVlanMstiMappingTable.setStatus('current')
mstVlanMstiMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 7, 1), ).setIndexNames((0, "DES-1210-10_AXME", "mstInstanceIndex"))
if mibBuilder.loadTexts: mstVlanMstiMappingEntry.setStatus('current')
mstInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceIndex.setStatus('current')
mstSetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstSetVlanList.setStatus('current')
mstResetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstResetVlanList.setStatus('current')
mstInstanceVlanMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstInstanceVlanMapped.setStatus('current')
mstInstanceVlanMapped2k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstInstanceVlanMapped2k.setStatus('current')
mstInstanceVlanMapped3k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstInstanceVlanMapped3k.setStatus('current')
mstInstanceVlanMapped4k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 3, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstInstanceVlanMapped4k.setStatus('current')
stpInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 4))
mstCistBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistBridgePriority.setStatus('current')
mstCistStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistStatus.setStatus('current')
mstMstiBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 4, 3), )
if mibBuilder.loadTexts: mstMstiBridgeTable.setStatus('current')
mstMstiBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 4, 3, 1), ).setIndexNames((0, "DES-1210-10_AXME", "mstMstiInstanceIndex"))
if mibBuilder.loadTexts: mstMstiBridgeEntry.setStatus('current')
mstMstiInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiInstanceIndex.setStatus('current')
mstMstiBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiBridgePriority.setStatus('current')
mstMstiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiStatus.setStatus('current')
stpInstancePortTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5))
mstCistPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 1), )
if mibBuilder.loadTexts: mstCistPortTable.setStatus('current')
mstCistPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "mstCistPort"))
if mibBuilder.loadTexts: mstCistPortEntry.setStatus('current')
mstCistPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mstCistPort.setStatus('current')
mstCistPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 1, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistPortDesignatedBridge.setStatus('current')
mstCistPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortAdminPathCost.setStatus('current')
mstCistPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortPathCost.setStatus('current')
mstCistPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortPriority.setStatus('current')
mstCistForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistForcePortState.setStatus('current')
mstCistCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurrentPortRole.setStatus('current')
mstMstiPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 2), )
if mibBuilder.loadTexts: mstMstiPortTable.setStatus('current')
mstMstiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "mstMstiPort"), (0, "DES-1210-10_AXME", "mstInstanceIndex"))
if mibBuilder.loadTexts: mstMstiPortEntry.setStatus('current')
mstMstiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mstMstiPort.setStatus('current')
mstMstiPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 2, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPortDesignatedBridge.setStatus('current')
mstMstiPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiPortAdminPathCost.setStatus('current')
mstMstiPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiPortPathCost.setStatus('current')
mstMstiPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiPortPriority.setStatus('current')
mstMstiForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiForcePortState.setStatus('current')
mstMstiCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 6, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiCurrentPortRole.setStatus('current')
staticMcastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 19, 1), )
if mibBuilder.loadTexts: staticMcastTable.setStatus('current')
staticMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 19, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "staticMcastVlanID"), (0, "DES-1210-10_AXME", "staticMcastMac"), (0, "DES-1210-10_AXME", "staticMcastEgressPorts"))
if mibBuilder.loadTexts: staticMcastEntry.setStatus('current')
staticMcastVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastVlanID.setStatus('current')
staticMcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 19, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastMac.setStatus('current')
staticMcastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 19, 1, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastEgressPorts.setStatus('current')
staticMcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 19, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMcastStatus.setStatus('current')
dot1qVlanManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementOnOff.setStatus('current')
dot1qVlanManagementid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementid.setStatus('current')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 6), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 6, 1), ).setIndexNames((0, "DES-1210-10_AXME", "dot1qVlanName"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 6, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 6, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanForbiddenPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanAdvertisementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanAdvertisementStatus.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
dot1qVlanUngisterMCFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 8), )
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterTable.setStatus('current')
dot1qVlanUngisterMCFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 8, 1), ).setIndexNames((0, "DES-1210-10_AXME", "dot1qVlanUngisterMCFilterVlanId"))
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterEntry.setStatus('current')
dot1qVlanUngisterMCFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterVlanId.setStatus('current')
dot1qVlanUngisterMCFiltermode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("filter", 1), ("forward", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFiltermode.setStatus('current')
gvrpGVRPGlobalSettingsOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpGVRPGlobalSettingsOnOff.setStatus('current')
gvrpSettingsJoinTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsJoinTime.setStatus('current')
gvrpSettingsLeaveTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsLeaveTime.setStatus('current')
gvrpSettingsLeaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsLeaveAllTime.setStatus('current')
gvrpSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 5), )
if mibBuilder.loadTexts: gvrpSettingsTable.setStatus('current')
gvrpSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 5, 1), ).setIndexNames((0, "DES-1210-10_AXME", "gvrpSettingsPortControlIndex"))
if mibBuilder.loadTexts: gvrpSettingsEntry.setStatus('current')
gvrpSettingsPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gvrpSettingsPortControlIndex.setStatus('current')
gvrpSettingsPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsPVID.setStatus('current')
gvrpSettingsGVRPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsGVRPState.setStatus('current')
gvrpSettingsIngressChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsIngressChecking.setStatus('current')
gvrpSettingsAcceptableFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allFrames", 1), ("taggedOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsAcceptableFrameType.setStatus('current')
dhcpBOOTPRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayState.setStatus('current')
dhcpBOOTPRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayHopCount.setStatus('current')
dhcpBOOTPRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayTimeThreshold.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 1), )
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsTable.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "dhcpBOOTPRelayInterface"), (0, "DES-1210-10_AXME", "dhcpBOOTPRelayServerIP"))
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsEntry.setStatus('current')
dhcpBOOTPRelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterface.setStatus('current')
dhcpBOOTPRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayServerIP.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsRowStatus.setStatus('current')
dhcpBOOTPRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82State.setStatus('current')
dhcpBOOTPRelayOption82CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CheckState.setStatus('current')
dhcpBOOTPRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82Policy.setStatus('current')
dhcpBOOTPRelayOption82RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteIDType.setStatus('current')
dhcpBOOTPRelayOption82RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 28, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteID.setStatus('current')
dhcpLocalRelayGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayGlobalState.setStatus('current')
dhcpLocalRelayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 29, 2), )
if mibBuilder.loadTexts: dhcpLocalRelayTable.setStatus('current')
dhcpLocalRelayTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 29, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "dhcpLocalRelaySettingsVLANID"))
if mibBuilder.loadTexts: dhcpLocalRelayTableEntry.setStatus('current')
dhcpLocalRelaySettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsVLANID.setStatus('current')
dhcpLocalRelaySettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 29, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2))).clone(namedValues=NamedValues(("enabled", 3), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsState.setStatus('current')
laSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 1))
laPortControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 2))
class PortLaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lacp", 1), ("static", 2), ("disable", 3))

class LacpKey(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

laStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laStatus.setStatus('current')
laPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 1, 3), )
if mibBuilder.loadTexts: laPortChannelTable.setStatus('current')
laPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 1, 3, 1), ).setIndexNames((0, "DES-1210-10_AXME", "laPortChannelIfIndex"))
if mibBuilder.loadTexts: laPortChannelEntry.setStatus('current')
laPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelIfIndex.setStatus('current')
laPortChannelMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 1, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMemberList.setStatus('current')
laPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 1, 3, 1, 3), PortLaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMode.setStatus('current')
laPortChannelMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 1, 3, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMasterPort.setStatus('current')
laAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sourceMAC", 1), ("destMAC", 2), ("sourceAndDestMAC", 3), ("sourceIP", 4), ("destIP", 5), ("sourceAndDestIP", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laAlgorithm.setStatus('current')
laPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 2, 1), )
if mibBuilder.loadTexts: laPortControlTable.setStatus('current')
laPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "laPortControlIndex"))
if mibBuilder.loadTexts: laPortControlEntry.setStatus('current')
laPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortControlIndex.setStatus('current')
laPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorPortPriority.setStatus('current')
laPortActorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorActivity.setStatus('current')
laPortActorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorTimeout.setStatus('current')
staticDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDisableAutoLearn.setStatus('current')
staticAutoLearningList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearningList.setStatus('current')
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 9, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('current')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 9, 3, 1), ).setIndexNames((0, "DES-1210-10_AXME", "staticVlanID"), (0, "DES-1210-10_AXME", "staticMac"), (0, "DES-1210-10_AXME", "staticPort"))
if mibBuilder.loadTexts: staticEntry.setStatus('current')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticVlanID.setStatus('current')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMac.setStatus('current')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticPort.setStatus('current')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 9, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('current')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3))
igsAccessAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 5))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('current')
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('current')
igsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRobustnessValue.setStatus('current')
igsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsGrpQueryInterval.setStatus('current')
igsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryInterval.setStatus('current')
igsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryMaxResponseTime.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 3, 1), ).setIndexNames((0, "DES-1210-10_AXME", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterPortList.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 4, 1), ).setIndexNames((0, "DES-1210-10_AXME", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRtrPortList.setStatus('current')
igsVlanFbdRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 4, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFbdRtrPortList.setStatus('current')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 5, 1), ).setIndexNames((0, "DES-1210-10_AXME", "igsVlanMulticastGroupVlanId"), (0, "DES-1210-10_AXME", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
igsAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 5, 1), )
if mibBuilder.loadTexts: igsAccessAuthTable.setStatus('current')
igsAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 5, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "igsAccessAuthPortIndex"))
if mibBuilder.loadTexts: igsAccessAuthEntry.setStatus('current')
igsAccessAuthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsAccessAuthPortIndex.setStatus('current')
igsAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsAccessAuthState.setStatus('current')
swAuthenCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 1))
swAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthStatus.setStatus('current')
swAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portBase", 1), ("macBase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthMode.setStatus('current')
authProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authProtocolRadiusEap", 1), ("authProtocolLocal", 2))).clone('authProtocolRadiusEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authProtocol.setStatus('current')
swAuthPortAccessCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2))
swAuthPortAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1), )
if mibBuilder.loadTexts: swAuthPortAccessControlTable.setStatus('current')
swAuthPortAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "swAuthAuthConfigPortNumber"))
if mibBuilder.loadTexts: swAuthPortAccessControlEntry.setStatus('current')
swAuthAuthConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthConfigPortNumber.setStatus('current')
swAuthAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthQuietPeriod.setStatus('current')
swAuthAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthSuppTimeout.setStatus('current')
swAuthAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthServerTimeout.setStatus('current')
swAuthAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthMaxReq.setStatus('current')
swAuthAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthTxPeriod.setStatus('current')
swAuthAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthPeriod.setStatus('current')
swAuthAuthReAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthentication.setStatus('current')
swAuthAuthConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthConfigPortControl.setStatus('current')
swAuthAuthCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authenticator", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthCapability.setStatus('current')
swAuthAuthDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthDirection.setStatus('current')
swAuthUser = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 3))
swAuthUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 3, 1), )
if mibBuilder.loadTexts: swAuthUserTable.setStatus('current')
swAuthUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 3, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "swAuthUserName"))
if mibBuilder.loadTexts: swAuthUserEntry.setStatus('current')
swAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthUserName.setStatus('current')
swAuthUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthUserPassword.setStatus('current')
swAuthUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthUserStatus.setStatus('current')
swAuthRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4))
swAuthRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4, 1), )
if mibBuilder.loadTexts: swAuthRadiusServerTable.setStatus('current')
swAuthRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "swAuthRadiusServerIndex"))
if mibBuilder.loadTexts: swAuthRadiusServerEntry.setStatus('current')
swAuthRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthRadiusServerIndex.setStatus('current')
swAuthRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAddress.setStatus('current')
swAuthRadiusServerAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAuthenticationPort.setStatus('current')
swAuthRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAccountingPort.setStatus('current')
swAuthRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerTimeout.setStatus('current')
swAuthRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerRetransmit.setStatus('current')
swAuthRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerKey.setStatus('current')
swAuthRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 23, 4, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerStatus.setStatus('current')
cosScheduleMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosScheduleMechanism.setStatus('current')
cosOutputSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 2))
cosClassTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 2, 1), )
if mibBuilder.loadTexts: cosClassTable.setStatus('current')
cosClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "cosClassIndex"))
if mibBuilder.loadTexts: cosClassEntry.setStatus('current')
cosClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosClassIndex.setStatus('current')
cosWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 55))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosWeight.setStatus('current')
portMapPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 3))
portMapPriTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 3, 1), )
if mibBuilder.loadTexts: portMapPriTable.setStatus('current')
portMapPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 3, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "portMapPriPortIndex"))
if mibBuilder.loadTexts: portMapPriEntry.setStatus('current')
portMapPriPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMapPriPortIndex.setStatus('current')
portMapPriClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMapPriClass.setStatus('current')
qosDefaultUserPri = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 4))
qosDefaultUserPriTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 4, 1), )
if mibBuilder.loadTexts: qosDefaultUserPriTable.setStatus('current')
qosDefaultUserPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 4, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "qosDefaultUserPriPortIndex"))
if mibBuilder.loadTexts: qosDefaultUserPriEntry.setStatus('current')
qosDefaultUserPriPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDefaultUserPriPortIndex.setStatus('current')
qosDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDefaultPriority.setStatus('current')
qosEffectiveDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosEffectiveDefaultPriority.setStatus('current')
qosUserPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 5))
qosUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 5, 1), )
if mibBuilder.loadTexts: qosUserPriorityTable.setStatus('current')
qosUserPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 5, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "qosUserPriIndex"))
if mibBuilder.loadTexts: qosUserPriEntry.setStatus('current')
qosUserPriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUserPriIndex.setStatus('current')
qosUserPriClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUserPriClass.setStatus('current')
qosPriSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 7))
qosPriSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 7, 1), )
if mibBuilder.loadTexts: qosPriSettingsTable.setStatus('current')
qosPriSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 7, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "qosPriSetPortIndex"))
if mibBuilder.loadTexts: qosPriSettingsEntry.setStatus('current')
qosPriSetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriSetPortIndex.setStatus('current')
qosPriSetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriSetPortType.setStatus('current')
qosDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6))
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 6, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
qosAclPrioritySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8))
aclQosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1), )
if mibBuilder.loadTexts: aclQosTable.setStatus('current')
aclQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "aclQosIndex"))
if mibBuilder.loadTexts: aclQosEntry.setStatus('current')
aclQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclQosIndex.setStatus('current')
aclQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mac", 0), ("ip", 1), ("tcp", 2), ("udp", 3), ("vlanid", 4), ("protocol", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosType.setStatus('current')
aclQosMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosMACAddr.setStatus('current')
aclQosIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosIPAddr.setStatus('current')
aclQosTCPUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosTCPUDPPort.setStatus('current')
aclQosVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosVlanID.setStatus('current')
aclQosProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosProtocol.setStatus('current')
aclQosAssignClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosAssignClass.setStatus('current')
aclQosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 12, 8, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosStatus.setStatus('current')
bandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 1, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
broadcastStormCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 3))
broadcastStormCtrlGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlGlobalOnOff.setStatus('current')
broadcastStormCtrlLimitType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcastonly", 1), ("multicastAndbroadcast", 2), ("dlfMulticastAndbroadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlLimitType.setStatus('current')
broadcastStormCtrlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlThreshold.setStatus('current')
trafficCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 4))
trafficCtrlTrap = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("stormOccurred", 1), ("stormCleared", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlTrap.setStatus('current')
trafficCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 4, 2), )
if mibBuilder.loadTexts: trafficCtrlTable.setStatus('current')
trafficCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 4, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "trafficCtrlIndex"))
if mibBuilder.loadTexts: trafficCtrlEntry.setStatus('current')
trafficCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCtrlIndex.setStatus('current')
trafficCtrlActionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("drop", 0), ("shutdown", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlActionMode.setStatus('current')
trafficCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("b", 1), ("m", 2), ("mb", 3), ("u", 4), ("ub", 5), ("um", 6), ("umb", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlType.setStatus('current')
trafficCtrlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 102400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlThreshold.setStatus('current')
trafficCtrlCountDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlCountDown.setStatus('current')
trafficCtrlTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 13, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlTimeInterval.setStatus('current')
securityTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 1))
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 1, 2), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 1, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "trustedHostIpAddr"), (0, "DES-1210-10_AXME", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
securityARPSpoofPrevent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 3))
aRPSpoofPreventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 3, 1), )
if mibBuilder.loadTexts: aRPSpoofPreventTable.setStatus('current')
aRPSpoofPreventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 3, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "aRPSpoofPreventIpAddr"))
if mibBuilder.loadTexts: aRPSpoofPreventEntry.setStatus('current')
aRPSpoofPreventIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: aRPSpoofPreventIpAddr.setStatus('current')
aRPSpoofPreventMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 3, 1, 1, 2), MacAddress().clone(hexValue="000102030405")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventMacAddress.setStatus('current')
aRPSpoofPreventPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventPortList.setStatus('current')
aRPSpoofPreventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aRPSpoofPreventRowStatus.setStatus('current')
securitySSL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 5))
sslSecurityHttpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslSecurityHttpStatus.setStatus('current')
sslCiphers = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 5, 2))
sslCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 5, 2, 1), Bits().clone(namedValues=NamedValues(("rsa-null-md5", 0), ("rsa-null-sha", 1), ("rsa-des-sha", 2), ("rsa-3des-sha", 3), ("dh-rsa-des-sha", 4), ("dh-rsa-3des-sha", 5), ("rsa-exp1024-des-sha", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherSuiteList.setStatus('current')
securitySSH = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8))
sshSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshSecurityStatus.setStatus('current')
sshMaxAuthFailAttempts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxAuthFailAttempts.setStatus('current')
sshSessionKeyRekeying = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 10, 30, 60))).clone(namedValues=NamedValues(("never", 0), ("ten-min", 10), ("thirty-min", 30), ("sixty-min", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshSessionKeyRekeying.setStatus('current')
sshMaxSession = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxSession.setStatus('current')
sshConnectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshConnectionTimeout.setStatus('current')
sshAuthenMethodPassWordAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenMethodPassWordAdmin.setStatus('current')
sshAuthenMethodPubKeyAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenMethodPubKeyAdmin.setStatus('current')
sshAuthenMethodHostKeyAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenMethodHostKeyAdmin.setStatus('current')
sshCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 9), Bits().clone(namedValues=NamedValues(("tripleDESCBC", 0), ("dESCBC", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshCipherSuiteList.setStatus('current')
sshMacSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 10), Bits().clone(namedValues=NamedValues(("hMAC-SHA1", 0), ("hMAC-MD5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMacSuiteList.setStatus('current')
sshPublKeyRSAAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPublKeyRSAAdmin.setStatus('current')
sshUserInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 12), )
if mibBuilder.loadTexts: sshUserInfoTable.setStatus('current')
sshUserInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 12, 1), ).setIndexNames((0, "DES-1210-10_AXME", "sshUserInfoID"))
if mibBuilder.loadTexts: sshUserInfoEntry.setStatus('current')
sshUserInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserInfoID.setStatus('current')
sshUserInfoUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserInfoUserName.setStatus('current')
sshUserInfoAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 2, 1))).clone(namedValues=NamedValues(("publickey", 4), ("password", 2), ("hostbased", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoAuth.setStatus('current')
sshUserInfoHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostName.setStatus('current')
sshUserInfoHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 8, 12, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostIp.setStatus('current')
securityPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2))
portSecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 1), )
if mibBuilder.loadTexts: portSecTable.setStatus('current')
portSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "portSecIndex"))
if mibBuilder.loadTexts: portSecEntry.setStatus('current')
portSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecIndex.setStatus('current')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecState.setStatus('current')
portSecMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMLA.setStatus('current')
portSecLockAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deleteOnReset", 1), ("deleteOnTimeout", 2), ("permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecLockAddrMode.setStatus('current')
portSecFDBPermanentTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 2), )
if mibBuilder.loadTexts: portSecFDBPermanentTable.setStatus('current')
portSecFDBPermanentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "portSecFDBPermPort"), (0, "DES-1210-10_AXME", "portSecFDBPermIndex"))
if mibBuilder.loadTexts: portSecFDBPermanentEntry.setStatus('current')
portSecFDBPermIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermIndex.setStatus('current')
portSecFDBPermVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermVlanID.setStatus('current')
portSecFDBPermMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermMac.setStatus('current')
portSecFDBPermPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermPort.setStatus('current')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1))
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("arpSP_permit", 4), ("arpSP_deny", 5), ("voiceVlan", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileMask.setStatus('current')
aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstMacAddrMask.setStatus('current')
aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcMacAddrMask.setStatus('current')
aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ipMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocol.setStatus('current')
aclProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocolMask.setStatus('current')
aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMask.setStatus('current')
aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMask.setStatus('current')
aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstPortMask.setStatus('current')
aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 12), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcPortMask.setStatus('current')
aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 13), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderMacAddrMask.setStatus('current')
aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 14), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderIpAddrMask.setStatus('current')
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "aclL2AccessID"), (0, "DES-1210-10_AXME", "aclL2ProfileID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
aclL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleInPortList.setStatus('current')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("mirror", 3), ("rateLimit", 4), ("replaceDSCP", 5))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
aclL2RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleRateLimit.setStatus('current')
aclL2RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplaceDSCP.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3))
aclL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1), )
if mibBuilder.loadTexts: aclL3RuleTable.setStatus('current')
aclL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "aclL3RuleAccessID"), (0, "DES-1210-10_AXME", "aclL3RuleProfileNo"))
if mibBuilder.loadTexts: aclL3RuleEntry.setStatus('current')
aclL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleAccessID.setStatus('current')
aclL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProfileNo.setStatus('current')
aclL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleProtocol.setStatus('current')
aclL3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProtocolMask.setStatus('current')
aclL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageType.setStatus('current')
aclL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageCode.setStatus('current')
aclL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleDstIpAddr.setStatus('current')
aclL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddr.setStatus('current')
aclL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleDstIpAddrMask.setStatus('current')
aclL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddrMask.setStatus('current')
aclL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPort.setStatus('current')
aclL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPort.setStatus('current')
aclL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPortMask.setStatus('current')
aclL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPortMask.setStatus('current')
aclL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpAckBit.setStatus('current')
aclL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpRstBit.setStatus('current')
aclL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpUrgBit.setStatus('current')
aclL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpPshBit.setStatus('current')
aclL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpSynBit.setStatus('current')
aclL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpFinBit.setStatus('current')
aclL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleDscp.setStatus('current')
aclL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleIgmpType.setStatus('current')
aclL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 23), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RulePortList.setStatus('current')
aclL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("mirror", 3), ("rateLimit", 4), ("replaceDSCP", 5))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleAction.setStatus('current')
aclL3RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleRateLimit.setStatus('current')
aclL3RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplaceDSCP.setStatus('current')
aclL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 15, 3, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleStatus.setStatus('current')
cpuFilterProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1))
cpuFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1), )
if mibBuilder.loadTexts: cpuFilterProfileTable.setStatus('current')
cpuFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "cpuFilterProfileNo"))
if mibBuilder.loadTexts: cpuFilterProfileEntry.setStatus('current')
cpuFilterProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterProfileNo.setStatus('current')
cpuFilterProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileType.setStatus('current')
cpuFilterProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterProfileRuleCount.setStatus('current')
cpuFilterProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileMask.setStatus('current')
cpuFilterProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstMacAddrMask.setStatus('current')
cpuFilterProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcMacAddrMask.setStatus('current')
cpuFilterProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ipMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileIPProtocol.setStatus('current')
cpuFilterProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileIPProtocolMask.setStatus('current')
cpuFilterProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstIpAddrMask.setStatus('current')
cpuFilterProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcIpAddrMask.setStatus('current')
cpuFilterProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstPortMask.setStatus('current')
cpuFilterProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 12), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcPortMask.setStatus('current')
cpuFilterProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterProfileStatus.setStatus('current')
cpuFilterL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2))
cpuFilterL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1), )
if mibBuilder.loadTexts: cpuFilterL2RuleTable.setStatus('current')
cpuFilterL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "cpuFilterL2ProfileID"), (0, "DES-1210-10_AXME", "cpuFilterL2AccessID"))
if mibBuilder.loadTexts: cpuFilterL2RuleEntry.setStatus('current')
cpuFilterL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2ProfileID.setStatus('current')
cpuFilterL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2AccessID.setStatus('current')
cpuFilterL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleEtherType.setStatus('current')
cpuFilterL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleDstMacAddr.setStatus('current')
cpuFilterL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleSrcMacAddr.setStatus('current')
cpuFilterL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleVlanId.setStatus('current')
cpuFilterL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2Rule1pPriority.setStatus('current')
cpuFilterL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2RuleDstMacAddrMask.setStatus('current')
cpuFilterL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2RuleSrcMacAddrMask.setStatus('current')
cpuFilterL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleInPortList.setStatus('current')
cpuFilterL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleAction.setStatus('current')
cpuFilterL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL2RuleStatus.setStatus('current')
cpuFilterL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3))
cpuFilterL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1), )
if mibBuilder.loadTexts: cpuFilterL3RuleTable.setStatus('current')
cpuFilterL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "cpuFilterL3RuleProfileNo"), (0, "DES-1210-10_AXME", "cpuFilterL3RuleAccessID"))
if mibBuilder.loadTexts: cpuFilterL3RuleEntry.setStatus('current')
cpuFilterL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleProfileNo.setStatus('current')
cpuFilterL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleAccessID.setStatus('current')
cpuFilterL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleProtocol.setStatus('current')
cpuFilterL3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleProtocolMask.setStatus('current')
cpuFilterL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleICMPMessageType.setStatus('current')
cpuFilterL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleICMPMessageCode.setStatus('current')
cpuFilterL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleDstIpAddr.setStatus('current')
cpuFilterL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleSrcIpAddr.setStatus('current')
cpuFilterL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleDstIpAddrMask.setStatus('current')
cpuFilterL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleSrcIpAddrMask.setStatus('current')
cpuFilterL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpDstPort.setStatus('current')
cpuFilterL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpSrcPort.setStatus('current')
cpuFilterL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpDstPortMask.setStatus('current')
cpuFilterL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpSrcPortMask.setStatus('current')
cpuFilterL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpAckBit.setStatus('current')
cpuFilterL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpRstBit.setStatus('current')
cpuFilterL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUrgBit.setStatus('current')
cpuFilterL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpPshBit.setStatus('current')
cpuFilterL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpSynBit.setStatus('current')
cpuFilterL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpFinBit.setStatus('current')
cpuFilterL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleDscp.setStatus('current')
cpuFilterL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleIgmpType.setStatus('current')
cpuFilterL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 23), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RulePortList.setStatus('current')
cpuFilterL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleAction.setStatus('current')
cpuFilterL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 33, 3, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleStatus.setStatus('current')
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
snmpV3User = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2))
snmpV3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 3))
snmpV3ViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 4))
snmpV3Community = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 5))
snmpV3Host = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 6))
snmpV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3EngineID.setStatus('current')
snmpV3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 8))
snmpV3UserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2, 1), )
if mibBuilder.loadTexts: snmpV3UserTable.setStatus('current')
snmpV3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "snmpV3UserName"), (0, "DES-1210-10_AXME", "snmpV3UserVersion"))
if mibBuilder.loadTexts: snmpV3UserEntry.setStatus('current')
snmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserName.setStatus('current')
snmpV3UserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserVersion.setStatus('current')
snmpV3UserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserGroupName.setStatus('current')
snmpV3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setStatus('current')
snmpV3UserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setStatus('current')
snmpV3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setStatus('current')
snmpV3UserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setStatus('current')
snmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserStatus.setStatus('current')
snmpV3GroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 3, 1), )
if mibBuilder.loadTexts: snmpV3GroupTable.setStatus('current')
snmpV3GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 3, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "snmpV3GroupName"), (0, "DES-1210-10_AXME", "snmpV3GroupSecurityModel"), (0, "DES-1210-10_AXME", "snmpV3GroupSecurityLevel"))
if mibBuilder.loadTexts: snmpV3GroupEntry.setStatus('current')
snmpV3GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupName.setStatus('current')
snmpV3GroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setStatus('current')
snmpV3GroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 3, 1, 1, 3), SnmpSecurityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setStatus('current')
snmpV3GroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setStatus('current')
snmpV3GroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setStatus('current')
snmpV3GroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setStatus('current')
snmpV3GroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupStatus.setStatus('current')
snmpV3ViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 4, 1), )
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setStatus('current')
snmpV3ViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 4, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "snmpV3viewTreeName"), (0, "DES-1210-10_AXME", "snmpV3viewTreeSubtree"))
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setStatus('current')
snmpV3viewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeName.setStatus('current')
snmpV3viewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setStatus('current')
snmpV3viewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeMask.setStatus('current')
snmpV3viewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeType.setStatus('current')
snmpV3viewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setStatus('current')
snmpV3CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 5, 1), )
if mibBuilder.loadTexts: snmpV3CommunityTable.setStatus('current')
snmpV3CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 5, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "snmpV3CommunityName"))
if mibBuilder.loadTexts: snmpV3CommunityEntry.setStatus('current')
snmpV3CommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3CommunityName.setStatus('current')
snmpV3CommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setStatus('current')
snmpV3CommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityStatus.setStatus('current')
snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 6, 1), )
if mibBuilder.loadTexts: snmpV3HostTable.setStatus('current')
snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 6, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "snmpV3HostAddress"))
if mibBuilder.loadTexts: snmpV3HostEntry.setStatus('current')
snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3HostAddress.setStatus('current')
snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostCommunityName.setStatus('current')
snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostVersion.setStatus('current')
snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostStatus.setStatus('current')
snmpV3TrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setStatus('current')
snmpV3TrapBootup = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapBootup.setStatus('current')
snmpV3TrapFiberLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFiberLinkUpDown.setStatus('current')
snmpV3TrapCopperLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapCopperLinkUpDown.setStatus('current')
snmpV3TrapRSTPStateChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapRSTPStateChange.setStatus('current')
snmpV3TrapFirmUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFirmUpgrade.setStatus('current')
syslogSettingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 1))
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('current')
syslogSaveMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("onDemand", 0), ("timeInterval", 1), ("logTrigger", 2))).clone('logTrigger')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSaveMode.setStatus('current')
syslogSaveMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSaveMinutes.setStatus('current')
syslogServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 2))
syslogServTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 2, 1), )
if mibBuilder.loadTexts: syslogServTable.setStatus('current')
syslogServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "syslogServIndex"))
if mibBuilder.loadTexts: syslogServEntry.setStatus('current')
syslogServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogServIndex.setStatus('current')
syslogServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServAddr.setStatus('current')
syslogServSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("information", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSeverity.setStatus('current')
syslogServFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServFacility.setStatus('current')
syslogServUDPport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(514, 514), ValueRangeConstraint(6000, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServUDPport.setStatus('current')
syslogServSrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSrvStatus.setStatus('current')
syslogServSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 16, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSrvRowStatus.setStatus('current')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 17, 4), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 17, 4, 1), ).setIndexNames((0, "DES-1210-10_AXME", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 17, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 17, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 17, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
sysMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorTargetPort.setStatus('current')
sysMirrorCtrlIngressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 18, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setStatus('current')
sysMirrorCtrlEgressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 18, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setStatus('current')
sysTrapIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 30, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapIP.setStatus('current')
sysTrapSystemEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("deviceBootUp", 1), ("illegalLogin", 2), ("both", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapSystemEvent.setStatus('current')
sysTrapFiberPortEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapFiberPortEvent.setStatus('current')
sysTrapTwistedPortEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapTwistedPortEvent.setStatus('current')
sysTrapStateChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 30, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStateChangeEvent.setStatus('current')
sysTrapFirmUpgradeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 30, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapFirmUpgradeEvent.setStatus('current')
sysTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 30, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStatus.setStatus('current')
sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setStatus('current')
sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstServer.setStatus('current')
sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondServer.setStatus('current')
sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPPollInterval.setStatus('current')
sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPState.setStatus('current')
sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTOffset.setStatus('current')
sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setStatus('current')
sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setStatus('current')
sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setStatus('current')
sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setStatus('current')
sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setStatus('current')
sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setStatus('current')
sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setStatus('current')
sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setStatus('current')
sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setStatus('current')
sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 20, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTState.setStatus('current')
voicevlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 1))
voicevlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 2))
voiceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanMode.setStatus('current')
voiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanId.setStatus('current')
voiceVlanTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanTimeout.setStatus('current')
voiceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("highest", 0), ("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPriority.setStatus('current')
voicevlanPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 1, 6), )
if mibBuilder.loadTexts: voicevlanPortControlTable.setStatus('current')
voicevlanPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 1, 6, 1), ).setIndexNames((0, "DES-1210-10_AXME", "voicevlanPortControlIndex"))
if mibBuilder.loadTexts: voicevlanPortControlEntry.setStatus('current')
voicevlanPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 1, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortControlIndex.setStatus('current')
voicevlanPortAutoDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortAutoDetection.setStatus('current')
voicevlanPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortState.setStatus('current')
voicevlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 2, 1), )
if mibBuilder.loadTexts: voicevlanOUITable.setStatus('current')
voicevlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "voicevlanOUITelephonyOUI"))
if mibBuilder.loadTexts: voicevlanOUIEntry.setStatus('current')
voicevlanOUITelephonyOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUITelephonyOUI.setStatus('current')
voicevlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIDescription.setStatus('current')
voicevlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUIMask.setStatus('current')
voicevlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 21, 2, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIStatus.setStatus('current')
autoSurveillanceVlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 1))
autoSurveillanceVlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 2))
autoSurveillanceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanMode.setStatus('current')
autoSurveillanceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanId.setStatus('current')
autoSurveillanceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("highest", 0), ("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanPriority.setStatus('current')
autoSurveillanceVlanTaggedUplinkDownlinkPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanTaggedUplinkDownlinkPort.setStatus('current')
autoSurveillanceVlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 2, 1), )
if mibBuilder.loadTexts: autoSurveillanceVlanOUITable.setStatus('current')
autoSurveillanceVlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "autoSurveillanceVlanOUISurveillanceOUI"))
if mibBuilder.loadTexts: autoSurveillanceVlanOUIEntry.setStatus('current')
autoSurveillanceVlanOUISurveillanceOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSurveillanceVlanOUISurveillanceOUI.setStatus('current')
autoSurveillanceVlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIDescription.setStatus('current')
autoSurveillanceVlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 2, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIMask.setStatus('current')
autoSurveillanceVlanOUIComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("video_Management_Server", 0), ("vMS_Client", 1), ("video_Encoder", 2), ("network_Storage", 3), ("other_IP_Surveillance_Devices", 4), ("d-Link_Surveillance_Device", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIComponentType.setStatus('current')
autoSurveillanceVlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 34, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIStatus.setStatus('current')
guestVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 24, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanName.setStatus('current')
guestVlanPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 24, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanPort.setStatus('current')
guestVlanDelState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanDelState.setStatus('current')
macNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyState.setStatus('current')
macNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyInterval.setStatus('current')
macNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 25, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyHistorySize.setStatus('current')
macNotifyCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 25, 4), )
if mibBuilder.loadTexts: macNotifyCtrlTable.setStatus('current')
macNotifyCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 25, 4, 1), ).setIndexNames((0, "DES-1210-10_AXME", "macNotifyCtrlIndex"))
if mibBuilder.loadTexts: macNotifyCtrlEntry.setStatus('current')
macNotifyCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 25, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotifyCtrlIndex.setStatus('current')
macNotifyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 25, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyPortStatus.setStatus('current')
dlinklldpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpState.setStatus('current')
dlinklldpMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgHoldMultiplier.setStatus('current')
dlinklldpMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgTxInterval.setStatus('current')
dlinklldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpReinitDelay.setStatus('current')
dlinklldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpTxDelay.setStatus('current')
dlinklldpConfigManAddrPortsTxEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setStatus('current')
class LldpPortNumber(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4096)

lldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 11), )
if mibBuilder.loadTexts: lldpPortConfigTable.setStatus('current')
lldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 11, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpPortConfigPortNum"))
if mibBuilder.loadTexts: lldpPortConfigEntry.setStatus('current')
lldpPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 11, 1, 1), LldpPortNumber())
if mibBuilder.loadTexts: lldpPortConfigPortNum.setStatus('current')
lldpPortConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigAdminStatus.setStatus('current')
lldpPortConfigNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 11, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigNotificationEnable.setStatus('current')
lldpPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 11, 1, 4), Bits().clone(namedValues=NamedValues(("portDesc", 0), ("sysName", 1), ("sysDesc", 2), ("sysCap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigTLVsTxEnable.setStatus('current')
lldpXdot3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12))
lldpXdot3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 1))
lldpXdot3LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2))
lldpXdot3RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3))
class LldpPowerPortClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("pClassPSE", 1), ("pClassPD", 2))

class LldpLinkAggStatusMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("aggCapable", 0), ("aggEnabled", 1))

lldpXdot3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 1, 1), )
if mibBuilder.loadTexts: lldpXdot3PortConfigTable.setStatus('current')
lldpXdot3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("DES-1210-10_AXME", "lldpXdot3PortConfigEntry"))
lldpXdot3PortConfigEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot3PortConfigEntry.setStatus('current')
lldpXdot3PortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("macPhyConfigStatus", 0), ("powerViaMDI", 1), ("linkAggregation", 2), ("maxFrameSize", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot3PortConfigTLVsTxEnable.setStatus('current')
lldpXdot3LocPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 1), )
if mibBuilder.loadTexts: lldpXdot3LocPortTable.setStatus('current')
lldpXdot3LocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot3LocPortAutoNegSupported"))
if mibBuilder.loadTexts: lldpXdot3LocPortEntry.setStatus('current')
lldpXdot3LocPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegSupported.setStatus('current')
lldpXdot3LocPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegEnabled.setStatus('current')
lldpXdot3LocPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3LocPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortOperMauType.setStatus('current')
lldpXdot3LocPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 2), )
if mibBuilder.loadTexts: lldpXdot3LocPowerTable.setStatus('current')
lldpXdot3LocPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot3LocPowerPortClass"))
if mibBuilder.loadTexts: lldpXdot3LocPowerEntry.setStatus('current')
lldpXdot3LocPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 2, 1, 1), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPortClass.setStatus('current')
lldpXdot3LocPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerMDISupported.setStatus('current')
lldpXdot3LocPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerMDIEnabled.setStatus('current')
lldpXdot3LocPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPairControlable.setStatus('current')
lldpXdot3LocPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPairs.setStatus('current')
lldpXdot3LocPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerClass.setStatus('current')
lldpXdot3LocLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 3), )
if mibBuilder.loadTexts: lldpXdot3LocLinkAggTable.setStatus('current')
lldpXdot3LocLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 3, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot3LocLinkAggStatus"))
if mibBuilder.loadTexts: lldpXdot3LocLinkAggEntry.setStatus('current')
lldpXdot3LocLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 3, 1, 1), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggStatus.setStatus('current')
lldpXdot3LocLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggPortId.setStatus('current')
lldpXdot3LocMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 4), )
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeTable.setStatus('current')
lldpXdot3LocMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 4, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot3LocMaxFrameSize"))
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeEntry.setStatus('current')
lldpXdot3LocMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSize.setStatus('current')
lldpXdot3RemPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 1), )
if mibBuilder.loadTexts: lldpXdot3RemPortTable.setStatus('current')
lldpXdot3RemPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot3RemPortAutoNegSupported"))
if mibBuilder.loadTexts: lldpXdot3RemPortEntry.setStatus('current')
lldpXdot3RemPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegSupported.setStatus('current')
lldpXdot3RemPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegEnabled.setStatus('current')
lldpXdot3RemPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3RemPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortOperMauType.setStatus('current')
lldpXdot3RemPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 2), )
if mibBuilder.loadTexts: lldpXdot3RemPowerTable.setStatus('current')
lldpXdot3RemPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot3RemPowerPortClass"))
if mibBuilder.loadTexts: lldpXdot3RemPowerEntry.setStatus('current')
lldpXdot3RemPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 2, 1, 1), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPortClass.setStatus('current')
lldpXdot3RemPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDISupported.setStatus('current')
lldpXdot3RemPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDIEnabled.setStatus('current')
lldpXdot3RemPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairControlable.setStatus('current')
lldpXdot3RemPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairs.setStatus('current')
lldpXdot3RemPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerClass.setStatus('current')
lldpXdot3RemLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 3), )
if mibBuilder.loadTexts: lldpXdot3RemLinkAggTable.setStatus('current')
lldpXdot3RemLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 3, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot3RemLinkAggStatus"))
if mibBuilder.loadTexts: lldpXdot3RemLinkAggEntry.setStatus('current')
lldpXdot3RemLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 3, 1, 1), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggStatus.setStatus('current')
lldpXdot3RemLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggPortId.setStatus('current')
lldpXdot3RemMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 4), )
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeTable.setStatus('current')
lldpXdot3RemMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 4, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot3RemMaxFrameSize"))
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeEntry.setStatus('current')
lldpXdot3RemMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 12, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSize.setStatus('current')
lldpXdot1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13))
lldpXdot1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1))
lldpXdot1LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2))
lldpXdot1RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3))
lldpXdot1ConfigPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTable.setStatus('current')
lldpXdot1ConfigPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("DES-1210-10_AXME", "lldpXdot1ConfigPortVlanEntry"))
lldpXdot1ConfigPortVlanEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanEntry.setStatus('current')
lldpXdot1ConfigPortVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTxEnable.setStatus('current')
lldpXdot1LocVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 3), )
if mibBuilder.loadTexts: lldpXdot1LocVlanNameTable.setStatus('current')
lldpXdot1LocVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 3, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot1LocVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocVlanNameEntry.setStatus('current')
lldpXdot1LocVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: lldpXdot1LocVlanId.setStatus('current')
lldpXdot1LocVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocVlanName.setStatus('current')
lldpXdot1ConfigVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 2), )
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTable.setStatus('current')
lldpXdot1ConfigVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 2, 1), )
lldpXdot1LocVlanNameEntry.registerAugmentions(("DES-1210-10_AXME", "lldpXdot1ConfigVlanNameEntry"))
lldpXdot1ConfigVlanNameEntry.setIndexNames(*lldpXdot1LocVlanNameEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameEntry.setStatus('current')
lldpXdot1ConfigVlanNameTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTxEnable.setStatus('current')
lldpXdot1LocProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 2), )
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanTable.setStatus('current')
lldpXdot1LocProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot1LocProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanEntry.setStatus('current')
lldpXdot1LocProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanId.setStatus('current')
lldpXdot1LocProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanSupported.setStatus('current')
lldpXdot1LocProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanEnabled.setStatus('current')
lldpXdot1ConfigProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 3), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanTable.setStatus('current')
lldpXdot1ConfigProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 3, 1), )
lldpXdot1LocProtoVlanEntry.registerAugmentions(("DES-1210-10_AXME", "lldpXdot1ConfigProtoVlanEntry"))
lldpXdot1ConfigProtoVlanEntry.setIndexNames(*lldpXdot1LocProtoVlanEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanEntry.setStatus('current')
lldpXdot1ConfigProtoVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanTxEnable.setStatus('current')
lldpXdot1LocProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 4), )
if mibBuilder.loadTexts: lldpXdot1LocProtocolTable.setStatus('current')
lldpXdot1LocProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 4, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot1LocProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1LocProtocolEntry.setStatus('current')
lldpXdot1LocProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpXdot1LocProtocolIndex.setStatus('current')
lldpXdot1LocProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtocolId.setStatus('current')
lldpXdot1ConfigProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 4), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTable.setStatus('current')
lldpXdot1ConfigProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 4, 1), )
lldpXdot1LocProtocolEntry.registerAugmentions(("DES-1210-10_AXME", "lldpXdot1ConfigProtocolEntry"))
lldpXdot1ConfigProtocolEntry.setIndexNames(*lldpXdot1LocProtocolEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolEntry.setStatus('current')
lldpXdot1ConfigProtocolTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 1, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTxEnable.setStatus('current')
lldpXdot1LocTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 1), )
if mibBuilder.loadTexts: lldpXdot1LocTable.setStatus('current')
lldpXdot1LocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot1LocPortVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocEntry.setStatus('current')
lldpXdot1LocPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocPortVlanId.setStatus('current')
lldpXdot1RemTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 1), )
if mibBuilder.loadTexts: lldpXdot1RemTable.setStatus('current')
lldpXdot1RemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot1RemPortVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemEntry.setStatus('current')
lldpXdot1RemPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemPortVlanId.setStatus('current')
lldpXdot1RemProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 2), )
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanTable.setStatus('current')
lldpXdot1RemProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot1RemProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEntry.setStatus('current')
lldpXdot1RemProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanId.setStatus('current')
lldpXdot1RemProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanSupported.setStatus('current')
lldpXdot1RemProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEnabled.setStatus('current')
lldpXdot1RemVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 3), )
if mibBuilder.loadTexts: lldpXdot1RemVlanNameTable.setStatus('current')
lldpXdot1RemVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 3, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot1RemVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemVlanNameEntry.setStatus('current')
lldpXdot1RemVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: lldpXdot1RemVlanId.setStatus('current')
lldpXdot1RemVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanName.setStatus('current')
lldpXdot1RemProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 4), )
if mibBuilder.loadTexts: lldpXdot1RemProtocolTable.setStatus('current')
lldpXdot1RemProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 4, 1), ).setIndexNames((0, "DES-1210-10_AXME", "lldpXdot1RemProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1RemProtocolEntry.setStatus('current')
lldpXdot1RemProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpXdot1RemProtocolIndex.setStatus('current')
lldpXdot1RemProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 32, 13, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolId.setStatus('current')
ipMacPortBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4))
ipMacPortBindingSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("modeARP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMacPortBindingSystemMode.setStatus('current')
ipMacPortBindingTrapLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMacPortBindingTrapLogEnable.setStatus('current')
ipMacPortBindingEnabledPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMacPortBindingEnabledPortList.setStatus('current')
allowZeroIPPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowZeroIPPortList.setStatus('current')
ipMacPortBindingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 5), )
if mibBuilder.loadTexts: ipMacPortBindingTable.setStatus('current')
ipMacPortBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 5, 1), ).setIndexNames((0, "DES-1210-10_AXME", "ipMacPortBindingIpAddr"), (0, "DES-1210-10_AXME", "ipMacPortBindingMacAddress"))
if mibBuilder.loadTexts: ipMacPortBindingEntry.setStatus('current')
ipMacPortBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipMacPortBindingIpAddr.setStatus('current')
ipMacPortBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 5, 1, 2), MacAddress())
if mibBuilder.loadTexts: ipMacPortBindingMacAddress.setStatus('current')
ipMacPortBindingPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 5, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMacPortBindingPortList.setStatus('current')
ipMacPortBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMacPortBindingRowStatus.setStatus('current')
macBlockListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 6), )
if mibBuilder.loadTexts: macBlockListTable.setStatus('current')
macBlockListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 6, 1), ).setIndexNames((0, "DES-1210-10_AXME", "macBlockListMacAddr"), (0, "DES-1210-10_AXME", "macBlockListVLANID"), (0, "DES-1210-10_AXME", "macBlockListPort"))
if mibBuilder.loadTexts: macBlockListEntry.setStatus('current')
macBlockListMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: macBlockListMacAddr.setStatus('current')
macBlockListVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: macBlockListVLANID.setStatus('current')
macBlockListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 6, 1, 3), Integer32())
if mibBuilder.loadTexts: macBlockListPort.setStatus('current')
macBlockListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 4, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macBlockListRowStatus.setStatus('current')
securityDhcpServerScreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 7))
dhcpServerScreenEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 7, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnablePortlist.setStatus('current')
filterDHCPServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 7, 2), )
if mibBuilder.loadTexts: filterDHCPServerTable.setStatus('current')
filterDHCPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 7, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "filterDHCPServerIpAddr"), (0, "DES-1210-10_AXME", "filterDHCPServerClientMacAddr"))
if mibBuilder.loadTexts: filterDHCPServerEntry.setStatus('current')
filterDHCPServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 7, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: filterDHCPServerIpAddr.setStatus('current')
filterDHCPServerClientMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 7, 2, 1, 2), MacAddress().clone(hexValue="000102030405"))
if mibBuilder.loadTexts: filterDHCPServerClientMacAddr.setStatus('current')
filterDHCPServerPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 7, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDHCPServerPortList.setStatus('current')
filterDHCPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 7, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDHCPServerRowStatus.setStatus('current')
securityTrafficSeg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 9))
trafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 9, 1), )
if mibBuilder.loadTexts: trafficSegTable.setStatus('current')
trafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 9, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "trafficSegIfIndex"))
if mibBuilder.loadTexts: trafficSegEntry.setStatus('current')
trafficSegIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 9, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegIfIndex.setStatus('current')
trafficSegMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 9, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegMemberList.setStatus('current')
securityAAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10))
aacAuthenAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthenAdminState.setStatus('current')
aacAuthParamResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthParamResponseTimeout.setStatus('current')
aacAuthParamAttempt = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthParamAttempt.setStatus('current')
aacAPAuthMethodGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4))
aacAPLoginMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4, 1))
aacAPEnableMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4, 2))
aacAPConsoleLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPConsoleLoginMethod.setStatus('current')
aacAPTelnetLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPTelnetLoginMethod.setStatus('current')
aacAPSSHLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPSSHLoginMethod.setStatus('current')
aacAPHttpLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPHttpLoginMethod.setStatus('current')
aacAPConsoleEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPConsoleEnableMethod.setStatus('current')
aacAPTelnetEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPTelnetEnableMethod.setStatus('current')
aacAPSSHEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPSSHEnableMethod.setStatus('current')
aacAPHttpEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPHttpEnableMethod.setStatus('current')
aacServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 5), )
if mibBuilder.loadTexts: aacServerGroupTable.setStatus('current')
aacServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 5, 1), ).setIndexNames((0, "DES-1210-10_AXME", "aacServerGroupIndex"))
if mibBuilder.loadTexts: aacServerGroupEntry.setStatus('current')
aacServerGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerGroupIndex.setStatus('current')
aacServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerGroupName.setStatus('current')
aacServersInGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 5, 1, 3), Bits().clone(namedValues=NamedValues(("id_1", 0), ("id_2", 1), ("id_3", 2), ("id_4", 3), ("id_5", 4), ("id_6", 5), ("id_7", 6), ("id_8", 7), ("id_9", 8), ("id_10", 9), ("id_11", 10), ("id_12", 11), ("id_13", 12), ("id_14", 13), ("id_15", 14), ("id_16", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServersInGroup.setStatus('current')
aacServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerGroupRowStatus.setStatus('current')
aacServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 6), )
if mibBuilder.loadTexts: aacServerInfoTable.setStatus('current')
aacServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 6, 1), ).setIndexNames((0, "DES-1210-10_AXME", "aacServerIndex"))
if mibBuilder.loadTexts: aacServerInfoEntry.setStatus('current')
aacServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerIndex.setStatus('current')
aacServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerIPAddr.setStatus('current')
aacServerAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacs-plus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthProtocol.setStatus('current')
aacServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthPort.setStatus('current')
aacServerAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthKey.setStatus('current')
aacServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerTimeout.setStatus('current')
aacServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerRetryCount.setStatus('current')
aacServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerRowStatus.setStatus('current')
aacLoginMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 7), )
if mibBuilder.loadTexts: aacLoginMethodListTable.setStatus('current')
aacLoginMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 7, 1), ).setIndexNames((0, "DES-1210-10_AXME", "aacLoginMethodListIndex"))
if mibBuilder.loadTexts: aacLoginMethodListEntry.setStatus('current')
aacLoginMethodListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacLoginMethodListIndex.setStatus('current')
aacLoginMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethodListName.setStatus('current')
aacLoginMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacs-plus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod1.setStatus('current')
aacLoginMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacs-plus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod2.setStatus('current')
aacLoginMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacs-plus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod3.setStatus('current')
aacLoginMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacs-plus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod4.setStatus('current')
aacLoginMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 7, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacLoginMethodListRowStatus.setStatus('current')
aacEnableMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 8), )
if mibBuilder.loadTexts: aacEnableMethodListTable.setStatus('current')
aacEnableMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 8, 1), ).setIndexNames((0, "DES-1210-10_AXME", "aacEnableMethodListIndex"))
if mibBuilder.loadTexts: aacEnableMethodListEntry.setStatus('current')
aacEnableMethodListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacEnableMethodListIndex.setStatus('current')
aacEnableMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethodListName.setStatus('current')
aacEnableMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacs-plus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod1.setStatus('current')
aacEnableMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacs-plus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod2.setStatus('current')
aacEnableMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacs-plus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod3.setStatus('current')
aacEnableMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacs-plus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod4.setStatus('current')
aacEnableMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacEnableMethodListRowStatus.setStatus('current')
aacLocalEnablePassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 14, 10, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLocalEnablePassword.setStatus('current')
smtpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpState.setStatus('current')
smtpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 26, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAddr.setStatus('current')
smtpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 26, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerPort.setStatus('current')
smtpSelfMailAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 26, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSelfMailAddr.setStatus('current')
smtpRecvMailAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 26, 5), )
if mibBuilder.loadTexts: smtpRecvMailAddrTable.setStatus('current')
smtpRecvMailAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 26, 5, 1), ).setIndexNames((0, "DES-1210-10_AXME", "smtpRecvMailAddrIndex"))
if mibBuilder.loadTexts: smtpRecvMailAddrEntry.setStatus('current')
smtpRecvMailAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 26, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecvMailAddrIndex.setStatus('current')
smtpRecvMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 26, 5, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpRecvMailAddr.setStatus('current')
smtpRecvMailAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 26, 5, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpRecvMailAddrStatus.setStatus('current')
igmpMulticastVlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanStatus.setStatus('current')
igmpMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 2), )
if mibBuilder.loadTexts: igmpMulticastVlanTable.setStatus('current')
igmpMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 2, 1), ).setIndexNames((0, "DES-1210-10_AXME", "igmpMulticastVlanid"))
if mibBuilder.loadTexts: igmpMulticastVlanEntry.setStatus('current')
igmpMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanid.setStatus('current')
igmpMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpMulticastVlanName.setStatus('current')
igmpMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanSourcePort.setStatus('current')
igmpMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 2, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanMemberPort.setStatus('current')
igmpMulticastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 2, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanTagMemberPort.setStatus('current')
igmpMulticastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanState.setStatus('current')
igmpMulticastVlanReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanReplaceSourceIp.setStatus('current')
igmpMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpMulticastVlanRowStatus.setStatus('current')
igmpMulticastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 3), )
if mibBuilder.loadTexts: igmpMulticastVlanGroupTable.setStatus('current')
igmpMulticastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 3, 1), ).setIndexNames((0, "DES-1210-10_AXME", "igmpMulticastVlanGroupVid"), (0, "DES-1210-10_AXME", "igmpMulticastVlanGroupFromIp"), (0, "DES-1210-10_AXME", "igmpMulticastVlanGroupToIp"))
if mibBuilder.loadTexts: igmpMulticastVlanGroupEntry.setStatus('current')
igmpMulticastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupVid.setStatus('current')
igmpMulticastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupFromIp.setStatus('current')
igmpMulticastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupToIp.setStatus('current')
igmpMulticastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 27, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpMulticastVlanGroupStatus.setStatus('current')
rmonGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonGlobalState.setStatus('current')
rmonStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 2))
rmonHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 3))
rmonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4))
rmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 5))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 2, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 2, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 2, 1, 1, 3), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 2, 1, 1, 4), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 3, 1), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 3, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistoryDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryDataSource.setStatus('current')
rmonHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setStatus('current')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 3, 1, 1, 5), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
rmonHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 3, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryStatus.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1, 9), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 4, 1, 1, 10), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 5, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 5, 1, 1), ).setIndexNames((0, "DES-1210-10_AXME", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 5, 1, 1, 5), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 14, 22, 5, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
bridgeGeneral = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,1))
bridgeError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,2))
stpNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,3))
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,4))
protocolMigration = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,5))
iivalidBpduRxd = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,6))
newPortRole = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,7))
firmwareUpgradeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,8))
firmwareUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,9))
firmwareIllegalFile = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,10))
firmwareTransferError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,11))
firmwareChecksumError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,12))
stormOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,20))
stormCleared = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,21))
macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,22))
impbMacBlocked = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 14) + (0,23))
mibBuilder.exportSymbols("DES-1210-10_AXME", companySyslog=companySyslog, lldpXdot1ConfigVlanNameTable=lldpXdot1ConfigVlanNameTable, stpRootPort=stpRootPort, lldpXdot3LocPowerEntry=lldpXdot3LocPowerEntry, aclL3Rule=aclL3Rule, lldpXdot1Config=lldpXdot1Config, lldpPortConfigTable=lldpPortConfigTable, trafficCtrlCountDown=trafficCtrlCountDown, igsVlan=igsVlan, stpPort=stpPort, companyAutoSurveillanceVlan=companyAutoSurveillanceVlan, aclL2RuleReplaceDSCP=aclL2RuleReplaceDSCP, swAuthRadiusServerAccountingPort=swAuthRadiusServerAccountingPort, lldpXdot1RemProtoVlanId=lldpXdot1RemProtoVlanId, aacLocalEnablePassword=aacLocalEnablePassword, rmonStatsDataSource=rmonStatsDataSource, aacEnableMethodListTable=aacEnableMethodListTable, igsAccessAuth=igsAccessAuth, sysTrapIP=sysTrapIP, aacAPConsoleLoginMethod=aacAPConsoleLoginMethod, aacServerRetryCount=aacServerRetryCount, laStatus=laStatus, cpuFilterL3RuleTcpUdpSrcPortMask=cpuFilterL3RuleTcpUdpSrcPortMask, qosDiffServType59=qosDiffServType59, igsVlanFilterEntry=igsVlanFilterEntry, lldpXdot3LocPowerMDISupported=lldpXdot3LocPowerMDISupported, dhcpBOOTPRelayInterface=dhcpBOOTPRelayInterface, smtpSelfMailAddr=smtpSelfMailAddr, smtpRecvMailAddrStatus=smtpRecvMailAddrStatus, companyCPUInterfaceFilterGroup=companyCPUInterfaceFilterGroup, sysPortCtrlEntry=sysPortCtrlEntry, laPortControlIndex=laPortControlIndex, lldpXdot3LocPowerPairControlable=lldpXdot3LocPowerPairControlable, snmpV3UserPrivProtocol=snmpV3UserPrivProtocol, lldpXdot1LocVlanNameTable=lldpXdot1LocVlanNameTable, staticMcastMac=staticMcastMac, laPortActorTimeout=laPortActorTimeout, sshSessionKeyRekeying=sshSessionKeyRekeying, portSecFDBPermanentEntry=portSecFDBPermanentEntry, dlinklldpReinitDelay=dlinklldpReinitDelay, snmpV3HostAddress=snmpV3HostAddress, rmonStatsIndex=rmonStatsIndex, lldpXdot1LocVlanId=lldpXdot1LocVlanId, swAuthAuthSuppTimeout=swAuthAuthSuppTimeout, qosDiffServType14=qosDiffServType14, swAuthPortAccessControlTable=swAuthPortAccessControlTable, companySNMPV3=companySNMPV3, sshAuthenMethodPubKeyAdmin=sshAuthenMethodPubKeyAdmin, snmpV3HostVersion=snmpV3HostVersion, sslCiphers=sslCiphers, aacLoginMethod3=aacLoginMethod3, laPortChannelMemberList=laPortChannelMemberList, mstMstiPortDesignatedBridge=mstMstiPortDesignatedBridge, macNotification=macNotification, swAuthRadiusServerRetransmit=swAuthRadiusServerRetransmit, aacEnableMethod4=aacEnableMethod4, rmonHistoryDataSource=rmonHistoryDataSource, lldpXdot3RemMaxFrameSize=lldpXdot3RemMaxFrameSize, autoSurveillanceVlanOUIStatus=autoSurveillanceVlanOUIStatus, topologyChange=topologyChange, sysMirrorStatus=sysMirrorStatus, qosDiffServType53=qosDiffServType53, snmpV3CommunityTable=snmpV3CommunityTable, aacAPHttpEnableMethod=aacAPHttpEnableMethod, bridgeGeneral=bridgeGeneral, aclL3RuleTcpRstBit=aclL3RuleTcpRstBit, rmonStatsTable=rmonStatsTable, sysSNTPDSTStartDay=sysSNTPDSTStartDay, voicevlanSystem=voicevlanSystem, dot1qVlanUngisterMCFilterVlanId=dot1qVlanUngisterMCFilterVlanId, stpRootBridge=stpRootBridge, stpInstancePortTable=stpInstancePortTable, igsSystem=igsSystem, igsVlanFilterTable=igsVlanFilterTable, qosDiffServType27=qosDiffServType27, companyGuestVlan=companyGuestVlan, stpMaxAge=stpMaxAge, dot1qVlanTable=dot1qVlanTable, allowZeroIPPortList=allowZeroIPPortList, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, staticMcastVlanID=staticMcastVlanID, sshSecurityStatus=sshSecurityStatus, igsVlanCfgQuerier=igsVlanCfgQuerier, ipMacPortBindingIpAddr=ipMacPortBindingIpAddr, aacAPSSHLoginMethod=aacAPSSHLoginMethod, trafficCtrlSettings=trafficCtrlSettings, aclProfileSrcPortMask=aclProfileSrcPortMask, lldpXdot1RemProtocolTable=lldpXdot1RemProtocolTable, swAuthRadiusServer=swAuthRadiusServer, rmonEventType=rmonEventType, voiceVlanTimeout=voiceVlanTimeout, portSecFDBPermMac=portSecFDBPermMac, dhcpLocalRelayTableEntry=dhcpLocalRelayTableEntry, cpuFilterProfileDstIpAddrMask=cpuFilterProfileDstIpAddrMask, dhcpBOOTPRelayManagementOption82=dhcpBOOTPRelayManagementOption82, snmpV3CommunityStatus=snmpV3CommunityStatus, voicevlanOUIStatus=voicevlanOUIStatus, cosClassEntry=cosClassEntry, bandwidthCtrlIndex=bandwidthCtrlIndex, companySecurity=companySecurity, sysPortCtrlIndex=sysPortCtrlIndex, dhcpBOOTPRelayInterfaceSettingsTable=dhcpBOOTPRelayInterfaceSettingsTable, portSecIndex=portSecIndex, aclProfileArpSenderMacAddrMask=aclProfileArpSenderMacAddrMask, snmpV3Trap=snmpV3Trap, dhcpOption12Status=dhcpOption12Status, tftpFwServerIpAddress=tftpFwServerIpAddress, dot1qVlanEntry=dot1qVlanEntry, gvrpSettingsAcceptableFrameType=gvrpSettingsAcceptableFrameType, ipMacPortBindingRowStatus=ipMacPortBindingRowStatus, cpuFilterL3RuleTcpAckBit=cpuFilterL3RuleTcpAckBit, voicevlanPortState=voicevlanPortState, qosDiffServType22=qosDiffServType22, qosDiffServType38=qosDiffServType38, stpPortRestrictedTCN=stpPortRestrictedTCN, sysIpSubnetMask=sysIpSubnetMask, lldpXdot3RemPortAutoNegEnabled=lldpXdot3RemPortAutoNegEnabled, sshUserInfoTable=sshUserInfoTable, swAuthPortAccessControlEntry=swAuthPortAccessControlEntry, trafficCtrlActionMode=trafficCtrlActionMode, sysPortCtrlType=sysPortCtrlType, swAuthUserTable=swAuthUserTable, lldpXdot3PortConfigTable=lldpXdot3PortConfigTable, swAuthRadiusServerAddress=swAuthRadiusServerAddress, qosAclPrioritySettings=qosAclPrioritySettings, lldpXdot1LocPortVlanId=lldpXdot1LocPortVlanId, qosDiffServType35=qosDiffServType35, dhcpBOOTPRelayState=dhcpBOOTPRelayState, aclQosStatus=aclQosStatus, aclL2RuleTable=aclL2RuleTable, swAuthenCtrl=swAuthenCtrl, aclL2AccessID=aclL2AccessID, mstCistCurrentPortRole=mstCistCurrentPortRole, lldpXdot3PortConfigEntry=lldpXdot3PortConfigEntry, laSystem=laSystem, companyLLDPSetting=companyLLDPSetting, qosDiffServType50=qosDiffServType50, trustedHostTable=trustedHostTable, aclProfileTable=aclProfileTable, portMapPriTable=portMapPriTable, sysPortCtrlFlowControlOper=sysPortCtrlFlowControlOper, lldpPortConfigAdminStatus=lldpPortConfigAdminStatus, qosDiffServType26=qosDiffServType26, sysLBDPortLoopStatus=sysLBDPortLoopStatus, laPortChannelEntry=laPortChannelEntry, lldpXdot3LocLinkAggStatus=lldpXdot3LocLinkAggStatus, sysPortErrEntry=sysPortErrEntry, aclL3RulePortList=aclL3RulePortList, lldpPortConfigEntry=lldpPortConfigEntry, dot1qVlanManagementid=dot1qVlanManagementid, autoSurveillanceVlanTaggedUplinkDownlinkPort=autoSurveillanceVlanTaggedUplinkDownlinkPort, sysPortErrTable=sysPortErrTable, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, sshUserInfoID=sshUserInfoID, sysPortErrPortStatus=sysPortErrPortStatus, qosDiffServType51=qosDiffServType51, voicevlanOUI=voicevlanOUI, aacAPSSHEnableMethod=aacAPSSHEnableMethod, snmpV3EngineID=snmpV3EngineID, sysTrapFiberPortEvent=sysTrapFiberPortEvent, qosDiffServType20=qosDiffServType20, sysSNTPDSTEndMin=sysSNTPDSTEndMin, aclL3RuleTcpUdpSrcPort=aclL3RuleTcpUdpSrcPort, qosDiffServType55=qosDiffServType55, aclQosTable=aclQosTable, snmpV3Host=snmpV3Host, lldpXdot1RemProtoVlanTable=lldpXdot1RemProtoVlanTable, aacAPHttpLoginMethod=aacAPHttpLoginMethod, firmwareIllegalFile=firmwareIllegalFile, stpInstance=stpInstance, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, sysPortDescriptionTable=sysPortDescriptionTable, staticEntry=staticEntry, dlink_products=dlink_products, companyMiscGroup=companyMiscGroup, syslogServIndex=syslogServIndex, voicevlanPortControlTable=voicevlanPortControlTable, igsAccessAuthState=igsAccessAuthState, cpuFilterProfileMask=cpuFilterProfileMask, mstiConfigurationName=mstiConfigurationName, cpuFilterL3RuleICMPMessageType=cpuFilterL3RuleICMPMessageType, lldpXdot1ConfigProtocolTxEnable=lldpXdot1ConfigProtocolTxEnable, igmpMulticastVlanSourcePort=igmpMulticastVlanSourcePort, dhcpBOOTPRelayOption82CheckState=dhcpBOOTPRelayOption82CheckState, smtpRecvMailAddrIndex=smtpRecvMailAddrIndex, mstiRevisionLevel=mstiRevisionLevel, dhcpOption12HostName=dhcpOption12HostName, broadcastStormCtrlThreshold=broadcastStormCtrlThreshold, aclProfileMask=aclProfileMask, lldpXdot1RemVlanId=lldpXdot1RemVlanId, syslogServEntry=syslogServEntry, qosDiffServType24=qosDiffServType24, lldpXdot1RemTable=lldpXdot1RemTable, staticMcastEgressPorts=staticMcastEgressPorts, aacEnableMethod2=aacEnableMethod2, trafficSegEntry=trafficSegEntry, trafficSegTable=trafficSegTable, sysSNTPGMTMinutes=sysSNTPGMTMinutes, gvrpSettingsEntry=gvrpSettingsEntry, authProtocol=authProtocol, igsVlanRtrPortList=igsVlanRtrPortList, firmwareTransferError=firmwareTransferError, sysPortErrPortReason=sysPortErrPortReason, sysGateway=sysGateway, trafficCtrlTable=trafficCtrlTable, sysTrapStatus=sysTrapStatus, stpPortHelloTime=stpPortHelloTime, stpPortAdminP2P=stpPortAdminP2P, lldpXdot1ConfigProtoVlanTxEnable=lldpXdot1ConfigProtoVlanTxEnable, snmpV3UserStatus=snmpV3UserStatus, stpPortTable=stpPortTable, sysIpAddrCfgMode=sysIpAddrCfgMode, miscReset=miscReset, swAuthRadiusServerAuthenticationPort=swAuthRadiusServerAuthenticationPort, portSecFDBPermPort=portSecFDBPermPort, portMapPriClass=portMapPriClass, qosDefaultUserPriEntry=qosDefaultUserPriEntry, iivalidBpduRxd=iivalidBpduRxd, cpuFilterL3RuleTcpSynBit=cpuFilterL3RuleTcpSynBit, stpBridgeGlobal=stpBridgeGlobal, voiceVlanMode=voiceVlanMode, aacServerIndex=aacServerIndex, sysLoginTimeoutInterval=sysLoginTimeoutInterval, sysLocationName=sysLocationName, sysLBDStateEnable=sysLBDStateEnable, smtpServerPort=smtpServerPort, snmpV3UserPrivProtocolPassword=snmpV3UserPrivProtocolPassword, companyTrafficMgmt=companyTrafficMgmt, aclProfileSrcIpAddrMask=aclProfileSrcIpAddrMask, aacEnableMethodListIndex=aacEnableMethodListIndex, mstMstiPort=mstMstiPort, sshUserInfoEntry=sshUserInfoEntry, dhcpBOOTPRelayInterfaceSettingsEntry=dhcpBOOTPRelayInterfaceSettingsEntry, aclL3RuleReplaceDSCP=aclL3RuleReplaceDSCP, macNotifyPortStatus=macNotifyPortStatus, lldpXdot1RemEntry=lldpXdot1RemEntry, dhcpBOOTPRelayOption82State=dhcpBOOTPRelayOption82State, aclProfileIPProtocol=aclProfileIPProtocol, igsHostPortPurgeInterval=igsHostPortPurgeInterval, dhcpServerScreenEnablePortlist=dhcpServerScreenEnablePortlist, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, dot1qVlanEgressPorts=dot1qVlanEgressPorts, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, lldpXdot3LocPowerTable=lldpXdot3LocPowerTable, cpuFilterL3RuleSrcIpAddr=cpuFilterL3RuleSrcIpAddr, igsAccessAuthPortIndex=igsAccessAuthPortIndex, syslogServFacility=syslogServFacility, cpuFilterL3RuleSrcIpAddrMask=cpuFilterL3RuleSrcIpAddrMask, qosDefaultUserPri=qosDefaultUserPri, igsVlanFbdRtrPortList=igsVlanFbdRtrPortList, aacAPAuthMethodGroup=aacAPAuthMethodGroup, companySNTPSetting=companySNTPSetting, snmpGlobalState=snmpGlobalState, filterDHCPServerEntry=filterDHCPServerEntry)
mibBuilder.exportSymbols("DES-1210-10_AXME", igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, mstCistVlanMapped3k=mstCistVlanMapped3k, snmpV3UserEntry=snmpV3UserEntry, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, cpuFilterL3RuleProtocolMask=cpuFilterL3RuleProtocolMask, lldpXdot1RemVlanNameEntry=lldpXdot1RemVlanNameEntry, syslogServSrvRowStatus=syslogServSrvRowStatus, cpuFilterL2RuleEtherType=cpuFilterL2RuleEtherType, dot1qVlanForbiddenPorts=dot1qVlanForbiddenPorts, rmonAlarmEntry=rmonAlarmEntry, lldpXdot3LocLinkAggTable=lldpXdot3LocLinkAggTable, aacServerGroupRowStatus=aacServerGroupRowStatus, cpuFilterL3RuleICMPMessageCode=cpuFilterL3RuleICMPMessageCode, mstCistPortAdminPathCost=mstCistPortAdminPathCost, bridgeError=bridgeError, qosDiffServType18=qosDiffServType18, mstCistPort=mstCistPort, cpuFilterL3RulePortList=cpuFilterL3RulePortList, tftpConfigTftpOperationStatus=tftpConfigTftpOperationStatus, sysARPAgingTime=sysARPAgingTime, cpuFilterL3RuleAction=cpuFilterL3RuleAction, lldpXdot3LocPortEntry=lldpXdot3LocPortEntry, lldpXdot3RemPowerMDIEnabled=lldpXdot3RemPowerMDIEnabled, staticVlanID=staticVlanID, aclL3RuleTable=aclL3RuleTable, aacLoginMethodListRowStatus=aacLoginMethodListRowStatus, cpuFilterL3RuleTcpFinBit=cpuFilterL3RuleTcpFinBit, dhcpBOOTPRelayTimeThreshold=dhcpBOOTPRelayTimeThreshold, rmonHistoryTable=rmonHistoryTable, qosUserPriClass=qosUserPriClass, cpuFilterL3Rule=cpuFilterL3Rule, aacEnableMethodListEntry=aacEnableMethodListEntry, qosPriSetPortIndex=qosPriSetPortIndex, sysPortCtrlMediumType=sysPortCtrlMediumType, snmpV3GroupTable=snmpV3GroupTable, sysSNTPPollInterval=sysSNTPPollInterval, companyRMON=companyRMON, dhcpLocalRelaySettingsState=dhcpLocalRelaySettingsState, snmpV3TrapBootup=snmpV3TrapBootup, cpuFilterL3RuleIgmpType=cpuFilterL3RuleIgmpType, cosClassIndex=cosClassIndex, snmpV3ViewTree=snmpV3ViewTree, dhcpBOOTPRelayOption82Policy=dhcpBOOTPRelayOption82Policy, sysMirrorTargetPort=sysMirrorTargetPort, aRPSpoofPreventMacAddress=aRPSpoofPreventMacAddress, sshAuthenMethodPassWordAdmin=sshAuthenMethodPassWordAdmin, lldpXdot3LocMaxFrameSize=lldpXdot3LocMaxFrameSize, stpPortEntry=stpPortEntry, igmpMulticastVlanTable=igmpMulticastVlanTable, qosDiffServType05=qosDiffServType05, gvrpSettingsLeaveAllTime=gvrpSettingsLeaveAllTime, bandwidthCtrlSettings=bandwidthCtrlSettings, igsVlanRouterTable=igsVlanRouterTable, lldpXdot1LocProtoVlanSupported=lldpXdot1LocProtoVlanSupported, stpBridgeForwardDelay=stpBridgeForwardDelay, rmonHistoryStatus=rmonHistoryStatus, aRPSpoofPreventEntry=aRPSpoofPreventEntry, dhcpLocalRelaySettingsVLANID=dhcpLocalRelaySettingsVLANID, stpBridgePriority=stpBridgePriority, sysSNTPDSTEndDay=sysSNTPDSTEndDay, mstMstiStatus=mstMstiStatus, autoSurveillanceVlanSystem=autoSurveillanceVlanSystem, stpPortPathCost=stpPortPathCost, cpuFilterProfileSrcMacAddrMask=cpuFilterProfileSrcMacAddrMask, ipMacPortBindingSystemMode=ipMacPortBindingSystemMode, dhcpLocalRelayTable=dhcpLocalRelayTable, rmonHistoryBucketsRequested=rmonHistoryBucketsRequested, tftpFwTftpOperation=tftpFwTftpOperation, ipMacPortBindingEntry=ipMacPortBindingEntry, mstMstiBridgePriority=mstMstiBridgePriority, cpuFilterL2RuleTable=cpuFilterL2RuleTable, trustedHostRowStatus=trustedHostRowStatus, dhcpBOOTPRelayOption82RemoteID=dhcpBOOTPRelayOption82RemoteID, stpPortStatus=stpPortStatus, aclL2Rule=aclL2Rule, cpuFilterL2RuleVlanId=cpuFilterL2RuleVlanId, lldpXdot1RemPortVlanId=lldpXdot1RemPortVlanId, macBlockListVLANID=macBlockListVLANID, sshMacSuiteList=sshMacSuiteList, aclL3RuleProtocol=aclL3RuleProtocol, cpuFilterL3RuleTcpUdpDstPort=cpuFilterL3RuleTcpUdpDstPort, rmonAlarmVariable=rmonAlarmVariable, aacServerAuthProtocol=aacServerAuthProtocol, sysPortDescMediumType=sysPortDescMediumType, aclProfileNo=aclProfileNo, cpuFilterProfileTable=cpuFilterProfileTable, syslogServSrvStatus=syslogServSrvStatus, dlinklldpMsgTxInterval=dlinklldpMsgTxInterval, aacServerAuthPort=aacServerAuthPort, aclL3RuleTcpUdpDstPortMask=aclL3RuleTcpUdpDstPortMask, lldpXdot1ConfigVlanNameTxEnable=lldpXdot1ConfigVlanNameTxEnable, lldpXdot1LocProtocolEntry=lldpXdot1LocProtocolEntry, qosPriSettings=qosPriSettings, mstCistPortEntry=mstCistPortEntry, securityTrustedHost=securityTrustedHost, dot1qVlanUngisterMCFilterEntry=dot1qVlanUngisterMCFilterEntry, gvrpSettingsIngressChecking=gvrpSettingsIngressChecking, mstCistPortDesignatedBridge=mstCistPortDesignatedBridge, LldpLinkAggStatusMap=LldpLinkAggStatusMap, swAuthAuthQuietPeriod=swAuthAuthQuietPeriod, sysFirmwareVersion=sysFirmwareVersion, aclL2RuleEtherType=aclL2RuleEtherType, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, aacEnableMethod1=aacEnableMethod1, cpuFilterL3RuleProfileNo=cpuFilterL3RuleProfileNo, sysTrapTwistedPortEvent=sysTrapTwistedPortEvent, portSecTable=portSecTable, aclProfileDstPortMask=aclProfileDstPortMask, lldpXdot3LocPowerPortClass=lldpXdot3LocPowerPortClass, lldpXdot3RemLinkAggTable=lldpXdot3RemLinkAggTable, mstConfigurationIdentification=mstConfigurationIdentification, stpPortRestrictedRole=stpPortRestrictedRole, protocolMigration=protocolMigration, sshMaxSession=sshMaxSession, cpuFilterProfileEntry=cpuFilterProfileEntry, qosDiffServType12=qosDiffServType12, igsVlanRouterVlanId=igsVlanRouterVlanId, igsVlanQuerier=igsVlanQuerier, mstMstiBridgeTable=mstMstiBridgeTable, qosDiffServType61=qosDiffServType61, portSecState=portSecState, gvrpSettingsTable=gvrpSettingsTable, snmpV3TrapCopperLinkUpDown=snmpV3TrapCopperLinkUpDown, autoSurveillanceVlanOUISurveillanceOUI=autoSurveillanceVlanOUISurveillanceOUI, rmonEventEntry=rmonEventEntry, aacAuthParamResponseTimeout=aacAuthParamResponseTimeout, dlinklldpConfigManAddrPortsTxEnable=dlinklldpConfigManAddrPortsTxEnable, lldpXdot3RemPortAutoNegAdvertisedCap=lldpXdot3RemPortAutoNegAdvertisedCap, macNotifyCtrlEntry=macNotifyCtrlEntry, aclL3RuleICMPMessageType=aclL3RuleICMPMessageType, macBlockListPort=macBlockListPort, stpProtocolVersion=stpProtocolVersion, cpuFilterL2AccessID=cpuFilterL2AccessID, gvrpGVRPGlobalSettingsOnOff=gvrpGVRPGlobalSettingsOnOff, aacServerGroupTable=aacServerGroupTable, qosDiffServType28=qosDiffServType28, ipMacPortBindingTrapLogEnable=ipMacPortBindingTrapLogEnable, aclL2Rule1pPriority=aclL2Rule1pPriority, aRPSpoofPreventRowStatus=aRPSpoofPreventRowStatus, rmonEvent=rmonEvent, swAuthAuthReAuthentication=swAuthAuthReAuthentication, cpuFilterL3RuleStatus=cpuFilterL3RuleStatus, aacAPTelnetLoginMethod=aacAPTelnetLoginMethod, igmpMulticastVlanStatus=igmpMulticastVlanStatus, snmpV3GroupEntry=snmpV3GroupEntry, ipMacPortBinding=ipMacPortBinding, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, rmonStatistics=rmonStatistics, stormCleared=stormCleared, sysTrapFirmUpgradeEvent=sysTrapFirmUpgradeEvent, cpuFilterProfileRuleCount=cpuFilterProfileRuleCount, aacAPLoginMethod=aacAPLoginMethod, voicevlanOUIMask=voicevlanOUIMask, companyIpifGroup=companyIpifGroup, aclL3RuleDstIpAddr=aclL3RuleDstIpAddr, aclProfileEntry=aclProfileEntry, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, qosDiffServType10=qosDiffServType10, aacServerGroupIndex=aacServerGroupIndex, igmpMulticastVlanEntry=igmpMulticastVlanEntry, qosDiffServType19=qosDiffServType19, qosDiffServType36=qosDiffServType36, companyLA=companyLA, aclL3RuleTcpPshBit=aclL3RuleTcpPshBit, lldpXdot1LocEntry=lldpXdot1LocEntry, sysSNTPTimeSeconds=sysSNTPTimeSeconds, snmpV3Group=snmpV3Group, companyStaticMAC=companyStaticMAC, igsStatus=igsStatus, aclL2RuleEntry=aclL2RuleEntry, cpuFilterL3RuleProtocol=cpuFilterL3RuleProtocol, igsVlanFilterVlanId=igsVlanFilterVlanId, swAuthRadiusServerKey=swAuthRadiusServerKey, aclL3RuleTcpUrgBit=aclL3RuleTcpUrgBit, igsVlanQueryInterval=igsVlanQueryInterval, qosDiffServType46=qosDiffServType46, cpuFilterL2RuleAction=cpuFilterL2RuleAction, lldpXdot1ConfigProtoVlanTable=lldpXdot1ConfigProtoVlanTable, voiceVlanId=voiceVlanId, trafficCtrlTrap=trafficCtrlTrap, snmpV3TrapFiberLinkUpDown=snmpV3TrapFiberLinkUpDown, laPortControlEntry=laPortControlEntry, macNotifyCtrlIndex=macNotifyCtrlIndex, snmpV3UserGroupName=snmpV3UserGroupName, cpuFilterL3RuleTcpUrgBit=cpuFilterL3RuleTcpUrgBit, qosDiffServType44=qosDiffServType44, sysPortCtrlTable=sysPortCtrlTable, sysPortCtrlFlowControl=sysPortCtrlFlowControl, macBlockListRowStatus=macBlockListRowStatus, trustedHostStatus=trustedHostStatus, autoSurveillanceVlanOUIEntry=autoSurveillanceVlanOUIEntry, sysPortDescIndex=sysPortDescIndex, sysMirrorCtrlIngressMirroring=sysMirrorCtrlIngressMirroring, cpuFilterL3RuleEntry=cpuFilterL3RuleEntry, sshAuthenMethodHostKeyAdmin=sshAuthenMethodHostKeyAdmin, aclL2RuleRateLimit=aclL2RuleRateLimit, rmonAlarmInterval=rmonAlarmInterval, sysSNTPDSTOffset=sysSNTPDSTOffset, aclQosIndex=aclQosIndex, trafficCtrlThreshold=trafficCtrlThreshold, filterDHCPServerRowStatus=filterDHCPServerRowStatus, igsGrpQueryInterval=igsGrpQueryInterval, mstCistVlanMapped=mstCistVlanMapped, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, mstInstanceVlanMapped=mstInstanceVlanMapped, lldpXdot1RemProtoVlanEntry=lldpXdot1RemProtoVlanEntry, filterDHCPServerPortList=filterDHCPServerPortList, aacServerInfoEntry=aacServerInfoEntry, sshConnectionTimeout=sshConnectionTimeout, dot1qVlanUngisterMCFilterTable=dot1qVlanUngisterMCFilterTable, sshPublKeyRSAAdmin=sshPublKeyRSAAdmin, qosDiffServType23=qosDiffServType23, cpuFilterL3RuleDscp=cpuFilterL3RuleDscp, aacServerIPAddr=aacServerIPAddr, sysHardwareVersion=sysHardwareVersion, igsVlanRouterPortList=igsVlanRouterPortList, aclL3RuleSrcIpAddrMask=aclL3RuleSrcIpAddrMask, qosDiffServType02=qosDiffServType02, lldpXdot1LocProtoVlanId=lldpXdot1LocProtoVlanId, securityTrafficSeg=securityTrafficSeg, VlanIndex=VlanIndex, laPortChannelTable=laPortChannelTable, lldpXdot3LocLinkAggEntry=lldpXdot3LocLinkAggEntry, lldpXdot3LocPortAutoNegAdvertisedCap=lldpXdot3LocPortAutoNegAdvertisedCap, companyDHCPRelay=companyDHCPRelay, lldpXdot1ConfigProtocolEntry=lldpXdot1ConfigProtocolEntry, companyMirror=companyMirror, companySMTP=companySMTP, dot1qVlanRowStatus=dot1qVlanRowStatus, lldpXdot1LocProtocolId=lldpXdot1LocProtocolId, rmonHistoryInterval=rmonHistoryInterval, swAuthUserPassword=swAuthUserPassword, cosWeight=cosWeight, bandwidthCtrlTable=bandwidthCtrlTable, securityDhcpServerScreen=securityDhcpServerScreen, staticMcastTable=staticMcastTable, lldpXdot3RemPortTable=lldpXdot3RemPortTable, securitySSH=securitySSH, mstInstanceVlanMapped4k=mstInstanceVlanMapped4k, companyAuthGroup=companyAuthGroup, LldpPortNumber=LldpPortNumber, stpAdminPortPathCost=stpAdminPortPathCost, macNotifyState=macNotifyState, mstCistVlanMapped2k=mstCistVlanMapped2k, sysSNTPDSTStartMon=sysSNTPDSTStartMon, sshCipherSuiteList=sshCipherSuiteList, cpuFilterL2Rule1pPriority=cpuFilterL2Rule1pPriority, aclL3RuleIgmpType=aclL3RuleIgmpType, syslogServAddr=syslogServAddr, aacServerAuthKey=aacServerAuthKey, qosDiffServType56=qosDiffServType56, lldpXdot1RemoteData=lldpXdot1RemoteData, mstInstanceVlanMapped3k=mstInstanceVlanMapped3k, stpPortState=stpPortState)
mibBuilder.exportSymbols("DES-1210-10_AXME", dot1qVlanUngisterMCFiltermode=dot1qVlanUngisterMCFiltermode, portSecFDBPermVlanID=portSecFDBPermVlanID, laAlgorithm=laAlgorithm, sysPortCtrlMDI=sysPortCtrlMDI, qosDiffServType34=qosDiffServType34, autoSurveillanceVlanOUIDescription=autoSurveillanceVlanOUIDescription, lldpXdot3Objects=lldpXdot3Objects, dot1qVlanManagementOnOff=dot1qVlanManagementOnOff, companySTP=companySTP, syslogSettingGroup=syslogSettingGroup, tftpCfgServerIpAddress=tftpCfgServerIpAddress, stpPortProtocolMigration=stpPortProtocolMigration, lldpXdot1RemProtocolIndex=lldpXdot1RemProtocolIndex, qosDiffServType37=qosDiffServType37, igmpMulticastVlanRowStatus=igmpMulticastVlanRowStatus, qosUserPriority=qosUserPriority, swAuthAuthMaxReq=swAuthAuthMaxReq, sysLBDPortStatus=sysLBDPortStatus, qosPriSettingsTable=qosPriSettingsTable, sysGroupInterval=sysGroupInterval, igmpMulticastVlanGroupEntry=igmpMulticastVlanGroupEntry, sysSNTPState=sysSNTPState, rmonAlarmIndex=rmonAlarmIndex, igsAccessAuthEntry=igsAccessAuthEntry, aclProfile=aclProfile, cpuFilterL3RuleDstIpAddr=cpuFilterL3RuleDstIpAddr, snmpV3Community=snmpV3Community, aclQosTCPUDPPort=aclQosTCPUDPPort, cpuFilterL2ProfileID=cpuFilterL2ProfileID, lldpXdot1ConfigPortVlanTxEnable=lldpXdot1ConfigPortVlanTxEnable, syslogSaveMinutes=syslogSaveMinutes, mstMstiPortPriority=mstMstiPortPriority, igsVlanSnoopStatus=igsVlanSnoopStatus, lldpXdot1RemProtocolId=lldpXdot1RemProtocolId, qosDiffServType08=qosDiffServType08, aclL3RuleTcpUdpDstPort=aclL3RuleTcpUdpDstPort, smtpState=smtpState, lldpXdot1ConfigPortVlanEntry=lldpXdot1ConfigPortVlanEntry, lldpXdot3RemPortOperMauType=lldpXdot3RemPortOperMauType, sysTrapStateChangeEvent=sysTrapStateChangeEvent, mstMstiPortTable=mstMstiPortTable, qosDiffServType58=qosDiffServType58, aclProfileRuleCount=aclProfileRuleCount, aRPSpoofPreventTable=aRPSpoofPreventTable, dlinklldpState=dlinklldpState, aclL3RuleStatus=aclL3RuleStatus, cpuFilterL2RuleInPortList=cpuFilterL2RuleInPortList, voicevlanOUITelephonyOUI=voicevlanOUITelephonyOUI, cpuFilterL2RuleEntry=cpuFilterL2RuleEntry, lldpXdot3RemPortEntry=lldpXdot3RemPortEntry, lldpXdot1ConfigPortVlanTable=lldpXdot1ConfigPortVlanTable, autoSurveillanceVlanMode=autoSurveillanceVlanMode, aacAPEnableMethod=aacAPEnableMethod, sslCipherSuiteList=sslCipherSuiteList, mstCistVlanMapped4k=mstCistVlanMapped4k, macNotifyInterval=macNotifyInterval, aclProfileType=aclProfileType, rmonStatsStatus=rmonStatsStatus, syslogServerGroup=syslogServerGroup, gvrpSettingsPortControlIndex=gvrpSettingsPortControlIndex, swAuthUser=swAuthUser, dot1qVlanName=dot1qVlanName, lldpXdot1LocalData=lldpXdot1LocalData, companyISMVLAN=companyISMVLAN, cpuFilterL2RuleDstMacAddrMask=cpuFilterL2RuleDstMacAddrMask, qosDiffServType54=qosDiffServType54, cpuFilterL2RuleStatus=cpuFilterL2RuleStatus, companyTrapSetting=companyTrapSetting, broadcastStormCtrlLimitType=broadcastStormCtrlLimitType, mstMstiPortAdminPathCost=mstMstiPortAdminPathCost, lldpXdot3RemPowerClass=lldpXdot3RemPowerClass, securityARPSpoofPrevent=securityARPSpoofPrevent, sysSNTPDSTState=sysSNTPDSTState, sysSwitchName=sysSwitchName, autoSurveillanceVlanOUIMask=autoSurveillanceVlanOUIMask, tftpConfigFileName=tftpConfigFileName, snmpV3GroupWriteViewName=snmpV3GroupWriteViewName, LldpPowerPortClass=LldpPowerPortClass, qosDiffServType29=qosDiffServType29, qosEffectiveDefaultPriority=qosEffectiveDefaultPriority, firmwareUpgradeSuccess=firmwareUpgradeSuccess, qosDefaultUserPriTable=qosDefaultUserPriTable, stpPortPriority=stpPortPriority, trafficSegMemberList=trafficSegMemberList, swAuthUserEntry=swAuthUserEntry, sysPortCtrlSpeed=sysPortCtrlSpeed, sshUserInfoUserName=sshUserInfoUserName, aclProfileArpSenderIpAddrMask=aclProfileArpSenderIpAddrMask, lldpPortConfigNotificationEnable=lldpPortConfigNotificationEnable, lldpXdot3LocPortOperMauType=lldpXdot3LocPortOperMauType, companyVoiceVlan=companyVoiceVlan, swAuthUserName=swAuthUserName, lldpXdot3RemPowerPairs=lldpXdot3RemPowerPairs, qosDefaultPriority=qosDefaultPriority, mstMstiCurrentPortRole=mstMstiCurrentPortRole, gvrpSettingsLeaveTime=gvrpSettingsLeaveTime, syslogServTable=syslogServTable, qosDiffServType43=qosDiffServType43, portMapPriority=portMapPriority, lldpXdot1LocVlanName=lldpXdot1LocVlanName, guestVlanPort=guestVlanPort, qosDiffServType57=qosDiffServType57, mstInstanceVlanMapped2k=mstInstanceVlanMapped2k, rmonStatsOwner=rmonStatsOwner, swAuthAuthDirection=swAuthAuthDirection, mstCistPortPriority=mstCistPortPriority, swAuthRadiusServerStatus=swAuthRadiusServerStatus, rmonAlarmTable=rmonAlarmTable, laPortControl=laPortControl, laPortActorPortPriority=laPortActorPortPriority, companyStaticMcast=companyStaticMcast, lldpXdot1ConfigProtoVlanEntry=lldpXdot1ConfigProtoVlanEntry, stpTxHoldCount=stpTxHoldCount, snmpV3viewTreeMask=snmpV3viewTreeMask, sysSNTPDSTStartMin=sysSNTPDSTStartMin, portSecEntry=portSecEntry, aRPSpoofPreventIpAddr=aRPSpoofPreventIpAddr, snmpV3CommunityName=snmpV3CommunityName, lldpXdot1RemProtoVlanSupported=lldpXdot1RemProtoVlanSupported, rmonEventCommunity=rmonEventCommunity, portMapPriEntry=portMapPriEntry, autoSurveillanceVlanPriority=autoSurveillanceVlanPriority, sysPortErrPortIndex=sysPortErrPortIndex, igmpMulticastVlanGroupStatus=igmpMulticastVlanGroupStatus, qosDiffServType04=qosDiffServType04, rmonEventTable=rmonEventTable, autoSurveillanceVlanId=autoSurveillanceVlanId, des_1210_10axme=des_1210_10axme, swAuthPortAccessCtrl=swAuthPortAccessCtrl, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, firmwareUpgradeFailure=firmwareUpgradeFailure, igmpMulticastVlanState=igmpMulticastVlanState, cpuFilterL3RuleTcpPshBit=cpuFilterL3RuleTcpPshBit, sysLBDRecoverTime=sysLBDRecoverTime, igsQueryInterval=igsQueryInterval, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, snmpV3ViewTreeEntry=snmpV3ViewTreeEntry, qosDiffServType47=qosDiffServType47, dhcpBOOTPRelayInterfaceSettingsRowStatus=dhcpBOOTPRelayInterfaceSettingsRowStatus, sshMaxAuthFailAttempts=sshMaxAuthFailAttempts, lldpXdot3LocLinkAggPortId=lldpXdot3LocLinkAggPortId, rmonEventStatus=rmonEventStatus, rmonGlobalState=rmonGlobalState, cpuFilterProfileStatus=cpuFilterProfileStatus, aacServerInfoTable=aacServerInfoTable, lldpXdot1RemProtoVlanEnabled=lldpXdot1RemProtoVlanEnabled, aclQosProtocol=aclQosProtocol, mstCistPortPathCost=mstCistPortPathCost, igmpMulticastVlanName=igmpMulticastVlanName, aacLoginMethod1=aacLoginMethod1, aacEnableMethod3=aacEnableMethod3, qosUserPriorityTable=qosUserPriorityTable, cpuFilterProfileDstPortMask=cpuFilterProfileDstPortMask, mstCistForcePortState=mstCistForcePortState, igsVlanFastLeave=igsVlanFastLeave, qosDiffServType62=qosDiffServType62, syslogEnable=syslogEnable, smtpRecvMailAddr=smtpRecvMailAddr, igmpMulticastVlanGroupToIp=igmpMulticastVlanGroupToIp, rmonAlarmSampleType=rmonAlarmSampleType, qosDiffServType11=qosDiffServType11, sysWebPortNumber=sysWebPortNumber, staticMac=staticMac, sysLBDCtrlTable=sysLBDCtrlTable, dhcpBOOTPRelayHopCount=dhcpBOOTPRelayHopCount, qosDiffServType32=qosDiffServType32, cpuFilterProfileNo=cpuFilterProfileNo, miscStatisticsReset=miscStatisticsReset, smtpServerAddr=smtpServerAddr, swAuthAuthCapability=swAuthAuthCapability, autoSurveillanceVlanOUI=autoSurveillanceVlanOUI, securityAAC=securityAAC, tftpFwTftpOperationStatus=tftpFwTftpOperationStatus, snmpV3TrapRSTPStateChange=snmpV3TrapRSTPStateChange, snmpV3CommunityEntry=snmpV3CommunityEntry, mstMstiForcePortState=mstMstiForcePortState, laPortActorActivity=laPortActorActivity, cpuFilterL3RuleDstIpAddrMask=cpuFilterL3RuleDstIpAddrMask, syslogServSeverity=syslogServSeverity, aacLoginMethodListTable=aacLoginMethodListTable, dlink_DES1210SeriesProd=dlink_DES1210SeriesProd, qosDiffServTypeGroup=qosDiffServTypeGroup, aRPSpoofPreventPortList=aRPSpoofPreventPortList, mstSetVlanList=mstSetVlanList, PortLaMode=PortLaMode, portSecFDBPermanentTable=portSecFDBPermanentTable, cpuFilterProfileDstMacAddrMask=cpuFilterProfileDstMacAddrMask, snmpV3viewTreeName=snmpV3viewTreeName, mstInstanceIndex=mstInstanceIndex, lldpXdot3RemoteData=lldpXdot3RemoteData, voicevlanPortControlEntry=voicevlanPortControlEntry, lldpXdot1LocProtoVlanEnabled=lldpXdot1LocProtoVlanEnabled, sysPortDescString=sysPortDescString, trafficSegIfIndex=trafficSegIfIndex, gvrpSettingsGVRPState=gvrpSettingsGVRPState, qosDiffServType63=qosDiffServType63, syslogSaveMode=syslogSaveMode, cpuFilterL2RuleSrcMacAddrMask=cpuFilterL2RuleSrcMacAddrMask, portSecFDBPermIndex=portSecFDBPermIndex, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, snmpV3GroupReadViewName=snmpV3GroupReadViewName, stormOccurred=stormOccurred, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, swAuthAuthConfigPortControl=swAuthAuthConfigPortControl, mstMstiBridgeEntry=mstMstiBridgeEntry, cpuFilterL3RuleTcpUdpDstPortMask=cpuFilterL3RuleTcpUdpDstPortMask, sysLBDCtrlIndex=sysLBDCtrlIndex, qosDiffServType52=qosDiffServType52, lldpXdot1LocProtoVlanTable=lldpXdot1LocProtoVlanTable, aacServerTimeout=aacServerTimeout, guestVlanDelState=guestVlanDelState, aclQosVlanID=aclQosVlanID, sshUserInfoHostIp=sshUserInfoHostIp, snmpV3ViewTreeTable=snmpV3ViewTreeTable, stpBridgeHelloTime=stpBridgeHelloTime, aclProfileIPProtocolMask=aclProfileIPProtocolMask, cpuFilterL3RuleAccessID=cpuFilterL3RuleAccessID, sysMirrorCtrlEgressMirroring=sysMirrorCtrlEgressMirroring, lldpXdot3LocalData=lldpXdot3LocalData, qosDiffServType41=qosDiffServType41, aclL3RuleEntry=aclL3RuleEntry, cpuFilterProfileType=cpuFilterProfileType, sshUserInfoHostName=sshUserInfoHostName, qosDiffServType40=qosDiffServType40, PortList=PortList, companyIgsGroup=companyIgsGroup, cpuFilterProfileSrcPortMask=cpuFilterProfileSrcPortMask, sysSNTPDSTEndMon=sysSNTPDSTEndMon, companyGVRPGroup=companyGVRPGroup, snmpV3GroupName=snmpV3GroupName, rmonAlarmStatus=rmonAlarmStatus, mstResetVlanList=mstResetVlanList, snmpV3HostCommunityName=snmpV3HostCommunityName, Timeout=Timeout, swAuthAuthTxPeriod=swAuthAuthTxPeriod, aclQosAssignClass=aclQosAssignClass, cpuFilterProfile=cpuFilterProfile, stpFowardBPDU=stpFowardBPDU, lldpXdot1LocVlanNameEntry=lldpXdot1LocVlanNameEntry, laPortChannelMasterPort=laPortChannelMasterPort, swAuthMode=swAuthMode, lldpXdot1RemVlanName=lldpXdot1RemVlanName, filterDHCPServerClientMacAddr=filterDHCPServerClientMacAddr, sysPortCtrlOperStatus=sysPortCtrlOperStatus, voicevlanPortAutoDetection=voicevlanPortAutoDetection, snmpV3TrapSNMPAuthentication=snmpV3TrapSNMPAuthentication, trafficCtrlIndex=trafficCtrlIndex, rmonHistoryOwner=rmonHistoryOwner, qosUserPriIndex=qosUserPriIndex, sslSecurityHttpStatus=sslSecurityHttpStatus, mstMstiInstanceIndex=mstMstiInstanceIndex, gvrpSettingsPVID=gvrpSettingsPVID, sysSNTPDSTEndHour=sysSNTPDSTEndHour, lldpXdot3PortConfigTLVsTxEnable=lldpXdot3PortConfigTLVsTxEnable)
mibBuilder.exportSymbols("DES-1210-10_AXME", qosDiffServType07=qosDiffServType07, sysTrapSystemEvent=sysTrapSystemEvent, swAuthUserStatus=swAuthUserStatus, aclProfileSrcMacAddrMask=aclProfileSrcMacAddrMask, lldpXdot3LocPowerMDIEnabled=lldpXdot3LocPowerMDIEnabled, sysPortDescriptionEntry=sysPortDescriptionEntry, sysIpAddr=sysIpAddr, securitySSL=securitySSL, igsQueryMaxResponseTime=igsQueryMaxResponseTime, lldpXdot3RemLinkAggPortId=lldpXdot3RemLinkAggPortId, lldpXdot1Objects=lldpXdot1Objects, qosDiffServType60=qosDiffServType60, impbMacBlocked=impbMacBlocked, dot1qVlanAdvertisementStatus=dot1qVlanAdvertisementStatus, qosDiffServType45=qosDiffServType45, aclL3RuleICMPMessageCode=aclL3RuleICMPMessageCode, ipMacPortBindingMacAddress=ipMacPortBindingMacAddress, gvrpSettingsJoinTime=gvrpSettingsJoinTime, cpuFilterL3RuleTable=cpuFilterL3RuleTable, macBlockListTable=macBlockListTable, aacEnableMethodListName=aacEnableMethodListName, qosDiffServType13=qosDiffServType13, cpuFilterProfileSrcIpAddrMask=cpuFilterProfileSrcIpAddrMask, aacLoginMethodListIndex=aacLoginMethodListIndex, companySystem=companySystem, qosDiffServType25=qosDiffServType25, d_link=d_link, qosDiffServType30=qosDiffServType30, lldpXdot1LocProtocolIndex=lldpXdot1LocProtocolIndex, aacServerGroupEntry=aacServerGroupEntry, mstCistBridgePriority=mstCistBridgePriority, qosDiffServType48=qosDiffServType48, voiceVlanPriority=voiceVlanPriority, lldpXdot1RemProtocolEntry=lldpXdot1RemProtocolEntry, sysMACAgingTime=sysMACAgingTime, swAuthRadiusServerTable=swAuthRadiusServerTable, mstMstiPortEntry=mstMstiPortEntry, snmpV3GroupNotifyViewName=snmpV3GroupNotifyViewName, dlinklldpTxDelay=dlinklldpTxDelay, qosDiffServType01=qosDiffServType01, macBlockListEntry=macBlockListEntry, lldpXdot3LocPowerPairs=lldpXdot3LocPowerPairs, qosDiffServType49=qosDiffServType49, companyLBD=companyLBD, aclL3RuleTcpUdpSrcPortMask=aclL3RuleTcpUdpSrcPortMask, lldpXdot3LocPortTable=lldpXdot3LocPortTable, dhcpBOOTPRelayManagement=dhcpBOOTPRelayManagement, macBlockListMacAddr=macBlockListMacAddr, companyTftpGroup=companyTftpGroup, aacAuthenAdminState=aacAuthenAdminState, lldpXdot3RemPowerTable=lldpXdot3RemPowerTable, qosDiffServ=qosDiffServ, lldpXdot1LocTable=lldpXdot1LocTable, aclL3RuleDstIpAddrMask=aclL3RuleDstIpAddrMask, smtpRecvMailAddrTable=smtpRecvMailAddrTable, trafficCtrlType=trafficCtrlType, swAuthAuthReAuthPeriod=swAuthAuthReAuthPeriod, rmonEventOwner=rmonEventOwner, rmonStatsEntry=rmonStatsEntry, sysWebState=sysWebState, staticMcastStatus=staticMcastStatus, igmpMulticastVlanGroupFromIp=igmpMulticastVlanGroupFromIp, lldpXdot1RemVlanNameTable=lldpXdot1RemVlanNameTable, aclL3RuleProtocolMask=aclL3RuleProtocolMask, aclProfileStatus=aclProfileStatus, macNotifyHistorySize=macNotifyHistorySize, dlinklldpMsgHoldMultiplier=dlinklldpMsgHoldMultiplier, qosDiffServType21=qosDiffServType21, trustedHostEntry=trustedHostEntry, voicevlanOUITable=voicevlanOUITable, lldpXdot3RemPowerPairControlable=lldpXdot3RemPowerPairControlable, trafficCtrlEntry=trafficCtrlEntry, BridgeId=BridgeId, qosDiffServType16=qosDiffServType16, aclQosEntry=aclQosEntry, aacLoginMethodListName=aacLoginMethodListName, broadcastStormCtrlGlobalOnOff=broadcastStormCtrlGlobalOnOff, staticTable=staticTable, companyDot1qVlanGroup=companyDot1qVlanGroup, stpRootCost=stpRootCost, lldpXdot3LocPortAutoNegSupported=lldpXdot3LocPortAutoNegSupported, aclL2RuleAction=aclL2RuleAction, lldpXdot3RemPowerPortClass=lldpXdot3RemPowerPortClass, voicevlanOUIDescription=voicevlanOUIDescription, aacLoginMethod4=aacLoginMethod4, laPortControlTable=laPortControlTable, firmwareChecksumError=firmwareChecksumError, snmpV3GroupSecurityLevel=snmpV3GroupSecurityLevel, lldpXdot1LocProtoVlanEntry=lldpXdot1LocProtoVlanEntry, sysSNTPFirstServer=sysSNTPFirstServer, companyACLGroup=companyACLGroup, RmonStatus=RmonStatus, igmpMulticastVlanid=igmpMulticastVlanid, portMapPriPortIndex=portMapPriPortIndex, cpuFilterL3RuleTcpRstBit=cpuFilterL3RuleTcpRstBit, rmonEventIndex=rmonEventIndex, igsAccessAuthTable=igsAccessAuthTable, snmpV3viewTreeSubtree=snmpV3viewTreeSubtree, lldpXdot3LocMaxFrameSizeTable=lldpXdot3LocMaxFrameSizeTable, aacAPTelnetEnableMethod=aacAPTelnetEnableMethod, lldpPortConfigTLVsTxEnable=lldpPortConfigTLVsTxEnable, lldpXdot1ConfigVlanNameEntry=lldpXdot1ConfigVlanNameEntry, ipMacPortBindingTable=ipMacPortBindingTable, cosScheduleMechanism=cosScheduleMechanism, mstVlanMstiMappingTable=mstVlanMstiMappingTable, portSecLockAddrMode=portSecLockAddrMode, aclProfileDstIpAddrMask=aclProfileDstIpAddrMask, aclL2ProfileID=aclL2ProfileID, aacServerRowStatus=aacServerRowStatus, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, aacLoginMethod2=aacLoginMethod2, igmpMulticastVlanGroupTable=igmpMulticastVlanGroupTable, snmpV3HostStatus=snmpV3HostStatus, aacAuthParamAttempt=aacAuthParamAttempt, lldpXdot3RemMaxFrameSizeEntry=lldpXdot3RemMaxFrameSizeEntry, cpuFilterL2Rule=cpuFilterL2Rule, igmpMulticastVlanReplaceSourceIp=igmpMulticastVlanReplaceSourceIp, qosDiffServType17=qosDiffServType17, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, lldpXdot3Config=lldpXdot3Config, aclQosType=aclQosType, snmpV3GroupSecurityModel=snmpV3GroupSecurityModel, stpNewRoot=stpNewRoot, dhcpBOOTPRelayControl=dhcpBOOTPRelayControl, broadcastStormCtrlSettings=broadcastStormCtrlSettings, smtpRecvMailAddrEntry=smtpRecvMailAddrEntry, sysRestart=sysRestart, laPortChannelMode=laPortChannelMode, snmpV3viewTreeStatus=snmpV3viewTreeStatus, qosDiffServType31=qosDiffServType31, snmpV3CommunityPolicy=snmpV3CommunityPolicy, rmonAlarm=rmonAlarm, swAuthRadiusServerEntry=swAuthRadiusServerEntry, companyQoSGroup=companyQoSGroup, aclL3RuleTcpFinBit=aclL3RuleTcpFinBit, igsRobustnessValue=igsRobustnessValue, aacServersInGroup=aacServersInGroup, sysLBDInterval=sysLBDInterval, telnetsettingManagementOnOff=telnetsettingManagementOnOff, qosDefaultUserPriPortIndex=qosDefaultUserPriPortIndex, swAuthStatus=swAuthStatus, aclL3RuleRateLimit=aclL3RuleRateLimit, dhcpBOOTPRelayOption82RemoteIDType=dhcpBOOTPRelayOption82RemoteIDType, mstMstiPortPathCost=mstMstiPortPathCost, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, trustedHostIpMask=trustedHostIpMask, swAuthRadiusServerIndex=swAuthRadiusServerIndex, tftpConfigTftpOperation=tftpConfigTftpOperation, lldpXdot3LocPowerClass=lldpXdot3LocPowerClass, sysPortErrPortState=sysPortErrPortState, trustedHostIpAddr=trustedHostIpAddr, ipMacPortBindingPortList=ipMacPortBindingPortList, swAuthAuthConfigPortNumber=swAuthAuthConfigPortNumber, qosDiffServType00=qosDiffServType00, aclQosMACAddr=aclQosMACAddr, cpuFilterL2RuleSrcMacAddr=cpuFilterL2RuleSrcMacAddr, qosDiffServType06=qosDiffServType06, sysLBDCtrlEntry=sysLBDCtrlEntry, stpBridgeMaxAge=stpBridgeMaxAge, macNotifyCtrlTable=macNotifyCtrlTable, autoSurveillanceVlanOUIComponentType=autoSurveillanceVlanOUIComponentType, snmpV3User=snmpV3User, aacEnableMethodListRowStatus=aacEnableMethodListRowStatus, companyMacNotify=companyMacNotify, cosClassTable=cosClassTable, qosPriSettingsEntry=qosPriSettingsEntry, dhcpBOOTPRelayServerIP=dhcpBOOTPRelayServerIP, aclL2RuleInPortList=aclL2RuleInPortList, companyDHCPLocalRelay=companyDHCPLocalRelay, aclQosIPAddr=aclQosIPAddr, snmpV3UserAuthProtocolPassword=snmpV3UserAuthProtocolPassword, aclL2RuleVlanId=aclL2RuleVlanId, laPortChannelIfIndex=laPortChannelIfIndex, autoSurveillanceVlanOUITable=autoSurveillanceVlanOUITable, lldpXdot3RemPowerMDISupported=lldpXdot3RemPowerMDISupported, aclL3RuleSrcIpAddr=aclL3RuleSrcIpAddr, aclL3RuleProfileNo=aclL3RuleProfileNo, cpuFilterL3RuleTcpUdpSrcPort=cpuFilterL3RuleTcpUdpSrcPort, tftpFwImageFileName=tftpFwImageFileName, snmpV3UserName=snmpV3UserName, swAuthAuthServerTimeout=swAuthAuthServerTimeout, aclL3RuleAccessID=aclL3RuleAccessID, guestVlanName=guestVlanName, ipMacPortBindingEnabledPortList=ipMacPortBindingEnabledPortList, mstVlanMstiMappingEntry=mstVlanMstiMappingEntry, dhcpLocalRelayGlobalState=dhcpLocalRelayGlobalState, igmpMulticastVlanMemberPort=igmpMulticastVlanMemberPort, rmonHistoryEntry=rmonHistoryEntry, newPortRole=newPortRole, qosDiffServType33=qosDiffServType33, sysSave=sysSave, cosOutputSchedule=cosOutputSchedule, snmpV3UserAuthProtocol=snmpV3UserAuthProtocol, snmpV3viewTreeType=snmpV3viewTreeType, sysSNTPDSTStartHour=sysSNTPDSTStartHour, filterDHCPServerTable=filterDHCPServerTable, qosUserPriEntry=qosUserPriEntry, rmonEventDescription=rmonEventDescription, securityPortSecurity=securityPortSecurity, snmpV3GroupStatus=snmpV3GroupStatus, lldpXdot3RemPowerEntry=lldpXdot3RemPowerEntry, cpuFilterProfileIPProtocolMask=cpuFilterProfileIPProtocolMask, autoRefreshConfiguration=autoRefreshConfiguration, rmonHistory=rmonHistory, sysSNTPSecondServer=sysSNTPSecondServer, staticDisableAutoLearn=staticDisableAutoLearn, trafficCtrlTimeInterval=trafficCtrlTimeInterval, staticMcastEntry=staticMcastEntry, aclProfileDstMacAddrMask=aclProfileDstMacAddrMask, snmpV3UserTable=snmpV3UserTable, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, staticPort=staticPort, staticStatus=staticStatus, OwnerString=OwnerString, lldpXdot3RemPortAutoNegSupported=lldpXdot3RemPortAutoNegSupported, aacServerGroupName=aacServerGroupName, lldpXdot3RemLinkAggStatus=lldpXdot3RemLinkAggStatus, aacLoginMethodListEntry=aacLoginMethodListEntry, stpPortFowardBPDU=stpPortFowardBPDU, aacAPConsoleEnableMethod=aacAPConsoleEnableMethod, snmpV3HostTable=snmpV3HostTable, voicevlanPortControlIndex=voicevlanPortControlIndex, stpModuleStatus=stpModuleStatus, igmpMulticastVlanGroupVid=igmpMulticastVlanGroupVid, qosDiffServType42=qosDiffServType42, sysSafeGuardEnable=sysSafeGuardEnable, igmpMulticastVlanTagMemberPort=igmpMulticastVlanTagMemberPort, portSecMLA=portSecMLA, lldpXdot1LocProtocolTable=lldpXdot1LocProtocolTable, rmonHistoryIndex=rmonHistoryIndex, qosDiffServType39=qosDiffServType39, lldpXdot1ConfigProtocolTable=lldpXdot1ConfigProtocolTable, aclL3RuleDscp=aclL3RuleDscp, snmpV3HostEntry=snmpV3HostEntry, stpPortEdge=stpPortEdge, LacpKey=LacpKey, swAuthRadiusServerTimeout=swAuthRadiusServerTimeout, sshUserInfoAuth=sshUserInfoAuth, qosDiffServType09=qosDiffServType09, qosPriSetPortType=qosPriSetPortType, mstCistStatus=mstCistStatus, qosDiffServType15=qosDiffServType15, aclL3RuleAction=aclL3RuleAction, voicevlanOUIEntry=voicevlanOUIEntry, rmonAlarmOwner=rmonAlarmOwner, filterDHCPServerIpAddr=filterDHCPServerIpAddr, aclL2RuleStatus=aclL2RuleStatus, lldpXdot3RemMaxFrameSizeTable=lldpXdot3RemMaxFrameSizeTable, snmpV3UserVersion=snmpV3UserVersion, lldpXdot3LocMaxFrameSizeEntry=lldpXdot3LocMaxFrameSizeEntry, stpForwardDelay=stpForwardDelay, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, lldpPortConfigPortNum=lldpPortConfigPortNum, aclL3RuleTcpAckBit=aclL3RuleTcpAckBit)
mibBuilder.exportSymbols("DES-1210-10_AXME", cpuFilterProfileIPProtocol=cpuFilterProfileIPProtocol, mstCistPortTable=mstCistPortTable, syslogServUDPport=syslogServUDPport, snmpV3TrapFirmUpgrade=snmpV3TrapFirmUpgrade, lldpXdot3LocPortAutoNegEnabled=lldpXdot3LocPortAutoNegEnabled, lldpXdot3RemLinkAggEntry=lldpXdot3RemLinkAggEntry, staticAutoLearningList=staticAutoLearningList, telnetUDPPort=telnetUDPPort, bandwidthCtrlEntry=bandwidthCtrlEntry, igsVlanRouterEntry=igsVlanRouterEntry, cpuFilterL2RuleDstMacAddr=cpuFilterL2RuleDstMacAddr, qosDiffServType03=qosDiffServType03, aclL3RuleTcpSynBit=aclL3RuleTcpSynBit)
