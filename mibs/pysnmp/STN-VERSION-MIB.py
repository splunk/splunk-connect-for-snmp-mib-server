#
# PySNMP MIB module STN-VERSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-VERSION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Gauge32, Unsigned32, Bits, ObjectIdentity, iso, MibIdentifier, Counter32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "Unsigned32", "Bits", "ObjectIdentity", "iso", "MibIdentifier", "Counter32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
stnSystems, stnNotification = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnSystems", "stnNotification")
StnHardwareModuleType, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-TC", "StnHardwareModuleType")
stnEngineIndex, stnEngineCpu, stnEngineSlot = mibBuilder.importSymbols("STN-CHASSIS-MIB", "stnEngineIndex", "stnEngineCpu", "stnEngineSlot")
stnVersion = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 2))
if mibBuilder.loadTexts: stnVersion.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnVersion.setOrganization('Spring Tide Networks, Inc.')
stnVersionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1))
stnVersionMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 2, 2))
stnSwVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1))
stnHwVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2))
stnSwVersionTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: stnSwVersionTable.setStatus('current')
stnSwVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "STN-VERSION-MIB", "stnSwImage"))
if mibBuilder.loadTexts: stnSwVersionEntry.setStatus('current')
stnSwImage = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("bootstrap", 1), ("cpmSwitch", 2), ("cpmRoute", 3), ("tsmECF", 4), ("cpmSwitchRecv", 5), ("cpmRouteRecv", 6), ("tsmECFRecv", 7), ("cpmKing", 8), ("cpmBlue", 9), ("cpmHermit", 10), ("cpmSwcPipeline", 11), ("cpmRpePipeline", 12), ("cpmSpider", 13), ("cpmSand", 14), ("tsmBlue", 15), ("tsmHermit", 16), ("tsmPipeline", 17), ("tsmBridge", 18), ("tsmSoldier", 19), ("swfmHorseshoe", 20), ("atmOC3Stone", 21), ("enetMud", 22), ("rmFiddler", 23), ("atmOC12Golden", 24), ("ds3Green", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwImage.setStatus('current')
stnSwVersionPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwVersionPrefix.setStatus('current')
stnSwMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwMajorVersion.setStatus('current')
stnSwMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwMinorVersion.setStatus('current')
stnSwMaintenanceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwMaintenanceVersion.setStatus('current')
stnSwPatchVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwPatchVersion.setStatus('current')
stnSwVersionDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwVersionDescr.setStatus('current')
stnHwVersionTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: stnHwVersionTable.setStatus('current')
stnHwVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "STN-VERSION-MIB", "stnHwSlotIndex"))
if mibBuilder.loadTexts: stnHwVersionEntry.setStatus('current')
stnHwSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: stnHwSlotIndex.setStatus('current')
stnHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 2), StnHardwareModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnHwType.setStatus('current')
stnHwMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnHwMajorVersion.setStatus('current')
stnHwMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnHwMinorVersion.setStatus('current')
stnHwVersionDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnHwVersionDescr.setStatus('current')
stnHwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnHwSerialNumber.setStatus('current')
stnSwImageUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 51)).setObjects(("STN-VERSION-MIB", "stnSwImage"))
if mibBuilder.loadTexts: stnSwImageUpgraded.setStatus('current')
stnSwImageUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 52)).setObjects(("STN-VERSION-MIB", "stnSwImage"), ("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"))
if mibBuilder.loadTexts: stnSwImageUpgradeFailure.setStatus('current')
stnSwImageNotFound = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 53)).setObjects(("STN-VERSION-MIB", "stnSwImage"))
if mibBuilder.loadTexts: stnSwImageNotFound.setStatus('current')
stnSwImageAutoDowngraded = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 54)).setObjects(("STN-VERSION-MIB", "stnSwImage"), ("STN-VERSION-MIB", "stnSwVersionDescr"), ("STN-VERSION-MIB", "stnSwVersionDescr"))
if mibBuilder.loadTexts: stnSwImageAutoDowngraded.setStatus('current')
mibBuilder.exportSymbols("STN-VERSION-MIB", stnSwMinorVersion=stnSwMinorVersion, stnHwSlotIndex=stnHwSlotIndex, stnSwImageUpgradeFailure=stnSwImageUpgradeFailure, stnHwVersions=stnHwVersions, stnSwVersions=stnSwVersions, stnHwVersionDescr=stnHwVersionDescr, stnHwMinorVersion=stnHwMinorVersion, stnSwMajorVersion=stnSwMajorVersion, stnVersionMibConformance=stnVersionMibConformance, PYSNMP_MODULE_ID=stnVersion, stnSwImage=stnSwImage, stnHwSerialNumber=stnHwSerialNumber, stnSwVersionDescr=stnSwVersionDescr, stnSwVersionEntry=stnSwVersionEntry, stnSwPatchVersion=stnSwPatchVersion, stnVersion=stnVersion, stnHwVersionTable=stnHwVersionTable, stnHwType=stnHwType, stnSwMaintenanceVersion=stnSwMaintenanceVersion, stnHwMajorVersion=stnHwMajorVersion, stnSwVersionTable=stnSwVersionTable, stnSwVersionPrefix=stnSwVersionPrefix, stnSwImageNotFound=stnSwImageNotFound, stnSwImageUpgraded=stnSwImageUpgraded, stnHwVersionEntry=stnHwVersionEntry, stnSwImageAutoDowngraded=stnSwImageAutoDowngraded, stnVersionObjects=stnVersionObjects)
