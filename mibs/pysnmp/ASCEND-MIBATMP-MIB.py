#
# PySNMP MIB module ASCEND-MIBATMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBATMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:10:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Counter32, Gauge32, iso, TimeTicks, NotificationType, IpAddress, ModuleIdentity, MibIdentifier, Counter64, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Counter32", "Gauge32", "iso", "TimeTicks", "NotificationType", "IpAddress", "ModuleIdentity", "MibIdentifier", "Counter64", "Unsigned32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibatmpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 42))
mibatmpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 42, 1), )
if mibBuilder.loadTexts: mibatmpProfileTable.setStatus('mandatory')
mibatmpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMP-MIB", "atmpProfile-Index-o"))
if mibBuilder.loadTexts: mibatmpProfileEntry.setStatus('mandatory')
atmpProfile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 1), Integer32()).setLabel("atmpProfile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpProfile_Index_o.setStatus('mandatory')
atmpProfile_AgentMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tunnelDisabled", 1), ("homeAgent", 2), ("foreignAgent", 3), ("homeAndForeignAgent", 4)))).setLabel("atmpProfile-AgentMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_AgentMode.setStatus('mandatory')
atmpProfile_AgentType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("routerHomeAgent", 1), ("gatewayHomeAgent", 2)))).setLabel("atmpProfile-AgentType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_AgentType.setStatus('mandatory')
atmpProfile_UdpPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 4), Integer32()).setLabel("atmpProfile-UdpPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_UdpPort.setStatus('mandatory')
atmpProfile_HomeAgentPassword = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 5), DisplayString()).setLabel("atmpProfile-HomeAgentPassword").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_HomeAgentPassword.setStatus('mandatory')
atmpProfile_AtmpSapReply = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("atmpProfile-AtmpSapReply").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_AtmpSapReply.setStatus('mandatory')
atmpProfile_RetryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 7), Integer32()).setLabel("atmpProfile-RetryTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_RetryTimeout.setStatus('mandatory')
atmpProfile_RetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 8), Integer32()).setLabel("atmpProfile-RetryLimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_RetryLimit.setStatus('mandatory')
atmpProfile_IdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 9), Integer32()).setLabel("atmpProfile-IdleTimer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_IdleTimer.setStatus('mandatory')
atmpProfile_MtuLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 10), Integer32()).setLabel("atmpProfile-MtuLimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_MtuLimit.setStatus('mandatory')
atmpProfile_ForceFragmentation = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("atmpProfile-ForceFragmentation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_ForceFragmentation.setStatus('mandatory')
atmpProfile_AtmpSnmpTrap = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("atmpProfile-AtmpSnmpTrap").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_AtmpSnmpTrap.setStatus('mandatory')
atmpProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 42, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("atmpProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmpProfile_Action_o.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-MIBATMP-MIB", mibatmpProfileEntry=mibatmpProfileEntry, mibatmpProfileTable=mibatmpProfileTable, atmpProfile_AtmpSnmpTrap=atmpProfile_AtmpSnmpTrap, atmpProfile_Index_o=atmpProfile_Index_o, atmpProfile_RetryTimeout=atmpProfile_RetryTimeout, atmpProfile_AtmpSapReply=atmpProfile_AtmpSapReply, atmpProfile_IdleTimer=atmpProfile_IdleTimer, mibatmpProfile=mibatmpProfile, atmpProfile_HomeAgentPassword=atmpProfile_HomeAgentPassword, atmpProfile_MtuLimit=atmpProfile_MtuLimit, atmpProfile_ForceFragmentation=atmpProfile_ForceFragmentation, atmpProfile_Action_o=atmpProfile_Action_o, DisplayString=DisplayString, atmpProfile_RetryLimit=atmpProfile_RetryLimit, atmpProfile_UdpPort=atmpProfile_UdpPort, atmpProfile_AgentType=atmpProfile_AgentType, atmpProfile_AgentMode=atmpProfile_AgentMode)
