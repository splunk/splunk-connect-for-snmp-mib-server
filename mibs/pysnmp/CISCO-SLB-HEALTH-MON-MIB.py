#
# PySNMP MIB module CISCO-SLB-HEALTH-MON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SLB-HEALTH-MON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:39:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
cslbxServerProbes, SlbFunctionNameString, SlbUrlString = mibBuilder.importSymbols("CISCO-SLB-EXT-MIB", "cslbxServerProbes", "SlbFunctionNameString", "SlbUrlString")
SlbServerString, slbEntity, slbServerFarmName = mibBuilder.importSymbols("CISCO-SLB-MIB", "SlbServerString", "slbEntity", "slbServerFarmName")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, = mibBuilder.importSymbols("CISCO-TC", "CiscoPort")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, iso, Gauge32, MibIdentifier, IpAddress, NotificationType, Counter64, ObjectIdentity, ModuleIdentity, Bits, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "Gauge32", "MibIdentifier", "IpAddress", "NotificationType", "Counter64", "ObjectIdentity", "ModuleIdentity", "Bits", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TruthValue, RowStatus, DisplayString, TimeInterval, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TimeInterval", "DateAndTime", "TextualConvention")
ciscoSlbHealthMonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 508))
ciscoSlbHealthMonMIB.setRevisions(('2008-06-26 00:00', '2008-03-11 00:00', '2006-11-14 00:00', '2006-01-18 00:00',))
if mibBuilder.loadTexts: ciscoSlbHealthMonMIB.setLastUpdated('200806260000Z')
if mibBuilder.loadTexts: ciscoSlbHealthMonMIB.setOrganization('Cisco Systems, Inc.')
cslbxProbeCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1), )
if mibBuilder.loadTexts: cslbxProbeCfgTable.setStatus('current')
cslbxProbeCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeName"))
if mibBuilder.loadTexts: cslbxProbeCfgEntry.setStatus('current')
cslbxProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxProbeName.setStatus('current')
cslbxProbeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 3), TimeInterval().clone(12000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeInterval.setStatus('current')
cslbxProbeRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 4), Unsigned32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeRetries.setStatus('current')
cslbxProbeFailedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 5), TimeInterval().clone(30000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeFailedInterval.setStatus('current')
cslbxProbeReceiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 6), TimeInterval().clone(1000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeReceiveTimeout.setStatus('current')
cslbxProbeTcpOpenTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 7), TimeInterval().clone(1000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeTcpOpenTimeout.setStatus('current')
cslbxProbeAlternateDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 8), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeAlternateDestAddrType.setStatus('current')
cslbxProbeAlternateDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 9), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeAlternateDestAddr.setStatus('current')
cslbxProbeDnsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeDnsDomainName.setStatus('current')
cslbxProbeHttpRequestMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('get')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeHttpRequestMethod.setStatus('current')
cslbxProbeHttpRequestUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 12), SlbUrlString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeHttpRequestUrl.setStatus('current')
cslbxProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeRowStatus.setStatus('current')
cslbxProbeScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 14), SlbFunctionNameString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeScriptName.setStatus('current')
cslbxProbeScriptArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 15), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeScriptArguments.setStatus('current')
cslbxProbePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 16), CiscoPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbePort.setStatus('current')
cslbxProbeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 17), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeDescription.setStatus('current')
cslbxProbeRouteMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("transparent", 2), ("routingTable", 3))).clone('transparent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeRouteMethod.setStatus('current')
cslbxProbeProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("tcp", 2), ("udp", 3))).clone('tcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeProtocolType.setStatus('current')
cslbxProbePassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbePassCount.setStatus('current')
cslbxProbePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbePriority.setStatus('current')
cslbxProbeUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 22), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeUserName.setStatus('current')
cslbxProbePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 23), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbePassword.setStatus('current')
cslbxProbeConnTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("graceful", 1), ("forced", 2))).clone('forced')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeConnTermination.setStatus('current')
cslbxProbeSocketReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 25), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeSocketReuse.setStatus('current')
cslbxProbeSendDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2))).clone('ascii')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeSendDataType.setStatus('current')
cslbxProbeSendData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 27), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeSendData.setStatus('current')
cslbxProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxProbeState.setStatus('current')
cslbxDnsProbeIpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 2), )
if mibBuilder.loadTexts: cslbxDnsProbeIpTable.setStatus('current')
cslbxDnsProbeIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxDnsProbeIpProbeName"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxDnsProbeIpAddressType"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxDnsProbeIpAddress"))
if mibBuilder.loadTexts: cslbxDnsProbeIpEntry.setStatus('current')
cslbxDnsProbeIpProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 2, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxDnsProbeIpProbeName.setStatus('current')
cslbxDnsProbeIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cslbxDnsProbeIpAddressType.setStatus('current')
cslbxDnsProbeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: cslbxDnsProbeIpAddress.setStatus('current')
cslbxDnsProbeIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxDnsProbeIpRowStatus.setStatus('current')
cslbxProbeHeaderCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 3), )
if mibBuilder.loadTexts: cslbxProbeHeaderCfgTable.setStatus('current')
cslbxProbeHeaderCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHeaderProbeName"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHeaderFieldName"))
if mibBuilder.loadTexts: cslbxProbeHeaderCfgEntry.setStatus('current')
cslbxProbeHeaderProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 3, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxProbeHeaderProbeName.setStatus('current')
cslbxProbeHeaderFieldName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cslbxProbeHeaderFieldName.setStatus('current')
cslbxProbeHeaderFieldValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 3, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeHeaderFieldValue.setStatus('current')
cslbxProbeHeaderRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeHeaderRowStatus.setStatus('current')
cslbxProbeExpectStatusCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 4), )
if mibBuilder.loadTexts: cslbxProbeExpectStatusCfgTable.setStatus('current')
cslbxProbeExpectStatusCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 4, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeExpectStatusProbeName"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeExpectStatusMinValue"))
if mibBuilder.loadTexts: cslbxProbeExpectStatusCfgEntry.setStatus('current')
cslbxProbeExpectStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 4, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxProbeExpectStatusProbeName.setStatus('current')
cslbxProbeExpectStatusMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cslbxProbeExpectStatusMinValue.setStatus('current')
cslbxProbeExpectStatusMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 4, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeExpectStatusMaxValue.setStatus('current')
cslbxProbeExpectStatusRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeExpectStatusRowStatus.setStatus('current')
cslbxProbeHTTPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 5), )
if mibBuilder.loadTexts: cslbxProbeHTTPCfgTable.setStatus('current')
cslbxProbeHTTPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 5, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeName"))
if mibBuilder.loadTexts: cslbxProbeHTTPCfgEntry.setStatus('current')
cslbxProbeHTTPCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("httpOneDotZero", 1), ("httpOneDotOne", 2))).clone('httpOneDotOne')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeHTTPCfgVersion.setStatus('current')
cslbxProbeHTTPCfgPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeHTTPCfgPersistence.setStatus('current')
cslbxProbeHTTPCfgHashValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 5, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeHTTPCfgHashValid.setStatus('current')
cslbxProbeHTTPCfgHashName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 5, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeHTTPCfgHashName.setStatus('current')
cslbxProbeHTTPCfgCipherSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("rsaOther", 1), ("rsaAny", 2), ("rsaWithRc4128Md5", 3), ("rsaWithRc4128Sha", 4), ("rsaWithdesCbcSha", 5), ("rsaWith3desEdeCbcSha", 6), ("rsaExportWithRc440Md5", 7), ("rsaExportWithDes40CbcSha", 8), ("rsaExport1024WithRc456Md5", 9), ("rsaExport1024WithDesCbcSha", 10), ("rsaExport1024WithRc456Sha", 11), ("rsaWithAes128CbcSha", 12), ("rsaWithAes256cbcSha", 13))).clone('rsaOther')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeHTTPCfgCipherSuite.setStatus('current')
cslbxProbeHTTPCfgSslTlsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("sslv2", 2), ("sslv3", 3), ("tlsv1", 4), ("all", 5))).clone('sslv3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeHTTPCfgSslTlsVersion.setStatus('current')
cslbxProbeHTTPCfgSslSessionReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 5, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeHTTPCfgSslSessionReuse.setStatus('current')
cslbxProbeHTTPSslTlsVersionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 5, 1, 8), Bits().clone(namedValues=NamedValues(("sslv3", 0), ("tlsv1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxProbeHTTPSslTlsVersionSupported.setStatus('current')
cslbxProbeSIPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 6), )
if mibBuilder.loadTexts: cslbxProbeSIPCfgTable.setStatus('current')
cslbxProbeSIPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 6, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeName"))
if mibBuilder.loadTexts: cslbxProbeSIPCfgEntry.setStatus('current')
cslbxProbeSIPRegAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeSIPRegAddress.setStatus('current')
cslbxProbeFTPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 7), )
if mibBuilder.loadTexts: cslbxProbeFTPCfgTable.setStatus('current')
cslbxProbeFTPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 7, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeName"))
if mibBuilder.loadTexts: cslbxProbeFTPCfgEntry.setStatus('current')
cslbxProbeFtpRequestMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ls", 2), ("get", 3), ("put", 4))).clone('get')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeFtpRequestMethod.setStatus('current')
cslbxProbeFtpRequestFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 7, 1, 2), SlbUrlString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeFtpRequestFileName.setStatus('current')
cslbxProbeFtpRequestFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2))).clone('ascii')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeFtpRequestFileType.setStatus('current')
cslbxProbeTFTPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 8), )
if mibBuilder.loadTexts: cslbxProbeTFTPCfgTable.setStatus('current')
cslbxProbeTFTPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 8, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeName"))
if mibBuilder.loadTexts: cslbxProbeTFTPCfgEntry.setStatus('current')
cslbxProbeTftpRequestMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get", 1), ("put", 2))).clone('get')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeTftpRequestMethod.setStatus('current')
cslbxProbeTftpRequestFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 8, 1, 2), SlbUrlString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeTftpRequestFileName.setStatus('current')
cslbxProbeTftpRequestFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2))).clone('ascii')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeTftpRequestFileType.setStatus('current')
cslbxProbeIMAPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 9), )
if mibBuilder.loadTexts: cslbxProbeIMAPCfgTable.setStatus('current')
cslbxProbeIMAPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 9, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeName"))
if mibBuilder.loadTexts: cslbxProbeIMAPCfgEntry.setStatus('current')
cslbxProbeIMAPMailBox = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 9, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeIMAPMailBox.setStatus('current')
cslbxProbeIMAPMethodName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 9, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxProbeIMAPMethodName.setStatus('current')
ciscoSlbHealthMonMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 508, 0))
ciscoSlbHealthMonMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 508, 1))
cshMonSfarmProbes = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1))
ciscoSlbHealthMonMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 508, 2))
ciscoSlbHealthMonNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 2))
ciscoSlbHealthMonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 1))
ciscoSlbHealthMonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2))
class SlbProbeType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))
    namedValues = NamedValues(("icmpProbe", 1), ("tcpProbe", 2), ("dnsProbe", 3), ("httpProbe", 4), ("ftpProbe", 5), ("telnetProbe", 6), ("smtpProbe", 7), ("scriptedProbe", 8), ("undefined", 9), ("udpProbe", 10), ("httpsProbe", 11), ("ldapProbe", 12), ("popProbe", 13), ("imapProbe", 14), ("radiusProbe", 15), ("tacacsProbe", 16), ("sipProbe", 17), ("tftpProbe", 18), ("fingerProbe", 19), ("echoProbe", 20), ("rtspProbe", 21), ("snmpProbe", 22))

cslbxProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6, 1, 1, 2), SlbProbeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxProbeType.setStatus('current')
class CiscoProbeHealthMonState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("invalid", 2), ("init", 3), ("active", 4), ("failed", 5), ("disabled", 6))

class CiscoProbeInheritedPortType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("probe", 2), ("real", 3), ("vip", 4), ("default", 5))

cshMonSfarmRealProbeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 1), )
if mibBuilder.loadTexts: cshMonSfarmRealProbeStatsTable.setStatus('deprecated')
cshMonSfarmRealProbeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeName"), (0, "CISCO-SLB-MIB", "slbServerFarmName"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cshMonSfarmRealServerName"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cshMonSfarmRealServerPort"))
if mibBuilder.loadTexts: cshMonSfarmRealProbeStatsEntry.setStatus('deprecated')
cshMonSfarmRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cshMonSfarmRealServerName.setStatus('deprecated')
cshMonSfarmRealServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 1, 1, 2), InetPortNumber())
if mibBuilder.loadTexts: cshMonSfarmRealServerPort.setStatus('deprecated')
cshMonSfarmRealProbesPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonSfarmRealProbesPassed.setStatus('deprecated')
cshMonSfarmRealProbesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonSfarmRealProbesFailed.setStatus('deprecated')
cshMonSfarmRealProbeHealthMonState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 1, 1, 5), CiscoProbeHealthMonState().clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonSfarmRealProbeHealthMonState.setStatus('deprecated')
cshMonProbeTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2), )
if mibBuilder.loadTexts: cshMonProbeTypeStatsTable.setStatus('current')
cshMonProbeTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeType"))
if mibBuilder.loadTexts: cshMonProbeTypeStatsEntry.setStatus('current')
cshMonProbeTotalSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeTotalSentProbes.setStatus('current')
cshMonProbeTotalPassedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeTotalPassedProbes.setStatus('current')
cshMonProbeTotalConnectionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeTotalConnectionErrors.setStatus('current')
cshMonProbeTotalReceivedRSTs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeTotalReceivedRSTs.setStatus('current')
cshMonProbeTotalReceiveTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeTotalReceiveTimeouts.setStatus('current')
cshMonProbeTotalSendFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeTotalSendFailures.setStatus('current')
cshMonProbeTotalFailedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeTotalFailedProbes.setStatus('current')
cshMonProbeTotalRefusedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeTotalRefusedConns.setStatus('current')
cshMonProbeTotalOpenTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeTotalOpenTimeouts.setStatus('current')
cshMonProbeTotalActiveSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeTotalActiveSockets.setStatus('current')
cshMonServerfarmRealProbeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3), )
if mibBuilder.loadTexts: cshMonServerfarmRealProbeStatsTable.setStatus('current')
cshMonServerfarmRealProbeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeName"), (0, "CISCO-SLB-MIB", "slbServerFarmName"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cshMonServerfarmRealServerName"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cshMonServerfarmRealServerPort"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeInheritedPort"))
if mibBuilder.loadTexts: cshMonServerfarmRealProbeStatsEntry.setStatus('current')
cshMonServerfarmRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cshMonServerfarmRealServerName.setStatus('current')
cshMonServerfarmRealServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1, 2), InetPortNumber())
if mibBuilder.loadTexts: cshMonServerfarmRealServerPort.setStatus('current')
cshMonProbeInheritedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: cshMonProbeInheritedPort.setStatus('current')
cshMonServerfarmRealPassedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonServerfarmRealPassedProbes.setStatus('current')
cshMonServerfarmRealFailedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonServerfarmRealFailedProbes.setStatus('current')
cshMonServerfarmRealProbeHealthMonState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1, 6), CiscoProbeHealthMonState().clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonServerfarmRealProbeHealthMonState.setStatus('current')
cshMonServerfarmRealProbeLastProbeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonServerfarmRealProbeLastProbeTime.setStatus('current')
cshMonServerfarmRealProbeLastActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonServerfarmRealProbeLastActiveTime.setStatus('current')
cshMonServerfarmRealProbeLastFailedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonServerfarmRealProbeLastFailedTime.setStatus('current')
cshMonProbeInheritedPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 1, 3, 1, 10), CiscoProbeInheritedPortType().clone('default')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshMonProbeInheritedPortType.setStatus('current')
cshMonSocketOverusageCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 508, 1, 2, 1), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cshMonSocketOverusageCount.setStatus('current')
cshMonSocketOveruse = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 508, 0, 1)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cshMonSocketOverusageCount"))
if mibBuilder.loadTexts: cshMonSocketOveruse.setStatus('current')
cshMonSocketNormalUse = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 508, 0, 2)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cshMonSocketOverusageCount"))
if mibBuilder.loadTexts: cshMonSocketNormalUse.setStatus('current')
ciscoSlbHealthMonMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 1, 1)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonServerProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonProbeCfgExtGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonHTTPProbesCommmonGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonHTTPSProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonSIPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonFTPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonTFTPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonIMAPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonProbeScriptGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbHealthMonMIBCompliance = ciscoSlbHealthMonMIBCompliance.setStatus('deprecated')
ciscoSlbHealthMonMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 1, 2)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonServerProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonProbeCfgExtGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonHTTPProbesCommmonGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonHTTPSProbesGroupRev1"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonSIPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonFTPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonTFTPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonIMAPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonProbeScriptGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbHealthMonMIBComplianceRev1 = ciscoSlbHealthMonMIBComplianceRev1.setStatus('deprecated')
ciscoSlbHealthMonMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 1, 3)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonServerProbesGroupRev1"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonProbeCfgExtGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonSfarmrealserverProbeStatsGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonHTTPProbesCommmonGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonHTTPSProbesGroupRev1"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonSIPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonFTPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonTFTPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonIMAPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonProbeScriptGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbHealthMonMIBComplianceRev2 = ciscoSlbHealthMonMIBComplianceRev2.setStatus('deprecated')
ciscoSlbHealthMonMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 1, 4)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonServerProbesGroupRev1"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonProbeCfgExtGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonSfarmrealserverProbeStatsGroupRev1"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTypeStatsGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonHTTPProbesCommmonGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonHTTPSProbesGroupRev1"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonSIPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonFTPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonTFTPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonIMAPProbesGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbHealthMonProbeScriptGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonNotifObjectsGroup"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbHealthMonMIBComplianceRev3 = ciscoSlbHealthMonMIBComplianceRev3.setStatus('current')
cslbHealthMonServerProbesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 1)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeType"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeInterval"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeRetries"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeFailedInterval"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeReceiveTimeout"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeTcpOpenTimeout"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeAlternateDestAddrType"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeAlternateDestAddr"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeDnsDomainName"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeRowStatus"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxDnsProbeIpRowStatus"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeExpectStatusMaxValue"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeExpectStatusRowStatus"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbePort"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeDescription"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeProtocolType"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeRouteMethod"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonServerProbesGroup = cslbHealthMonServerProbesGroup.setStatus('deprecated')
cslbHealthMonProbeCfgExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 2)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeUserName"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbePassword"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbePassCount"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeConnTermination"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeSocketReuse"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeSendDataType"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeSendData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonProbeCfgExtGroup = cslbHealthMonProbeCfgExtGroup.setStatus('current')
cslbHealthMonSIPProbesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 3)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeSIPRegAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonSIPProbesGroup = cslbHealthMonSIPProbesGroup.setStatus('current')
cslbHealthMonFTPProbesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 4)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeFtpRequestMethod"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeFtpRequestFileName"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeFtpRequestFileType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonFTPProbesGroup = cslbHealthMonFTPProbesGroup.setStatus('current')
cslbHealthMonHTTPProbesCommmonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 5)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHttpRequestMethod"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHttpRequestUrl"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHeaderFieldValue"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHeaderRowStatus"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPCfgVersion"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPCfgPersistence"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPCfgHashValid"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPCfgHashName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonHTTPProbesCommmonGroup = cslbHealthMonHTTPProbesCommmonGroup.setStatus('current')
cslbHealthMonHTTPSProbesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 6)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPCfgCipherSuite"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPCfgSslTlsVersion"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPCfgSslSessionReuse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonHTTPSProbesGroup = cslbHealthMonHTTPSProbesGroup.setStatus('deprecated')
cslbHealthMonTFTPProbesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 7)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeTftpRequestMethod"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeTftpRequestFileName"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeTftpRequestFileType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonTFTPProbesGroup = cslbHealthMonTFTPProbesGroup.setStatus('current')
cslbHealthMonIMAPProbesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 8)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeIMAPMailBox"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeIMAPMethodName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonIMAPProbesGroup = cslbHealthMonIMAPProbesGroup.setStatus('current')
cslbHealthMonProbeScriptGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 9)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeScriptName"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeScriptArguments"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonProbeScriptGroup = cslbHealthMonProbeScriptGroup.setStatus('current')
cslbHealthMonHTTPSProbesGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 10)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPCfgCipherSuite"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPCfgSslTlsVersion"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPCfgSslSessionReuse"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeHTTPSslTlsVersionSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonHTTPSProbesGroupRev1 = cslbHealthMonHTTPSProbesGroupRev1.setStatus('current')
cslbHealthMonServerProbesGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 11)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeType"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeInterval"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeRetries"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeFailedInterval"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeReceiveTimeout"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeTcpOpenTimeout"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeAlternateDestAddrType"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeAlternateDestAddr"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeDnsDomainName"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeRowStatus"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxDnsProbeIpRowStatus"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeExpectStatusMaxValue"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeExpectStatusRowStatus"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbePort"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeDescription"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeProtocolType"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeRouteMethod"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbePriority"), ("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbHealthMonServerProbesGroupRev1 = cslbHealthMonServerProbesGroupRev1.setStatus('current')
cshMonSfarmrealserverProbeStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 12)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cshMonSfarmRealProbesPassed"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonSfarmRealProbesFailed"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonSfarmRealProbeHealthMonState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshMonSfarmrealserverProbeStatsGroup = cshMonSfarmrealserverProbeStatsGroup.setStatus('deprecated')
cshMonSfarmrealserverProbeStatsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 13)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cshMonServerfarmRealPassedProbes"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonServerfarmRealFailedProbes"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonServerfarmRealProbeHealthMonState"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonServerfarmRealProbeLastProbeTime"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonServerfarmRealProbeLastActiveTime"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonServerfarmRealProbeLastFailedTime"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeInheritedPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshMonSfarmrealserverProbeStatsGroupRev1 = cshMonSfarmrealserverProbeStatsGroupRev1.setStatus('current')
cshMonProbeTypeStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 14)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTotalSentProbes"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTotalPassedProbes"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTotalConnectionErrors"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTotalReceivedRSTs"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTotalReceiveTimeouts"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTotalSendFailures"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTotalFailedProbes"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTotalRefusedConns"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTotalOpenTimeouts"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonProbeTotalActiveSockets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshMonProbeTypeStatsGroup = cshMonProbeTypeStatsGroup.setStatus('current')
cshMonNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 15)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cshMonSocketOverusageCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshMonNotifObjectsGroup = cshMonNotifObjectsGroup.setStatus('current')
cshMonNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 508, 2, 2, 16)).setObjects(("CISCO-SLB-HEALTH-MON-MIB", "cshMonSocketOveruse"), ("CISCO-SLB-HEALTH-MON-MIB", "cshMonSocketNormalUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshMonNotifGroup = cshMonNotifGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-SLB-HEALTH-MON-MIB", ciscoSlbHealthMonMIBGroups=ciscoSlbHealthMonMIBGroups, cshMonSfarmRealProbeStatsTable=cshMonSfarmRealProbeStatsTable, cslbxProbeHeaderFieldValue=cslbxProbeHeaderFieldValue, cslbxProbeHTTPCfgEntry=cslbxProbeHTTPCfgEntry, cshMonProbeTotalConnectionErrors=cshMonProbeTotalConnectionErrors, cslbxProbeHTTPCfgVersion=cslbxProbeHTTPCfgVersion, cshMonServerfarmRealProbeStatsTable=cshMonServerfarmRealProbeStatsTable, cshMonNotifObjectsGroup=cshMonNotifObjectsGroup, cslbxProbeName=cslbxProbeName, cshMonSfarmrealserverProbeStatsGroupRev1=cshMonSfarmrealserverProbeStatsGroupRev1, cslbxProbeFTPCfgTable=cslbxProbeFTPCfgTable, cshMonSfarmRealProbeStatsEntry=cshMonSfarmRealProbeStatsEntry, cslbxDnsProbeIpTable=cslbxDnsProbeIpTable, cslbxProbeHTTPSslTlsVersionSupported=cslbxProbeHTTPSslTlsVersionSupported, cslbHealthMonTFTPProbesGroup=cslbHealthMonTFTPProbesGroup, cslbxProbeRetries=cslbxProbeRetries, cslbxProbeHeaderCfgTable=cslbxProbeHeaderCfgTable, cslbxProbeHeaderFieldName=cslbxProbeHeaderFieldName, ciscoSlbHealthMonMIBComplianceRev3=ciscoSlbHealthMonMIBComplianceRev3, cslbHealthMonHTTPSProbesGroupRev1=cslbHealthMonHTTPSProbesGroupRev1, cslbxProbeHTTPCfgHashValid=cslbxProbeHTTPCfgHashValid, cslbxProbeRouteMethod=cslbxProbeRouteMethod, cslbxProbePassCount=cslbxProbePassCount, cshMonServerfarmRealServerName=cshMonServerfarmRealServerName, cshMonProbeTotalPassedProbes=cshMonProbeTotalPassedProbes, cshMonServerfarmRealProbeLastProbeTime=cshMonServerfarmRealProbeLastProbeTime, cslbHealthMonProbeCfgExtGroup=cslbHealthMonProbeCfgExtGroup, cshMonProbeTotalSendFailures=cshMonProbeTotalSendFailures, cslbHealthMonSIPProbesGroup=cslbHealthMonSIPProbesGroup, cslbxProbeCfgEntry=cslbxProbeCfgEntry, cslbxDnsProbeIpEntry=cslbxDnsProbeIpEntry, cslbxProbeFtpRequestFileType=cslbxProbeFtpRequestFileType, cshMonSfarmRealProbesFailed=cshMonSfarmRealProbesFailed, ciscoSlbHealthMonMIBConformance=ciscoSlbHealthMonMIBConformance, ciscoSlbHealthMonMIBObjects=ciscoSlbHealthMonMIBObjects, cslbxProbeType=cslbxProbeType, cslbxDnsProbeIpAddress=cslbxDnsProbeIpAddress, cshMonServerfarmRealProbeLastActiveTime=cshMonServerfarmRealProbeLastActiveTime, cslbxProbeTFTPCfgTable=cslbxProbeTFTPCfgTable, cslbHealthMonServerProbesGroupRev1=cslbHealthMonServerProbesGroupRev1, cslbxProbeIMAPCfgTable=cslbxProbeIMAPCfgTable, cslbxProbePassword=cslbxProbePassword, cshMonProbeTotalRefusedConns=cshMonProbeTotalRefusedConns, cslbxProbeTFTPCfgEntry=cslbxProbeTFTPCfgEntry, cslbxProbeHTTPCfgSslTlsVersion=cslbxProbeHTTPCfgSslTlsVersion, SlbProbeType=SlbProbeType, cslbxProbeExpectStatusCfgTable=cslbxProbeExpectStatusCfgTable, cslbxProbeFailedInterval=cslbxProbeFailedInterval, cshMonServerfarmRealProbeStatsEntry=cshMonServerfarmRealProbeStatsEntry, cslbxProbeFtpRequestMethod=cslbxProbeFtpRequestMethod, cslbxProbeState=cslbxProbeState, cshMonProbeTotalActiveSockets=cshMonProbeTotalActiveSockets, cslbxProbeTcpOpenTimeout=cslbxProbeTcpOpenTimeout, cshMonProbeTotalOpenTimeouts=cshMonProbeTotalOpenTimeouts, cslbHealthMonHTTPSProbesGroup=cslbHealthMonHTTPSProbesGroup, cslbxProbeScriptName=cslbxProbeScriptName, cslbxProbeHTTPCfgPersistence=cslbxProbeHTTPCfgPersistence, cslbxProbeUserName=cslbxProbeUserName, ciscoSlbHealthMonNotifObjects=ciscoSlbHealthMonNotifObjects, cshMonSfarmRealServerName=cshMonSfarmRealServerName, cshMonSocketOveruse=cshMonSocketOveruse, cslbxProbeExpectStatusRowStatus=cslbxProbeExpectStatusRowStatus, cslbxProbeAlternateDestAddrType=cslbxProbeAlternateDestAddrType, cshMonServerfarmRealProbeLastFailedTime=cshMonServerfarmRealProbeLastFailedTime, cslbxProbeHTTPCfgHashName=cslbxProbeHTTPCfgHashName, cslbxProbeSIPCfgEntry=cslbxProbeSIPCfgEntry, cslbxProbeSendData=cslbxProbeSendData, cslbxDnsProbeIpAddressType=cslbxDnsProbeIpAddressType, cslbHealthMonHTTPProbesCommmonGroup=cslbHealthMonHTTPProbesCommmonGroup, cshMonProbeTypeStatsTable=cshMonProbeTypeStatsTable, cslbxProbeCfgTable=cslbxProbeCfgTable, cslbxProbeAlternateDestAddr=cslbxProbeAlternateDestAddr, cslbxProbeHTTPCfgTable=cslbxProbeHTTPCfgTable, cshMonSocketOverusageCount=cshMonSocketOverusageCount, cshMonSfarmProbes=cshMonSfarmProbes, cshMonProbeTypeStatsEntry=cshMonProbeTypeStatsEntry, cslbHealthMonProbeScriptGroup=cslbHealthMonProbeScriptGroup, cshMonServerfarmRealPassedProbes=cshMonServerfarmRealPassedProbes, cslbxProbeTftpRequestFileType=cslbxProbeTftpRequestFileType, cslbxProbeExpectStatusProbeName=cslbxProbeExpectStatusProbeName, cshMonProbeInheritedPortType=cshMonProbeInheritedPortType, cslbHealthMonServerProbesGroup=cslbHealthMonServerProbesGroup, cslbxProbeExpectStatusMinValue=cslbxProbeExpectStatusMinValue, cslbxProbeTftpRequestFileName=cslbxProbeTftpRequestFileName, cshMonProbeTotalReceivedRSTs=cshMonProbeTotalReceivedRSTs, cslbxProbeInterval=cslbxProbeInterval, cshMonServerfarmRealProbeHealthMonState=cshMonServerfarmRealProbeHealthMonState, PYSNMP_MODULE_ID=ciscoSlbHealthMonMIB, cslbxProbeDescription=cslbxProbeDescription, ciscoSlbHealthMonMIB=ciscoSlbHealthMonMIB, cslbxProbeHTTPCfgCipherSuite=cslbxProbeHTTPCfgCipherSuite, cshMonSocketNormalUse=cshMonSocketNormalUse, cslbxProbeIMAPMethodName=cslbxProbeIMAPMethodName, cslbxProbeFtpRequestFileName=cslbxProbeFtpRequestFileName, cslbxProbeHeaderCfgEntry=cslbxProbeHeaderCfgEntry, cshMonSfarmRealProbeHealthMonState=cshMonSfarmRealProbeHealthMonState, cshMonSfarmRealServerPort=cshMonSfarmRealServerPort, cslbxProbeConnTermination=cslbxProbeConnTermination, cslbxProbeHTTPCfgSslSessionReuse=cslbxProbeHTTPCfgSslSessionReuse, cslbxProbePort=cslbxProbePort, cslbxProbeReceiveTimeout=cslbxProbeReceiveTimeout, ciscoSlbHealthMonMIBNotifs=ciscoSlbHealthMonMIBNotifs, cshMonSfarmRealProbesPassed=cshMonSfarmRealProbesPassed, cslbxProbeProtocolType=cslbxProbeProtocolType, ciscoSlbHealthMonMIBCompliance=ciscoSlbHealthMonMIBCompliance, cslbxProbeSIPRegAddress=cslbxProbeSIPRegAddress, ciscoSlbHealthMonMIBCompliances=ciscoSlbHealthMonMIBCompliances, cshMonProbeInheritedPort=cshMonProbeInheritedPort, cslbxProbeHttpRequestUrl=cslbxProbeHttpRequestUrl, cslbxProbePriority=cslbxProbePriority, cshMonSfarmrealserverProbeStatsGroup=cshMonSfarmrealserverProbeStatsGroup, cslbxProbeScriptArguments=cslbxProbeScriptArguments, CiscoProbeInheritedPortType=CiscoProbeInheritedPortType, cshMonServerfarmRealFailedProbes=cshMonServerfarmRealFailedProbes, cslbxDnsProbeIpProbeName=cslbxDnsProbeIpProbeName, CiscoProbeHealthMonState=CiscoProbeHealthMonState, cslbxProbeExpectStatusMaxValue=cslbxProbeExpectStatusMaxValue, cslbxProbeDnsDomainName=cslbxProbeDnsDomainName, cshMonServerfarmRealServerPort=cshMonServerfarmRealServerPort, cslbxProbeFTPCfgEntry=cslbxProbeFTPCfgEntry, cslbHealthMonIMAPProbesGroup=cslbHealthMonIMAPProbesGroup, cslbxProbeHeaderProbeName=cslbxProbeHeaderProbeName, cshMonProbeTotalFailedProbes=cshMonProbeTotalFailedProbes, cslbxProbeSendDataType=cslbxProbeSendDataType, cslbxProbeIMAPMailBox=cslbxProbeIMAPMailBox, cslbxProbeHttpRequestMethod=cslbxProbeHttpRequestMethod, cshMonProbeTotalReceiveTimeouts=cshMonProbeTotalReceiveTimeouts, cslbHealthMonFTPProbesGroup=cslbHealthMonFTPProbesGroup, cslbxProbeSIPCfgTable=cslbxProbeSIPCfgTable, cslbxProbeTftpRequestMethod=cslbxProbeTftpRequestMethod, ciscoSlbHealthMonMIBComplianceRev2=ciscoSlbHealthMonMIBComplianceRev2, cslbxProbeIMAPCfgEntry=cslbxProbeIMAPCfgEntry, cslbxDnsProbeIpRowStatus=cslbxDnsProbeIpRowStatus, cslbxProbeSocketReuse=cslbxProbeSocketReuse, cshMonProbeTotalSentProbes=cshMonProbeTotalSentProbes, cslbxProbeRowStatus=cslbxProbeRowStatus, ciscoSlbHealthMonMIBComplianceRev1=ciscoSlbHealthMonMIBComplianceRev1, cslbxProbeExpectStatusCfgEntry=cslbxProbeExpectStatusCfgEntry, cshMonNotifGroup=cshMonNotifGroup, cshMonProbeTypeStatsGroup=cshMonProbeTypeStatsGroup, cslbxProbeHeaderRowStatus=cslbxProbeHeaderRowStatus)
