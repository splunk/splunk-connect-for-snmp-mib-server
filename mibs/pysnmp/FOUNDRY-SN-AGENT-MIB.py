#
# PySNMP MIB module FOUNDRY-SN-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-AGENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:23:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
snChassis, snStack, snAgentSys = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "snChassis", "snStack", "snAgentSys")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ModuleIdentity, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Integer32, Counter64, iso, MibIdentifier, IpAddress, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Integer32", "Counter64", "iso", "MibIdentifier", "IpAddress", "Unsigned32", "ObjectIdentity")
TimeStamp, DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
snAgent = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 4))
snAgent.setRevisions(('2014-03-10 00:00', '2013-02-28 00:00', '2012-09-21 00:00', '2012-04-18 00:00', '2012-01-24 00:00', '2011-12-22 00:00', '2010-06-02 00:00', '2009-09-30 00:00',))
if mibBuilder.loadTexts: snAgent.setLastUpdated('201209210000Z')
if mibBuilder.loadTexts: snAgent.setOrganization('Brocade Communications Systems, Inc.')
class MacAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(TextualConvention, OctetString):
    status = 'current'

class BrcdImageType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("unknown", 1), ("managementModuleBoot", 2), ("managementModuleMonitor", 3), ("managementModuleApplication", 4), ("interfaceModuleBoot", 5), ("interfaceModuleMonitor", 6), ("interfaceModuleApplication", 7), ("mgmtAndIntfModuleCombinedApp", 8), ("fpgaMBridge", 9), ("fpgaMBridge32", 10), ("fpgaSBridge", 11), ("fpgaHBridge", 12), ("fpgaBundled", 13), ("fpgaPbifOc", 14), ("fpgaStatsOc", 15), ("fpgaXppOc", 16), ("fpgaPbifMrj", 17), ("fpgaStatsMrj", 18), ("fpgaXppMrj", 19), ("fpgaPbifSp2", 20), ("fpgaXgmacSp2", 21), ("fpgaXppSp2", 22), ("fpgaPbif8x10", 23), ("fpgaXpp8x10", 24), ("fpgaXpp2x100", 25), ("fpgaPbifMetro", 26), ("fpgaXpp4x40", 27), ("fpgaPbif4x40", 28))

snChasGen = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1))
snChasPwr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2))
snChasFan = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3))
snChasUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4))
snChasType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasType.setStatus('current')
snChasSerNum = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasSerNum.setStatus('current')
snChasPwrSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupplyStatus.setStatus('deprecated')
snChasFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFanStatus.setStatus('deprecated')
snChasMainBrdDescription = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasMainBrdDescription.setStatus('current')
snChasMainPortTotal = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasMainPortTotal.setStatus('current')
snChasExpBrdDescription = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasExpBrdDescription.setStatus('current')
snChasExpPortTotal = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasExpPortTotal.setStatus('current')
snChasStatusLeds = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasStatusLeds.setStatus('current')
snChasTrafficLeds = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasTrafficLeds.setStatus('current')
snChasMediaLeds = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasMediaLeds.setStatus('current')
snChasEnablePwrSupplyTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasEnablePwrSupplyTrap.setStatus('current')
snChasMainBrdId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasMainBrdId.setStatus('current')
snChasExpBrdId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasExpBrdId.setStatus('current')
snChasSpeedLeds = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasSpeedLeds.setStatus('current')
snChasEnableFanTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasEnableFanTrap.setStatus('current')
snChasIdNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasIdNumber.setStatus('current')
snChasActualTemperature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasActualTemperature.setStatus('current')
snChasWarningTemperature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasWarningTemperature.setStatus('current')
snChasShutdownTemperature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasShutdownTemperature.setStatus('current')
snChasEnableTempWarnTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasEnableTempWarnTrap.setStatus('current')
snChasFlashCard = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFlashCard.setStatus('current')
snChasFlashCardLeds = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFlashCardLeds.setStatus('current')
snChasNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasNumSlots.setStatus('current')
snChasArchitectureType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stackable", 1), ("bigIron", 2), ("terathon", 3), ("fifthGen", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasArchitectureType.setStatus('current')
snChasProductType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 50, 66, 77, 78, 83, 87))).clone(namedValues=NamedValues(("invalid", 0), ("mg8", 1), ("ni40G", 2), ("imr", 3), ("biRx800", 4), ("niXmr16000", 5), ("biRx400", 6), ("niXmr8000", 7), ("biRx200", 8), ("niXmr4000", 9), ("niMlx16", 10), ("niMlx8", 11), ("niMlx4", 12), ("niMlx32", 13), ("niXmr32000", 14), ("biRx32", 15), ("niCES2000Series", 16), ("niCER2000Series", 17), ("brMlxE4", 18), ("brMlxE8", 19), ("brMlxE16", 20), ("brMlxE32", 21), ("biNI2", 50), ("biBB", 66), ("biM4", 77), ("biNI", 78), ("biSLB", 83), ("biWG", 87)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasProductType.setStatus('current')
snChasSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("xmr", 1), ("mlx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasSystemMode.setStatus('current')
snChasFactoryPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFactoryPartNumber.setStatus('current')
snChasFactorySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFactorySerialNumber.setStatus('current')
snChasPwrSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: snChasPwrSupplyTable.setStatus('current')
snChasPwrSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyIndex"))
if mibBuilder.loadTexts: snChasPwrSupplyEntry.setStatus('current')
snChasPwrSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupplyIndex.setStatus('current')
snChasPwrSupplyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupplyDescription.setStatus('current')
snChasPwrSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupplyOperStatus.setStatus('current')
snChasPwrSupply2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: snChasPwrSupply2Table.setStatus('current')
snChasPwrSupply2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snChasPwrSupply2Unit"), (0, "FOUNDRY-SN-AGENT-MIB", "snChasPwrSupply2Index"))
if mibBuilder.loadTexts: snChasPwrSupply2Entry.setStatus('current')
snChasPwrSupply2Unit = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupply2Unit.setStatus('current')
snChasPwrSupply2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupply2Index.setStatus('current')
snChasPwrSupply2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupply2Description.setStatus('current')
snChasPwrSupply2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupply2OperStatus.setStatus('current')
snChasFanTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: snChasFanTable.setStatus('current')
snChasFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snChasFanIndex"))
if mibBuilder.loadTexts: snChasFanEntry.setStatus('current')
snChasFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFanIndex.setStatus('current')
snChasFanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFanDescription.setStatus('current')
snChasFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFanOperStatus.setStatus('current')
snChasFan2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: snChasFan2Table.setStatus('current')
snChasFan2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snChasFan2Unit"), (0, "FOUNDRY-SN-AGENT-MIB", "snChasFan2Index"))
if mibBuilder.loadTexts: snChasFan2Entry.setStatus('current')
snChasFan2Unit = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFan2Unit.setStatus('current')
snChasFan2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFan2Index.setStatus('current')
snChasFan2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFan2Description.setStatus('current')
snChasFan2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFan2OperStatus.setStatus('current')
snChasUnitTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: snChasUnitTable.setStatus('current')
snChasUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"))
if mibBuilder.loadTexts: snChasUnitEntry.setStatus('current')
snChasUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitIndex.setStatus('current')
snChasUnitSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitSerNum.setStatus('current')
snChasUnitNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitNumSlots.setStatus('current')
snChasUnitActualTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitActualTemperature.setStatus('current')
snChasUnitWarningTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitWarningTemperature.setStatus('current')
snChasUnitShutdownTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitShutdownTemperature.setStatus('current')
snChasUnitPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitPartNum.setStatus('current')
snAgentGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1))
snAgentBrd = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2))
snAgentTrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3))
snAgentBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4))
snAgCfgEos = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5))
snAgentLog = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6))
snAgentSysParaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7))
snAgentConfigModule = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8))
snAgentUser = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9))
snAgentRedundant = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10))
snAgentCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11))
snAgentHw = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12))
snAgentTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13))
snAgentPoe = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 14))
snAgentLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15))
brcdSw = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16))
snAgentTask = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17))
brcdSwPackageGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1))
brcdSwPackageUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1))
brcdSwIntfModAutoUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2))
snAgReload = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("reset", 3), ("busy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgReload.setStatus('current')
snAgEraseNVRAM = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("error", 2), ("erase", 3), ("erasing", 4), ("busy", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgEraseNVRAM.setStatus('current')
snAgWriteNVRAM = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("error", 2), ("write", 3), ("writing", 4), ("busy", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgWriteNVRAM.setStatus('current')
snAgConfigFromNVRAM = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("error", 2), ("config", 3), ("configing", 4), ("busy", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgConfigFromNVRAM.setStatus('current')
snAgTftpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTftpServerIp.setStatus('deprecated')
snAgImgFname = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgImgFname.setStatus('current')
snAgImgLoad = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("normal", 1), ("flashPrepareReadFailure", 2), ("flashReadError", 3), ("flashPrepareWriteFailure", 4), ("flashWriteError", 5), ("tftpTimeoutError", 6), ("tftpOutOfBufferSpace", 7), ("tftpBusy", 8), ("tftpRemoteOtherErrors", 9), ("tftpRemoteNoFile", 10), ("tftpRemoteBadAccess", 11), ("tftpRemoteDiskFull", 12), ("tftpRemoteBadOperation", 13), ("tftpRemoteBadId", 14), ("tftpRemoteFileExists", 15), ("tftpRemoteNoUser", 16), ("operationError", 17), ("loading", 18), ("uploadMPPrimary", 19), ("downloadMPPrimary", 20), ("uploadMPSecondary", 21), ("downloadMPSecondary", 22), ("tftpWrongFileType", 23), ("downloadSPPrimary", 24), ("downloadSPSecondary", 25), ("uploadMPBootROM", 26), ("downloadMPBootROM", 27), ("uploadMPBootTFTP", 28), ("downloadMPBootTFTP", 29), ("uploadMPMonitor", 30), ("downloadMPMonitor", 31), ("downloadSPBootROM", 32), ("downloadSPMonitor", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgImgLoad.setStatus('current')
snAgCfgFname = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgCfgFname.setStatus('current')
snAgCfgLoad = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("normal", 1), ("flashPrepareReadFailure", 2), ("flashReadError", 3), ("flashPrepareWriteFailure", 4), ("flashWriteError", 5), ("tftpTimeoutError", 6), ("tftpOutOfBufferSpace", 7), ("tftpBusy", 8), ("tftpRemoteOtherErrors", 9), ("tftpRemoteNoFile", 10), ("tftpRemoteBadAccess", 11), ("tftpRemoteDiskFull", 12), ("tftpRemoteBadOperation", 13), ("tftpRemoteBadId", 14), ("tftpRemoteFileExists", 15), ("tftpRemoteNoUser", 16), ("operationError", 17), ("loading", 18), ("uploadFromFlashToServer", 20), ("downloadToFlashFromServer", 21), ("uploadFromDramToServer", 22), ("downloadToDramFromServer", 23), ("uploadFromFlashToNMS", 24), ("downloadToFlashFromNMS", 25), ("uploadFromDramToNMS", 26), ("downloadToDramFromNMS", 27), ("operationDoneWithNMS", 28), ("tftpWrongFileType", 29), ("downloadToDramFromServerOverwrite", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgCfgLoad.setStatus('current')
snAgDefGwayIp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgDefGwayIp.setStatus('current')
snAgImgVer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgImgVer.setStatus('current')
snAgFlashImgVer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgFlashImgVer.setStatus('current')
snAgGblIfIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblIfIpAddr.setStatus('current')
snAgGblIfIpMask = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblIfIpMask.setStatus('current')
snAgGblPassword = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 97))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblPassword.setStatus('current')
snAgTrpRcvrCurEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgTrpRcvrCurEntry.setStatus('current')
snAgGblDataRetrieveMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nextbootCfg", 0), ("operationalData", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblDataRetrieveMode.setStatus('current')
snAgSystemLog = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSystemLog.setStatus('current')
snAgGblEnableColdStartTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableColdStartTrap.setStatus('current')
snAgGblEnableLinkUpTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableLinkUpTrap.setStatus('current')
snAgGblEnableLinkDownTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableLinkDownTrap.setStatus('current')
snAgGblPasswordChangeMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("anyMgmtEntity", 1), ("consoleAndTelnet", 2), ("consoleOnly", 3), ("telnetOnly", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblPasswordChangeMode.setStatus('current')
snAgGblReadOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblReadOnlyCommunity.setStatus('current')
snAgGblReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblReadWriteCommunity.setStatus('current')
snAgGblCurrentSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblCurrentSecurityLevel.setStatus('current')
snAgGblSecurityLevelSet = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblSecurityLevelSet.setStatus('current')
snAgGblLevelPasswordsMask = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblLevelPasswordsMask.setStatus('current')
snAgGblQueueOverflow = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblQueueOverflow.setStatus('current')
snAgGblBufferShortage = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblBufferShortage.setStatus('current')
snAgGblDmaFailure = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblDmaFailure.setStatus('current')
snAgGblResourceLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblResourceLowWarning.setStatus('current')
snAgGblExcessiveErrorWarning = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblExcessiveErrorWarning.setStatus('current')
snAgGblCpuUtilData = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblCpuUtilData.setStatus('current')
snAgGblCpuUtilCollect = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblCpuUtilCollect.setStatus('deprecated')
snAgGblTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblTelnetTimeout.setStatus('current')
snAgGblEnableWebMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableWebMgmt.setStatus('current')
snAgGblSecurityLevelBinding = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblSecurityLevelBinding.setStatus('current')
snAgGblEnableSLB = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblEnableSLB.setStatus('current')
snAgSoftwareFeature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSoftwareFeature.setStatus('current')
snAgGblEnableModuleInsertedTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableModuleInsertedTrap.setStatus('current')
snAgGblEnableModuleRemovedTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableModuleRemovedTrap.setStatus('current')
snAgGblTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblTrapMessage.setStatus('current')
snAgGblEnableTelnetServer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableTelnetServer.setStatus('current')
snAgGblTelnetPassword = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblTelnetPassword.setStatus('current')
snAgBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgBuildDate.setStatus('current')
snAgBuildtime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgBuildtime.setStatus('current')
snAgBuildVer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgBuildVer.setStatus('current')
snAgGblCpuUtil1SecAvg = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblCpuUtil1SecAvg.setStatus('current')
snAgGblCpuUtil5SecAvg = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblCpuUtil5SecAvg.setStatus('current')
snAgGblCpuUtil1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblCpuUtil1MinAvg.setStatus('current')
snAgGblDynMemUtil = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblDynMemUtil.setStatus('deprecated')
snAgGblDynMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblDynMemTotal.setStatus('deprecated')
snAgGblDynMemFree = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblDynMemFree.setStatus('deprecated')
snAgImgLoadSPModuleType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("vm1", 2), ("pos12", 3), ("pos48", 4), ("atm", 5), ("gignpa", 6), ("lp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgImgLoadSPModuleType.setStatus('current')
snAgImgLoadSPModuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgImgLoadSPModuleNumber.setStatus('current')
snAgTrapHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrapHoldTime.setStatus('current')
snAgSFlowSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 59), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSFlowSourceInterface.setStatus('current')
snAgGblTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblTelnetLoginTimeout.setStatus('current')
snAgGblBannerExec = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 61), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblBannerExec.setStatus('current')
snAgGblBannerIncoming = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 62), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblBannerIncoming.setStatus('current')
snAgGblBannerMotd = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 63), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblBannerMotd.setStatus('current')
snAgWebMgmtServerTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgWebMgmtServerTcpPort.setStatus('current')
snAgTftpServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 65), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTftpServerAddrType.setStatus('current')
snAgTftpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 66), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTftpServerAddr.setStatus('current')
snAgGblDeleteFirstBeforeDownload = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 67), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblDeleteFirstBeforeDownload.setStatus('current')
snAgGblPasswordCheckMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 68), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblPasswordCheckMode.setStatus('current')
snAgentBrdTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: snAgentBrdTable.setStatus('current')
snAgentBrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"))
if mibBuilder.loadTexts: snAgentBrdEntry.setStatus('current')
snAgentBrdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdIndex.setStatus('current')
snAgentBrdMainBrdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMainBrdDescription.setStatus('current')
snAgentBrdMainBrdId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMainBrdId.setStatus('current')
snAgentBrdMainPortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMainPortTotal.setStatus('current')
snAgentBrdExpBrdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdExpBrdDescription.setStatus('current')
snAgentBrdExpBrdId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdExpBrdId.setStatus('current')
snAgentBrdExpPortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdExpPortTotal.setStatus('current')
snAgentBrdStatusLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdStatusLeds.setStatus('deprecated')
snAgentBrdTrafficLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdTrafficLeds.setStatus('deprecated')
snAgentBrdMediaLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMediaLeds.setStatus('deprecated')
snAgentBrdSpeedLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdSpeedLeds.setStatus('deprecated')
snAgentBrdModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("moduleEmpty", 0), ("moduleGoingDown", 2), ("moduleRejected", 3), ("moduleBad", 4), ("moduleConfigured", 8), ("moduleComingUp", 9), ("moduleRunning", 10), ("moduleBlocked", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdModuleStatus.setStatus('current')
snAgentBrdRedundantStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3), ("crashed", 4), ("comingUp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdRedundantStatus.setStatus('current')
snAgentBrdAlarmLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdAlarmLeds.setStatus('deprecated')
snAgentBrdTxTrafficLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdTxTrafficLeds.setStatus('deprecated')
snAgentBrdRxTrafficLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdRxTrafficLeds.setStatus('deprecated')
snAgentBrdStatusLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdStatusLedString.setStatus('current')
snAgentBrdTrafficLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdTrafficLedString.setStatus('current')
snAgentBrdMediaLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMediaLedString.setStatus('current')
snAgentBrdSpeedLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdSpeedLedString.setStatus('current')
snAgentBrdAlarmLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdAlarmLedString.setStatus('current')
snAgentBrdTxTrafficLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdTxTrafficLedString.setStatus('current')
snAgentBrdRxTrafficLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdRxTrafficLedString.setStatus('current')
snAgentBrdMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMemoryTotal.setStatus('current')
snAgentBrdMemoryAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 25), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMemoryAvailable.setStatus('current')
snAgentBrdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdSerialNumber.setStatus('current')
snAgentBrdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdPartNumber.setStatus('current')
snAgentBrdMemoryUtil100thPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMemoryUtil100thPercent.setStatus('current')
snAgentBrdUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdUpTime.setStatus('current')
snAgentBrd2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: snAgentBrd2Table.setStatus('current')
snAgentBrd2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentBrd2Unit"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentBrd2Slot"))
if mibBuilder.loadTexts: snAgentBrd2Entry.setStatus('current')
snAgentBrd2Unit = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2Unit.setStatus('current')
snAgentBrd2Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2Slot.setStatus('current')
snAgentBrd2MainBrdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2MainBrdDescription.setStatus('current')
snAgentBrd2MainBrdId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2MainBrdId.setStatus('current')
snAgentBrd2MainPortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2MainPortTotal.setStatus('current')
snAgentBrd2ModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("moduleEmpty", 0), ("moduleGoingDown", 2), ("moduleRejected", 3), ("moduleBad", 4), ("moduleConfigured", 8), ("moduleComingUp", 9), ("moduleRunning", 10), ("moduleBlocked", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2ModuleStatus.setStatus('current')
snAgentBrd2RedundantStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3), ("crashed", 4), ("comingUp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2RedundantStatus.setStatus('current')
snAgTrpRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: snAgTrpRcvrTable.setStatus('deprecated')
snAgTrpRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgTrpRcvrIndex"))
if mibBuilder.loadTexts: snAgTrpRcvrEntry.setStatus('deprecated')
snAgTrpRcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgTrpRcvrIndex.setStatus('deprecated')
snAgTrpRcvrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrIpAddr.setStatus('deprecated')
snAgTrpRcvrCommunityOrSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrCommunityOrSecurityName.setStatus('deprecated')
snAgTrpRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("ignore", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrStatus.setStatus('deprecated')
snAgTrpRcvrUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrUDPPort.setStatus('deprecated')
snAgTrpRcvrSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("usm", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrSecurityModel.setStatus('deprecated')
snAgTrpRcvrSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuth", 1), ("auth", 2), ("authPriv", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrSecurityLevel.setStatus('deprecated')
snAgBootSeqTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: snAgBootSeqTable.setStatus('current')
snAgBootSeqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgBootSeqIndex"))
if mibBuilder.loadTexts: snAgBootSeqEntry.setStatus('current')
snAgBootSeqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgBootSeqIndex.setStatus('current')
snAgBootSeqInstruction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fromPrimaryFlash", 1), ("fromSecondaryFlash", 2), ("fromTftpServer", 3), ("fromBootpServer", 4), ("fromPcmciaCard1", 5), ("fromPcmciaCard2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgBootSeqInstruction.setStatus('current')
snAgBootSeqIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgBootSeqIpAddr.setStatus('current')
snAgBootSeqFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgBootSeqFilename.setStatus('current')
snAgBootSeqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgBootSeqRowStatus.setStatus('current')
snAgSpBootSeqTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2), )
if mibBuilder.loadTexts: snAgSpBootSeqTable.setStatus('current')
snAgSpBootSeqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgSpBootSeqSpNumber"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgSpBootSeqIndex"))
if mibBuilder.loadTexts: snAgSpBootSeqEntry.setStatus('current')
snAgSpBootSeqSpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: snAgSpBootSeqSpNumber.setStatus('current')
snAgSpBootSeqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: snAgSpBootSeqIndex.setStatus('current')
snAgSpBootSeqInstruction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fromSpPrimaryFlash", 1), ("fromSpSecondaryFlash", 2), ("fromMpPrimaryFlash", 3), ("fromMpSecondaryFlash", 4), ("fromPcmciaCard1", 5), ("fromPcmciaCard2", 6), ("fromTftpServer", 7), ("interactively", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSpBootSeqInstruction.setStatus('current')
snAgSpBootSeqIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSpBootSeqIpAddr.setStatus('current')
snAgSpBootSeqFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSpBootSeqFilename.setStatus('current')
snAgSpBootSeqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("delete", 2), ("create", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSpBootSeqRowStatus.setStatus('current')
snAgCfgEosTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5, 1), )
if mibBuilder.loadTexts: snAgCfgEosTable.setStatus('current')
snAgCfgEosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgCfgEosIndex"))
if mibBuilder.loadTexts: snAgCfgEosEntry.setStatus('current')
snAgCfgEosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgCfgEosIndex.setStatus('current')
snAgCfgEosPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgCfgEosPacket.setStatus('current')
snAgCfgEosChkSum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgCfgEosChkSum.setStatus('current')
snStackGen = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1))
snStackSecSwitchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2))
snStackPriSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackPriSwitchMode.setStatus('current')
snStackMaxSecSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackMaxSecSwitch.setStatus('current')
snStackTotalSecSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackTotalSecSwitch.setStatus('current')
snStackSyncAllSecSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 0), ("invalid", 1), ("device", 2), ("global", 3), ("local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSyncAllSecSwitch.setStatus('current')
snStackSmSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSmSlotIndex.setStatus('current')
snStackFmpSetProcess = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("pending", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackFmpSetProcess.setStatus('current')
snStackSecSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: snStackSecSwitchTable.setStatus('current')
snStackSecSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snStackSecSwitchIndex"))
if mibBuilder.loadTexts: snStackSecSwitchEntry.setStatus('current')
snStackSecSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackSecSwitchIndex.setStatus('current')
snStackSecSwitchSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchSlotId.setStatus('current')
snStackSecSwitchPortCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackSecSwitchPortCnts.setStatus('current')
snStackSecSwitchEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchEnabled.setStatus('current')
snStackSecSwitchAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackSecSwitchAck.setStatus('current')
snStackSecSwitchMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackSecSwitchMacAddr.setStatus('current')
snStackSecSwitchSyncCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 0), ("invalid", 1), ("device", 2), ("global", 3), ("local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchSyncCmd.setStatus('current')
snStackSecSwitchIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchIpAddr.setStatus('current')
snStackSecSwitchSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchSubnetMask.setStatus('current')
snStackSecSwitchCfgCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("invalid", 1), ("auto", 2), ("manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchCfgCmd.setStatus('current')
snAgSysLogGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1))
snAgSysLogGblEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblEnable.setStatus('current')
snAgSysLogGblBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 2), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblBufferSize.setStatus('current')
snAgSysLogGblClear = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("clearAll", 1), ("clearDynamic", 2), ("clearStatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblClear.setStatus('current')
snAgSysLogGblCriticalLevel = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 4), Integer32().clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblCriticalLevel.setStatus('current')
snAgSysLogGblLoggedCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogGblLoggedCount.setStatus('current')
snAgSysLogGblDroppedCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogGblDroppedCount.setStatus('current')
snAgSysLogGblFlushedCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogGblFlushedCount.setStatus('current')
snAgSysLogGblOverrunCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogGblOverrunCount.setStatus('current')
snAgSysLogGblServer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblServer.setStatus('deprecated')
snAgSysLogGblFacility = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("kern", 1), ("user", 2), ("mail", 3), ("daemon", 4), ("auth", 5), ("syslog", 6), ("lpr", 7), ("news", 8), ("uucp", 9), ("sys9", 10), ("sys10", 11), ("sys11", 12), ("sys12", 13), ("sys13", 14), ("sys14", 15), ("cron", 16), ("local0", 17), ("local1", 18), ("local2", 19), ("local3", 20), ("local4", 21), ("local5", 22), ("local6", 23), ("local7", 24))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblFacility.setStatus('current')
snAgSysLogGblPersistenceEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblPersistenceEnable.setStatus('current')
snAgSysLogBufferTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2), )
if mibBuilder.loadTexts: snAgSysLogBufferTable.setStatus('current')
snAgSysLogBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgSysLogBufferIndex"))
if mibBuilder.loadTexts: snAgSysLogBufferEntry.setStatus('current')
snAgSysLogBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogBufferIndex.setStatus('current')
snAgSysLogBufferTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogBufferTimeStamp.setStatus('current')
snAgSysLogBufferCriticalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("alert", 2), ("critical", 3), ("debugging", 4), ("emergency", 5), ("error", 6), ("informational", 7), ("notification", 8), ("warning", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogBufferCriticalLevel.setStatus('current')
snAgSysLogBufferMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogBufferMessage.setStatus('current')
snAgSysLogBufferCalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogBufferCalTimeStamp.setStatus('current')
snAgStaticSysLogBufferTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3), )
if mibBuilder.loadTexts: snAgStaticSysLogBufferTable.setStatus('current')
snAgStaticSysLogBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgStaticSysLogBufferIndex"))
if mibBuilder.loadTexts: snAgStaticSysLogBufferEntry.setStatus('current')
snAgStaticSysLogBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgStaticSysLogBufferIndex.setStatus('current')
snAgStaticSysLogBufferTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgStaticSysLogBufferTimeStamp.setStatus('current')
snAgStaticSysLogBufferCriticalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("alert", 2), ("critical", 3), ("debugging", 4), ("emergency", 5), ("error", 6), ("informational", 7), ("notification", 8), ("warning", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgStaticSysLogBufferCriticalLevel.setStatus('current')
snAgStaticSysLogBufferMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgStaticSysLogBufferMessage.setStatus('current')
snAgStaticSysLogBufferCalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgStaticSysLogBufferCalTimeStamp.setStatus('current')
snAgSysLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 4), )
if mibBuilder.loadTexts: snAgSysLogServerTable.setStatus('current')
snAgSysLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgSysLogServerIP"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgSysLogServerUDPPort"))
if mibBuilder.loadTexts: snAgSysLogServerEntry.setStatus('current')
snAgSysLogServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogServerIP.setStatus('current')
snAgSysLogServerUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogServerUDPPort.setStatus('current')
snAgSysLogServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogServerRowStatus.setStatus('current')
snAgentSysParaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1), )
if mibBuilder.loadTexts: snAgentSysParaConfigTable.setStatus('current')
snAgentSysParaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentSysParaConfigIndex"))
if mibBuilder.loadTexts: snAgentSysParaConfigEntry.setStatus('current')
snAgentSysParaConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentSysParaConfigIndex.setStatus('current')
snAgentSysParaConfigDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentSysParaConfigDescription.setStatus('current')
snAgentSysParaConfigMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentSysParaConfigMin.setStatus('current')
snAgentSysParaConfigMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentSysParaConfigMax.setStatus('current')
snAgentSysParaConfigDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentSysParaConfigDefault.setStatus('current')
snAgentSysParaConfigCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentSysParaConfigCurrent.setStatus('current')
snAgentConfigModuleTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1), )
if mibBuilder.loadTexts: snAgentConfigModuleTable.setStatus('current')
snAgentConfigModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentConfigModuleIndex"))
if mibBuilder.loadTexts: snAgentConfigModuleEntry.setStatus('current')
snAgentConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleIndex.setStatus('current')
snAgentConfigModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 112, 113, 114, 144, 145, 152, 153, 154, 155, 160, 161, 168, 169, 176, 177, 180, 181, 184, 185, 192, 195, 196, 197, 198, 200, 201, 202, 206, 207, 208, 209, 212, 214, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 2064, 2065, 2066, 2067, 2068, 2069, 2074, 2080, 2081, 2083, 2096, 2098, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2112, 2113, 2208, 2209, 2220, 2240, 2241, 2244, 2245, 2246, 2248, 2249, 2016, 2017, 2020, 2021, 2024, 2137, 2138, 2139, 2032, 2033, 2036, 2037, 2040, 2140, 2141, 2142, 2055, 2056, 2057, 2136, 2135, 2134, 2132, 2133, 2224, 2225, 2227, 2228, 2229, 2233, 2234, 2235, 2236))).clone(namedValues=NamedValues(("bi8PortGigManagementModule", 0), ("bi4PortGigManagementModule", 1), ("bi16PortCopperManagementModule", 2), ("bi4PortGigModule", 3), ("fi2PortGigManagementModule", 4), ("fi4PortGigManagementModule", 5), ("bi8PortGigCopperManagementModule", 6), ("fi8PortGigManagementModule", 7), ("bi8PortGigModule", 8), ("bi12PortGigCopper2PortGigFiberManagement", 9), ("bi24PortCopperModule", 10), ("fi24PortCopperModule", 11), ("bi16Port100FXModule", 12), ("bi8Port100FXModule", 13), ("bi8PortGigCopperModule", 14), ("bi12PortGigCopper2PortGigFiber", 15), ("bi2PortGigManagementModule", 18), ("bi24Port100FXModule", 19), ("bi0PortManagementModule", 20), ("pos622MbsModule", 21), ("pos155MbsModule", 22), ("bi2PortGigModule", 23), ("bi2PortGigCopperModule", 24), ("fi2PortGigModule", 25), ("fi4PortGigModule", 26), ("fi8PortGigModule", 27), ("fi8PortGigCopperModule", 28), ("fi8PortGigCopperManagementModule", 29), ("pos155Mbs2PModule", 30), ("fi4PortGigCopperManagementModule", 31), ("fi2PortGigCopperManagementModule", 32), ("bi4PortGigCopperManagementModule", 33), ("bi2PortGigCopperManagementModule", 34), ("bi8PortGigM4ManagementModule", 35), ("bi4PortGigM4ManagementModule", 36), ("bi2PortGigM4ManagementModule", 37), ("bi0PortGigM4ManagementModule", 38), ("bi0PortWSMManagementModule", 39), ("biPos2Port2488MbsModule", 40), ("bi0PortWSMModule", 41), ("niPos2Port2488MbsModule", 42), ("ni4802", 43), ("bi4PortGigNPAModule", 44), ("biAtm2Port155MbsModule", 45), ("biAtm4Port155MbsModule", 46), ("bi1Port10GigModule", 47), ("fes4802Module", 48), ("fes2402Module", 49), ("fes9604Module", 50), ("fes12GigCopperAndGigFiberModule", 51), ("fesx24GigModule", 52), ("fesx24Gig2TenGigModule", 53), ("fesx24Gig1TenGigModule", 54), ("fesx48GigModule", 55), ("fesx48Gig2TenGigModule", 56), ("fesx48Gig1TenGigModule", 57), ("bi40PortGigCopperHVModule", 58), ("bi60PortGigCopperHVModule", 59), ("bi8Port10GigModule", 60), ("bi10PortGigHVModule", 61), ("bi20PortGigHVModule", 62), ("bi24PortGigModule", 63), ("bi24PortGigCopperModule", 64), ("bi48PortGigCopperModule", 65), ("bi24PortGigFiberModule", 66), ("ni4Port10GigSPModule", 75), ("ni40PortGigSPModule", 76), ("ni40PortGigCopperSPModule", 77), ("ni2Port10GigSPModule", 78), ("ni10PortGigSPModule", 79), ("ni20PortGigSPModule", 80), ("xmr4Port10GigSPModule", 81), ("xmr20PortGigSPModule", 82), ("xmr2Port10GigSPModule", 83), ("xmr20PortGigCopperSPModule", 84), ("xmr20PortGigFXSPModule", 85), ("niImrMrManagementModule", 86), ("niXmrMrManagementModule", 87), ("xer4Port10GigSPModule", 88), ("xer2Port10GigSPModule", 89), ("xer20PortGigCopperSPModule", 90), ("xer20PortGigFXSPModule", 91), ("mlx4Port10GigSPModule", 92), ("mlx2Port10GigSPModule", 93), ("mlx20PortGigCopperSPModule", 94), ("mlx20PortGigFXSPModule", 95), ("mlx48PortGigMrj21SPModule", 103), ("fesx24GigFiberGigCopperModule", 112), ("fesx24GigFiber2TenGigModule", 113), ("fesx24GigFiber1TenGigModule", 114), ("fgs24PortManagementModule", 144), ("fgs48PortManagementModule", 145), ("fgsXfp2Port10gModule", 152), ("fgsCx42Port10gModule", 153), ("fgsXfp1Cx41Port10gModule", 154), ("fgsXpf1Port10gModule", 155), ("fls24PortCopperBaseModule", 160), ("fls48PortCopperBaseModule", 161), ("flsXfp1Port10gModule", 168), ("flsCx41Port10gModule", 169), ("fcx624SBaseModule", 176), ("fcx648SBaseModule", 177), ("fcx624SPoeBaseModule", 180), ("fcx648SPoeBaseModule", 181), ("fcxXfp2Port10gModule", 184), ("fcxCx42Port16gModule", 185), ("fcx624SFBaseModule", 192), ("biFiJc48ePort100fxIpcModule", 195), ("biFiJc48tPort100fxIpcModule", 196), ("biFiJc8PortGigM4ManagementModule", 197), ("biFiJc8PortGigIgcModule", 198), ("biFiJc16PortGigIgcModule", 200), ("biJc24PortCopperIpc4GigIgcModule", 201), ("biJc16PortGigCopperIgcModule", 202), ("biFiJc24Port100fxIpcModule", 206), ("bi2Port10GigModule", 207), ("biJc48tPortRJ21OmpModule", 208), ("biJc48ePortRJ45OmpModule", 209), ("biJc24PortIpcRJ45PoeModule", 212), ("biJc2PortGigIgcM4ManagementModule", 214), ("fdryBi4Port10GigModule", 1048), ("fdryBi40PortGigModule", 1049), ("fdryBi1Port100FXManagementModule", 1050), ("fdryBi2Port10GigModule", 1051), ("fdryBi40PortGigCopperModule", 1052), ("fdryBi60PortGigCopperModule", 1053), ("fdryBi4Port10GigHVModule", 1054), ("fdryBi2Port10GigHVModule", 1055), ("fdryBi8Port10GigHVModule", 1056), ("fdryBi40PortGigHVModule", 1057), ("fdryBi40PortGigCopperHVModule", 1058), ("fdryBi60PortGigCopperHVModule", 1059), ("fdryBi8Port10GigModule", 1060), ("fdryBi10PortGigHVModule", 1061), ("fdryBi20PortGigHVModule", 1062), ("fdryBi24PortGigModule", 1063), ("fdryBi24PortGigCopperModule", 1064), ("fdryBi48PortGigCopperModule", 1065), ("fdryBi24PortGigFiberModule", 1066), ("fdryBi16Port10GigModule", 1067), ("fdryNi4Port10GigSPModule", 1075), ("fdryNi40PortGigSPModule", 1076), ("fdryNi40PortGigCopperSPModule", 1077), ("fdryNi2Port10GigSPModule", 1078), ("fdryNi10PortGigSPModule", 1079), ("fdryNi20PortGigSPModule", 1080), ("fdryXmr4Port10GigSPModule", 1081), ("fdryXmr20PortGigSPModule", 1082), ("fdryXmr2Port10GigSPModule", 1083), ("fdryXmr20PortGigCopperSPModule", 1084), ("fdryXmr20PortGigFXSPModule", 1085), ("fdryNiImrMrManagementModule", 1086), ("fdryNiXmrMrManagementModule", 1087), ("fdryMlx4Port10GigSPModule", 1088), ("fdryMlx2Port10GigSPModule", 1089), ("fdryMlx20PortGigCopperSPModule", 1090), ("fdryMlx20PortGigFXSPModule", 1091), ("brMlx4Port10GigXModule", 1093), ("brMlx24PortGigCopperXModule", 1094), ("brMlx24PortGigSfpXModule", 1095), ("niCes24PortFiberModule", 1096), ("niCes24PortCopperModule", 1097), ("niCes2Port10GigModule", 1098), ("niCes48PortFiberModule", 1099), ("niCes48PortCopperModule", 1100), ("niCes48PortFiberWith2Port10GModule", 1101), ("niCes48PortCopperWith2Port10GModule", 1102), ("fdryMlx48PortGigMrj21SPModule", 1103), ("fdryXmr2PortOC192SPModule", 1104), ("fdryXmr1PortOC192SPModule", 1105), ("fdryXmr8PortOC48SPModule", 1106), ("fdryXmr4PortOC48SPModule", 1107), ("fdryXmr2PortOC48SPModule", 1108), ("fdryNiMlxMrManagementModule", 1109), ("niMlx8Port10GigMModule", 1110), ("niMlx8Port10GigDModule", 1111), ("brMlx8Port10GigXModule", 1112), ("brMlx2Port100GigXModule", 1113), ("brcdMlxMr2ManagementModule", 1114), ("brcdXmrMr2ManagementModule", 1115), ("brcdMlx32Mr2ManagementModule", 1116), ("brcdXmr32Mr2ManagementModule", 1117), ("brcdNiXmr32MrManagementModule", 1118), ("brcdNiMlx32MrManagementModule", 1119), ("brcdMlx24Port10GigDMModule", 1120), ("brMlx4Port40GigMModule", 1121), ("brcdNiCes4Port10GigModule", 1122), ("brMlx2Port100GigCFP2Module", 1123), ("brMlx20Port10GigModule", 1124), ("brMlx4Port10GigXIPSecModule", 1125), ("fdryFiV4Sx12ComboPortManagementModule", 2064), ("fdryFiV4Sx2Port10gModule", 2065), ("fdryFiV4Sx24PortGigCopperModule", 2066), ("fdryFiV4Sx24PortGigFiberModule", 2067), ("fdryFiV4Sx2Port10gLanWanModule", 2068), ("fdryFiV4Sx24Port100m1gFiberModule", 2069), ("fdryFiV4Sx12ComboPortManagement2Module", 2074), ("fdryFiV4Sx210gPortManagementModule", 2080), ("fdryFiSx0PortManagementModule", 2081), ("fdryFiV4Sx4g4fPortManagementModule", 2083), ("fdryFiV6Sx12ComboPortManagementModule", 2096), ("fdryFiV6Sx24PortGigCopperModule", 2098), ("fdryFiV6Sx2Port10gModule", 2100), ("fdryFiV6Sx24Port100m1gFiberModule", 2101), ("fdryFiV6Sx210gPortManagementModule", 2102), ("fdryFiV6Sx48PortGigCopperPoeModule", 2103), ("fdryFiV6Sx4g4fPortManagementModule", 2104), ("fdryFiV6Sx12ComboPortManagement2Module", 2105), ("fdryFiV6Sx48PortGigCopperModule", 2106), ("fdryFiV6SxXl0PortManagementModule", 2112), ("fdryFiV6SxXl210gPortManagementModule", 2113), ("fdryFcx624BaseModule", 2208), ("fdryFcx648BaseModule", 2209), ("fdryFcxSfpPlus4Port10gModule", 2220), ("fdryIcx6610624BaseModule", 2240), ("fdryIcx6610648BaseModule", 2241), ("fdryIcx6610624PoeBaseModule", 2244), ("fdryIcx6610648PoeBaseModule", 2245), ("fdryIcx6610624FBaseModule", 2246), ("fdryIcx6610DualMode8PortModule", 2248), ("fdryIcx6610Qsfp10Port160gModule", 2249), ("fdryIcx6430624BaseModule", 2016), ("fdryIcx6430648BaseModule", 2017), ("fdryIcx6430624PoeBaseModule", 2020), ("fdryIcx6430648PoeBaseModule", 2021), ("fdryIcx6430sfp4Port4gModule", 2024), ("fdryIcx6430612CBaseModule", 2137), ("fdryIcx6430Copper2Port2gModule", 2138), ("fdryIcx6430sfp2Port2gModule", 2139), ("fdryIcx6450624BaseModule", 2032), ("fdryIcx6450648BaseModule", 2033), ("fdryIcx6450624PoeBaseModule", 2036), ("fdryIcx6450648PoeBaseModule", 2037), ("fdryIcx6450sfp4Port40gModule", 2040), ("fdryIcx6450612CPDBaseModule", 2140), ("fdryIcx6450Copper2Port2gModule", 2141), ("fdryIcx6450sfp2Port2gModule", 2142), ("fdryIcx665056BaseModule", 2055), ("fdryIcx6650sfp4Port40gModule", 2056), ("fdryIcx6650sfp8Port10gModule", 2057), ("fdryIcx775048CBaseModule", 2136), ("fdryIcx775048FBaseModule", 2135), ("fdryIcx775026QBaseModule", 2134), ("fdryIcx7750QSFP6port40gModule", 2132), ("fdryIcx77506Q6port40gModule", 2133), ("fdryIcx7450624BaseModule", 2224), ("fdryIcx7450648BaseModule", 2225), ("fdryIcx7450648FBaseModule", 2227), ("fdryIcx7450624PoeBaseModule", 2228), ("fdryIcx7450648PoeBaseModule", 2229), ("fdryIcx7400sfpplus4Port40gModule", 2233), ("fdryIcx7400copper4Port40gModule", 2234), ("fdryIcx7400sfp4Port4gModule", 2235), ("fdryIcx7400qsfpplus1Port40gModule", 2236)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentConfigModuleType.setStatus('current')
snAgentConfigModuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentConfigModuleRowStatus.setStatus('current')
snAgentConfigModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleDescription.setStatus('current')
snAgentConfigModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleOperStatus.setStatus('current')
snAgentConfigModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleSerialNumber.setStatus('current')
snAgentConfigModuleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleNumberOfPorts.setStatus('current')
snAgentConfigModuleMgmtModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("nonManagementModule", 2), ("unknownManagementModule", 3), ("m1ManagementModule", 4), ("m2ManagementModule", 5), ("m3ManagementModule", 6), ("m4ManagementModule", 7), ("m5ManagementModule", 8), ("jetcoreStackManagementModule", 9), ("muchoManagementModule", 10), ("rottWeilerManagementModule", 11), ("fesXStackManagementModule", 12), ("fgsStackManagementModule", 13), ("niCesManagementModule", 14), ("fastIronSuperXManagementModule", 15), ("fastIronSXRManagementModule", 16), ("fastIronV6SuperXManagementModule", 17), ("fastIronV6SXRManagementModule", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleMgmtModuleType.setStatus('current')
snAgentConfigModuleNumberOfCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleNumberOfCpus.setStatus('current')
snAgentConfigModule2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2), )
if mibBuilder.loadTexts: snAgentConfigModule2Table.setStatus('current')
snAgentConfigModule2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentConfigModule2Unit"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentConfigModule2Slot"))
if mibBuilder.loadTexts: snAgentConfigModule2Entry.setStatus('current')
snAgentConfigModule2Unit = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2Unit.setStatus('current')
snAgentConfigModule2Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2Slot.setStatus('current')
snAgentConfigModule2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 66, 67, 68, 69, 74, 80, 81, 112, 113, 114, 144, 145, 152, 153, 154, 155, 160, 161, 168, 169, 176, 177, 180, 181, 184, 185, 192, 195, 196, 197, 198, 200, 201, 202, 206, 207, 208, 209, 212, 214, 2208, 2209, 2220, 2240, 2241, 2244, 2245, 2246, 2248, 2249, 2016, 2017, 2020, 2021, 2024, 2137, 2138, 2139, 2032, 2033, 2036, 2037, 2040, 2140, 2141, 2142, 2055, 2056, 2057, 2136, 2135, 2134, 2132, 2133, 2224, 2225, 2227, 2228, 2229, 2233, 2234, 2235, 2236))).clone(namedValues=NamedValues(("bi8PortGigManagementModule", 0), ("bi4PortGigManagementModule", 1), ("bi16PortCopperManagementModule", 2), ("bi4PortGigModule", 3), ("fi2PortGigManagementModule", 4), ("fi4PortGigManagementModule", 5), ("bi8PortGigCopperManagementModule", 6), ("fi8PortGigManagementModule", 7), ("bi8PortGigModule", 8), ("bi12PortGigCopper2PortGigFiberManagement", 9), ("bi24PortCopperModule", 10), ("fi24PortCopperModule", 11), ("bi16Port100FXModule", 12), ("bi8Port100FXModule", 13), ("bi8PortGigCopperModule", 14), ("bi12PortGigCopper2PortGigFiber", 15), ("bi2PortGigManagementModule", 18), ("bi24Port100FXModule", 19), ("bi0PortManagementModule", 20), ("pos622MbsModule", 21), ("pos155MbsModule", 22), ("bi2PortGigModule", 23), ("bi2PortGigCopperModule", 24), ("fi2PortGigModule", 25), ("fi4PortGigModule", 26), ("fi8PortGigModule", 27), ("fi8PortGigCopperModule", 28), ("fi8PortGigCopperManagementModule", 29), ("pos155Mbs2PModule", 30), ("fi4PortGigCopperManagementModule", 31), ("fi2PortGigCopperManagementModule", 32), ("bi4PortGigCopperManagementModule", 33), ("bi2PortGigCopperManagementModule", 34), ("bi8PortGigM4ManagementModule", 35), ("bi4PortGigM4ManagementModule", 36), ("bi2PortGigM4ManagementModule", 37), ("bi0PortGigM4ManagementModule", 38), ("bi0PortWSMManagementModule", 39), ("biPos2Port2488MbsModule", 40), ("bi0PortWSMModule", 41), ("niPos2Port2488MbsModule", 42), ("ni4802", 43), ("bi4PortGigNPAModule", 44), ("biAtm2Port155MbsModule", 45), ("biAtm4Port155MbsModule", 46), ("bi1Port10GigModule", 47), ("fes4802Module", 48), ("fes2402Module", 49), ("fes9604Module", 50), ("fes12GigCopperAndGigFiberModule", 51), ("fesx24GigModule", 52), ("fesx24Gig2TenGigModule", 53), ("fesx24Gig1TenGigModule", 54), ("fesx48GigModule", 55), ("fesx48Gig2TenGigModule", 56), ("fesx48Gig1TenGigModule", 57), ("superx12ComboPortManagementModule", 64), ("superx2PortTenGigModule", 65), ("superx24PortGigCopperModule", 66), ("superx24PortGigFiberModule", 67), ("superx2PortTenGigLanWanModule", 68), ("superx24Port100tx1PortGigFiberModule", 69), ("superx12ComboPortManagement2Module", 74), ("superxR2PortTenGigManagementModule", 80), ("superxRManagementModule", 81), ("fesx24GigFiberGigCopperModule", 112), ("fesx24GigFiber2TenGigModule", 113), ("fesx24GigFiber1TenGigModule", 114), ("fgs24PortManagementModule", 144), ("fgs48PortManagementModule", 145), ("fgsXfp2Port10gModule", 152), ("fgsCx42Port10gModule", 153), ("fgsXfp1Cx41Port10gModule", 154), ("fgsXpf1Port10gModule", 155), ("fls24PortCopperBaseModule", 160), ("fls48PortCopperBaseModule", 161), ("flsXfp1Port10gModule", 168), ("flsCx41Port10gModule", 169), ("fcx624SBaseModule", 176), ("fcx648SBaseModule", 177), ("fcx624SPoeBaseModule", 180), ("fcx648SPoeBaseModule", 181), ("fcxXfp2Port10gModule", 184), ("fcxCx42Port16gModule", 185), ("fcx624SFBaseModule", 192), ("biFiJc48ePort100fxIpcModule", 195), ("biFiJc48tPort100fxIpcModule", 196), ("biFiJc8PortGigM4ManagementModule", 197), ("biFiJc8PortGigIgcModule", 198), ("biFiJc16PortGigIgcModule", 200), ("biJc24PortCopperIpc4GigIgcModule", 201), ("biJc16PortGigCopperIgcModule", 202), ("biFiJc24Port100fxIpcModule", 206), ("bi2Port10GigModule", 207), ("biJc48tPortRJ21OmpModule", 208), ("biJc48ePortRJ45OmpModule", 209), ("biJc24PortIpcRJ45PoeModule", 212), ("biJc2PortGigIgcM4ManagementModule", 214), ("fdryFcx624BaseModule", 2208), ("fdryFcx648BaseModule", 2209), ("fdryFcxSfpPlus4Port10gModule", 2220), ("fdryIcx6610624BaseModule", 2240), ("fdryIcx6610648BaseModule", 2241), ("fdryIcx6610624PoeBaseModule", 2244), ("fdryIcx6610648PoeBaseModule", 2245), ("fdryIcx6610624FBaseModule", 2246), ("fdryIcx6610DualMode8PortModule", 2248), ("fdryIcx6610Qsfp10Port160gModule", 2249), ("fdryIcx6430624BaseModule", 2016), ("fdryIcx6430648BaseModule", 2017), ("fdryIcx6430624PoeBaseModule", 2020), ("fdryIcx6430648PoeBaseModule", 2021), ("fdryIcx6430sfp4Port4gModule", 2024), ("fdryIcx6430612CBaseModule", 2137), ("fdryIcx6430Copper2Port2gModule", 2138), ("fdryIcx6430sfp2Port2gModule", 2139), ("fdryIcx6450624BaseModule", 2032), ("fdryIcx6450648BaseModule", 2033), ("fdryIcx6450624PoeBaseModule", 2036), ("fdryIcx6450648PoeBaseModule", 2037), ("fdryIcx6450sfp4Port40gModule", 2040), ("fdryIcx6450612CPDBaseModule", 2140), ("fdryIcx6450Copper2Port2gModule", 2141), ("fdryIcx6450sfp2Port2gModule", 2142), ("fdryIcx665056BaseModule", 2055), ("fdryIcx6650sfp4Port40gModule", 2056), ("fdryIcx6650sfp8Port10gModule", 2057), ("fdryIcx775048CBaseModule", 2136), ("fdryIcx775048FBaseModule", 2135), ("fdryIcx775026QBaseModule", 2134), ("fdryIcx7750QSFP6port40gModule", 2132), ("fdryIcx77506Q6port40gModule", 2133), ("fdryIcx7450624BaseModule", 2224), ("fdryIcx7450648BaseModule", 2225), ("fdryIcx7450648FBaseModule", 2227), ("fdryIcx7450624PoeBaseModule", 2228), ("fdryIcx7450648PoeBaseModule", 2229), ("fdryIcx7400sfpplus4Port40gModule", 2233), ("fdryIcx7400copper4Port40gModule", 2234), ("fdryIcx7400sfp4Port4gModule", 2235), ("fdryIcx7400qsfpplus1Port40gModule", 2236)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentConfigModule2Type.setStatus('current')
snAgentConfigModule2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentConfigModule2RowStatus.setStatus('current')
snAgentConfigModule2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2Description.setStatus('current')
snAgentConfigModule2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2OperStatus.setStatus('current')
snAgentConfigModule2SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2SerialNumber.setStatus('current')
snAgentConfigModule2NumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2NumberOfPorts.setStatus('current')
snAgentConfigModule2MgmtModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("nonManagementModule", 2), ("unknownManagementModule", 3), ("m1ManagementModule", 4), ("m2ManagementModule", 5), ("m3ManagementModule", 6), ("m4ManagementModule", 7), ("m5ManagementModule", 8), ("jetcoreStackManagementModule", 9), ("muchoManagementModule", 10), ("rottWeilerManagementModule", 11), ("fesXStackManagementModule", 12), ("fgsStackManagementModule", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2MgmtModuleType.setStatus('current')
snAgentConfigModule2NumberOfCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2NumberOfCpus.setStatus('current')
snAgentUserGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 1))
snAgentUserMaxAccnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentUserMaxAccnt.setStatus('current')
snAgentUserAccntTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2), )
if mibBuilder.loadTexts: snAgentUserAccntTable.setStatus('current')
snAgentUserAccntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentUserAccntName"))
if mibBuilder.loadTexts: snAgentUserAccntEntry.setStatus('current')
snAgentUserAccntName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentUserAccntName.setStatus('current')
snAgentUserAccntPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentUserAccntPassword.setStatus('current')
snAgentUserAccntEncryptCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentUserAccntEncryptCode.setStatus('current')
snAgentUserAccntPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentUserAccntPrivilege.setStatus('current')
snAgentUserAccntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentUserAccntRowStatus.setStatus('current')
snAgentRedunGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1))
snAgentRedunActiveMgmtMod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentRedunActiveMgmtMod.setStatus('current')
snAgentRedunSyncConfig = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentRedunSyncConfig.setStatus('current')
snAgentRedunBkupCopyBootCode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentRedunBkupCopyBootCode.setStatus('current')
snAgentEnableMgmtModRedunStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentEnableMgmtModRedunStateChangeTrap.setStatus('current')
snAgentRedunBkupBootLoad = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 20))).clone(namedValues=NamedValues(("normal", 1), ("operationError", 17), ("downloadBackup", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentRedunBkupBootLoad.setStatus('current')
snAgentRedunSwitchOver = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentRedunSwitchOver.setStatus('current')
snAgentCpuUtilTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1), )
if mibBuilder.loadTexts: snAgentCpuUtilTable.setStatus('current')
snAgentCpuUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentCpuUtilSlotNum"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentCpuUtilCpuId"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentCpuUtilInterval"))
if mibBuilder.loadTexts: snAgentCpuUtilEntry.setStatus('current')
snAgentCpuUtilSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtilSlotNum.setStatus('current')
snAgentCpuUtilCpuId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtilCpuId.setStatus('current')
snAgentCpuUtilInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtilInterval.setStatus('current')
snAgentCpuUtilValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtilValue.setStatus('deprecated')
snAgentCpuUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtilPercent.setStatus('current')
snAgentCpuUtil100thPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtil100thPercent.setStatus('current')
snCpuProcessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2), )
if mibBuilder.loadTexts: snCpuProcessTable.setStatus('current')
snCpuProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snCpuProcessName"))
if mibBuilder.loadTexts: snCpuProcessEntry.setStatus('current')
snCpuProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcessName.setStatus('current')
snCpuProcess5SecUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcess5SecUtil.setStatus('current')
snCpuProcess1MinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcess1MinUtil.setStatus('current')
snCpuProcess5MinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcess5MinUtil.setStatus('current')
snCpuProcess15MinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcess15MinUtil.setStatus('current')
snCpuProcessRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcessRuntime.setStatus('current')
snAgentCpuProcessEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentCpuProcessEnable.setStatus('current')
snAgentHwICBMCounterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1), )
if mibBuilder.loadTexts: snAgentHwICBMCounterTable.setStatus('current')
snAgentHwICBMCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentHwICBMCounterSlot"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentHwICBMCounterDMA"))
if mibBuilder.loadTexts: snAgentHwICBMCounterEntry.setStatus('current')
snAgentHwICBMCounterSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterSlot.setStatus('current')
snAgentHwICBMCounterDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterDMA.setStatus('current')
snAgentHwICBMCounterFreeDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterFreeDepth.setStatus('current')
snAgentHwICBMCounterWriteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterWriteDrop.setStatus('current')
snAgentHwICBMCounterWriteInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterWriteInput.setStatus('current')
snAgentHwICBMCounterWriteOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterWriteOutput.setStatus('current')
snAgentHwICBMCounterReadInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterReadInput.setStatus('current')
snAgentHwICBMCounterReadOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterReadOutput.setStatus('current')
snCAMIpStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2), )
if mibBuilder.loadTexts: snCAMIpStatTable.setStatus('current')
snCAMIpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snCAMIpStatIfIndex"), (0, "FOUNDRY-SN-AGENT-MIB", "snCAMIpStatLevel"))
if mibBuilder.loadTexts: snCAMIpStatEntry.setStatus('current')
snCAMIpStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCAMIpStatIfIndex.setStatus('current')
snCAMIpStatLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCAMIpStatLevel.setStatus('current')
snCAMIpStatFreeEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCAMIpStatFreeEntries.setStatus('current')
snCAMIpStatTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCAMIpStatTotalEntries.setStatus('current')
snCAMStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3), )
if mibBuilder.loadTexts: snCAMStatTable.setStatus('current')
snCAMStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snCamStatDMAIdNumber"))
if mibBuilder.loadTexts: snCAMStatEntry.setStatus('current')
snCamStatDMAIdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatDMAIdNumber.setStatus('current')
snCamStatDMAMasterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatDMAMasterNumber.setStatus('current')
snCamStatFreePool0Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreePool0Entries.setStatus('current')
snCamStatFreePool1Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreePool1Entries.setStatus('current')
snCamStatFreePool2Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreePool2Entries.setStatus('current')
snCamStatFreePool3Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreePool3Entries.setStatus('current')
snCamStatFreeL2Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreeL2Entries.setStatus('current')
snCamStatFreeL2LowestSection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreeL2LowestSection.setStatus('current')
snCamStatHostLookupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatHostLookupCount.setStatus('current')
snCamStatRouteLookupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatRouteLookupCount.setStatus('current')
snCamStatLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatLevel1.setStatus('current')
snCamStatLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatLevel2.setStatus('current')
snCamStatLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatLevel3.setStatus('current')
snCamStatMacFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatMacFailCount.setStatus('current')
snCamStatIPRouteFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatIPRouteFailCount.setStatus('current')
snCamStatIPSessionFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatIPSessionFailCount.setStatus('current')
snCamStatIPMCastFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatIPMCastFailCount.setStatus('current')
snCamStatL2SessionFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatL2SessionFailCount.setStatus('current')
snCamStatAddMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddMACCount.setStatus('current')
snCamStatAddVLANCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddVLANCount.setStatus('current')
snCamStatAddIPHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddIPHostCount.setStatus('current')
snCamStatAddIPRouteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddIPRouteCount.setStatus('current')
snCamStatAddIPSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddIPSessionCount.setStatus('current')
snCamStatAddIPMCastCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddIPMCastCount.setStatus('current')
snCamStatAddL2SessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddL2SessionCount.setStatus('current')
snCamStatAddIPXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddIPXCount.setStatus('current')
snCamStatDeleteDMACamCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatDeleteDMACamCount.setStatus('current')
snAgSystemDRAM = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4))
snAgSystemDRAMUtil = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDRAMUtil.setStatus('current')
snAgSystemDRAMTotal = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDRAMTotal.setStatus('current')
snAgSystemDRAMFree = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDRAMFree.setStatus('current')
snAgSystemDRAMForBGP = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDRAMForBGP.setStatus('current')
snAgSystemDRAMForOSPF = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDRAMForOSPF.setStatus('current')
snAgSystemDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5))
snAgSystemDebugTotalIn = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugTotalIn.setStatus('current')
snAgSystemDebugTotalOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugTotalOut.setStatus('current')
snAgSystemDebugCpuQueueRead = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugCpuQueueRead.setStatus('current')
snAgSystemDebugDRAMBuffer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugDRAMBuffer.setStatus('current')
snAgSystemDebugBMBuffer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugBMBuffer.setStatus('current')
snAgSystemDebugBMFreeBuffer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugBMFreeBuffer.setStatus('current')
snAgSystemDebugBMFreeBufferMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugBMFreeBufferMgmt.setStatus('current')
snAgSystemDebugIpcGigLock = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugIpcGigLock.setStatus('current')
snAgSystemDebugDRAMGetError = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugDRAMGetError.setStatus('current')
snAgSystemDebugDRAMToBMCopyFail = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugDRAMToBMCopyFail.setStatus('current')
snAgentTempTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1), )
if mibBuilder.loadTexts: snAgentTempTable.setStatus('current')
snAgentTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTempSlotNum"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTempSensorId"))
if mibBuilder.loadTexts: snAgentTempEntry.setStatus('current')
snAgentTempSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: snAgentTempSlotNum.setStatus('current')
snAgentTempSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: snAgentTempSensorId.setStatus('current')
snAgentTempSensorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTempSensorDescr.setStatus('current')
snAgentTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTempValue.setStatus('current')
snAgentTempThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2), )
if mibBuilder.loadTexts: snAgentTempThresholdTable.setStatus('current')
snAgentTempThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTempThresholdModule"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTempThresholdLevel"))
if mibBuilder.loadTexts: snAgentTempThresholdEntry.setStatus('current')
snAgentTempThresholdModule = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mgmtModule", 1), ("slaveModule", 2), ("switchFabricModule", 3))))
if mibBuilder.loadTexts: snAgentTempThresholdModule.setStatus('current')
snAgentTempThresholdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("mediumHhigh", 3), ("high", 4))))
if mibBuilder.loadTexts: snAgentTempThresholdLevel.setStatus('current')
snAgentTempThresholdHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentTempThresholdHighValue.setStatus('current')
snAgentTempThresholdLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentTempThresholdLowValue.setStatus('current')
snAgentTemp2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3), )
if mibBuilder.loadTexts: snAgentTemp2Table.setStatus('current')
snAgentTemp2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTemp2UnitNum"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTemp2SlotNum"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTemp2SensorId"))
if mibBuilder.loadTexts: snAgentTemp2Entry.setStatus('current')
snAgentTemp2UnitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: snAgentTemp2UnitNum.setStatus('current')
snAgentTemp2SlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: snAgentTemp2SlotNum.setStatus('current')
snAgentTemp2SensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: snAgentTemp2SensorId.setStatus('current')
snAgentTemp2SensorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTemp2SensorDescr.setStatus('current')
snAgentTemp2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTemp2Value.setStatus('current')
fdryLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1), )
if mibBuilder.loadTexts: fdryLicenseTable.setStatus('current')
fdryLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "fdryLicensePackageName"), (0, "FOUNDRY-SN-AGENT-MIB", "fdryLicenseLid"), (1, "FOUNDRY-SN-AGENT-MIB", "fdryLicenseHash"))
if mibBuilder.loadTexts: fdryLicenseEntry.setStatus('current')
fdryLicensePackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24)))
if mibBuilder.loadTexts: fdryLicensePackageName.setStatus('current')
fdryLicenseLid = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 11)))
if mibBuilder.loadTexts: fdryLicenseLid.setStatus('current')
fdryLicenseHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: fdryLicenseHash.setStatus('current')
fdryLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("trial", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseType.setStatus('current')
fdryLicensePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicensePrecedence.setStatus('current')
fdryLicenseTrialDays = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseTrialDays.setStatus('current')
fdryLicenseTrialTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseTrialTimeElapsed.setStatus('current')
fdryLicenseTrialTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseTrialTimeLeft.setStatus('current')
fdryLicenseTrialState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("unused", 2), ("active", 3), ("expired", 4), ("duplicated", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseTrialState.setStatus('current')
fdryLicenseVendorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseVendorInfo.setStatus('current')
fdryLicenseSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseSlot.setStatus('current')
fdryLicenseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodeLocked", 1), ("nonNodeLocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseMode.setStatus('current')
fdryLicenseSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseSerialNumber.setStatus('current')
fdryLicenseCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseCapacity.setStatus('current')
fdryLicensedFeatureInfo = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 2), Bits().clone(namedValues=NamedValues(("ospf", 0), ("isis", 1), ("bgp", 2), ("mpls", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicensedFeatureInfo.setStatus('current')
brcdPortLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 3), )
if mibBuilder.loadTexts: brcdPortLicenseTable.setStatus('current')
brcdPortLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "brcdPortLicenseIndex"))
if mibBuilder.loadTexts: brcdPortLicenseEntry.setStatus('current')
brcdPortLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: brcdPortLicenseIndex.setStatus('current')
brcdPortLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("validLic", 1), ("noLic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdPortLicenseStatus.setStatus('current')
brcdSwPackageFname = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwPackageFname.setStatus('current')
brcdSwPackageLoad = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("tftpToPrimary", 2), ("tftpToSecondary", 3), ("tftpToMgmtModulePrimaryIntfModuleSecondary", 4), ("tftpToMgmtModuleSecondaryIntfModulePrimary", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwPackageLoad.setStatus('current')
brcdSwPackageLoadStatus = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("normal", 1), ("started", 2), ("internalError", 3), ("manifestFileDownloadError", 4), ("manifestFileValidationError", 5), ("downloadingManagementModuleBoot", 6), ("downloadingManagementModuleMonitor", 7), ("downloadingManagementModuleApplication", 8), ("downloadingInterfaceModuleBoot", 9), ("downloadingInterfaceModuleMonitor", 10), ("downloadingInterfaceModuleApplication", 11), ("downloadingInterfaceModuleFpga", 12), ("downloadingFpgaMBridge", 13), ("downloadingFpgaSBridge", 14), ("downloadingFpgaHBridge", 15), ("upgradingManagementModuleBoot", 16), ("upgradingManagementModuleMonitor", 17), ("upgradingManagementModuleApplication", 18), ("upgradingInterfaceModuleBoot", 19), ("upgradingInterfaceModuleMonitor", 20), ("upgradingInterfaceModuleApplication", 21), ("upgradingInterfaceModuleFpga", 22), ("upgradingFpgaMBridge", 23), ("upgradingFpgaSBridge", 24), ("upgradingFpgaHBridge", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSwPackageLoadStatus.setStatus('current')
brcdSwPackageUpgradeAllImages = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwPackageUpgradeAllImages.setStatus('current')
brcdSwPackageUpgradeResultTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5), )
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultTable.setStatus('current')
brcdSwPackageUpgradeResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "brcdSwPackageUpgradeResultIndex"))
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultEntry.setStatus('current')
brcdSwPackageUpgradeResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultIndex.setStatus('current')
brcdSwPackageUpgradeResultImageType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1, 2), BrcdImageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultImageType.setStatus('current')
brcdSwPackageUpgradeResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("downloadFailed", 2), ("installFailed", 3), ("skipped", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultStatus.setStatus('current')
brcdSwPackageUpgradeResultTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultTimeStamp.setStatus('current')
brcdSwPackageUpgradeResultDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultDescription.setStatus('current')
brcdSwPackageUpgradeSkipVersionCheck = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwPackageUpgradeSkipVersionCheck.setStatus('current')
brcdSwIntfModAutoUpgradeMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("tftp", 3), ("slot1", 4), ("slot2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeMode.setStatus('current')
brcdSwIntfModAutoUpgradeTftpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeTftpAddrType.setStatus('current')
brcdSwIntfModAutoUpgradeTftpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeTftpAddr.setStatus('current')
brcdSwIntfModAutoUpgradeSrcPath = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeSrcPath.setStatus('current')
brcdSwIntfModAutoUpgradeAllImages = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeAllImages.setStatus('deprecated')
snAgentTaskCpuTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1), )
if mibBuilder.loadTexts: snAgentTaskCpuTable.setStatus('current')
snAgentTaskCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTaskCpuTaskID"))
if mibBuilder.loadTexts: snAgentTaskCpuEntry.setStatus('current')
snAgentTaskCpuTaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuTaskID.setStatus('current')
snAgentTaskCpuTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuTaskName.setStatus('current')
snAgentTaskCpuState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuState.setStatus('current')
snAgentTaskCpuWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuWaitTime.setStatus('current')
snAgentTaskCpuHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuHoldTime.setStatus('current')
snAgentTaskCpuTaskActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuTaskActivity.setStatus('current')
snAgentTaskMQTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2), )
if mibBuilder.loadTexts: snAgentTaskMQTable.setStatus('current')
snAgentTaskMQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTaskMQTaskID"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTaskMQPriority"))
if mibBuilder.loadTexts: snAgentTaskMQEntry.setStatus('current')
snAgentTaskMQTaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQTaskID.setStatus('current')
snAgentTaskMQPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQPriority.setStatus('current')
snAgentTaskMQTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQTaskName.setStatus('current')
snAgentTaskMQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQLength.setStatus('current')
snAgentTaskMQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQDepth.setStatus('current')
snAgentTaskMQMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQMaxDepth.setStatus('current')
snAgentTaskMQStickyMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQStickyMaxDepth.setStatus('current')
snAgentTaskMQMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQMsgs.setStatus('current')
snAgentTaskMQMaxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQMaxMsgs.setStatus('current')
snAgentTaskMQStickyMaxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQStickyMaxMsgs.setStatus('current')
snAgentTaskMQFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQFailedCount.setStatus('current')
snAgentTaskMQStickyFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQStickyFailedCount.setStatus('current')
snAgentTaskBufferTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3), )
if mibBuilder.loadTexts: snAgentTaskBufferTable.setStatus('current')
snAgentTaskBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTaskBufferTaskID"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTaskBufferPoolID"))
if mibBuilder.loadTexts: snAgentTaskBufferEntry.setStatus('current')
snAgentTaskBufferTaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskBufferTaskID.setStatus('current')
snAgentTaskBufferPoolID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskBufferPoolID.setStatus('current')
snAgentTaskBufferTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskBufferTaskName.setStatus('current')
snAgentTaskBufferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskBufferCount.setStatus('current')
mibBuilder.exportSymbols("FOUNDRY-SN-AGENT-MIB", snChasFanOperStatus=snChasFanOperStatus, snAgSysLogBufferCriticalLevel=snAgSysLogBufferCriticalLevel, snChasArchitectureType=snChasArchitectureType, brcdSwIntfModAutoUpgradeSrcPath=brcdSwIntfModAutoUpgradeSrcPath, snAgBuildtime=snAgBuildtime, snChasFanEntry=snChasFanEntry, snChasSpeedLeds=snChasSpeedLeds, snAgentBrdPartNumber=snAgentBrdPartNumber, snAgentTemp2Table=snAgentTemp2Table, snAgentTaskBufferTable=snAgentTaskBufferTable, snAgGblPassword=snAgGblPassword, snCpuProcess15MinUtil=snCpuProcess15MinUtil, snAgentConfigModule2NumberOfPorts=snAgentConfigModule2NumberOfPorts, brcdSwIntfModAutoUpgradeTftpAddr=brcdSwIntfModAutoUpgradeTftpAddr, snStackSecSwitchIpAddr=snStackSecSwitchIpAddr, snAgentBrdStatusLedString=snAgentBrdStatusLedString, snAgSysLogGblLoggedCount=snAgSysLogGblLoggedCount, snChasEnableTempWarnTrap=snChasEnableTempWarnTrap, snAgSysLogGblDroppedCount=snAgSysLogGblDroppedCount, snAgentTaskBufferTaskID=snAgentTaskBufferTaskID, snCamStatIPRouteFailCount=snCamStatIPRouteFailCount, snAgGblResourceLowWarning=snAgGblResourceLowWarning, fdryLicenseVendorInfo=fdryLicenseVendorInfo, snAgentCpuUtilSlotNum=snAgentCpuUtilSlotNum, snAgSysLogServerUDPPort=snAgSysLogServerUDPPort, snAgSpBootSeqFilename=snAgSpBootSeqFilename, snAgStaticSysLogBufferIndex=snAgStaticSysLogBufferIndex, snAgentSysParaConfigMax=snAgentSysParaConfigMax, snAgentBrdRxTrafficLeds=snAgentBrdRxTrafficLeds, snAgGblDataRetrieveMode=snAgGblDataRetrieveMode, snAgentTemp2UnitNum=snAgentTemp2UnitNum, snAgentConfigModule2NumberOfCpus=snAgentConfigModule2NumberOfCpus, snAgSpBootSeqIndex=snAgSpBootSeqIndex, snAgImgFname=snAgImgFname, snChasGen=snChasGen, snCpuProcess5SecUtil=snCpuProcess5SecUtil, brcdSwPackageUpgradeResultEntry=brcdSwPackageUpgradeResultEntry, snAgentTempSlotNum=snAgentTempSlotNum, snAgentBrd=snAgentBrd, snAgGblBufferShortage=snAgGblBufferShortage, snAgentCpuUtilEntry=snAgentCpuUtilEntry, snAgentPoe=snAgentPoe, snAgTrpRcvrUDPPort=snAgTrpRcvrUDPPort, snAgentTaskCpuTaskName=snAgentTaskCpuTaskName, snCamStatIPMCastFailCount=snCamStatIPMCastFailCount, snAgentCpu=snAgentCpu, brcdSwIntfModAutoUpgradeTftpAddrType=brcdSwIntfModAutoUpgradeTftpAddrType, snAgGblTelnetPassword=snAgGblTelnetPassword, snChasFan2Index=snChasFan2Index, snAgSpBootSeqIpAddr=snAgSpBootSeqIpAddr, snAgStaticSysLogBufferMessage=snAgStaticSysLogBufferMessage, fdryLicenseTable=fdryLicenseTable, snChasUnit=snChasUnit, snAgentBrd2Unit=snAgentBrd2Unit, snAgentBrdMemoryUtil100thPercent=snAgentBrdMemoryUtil100thPercent, snChasPwrSupply2Description=snChasPwrSupply2Description, snStackFmpSetProcess=snStackFmpSetProcess, snAgentConfigModule2Entry=snAgentConfigModule2Entry, snAgSystemDRAMTotal=snAgSystemDRAMTotal, brcdSwPackageUpgradeResultTable=brcdSwPackageUpgradeResultTable, snChasFlashCardLeds=snChasFlashCardLeds, snAgentTempSensorDescr=snAgentTempSensorDescr, snAgentTrp=snAgentTrp, snAgGblCpuUtil1SecAvg=snAgGblCpuUtil1SecAvg, snAgentTask=snAgentTask, snAgSpBootSeqSpNumber=snAgSpBootSeqSpNumber, snAgGblTrapMessage=snAgGblTrapMessage, snAgSysLogGblClear=snAgSysLogGblClear, brcdSwIntfModAutoUpgrade=brcdSwIntfModAutoUpgrade, snChasUnitActualTemperature=snChasUnitActualTemperature, snAgentSysParaConfigMin=snAgentSysParaConfigMin, snAgentBrdTrafficLeds=snAgentBrdTrafficLeds, snAgentRedunSwitchOver=snAgentRedunSwitchOver, snChasShutdownTemperature=snChasShutdownTemperature, snCamStatFreePool3Entries=snCamStatFreePool3Entries, snAgentSysParaConfigIndex=snAgentSysParaConfigIndex, snCamStatIPSessionFailCount=snCamStatIPSessionFailCount, snChasUnitTable=snChasUnitTable, snStackTotalSecSwitch=snStackTotalSecSwitch, snAgSysLogServerRowStatus=snAgSysLogServerRowStatus, snAgentCpuUtilInterval=snAgentCpuUtilInterval, snCpuProcessName=snCpuProcessName, MacAddress=MacAddress, snAgent=snAgent, snAgentRedundant=snAgentRedundant, snAgentConfigModule2MgmtModuleType=snAgentConfigModule2MgmtModuleType, snAgentCpuUtilCpuId=snAgentCpuUtilCpuId, snAgentConfigModule=snAgentConfigModule, brcdSwPackageUpgradeResultDescription=brcdSwPackageUpgradeResultDescription, snChasExpBrdId=snChasExpBrdId, snAgentBrdSpeedLeds=snAgentBrdSpeedLeds, snChasPwrSupplyStatus=snChasPwrSupplyStatus, fdryLicenseSlot=fdryLicenseSlot, snChasUnitWarningTemperature=snChasUnitWarningTemperature, snAgFlashImgVer=snAgFlashImgVer, snAgGblCurrentSecurityLevel=snAgGblCurrentSecurityLevel, snAgWebMgmtServerTcpPort=snAgWebMgmtServerTcpPort, snAgentTemp=snAgentTemp, snAgGblSecurityLevelBinding=snAgGblSecurityLevelBinding, snAgCfgEos=snAgCfgEos, snAgSysLogBufferCalTimeStamp=snAgSysLogBufferCalTimeStamp, snAgSFlowSourceInterface=snAgSFlowSourceInterface, snAgGblExcessiveErrorWarning=snAgGblExcessiveErrorWarning, snCamStatAddIPHostCount=snCamStatAddIPHostCount, snAgSystemDebugTotalIn=snAgSystemDebugTotalIn, brcdSwPackageUpgradeAllImages=brcdSwPackageUpgradeAllImages, snAgentUserAccntPassword=snAgentUserAccntPassword, snChasUnitEntry=snChasUnitEntry, snAgCfgEosIndex=snAgCfgEosIndex, snAgBootSeqIpAddr=snAgBootSeqIpAddr, snAgSystemDebug=snAgSystemDebug, snAgentTaskBufferCount=snAgentTaskBufferCount, snAgStaticSysLogBufferTimeStamp=snAgStaticSysLogBufferTimeStamp, brcdPortLicenseStatus=brcdPortLicenseStatus, snCpuProcess5MinUtil=snCpuProcess5MinUtil, snAgentUserAccntEntry=snAgentUserAccntEntry, brcdSwPackageGroup=brcdSwPackageGroup, snAgentTaskMQStickyFailedCount=snAgentTaskMQStickyFailedCount, snAgentHwICBMCounterReadOutput=snAgentHwICBMCounterReadOutput, snAgSystemDebugBMBuffer=snAgSystemDebugBMBuffer, snAgTrpRcvrIpAddr=snAgTrpRcvrIpAddr, snAgentConfigModuleMgmtModuleType=snAgentConfigModuleMgmtModuleType, snAgentHwICBMCounterReadInput=snAgentHwICBMCounterReadInput, snAgImgLoadSPModuleType=snAgImgLoadSPModuleType, snAgGblEnableSLB=snAgGblEnableSLB, snAgentConfigModuleNumberOfCpus=snAgentConfigModuleNumberOfCpus, snAgSysLogServerTable=snAgSysLogServerTable, snAgentRedunSyncConfig=snAgentRedunSyncConfig, snAgGblEnableColdStartTrap=snAgGblEnableColdStartTrap, snStackSecSwitchInfo=snStackSecSwitchInfo, snAgSystemDebugBMFreeBuffer=snAgSystemDebugBMFreeBuffer, snAgentTaskMQMsgs=snAgentTaskMQMsgs, snAgentTaskCpuEntry=snAgentTaskCpuEntry, snChasMediaLeds=snChasMediaLeds, snAgentBrdTable=snAgentBrdTable, brcdPortLicenseIndex=brcdPortLicenseIndex, snAgentSysParaConfigTable=snAgentSysParaConfigTable, snAgCfgEosEntry=snAgCfgEosEntry, snAgTrapHoldTime=snAgTrapHoldTime, snChasEnablePwrSupplyTrap=snChasEnablePwrSupplyTrap, snChasPwrSupplyTable=snChasPwrSupplyTable, snChasUnitShutdownTemperature=snChasUnitShutdownTemperature, snAgGblBannerMotd=snAgGblBannerMotd, snAgSystemDRAM=snAgSystemDRAM, snAgentBrd2Table=snAgentBrd2Table, snStackSecSwitchIndex=snStackSecSwitchIndex, snAgentConfigModuleOperStatus=snAgentConfigModuleOperStatus, snCAMIpStatTable=snCAMIpStatTable, snAgentConfigModule2Description=snAgentConfigModule2Description, snAgentSysParaConfigDefault=snAgentSysParaConfigDefault, BrcdImageType=BrcdImageType, snAgSystemDebugCpuQueueRead=snAgSystemDebugCpuQueueRead, snAgGblIfIpMask=snAgGblIfIpMask, snChasFan=snChasFan, snAgentTaskMQMaxMsgs=snAgentTaskMQMaxMsgs, snAgentCpuUtilTable=snAgentCpuUtilTable, snChasFanDescription=snChasFanDescription, snAgSysLogServerEntry=snAgSysLogServerEntry, snAgentGbl=snAgentGbl, snAgBootSeqEntry=snAgBootSeqEntry, snAgStaticSysLogBufferTable=snAgStaticSysLogBufferTable, snAgStaticSysLogBufferCalTimeStamp=snAgStaticSysLogBufferCalTimeStamp, snAgGblLevelPasswordsMask=snAgGblLevelPasswordsMask, snStackSecSwitchMacAddr=snStackSecSwitchMacAddr, snCAMStatEntry=snCAMStatEntry, snAgGblDynMemFree=snAgGblDynMemFree, snAgentHwICBMCounterFreeDepth=snAgentHwICBMCounterFreeDepth, snAgentConfigModuleType=snAgentConfigModuleType, snChasEnableFanTrap=snChasEnableFanTrap, snAgSysLogBufferIndex=snAgSysLogBufferIndex, snAgentSysParaConfig=snAgentSysParaConfig, snAgentBrdSerialNumber=snAgentBrdSerialNumber, snAgEraseNVRAM=snAgEraseNVRAM, snCamStatFreePool2Entries=snCamStatFreePool2Entries, brcdSwPackageUpgradeResultIndex=brcdSwPackageUpgradeResultIndex, snAgTrpRcvrSecurityLevel=snAgTrpRcvrSecurityLevel, fdryLicensePrecedence=fdryLicensePrecedence, fdryLicenseHash=fdryLicenseHash, snAgentBrdIndex=snAgentBrdIndex, snAgBootSeqRowStatus=snAgBootSeqRowStatus, DisplayString=DisplayString, snAgentHwICBMCounterSlot=snAgentHwICBMCounterSlot, snAgSystemDebugDRAMGetError=snAgSystemDebugDRAMGetError, snCAMIpStatTotalEntries=snCAMIpStatTotalEntries, snAgSpBootSeqEntry=snAgSpBootSeqEntry, snAgSystemDRAMFree=snAgSystemDRAMFree, snAgGblBannerIncoming=snAgGblBannerIncoming, snAgentConfigModule2OperStatus=snAgentConfigModule2OperStatus, snAgTrpRcvrSecurityModel=snAgTrpRcvrSecurityModel, snStackSecSwitchPortCnts=snStackSecSwitchPortCnts, snChasPwrSupply2Table=snChasPwrSupply2Table, snAgSysLogBufferTable=snAgSysLogBufferTable, snChasUnitIndex=snChasUnitIndex, snAgSysLogBufferEntry=snAgSysLogBufferEntry, snAgGblTelnetTimeout=snAgGblTelnetTimeout, snChasPwrSupply2Index=snChasPwrSupply2Index, snCamStatAddIPXCount=snCamStatAddIPXCount, snAgentTaskMQTable=snAgentTaskMQTable, snAgentHwICBMCounterDMA=snAgentHwICBMCounterDMA, snCAMIpStatLevel=snCAMIpStatLevel, snChasFanTable=snChasFanTable, snAgSystemDebugIpcGigLock=snAgSystemDebugIpcGigLock, snAgentConfigModuleEntry=snAgentConfigModuleEntry, snAgentTaskBufferEntry=snAgentTaskBufferEntry, snStackSmSlotIndex=snStackSmSlotIndex, snAgGblDynMemTotal=snAgGblDynMemTotal, snAgSysLogServerIP=snAgSysLogServerIP, snAgConfigFromNVRAM=snAgConfigFromNVRAM, snAgGblReadOnlyCommunity=snAgGblReadOnlyCommunity, snChasExpPortTotal=snChasExpPortTotal, snCamStatAddL2SessionCount=snCamStatAddL2SessionCount, snAgGblDmaFailure=snAgGblDmaFailure, snAgSysLogGblBufferSize=snAgSysLogGblBufferSize, snAgGblDynMemUtil=snAgGblDynMemUtil, snAgBootSeqFilename=snAgBootSeqFilename, snAgTrpRcvrCommunityOrSecurityName=snAgTrpRcvrCommunityOrSecurityName, snAgentTaskMQTaskName=snAgentTaskMQTaskName, snAgSystemDRAMForOSPF=snAgSystemDRAMForOSPF, snChasFan2Entry=snChasFan2Entry, snAgSystemDebugBMFreeBufferMgmt=snAgSystemDebugBMFreeBufferMgmt, snAgentCpuUtilPercent=snAgentCpuUtilPercent, snStackSyncAllSecSwitch=snStackSyncAllSecSwitch, snAgSystemLog=snAgSystemLog, snAgTftpServerAddr=snAgTftpServerAddr, snAgentConfigModuleRowStatus=snAgentConfigModuleRowStatus, snAgentUserAccntEncryptCode=snAgentUserAccntEncryptCode, snAgentTaskCpuHoldTime=snAgentTaskCpuHoldTime, snChasFactoryPartNumber=snChasFactoryPartNumber, snAgGblIfIpAddr=snAgGblIfIpAddr, snCamStatAddIPRouteCount=snCamStatAddIPRouteCount, snAgentBrdExpPortTotal=snAgentBrdExpPortTotal, snAgentBrdTxTrafficLedString=snAgentBrdTxTrafficLedString, snAgentLicense=snAgentLicense, snAgentSysParaConfigDescription=snAgentSysParaConfigDescription, fdryLicenseLid=fdryLicenseLid, snAgGblPasswordCheckMode=snAgGblPasswordCheckMode, snAgTrpRcvrTable=snAgTrpRcvrTable, snAgentBoot=snAgentBoot, snCamStatMacFailCount=snCamStatMacFailCount, snAgentBrdMainBrdId=snAgentBrdMainBrdId, snAgGblCpuUtil5SecAvg=snAgGblCpuUtil5SecAvg, snCpuProcessRuntime=snCpuProcessRuntime, snAgentBrdAlarmLeds=snAgentBrdAlarmLeds, snAgSystemDebugDRAMToBMCopyFail=snAgSystemDebugDRAMToBMCopyFail, snAgentCpuUtilValue=snAgentCpuUtilValue, snStackMaxSecSwitch=snStackMaxSecSwitch, snCamStatHostLookupCount=snCamStatHostLookupCount, fdryLicenseTrialState=fdryLicenseTrialState, snAgentTempThresholdLowValue=snAgentTempThresholdLowValue, snAgentBrdSpeedLedString=snAgentBrdSpeedLedString, snAgentTaskCpuTable=snAgentTaskCpuTable, snStackSecSwitchEntry=snStackSecSwitchEntry, snAgentTempThresholdTable=snAgentTempThresholdTable, snChasFlashCard=snChasFlashCard)
mibBuilder.exportSymbols("FOUNDRY-SN-AGENT-MIB", snAgSysLogGblEnable=snAgSysLogGblEnable, snAgentBrdMainPortTotal=snAgentBrdMainPortTotal, snAgGblCpuUtilCollect=snAgGblCpuUtilCollect, snAgSysLogBufferMessage=snAgSysLogBufferMessage, snAgentTempSensorId=snAgentTempSensorId, snStackSecSwitchSubnetMask=snStackSecSwitchSubnetMask, snAgentTempThresholdLevel=snAgentTempThresholdLevel, snChasFan2OperStatus=snChasFan2OperStatus, snChasPwrSupply2OperStatus=snChasPwrSupply2OperStatus, snChasProductType=snChasProductType, snCpuProcessTable=snCpuProcessTable, snAgentTaskMQMaxDepth=snAgentTaskMQMaxDepth, brcdSwIntfModAutoUpgradeAllImages=brcdSwIntfModAutoUpgradeAllImages, snAgentTaskBufferPoolID=snAgentTaskBufferPoolID, snAgCfgFname=snAgCfgFname, snChasTrafficLeds=snChasTrafficLeds, snAgentBrdMainBrdDescription=snAgentBrdMainBrdDescription, snAgGblEnableLinkDownTrap=snAgGblEnableLinkDownTrap, snAgentUserGbl=snAgentUserGbl, snAgGblEnableWebMgmt=snAgGblEnableWebMgmt, snAgentConfigModule2RowStatus=snAgentConfigModule2RowStatus, snChasUnitNumSlots=snChasUnitNumSlots, snAgentSysParaConfigCurrent=snAgentSysParaConfigCurrent, snAgentUserAccntRowStatus=snAgentUserAccntRowStatus, snAgSysLogGblServer=snAgSysLogGblServer, snAgSysLogBufferTimeStamp=snAgSysLogBufferTimeStamp, snChasUnitPartNum=snChasUnitPartNum, snAgentConfigModule2Type=snAgentConfigModule2Type, brcdSwIntfModAutoUpgradeMode=brcdSwIntfModAutoUpgradeMode, brcdSwPackageUpgradeResultImageType=brcdSwPackageUpgradeResultImageType, snAgentTaskMQPriority=snAgentTaskMQPriority, snCAMStatTable=snCAMStatTable, fdryLicenseType=fdryLicenseType, snAgBuildVer=snAgBuildVer, snAgGblEnableModuleRemovedTrap=snAgGblEnableModuleRemovedTrap, snAgentConfigModuleSerialNumber=snAgentConfigModuleSerialNumber, snCamStatL2SessionFailCount=snCamStatL2SessionFailCount, snAgentHw=snAgentHw, snChasFan2Description=snChasFan2Description, snAgImgLoadSPModuleNumber=snAgImgLoadSPModuleNumber, snAgSysLogGbl=snAgSysLogGbl, snChasStatusLeds=snChasStatusLeds, snAgentBrdMediaLeds=snAgentBrdMediaLeds, snAgBootSeqTable=snAgBootSeqTable, snAgentCpuProcessEnable=snAgentCpuProcessEnable, snCamStatFreeL2LowestSection=snCamStatFreeL2LowestSection, snAgGblEnableModuleInsertedTrap=snAgGblEnableModuleInsertedTrap, snAgentBrdRxTrafficLedString=snAgentBrdRxTrafficLedString, snAgentBrd2MainPortTotal=snAgentBrd2MainPortTotal, snCamStatDMAIdNumber=snCamStatDMAIdNumber, snAgBootSeqInstruction=snAgBootSeqInstruction, snAgentConfigModuleTable=snAgentConfigModuleTable, snAgentBrdTrafficLedString=snAgentBrdTrafficLedString, snAgSysLogGblPersistenceEnable=snAgSysLogGblPersistenceEnable, snAgentBrdMemoryTotal=snAgentBrdMemoryTotal, snAgentBrd2MainBrdId=snAgentBrd2MainBrdId, snChasPwrSupplyDescription=snChasPwrSupplyDescription, PYSNMP_MODULE_ID=snAgent, snAgentTaskMQStickyMaxMsgs=snAgentTaskMQStickyMaxMsgs, snAgentTemp2Value=snAgentTemp2Value, snAgentTaskCpuState=snAgentTaskCpuState, snChasSystemMode=snChasSystemMode, snAgentBrd2Entry=snAgentBrd2Entry, snAgentConfigModule2Slot=snAgentConfigModule2Slot, snAgentTaskMQDepth=snAgentTaskMQDepth, snAgentConfigModule2SerialNumber=snAgentConfigModule2SerialNumber, snAgentRedunBkupCopyBootCode=snAgentRedunBkupCopyBootCode, snAgGblSecurityLevelSet=snAgGblSecurityLevelSet, snCAMIpStatEntry=snCAMIpStatEntry, snAgTftpServerIp=snAgTftpServerIp, snAgImgLoad=snAgImgLoad, snAgentBrd2RedundantStatus=snAgentBrd2RedundantStatus, snStackSecSwitchEnabled=snStackSecSwitchEnabled, snAgSystemDebugTotalOut=snAgSystemDebugTotalOut, snChasMainBrdId=snChasMainBrdId, fdryLicenseTrialTimeLeft=fdryLicenseTrialTimeLeft, snAgentCpuUtil100thPercent=snAgentCpuUtil100thPercent, snAgentTempThresholdHighValue=snAgentTempThresholdHighValue, snAgSysLogGblOverrunCount=snAgSysLogGblOverrunCount, snStackGen=snStackGen, snChasSerNum=snChasSerNum, snAgentBrdEntry=snAgentBrdEntry, snAgSoftwareFeature=snAgSoftwareFeature, fdryLicenseSerialNumber=fdryLicenseSerialNumber, brcdSwPackageUpgradeResultTimeStamp=brcdSwPackageUpgradeResultTimeStamp, snChasActualTemperature=snChasActualTemperature, snAgentTemp2Entry=snAgentTemp2Entry, snCamStatFreePool0Entries=snCamStatFreePool0Entries, snAgentTaskMQTaskID=snAgentTaskMQTaskID, brcdSwPackageUpgrade=brcdSwPackageUpgrade, snAgentRedunBkupBootLoad=snAgentRedunBkupBootLoad, brcdSw=brcdSw, snAgCfgEosTable=snAgCfgEosTable, snCamStatFreePool1Entries=snCamStatFreePool1Entries, snCamStatRouteLookupCount=snCamStatRouteLookupCount, snAgentBrdMediaLedString=snAgentBrdMediaLedString, snAgGblPasswordChangeMode=snAgGblPasswordChangeMode, snCamStatAddIPSessionCount=snCamStatAddIPSessionCount, snAgGblDeleteFirstBeforeDownload=snAgGblDeleteFirstBeforeDownload, snAgentTemp2SensorDescr=snAgentTemp2SensorDescr, snAgDefGwayIp=snAgDefGwayIp, snAgentTempTable=snAgentTempTable, snCpuProcess1MinUtil=snCpuProcess1MinUtil, snAgStaticSysLogBufferEntry=snAgStaticSysLogBufferEntry, snAgentBrdRedundantStatus=snAgentBrdRedundantStatus, snAgentTaskCpuTaskID=snAgentTaskCpuTaskID, snCamStatAddVLANCount=snCamStatAddVLANCount, snChasPwr=snChasPwr, snAgGblEnableTelnetServer=snAgGblEnableTelnetServer, snAgentBrdExpBrdDescription=snAgentBrdExpBrdDescription, snAgCfgEosPacket=snAgCfgEosPacket, snAgGblEnableLinkUpTrap=snAgGblEnableLinkUpTrap, snAgSpBootSeqTable=snAgSpBootSeqTable, snAgSysLogGblFacility=snAgSysLogGblFacility, snAgGblQueueOverflow=snAgGblQueueOverflow, snAgentBrdUpTime=snAgentBrdUpTime, snAgentTempValue=snAgentTempValue, snChasMainPortTotal=snChasMainPortTotal, snAgentConfigModuleDescription=snAgentConfigModuleDescription, snAgentBrd2Slot=snAgentBrd2Slot, snAgSysLogGblCriticalLevel=snAgSysLogGblCriticalLevel, snCAMIpStatFreeEntries=snCAMIpStatFreeEntries, snChasFanIndex=snChasFanIndex, snChasFan2Unit=snChasFan2Unit, snAgImgVer=snAgImgVer, snAgentRedunActiveMgmtMod=snAgentRedunActiveMgmtMod, snAgentConfigModule2Unit=snAgentConfigModule2Unit, snAgSpBootSeqRowStatus=snAgSpBootSeqRowStatus, snChasPwrSupplyEntry=snChasPwrSupplyEntry, snAgSystemDRAMUtil=snAgSystemDRAMUtil, snAgTrpRcvrCurEntry=snAgTrpRcvrCurEntry, snAgentBrdModuleStatus=snAgentBrdModuleStatus, snAgWriteNVRAM=snAgWriteNVRAM, snAgentBrdAlarmLedString=snAgentBrdAlarmLedString, snStackSecSwitchAck=snStackSecSwitchAck, snCamStatAddMACCount=snCamStatAddMACCount, fdryLicenseTrialDays=fdryLicenseTrialDays, snAgentTemp2SlotNum=snAgentTemp2SlotNum, snAgentTempEntry=snAgentTempEntry, snAgentLog=snAgentLog, snAgSystemDRAMForBGP=snAgSystemDRAMForBGP, snAgGblTelnetLoginTimeout=snAgGblTelnetLoginTimeout, fdryLicenseCapacity=fdryLicenseCapacity, brcdSwPackageFname=brcdSwPackageFname, snAgGblCpuUtil1MinAvg=snAgGblCpuUtil1MinAvg, snChasType=snChasType, snChasFanStatus=snChasFanStatus, snAgReload=snAgReload, snAgentConfigModuleNumberOfPorts=snAgentConfigModuleNumberOfPorts, snAgTrpRcvrStatus=snAgTrpRcvrStatus, snCamStatLevel3=snCamStatLevel3, snCamStatDMAMasterNumber=snCamStatDMAMasterNumber, snAgSystemDebugDRAMBuffer=snAgSystemDebugDRAMBuffer, snStackPriSwitchMode=snStackPriSwitchMode, snCamStatLevel2=snCamStatLevel2, snAgentEnableMgmtModRedunStateChangeTrap=snAgentEnableMgmtModRedunStateChangeTrap, snAgentBrdTxTrafficLeds=snAgentBrdTxTrafficLeds, snChasFactorySerialNumber=snChasFactorySerialNumber, snAgentUser=snAgentUser, snCAMIpStatIfIndex=snCAMIpStatIfIndex, snAgBuildDate=snAgBuildDate, snAgentConfigModuleIndex=snAgentConfigModuleIndex, snChasIdNumber=snChasIdNumber, snAgentTaskMQFailedCount=snAgentTaskMQFailedCount, snAgentHwICBMCounterWriteInput=snAgentHwICBMCounterWriteInput, snAgentTaskMQEntry=snAgentTaskMQEntry, snAgentTempThresholdEntry=snAgentTempThresholdEntry, snAgentUserAccntPrivilege=snAgentUserAccntPrivilege, snAgentHwICBMCounterTable=snAgentHwICBMCounterTable, snAgentHwICBMCounterEntry=snAgentHwICBMCounterEntry, snStackSecSwitchCfgCmd=snStackSecSwitchCfgCmd, snAgentUserMaxAccnt=snAgentUserMaxAccnt, snAgGblBannerExec=snAgGblBannerExec, snAgentRedunGbl=snAgentRedunGbl, snAgentTaskCpuWaitTime=snAgentTaskCpuWaitTime, snAgTrpRcvrIndex=snAgTrpRcvrIndex, snAgTftpServerAddrType=snAgTftpServerAddrType, brcdPortLicenseEntry=brcdPortLicenseEntry, fdryLicensePackageName=fdryLicensePackageName, fdryLicenseTrialTimeElapsed=fdryLicenseTrialTimeElapsed, snStackSecSwitchSyncCmd=snStackSecSwitchSyncCmd, snAgentUserAccntName=snAgentUserAccntName, snAgentSysParaConfigEntry=snAgentSysParaConfigEntry, snAgTrpRcvrEntry=snAgTrpRcvrEntry, snChasWarningTemperature=snChasWarningTemperature, snCamStatFreeL2Entries=snCamStatFreeL2Entries, snAgStaticSysLogBufferCriticalLevel=snAgStaticSysLogBufferCriticalLevel, brcdSwPackageLoad=brcdSwPackageLoad, snAgentTaskMQStickyMaxDepth=snAgentTaskMQStickyMaxDepth, snChasNumSlots=snChasNumSlots, snChasUnitSerNum=snChasUnitSerNum, brcdPortLicenseTable=brcdPortLicenseTable, snCpuProcessEntry=snCpuProcessEntry, snAgSpBootSeqInstruction=snAgSpBootSeqInstruction, snAgSysLogGblFlushedCount=snAgSysLogGblFlushedCount, snAgCfgEosChkSum=snAgCfgEosChkSum, snAgCfgLoad=snAgCfgLoad, snChasPwrSupplyOperStatus=snChasPwrSupplyOperStatus, snAgentBrdMemoryAvailable=snAgentBrdMemoryAvailable, fdryLicenseMode=fdryLicenseMode, snCamStatLevel1=snCamStatLevel1, snAgentHwICBMCounterWriteDrop=snAgentHwICBMCounterWriteDrop, snAgentConfigModule2Table=snAgentConfigModule2Table, snAgGblReadWriteCommunity=snAgGblReadWriteCommunity, snChasFan2Table=snChasFan2Table, snChasPwrSupply2Unit=snChasPwrSupply2Unit, snAgGblCpuUtilData=snAgGblCpuUtilData, snAgentBrdExpBrdId=snAgentBrdExpBrdId, snAgentUserAccntTable=snAgentUserAccntTable, snCamStatAddIPMCastCount=snCamStatAddIPMCastCount, brcdSwPackageUpgradeResultStatus=brcdSwPackageUpgradeResultStatus, snAgentTaskBufferTaskName=snAgentTaskBufferTaskName, fdryLicenseEntry=fdryLicenseEntry, snAgentTempThresholdModule=snAgentTempThresholdModule, snAgentTaskMQLength=snAgentTaskMQLength, snChasMainBrdDescription=snChasMainBrdDescription, snAgentBrd2MainBrdDescription=snAgentBrd2MainBrdDescription, fdryLicensedFeatureInfo=fdryLicensedFeatureInfo, snCamStatDeleteDMACamCount=snCamStatDeleteDMACamCount, snAgentBrdStatusLeds=snAgentBrdStatusLeds, brcdSwPackageLoadStatus=brcdSwPackageLoadStatus, snStackSecSwitchSlotId=snStackSecSwitchSlotId, snChasPwrSupplyIndex=snChasPwrSupplyIndex, snChasExpBrdDescription=snChasExpBrdDescription, snAgentTaskCpuTaskActivity=snAgentTaskCpuTaskActivity, snAgentTemp2SensorId=snAgentTemp2SensorId, snStackSecSwitchTable=snStackSecSwitchTable, snAgentBrd2ModuleStatus=snAgentBrd2ModuleStatus, brcdSwPackageUpgradeSkipVersionCheck=brcdSwPackageUpgradeSkipVersionCheck, snChasPwrSupply2Entry=snChasPwrSupply2Entry, snAgBootSeqIndex=snAgBootSeqIndex, snAgentHwICBMCounterWriteOutput=snAgentHwICBMCounterWriteOutput)
