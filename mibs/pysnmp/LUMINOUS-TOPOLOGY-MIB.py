#
# PySNMP MIB module LUMINOUS-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LUMINOUS-TOPOLOGY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, NotificationType, iso, Integer32, ModuleIdentity, TimeTicks, ObjectIdentity, Bits, Gauge32, Counter32, Counter64, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "iso", "Integer32", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Bits", "Gauge32", "Counter32", "Counter64", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
luminous = MibIdentifier((1, 3, 6, 1, 4, 1, 4614))
lumADM = MibIdentifier((1, 3, 6, 1, 4, 1, 4614, 1))
lumTopologyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4614, 1, 3))
if mibBuilder.loadTexts: lumTopologyMIB.setLastUpdated('0003080000Z')
if mibBuilder.loadTexts: lumTopologyMIB.setOrganization('Luminous Networks')
lumRingCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1))
lumTopoDiscoveryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1, 1))
lumTopoDiscoveryRetries = MibScalar((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1, 1, 1), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumTopoDiscoveryRetries.setStatus('current')
lumTopoNeighborInfoTimer = MibScalar((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumTopoNeighborInfoTimer.setStatus('current')
lumTopoDiscoveryConvergenceTimer = MibScalar((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumTopoDiscoveryConvergenceTimer.setStatus('current')
lumTopoDiscoveryTimer = MibScalar((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumTopoDiscoveryTimer.setStatus('current')
lumTopoDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("doDiscover", 2), ("stopDiscover", 3), ("discoveryFailed", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumTopoDiscovery.setStatus('current')
lumTopoDiscoveryFailedNode = MibScalar((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumTopoDiscoveryFailedNode.setStatus('current')
lumRingCommand = MibScalar((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("clearAll", 2), ("lockoutOfProtection", 3), ("commandFailed", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumRingCommand.setStatus('current')
lumRingRevertiveMode = MibScalar((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertiveMode", 1), ("nonRevertiveMode", 2))).clone('nonRevertiveMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumRingRevertiveMode.setStatus('current')
lumProtectionSwitchHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 4614, 1, 3, 1, 4), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumProtectionSwitchHysteresis.setStatus('current')
lumProtectionSwitchingTable = MibTable((1, 3, 6, 1, 4, 1, 4614, 1, 3, 2), )
if mibBuilder.loadTexts: lumProtectionSwitchingTable.setStatus('current')
lumProtectionSwitchingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4614, 1, 3, 2, 1), ).setIndexNames((0, "LUMINOUS-TOPOLOGY-MIB", "lumProtDestinationIP"))
if mibBuilder.loadTexts: lumProtectionSwitchingEntry.setStatus('current')
lumProtDestinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumProtDestinationIP.setStatus('current')
lumProtMeasDestCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumProtMeasDestCost.setStatus('current')
lumProtNonRevDestCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumProtNonRevDestCost.setStatus('current')
lumProtMeasPrefDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumProtMeasPrefDir.setStatus('current')
lumProtNonRevPrefDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumProtNonRevPrefDir.setStatus('current')
lumRingLinkTable = MibTable((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3), )
if mibBuilder.loadTexts: lumRingLinkTable.setStatus('current')
lumRingLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1), ).setIndexNames((0, "LUMINOUS-TOPOLOGY-MIB", "lumLinkIngressNodeIP"), (0, "LUMINOUS-TOPOLOGY-MIB", "lumLinkEgressNodeIP"), (0, "LUMINOUS-TOPOLOGY-MIB", "lumLinkIngressInterface"), (0, "LUMINOUS-TOPOLOGY-MIB", "lumLinkEgressInterface"))
if mibBuilder.loadTexts: lumRingLinkEntry.setStatus('current')
lumLinkIngressNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumLinkIngressNodeIP.setStatus('current')
lumLinkEgressNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumLinkEgressNodeIP.setStatus('current')
lumLinkIngressInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumLinkIngressInterface.setStatus('current')
lumLinkEgressInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumLinkEgressInterface.setStatus('current')
lumLinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumLinkOperStatus.setStatus('current')
lumLinkNonRevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumLinkNonRevStatus.setStatus('current')
lumLinkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumLinkAdminStatus.setStatus('current')
lumLinkSyncOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumLinkSyncOperStatus.setStatus('current')
lumLinkSyncNonRevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumLinkSyncNonRevStatus.setStatus('current')
lumLinkSyncAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumLinkSyncAdminStatus.setStatus('current')
lumRingThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 4614, 1, 3, 4), )
if mibBuilder.loadTexts: lumRingThresholdTable.setStatus('current')
lumRingThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4614, 1, 3, 4, 1), ).setIndexNames((0, "LUMINOUS-TOPOLOGY-MIB", "lumRingThresholdWindow"))
if mibBuilder.loadTexts: lumRingThresholdEntry.setStatus('current')
lumRingThresholdWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumRingThresholdWindow.setStatus('current')
lumRingThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumRingThresholdValue.setStatus('current')
lumRingThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4614, 1, 3, 4, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lumRingThresholdStatus.setStatus('current')
mibBuilder.exportSymbols("LUMINOUS-TOPOLOGY-MIB", lumProtMeasPrefDir=lumProtMeasPrefDir, lumRingThresholdEntry=lumRingThresholdEntry, lumTopoDiscoveryFailedNode=lumTopoDiscoveryFailedNode, lumTopoDiscoveryRetries=lumTopoDiscoveryRetries, lumRingRevertiveMode=lumRingRevertiveMode, lumLinkSyncAdminStatus=lumLinkSyncAdminStatus, lumProtNonRevDestCost=lumProtNonRevDestCost, lumRingThresholdWindow=lumRingThresholdWindow, lumLinkOperStatus=lumLinkOperStatus, lumTopoDiscoveryTimer=lumTopoDiscoveryTimer, lumLinkNonRevStatus=lumLinkNonRevStatus, lumTopoDiscoveryGroup=lumTopoDiscoveryGroup, lumProtectionSwitchingTable=lumProtectionSwitchingTable, lumLinkAdminStatus=lumLinkAdminStatus, lumLinkSyncNonRevStatus=lumLinkSyncNonRevStatus, lumProtDestinationIP=lumProtDestinationIP, lumTopoNeighborInfoTimer=lumTopoNeighborInfoTimer, PYSNMP_MODULE_ID=lumTopologyMIB, lumRingLinkTable=lumRingLinkTable, lumLinkEgressInterface=lumLinkEgressInterface, lumRingCommands=lumRingCommands, lumTopoDiscoveryConvergenceTimer=lumTopoDiscoveryConvergenceTimer, lumLinkIngressInterface=lumLinkIngressInterface, lumTopoDiscovery=lumTopoDiscovery, lumProtectionSwitchHysteresis=lumProtectionSwitchHysteresis, lumLinkEgressNodeIP=lumLinkEgressNodeIP, luminous=luminous, lumRingThresholdStatus=lumRingThresholdStatus, lumADM=lumADM, lumProtectionSwitchingEntry=lumProtectionSwitchingEntry, lumRingCommand=lumRingCommand, lumProtMeasDestCost=lumProtMeasDestCost, lumLinkSyncOperStatus=lumLinkSyncOperStatus, lumRingThresholdValue=lumRingThresholdValue, lumProtNonRevPrefDir=lumProtNonRevPrefDir, lumRingThresholdTable=lumRingThresholdTable, lumTopologyMIB=lumTopologyMIB, lumLinkIngressNodeIP=lumLinkIngressNodeIP, lumRingLinkEntry=lumRingLinkEntry)
