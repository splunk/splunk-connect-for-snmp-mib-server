#
# PySNMP MIB module ELTEX-TAU8 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-TAU8
# Produced by pysmi-0.3.4 at Mon Apr 29 18:48:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
elHardware, = mibBuilder.importSymbols("ELTEX-SMI-ACTUAL", "elHardware")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, MibIdentifier, IpAddress, Gauge32, Integer32, NotificationType, Bits, ModuleIdentity, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "MibIdentifier", "IpAddress", "Gauge32", "Integer32", "NotificationType", "Bits", "ModuleIdentity", "ObjectIdentity", "iso")
TextualConvention, DisplayString, TimeInterval, TruthValue, RowStatus, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeInterval", "TruthValue", "RowStatus", "TimeStamp")
tau8 = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 55))
tau8.setRevisions(('2013-08-28 00:00',))
if mibBuilder.loadTexts: tau8.setLastUpdated('201308280000Z')
if mibBuilder.loadTexts: tau8.setOrganization('Eltex Enterprise Ltd')
class CallerIdType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("bell", 0), ("v23", 1), ("dtmf", 2), ("off", 3))

class CallTransferType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("transmitFlash", 0), ("attendedCT", 1), ("unattendedCT", 2), ("localCT", 3))

class RsrvModeType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("homing", 1), ("parking", 2))

class RsrvCheckMethodType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invite", 0), ("register", 1), ("options", 2))

class OutboundType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("outbound", 1), ("outboundWithBusy", 2))

class EarlyMediaType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("ringing180", 0), ("progress183EarlyMedia", 1))

class Option100relType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("supported", 0), ("required", 1), ("off", 2))

class KeepAliveModeType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("options", 1), ("notify", 2), ("clrf", 3))

class DtmfTransferType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("inband", 0), ("rfc2833", 1), ("info", 2))

class FaxDirectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("callerAndCallee", 0), ("caller", 1), ("callee", 2), ("noDetectFax", 3))

class FaxtransferType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("g711a", 0), ("g711u", 1), ("t38", 2), ("none", 3))

class FlashtransferType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("rfc2833", 1), ("info", 2))

class FlashMimeType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("hookflash", 0), ("dtmfRelay", 1), ("broadsoft", 2), ("sscc", 3))

class ModemType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("g711a", 0), ("g711u", 1), ("g711aNse", 2), ("g711uNse", 3), ("off", 4))

class GroupType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("group", 0), ("serial", 1), ("cyclic", 2))

class TraceOutputType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("console", 0), ("syslogd", 1), ("disable", 2))

class ConferenceMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("local", 0), ("remote", 1))

pbxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1))
fxsPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1))
fxsPortsUseFxsProfile = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortsUseFxsProfile.setStatus('current')
fxsPortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2), )
if mibBuilder.loadTexts: fxsPortTable.setStatus('current')
fxsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1), ).setIndexNames((0, "ELTEX-TAU8", "fxsPortIndex"))
if mibBuilder.loadTexts: fxsPortEntry.setStatus('current')
fxsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: fxsPortIndex.setStatus('current')
fxsPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortEnabled.setStatus('current')
fxsPortSipProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortSipProfileId.setStatus('current')
fxsPortProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortProfile.setStatus('current')
fxsPortPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortPhone.setStatus('current')
fxsPortUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortUsername.setStatus('current')
fxsPortAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortAuthName.setStatus('current')
fxsPortAuthPass = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortAuthPass.setStatus('current')
fxsPortSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortSipPort.setStatus('current')
fxsPortUseAltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortUseAltNumber.setStatus('current')
fxsPortAltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortAltNumber.setStatus('current')
fxsPortCpcRus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCpcRus.setStatus('current')
fxsPortMinOnhookTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortMinOnhookTime.setStatus('current')
fxsPortMinFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortMinFlash.setStatus('current')
fxsPortGainR = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortGainR.setStatus('current')
fxsPortGainT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortGainT.setStatus('current')
fxsPortMinPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortMinPulse.setStatus('current')
fxsPortInterdigit = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortInterdigit.setStatus('current')
fxsPortCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 19), CallerIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCallerId.setStatus('current')
fxsPortHangupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortHangupTimeout.setStatus('current')
fxsPortRbTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortRbTimeout.setStatus('current')
fxsPortBusyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortBusyTimeout.setStatus('current')
fxsPortPolarityReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortPolarityReverse.setStatus('current')
fxsPortCallTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 24), CallTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCallTransfer.setStatus('current')
fxsPortCallWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCallWaiting.setStatus('current')
fxsPortDirectnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortDirectnumber.setStatus('current')
fxsPortStopDial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortStopDial.setStatus('current')
fxsPortHotLine = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortHotLine.setStatus('current')
fxsPortHotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortHotNumber.setStatus('current')
fxsPortHotTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortHotTimeout.setStatus('current')
fxsPortCtUnconditional = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCtUnconditional.setStatus('current')
fxsPortCfuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCfuNumber.setStatus('current')
fxsPortCtBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCtBusy.setStatus('current')
fxsPortCfbNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCfbNumber.setStatus('current')
fxsPortCtNoanswer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCtNoanswer.setStatus('current')
fxsPortCfnaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCfnaNumber.setStatus('current')
fxsPortCtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCtTimeout.setStatus('current')
fxsPortDndEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortDndEnable.setStatus('current')
fxsPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 39), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsPortRowStatus.setStatus('current')
fxsPortsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortsMIBBoundary.setStatus('current')
fxsProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2))
fxsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1), )
if mibBuilder.loadTexts: fxsProfileTable.setStatus('current')
fxsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1), ).setIndexNames((0, "ELTEX-TAU8", "fxsProfileIndex"))
if mibBuilder.loadTexts: fxsProfileEntry.setStatus('current')
fxsProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fxsProfileIndex.setStatus('current')
fxsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileName.setStatus('current')
fxsProfileMinOnhookTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileMinOnhookTime.setStatus('current')
fxsProfileMinFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileMinFlash.setStatus('current')
fxsProfileGainR = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileGainR.setStatus('current')
fxsProfileGainT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileGainT.setStatus('current')
fxsProfileMinPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileMinPulse.setStatus('current')
fxsProfileInterdigit = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileInterdigit.setStatus('current')
fxsProfileCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 9), CallerIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileCallerId.setStatus('current')
fxsProfileHangupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileHangupTimeout.setStatus('current')
fxsProfileRbTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileRbTimeout.setStatus('current')
fxsProfileBusyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileBusyTimeout.setStatus('current')
fxsProfilePolarityReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfilePolarityReverse.setStatus('current')
fxsProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsProfileRowStatus.setStatus('current')
fxsProfilesMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsProfilesMIBBoundary.setStatus('current')
sipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3))
sipCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1))
sipCommonStunEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonStunEnable.setStatus('current')
sipCommonStunServer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonStunServer.setStatus('current')
sipCommonStunInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonStunInterval.setStatus('current')
sipCommonPublicIp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonPublicIp.setStatus('current')
sipCommonNotUseNAPTR = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonNotUseNAPTR.setStatus('current')
sipCommonNotUseSRV = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonNotUseSRV.setStatus('current')
sipProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2), )
if mibBuilder.loadTexts: sipProfileTable.setStatus('current')
sipProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1), ).setIndexNames((0, "ELTEX-TAU8", "sipProfileIndex"))
if mibBuilder.loadTexts: sipProfileEntry.setStatus('current')
sipProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: sipProfileIndex.setStatus('current')
sipProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileName.setStatus('current')
sipProEnablesip = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProEnablesip.setStatus('current')
sipProRsrvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 4), RsrvModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRsrvMode.setStatus('current')
sipProProxyip = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProProxyip.setStatus('current')
sipProRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistration.setStatus('current')
sipProRegistrarip = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistrarip.setStatus('current')
sipProProxyipRsrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProProxyipRsrv1.setStatus('current')
sipProRegistrationRsrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistrationRsrv1.setStatus('current')
sipProRegistraripRsrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistraripRsrv1.setStatus('current')
sipProProxyipRsrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProProxyipRsrv2.setStatus('current')
sipProRegistrationRsrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistrationRsrv2.setStatus('current')
sipProRegistraripRsrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistraripRsrv2.setStatus('current')
sipProProxyipRsrv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProProxyipRsrv3.setStatus('current')
sipProRegistrationRsrv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistrationRsrv3.setStatus('current')
sipProRegistraripRsrv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistraripRsrv3.setStatus('current')
sipProProxyipRsrv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProProxyipRsrv4.setStatus('current')
sipProRegistrationRsrv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistrationRsrv4.setStatus('current')
sipProRegistraripRsrv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistraripRsrv4.setStatus('current')
sipProRsrvCheckMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 20), RsrvCheckMethodType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRsrvCheckMethod.setStatus('current')
sipProRsrvKeepaliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRsrvKeepaliveTime.setStatus('current')
sipProDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProDomain.setStatus('current')
sipProOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 23), OutboundType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProOutbound.setStatus('current')
sipProExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProExpires.setStatus('current')
sipProRri = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRri.setStatus('current')
sipProDomainToReg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProDomainToReg.setStatus('current')
sipProEarlyMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 27), EarlyMediaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProEarlyMedia.setStatus('current')
sipProDisplayToReg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProDisplayToReg.setStatus('current')
sipProRingback = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRingback.setStatus('current')
sipProReduceSdpMediaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProReduceSdpMediaCount.setStatus('current')
sipProOption100rel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 31), Option100relType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProOption100rel.setStatus('current')
sipProCodecOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProCodecOrder.setStatus('current')
sipProG711pte = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProG711pte.setStatus('current')
sipProDtmfTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 34), DtmfTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProDtmfTransfer.setStatus('current')
sipProFaxDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 35), FaxDirectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFaxDirection.setStatus('current')
sipProFaxTransfer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 36), FaxtransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFaxTransfer1.setStatus('current')
sipProFaxTransfer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 37), FaxtransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFaxTransfer2.setStatus('current')
sipProFaxTransfer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 38), FaxtransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFaxTransfer3.setStatus('current')
sipProEnableInT38 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProEnableInT38.setStatus('current')
sipProFlashTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 40), FlashtransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFlashTransfer.setStatus('current')
sipProFlashMime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 41), FlashMimeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFlashMime.setStatus('current')
sipProModem = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 42), ModemType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProModem.setStatus('current')
sipProPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProPayload.setStatus('current')
sipProSilenceDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProSilenceDetector.setStatus('current')
sipProEchoCanceler = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProEchoCanceler.setStatus('current')
sipProRtcp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 46), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRtcp.setStatus('current')
sipProRtcpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRtcpTimer.setStatus('current')
sipProRtcpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRtcpCount.setStatus('current')
sipProDialplanRegexp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProDialplanRegexp.setStatus('current')
sipProRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProRowStatus.setStatus('current')
sipProKeepAliveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 51), KeepAliveModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProKeepAliveMode.setStatus('current')
sipProKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProKeepAliveInterval.setStatus('current')
sipProConferenceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 53), ConferenceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProConferenceMode.setStatus('current')
sipProConferenceServer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProConferenceServer.setStatus('current')
sipProImsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProImsEnable.setStatus('current')
sipProXcapCallholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 56), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProXcapCallholdName.setStatus('current')
sipProXcapCwName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 57), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProXcapCwName.setStatus('current')
sipProXcapConferenceName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 58), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProXcapConferenceName.setStatus('current')
sipProXcapHotlineName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 59), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProXcapHotlineName.setStatus('current')
sipProfilesMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipProfilesMIBBoundary.setStatus('current')
groupsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4))
huntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1), )
if mibBuilder.loadTexts: huntGroupTable.setStatus('current')
huntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1), ).setIndexNames((0, "ELTEX-TAU8", "huntGrIndex"))
if mibBuilder.loadTexts: huntGroupEntry.setStatus('current')
huntGrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: huntGrIndex.setStatus('current')
huntGrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrEnable.setStatus('current')
huntGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGroupName.setStatus('current')
huntGrSipProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrSipProfileId.setStatus('current')
huntGrPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrPhone.setStatus('current')
huntGrRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrRegistration.setStatus('current')
huntGrUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrUserName.setStatus('current')
huntGrPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrPassword.setStatus('current')
huntGrType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 9), GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrType.setStatus('current')
huntGrCallQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrCallQueueSize.setStatus('current')
huntGrWaitingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrWaitingTime.setStatus('current')
huntGrSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrSipPort.setStatus('current')
huntGrPickupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrPickupEnable.setStatus('current')
huntGrPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrPorts.setStatus('current')
huntGrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: huntGrRowStatus.setStatus('current')
huntGroupsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: huntGroupsMIBBoundary.setStatus('current')
suppServices = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5))
dvoCfuPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoCfuPrefix.setStatus('current')
dvoCfbPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoCfbPrefix.setStatus('current')
dvoCfnaPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoCfnaPrefix.setStatus('current')
dvoCallPickupPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoCallPickupPrefix.setStatus('current')
dvoHotNumberPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoHotNumberPrefix.setStatus('current')
dvoCallwaitingPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoCallwaitingPrefix.setStatus('current')
dvoDndPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoDndPrefix.setStatus('current')
networkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2))
snmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1))
snmpRoCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpRoCommunity.setStatus('current')
snmpRwCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpRwCommunity.setStatus('current')
snmpTrapsink = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapsink.setStatus('current')
snmpTrap2sink = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap2sink.setStatus('current')
snmpInformsink = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformsink.setStatus('current')
snmpSysname = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSysname.setStatus('current')
snmpSyscontact = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyscontact.setStatus('current')
snmpSyslocation = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyslocation.setStatus('current')
snmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunity.setStatus('current')
systemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3))
traceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1))
traceOutput = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 1), TraceOutputType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceOutput.setStatus('current')
syslogdIpaddr = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogdIpaddr.setStatus('current')
syslogdPort = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogdPort.setStatus('current')
logLocalFile = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logLocalFile.setStatus('current')
logLocalSize = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logLocalSize.setStatus('current')
logVoipPbxEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipPbxEnable.setStatus('current')
logVoipError = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipError.setStatus('current')
logVoipWarning = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipWarning.setStatus('current')
logVoipDebug = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipDebug.setStatus('current')
logVoipInfo = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipInfo.setStatus('current')
logVoipSipLevel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipSipLevel.setStatus('current')
logIgmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logIgmpEnable.setStatus('current')
actionCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 10))
actionSave = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 10, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionSave.setStatus('current')
actionReboot = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 10, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionReboot.setStatus('current')
tau8Group = ObjectGroup((1, 3, 6, 1, 4, 1, 35265, 1, 55, 200)).setObjects(("ELTEX-TAU8", "fxsPortsUseFxsProfile"), ("ELTEX-TAU8", "fxsPortEnabled"), ("ELTEX-TAU8", "fxsPortSipProfileId"), ("ELTEX-TAU8", "fxsPortProfile"), ("ELTEX-TAU8", "fxsPortPhone"), ("ELTEX-TAU8", "fxsPortUsername"), ("ELTEX-TAU8", "fxsPortAuthName"), ("ELTEX-TAU8", "fxsPortAuthPass"), ("ELTEX-TAU8", "fxsPortSipPort"), ("ELTEX-TAU8", "fxsPortUseAltNumber"), ("ELTEX-TAU8", "fxsPortAltNumber"), ("ELTEX-TAU8", "fxsPortCpcRus"), ("ELTEX-TAU8", "fxsPortMinOnhookTime"), ("ELTEX-TAU8", "fxsPortMinFlash"), ("ELTEX-TAU8", "fxsPortGainR"), ("ELTEX-TAU8", "fxsPortGainT"), ("ELTEX-TAU8", "fxsPortMinPulse"), ("ELTEX-TAU8", "fxsPortInterdigit"), ("ELTEX-TAU8", "fxsPortCallerId"), ("ELTEX-TAU8", "fxsPortHangupTimeout"), ("ELTEX-TAU8", "fxsPortRbTimeout"), ("ELTEX-TAU8", "fxsPortBusyTimeout"), ("ELTEX-TAU8", "fxsPortPolarityReverse"), ("ELTEX-TAU8", "fxsPortCallTransfer"), ("ELTEX-TAU8", "fxsPortCallWaiting"), ("ELTEX-TAU8", "fxsPortDirectnumber"), ("ELTEX-TAU8", "fxsPortStopDial"), ("ELTEX-TAU8", "fxsPortHotLine"), ("ELTEX-TAU8", "fxsPortHotNumber"), ("ELTEX-TAU8", "fxsPortHotTimeout"), ("ELTEX-TAU8", "fxsPortCtUnconditional"), ("ELTEX-TAU8", "fxsPortCfuNumber"), ("ELTEX-TAU8", "fxsPortCtBusy"), ("ELTEX-TAU8", "fxsPortCfbNumber"), ("ELTEX-TAU8", "fxsPortCtNoanswer"), ("ELTEX-TAU8", "fxsPortCfnaNumber"), ("ELTEX-TAU8", "fxsPortCtTimeout"), ("ELTEX-TAU8", "fxsPortDndEnable"), ("ELTEX-TAU8", "fxsPortRowStatus"), ("ELTEX-TAU8", "fxsPortsMIBBoundary"), ("ELTEX-TAU8", "fxsProfileName"), ("ELTEX-TAU8", "fxsProfileMinOnhookTime"), ("ELTEX-TAU8", "fxsProfileMinFlash"), ("ELTEX-TAU8", "fxsProfileGainR"), ("ELTEX-TAU8", "fxsProfileGainT"), ("ELTEX-TAU8", "fxsProfileMinPulse"), ("ELTEX-TAU8", "fxsProfileInterdigit"), ("ELTEX-TAU8", "fxsProfileCallerId"), ("ELTEX-TAU8", "fxsProfileHangupTimeout"), ("ELTEX-TAU8", "fxsProfileRbTimeout"), ("ELTEX-TAU8", "fxsProfileBusyTimeout"), ("ELTEX-TAU8", "fxsProfilePolarityReverse"), ("ELTEX-TAU8", "fxsProfileRowStatus"), ("ELTEX-TAU8", "fxsProfilesMIBBoundary"), ("ELTEX-TAU8", "sipCommonStunEnable"), ("ELTEX-TAU8", "sipCommonStunServer"), ("ELTEX-TAU8", "sipCommonStunInterval"), ("ELTEX-TAU8", "sipCommonPublicIp"), ("ELTEX-TAU8", "sipCommonNotUseNAPTR"), ("ELTEX-TAU8", "sipCommonNotUseSRV"), ("ELTEX-TAU8", "sipProfileName"), ("ELTEX-TAU8", "sipProEnablesip"), ("ELTEX-TAU8", "sipProRsrvMode"), ("ELTEX-TAU8", "sipProProxyip"), ("ELTEX-TAU8", "sipProRegistration"), ("ELTEX-TAU8", "sipProRegistrarip"), ("ELTEX-TAU8", "sipProProxyipRsrv1"), ("ELTEX-TAU8", "sipProRegistrationRsrv1"), ("ELTEX-TAU8", "sipProRegistraripRsrv1"), ("ELTEX-TAU8", "sipProProxyipRsrv2"), ("ELTEX-TAU8", "sipProRegistrationRsrv2"), ("ELTEX-TAU8", "sipProRegistraripRsrv2"), ("ELTEX-TAU8", "sipProProxyipRsrv3"), ("ELTEX-TAU8", "sipProRegistrationRsrv3"), ("ELTEX-TAU8", "sipProRegistraripRsrv3"), ("ELTEX-TAU8", "sipProProxyipRsrv4"), ("ELTEX-TAU8", "sipProRegistrationRsrv4"), ("ELTEX-TAU8", "sipProRegistraripRsrv4"), ("ELTEX-TAU8", "sipProRsrvCheckMethod"), ("ELTEX-TAU8", "sipProRsrvKeepaliveTime"), ("ELTEX-TAU8", "sipProDomain"), ("ELTEX-TAU8", "sipProOutbound"), ("ELTEX-TAU8", "sipProExpires"), ("ELTEX-TAU8", "sipProRri"), ("ELTEX-TAU8", "sipProDomainToReg"), ("ELTEX-TAU8", "sipProEarlyMedia"), ("ELTEX-TAU8", "sipProDisplayToReg"), ("ELTEX-TAU8", "sipProRingback"), ("ELTEX-TAU8", "sipProReduceSdpMediaCount"), ("ELTEX-TAU8", "sipProOption100rel"), ("ELTEX-TAU8", "sipProCodecOrder"), ("ELTEX-TAU8", "sipProG711pte"), ("ELTEX-TAU8", "sipProDtmfTransfer"), ("ELTEX-TAU8", "sipProFaxDirection"), ("ELTEX-TAU8", "sipProFaxTransfer1"), ("ELTEX-TAU8", "sipProFaxTransfer2"), ("ELTEX-TAU8", "sipProFaxTransfer3"), ("ELTEX-TAU8", "sipProEnableInT38"), ("ELTEX-TAU8", "sipProFlashTransfer"), ("ELTEX-TAU8", "sipProFlashMime"), ("ELTEX-TAU8", "sipProModem"), ("ELTEX-TAU8", "sipProPayload"), ("ELTEX-TAU8", "sipProSilenceDetector"), ("ELTEX-TAU8", "sipProEchoCanceler"), ("ELTEX-TAU8", "sipProRtcp"), ("ELTEX-TAU8", "sipProRtcpTimer"), ("ELTEX-TAU8", "sipProRtcpCount"), ("ELTEX-TAU8", "sipProDialplanRegexp"), ("ELTEX-TAU8", "sipProRowStatus"), ("ELTEX-TAU8", "sipProKeepAliveMode"), ("ELTEX-TAU8", "sipProKeepAliveInterval"), ("ELTEX-TAU8", "sipProConferenceMode"), ("ELTEX-TAU8", "sipProConferenceServer"), ("ELTEX-TAU8", "sipProImsEnable"), ("ELTEX-TAU8", "sipProXcapCallholdName"), ("ELTEX-TAU8", "sipProXcapCwName"), ("ELTEX-TAU8", "sipProXcapConferenceName"), ("ELTEX-TAU8", "sipProXcapHotlineName"), ("ELTEX-TAU8", "sipProfilesMIBBoundary"), ("ELTEX-TAU8", "huntGrEnable"), ("ELTEX-TAU8", "huntGroupName"), ("ELTEX-TAU8", "huntGrSipProfileId"), ("ELTEX-TAU8", "huntGrPhone"), ("ELTEX-TAU8", "huntGrRegistration"), ("ELTEX-TAU8", "huntGrUserName"), ("ELTEX-TAU8", "huntGrPassword"), ("ELTEX-TAU8", "huntGrType"), ("ELTEX-TAU8", "huntGrCallQueueSize"), ("ELTEX-TAU8", "huntGrWaitingTime"), ("ELTEX-TAU8", "huntGrSipPort"), ("ELTEX-TAU8", "huntGrPickupEnable"), ("ELTEX-TAU8", "huntGrPorts"), ("ELTEX-TAU8", "huntGrRowStatus"), ("ELTEX-TAU8", "huntGroupsMIBBoundary"), ("ELTEX-TAU8", "dvoCfuPrefix"), ("ELTEX-TAU8", "dvoCfbPrefix"), ("ELTEX-TAU8", "dvoCfnaPrefix"), ("ELTEX-TAU8", "dvoCallPickupPrefix"), ("ELTEX-TAU8", "dvoHotNumberPrefix"), ("ELTEX-TAU8", "dvoCallwaitingPrefix"), ("ELTEX-TAU8", "dvoDndPrefix"), ("ELTEX-TAU8", "snmpRoCommunity"), ("ELTEX-TAU8", "snmpRwCommunity"), ("ELTEX-TAU8", "snmpTrapsink"), ("ELTEX-TAU8", "snmpTrap2sink"), ("ELTEX-TAU8", "snmpInformsink"), ("ELTEX-TAU8", "snmpSysname"), ("ELTEX-TAU8", "snmpSyscontact"), ("ELTEX-TAU8", "snmpSyslocation"), ("ELTEX-TAU8", "snmpTrapCommunity"), ("ELTEX-TAU8", "traceOutput"), ("ELTEX-TAU8", "syslogdIpaddr"), ("ELTEX-TAU8", "syslogdPort"), ("ELTEX-TAU8", "logLocalFile"), ("ELTEX-TAU8", "logLocalSize"), ("ELTEX-TAU8", "logVoipPbxEnable"), ("ELTEX-TAU8", "logVoipError"), ("ELTEX-TAU8", "logVoipWarning"), ("ELTEX-TAU8", "logVoipDebug"), ("ELTEX-TAU8", "logVoipInfo"), ("ELTEX-TAU8", "logVoipSipLevel"), ("ELTEX-TAU8", "logIgmpEnable"), ("ELTEX-TAU8", "actionReboot"), ("ELTEX-TAU8", "actionSave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tau8Group = tau8Group.setStatus('current')
mibBuilder.exportSymbols("ELTEX-TAU8", sipProRowStatus=sipProRowStatus, sipProXcapCwName=sipProXcapCwName, sipProRtcpCount=sipProRtcpCount, sipProXcapCallholdName=sipProXcapCallholdName, huntGrPickupEnable=huntGrPickupEnable, fxsPortHangupTimeout=fxsPortHangupTimeout, huntGrSipPort=huntGrSipPort, huntGrRowStatus=huntGrRowStatus, fxsPortAuthPass=fxsPortAuthPass, fxsPortRbTimeout=fxsPortRbTimeout, logLocalFile=logLocalFile, logVoipError=logVoipError, fxsProfileMinPulse=fxsProfileMinPulse, sipProKeepAliveInterval=sipProKeepAliveInterval, sipConfig=sipConfig, sipProRegistraripRsrv1=sipProRegistraripRsrv1, sipProDialplanRegexp=sipProDialplanRegexp, fxsProfileGainT=fxsProfileGainT, fxsProfiles=fxsProfiles, systemConfig=systemConfig, huntGrPorts=huntGrPorts, KeepAliveModeType=KeepAliveModeType, huntGrWaitingTime=huntGrWaitingTime, sipProExpires=sipProExpires, snmpRoCommunity=snmpRoCommunity, dvoCfnaPrefix=dvoCfnaPrefix, fxsPortCtUnconditional=fxsPortCtUnconditional, fxsProfileGainR=fxsProfileGainR, dvoCfuPrefix=dvoCfuPrefix, fxsProfileInterdigit=fxsProfileInterdigit, sipProSilenceDetector=sipProSilenceDetector, sipCommonNotUseNAPTR=sipCommonNotUseNAPTR, fxsProfilesMIBBoundary=fxsProfilesMIBBoundary, fxsPortSipProfileId=fxsPortSipProfileId, fxsPortHotNumber=fxsPortHotNumber, sipProProxyipRsrv3=sipProProxyipRsrv3, fxsPortHotTimeout=fxsPortHotTimeout, fxsPortDirectnumber=fxsPortDirectnumber, fxsProfileHangupTimeout=fxsProfileHangupTimeout, groupsConfig=groupsConfig, dvoDndPrefix=dvoDndPrefix, networkConfig=networkConfig, fxsPortsMIBBoundary=fxsPortsMIBBoundary, fxsProfileBusyTimeout=fxsProfileBusyTimeout, huntGroupsMIBBoundary=huntGroupsMIBBoundary, fxsPortPolarityReverse=fxsPortPolarityReverse, OutboundType=OutboundType, fxsPortIndex=fxsPortIndex, sipProProxyip=sipProProxyip, ConferenceMode=ConferenceMode, tau8Group=tau8Group, fxsPortTable=fxsPortTable, fxsPortInterdigit=fxsPortInterdigit, fxsPortCtTimeout=fxsPortCtTimeout, fxsPorts=fxsPorts, sipProXcapHotlineName=sipProXcapHotlineName, TraceOutputType=TraceOutputType, snmpSyslocation=snmpSyslocation, fxsPortsUseFxsProfile=fxsPortsUseFxsProfile, sipProRsrvMode=sipProRsrvMode, fxsPortGainR=fxsPortGainR, sipProReduceSdpMediaCount=sipProReduceSdpMediaCount, sipProRsrvKeepaliveTime=sipProRsrvKeepaliveTime, syslogdIpaddr=syslogdIpaddr, PYSNMP_MODULE_ID=tau8, fxsPortUsername=fxsPortUsername, fxsProfilePolarityReverse=fxsProfilePolarityReverse, fxsPortCallWaiting=fxsPortCallWaiting, sipProRsrvCheckMethod=sipProRsrvCheckMethod, sipProImsEnable=sipProImsEnable, fxsProfileTable=fxsProfileTable, sipProKeepAliveMode=sipProKeepAliveMode, fxsPortProfile=fxsPortProfile, sipProOption100rel=sipProOption100rel, sipProFaxDirection=sipProFaxDirection, snmpTrapsink=snmpTrapsink, snmpSyscontact=snmpSyscontact, huntGrPhone=huntGrPhone, logVoipPbxEnable=logVoipPbxEnable, fxsPortRowStatus=fxsPortRowStatus, fxsProfileRowStatus=fxsProfileRowStatus, sipProEarlyMedia=sipProEarlyMedia, huntGroupTable=huntGroupTable, sipProG711pte=sipProG711pte, fxsPortGainT=fxsPortGainT, fxsProfileRbTimeout=fxsProfileRbTimeout, sipProRegistraripRsrv4=sipProRegistraripRsrv4, huntGrCallQueueSize=huntGrCallQueueSize, sipProModem=sipProModem, snmpSysname=snmpSysname, huntGrPassword=huntGrPassword, suppServices=suppServices, huntGroupEntry=huntGroupEntry, logVoipDebug=logVoipDebug, huntGrIndex=huntGrIndex, CallerIdType=CallerIdType, sipProfileTable=sipProfileTable, dvoHotNumberPrefix=dvoHotNumberPrefix, sipProRegistrationRsrv2=sipProRegistrationRsrv2, RsrvCheckMethodType=RsrvCheckMethodType, CallTransferType=CallTransferType, sipProfileIndex=sipProfileIndex, sipProDomain=sipProDomain, sipProFaxTransfer1=sipProFaxTransfer1, sipProPayload=sipProPayload, fxsPortUseAltNumber=fxsPortUseAltNumber, snmpRwCommunity=snmpRwCommunity, fxsPortSipPort=fxsPortSipPort, fxsPortPhone=fxsPortPhone, fxsPortCfuNumber=fxsPortCfuNumber, sipProRegistraripRsrv2=sipProRegistraripRsrv2, huntGrSipProfileId=huntGrSipProfileId, sipProEnableInT38=sipProEnableInT38, ModemType=ModemType, sipProfileName=sipProfileName, sipProRri=sipProRri, sipCommon=sipCommon, huntGrUserName=huntGrUserName, fxsProfileMinOnhookTime=fxsProfileMinOnhookTime, huntGroupName=huntGroupName, dvoCallwaitingPrefix=dvoCallwaitingPrefix, sipCommonStunEnable=sipCommonStunEnable, RsrvModeType=RsrvModeType, dvoCallPickupPrefix=dvoCallPickupPrefix, fxsPortEntry=fxsPortEntry, snmpTrap2sink=snmpTrap2sink, fxsPortCallTransfer=fxsPortCallTransfer, huntGrRegistration=huntGrRegistration, FaxDirectionType=FaxDirectionType, sipCommonPublicIp=sipCommonPublicIp, sipProConferenceServer=sipProConferenceServer, fxsPortStopDial=fxsPortStopDial, actionCommands=actionCommands, sipProConferenceMode=sipProConferenceMode, actionReboot=actionReboot, sipProRingback=sipProRingback, fxsProfileEntry=fxsProfileEntry, FlashtransferType=FlashtransferType, sipProProxyipRsrv1=sipProProxyipRsrv1, sipProProxyipRsrv2=sipProProxyipRsrv2, snmpConfig=snmpConfig, sipProRegistrationRsrv4=sipProRegistrationRsrv4, snmpTrapCommunity=snmpTrapCommunity, sipProEchoCanceler=sipProEchoCanceler, fxsPortCallerId=fxsPortCallerId, fxsPortBusyTimeout=fxsPortBusyTimeout, fxsPortDndEnable=fxsPortDndEnable, fxsProfileCallerId=fxsProfileCallerId, sipProRegistration=sipProRegistration, sipProRegistrarip=sipProRegistrarip, sipProRtcp=sipProRtcp, snmpInformsink=snmpInformsink, DtmfTransferType=DtmfTransferType, sipProEnablesip=sipProEnablesip, dvoCfbPrefix=dvoCfbPrefix, sipCommonStunInterval=sipCommonStunInterval, fxsPortCtBusy=fxsPortCtBusy, logVoipInfo=logVoipInfo, GroupType=GroupType, sipCommonStunServer=sipCommonStunServer, fxsPortCfnaNumber=fxsPortCfnaNumber, sipProFlashMime=sipProFlashMime, fxsPortCfbNumber=fxsPortCfbNumber, sipProFlashTransfer=sipProFlashTransfer, EarlyMediaType=EarlyMediaType, sipProDtmfTransfer=sipProDtmfTransfer, sipProFaxTransfer2=sipProFaxTransfer2, tau8=tau8, sipProXcapConferenceName=sipProXcapConferenceName, fxsPortMinPulse=fxsPortMinPulse, sipProFaxTransfer3=sipProFaxTransfer3, huntGrType=huntGrType, fxsProfileMinFlash=fxsProfileMinFlash, logLocalSize=logLocalSize, sipProProxyipRsrv4=sipProProxyipRsrv4, fxsPortHotLine=fxsPortHotLine, sipProCodecOrder=sipProCodecOrder, sipCommonNotUseSRV=sipCommonNotUseSRV, sipProDomainToReg=sipProDomainToReg, sipProRtcpTimer=sipProRtcpTimer, logIgmpEnable=logIgmpEnable, actionSave=actionSave, traceConfig=traceConfig, sipProRegistrationRsrv1=sipProRegistrationRsrv1, fxsPortEnabled=fxsPortEnabled, sipProRegistrationRsrv3=sipProRegistrationRsrv3, logVoipWarning=logVoipWarning, pbxConfig=pbxConfig, fxsPortMinFlash=fxsPortMinFlash, sipProDisplayToReg=sipProDisplayToReg, FlashMimeType=FlashMimeType, fxsProfileName=fxsProfileName, sipProRegistraripRsrv3=sipProRegistraripRsrv3, fxsProfileIndex=fxsProfileIndex, sipProOutbound=sipProOutbound, huntGrEnable=huntGrEnable, Option100relType=Option100relType, fxsPortCpcRus=fxsPortCpcRus, traceOutput=traceOutput, fxsPortAuthName=fxsPortAuthName, fxsPortMinOnhookTime=fxsPortMinOnhookTime, logVoipSipLevel=logVoipSipLevel, syslogdPort=syslogdPort, fxsPortCtNoanswer=fxsPortCtNoanswer, sipProfileEntry=sipProfileEntry, FaxtransferType=FaxtransferType, sipProfilesMIBBoundary=sipProfilesMIBBoundary, fxsPortAltNumber=fxsPortAltNumber)
