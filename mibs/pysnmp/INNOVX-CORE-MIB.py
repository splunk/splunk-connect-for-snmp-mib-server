#
# PySNMP MIB module INNOVX-CORE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INNOVX-CORE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Counter32, Bits, ObjectIdentity, NotificationType, Integer32, Unsigned32, Counter64, ModuleIdentity, enterprises, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, TimeTicks, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "ObjectIdentity", "NotificationType", "Integer32", "Unsigned32", "Counter64", "ModuleIdentity", "enterprises", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "TimeTicks", "IpAddress", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
framerelay = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22))
innovx = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1))
coreGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 1))
linkProbe = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2))
liuGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3))
casGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 4))
ddsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 5))
dteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6))
coreAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1))
coreReset = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 2))
coreDiags = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 3))
coreStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 4))
coreTrapArgs = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 5))
coreAggRate = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 6))
coreFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 7))
innovxMIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxMIBversion.setStatus('mandatory')
innovxFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxFirmwareVersion.setStatus('mandatory')
innovxSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxSerialNumber.setStatus('mandatory')
innovxHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxHardwareVersion.setStatus('mandatory')
innovxHardwareDescription = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxHardwareDescription.setStatus('mandatory')
innovxBootCodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxBootCodeVersion.setStatus('mandatory')
innovxHardwareOptions = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxHardwareOptions.setStatus('mandatory')
cmnTrapAddrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 8), )
if mibBuilder.loadTexts: cmnTrapAddrTable.setStatus('mandatory')
cmnTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 8, 1), ).setIndexNames((0, "INNOVX-CORE-MIB", "cmnTrapAddrIpDest"))
if mibBuilder.loadTexts: cmnTrapAddrEntry.setStatus('mandatory')
cmnTrapAddrIpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnTrapAddrIpDest.setStatus('mandatory')
cmnTrapAddrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmnTrapAddrCommunity.setStatus('mandatory')
cmnTrapAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmnTrapAddrStatus.setStatus('mandatory')
innovxSoftReset = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: innovxSoftReset.setStatus('mandatory')
innovxStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: innovxStatsReset.setStatus('mandatory')
innovxSelfTest = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("start-test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: innovxSelfTest.setStatus('mandatory')
innovxSelfTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal-complete-pass", 1), ("normal-complete-fail", 2), ("test-in-progress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxSelfTestStatus.setStatus('mandatory')
innovxLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxLedStatus.setStatus('mandatory')
innovxPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxPortStatus.setStatus('mandatory')
innovxPortFrameCounts = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxPortFrameCounts.setStatus('mandatory')
innovxTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("info", 5))))
if mibBuilder.loadTexts: innovxTrapSeverity.setStatus('mandatory')
innovxTrapState = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)))
if mibBuilder.loadTexts: innovxTrapState.setStatus('mandatory')
innovxTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: innovxTrapDescription.setStatus('mandatory')
innovxTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: innovxTrapThreshold.setStatus('mandatory')
innovxTrapActualValue = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: innovxTrapActualValue.setStatus('mandatory')
innovxTrapDlci = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991)))
if mibBuilder.loadTexts: innovxTrapDlci.setStatus('mandatory')
innovxpvcIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: innovxpvcIdentifier.setStatus('mandatory')
innovxAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 498, 22, 1) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("INNOVX-CORE-MIB", "innovxTrapSeverity"), ("INNOVX-CORE-MIB", "innovxTrapState"), ("INNOVX-CORE-MIB", "innovxTrapDescription"), ("INNOVX-CORE-MIB", "innovxTrapThreshold"), ("INNOVX-CORE-MIB", "innovxTrapActualValue"), ("INNOVX-CORE-MIB", "innovxTrapDlci"), ("INNOVX-CORE-MIB", "innovxpvcIdentifier"))
ap553DS0Format = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nx56k", 1), ("nx64k", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553DS0Format.setStatus('mandatory')
ap553NumberOfDS0s = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553NumberOfDS0s.setStatus('mandatory')
innovxFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 7, 1), )
if mibBuilder.loadTexts: innovxFeatureTable.setStatus('mandatory')
innovxFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 7, 1, 1), ).setIndexNames((0, "INNOVX-CORE-MIB", "innovxFeatureIndex"))
if mibBuilder.loadTexts: innovxFeatureEntry.setStatus('mandatory')
innovxFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxFeatureIndex.setStatus('mandatory')
innovxFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxFeatureName.setStatus('mandatory')
innovxFeatureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxFeatureEnable.setStatus('mandatory')
innovxFeatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: innovxFeatureStatus.setStatus('mandatory')
mibBuilder.exportSymbols("INNOVX-CORE-MIB", coreStatus=coreStatus, dteGroup=dteGroup, innovxTrapThreshold=innovxTrapThreshold, cmnTrapAddrCommunity=cmnTrapAddrCommunity, innovxFeatureEntry=innovxFeatureEntry, coreTrapArgs=coreTrapArgs, ap553DS0Format=ap553DS0Format, innovxFeatureStatus=innovxFeatureStatus, innovxFeatureIndex=innovxFeatureIndex, innovxFeatureName=innovxFeatureName, coreFeatures=coreFeatures, innovxSelfTestStatus=innovxSelfTestStatus, coreGroup=coreGroup, innovxTrapSeverity=innovxTrapSeverity, innovxFirmwareVersion=innovxFirmwareVersion, innovxSoftReset=innovxSoftReset, innovxPortFrameCounts=innovxPortFrameCounts, innovxTrapActualValue=innovxTrapActualValue, innovxHardwareDescription=innovxHardwareDescription, innovxAlarmTrap=innovxAlarmTrap, innovxTrapState=innovxTrapState, ap553NumberOfDS0s=ap553NumberOfDS0s, coreReset=coreReset, coreAggRate=coreAggRate, innovxSerialNumber=innovxSerialNumber, innovxHardwareOptions=innovxHardwareOptions, innovxTrapDescription=innovxTrapDescription, innovxMIBversion=innovxMIBversion, innovxPortStatus=innovxPortStatus, cmnTrapAddrIpDest=cmnTrapAddrIpDest, framerelay=framerelay, innovxFeatureTable=innovxFeatureTable, innovxpvcIdentifier=innovxpvcIdentifier, ddsGroup=ddsGroup, coreDiags=coreDiags, coreAdmin=coreAdmin, innovx=innovx, cmnTrapAddrEntry=cmnTrapAddrEntry, innovxFeatureEnable=innovxFeatureEnable, cmnTrapAddrTable=cmnTrapAddrTable, linkProbe=linkProbe, liuGroup=liuGroup, innovxSelfTest=innovxSelfTest, cmnTrapAddrStatus=cmnTrapAddrStatus, innovxLedStatus=innovxLedStatus, casGroup=casGroup, innovxStatsReset=innovxStatsReset, gdc=gdc, innovxBootCodeVersion=innovxBootCodeVersion, innovxTrapDlci=innovxTrapDlci, innovxHardwareVersion=innovxHardwareVersion)
