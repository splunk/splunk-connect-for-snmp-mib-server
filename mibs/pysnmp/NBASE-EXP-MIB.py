#
# PySNMP MIB module NBASE-EXP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBASE-EXP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:07:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, ModuleIdentity, MibIdentifier, Counter32, enterprises, Counter64, Integer32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "ModuleIdentity", "MibIdentifier", "Counter32", "enterprises", "Counter64", "Integer32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "iso", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
nbSwitchG1 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1))
nbsMegaMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 16))
nbsExpansionPortMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 16, 1))
nbsAtmLanePortMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 16, 2))
nbsFddiPortMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 16, 3))
nbsExpPortMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortMaxNum.setStatus('mandatory')
nbsExpPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2), )
if mibBuilder.loadTexts: nbsExpPortTable.setStatus('mandatory')
nbsExpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1), ).setIndexNames((0, "NBASE-EXP-MIB", "nbsExpPortTblPortNumber"))
if mibBuilder.loadTexts: nbsExpPortEntry.setStatus('mandatory')
nbsExpPortTblPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblPortNumber.setStatus('mandatory')
nbsExpPortTblHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("cpu-card", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblHwType.setStatus('mandatory')
nbsExpPortTblSwType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("atm-lec", 2), ("atm-mpoa", 3), ("fddi", 4), ("wan-router", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblSwType.setStatus('mandatory')
nbsExpPortTblSquall = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblSquall.setStatus('mandatory')
nbsExpPortTblHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblHwVersion.setStatus('mandatory')
nbsExpPortTblMCodeVrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblMCodeVrsn.setStatus('mandatory')
nbsExpPortTblSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblSwVersion.setStatus('mandatory')
nbsExpPortTblStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblStatus.setStatus('mandatory')
nbsExpPortTftpSwFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsExpPortTftpSwFileName.setStatus('mandatory')
nbsExpPortInitDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsExpPortInitDownload.setStatus('mandatory')
nbsAtmLanePortMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsAtmLanePortMaxNum.setStatus('mandatory')
nbsAtmLanePortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2), )
if mibBuilder.loadTexts: nbsAtmLanePortTable.setStatus('mandatory')
nbsAtmLanePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2, 1), ).setIndexNames((0, "NBASE-EXP-MIB", "nbsAtmLanePortNumber"))
if mibBuilder.loadTexts: nbsAtmLanePortEntry.setStatus('mandatory')
nbsAtmLanePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsAtmLanePortNumber.setStatus('mandatory')
laneLecsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laneLecsAddress.setStatus('mandatory')
sonetCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetCircuitId.setStatus('mandatory')
signalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalingStatus.setStatus('mandatory')
nbsFddiPortMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 16, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsFddiPortMaxNum.setStatus('mandatory')
nbsFddiPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 16, 3, 2), )
if mibBuilder.loadTexts: nbsFddiPortTable.setStatus('mandatory')
nbsFddiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 16, 3, 2, 1), ).setIndexNames((0, "NBASE-EXP-MIB", "nbsFddiPortNumber"))
if mibBuilder.loadTexts: nbsFddiPortEntry.setStatus('mandatory')
nbsFddiPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsFddiPortNumber.setStatus('mandatory')
nbsFddiSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsFddiSmtIndex.setStatus('mandatory')
mibBuilder.exportSymbols("NBASE-EXP-MIB", nbsExpPortTblSwVersion=nbsExpPortTblSwVersion, nbsAtmLanePortMIB=nbsAtmLanePortMIB, nbsAtmLanePortNumber=nbsAtmLanePortNumber, nbsExpPortMaxNum=nbsExpPortMaxNum, nbsExpPortTftpSwFileName=nbsExpPortTftpSwFileName, nbsFddiPortEntry=nbsFddiPortEntry, nbsAtmLanePortEntry=nbsAtmLanePortEntry, laneLecsAddress=laneLecsAddress, nbsExpPortTblSquall=nbsExpPortTblSquall, nbsAtmLanePortMaxNum=nbsAtmLanePortMaxNum, nbsAtmLanePortTable=nbsAtmLanePortTable, nbsExpPortEntry=nbsExpPortEntry, nbase=nbase, sonetCircuitId=sonetCircuitId, nbsFddiPortNumber=nbsFddiPortNumber, nbSwitchG1=nbSwitchG1, nbsFddiSmtIndex=nbsFddiSmtIndex, nbsMegaMibs=nbsMegaMibs, nbsExpPortTblMCodeVrsn=nbsExpPortTblMCodeVrsn, nbsExpPortTblHwVersion=nbsExpPortTblHwVersion, signalingStatus=signalingStatus, nbsExpPortTable=nbsExpPortTable, nbsExpPortTblPortNumber=nbsExpPortTblPortNumber, nbsExpPortTblHwType=nbsExpPortTblHwType, nbsFddiPortMaxNum=nbsFddiPortMaxNum, nbsExpPortTblSwType=nbsExpPortTblSwType, nbsFddiPortMIB=nbsFddiPortMIB, nbsExpPortTblStatus=nbsExpPortTblStatus, nbsFddiPortTable=nbsFddiPortTable, nbsExpPortInitDownload=nbsExpPortInitDownload, nbsExpansionPortMIB=nbsExpansionPortMIB)
