#
# PySNMP MIB module FORTINET-FORTIGATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORTINET-FORTIGATE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:00:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
fnSysSerial, fnAdminEntry, fortinet, FnBoolState, FnIndex = mibBuilder.importSymbols("FORTINET-CORE-MIB", "fnSysSerial", "fnAdminEntry", "fortinet", "FnBoolState", "FnIndex")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ifIndex, ifName, ifEntry = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName", "ifEntry")
InetAddress, InetAddressPrefixLength, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType", "InetPortNumber")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
iso, Counter32, TimeTicks, ObjectIdentity, Gauge32, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, NotificationType, Unsigned32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "TimeTicks", "ObjectIdentity", "Gauge32", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "NotificationType", "Unsigned32", "IpAddress", "MibIdentifier")
PhysAddress, TextualConvention, DisplayString, AutonomousType, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString", "AutonomousType", "DateAndTime")
fnFortiGateMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 12356, 101))
fnFortiGateMib.setRevisions(('2016-06-17 00:00', '2015-04-23 00:00', '2015-03-16 00:00', '2015-01-10 00:00', '2014-12-04 00:00', '2014-06-04 00:00', '2014-02-13 00:00', '2013-08-12 00:00', '2013-07-26 00:00', '2013-04-12 00:00', '2013-04-06 00:00', '2012-11-29 00:00', '2012-07-10 00:00', '2012-05-16 00:00', '2012-02-06 00:00', '2011-09-12 00:00', '2011-01-10 00:00', '2009-11-03 00:00', '2009-10-01 00:00', '2009-07-07 00:00', '2008-11-03 00:00', '2008-09-02 00:00', '2008-08-19 00:00', '2008-06-16 00:00', '2008-04-14 00:00',))
if mibBuilder.loadTexts: fnFortiGateMib.setLastUpdated('201606170000Z')
if mibBuilder.loadTexts: fnFortiGateMib.setOrganization('Fortinet Technologies, Inc.')
class FgVdIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class FgOpMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nat", 1), ("transparent", 2))

class FgHaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("standalone", 1), ("activeActive", 2), ("activePassive", 3))

class FgHaState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("master", 1), ("backup", 2), ("standalone", 3))

class FgHaLBSchedule(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("hub", 2), ("leastConnections", 3), ("roundRobin", 4), ("weightedRoundRobin", 5), ("random", 6), ("ipBased", 7), ("ipPortBased", 8))

class FgAdminPermLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 15, 255))
    namedValues = NamedValues(("readAdmin", 0), ("writeAdmin", 1), ("domainAdmin", 15), ("superAdmin", 255))

class FgFwUserAuthType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("local", 1), ("radiusSingle", 2), ("radiusMultiple", 3), ("ldap", 4))

class FgSessProto(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6, 8, 12, 17, 22, 41, 46, 47, 50, 51, 89, 103, 108, 255))
    namedValues = NamedValues(("ip", 0), ("icmp", 1), ("igmp", 2), ("ipip", 4), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("idp", 22), ("ipv6", 41), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("ospf", 89), ("pim", 103), ("comp", 108), ("raw", 255))

class FgP2PProto(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("bitTorrent", 0), ("eDonkey", 1), ("gnutella", 2), ("kaZaa", 3), ("skype", 4), ("winNY", 5))

class FgScanAvDisposition(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("detected", 1), ("blocked", 2))

class FgWanOptProtocols(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("http", 1), ("mapi", 2), ("cifs", 3), ("ftp", 4), ("tcp", 5))

class FgWanOptHistPeriods(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("last10Min", 1), ("lastHour", 2), ("lastDay", 3), ("lastMonth", 4))

class FgHaStatsSyncStatusType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("unsynchronized", 0), ("synchronized", 1))

class FgWcWlanSecurityType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 0), ("open", 1), ("captivePortal", 2), ("wep64", 3), ("wep128", 4), ("wpaOnlyPersonal", 5), ("wpaOnlyEnterprise", 6), ("wpa2OnlyPersonal", 7), ("wpa2OnlyEnterprise", 8), ("wpaPersonal", 9), ("wpaEnterprise", 10), ("wpaOnlyPersonalCaptivePortal", 11), ("wpa2OnlyPersonalCaptivePortal", 12), ("wpaPersonalCaptivePortal", 13))

class FgWcWlanAuthenticationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("psk", 1), ("radiusServer", 2), ("userGroup", 3))

class FgWcWlanEncryptionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("other", 0), ("none", 1), ("tkip", 2), ("aes", 3), ("tkipAes", 4))

class FgWcWtpRadioId(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 31)

class FgWcWtpRadioType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("other", 0), ("dot11a", 1), ("dot11b", 2), ("dot11g", 3), ("dot11n5g", 4), ("dot11n2g", 5), ("dot11ac", 6), ("dot11ngOnly", 7), ("dot11gOnly", 8), ("dot11n2GHzOnly", 9), ("dot11n5GHzOnly", 10), ("dot11acnOnly", 11), ("dot11acOnly", 12))

class FgWcWtpChannelWidthType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("width20MHz", 1), ("width40MHz", 2), ("width80MHz", 3))

class FgWcWtpRadioBandType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("other", 0), ("band2GHz", 1), ("band5GHz", 2))

class FgWcWtpRadioChannelNumber(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 200)

class FgWcWtpRadioMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 0), ("notExist", 1), ("disabled", 2), ("ap", 3), ("monitor", 4), ("sniffer", 5))

class FgWcCountryString(TextualConvention, OctetString):
    status = 'current'
    displayHint = '3a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

fgModel = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1))
fg900D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 900))
fgr60D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 643))
fgr90D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 638))
fgt1000C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10004))
fgt1000D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10005))
fgt100D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1004))
fgt1200D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 12000))
fgt140D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1401))
fgt140P = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1402))
fgt1500D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 15000))
fgt1500DT = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 15001))
fgt200D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2005))
fgt200DP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2007))
fgt240D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2006))
fgt240DP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2008))
fgt280D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2013))
fgt3000D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30000))
fgt30D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 304))
fgt30DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 305))
fgt30E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 306))
fgt3100D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 31000))
fgt3200D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 32000))
fgt3240C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 32401))
fgt3600C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 36004))
fgt3700D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 37000))
fgt3700DX = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 37001))
fgt3810D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 38101))
fgt3815D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 38150))
fgt3HD = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3006))
fgt400D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 4004))
fgt5001C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50014))
fgt5001D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50015))
fgt500D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 5004))
fgt50E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 505))
fgt51E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 515))
fgt600C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6003))
fgt600D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6004))
fgt60D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 624))
fgt60DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 625))
fgt70D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 700))
fgt70DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 701))
fgt800C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 8003))
fgt800D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 8004))
fgt80C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 800))
fgt80CM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 801))
fgt80D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 803))
fgt90D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 630))
fgt90DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 631))
fgt92D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 636))
fgt94DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 634))
fgt98DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 635))
fgtVM64 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30))
fgtVM64AWS = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 45))
fgtVM64AWSONDEMAND = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 46))
fgtVM64HV = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 70))
fgtVM64KVm = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 60))
fgtVM64SVM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 32))
fgtVM64VMX = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 31))
fgtVM64XEN = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 40))
fgtsoc3 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 628))
fosVM64 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90000))
fosVM64KVM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90060))
fw60DP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 627))
fwf30D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 314))
fwf30DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 315))
fwf30E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 316))
fwf50E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 506))
fwf51E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 516))
fwf60D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 626))
fwf80CM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 810))
fwf81CM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 811))
fwf90D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 632))
fwf90DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 633))
fwf92D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 637))
fgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 2))
fgTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0))
fgVirtualDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 3))
fgVdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1))
fgVdNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdNumber.setStatus('current')
fgVdMaxVdoms = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdMaxVdoms.setStatus('current')
fgVdEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1, 3), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEnabled.setStatus('current')
fgVdTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2))
fgVdTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1), )
if mibBuilder.loadTexts: fgVdTable.setStatus('current')
fgVdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgVdEntry.setStatus('current')
fgVdEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 1), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntIndex.setStatus('current')
fgVdEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntName.setStatus('current')
fgVdEntOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 3), FgOpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntOpMode.setStatus('current')
fgVdEntHaState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 4), FgHaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntHaState.setStatus('current')
fgVdEntCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntCpuUsage.setStatus('current')
fgVdEntMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntMemUsage.setStatus('current')
fgVdEntSesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntSesCount.setStatus('current')
fgVdEntSesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 8), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntSesRate.setStatus('current')
fgVdTpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2), )
if mibBuilder.loadTexts: fgVdTpTable.setStatus('current')
fgVdTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgVdTpEntry.setStatus('current')
fgVdTpMgmtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdTpMgmtAddrType.setStatus('current')
fgVdTpMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdTpMgmtAddr.setStatus('current')
fgVdTpMgmtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdTpMgmtMask.setStatus('current')
fgSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4))
fgSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1))
fgSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersion.setStatus('current')
fgSysMgmtVdom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 2), FgVdIndex())
if mibBuilder.loadTexts: fgSysMgmtVdom.setStatus('current')
fgSysCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysCpuUsage.setStatus('current')
fgSysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysMemUsage.setStatus('current')
fgSysMemCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysMemCapacity.setStatus('current')
fgSysDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysDiskUsage.setStatus('current')
fgSysDiskCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysDiskCapacity.setStatus('current')
fgSysSesCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesCount.setStatus('current')
fgSysLowMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysLowMemUsage.setStatus('current')
fgSysLowMemCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysLowMemCapacity.setStatus('current')
fgSysSesRate1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 11), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate1.setStatus('current')
fgSysSesRate10 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 12), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate10.setStatus('current')
fgSysSesRate30 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 13), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate30.setStatus('current')
fgSysSesRate60 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 14), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate60.setStatus('current')
fgSysSes6Count = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Count.setStatus('current')
fgSysSes6Rate1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 16), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate1.setStatus('current')
fgSysSes6Rate10 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 17), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate10.setStatus('current')
fgSysSes6Rate30 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 18), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate30.setStatus('current')
fgSysSes6Rate60 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 19), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate60.setStatus('current')
fgSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 20), Counter64()).setUnits('hundredths of a second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysUpTime.setStatus('current')
fgSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2))
fgSysVersionAv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersionAv.setStatus('current')
fgSysVersionIps = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersionIps.setStatus('current')
fgHwSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3))
fgHwSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorCount.setStatus('current')
fgHwSensorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2), )
if mibBuilder.loadTexts: fgHwSensorTable.setStatus('current')
fgHwSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgHwSensorEntIndex"))
if mibBuilder.loadTexts: fgHwSensorEntry.setStatus('current')
fgHwSensorEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgHwSensorEntIndex.setStatus('current')
fgHwSensorEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorEntName.setStatus('current')
fgHwSensorEntValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorEntValue.setStatus('current')
fgHwSensorEntAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorEntAlarmStatus.setStatus('current')
fgProcessors = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4))
fgProcessorCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorCount.setStatus('current')
fgProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2), )
if mibBuilder.loadTexts: fgProcessorTable.setStatus('current')
fgProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgProcessorEntIndex"))
if mibBuilder.loadTexts: fgProcessorEntry.setStatus('current')
fgProcessorEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgProcessorEntIndex.setStatus('current')
fgProcessorUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorUsage.setStatus('current')
fgProcessorUsage5sec = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorUsage5sec.setStatus('current')
fgProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 4), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorType.setStatus('current')
fgProcessorContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 5), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorContainedIn.setStatus('current')
fgProcessorPktRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorPktRxCount.setStatus('current')
fgProcessorPktTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorPktTxCount.setStatus('current')
fgProcessorPktDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorPktDroppedCount.setStatus('current')
fgProcessorUserUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorUserUsage.setStatus('current')
fgProcessorSysUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorSysUsage.setStatus('current')
fgProcessorTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3))
fgProcessorOther = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 1))
if mibBuilder.loadTexts: fgProcessorOther.setStatus('current')
fgProcessorIntel = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 2))
if mibBuilder.loadTexts: fgProcessorIntel.setStatus('current')
fgProcessorAMD = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 3))
if mibBuilder.loadTexts: fgProcessorAMD.setStatus('current')
fgProcessorXlr = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 4))
if mibBuilder.loadTexts: fgProcessorXlr.setStatus('current')
fgProcessorFnSoc = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 5))
if mibBuilder.loadTexts: fgProcessorFnSoc.setStatus('current')
fgProcessorFnNP2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 6))
if mibBuilder.loadTexts: fgProcessorFnNP2.setStatus('current')
fgProcessorFnNP4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 7))
if mibBuilder.loadTexts: fgProcessorFnNP4.setStatus('current')
fgProcessorFnNP6 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 8))
if mibBuilder.loadTexts: fgProcessorFnNP6.setStatus('current')
fgProcessorModules = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5))
fgProcessorModuleTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1))
fgProcModOther = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 1))
if mibBuilder.loadTexts: fgProcModOther.setStatus('current')
fgProcModIntegrated = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 2))
if mibBuilder.loadTexts: fgProcModIntegrated.setStatus('current')
fgProcModFnXE2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 3))
if mibBuilder.loadTexts: fgProcModFnXE2.setStatus('current')
fgProcModFnCE4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 4))
if mibBuilder.loadTexts: fgProcModFnCE4.setStatus('current')
fgProcModFnFE8 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 5))
if mibBuilder.loadTexts: fgProcModFnFE8.setStatus('current')
fgProcModFnXG2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 6))
if mibBuilder.loadTexts: fgProcModFnXG2.setStatus('current')
fgProcModIntegratedNPU = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 7))
if mibBuilder.loadTexts: fgProcModIntegratedNPU.setStatus('current')
fgProcModFnXD2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 8))
if mibBuilder.loadTexts: fgProcModFnXD2.setStatus('current')
fgProcModFnF20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 9))
if mibBuilder.loadTexts: fgProcModFnF20.setStatus('current')
fgProcModFnC20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 10))
if mibBuilder.loadTexts: fgProcModFnC20.setStatus('current')
fgProcModFnXD4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 11))
if mibBuilder.loadTexts: fgProcModFnXD4.setStatus('current')
fgProcModFnFB4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 12))
if mibBuilder.loadTexts: fgProcModFnFB4.setStatus('current')
fgProcModFnFB8 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 13))
if mibBuilder.loadTexts: fgProcModFnFB8.setStatus('current')
fgProcModFnXB2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 14))
if mibBuilder.loadTexts: fgProcModFnXB2.setStatus('current')
fgProcessorModuleCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorModuleCount.setStatus('current')
fgProcessorModuleTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3), )
if mibBuilder.loadTexts: fgProcessorModuleTable.setStatus('current')
fgProcessorModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgProcModIndex"))
if mibBuilder.loadTexts: fgProcessorModuleEntry.setStatus('current')
fgProcModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgProcModIndex.setStatus('current')
fgProcModType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModType.setStatus('current')
fgProcModName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModName.setStatus('current')
fgProcModDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModDescr.setStatus('current')
fgProcModProcessorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModProcessorCount.setStatus('current')
fgProcModMemCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModMemCapacity.setStatus('current')
fgProcModMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModMemUsage.setStatus('current')
fgProcModSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModSessionCount.setStatus('current')
fgProcModSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModSACount.setStatus('current')
fgSystemInfoAdvanced = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6))
fgSysInfoAdvMem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1))
fgSIAdvMemPageCache = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 1), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemPageCache.setStatus('current')
fgSIAdvMemCacheActive = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 2), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemCacheActive.setStatus('current')
fgSIAdvMemCacheInactive = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 3), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemCacheInactive.setStatus('current')
fgSIAdvMemBuffer = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 4), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemBuffer.setStatus('current')
fgSIAdvMemEnterKerConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 5), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemEnterKerConsThrsh.setStatus('current')
fgSIAdvMemLeaveKerConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 6), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemLeaveKerConsThrsh.setStatus('current')
fgSIAdvMemEnterProxyConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 7), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemEnterProxyConsThrsh.setStatus('current')
fgSIAdvMemLeaveProxyConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 8), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemLeaveProxyConsThrsh.setStatus('current')
fgSysInfoAdvSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2))
fgSIAdvSesEphemeralCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesEphemeralCount.setStatus('current')
fgSIAdvSesEphemeralLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesEphemeralLimit.setStatus('current')
fgSIAdvSesClashCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesClashCount.setStatus('current')
fgSIAdvSesExpCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesExpCount.setStatus('current')
fgSIAdvSesSyncQFCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesSyncQFCount.setStatus('current')
fgSIAdvSesAcceptQFCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesAcceptQFCount.setStatus('current')
fgSIAdvSesNoListenerCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesNoListenerCount.setStatus('current')
fgUsbports = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7))
fgUsbportCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportCount.setStatus('current')
fgUsbportTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2), )
if mibBuilder.loadTexts: fgUsbportTable.setStatus('current')
fgUsbportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgUsbportEntIndex"))
if mibBuilder.loadTexts: fgUsbportEntry.setStatus('current')
fgUsbportEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgUsbportEntIndex.setStatus('current')
fgUsbportPlugged = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unplugged", 0), ("plugged", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportPlugged.setStatus('current')
fgUsbportVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportVersion.setStatus('current')
fgUsbportClass = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 254, 255))).clone(namedValues=NamedValues(("ifc", 0), ("audio", 1), ("comm", 2), ("hid", 3), ("physical", 5), ("image", 6), ("printer", 7), ("storage", 8), ("hub", 9), ("cdcData", 10), ("chipSmartCard", 11), ("contentSecurity", 13), ("appSpec", 254), ("vendorSpec", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportClass.setStatus('current')
fgUsbportVendId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportVendId.setStatus('current')
fgUsbportProdId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportProdId.setStatus('current')
fgUsbportRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportRevision.setStatus('current')
fgUsbportManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportManufacturer.setStatus('current')
fgUsbportProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportProduct.setStatus('current')
fgUsbportSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportSerial.setStatus('current')
fgLinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8))
fgLinkMonitorNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorNumber.setStatus('current')
fgLinkMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2), )
if mibBuilder.loadTexts: fgLinkMonitorTable.setStatus('current')
fgLinkMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgLinkMonitorID"))
if mibBuilder.loadTexts: fgLinkMonitorEntry.setStatus('current')
fgLinkMonitorID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgLinkMonitorID.setStatus('current')
fgLinkMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorName.setStatus('current')
fgLinkMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alive", 0), ("dead", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorState.setStatus('current')
fgLinkMonitorLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorLatency.setStatus('current')
fgLinkMonitorJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorJitter.setStatus('current')
fgLinkMonitorPacketSend = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorPacketSend.setStatus('current')
fgLinkMonitorPacketRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorPacketRecv.setStatus('current')
fgLinkMonitorPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorPacketLoss.setStatus('current')
fgLinkMonitorVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorVdom.setStatus('current')
fgFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5))
fgFwPolicies = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1))
fgFwPolInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 1))
fgFwPolTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2))
fgFwPolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1), )
if mibBuilder.loadTexts: fgFwPolStatsTable.setStatus('current')
fgFwPolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgFwPolID"))
if mibBuilder.loadTexts: fgFwPolStatsEntry.setStatus('current')
fgFwPolID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwPolID.setStatus('current')
fgFwPolPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolPktCount.setStatus('current')
fgFwPolByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolByteCount.setStatus('current')
fgFwPolLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolLastUsed.setStatus('current')
fgFwPolPktCountHc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolPktCountHc.setStatus('current')
fgFwPolByteCountHc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolByteCountHc.setStatus('current')
fgFwPol6StatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2), )
if mibBuilder.loadTexts: fgFwPol6StatsTable.setStatus('current')
fgFwPol6StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgFwPol6ID"))
if mibBuilder.loadTexts: fgFwPol6StatsEntry.setStatus('current')
fgFwPol6ID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwPol6ID.setStatus('current')
fgFwPol6PktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPol6PktCount.setStatus('current')
fgFwPol6ByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPol6ByteCount.setStatus('current')
fgFwPol6LastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPol6LastUsed.setStatus('current')
fgFwUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2))
fgFwUserInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 1))
fgFwUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserNumber.setStatus('current')
fgFwUserAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserAuthTimeout.setStatus('current')
fgFwUserTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2))
fgFwUserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1), )
if mibBuilder.loadTexts: fgFwUserTable.setStatus('current')
fgFwUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgFwUserIndex"))
if mibBuilder.loadTexts: fgFwUserEntry.setStatus('current')
fgFwUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwUserIndex.setStatus('current')
fgFwUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserName.setStatus('current')
fgFwUserAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 3), FgFwUserAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserAuth.setStatus('current')
fgFwUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserState.setStatus('current')
fgFwUserVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 5), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserVdom.setStatus('current')
fgMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6))
fgFmTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0))
fgAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1))
fgAdminOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 1))
fgAdminIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAdminIdleTimeout.setStatus('current')
fgAdminLcdProtection = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 1, 2), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAdminLcdProtection.setStatus('current')
fgAdminTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2))
fgAdminTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2, 1), )
if mibBuilder.loadTexts: fgAdminTable.setStatus('current')
fgAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2, 1, 1), )
fnAdminEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAdminEntry"))
fgAdminEntry.setIndexNames(*fnAdminEntry.getIndexNames())
if mibBuilder.loadTexts: fgAdminEntry.setStatus('current')
fgAdminVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2, 1, 1, 1), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAdminVdom.setStatus('current')
fgMgmtTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2))
fgManIfIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgManIfIp.setStatus('current')
fgManIfMask = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgManIfMask.setStatus('current')
fgManIfIp6 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2, 3), Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgManIfIp6.setStatus('current')
fgIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7))
fgIntfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 1))
fgIntfTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2))
fgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1), )
if mibBuilder.loadTexts: fgIntfTable.setStatus('current')
fgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1, 1), )
ifEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIntfEntry"))
fgIntfEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: fgIntfEntry.setStatus('current')
fgIntfEntVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1, 1, 1), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfEntVdom.setStatus('current')
fgIntfVrrps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3))
fgIntfVrrpCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpCount.setStatus('current')
fgIntfVrrpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2), )
if mibBuilder.loadTexts: fgIntfVrrpTable.setStatus('current')
fgIntfVrrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntIndex"))
if mibBuilder.loadTexts: fgIntfVrrpEntry.setStatus('current')
fgIntfVrrpEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIntfVrrpEntIndex.setStatus('current')
fgIntfVrrpEntVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 2), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntVrId.setStatus('current')
fgIntfVrrpEntGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 3), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntGrpId.setStatus('current')
fgIntfVrrpEntIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntIfName.setStatus('current')
fgIntfVrrpEntState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backup", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntState.setStatus('current')
fgIntfVrrpEntVrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntVrIp.setStatus('current')
fgIntfVlanHbs = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4))
fgIntfVlanHbCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbCount.setStatus('current')
fgIntfVlanHbTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2), )
if mibBuilder.loadTexts: fgIntfVlanHbTable.setStatus('current')
fgIntfVlanHbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntIndex"))
if mibBuilder.loadTexts: fgIntfVlanHbEntry.setStatus('current')
fgIntfVlanHbEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIntfVlanHbEntIndex.setStatus('current')
fgIntfVlanHbEntIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbEntIfName.setStatus('current')
fgIntfVlanHbEntSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbEntSerial.setStatus('current')
fgIntfVlanHbEntState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbEntState.setStatus('current')
fgAntivirus = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8))
fgAvInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8, 1))
fgAvTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2))
fgAvStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1), )
if mibBuilder.loadTexts: fgAvStatsTable.setStatus('current')
fgAvStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAvStatsEntry"))
fgAvStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAvStatsEntry.setStatus('current')
fgAvVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvVirusDetected.setStatus('current')
fgAvVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvVirusBlocked.setStatus('current')
fgAvHTTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvHTTPVirusDetected.setStatus('current')
fgAvHTTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvHTTPVirusBlocked.setStatus('current')
fgAvSMTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvSMTPVirusDetected.setStatus('current')
fgAvSMTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvSMTPVirusBlocked.setStatus('current')
fgAvPOP3VirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvPOP3VirusDetected.setStatus('current')
fgAvPOP3VirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvPOP3VirusBlocked.setStatus('current')
fgAvIMAPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMAPVirusDetected.setStatus('current')
fgAvIMAPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMAPVirusBlocked.setStatus('current')
fgAvFTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvFTPVirusDetected.setStatus('current')
fgAvFTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvFTPVirusBlocked.setStatus('current')
fgAvIMVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMVirusDetected.setStatus('current')
fgAvIMVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMVirusBlocked.setStatus('current')
fgAvNNTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvNNTPVirusDetected.setStatus('current')
fgAvNNTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvNNTPVirusBlocked.setStatus('current')
fgAvOversizedDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvOversizedDetected.setStatus('current')
fgAvOversizedBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvOversizedBlocked.setStatus('current')
fgAvTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8, 3))
fgAvTrapVirName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 8, 3, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgAvTrapVirName.setStatus('current')
fgIps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9))
fgIpsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9, 1))
fgIpsTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2))
fgIpsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1), )
if mibBuilder.loadTexts: fgIpsStatsTable.setStatus('current')
fgIpsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIpsStatsEntry"))
fgIpsStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgIpsStatsEntry.setStatus('current')
fgIpsIntrusionsDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsIntrusionsDetected.setStatus('current')
fgIpsIntrusionsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsIntrusionsBlocked.setStatus('current')
fgIpsCritSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsCritSevDetections.setStatus('current')
fgIpsHighSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsHighSevDetections.setStatus('current')
fgIpsMedSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsMedSevDetections.setStatus('current')
fgIpsLowSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsLowSevDetections.setStatus('current')
fgIpsInfoSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsInfoSevDetections.setStatus('current')
fgIpsSignatureDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsSignatureDetections.setStatus('current')
fgIpsAnomalyDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsAnomalyDetections.setStatus('current')
fgIpsTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3))
fgIpsTrapSigId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3, 1), FnIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgIpsTrapSigId.setStatus('current')
fgIpsTrapSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgIpsTrapSrcIp.setStatus('current')
fgIpsTrapSigMsg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgIpsTrapSigMsg.setStatus('current')
fgApplications = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10))
fgWebfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1))
fgWebfilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 1))
fgWebfilterTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2))
fgWebfilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1), )
if mibBuilder.loadTexts: fgWebfilterStatsTable.setStatus('current')
fgWebfilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgWebfilterStatsEntry"))
fgWebfilterStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgWebfilterStatsEntry.setStatus('current')
fgWfHTTPBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPBlocked.setStatus('current')
fgWfHTTPSBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPSBlocked.setStatus('current')
fgWfHTTPURLBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPURLBlocked.setStatus('current')
fgWfHTTPSURLBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPSURLBlocked.setStatus('current')
fgWfActiveXBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfActiveXBlocked.setStatus('current')
fgWfCookieBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfCookieBlocked.setStatus('current')
fgWfAppletBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfAppletBlocked.setStatus('current')
fgFortiGuardStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2), )
if mibBuilder.loadTexts: fgFortiGuardStatsTable.setStatus('current')
fgFortiGuardStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgFortiGuardStatsEntry"))
fgFortiGuardStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgFortiGuardStatsEntry.setStatus('current')
fgFgWfHTTPExamined = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPExamined.setStatus('current')
fgFgWfHTTPSExamined = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSExamined.setStatus('current')
fgFgWfHTTPAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPAllowed.setStatus('current')
fgFgWfHTTPSAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSAllowed.setStatus('current')
fgFgWfHTTPBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPBlocked.setStatus('current')
fgFgWfHTTPSBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSBlocked.setStatus('current')
fgFgWfHTTPLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPLogged.setStatus('current')
fgFgWfHTTPSLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSLogged.setStatus('current')
fgFgWfHTTPOverridden = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPOverridden.setStatus('current')
fgFgWfHTTPSOverridden = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSOverridden.setStatus('current')
fgAppProxyHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100))
fgApHTTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPUpTime.setStatus('deprecated')
fgApHTTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPMemUsage.setStatus('deprecated')
fgApHTTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPConnections.setStatus('current')
fgApHTTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPMaxConnections.setStatus('current')
fgApHTTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 3), )
if mibBuilder.loadTexts: fgApHTTPStatsTable.setStatus('current')
fgApHTTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApHTTPStatsEntry"))
fgApHTTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApHTTPStatsEntry.setStatus('current')
fgApHTTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPReqProcessed.setStatus('current')
fgAppProxySMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101))
fgApSMTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPUpTime.setStatus('deprecated')
fgApSMTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPMemUsage.setStatus('deprecated')
fgApSMTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPConnections.setStatus('current')
fgApSMTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPMaxConnections.setStatus('current')
fgApSMTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3), )
if mibBuilder.loadTexts: fgApSMTPStatsTable.setStatus('current')
fgApSMTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApSMTPStatsEntry"))
fgApSMTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApSMTPStatsEntry.setStatus('current')
fgApSMTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPReqProcessed.setStatus('current')
fgApSMTPSpamDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPSpamDetected.setStatus('current')
fgAppProxyPOP3 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102))
fgApPOP3UpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3UpTime.setStatus('deprecated')
fgApPOP3MemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3MemUsage.setStatus('deprecated')
fgApPOP3Connections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3Connections.setStatus('current')
fgApPOP3MaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3MaxConnections.setStatus('current')
fgApPOP3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3), )
if mibBuilder.loadTexts: fgApPOP3StatsTable.setStatus('current')
fgApPOP3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApPOP3StatsEntry"))
fgApPOP3StatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApPOP3StatsEntry.setStatus('current')
fgApPOP3ReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3ReqProcessed.setStatus('current')
fgApPOP3SpamDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3SpamDetected.setStatus('current')
fgAppProxyIMAP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103))
fgApIMAPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPUpTime.setStatus('deprecated')
fgApIMAPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPMemUsage.setStatus('deprecated')
fgApIMAPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPConnections.setStatus('current')
fgApIMAPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPMaxConnections.setStatus('current')
fgApIMAPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3), )
if mibBuilder.loadTexts: fgApIMAPStatsTable.setStatus('current')
fgApIMAPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApIMAPStatsEntry"))
fgApIMAPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApIMAPStatsEntry.setStatus('current')
fgApIMAPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPReqProcessed.setStatus('current')
fgApIMAPSpamDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPSpamDetected.setStatus('current')
fgAppProxyNNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104))
fgApNNTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPUpTime.setStatus('deprecated')
fgApNNTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPMemUsage.setStatus('deprecated')
fgApNNTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPConnections.setStatus('current')
fgApNNTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPMaxConnections.setStatus('current')
fgApNNTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 3), )
if mibBuilder.loadTexts: fgApNNTPStatsTable.setStatus('current')
fgApNNTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApNNTPStatsEntry"))
fgApNNTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApNNTPStatsEntry.setStatus('current')
fgApNNTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPReqProcessed.setStatus('current')
fgAppProxyIM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105))
fgApIMUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMUpTime.setStatus('current')
fgApIMMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMMemUsage.setStatus('current')
fgApIMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 3), )
if mibBuilder.loadTexts: fgApIMStatsTable.setStatus('current')
fgApIMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApIMStatsEntry"))
fgApIMStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApIMStatsEntry.setStatus('current')
fgApIMReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMReqProcessed.setStatus('current')
fgAppProxySIP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106))
fgApSIPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPUpTime.setStatus('current')
fgApSIPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPMemUsage.setStatus('current')
fgApSIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3), )
if mibBuilder.loadTexts: fgApSIPStatsTable.setStatus('current')
fgApSIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApSIPStatsEntry"))
fgApSIPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApSIPStatsEntry.setStatus('current')
fgApSIPClientReg = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPClientReg.setStatus('current')
fgApSIPCallHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPCallHandling.setStatus('current')
fgApSIPServices = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPServices.setStatus('current')
fgApSIPOtherReq = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPOtherReq.setStatus('current')
fgAppScanUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107))
fgAppSuNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppSuNumber.setStatus('current')
fgAppSuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2), )
if mibBuilder.loadTexts: fgAppSuStatsTable.setStatus('current')
fgAppSuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgAppSuIndex"))
if mibBuilder.loadTexts: fgAppSuStatsEntry.setStatus('current')
fgAppSuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgAppSuIndex.setStatus('current')
fgAppSuFileScanned = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppSuFileScanned.setStatus('current')
fgAppVoIP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108))
fgAppVoIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1), )
if mibBuilder.loadTexts: fgAppVoIPStatsTable.setStatus('current')
fgAppVoIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAppVoIPStatsEntry"))
fgAppVoIPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAppVoIPStatsEntry.setStatus('current')
fgAppVoIPConn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppVoIPConn.setStatus('current')
fgAppVoIPCallBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppVoIPCallBlocked.setStatus('current')
fgAppP2P = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109))
fgAppP2PStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 1), )
if mibBuilder.loadTexts: fgAppP2PStatsTable.setStatus('current')
fgAppP2PStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAppP2PStatsEntry"))
fgAppP2PStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAppP2PStatsEntry.setStatus('current')
fgAppP2PConnBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppP2PConnBlocked.setStatus('current')
fgAppP2PProtoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2), )
if mibBuilder.loadTexts: fgAppP2PProtoTable.setStatus('current')
fgAppP2PProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgAppP2PProtEntProto"))
if mibBuilder.loadTexts: fgAppP2PProtoEntry.setStatus('current')
fgAppP2PProtEntProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1, 1), FgP2PProto())
if mibBuilder.loadTexts: fgAppP2PProtEntProto.setStatus('current')
fgAppP2PProtEntBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppP2PProtEntBytes.setStatus('current')
fgAppP2PProtoEntLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppP2PProtoEntLastReset.setStatus('current')
fgAppIM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110))
fgAppIMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1), )
if mibBuilder.loadTexts: fgAppIMStatsTable.setStatus('current')
fgAppIMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAppIMStatsEntry"))
fgAppIMStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAppIMStatsEntry.setStatus('current')
fgAppIMMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMMessages.setStatus('current')
fgAppIMFileTransfered = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMFileTransfered.setStatus('current')
fgAppIMFileTxBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMFileTxBlocked.setStatus('current')
fgAppIMConnBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMConnBlocked.setStatus('current')
fgAppProxyFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111))
fgApFTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPUpTime.setStatus('deprecated')
fgApFTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPMemUsage.setStatus('deprecated')
fgApFTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPConnections.setStatus('current')
fgApFTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPMaxConnections.setStatus('current')
fgApFTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 3), )
if mibBuilder.loadTexts: fgApFTPStatsTable.setStatus('current')
fgApFTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApFTPStatsEntry"))
fgApFTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApFTPStatsEntry.setStatus('current')
fgApFTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPReqProcessed.setStatus('current')
fgAppExplicitProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112))
fgExplicitProxyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1))
fgExplicitProxyUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyUpTime.setStatus('current')
fgExplicitProxyMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyMemUsage.setStatus('current')
fgExplicitProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyRequests.setStatus('current')
fgExplicitProxyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2), )
if mibBuilder.loadTexts: fgExplicitProxyStatsTable.setStatus('current')
fgExplicitProxyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgExplicitProxyStatsEntry.setStatus('current')
fgExplicitProxyUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyUsers.setStatus('current')
fgExplicitProxySessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxySessions.setStatus('current')
fgExplicitProxyScanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3), )
if mibBuilder.loadTexts: fgExplicitProxyScanStatsTable.setStatus('current')
fgExplicitProxyScanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgExplicitProxyScanStatsDisp"))
if mibBuilder.loadTexts: fgExplicitProxyScanStatsEntry.setStatus('current')
fgExplicitProxyScanStatsDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 1), FgScanAvDisposition())
if mibBuilder.loadTexts: fgExplicitProxyScanStatsDisp.setStatus('current')
fgExplicitProxyVirus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyVirus.setStatus('current')
fgExplicitProxyBannedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBannedWords.setStatus('current')
fgExplicitProxyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyPolicy.setStatus('current')
fgExplicitProxyOversized = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyOversized.setStatus('current')
fgExplicitProxyArchNest = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchNest.setStatus('current')
fgExplicitProxyArchSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchSize.setStatus('current')
fgExplicitProxyArchEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchEncrypted.setStatus('current')
fgExplicitProxyArchMultiPart = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchMultiPart.setStatus('current')
fgExplicitProxyArchUnsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchUnsupported.setStatus('current')
fgExplicitProxyArchBomb = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchBomb.setStatus('current')
fgExplicitProxyArchCorrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchCorrupt.setStatus('current')
fgExplicitProxyScriptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4), )
if mibBuilder.loadTexts: fgExplicitProxyScriptStatsTable.setStatus('current')
fgExplicitProxyScriptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgExplicitProxyScriptStatsEntry.setStatus('current')
fgExplicitProxyFilteredApplets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredApplets.setStatus('current')
fgExplicitProxyFilteredActiveX = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredActiveX.setStatus('current')
fgExplicitProxyFilteredJScript = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredJScript.setStatus('current')
fgExplicitProxyFilteredJS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredJS.setStatus('current')
fgExplicitProxyFilteredVBS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredVBS.setStatus('current')
fgExplicitProxyFilteredOthScript = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredOthScript.setStatus('current')
fgExplicitProxyFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5), )
if mibBuilder.loadTexts: fgExplicitProxyFilterStatsTable.setStatus('current')
fgExplicitProxyFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgExplicitProxyFilterStatsEntry.setStatus('current')
fgExplicitProxyBlockedDLP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBlockedDLP.setStatus('current')
fgExplicitProxyBlockedConType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBlockedConType.setStatus('current')
fgExplicitProxyExaminedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyExaminedURLs.setStatus('current')
fgExplicitProxyAllowedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyAllowedURLs.setStatus('current')
fgExplicitProxyBlockedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBlockedURLs.setStatus('current')
fgExplicitProxyLoggedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyLoggedURLs.setStatus('current')
fgExplicitProxyOverriddenURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyOverriddenURLs.setStatus('current')
fgAppWebCache = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113))
fgWebCacheInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1))
fgWebCacheRAMLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMLimit.setStatus('current')
fgWebCacheRAMUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMUsage.setStatus('current')
fgWebCacheRAMHits = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMHits.setStatus('current')
fgWebCacheRAMMisses = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMMisses.setStatus('current')
fgWebCacheRequests = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRequests.setStatus('current')
fgWebCacheBypass = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheBypass.setStatus('current')
fgWebCacheUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheUpTime.setStatus('current')
fgWebCacheDiskStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2), )
if mibBuilder.loadTexts: fgWebCacheDiskStatsTable.setStatus('current')
fgWebCacheDiskStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgWebCacheDisk"))
if mibBuilder.loadTexts: fgWebCacheDiskStatsEntry.setStatus('current')
fgWebCacheDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fgWebCacheDisk.setStatus('current')
fgWebCacheDiskLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskLimit.setStatus('current')
fgWebCacheDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskUsage.setStatus('current')
fgWebCacheDiskHits = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskHits.setStatus('current')
fgWebCacheDiskMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskMisses.setStatus('current')
fgAppWanOpt = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114))
fgWanOptInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1))
fgMemCacheLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheLimit.setStatus('current')
fgMemCacheUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheUsage.setStatus('current')
fgMemCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheHits.setStatus('current')
fgMemCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheMisses.setStatus('current')
fgByteCacheRAMLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgByteCacheRAMLimit.setStatus('current')
fgByteCacheRAMUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgByteCacheRAMUsage.setStatus('current')
fgWanOptUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptUpTime.setStatus('current')
fgWanOptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2), )
if mibBuilder.loadTexts: fgWanOptStatsTable.setStatus('current')
fgWanOptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgWanOptStatsEntry.setStatus('current')
fgWanOptTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptTunnels.setStatus('current')
fgWanOptLANBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLANBytesIn.setStatus('current')
fgWanOptLANBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLANBytesOut.setStatus('current')
fgWanOptWANBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWANBytesIn.setStatus('current')
fgWanOptWANBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWANBytesOut.setStatus('current')
fgWanOptHistoryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3), )
if mibBuilder.loadTexts: fgWanOptHistoryStatsTable.setStatus('current')
fgWanOptHistoryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWanOptHistPeriod"), (0, "FORTINET-FORTIGATE-MIB", "fgWanOptProtocol"))
if mibBuilder.loadTexts: fgWanOptHistoryStatsEntry.setStatus('current')
fgWanOptHistPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 1), FgWanOptHistPeriods())
if mibBuilder.loadTexts: fgWanOptHistPeriod.setStatus('current')
fgWanOptProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 2), FgWanOptProtocols())
if mibBuilder.loadTexts: fgWanOptProtocol.setStatus('current')
fgWanOptReductionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptReductionRate.setStatus('current')
fgWanOptLanTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLanTraffic.setStatus('current')
fgWanOptWanTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWanTraffic.setStatus('current')
fgWanOptTrafficStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4), )
if mibBuilder.loadTexts: fgWanOptTrafficStatsTable.setStatus('current')
fgWanOptTrafficStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWanOptProtocol"))
if mibBuilder.loadTexts: fgWanOptTrafficStatsEntry.setStatus('current')
fgWanOptLanInTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLanInTraffic.setStatus('current')
fgWanOptLanOutTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLanOutTraffic.setStatus('current')
fgWanOptWanInTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWanInTraffic.setStatus('current')
fgWanOptWanOutTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWanOutTraffic.setStatus('current')
fgWanOptDiskStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5), )
if mibBuilder.loadTexts: fgWanOptDiskStatsTable.setStatus('current')
fgWanOptDiskStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgWanOptDisk"))
if mibBuilder.loadTexts: fgWanOptDiskStatsEntry.setStatus('current')
fgWanOptDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fgWanOptDisk.setStatus('current')
fgWanOptDiskLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskLimit.setStatus('current')
fgWanOptDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskUsage.setStatus('current')
fgWanOptDiskHits = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskHits.setStatus('current')
fgWanOptDiskMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskMisses.setStatus('current')
fgInetProto = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 11))
fgInetProtoInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 11, 1))
fgInetProtoTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2))
fgIpSessTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1), )
if mibBuilder.loadTexts: fgIpSessTable.setStatus('current')
fgIpSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgIpSessIndex"))
if mibBuilder.loadTexts: fgIpSessEntry.setStatus('current')
fgIpSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIpSessIndex.setStatus('current')
fgIpSessProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 2), FgSessProto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessProto.setStatus('current')
fgIpSessFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessFromAddr.setStatus('current')
fgIpSessFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessFromPort.setStatus('current')
fgIpSessToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessToAddr.setStatus('current')
fgIpSessToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessToPort.setStatus('current')
fgIpSessExp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessExp.setStatus('current')
fgIpSessVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 8), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessVdom.setStatus('current')
fgIpSessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 2), )
if mibBuilder.loadTexts: fgIpSessStatsTable.setStatus('current')
fgIpSessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 2, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIpSessStatsEntry"))
fgIpSessStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgIpSessStatsEntry.setStatus('current')
fgIpSessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessNumber.setStatus('current')
fgIp6SessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 3), )
if mibBuilder.loadTexts: fgIp6SessStatsTable.setStatus('current')
fgIp6SessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIp6SessStatsEntry"))
fgIp6SessStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgIp6SessStatsEntry.setStatus('current')
fgIp6SessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIp6SessNumber.setStatus('current')
fgVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12))
fgVpnInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12, 1))
fgVpnTunnelUpCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunnelUpCount.setStatus('current')
fgVpnTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2))
fgVpnDialupTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1), )
if mibBuilder.loadTexts: fgVpnDialupTable.setStatus('current')
fgVpnDialupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpnDialupIndex"))
if mibBuilder.loadTexts: fgVpnDialupEntry.setStatus('current')
fgVpnDialupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpnDialupIndex.setStatus('current')
fgVpnDialupGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupGateway.setStatus('current')
fgVpnDialupLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupLifetime.setStatus('current')
fgVpnDialupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupTimeout.setStatus('current')
fgVpnDialupSrcBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupSrcBegin.setStatus('current')
fgVpnDialupSrcEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupSrcEnd.setStatus('current')
fgVpnDialupDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupDstAddr.setStatus('current')
fgVpnDialupVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 8), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupVdom.setStatus('current')
fgVpnDialupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupInOctets.setStatus('current')
fgVpnDialupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupOutOctets.setStatus('current')
fgVpnTunTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2), )
if mibBuilder.loadTexts: fgVpnTunTable.setStatus('current')
fgVpnTunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpnTunEntIndex"))
if mibBuilder.loadTexts: fgVpnTunEntry.setStatus('current')
fgVpnTunEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpnTunEntIndex.setStatus('current')
fgVpnTunEntPhase1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntPhase1Name.setStatus('current')
fgVpnTunEntPhase2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntPhase2Name.setStatus('current')
fgVpnTunEntRemGwyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntRemGwyIp.setStatus('current')
fgVpnTunEntRemGwyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntRemGwyPort.setStatus('current')
fgVpnTunEntLocGwyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLocGwyIp.setStatus('current')
fgVpnTunEntLocGwyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLocGwyPort.setStatus('current')
fgVpnTunEntSelectorSrcBeginIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcBeginIp.setStatus('current')
fgVpnTunEntSelectorSrcEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcEndIp.setStatus('current')
fgVpnTunEntSelectorSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 10), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcPort.setStatus('current')
fgVpnTunEntSelectorDstBeginIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstBeginIp.setStatus('current')
fgVpnTunEntSelectorDstEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstEndIp.setStatus('current')
fgVpnTunEntSelectorDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 13), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstPort.setStatus('current')
fgVpnTunEntSelectorProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorProto.setStatus('current')
fgVpnTunEntLifeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLifeSecs.setStatus('current')
fgVpnTunEntLifeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLifeBytes.setStatus('current')
fgVpnTunEntTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntTimeout.setStatus('current')
fgVpnTunEntInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntInOctets.setStatus('current')
fgVpnTunEntOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntOutOctets.setStatus('current')
fgVpnTunEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntStatus.setStatus('current')
fgVpnTunEntVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 21), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntVdom.setStatus('current')
fgVpnSslStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3), )
if mibBuilder.loadTexts: fgVpnSslStatsTable.setStatus('current')
fgVpnSslStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsEntry"))
fgVpnSslStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgVpnSslStatsEntry.setStatus('current')
fgVpnSslState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 1), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslState.setStatus('current')
fgVpnSslStatsLoginUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsLoginUsers.setStatus('current')
fgVpnSslStatsMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsMaxUsers.setStatus('current')
fgVpnSslStatsActiveWebSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsActiveWebSessions.setStatus('current')
fgVpnSslStatsMaxWebSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsMaxWebSessions.setStatus('current')
fgVpnSslStatsActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsActiveTunnels.setStatus('current')
fgVpnSslStatsMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsMaxTunnels.setStatus('current')
fgVpnSslTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4), )
if mibBuilder.loadTexts: fgVpnSslTunnelTable.setStatus('current')
fgVpnSslTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelIndex"))
if mibBuilder.loadTexts: fgVpnSslTunnelEntry.setStatus('current')
fgVpnSslTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpnSslTunnelIndex.setStatus('current')
fgVpnSslTunnelVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 2), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelVdom.setStatus('current')
fgVpnSslTunnelUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelUserName.setStatus('current')
fgVpnSslTunnelSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelSrcIp.setStatus('current')
fgVpnSslTunnelIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelIp.setStatus('current')
fgVpnSslTunnelUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelUpTime.setStatus('current')
fgVpnSslTunnelBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelBytesIn.setStatus('current')
fgVpnSslTunnelBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelBytesOut.setStatus('current')
fgVpnTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3))
fgVpnTrapLocalGateway = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgVpnTrapLocalGateway.setStatus('current')
fgVpnTrapRemoteGateway = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgVpnTrapRemoteGateway.setStatus('current')
fgVpnTrapPhase1Name = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgVpnTrapPhase1Name.setStatus('current')
fgHighAvailability = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13))
fgHaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1))
fgHaSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 1), FgHaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaSystemMode.setStatus('current')
fgHaGroupId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 2), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaGroupId.setStatus('current')
fgHaPriority = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaPriority.setStatus('current')
fgHaOverride = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaOverride.setStatus('current')
fgHaAutoSync = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 5), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaAutoSync.setStatus('current')
fgHaSchedule = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 6), FgHaLBSchedule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaSchedule.setStatus('current')
fgHaGroupName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaGroupName.setStatus('current')
fgHaTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2))
fgHaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1), )
if mibBuilder.loadTexts: fgHaStatsTable.setStatus('current')
fgHaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgHaStatsIndex"))
if mibBuilder.loadTexts: fgHaStatsEntry.setStatus('current')
fgHaStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgHaStatsIndex.setStatus('current')
fgHaStatsSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSerial.setStatus('current')
fgHaStatsCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsCpuUsage.setStatus('current')
fgHaStatsMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsMemUsage.setStatus('current')
fgHaStatsNetUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsNetUsage.setStatus('current')
fgHaStatsSesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSesCount.setStatus('current')
fgHaStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsPktCount.setStatus('current')
fgHaStatsByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsByteCount.setStatus('current')
fgHaStatsIdsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsIdsCount.setStatus('current')
fgHaStatsAvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsAvCount.setStatus('current')
fgHaStatsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsHostname.setStatus('current')
fgHaStatsSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 12), FgHaStatsSyncStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSyncStatus.setStatus('current')
fgHaStatsSyncDatimeSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSyncDatimeSucc.setStatus('current')
fgHaStatsSyncDatimeUnsucc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSyncDatimeUnsucc.setStatus('current')
fgHaStatsGlobalChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsGlobalChecksum.setStatus('current')
fgHaStatsMasterSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsMasterSerial.setStatus('current')
fgHaTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13, 3))
fgHaTrapMemberSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 3, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgHaTrapMemberSerial.setStatus('current')
fgWc = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14))
fgWcTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1))
fgWcApVdom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1, 1), FgVdIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgWcApVdom.setStatus('current')
fgWcApSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgWcApSerial.setStatus('current')
fgWcApName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgWcApName.setStatus('current')
fgWcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2))
fgWcInfoName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoName.setStatus('current')
fgWcInfoLocation = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoLocation.setStatus('current')
fgWcInfoWtpCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoWtpCapacity.setStatus('current')
fgWcInfoWtpManaged = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoWtpManaged.setStatus('current')
fgWcInfoWtpSessions = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoWtpSessions.setStatus('current')
fgWcInfoStationCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoStationCapacity.setStatus('current')
fgWcInfoStationCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoStationCount.setStatus('current')
fgWcWlanTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3), )
if mibBuilder.loadTexts: fgWcWlanTable.setStatus('current')
fgWcWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgWcWlanEntry.setStatus('current')
fgWcWlanSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanSsid.setStatus('current')
fgWcWlanBroadcastSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 2), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanBroadcastSsid.setStatus('current')
fgWcWlanSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 3), FgWcWlanSecurityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanSecurity.setStatus('current')
fgWcWlanEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 4), FgWcWlanEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanEncryption.setStatus('current')
fgWcWlanAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 5), FgWcWlanAuthenticationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanAuthentication.setStatus('current')
fgWcWlanRadiusServer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanRadiusServer.setStatus('current')
fgWcWlanUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanUserGroup.setStatus('current')
fgWcWlanLocalBridging = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 8), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanLocalBridging.setStatus('current')
fgWcWlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanVlanId.setStatus('current')
fgWcWlanMeshBackhaul = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 10), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanMeshBackhaul.setStatus('current')
fgWcWlanStationCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanStationCapacity.setStatus('current')
fgWcWlanStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanStationCount.setStatus('current')
fgWcWtpTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4))
fgWcWtpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1), )
if mibBuilder.loadTexts: fgWcWtpProfileTable.setStatus('current')
fgWcWtpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpProfileName"))
if mibBuilder.loadTexts: fgWcWtpProfileEntry.setStatus('current')
fgWcWtpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpProfileName.setStatus('current')
fgWcWtpProfilePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfilePlatform.setStatus('current')
fgWcWtpProfileDataChannelDtlsPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("clear", 1), ("dtls", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileDataChannelDtlsPolicy.setStatus('current')
fgWcWtpProfileCountryString = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 4), FgWcCountryString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileCountryString.setStatus('current')
fgWcWtpProfileRadioTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2), )
if mibBuilder.loadTexts: fgWcWtpProfileRadioTable.setStatus('current')
fgWcWtpProfileRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioProfileName"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioRadioId"))
if mibBuilder.loadTexts: fgWcWtpProfileRadioEntry.setStatus('current')
fgWcWtpProfileRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpProfileRadioProfileName.setStatus('current')
fgWcWtpProfileRadioRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 2), FgWcWtpRadioId())
if mibBuilder.loadTexts: fgWcWtpProfileRadioRadioId.setStatus('current')
fgWcWtpProfileRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 3), FgWcWtpRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioMode.setStatus('current')
fgWcWtpProfileRadioApScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioApScan.setStatus('current')
fgWcWtpProfileRadioWidsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioWidsProfile.setStatus('current')
fgWcWtpProfileRadioDarrp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 6), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioDarrp.setStatus('current')
fgWcWtpProfileRadioFrequencyHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 7), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioFrequencyHandoff.setStatus('current')
fgWcWtpProfileRadioApHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 8), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioApHandoff.setStatus('current')
fgWcWtpProfileRadioBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioBeaconInterval.setStatus('current')
fgWcWtpProfileRadioDtimPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioDtimPeriod.setStatus('current')
fgWcWtpProfileRadioBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 11), FgWcWtpRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioBand.setStatus('current')
fgWcWtpProfileRadioChannelBonding = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 12), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannelBonding.setStatus('current')
fgWcWtpProfileRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannel.setStatus('current')
fgWcWtpProfileRadioAutoTxPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 14), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerControl.setStatus('current')
fgWcWtpProfileRadioAutoTxPowerLow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerLow.setStatus('current')
fgWcWtpProfileRadioAutoTxPowerHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerHigh.setStatus('current')
fgWcWtpProfileRadioTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioTxPowerLevel.setStatus('current')
fgWcWtpProfileRadioVaps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioVaps.setStatus('current')
fgWcWtpProfileRadioStationCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioStationCapacity.setStatus('current')
fgWcWtpProfileRadioChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 20), FgWcWtpChannelWidthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannelWidth.setStatus('current')
fgWcWtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3), )
if mibBuilder.loadTexts: fgWcWtpConfigTable.setStatus('current')
fgWcWtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpId"))
if mibBuilder.loadTexts: fgWcWtpConfigEntry.setStatus('current')
fgWcWtpConfigWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpConfigWtpId.setStatus('current')
fgWcWtpConfigWtpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("discovered", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpAdmin.setStatus('current')
fgWcWtpConfigWtpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpName.setStatus('current')
fgWcWtpConfigWtpLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpLocation.setStatus('current')
fgWcWtpConfigWtpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpProfile.setStatus('current')
fgWcWtpConfigRadioEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 6), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioEnable.setStatus('current')
fgWcWtpConfigRadioAutoTxPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 7), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerControl.setStatus('current')
fgWcWtpConfigRadioAutoTxPowerLow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerLow.setStatus('current')
fgWcWtpConfigRadioAutoTxPowerHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerHigh.setStatus('current')
fgWcWtpConfigRadioTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioTxPowerLevel.setStatus('current')
fgWcWtpConfigRadioBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 11), FgWcWtpRadioBandType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioBand.setStatus('current')
fgWcWtpConfigRadioApScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 12), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioApScan.setStatus('current')
fgWcWtpConfigVapAll = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 13), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigVapAll.setStatus('current')
fgWcWtpConfigVaps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigVaps.setStatus('current')
fgWcWtpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4), )
if mibBuilder.loadTexts: fgWcWtpSessionTable.setStatus('current')
fgWcWtpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpId"))
if mibBuilder.loadTexts: fgWcWtpSessionEntry.setStatus('current')
fgWcWtpSessionWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpSessionWtpId.setStatus('current')
fgWcWtpSessionWtpIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpIpAddressType.setStatus('current')
fgWcWtpSessionWtpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpIpAddress.setStatus('current')
fgWcWtpSessionWtpLocalIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpLocalIpAddressType.setStatus('current')
fgWcWtpSessionWtpLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpLocalIpAddress.setStatus('current')
fgWcWtpSessionWtpBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 6), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpBaseMacAddress.setStatus('current')
fgWcWtpSessionConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 0), ("offLine", 1), ("onLine", 2), ("downloadingImage", 3), ("connectedImage", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionConnectionState.setStatus('current')
fgWcWtpSessionWtpUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpUpTime.setStatus('current')
fgWcWtpSessionWtpDaemonUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpDaemonUpTime.setStatus('current')
fgWcWtpSessionWtpSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpSessionUpTime.setStatus('current')
fgWcWtpSessionWtpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpProfileName.setStatus('current')
fgWcWtpSessionWtpModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpModelNumber.setStatus('current')
fgWcWtpSessionWtpHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpHwVersion.setStatus('current')
fgWcWtpSessionWtpSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpSwVersion.setStatus('current')
fgWcWtpSessionWtpBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpBootVersion.setStatus('current')
fgWcWtpSessionWtpRegionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpRegionCode.setStatus('current')
fgWcWtpSessionWtpStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpStationCount.setStatus('current')
fgWcWtpSessionWtpByteRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpByteRxCount.setStatus('current')
fgWcWtpSessionWtpByteTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpByteTxCount.setStatus('current')
fgWcWtpSessionWtpCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 20), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpCpuUsage.setStatus('current')
fgWcWtpSessionWtpMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 21), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpMemoryUsage.setStatus('current')
fgWcWtpSessionWtpMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpMemoryCapacity.setStatus('current')
fgWcWtpSessionRadioTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5), )
if mibBuilder.loadTexts: fgWcWtpSessionRadioTable.setStatus('current')
fgWcWtpSessionRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioWtpId"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioRadioId"))
if mibBuilder.loadTexts: fgWcWtpSessionRadioEntry.setStatus('current')
fgWcWtpSessionRadioWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpSessionRadioWtpId.setStatus('current')
fgWcWtpSessionRadioRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 2), FgWcWtpRadioId())
if mibBuilder.loadTexts: fgWcWtpSessionRadioRadioId.setStatus('current')
fgWcWtpSessionRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 3), FgWcWtpRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioMode.setStatus('current')
fgWcWtpSessionRadioBaseBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 4), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioBaseBssid.setStatus('current')
fgWcWtpSessionRadioCountryString = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 5), FgWcCountryString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioCountryString.setStatus('current')
fgWcWtpSessionRadioCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioCountryCode.setStatus('current')
fgWcWtpSessionRadioOperatingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 7), FgWcWtpRadioChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioOperatingChannel.setStatus('current')
fgWcWtpSessionRadioOperatingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioOperatingPower.setStatus('current')
fgWcWtpSessionRadioStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioStationCount.setStatus('current')
fgWcWtpSessionVapTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6), )
if mibBuilder.loadTexts: fgWcWtpSessionVapTable.setStatus('current')
fgWcWtpSessionVapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapWtpId"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapRadioId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgWcWtpSessionVapEntry.setStatus('current')
fgWcWtpSessionVapWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpSessionVapWtpId.setStatus('current')
fgWcWtpSessionVapRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 2), FgWcWtpRadioId())
if mibBuilder.loadTexts: fgWcWtpSessionVapRadioId.setStatus('current')
fgWcWtpSessionVapSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapSsid.setStatus('current')
fgWcWtpSessionVapStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapStationCount.setStatus('current')
fgWcWtpSessionVapByteRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapByteRxCount.setStatus('current')
fgWcWtpSessionVapByteTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapByteTxCount.setStatus('current')
fgWcStaTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5), )
if mibBuilder.loadTexts: fgWcStaTable.setStatus('current')
fgWcStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "IF-MIB", "ifIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcStaMacAddress"))
if mibBuilder.loadTexts: fgWcStaEntry.setStatus('current')
fgWcStaMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 1), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), )))
if mibBuilder.loadTexts: fgWcStaMacAddress.setStatus('current')
fgWcStaWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaWlan.setStatus('current')
fgWcStaWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaWtpId.setStatus('current')
fgWcStaRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 4), FgWcWtpRadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaRadioId.setStatus('current')
fgWcStaVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaVlanId.setStatus('current')
fgWcStaIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaIpAddressType.setStatus('current')
fgWcStaIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaIpAddress.setStatus('current')
fgWcStaVci = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaVci.setStatus('current')
fgWcStaHost = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaHost.setStatus('current')
fgWcStaUser = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaUser.setStatus('current')
fgWcStaGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaGroup.setStatus('current')
fgWcStaSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaSignal.setStatus('current')
fgWcStaNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaNoise.setStatus('current')
fgWcStaIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaIdle.setStatus('current')
fgWcStaBandwidthTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaBandwidthTx.setStatus('current')
fgWcStaBandwidthRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaBandwidthRx.setStatus('current')
fgWcStaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 17), FgWcWtpRadioChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaChannel.setStatus('current')
fgWcStaRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 18), FgWcWtpRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaRadioType.setStatus('current')
fgWcStaSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 19), FgWcWlanSecurityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaSecurity.setStatus('current')
fgWcStaEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 20), FgWcWlanEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaEncrypt.setStatus('current')
fgWcStaOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaOnline.setStatus('current')
fgFc = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 15))
fgFcTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1))
fgFcSwVdom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1, 1), FgVdIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFcSwVdom.setStatus('current')
fgFcSwSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFcSwSerial.setStatus('current')
fgFcSwName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFcSwName.setStatus('current')
fgServerLoadBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 16))
fgServerLoadBalanceTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 16, 1))
fgServerLoadBalanceRealServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 16, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgServerLoadBalanceRealServerAddress.setStatus('current')
fgServerLoadBalanceVirtualServerName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgServerLoadBalanceVirtualServerName.setStatus('current')
fgUsbModemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 17))
fgUsbModemInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1))
fgUsbModemSignalStrength = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemSignalStrength.setStatus('current')
fgUsbModemStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemStatus.setStatus('current')
fgUsbModemSimState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemSimState.setStatus('current')
fgUsbModemVendor = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemVendor.setStatus('current')
fgUsbModemProduct = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemProduct.setStatus('current')
fgUsbModemNetwork = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("network3G", 0), ("networkLTE", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemNetwork.setStatus('current')
fgUsbModemId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemId.setStatus('current')
fgUsbModemSimId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemSimId.setStatus('current')
fgDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 18))
fgDeviceTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1))
fgDeviceMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDeviceMacAddress.setStatus('current')
fgDeviceCreated = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1, 2), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDeviceCreated.setStatus('current')
fgDeviceLastSeen = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1, 3), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDeviceLastSeen.setStatus('current')
fgMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 100))
fgTrapVpnTunUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 301)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapLocalGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapRemoteGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapPhase1Name"))
if mibBuilder.loadTexts: fgTrapVpnTunUp.setStatus('current')
fgTrapVpnTunDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 302)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapLocalGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapRemoteGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapPhase1Name"))
if mibBuilder.loadTexts: fgTrapVpnTunDown.setStatus('current')
fgTrapHaSwitch = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 401)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapHaSwitch.setStatus('current')
fgTrapHaStateChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 402)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaStateChange.setStatus('deprecated')
fgTrapHaHBFail = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 403)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaHBFail.setStatus('current')
fgTrapHaMemberDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 404)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaMemberDown.setStatus('current')
fgTrapHaMemberUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 405)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaMemberUp.setStatus('current')
fgTrapIpsSignature = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 503)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigId"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigMsg"))
if mibBuilder.loadTexts: fgTrapIpsSignature.setStatus('current')
fgTrapIpsAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 504)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigId"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigMsg"))
if mibBuilder.loadTexts: fgTrapIpsAnomaly.setStatus('current')
fgTrapIpsPkgUpdate = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 505)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapIpsPkgUpdate.setStatus('current')
fgTrapIpsFailOpen = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 506)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapIpsFailOpen.setStatus('current')
fgTrapAvVirus = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 601)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgAvTrapVirName"))
if mibBuilder.loadTexts: fgTrapAvVirus.setStatus('current')
fgTrapAvOversize = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 602)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvOversize.setStatus('current')
fgTrapAvPattern = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 603)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvPattern.setStatus('current')
fgTrapAvFragmented = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 604)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvFragmented.setStatus('current')
fgTrapAvEnterConserve = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 605)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvEnterConserve.setStatus('current')
fgTrapAvBypass = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 606)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvBypass.setStatus('current')
fgTrapAvOversizePass = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 607)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvOversizePass.setStatus('current')
fgTrapAvOversizeBlock = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 608)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvOversizeBlock.setStatus('current')
fgTrapFazDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 701)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapFazDisconnect.setStatus('current')
fgTrapWcApUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 801)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgWcApVdom"), ("FORTINET-FORTIGATE-MIB", "fgWcApSerial"), ("FORTINET-FORTIGATE-MIB", "fgWcApName"))
if mibBuilder.loadTexts: fgTrapWcApUp.setStatus('current')
fgTrapWcApDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 802)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgWcApVdom"), ("FORTINET-FORTIGATE-MIB", "fgWcApSerial"), ("FORTINET-FORTIGATE-MIB", "fgWcApName"))
if mibBuilder.loadTexts: fgTrapWcApDown.setStatus('current')
fgTrapFcSwUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 901)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgFcSwVdom"), ("FORTINET-FORTIGATE-MIB", "fgFcSwSerial"), ("FORTINET-FORTIGATE-MIB", "fgFcSwName"))
if mibBuilder.loadTexts: fgTrapFcSwUp.setStatus('current')
fgTrapFcSwDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 902)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgFcSwVdom"), ("FORTINET-FORTIGATE-MIB", "fgFcSwSerial"), ("FORTINET-FORTIGATE-MIB", "fgFcSwName"))
if mibBuilder.loadTexts: fgTrapFcSwDown.setStatus('current')
fgFmTrapDeployComplete = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1000)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgFmTrapDeployComplete.setStatus('current')
fgFmTrapDeployInProgress = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1002)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgFmTrapDeployInProgress.setStatus('current')
fgFmTrapConfChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1003)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgFmTrapConfChange.setStatus('current')
fgFmTrapIfChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1004)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("IF-MIB", "ifName"), ("FORTINET-FORTIGATE-MIB", "fgManIfIp"), ("FORTINET-FORTIGATE-MIB", "fgManIfMask"), ("FORTINET-FORTIGATE-MIB", "fgManIfIp6"))
if mibBuilder.loadTexts: fgFmTrapIfChange.setStatus('current')
fgTrapServerLoadBalanceRealServerDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 1101)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceRealServerAddress"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceVirtualServerName"))
if mibBuilder.loadTexts: fgTrapServerLoadBalanceRealServerDown.setStatus('current')
fgTrapDeviceNew = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 1201)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("IF-MIB", "ifIndex"), ("FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), ("FORTINET-FORTIGATE-MIB", "fgDeviceCreated"), ("FORTINET-FORTIGATE-MIB", "fgDeviceLastSeen"), ("FORTINET-FORTIGATE-MIB", "fgDeviceMacAddress"))
if mibBuilder.loadTexts: fgTrapDeviceNew.setStatus('current')
fgFmTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 1)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFmTrapDeployComplete"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapDeployInProgress"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapConfChange"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapIfChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFmTrapGroup = fgFmTrapGroup.setStatus('current')
fgFmTrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 2)).setObjects(("FORTINET-FORTIGATE-MIB", "fgManIfIp"), ("FORTINET-FORTIGATE-MIB", "fgManIfMask"), ("FORTINET-FORTIGATE-MIB", "fgManIfIp6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFmTrapObjectGroup = fgFmTrapObjectGroup.setStatus('current')
fgAdminObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 3)).setObjects(("FORTINET-FORTIGATE-MIB", "fgAdminIdleTimeout"), ("FORTINET-FORTIGATE-MIB", "fgAdminLcdProtection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAdminObjectGroup = fgAdminObjectGroup.setStatus('current')
fgSystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 4)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSysVersion"), ("FORTINET-FORTIGATE-MIB", "fgSysCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysMemCapacity"), ("FORTINET-FORTIGATE-MIB", "fgSysDiskUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysDiskCapacity"), ("FORTINET-FORTIGATE-MIB", "fgSysSesCount"), ("FORTINET-FORTIGATE-MIB", "fgSysLowMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysLowMemCapacity"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate1"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate10"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate30"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate60"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Count"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate1"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate10"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate30"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate60"), ("FORTINET-FORTIGATE-MIB", "fgSysUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSystemObjectGroup = fgSystemObjectGroup.setStatus('current')
fgSoftwareObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 5)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSysVersionAv"), ("FORTINET-FORTIGATE-MIB", "fgSysVersionIps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSoftwareObjectGroup = fgSoftwareObjectGroup.setStatus('current')
fgHwSensorsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 6)).setObjects(("FORTINET-FORTIGATE-MIB", "fgHwSensorCount"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorEntName"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorEntValue"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorEntAlarmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgHwSensorsObjectGroup = fgHwSensorsObjectGroup.setStatus('current')
fgHighAvailabilityObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 7)).setObjects(("FORTINET-FORTIGATE-MIB", "fgHaSystemMode"), ("FORTINET-FORTIGATE-MIB", "fgHaGroupId"), ("FORTINET-FORTIGATE-MIB", "fgHaPriority"), ("FORTINET-FORTIGATE-MIB", "fgHaOverride"), ("FORTINET-FORTIGATE-MIB", "fgHaAutoSync"), ("FORTINET-FORTIGATE-MIB", "fgHaSchedule"), ("FORTINET-FORTIGATE-MIB", "fgHaGroupName"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSerial"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsNetUsage"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSesCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsPktCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsByteCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsIdsCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsAvCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsHostname"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSyncStatus"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSyncDatimeSucc"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSyncDatimeUnsucc"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsGlobalChecksum"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsMasterSerial"), ("FORTINET-FORTIGATE-MIB", "fgHaTrapMemberSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgHighAvailabilityObjectGroup = fgHighAvailabilityObjectGroup.setStatus('current')
fgVpnObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 8)).setObjects(("FORTINET-FORTIGATE-MIB", "fgVpnDialupGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupLifetime"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupTimeout"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupSrcBegin"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupSrcEnd"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupDstAddr"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupVdom"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupInOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupOutOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntPhase1Name"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntPhase2Name"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntRemGwyIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntRemGwyPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLocGwyIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLocGwyPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorSrcBeginIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorSrcEndIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorSrcPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorDstBeginIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorDstEndIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorDstPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorProto"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLifeSecs"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLifeBytes"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntTimeout"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntInOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntOutOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntStatus"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntVdom"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslState"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsLoginUsers"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsMaxUsers"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsActiveWebSessions"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsMaxWebSessions"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsActiveTunnels"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsMaxTunnels"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelVdom"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelUserName"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelUpTime"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelBytesIn"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelBytesOut"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapLocalGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapRemoteGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapPhase1Name"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunnelUpCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgVpnObjectGroup = fgVpnObjectGroup.setStatus('current')
fgFirewallObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 9)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFwPolPktCount"), ("FORTINET-FORTIGATE-MIB", "fgFwPolByteCount"), ("FORTINET-FORTIGATE-MIB", "fgFwUserNumber"), ("FORTINET-FORTIGATE-MIB", "fgFwPolPktCountHc"), ("FORTINET-FORTIGATE-MIB", "fgFwPolByteCountHc"), ("FORTINET-FORTIGATE-MIB", "fgFwUserAuthTimeout"), ("FORTINET-FORTIGATE-MIB", "fgFwUserName"), ("FORTINET-FORTIGATE-MIB", "fgFwUserAuth"), ("FORTINET-FORTIGATE-MIB", "fgFwUserState"), ("FORTINET-FORTIGATE-MIB", "fgFwUserVdom"), ("FORTINET-FORTIGATE-MIB", "fgIpSessProto"), ("FORTINET-FORTIGATE-MIB", "fgIpSessFromAddr"), ("FORTINET-FORTIGATE-MIB", "fgIpSessFromPort"), ("FORTINET-FORTIGATE-MIB", "fgIpSessToAddr"), ("FORTINET-FORTIGATE-MIB", "fgIpSessToPort"), ("FORTINET-FORTIGATE-MIB", "fgIpSessExp"), ("FORTINET-FORTIGATE-MIB", "fgIpSessVdom"), ("FORTINET-FORTIGATE-MIB", "fgIpSessNumber"), ("FORTINET-FORTIGATE-MIB", "fgIp6SessNumber"), ("FORTINET-FORTIGATE-MIB", "fgFwPol6PktCount"), ("FORTINET-FORTIGATE-MIB", "fgFwPol6ByteCount"), ("FORTINET-FORTIGATE-MIB", "fgFwPolLastUsed"), ("FORTINET-FORTIGATE-MIB", "fgFwPol6LastUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFirewallObjectGroup = fgFirewallObjectGroup.setStatus('current')
fgAppServicesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 10)).setObjects(("FORTINET-FORTIGATE-MIB", "fgApHTTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPSpamDetected"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3ReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3SpamDetected"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPSpamDetected"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApIMUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApIMMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApIMReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApSIPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApSIPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApSIPClientReg"), ("FORTINET-FORTIGATE-MIB", "fgApSIPCallHandling"), ("FORTINET-FORTIGATE-MIB", "fgApSIPServices"), ("FORTINET-FORTIGATE-MIB", "fgApSIPOtherReq"), ("FORTINET-FORTIGATE-MIB", "fgAppSuNumber"), ("FORTINET-FORTIGATE-MIB", "fgAppSuFileScanned"), ("FORTINET-FORTIGATE-MIB", "fgAppVoIPConn"), ("FORTINET-FORTIGATE-MIB", "fgAppVoIPCallBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAppP2PConnBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAppP2PProtEntBytes"), ("FORTINET-FORTIGATE-MIB", "fgAppP2PProtoEntLastReset"), ("FORTINET-FORTIGATE-MIB", "fgAppIMMessages"), ("FORTINET-FORTIGATE-MIB", "fgAppIMFileTransfered"), ("FORTINET-FORTIGATE-MIB", "fgAppIMFileTxBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAppIMConnBlocked"), ("FORTINET-FORTIGATE-MIB", "fgApFTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApHTTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApFTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3Connections"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApHTTPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApFTPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3MaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPMaxConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAppServicesObjectGroup = fgAppServicesObjectGroup.setStatus('current')
fgAntivirusObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 11)).setObjects(("FORTINET-FORTIGATE-MIB", "fgAvVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvHTTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvHTTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvSMTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvSMTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvPOP3VirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvPOP3VirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvIMAPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvIMAPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvFTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvFTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvIMVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvIMVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvNNTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvNNTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvOversizedDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvOversizedBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvTrapVirName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAntivirusObjectGroup = fgAntivirusObjectGroup.setStatus('current')
fgIntrusionPrevtObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 12)).setObjects(("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigId"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigMsg"), ("FORTINET-FORTIGATE-MIB", "fgIpsIntrusionsDetected"), ("FORTINET-FORTIGATE-MIB", "fgIpsIntrusionsBlocked"), ("FORTINET-FORTIGATE-MIB", "fgIpsCritSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsHighSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsMedSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsLowSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsInfoSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsSignatureDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsAnomalyDetections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgIntrusionPrevtObjectGroup = fgIntrusionPrevtObjectGroup.setStatus('current')
fgWebFilterObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 13)).setObjects(("FORTINET-FORTIGATE-MIB", "fgWfHTTPBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfHTTPSBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfHTTPURLBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfHTTPSURLBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfActiveXBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfCookieBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfAppletBlocked"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPExamined"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSExamined"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPAllowed"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSAllowed"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPBlocked"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSBlocked"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPLogged"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSLogged"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPOverridden"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSOverridden"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWebFilterObjectGroup = fgWebFilterObjectGroup.setStatus('current')
fgVirtualDomainObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 14)).setObjects(("FORTINET-FORTIGATE-MIB", "fgVdNumber"), ("FORTINET-FORTIGATE-MIB", "fgVdMaxVdoms"), ("FORTINET-FORTIGATE-MIB", "fgVdEnabled"), ("FORTINET-FORTIGATE-MIB", "fgVdEntName"), ("FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), ("FORTINET-FORTIGATE-MIB", "fgVdEntOpMode"), ("FORTINET-FORTIGATE-MIB", "fgVdTpMgmtAddrType"), ("FORTINET-FORTIGATE-MIB", "fgVdTpMgmtAddr"), ("FORTINET-FORTIGATE-MIB", "fgVdEntCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgVdEntMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgVdEntSesCount"), ("FORTINET-FORTIGATE-MIB", "fgVdEntSesRate"), ("FORTINET-FORTIGATE-MIB", "fgVdTpMgmtMask"), ("FORTINET-FORTIGATE-MIB", "fgVdEntHaState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgVirtualDomainObjectGroup = fgVirtualDomainObjectGroup.setStatus('current')
fgAdministrationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 15)).setObjects(("FORTINET-FORTIGATE-MIB", "fgAdminVdom"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAdministrationObjectGroup = fgAdministrationObjectGroup.setStatus('current')
fgIntfObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 16)).setObjects(("FORTINET-FORTIGATE-MIB", "fgIntfEntVdom"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpCount"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntVrId"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntGrpId"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntIfName"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntState"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntVrIp"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbCount"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntIfName"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntSerial"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgIntfObjectGroup = fgIntfObjectGroup.setStatus('current')
fgProcessorsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 17)).setObjects(("FORTINET-FORTIGATE-MIB", "fgProcessorCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcessorUsage5sec"), ("FORTINET-FORTIGATE-MIB", "fgProcessorType"), ("FORTINET-FORTIGATE-MIB", "fgProcessorContainedIn"), ("FORTINET-FORTIGATE-MIB", "fgProcessorPktRxCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorPktTxCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorPktDroppedCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorUserUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcessorSysUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcessorModuleCount"), ("FORTINET-FORTIGATE-MIB", "fgProcModType"), ("FORTINET-FORTIGATE-MIB", "fgProcModName"), ("FORTINET-FORTIGATE-MIB", "fgProcModDescr"), ("FORTINET-FORTIGATE-MIB", "fgProcModProcessorCount"), ("FORTINET-FORTIGATE-MIB", "fgProcModMemCapacity"), ("FORTINET-FORTIGATE-MIB", "fgProcModMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcModSessionCount"), ("FORTINET-FORTIGATE-MIB", "fgProcModSACount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgProcessorsObjectGroup = fgProcessorsObjectGroup.setStatus('current')
fgNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 18)).setObjects(("FORTINET-FORTIGATE-MIB", "fgTrapVpnTunUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapVpnTunDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaSwitch"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaHBFail"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaMemberDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaMemberUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsSignature"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsAnomaly"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsPkgUpdate"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsFailOpen"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvVirus"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvOversize"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvPattern"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvFragmented"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvEnterConserve"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvBypass"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvOversizePass"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvOversizeBlock"), ("FORTINET-FORTIGATE-MIB", "fgTrapFazDisconnect"), ("FORTINET-FORTIGATE-MIB", "fgTrapWcApUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapWcApDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapDeviceNew"), ("FORTINET-FORTIGATE-MIB", "fgTrapFcSwUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapFcSwDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapServerLoadBalanceRealServerDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgNotificationGroup = fgNotificationGroup.setStatus('current')
fgObsoleteNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 19)).setObjects(("FORTINET-FORTIGATE-MIB", "fgTrapHaStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgObsoleteNotificationsGroup = fgObsoleteNotificationsGroup.setStatus('deprecated')
fgExplicitProxyObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 20)).setObjects(("FORTINET-FORTIGATE-MIB", "fgExplicitProxyUpTime"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyRequests"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyUsers"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxySessions"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyVirus"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBannedWords"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyPolicy"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyOversized"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchNest"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchSize"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchEncrypted"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchMultiPart"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchUnsupported"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchBomb"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchCorrupt"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredApplets"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredActiveX"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredJScript"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredJS"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredVBS"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredOthScript"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBlockedDLP"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBlockedConType"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyExaminedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyAllowedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBlockedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyLoggedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyOverriddenURLs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgExplicitProxyObjectGroup = fgExplicitProxyObjectGroup.setStatus('current')
fgWebCacheObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 21)).setObjects(("FORTINET-FORTIGATE-MIB", "fgWebCacheUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMLimit"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMUsage"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMHits"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMMisses"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRequests"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheBypass"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskLimit"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskUsage"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskHits"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskMisses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWebCacheObjectGroup = fgWebCacheObjectGroup.setStatus('current')
fgWanOptObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 22)).setObjects(("FORTINET-FORTIGATE-MIB", "fgMemCacheLimit"), ("FORTINET-FORTIGATE-MIB", "fgMemCacheUsage"), ("FORTINET-FORTIGATE-MIB", "fgMemCacheHits"), ("FORTINET-FORTIGATE-MIB", "fgMemCacheMisses"), ("FORTINET-FORTIGATE-MIB", "fgByteCacheRAMLimit"), ("FORTINET-FORTIGATE-MIB", "fgByteCacheRAMUsage"), ("FORTINET-FORTIGATE-MIB", "fgWanOptUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWanOptReductionRate"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLanTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWanTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLanInTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLanOutTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWanInTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWanOutTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptTunnels"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLANBytesIn"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLANBytesOut"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWANBytesIn"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWANBytesOut"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskLimit"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskUsage"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskHits"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskMisses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWanOptObjectGroup = fgWanOptObjectGroup.setStatus('current')
fgObsoleteAppServicesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 23)).setObjects(("FORTINET-FORTIGATE-MIB", "fgApHTTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApHTTPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3UpTime"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3MemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApFTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApFTPMemUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgObsoleteAppServicesObjectGroup = fgObsoleteAppServicesObjectGroup.setStatus('deprecated')
fgSystemAdvancedObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 24)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSIAdvMemPageCache"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemCacheActive"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemCacheInactive"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemBuffer"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemEnterKerConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemLeaveKerConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemEnterProxyConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemLeaveProxyConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesEphemeralCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesEphemeralLimit"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesClashCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesExpCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesSyncQFCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesAcceptQFCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesNoListenerCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSystemAdvancedObjectGroup = fgSystemAdvancedObjectGroup.setStatus('current')
fgWcObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 25)).setObjects(("FORTINET-FORTIGATE-MIB", "fgWcApVdom"), ("FORTINET-FORTIGATE-MIB", "fgWcApSerial"), ("FORTINET-FORTIGATE-MIB", "fgWcApName"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoName"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoLocation"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoWtpCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoWtpManaged"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoWtpSessions"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoStationCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanSsid"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanBroadcastSsid"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanSecurity"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanEncryption"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanAuthentication"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanRadiusServer"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanUserGroup"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanLocalBridging"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanVlanId"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanMeshBackhaul"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanStationCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfilePlatform"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileDataChannelDtlsPolicy"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileCountryString"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioMode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioApScan"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioWidsProfile"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioDarrp"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioFrequencyHandoff"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioApHandoff"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioBeaconInterval"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioDtimPeriod"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioBand"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioChannelBonding"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioChannel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioAutoTxPowerControl"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioAutoTxPowerLow"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioAutoTxPowerHigh"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioTxPowerLevel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioVaps"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioStationCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioChannelWidth"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpAdmin"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpName"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpLocation"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpProfile"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioEnable"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioAutoTxPowerControl"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioAutoTxPowerLow"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioAutoTxPowerHigh"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioTxPowerLevel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioBand"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioApScan"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigVapAll"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigVaps"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpIpAddressType"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpIpAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpLocalIpAddressType"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpLocalIpAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpBaseMacAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionConnectionState"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpDaemonUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpSessionUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpProfileName"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpModelNumber"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpHwVersion"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpSwVersion"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpBootVersion"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpRegionCode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpByteRxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpByteTxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpMemoryUsage"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpMemoryCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioMode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioBaseBssid"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioCountryString"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioCountryCode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioOperatingChannel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioOperatingPower"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapSsid"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapByteRxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapByteTxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcStaWlan"), ("FORTINET-FORTIGATE-MIB", "fgWcStaWtpId"), ("FORTINET-FORTIGATE-MIB", "fgWcStaRadioId"), ("FORTINET-FORTIGATE-MIB", "fgWcStaVlanId"), ("FORTINET-FORTIGATE-MIB", "fgWcStaIpAddressType"), ("FORTINET-FORTIGATE-MIB", "fgWcStaIpAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcStaVci"), ("FORTINET-FORTIGATE-MIB", "fgWcStaHost"), ("FORTINET-FORTIGATE-MIB", "fgWcStaUser"), ("FORTINET-FORTIGATE-MIB", "fgWcStaGroup"), ("FORTINET-FORTIGATE-MIB", "fgWcStaSignal"), ("FORTINET-FORTIGATE-MIB", "fgWcStaNoise"), ("FORTINET-FORTIGATE-MIB", "fgWcStaIdle"), ("FORTINET-FORTIGATE-MIB", "fgWcStaBandwidthTx"), ("FORTINET-FORTIGATE-MIB", "fgWcStaBandwidthRx"), ("FORTINET-FORTIGATE-MIB", "fgWcStaChannel"), ("FORTINET-FORTIGATE-MIB", "fgWcStaRadioType"), ("FORTINET-FORTIGATE-MIB", "fgWcStaSecurity"), ("FORTINET-FORTIGATE-MIB", "fgWcStaEncrypt"), ("FORTINET-FORTIGATE-MIB", "fgWcStaOnline"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWcObjectGroup = fgWcObjectGroup.setStatus('current')
fgFcObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 26)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFcSwVdom"), ("FORTINET-FORTIGATE-MIB", "fgFcSwSerial"), ("FORTINET-FORTIGATE-MIB", "fgFcSwName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFcObjectGroup = fgFcObjectGroup.setStatus('current')
fgServerLoadBalanceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 27)).setObjects(("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceRealServerAddress"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceVirtualServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgServerLoadBalanceObjectGroup = fgServerLoadBalanceObjectGroup.setStatus('current')
fgUsbportsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 28)).setObjects(("FORTINET-FORTIGATE-MIB", "fgUsbportCount"), ("FORTINET-FORTIGATE-MIB", "fgUsbportPlugged"), ("FORTINET-FORTIGATE-MIB", "fgUsbportVersion"), ("FORTINET-FORTIGATE-MIB", "fgUsbportClass"), ("FORTINET-FORTIGATE-MIB", "fgUsbportVendId"), ("FORTINET-FORTIGATE-MIB", "fgUsbportProdId"), ("FORTINET-FORTIGATE-MIB", "fgUsbportRevision"), ("FORTINET-FORTIGATE-MIB", "fgUsbportManufacturer"), ("FORTINET-FORTIGATE-MIB", "fgUsbportProduct"), ("FORTINET-FORTIGATE-MIB", "fgUsbportSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgUsbportsObjectGroup = fgUsbportsObjectGroup.setStatus('current')
fgUsbModemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 29)).setObjects(("FORTINET-FORTIGATE-MIB", "fgUsbModemSignalStrength"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemStatus"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemSimState"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemVendor"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemProduct"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemNetwork"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemId"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemSimId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgUsbModemInfoGroup = fgUsbModemInfoGroup.setStatus('current')
fgDeviceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 30)).setObjects(("FORTINET-FORTIGATE-MIB", "fgDeviceMacAddress"), ("FORTINET-FORTIGATE-MIB", "fgDeviceCreated"), ("FORTINET-FORTIGATE-MIB", "fgDeviceLastSeen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgDeviceObjectGroup = fgDeviceObjectGroup.setStatus('current')
fgLinkMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 31)).setObjects(("FORTINET-FORTIGATE-MIB", "fgLinkMonitorNumber"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorName"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorState"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorLatency"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorJitter"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorPacketSend"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorPacketRecv"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorPacketLoss"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorVdom"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgLinkMonitorGroup = fgLinkMonitorGroup.setStatus('current')
fgMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 101, 100, 100)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFmTrapGroup"), ("FORTINET-FORTIGATE-MIB", "fgNotificationGroup"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAdminObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSystemObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSoftwareObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorsObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgHighAvailabilityObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgVpnObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgFirewallObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAppServicesObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAntivirusObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgIntrusionPrevtObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWebFilterObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgVirtualDomainObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAdministrationObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgIntfObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgProcessorsObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWanOptObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSystemAdvancedObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWcObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgFcObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgUsbportsObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemInfoGroup"), ("FORTINET-FORTIGATE-MIB", "fgDeviceObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgMIBCompliance = fgMIBCompliance.setStatus('current')
fg300MibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 101, 100, 101)).setObjects(("FORTINET-FORTIGATE-MIB", "fgObsoleteNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fg300MibCompliance = fg300MibCompliance.setStatus('deprecated')
fgObsolteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 101, 100, 102)).setObjects(("FORTINET-FORTIGATE-MIB", "fgObsoleteAppServicesObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgObsolteMIBCompliance = fgObsolteMIBCompliance.setStatus('deprecated')
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgWcWtpProfileRadioProfileName=fgWcWtpProfileRadioProfileName, fgWcWtpConfigRadioBand=fgWcWtpConfigRadioBand, fgSIAdvSesEphemeralLimit=fgSIAdvSesEphemeralLimit, fgFwUserEntry=fgFwUserEntry, fgUsbports=fgUsbports, fgDeviceTrapObjects=fgDeviceTrapObjects, fgProcessorTypes=fgProcessorTypes, fgAntivirus=fgAntivirus, fgWcWtpProfileRadioBand=fgWcWtpProfileRadioBand, fgt140P=fgt140P, fgProcessorUsage5sec=fgProcessorUsage5sec, fgAppExplicitProxy=fgAppExplicitProxy, fgUsbportProdId=fgUsbportProdId, fgVdEntry=fgVdEntry, fgVpnSslTunnelTable=fgVpnSslTunnelTable, fgVpnSslStatsMaxWebSessions=fgVpnSslStatsMaxWebSessions, fgWcStaTable=fgWcStaTable, fgWfHTTPURLBlocked=fgWfHTTPURLBlocked, fgVdTable=fgVdTable, fgSIAdvMemCacheActive=fgSIAdvMemCacheActive, fgIps=fgIps, fgSysSesRate30=fgSysSesRate30, fgIpSessExp=fgIpSessExp, fgSysSes6Rate10=fgSysSes6Rate10, fgFc=fgFc, fgWebCacheDiskStatsTable=fgWebCacheDiskStatsTable, fgt70D=fgt70D, fgFmTrapDeployComplete=fgFmTrapDeployComplete, fgUsbportsObjectGroup=fgUsbportsObjectGroup, fgApFTPConnections=fgApFTPConnections, fgVpnTunEntTimeout=fgVpnTunEntTimeout, fgIpsLowSevDetections=fgIpsLowSevDetections, fgWcWlanTable=fgWcWlanTable, fgIpsInfo=fgIpsInfo, fgIntfVrrpEntry=fgIntfVrrpEntry, fgSystemInfoAdvanced=fgSystemInfoAdvanced, fgDeviceObjectGroup=fgDeviceObjectGroup, fgExplicitProxyArchEncrypted=fgExplicitProxyArchEncrypted, fg300MibCompliance=fg300MibCompliance, fgWcWtpSessionWtpMemoryCapacity=fgWcWtpSessionWtpMemoryCapacity, fgWcWtpProfileRadioAutoTxPowerLow=fgWcWtpProfileRadioAutoTxPowerLow, fgLinkMonitor=fgLinkMonitor, fgIntrusionPrevtObjectGroup=fgIntrusionPrevtObjectGroup, fgProcessorUserUsage=fgProcessorUserUsage, fgApNNTPMemUsage=fgApNNTPMemUsage, fgt80C=fgt80C, fgWanOptWANBytesOut=fgWanOptWANBytesOut, fgProcModFnXE2=fgProcModFnXE2, fgWanOptDiskUsage=fgWanOptDiskUsage, fgUsbModemInfoObjects=fgUsbModemInfoObjects, fgApIMReqProcessed=fgApIMReqProcessed, fgExplicitProxyScriptStatsTable=fgExplicitProxyScriptStatsTable, fgProcModMemUsage=fgProcModMemUsage, fgWcWtpSessionRadioCountryCode=fgWcWtpSessionRadioCountryCode, fgInetProtoInfo=fgInetProtoInfo, fgWcWtpSessionVapWtpId=fgWcWtpSessionVapWtpId, fgTrapHaStateChange=fgTrapHaStateChange, FgScanAvDisposition=FgScanAvDisposition, fgExplicitProxyFilteredJScript=fgExplicitProxyFilteredJScript, fgDeviceMacAddress=fgDeviceMacAddress, fgWcWtpSessionWtpRegionCode=fgWcWtpSessionWtpRegionCode, fgApFTPMaxConnections=fgApFTPMaxConnections, fgApIMAPUpTime=fgApIMAPUpTime, fgWanOptStatsTable=fgWanOptStatsTable, fgFwPolLastUsed=fgFwPolLastUsed, fgSIAdvSesExpCount=fgSIAdvSesExpCount, fgHaStatsAvCount=fgHaStatsAvCount, fgVpnSslTunnelSrcIp=fgVpnSslTunnelSrcIp, fgHwSensorsObjectGroup=fgHwSensorsObjectGroup, fgHaInfo=fgHaInfo, fgt3000D=fgt3000D, fgUsbportRevision=fgUsbportRevision, fgSysSesRate10=fgSysSesRate10, fgTrapServerLoadBalanceRealServerDown=fgTrapServerLoadBalanceRealServerDown, fgFwPolTables=fgFwPolTables, fgAppP2PProtEntProto=fgAppP2PProtEntProto, fgSysVersion=fgSysVersion, fgAppProxyIMAP=fgAppProxyIMAP, fgLinkMonitorID=fgLinkMonitorID, fgFwPolByteCountHc=fgFwPolByteCountHc, fgExplicitProxyArchUnsupported=fgExplicitProxyArchUnsupported, fgWcInfoName=fgWcInfoName, fgVdEntIndex=fgVdEntIndex, fgWebCacheDisk=fgWebCacheDisk, fgWcWtpSessionRadioOperatingChannel=fgWcWtpSessionRadioOperatingChannel, fgWcStaChannel=fgWcStaChannel, fgSysMgmtVdom=fgSysMgmtVdom, fgIp6SessStatsEntry=fgIp6SessStatsEntry, fgInetProtoTables=fgInetProtoTables, fgVdMaxVdoms=fgVdMaxVdoms, fgMgmtTrapObjects=fgMgmtTrapObjects, fgTrapAvFragmented=fgTrapAvFragmented, fgt80CM=fgt80CM, fgApFTPStatsEntry=fgApFTPStatsEntry, fgAvHTTPVirusDetected=fgAvHTTPVirusDetected, fgManIfMask=fgManIfMask, fgAvNNTPVirusBlocked=fgAvNNTPVirusBlocked, fgWcWtpSessionWtpUpTime=fgWcWtpSessionWtpUpTime, fgWcStaEntry=fgWcStaEntry, fgMIBCompliance=fgMIBCompliance, fgAppProxySIP=fgAppProxySIP, fgSIAdvSesAcceptQFCount=fgSIAdvSesAcceptQFCount, fgIntfVlanHbEntState=fgIntfVlanHbEntState, fgProcessorPktTxCount=fgProcessorPktTxCount, fgIp6SessNumber=fgIp6SessNumber, fgWcStaBandwidthRx=fgWcStaBandwidthRx, fgWcWtpSessionVapEntry=fgWcWtpSessionVapEntry, fgTrapHaHBFail=fgTrapHaHBFail, fgApPOP3MemUsage=fgApPOP3MemUsage, fgVpnTunEntRemGwyIp=fgVpnTunEntRemGwyIp, fgSIAdvMemBuffer=fgSIAdvMemBuffer, fgSIAdvMemEnterProxyConsThrsh=fgSIAdvMemEnterProxyConsThrsh, fgWcWtpProfileRadioEntry=fgWcWtpProfileRadioEntry, FgWcWtpRadioId=FgWcWtpRadioId, fgWcWtpProfileName=fgWcWtpProfileName, fgTrapHaMemberDown=fgTrapHaMemberDown, fgHaStatsCpuUsage=fgHaStatsCpuUsage, fgHaStatsTable=fgHaStatsTable, fgt240D=fgt240D, fgHaStatsEntry=fgHaStatsEntry, fgVpnDialupIndex=fgVpnDialupIndex, fgUsbModemSignalStrength=fgUsbModemSignalStrength, fgWebCacheDiskMisses=fgWebCacheDiskMisses, fnFortiGateMib=fnFortiGateMib, fgAppWanOpt=fgAppWanOpt, fgWcWlanUserGroup=fgWcWlanUserGroup, fwf92D=fwf92D, fgVpnTunnelUpCount=fgVpnTunnelUpCount, fgt1000C=fgt1000C, fgExplicitProxyArchMultiPart=fgExplicitProxyArchMultiPart, fwf51E=fwf51E, fgVpnTunEntSelectorDstBeginIp=fgVpnTunEntSelectorDstBeginIp, fgWcWlanVlanId=fgWcWlanVlanId, fgFwPolID=fgFwPolID, fgExplicitProxyAllowedURLs=fgExplicitProxyAllowedURLs, fgt280D=fgt280D, fgWcStaVlanId=fgWcStaVlanId, fgWfAppletBlocked=fgWfAppletBlocked, fgt200D=fgt200D, fgSysDiskUsage=fgSysDiskUsage, fgWcStaRadioId=fgWcStaRadioId, fgAvIMVirusDetected=fgAvIMVirusDetected, fgExplicitProxySessions=fgExplicitProxySessions, fgWcWtpConfigWtpAdmin=fgWcWtpConfigWtpAdmin, fgWcWtpSessionWtpId=fgWcWtpSessionWtpId, fgVpnTunEntSelectorSrcBeginIp=fgVpnTunEntSelectorSrcBeginIp, fgt3600C=fgt3600C, fwf30D=fwf30D, fgProcessorModuleCount=fgProcessorModuleCount, fgVpnTunEntry=fgVpnTunEntry, fgWcStaEncrypt=fgWcStaEncrypt, fgUsbModemId=fgUsbModemId, fgVpnSslTunnelBytesOut=fgVpnSslTunnelBytesOut, fgWcWtpProfileRadioDarrp=fgWcWtpProfileRadioDarrp, fgWanOptStatsEntry=fgWanOptStatsEntry, fgExplicitProxyInfo=fgExplicitProxyInfo, fgApSIPServices=fgApSIPServices, fgProcModType=fgProcModType, fgIntfInfo=fgIntfInfo, fgByteCacheRAMUsage=fgByteCacheRAMUsage, fgWcStaMacAddress=fgWcStaMacAddress, fgTrapIpsFailOpen=fgTrapIpsFailOpen, fgProcessorAMD=fgProcessorAMD, fgUsbModemSimState=fgUsbModemSimState, fgWcWtpSessionWtpByteRxCount=fgWcWtpSessionWtpByteRxCount, fgt30D=fgt30D, fgIntfVlanHbEntry=fgIntfVlanHbEntry, fgHaGroupName=fgHaGroupName, fgTrapIpsPkgUpdate=fgTrapIpsPkgUpdate, fgWcWlanSsid=fgWcWlanSsid, fgAppP2PProtEntBytes=fgAppP2PProtEntBytes, fgUsbportCount=fgUsbportCount, fgt60DPOE=fgt60DPOE, fgIntfEntVdom=fgIntfEntVdom, fgSoftwareObjectGroup=fgSoftwareObjectGroup, fgWcWtpSessionRadioRadioId=fgWcWtpSessionRadioRadioId, fgIpSessFromPort=fgIpSessFromPort, fgTrapAvBypass=fgTrapAvBypass, fgProcModIntegrated=fgProcModIntegrated, fgExplicitProxyScriptStatsEntry=fgExplicitProxyScriptStatsEntry, fgExplicitProxyBannedWords=fgExplicitProxyBannedWords, fgApplications=fgApplications, fgLinkMonitorTable=fgLinkMonitorTable, fgWebfilterStatsTable=fgWebfilterStatsTable, fgHaStatsByteCount=fgHaStatsByteCount, fgWcWtpConfigWtpProfile=fgWcWtpConfigWtpProfile, fgObsoleteAppServicesObjectGroup=fgObsoleteAppServicesObjectGroup, fgVpnTunEntSelectorSrcPort=fgVpnTunEntSelectorSrcPort, fgWcWtpSessionWtpMemoryUsage=fgWcWtpSessionWtpMemoryUsage, fgVirtualDomain=fgVirtualDomain, fgSysInfoAdvSessions=fgSysInfoAdvSessions, fgIpSessStatsEntry=fgIpSessStatsEntry, fgt3HD=fgt3HD, fgVpnDialupTable=fgVpnDialupTable, fgAppServicesObjectGroup=fgAppServicesObjectGroup, fgUsbportVersion=fgUsbportVersion, fgProcModMemCapacity=fgProcModMemCapacity, fgWcWtpProfileRadioAutoTxPowerControl=fgWcWtpProfileRadioAutoTxPowerControl, fgExplicitProxyFilterStatsEntry=fgExplicitProxyFilterStatsEntry, fgIpsCritSevDetections=fgIpsCritSevDetections, fgt1200D=fgt1200D, fgWanOptTrafficStatsEntry=fgWanOptTrafficStatsEntry, fgWcInfoWtpManaged=fgWcInfoWtpManaged, fgExplicitProxyStatsEntry=fgExplicitProxyStatsEntry, fgApHTTPStatsEntry=fgApHTTPStatsEntry, fgWanOptInfo=fgWanOptInfo, fgProcModProcessorCount=fgProcModProcessorCount, fgExplicitProxyScanStatsTable=fgExplicitProxyScanStatsTable, fgt100D=fgt100D, fgIntfVlanHbs=fgIntfVlanHbs, fgWfHTTPSBlocked=fgWfHTTPSBlocked, fgVdEnabled=fgVdEnabled, fgWcWtpProfileRadioApHandoff=fgWcWtpProfileRadioApHandoff, fgTraps=fgTraps, fgAvPOP3VirusDetected=fgAvPOP3VirusDetected, fgt3815D=fgt3815D, fgSystemObjectGroup=fgSystemObjectGroup, fgWanOptWanOutTraffic=fgWanOptWanOutTraffic, fgFwUserIndex=fgFwUserIndex, fgVpnSslStatsMaxTunnels=fgVpnSslStatsMaxTunnels, fgApSIPMemUsage=fgApSIPMemUsage, fgNotificationGroup=fgNotificationGroup, fgVpnTunEntLocGwyIp=fgVpnTunEntLocGwyIp, fgWebfilter=fgWebfilter, fgUsbportTable=fgUsbportTable, fgIntfVrrpEntVrId=fgIntfVrrpEntVrId, fgr60D=fgr60D, fgVdTpMgmtAddrType=fgVdTpMgmtAddrType, fgProcessorModuleTypes=fgProcessorModuleTypes, fgHaPriority=fgHaPriority, fgWcWtpSessionWtpLocalIpAddressType=fgWcWtpSessionWtpLocalIpAddressType, fgProcessorModules=fgProcessorModules, fgIpsInfoSevDetections=fgIpsInfoSevDetections, fgProcessorIntel=fgProcessorIntel, fgIpsHighSevDetections=fgIpsHighSevDetections, fgProcessors=fgProcessors, fgFwPolPktCountHc=fgFwPolPktCountHc, fgIpsTrapSigId=fgIpsTrapSigId, fgApSIPStatsTable=fgApSIPStatsTable, fwf80CM=fwf80CM, fgIpSessStatsTable=fgIpSessStatsTable, fgWcWtpProfileRadioTable=fgWcWtpProfileRadioTable, fgApSMTPSpamDetected=fgApSMTPSpamDetected, fgWcWtpSessionRadioMode=fgWcWtpSessionRadioMode, fgWcWtpSessionWtpIpAddressType=fgWcWtpSessionWtpIpAddressType, fgFmTrapObjectGroup=fgFmTrapObjectGroup, fgWcStaWlan=fgWcStaWlan, fgVpnDialupVdom=fgVpnDialupVdom, fgUsbportSerial=fgUsbportSerial, fgFgWfHTTPSAllowed=fgFgWfHTTPSAllowed, fgSysSes6Count=fgSysSes6Count, fgWcWtpProfilePlatform=fgWcWtpProfilePlatform, fgHwSensorEntry=fgHwSensorEntry, fgAppP2PProtoEntry=fgAppP2PProtoEntry)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgWanOptProtocol=fgWanOptProtocol, fgApPOP3StatsEntry=fgApPOP3StatsEntry, fgApSIPStatsEntry=fgApSIPStatsEntry, fgTrapVpnTunDown=fgTrapVpnTunDown, fgWcWtpConfigRadioAutoTxPowerHigh=fgWcWtpConfigRadioAutoTxPowerHigh, FgSessProto=FgSessProto, fgt3700D=fgt3700D, fgLinkMonitorName=fgLinkMonitorName, fgHaStatsSyncStatus=fgHaStatsSyncStatus, fgProcessorContainedIn=fgProcessorContainedIn, fgTrapVpnTunUp=fgTrapVpnTunUp, fgt30DPOE=fgt30DPOE, fgHaSchedule=fgHaSchedule, fgExplicitProxyFilteredVBS=fgExplicitProxyFilteredVBS, fgWcWtpProfileRadioTxPowerLevel=fgWcWtpProfileRadioTxPowerLevel, fgSysSesRate60=fgSysSesRate60, fgWc=fgWc, fwf81CM=fwf81CM, fgWcWlanStationCount=fgWcWlanStationCount, fgVpnTunEntOutOctets=fgVpnTunEntOutOctets, fgAppProxyIM=fgAppProxyIM, fgProcessorType=fgProcessorType, fgHaGroupId=fgHaGroupId, fgt51E=fgt51E, fgHighAvailabilityObjectGroup=fgHighAvailabilityObjectGroup, fgApFTPStatsTable=fgApFTPStatsTable, fgVpn=fgVpn, fgWcWtpSessionWtpHwVersion=fgWcWtpSessionWtpHwVersion, fgWcStaSecurity=fgWcStaSecurity, fgFortiGuardStatsEntry=fgFortiGuardStatsEntry, fgApNNTPConnections=fgApNNTPConnections, fgSystemAdvancedObjectGroup=fgSystemAdvancedObjectGroup, fgHaSystemMode=fgHaSystemMode, fgtVM64SVM=fgtVM64SVM, fgProcessorModuleTable=fgProcessorModuleTable, fgHaStatsMemUsage=fgHaStatsMemUsage, fgIntf=fgIntf, fgLinkMonitorGroup=fgLinkMonitorGroup, fgVdNumber=fgVdNumber, fgWcWtpTables=fgWcWtpTables, fgFmTrapConfChange=fgFmTrapConfChange, fgTrapPrefix=fgTrapPrefix, fgProcModIndex=fgProcModIndex, fgExplicitProxyOversized=fgExplicitProxyOversized, fgWcWtpProfileRadioMode=fgWcWtpProfileRadioMode, fgHwSensorEntValue=fgHwSensorEntValue, fgUsbModemStatus=fgUsbModemStatus, fgWcWtpConfigRadioAutoTxPowerControl=fgWcWtpConfigRadioAutoTxPowerControl, fgLinkMonitorPacketSend=fgLinkMonitorPacketSend, fgFgWfHTTPSLogged=fgFgWfHTTPSLogged, fgIntfObjectGroup=fgIntfObjectGroup, fgVpnTunEntSelectorDstPort=fgVpnTunEntSelectorDstPort, fgFgWfHTTPSBlocked=fgFgWfHTTPSBlocked, fgExplicitProxyFilterStatsTable=fgExplicitProxyFilterStatsTable, fwf90D=fwf90D, fgAvIMAPVirusDetected=fgAvIMAPVirusDetected, fgApHTTPConnections=fgApHTTPConnections, fgIpsTrapSigMsg=fgIpsTrapSigMsg, fgWcWtpSessionVapRadioId=fgWcWtpSessionVapRadioId, fgVpnDialupSrcBegin=fgVpnDialupSrcBegin, fgWcTrapObjects=fgWcTrapObjects, fgProcModFnFB8=fgProcModFnFB8, fgWcWtpProfileRadioRadioId=fgWcWtpProfileRadioRadioId, fgExplicitProxyObjectGroup=fgExplicitProxyObjectGroup, fgt5001D=fgt5001D, fgVpnSslStatsMaxUsers=fgVpnSslStatsMaxUsers, fgTrapDeviceNew=fgTrapDeviceNew, fgFwPolicies=fgFwPolicies, fgt1500DT=fgt1500DT, fgt60D=fgt60D, fgVdEntOpMode=fgVdEntOpMode, fgFwPol6StatsEntry=fgFwPol6StatsEntry, fgFwPol6StatsTable=fgFwPol6StatsTable, fgFgWfHTTPAllowed=fgFgWfHTTPAllowed, fgAppIMFileTransfered=fgAppIMFileTransfered, fgMemCacheHits=fgMemCacheHits, FgOpMode=FgOpMode, fgWcInfoStationCapacity=fgWcInfoStationCapacity, fgWcWtpSessionWtpIpAddress=fgWcWtpSessionWtpIpAddress, fgWcWtpSessionVapByteTxCount=fgWcWtpSessionVapByteTxCount, fgExplicitProxyArchSize=fgExplicitProxyArchSize, fgWebCacheDiskUsage=fgWebCacheDiskUsage, fgSysCpuUsage=fgSysCpuUsage, fgWanOptLanOutTraffic=fgWanOptLanOutTraffic, fgVpnDialupTimeout=fgVpnDialupTimeout, fgWcWlanEncryption=fgWcWlanEncryption, fgWebfilterTables=fgWebfilterTables, fgIpsIntrusionsDetected=fgIpsIntrusionsDetected, fgWcWlanBroadcastSsid=fgWcWlanBroadcastSsid, fgt1000D=fgt1000D, fgt90DPOE=fgt90DPOE, fgWcWtpProfileRadioDtimPeriod=fgWcWtpProfileRadioDtimPeriod, fgWcWtpConfigRadioTxPowerLevel=fgWcWtpConfigRadioTxPowerLevel, fgExplicitProxyExaminedURLs=fgExplicitProxyExaminedURLs, fgWcWtpProfileCountryString=fgWcWtpProfileCountryString, fgFcObjectGroup=fgFcObjectGroup, fgSIAdvSesNoListenerCount=fgSIAdvSesNoListenerCount, fgMgmt=fgMgmt, fgVpnSslStatsEntry=fgVpnSslStatsEntry, fgWanOptWanInTraffic=fgWanOptWanInTraffic, fgWanOptDiskMisses=fgWanOptDiskMisses, fgIpSessVdom=fgIpSessVdom, fgWcWlanStationCapacity=fgWcWlanStationCapacity, fgAvTrapObjects=fgAvTrapObjects, fwf60D=fwf60D, fgWcWtpSessionWtpCpuUsage=fgWcWtpSessionWtpCpuUsage, fgVpnTunEntLifeSecs=fgVpnTunEntLifeSecs, fgIntfVlanHbEntIfName=fgIntfVlanHbEntIfName, fgtVM64XEN=fgtVM64XEN, fgMemCacheLimit=fgMemCacheLimit, fgSIAdvMemPageCache=fgSIAdvMemPageCache, fgWcWtpSessionWtpStationCount=fgWcWtpSessionWtpStationCount, fgVpnTunTable=fgVpnTunTable, fgAppIMStatsEntry=fgAppIMStatsEntry, fgWcWtpSessionTable=fgWcWtpSessionTable, fgVpnSslStatsLoginUsers=fgVpnSslStatsLoginUsers, fgWcWtpProfileRadioChannel=fgWcWtpProfileRadioChannel, fgApSMTPReqProcessed=fgApSMTPReqProcessed, fgLinkMonitorState=fgLinkMonitorState, FgWcWtpRadioMode=FgWcWtpRadioMode, fgAvSMTPVirusBlocked=fgAvSMTPVirusBlocked, fgIpsStatsTable=fgIpsStatsTable, fgFwPolByteCount=fgFwPolByteCount, fgAppVoIPConn=fgAppVoIPConn, fgIpsTrapObjects=fgIpsTrapObjects, fgExplicitProxyFilteredJS=fgExplicitProxyFilteredJS, fgFmTrapIfChange=fgFmTrapIfChange, fgApSMTPMaxConnections=fgApSMTPMaxConnections, fgLinkMonitorPacketRecv=fgLinkMonitorPacketRecv, fgFcSwVdom=fgFcSwVdom, fgSIAdvMemEnterKerConsThrsh=fgSIAdvMemEnterKerConsThrsh, fgHighAvailability=fgHighAvailability, fgSysSes6Rate30=fgSysSes6Rate30, fgWcWtpSessionVapStationCount=fgWcWtpSessionVapStationCount, FgWanOptProtocols=FgWanOptProtocols, fgVdEntCpuUsage=fgVdEntCpuUsage, fgVpnSslStatsTable=fgVpnSslStatsTable, fgt98DPOE=fgt98DPOE, fgAppSuStatsTable=fgAppSuStatsTable, fgtVM64VMX=fgtVM64VMX, fgAppSuIndex=fgAppSuIndex, FgWcWtpRadioType=FgWcWtpRadioType, fgVdEntName=fgVdEntName, fgVpnTunEntStatus=fgVpnTunEntStatus, fgProcModFnFE8=fgProcModFnFE8, fgWcWtpProfileRadioChannelWidth=fgWcWtpProfileRadioChannelWidth, fgApIMAPReqProcessed=fgApIMAPReqProcessed, fgAdminTable=fgAdminTable, fgIpSessTable=fgIpSessTable, fgVpnObjectGroup=fgVpnObjectGroup, fgIntfVrrpEntGrpId=fgIntfVrrpEntGrpId, fgAppP2PStatsEntry=fgAppP2PStatsEntry, fgExplicitProxyScanStatsDisp=fgExplicitProxyScanStatsDisp, fgWcWtpConfigRadioEnable=fgWcWtpConfigRadioEnable, fgIpSessIndex=fgIpSessIndex, fgt3240C=fgt3240C, fgWcWtpConfigRadioApScan=fgWcWtpConfigRadioApScan, fgExplicitProxyUpTime=fgExplicitProxyUpTime, fgVpnTrapObjects=fgVpnTrapObjects, fgWcWtpProfileRadioAutoTxPowerHigh=fgWcWtpProfileRadioAutoTxPowerHigh, fgApSMTPUpTime=fgApSMTPUpTime, fgServerLoadBalanceVirtualServerName=fgServerLoadBalanceVirtualServerName, fgProcessorPktDroppedCount=fgProcessorPktDroppedCount, fgAppP2P=fgAppP2P, fgUsbportVendId=fgUsbportVendId, fgUsbportEntry=fgUsbportEntry, fgIpSessEntry=fgIpSessEntry, fgWcStaSignal=fgWcStaSignal, fgVdEntSesCount=fgVdEntSesCount, fgMemCacheMisses=fgMemCacheMisses, fgWebCacheRAMLimit=fgWebCacheRAMLimit, fgHaStatsSyncDatimeSucc=fgHaStatsSyncDatimeSucc, fgWcInfoStationCount=fgWcInfoStationCount, fgWcWlanEntry=fgWcWlanEntry, fgt400D=fgt400D, fgt3700DX=fgt3700DX, fgAppIM=fgAppIM, fgUsbModemProduct=fgUsbModemProduct, fgVirtualDomainObjectGroup=fgVirtualDomainObjectGroup, fgModel=fgModel, fgLinkMonitorVdom=fgLinkMonitorVdom, fgWebCacheRAMUsage=fgWebCacheRAMUsage, fgt94DPOE=fgt94DPOE, fgSysInfoAdvMem=fgSysInfoAdvMem, fgProcModDescr=fgProcModDescr, fgProcessorModuleEntry=fgProcessorModuleEntry, fgIpSessToPort=fgIpSessToPort, fgWcStaRadioType=fgWcStaRadioType, fgVpnSslState=fgVpnSslState, fgVdTables=fgVdTables, fgApPOP3MaxConnections=fgApPOP3MaxConnections, PYSNMP_MODULE_ID=fnFortiGateMib, fgApPOP3SpamDetected=fgApPOP3SpamDetected, fgIpSessToAddr=fgIpSessToAddr, fgAvNNTPVirusDetected=fgAvNNTPVirusDetected, fgTrapAvOversizeBlock=fgTrapAvOversizeBlock, fgAppScanUnit=fgAppScanUnit, fgIpsSignatureDetections=fgIpsSignatureDetections, fgWanOptLANBytesIn=fgWanOptLANBytesIn, fgSysLowMemCapacity=fgSysLowMemCapacity, fgWcWtpConfigVapAll=fgWcWtpConfigVapAll, fgAppVoIPStatsEntry=fgAppVoIPStatsEntry, fgWcWtpSessionRadioBaseBssid=fgWcWtpSessionRadioBaseBssid, fgWcWtpConfigWtpName=fgWcWtpConfigWtpName, fgWanOptTunnels=fgWanOptTunnels, fgFwPolStatsEntry=fgFwPolStatsEntry, fgAppSuNumber=fgAppSuNumber, fgt600C=fgt600C, fgDevice=fgDevice, fgIpSessNumber=fgIpSessNumber, fgt800D=fgt800D, fgProcModOther=fgProcModOther, fgt3100D=fgt3100D, FgWanOptHistPeriods=FgWanOptHistPeriods, fgAppP2PProtoTable=fgAppP2PProtoTable, fgFwUserName=fgFwUserName, fgMemCacheUsage=fgMemCacheUsage, fgWcWtpSessionWtpProfileName=fgWcWtpSessionWtpProfileName, fgApIMAPSpamDetected=fgApIMAPSpamDetected, fgFmTrapDeployInProgress=fgFmTrapDeployInProgress, fgHwSensors=fgHwSensors, fgFgWfHTTPExamined=fgFgWfHTTPExamined, fgIntfVrrpEntState=fgIntfVrrpEntState, fgAvOversizedDetected=fgAvOversizedDetected, fgWcWtpSessionRadioEntry=fgWcWtpSessionRadioEntry, fgAvInfo=fgAvInfo, fgWcWtpConfigWtpLocation=fgWcWtpConfigWtpLocation, fgProcModSessionCount=fgProcModSessionCount, FgWcWlanSecurityType=FgWcWlanSecurityType, fgWanOptDiskStatsTable=fgWanOptDiskStatsTable, fgVpnDialupGateway=fgVpnDialupGateway, fgApHTTPReqProcessed=fgApHTTPReqProcessed, fgSysVersionAv=fgSysVersionAv, fgApPOP3ReqProcessed=fgApPOP3ReqProcessed, FgAdminPermLevel=FgAdminPermLevel, fgVpnDialupOutOctets=fgVpnDialupOutOctets, fgWcWtpSessionEntry=fgWcWtpSessionEntry, fgAppP2PStatsTable=fgAppP2PStatsTable, fgWcWtpSessionWtpBaseMacAddress=fgWcWtpSessionWtpBaseMacAddress, fgAppP2PConnBlocked=fgAppP2PConnBlocked, fgHwSensorEntAlarmStatus=fgHwSensorEntAlarmStatus, fgExplicitProxyArchCorrupt=fgExplicitProxyArchCorrupt, FgHaMode=FgHaMode, fgFcSwName=fgFcSwName, fgFwUserVdom=fgFwUserVdom, fgIntfVrrpCount=fgIntfVrrpCount, fgAvVirusBlocked=fgAvVirusBlocked, fgApSMTPMemUsage=fgApSMTPMemUsage, fgIntfVrrpTable=fgIntfVrrpTable, fgIntfTable=fgIntfTable, fgWcInfoLocation=fgWcInfoLocation, fgAppP2PProtoEntLastReset=fgAppP2PProtoEntLastReset, fgApSIPOtherReq=fgApSIPOtherReq, fgProcessorEntIndex=fgProcessorEntIndex)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgWfHTTPSURLBlocked=fgWfHTTPSURLBlocked, fgExplicitProxyBlockedConType=fgExplicitProxyBlockedConType, fgHaStatsNetUsage=fgHaStatsNetUsage, fgt3200D=fgt3200D, fgProcModName=fgProcModName, fgExplicitProxyBlockedDLP=fgExplicitProxyBlockedDLP, fgApPOP3UpTime=fgApPOP3UpTime, fosVM64KVM=fosVM64KVM, fgVpnTunEntLocGwyPort=fgVpnTunEntLocGwyPort, fgVpnTunEntSelectorDstEndIp=fgVpnTunEntSelectorDstEndIp, fgFgWfHTTPOverridden=fgFgWfHTTPOverridden, fgWcStaIpAddressType=fgWcStaIpAddressType, fgIpsIntrusionsBlocked=fgIpsIntrusionsBlocked, fgProcessorPktRxCount=fgProcessorPktRxCount, fgApSMTPStatsTable=fgApSMTPStatsTable, fgAppProxyPOP3=fgAppProxyPOP3, fgVpnTables=fgVpnTables, fgHaAutoSync=fgHaAutoSync, fgManIfIp6=fgManIfIp6, fgWebfilterInfo=fgWebfilterInfo, fgVpnDialupLifetime=fgVpnDialupLifetime, fgVpnDialupSrcEnd=fgVpnDialupSrcEnd, fgHaTables=fgHaTables, fgFgWfHTTPBlocked=fgFgWfHTTPBlocked, fgHaStatsIndex=fgHaStatsIndex, fgExplicitProxyFilteredApplets=fgExplicitProxyFilteredApplets, fwf50E=fwf50E, fgWcWtpProfileRadioBeaconInterval=fgWcWtpProfileRadioBeaconInterval, fgProcModFnXB2=fgProcModFnXB2, fgFwUserTable=fgFwUserTable, fgTrapWcApUp=fgTrapWcApUp, fgTrapFcSwUp=fgTrapFcSwUp, fgWebCacheInfo=fgWebCacheInfo, fgWcWtpProfileDataChannelDtlsPolicy=fgWcWtpProfileDataChannelDtlsPolicy, fgWfActiveXBlocked=fgWfActiveXBlocked, fgWebCacheRequests=fgWebCacheRequests, fgWebCacheDiskStatsEntry=fgWebCacheDiskStatsEntry, fgtVM64AWS=fgtVM64AWS, fgVpnDialupInOctets=fgVpnDialupInOctets, fgr90D=fgr90D, fgApNNTPUpTime=fgApNNTPUpTime, FgWcWlanEncryptionType=FgWcWlanEncryptionType, fgWanOptLanInTraffic=fgWanOptLanInTraffic, FgP2PProto=FgP2PProto, FgHaLBSchedule=FgHaLBSchedule, fgAvTables=fgAvTables, fgAppIMConnBlocked=fgAppIMConnBlocked, fgApIMMemUsage=fgApIMMemUsage, fgt70DPOE=fgt70DPOE, fgtVM64HV=fgtVM64HV, fosVM64=fosVM64, fgWcWtpSessionVapSsid=fgWcWtpSessionVapSsid, fgWcStaWtpId=fgWcStaWtpId, fgExplicitProxyMemUsage=fgExplicitProxyMemUsage, fgFwPol6ID=fgFwPol6ID, fgSIAdvSesSyncQFCount=fgSIAdvSesSyncQFCount, fwf30DPOE=fwf30DPOE, fgProcModFnCE4=fgProcModFnCE4, fgIpsTrapSrcIp=fgIpsTrapSrcIp, fgApSIPUpTime=fgApSIPUpTime, fgTrapAvPattern=fgTrapAvPattern, fgVpnTrapLocalGateway=fgVpnTrapLocalGateway, fgExplicitProxyPolicy=fgExplicitProxyPolicy, fgHaStatsSerial=fgHaStatsSerial, fgWfHTTPBlocked=fgWfHTTPBlocked, fgWcStaIdle=fgWcStaIdle, fgAppVoIP=fgAppVoIP, fgSoftware=fgSoftware, fgApIMStatsTable=fgApIMStatsTable, fgHaTrapObjects=fgHaTrapObjects, fgTrapAvOversizePass=fgTrapAvOversizePass, fgtsoc3=fgtsoc3, fgVdTpMgmtMask=fgVdTpMgmtMask, fgSysSes6Rate1=fgSysSes6Rate1, fgSIAdvMemLeaveProxyConsThrsh=fgSIAdvMemLeaveProxyConsThrsh, fgWcWtpProfileRadioChannelBonding=fgWcWtpProfileRadioChannelBonding, fgSystem=fgSystem, fgAvOversizedBlocked=fgAvOversizedBlocked, fgWcWlanLocalBridging=fgWcWlanLocalBridging, fgWanOptHistoryStatsEntry=fgWanOptHistoryStatsEntry, fgAppVoIPCallBlocked=fgAppVoIPCallBlocked, fgWcWtpSessionWtpDaemonUpTime=fgWcWtpSessionWtpDaemonUpTime, fgWcWtpSessionVapByteRxCount=fgWcWtpSessionVapByteRxCount, fgAdmin=fgAdmin, fgTrapFcSwDown=fgTrapFcSwDown, fgLinkMonitorPacketLoss=fgLinkMonitorPacketLoss, fgWcWtpConfigRadioAutoTxPowerLow=fgWcWtpConfigRadioAutoTxPowerLow, fgWcWtpProfileRadioFrequencyHandoff=fgWcWtpProfileRadioFrequencyHandoff, fgVdEntHaState=fgVdEntHaState, fgWanOptHistoryStatsTable=fgWanOptHistoryStatsTable, fgAvTrapVirName=fgAvTrapVirName, fgWcStaHost=fgWcStaHost, fgTrapFazDisconnect=fgTrapFazDisconnect, fgFmTrapPrefix=fgFmTrapPrefix, fgApSMTPConnections=fgApSMTPConnections, fgSysDiskCapacity=fgSysDiskCapacity, fgVpnInfo=fgVpnInfo, fw60DP=fw60DP, fgtVM64AWSONDEMAND=fgtVM64AWSONDEMAND, fgApHTTPMemUsage=fgApHTTPMemUsage, fgTrapIpsAnomaly=fgTrapIpsAnomaly, fgAppIMStatsTable=fgAppIMStatsTable, fgServerLoadBalance=fgServerLoadBalance, FgHaState=FgHaState, fgWanOptLANBytesOut=fgWanOptLANBytesOut, fgWcWtpProfileEntry=fgWcWtpProfileEntry, fg900D=fg900D, fgSIAdvMemCacheInactive=fgSIAdvMemCacheInactive, fgWcWtpConfigVaps=fgWcWtpConfigVaps, fgIntfVlanHbEntIndex=fgIntfVlanHbEntIndex, fgWcWtpProfileRadioWidsProfile=fgWcWtpProfileRadioWidsProfile, fgUsbportProduct=fgUsbportProduct, fgVpnTunEntIndex=fgVpnTunEntIndex, fgIp6SessStatsTable=fgIp6SessStatsTable, fgFwUserState=fgFwUserState, fgSysSesRate1=fgSysSesRate1, fgWcObjectGroup=fgWcObjectGroup, fgApIMStatsEntry=fgApIMStatsEntry, fgMibConformance=fgMibConformance, fgProcModFnFB4=fgProcModFnFB4, fgIntfVlanHbTable=fgIntfVlanHbTable, fgt90D=fgt90D, fgTrapHaSwitch=fgTrapHaSwitch, fgWcWtpSessionWtpModelNumber=fgWcWtpSessionWtpModelNumber, fgVpnSslTunnelBytesIn=fgVpnSslTunnelBytesIn, FgWcWtpRadioChannelNumber=FgWcWtpRadioChannelNumber, fgWcWtpConfigEntry=fgWcWtpConfigEntry, fgHaStatsPktCount=fgHaStatsPktCount, fgVpnDialupEntry=fgVpnDialupEntry, fgApNNTPMaxConnections=fgApNNTPMaxConnections, fgApSMTPStatsEntry=fgApSMTPStatsEntry, fgWanOptDiskStatsEntry=fgWanOptDiskStatsEntry, fgWfCookieBlocked=fgWfCookieBlocked, fgObsoleteNotificationsGroup=fgObsoleteNotificationsGroup, fgtVM64KVm=fgtVM64KVm, fgHwSensorEntName=fgHwSensorEntName, fgApNNTPStatsTable=fgApNNTPStatsTable, fgVpnSslStatsActiveWebSessions=fgVpnSslStatsActiveWebSessions, fgVpnTunEntLifeBytes=fgVpnTunEntLifeBytes, fgTrapHaMemberUp=fgTrapHaMemberUp, fgWebCacheUpTime=fgWebCacheUpTime, fgWcWtpProfileRadioStationCapacity=fgWcWtpProfileRadioStationCapacity, fgExplicitProxyArchNest=fgExplicitProxyArchNest, FgVdIndex=FgVdIndex, fgProcessorXlr=fgProcessorXlr, fgApHTTPUpTime=fgApHTTPUpTime, fgt30E=fgt30E, fgFwPolPktCount=fgFwPolPktCount, fgIntfVrrpEntIndex=fgIntfVrrpEntIndex, fgWcWtpSessionWtpSwVersion=fgWcWtpSessionWtpSwVersion, fgAdminTables=fgAdminTables, fgt3810D=fgt3810D, fgWcApVdom=fgWcApVdom, fgWcStaUser=fgWcStaUser, fgAppIMMessages=fgAppIMMessages, fgWcWlanMeshBackhaul=fgWcWlanMeshBackhaul, fgApIMUpTime=fgApIMUpTime, FgFwUserAuthType=FgFwUserAuthType, fgHaStatsGlobalChecksum=fgHaStatsGlobalChecksum, fgt80D=fgt80D, fgApNNTPStatsEntry=fgApNNTPStatsEntry, fgUsbModemVendor=fgUsbModemVendor, fgAdminOptions=fgAdminOptions, fgIntfVrrps=fgIntfVrrps, fgFgWfHTTPSOverridden=fgFgWfHTTPSOverridden, fgProcessorTable=fgProcessorTable, fgExplicitProxyVirus=fgExplicitProxyVirus, FgWcWtpChannelWidthType=FgWcWtpChannelWidthType, fgByteCacheRAMLimit=fgByteCacheRAMLimit, fgWcWtpSessionRadioWtpId=fgWcWtpSessionRadioWtpId, FgWcCountryString=FgWcCountryString, fgWcWtpProfileRadioApScan=fgWcWtpProfileRadioApScan, fgProcessorsObjectGroup=fgProcessorsObjectGroup, fgAppWebCache=fgAppWebCache, fgWanOptDisk=fgWanOptDisk, fgAppVoIPStatsTable=fgAppVoIPStatsTable, fgWcWlanAuthentication=fgWcWlanAuthentication, fgProcModFnXG2=fgProcModFnXG2, fgAvFTPVirusDetected=fgAvFTPVirusDetected, fgWanOptWANBytesIn=fgWanOptWANBytesIn, fgSysMemCapacity=fgSysMemCapacity, fgProcessorCount=fgProcessorCount, fgFgWfHTTPLogged=fgFgWfHTTPLogged, fgExplicitProxyStatsTable=fgExplicitProxyStatsTable, fgProcModFnXD4=fgProcModFnXD4, fgWcWtpSessionWtpSessionUpTime=fgWcWtpSessionWtpSessionUpTime, fgExplicitProxyFilteredActiveX=fgExplicitProxyFilteredActiveX, fgDeviceCreated=fgDeviceCreated, fgHaTrapMemberSerial=fgHaTrapMemberSerial, fgUsbModemSimId=fgUsbModemSimId, fgVpnTrapPhase1Name=fgVpnTrapPhase1Name, fgWcWtpProfileTable=fgWcWtpProfileTable, fgAvIMAPVirusBlocked=fgAvIMAPVirusBlocked, fgVpnDialupDstAddr=fgVpnDialupDstAddr, fgHaStatsMasterSerial=fgHaStatsMasterSerial, fgServerLoadBalanceRealServerAddress=fgServerLoadBalanceRealServerAddress, fgWcWtpConfigWtpId=fgWcWtpConfigWtpId, fgApIMAPMemUsage=fgApIMAPMemUsage, fgFmTrapGroup=fgFmTrapGroup, fgAvIMVirusBlocked=fgAvIMVirusBlocked, fgIntfVlanHbCount=fgIntfVlanHbCount, fgWcInfo=fgWcInfo, fgWcWtpSessionWtpBootVersion=fgWcWtpSessionWtpBootVersion, fgIntfTables=fgIntfTables, fgExplicitProxyFilteredOthScript=fgExplicitProxyFilteredOthScript, fgWcWtpSessionWtpByteTxCount=fgWcWtpSessionWtpByteTxCount, fgSysSesCount=fgSysSesCount, fgAdminObjectGroup=fgAdminObjectGroup, fgApFTPMemUsage=fgApFTPMemUsage, fgApIMAPMaxConnections=fgApIMAPMaxConnections, fgProcessorFnNP6=fgProcessorFnNP6, fgApIMAPStatsTable=fgApIMAPStatsTable, fgAvPOP3VirusBlocked=fgAvPOP3VirusBlocked, fgApFTPReqProcessed=fgApFTPReqProcessed, fgAppIMFileTxBlocked=fgAppIMFileTxBlocked, fgIpsTables=fgIpsTables, fgSysLowMemUsage=fgSysLowMemUsage, fgHaStatsIdsCount=fgHaStatsIdsCount, fgUsbModemInfoGroup=fgUsbModemInfoGroup, fgt92D=fgt92D, fgt240DP=fgt240DP, fgIpSessProto=fgIpSessProto, fgProcessorFnSoc=fgProcessorFnSoc, fgWcApSerial=fgWcApSerial, fwf30E=fwf30E, fwf90DPOE=fwf90DPOE, fgWcWtpSessionRadioOperatingPower=fgWcWtpSessionRadioOperatingPower, fgProcessorFnNP4=fgProcessorFnNP4, fgHaOverride=fgHaOverride, fgWcWtpSessionRadioCountryString=fgWcWtpSessionRadioCountryString, fgAvStatsTable=fgAvStatsTable, fgWanOptTrafficStatsTable=fgWanOptTrafficStatsTable, fgWcWtpSessionWtpLocalIpAddress=fgWcWtpSessionWtpLocalIpAddress, fgSysMemUsage=fgSysMemUsage, fgHwSensorEntIndex=fgHwSensorEntIndex, fgAdminIdleTimeout=fgAdminIdleTimeout, fgDeviceLastSeen=fgDeviceLastSeen, fgWcWlanSecurity=fgWcWlanSecurity, fgSystemInfo=fgSystemInfo, fgWanOptWanTraffic=fgWanOptWanTraffic, fgt1500D=fgt1500D, fgVdTpTable=fgVdTpTable, fgHwSensorTable=fgHwSensorTable, fgApSIPClientReg=fgApSIPClientReg, fgIntfVrrpEntVrIp=fgIntfVrrpEntVrIp, fgApHTTPMaxConnections=fgApHTTPMaxConnections, fgAppSuFileScanned=fgAppSuFileScanned, fgHaStatsSyncDatimeUnsucc=fgHaStatsSyncDatimeUnsucc, fgHwSensorCount=fgHwSensorCount, fgAvVirusDetected=fgAvVirusDetected, fgWcInfoWtpCapacity=fgWcInfoWtpCapacity, fgVpnSslTunnelIp=fgVpnSslTunnelIp, fgFirewall=fgFirewall, fgFwUsers=fgFwUsers)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgExplicitProxyUsers=fgExplicitProxyUsers, fgFgWfHTTPSExamined=fgFgWfHTTPSExamined, fgLinkMonitorEntry=fgLinkMonitorEntry, fgTrapAvOversize=fgTrapAvOversize, fgt500D=fgt500D, fgUsbportPlugged=fgUsbportPlugged, fgFwUserNumber=fgFwUserNumber, fgVpnSslStatsActiveTunnels=fgVpnSslStatsActiveTunnels, fgWcWtpProfileRadioVaps=fgWcWtpProfileRadioVaps, fgLinkMonitorNumber=fgLinkMonitorNumber, fgUsbModemNetwork=fgUsbModemNetwork, fgFwUserInfo=fgFwUserInfo, fgSysUpTime=fgSysUpTime, fgProcModFnF20=fgProcModFnF20, fgServerLoadBalanceTrapObjects=fgServerLoadBalanceTrapObjects, FgWcWlanAuthenticationType=FgWcWlanAuthenticationType, fgVpnTunEntSelectorSrcEndIp=fgVpnTunEntSelectorSrcEndIp, fgWanOptReductionRate=fgWanOptReductionRate, fgWanOptHistPeriod=fgWanOptHistPeriod, fgHaStatsSesCount=fgHaStatsSesCount, fgWcInfoWtpSessions=fgWcInfoWtpSessions, fgUsbModemInfo=fgUsbModemInfo, fgAntivirusObjectGroup=fgAntivirusObjectGroup, fgApNNTPReqProcessed=fgApNNTPReqProcessed, fgAdminLcdProtection=fgAdminLcdProtection, fgTrapIpsSignature=fgTrapIpsSignature, fgWcStaBandwidthTx=fgWcStaBandwidthTx, fgIntfEntry=fgIntfEntry, fgSysSes6Rate60=fgSysSes6Rate60, fgFortiGuardStatsTable=fgFortiGuardStatsTable, fgExplicitProxyBlockedURLs=fgExplicitProxyBlockedURLs, fgAppProxySMTP=fgAppProxySMTP, fgWcStaNoise=fgWcStaNoise, fgAdminEntry=fgAdminEntry, fgt50E=fgt50E, fgFwPolInfo=fgFwPolInfo, fgAppProxyHTTP=fgAppProxyHTTP, fgHaStatsHostname=fgHaStatsHostname, fgSIAdvSesClashCount=fgSIAdvSesClashCount, fgLinkMonitorLatency=fgLinkMonitorLatency, fgt5001C=fgt5001C, fgApPOP3Connections=fgApPOP3Connections, fgProcessorUsage=fgProcessorUsage, fgAvSMTPVirusDetected=fgAvSMTPVirusDetected, fgUsbportEntIndex=fgUsbportEntIndex, fgt140D=fgt140D, fgFcSwSerial=fgFcSwSerial, fgAppProxyNNTP=fgAppProxyNNTP, fgWanOptObjectGroup=fgWanOptObjectGroup, fgApPOP3StatsTable=fgApPOP3StatsTable, fgIntfVrrpEntIfName=fgIntfVrrpEntIfName, fgWebCacheDiskHits=fgWebCacheDiskHits, fgApFTPUpTime=fgApFTPUpTime, fgApHTTPStatsTable=fgApHTTPStatsTable, fgAvStatsEntry=fgAvStatsEntry, fgVpnTunEntRemGwyPort=fgVpnTunEntRemGwyPort, fgWebfilterStatsEntry=fgWebfilterStatsEntry, fgWcWtpSessionConnectionState=fgWcWtpSessionConnectionState, fgFirewallObjectGroup=fgFirewallObjectGroup, fgVpnTunEntPhase2Name=fgVpnTunEntPhase2Name, fgWanOptLanTraffic=fgWanOptLanTraffic, fgObsolteMIBCompliance=fgObsolteMIBCompliance, fgVdEntMemUsage=fgVdEntMemUsage, fgSIAdvMemLeaveKerConsThrsh=fgSIAdvMemLeaveKerConsThrsh, fgWcWtpConfigTable=fgWcWtpConfigTable, fgServerLoadBalanceObjectGroup=fgServerLoadBalanceObjectGroup, fgExplicitProxyScanStatsEntry=fgExplicitProxyScanStatsEntry, fgFwUserAuth=fgFwUserAuth, fgt800C=fgt800C, fgAdminVdom=fgAdminVdom, fgAvFTPVirusBlocked=fgAvFTPVirusBlocked, fgWebCacheDiskLimit=fgWebCacheDiskLimit, fgFwPol6LastUsed=fgFwPol6LastUsed, fgVpnSslTunnelEntry=fgVpnSslTunnelEntry, fgExplicitProxyRequests=fgExplicitProxyRequests, fgFwPol6ByteCount=fgFwPol6ByteCount, fgWcStaOnline=fgWcStaOnline, fgVpnTunEntSelectorProto=fgVpnTunEntSelectorProto, fgProcessorOther=fgProcessorOther, fgExplicitProxyLoggedURLs=fgExplicitProxyLoggedURLs, fgApIMAPStatsEntry=fgApIMAPStatsEntry, fgFwPolStatsTable=fgFwPolStatsTable, fgProcessorEntry=fgProcessorEntry, FgWcWtpRadioBandType=FgWcWtpRadioBandType, fgFwUserAuthTimeout=fgFwUserAuthTimeout, fgIpsMedSevDetections=fgIpsMedSevDetections, fgWebCacheRAMMisses=fgWebCacheRAMMisses, fgVpnSslTunnelIndex=fgVpnSslTunnelIndex, fgProcessorSysUsage=fgProcessorSysUsage, fgWcApName=fgWcApName, fgTrapAvVirus=fgTrapAvVirus, fgTrapAvEnterConserve=fgTrapAvEnterConserve, fgProcModIntegratedNPU=fgProcModIntegratedNPU, fgFwUserTables=fgFwUserTables, fgVpnTrapRemoteGateway=fgVpnTrapRemoteGateway, fgWcWtpSessionRadioStationCount=fgWcWtpSessionRadioStationCount, fgVpnTunEntPhase1Name=fgVpnTunEntPhase1Name, fgAppSuStatsEntry=fgAppSuStatsEntry, fgWebCacheRAMHits=fgWebCacheRAMHits, fgIpSessFromAddr=fgIpSessFromAddr, fgVpnTunEntVdom=fgVpnTunEntVdom, fgt200DP=fgt200DP, fgFcTrapObjects=fgFcTrapObjects, fgWebCacheObjectGroup=fgWebCacheObjectGroup, fgWcWtpSessionVapTable=fgWcWtpSessionVapTable, fgWcWtpSessionRadioTable=fgWcWtpSessionRadioTable, fgIpsStatsEntry=fgIpsStatsEntry, fgAppProxyFTP=fgAppProxyFTP, fgProcModFnXD2=fgProcModFnXD2, FgHaStatsSyncStatusType=FgHaStatsSyncStatusType, fgVpnSslTunnelUpTime=fgVpnSslTunnelUpTime, fgVdTpMgmtAddr=fgVdTpMgmtAddr, fgVpnSslTunnelVdom=fgVpnSslTunnelVdom, fgProcModSACount=fgProcModSACount, fgExplicitProxyArchBomb=fgExplicitProxyArchBomb, fgProcModFnC20=fgProcModFnC20, fgWcStaIpAddress=fgWcStaIpAddress, fgAdministrationObjectGroup=fgAdministrationObjectGroup, fgWebCacheBypass=fgWebCacheBypass, fgApIMAPConnections=fgApIMAPConnections, fgWcStaVci=fgWcStaVci, fgIpsAnomalyDetections=fgIpsAnomalyDetections, fgWcStaGroup=fgWcStaGroup, fgTrapWcApDown=fgTrapWcApDown, fgExplicitProxyOverriddenURLs=fgExplicitProxyOverriddenURLs, fgIntfVlanHbEntSerial=fgIntfVlanHbEntSerial, fgLinkMonitorJitter=fgLinkMonitorJitter, fgProcessorFnNP2=fgProcessorFnNP2, fgFwPol6PktCount=fgFwPol6PktCount, fgWanOptDiskLimit=fgWanOptDiskLimit, fgManIfIp=fgManIfIp, fgVdInfo=fgVdInfo, fgAvHTTPVirusBlocked=fgAvHTTPVirusBlocked, fgtVM64=fgtVM64, fgSysVersionIps=fgSysVersionIps, fgInetProto=fgInetProto, fgUsbportClass=fgUsbportClass, fgVpnSslTunnelUserName=fgVpnSslTunnelUserName, fgWcWlanRadiusServer=fgWcWlanRadiusServer, fgWanOptDiskHits=fgWanOptDiskHits, fgWanOptUpTime=fgWanOptUpTime, fgUsbportManufacturer=fgUsbportManufacturer, fgt600D=fgt600D, fgVdTpEntry=fgVdTpEntry, fgWebFilterObjectGroup=fgWebFilterObjectGroup, fgVdEntSesRate=fgVdEntSesRate, fgSIAdvSesEphemeralCount=fgSIAdvSesEphemeralCount, fgApSIPCallHandling=fgApSIPCallHandling, fgVpnTunEntInOctets=fgVpnTunEntInOctets)
