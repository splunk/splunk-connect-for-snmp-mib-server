#
# PySNMP MIB module REMOTEACCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REMOTEACCESS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:47:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
rmon, = mibBuilder.importSymbols("RMON-MIB", "rmon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ObjectIdentity, Unsigned32, enterprises, Integer32, TimeTicks, NotificationType, iso, transmission, ModuleIdentity, MibIdentifier, Bits, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Unsigned32", "enterprises", "Integer32", "TimeTicks", "NotificationType", "iso", "transmission", "ModuleIdentity", "MibIdentifier", "Bits", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    pass

sonix = MibIdentifier((1, 3, 6, 1, 4, 1, 559))
sonixMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1))
registration = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2))
cscmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 3))
regArpeggio = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 10))
arpStandard = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 10, 1))
arpFocus = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 10, 2))
arpOffice = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 10, 3))
arpPlus = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 10, 4))
arpMultiLan = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 10, 5))
arpLite = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 10, 6))
arpPlusRPrimary = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 10, 7))
arpPlusRBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 10, 8))
officeConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 13))
tftp = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 19))
officeConnectRemote510s = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 13, 1))
officeConnectRemote520s = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 13, 2))
officeConnectRemote530s = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 13, 3))
officeConnectRemote510u = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 13, 4))
officeConnectRemote520u = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 13, 5))
officeConnectRemote530u = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 13, 6))
officeConnectRemote531s = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 13, 7))
officeConnectRemote531u = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 13, 8))
accessBuilder = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 14))
accessBuilderRemoteUser400s = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 14, 1))
accessBuilderRemoteUser400u = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 14, 2))
accessBuilderInternet400s = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 14, 3))
accessBuilderInternet400u = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 14, 4))
accessBuilderRemoteOffice500 = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 14, 5))
accessBuilderRemoteOffice600 = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 14, 6))
accessBuilderRemoteOffice700 = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 14, 7))
accessBuilder7000BriBridgeRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 14, 8))
accessBuilder7000PriBridgeRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 14, 9))
serviceConnect2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 15))
serviceConnect2000Base = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 15, 1))
serviceConnect2000BaseBri = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 15, 1, 1))
serviceConnect2000BasePri = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 2, 15, 1, 2))
remoteaccessMib = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1))
ports = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 2))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 4))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 1))
isdnFailCause = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 2))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 3))
login = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 4))
mlink = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 1))
filter = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2))
authorised = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 3))
isdn = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4))
autocall = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1))
isdnbands = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2))
isdnnumbers = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3))
isdnports = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4))
isdnhistory = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 5))
isdncla = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 6))
isdnlists = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 7))
isdnParams = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8))
bootp = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9))
ip = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25))
iprip = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1))
ipx = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26))
ipxrip = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11))
ipxrt = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12))
ipxsap = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 13))
ipxsapt = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14))
ipxnear = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 15))
pppext = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27))
firewall = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28))
users = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 29))
ipnat = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 32))
dhcpserver = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33))
dnsproxy = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35))
memoryusage = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 36))
traptable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37), )
if mibBuilder.loadTexts: traptable.setStatus('mandatory')
ppp = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23))
variant = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: variant.setStatus('mandatory')
version = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('mandatory')
unitname = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitname.setStatus('mandatory')
save = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: save.setStatus('mandatory')
standard = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standard.setStatus('mandatory')
saverequired = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saverequired.setStatus('mandatory')
date = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: date.setStatus('mandatory')
time = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: time.setStatus('mandatory')
dayoftheweek = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dayoftheweek.setStatus('mandatory')
managertimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managertimeout.setStatus('mandatory')
unitipad = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitipad.setStatus('mandatory')
unitmacaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitmacaddress.setStatus('mandatory')
defaultalert = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("beep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultalert.setStatus('mandatory')
incallalert = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("beep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: incallalert.setStatus('mandatory')
publiccommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: publiccommunity.setStatus('mandatory')
privatecommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privatecommunity.setStatus('mandatory')
trapaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapaddress.setStatus('mandatory')
trapport = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapport.setStatus('mandatory')
lcdManagerLock = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcdManagerLock.setStatus('mandatory')
loopControl = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopControl.setStatus('mandatory')
novelltimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: novelltimeout.setStatus('mandatory')
timeSinceReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeSinceReboot.setStatus('mandatory')
passwdsTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 23), )
if mibBuilder.loadTexts: passwdsTable.setStatus('mandatory')
passwdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 23, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "passwdsOld"))
if mibBuilder.loadTexts: passwdsEntry.setStatus('mandatory')
passwdsOld = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 23, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwdsOld.setStatus('mandatory')
passwdsNew = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 23, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwdsNew.setStatus('mandatory')
portsTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1), )
if mibBuilder.loadTexts: portsTable.setStatus('mandatory')
portsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "portsIndex"))
if mibBuilder.loadTexts: portsEntry.setStatus('mandatory')
portsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsIndex.setStatus('mandatory')
portsName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsName.setStatus('mandatory')
portsType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 0), ("async", 2), ("hdlc", 3), ("ppp", 4), ("ethernet", 5), ("ta", 6), ("repeater", 7), ("voice", 8), ("slip", 9), ("slipMMIauto", 10), ("tpad", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsType.setStatus('mandatory')
portsPhys = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("v35", 1), ("x21", 2), ("v24", 3), ("isdn", 4), ("aui", 5), ("tenBase2", 6), ("tenBaseT", 7), ("analogue", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsPhys.setStatus('mandatory')
portsTxutil = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsTxutil.setStatus('mandatory')
portsRxutil = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsRxutil.setStatus('mandatory')
portsCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsCompress.setStatus('mandatory')
portsState = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsState.setStatus('mandatory')
portsRxoctets = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsRxoctets.setStatus('mandatory')
portsTxoctets = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsTxoctets.setStatus('mandatory')
portsRxpackets = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsRxpackets.setStatus('mandatory')
portsTxpackets = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsTxpackets.setStatus('mandatory')
portsRxerrs = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsRxerrs.setStatus('mandatory')
portsTxerrs = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsTxerrs.setStatus('mandatory')
portslanTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2), )
if mibBuilder.loadTexts: portslanTable.setStatus('mandatory')
portslanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "portslanIndex"))
if mibBuilder.loadTexts: portslanEntry.setStatus('mandatory')
portslanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portslanIndex.setStatus('mandatory')
portslanName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portslanName.setStatus('mandatory')
portslanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portslanPriority.setStatus('mandatory')
portslanLinespeed = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portslanLinespeed.setStatus('mandatory')
portslanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portslanIpAddress.setStatus('mandatory')
portslanIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portslanIpMask.setStatus('mandatory')
portslanIpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portslanIpMetric.setStatus('mandatory')
portslanIpxNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portslanIpxNetwork.setStatus('mandatory')
portslanIpxType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("ieee802dot2", 2), ("novell802dot3", 3), ("snap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portslanIpxType.setStatus('mandatory')
portshdlcTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3), )
if mibBuilder.loadTexts: portshdlcTable.setStatus('mandatory')
portshdlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "portshdlcIndex"))
if mibBuilder.loadTexts: portshdlcEntry.setStatus('mandatory')
portshdlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portshdlcIndex.setStatus('mandatory')
portshdlcName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcName.setStatus('mandatory')
portshdlcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcPriority.setStatus('mandatory')
portshdlcLinespeed = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcLinespeed.setStatus('mandatory')
portshdlcCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("lzStandard", 1), ("lzWhite", 2), ("stac", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcCompression.setStatus('mandatory')
portshdlcScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcScramble.setStatus('mandatory')
portshdlcBackupdemand = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("backup", 1), ("demand", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcBackupdemand.setStatus('mandatory')
portshdlcDemandthresh = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcDemandthresh.setStatus('mandatory')
portshdlcDemandperiod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcDemandperiod.setStatus('mandatory')
portshdlcIdlethresh = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcIdlethresh.setStatus('mandatory')
portshdlcIdleperiod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcIdleperiod.setStatus('mandatory')
portshdlcBackupalert = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("beep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcBackupalert.setStatus('mandatory')
portshdlcDemandpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcDemandpriority.setStatus('mandatory')
portshdlcBackuppriority = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcBackuppriority.setStatus('mandatory')
portshdlcBackupnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcBackupnumber.setStatus('mandatory')
portshdlcBackupMac = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 16), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcBackupMac.setStatus('mandatory')
portshdlcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcIpAddress.setStatus('mandatory')
portshdlcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcIpMask.setStatus('mandatory')
portshdlcIpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcIpMetric.setStatus('mandatory')
portshdlcIpxNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcIpxNetwork.setStatus('mandatory')
portshdlcIpxType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("ieee802dot2", 2), ("novell802dot3", 3), ("snap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portshdlcIpxType.setStatus('mandatory')
portspppTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4), )
if mibBuilder.loadTexts: portspppTable.setStatus('mandatory')
portspppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "portspppIndex"))
if mibBuilder.loadTexts: portspppEntry.setStatus('mandatory')
portspppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portspppIndex.setStatus('mandatory')
portspppName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppName.setStatus('mandatory')
portspppPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppPriority.setStatus('mandatory')
portspppLinespeed = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppLinespeed.setStatus('mandatory')
portspppIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppIpAddress.setStatus('mandatory')
portspppIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppIpMask.setStatus('mandatory')
portspppIpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppIpMetric.setStatus('mandatory')
portspppIpxNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppIpxNetwork.setStatus('mandatory')
portspppIpxType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("ieee802dot2", 2), ("novell802dot3", 3), ("snap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppIpxType.setStatus('mandatory')
portspppBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bd1200", 1), ("bd2400", 2), ("bd4800", 3), ("bd9600", 4), ("bd19200", 5), ("bd38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppBaud.setStatus('mandatory')
portspppDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("data-7-bits", 7), ("data-8-bits", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppDataBits.setStatus('mandatory')
portspppStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data-1-bits", 1), ("data-2-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppStopBits.setStatus('mandatory')
portspppFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rts", 1), ("xon", 2), ("halfxon", 3), ("rts-on-tx", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppFlowControl.setStatus('mandatory')
portspppTxParity = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppTxParity.setStatus('mandatory')
portspppRxParity = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppRxParity.setStatus('mandatory')
portspppRemoteUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("r3com", 2), ("cisco", 3), ("ascend", 4), ("spider", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppRemoteUnit.setStatus('mandatory')
portspppIPRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 4, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portspppIPRemoteAddress.setStatus('mandatory')
portstaTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5), )
if mibBuilder.loadTexts: portstaTable.setStatus('mandatory')
portstaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "portstaIndex"))
if mibBuilder.loadTexts: portstaEntry.setStatus('mandatory')
portstaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portstaIndex.setStatus('mandatory')
portstaName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaName.setStatus('mandatory')
portstaPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaPriority.setStatus('mandatory')
portstaLinespeed = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaLinespeed.setStatus('mandatory')
portstaCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("lzStandard", 1), ("lzWhite", 2), ("stac", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaCompression.setStatus('mandatory')
portstaScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaScramble.setStatus('mandatory')
portstaDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaDemand.setStatus('mandatory')
portstaDemandthresh = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaDemandthresh.setStatus('mandatory')
portstaDemandperiod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaDemandperiod.setStatus('mandatory')
portstaIdlethresh = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaIdlethresh.setStatus('mandatory')
portstaIdleperiod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaIdleperiod.setStatus('mandatory')
portstaDemandpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaDemandpriority.setStatus('mandatory')
portstaDialtimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaDialtimeout.setStatus('mandatory')
portstaAtzstring = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaAtzstring.setStatus('mandatory')
portstaSpidstring = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 5, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstaSpidstring.setStatus('mandatory')
portsslipTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6), )
if mibBuilder.loadTexts: portsslipTable.setStatus('mandatory')
portsslipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "portsslipIndex"))
if mibBuilder.loadTexts: portsslipEntry.setStatus('mandatory')
portsslipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsslipIndex.setStatus('mandatory')
portsslipName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipName.setStatus('mandatory')
portsslipPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipPriority.setStatus('mandatory')
portsslipLinespeed = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipLinespeed.setStatus('mandatory')
portsslipIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipIpAddress.setStatus('mandatory')
portsslipIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipIpMask.setStatus('mandatory')
portsslipIpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipIpMetric.setStatus('mandatory')
portsslipBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bd1200", 1), ("bd2400", 2), ("bd4800", 3), ("bd9600", 4), ("bd19200", 5), ("bd38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipBaud.setStatus('mandatory')
portsslipDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("data-7-bits", 7), ("data-8-bits", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsslipDataBits.setStatus('mandatory')
portsslipStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data-1-bits", 1), ("data-2-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipStopBits.setStatus('mandatory')
portsslipFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5))).clone(namedValues=NamedValues(("rts", 1), ("rts-on-tx", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipFlowControl.setStatus('mandatory')
portsslipTxParity = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsslipTxParity.setStatus('mandatory')
portsslipRxParity = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsslipRxParity.setStatus('mandatory')
portsslipMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipMTU.setStatus('mandatory')
portsslipRIPPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipRIPPrivate.setStatus('mandatory')
portsslipIPRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 6, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsslipIPRemoteAddress.setStatus('mandatory')
portsasyncTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 7), )
if mibBuilder.loadTexts: portsasyncTable.setStatus('mandatory')
portsasyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 7, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "portsasyncIndex"))
if mibBuilder.loadTexts: portsasyncEntry.setStatus('mandatory')
portsasyncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsasyncIndex.setStatus('mandatory')
portsasyncName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsasyncName.setStatus('mandatory')
portsasyncBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bd1200", 1), ("bd2400", 2), ("bd4800", 3), ("bd9600", 4), ("bd19200", 5), ("bd38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsasyncBaud.setStatus('mandatory')
portsasyncDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("data-7-bits", 7), ("data-8-bits", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsasyncDataBits.setStatus('mandatory')
portsasyncStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data-1-bits", 1), ("data-2-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsasyncStopBits.setStatus('mandatory')
portsasyncFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("rtscts", 1), ("xonxoff", 2), ("none", 5), ("both", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsasyncFlowControl.setStatus('mandatory')
portsasyncTxParity = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsasyncTxParity.setStatus('mandatory')
portsasyncRxParity = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsasyncRxParity.setStatus('mandatory')
portsvoiceTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 8), )
if mibBuilder.loadTexts: portsvoiceTable.setStatus('mandatory')
portsvoiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 8, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "portsvoiceIndex"))
if mibBuilder.loadTexts: portsvoiceEntry.setStatus('mandatory')
portsvoiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsvoiceIndex.setStatus('mandatory')
portsvoiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsvoiceName.setStatus('mandatory')
portsvoiceCallsPermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inout", 0), ("in", 1), ("out", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsvoiceCallsPermitted.setStatus('mandatory')
portsvoiceEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alaw", 0), ("ulaw", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsvoiceEncoding.setStatus('mandatory')
portsvoiceDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("overlap", 0), ("enbloc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portsvoiceDialMode.setStatus('mandatory')
portstpadTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9), )
if mibBuilder.loadTexts: portstpadTable.setStatus('mandatory')
portstpadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "portstpadIndex"))
if mibBuilder.loadTexts: portstpadEntry.setStatus('mandatory')
portstpadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portstpadIndex.setStatus('mandatory')
portstpadName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstpadName.setStatus('mandatory')
portstpadBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bd1200", 1), ("bd2400", 2), ("bd4800", 3), ("bd9600", 4), ("bd19200", 5), ("bd38400", 6), ("bd57600", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstpadBaud.setStatus('mandatory')
portstpadDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("data-7-bits", 7), ("data-8-bits", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstpadDataBits.setStatus('mandatory')
portstpadStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data-1-bits", 1), ("data-2-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstpadStopBits.setStatus('mandatory')
portstpadParity = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstpadParity.setStatus('mandatory')
portstpadTxFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("rtscts", 1), ("xonxoff", 2), ("none", 5), ("both", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstpadTxFlowControl.setStatus('mandatory')
portstpadRxFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("rtscts", 1), ("xonxoff", 2), ("none", 5), ("both", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstpadRxFlowControl.setStatus('mandatory')
portstpadX25MinLCN = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstpadX25MinLCN.setStatus('mandatory')
portstpadX25MaxLCN = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 2, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portstpadX25MaxLCN.setStatus('mandatory')
mlinkTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 1, 1), )
if mibBuilder.loadTexts: mlinkTable.setStatus('mandatory')
mlinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 1, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "mlinkIndex"))
if mibBuilder.loadTexts: mlinkEntry.setStatus('mandatory')
mlinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkIndex.setStatus('mandatory')
mlinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkName.setStatus('mandatory')
mlinkNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkNumberOfPorts.setStatus('mandatory')
mlinkInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkInFrames.setStatus('mandatory')
mlinkOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkOutFrames.setStatus('mandatory')
mlinkInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkInDiscards.setStatus('mandatory')
mlinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkState.setStatus('mandatory')
filterTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 1), )
if mibBuilder.loadTexts: filterTable.setStatus('mandatory')
filterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "filterDest"), (0, "REMOTEACCESS-MIB", "filterSource"))
if mibBuilder.loadTexts: filterEntry.setStatus('mandatory')
filterDest = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDest.setStatus('mandatory')
filterSource = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSource.setStatus('mandatory')
filterPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterPrimary.setStatus('mandatory')
filterType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permanent", 1), ("learned", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterType.setStatus('mandatory')
filterRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterRoute.setStatus('mandatory')
filterPacketcount = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPacketcount.setStatus('mandatory')
filterBytecount = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterBytecount.setStatus('mandatory')
filtertypeTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 2), )
if mibBuilder.loadTexts: filtertypeTable.setStatus('mandatory')
filtertypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 2, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "filtertypeIndex"))
if mibBuilder.loadTexts: filtertypeEntry.setStatus('mandatory')
filtertypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filtertypeIndex.setStatus('mandatory')
filtertypeClass = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ieee", 0), ("ethernet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filtertypeClass.setStatus('mandatory')
filtertypeLsap = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filtertypeLsap.setStatus('mandatory')
filtertypeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("edit", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filtertypeMode.setStatus('mandatory')
filterAgingtime = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterAgingtime.setStatus('mandatory')
filterLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterLearning.setStatus('mandatory')
filterActiononmatch = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("reject", 0), ("forward", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterActiononmatch.setStatus('mandatory')
filterFiltermcast = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterFiltermcast.setStatus('mandatory')
filterTypematching = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTypematching.setStatus('mandatory')
filterTypematchaction = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("reject", 0), ("forward", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTypematchaction.setStatus('mandatory')
filterLearnsourceonmcast = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterLearnsourceonmcast.setStatus('mandatory')
filterFlushall = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterFlushall.setStatus('mandatory')
filterLearnnovell = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterLearnnovell.setStatus('mandatory')
filterLearnbridging = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterLearnbridging.setStatus('mandatory')
authorisedTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 3, 1), )
if mibBuilder.loadTexts: authorisedTable.setStatus('mandatory')
authorisedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 3, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "authorisedIndex"))
if mibBuilder.loadTexts: authorisedEntry.setStatus('mandatory')
authorisedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authorisedIndex.setStatus('mandatory')
authorisedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authorisedAddress.setStatus('mandatory')
authorisedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("edit", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authorisedMode.setStatus('mandatory')
autocallMacTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 2), )
if mibBuilder.loadTexts: autocallMacTable.setStatus('mandatory')
autocallMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 2, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "autocallMacIndex"))
if mibBuilder.loadTexts: autocallMacEntry.setStatus('mandatory')
autocallMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: autocallMacIndex.setStatus('mandatory')
autocallMacDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallMacDefault.setStatus('mandatory')
autocallMacBumpable = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallMacBumpable.setStatus('mandatory')
autocallMacIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallMacIdle.setStatus('mandatory')
autocallMacIdleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallMacIdleThreshold.setStatus('mandatory')
autocallMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallMacAddress.setStatus('mandatory')
autocallMacIsdn = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallMacIsdn.setStatus('mandatory')
autocallMacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("delete", 1), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallMacMode.setStatus('mandatory')
autocallIpTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3), )
if mibBuilder.loadTexts: autocallIpTable.setStatus('mandatory')
autocallIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "autocallIpIndex"))
if mibBuilder.loadTexts: autocallIpEntry.setStatus('mandatory')
autocallIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: autocallIpIndex.setStatus('mandatory')
autocallIpBumpable = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpBumpable.setStatus('mandatory')
autocallIpIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpIdle.setStatus('mandatory')
autocallIpIdleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpIdleThreshold.setStatus('mandatory')
autocallIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpAddress.setStatus('mandatory')
autocallIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpMask.setStatus('mandatory')
autocallIpInverse = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpInverse.setStatus('mandatory')
autocallIpIsdn = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpIsdn.setStatus('mandatory')
autocallIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("delete", 1), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpMode.setStatus('mandatory')
autocallIpxSapTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4), )
if mibBuilder.loadTexts: autocallIpxSapTable.setStatus('mandatory')
autocallIpxSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "autocallIpxSapIndex"))
if mibBuilder.loadTexts: autocallIpxSapEntry.setStatus('mandatory')
autocallIpxSapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: autocallIpxSapIndex.setStatus('mandatory')
autocallIpxSapServer = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapServer.setStatus('mandatory')
autocallIpxSapNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapNetwork.setStatus('mandatory')
autocallIpxSapNode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapNode.setStatus('mandatory')
autocallIpxSapSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapSocket.setStatus('mandatory')
autocallIpxSapService = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapService.setStatus('mandatory')
autocallIpxSapHops = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapHops.setStatus('mandatory')
autocallIpxSapIsdn = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapIsdn.setStatus('mandatory')
autocallIpxSapFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("etherII", 1), ("ieee8022", 2), ("ieee8023", 3), ("snap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapFrameType.setStatus('mandatory')
autocallIpxSapDirectNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapDirectNetwork.setStatus('mandatory')
autocallIpxSapRouterMac = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 11), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapRouterMac.setStatus('mandatory')
autocallIpxSapNearest = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapNearest.setStatus('mandatory')
autocallIpxSapPpp = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapPpp.setStatus('mandatory')
autocallIpxSapIsdnType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("lapb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapIsdnType.setStatus('mandatory')
autocallIpxSapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("delete", 1), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxSapMode.setStatus('mandatory')
autocallIpxTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5), )
if mibBuilder.loadTexts: autocallIpxTable.setStatus('mandatory')
autocallIpxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "autocallIpxIndex"))
if mibBuilder.loadTexts: autocallIpxEntry.setStatus('mandatory')
autocallIpxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: autocallIpxIndex.setStatus('mandatory')
autocallIpxNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxNetwork.setStatus('mandatory')
autocallIpxNode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxNode.setStatus('mandatory')
autocallIpxPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxPacketType.setStatus('mandatory')
autocallIpxTransportControl = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxTransportControl.setStatus('mandatory')
autocallIpxIsdn = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxIsdn.setStatus('mandatory')
autocallIpxBumpable = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxBumpable.setStatus('mandatory')
autocallIpxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxIdle.setStatus('mandatory')
autocallIpxIdleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxIdleThreshold.setStatus('mandatory')
autocallIpxDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxDefault.setStatus('mandatory')
autocallIpxFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("etherII", 1), ("ieee8022", 2), ("ieee8023", 3), ("snap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxFrameType.setStatus('mandatory')
autocallIpxPpp = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxPpp.setStatus('mandatory')
autocallIpxIsdnType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("lapb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxIsdnType.setStatus('mandatory')
autocallIpxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("delete", 1), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxMode.setStatus('mandatory')
autocallIpxRipTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6), )
if mibBuilder.loadTexts: autocallIpxRipTable.setStatus('mandatory')
autocallIpxRipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "autocallIpxRipIndex"))
if mibBuilder.loadTexts: autocallIpxRipEntry.setStatus('mandatory')
autocallIpxRipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: autocallIpxRipIndex.setStatus('mandatory')
autocallIpxRipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipNetwork.setStatus('mandatory')
autocallIpxRipHops = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipHops.setStatus('mandatory')
autocallIpxRipTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipTicks.setStatus('mandatory')
autocallIpxRipNode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipNode.setStatus('mandatory')
autocallIpxRipIsdn = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipIsdn.setStatus('mandatory')
autocallIpxRipFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("etherII", 1), ("ieee8022", 2), ("ieee8023", 3), ("snap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipFrameType.setStatus('mandatory')
autocallIpxRipDirectNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipDirectNetwork.setStatus('mandatory')
autocallIpxRipRouterMac = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipRouterMac.setStatus('mandatory')
autocallIpxRipLinkTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipLinkTicks.setStatus('mandatory')
autocallIpxRipPpp = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipPpp.setStatus('mandatory')
autocallIpxRipIsdnType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("lapb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipIsdnType.setStatus('mandatory')
autocallIpxRipMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("delete", 1), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallIpxRipMode.setStatus('mandatory')
autocallDialTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 7), )
if mibBuilder.loadTexts: autocallDialTable.setStatus('mandatory')
autocallDialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 7, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "autocallDialIndex"))
if mibBuilder.loadTexts: autocallDialEntry.setStatus('mandatory')
autocallDialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: autocallDialIndex.setStatus('mandatory')
autocallDialCli = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallDialCli.setStatus('mandatory')
autocallDialIsdn = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallDialIsdn.setStatus('mandatory')
autocallDialBumpable = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallDialBumpable.setStatus('mandatory')
autocallDialIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallDialIdle.setStatus('mandatory')
autocallDialIdleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallDialIdleThreshold.setStatus('mandatory')
autocallDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("delete", 1), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autocallDialMode.setStatus('mandatory')
isdnbandsTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1), )
if mibBuilder.loadTexts: isdnbandsTable.setStatus('mandatory')
isdnbandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "isdnbandsIndex"))
if mibBuilder.loadTexts: isdnbandsEntry.setStatus('mandatory')
isdnbandsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsIndex.setStatus('mandatory')
isdnbandsName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsName.setStatus('mandatory')
isdnbandsStarttime = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsStarttime.setStatus('mandatory')
isdnbandsEndtime = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsEndtime.setStatus('mandatory')
isdnbandsDays = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsDays.setStatus('mandatory')
isdnbandsAllowbackup = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsAllowbackup.setStatus('mandatory')
isdnbandsAllowdemand = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsAllowdemand.setStatus('mandatory')
isdnbandsAllowautocall = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsAllowautocall.setStatus('mandatory')
isdnbandsAllowlist = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsAllowlist.setStatus('mandatory')
isdnbandsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("edit", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsMode.setStatus('mandatory')
isdnbandsBridgeListTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 2), )
if mibBuilder.loadTexts: isdnbandsBridgeListTable.setStatus('mandatory')
isdnbandsBridgeListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 2, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "isdnbandsBridgeListIndex"))
if mibBuilder.loadTexts: isdnbandsBridgeListEntry.setStatus('mandatory')
isdnbandsBridgeListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsBridgeListIndex.setStatus('mandatory')
isdnbandsBridgeListBandName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsBridgeListBandName.setStatus('mandatory')
isdnbandsBridgeListBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnbandsBridgeListBridgeName.setStatus('mandatory')
isdnnumbersTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1), )
if mibBuilder.loadTexts: isdnnumbersTable.setStatus('mandatory')
isdnnumbersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "isdnnumbersIndex"))
if mibBuilder.loadTexts: isdnnumbersEntry.setStatus('mandatory')
isdnnumbersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersIndex.setStatus('mandatory')
isdnnumbersName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersName.setStatus('mandatory')
isdnnumbersNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersNumber1.setStatus('mandatory')
isdnnumbersNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersNumber2.setStatus('mandatory')
isdnnumbersNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersNumber3.setStatus('mandatory')
isdnnumbersNumber4 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnnumbersNumber4.setStatus('mandatory')
isdnnumbersCall = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("request", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersCall.setStatus('mandatory')
isdnnumbersTesttime = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersTesttime.setStatus('mandatory')
isdnnumbersDays = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersDays.setStatus('mandatory')
isdnnumbersLasttest = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnnumbersLasttest.setStatus('mandatory')
isdnnumbersIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersIpAddress.setStatus('mandatory')
isdnnumbersIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersIpMask.setStatus('mandatory')
isdnnumbersIpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersIpMetric.setStatus('mandatory')
isdnnumbersIpxNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersIpxNetwork.setStatus('mandatory')
isdnnumbersIpxType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("ieee802dot2", 2), ("novell802dot3", 3), ("snap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersIpxType.setStatus('mandatory')
isdnnumbersPpp = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersPpp.setStatus('mandatory')
isdnnumbersRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersRemoteIpAddress.setStatus('mandatory')
isdnnumbersRemoteUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("n3com", 2), ("cisco", 3), ("ascend", 4), ("spider", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersRemoteUnitType.setStatus('mandatory')
isdnnumbersHdlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synchronous", 1), ("lapb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersHdlcType.setStatus('mandatory')
isdnnumbersPppAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnnumbersPppAuthentication.setStatus('mandatory')
isdnnumbersMaxCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersMaxCircuits.setStatus('mandatory')
isdnnumbersMPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabled-short", 3), ("enabled-bacp", 4), ("enabled-short-bacp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersMPEnable.setStatus('mandatory')
isdnnumbersLearntED = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnnumbersLearntED.setStatus('mandatory')
isdnnumbersMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("edit", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersMode.setStatus('mandatory')
isdnnumbersCallType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unrestricted", 0), ("restricted", 1), ("v110", 2), ("speech", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersCallType1.setStatus('mandatory')
isdnnumbersCallType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unrestricted", 0), ("restricted", 1), ("v110", 2), ("speech", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersCallType2.setStatus('mandatory')
isdnnumbersCallType3 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unrestricted", 0), ("restricted", 1), ("v110", 2), ("speech", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersCallType3.setStatus('mandatory')
isdnnumbersCallType4 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unrestricted", 0), ("restricted", 1), ("v110", 2), ("speech", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnnumbersCallType4.setStatus('mandatory')
isdnportsTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1), )
if mibBuilder.loadTexts: isdnportsTable.setStatus('mandatory')
isdnportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "isdnportsIndex"))
if mibBuilder.loadTexts: isdnportsEntry.setStatus('mandatory')
isdnportsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnportsIndex.setStatus('mandatory')
isdnportsDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnportsDestination.setStatus('mandatory')
isdnportsState = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 0), ("calling", 1), ("ringing", 2), ("connected", 3), ("answering", 4), ("answered", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnportsState.setStatus('mandatory')
isdnportsConnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnportsConnTime.setStatus('mandatory')
isdnportsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnportsBackup.setStatus('mandatory')
isdnportsDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnportsDemand.setStatus('mandatory')
isdnportsBumpable = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnportsBumpable.setStatus('mandatory')
isdnportsAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("alert", 1), ("beep", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnportsAlert.setStatus('mandatory')
isdnportsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnportsPriority.setStatus('mandatory')
isdnportsSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 4, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnportsSourceMac.setStatus('mandatory')
isdnhistoryTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 5, 1), )
if mibBuilder.loadTexts: isdnhistoryTable.setStatus('mandatory')
isdnhistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 5, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "isdnhistoryIndex"))
if mibBuilder.loadTexts: isdnhistoryEntry.setStatus('mandatory')
isdnhistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnhistoryIndex.setStatus('mandatory')
isdnhistoryDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnhistoryDestination.setStatus('mandatory')
isdnhistoryTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnhistoryTotalTime.setStatus('mandatory')
isdnhistoryTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnhistoryTotalCalls.setStatus('mandatory')
isdnhistoryFailedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnhistoryFailedCalls.setStatus('mandatory')
isdnCliTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 6, 1), )
if mibBuilder.loadTexts: isdnCliTable.setStatus('mandatory')
isdnCliEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 6, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "isdnCliIndex"))
if mibBuilder.loadTexts: isdnCliEntry.setStatus('mandatory')
isdnCliIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCliIndex.setStatus('mandatory')
isdnCliNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 6, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCliNumber.setStatus('mandatory')
isdnCliMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("edit", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCliMode.setStatus('mandatory')
isdnlistsTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 7, 1), )
if mibBuilder.loadTexts: isdnlistsTable.setStatus('mandatory')
isdnlistsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 7, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "isdnlistsIndex"))
if mibBuilder.loadTexts: isdnlistsEntry.setStatus('mandatory')
isdnlistsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnlistsIndex.setStatus('mandatory')
isdnlistsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnlistsBand.setStatus('mandatory')
isdnlistsName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnlistsName.setStatus('mandatory')
isdnParamsNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("etsi", 1), ("nationalIsdn1", 2), ("att5essCustom", 3), ("germany1tr6", 4), ("australia", 5), ("italy", 6), ("germanyD64S", 7), ("usa-dms100", 8), ("japan-ins64", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsNetworkType.setStatus('mandatory')
isdnParamsSpid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsSpid1.setStatus('mandatory')
isdnParamsSpid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsSpid2.setStatus('mandatory')
isdnParamsSpid3 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsSpid3.setStatus('mandatory')
isdnParamsSpid4 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsSpid4.setStatus('mandatory')
isdnParamsDirectoryNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsDirectoryNumber1.setStatus('mandatory')
isdnParamsDirectoryNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsDirectoryNumber2.setStatus('mandatory')
isdnParamsDirectoryNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsDirectoryNumber3.setStatus('mandatory')
isdnParamsDirectoryNumber4 = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsDirectoryNumber4.setStatus('mandatory')
isdnParamsReportBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsReportBusy.setStatus('mandatory')
isdnParamsIncomingDov = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("answer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsIncomingDov.setStatus('mandatory')
isdnParamsMaxCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsMaxCallTime.setStatus('mandatory')
isdnParamsMsn = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 13))
isdnParamsMsnLan = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsMsnLan.setStatus('mandatory')
isdnParamsMsnVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsMsnVoice.setStatus('mandatory')
isdnParamsMsnCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsMsnCheck.setStatus('mandatory')
isdnParamsMsnSend = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsMsnSend.setStatus('mandatory')
isdnParamsSubAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 14))
isdnParamsSubAddrLan = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsSubAddrLan.setStatus('mandatory')
isdnParamsSubAddrVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsSubAddrVoice.setStatus('mandatory')
isdnParamsSubAddrCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsSubAddrCheck.setStatus('mandatory')
isdnParamsSubAddrSend = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsSubAddrSend.setStatus('mandatory')
isdnParamsSubAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nsap", 1), ("user", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsSubAddrType.setStatus('mandatory')
isdnParamsTokenValue = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsTokenValue.setStatus('mandatory')
isdnParamsTokenRefill = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("manual", 1), ("auto", 2), ("refill", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnParamsTokenRefill.setStatus('mandatory')
isdnParamsTokenRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 8, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnParamsTokenRemain.setStatus('mandatory')
bootpActive = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpActive.setStatus('mandatory')
bootpBumpable = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpBumpable.setStatus('mandatory')
bootpIdle = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpIdle.setStatus('mandatory')
bootpIdleThreshold = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpIdleThreshold.setStatus('mandatory')
bootpIsdnName = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpIsdnName.setStatus('mandatory')
bootpAddress = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpAddress.setStatus('mandatory')
bootpDelaySecs = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpDelaySecs.setStatus('mandatory')
dhcpProxyActive = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpProxyActive.setStatus('mandatory')
referenceAddress = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: referenceAddress.setStatus('mandatory')
minPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 3, 4, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minPoolSize.setStatus('mandatory')
isdnFailDestination = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnFailDestination.setStatus('mandatory')
q931FailCauseCode = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 17, 18, 19, 21, 22, 27, 38, 41, 42, 84, 86, 88, 145))).clone(namedValues=NamedValues(("unallocatedNumber", 1), ("normalCallClearing", 16), ("userBusy", 17), ("noUserResponding", 18), ("noAnswerFromUser", 19), ("callRejected", 21), ("numberChanged", 22), ("destinationOutOfOrder", 27), ("networkOutOfOrder", 38), ("temporaryFailure", 41), ("switchingEquipmentCongestion", 42), ("callIdentityInUse", 84), ("requestedCallIdentityCleared", 86), ("incompatibleDestination", 88), ("dlFailureLineBroken", 145)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q931FailCauseCode.setStatus('mandatory')
dass2FailCauseCode = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 30, 31, 32, 45, 46, 48))).clone(namedValues=NamedValues(("numberUnobtainable0", 0), ("numberIncomplete", 1), ("cleared2", 2), ("numberUnobtainable3", 3), ("numberUnobtainable4", 4), ("userHasChangedNumber", 5), ("networkBusy", 7), ("numberBusy", 8), ("lineOutOfService", 9), ("numberUnobtainable10", 10), ("accessBarred", 11), ("numberUnobtainable30", 30), ("noReply", 31), ("serviceTermination", 32), ("terminalUnavailable45", 45), ("terminalUnavailable46", 46), ("cleared48", 48)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dass2FailCauseCode.setStatus('mandatory')
briFailCauseCode = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briFailCauseCode.setStatus('mandatory')
radiusReplyCode = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("radauthreject", 0), ("radauthnoresponse", 1), ("radauthreadonly", 2), ("radauthreadwrite", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusReplyCode.setStatus('mandatory')
radiusUsername = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusUsername.setStatus('mandatory')
loginCode = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("authreject", 0), ("authok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginCode.setStatus('mandatory')
cscmEventNumber = MibScalar((1, 3, 6, 1, 4, 1, 559, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100, 101, 102, 103, 104, 105, 1000, 1001, 1016, 1017, 1018, 1019, 1021, 1022, 1027, 1038, 1041, 1042, 1084, 1086, 1088, 1145, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1230, 1231, 1232, 1245, 1246, 1248))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2), ("isdnConnection", 3), ("isdnDisconnection", 4), ("pollFailure", 100), ("pollSuccess", 101), ("dailyThresholdExceeded", 102), ("hourlyThresholdExceeded", 103), ("maxCallLengthExceeded", 104), ("testPollFailure", 105), ("q931failure1000", 1000), ("q931unallocatedNumber", 1001), ("q931normalCallClearing", 1016), ("q931userBusy", 1017), ("q931noUserResponding", 1018), ("q931noAnswerFromUser", 1019), ("q931callRejected", 1021), ("q931numberChanged", 1022), ("q931destinationOutOfOrder", 1027), ("q931networkOutOfOrder", 1038), ("q931temporaryFailure", 1041), ("q931switchingEquipmentCongestion", 1042), ("q931callIdentityInUse", 1084), ("q931requestedCallIdentityCleared", 1086), ("q931incompatibleDestination", 1088), ("q931dlFailureLineBroken", 1145), ("dass2numberUnobtainable0", 1200), ("dass2numberIncomplete", 1201), ("dass2cleared2", 1202), ("dass2numberUnobtainable3", 1203), ("dass2numberUnobtainable4", 1204), ("dass2userHasChangedNumber", 1205), ("dass2networkBusy", 1207), ("dass2numberBusy", 1208), ("dass2lineOutOfService", 1209), ("dass2numberUnobtainable10", 1210), ("dass2accessBarred", 1211), ("dass2numberUnobtainable30", 1230), ("dass2noReply", 1231), ("dass2serviceTermination", 1232), ("dass2terminalUnavailable45", 1245), ("dass2terminalUnavailable46", 1246), ("dass2cleared48", 1248)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscmEventNumber.setStatus('mandatory')
cscmOriginatingIP = MibScalar((1, 3, 6, 1, 4, 1, 559, 3, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscmOriginatingIP.setStatus('mandatory')
cscmTrapDetail = MibScalar((1, 3, 6, 1, 4, 1, 559, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscmTrapDetail.setStatus('mandatory')
alarmCode = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("failed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCode.setStatus('mandatory')
alarmText = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmText.setStatus('mandatory')
ipInRipRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInRipRequests.setStatus('mandatory')
ipInRipResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInRipResponses.setStatus('mandatory')
ipInRipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInRipErrors.setStatus('mandatory')
ipInRipDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInRipDiscards.setStatus('mandatory')
ipOutRipRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutRipRequests.setStatus('mandatory')
ipOutRipResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutRipResponses.setStatus('mandatory')
ipOutRipUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutRipUpdates.setStatus('mandatory')
ipOutRipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutRipErrors.setStatus('mandatory')
ipOutRipDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutRipDiscards.setStatus('mandatory')
ipRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 8, 9))).clone(namedValues=NamedValues(("rip", 1), ("rip2", 2), ("ripFixedMask", 8), ("ripExtended", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRoutingProtocol.setStatus('mandatory')
ipRipLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRipLearning.setStatus('mandatory')
ipRoutingAdvertise = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("lan", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRoutingAdvertise.setStatus('mandatory')
ipRouteTableCopy = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2), )
if mibBuilder.loadTexts: ipRouteTableCopy.setStatus('mandatory')
ipRouteEntryCopy = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "ipRouteDestCopy"))
if mibBuilder.loadTexts: ipRouteEntryCopy.setStatus('mandatory')
ipRouteDestCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteDestCopy.setStatus('mandatory')
ipRouteIfIndexCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteIfIndexCopy.setStatus('mandatory')
ipRouteMetric1Copy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric1Copy.setStatus('mandatory')
ipRouteMetric2Copy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric2Copy.setStatus('mandatory')
ipRouteMetric3Copy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric3Copy.setStatus('mandatory')
ipRouteMetric4Copy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric4Copy.setStatus('mandatory')
ipRouteNextHopCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteNextHopCopy.setStatus('mandatory')
ipRouteTypeCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteTypeCopy.setStatus('mandatory')
ipRouteProtoCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteProtoCopy.setStatus('mandatory')
ipRouteAgeCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteAgeCopy.setStatus('mandatory')
ipRouteMaskCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMaskCopy.setStatus('mandatory')
ipRouteMetric5Copy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric5Copy.setStatus('mandatory')
ipRouteInfoCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoCopy.setStatus('mandatory')
ipRouteNextHopName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteNextHopName.setStatus('mandatory')
ipRouteAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 25, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteAdvertise.setStatus('mandatory')
ipxInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInReceives.setStatus('mandatory')
ipxInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInDelivers.setStatus('mandatory')
ipxInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInDiscards.setStatus('mandatory')
ipxInUnknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInUnknownProtocols.setStatus('mandatory')
ipxInHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInHeaderErrors.setStatus('mandatory')
ipxForwardDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxForwardDatagrams.setStatus('mandatory')
ipxOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutRequests.setStatus('mandatory')
ipxOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutNoRoutes.setStatus('mandatory')
ipxOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutDiscards.setStatus('mandatory')
ipxForwarding = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-forwarding", 1), ("forwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxForwarding.setStatus('mandatory')
ipxInRipRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInRipRequests.setStatus('mandatory')
ipxInRipResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInRipResponses.setStatus('mandatory')
ipxInRipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInRipErrors.setStatus('mandatory')
ipxInRipTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInRipTimeouts.setStatus('mandatory')
ipxInRipDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInRipDiscards.setStatus('mandatory')
ipxOutRipRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutRipRequests.setStatus('mandatory')
ipxOutRipResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutRipResponses.setStatus('mandatory')
ipxOutRipUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutRipUpdates.setStatus('mandatory')
ipxOutRipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutRipErrors.setStatus('mandatory')
ipxOutRipDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutRipDiscards.setStatus('mandatory')
ipxRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1), )
if mibBuilder.loadTexts: ipxRoutingTable.setStatus('mandatory')
ipxRoutingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "ipxRouteTarget"))
if mibBuilder.loadTexts: ipxRoutingTableEntry.setStatus('mandatory')
ipxRouteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRouteTarget.setStatus('mandatory')
ipxRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteHopCount.setStatus('mandatory')
ipxRouteTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteTicks.setStatus('mandatory')
ipxRouteNextHopNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteNextHopNetwork.setStatus('mandatory')
ipxRouteNextHopNode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteNextHopNode.setStatus('mandatory')
ipxRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("remote", 1), ("local", 2), ("alternate", 3), ("equal", 4), ("autocall", 5), ("permanent", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteType.setStatus('mandatory')
ipxRoutePort = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRoutePort.setStatus('mandatory')
ipxRouteLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("hdlc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteLinkType.setStatus('mandatory')
ipxRouteIpxType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("ieee802dot2", 2), ("novell802dot3", 3), ("snap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteIpxType.setStatus('mandatory')
ipxRouteLinkTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteLinkTicks.setStatus('mandatory')
ipxRouteMlink = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteMlink.setStatus('mandatory')
ipxRouteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteMode.setStatus('mandatory')
ipxInSapRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInSapRequests.setStatus('mandatory')
ipxInSapResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInSapResponses.setStatus('mandatory')
ipxInSapNoServers = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInSapNoServers.setStatus('mandatory')
ipxInSapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInSapErrors.setStatus('mandatory')
ipxInSapDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInSapDiscards.setStatus('mandatory')
ipxOutSapRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutSapRequests.setStatus('mandatory')
ipxOutSapResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutSapResponses.setStatus('mandatory')
ipxOutSapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutSapErrors.setStatus('mandatory')
ipxOutSapDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutSapDiscards.setStatus('mandatory')
ipxServicesTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1), )
if mibBuilder.loadTexts: ipxServicesTable.setStatus('mandatory')
ipxServicesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "ipxServiceNode"), (0, "REMOTEACCESS-MIB", "ipxServiceSocket"))
if mibBuilder.loadTexts: ipxServicesTableEntry.setStatus('mandatory')
ipxServiceNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceNetwork.setStatus('mandatory')
ipxServiceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServiceNode.setStatus('mandatory')
ipxServiceSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServiceSocket.setStatus('mandatory')
ipxServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceName.setStatus('mandatory')
ipxServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceType.setStatus('mandatory')
ipxServiceHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceHopCount.setStatus('mandatory')
ipxServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServicePort.setStatus('mandatory')
ipxServiceNextHopNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceNextHopNetwork.setStatus('mandatory')
ipxServiceNextHopNode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceNextHopNode.setStatus('mandatory')
ipxServiceIpxType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("ieee802dot2", 2), ("novell802dot3", 3), ("snap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceIpxType.setStatus('mandatory')
ipxServiceRTType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("remote", 1), ("local", 2), ("alternate", 3), ("equal", 4), ("autocall", 5), ("permanent", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceRTType.setStatus('mandatory')
ipxServiceLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("hdlc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceLinkType.setStatus('mandatory')
ipxServiceMlink = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceMlink.setStatus('mandatory')
ipxServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServiceMode.setStatus('mandatory')
ipxNearest = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxNearest.setStatus('mandatory')
ipxNearestTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 15, 2), )
if mibBuilder.loadTexts: ipxNearestTable.setStatus('mandatory')
ipxNearestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 15, 2, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "ipxNearestIndex"))
if mibBuilder.loadTexts: ipxNearestTableEntry.setStatus('mandatory')
ipxNearestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 15, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxNearestIndex.setStatus('mandatory')
ipxNearestServer = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 15, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxNearestServer.setStatus('mandatory')
ipxNearestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 26, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxNearestMode.setStatus('mandatory')
pppExtLcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1), )
if mibBuilder.loadTexts: pppExtLcpConfigTable.setStatus('mandatory')
pppExtLcpConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppExtLcpConfigTableEntry.setStatus('mandatory')
pppExtLcpLocalProtocolCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpLocalProtocolCompression.setStatus('mandatory')
pppExtLcpLocalAddressCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpLocalAddressCompression.setStatus('mandatory')
pppExtLcpRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpRemoteMRU.setStatus('mandatory')
pppExtLcpRemoteProtocolCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpRemoteProtocolCompression.setStatus('mandatory')
pppExtLcpRemoteAddressCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpRemoteAddressCompression.setStatus('mandatory')
pppExtLcpMinimumRestartPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpMinimumRestartPeriod.setStatus('mandatory')
pppExtLcpMaximumRestartPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpMaximumRestartPeriod.setStatus('mandatory')
pppExtLcpMaximumTerminateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpMaximumTerminateRequests.setStatus('mandatory')
pppExtLcpMaximumConfigRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpMaximumConfigRequests.setStatus('mandatory')
pppExtLcpMaximumConfigNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpMaximumConfigNaks.setStatus('mandatory')
pppExtLcpLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpLocalMRU.setStatus('mandatory')
pppExtLcpLocalMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpLocalMagic.setStatus('mandatory')
pppExtLcpRemoteMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpRemoteMagic.setStatus('mandatory')
pppExtLcpLocalMRUEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpLocalMRUEnabled.setStatus('mandatory')
pppExtLcpRemoteMRUEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpRemoteMRUEnabled.setStatus('mandatory')
pppExtLcpLocalACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpLocalACCM.setStatus('mandatory')
pppExtLcpRemoteACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpRemoteACCM.setStatus('mandatory')
pppExtLcpLocalACCMEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpLocalACCMEnabled.setStatus('mandatory')
pppExtLcpRemoteACCMEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpRemoteACCMEnabled.setStatus('mandatory')
pppExtLcpLocalPAPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("incoming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpLocalPAPEnabled.setStatus('mandatory')
pppExtLcpRemotePAPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpRemotePAPEnabled.setStatus('mandatory')
pppExtLcpLocalCHAPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpLocalCHAPEnabled.setStatus('mandatory')
pppExtLcpRemoteCHAPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLcpRemoteCHAPEnabled.setStatus('mandatory')
pppEchoConfigTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 2), )
if mibBuilder.loadTexts: pppEchoConfigTable.setStatus('mandatory')
pppEchoConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppEchoConfigTableEntry.setStatus('mandatory')
pppEchoPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppEchoPeriod.setStatus('mandatory')
pppEchoMaxNumberRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppEchoMaxNumberRetransmits.setStatus('mandatory')
pppIpcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3), )
if mibBuilder.loadTexts: pppIpcpConfigTable.setStatus('mandatory')
pppIpcpConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppIpcpConfigTableEntry.setStatus('mandatory')
ipcpLocalIPAddressNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipcpLocalIPAddressNegotiation.setStatus('mandatory')
ipcpRemoteIPAddressNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipcpRemoteIPAddressNegotiation.setStatus('mandatory')
ipcpRemoteCompressionNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("van-jacobson", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipcpRemoteCompressionNegotiation.setStatus('mandatory')
ipcpMinimumRestartPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipcpMinimumRestartPeriod.setStatus('mandatory')
ipcpMaximumRestartPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipcpMaximumRestartPeriod.setStatus('mandatory')
ipcpMaximumTerminateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipcpMaximumTerminateRequests.setStatus('mandatory')
ipcpMaximumConfigRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipcpMaximumConfigRequests.setStatus('mandatory')
ipcpMaximumConfigNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipcpMaximumConfigNaks.setStatus('mandatory')
ipcpLocalCompressionNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("van-jacobson", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipcpLocalCompressionNegotiation.setStatus('mandatory')
ipcpRfc1172Negotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipcpRfc1172Negotiation.setStatus('mandatory')
pppIpxcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4), )
if mibBuilder.loadTexts: pppIpxcpConfigTable.setStatus('mandatory')
pppIpxcpConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppIpxcpConfigTableEntry.setStatus('mandatory')
ipxcpLocalNetworkNumberNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpLocalNetworkNumberNegotiation.setStatus('mandatory')
ipxcpLocalNodeNumberNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpLocalNodeNumberNegotiation.setStatus('mandatory')
ipxcpLocalRoutingProtocolNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("rip-sap", 2), ("any", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpLocalRoutingProtocolNegotiation.setStatus('mandatory')
ipxcpLocalRouterNameNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpLocalRouterNameNegotiation.setStatus('mandatory')
ipxcpRemoteNetworkNumberNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpRemoteNetworkNumberNegotiation.setStatus('mandatory')
ipxcpRemoteNodeNumberNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpRemoteNodeNumberNegotiation.setStatus('mandatory')
ipxcpRemoteRoutingProtocolNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("rip-sap", 2), ("any", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpRemoteRoutingProtocolNegotiation.setStatus('mandatory')
ipxcpRemoteRouterNameNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpRemoteRouterNameNegotiation.setStatus('mandatory')
ipxcpConfigCompleteNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpConfigCompleteNegotiation.setStatus('mandatory')
ipxcpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpAdmin.setStatus('mandatory')
ipxcpMinimumRestartPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpMinimumRestartPeriod.setStatus('mandatory')
ipxcpMaximumRestartPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpMaximumRestartPeriod.setStatus('mandatory')
ipxcpMaximumTerminateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpMaximumTerminateRequests.setStatus('mandatory')
ipxcpMaximumConfigRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpMaximumConfigRequests.setStatus('mandatory')
ipxcpMaximumConfigNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpMaximumConfigNaks.setStatus('mandatory')
ipxcpNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 4, 1, 16), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxcpNodeNumber.setStatus('mandatory')
pppExtConfigTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 5), )
if mibBuilder.loadTexts: pppExtConfigTable.setStatus('mandatory')
pppExtConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppExtConfigTableEntry.setStatus('mandatory')
pppExtLinkAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtLinkAuthentication.setStatus('mandatory')
pppExtEnableIp = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtEnableIp.setStatus('mandatory')
pppExtEnableIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtEnableIpx.setStatus('mandatory')
pppExtHdlcLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 27, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synchronous", 1), ("lapb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtHdlcLayer.setStatus('mandatory')
ipFirewallStatusTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 1), )
if mibBuilder.loadTexts: ipFirewallStatusTable.setStatus('mandatory')
ipFirewallStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "ipFirewallStatusIndex"))
if mibBuilder.loadTexts: ipFirewallStatusTableEntry.setStatus('mandatory')
ipFirewallStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFirewallStatusIndex.setStatus('mandatory')
ipFirewallFilteredPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFirewallFilteredPackets.setStatus('mandatory')
ipFirewallConfigTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2), )
if mibBuilder.loadTexts: ipFirewallConfigTable.setStatus('mandatory')
ipFirewallConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "ipFirewallConfigIndex"))
if mibBuilder.loadTexts: ipFirewallConfigTableEntry.setStatus('mandatory')
ipFirewallConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFirewallConfigIndex.setStatus('mandatory')
ipFirewallSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallSourceAddress.setStatus('mandatory')
ipFirewallSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallSourceMask.setStatus('mandatory')
ipFirewallLowerSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallLowerSourcePort.setStatus('mandatory')
ipFirewallHigherSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallHigherSourcePort.setStatus('mandatory')
ipFirewallDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallDestinationAddress.setStatus('mandatory')
ipFirewallDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallDestinationMask.setStatus('mandatory')
ipFirewallLowerDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallLowerDestinationPort.setStatus('mandatory')
ipFirewallHigherDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallHigherDestinationPort.setStatus('mandatory')
ipFirewallRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallRouterName.setStatus('mandatory')
ipFirewallMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delete", 1), ("insert", 2), ("append", 3), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallMode.setStatus('mandatory')
ipFirewallType = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("tcp", 3), ("udp", 4), ("icmp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallType.setStatus('mandatory')
ipFirewallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallAction.setStatus('mandatory')
ipFirewallBidir = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallBidir.setStatus('mandatory')
ipFirewallTcpsyn = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFirewallTcpsyn.setStatus('mandatory')
ipxFirewallStatusTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 3), )
if mibBuilder.loadTexts: ipxFirewallStatusTable.setStatus('mandatory')
ipxFirewallStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 3, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "ipxFirewallStatusIndex"))
if mibBuilder.loadTexts: ipxFirewallStatusTableEntry.setStatus('mandatory')
ipxFirewallStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFirewallStatusIndex.setStatus('mandatory')
ipxFirewallFilteredPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFirewallFilteredPackets.setStatus('mandatory')
ipxFirewallConfigTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4), )
if mibBuilder.loadTexts: ipxFirewallConfigTable.setStatus('mandatory')
ipxFirewallConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "ipxFirewallConfigIndex"))
if mibBuilder.loadTexts: ipxFirewallConfigTableEntry.setStatus('mandatory')
ipxFirewallConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxFirewallConfigIndex.setStatus('mandatory')
ipxFirewallLowerSourceNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallLowerSourceNetwork.setStatus('mandatory')
ipxFirewallHigherSourceNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallHigherSourceNetwork.setStatus('mandatory')
ipxFirewallLowerSourceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallLowerSourceNode.setStatus('mandatory')
ipxFirewallHigherSourceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallHigherSourceNode.setStatus('mandatory')
ipxFirewallLowerSourceSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallLowerSourceSocket.setStatus('mandatory')
ipxFirewallHigherSourceSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallHigherSourceSocket.setStatus('mandatory')
ipxFirewallLowerDestinationNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallLowerDestinationNetwork.setStatus('mandatory')
ipxFirewallHigherDestinationNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallHigherDestinationNetwork.setStatus('mandatory')
ipxFirewallLowerDestinationNode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallLowerDestinationNode.setStatus('mandatory')
ipxFirewallHigherDestinationNode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 11), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallHigherDestinationNode.setStatus('mandatory')
ipxFirewallLowerDestinationSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallLowerDestinationSocket.setStatus('mandatory')
ipxFirewallHigherDestinationSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallHigherDestinationSocket.setStatus('mandatory')
ipxFirewallRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallRouterName.setStatus('mandatory')
ipxFirewallMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delete", 1), ("insert", 2), ("append", 3), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallMode.setStatus('mandatory')
ipxFirewallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallAction.setStatus('mandatory')
ipxFirewallBidir = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 28, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxFirewallBidir.setStatus('mandatory')
ipNatTranslate = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatTranslate.setStatus('mandatory')
ipNatIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 32, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatIpAddress.setStatus('mandatory')
ipNatBogusNetwork = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 32, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatBogusNetwork.setStatus('mandatory')
ipNatBogusNetmask = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 32, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatBogusNetmask.setStatus('mandatory')
ipNatTcpFinTimeout = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 32, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatTcpFinTimeout.setStatus('mandatory')
ipNatTcpInactiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 32, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatTcpInactiveTimeout.setStatus('mandatory')
ipNatUdpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 32, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatUdpTimeout.setStatus('mandatory')
ipNatMyself = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 32, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatMyself.setStatus('mandatory')
usercfgTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 29, 1), )
if mibBuilder.loadTexts: usercfgTable.setStatus('mandatory')
usercfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 29, 1, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "usercfgIndex"))
if mibBuilder.loadTexts: usercfgEntry.setStatus('mandatory')
usercfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usercfgIndex.setStatus('mandatory')
usercfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 29, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usercfgName.setStatus('mandatory')
usercfgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 29, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usercfgMac.setStatus('mandatory')
usercfgAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usercfgAllowed.setStatus('mandatory')
usercfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("delete", 1), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usercfgMode.setStatus('mandatory')
srcEnabled = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srcEnabled.setStatus('mandatory')
srcPriority = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50, 128, 200))).clone(namedValues=NamedValues(("primary", 50), ("secondary", 128), ("slave", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srcPriority.setStatus('mandatory')
dhcpAutoStatus = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpAutoStatus.setStatus('mandatory')
dhcpAutoName = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpAutoName.setStatus('mandatory')
dhcpAutoDomain = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpAutoDomain.setStatus('mandatory')
dhcpAutoSeedStart = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpAutoSeedStart.setStatus('mandatory')
dhcpAutoSeedEnd = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpAutoSeedEnd.setStatus('mandatory')
dhcpAutoMask = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpAutoMask.setStatus('mandatory')
dhcpAutoRouter = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpAutoRouter.setStatus('mandatory')
dhcpWINSTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 8), )
if mibBuilder.loadTexts: dhcpWINSTable.setStatus('mandatory')
dhcpWINSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 8, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "dhcpWINSIndex"))
if mibBuilder.loadTexts: dhcpWINSEntry.setStatus('mandatory')
dhcpWINSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpWINSIndex.setStatus('mandatory')
dhcpWINSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpWINSAddr.setStatus('mandatory')
dhcpDNSTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 9), )
if mibBuilder.loadTexts: dhcpDNSTable.setStatus('mandatory')
dhcpDNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 9, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "dhcpDNSIndex"))
if mibBuilder.loadTexts: dhcpDNSEntry.setStatus('mandatory')
dhcpDNSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDNSIndex.setStatus('mandatory')
dhcpDNSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDNSAddr.setStatus('mandatory')
dhcpAutoLease = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpAutoLease.setStatus('mandatory')
dhcpAstatTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 11), )
if mibBuilder.loadTexts: dhcpAstatTable.setStatus('mandatory')
dhcpAstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 11, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "dhcpAstatIpAddr"))
if mibBuilder.loadTexts: dhcpAstatEntry.setStatus('mandatory')
dhcpAstatIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAstatIpAddr.setStatus('mandatory')
dhcpAstatIf = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unused", 0), ("lan", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAstatIf.setStatus('mandatory')
dhcpAstatHwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAstatHwAddr.setStatus('mandatory')
dhcpAstatCID = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAstatCID.setStatus('mandatory')
dhcpAstatLife = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 33, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAstatLife.setStatus('mandatory')
pppAuthTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34), )
if mibBuilder.loadTexts: pppAuthTable.setStatus('mandatory')
pppAuthTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "pppAuthIndex"))
if mibBuilder.loadTexts: pppAuthTableEntry.setStatus('mandatory')
pppAuthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppAuthIndex.setStatus('mandatory')
pppAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthName.setStatus('mandatory')
pppAuthClass = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthClass.setStatus('mandatory')
pppAuthLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthLocalId.setStatus('mandatory')
pppAuthLocalPw = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthLocalPw.setStatus('mandatory')
pppAuthRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthRemoteId.setStatus('mandatory')
pppAuthRemotePw = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthRemotePw.setStatus('mandatory')
pppAuthRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthRetryPeriod.setStatus('mandatory')
pppAuthRenegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthRenegPeriod.setStatus('mandatory')
pppAuthRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthRetryCount.setStatus('mandatory')
pppAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 34, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("delete", 1), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthMode.setStatus('mandatory')
primaryDNSAddress = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryDNSAddress.setStatus('mandatory')
secondaryDNSAddress = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryDNSAddress.setStatus('mandatory')
primaryNBNSAddress = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryNBNSAddress.setStatus('mandatory')
secondaryNBNSAddress = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryNBNSAddress.setStatus('mandatory')
dnsProxyActive = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsProxyActive.setStatus('mandatory')
dnsCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsCacheSize.setStatus('mandatory')
dnsMaxServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsMaxServerTimeout.setStatus('mandatory')
dnsServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerRetries.setStatus('mandatory')
dnsDomainTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 9), )
if mibBuilder.loadTexts: dnsDomainTable.setStatus('mandatory')
dnsDomainTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 9, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "dnsDomainTableIndex"))
if mibBuilder.loadTexts: dnsDomainTableEntry.setStatus('mandatory')
dnsDomainTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDomainTableIndex.setStatus('mandatory')
dnsDomainDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainDomainName.setStatus('mandatory')
dnsDomainProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainProfileIndex.setStatus('mandatory')
dnsDomainRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainRemoteServer.setStatus('mandatory')
dnsDomainPrimaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 9, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainPrimaryDNS.setStatus('mandatory')
dnsDomainSecondaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 9, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainSecondaryDNS.setStatus('mandatory')
dnsDomainMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delete", 1), ("insert", 2), ("append", 3), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainMode.setStatus('mandatory')
dnsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 10), )
if mibBuilder.loadTexts: dnsProfileTable.setStatus('mandatory')
dnsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 10, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "dnsProfileIndex"))
if mibBuilder.loadTexts: dnsProfileEntry.setStatus('mandatory')
dnsProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsProfileIndex.setStatus('mandatory')
dnsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsProfileName.setStatus('mandatory')
dnsProfileRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsProfileRemoteServer.setStatus('mandatory')
dnsProfilePrimaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsProfilePrimaryDNS.setStatus('mandatory')
dnsProfileSecondaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsProfileSecondaryDNS.setStatus('mandatory')
dnsProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 35, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("delete", 1), ("add", 3), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsProfileMode.setStatus('mandatory')
memoryFree = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 36, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFree.setStatus('mandatory')
memoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 36, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryTotal.setStatus('mandatory')
fragmentCount = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 36, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragmentCount.setStatus('mandatory')
fragmentLargest = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 36, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragmentLargest.setStatus('mandatory')
pool1size = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 36, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pool1size.setStatus('mandatory')
pool2size = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 36, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pool2size.setStatus('mandatory')
pool3size = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 36, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pool3size.setStatus('mandatory')
pool4size = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 36, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pool4size.setStatus('mandatory')
traptableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "trapIndex"))
if mibBuilder.loadTexts: traptableEntry.setStatus('mandatory')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIndex.setStatus('mandatory')
trapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAddr.setStatus('mandatory')
trapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapPort.setStatus('mandatory')
trapLogFull = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLogFull.setStatus('mandatory')
trapLogThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLogThreshold.setStatus('mandatory')
trapWarmStart = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapWarmStart.setStatus('mandatory')
trapLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLinkDown.setStatus('mandatory')
trapLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLinkUp.setStatus('mandatory')
trapVoiceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVoiceDown.setStatus('mandatory')
trapVoiceUp = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVoiceUp.setStatus('mandatory')
trapISDNDown = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapISDNDown.setStatus('mandatory')
trapISDNUp = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapISDNUp.setStatus('mandatory')
trapAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAlarm.setStatus('mandatory')
trapQ931Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapQ931Fail.setStatus('mandatory')
trapDASS2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDASS2Fail.setStatus('mandatory')
trapBriFail = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapBriFail.setStatus('mandatory')
trapLoginAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 37, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLoginAuth.setStatus('mandatory')
isdnTestCallEvent = NotificationType((1, 3, 6, 1, 4, 1, 559) + (0,1)).setObjects(("REMOTEACCESS-MIB", "alarmCode"), ("REMOTEACCESS-MIB", "alarmText"))
isdnLinkDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 559) + (0,2)).setObjects(("REMOTEACCESS-MIB", "portsIndex"), ("REMOTEACCESS-MIB", "portsName"), ("REMOTEACCESS-MIB", "isdnportsState"), ("REMOTEACCESS-MIB", "isdnportsConnTime"))
isdnLinkUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 559) + (0,3)).setObjects(("REMOTEACCESS-MIB", "portsIndex"), ("REMOTEACCESS-MIB", "portsName"), ("REMOTEACCESS-MIB", "isdnportsState"))
q931FailCauseEvent = NotificationType((1, 3, 6, 1, 4, 1, 559) + (0,6)).setObjects(("REMOTEACCESS-MIB", "portsIndex"), ("REMOTEACCESS-MIB", "isdnFailDestination"), ("REMOTEACCESS-MIB", "q931FailCauseCode"))
dass2FailCauseEvent = NotificationType((1, 3, 6, 1, 4, 1, 559) + (0,7)).setObjects(("REMOTEACCESS-MIB", "portsIndex"), ("REMOTEACCESS-MIB", "isdnFailDestination"), ("REMOTEACCESS-MIB", "dass2FailCauseCode"))
briFailCauseEvent = NotificationType((1, 3, 6, 1, 4, 1, 559) + (0,8)).setObjects(("REMOTEACCESS-MIB", "portsIndex"), ("REMOTEACCESS-MIB", "isdnFailDestination"), ("REMOTEACCESS-MIB", "briFailCauseCode"), ("REMOTEACCESS-MIB", "isdnParamsNetworkType"))
radiusTrapEvent = NotificationType((1, 3, 6, 1, 4, 1, 559) + (0,20)).setObjects(("REMOTEACCESS-MIB", "radiusReplyCode"), ("REMOTEACCESS-MIB", "radiusUsername"))
loginTrapEvent = NotificationType((1, 3, 6, 1, 4, 1, 559) + (0,21)).setObjects(("REMOTEACCESS-MIB", "loginCode"))
cscmTrapEvent = NotificationType((1, 3, 6, 1, 4, 1, 559) + (0,100)).setObjects(("REMOTEACCESS-MIB", "cscmEventNumber"), ("REMOTEACCESS-MIB", "cscmOriginatingIP"), ("REMOTEACCESS-MIB", "cscmTrapDetail"))
patTable = MibTable((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 38), )
if mibBuilder.loadTexts: patTable.setStatus('mandatory')
patEntry = MibTableRow((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 38, 1), ).setIndexNames((0, "REMOTEACCESS-MIB", "patIndex"))
if mibBuilder.loadTexts: patEntry.setStatus('mandatory')
patIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: patIndex.setStatus('mandatory')
patPort = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 38, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: patPort.setStatus('mandatory')
patInternalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 38, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: patInternalIP.setStatus('mandatory')
patInternalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 38, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: patInternalPort.setStatus('mandatory')
patMode = MibTableColumn((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 38, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("delete", 1), ("edit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: patMode.setStatus('mandatory')
tpadLanPort = MibScalar((1, 3, 6, 1, 4, 1, 559, 1, 2, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpadLanPort.setStatus('mandatory')
tftpFile = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFile.setStatus('current')
tftpServerIP = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServerIP.setStatus('current')
tftpAction = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("load", 2), ("store", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpAction.setStatus('current')
tftpStatus = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("success", 1), ("statusunknown", 2), ("generalerror", 3), ("noresponsefromserver", 4), ("checksumerror", 5), ("incompatibleimage", 6), ("tftpfilenotfound", 7), ("tftpaccessviolation", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpStatus.setStatus('current')
class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

mibBuilder.exportSymbols("REMOTEACCESS-MIB", authorisedMode=authorisedMode, isdnnumbersName=isdnnumbersName, autocall=autocall, dass2FailCauseEvent=dass2FailCauseEvent, ipFirewallTcpsyn=ipFirewallTcpsyn, portshdlcPriority=portshdlcPriority, ipxOutDiscards=ipxOutDiscards, pppIpcpConfigTable=pppIpcpConfigTable, isdnnumbersIpAddress=isdnnumbersIpAddress, ipInRipRequests=ipInRipRequests, isdnParamsTokenValue=isdnParamsTokenValue, pppAuthRemotePw=pppAuthRemotePw, autocallMacTable=autocallMacTable, patTable=patTable, ipxInSapRequests=ipxInSapRequests, autocallIpxSapDirectNetwork=autocallIpxSapDirectNetwork, portstaIdlethresh=portstaIdlethresh, autocallDialMode=autocallDialMode, q931FailCauseEvent=q931FailCauseEvent, novelltimeout=novelltimeout, portslanEntry=portslanEntry, portspppFlowControl=portspppFlowControl, isdnnumbersNumber2=isdnnumbersNumber2, bootpBumpable=bootpBumpable, dhcpAstatLife=dhcpAstatLife, remoteaccessMib=remoteaccessMib, passwdsNew=passwdsNew, autocallIpIsdn=autocallIpIsdn, isdnnumbersPpp=isdnnumbersPpp, ipxInDiscards=ipxInDiscards, portsState=portsState, autocallIpIndex=autocallIpIndex, pppext=pppext, dhcpWINSTable=dhcpWINSTable, portsvoiceEntry=portsvoiceEntry, ipFirewallAction=ipFirewallAction, EntryStatus=EntryStatus, isdnParamsDirectoryNumber4=isdnParamsDirectoryNumber4, ipxOutRipDiscards=ipxOutRipDiscards, tftpFile=tftpFile, filterTypematching=filterTypematching, portstaEntry=portstaEntry, filterSource=filterSource, serviceConnect2000BasePri=serviceConnect2000BasePri, mlinkInDiscards=mlinkInDiscards, autocallIpxSapIsdn=autocallIpxSapIsdn, loginCode=loginCode, portslanIpAddress=portslanIpAddress, portstpadName=portstpadName, radiusTrapEvent=radiusTrapEvent, pppAuthTable=pppAuthTable, officeConnectRemote531s=officeConnectRemote531s, ipxFirewallHigherSourceSocket=ipxFirewallHigherSourceSocket, isdnParamsReportBusy=isdnParamsReportBusy, pppEchoConfigTableEntry=pppEchoConfigTableEntry, fragmentLargest=fragmentLargest, portslanIpxType=portslanIpxType, isdnnumbersIpMetric=isdnnumbersIpMetric, autocallIpxSapMode=autocallIpxSapMode, trapISDNUp=trapISDNUp, ipxServiceHopCount=ipxServiceHopCount, portstpadTable=portstpadTable, autocallIpxSapFrameType=autocallIpxSapFrameType, autocallDialIndex=autocallDialIndex, users=users, trapWarmStart=trapWarmStart, filterActiononmatch=filterActiononmatch, portsPhys=portsPhys, ipRouteEntryCopy=ipRouteEntryCopy, isdnParamsSubAddrLan=isdnParamsSubAddrLan, pppExtLcpLocalPAPEnabled=pppExtLcpLocalPAPEnabled, tpadLanPort=tpadLanPort, portsasyncFlowControl=portsasyncFlowControl, isdnnumbersIpMask=isdnnumbersIpMask, ipxcpLocalRouterNameNegotiation=ipxcpLocalRouterNameNegotiation, srcPriority=srcPriority, isdnParamsDirectoryNumber2=isdnParamsDirectoryNumber2, pppEchoConfigTable=pppEchoConfigTable, dnsProfileIndex=dnsProfileIndex, autocallIpxSapIsdnType=autocallIpxSapIsdnType, ipxInSapDiscards=ipxInSapDiscards, autocallDialCli=autocallDialCli, autocallIpxRipNode=autocallIpxRipNode, dhcpAstatTable=dhcpAstatTable, ipNatUdpTimeout=ipNatUdpTimeout, ipxOutRipResponses=ipxOutRipResponses, portspppIndex=portspppIndex, pppExtConfigTableEntry=pppExtConfigTableEntry, isdnportsConnTime=isdnportsConnTime, pppExtLcpLocalProtocolCompression=pppExtLcpLocalProtocolCompression, isdnportsAlert=isdnportsAlert, unitname=unitname, filtertypeEntry=filtertypeEntry, isdnParamsMsnSend=isdnParamsMsnSend, MacAddress=MacAddress, portspppName=portspppName, ipxOutRipUpdates=ipxOutRipUpdates, dhcpAutoLease=dhcpAutoLease, ipxServiceName=ipxServiceName, autocallMacBumpable=autocallMacBumpable, autocallIpxIdle=autocallIpxIdle, registration=registration, ipcpLocalCompressionNegotiation=ipcpLocalCompressionNegotiation, secondaryNBNSAddress=secondaryNBNSAddress, portsasyncStopBits=portsasyncStopBits, dnsProfileRemoteServer=dnsProfileRemoteServer, autocallIpxSapHops=autocallIpxSapHops, q931FailCauseCode=q931FailCauseCode, pppExtHdlcLayer=pppExtHdlcLayer, autocallIpBumpable=autocallIpBumpable, pppExtLcpRemoteProtocolCompression=pppExtLcpRemoteProtocolCompression, ipxcpMaximumRestartPeriod=ipxcpMaximumRestartPeriod, dhcpDNSTable=dhcpDNSTable, portshdlcBackupnumber=portshdlcBackupnumber, ipInRipErrors=ipInRipErrors, ipxRoutePort=ipxRoutePort, accessBuilderInternet400s=accessBuilderInternet400s, portsCompress=portsCompress, pool2size=pool2size, ipRouteNextHopName=ipRouteNextHopName, portspppDataBits=portspppDataBits, privatecommunity=privatecommunity, ipxRouteTarget=ipxRouteTarget, filterDest=filterDest, portstaDemandperiod=portstaDemandperiod, portslanIpMask=portslanIpMask, autocallIpxPpp=autocallIpxPpp, ipxInHeaderErrors=ipxInHeaderErrors, trapVoiceDown=trapVoiceDown, ipxServicesTableEntry=ipxServicesTableEntry, trapLoginAuth=trapLoginAuth, isdnFailDestination=isdnFailDestination, serviceConnect2000BaseBri=serviceConnect2000BaseBri, pppIpcpConfigTableEntry=pppIpcpConfigTableEntry, autocallIpxTable=autocallIpxTable, arpMultiLan=arpMultiLan, filterBytecount=filterBytecount, portshdlcIdlethresh=portshdlcIdlethresh, ipxFirewallHigherDestinationNode=ipxFirewallHigherDestinationNode, officeConnectRemote510u=officeConnectRemote510u, pppExtLcpMaximumRestartPeriod=pppExtLcpMaximumRestartPeriod, ipxFirewallMode=ipxFirewallMode, isdnnumbersLasttest=isdnnumbersLasttest, ipNatBogusNetwork=ipNatBogusNetwork, loginTrapEvent=loginTrapEvent, filterType=filterType, autocallIpxEntry=autocallIpxEntry, memoryTotal=memoryTotal, isdnnumbersNumber4=isdnnumbersNumber4, portsslipIpMetric=portsslipIpMetric, portspppIpMask=portspppIpMask, dhcpDNSIndex=dhcpDNSIndex, portsslipMTU=portsslipMTU, autocallIpxRipNetwork=autocallIpxRipNetwork, dnsProfileTable=dnsProfileTable, autocallMacMode=autocallMacMode, radiusUsername=radiusUsername, ipxRouteType=ipxRouteType, autocallIpxRipDirectNetwork=autocallIpxRipDirectNetwork, arpPlusRBasic=arpPlusRBasic, isdnParamsDirectoryNumber3=isdnParamsDirectoryNumber3, isdnbandsEndtime=isdnbandsEndtime, ipxOutSapResponses=ipxOutSapResponses, portspppIPRemoteAddress=portspppIPRemoteAddress, bridge=bridge, portsRxerrs=portsRxerrs, portsslipRxParity=portsslipRxParity, pppExtLcpRemoteAddressCompression=pppExtLcpRemoteAddressCompression, dhcpAutoName=dhcpAutoName, filterFiltermcast=filterFiltermcast, autocallIpxSapRouterMac=autocallIpxSapRouterMac, isdnportsIndex=isdnportsIndex, ipxFirewallLowerSourceSocket=ipxFirewallLowerSourceSocket, isdnParamsSpid3=isdnParamsSpid3, isdnhistoryTotalCalls=isdnhistoryTotalCalls, ipRouteMaskCopy=ipRouteMaskCopy, isdnnumbersPppAuthentication=isdnnumbersPppAuthentication, briFailCauseCode=briFailCauseCode, ipFirewallType=ipFirewallType, pppExtConfigTable=pppExtConfigTable, portspppRemoteUnit=portspppRemoteUnit, isdnParamsSpid4=isdnParamsSpid4, ipxRouteIpxType=ipxRouteIpxType, autocallIpxIndex=autocallIpxIndex, ipxFirewallAction=ipxFirewallAction, portstaIndex=portstaIndex, cscmTrapDetail=cscmTrapDetail, ipxFirewallFilteredPackets=ipxFirewallFilteredPackets, isdnbandsBridgeListTable=isdnbandsBridgeListTable, ipRouteMetric5Copy=ipRouteMetric5Copy, isdnParamsDirectoryNumber1=isdnParamsDirectoryNumber1, isdn=isdn, dhcpDNSAddr=dhcpDNSAddr, trapLogFull=trapLogFull, portstpadTxFlowControl=portstpadTxFlowControl, ipRouteProtoCopy=ipRouteProtoCopy, ipxOutRipErrors=ipxOutRipErrors, cscmOriginatingIP=cscmOriginatingIP, ipxcpLocalRoutingProtocolNegotiation=ipxcpLocalRoutingProtocolNegotiation, portsTxerrs=portsTxerrs, ipxServiceNextHopNode=ipxServiceNextHopNode, ipxcpMaximumConfigRequests=ipxcpMaximumConfigRequests, ipxFirewallLowerDestinationNetwork=ipxFirewallLowerDestinationNetwork, dnsProfileSecondaryDNS=dnsProfileSecondaryDNS, ipxOutRequests=ipxOutRequests, ipxServiceMlink=ipxServiceMlink, portsasyncTable=portsasyncTable, date=date, isdnParamsSpid2=isdnParamsSpid2, ipxFirewallLowerDestinationNode=ipxFirewallLowerDestinationNode, bootpIsdnName=bootpIsdnName, pppExtLcpRemoteACCMEnabled=pppExtLcpRemoteACCMEnabled, autocallIpxSapServer=autocallIpxSapServer, isdnParamsMsn=isdnParamsMsn, portsIndex=portsIndex, autocallIpxSapNode=autocallIpxSapNode, passwdsOld=passwdsOld, timeSinceReboot=timeSinceReboot, isdnbandsBridgeListBandName=isdnbandsBridgeListBandName, autocallIpInverse=autocallIpInverse, portshdlcIdleperiod=portshdlcIdleperiod, isdnportsBackup=isdnportsBackup, isdnnumbersEntry=isdnnumbersEntry, autocallIpxNetwork=autocallIpxNetwork, portsslipFlowControl=portsslipFlowControl, dnsDomainTableIndex=dnsDomainTableIndex, portslanPriority=portslanPriority, bootpDelaySecs=bootpDelaySecs, ipxInReceives=ipxInReceives, isdnLinkUpEvent=isdnLinkUpEvent, ipFirewallLowerSourcePort=ipFirewallLowerSourcePort, ipFirewallSourceMask=ipFirewallSourceMask, firewall=firewall, pppEchoMaxNumberRetransmits=pppEchoMaxNumberRetransmits, defaultalert=defaultalert, ipFirewallMode=ipFirewallMode, autocallIpxFrameType=autocallIpxFrameType, ipRouteTypeCopy=ipRouteTypeCopy, portsslipIpMask=portsslipIpMask, portstaDialtimeout=portstaDialtimeout, pppExtLcpLocalACCM=pppExtLcpLocalACCM, managertimeout=managertimeout, portslanName=portslanName, isdnlistsEntry=isdnlistsEntry, ipOutRipResponses=ipOutRipResponses, dhcpDNSEntry=dhcpDNSEntry, dnsMaxServerTimeout=dnsMaxServerTimeout, portsasyncTxParity=portsasyncTxParity, portsslipName=portsslipName, traps=traps, dhcpAutoSeedStart=dhcpAutoSeedStart, ipNatTcpFinTimeout=ipNatTcpFinTimeout, trapAlarm=trapAlarm, isdnhistory=isdnhistory)
mibBuilder.exportSymbols("REMOTEACCESS-MIB", portstpadEntry=portstpadEntry, trapISDNDown=trapISDNDown, isdnlistsTable=isdnlistsTable, portsvoiceTable=portsvoiceTable, isdnportsTable=isdnportsTable, autocallIpxSapIndex=autocallIpxSapIndex, ipxServiceIpxType=ipxServiceIpxType, portshdlcIpAddress=portshdlcIpAddress, portsRxutil=portsRxutil, autocallIpIdleThreshold=autocallIpIdleThreshold, officeConnectRemote531u=officeConnectRemote531u, ipOutRipDiscards=ipOutRipDiscards, ipRouteMetric4Copy=ipRouteMetric4Copy, pppAuthTableEntry=pppAuthTableEntry, minPoolSize=minPoolSize, standard=standard, isdnlistsIndex=isdnlistsIndex, bootp=bootp, isdnParamsSubAddrVoice=isdnParamsSubAddrVoice, isdnbandsAllowdemand=isdnbandsAllowdemand, pppExtLcpMaximumTerminateRequests=pppExtLcpMaximumTerminateRequests, portshdlcCompression=portshdlcCompression, authorisedEntry=authorisedEntry, portsasyncEntry=portsasyncEntry, portstpadX25MaxLCN=portstpadX25MaxLCN, isdnParamsSubAddrType=isdnParamsSubAddrType, autocallIpxSapService=autocallIpxSapService, portslanLinespeed=portslanLinespeed, isdnnumbersTable=isdnnumbersTable, ipNatTranslate=ipNatTranslate, officeConnectRemote510s=officeConnectRemote510s, pppExtLcpMinimumRestartPeriod=pppExtLcpMinimumRestartPeriod, pppAuthLocalId=pppAuthLocalId, ipNatTcpInactiveTimeout=ipNatTcpInactiveTimeout, isdnnumbersIpxNetwork=isdnnumbersIpxNetwork, ipxRouteMlink=ipxRouteMlink, portshdlcBackupMac=portshdlcBackupMac, ipxOutSapErrors=ipxOutSapErrors, ipRouteNextHopCopy=ipRouteNextHopCopy, dnsDomainRemoteServer=dnsDomainRemoteServer, dnsCacheSize=dnsCacheSize, portsasyncRxParity=portsasyncRxParity, dhcpWINSAddr=dhcpWINSAddr, portshdlcIpxNetwork=portshdlcIpxNetwork, ipcpRemoteCompressionNegotiation=ipcpRemoteCompressionNegotiation, filterLearning=filterLearning, trapAddr=trapAddr, autocallIpIdle=autocallIpIdle, ipxNearestMode=ipxNearestMode, portspppBaud=portspppBaud, isdnbandsEntry=isdnbandsEntry, ipInRipResponses=ipInRipResponses, dhcpAutoMask=dhcpAutoMask, isdnports=isdnports, authorisedTable=authorisedTable, autocallMacAddress=autocallMacAddress, authorised=authorised, pppAuthRetryPeriod=pppAuthRetryPeriod, serviceConnect2000Base=serviceConnect2000Base, accessBuilderRemoteUser400u=accessBuilderRemoteUser400u, filterPacketcount=filterPacketcount, isdnhistoryTotalTime=isdnhistoryTotalTime, ipxcpLocalNodeNumberNegotiation=ipxcpLocalNodeNumberNegotiation, autocallIpxRipTable=autocallIpxRipTable, tftpStatus=tftpStatus, portshdlcLinespeed=portshdlcLinespeed, isdnhistoryTable=isdnhistoryTable, login=login, portstaDemandpriority=portstaDemandpriority, ipFirewallHigherDestinationPort=ipFirewallHigherDestinationPort, ipxFirewallHigherSourceNetwork=ipxFirewallHigherSourceNetwork, trapBriFail=trapBriFail, portshdlcBackupdemand=portshdlcBackupdemand, trapDASS2Fail=trapDASS2Fail, portsasyncDataBits=portsasyncDataBits, ipFirewallSourceAddress=ipFirewallSourceAddress, portsvoiceDialMode=portsvoiceDialMode, portsslipRIPPrivate=portsslipRIPPrivate, dnsDomainPrimaryDNS=dnsDomainPrimaryDNS, autocallDialTable=autocallDialTable, ipRoutingAdvertise=ipRoutingAdvertise, srcEnabled=srcEnabled, ipxRouteLinkTicks=ipxRouteLinkTicks, bootpIdleThreshold=bootpIdleThreshold, portstaAtzstring=portstaAtzstring, portspppIpAddress=portspppIpAddress, ipxForwarding=ipxForwarding, portstaDemandthresh=portstaDemandthresh, ipxFirewallHigherDestinationSocket=ipxFirewallHigherDestinationSocket, ipOutRipUpdates=ipOutRipUpdates, portspppTable=portspppTable, ipxRouteLinkType=ipxRouteLinkType, ipxFirewallLowerSourceNode=ipxFirewallLowerSourceNode, portsasyncName=portsasyncName, ipxcpAdmin=ipxcpAdmin, filtertypeClass=filtertypeClass, isdnportsDemand=isdnportsDemand, pppAuthName=pppAuthName, portstpadRxFlowControl=portstpadRxFlowControl, filterTable=filterTable, ipxcpRemoteRoutingProtocolNegotiation=ipxcpRemoteRoutingProtocolNegotiation, isdnnumbersRemoteUnitType=isdnnumbersRemoteUnitType, portstaDemand=portstaDemand, portshdlcIpMetric=portshdlcIpMetric, ipFirewallConfigIndex=ipFirewallConfigIndex, isdnportsState=isdnportsState, pppExtLinkAuthentication=pppExtLinkAuthentication, isdnnumbersCall=isdnnumbersCall, portshdlcBackuppriority=portshdlcBackuppriority, isdnbandsBridgeListBridgeName=isdnbandsBridgeListBridgeName, arpPlusRPrimary=arpPlusRPrimary, arpOffice=arpOffice, portsslipIpAddress=portsslipIpAddress, autocallIpAddress=autocallIpAddress, ipxInRipTimeouts=ipxInRipTimeouts, ipFirewallBidir=ipFirewallBidir, pppIpxcpConfigTableEntry=pppIpxcpConfigTableEntry, usercfgIndex=usercfgIndex, portstpadIndex=portstpadIndex, ipFirewallStatusIndex=ipFirewallStatusIndex, portsTxpackets=portsTxpackets, autocallIpxDefault=autocallIpxDefault, filtertypeTable=filtertypeTable, isdnnumbersHdlcType=isdnnumbersHdlcType, isdnnumbersDays=isdnnumbersDays, briFailCauseEvent=briFailCauseEvent, isdnParamsNetworkType=isdnParamsNetworkType, isdnParamsTokenRemain=isdnParamsTokenRemain, portshdlcIndex=portshdlcIndex, ipRouteIfIndexCopy=ipRouteIfIndexCopy, usercfgMac=usercfgMac, ipcpRemoteIPAddressNegotiation=ipcpRemoteIPAddressNegotiation, pppExtLcpLocalMRU=pppExtLcpLocalMRU, dnsDomainProfileIndex=dnsDomainProfileIndex, usercfgMode=usercfgMode, isdnbandsName=isdnbandsName, ipRouteAgeCopy=ipRouteAgeCopy, isdnnumbersMPEnable=isdnnumbersMPEnable, version=version, tftpAction=tftpAction, ipxRouteHopCount=ipxRouteHopCount, officeConnectRemote520s=officeConnectRemote520s, portsslipTable=portsslipTable, autocallIpxRipEntry=autocallIpxRipEntry, bootpIdle=bootpIdle, ipxInRipResponses=ipxInRipResponses, ipcpMaximumConfigRequests=ipcpMaximumConfigRequests, isdnhistoryFailedCalls=isdnhistoryFailedCalls, dhcpAutoStatus=dhcpAutoStatus, ipxNearestTableEntry=ipxNearestTableEntry, trapLogThreshold=trapLogThreshold, filtertypeLsap=filtertypeLsap, portspppIpMetric=portspppIpMetric, portspppTxParity=portspppTxParity, filterLearnnovell=filterLearnnovell, isdnlistsBand=isdnlistsBand, trapQ931Fail=trapQ931Fail, tftpServerIP=tftpServerIP, portsRxpackets=portsRxpackets, ipxServiceRTType=ipxServiceRTType, cscmEventNumber=cscmEventNumber, ppp=ppp, pppExtEnableIpx=pppExtEnableIpx, trapIndex=trapIndex, isdnnumbersRemoteIpAddress=isdnnumbersRemoteIpAddress, autocallIpEntry=autocallIpEntry, isdnParamsSubAddr=isdnParamsSubAddr, filterAgingtime=filterAgingtime, usercfgEntry=usercfgEntry, dnsDomainDomainName=dnsDomainDomainName, isdnnumbersIpxType=isdnnumbersIpxType, portsslipPriority=portsslipPriority, pppExtLcpMaximumConfigNaks=pppExtLcpMaximumConfigNaks, dayoftheweek=dayoftheweek, ipxRoutingTableEntry=ipxRoutingTableEntry, isdnlists=isdnlists, ipcpMinimumRestartPeriod=ipcpMinimumRestartPeriod, ipxOutSapRequests=ipxOutSapRequests, portslanIpMetric=portslanIpMetric, filterTypematchaction=filterTypematchaction, usercfgName=usercfgName, isdnbands=isdnbands, ipcpMaximumTerminateRequests=ipcpMaximumTerminateRequests, pppAuthRetryCount=pppAuthRetryCount, cscmInfo=cscmInfo, autocallIpxNode=autocallIpxNode, portshdlcIpxType=portshdlcIpxType, pppExtLcpRemoteMRUEnabled=pppExtLcpRemoteMRUEnabled, ipxcpRemoteNetworkNumberNegotiation=ipxcpRemoteNetworkNumberNegotiation, isdnnumbersMode=isdnnumbersMode, ipFirewallConfigTable=ipFirewallConfigTable, isdnCliMode=isdnCliMode, ipFirewallStatusTable=ipFirewallStatusTable, portstpadX25MinLCN=portstpadX25MinLCN, isdnbandsIndex=isdnbandsIndex, ipNatIpAddress=ipNatIpAddress, mlinkState=mlinkState, trapport=trapport, portsTxutil=portsTxutil, portshdlcDemandperiod=portshdlcDemandperiod, ipxNearestTable=ipxNearestTable, portsType=portsType, sonixMibs=sonixMibs, isdncla=isdncla, portstpadParity=portstpadParity, portsvoiceName=portsvoiceName, traptable=traptable, autocallMacIndex=autocallMacIndex, isdnParamsMaxCallTime=isdnParamsMaxCallTime, ipFirewallConfigTableEntry=ipFirewallConfigTableEntry, ipFirewallHigherSourcePort=ipFirewallHigherSourcePort, bootpAddress=bootpAddress, usercfgTable=usercfgTable, pppExtLcpLocalAddressCompression=pppExtLcpLocalAddressCompression, ip=ip, dhcpAutoSeedEnd=dhcpAutoSeedEnd, ipInRipDiscards=ipInRipDiscards, portsslipIPRemoteAddress=portsslipIPRemoteAddress, portsasyncIndex=portsasyncIndex, ipxcpMaximumConfigNaks=ipxcpMaximumConfigNaks, ipxrt=ipxrt, portsvoiceIndex=portsvoiceIndex, isdnParamsSubAddrSend=isdnParamsSubAddrSend, ipxsap=ipxsap, pppAuthClass=pppAuthClass, primaryDNSAddress=primaryDNSAddress, dnsProfileName=dnsProfileName, patInternalPort=patInternalPort, portsslipEntry=portsslipEntry, isdnParamsMsnLan=isdnParamsMsnLan, ipRouteMetric3Copy=ipRouteMetric3Copy, pppAuthRemoteId=pppAuthRemoteId, ipxFirewallConfigTableEntry=ipxFirewallConfigTableEntry, isdnCliEntry=isdnCliEntry, ipxServiceSocket=ipxServiceSocket, ipxForwardDatagrams=ipxForwardDatagrams, portsslipLinespeed=portsslipLinespeed, radius=radius, isdnParamsIncomingDov=isdnParamsIncomingDov, radiusReplyCode=radiusReplyCode, cscmTrapEvent=cscmTrapEvent, arpFocus=arpFocus, ipFirewallStatusTableEntry=ipFirewallStatusTableEntry, portspppEntry=portspppEntry, accessBuilderRemoteOffice500=accessBuilderRemoteOffice500, autocallDialIdleThreshold=autocallDialIdleThreshold, autocallIpxPacketType=autocallIpxPacketType, isdnnumbersCallType1=isdnnumbersCallType1, ipNatBogusNetmask=ipNatBogusNetmask, dhcpAstatCID=dhcpAstatCID, unitipad=unitipad, mlinkEntry=mlinkEntry, trapLinkDown=trapLinkDown, patMode=patMode)
mibBuilder.exportSymbols("REMOTEACCESS-MIB", portspppIpxType=portspppIpxType, autocallDialIsdn=autocallDialIsdn, portslanTable=portslanTable, ipxInDelivers=ipxInDelivers, portspppRxParity=portspppRxParity, trapPort=trapPort, portsslipTxParity=portsslipTxParity, portshdlcTable=portshdlcTable, autocallIpxRipMode=autocallIpxRipMode, dhcpAutoDomain=dhcpAutoDomain, isdnnumbersNumber1=isdnnumbersNumber1, tftp=tftp, autocallIpxRipFrameType=autocallIpxRipFrameType, authorisedAddress=authorisedAddress, ipcpLocalIPAddressNegotiation=ipcpLocalIPAddressNegotiation, pppExtLcpConfigTableEntry=pppExtLcpConfigTableEntry, autocallIpxBumpable=autocallIpxBumpable, ipFirewallFilteredPackets=ipFirewallFilteredPackets, isdnParams=isdnParams, ipcpMaximumConfigNaks=ipcpMaximumConfigNaks, isdnhistoryDestination=isdnhistoryDestination, isdnbandsBridgeListIndex=isdnbandsBridgeListIndex, isdnnumbersLearntED=isdnnumbersLearntED, accessBuilder7000BriBridgeRouter=accessBuilder7000BriBridgeRouter, pool3size=pool3size, autocallIpxSapNearest=autocallIpxSapNearest, publiccommunity=publiccommunity, isdnFailCause=isdnFailCause, portshdlcDemandthresh=portshdlcDemandthresh, ipFirewallRouterName=ipFirewallRouterName, ipxrip=ipxrip, dnsDomainMode=dnsDomainMode, ipxOutNoRoutes=ipxOutNoRoutes, portshdlcEntry=portshdlcEntry, ipxcpConfigCompleteNegotiation=ipxcpConfigCompleteNegotiation, portsslipStopBits=portsslipStopBits, portsvoiceCallsPermitted=portsvoiceCallsPermitted, mlink=mlink, autocallIpxRipPpp=autocallIpxRipPpp, ipxInSapErrors=ipxInSapErrors, isdnCliIndex=isdnCliIndex, ipxServiceLinkType=ipxServiceLinkType, portstaName=portstaName, dnsProfileEntry=dnsProfileEntry, portsslipIndex=portsslipIndex, isdnhistoryIndex=isdnhistoryIndex, autocallIpxSapEntry=autocallIpxSapEntry, isdnnumbersTesttime=isdnnumbersTesttime, autocallMacIdle=autocallMacIdle, patIndex=patIndex, pppExtLcpRemoteMRU=pppExtLcpRemoteMRU, ports=ports, ipxServiceMode=ipxServiceMode, alarms=alarms, ipRouteTableCopy=ipRouteTableCopy, ipnat=ipnat, system=system, autocallIpxRipIsdnType=autocallIpxRipIsdnType, variant=variant, pppExtLcpMaximumConfigRequests=pppExtLcpMaximumConfigRequests, ipxRouteTicks=ipxRouteTicks, dnsDomainTable=dnsDomainTable, ipxServiceType=ipxServiceType, ipxcpRemoteRouterNameNegotiation=ipxcpRemoteRouterNameNegotiation, autocallIpxIsdnType=autocallIpxIsdnType, autocallIpxMode=autocallIpxMode, ipxRouteMode=ipxRouteMode, isdnportsPriority=isdnportsPriority, ipRouteAdvertise=ipRouteAdvertise, dhcpAstatIpAddr=dhcpAstatIpAddr, portstpadDataBits=portstpadDataBits, bootpActive=bootpActive, ipcpRfc1172Negotiation=ipcpRfc1172Negotiation, pppAuthIndex=pppAuthIndex, pppExtLcpRemotePAPEnabled=pppExtLcpRemotePAPEnabled, portstaScramble=portstaScramble, memoryFree=memoryFree, autocallIpxRipIsdn=autocallIpxRipIsdn, filterFlushall=filterFlushall, mlinkInFrames=mlinkInFrames, portsasyncBaud=portsasyncBaud, isdnParamsMsnCheck=isdnParamsMsnCheck, isdnParamsSpid1=isdnParamsSpid1, dhcpWINSIndex=dhcpWINSIndex, portstaPriority=portstaPriority, officeConnectRemote530u=officeConnectRemote530u, authorisedIndex=authorisedIndex, ipxServiceNode=ipxServiceNode, pppAuthMode=pppAuthMode, traptableEntry=traptableEntry, ipxInRipErrors=ipxInRipErrors, portslanIpxNetwork=portslanIpxNetwork, dnsproxy=dnsproxy, ipNatMyself=ipNatMyself, isdnbandsAllowautocall=isdnbandsAllowautocall, portstpadBaud=portstpadBaud, ipxServicesTable=ipxServicesTable, ipxcpRemoteNodeNumberNegotiation=ipxcpRemoteNodeNumberNegotiation, isdnhistoryEntry=isdnhistoryEntry, dhcpProxyActive=dhcpProxyActive, ipcpMaximumRestartPeriod=ipcpMaximumRestartPeriod, ipxInSapResponses=ipxInSapResponses, filtertypeIndex=filtertypeIndex, dhcpWINSEntry=dhcpWINSEntry, officeConnectRemote520u=officeConnectRemote520u, portsvoiceEncoding=portsvoiceEncoding, serviceConnect2000=serviceConnect2000, portshdlcDemandpriority=portshdlcDemandpriority, ipxFirewallLowerSourceNetwork=ipxFirewallLowerSourceNetwork, portstaSpidstring=portstaSpidstring, unitmacaddress=unitmacaddress, isdnLinkDownEvent=isdnLinkDownEvent, pppExtLcpLocalCHAPEnabled=pppExtLcpLocalCHAPEnabled, portspppLinespeed=portspppLinespeed, portslanIndex=portslanIndex, isdnnumbersMaxCircuits=isdnnumbersMaxCircuits, autocallIpxRipLinkTicks=autocallIpxRipLinkTicks, ipFirewallDestinationAddress=ipFirewallDestinationAddress, filterLearnsourceonmcast=filterLearnsourceonmcast, autocallIpxRipRouterMac=autocallIpxRipRouterMac, isdnbandsTable=isdnbandsTable, ipxNearestServer=ipxNearestServer, portstpadStopBits=portstpadStopBits, filtertypeMode=filtertypeMode, arpPlus=arpPlus, autocallDialBumpable=autocallDialBumpable, portsslipDataBits=portsslipDataBits, filterPrimary=filterPrimary, mlinkIndex=mlinkIndex, pppAuthLocalPw=pppAuthLocalPw, portstaTable=portstaTable, dnsDomainTableEntry=dnsDomainTableEntry, ipxcpLocalNetworkNumberNegotiation=ipxcpLocalNetworkNumberNegotiation, autocallMacEntry=autocallMacEntry, trapaddress=trapaddress, filterLearnbridging=filterLearnbridging, portsEntry=portsEntry, ipFirewallDestinationMask=ipFirewallDestinationMask, accessBuilderInternet400u=accessBuilderInternet400u, ipxcpMinimumRestartPeriod=ipxcpMinimumRestartPeriod, mlinkOutFrames=mlinkOutFrames, alarmCode=alarmCode, ipxFirewallStatusTableEntry=ipxFirewallStatusTableEntry, saverequired=saverequired, ipxFirewallHigherDestinationNetwork=ipxFirewallHigherDestinationNetwork, filterRoute=filterRoute, isdnbandsAllowbackup=isdnbandsAllowbackup, isdnnumbersIndex=isdnnumbersIndex, ipxFirewallConfigTable=ipxFirewallConfigTable, autocallIpxRipIndex=autocallIpxRipIndex, isdnnumbers=isdnnumbers, patPort=patPort, trapLinkUp=trapLinkUp, autocallMacIdleThreshold=autocallMacIdleThreshold, autocallIpxIdleThreshold=autocallIpxIdleThreshold, autocallIpxRipHops=autocallIpxRipHops, pppEchoPeriod=pppEchoPeriod, portshdlcBackupalert=portshdlcBackupalert, mlinkName=mlinkName, ipxInRipRequests=ipxInRipRequests, pppExtEnableIp=pppExtEnableIp, portshdlcIpMask=portshdlcIpMask, portspppIpxNetwork=portspppIpxNetwork, patEntry=patEntry, pppExtLcpLocalMagic=pppExtLcpLocalMagic, ipxsapt=ipxsapt, portshdlcName=portshdlcName, accessBuilder=accessBuilder, secondaryDNSAddress=secondaryDNSAddress, ipxFirewallBidir=ipxFirewallBidir, sonix=sonix, trapVoiceUp=trapVoiceUp, dnsProfilePrimaryDNS=dnsProfilePrimaryDNS, ipRoutingProtocol=ipRoutingProtocol, autocallIpxSapPpp=autocallIpxSapPpp, autocallIpxSapSocket=autocallIpxSapSocket, portsslipBaud=portsslipBaud, isdnParamsTokenRefill=isdnParamsTokenRefill, ipRouteInfoCopy=ipRouteInfoCopy, dhcpAstatHwAddr=dhcpAstatHwAddr, ipOutRipRequests=ipOutRipRequests, pppExtLcpConfigTable=pppExtLcpConfigTable, ipRouteMetric2Copy=ipRouteMetric2Copy, accessBuilder7000PriBridgeRouter=accessBuilder7000PriBridgeRouter, lcdManagerLock=lcdManagerLock, dhcpAstatEntry=dhcpAstatEntry, primaryNBNSAddress=primaryNBNSAddress, isdnportsEntry=isdnportsEntry, officeConnectRemote530s=officeConnectRemote530s, portspppStopBits=portspppStopBits, pppExtLcpLocalMRUEnabled=pppExtLcpLocalMRUEnabled, ipxFirewallLowerDestinationSocket=ipxFirewallLowerDestinationSocket, arpStandard=arpStandard, accessBuilderRemoteUser400s=accessBuilderRemoteUser400s, ipxcpNodeNumber=ipxcpNodeNumber, autocallIpMask=autocallIpMask, pppExtLcpLocalACCMEnabled=pppExtLcpLocalACCMEnabled, ipOutRipErrors=ipOutRipErrors, ipxcpMaximumTerminateRequests=ipxcpMaximumTerminateRequests, pppExtLcpRemoteACCM=pppExtLcpRemoteACCM, autocallIpxTransportControl=autocallIpxTransportControl, pool4size=pool4size, pppExtLcpRemoteMagic=pppExtLcpRemoteMagic, iprip=iprip, isdnbandsStarttime=isdnbandsStarttime, officeConnect=officeConnect, dhcpAutoRouter=dhcpAutoRouter, dnsDomainSecondaryDNS=dnsDomainSecondaryDNS, pool1size=pool1size, ipxServiceNetwork=ipxServiceNetwork, autocallMacIsdn=autocallMacIsdn, ipxFirewallHigherSourceNode=ipxFirewallHigherSourceNode, arpLite=arpLite, ipxFirewallStatusTable=ipxFirewallStatusTable, isdnportsSourceMac=isdnportsSourceMac, mlinkTable=mlinkTable, isdnlistsName=isdnlistsName, isdnnumbersCallType4=isdnnumbersCallType4, ipxInUnknownProtocols=ipxInUnknownProtocols, ipxNearestIndex=ipxNearestIndex, autocallIpxRipTicks=autocallIpxRipTicks, ipRipLearning=ipRipLearning, ipxFirewallRouterName=ipxFirewallRouterName, dhcpserver=dhcpserver, portshdlcScramble=portshdlcScramble, portstaIdleperiod=portstaIdleperiod, isdnbandsDays=isdnbandsDays, dhcpAstatIf=dhcpAstatIf, ipxRouteNextHopNetwork=ipxRouteNextHopNetwork, autocallDialEntry=autocallDialEntry, isdnnumbersCallType2=isdnnumbersCallType2, ipxRoutingTable=ipxRoutingTable, ipxOutSapDiscards=ipxOutSapDiscards, ipxRouteNextHopNode=ipxRouteNextHopNode, filterEntry=filterEntry, pppExtLcpRemoteCHAPEnabled=pppExtLcpRemoteCHAPEnabled, isdnCliTable=isdnCliTable, accessBuilderRemoteOffice700=accessBuilderRemoteOffice700, isdnCliNumber=isdnCliNumber, ipRouteDestCopy=ipRouteDestCopy, autocallIpTable=autocallIpTable, save=save, ipRouteMetric1Copy=ipRouteMetric1Copy, isdnbandsMode=isdnbandsMode, autocallDialIdle=autocallDialIdle, dass2FailCauseCode=dass2FailCauseCode, regArpeggio=regArpeggio, time=time, alarmText=alarmText, incallalert=incallalert, ipxServiceNextHopNetwork=ipxServiceNextHopNetwork, portstaCompression=portstaCompression, ipxFirewallConfigIndex=ipxFirewallConfigIndex, portsTxoctets=portsTxoctets)
mibBuilder.exportSymbols("REMOTEACCESS-MIB", isdnbandsBridgeListEntry=isdnbandsBridgeListEntry, ipxServicePort=ipxServicePort, dnsServerRetries=dnsServerRetries, patInternalIP=patInternalIP, memoryusage=memoryusage, dnsProfileMode=dnsProfileMode, portspppPriority=portspppPriority, isdnParamsMsnVoice=isdnParamsMsnVoice, passwdsTable=passwdsTable, ipxnear=ipxnear, mlinkNumberOfPorts=mlinkNumberOfPorts, dnsProxyActive=dnsProxyActive, pppAuthRenegPeriod=pppAuthRenegPeriod, referenceAddress=referenceAddress, isdnTestCallEvent=isdnTestCallEvent, ipxNearest=ipxNearest, usercfgAllowed=usercfgAllowed, accessBuilderRemoteOffice600=accessBuilderRemoteOffice600, fragmentCount=fragmentCount, portsRxoctets=portsRxoctets, portstaLinespeed=portstaLinespeed, portsName=portsName, ipx=ipx, pppIpxcpConfigTable=pppIpxcpConfigTable, ipxInSapNoServers=ipxInSapNoServers, autocallIpxSapTable=autocallIpxSapTable, autocallIpxIsdn=autocallIpxIsdn, ipxOutRipRequests=ipxOutRipRequests, portsTable=portsTable, ipxFirewallStatusIndex=ipxFirewallStatusIndex, isdnbandsAllowlist=isdnbandsAllowlist, passwdsEntry=passwdsEntry, isdnnumbersCallType3=isdnnumbersCallType3, loopControl=loopControl, autocallIpMode=autocallIpMode, filter=filter, autocallIpxSapNetwork=autocallIpxSapNetwork, isdnportsDestination=isdnportsDestination, isdnParamsSubAddrCheck=isdnParamsSubAddrCheck, isdnnumbersNumber3=isdnnumbersNumber3, ipFirewallLowerDestinationPort=ipFirewallLowerDestinationPort, ipxInRipDiscards=ipxInRipDiscards, autocallMacDefault=autocallMacDefault, isdnportsBumpable=isdnportsBumpable)
