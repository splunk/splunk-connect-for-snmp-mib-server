#
# PySNMP MIB module MICOM-56KCSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-56KCSU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:01:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, iso, Counter64, Bits, ObjectIdentity, MibIdentifier, Integer32, Unsigned32, IpAddress, Counter32, NotificationType, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Counter64", "Bits", "ObjectIdentity", "MibIdentifier", "Integer32", "Unsigned32", "IpAddress", "Counter32", "NotificationType", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_56kcsu = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 28)).setLabel("micom-56kcsu")
csu56k_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1)).setLabel("csu56k-configuration")
csu56k_status = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 2)).setLabel("csu56k-status")
mcm56kCsuCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1))
mcm56kCsuCfgOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dds-pri-4Wire-56k", 1), ("dds-sc-WithSecondaryChannel-72k", 2), ("cc-64k-ClearChannel-64k", 3), ("dds-pri-2Wire-56k", 4))).clone('dds-pri-4Wire-56k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm56kCsuCfgOperatingMode.setStatus('deprecated')
mcm56kCsuCfgClockingSource = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalClock", 1), ("internalClock", 2))).clone('externalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm56kCsuCfgClockingSource.setStatus('deprecated')
mcm56kCsuCfgTxOutOfFrame = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitOutOfFrame", 2))).clone('normalTransmitCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm56kCsuCfgTxOutOfFrame.setStatus('deprecated')
mcm56kCsuCfgTxOutOfService = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitOutOfService", 2))).clone('normalTransmitCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm56kCsuCfgTxOutOfService.setStatus('deprecated')
mcm56kCsuCfgTxControlModeIdle = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitControlModeIdle", 2))).clone('normalTransmitCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm56kCsuCfgTxControlModeIdle.setStatus('deprecated')
mcm56kCsuCfgZeroSuppressDisable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("zeroSuppressionDisable", 2))).clone('normalTransmitCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm56kCsuCfgZeroSuppressDisable.setStatus('deprecated')
mcm56kCsuCfgTxIdle = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitIdle", 2))).clone('normalTransmitCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm56kCsuCfgTxIdle.setStatus('deprecated')
mcm56kCsuCfgCSULoopback = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalReceiveCondition", 1), ("forceCSUtoLoopback", 2))).clone('normalReceiveCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm56kCsuCfgCSULoopback.setStatus('deprecated')
mcm56kCsuCfgFilterForceEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalReceiveCondition", 1), ("filterForceEnable", 2))).clone('normalReceiveCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm56kCsuCfgFilterForceEnable.setStatus('deprecated')
mcm56kCsuCfgFilterForcingCntl = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("filterGain-90db", 1), ("filterGain-84db", 2), ("filterGain-78db", 3), ("filterGain-72db", 4), ("filterGain-66db", 5), ("filterGain-60db", 6), ("filterGain-54db", 7), ("filterGain-48db", 8), ("filterGain-42db", 9), ("filterGain-36db", 10), ("filterGain-30db", 11), ("filterGain-24db", 12), ("filterGain-18db", 13), ("filterGain-12db", 14), ("filterGain-6db", 15), ("filterGain-0db", 16))).clone('filterGain-0db')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm56kCsuCfgFilterForcingCntl.setStatus('deprecated')
nvm56kCsuCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2))
nvm56kCsuCfgOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dds-pri-4Wire-56k", 1), ("dds-sc-WithSecondaryChannel-72k", 2), ("cc-64k-ClearChannel-64k", 3), ("dds-pri-2Wire-56k", 4))).clone('dds-pri-4Wire-56k')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm56kCsuCfgOperatingMode.setStatus('obsolete')
nvm56kCsuCfgClockingSource = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalClock", 1), ("internalClock", 2))).clone('externalClock')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm56kCsuCfgClockingSource.setStatus('obsolete')
nvm56kCsuCfgTxOutOfFrame = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitOutOfFrame", 2))).clone('normalTransmitCondition')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm56kCsuCfgTxOutOfFrame.setStatus('obsolete')
nvm56kCsuCfgTxOutOfService = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitOutOfService", 2))).clone('normalTransmitCondition')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm56kCsuCfgTxOutOfService.setStatus('obsolete')
nvm56kCsuCfgTxControlModeIdle = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitControlModeIdle", 2))).clone('normalTransmitCondition')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm56kCsuCfgTxControlModeIdle.setStatus('obsolete')
nvm56kCsuCfgZeroSuppressDisable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("zeroSuppressionDisable", 2))).clone('normalTransmitCondition')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm56kCsuCfgZeroSuppressDisable.setStatus('obsolete')
nvm56kCsuCfgTxIdle = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitIdle", 2))).clone('normalTransmitCondition')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm56kCsuCfgTxIdle.setStatus('obsolete')
nvm56kCsuCfgCSULoopback = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalReceiveCondition", 1), ("forceCSUtoLoopback", 2))).clone('normalReceiveCondition')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm56kCsuCfgCSULoopback.setStatus('obsolete')
nvm56kCsuCfgFilterForceEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalReceiveCondition", 1), ("filterForceEnable", 2))).clone('normalReceiveCondition')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm56kCsuCfgFilterForceEnable.setStatus('obsolete')
nvm56kCsuCfgFilterForcingCntl = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("filterGain-90db", 1), ("filterGain-84db", 2), ("filterGain-78db", 3), ("filterGain-72db", 4), ("filterGain-66db", 5), ("filterGain-60db", 6), ("filterGain-54db", 7), ("filterGain-48db", 8), ("filterGain-42db", 9), ("filterGain-36db", 10), ("filterGain-30db", 11), ("filterGain-24db", 12), ("filterGain-18db", 13), ("filterGain-12db", 14), ("filterGain-6db", 15), ("filterGain-0db", 16))).clone('filterGain-0db')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm56kCsuCfgFilterForcingCntl.setStatus('obsolete')
mcm56KCsuStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 2, 1))
mcm56KCsuStatusLineStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("linkDown", 2), ("testMode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm56KCsuStatusLineStatus.setStatus('deprecated')
mcm56KCsuStatusRxLossOfSignal = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm56KCsuStatusRxLossOfSignal.setStatus('deprecated')
mcm56KCsuStatusFAWSync = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm56KCsuStatusFAWSync.setStatus('deprecated')
mcm56KCsuStatusLoopPresent = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm56KCsuStatusLoopPresent.setStatus('deprecated')
mcm56KCsuStatusInsertLossLineLength = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm56KCsuStatusInsertLossLineLength.setStatus('deprecated')
mcm56KCsuStatusRxSignalMag = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm56KCsuStatusRxSignalMag.setStatus('deprecated')
mcm56KCsuStatusInvalidBPVcount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 28, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm56KCsuStatusInvalidBPVcount.setStatus('deprecated')
mibBuilder.exportSymbols("MICOM-56KCSU-MIB", mcm56kCsuCfgOperatingMode=mcm56kCsuCfgOperatingMode, nvm56kCsuCfgFilterForceEnable=nvm56kCsuCfgFilterForceEnable, mcm56kCsuCfgTxControlModeIdle=mcm56kCsuCfgTxControlModeIdle, mcm56kCsuCfgCSULoopback=mcm56kCsuCfgCSULoopback, nvm56kCsuCfgZeroSuppressDisable=nvm56kCsuCfgZeroSuppressDisable, csu56k_configuration=csu56k_configuration, mcm56kCsuCfgGroup=mcm56kCsuCfgGroup, mcm56KCsuStatusInvalidBPVcount=mcm56KCsuStatusInvalidBPVcount, mcm56KCsuStatusRxSignalMag=mcm56KCsuStatusRxSignalMag, mcm56kCsuCfgTxIdle=mcm56kCsuCfgTxIdle, nvm56kCsuCfgTxControlModeIdle=nvm56kCsuCfgTxControlModeIdle, nvm56kCsuCfgGroup=nvm56kCsuCfgGroup, nvm56kCsuCfgClockingSource=nvm56kCsuCfgClockingSource, nvm56kCsuCfgOperatingMode=nvm56kCsuCfgOperatingMode, nvm56kCsuCfgTxOutOfService=nvm56kCsuCfgTxOutOfService, nvm56kCsuCfgCSULoopback=nvm56kCsuCfgCSULoopback, nvm56kCsuCfgFilterForcingCntl=nvm56kCsuCfgFilterForcingCntl, mcm56KCsuStatusLoopPresent=mcm56KCsuStatusLoopPresent, micom_56kcsu=micom_56kcsu, mcm56KCsuStatusRxLossOfSignal=mcm56KCsuStatusRxLossOfSignal, mcm56KCsuStatusGroup=mcm56KCsuStatusGroup, mcm56KCsuStatusInsertLossLineLength=mcm56KCsuStatusInsertLossLineLength, csu56k_status=csu56k_status, mcm56KCsuStatusFAWSync=mcm56KCsuStatusFAWSync, mcm56kCsuCfgTxOutOfService=mcm56kCsuCfgTxOutOfService, mcm56kCsuCfgClockingSource=mcm56kCsuCfgClockingSource, mcm56kCsuCfgFilterForcingCntl=mcm56kCsuCfgFilterForcingCntl, mcm56KCsuStatusLineStatus=mcm56KCsuStatusLineStatus, mcm56kCsuCfgZeroSuppressDisable=mcm56kCsuCfgZeroSuppressDisable, nvm56kCsuCfgTxOutOfFrame=nvm56kCsuCfgTxOutOfFrame, mcm56kCsuCfgTxOutOfFrame=mcm56kCsuCfgTxOutOfFrame, nvm56kCsuCfgTxIdle=nvm56kCsuCfgTxIdle, mcm56kCsuCfgFilterForceEnable=mcm56kCsuCfgFilterForceEnable)
