#
# PySNMP MIB module LEAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, ModuleIdentity, NotificationType, Counter64, IpAddress, Unsigned32, ObjectIdentity, Counter32, Integer32, Gauge32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "NotificationType", "Counter64", "IpAddress", "Unsigned32", "ObjectIdentity", "Counter32", "Integer32", "Gauge32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "enterprises")
RowStatus, TimeStamp, PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeStamp", "PhysAddress", "DisplayString", "TextualConvention")
tellabs = ModuleIdentity((1, 3, 6, 1, 4, 1, 42))
if mibBuilder.loadTexts: tellabs.setLastUpdated('Wed Oct 11 15:08:08 BST 1995')
if mibBuilder.loadTexts: tellabs.setOrganization('Tellabs Ltd., Shannon')
class IfIndex(TextualConvention, Integer32):
    status = 'current'

leanMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1))
frnetservMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 1))
frnetservObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 1, 1))
frnetservTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 1, 2))
frLportTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 1), )
if mibBuilder.loadTexts: frLportTable.setStatus('current')
frLportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: frLportEntry.setStatus('current')
frLportNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("e164", 2), ("x121", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportNumPlan.setStatus('current')
frLportContact = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportContact.setStatus('current')
frLportLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportLocation.setStatus('current')
frLportType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportType.setStatus('current')
frLportAddrDLCILen = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("twoOctets10Bits", 1), ("threeOctets10Bits", 2), ("threeOctets16Bits", 3), ("fourOctets17Bits", 4), ("fourOctets23Bits", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportAddrDLCILen.setStatus('current')
frLportVCSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("ansiT1617D", 3), ("ansiT1617B", 4), ("ccittQ933A", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportVCSigProtocol.setStatus('current')
frLportVCSigPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportVCSigPointer.setStatus('current')
frMgtVCSigTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2), )
if mibBuilder.loadTexts: frMgtVCSigTable.setStatus('current')
frMgtVCSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: frMgtVCSigEntry.setStatus('current')
frMgtVCSigProced = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("u2nnet", 1), ("bidirect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigProced.setStatus('current')
frMgtVCSigUserN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigUserN391.setStatus('current')
frMgtVCSigUserN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigUserN392.setStatus('current')
frMgtVCSigUserN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigUserN393.setStatus('current')
frMgtVCSigUserT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigUserT391.setStatus('current')
frMgtVCSigNetN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigNetN392.setStatus('current')
frMgtVCSigNetN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigNetN393.setStatus('current')
frMgtVCSigNetT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigNetT392.setStatus('current')
frMgtVCSigNetnN4 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigNetnN4.setStatus('current')
frMgtVCSigNetnT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), )).clone(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigNetnT3.setStatus('current')
frMgtVCSigUserLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigUserLinkRelErrors.setStatus('current')
frMgtVCSigUserProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigUserProtErrors.setStatus('current')
frMgtVCSigUserChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigUserChanInactive.setStatus('current')
frMgtVCSigNetLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigNetLinkRelErrors.setStatus('current')
frMgtVCSigNetProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigNetProtErrors.setStatus('current')
frMgtVCSigNetChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frMgtVCSigNetChanInactive.setStatus('current')
frPVCEndptTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3), )
if mibBuilder.loadTexts: frPVCEndptTable.setStatus('current')
frPVCEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "LEAN-MIB", "frPVCEndptDLCIIndex"))
if mibBuilder.loadTexts: frPVCEndptEntry.setStatus('current')
frPVCEndptDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: frPVCEndptDLCIIndex.setStatus('current')
frPVCEndptInMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCEndptInMaxFrameSize.setStatus('current')
frPVCEndptInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCEndptInBc.setStatus('current')
frPVCEndptInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCEndptInBe.setStatus('current')
frPVCEndptInCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCEndptInCIR.setStatus('current')
frPVCEndptOutMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCEndptOutMaxFrameSize.setStatus('current')
frPVCEndptOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCEndptOutBc.setStatus('current')
frPVCEndptOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCEndptOutBe.setStatus('current')
frPVCEndptOutCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCEndptOutCIR.setStatus('current')
frPVCEndptConnectIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCEndptConnectIdentifier.setStatus('current')
frPVCEndptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCEndptRowStatus.setStatus('current')
frPVCEndptRcvdSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deleted", 1), ("active", 2), ("inactive", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCEndptRcvdSigStatus.setStatus('current')
frPVCEndptInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCEndptInFrames.setStatus('current')
frPVCEndptOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCEndptOutFrames.setStatus('current')
frPVCEndptInDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCEndptInDEFrames.setStatus('current')
frPVCEndptInExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCEndptInExcessFrames.setStatus('current')
frPVCEndptOutExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCEndptOutExcessFrames.setStatus('current')
frPVCEndptInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCEndptInDiscards.setStatus('current')
frPVCEndptInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCEndptInOctets.setStatus('current')
frPVCEndptOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCEndptOutOctets.setStatus('current')
frPVCConnectIndexValue = MibScalar((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCConnectIndexValue.setStatus('current')
frPVCConnectTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5), )
if mibBuilder.loadTexts: frPVCConnectTable.setStatus('current')
frPVCConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1), ).setIndexNames((0, "LEAN-MIB", "frPVCConnectIndex"), (0, "LEAN-MIB", "frPVCConnectLowIfIndex"), (0, "LEAN-MIB", "frPVCConnectLowDLCIIndex"), (0, "LEAN-MIB", "frPVCConnectHighIfIndex"), (0, "LEAN-MIB", "frPVCConnectHighDLCIIndex"))
if mibBuilder.loadTexts: frPVCConnectEntry.setStatus('current')
frPVCConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: frPVCConnectIndex.setStatus('current')
frPVCConnectLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 2), IfIndex())
if mibBuilder.loadTexts: frPVCConnectLowIfIndex.setStatus('current')
frPVCConnectLowDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 3), Integer32())
if mibBuilder.loadTexts: frPVCConnectLowDLCIIndex.setStatus('current')
frPVCConnectHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 4), IfIndex())
if mibBuilder.loadTexts: frPVCConnectHighIfIndex.setStatus('current')
frPVCConnectHighDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 5), Integer32())
if mibBuilder.loadTexts: frPVCConnectHighDLCIIndex.setStatus('current')
frPVCConnectAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCConnectAdminStatus.setStatus('current')
frPVCConnectL2hOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("testing", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCConnectL2hOperStatus.setStatus('current')
frPVCConnectH2lOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("testing", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCConnectH2lOperStatus.setStatus('current')
frPVCConnectL2hLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCConnectL2hLastChange.setStatus('current')
frPVCConnectH2lLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPVCConnectH2lLastChange.setStatus('current')
frPVCConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 5, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPVCConnectRowStatus.setStatus('current')
frAccountPVCTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 6), )
if mibBuilder.loadTexts: frAccountPVCTable.setStatus('current')
frAccountPVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "LEAN-MIB", "frAccountPVCDLCIIndex"))
if mibBuilder.loadTexts: frAccountPVCEntry.setStatus('current')
frAccountPVCDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: frAccountPVCDLCIIndex.setStatus('current')
frAccountPVCSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAccountPVCSegmentSize.setStatus('current')
frAccountPVCInSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAccountPVCInSegments.setStatus('current')
frAccountPVCOutSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAccountPVCOutSegments.setStatus('current')
frAccountLportTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 7), )
if mibBuilder.loadTexts: frAccountLportTable.setStatus('current')
frAccountLportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: frAccountLportEntry.setStatus('current')
frAccountLportSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAccountLportSegmentSize.setStatus('current')
frAccountLportInSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAccountLportInSegments.setStatus('current')
frAccountLportOutSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAccountLportOutSegments.setStatus('current')
frPVCConnectStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 42, 1, 1, 2, 1)).setObjects(("LEAN-MIB", "frPVCConnectIndex"), ("LEAN-MIB", "frPVCConnectLowIfIndex"), ("LEAN-MIB", "frPVCConnectLowDLCIIndex"), ("LEAN-MIB", "frPVCConnectHighIfIndex"), ("LEAN-MIB", "frPVCConnectHighDLCIIndex"), ("LEAN-MIB", "frPVCConnectL2hOperStatus"), ("LEAN-MIB", "frPVCConnectH2lOperStatus"), ("LEAN-MIB", "frPVCEndptRcvdSigStatus"))
if mibBuilder.loadTexts: frPVCConnectStatusChange.setStatus('current')
frnetservConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 1, 3))
frnetservGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 1, 3, 1))
frnetservCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 1, 3, 2))
frnetservCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 42, 1, 1, 3, 2, 1)).setObjects(("LEAN-MIB", "frnetservLportGroup"), ("LEAN-MIB", "frnetservMgtVCSigGroup"), ("LEAN-MIB", "frnetservPVCEndptGroup"), ("LEAN-MIB", "frnetservPVCConnectGroup"), ("LEAN-MIB", "frnetservAccountPVCGroup"), ("LEAN-MIB", "frnetservAccountLportGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frnetservCompliance = frnetservCompliance.setStatus('current')
frnetservLportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 1, 3, 1, 1)).setObjects(("LEAN-MIB", "frLportNumPlan"), ("LEAN-MIB", "frLportContact"), ("LEAN-MIB", "frLportLocation"), ("LEAN-MIB", "frLportType"), ("LEAN-MIB", "frLportAddrDLCILen"), ("LEAN-MIB", "frLportVCSigProtocol"), ("LEAN-MIB", "frLportVCSigPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frnetservLportGroup = frnetservLportGroup.setStatus('current')
frnetservMgtVCSigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 1, 3, 1, 2)).setObjects(("LEAN-MIB", "frMgtVCSigProced"), ("LEAN-MIB", "frMgtVCSigUserN391"), ("LEAN-MIB", "frMgtVCSigUserN392"), ("LEAN-MIB", "frMgtVCSigUserN393"), ("LEAN-MIB", "frMgtVCSigUserT391"), ("LEAN-MIB", "frMgtVCSigNetN392"), ("LEAN-MIB", "frMgtVCSigNetN393"), ("LEAN-MIB", "frMgtVCSigNetT392"), ("LEAN-MIB", "frMgtVCSigNetnN4"), ("LEAN-MIB", "frMgtVCSigNetnT3"), ("LEAN-MIB", "frMgtVCSigUserLinkRelErrors"), ("LEAN-MIB", "frMgtVCSigUserProtErrors"), ("LEAN-MIB", "frMgtVCSigUserChanInactive"), ("LEAN-MIB", "frMgtVCSigNetLinkRelErrors"), ("LEAN-MIB", "frMgtVCSigNetProtErrors"), ("LEAN-MIB", "frMgtVCSigNetChanInactive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frnetservMgtVCSigGroup = frnetservMgtVCSigGroup.setStatus('current')
frnetservPVCEndptGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 1, 3, 1, 3)).setObjects(("LEAN-MIB", "frPVCConnectIndexValue"), ("LEAN-MIB", "frPVCEndptInMaxFrameSize"), ("LEAN-MIB", "frPVCEndptInBc"), ("LEAN-MIB", "frPVCEndptInBe"), ("LEAN-MIB", "frPVCEndptInCIR"), ("LEAN-MIB", "frPVCEndptOutMaxFrameSize"), ("LEAN-MIB", "frPVCEndptOutBc"), ("LEAN-MIB", "frPVCEndptOutBe"), ("LEAN-MIB", "frPVCEndptOutCIR"), ("LEAN-MIB", "frPVCEndptConnectIdentifier"), ("LEAN-MIB", "frPVCEndptRowStatus"), ("LEAN-MIB", "frPVCEndptRcvdSigStatus"), ("LEAN-MIB", "frPVCEndptInFrames"), ("LEAN-MIB", "frPVCEndptOutFrames"), ("LEAN-MIB", "frPVCEndptInDEFrames"), ("LEAN-MIB", "frPVCEndptInExcessFrames"), ("LEAN-MIB", "frPVCEndptOutExcessFrames"), ("LEAN-MIB", "frPVCEndptInDiscards"), ("LEAN-MIB", "frPVCEndptInOctets"), ("LEAN-MIB", "frPVCEndptOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frnetservPVCEndptGroup = frnetservPVCEndptGroup.setStatus('current')
frnetservPVCConnectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 1, 3, 1, 4)).setObjects(("LEAN-MIB", "frPVCConnectAdminStatus"), ("LEAN-MIB", "frPVCConnectL2hOperStatus"), ("LEAN-MIB", "frPVCConnectH2lOperStatus"), ("LEAN-MIB", "frPVCConnectL2hLastChange"), ("LEAN-MIB", "frPVCConnectH2lLastChange"), ("LEAN-MIB", "frPVCConnectRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frnetservPVCConnectGroup = frnetservPVCConnectGroup.setStatus('current')
frnetservAccountPVCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 1, 3, 1, 5)).setObjects(("LEAN-MIB", "frAccountPVCSegmentSize"), ("LEAN-MIB", "frAccountPVCInSegments"), ("LEAN-MIB", "frAccountPVCOutSegments"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frnetservAccountPVCGroup = frnetservAccountPVCGroup.setStatus('current')
frnetservAccountLportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 1, 3, 1, 6)).setObjects(("LEAN-MIB", "frAccountLportSegmentSize"), ("LEAN-MIB", "frAccountLportInSegments"), ("LEAN-MIB", "frAccountLportOutSegments"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frnetservAccountLportGroup = frnetservAccountLportGroup.setStatus('current')
atmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 2))
atmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 2, 1))
class AtmTrafficDescrParamIndex(TextualConvention, Integer32):
    status = 'current'

atmTrafficDescriptorTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 1))
atmNoTrafficDescriptor = ObjectIdentity((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 1, 1))
if mibBuilder.loadTexts: atmNoTrafficDescriptor.setStatus('current')
atmNoClpNoScr = ObjectIdentity((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 1, 2))
if mibBuilder.loadTexts: atmNoClpNoScr.setStatus('current')
atmClpNoTaggingNoScr = ObjectIdentity((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 1, 3))
if mibBuilder.loadTexts: atmClpNoTaggingNoScr.setStatus('current')
atmClpTaggingNoScr = ObjectIdentity((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 1, 4))
if mibBuilder.loadTexts: atmClpTaggingNoScr.setStatus('current')
atmNoClpScr = ObjectIdentity((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 1, 5))
if mibBuilder.loadTexts: atmNoClpScr.setStatus('current')
atmClpNoTaggingScr = ObjectIdentity((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 1, 6))
if mibBuilder.loadTexts: atmClpNoTaggingScr.setStatus('current')
atmClpTaggingScr = ObjectIdentity((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 1, 7))
if mibBuilder.loadTexts: atmClpTaggingScr.setStatus('current')
atmInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2), )
if mibBuilder.loadTexts: atmInterfaceConfTable.setStatus('current')
atmInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmInterfaceConfEntry.setStatus('current')
atmInterfaceMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceMaxVpcs.setStatus('current')
atmInterfaceMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceMaxVccs.setStatus('current')
atmInterfaceConfVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceConfVpcs.setStatus('current')
atmInterfaceConfVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceConfVccs.setStatus('current')
atmInterfaceMaxActiveVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceMaxActiveVpiBits.setStatus('current')
atmInterfaceMaxActiveVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceMaxActiveVciBits.setStatus('current')
atmInterfaceIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceIlmiVpi.setStatus('current')
atmInterfaceIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceIlmiVci.setStatus('current')
atmInterfaceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("private", 1), ("nsapE164", 2), ("nativeE164", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceAddressType.setStatus('current')
atmInterfaceAdminAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceAdminAddress.setStatus('current')
atmInterfaceMyNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceMyNeighborIpAddress.setStatus('current')
atmInterfaceMyNeighborIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceMyNeighborIfName.setStatus('current')
atmInterfaceDs3PlcpTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 3), )
if mibBuilder.loadTexts: atmInterfaceDs3PlcpTable.setStatus('current')
atmInterfaceDs3PlcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmInterfaceDs3PlcpEntry.setStatus('current')
atmInterfaceDs3PlcpSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceDs3PlcpSEFSs.setStatus('current')
atmInterfaceDs3PlcpAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAlarm", 1), ("receivedFarEndAlarm", 2), ("incomingLOF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceDs3PlcpAlarmState.setStatus('current')
atmInterfaceDs3PlcpUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceDs3PlcpUASs.setStatus('current')
atmInterfaceTCTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 4), )
if mibBuilder.loadTexts: atmInterfaceTCTable.setStatus('current')
atmInterfaceTCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmInterfaceTCEntry.setStatus('current')
atmInterfaceOCDEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceOCDEvents.setStatus('current')
atmInterfaceTCAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAlarm", 1), ("lcdFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceTCAlarmState.setStatus('current')
atmTrafficDescrParamTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5), )
if mibBuilder.loadTexts: atmTrafficDescrParamTable.setStatus('current')
atmTrafficDescrParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5, 1), ).setIndexNames((0, "LEAN-MIB", "atmTrafficDescrParamIndex"))
if mibBuilder.loadTexts: atmTrafficDescrParamEntry.setStatus('current')
atmTrafficDescrParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5, 1, 1), AtmTrafficDescrParamIndex())
if mibBuilder.loadTexts: atmTrafficDescrParamIndex.setStatus('current')
atmTrafficDescrType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5, 1, 2), ObjectIdentifier().clone((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 1, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrafficDescrType.setStatus('current')
atmTrafficDescrParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrafficDescrParam1.setStatus('current')
atmTrafficDescrParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrafficDescrParam2.setStatus('current')
atmTrafficDescrParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrafficDescrParam3.setStatus('current')
atmTrafficDescrParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrafficDescrParam4.setStatus('current')
atmTrafficDescrParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrafficDescrParam5.setStatus('current')
atmTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrafficQoSClass.setStatus('current')
atmTrafficDescrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 5, 1, 9), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrafficDescrRowStatus.setStatus('current')
atmVplTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 6), )
if mibBuilder.loadTexts: atmVplTable.setStatus('current')
atmVplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "LEAN-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: atmVplEntry.setStatus('current')
atmVplVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: atmVplVpi.setStatus('current')
atmVplAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVplAdminStatus.setStatus('current')
atmVplOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplOperStatus.setStatus('current')
atmVplLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 6, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplLastChange.setStatus('current')
atmVplReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 6, 1, 5), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVplReceiveTrafficDescrIndex.setStatus('current')
atmVplTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 6, 1, 6), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVplTransmitTrafficDescrIndex.setStatus('current')
atmVplCrossConnectIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplCrossConnectIdentifier.setStatus('current')
atmVplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 6, 1, 8), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVplRowStatus.setStatus('current')
atmVclTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7), )
if mibBuilder.loadTexts: atmVclTable.setStatus('current')
atmVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "LEAN-MIB", "atmVclVpi"), (0, "LEAN-MIB", "atmVclVci"))
if mibBuilder.loadTexts: atmVclEntry.setStatus('current')
atmVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmVclVpi.setStatus('current')
atmVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmVclVci.setStatus('current')
atmVclAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclAdminStatus.setStatus('current')
atmVclOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclOperStatus.setStatus('current')
atmVclLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclLastChange.setStatus('current')
atmVclReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 6), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclReceiveTrafficDescrIndex.setStatus('current')
atmVclTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 7), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclTransmitTrafficDescrIndex.setStatus('current')
atmVccAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal1", 1), ("aal34", 2), ("aal5", 3), ("other", 4), ("unknown", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVccAalType.setStatus('current')
atmVccAal5CpcsTransmitSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(9188)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVccAal5CpcsTransmitSduSize.setStatus('current')
atmVccAal5CpcsReceiveSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(9188)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVccAal5CpcsReceiveSduSize.setStatus('current')
atmVccAal5EncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vcMultiplexRoutedProtocol", 1), ("vcMultiplexBridgedProtocol8023", 2), ("vcMultiplexBridgedProtocol8025", 3), ("vcMultiplexBridgedProtocol8026", 4), ("vcMultiplexLANemulation8023", 5), ("vcMultiplexLANemulation8025", 6), ("llcEncapsulation", 7), ("multiprotocolFrameRelaySscs", 8), ("other", 9), ("unknown", 10))).clone('llcEncapsulation')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVccAal5EncapsType.setStatus('current')
atmVclCrossConnectIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclCrossConnectIdentifier.setStatus('current')
atmVclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 7, 1, 13), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclRowStatus.setStatus('current')
atmVpCrossConnectIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVpCrossConnectIndexNext.setStatus('current')
atmVpCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9), )
if mibBuilder.loadTexts: atmVpCrossConnectTable.setStatus('current')
atmVpCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1), ).setIndexNames((0, "LEAN-MIB", "atmVpCrossConnectIndex"), (0, "LEAN-MIB", "atmVpCrossConnectLowIfIndex"), (0, "LEAN-MIB", "atmVpCrossConnectLowVpi"), (0, "LEAN-MIB", "atmVpCrossConnectHighIfIndex"), (0, "LEAN-MIB", "atmVpCrossConnectHighVpi"))
if mibBuilder.loadTexts: atmVpCrossConnectEntry.setStatus('current')
atmVpCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmVpCrossConnectIndex.setStatus('current')
atmVpCrossConnectLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 2), IfIndex())
if mibBuilder.loadTexts: atmVpCrossConnectLowIfIndex.setStatus('current')
atmVpCrossConnectLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: atmVpCrossConnectLowVpi.setStatus('current')
atmVpCrossConnectHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 4), IfIndex())
if mibBuilder.loadTexts: atmVpCrossConnectHighIfIndex.setStatus('current')
atmVpCrossConnectHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: atmVpCrossConnectHighVpi.setStatus('current')
atmVpCrossConnectAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVpCrossConnectAdminStatus.setStatus('current')
atmVpCrossConnectL2HOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVpCrossConnectL2HOperStatus.setStatus('current')
atmVpCrossConnectH2LOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVpCrossConnectH2LOperStatus.setStatus('current')
atmVpCrossConnectL2HLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVpCrossConnectL2HLastChange.setStatus('current')
atmVpCrossConnectH2LLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVpCrossConnectH2LLastChange.setStatus('current')
atmVpCrossConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 9, 1, 11), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVpCrossConnectRowStatus.setStatus('current')
atmVcCrossConnectIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcCrossConnectIndexNext.setStatus('current')
atmVcCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11), )
if mibBuilder.loadTexts: atmVcCrossConnectTable.setStatus('current')
atmVcCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1), ).setIndexNames((0, "LEAN-MIB", "atmVcCrossConnectIndex"), (0, "LEAN-MIB", "atmVcCrossConnectLowIfIndex"), (0, "LEAN-MIB", "atmVcCrossConnectLowVpi"), (0, "LEAN-MIB", "atmVcCrossConnectLowVci"), (0, "LEAN-MIB", "atmVcCrossConnectHighIfIndex"), (0, "LEAN-MIB", "atmVcCrossConnectHighVpi"), (0, "LEAN-MIB", "atmVcCrossConnectHighVci"))
if mibBuilder.loadTexts: atmVcCrossConnectEntry.setStatus('current')
atmVcCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmVcCrossConnectIndex.setStatus('current')
atmVcCrossConnectLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 2), IfIndex())
if mibBuilder.loadTexts: atmVcCrossConnectLowIfIndex.setStatus('current')
atmVcCrossConnectLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmVcCrossConnectLowVpi.setStatus('current')
atmVcCrossConnectLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmVcCrossConnectLowVci.setStatus('current')
atmVcCrossConnectHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 5), IfIndex())
if mibBuilder.loadTexts: atmVcCrossConnectHighIfIndex.setStatus('current')
atmVcCrossConnectHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmVcCrossConnectHighVpi.setStatus('current')
atmVcCrossConnectHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmVcCrossConnectHighVci.setStatus('current')
atmVcCrossConnectAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVcCrossConnectAdminStatus.setStatus('current')
atmVcCrossConnectL2HOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcCrossConnectL2HOperStatus.setStatus('current')
atmVcCrossConnectH2LOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcCrossConnectH2LOperStatus.setStatus('current')
atmVcCrossConnectL2HLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcCrossConnectL2HLastChange.setStatus('current')
atmVcCrossConnectH2LLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcCrossConnectH2LLastChange.setStatus('current')
atmVcCrossConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 11, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVcCrossConnectRowStatus.setStatus('current')
aal5VccTable = MibTable((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 12), )
if mibBuilder.loadTexts: aal5VccTable.setStatus('current')
aal5VccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "LEAN-MIB", "aal5VccVpi"), (0, "LEAN-MIB", "aal5VccVci"))
if mibBuilder.loadTexts: aal5VccEntry.setStatus('current')
aal5VccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: aal5VccVpi.setStatus('current')
aal5VccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: aal5VccVci.setStatus('current')
aal5VccCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5VccCrcErrors.setStatus('current')
aal5VccSarTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5VccSarTimeOuts.setStatus('current')
aal5VccOverSizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 1, 2, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5VccOverSizedSDUs.setStatus('current')
atmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 2, 2))
atmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 1))
atmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 2))
atmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 2, 1)).setObjects(("LEAN-MIB", "atmInterfaceConfGroup"), ("LEAN-MIB", "atmTrafficDescrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmMIBCompliance = atmMIBCompliance.setStatus('current')
atmInterfaceConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 1, 1)).setObjects(("LEAN-MIB", "atmInterfaceMaxVpcs"), ("LEAN-MIB", "atmInterfaceMaxVccs"), ("LEAN-MIB", "atmInterfaceConfVpcs"), ("LEAN-MIB", "atmInterfaceConfVccs"), ("LEAN-MIB", "atmInterfaceMaxActiveVpiBits"), ("LEAN-MIB", "atmInterfaceMaxActiveVciBits"), ("LEAN-MIB", "atmInterfaceIlmiVpi"), ("LEAN-MIB", "atmInterfaceIlmiVci"), ("LEAN-MIB", "atmInterfaceAddressType"), ("LEAN-MIB", "atmInterfaceAdminAddress"), ("LEAN-MIB", "atmInterfaceMyNeighborIpAddress"), ("LEAN-MIB", "atmInterfaceMyNeighborIfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmInterfaceConfGroup = atmInterfaceConfGroup.setStatus('current')
atmTrafficDescrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 1, 2)).setObjects(("LEAN-MIB", "atmTrafficDescrType"), ("LEAN-MIB", "atmTrafficDescrParam1"), ("LEAN-MIB", "atmTrafficDescrParam2"), ("LEAN-MIB", "atmTrafficDescrParam3"), ("LEAN-MIB", "atmTrafficDescrParam4"), ("LEAN-MIB", "atmTrafficDescrParam5"), ("LEAN-MIB", "atmTrafficQoSClass"), ("LEAN-MIB", "atmTrafficDescrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTrafficDescrGroup = atmTrafficDescrGroup.setStatus('current')
atmInterfaceDs3PlcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 1, 3)).setObjects(("LEAN-MIB", "atmInterfaceDs3PlcpSEFSs"), ("LEAN-MIB", "atmInterfaceDs3PlcpAlarmState"), ("LEAN-MIB", "atmInterfaceDs3PlcpUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmInterfaceDs3PlcpGroup = atmInterfaceDs3PlcpGroup.setStatus('current')
atmInterfaceTCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 1, 4)).setObjects(("LEAN-MIB", "atmInterfaceOCDEvents"), ("LEAN-MIB", "atmInterfaceTCAlarmState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmInterfaceTCGroup = atmInterfaceTCGroup.setStatus('current')
atmVpcTerminationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 1, 5)).setObjects(("LEAN-MIB", "atmVplOperStatus"), ("LEAN-MIB", "atmVplAdminStatus"), ("LEAN-MIB", "atmVplLastChange"), ("LEAN-MIB", "atmVplReceiveTrafficDescrIndex"), ("LEAN-MIB", "atmVplTransmitTrafficDescrIndex"), ("LEAN-MIB", "atmVplRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmVpcTerminationGroup = atmVpcTerminationGroup.setStatus('current')
atmVccTerminationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 1, 6)).setObjects(("LEAN-MIB", "atmVclOperStatus"), ("LEAN-MIB", "atmVclAdminStatus"), ("LEAN-MIB", "atmVclLastChange"), ("LEAN-MIB", "atmVclReceiveTrafficDescrIndex"), ("LEAN-MIB", "atmVclTransmitTrafficDescrIndex"), ("LEAN-MIB", "atmVccAalType"), ("LEAN-MIB", "atmVclRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmVccTerminationGroup = atmVccTerminationGroup.setStatus('current')
atmVpCrossConnectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 1, 7)).setObjects(("LEAN-MIB", "atmVplReceiveTrafficDescrIndex"), ("LEAN-MIB", "atmVplTransmitTrafficDescrIndex"), ("LEAN-MIB", "atmVplOperStatus"), ("LEAN-MIB", "atmVplRowStatus"), ("LEAN-MIB", "atmVpCrossConnectAdminStatus"), ("LEAN-MIB", "atmVpCrossConnectL2HOperStatus"), ("LEAN-MIB", "atmVpCrossConnectH2LOperStatus"), ("LEAN-MIB", "atmVpCrossConnectL2HLastChange"), ("LEAN-MIB", "atmVpCrossConnectH2LLastChange"), ("LEAN-MIB", "atmVpCrossConnectRowStatus"), ("LEAN-MIB", "atmVplCrossConnectIdentifier"), ("LEAN-MIB", "atmVpCrossConnectIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmVpCrossConnectGroup = atmVpCrossConnectGroup.setStatus('current')
atmVcCrossConnectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 1, 8)).setObjects(("LEAN-MIB", "atmVclReceiveTrafficDescrIndex"), ("LEAN-MIB", "atmVclTransmitTrafficDescrIndex"), ("LEAN-MIB", "atmVclOperStatus"), ("LEAN-MIB", "atmVclRowStatus"), ("LEAN-MIB", "atmVcCrossConnectAdminStatus"), ("LEAN-MIB", "atmVcCrossConnectL2HOperStatus"), ("LEAN-MIB", "atmVcCrossConnectH2LOperStatus"), ("LEAN-MIB", "atmVcCrossConnectL2HLastChange"), ("LEAN-MIB", "atmVcCrossConnectH2LLastChange"), ("LEAN-MIB", "atmVcCrossConnectRowStatus"), ("LEAN-MIB", "atmVclCrossConnectIdentifier"), ("LEAN-MIB", "atmVcCrossConnectIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmVcCrossConnectGroup = atmVcCrossConnectGroup.setStatus('current')
aal5VccGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 1, 2, 2, 1, 9)).setObjects(("LEAN-MIB", "atmVccAal5CpcsTransmitSduSize"), ("LEAN-MIB", "atmVccAal5CpcsReceiveSduSize"), ("LEAN-MIB", "atmVccAal5EncapsType"), ("LEAN-MIB", "aal5VccCrcErrors"), ("LEAN-MIB", "aal5VccSarTimeOuts"), ("LEAN-MIB", "aal5VccOverSizedSDUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aal5VccGroup = aal5VccGroup.setStatus('current')
mibBuilder.exportSymbols("LEAN-MIB", atmNoClpScr=atmNoClpScr, atmVpCrossConnectL2HOperStatus=atmVpCrossConnectL2HOperStatus, frMgtVCSigNetLinkRelErrors=frMgtVCSigNetLinkRelErrors, leanMIB=leanMIB, frPVCEndptInExcessFrames=frPVCEndptInExcessFrames, atmVcCrossConnectLowVci=atmVcCrossConnectLowVci, frLportTable=frLportTable, frLportAddrDLCILen=frLportAddrDLCILen, frMgtVCSigUserProtErrors=frMgtVCSigUserProtErrors, atmTrafficDescrParam5=atmTrafficDescrParam5, atmVplTable=atmVplTable, atmVcCrossConnectH2LOperStatus=atmVcCrossConnectH2LOperStatus, atmVpCrossConnectIndex=atmVpCrossConnectIndex, aal5VccVpi=aal5VccVpi, frPVCConnectEntry=frPVCConnectEntry, atmInterfaceIlmiVci=atmInterfaceIlmiVci, frMgtVCSigTable=frMgtVCSigTable, atmVpCrossConnectAdminStatus=atmVpCrossConnectAdminStatus, frAccountPVCEntry=frAccountPVCEntry, atmMIBCompliance=atmMIBCompliance, frPVCConnectH2lOperStatus=frPVCConnectH2lOperStatus, frMgtVCSigNetN393=frMgtVCSigNetN393, frPVCEndptOutExcessFrames=frPVCEndptOutExcessFrames, atmTrafficDescrParamTable=atmTrafficDescrParamTable, atmVplReceiveTrafficDescrIndex=atmVplReceiveTrafficDescrIndex, frAccountLportTable=frAccountLportTable, atmInterfaceIlmiVpi=atmInterfaceIlmiVpi, atmVpCrossConnectLowVpi=atmVpCrossConnectLowVpi, frPVCEndptInMaxFrameSize=frPVCEndptInMaxFrameSize, frMgtVCSigNetN392=frMgtVCSigNetN392, frAccountPVCSegmentSize=frAccountPVCSegmentSize, frPVCEndptInBe=frPVCEndptInBe, atmVpCrossConnectHighIfIndex=atmVpCrossConnectHighIfIndex, atmVplTransmitTrafficDescrIndex=atmVplTransmitTrafficDescrIndex, frPVCConnectTable=frPVCConnectTable, atmClpTaggingNoScr=atmClpTaggingNoScr, atmMIBGroups=atmMIBGroups, atmTrafficDescrParam2=atmTrafficDescrParam2, frPVCEndptInFrames=frPVCEndptInFrames, aal5VccGroup=aal5VccGroup, atmTrafficQoSClass=atmTrafficQoSClass, frnetservLportGroup=frnetservLportGroup, frPVCConnectStatusChange=frPVCConnectStatusChange, frMgtVCSigUserChanInactive=frMgtVCSigUserChanInactive, frPVCEndptInDEFrames=frPVCEndptInDEFrames, frMgtVCSigNetProtErrors=frMgtVCSigNetProtErrors, atmVclTable=atmVclTable, frPVCEndptRcvdSigStatus=frPVCEndptRcvdSigStatus, frnetservObjects=frnetservObjects, frPVCEndptInDiscards=frPVCEndptInDiscards, frnetservTraps=frnetservTraps, frAccountPVCTable=frAccountPVCTable, frnetservMgtVCSigGroup=frnetservMgtVCSigGroup, atmVclVci=atmVclVci, frnetservConformance=frnetservConformance, atmVcCrossConnectH2LLastChange=atmVcCrossConnectH2LLastChange, frPVCConnectRowStatus=frPVCConnectRowStatus, frnetservPVCConnectGroup=frnetservPVCConnectGroup, atmInterfaceMaxActiveVpiBits=atmInterfaceMaxActiveVpiBits, atmInterfaceConfEntry=atmInterfaceConfEntry, aal5VccVci=aal5VccVci, atmTrafficDescrParam3=atmTrafficDescrParam3, frAccountLportEntry=frAccountLportEntry, atmInterfaceMaxVpcs=atmInterfaceMaxVpcs, atmInterfaceConfGroup=atmInterfaceConfGroup, frnetservMIB=frnetservMIB, frLportVCSigPointer=frLportVCSigPointer, frPVCEndptDLCIIndex=frPVCEndptDLCIIndex, frMgtVCSigEntry=frMgtVCSigEntry, atmInterfaceAdminAddress=atmInterfaceAdminAddress, frAccountLportOutSegments=frAccountLportOutSegments, atmTrafficDescrParam1=atmTrafficDescrParam1, atmVcCrossConnectLowVpi=atmVcCrossConnectLowVpi, frPVCEndptInBc=frPVCEndptInBc, atmTrafficDescrRowStatus=atmTrafficDescrRowStatus, atmInterfaceConfVpcs=atmInterfaceConfVpcs, atmVpCrossConnectL2HLastChange=atmVpCrossConnectL2HLastChange, atmVccAal5CpcsReceiveSduSize=atmVccAal5CpcsReceiveSduSize, frPVCEndptOutBc=frPVCEndptOutBc, frPVCEndptTable=frPVCEndptTable, atmTrafficDescrGroup=atmTrafficDescrGroup, atmVpcTerminationGroup=atmVpcTerminationGroup, frPVCConnectAdminStatus=frPVCConnectAdminStatus, atmVclOperStatus=atmVclOperStatus, frLportLocation=frLportLocation, atmVplVpi=atmVplVpi, frPVCConnectHighDLCIIndex=frPVCConnectHighDLCIIndex, atmTrafficDescrParamEntry=atmTrafficDescrParamEntry, atmVcCrossConnectIndexNext=atmVcCrossConnectIndexNext, PYSNMP_MODULE_ID=tellabs, frLportContact=frLportContact, frPVCConnectLowIfIndex=frPVCConnectLowIfIndex, atmVclRowStatus=atmVclRowStatus, frPVCConnectHighIfIndex=frPVCConnectHighIfIndex, frLportEntry=frLportEntry, frPVCConnectH2lLastChange=frPVCConnectH2lLastChange, atmInterfaceTCTable=atmInterfaceTCTable, atmVplCrossConnectIdentifier=atmVplCrossConnectIdentifier, frAccountLportSegmentSize=frAccountLportSegmentSize, frAccountLportInSegments=frAccountLportInSegments, atmInterfaceAddressType=atmInterfaceAddressType, atmVplEntry=atmVplEntry, atmVcCrossConnectHighIfIndex=atmVcCrossConnectHighIfIndex, aal5VccSarTimeOuts=aal5VccSarTimeOuts, atmNoClpNoScr=atmNoClpNoScr, atmMIB=atmMIB, AtmTrafficDescrParamIndex=AtmTrafficDescrParamIndex, frLportVCSigProtocol=frLportVCSigProtocol, atmInterfaceDs3PlcpSEFSs=atmInterfaceDs3PlcpSEFSs, frPVCConnectL2hLastChange=frPVCConnectL2hLastChange, frnetservGroups=frnetservGroups, atmVpCrossConnectTable=atmVpCrossConnectTable, frnetservCompliances=frnetservCompliances, atmVccAalType=atmVccAalType, atmVclCrossConnectIdentifier=atmVclCrossConnectIdentifier, frMgtVCSigProced=frMgtVCSigProced, frPVCEndptEntry=frPVCEndptEntry, frPVCEndptOutOctets=frPVCEndptOutOctets, frAccountPVCOutSegments=frAccountPVCOutSegments, atmInterfaceDs3PlcpUASs=atmInterfaceDs3PlcpUASs, atmVpCrossConnectRowStatus=atmVpCrossConnectRowStatus, atmVccAal5CpcsTransmitSduSize=atmVccAal5CpcsTransmitSduSize, frPVCEndptOutCIR=frPVCEndptOutCIR, frPVCConnectIndex=frPVCConnectIndex, atmInterfaceConfVccs=atmInterfaceConfVccs, IfIndex=IfIndex, aal5VccOverSizedSDUs=aal5VccOverSizedSDUs, frPVCEndptOutBe=frPVCEndptOutBe, frnetservAccountLportGroup=frnetservAccountLportGroup, atmClpTaggingScr=atmClpTaggingScr, frPVCEndptInOctets=frPVCEndptInOctets, atmTrafficDescriptorTypes=atmTrafficDescriptorTypes, frMgtVCSigNetT392=frMgtVCSigNetT392, atmInterfaceDs3PlcpTable=atmInterfaceDs3PlcpTable, atmVpCrossConnectEntry=atmVpCrossConnectEntry, frnetservAccountPVCGroup=frnetservAccountPVCGroup, atmVcCrossConnectEntry=atmVcCrossConnectEntry, atmVclEntry=atmVclEntry, atmVpCrossConnectHighVpi=atmVpCrossConnectHighVpi, atmVpCrossConnectIndexNext=atmVpCrossConnectIndexNext, atmVplLastChange=atmVplLastChange, frMgtVCSigNetnT3=frMgtVCSigNetnT3, atmInterfaceConfTable=atmInterfaceConfTable, atmVpCrossConnectH2LLastChange=atmVpCrossConnectH2LLastChange, atmClpNoTaggingNoScr=atmClpNoTaggingNoScr, atmInterfaceMaxVccs=atmInterfaceMaxVccs, atmMIBObjects=atmMIBObjects, atmVpCrossConnectGroup=atmVpCrossConnectGroup, aal5VccCrcErrors=aal5VccCrcErrors, atmInterfaceTCAlarmState=atmInterfaceTCAlarmState, atmVccAal5EncapsType=atmVccAal5EncapsType, frMgtVCSigUserN393=frMgtVCSigUserN393, atmTrafficDescrParam4=atmTrafficDescrParam4, atmVcCrossConnectL2HOperStatus=atmVcCrossConnectL2HOperStatus, frMgtVCSigUserT391=frMgtVCSigUserT391, atmVcCrossConnectRowStatus=atmVcCrossConnectRowStatus, frPVCEndptRowStatus=frPVCEndptRowStatus, frAccountPVCDLCIIndex=frAccountPVCDLCIIndex, atmVcCrossConnectHighVpi=atmVcCrossConnectHighVpi, atmVclAdminStatus=atmVclAdminStatus, atmVcCrossConnectAdminStatus=atmVcCrossConnectAdminStatus, atmVcCrossConnectTable=atmVcCrossConnectTable, frnetservCompliance=frnetservCompliance, aal5VccEntry=aal5VccEntry, frMgtVCSigUserN392=frMgtVCSigUserN392, frPVCEndptOutMaxFrameSize=frPVCEndptOutMaxFrameSize, atmVplRowStatus=atmVplRowStatus, frLportType=frLportType, atmVccTerminationGroup=atmVccTerminationGroup, frAccountPVCInSegments=frAccountPVCInSegments, frPVCEndptConnectIdentifier=frPVCEndptConnectIdentifier, atmVpCrossConnectH2LOperStatus=atmVpCrossConnectH2LOperStatus, atmNoTrafficDescriptor=atmNoTrafficDescriptor, atmVcCrossConnectGroup=atmVcCrossConnectGroup, atmVclReceiveTrafficDescrIndex=atmVclReceiveTrafficDescrIndex, atmInterfaceDs3PlcpAlarmState=atmInterfaceDs3PlcpAlarmState, frPVCConnectLowDLCIIndex=frPVCConnectLowDLCIIndex, atmVpCrossConnectLowIfIndex=atmVpCrossConnectLowIfIndex, atmVclLastChange=atmVclLastChange, atmVplOperStatus=atmVplOperStatus, atmInterfaceDs3PlcpEntry=atmInterfaceDs3PlcpEntry, atmInterfaceOCDEvents=atmInterfaceOCDEvents, frMgtVCSigUserN391=frMgtVCSigUserN391, atmInterfaceMaxActiveVciBits=atmInterfaceMaxActiveVciBits, atmVcCrossConnectL2HLastChange=atmVcCrossConnectL2HLastChange, frMgtVCSigNetnN4=frMgtVCSigNetnN4, atmInterfaceMyNeighborIpAddress=atmInterfaceMyNeighborIpAddress, atmVcCrossConnectIndex=atmVcCrossConnectIndex, frMgtVCSigUserLinkRelErrors=frMgtVCSigUserLinkRelErrors, atmVcCrossConnectLowIfIndex=atmVcCrossConnectLowIfIndex, tellabs=tellabs, atmTrafficDescrParamIndex=atmTrafficDescrParamIndex, atmInterfaceTCEntry=atmInterfaceTCEntry, atmTrafficDescrType=atmTrafficDescrType, frLportNumPlan=frLportNumPlan, atmClpNoTaggingScr=atmClpNoTaggingScr, atmMIBConformance=atmMIBConformance, atmMIBCompliances=atmMIBCompliances, frnetservPVCEndptGroup=frnetservPVCEndptGroup, atmVcCrossConnectHighVci=atmVcCrossConnectHighVci, atmVclVpi=atmVclVpi, atmInterfaceTCGroup=atmInterfaceTCGroup, atmVplAdminStatus=atmVplAdminStatus, atmVclTransmitTrafficDescrIndex=atmVclTransmitTrafficDescrIndex, aal5VccTable=aal5VccTable, frPVCEndptOutFrames=frPVCEndptOutFrames, frPVCConnectIndexValue=frPVCConnectIndexValue, atmInterfaceDs3PlcpGroup=atmInterfaceDs3PlcpGroup, frPVCConnectL2hOperStatus=frPVCConnectL2hOperStatus, frPVCEndptInCIR=frPVCEndptInCIR, frMgtVCSigNetChanInactive=frMgtVCSigNetChanInactive, atmInterfaceMyNeighborIfName=atmInterfaceMyNeighborIfName)
