#
# PySNMP MIB module PCSYSTEMSMIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PCSYSTEMSMIF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:28:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, enterprises, iso, IpAddress, Gauge32, NotificationType, ObjectIdentity, MibIdentifier, Integer32, TimeTicks, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "enterprises", "iso", "IpAddress", "Gauge32", "NotificationType", "ObjectIdentity", "MibIdentifier", "Integer32", "TimeTicks", "Counter32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class DmiInteger(Integer32):
    pass

class DmiInteger64(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDate(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
netFinity = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 71))
dmiMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 71, 200))
netFinitySystemsMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1))
dmtfGroups1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1))
tComponentid1 = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1), )
if mibBuilder.loadTexts: tComponentid1.setStatus('mandatory')
eComponentid1 = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid1.setStatus('mandatory')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
tGeneralInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2), )
if mibBuilder.loadTexts: tGeneralInformation.setStatus('mandatory')
eGeneralInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eGeneralInformation.setStatus('mandatory')
a2SystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 1), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemName.setStatus('mandatory')
a2SystemLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemLocation.setStatus('mandatory')
a2SystemPrimaryUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemPrimaryUserName.setStatus('mandatory')
a2SystemPrimaryUserPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemPrimaryUserPhone.setStatus('mandatory')
a2SystemBootUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 5), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SystemBootUpTime.setStatus('mandatory')
a2SystemDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 6), DmiDate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemDateTime.setStatus('mandatory')
tOperatingSystem = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3), )
if mibBuilder.loadTexts: tOperatingSystem.setStatus('mandatory')
eOperatingSystem = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a3OperatingSystemIndex"))
if mibBuilder.loadTexts: eOperatingSystem.setStatus('mandatory')
a3OperatingSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemIndex.setStatus('mandatory')
a3OperatingSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemName.setStatus('mandatory')
a3OperatingSystemVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemVersion.setStatus('mandatory')
a3PrimaryOperatingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3PrimaryOperatingSystem.setStatus('mandatory')
a3OperatingSystemBootDeviceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vHard-disk", 3), ("vFloppy-disk", 4), ("vOptical-rom", 5), ("vOptical-worm", 6), ("vOptical-rw", 7), ("vCompact-disk", 8), ("vFlash-disk", 9), ("vBernoulli", 10), ("vOpticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemBootDeviceStorageType.setStatus('mandatory')
a3OperatingSystemBootDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemBootDeviceIndex.setStatus('mandatory')
a3OperatingSystemBootPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemBootPartitionIndex.setStatus('mandatory')
a3OperatingSystemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemDescription.setStatus('mandatory')
tSystemBios = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4), )
if mibBuilder.loadTexts: tSystemBios.setStatus('mandatory')
eSystemBios = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a4BiosIndex"))
if mibBuilder.loadTexts: eSystemBios.setStatus('mandatory')
a4BiosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosIndex.setStatus('mandatory')
a4Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Manufacturer.setStatus('mandatory')
a4Version = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Version.setStatus('mandatory')
a4BiosRomSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosRomSize.setStatus('mandatory')
a4StartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 5), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4StartingAddress.setStatus('mandatory')
a4EndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 6), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4EndingAddress.setStatus('mandatory')
a4LoaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4LoaderVersion.setStatus('mandatory')
a4BiosReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 8), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosReleaseDate.setStatus('mandatory')
a4PrimaryBios = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PrimaryBios.setStatus('mandatory')
tSystemBiosCharacteristic = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5), )
if mibBuilder.loadTexts: tSystemBiosCharacteristic.setStatus('mandatory')
eSystemBiosCharacteristic = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a5BiosCharacteristicsIndex"), (0, "PCSYSTEMSMIF-MIB", "a5BiosNumber"))
if mibBuilder.loadTexts: eSystemBiosCharacteristic.setStatus('mandatory')
a5BiosCharacteristicsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristicsIndex.setStatus('mandatory')
a5BiosNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosNumber.setStatus('mandatory')
a5BiosCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnsupported", 3), ("vIsa-support", 4), ("vMca-support", 5), ("vEisa-support", 6), ("vPci-support", 7), ("vPcmcia-support", 8), ("vPnp-support", 9), ("vApmSupport", 10), ("vUpgradeable-bios", 11), ("vBios-shadowing-allowed", 12), ("vVl-vesa-support", 13), ("vEscdSupport", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristics.setStatus('mandatory')
a5BiosCharacteristicsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristicsDescription.setStatus('mandatory')
tProcessor = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6), )
if mibBuilder.loadTexts: tProcessor.setStatus('mandatory')
eProcessor = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a6ProcessorIndex"))
if mibBuilder.loadTexts: eProcessor.setStatus('mandatory')
a6ProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorIndex.setStatus('mandatory')
a6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCentralProcessor", 3), ("vMath-processor", 4), ("vDsp-processor", 5), ("vVideo-processor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Type.setStatus('mandatory')
a6ProcessorFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 48, 64, 80, 96, 112, 128, 144))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8086", 3), ("v80286", 4), ("v80386", 5), ("v80486", 6), ("v8087", 7), ("v80287", 8), ("v80387", 9), ("v80487", 10), ("vPentiumFamily", 11), ("vPowerPcFamily", 32), ("vAlphaFamily", 48), ("vMipsFamily", 64), ("vSparcFamily", 80), ("v68040Family", 96), ("vHobbitFamily", 112), ("vWeitek", 128), ("vPa-riscFamily", 144)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorFamily.setStatus('mandatory')
a6VersionInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6VersionInformation.setStatus('mandatory')
a6MaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6MaximumSpeed.setStatus('mandatory')
a6CurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6CurrentSpeed.setStatus('mandatory')
a6ProcessorUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDaughterBoard", 3), ("vZifSocket", 4), ("vReplacementpiggyBack", 5), ("vNone", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorUpgrade.setStatus('mandatory')
a6FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6FruGroupIndex.setStatus('mandatory')
a6OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6OperationalGroupIndex.setStatus('mandatory')
tMotherboard = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 7), )
if mibBuilder.loadTexts: tMotherboard.setStatus('mandatory')
eMotherboard = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 7, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMotherboard.setStatus('mandatory')
a7NumberOfExpansionSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7NumberOfExpansionSlots.setStatus('mandatory')
a7FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 7, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7FruGroupIndex.setStatus('mandatory')
a7OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7OperationalGroupIndex.setStatus('mandatory')
tPhysicalMemory = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8), )
if mibBuilder.loadTexts: tPhysicalMemory.setStatus('mandatory')
ePhysicalMemory = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a8PhysicalMemoryIndex"))
if mibBuilder.loadTexts: ePhysicalMemory.setStatus('mandatory')
a8PhysicalMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8PhysicalMemoryIndex.setStatus('mandatory')
a8PhysicalMemoryLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSystemBoardOrMotherBoard", 3), ("vIsaAddOnCard", 4), ("vEisaAddOnCard", 5), ("vPciAddOnCard", 6), ("vMcaAddOnCard", 7), ("vPcmciaAddOnCard", 8), ("vProprietaryAddOnCard", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8PhysicalMemoryLocation.setStatus('mandatory')
a8MemoryStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 3), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MemoryStartingAddress.setStatus('mandatory')
a8MemoryEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 4), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MemoryEndingAddress.setStatus('mandatory')
a8MemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSystemMemory", 3), ("vVideoMemory", 4), ("vFlashMemory", 5), ("vNonVolatileRam", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MemoryUsage.setStatus('mandatory')
a8MaximumMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MaximumMemoryCapacity.setStatus('mandatory')
a8NumberOfSimmSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfSimmSlots.setStatus('mandatory')
a8NumberOfSimmSlotsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfSimmSlotsUsed.setStatus('mandatory')
a8MemorySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MemorySpeed.setStatus('mandatory')
a8MemoryErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vParity", 4), ("vSingleBitEcc", 5), ("vMultibitEcc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MemoryErrorCorrection.setStatus('mandatory')
a8FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8FruGroupIndex.setStatus('mandatory')
a8OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8OperationalGroupIndex.setStatus('mandatory')
tLogicalMemory = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9), )
if mibBuilder.loadTexts: tLogicalMemory.setStatus('mandatory')
eLogicalMemory = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eLogicalMemory.setStatus('mandatory')
a9BaseMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9BaseMemorySize.setStatus('mandatory')
a9FreeBaseMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FreeBaseMemorySize.setStatus('mandatory')
a9ExtendedMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExtendedMemorySize.setStatus('mandatory')
a9FreeExtendedMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FreeExtendedMemorySize.setStatus('mandatory')
a9ExtendedMemoryManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExtendedMemoryManagerName.setStatus('mandatory')
a9ExtendedMemoryManagerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExtendedMemoryManagerVersion.setStatus('mandatory')
a9ExpandedMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemorySize.setStatus('mandatory')
a9FreeExpandedMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FreeExpandedMemorySize.setStatus('mandatory')
a9ExpandedMemoryManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemoryManagerName.setStatus('mandatory')
a9ExpandedMemoryManagerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemoryManagerVersion.setStatus('mandatory')
a9ExpandedMemoryPageFrameAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 11), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemoryPageFrameAddress.setStatus('mandatory')
a9ExpandedMemoryPageFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemoryPageFrameSize.setStatus('mandatory')
a9ExpandedMemoryPageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemoryPageSize.setStatus('mandatory')
tSystemCache = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10), )
if mibBuilder.loadTexts: tSystemCache.setStatus('mandatory')
eSystemCache = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a10SystemCacheIndex"))
if mibBuilder.loadTexts: eSystemCache.setStatus('mandatory')
a10SystemCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheIndex.setStatus('mandatory')
a10SystemCacheLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vPrimary", 3), ("vSecondary", 4), ("vTertiary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheLevel.setStatus('mandatory')
a10SystemCacheSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheSpeed.setStatus('mandatory')
a10SystemCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheSize.setStatus('mandatory')
a10SystemCacheWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vWriteBack", 3), ("vWriteThrough", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheWritePolicy.setStatus('mandatory')
a10SystemCacheErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vParity", 4), ("vSingleBitEcc", 5), ("vMultibitEcc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheErrorCorrection.setStatus('mandatory')
a10FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10FruGroupIndex.setStatus('mandatory')
a10OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10OperationalGroupIndex.setStatus('mandatory')
tParallelPorts = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11), )
if mibBuilder.loadTexts: tParallelPorts.setStatus('mandatory')
eParallelPorts = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a11ParallelPortIndex"))
if mibBuilder.loadTexts: eParallelPorts.setStatus('mandatory')
a11ParallelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ParallelPortIndex.setStatus('mandatory')
a11ParallelBaseIoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ParallelBaseIoAddress.setStatus('mandatory')
a11IrqUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11IrqUsed.setStatus('mandatory')
a11LogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11LogicalName.setStatus('mandatory')
a11ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDb-25Female", 3), ("vDb-25Male", 4), ("vCentronics", 5), ("vMini-centronics", 6), ("vProprietary", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ConnectorType.setStatus('mandatory')
a11ConnectorPinout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vXtat", 3), ("vPs2", 4), ("vIeee1284", 5), ("vProprietary", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ConnectorPinout.setStatus('mandatory')
a11DmaSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11DmaSupport.setStatus('mandatory')
a11ParallelPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ParallelPortCapabilities.setStatus('mandatory')
a11OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11OperationalGroupIndex.setStatus('mandatory')
tSerialPorts = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12), )
if mibBuilder.loadTexts: tSerialPorts.setStatus('mandatory')
eSerialPorts = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a12SerialPortIndex"))
if mibBuilder.loadTexts: eSerialPorts.setStatus('mandatory')
a12SerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12SerialPortIndex.setStatus('mandatory')
a12SerialBaseIo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12SerialBaseIo.setStatus('mandatory')
a12IrqUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12IrqUsed.setStatus('mandatory')
a12LogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12LogicalName.setStatus('mandatory')
a12ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDb-9PinMale", 3), ("vDb-9PinFemale", 4), ("vDb-25PinMale", 5), ("vDb-25PinFemale", 6), ("vRj-11", 7), ("vRj-45", 8), ("vProprietary", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12ConnectorType.setStatus('mandatory')
a12MaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12MaximumSpeed.setStatus('mandatory')
a12SerialPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vXtatCcompatible", 3), ("v16450Compatible", 4), ("v16550Compatible", 5), ("v16550aCompatible", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12SerialPortCapabilities.setStatus('mandatory')
a12OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12OperationalGroupIndex.setStatus('mandatory')
tIrq = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13), )
if mibBuilder.loadTexts: tIrq.setStatus('mandatory')
eIrq = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a13IrqNumber"))
if mibBuilder.loadTexts: eIrq.setStatus('mandatory')
a13IrqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13IrqNumber.setStatus('mandatory')
a13AvailabilityOfIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vAvailable", 3), ("vInUse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13AvailabilityOfIrq.setStatus('mandatory')
a13IrqTriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLevel", 3), ("vEdge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13IrqTriggerType.setStatus('mandatory')
a13IrqShareable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13IrqShareable.setStatus('mandatory')
a13IrqDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13IrqDescription.setStatus('mandatory')
tDma = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14), )
if mibBuilder.loadTexts: tDma.setStatus('mandatory')
eDma = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a14DmaNumber"))
if mibBuilder.loadTexts: eDma.setStatus('mandatory')
a14DmaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DmaNumber.setStatus('mandatory')
a14AvailabilityOfDma = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14AvailabilityOfDma.setStatus('mandatory')
a14DmaBurstMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DmaBurstMode.setStatus('mandatory')
a14DmaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DmaDescription.setStatus('mandatory')
tMemoryMappedIo = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 15), )
if mibBuilder.loadTexts: tMemoryMappedIo.setStatus('mandatory')
eMemoryMappedIo = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 15, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a15MemoryMappedIoStartingAddress"))
if mibBuilder.loadTexts: eMemoryMappedIo.setStatus('mandatory')
a15MemoryMappedIoStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 15, 1, 1), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15MemoryMappedIoStartingAddress.setStatus('mandatory')
a15MemoryMappedIoEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 15, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15MemoryMappedIoEndingAddress.setStatus('mandatory')
a15MemoryMappedIoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 15, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15MemoryMappedIoDescription.setStatus('mandatory')
tSystemEnclosure = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16), )
if mibBuilder.loadTexts: tSystemEnclosure.setStatus('mandatory')
eSystemEnclosure = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSystemEnclosure.setStatus('mandatory')
a16EnclosureOrChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDesktop", 3), ("vLowProfileDesktop", 4), ("vPizzaBox", 5), ("vMiniTower", 6), ("vTower", 7), ("vPortable", 8), ("vLaptop", 9), ("vNotebook", 10), ("vHandHeld", 11), ("vDockingStation", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16EnclosureOrChassis.setStatus('mandatory')
a16AssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a16AssetTag.setStatus('mandatory')
a16ChassisLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16ChassisLockPresent.setStatus('mandatory')
a16BootUpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSafe", 3), ("vWarning", 4), ("vCritical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16BootUpState.setStatus('mandatory')
a16PowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSafe", 3), ("vWarning", 4), ("vCritical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16PowerState.setStatus('mandatory')
a16ThermalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSafe", 3), ("vWarning", 4), ("vCritical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16ThermalState.setStatus('mandatory')
a16FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16FruGroupIndex.setStatus('mandatory')
a16OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16OperationalGroupIndex.setStatus('mandatory')
tPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 17), )
if mibBuilder.loadTexts: tPowerSupply.setStatus('mandatory')
ePowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 17, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a17PowerSupplyIndex"))
if mibBuilder.loadTexts: ePowerSupply.setStatus('mandatory')
a17PowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 17, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerSupplyIndex.setStatus('mandatory')
a17FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 17, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17FruGroupIndex.setStatus('mandatory')
a17OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 17, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17OperationalGroupIndex.setStatus('mandatory')
tCoolingDevice = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 18), )
if mibBuilder.loadTexts: tCoolingDevice.setStatus('mandatory')
eCoolingDevice = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 18, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a18CoolingDeviceIndex"))
if mibBuilder.loadTexts: eCoolingDevice.setStatus('mandatory')
a18CoolingDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 18, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a18CoolingDeviceIndex.setStatus('mandatory')
a18FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 18, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a18FruGroupIndex.setStatus('mandatory')
a18OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 18, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a18OperationalGroupIndex.setStatus('mandatory')
tSystemSlots = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19), )
if mibBuilder.loadTexts: tSystemSlots.setStatus('mandatory')
eSystemSlots = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a19SlotIndex"))
if mibBuilder.loadTexts: eSystemSlots.setStatus('mandatory')
a19SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotIndex.setStatus('mandatory')
a19SlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 18, 20, 24))).clone(namedValues=NamedValues(("vUnknown", 1), ("vIsa", 2), ("vEisa", 4), ("vMca", 8), ("vPci", 16), ("vPciIsa", 18), ("vPciEisa", 20), ("vPciMca", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotType.setStatus('mandatory')
a19SlotWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8BitCard", 3), ("v16BitCard", 4), ("v32BitCard", 5), ("v64BitCard", 6), ("v128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotWidth.setStatus('mandatory')
a19CurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vAvailable", 3), ("vInUse1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19CurrentUsage.setStatus('mandatory')
a19SlotDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotDescription.setStatus('mandatory')
tVideo = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20), )
if mibBuilder.loadTexts: tVideo.setStatus('mandatory')
eVideo = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a20VideoIndex"))
if mibBuilder.loadTexts: eVideo.setStatus('mandatory')
a20VideoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20VideoIndex.setStatus('mandatory')
a20VideoType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCga", 3), ("vEga", 4), ("vVga", 5), ("vSvga", 6), ("vMda", 7), ("vHgc", 8), ("vMcga", 9), ("v8514a", 10), ("vXga", 11), ("vLinearFrameBuffer", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20VideoType.setStatus('mandatory')
a20CurrentVideoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentVideoMode.setStatus('mandatory')
a20MinimumRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20MinimumRefreshRate.setStatus('mandatory')
a20MaximumRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20MaximumRefreshRate.setStatus('mandatory')
a20VideoMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vVram", 3), ("vDram", 4), ("vSram", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20VideoMemoryType.setStatus('mandatory')
a20VideoRamMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20VideoRamMemorySize.setStatus('mandatory')
a20ScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vInterlaced", 3), ("vNonInterlaced", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20ScanMode.setStatus('mandatory')
a20VideoPhysicalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIntegrated", 3), ("vAddOnCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20VideoPhysicalLocation.setStatus('mandatory')
a20CurrentVerticalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentVerticalResolution.setStatus('mandatory')
a20CurrentHorizontalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentHorizontalResolution.setStatus('mandatory')
a20CurrentNumberOfBitsPerPixel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentNumberOfBitsPerPixel.setStatus('mandatory')
a20CurrentNumberOfRows = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentNumberOfRows.setStatus('mandatory')
a20CurrentNumberOfColumns = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentNumberOfColumns.setStatus('mandatory')
a20CurrentRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentRefreshRate.setStatus('mandatory')
a20FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20FruGroupIndex.setStatus('mandatory')
a20OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20OperationalGroupIndex.setStatus('mandatory')
tVideoBios = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21), )
if mibBuilder.loadTexts: tVideoBios.setStatus('mandatory')
eVideoBios = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a21VideoBiosIndex"))
if mibBuilder.loadTexts: eVideoBios.setStatus('mandatory')
a21VideoBiosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21VideoBiosIndex.setStatus('mandatory')
a21VideoBiosManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21VideoBiosManufacturer.setStatus('mandatory')
a21VideoBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21VideoBiosVersion.setStatus('mandatory')
a21VideoBiosReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1, 4), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21VideoBiosReleaseDate.setStatus('mandatory')
a21VideoBiosShadowingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21VideoBiosShadowingState.setStatus('mandatory')
tVideoBiosCharacteristic = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22), )
if mibBuilder.loadTexts: tVideoBiosCharacteristic.setStatus('mandatory')
eVideoBiosCharacteristic = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a22VideoBiosCharacteristicsIndex"), (0, "PCSYSTEMSMIF-MIB", "a22VideoBiosNumber"))
if mibBuilder.loadTexts: eVideoBiosCharacteristic.setStatus('mandatory')
a22VideoBiosCharacteristicsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22VideoBiosCharacteristicsIndex.setStatus('mandatory')
a22VideoBiosNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22VideoBiosNumber.setStatus('mandatory')
a22VideoBiosCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnsupported", 3), ("vStandardVideoBios", 4), ("vVesaBiosExtensionsSupported", 5), ("vVesaPowerManagementSupported", 6), ("vVesaDisplayDataChannelSupported", 7), ("vVideoBios-shadowing-allowed", 8), ("vVideoBiosUpgradable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22VideoBiosCharacteristics.setStatus('mandatory')
a22VideoBiosCharacteristicsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22VideoBiosCharacteristicsDescription.setStatus('mandatory')
tDiskDrives = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23), )
if mibBuilder.loadTexts: tDiskDrives.setStatus('mandatory')
eDiskDrives = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a23StorageType"), (0, "PCSYSTEMSMIF-MIB", "a23DiskIndex"))
if mibBuilder.loadTexts: eDiskDrives.setStatus('mandatory')
a23StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vHard-disk", 3), ("vFloppy-disk", 4), ("vOptical-rom", 5), ("vOptical-worm", 6), ("vOptical-rw", 7), ("vCompact-disk", 8), ("vFlash-disk", 9), ("vBernoulli", 10), ("vOpticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23StorageType.setStatus('mandatory')
a23DiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23DiskIndex.setStatus('mandatory')
a23StorageInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vScsi", 3), ("vEsdi", 4), ("vIde", 5), ("vCmd", 6), ("vIpi", 7), ("vSt506", 8), ("vDssi", 9), ("vParallel-port", 10), ("vHippi", 11), ("vQic2", 12), ("vFloppy-disk-interface", 13), ("vPcmcia", 14), ("vEnhancedAtaide", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23StorageInterfaceType.setStatus('mandatory')
a23InterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23InterfaceDescription.setStatus('mandatory')
a23MediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23MediaLoaded.setStatus('mandatory')
a23RemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23RemovableMedia.setStatus('mandatory')
a23DeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23DeviceId.setStatus('mandatory')
a23LogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23LogicalUnitNumber.setStatus('mandatory')
a23NumberOfPhysicalCylinders = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23NumberOfPhysicalCylinders.setStatus('mandatory')
a23NumberOfPhysicalSectorsPerTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23NumberOfPhysicalSectorsPerTrack.setStatus('mandatory')
a23NumberOfPhysicalHeads = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23NumberOfPhysicalHeads.setStatus('mandatory')
a23SectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23SectorSize.setStatus('mandatory')
a23TotalPhysicalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23TotalPhysicalSize.setStatus('mandatory')
a23Partitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23Partitions.setStatus('mandatory')
a23FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23FruGroupIndex.setStatus('mandatory')
tDiskMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 24), )
if mibBuilder.loadTexts: tDiskMappingTable.setStatus('mandatory')
eDiskMappingTable = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 24, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a24StorageType"), (0, "PCSYSTEMSMIF-MIB", "a24DiskIndex"), (0, "PCSYSTEMSMIF-MIB", "a24PartitionIndex"))
if mibBuilder.loadTexts: eDiskMappingTable.setStatus('mandatory')
a24StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vHard-disk", 3), ("vFloppy-disk", 4), ("vOptical-rom", 5), ("vOptical-worm", 6), ("vOptical-rw", 7), ("vCompact-disk", 8), ("vFlash-disk", 9), ("vBernoulli", 10), ("vOpticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24StorageType.setStatus('mandatory')
a24DiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 24, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24DiskIndex.setStatus('mandatory')
a24PartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 24, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24PartitionIndex.setStatus('mandatory')
tPartition = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25), )
if mibBuilder.loadTexts: tPartition.setStatus('mandatory')
ePartition = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a25PartitionIndex"))
if mibBuilder.loadTexts: ePartition.setStatus('mandatory')
a25PartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25PartitionIndex.setStatus('mandatory')
a25PartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25PartitionName.setStatus('mandatory')
a25PartitionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 3), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25PartitionSize.setStatus('mandatory')
a25FreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 4), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25FreeSpace.setStatus('mandatory')
a25PartitionLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 5), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25PartitionLabel.setStatus('mandatory')
a25FileSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFat", 3), ("vHpfs", 4), ("vNtfs", 5), ("vOfs", 6), ("vMfs", 7), ("vHfs", 8), ("vVxfs", 9), ("vSfs", 10), ("vS5", 11), ("vS52k", 12), ("vUfs", 13), ("vFfs", 14), ("vNetware286", 15), ("vNetware386", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25FileSystem.setStatus('mandatory')
a25Compressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25Compressed.setStatus('mandatory')
a25Encrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25Encrypted.setStatus('mandatory')
a25NumberOfDisksOccupied = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25NumberOfDisksOccupied.setStatus('mandatory')
tDiskController = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 26), )
if mibBuilder.loadTexts: tDiskController.setStatus('mandatory')
eDiskController = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 26, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a26DiskControllerIndex"))
if mibBuilder.loadTexts: eDiskController.setStatus('mandatory')
a26DiskControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 26, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26DiskControllerIndex.setStatus('mandatory')
a26FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 26, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26FruGroupIndex.setStatus('mandatory')
a26OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 26, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26OperationalGroupIndex.setStatus('mandatory')
tLogicalDrives = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27), )
if mibBuilder.loadTexts: tLogicalDrives.setStatus('mandatory')
eLogicalDrives = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a27LogicalDriveIndex"))
if mibBuilder.loadTexts: eLogicalDrives.setStatus('mandatory')
a27LogicalDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27LogicalDriveIndex.setStatus('mandatory')
a27LogicalDriveName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27LogicalDriveName.setStatus('mandatory')
a27LogicalDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFixedDrive", 3), ("vRemovableDrive", 4), ("vRemoteDrive", 5), ("vCdrom", 6), ("vFloppyDrive", 7), ("vRamDrive", 8), ("vDriveArray", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27LogicalDriveType.setStatus('mandatory')
a27LogicalDriveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27LogicalDriveSize.setStatus('mandatory')
a27FreeLogicalDriveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27FreeLogicalDriveSize.setStatus('mandatory')
a27LogicalDrivePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27LogicalDrivePath.setStatus('mandatory')
tMouse = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28), )
if mibBuilder.loadTexts: tMouse.setStatus('mandatory')
eMouse = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMouse.setStatus('mandatory')
a28MouseInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSerial", 3), ("vPs2", 4), ("vInfrared", 5), ("vHp-hil", 6), ("vBusMouse", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MouseInterface.setStatus('mandatory')
a28MouseIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MouseIrq.setStatus('mandatory')
a28MouseButtons = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MouseButtons.setStatus('mandatory')
a28MousePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MousePortName.setStatus('mandatory')
a28MouseDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MouseDriverName.setStatus('mandatory')
a28MouseDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MouseDriverVersion.setStatus('mandatory')
a28FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28FruGroupIndex.setStatus('mandatory')
a28OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28OperationalGroupIndex.setStatus('mandatory')
tKeyboard = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29), )
if mibBuilder.loadTexts: tKeyboard.setStatus('mandatory')
eKeyboard = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eKeyboard.setStatus('mandatory')
a29KeyboardLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a29KeyboardLayout.setStatus('mandatory')
a29KeyboardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a29KeyboardType.setStatus('mandatory')
a29KeyboardConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vMini-din", 3), ("vMicro-din", 4), ("vPs2", 5), ("vInfrared", 6), ("vHp-hil", 7), ("vDb-9", 8), ("vAccessbus", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a29KeyboardConnectorType.setStatus('mandatory')
a29FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a29FruGroupIndex.setStatus('mandatory')
a29OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a29OperationalGroupIndex.setStatus('mandatory')
tFieldReplacableUnit = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30), )
if mibBuilder.loadTexts: tFieldReplacableUnit.setStatus('mandatory')
eFieldReplacableUnit = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a30FruIndex"))
if mibBuilder.loadTexts: eFieldReplacableUnit.setStatus('mandatory')
a30FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30FruIndex.setStatus('mandatory')
a30DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30DeviceGroupIndex.setStatus('mandatory')
a30Description = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30Description.setStatus('mandatory')
a30Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30Manufacturer.setStatus('mandatory')
a30Model = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30Model.setStatus('mandatory')
a30PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30PartNumber.setStatus('mandatory')
a30FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30FruSerialNumber.setStatus('mandatory')
a30RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 8), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30RevisionLevel.setStatus('mandatory')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a31OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
a31OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31OperationalStateInstanceIndex.setStatus('mandatory')
a31DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31DeviceGroupIndex.setStatus('mandatory')
a31OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31OperationalStatus.setStatus('mandatory')
a31UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31UsageState.setStatus('mandatory')
a31AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31AvailabilityStatus.setStatus('mandatory')
a31AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31AdministrativeState.setStatus('mandatory')
a31FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31FatalErrorCount.setStatus('mandatory')
a31MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31MajorErrorCount.setStatus('mandatory')
a31WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31WarningErrorCount.setStatus('mandatory')
tSystemResourcesDescription = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 32), )
if mibBuilder.loadTexts: tSystemResourcesDescription.setStatus('mandatory')
eSystemResourcesDescription = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 32, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a32DeviceCount"))
if mibBuilder.loadTexts: eSystemResourcesDescription.setStatus('mandatory')
a32DeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 32, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a32DeviceCount.setStatus('mandatory')
a32SystemResourceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 32, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a32SystemResourceCount.setStatus('mandatory')
tSystemResources = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33), )
if mibBuilder.loadTexts: tSystemResources.setStatus('mandatory')
eSystemResources = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a33ResourceInstance"), (0, "PCSYSTEMSMIF-MIB", "a33ResourceParentGroupIndex"))
if mibBuilder.loadTexts: eSystemResources.setStatus('mandatory')
a33ResourceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceInstance.setStatus('mandatory')
a33ResourceParentGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceParentGroupIndex.setStatus('mandatory')
a33ResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vMemoryRange", 3), ("vIoPort", 4), ("vIrq", 5), ("vDma", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceType.setStatus('mandatory')
a33ResourceBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceBase.setStatus('mandatory')
a33ResourceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceSize.setStatus('mandatory')
a33ResourceFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceFlags.setStatus('mandatory')
tNetfinityDmiInstall = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 34), )
if mibBuilder.loadTexts: tNetfinityDmiInstall.setStatus('mandatory')
eNetfinityDmiInstall = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 34, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eNetfinityDmiInstall.setStatus('mandatory')
a34ProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 34, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ProductName.setStatus('mandatory')
tMicrochannelAdapterInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35), )
if mibBuilder.loadTexts: tMicrochannelAdapterInformation.setStatus('mandatory')
eMicrochannelAdapterInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a35AdapterIndex"))
if mibBuilder.loadTexts: eMicrochannelAdapterInformation.setStatus('mandatory')
a35AdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35AdapterIndex.setStatus('mandatory')
a35SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35SlotNumber.setStatus('mandatory')
a35AdapterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35AdapterId.setStatus('mandatory')
a35PosData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35PosData.setStatus('mandatory')
a35AdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35AdapterName.setStatus('mandatory')
tPciDeviceInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36), )
if mibBuilder.loadTexts: tPciDeviceInformation.setStatus('mandatory')
ePciDeviceInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a36DeviceIndex"))
if mibBuilder.loadTexts: ePciDeviceInformation.setStatus('mandatory')
a36DeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceIndex.setStatus('mandatory')
a36ClassCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ClassCode.setStatus('mandatory')
a36PciDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36PciDeviceName.setStatus('mandatory')
a36VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36VendorId.setStatus('mandatory')
a36DeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceId.setStatus('mandatory')
a36BusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36BusNumber.setStatus('mandatory')
a36DeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceNumber.setStatus('mandatory')
a36RevisionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36RevisionId.setStatus('mandatory')
tEisaDeviceInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37), )
if mibBuilder.loadTexts: tEisaDeviceInformation.setStatus('mandatory')
eEisaDeviceInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a37DeviceIndex"))
if mibBuilder.loadTexts: eEisaDeviceInformation.setStatus('mandatory')
a37DeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37DeviceIndex.setStatus('mandatory')
a37ProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37ProductId.setStatus('mandatory')
a37EisaDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37EisaDeviceName.setStatus('mandatory')
a37Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37Manufacturer.setStatus('mandatory')
a37SlotLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37SlotLocation.setStatus('mandatory')
a37SlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vExpansionSlot", 0), ("vEmbeddedDevice", 1), ("vVirtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37SlotType.setStatus('mandatory')
a37NumberOfDeviceFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37NumberOfDeviceFunctions.setStatus('mandatory')
a37IdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vReadable", 0), ("vNotReadable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37IdType.setStatus('mandatory')
tRaidAdapterInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38), )
if mibBuilder.loadTexts: tRaidAdapterInformation.setStatus('mandatory')
eRaidAdapterInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a38RaidAdapterIndex"))
if mibBuilder.loadTexts: eRaidAdapterInformation.setStatus('mandatory')
a38RaidAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38RaidAdapterIndex.setStatus('mandatory')
a38NumberOfLogicalVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38NumberOfLogicalVolumes.setStatus('mandatory')
a38NumberOfPhysicalDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38NumberOfPhysicalDevices.setStatus('mandatory')
a38NumberOfPhysicalDrivesOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38NumberOfPhysicalDrivesOffline.setStatus('mandatory')
a38NumberOfCriticalVirtualDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38NumberOfCriticalVirtualDrives.setStatus('mandatory')
a38NumberOfDefunctPhysicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38NumberOfDefunctPhysicalDrives.setStatus('mandatory')
tRaidVirtualDrivesInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39), )
if mibBuilder.loadTexts: tRaidVirtualDrivesInformation.setStatus('mandatory')
eRaidVirtualDrivesInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a39RaidVirtualDriveIndex"), (0, "PCSYSTEMSMIF-MIB", "a39RaidAdapterIndex"))
if mibBuilder.loadTexts: eRaidVirtualDrivesInformation.setStatus('mandatory')
a39RaidVirtualDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a39RaidVirtualDriveIndex.setStatus('mandatory')
a39RaidAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a39RaidAdapterIndex.setStatus('mandatory')
a39VirtualDriveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOnline", 0), ("vOffline", 1), ("vCritical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a39VirtualDriveState.setStatus('mandatory')
a39VirtualDriveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a39VirtualDriveSize.setStatus('mandatory')
tRaidPhysicalDriveInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40), )
if mibBuilder.loadTexts: tRaidPhysicalDriveInformation.setStatus('mandatory')
eRaidPhysicalDriveInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a40RaidPhysicalDriveIndex"), (0, "PCSYSTEMSMIF-MIB", "a40RaidAdapterIndex"))
if mibBuilder.loadTexts: eRaidPhysicalDriveInformation.setStatus('mandatory')
a40RaidPhysicalDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40RaidPhysicalDriveIndex.setStatus('mandatory')
a40RaidAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40RaidAdapterIndex.setStatus('mandatory')
a40PhysicalDriveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40PhysicalDriveSize.setStatus('mandatory')
a40ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40ChannelNumber.setStatus('mandatory')
a40TargetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40TargetNumber.setStatus('mandatory')
a40RaidPhysicalDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vOnline", 0), ("vOffline", 1), ("vDefunct", 2), ("vHotspare", 3), ("vStandbyHotspare", 4), ("vDeadHotspare", 5), ("vReady", 6), ("vRebuild", 7), ("vStandby", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40RaidPhysicalDeviceState.setStatus('mandatory')
mibBuilder.exportSymbols("PCSYSTEMSMIF-MIB", tMemoryMappedIo=tMemoryMappedIo, a20CurrentHorizontalResolution=a20CurrentHorizontalResolution, a4BiosReleaseDate=a4BiosReleaseDate, tRaidAdapterInformation=tRaidAdapterInformation, a27LogicalDriveName=a27LogicalDriveName, a16PowerState=a16PowerState, tRaidVirtualDrivesInformation=tRaidVirtualDrivesInformation, a4LoaderVersion=a4LoaderVersion, a4BiosRomSize=a4BiosRomSize, netFinitySystemsMIB=netFinitySystemsMIB, a15MemoryMappedIoEndingAddress=a15MemoryMappedIoEndingAddress, a31OperationalStatus=a31OperationalStatus, a26OperationalGroupIndex=a26OperationalGroupIndex, a12SerialBaseIo=a12SerialBaseIo, a29KeyboardConnectorType=a29KeyboardConnectorType, a27LogicalDrivePath=a27LogicalDrivePath, a18FruGroupIndex=a18FruGroupIndex, a20MaximumRefreshRate=a20MaximumRefreshRate, a28MouseDriverVersion=a28MouseDriverVersion, a26FruGroupIndex=a26FruGroupIndex, eProcessor=eProcessor, a8MemoryStartingAddress=a8MemoryStartingAddress, a33ResourceSize=a33ResourceSize, a33ResourceBase=a33ResourceBase, tComponentid1=tComponentid1, a3OperatingSystemBootDeviceStorageType=a3OperatingSystemBootDeviceStorageType, a2SystemLocation=a2SystemLocation, a13AvailabilityOfIrq=a13AvailabilityOfIrq, a11ConnectorPinout=a11ConnectorPinout, a3OperatingSystemDescription=a3OperatingSystemDescription, a2SystemBootUpTime=a2SystemBootUpTime, a18CoolingDeviceIndex=a18CoolingDeviceIndex, a37IdType=a37IdType, a28FruGroupIndex=a28FruGroupIndex, a20CurrentNumberOfRows=a20CurrentNumberOfRows, a23NumberOfPhysicalCylinders=a23NumberOfPhysicalCylinders, a36ClassCode=a36ClassCode, tSystemResourcesDescription=tSystemResourcesDescription, eEisaDeviceInformation=eEisaDeviceInformation, tLogicalMemory=tLogicalMemory, a16AssetTag=a16AssetTag, a31OperationalStateInstanceIndex=a31OperationalStateInstanceIndex, eRaidVirtualDrivesInformation=eRaidVirtualDrivesInformation, a34ProductName=a34ProductName, a30FruSerialNumber=a30FruSerialNumber, tFieldReplacableUnit=tFieldReplacableUnit, eMicrochannelAdapterInformation=eMicrochannelAdapterInformation, a23MediaLoaded=a23MediaLoaded, a8MaximumMemoryCapacity=a8MaximumMemoryCapacity, a14DmaBurstMode=a14DmaBurstMode, ibmProd=ibmProd, a38NumberOfDefunctPhysicalDrives=a38NumberOfDefunctPhysicalDrives, tSystemBios=tSystemBios, a11ParallelPortCapabilities=a11ParallelPortCapabilities, a16BootUpState=a16BootUpState, dmiMibs=dmiMibs, a13IrqTriggerType=a13IrqTriggerType, eLogicalMemory=eLogicalMemory, a20CurrentNumberOfColumns=a20CurrentNumberOfColumns, tNetfinityDmiInstall=tNetfinityDmiInstall, a2SystemDateTime=a2SystemDateTime, a36BusNumber=a36BusNumber, a16ThermalState=a16ThermalState, a27LogicalDriveType=a27LogicalDriveType, a39RaidVirtualDriveIndex=a39RaidVirtualDriveIndex, a39RaidAdapterIndex=a39RaidAdapterIndex, a40ChannelNumber=a40ChannelNumber, DmiComponentIndex=DmiComponentIndex, a27LogicalDriveSize=a27LogicalDriveSize, a33ResourceFlags=a33ResourceFlags, a10SystemCacheSize=a10SystemCacheSize, a4Manufacturer=a4Manufacturer, a40TargetNumber=a40TargetNumber, tVideo=tVideo, eLogicalDrives=eLogicalDrives, a6MaximumSpeed=a6MaximumSpeed, eRaidPhysicalDriveInformation=eRaidPhysicalDriveInformation, a5BiosCharacteristicsDescription=a5BiosCharacteristicsDescription, a37DeviceIndex=a37DeviceIndex, a6OperationalGroupIndex=a6OperationalGroupIndex, a1SerialNumber=a1SerialNumber, a20VideoMemoryType=a20VideoMemoryType, a21VideoBiosManufacturer=a21VideoBiosManufacturer, a22VideoBiosCharacteristicsDescription=a22VideoBiosCharacteristicsDescription, eComponentid1=eComponentid1, a12MaximumSpeed=a12MaximumSpeed, a5BiosCharacteristics=a5BiosCharacteristics, a33ResourceParentGroupIndex=a33ResourceParentGroupIndex, a12SerialPortIndex=a12SerialPortIndex, eCoolingDevice=eCoolingDevice, a31UsageState=a31UsageState, eDiskMappingTable=eDiskMappingTable, a17OperationalGroupIndex=a17OperationalGroupIndex, tCoolingDevice=tCoolingDevice, DmiInteger=DmiInteger, a25PartitionIndex=a25PartitionIndex, a38NumberOfPhysicalDrivesOffline=a38NumberOfPhysicalDrivesOffline, eGeneralInformation=eGeneralInformation, a28MousePortName=a28MousePortName, a8PhysicalMemoryLocation=a8PhysicalMemoryLocation, tVideoBiosCharacteristic=tVideoBiosCharacteristic, a37NumberOfDeviceFunctions=a37NumberOfDeviceFunctions, a28MouseInterface=a28MouseInterface, a10SystemCacheErrorCorrection=a10SystemCacheErrorCorrection, a12LogicalName=a12LogicalName, a29FruGroupIndex=a29FruGroupIndex, eOperationalState=eOperationalState, a8MemoryErrorCorrection=a8MemoryErrorCorrection, tSerialPorts=tSerialPorts, eDiskDrives=eDiskDrives, a6ProcessorIndex=a6ProcessorIndex, a8MemoryUsage=a8MemoryUsage, a28MouseIrq=a28MouseIrq, a31FatalErrorCount=a31FatalErrorCount, a40RaidPhysicalDeviceState=a40RaidPhysicalDeviceState, a17FruGroupIndex=a17FruGroupIndex, eFieldReplacableUnit=eFieldReplacableUnit, eSerialPorts=eSerialPorts, tSystemResources=tSystemResources, a17PowerSupplyIndex=a17PowerSupplyIndex, a24DiskIndex=a24DiskIndex, eMemoryMappedIo=eMemoryMappedIo, a25Compressed=a25Compressed, a25FileSystem=a25FileSystem, a9ExtendedMemoryManagerName=a9ExtendedMemoryManagerName, tMotherboard=tMotherboard, tPciDeviceInformation=tPciDeviceInformation, eNetfinityDmiInstall=eNetfinityDmiInstall, a38NumberOfCriticalVirtualDrives=a38NumberOfCriticalVirtualDrives, a19CurrentUsage=a19CurrentUsage, a23SectorSize=a23SectorSize, tSystemBiosCharacteristic=tSystemBiosCharacteristic, a11IrqUsed=a11IrqUsed, a9ExpandedMemoryManagerVersion=a9ExpandedMemoryManagerVersion, a7OperationalGroupIndex=a7OperationalGroupIndex, a20VideoPhysicalLocation=a20VideoPhysicalLocation, a8NumberOfSimmSlots=a8NumberOfSimmSlots, a28OperationalGroupIndex=a28OperationalGroupIndex, a6Type=a6Type, a31AvailabilityStatus=a31AvailabilityStatus, tLogicalDrives=tLogicalDrives, tOperationalState=tOperationalState, a10SystemCacheIndex=a10SystemCacheIndex, eParallelPorts=eParallelPorts, a36DeviceIndex=a36DeviceIndex, a33ResourceType=a33ResourceType, tEisaDeviceInformation=tEisaDeviceInformation, a16EnclosureOrChassis=a16EnclosureOrChassis, a9ExpandedMemoryPageFrameAddress=a9ExpandedMemoryPageFrameAddress, eVideo=eVideo, a8MemorySpeed=a8MemorySpeed, eVideoBiosCharacteristic=eVideoBiosCharacteristic, a3OperatingSystemBootPartitionIndex=a3OperatingSystemBootPartitionIndex, eRaidAdapterInformation=eRaidAdapterInformation, a3PrimaryOperatingSystem=a3PrimaryOperatingSystem, a27LogicalDriveIndex=a27LogicalDriveIndex, ePhysicalMemory=ePhysicalMemory, a1Product=a1Product, a12ConnectorType=a12ConnectorType, tDiskDrives=tDiskDrives, eIrq=eIrq, a36DeviceNumber=a36DeviceNumber, a11OperationalGroupIndex=a11OperationalGroupIndex, a30RevisionLevel=a30RevisionLevel, a29KeyboardType=a29KeyboardType, a20CurrentVideoMode=a20CurrentVideoMode, a2SystemPrimaryUserName=a2SystemPrimaryUserName, a35AdapterIndex=a35AdapterIndex, tMouse=tMouse, a12SerialPortCapabilities=a12SerialPortCapabilities, a25PartitionSize=a25PartitionSize, a20CurrentRefreshRate=a20CurrentRefreshRate, a14AvailabilityOfDma=a14AvailabilityOfDma, a37EisaDeviceName=a37EisaDeviceName, a25PartitionName=a25PartitionName, a23StorageType=a23StorageType, a23NumberOfPhysicalSectorsPerTrack=a23NumberOfPhysicalSectorsPerTrack, a9ExpandedMemorySize=a9ExpandedMemorySize, a6ProcessorFamily=a6ProcessorFamily, a29KeyboardLayout=a29KeyboardLayout, DmiDisplaystring=DmiDisplaystring, a13IrqNumber=a13IrqNumber, a6FruGroupIndex=a6FruGroupIndex, a25Encrypted=a25Encrypted, a30FruIndex=a30FruIndex, a30PartNumber=a30PartNumber, tDiskController=tDiskController, a38RaidAdapterIndex=a38RaidAdapterIndex, a20OperationalGroupIndex=a20OperationalGroupIndex, a10SystemCacheWritePolicy=a10SystemCacheWritePolicy, a5BiosCharacteristicsIndex=a5BiosCharacteristicsIndex, tPartition=tPartition, dmtfGroups1=dmtfGroups1, a26DiskControllerIndex=a26DiskControllerIndex, a7NumberOfExpansionSlots=a7NumberOfExpansionSlots, a36PciDeviceName=a36PciDeviceName, a37SlotLocation=a37SlotLocation, a9FreeBaseMemorySize=a9FreeBaseMemorySize, a23StorageInterfaceType=a23StorageInterfaceType, a36VendorId=a36VendorId, eVideoBios=eVideoBios, a19SlotWidth=a19SlotWidth, a9BaseMemorySize=a9BaseMemorySize, a37Manufacturer=a37Manufacturer, eKeyboard=eKeyboard, a24StorageType=a24StorageType, netFinity=netFinity, tSystemCache=tSystemCache, a4Version=a4Version, a24PartitionIndex=a24PartitionIndex, a8FruGroupIndex=a8FruGroupIndex, a6CurrentSpeed=a6CurrentSpeed, a23FruGroupIndex=a23FruGroupIndex, a27FreeLogicalDriveSize=a27FreeLogicalDriveSize, a20VideoType=a20VideoType, a23TotalPhysicalSize=a23TotalPhysicalSize, a10SystemCacheLevel=a10SystemCacheLevel, a20MinimumRefreshRate=a20MinimumRefreshRate, a35AdapterName=a35AdapterName, ePciDeviceInformation=ePciDeviceInformation, tGeneralInformation=tGeneralInformation, a13IrqShareable=a13IrqShareable, a32SystemResourceCount=a32SystemResourceCount, a1Version=a1Version, a6ProcessorUpgrade=a6ProcessorUpgrade, a25FreeSpace=a25FreeSpace, a9ExpandedMemoryPageSize=a9ExpandedMemoryPageSize, a21VideoBiosVersion=a21VideoBiosVersion, a36DeviceId=a36DeviceId, a31WarningErrorCount=a31WarningErrorCount, a15MemoryMappedIoDescription=a15MemoryMappedIoDescription, a8PhysicalMemoryIndex=a8PhysicalMemoryIndex, a20ScanMode=a20ScanMode, tProcessor=tProcessor, a23NumberOfPhysicalHeads=a23NumberOfPhysicalHeads, tDiskMappingTable=tDiskMappingTable, tSystemSlots=tSystemSlots, a21VideoBiosReleaseDate=a21VideoBiosReleaseDate, eSystemEnclosure=eSystemEnclosure, a16OperationalGroupIndex=a16OperationalGroupIndex, a19SlotType=a19SlotType, DmiOctetstring=DmiOctetstring, eOperatingSystem=eOperatingSystem, a11ConnectorType=a11ConnectorType, a40RaidAdapterIndex=a40RaidAdapterIndex, a33ResourceInstance=a33ResourceInstance, eDiskController=eDiskController, a39VirtualDriveState=a39VirtualDriveState, tParallelPorts=tParallelPorts, a23DeviceId=a23DeviceId, a11DmaSupport=a11DmaSupport, eSystemBiosCharacteristic=eSystemBiosCharacteristic, a20VideoIndex=a20VideoIndex, a16FruGroupIndex=a16FruGroupIndex)
mibBuilder.exportSymbols("PCSYSTEMSMIF-MIB", DmiCounter=DmiCounter, eMotherboard=eMotherboard, tDma=tDma, a20VideoRamMemorySize=a20VideoRamMemorySize, a39VirtualDriveSize=a39VirtualDriveSize, a2SystemPrimaryUserPhone=a2SystemPrimaryUserPhone, a28MouseButtons=a28MouseButtons, DmiDate=DmiDate, a23RemovableMedia=a23RemovableMedia, a14DmaNumber=a14DmaNumber, eSystemBios=eSystemBios, a35AdapterId=a35AdapterId, a21VideoBiosShadowingState=a21VideoBiosShadowingState, a28MouseDriverName=a28MouseDriverName, a36RevisionId=a36RevisionId, a9ExtendedMemoryManagerVersion=a9ExtendedMemoryManagerVersion, eDma=eDma, a35PosData=a35PosData, a18OperationalGroupIndex=a18OperationalGroupIndex, a25PartitionLabel=a25PartitionLabel, a1Manufacturer=a1Manufacturer, a30Manufacturer=a30Manufacturer, tMicrochannelAdapterInformation=tMicrochannelAdapterInformation, ibm=ibm, a20CurrentVerticalResolution=a20CurrentVerticalResolution, a10SystemCacheSpeed=a10SystemCacheSpeed, a4StartingAddress=a4StartingAddress, a12IrqUsed=a12IrqUsed, a38NumberOfPhysicalDevices=a38NumberOfPhysicalDevices, tOperatingSystem=tOperatingSystem, a8OperationalGroupIndex=a8OperationalGroupIndex, a40PhysicalDriveSize=a40PhysicalDriveSize, a22VideoBiosNumber=a22VideoBiosNumber, a15MemoryMappedIoStartingAddress=a15MemoryMappedIoStartingAddress, a3OperatingSystemName=a3OperatingSystemName, a10OperationalGroupIndex=a10OperationalGroupIndex, tRaidPhysicalDriveInformation=tRaidPhysicalDriveInformation, a11ParallelBaseIoAddress=a11ParallelBaseIoAddress, a30DeviceGroupIndex=a30DeviceGroupIndex, a23InterfaceDescription=a23InterfaceDescription, a21VideoBiosIndex=a21VideoBiosIndex, a35SlotNumber=a35SlotNumber, a9ExpandedMemoryPageFrameSize=a9ExpandedMemoryPageFrameSize, a13IrqDescription=a13IrqDescription, a2SystemName=a2SystemName, a31DeviceGroupIndex=a31DeviceGroupIndex, a20CurrentNumberOfBitsPerPixel=a20CurrentNumberOfBitsPerPixel, a31AdministrativeState=a31AdministrativeState, a11ParallelPortIndex=a11ParallelPortIndex, a32DeviceCount=a32DeviceCount, a8MemoryEndingAddress=a8MemoryEndingAddress, a37SlotType=a37SlotType, a4BiosIndex=a4BiosIndex, a14DmaDescription=a14DmaDescription, a20FruGroupIndex=a20FruGroupIndex, a23Partitions=a23Partitions, a38NumberOfLogicalVolumes=a38NumberOfLogicalVolumes, eSystemResourcesDescription=eSystemResourcesDescription, a9ExtendedMemorySize=a9ExtendedMemorySize, a6VersionInformation=a6VersionInformation, a30Model=a30Model, a30Description=a30Description, a31MajorErrorCount=a31MajorErrorCount, a9FreeExtendedMemorySize=a9FreeExtendedMemorySize, a23LogicalUnitNumber=a23LogicalUnitNumber, tPowerSupply=tPowerSupply, a23DiskIndex=a23DiskIndex, a5BiosNumber=a5BiosNumber, a22VideoBiosCharacteristics=a22VideoBiosCharacteristics, a8NumberOfSimmSlotsUsed=a8NumberOfSimmSlotsUsed, a37ProductId=a37ProductId, eSystemSlots=eSystemSlots, tIrq=tIrq, a7FruGroupIndex=a7FruGroupIndex, a29OperationalGroupIndex=a29OperationalGroupIndex, a4EndingAddress=a4EndingAddress, eMouse=eMouse, tSystemEnclosure=tSystemEnclosure, eSystemCache=eSystemCache, a9ExpandedMemoryManagerName=a9ExpandedMemoryManagerName, a4PrimaryBios=a4PrimaryBios, tVideoBios=tVideoBios, tPhysicalMemory=tPhysicalMemory, DmiInteger64=DmiInteger64, a40RaidPhysicalDriveIndex=a40RaidPhysicalDriveIndex, ePowerSupply=ePowerSupply, tKeyboard=tKeyboard, a9FreeExpandedMemorySize=a9FreeExpandedMemorySize, a19SlotDescription=a19SlotDescription, a25NumberOfDisksOccupied=a25NumberOfDisksOccupied, eSystemResources=eSystemResources, a11LogicalName=a11LogicalName, a19SlotIndex=a19SlotIndex, a3OperatingSystemVersion=a3OperatingSystemVersion, a22VideoBiosCharacteristicsIndex=a22VideoBiosCharacteristicsIndex, ePartition=ePartition, a3OperatingSystemIndex=a3OperatingSystemIndex, a10FruGroupIndex=a10FruGroupIndex, a12OperationalGroupIndex=a12OperationalGroupIndex, a16ChassisLockPresent=a16ChassisLockPresent, a3OperatingSystemBootDeviceIndex=a3OperatingSystemBootDeviceIndex)
