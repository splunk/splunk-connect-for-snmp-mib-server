#
# PySNMP MIB module STN-IPROUTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-IPROUTING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, NotificationType, TimeTicks, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, ModuleIdentity, Bits, ObjectIdentity, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "NotificationType", "TimeTicks", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "ModuleIdentity", "Bits", "ObjectIdentity", "Counter64", "IpAddress")
TimeStamp, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "RowStatus", "DisplayString")
stnSystems, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnSystems")
stnCpuIpRouteLimit, stnEngineType, stnEngineSlot, stnEngineCpu = mibBuilder.importSymbols("STN-CHASSIS-MIB", "stnCpuIpRouteLimit", "stnEngineType", "stnEngineSlot", "stnEngineCpu")
stnRouterIndex, = mibBuilder.importSymbols("STN-ROUTER-MIB", "stnRouterIndex")
stnIpRouting = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 12))
if mibBuilder.loadTexts: stnIpRouting.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnIpRouting.setOrganization('Spring Tide Networks, Inc.')
stnIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1))
stnArp = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2))
stnRip = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3))
stnOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4))
stnBgp = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5))
stnIpRtCache = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1))
stnIpRoutingVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 4))
stnIpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5))
stnIpTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5, 1))
stnIpNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5, 2))
stnIpNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5, 2, 0))
stnOspfTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 8))
stnIpRtCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheEntries.setStatus('current')
stnIpRtCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheMisses.setStatus('current')
stnIpRtCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheHits.setStatus('current')
stnIpRtCacheRemovals = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheRemovals.setStatus('current')
stnIpRoutingCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5), )
if mibBuilder.loadTexts: stnIpRoutingCacheTable.setStatus('current')
stnIpRtCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnIpRtCacheIpAddress"), (0, "STN-IPROUTING-MIB", "stnIpRtCacheIpMask"))
if mibBuilder.loadTexts: stnIpRtCacheEntry.setStatus('current')
stnIpRtCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheIpAddress.setStatus('current')
stnIpRtCacheIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheIpMask.setStatus('current')
stnIpRtCacheNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheNextHop.setStatus('current')
stnIpRtCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheIfIndex.setStatus('current')
stnIpRtCacheRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheRouteType.setStatus('current')
stnIpRtCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnIpRtCacheStatus.setStatus('current')
stnIpCircExtTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2), )
if mibBuilder.loadTexts: stnIpCircExtTable.setStatus('current')
stnIpCircExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnIpCircExtIfIndex"))
if mibBuilder.loadTexts: stnIpCircExtEntry.setStatus('current')
stnIpCircExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtIfIndex.setStatus('current')
stnIpCircExtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnIpCircExtAdminState.setStatus('current')
stnIpCircExtOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtOperState.setStatus('current')
stnIpCircExtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtIpAddress.setStatus('current')
stnIpCircExtIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtIpMask.setStatus('current')
stnIpCircExtMaxReasm = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtMaxReasm.setStatus('current')
stnIpCircExtMaxMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtMaxMtu.setStatus('current')
stnIpCircExtBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtBcastAddr.setStatus('current')
stnIpDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3), )
if mibBuilder.loadTexts: stnIpDetailsTable.setStatus('current')
stnIpDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnIpDetailsIndex"))
if mibBuilder.loadTexts: stnIpDetailsEntry.setStatus('current')
stnIpDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: stnIpDetailsIndex.setStatus('current')
stnIpDetailsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpDetailsSource.setStatus('current')
stnIpDetailsDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpDetailsDest.setStatus('current')
stnIpDetailsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("header-error", 1), ("unknown-proto", 2), ("no-route", 3), ("ttl-exceed", 4), ("param-problem", 5), ("redirect", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpDetailsType.setStatus('current')
stnIpDetailsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpDetailsTimeStamp.setStatus('current')
stnIpDetailsHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpDetailsHeader.setStatus('current')
stnIpMaxRoutingTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpMaxRoutingTableSize.setStatus('current')
stnIpCurrentRoutingTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCurrentRoutingTableSize.setStatus('current')
stnIpRouterRouteLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5, 2, 0, 1)).setObjects(("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-IPROUTING-MIB", "stnIpMaxRoutingTableSize"))
if mibBuilder.loadTexts: stnIpRouterRouteLimitExceeded.setStatus('current')
stnIpEngineRouteLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5, 2, 0, 2)).setObjects(("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-CHASSIS-MIB", "stnEngineType"), ("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-CHASSIS-MIB", "stnCpuIpRouteLimit"))
if mibBuilder.loadTexts: stnIpEngineRouteLimitExceeded.setStatus('current')
stnArpExtTtl = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnArpExtTtl.setStatus('current')
stnArpExtRcvdRequests = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpExtRcvdRequests.setStatus('current')
stnArpExtRcvdReplies = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpExtRcvdReplies.setStatus('current')
stnArpExtSendRequests = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpExtSendRequests.setStatus('current')
stnArpExtSendReplies = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpExtSendReplies.setStatus('current')
stnArpCircExtTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6), )
if mibBuilder.loadTexts: stnArpCircExtTable.setStatus('current')
stnArpCircExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnArpCircExtIfIndex"))
if mibBuilder.loadTexts: stnArpCircExtEntry.setStatus('current')
stnArpCircExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpCircExtIfIndex.setStatus('current')
stnArpCircExtDoProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnArpCircExtDoProxy.setStatus('current')
stnArpCircExtDoResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpCircExtDoResp.setStatus('current')
stnArpCircExtWanProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnArpCircExtWanProxy.setStatus('current')
stnRipExtAdminState = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnRipExtAdminState.setStatus('current')
stnRipExtUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnRipExtUpdateTime.setStatus('current')
stnRipCircExtTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3), )
if mibBuilder.loadTexts: stnRipCircExtTable.setStatus('current')
stnRipCircExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnRipCircExtIfIndex"))
if mibBuilder.loadTexts: stnRipCircExtEntry.setStatus('current')
stnRipCircExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipCircExtIfIndex.setStatus('current')
stnRipCircExtTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnRipCircExtTalk.setStatus('current')
stnRipCircExtListen = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnRipCircExtListen.setStatus('current')
stnRipCircExtPoison = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnRipCircExtPoison.setStatus('current')
stnRipDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4), )
if mibBuilder.loadTexts: stnRipDetailsTable.setStatus('current')
stnRipDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnRipDetailsIndex"))
if mibBuilder.loadTexts: stnRipDetailsEntry.setStatus('current')
stnRipDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: stnRipDetailsIndex.setStatus('current')
stnRipDetailsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipDetailsSource.setStatus('current')
stnRipDetailsDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipDetailsDest.setStatus('current')
stnRipDetailsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("bad-packet", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipDetailsType.setStatus('current')
stnRipDetailsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipDetailsTimeStamp.setStatus('current')
stnRipDetailsHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipDetailsHeader.setStatus('current')
stnOspfRouterLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfRouterLsaCount.setStatus('current')
stnOspfNetworkLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfNetworkLsaCount.setStatus('current')
stnOspfSummaryLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfSummaryLsaCount.setStatus('current')
stnOspfASBRSummaryLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfASBRSummaryLsaCount.setStatus('current')
stnOspfExternLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfExternLsaCount.setStatus('current')
stnOspfMcastGroupLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfMcastGroupLsaCount.setStatus('current')
stnOspfExternT7LsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfExternT7LsaCount.setStatus('current')
stnOspfDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9), )
if mibBuilder.loadTexts: stnOspfDetailsTable.setStatus('current')
stnOspfDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnOspfDetailsIndex"))
if mibBuilder.loadTexts: stnOspfDetailsEntry.setStatus('current')
stnOspfDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: stnOspfDetailsIndex.setStatus('current')
stnOspfDetailsPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsPacketType.setStatus('current')
stnOspfDetailsRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsRouterId.setStatus('current')
stnOspfDetailsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsAreaId.setStatus('current')
stnOspfDetailsErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("badVersion", 1), ("areaMismatch", 2), ("unknownNbmaNbr", 3), ("unknownVirtualNbr", 4), ("authTypeMismatch", 5), ("authFailure", 6), ("netMaskMismatch", 7), ("helloIntervalMismatch", 8), ("deadIntervalMismatch", 9), ("optionMismatch", 10), ("lanSubnetMismatch", 11), ("designatedRouterMismatch", 12), ("myRouterId", 13), ("invalidLength", 14), ("neighborNotFound", 15), ("md5SequenceError", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsErrorType.setStatus('current')
stnOspfDetailsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsTimeStamp.setStatus('current')
stnOspfDetailsHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsHeader.setStatus('current')
mibBuilder.exportSymbols("STN-IPROUTING-MIB", stnIpRtCacheIpMask=stnIpRtCacheIpMask, stnRipExtUpdateTime=stnRipExtUpdateTime, stnArpExtRcvdRequests=stnArpExtRcvdRequests, stnIpRtCacheHits=stnIpRtCacheHits, stnOspfDetailsIndex=stnOspfDetailsIndex, stnOspfDetailsEntry=stnOspfDetailsEntry, stnOspfDetailsTable=stnOspfDetailsTable, stnIpDetailsSource=stnIpDetailsSource, stnIpDetailsTimeStamp=stnIpDetailsTimeStamp, stnIpCircExtIpAddress=stnIpCircExtIpAddress, stnIpDetailsEntry=stnIpDetailsEntry, stnIpRouting=stnIpRouting, stnOspfDetailsHeader=stnOspfDetailsHeader, stnIpCircExtMaxMtu=stnIpCircExtMaxMtu, stnIpCircExtEntry=stnIpCircExtEntry, stnArpExtTtl=stnArpExtTtl, stnArpExtRcvdReplies=stnArpExtRcvdReplies, stnArp=stnArp, stnIpRtCacheMisses=stnIpRtCacheMisses, stnIpRtCacheRouteType=stnIpRtCacheRouteType, stnOspfDetailsPacketType=stnOspfDetailsPacketType, stnOspfNetworkLsaCount=stnOspfNetworkLsaCount, stnRipDetailsDest=stnRipDetailsDest, stnIpCurrentRoutingTableSize=stnIpCurrentRoutingTableSize, stnRip=stnRip, stnIpCircExtOperState=stnIpCircExtOperState, stnIpCircExtBcastAddr=stnIpCircExtBcastAddr, stnIpCircExtIpMask=stnIpCircExtIpMask, stnIpNotificationPrefix=stnIpNotificationPrefix, stnIpRtCacheNextHop=stnIpRtCacheNextHop, stnArpCircExtEntry=stnArpCircExtEntry, stnIpCircExtMaxReasm=stnIpCircExtMaxReasm, stnRipDetailsType=stnRipDetailsType, stnIpRtCacheStatus=stnIpRtCacheStatus, stnOspfDetailsAreaId=stnOspfDetailsAreaId, stnRipDetailsHeader=stnRipDetailsHeader, stnIpRtCacheIpAddress=stnIpRtCacheIpAddress, stnOspfRouterLsaCount=stnOspfRouterLsaCount, stnRipCircExtIfIndex=stnRipCircExtIfIndex, stnRipCircExtTable=stnRipCircExtTable, stnOspfDetailsRouterId=stnOspfDetailsRouterId, stnIpRoutingVars=stnIpRoutingVars, stnIp=stnIp, stnIpRtCacheRemovals=stnIpRtCacheRemovals, stnIpCircExtTable=stnIpCircExtTable, stnOspfExternLsaCount=stnOspfExternLsaCount, stnIpRoutingCacheTable=stnIpRoutingCacheTable, stnRipDetailsEntry=stnRipDetailsEntry, stnIpDetailsDest=stnIpDetailsDest, stnArpCircExtIfIndex=stnArpCircExtIfIndex, stnOspfDetailsErrorType=stnOspfDetailsErrorType, stnIpCircExtIfIndex=stnIpCircExtIfIndex, stnOspfTraps=stnOspfTraps, stnIpEngineRouteLimitExceeded=stnIpEngineRouteLimitExceeded, stnIpMaxRoutingTableSize=stnIpMaxRoutingTableSize, stnRipDetailsTimeStamp=stnRipDetailsTimeStamp, stnArpCircExtWanProxy=stnArpCircExtWanProxy, stnIpCircExtAdminState=stnIpCircExtAdminState, stnIpDetailsIndex=stnIpDetailsIndex, stnOspfSummaryLsaCount=stnOspfSummaryLsaCount, stnOspfMcastGroupLsaCount=stnOspfMcastGroupLsaCount, stnRipCircExtTalk=stnRipCircExtTalk, stnArpExtSendReplies=stnArpExtSendReplies, stnIpRouterRouteLimitExceeded=stnIpRouterRouteLimitExceeded, stnRipCircExtEntry=stnRipCircExtEntry, stnArpCircExtTable=stnArpCircExtTable, stnRipCircExtPoison=stnRipCircExtPoison, stnIpRtCacheEntries=stnIpRtCacheEntries, stnIpTraps=stnIpTraps, stnIpDetailsType=stnIpDetailsType, stnOspfExternT7LsaCount=stnOspfExternT7LsaCount, stnOspfDetailsTimeStamp=stnOspfDetailsTimeStamp, stnIpTrapVars=stnIpTrapVars, stnRipCircExtListen=stnRipCircExtListen, PYSNMP_MODULE_ID=stnIpRouting, stnOspfASBRSummaryLsaCount=stnOspfASBRSummaryLsaCount, stnOspf=stnOspf, stnIpRtCacheEntry=stnIpRtCacheEntry, stnRipDetailsIndex=stnRipDetailsIndex, stnIpRtCacheIfIndex=stnIpRtCacheIfIndex, stnRipDetailsTable=stnRipDetailsTable, stnRipExtAdminState=stnRipExtAdminState, stnRipDetailsSource=stnRipDetailsSource, stnBgp=stnBgp, stnIpDetailsHeader=stnIpDetailsHeader, stnIpDetailsTable=stnIpDetailsTable, stnArpCircExtDoResp=stnArpCircExtDoResp, stnArpExtSendRequests=stnArpExtSendRequests, stnIpRtCache=stnIpRtCache, stnIpNotification=stnIpNotification, stnArpCircExtDoProxy=stnArpCircExtDoProxy)
