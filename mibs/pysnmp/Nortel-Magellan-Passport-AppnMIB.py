#
# PySNMP MIB module Nortel-Magellan-Passport-AppnMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-AppnMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:16:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
RowPointer, Unsigned32, Gauge32, StorageType, Integer32, RowStatus, PassportCounter64, DisplayString = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "RowPointer", "Unsigned32", "Gauge32", "StorageType", "Integer32", "RowStatus", "PassportCounter64", "DisplayString")
Hex, HexString, AsciiString, DigitString, AsciiStringIndex, DashedHexString, Link, NonReplicated, EnterpriseDateAndTime = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Hex", "HexString", "AsciiString", "DigitString", "AsciiStringIndex", "DashedHexString", "Link", "NonReplicated", "EnterpriseDateAndTime")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, MibIdentifier, Unsigned32, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, iso, Counter64, ModuleIdentity, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "iso", "Counter64", "ModuleIdentity", "IpAddress", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
appnMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 29))
appn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110))
appnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 1), )
if mibBuilder.loadTexts: appnRowStatusTable.setStatus('mandatory')
appnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"))
if mibBuilder.loadTexts: appnRowStatusEntry.setStatus('mandatory')
appnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnRowStatus.setStatus('mandatory')
appnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnComponentName.setStatus('mandatory')
appnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnStorageType.setStatus('mandatory')
appnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: appnIndex.setStatus('mandatory')
appnProcessParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 100), )
if mibBuilder.loadTexts: appnProcessParmsTable.setStatus('mandatory')
appnProcessParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"))
if mibBuilder.loadTexts: appnProcessParmsEntry.setStatus('mandatory')
appnLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 100, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnLogicalProcessor.setStatus('mandatory')
appnMaximumSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 100, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnMaximumSvcs.setStatus('mandatory')
appnMaximumLinkStations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 100, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnMaximumLinkStations.setStatus('mandatory')
appnControlPointCreateParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101), )
if mibBuilder.loadTexts: appnControlPointCreateParmsTable.setStatus('mandatory')
appnControlPointCreateParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"))
if mibBuilder.loadTexts: appnControlPointCreateParmsEntry.setStatus('mandatory')
appnFqCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnFqCpName.setStatus('mandatory')
appnBlockNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 3), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnBlockNumber.setStatus('mandatory')
appnIdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 4), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnIdNumber.setStatus('mandatory')
appnRouteAdditionResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnRouteAdditionResistance.setStatus('mandatory')
appnFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnFeatures.setStatus('mandatory')
appnMaximumLocates = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnMaximumLocates.setStatus('mandatory')
appnMaximumDirectorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnMaximumDirectorySize.setStatus('mandatory')
appnMdsTxAlertQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnMdsTxAlertQueueSize.setStatus('mandatory')
appnTreeCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 65535)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnTreeCacheSize.setStatus('mandatory')
appnTreeCacheUseLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnTreeCacheUseLimit.setStatus('mandatory')
appnMaximumTopologyNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnMaximumTopologyNodes.setStatus('mandatory')
appnMaximumTopologyTgs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnMaximumTopologyTgs.setStatus('mandatory')
appnMaximumIsrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 65535)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnMaximumIsrSessions.setStatus('mandatory')
appnIsrUpperCongestionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnIsrUpperCongestionThreshold.setStatus('mandatory')
appnIsrLowerCongestionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnIsrLowerCongestionThreshold.setStatus('mandatory')
appnIsrMaxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnIsrMaxRuSize.setStatus('mandatory')
appnIsrRxPacingWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnIsrRxPacingWindow.setStatus('mandatory')
appnLocateTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnLocateTimeout.setStatus('mandatory')
appnHprSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("anrOnly", 1), ("rtp", 2))).clone('rtp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnHprSupport.setStatus('mandatory')
appnDlurSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 101, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlurSupport.setStatus('mandatory')
appnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 102), )
if mibBuilder.loadTexts: appnStateTable.setStatus('mandatory')
appnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 102, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"))
if mibBuilder.loadTexts: appnStateEntry.setStatus('mandatory')
appnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnAdminState.setStatus('mandatory')
appnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 102, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnOperationalState.setStatus('mandatory')
appnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 102, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnUsageState.setStatus('mandatory')
appnOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103), )
if mibBuilder.loadTexts: appnOperationalTable.setStatus('mandatory')
appnOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"))
if mibBuilder.loadTexts: appnOperationalEntry.setStatus('mandatory')
appnUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnUpTime.setStatus('mandatory')
appnHeapSpaceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnHeapSpaceLimit.setStatus('mandatory')
appnHeapSpaceCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnHeapSpaceCurrent.setStatus('mandatory')
appnMemWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnMemWarningThreshold.setStatus('mandatory')
appnMemCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnMemCriticalThreshold.setStatus('mandatory')
appnNnFunctionsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnFunctionsSupported.setStatus('mandatory')
appnGeneralFunctionsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnGeneralFunctionsSupported.setStatus('mandatory')
appnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnStatus.setStatus('mandatory')
appnFlowReductionSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnFlowReductionSequenceNumber.setStatus('mandatory')
appnResourceSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnResourceSequenceNumber.setStatus('mandatory')
appnDefinedLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDefinedLsGoodXids.setStatus('mandatory')
appnDefinedLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDefinedLsBadXids.setStatus('mandatory')
appnDynamicLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDynamicLsGoodXids.setStatus('mandatory')
appnDynamicLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDynamicLsBadXids.setStatus('mandatory')
appnActiveSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnActiveSvcs.setStatus('mandatory')
appnActiveLinkStations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 103, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnActiveLinkStations.setStatus('mandatory')
appnDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2))
appnDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 1), )
if mibBuilder.loadTexts: appnDnaRowStatusTable.setStatus('mandatory')
appnDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"))
if mibBuilder.loadTexts: appnDnaRowStatusEntry.setStatus('mandatory')
appnDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaRowStatus.setStatus('mandatory')
appnDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaComponentName.setStatus('mandatory')
appnDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaStorageType.setStatus('mandatory')
appnDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnDnaIndex.setStatus('mandatory')
appnDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 10), )
if mibBuilder.loadTexts: appnDnaAddressTable.setStatus('mandatory')
appnDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"))
if mibBuilder.loadTexts: appnDnaAddressEntry.setStatus('mandatory')
appnDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaNumberingPlanIndicator.setStatus('mandatory')
appnDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaDataNetworkAddress.setStatus('mandatory')
appnDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 12), )
if mibBuilder.loadTexts: appnDnaOutgoingOptionsTable.setStatus('mandatory')
appnDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"))
if mibBuilder.loadTexts: appnDnaOutgoingOptionsEntry.setStatus('mandatory')
appnDnaOutDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaOutDefaultPriority.setStatus('mandatory')
appnDnaOutDefaultPathSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1))).clone('throughput')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaOutDefaultPathSensitivity.setStatus('obsolete')
appnDnaOutPathSensitivityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaOutPathSensitivityOverRide.setStatus('obsolete')
appnDnaOutDefaultPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaOutDefaultPathReliability.setStatus('mandatory')
appnDnaOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaOutAccess.setStatus('mandatory')
appnDnaDefaultTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaDefaultTransferPriority.setStatus('mandatory')
appnDnaTransferPriorityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 12, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaTransferPriorityOverRide.setStatus('mandatory')
appnDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 13), )
if mibBuilder.loadTexts: appnDnaIncomingOptionsTable.setStatus('mandatory')
appnDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"))
if mibBuilder.loadTexts: appnDnaIncomingOptionsEntry.setStatus('mandatory')
appnDnaIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaIncAccess.setStatus('mandatory')
appnDnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 14), )
if mibBuilder.loadTexts: appnDnaCallOptionsTable.setStatus('mandatory')
appnDnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"))
if mibBuilder.loadTexts: appnDnaCallOptionsEntry.setStatus('mandatory')
appnDnaDefaultRecvFrmNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaDefaultRecvFrmNetworkThruputClass.setStatus('mandatory')
appnDnaDefaultSendToNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 14, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaDefaultSendToNetworkThruputClass.setStatus('mandatory')
appnDnaDefaultRecvFrmNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaDefaultRecvFrmNetworkWindowSize.setStatus('mandatory')
appnDnaDefaultSendToNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 14, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaDefaultSendToNetworkWindowSize.setStatus('mandatory')
appnDnaAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 14, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaAccountClass.setStatus('mandatory')
appnDnaAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 14, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaAccountCollection.setStatus('mandatory')
appnDnaServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 14, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaServiceExchange.setStatus('mandatory')
appnDnaHgM = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2))
appnDnaHgMRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 1), )
if mibBuilder.loadTexts: appnDnaHgMRowStatusTable.setStatus('mandatory')
appnDnaHgMRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaHgMIndex"))
if mibBuilder.loadTexts: appnDnaHgMRowStatusEntry.setStatus('mandatory')
appnDnaHgMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaHgMRowStatus.setStatus('mandatory')
appnDnaHgMComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaHgMComponentName.setStatus('mandatory')
appnDnaHgMStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaHgMStorageType.setStatus('mandatory')
appnDnaHgMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnDnaHgMIndex.setStatus('mandatory')
appnDnaHgMIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 10), )
if mibBuilder.loadTexts: appnDnaHgMIfTable.setStatus('mandatory')
appnDnaHgMIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaHgMIndex"))
if mibBuilder.loadTexts: appnDnaHgMIfEntry.setStatus('mandatory')
appnDnaHgMAvailabilityUpdateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaHgMAvailabilityUpdateThreshold.setStatus('mandatory')
appnDnaHgMOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 11), )
if mibBuilder.loadTexts: appnDnaHgMOpTable.setStatus('mandatory')
appnDnaHgMOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaHgMIndex"))
if mibBuilder.loadTexts: appnDnaHgMOpEntry.setStatus('mandatory')
appnDnaHgMMaxAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaHgMMaxAvailableChannels.setStatus('mandatory')
appnDnaHgMAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaHgMAvailableChannels.setStatus('mandatory')
appnDnaHgMAvailabilityDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-4096, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaHgMAvailabilityDelta.setStatus('mandatory')
appnDnaHgMHgAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2))
appnDnaHgMHgAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2, 1), )
if mibBuilder.loadTexts: appnDnaHgMHgAddrRowStatusTable.setStatus('mandatory')
appnDnaHgMHgAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaHgMIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaHgMHgAddrIndex"))
if mibBuilder.loadTexts: appnDnaHgMHgAddrRowStatusEntry.setStatus('mandatory')
appnDnaHgMHgAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaHgMHgAddrRowStatus.setStatus('mandatory')
appnDnaHgMHgAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaHgMHgAddrComponentName.setStatus('mandatory')
appnDnaHgMHgAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaHgMHgAddrStorageType.setStatus('mandatory')
appnDnaHgMHgAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: appnDnaHgMHgAddrIndex.setStatus('mandatory')
appnDnaHgMHgAddrAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2, 10), )
if mibBuilder.loadTexts: appnDnaHgMHgAddrAddrTable.setStatus('mandatory')
appnDnaHgMHgAddrAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaHgMIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaHgMHgAddrIndex"))
if mibBuilder.loadTexts: appnDnaHgMHgAddrAddrEntry.setStatus('mandatory')
appnDnaHgMHgAddrNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaHgMHgAddrNumberingPlanIndicator.setStatus('mandatory')
appnDnaHgMHgAddrDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaHgMHgAddrDataNetworkAddress.setStatus('mandatory')
appnDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3))
appnDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 1), )
if mibBuilder.loadTexts: appnDnaCugRowStatusTable.setStatus('mandatory')
appnDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaCugIndex"))
if mibBuilder.loadTexts: appnDnaCugRowStatusEntry.setStatus('mandatory')
appnDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaCugRowStatus.setStatus('mandatory')
appnDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaCugComponentName.setStatus('mandatory')
appnDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDnaCugStorageType.setStatus('mandatory')
appnDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: appnDnaCugIndex.setStatus('mandatory')
appnDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 10), )
if mibBuilder.loadTexts: appnDnaCugCugOptionsTable.setStatus('mandatory')
appnDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDnaCugIndex"))
if mibBuilder.loadTexts: appnDnaCugCugOptionsEntry.setStatus('mandatory')
appnDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaCugType.setStatus('mandatory')
appnDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaCugDnic.setStatus('mandatory')
appnDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaCugInterlockCode.setStatus('mandatory')
appnDnaCugPreferential = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaCugPreferential.setStatus('mandatory')
appnDnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaCugOutCalls.setStatus('mandatory')
appnDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaCugIncCalls.setStatus('mandatory')
appnDnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 2, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDnaCugPrivileged.setStatus('mandatory')
appnDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3))
appnDlciRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 1), )
if mibBuilder.loadTexts: appnDlciRowStatusTable.setStatus('mandatory')
appnDlciRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"))
if mibBuilder.loadTexts: appnDlciRowStatusEntry.setStatus('mandatory')
appnDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciRowStatus.setStatus('mandatory')
appnDlciComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciComponentName.setStatus('mandatory')
appnDlciStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciStorageType.setStatus('mandatory')
appnDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4095)))
if mibBuilder.loadTexts: appnDlciIndex.setStatus('mandatory')
appnDlciStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 10), )
if mibBuilder.loadTexts: appnDlciStateTable.setStatus('mandatory')
appnDlciStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"))
if mibBuilder.loadTexts: appnDlciStateEntry.setStatus('mandatory')
appnDlciAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciAdminState.setStatus('mandatory')
appnDlciOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciOperationalState.setStatus('mandatory')
appnDlciUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciUsageState.setStatus('mandatory')
appnDlciSpOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 12), )
if mibBuilder.loadTexts: appnDlciSpOpTable.setStatus('mandatory')
appnDlciSpOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"))
if mibBuilder.loadTexts: appnDlciSpOpEntry.setStatus('mandatory')
appnDlciRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciRateEnforcement.setStatus('mandatory')
appnDlciCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 12, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciCommittedInformationRate.setStatus('mandatory')
appnDlciCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciCommittedBurstSize.setStatus('mandatory')
appnDlciExcessInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciExcessInformationRate.setStatus('mandatory')
appnDlciExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 12, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciExcessBurstSize.setStatus('mandatory')
appnDlciMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 12, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciMeasurementInterval.setStatus('mandatory')
appnDlciDc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2))
appnDlciDcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 1), )
if mibBuilder.loadTexts: appnDlciDcRowStatusTable.setStatus('mandatory')
appnDlciDcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciDcIndex"))
if mibBuilder.loadTexts: appnDlciDcRowStatusEntry.setStatus('mandatory')
appnDlciDcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciDcRowStatus.setStatus('mandatory')
appnDlciDcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciDcComponentName.setStatus('mandatory')
appnDlciDcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciDcStorageType.setStatus('mandatory')
appnDlciDcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnDlciDcIndex.setStatus('mandatory')
appnDlciDcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 10), )
if mibBuilder.loadTexts: appnDlciDcOptionsTable.setStatus('mandatory')
appnDlciDcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciDcIndex"))
if mibBuilder.loadTexts: appnDlciDcOptionsEntry.setStatus('mandatory')
appnDlciDcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciDcRemoteNpi.setStatus('mandatory')
appnDlciDcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciDcRemoteDna.setStatus('mandatory')
appnDlciDcRemoteDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciDcRemoteDlci.setStatus('mandatory')
appnDlciDcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("permanentMaster", 1), ("permanentSlave", 2), ("permanentBackupSlave", 3), ("permanentSlaveWithBackup", 4))).clone('permanentMaster')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciDcType.setStatus('mandatory')
appnDlciDcTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9, 255))).clone(namedValues=NamedValues(("normal", 0), ("high", 9), ("useDnaDefTP", 255))).clone('useDnaDefTP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciDcTransferPriority.setStatus('mandatory')
appnDlciDcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("useDnaDefPriority", 3))).clone('useDnaDefPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciDcDiscardPriority.setStatus('mandatory')
appnDlciDcNfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 283), )
if mibBuilder.loadTexts: appnDlciDcNfaTable.setStatus('obsolete')
appnDlciDcNfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 283, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciDcIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciDcNfaIndex"))
if mibBuilder.loadTexts: appnDlciDcNfaEntry.setStatus('obsolete')
appnDlciDcNfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 283, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(48, 48), )))
if mibBuilder.loadTexts: appnDlciDcNfaIndex.setStatus('obsolete')
appnDlciDcNfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 283, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciDcNfaValue.setStatus('obsolete')
appnDlciDcNfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 2, 283, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: appnDlciDcNfaRowStatus.setStatus('obsolete')
appnDlciVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3))
appnDlciVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 1), )
if mibBuilder.loadTexts: appnDlciVcRowStatusTable.setStatus('mandatory')
appnDlciVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciVcIndex"))
if mibBuilder.loadTexts: appnDlciVcRowStatusEntry.setStatus('mandatory')
appnDlciVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcRowStatus.setStatus('mandatory')
appnDlciVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcComponentName.setStatus('mandatory')
appnDlciVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcStorageType.setStatus('mandatory')
appnDlciVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnDlciVcIndex.setStatus('mandatory')
appnDlciVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10), )
if mibBuilder.loadTexts: appnDlciVcCadTable.setStatus('mandatory')
appnDlciVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciVcIndex"))
if mibBuilder.loadTexts: appnDlciVcCadEntry.setStatus('mandatory')
appnDlciVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1), ("spvc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcType.setStatus('mandatory')
appnDlciVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcState.setStatus('mandatory')
appnDlciVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcPreviousState.setStatus('mandatory')
appnDlciVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcDiagnosticCode.setStatus('mandatory')
appnDlciVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcPreviousDiagnosticCode.setStatus('mandatory')
appnDlciVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcCalledNpi.setStatus('mandatory')
appnDlciVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcCalledDna.setStatus('mandatory')
appnDlciVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcCalledLcn.setStatus('mandatory')
appnDlciVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcCallingNpi.setStatus('mandatory')
appnDlciVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcCallingDna.setStatus('mandatory')
appnDlciVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcCallingLcn.setStatus('mandatory')
appnDlciVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcAccountingEnabled.setStatus('mandatory')
appnDlciVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcFastSelectCall.setStatus('mandatory')
appnDlciVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcPathReliability.setStatus('mandatory')
appnDlciVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcAccountingEnd.setStatus('mandatory')
appnDlciVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcPriority.setStatus('mandatory')
appnDlciVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcSegmentSize.setStatus('mandatory')
appnDlciVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcMaxSubnetPktSize.setStatus('mandatory')
appnDlciVcRcosToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcRcosToNetwork.setStatus('mandatory')
appnDlciVcRcosFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcRcosFromNetwork.setStatus('mandatory')
appnDlciVcEmissionPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcEmissionPriorityToNetwork.setStatus('mandatory')
appnDlciVcEmissionPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcEmissionPriorityFromNetwork.setStatus('mandatory')
appnDlciVcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 10, 1, 32), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcDataPath.setStatus('mandatory')
appnDlciVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 11), )
if mibBuilder.loadTexts: appnDlciVcIntdTable.setStatus('mandatory')
appnDlciVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciVcIndex"))
if mibBuilder.loadTexts: appnDlciVcIntdEntry.setStatus('mandatory')
appnDlciVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcCallReferenceNumber.setStatus('mandatory')
appnDlciVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcElapsedTimeTillNow.setStatus('mandatory')
appnDlciVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcSegmentsRx.setStatus('mandatory')
appnDlciVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcSegmentsSent.setStatus('mandatory')
appnDlciVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcStartTime.setStatus('mandatory')
appnDlciVcFrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12), )
if mibBuilder.loadTexts: appnDlciVcFrdTable.setStatus('mandatory')
appnDlciVcFrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciVcIndex"))
if mibBuilder.loadTexts: appnDlciVcFrdEntry.setStatus('mandatory')
appnDlciVcFrmCongestedToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcFrmCongestedToSubnet.setStatus('mandatory')
appnDlciVcCannotForwardToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcCannotForwardToSubnet.setStatus('mandatory')
appnDlciVcNotDataXferToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcNotDataXferToSubnet.setStatus('mandatory')
appnDlciVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
appnDlciVcCombErrorsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcCombErrorsFromSubnet.setStatus('mandatory')
appnDlciVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcDuplicatesFromSubnet.setStatus('mandatory')
appnDlciVcNotDataXferFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcNotDataXferFromSubnet.setStatus('mandatory')
appnDlciVcFrmLossTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcFrmLossTimeouts.setStatus('mandatory')
appnDlciVcOoSeqByteCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcOoSeqByteCntExceeded.setStatus('mandatory')
appnDlciVcPeakOoSeqPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcPeakOoSeqPktCount.setStatus('mandatory')
appnDlciVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcPeakOoSeqFrmForwarded.setStatus('mandatory')
appnDlciVcSendSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcSendSequenceNumber.setStatus('mandatory')
appnDlciVcPktRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcPktRetryTimeouts.setStatus('mandatory')
appnDlciVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcPeakRetryQueueSize.setStatus('mandatory')
appnDlciVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcSubnetRecoveries.setStatus('mandatory')
appnDlciVcOoSeqPktCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcOoSeqPktCntExceeded.setStatus('mandatory')
appnDlciVcPeakOoSeqByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcPeakOoSeqByteCount.setStatus('mandatory')
appnDlciVcDmepTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 417), )
if mibBuilder.loadTexts: appnDlciVcDmepTable.setStatus('mandatory')
appnDlciVcDmepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 417, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciVcIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciVcDmepValue"))
if mibBuilder.loadTexts: appnDlciVcDmepEntry.setStatus('mandatory')
appnDlciVcDmepValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 3, 417, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciVcDmepValue.setStatus('mandatory')
appnDlciBnnLsDef = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4))
appnDlciBnnLsDefRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 1), )
if mibBuilder.loadTexts: appnDlciBnnLsDefRowStatusTable.setStatus('mandatory')
appnDlciBnnLsDefRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciBnnLsDefIndex"))
if mibBuilder.loadTexts: appnDlciBnnLsDefRowStatusEntry.setStatus('mandatory')
appnDlciBnnLsDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefRowStatus.setStatus('mandatory')
appnDlciBnnLsDefComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciBnnLsDefComponentName.setStatus('mandatory')
appnDlciBnnLsDefStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciBnnLsDefStorageType.setStatus('mandatory')
appnDlciBnnLsDefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), ValueRangeConstraint(16, 16), ValueRangeConstraint(20, 20), ValueRangeConstraint(24, 24), ValueRangeConstraint(28, 28), ValueRangeConstraint(32, 32), ValueRangeConstraint(36, 36), ValueRangeConstraint(40, 40), ValueRangeConstraint(44, 44), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(68, 68), ValueRangeConstraint(72, 72), ValueRangeConstraint(76, 76), ValueRangeConstraint(80, 80), ValueRangeConstraint(84, 84), ValueRangeConstraint(88, 88), ValueRangeConstraint(92, 92), ValueRangeConstraint(96, 96), ValueRangeConstraint(100, 100), ValueRangeConstraint(104, 104), ValueRangeConstraint(108, 108), ValueRangeConstraint(112, 112), ValueRangeConstraint(116, 116), ValueRangeConstraint(120, 120), ValueRangeConstraint(124, 124), ValueRangeConstraint(128, 128), ValueRangeConstraint(132, 132), ValueRangeConstraint(136, 136), ValueRangeConstraint(140, 140), ValueRangeConstraint(144, 144), ValueRangeConstraint(148, 148), ValueRangeConstraint(152, 152), ValueRangeConstraint(156, 156), ValueRangeConstraint(160, 160), ValueRangeConstraint(164, 164), ValueRangeConstraint(168, 168), ValueRangeConstraint(172, 172), ValueRangeConstraint(176, 176), ValueRangeConstraint(180, 180), ValueRangeConstraint(184, 184), ValueRangeConstraint(188, 188), ValueRangeConstraint(192, 192), ValueRangeConstraint(196, 196), ValueRangeConstraint(200, 200), ValueRangeConstraint(204, 204), ValueRangeConstraint(208, 208), ValueRangeConstraint(212, 212), ValueRangeConstraint(216, 216), ValueRangeConstraint(220, 220), ValueRangeConstraint(224, 224), ValueRangeConstraint(228, 228), ValueRangeConstraint(232, 232), ValueRangeConstraint(236, 236), ValueRangeConstraint(240, 240), ValueRangeConstraint(244, 244), ValueRangeConstraint(248, 248), ValueRangeConstraint(252, 252), )))
if mibBuilder.loadTexts: appnDlciBnnLsDefIndex.setStatus('mandatory')
appnDlciBnnLsDefProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2), )
if mibBuilder.loadTexts: appnDlciBnnLsDefProvTable.setStatus('mandatory')
appnDlciBnnLsDefProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciBnnLsDefIndex"))
if mibBuilder.loadTexts: appnDlciBnnLsDefProvEntry.setStatus('mandatory')
appnDlciBnnLsDefDspuService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("none", 0), ("dlur", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefDspuService.setStatus('mandatory')
appnDlciBnnLsDefAdjacentCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefAdjacentCpName.setStatus('mandatory')
appnDlciBnnLsDefAdjacentCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("appnNode", 0), ("networkNode", 2), ("endNode", 3), ("backLevelLenNode", 5), ("hostXID3", 6), ("hostXID0", 7), ("dlurXID", 8), ("dlurNoXID", 9))).clone('appnNode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefAdjacentCpType.setStatus('mandatory')
appnDlciBnnLsDefTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefTgNum.setStatus('mandatory')
appnDlciBnnLsDefDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefDlusName.setStatus('mandatory')
appnDlciBnnLsDefBackupDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 7), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefBackupDlusName.setStatus('mandatory')
appnDlciBnnLsDefHprSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("sameAsNode", 1))).clone('sameAsNode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefHprSupported.setStatus('mandatory')
appnDlciBnnLsDefAdjacentNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 9), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefAdjacentNodeID.setStatus('mandatory')
appnDlciBnnLsDefCpCpSessionSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefCpCpSessionSupport.setStatus('mandatory')
appnDlciBnnLsDefMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(99, 32768)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefMaxTxBtuSize.setStatus('mandatory')
appnDlciBnnLsDefLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("negotiable", 0), ("primary", 1), ("secondary", 2))).clone('negotiable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBnnLsDefLsRole.setStatus('mandatory')
appnDlciSp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5))
appnDlciSpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 1), )
if mibBuilder.loadTexts: appnDlciSpRowStatusTable.setStatus('mandatory')
appnDlciSpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciSpIndex"))
if mibBuilder.loadTexts: appnDlciSpRowStatusEntry.setStatus('mandatory')
appnDlciSpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciSpRowStatus.setStatus('mandatory')
appnDlciSpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciSpComponentName.setStatus('mandatory')
appnDlciSpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciSpStorageType.setStatus('mandatory')
appnDlciSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnDlciSpIndex.setStatus('mandatory')
appnDlciSpParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 11), )
if mibBuilder.loadTexts: appnDlciSpParmsTable.setStatus('mandatory')
appnDlciSpParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciSpIndex"))
if mibBuilder.loadTexts: appnDlciSpParmsEntry.setStatus('mandatory')
appnDlciSpRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciSpRateEnforcement.setStatus('mandatory')
appnDlciSpCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciSpCommittedInformationRate.setStatus('mandatory')
appnDlciSpCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciSpCommittedBurstSize.setStatus('mandatory')
appnDlciSpExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciSpExcessBurstSize.setStatus('mandatory')
appnDlciSpMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 5, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciSpMeasurementInterval.setStatus('mandatory')
appnDlciBanLsDef = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6))
appnDlciBanLsDefRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 1), )
if mibBuilder.loadTexts: appnDlciBanLsDefRowStatusTable.setStatus('mandatory')
appnDlciBanLsDefRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciBanLsDefMacIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciBanLsDefSapIndex"))
if mibBuilder.loadTexts: appnDlciBanLsDefRowStatusEntry.setStatus('mandatory')
appnDlciBanLsDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefRowStatus.setStatus('mandatory')
appnDlciBanLsDefComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciBanLsDefComponentName.setStatus('mandatory')
appnDlciBanLsDefStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciBanLsDefStorageType.setStatus('mandatory')
appnDlciBanLsDefMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 1, 1, 10), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: appnDlciBanLsDefMacIndex.setStatus('mandatory')
appnDlciBanLsDefSapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), ValueRangeConstraint(16, 16), ValueRangeConstraint(20, 20), ValueRangeConstraint(24, 24), ValueRangeConstraint(28, 28), ValueRangeConstraint(32, 32), ValueRangeConstraint(36, 36), ValueRangeConstraint(40, 40), ValueRangeConstraint(44, 44), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(68, 68), ValueRangeConstraint(72, 72), ValueRangeConstraint(76, 76), ValueRangeConstraint(80, 80), ValueRangeConstraint(84, 84), ValueRangeConstraint(88, 88), ValueRangeConstraint(92, 92), ValueRangeConstraint(96, 96), ValueRangeConstraint(100, 100), ValueRangeConstraint(104, 104), ValueRangeConstraint(108, 108), ValueRangeConstraint(112, 112), ValueRangeConstraint(116, 116), ValueRangeConstraint(120, 120), ValueRangeConstraint(124, 124), ValueRangeConstraint(128, 128), ValueRangeConstraint(132, 132), ValueRangeConstraint(136, 136), ValueRangeConstraint(140, 140), ValueRangeConstraint(144, 144), ValueRangeConstraint(148, 148), ValueRangeConstraint(152, 152), ValueRangeConstraint(156, 156), ValueRangeConstraint(160, 160), ValueRangeConstraint(164, 164), ValueRangeConstraint(168, 168), ValueRangeConstraint(172, 172), ValueRangeConstraint(176, 176), ValueRangeConstraint(180, 180), ValueRangeConstraint(184, 184), ValueRangeConstraint(188, 188), ValueRangeConstraint(192, 192), ValueRangeConstraint(196, 196), ValueRangeConstraint(200, 200), ValueRangeConstraint(204, 204), ValueRangeConstraint(208, 208), ValueRangeConstraint(212, 212), ValueRangeConstraint(216, 216), ValueRangeConstraint(220, 220), ValueRangeConstraint(224, 224), ValueRangeConstraint(228, 228), ValueRangeConstraint(232, 232), ValueRangeConstraint(236, 236), ValueRangeConstraint(240, 240), ValueRangeConstraint(244, 244), ValueRangeConstraint(248, 248), ValueRangeConstraint(252, 252), )))
if mibBuilder.loadTexts: appnDlciBanLsDefSapIndex.setStatus('mandatory')
appnDlciBanLsDefProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2), )
if mibBuilder.loadTexts: appnDlciBanLsDefProvTable.setStatus('mandatory')
appnDlciBanLsDefProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciBanLsDefMacIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciBanLsDefSapIndex"))
if mibBuilder.loadTexts: appnDlciBanLsDefProvEntry.setStatus('mandatory')
appnDlciBanLsDefDspuService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("none", 0), ("dlur", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefDspuService.setStatus('mandatory')
appnDlciBanLsDefAdjacentCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefAdjacentCpName.setStatus('mandatory')
appnDlciBanLsDefAdjacentCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("appnNode", 0), ("networkNode", 2), ("endNode", 3), ("backLevelLenNode", 5), ("hostXID3", 6), ("hostXID0", 7), ("dlurXID", 8), ("dlurNoXID", 9))).clone('appnNode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefAdjacentCpType.setStatus('mandatory')
appnDlciBanLsDefTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefTgNum.setStatus('mandatory')
appnDlciBanLsDefDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefDlusName.setStatus('mandatory')
appnDlciBanLsDefBackupDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 7), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefBackupDlusName.setStatus('mandatory')
appnDlciBanLsDefHprSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("sameAsNode", 1))).clone('sameAsNode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefHprSupported.setStatus('mandatory')
appnDlciBanLsDefAdjacentNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 9), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefAdjacentNodeID.setStatus('mandatory')
appnDlciBanLsDefCpCpSessionSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefCpCpSessionSupport.setStatus('mandatory')
appnDlciBanLsDefMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(99, 32768)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefMaxTxBtuSize.setStatus('mandatory')
appnDlciBanLsDefLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("negotiable", 0), ("primary", 1), ("secondary", 2))).clone('negotiable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLsDefLsRole.setStatus('mandatory')
appnDlciBan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7))
appnDlciBanRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7, 1), )
if mibBuilder.loadTexts: appnDlciBanRowStatusTable.setStatus('mandatory')
appnDlciBanRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciBanIndex"))
if mibBuilder.loadTexts: appnDlciBanRowStatusEntry.setStatus('mandatory')
appnDlciBanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanRowStatus.setStatus('mandatory')
appnDlciBanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciBanComponentName.setStatus('mandatory')
appnDlciBanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciBanStorageType.setStatus('mandatory')
appnDlciBanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnDlciBanIndex.setStatus('mandatory')
appnDlciBanProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7, 2), )
if mibBuilder.loadTexts: appnDlciBanProvTable.setStatus('mandatory')
appnDlciBanProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7, 2, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciBanIndex"))
if mibBuilder.loadTexts: appnDlciBanProvEntry.setStatus('mandatory')
appnDlciBanLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7, 2, 1, 1), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="4fff00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLocalMac.setStatus('mandatory')
appnDlciBanLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 7, 2, 1, 2), Hex().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), ValueRangeConstraint(16, 16), ValueRangeConstraint(20, 20), ValueRangeConstraint(24, 24), ValueRangeConstraint(28, 28), ValueRangeConstraint(32, 32), ValueRangeConstraint(36, 36), ValueRangeConstraint(40, 40), ValueRangeConstraint(44, 44), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(68, 68), ValueRangeConstraint(72, 72), ValueRangeConstraint(76, 76), ValueRangeConstraint(80, 80), ValueRangeConstraint(84, 84), ValueRangeConstraint(88, 88), ValueRangeConstraint(92, 92), ValueRangeConstraint(96, 96), ValueRangeConstraint(100, 100), ValueRangeConstraint(104, 104), ValueRangeConstraint(108, 108), ValueRangeConstraint(112, 112), ValueRangeConstraint(116, 116), ValueRangeConstraint(120, 120), ValueRangeConstraint(124, 124), ValueRangeConstraint(128, 128), ValueRangeConstraint(132, 132), ValueRangeConstraint(136, 136), ValueRangeConstraint(140, 140), ValueRangeConstraint(144, 144), ValueRangeConstraint(148, 148), ValueRangeConstraint(152, 152), ValueRangeConstraint(156, 156), ValueRangeConstraint(160, 160), ValueRangeConstraint(164, 164), ValueRangeConstraint(168, 168), ValueRangeConstraint(172, 172), ValueRangeConstraint(176, 176), ValueRangeConstraint(180, 180), ValueRangeConstraint(184, 184), ValueRangeConstraint(188, 188), ValueRangeConstraint(192, 192), ValueRangeConstraint(196, 196), ValueRangeConstraint(200, 200), ValueRangeConstraint(204, 204), ValueRangeConstraint(208, 208), ValueRangeConstraint(212, 212), ValueRangeConstraint(216, 216), ValueRangeConstraint(220, 220), ValueRangeConstraint(224, 224), ValueRangeConstraint(228, 228), ValueRangeConstraint(232, 232), ValueRangeConstraint(236, 236), ValueRangeConstraint(240, 240), ValueRangeConstraint(244, 244), ValueRangeConstraint(248, 248), ValueRangeConstraint(252, 252), )).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciBanLocalSap.setStatus('mandatory')
appnDlciCn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 8))
appnDlciCnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 8, 1), )
if mibBuilder.loadTexts: appnDlciCnRowStatusTable.setStatus('mandatory')
appnDlciCnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlciCnIndex"))
if mibBuilder.loadTexts: appnDlciCnRowStatusEntry.setStatus('mandatory')
appnDlciCnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 8, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDlciCnRowStatus.setStatus('mandatory')
appnDlciCnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciCnComponentName.setStatus('mandatory')
appnDlciCnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlciCnStorageType.setStatus('mandatory')
appnDlciCnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 3, 8, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: appnDlciCnIndex.setStatus('mandatory')
appnLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4))
appnLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 1), )
if mibBuilder.loadTexts: appnLcnRowStatusTable.setStatus('mandatory')
appnLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnIndex"))
if mibBuilder.loadTexts: appnLcnRowStatusEntry.setStatus('mandatory')
appnLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnLcnRowStatus.setStatus('mandatory')
appnLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnComponentName.setStatus('mandatory')
appnLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnStorageType.setStatus('mandatory')
appnLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: appnLcnIndex.setStatus('mandatory')
appnLcnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 10), )
if mibBuilder.loadTexts: appnLcnStateTable.setStatus('mandatory')
appnLcnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnIndex"))
if mibBuilder.loadTexts: appnLcnStateEntry.setStatus('mandatory')
appnLcnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnAdminState.setStatus('mandatory')
appnLcnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnOperationalState.setStatus('mandatory')
appnLcnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnUsageState.setStatus('mandatory')
appnLcnDc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2))
appnLcnDcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 1), )
if mibBuilder.loadTexts: appnLcnDcRowStatusTable.setStatus('mandatory')
appnLcnDcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnDcIndex"))
if mibBuilder.loadTexts: appnLcnDcRowStatusEntry.setStatus('mandatory')
appnLcnDcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnDcRowStatus.setStatus('mandatory')
appnLcnDcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnDcComponentName.setStatus('mandatory')
appnLcnDcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnDcStorageType.setStatus('mandatory')
appnLcnDcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnLcnDcIndex.setStatus('mandatory')
appnLcnDcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 10), )
if mibBuilder.loadTexts: appnLcnDcOptionsTable.setStatus('mandatory')
appnLcnDcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnDcIndex"))
if mibBuilder.loadTexts: appnLcnDcOptionsEntry.setStatus('mandatory')
appnLcnDcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnLcnDcRemoteNpi.setStatus('mandatory')
appnLcnDcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnLcnDcRemoteDna.setStatus('mandatory')
appnLcnDcTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9, 255))).clone(namedValues=NamedValues(("normal", 0), ("high", 9), ("useDnaDefTP", 255))).clone('useDnaDefTP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnLcnDcTransferPriority.setStatus('mandatory')
appnLcnDcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("useDnaDefPriority", 3))).clone('useDnaDefPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnLcnDcDiscardPriority.setStatus('mandatory')
appnLcnVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3))
appnLcnVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 1), )
if mibBuilder.loadTexts: appnLcnVcRowStatusTable.setStatus('mandatory')
appnLcnVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnVcIndex"))
if mibBuilder.loadTexts: appnLcnVcRowStatusEntry.setStatus('mandatory')
appnLcnVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcRowStatus.setStatus('mandatory')
appnLcnVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcComponentName.setStatus('mandatory')
appnLcnVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcStorageType.setStatus('mandatory')
appnLcnVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnLcnVcIndex.setStatus('mandatory')
appnLcnVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10), )
if mibBuilder.loadTexts: appnLcnVcCadTable.setStatus('mandatory')
appnLcnVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnVcIndex"))
if mibBuilder.loadTexts: appnLcnVcCadEntry.setStatus('mandatory')
appnLcnVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcType.setStatus('mandatory')
appnLcnVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcState.setStatus('mandatory')
appnLcnVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcPreviousState.setStatus('mandatory')
appnLcnVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcDiagnosticCode.setStatus('mandatory')
appnLcnVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcPreviousDiagnosticCode.setStatus('mandatory')
appnLcnVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcCalledNpi.setStatus('mandatory')
appnLcnVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcCalledDna.setStatus('mandatory')
appnLcnVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcCalledLcn.setStatus('mandatory')
appnLcnVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcCallingNpi.setStatus('mandatory')
appnLcnVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcCallingDna.setStatus('mandatory')
appnLcnVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcCallingLcn.setStatus('mandatory')
appnLcnVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcAccountingEnabled.setStatus('mandatory')
appnLcnVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcFastSelectCall.setStatus('mandatory')
appnLcnVcLocalRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcLocalRxPktSize.setStatus('mandatory')
appnLcnVcLocalTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcLocalTxPktSize.setStatus('mandatory')
appnLcnVcLocalTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcLocalTxWindowSize.setStatus('mandatory')
appnLcnVcLocalRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcLocalRxWindowSize.setStatus('mandatory')
appnLcnVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcPathReliability.setStatus('mandatory')
appnLcnVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcAccountingEnd.setStatus('mandatory')
appnLcnVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcPriority.setStatus('mandatory')
appnLcnVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcSegmentSize.setStatus('mandatory')
appnLcnVcSubnetTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcSubnetTxPktSize.setStatus('mandatory')
appnLcnVcSubnetTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcSubnetTxWindowSize.setStatus('mandatory')
appnLcnVcSubnetRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcSubnetRxPktSize.setStatus('mandatory')
appnLcnVcSubnetRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcSubnetRxWindowSize.setStatus('mandatory')
appnLcnVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcMaxSubnetPktSize.setStatus('mandatory')
appnLcnVcTransferPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcTransferPriorityToNetwork.setStatus('mandatory')
appnLcnVcTransferPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcTransferPriorityFromNetwork.setStatus('mandatory')
appnLcnVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 11), )
if mibBuilder.loadTexts: appnLcnVcIntdTable.setStatus('mandatory')
appnLcnVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnVcIndex"))
if mibBuilder.loadTexts: appnLcnVcIntdEntry.setStatus('mandatory')
appnLcnVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcCallReferenceNumber.setStatus('mandatory')
appnLcnVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcElapsedTimeTillNow.setStatus('mandatory')
appnLcnVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcSegmentsRx.setStatus('mandatory')
appnLcnVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcSegmentsSent.setStatus('mandatory')
appnLcnVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcStartTime.setStatus('mandatory')
appnLcnVcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12), )
if mibBuilder.loadTexts: appnLcnVcStatsTable.setStatus('mandatory')
appnLcnVcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLcnVcIndex"))
if mibBuilder.loadTexts: appnLcnVcStatsEntry.setStatus('mandatory')
appnLcnVcAckStackingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcAckStackingTimeouts.setStatus('mandatory')
appnLcnVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
appnLcnVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcDuplicatesFromSubnet.setStatus('mandatory')
appnLcnVcFrmRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcFrmRetryTimeouts.setStatus('mandatory')
appnLcnVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcPeakRetryQueueSize.setStatus('mandatory')
appnLcnVcPeakOoSeqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcPeakOoSeqQueueSize.setStatus('mandatory')
appnLcnVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcPeakOoSeqFrmForwarded.setStatus('mandatory')
appnLcnVcPeakStackedAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcPeakStackedAcksRx.setStatus('mandatory')
appnLcnVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcSubnetRecoveries.setStatus('mandatory')
appnLcnVcWindowClosuresToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcWindowClosuresToSubnet.setStatus('mandatory')
appnLcnVcWindowClosuresFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcWindowClosuresFromSubnet.setStatus('mandatory')
appnLcnVcWrTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 4, 3, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLcnVcWrTriggers.setStatus('mandatory')
appnPort = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5))
appnPortRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 1), )
if mibBuilder.loadTexts: appnPortRowStatusTable.setStatus('mandatory')
appnPortRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnPortIndex"))
if mibBuilder.loadTexts: appnPortRowStatusEntry.setStatus('mandatory')
appnPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortRowStatus.setStatus('mandatory')
appnPortComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortComponentName.setStatus('mandatory')
appnPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortStorageType.setStatus('mandatory')
appnPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: appnPortIndex.setStatus('mandatory')
appnPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10), )
if mibBuilder.loadTexts: appnPortConfigTable.setStatus('mandatory')
appnPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnPortIndex"))
if mibBuilder.loadTexts: appnPortConfigEntry.setStatus('mandatory')
appnPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonSwitched", 1), ("switched", 2), ("sharedAccessFacilities", 3))).clone('sharedAccessFacilities')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortType.setStatus('mandatory')
appnPortMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2048)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortMaxRxBtuSize.setStatus('mandatory')
appnPortMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2048)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortMaxTxBtuSize.setStatus('mandatory')
appnPortTotLinkActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(99)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortTotLinkActLim.setStatus('mandatory')
appnPortInbLinkActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(97)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortInbLinkActLim.setStatus('mandatory')
appnPortOutLinkActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortOutLinkActLim.setStatus('mandatory')
appnPortLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("negotiable", 3))).clone('negotiable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortLsRole.setStatus('mandatory')
appnPortActXidExchLim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortActXidExchLim.setStatus('mandatory')
appnPortNonactXidExchLim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortNonactXidExchLim.setStatus('mandatory')
appnPortLsXmitRxCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("twa", 0), ("tws", 1))).clone('tws')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortLsXmitRxCap.setStatus('mandatory')
appnPortMaxIfrmRxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortMaxIfrmRxWindow.setStatus('mandatory')
appnPortTargetPacingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortTargetPacingCount.setStatus('mandatory')
appnPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 11), )
if mibBuilder.loadTexts: appnPortOperTable.setStatus('mandatory')
appnPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnPortIndex"))
if mibBuilder.loadTexts: appnPortOperEntry.setStatus('mandatory')
appnPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendingActive", 2), ("active", 3), ("pendingInactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortState.setStatus('mandatory')
appnPortDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 30, 31))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("tokenRing", 6), ("frameRelay", 30), ("x25", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortDlcType.setStatus('mandatory')
appnPortSimRim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortSimRim.setStatus('mandatory')
appnPortDefinedLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortDefinedLsGoodXids.setStatus('mandatory')
appnPortDefinedLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 11, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortDefinedLsBadXids.setStatus('mandatory')
appnPortDynLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 11, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortDynLsGoodXids.setStatus('mandatory')
appnPortDynLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortDynLsBadXids.setStatus('mandatory')
appnPortTgCharTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 12), )
if mibBuilder.loadTexts: appnPortTgCharTable.setStatus('mandatory')
appnPortTgCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnPortIndex"))
if mibBuilder.loadTexts: appnPortTgCharEntry.setStatus('mandatory')
appnPortEffectiveCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("n600Gbps", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortEffectiveCap.setStatus('mandatory')
appnPortConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortConnectCost.setStatus('mandatory')
appnPortByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortByteCost.setStatus('mandatory')
appnPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("unKnown", 0), ("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('nonSecure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortSecurity.setStatus('mandatory')
appnPortPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153))).clone('terrestrial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortPropagationDelay.setStatus('mandatory')
appnPortUserDefinedParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortUserDefinedParm1.setStatus('mandatory')
appnPortUserDefinedParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortUserDefinedParm2.setStatus('mandatory')
appnPortUserDefinedParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 5, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortUserDefinedParm3.setStatus('mandatory')
appnLs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6))
appnLsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 1), )
if mibBuilder.loadTexts: appnLsRowStatusTable.setStatus('mandatory')
appnLsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLsIndex"))
if mibBuilder.loadTexts: appnLsRowStatusEntry.setStatus('mandatory')
appnLsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsRowStatus.setStatus('mandatory')
appnLsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsComponentName.setStatus('mandatory')
appnLsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsStorageType.setStatus('mandatory')
appnLsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: appnLsIndex.setStatus('mandatory')
appnLsLsVcReferenceTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 10), )
if mibBuilder.loadTexts: appnLsLsVcReferenceTable.setStatus('mandatory')
appnLsLsVcReferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLsIndex"))
if mibBuilder.loadTexts: appnLsLsVcReferenceEntry.setStatus('mandatory')
appnLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 10, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsName.setStatus('mandatory')
appnLsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 10, 1, 2), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 252))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsSap.setStatus('mandatory')
appnLsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 11), )
if mibBuilder.loadTexts: appnLsConfigTable.setStatus('mandatory')
appnLsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLsIndex"))
if mibBuilder.loadTexts: appnLsConfigEntry.setStatus('mandatory')
appnLsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsPortName.setStatus('mandatory')
appnLsFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsFeatures.setStatus('mandatory')
appnLsMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsMaxTxBtuSize.setStatus('mandatory')
appnLsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12), )
if mibBuilder.loadTexts: appnLsOperTable.setStatus('mandatory')
appnLsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLsIndex"))
if mibBuilder.loadTexts: appnLsOperEntry.setStatus('mandatory')
appnLsDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 30, 31))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("tokenRing", 6), ("llc2", 30), ("x25", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsDlcType.setStatus('mandatory')
appnLsLinkStationState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendingActive", 2), ("active", 3), ("pendingInactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsLinkStationState.setStatus('mandatory')
appnLsLinkStationSubState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("inactive", 1), ("sentReqOpnstn", 2), ("pendXidExch", 3), ("sentActAs", 4), ("sentSentMode", 5), ("active", 6), ("sentDeactAsOrd", 7), ("sentDiscOrd", 8), ("sentDestroyTg", 9), ("sentCreateTg", 10), ("sentConnReq", 11), ("pendRcvConnInd", 12), ("pendSendConnRsp", 13), ("sentConnRsp", 14), ("pendDeact", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsLinkStationSubState.setStatus('mandatory')
appnLsActSessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsActSessCount.setStatus('mandatory')
appnLsActualCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsActualCpName.setStatus('mandatory')
appnLsActualCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("toBeDetermined", 0), ("networkNode", 1), ("endNode", 2), ("lowEntryNode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsActualCpType.setStatus('mandatory')
appnLsDlcName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 7), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsDlcName.setStatus('mandatory')
appnLsDynamicOrDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsDynamicOrDefined.setStatus('mandatory')
appnLsMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsMigration.setStatus('mandatory')
appnLsTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsTgNum.setStatus('mandatory')
appnLsHprSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("anr", 1), ("rtp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsHprSupport.setStatus('mandatory')
appnLsAnrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 12, 1, 12), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsAnrLabel.setStatus('mandatory')
appnLsTgCharTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 13), )
if mibBuilder.loadTexts: appnLsTgCharTable.setStatus('mandatory')
appnLsTgCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLsIndex"))
if mibBuilder.loadTexts: appnLsTgCharEntry.setStatus('mandatory')
appnLsEffectiveCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("n600Gbps", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsEffectiveCap.setStatus('mandatory')
appnLsConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsConnectCost.setStatus('mandatory')
appnLsByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsByteCost.setStatus('mandatory')
appnLsSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("unKnown", 0), ("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('nonSecure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsSecurity.setStatus('mandatory')
appnLsPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153))).clone('terrestrial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsPropagationDelay.setStatus('mandatory')
appnLsUserDefinedParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsUserDefinedParm1.setStatus('mandatory')
appnLsUserDefinedParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsUserDefinedParm2.setStatus('mandatory')
appnLsUserDefinedParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 13, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsUserDefinedParm3.setStatus('mandatory')
appnLsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14), )
if mibBuilder.loadTexts: appnLsStatsTable.setStatus('mandatory')
appnLsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLsIndex"))
if mibBuilder.loadTexts: appnLsStatsEntry.setStatus('mandatory')
appnLsInXidBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsInXidBytes.setStatus('mandatory')
appnLsInMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsInMsgBytes.setStatus('mandatory')
appnLsInXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsInXidFrames.setStatus('mandatory')
appnLsInMsgFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsInMsgFrames.setStatus('mandatory')
appnLsOutXidBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsOutXidBytes.setStatus('mandatory')
appnLsOutMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsOutMsgBytes.setStatus('mandatory')
appnLsOutXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsOutXidFrames.setStatus('mandatory')
appnLsOutMsgFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsOutMsgFrames.setStatus('mandatory')
appnLsInInvalidSnaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsInInvalidSnaFrames.setStatus('mandatory')
appnLsInSessionControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsInSessionControlFrames.setStatus('mandatory')
appnLsOutSessionControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsOutSessionControlFrames.setStatus('mandatory')
appnLsEchoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsEchoResponse.setStatus('mandatory')
appnLsCurrentDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsCurrentDelay.setStatus('mandatory')
appnLsMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsMaxDelay.setStatus('mandatory')
appnLsMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 15), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsMinDelay.setStatus('mandatory')
appnLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 17), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsGoodXids.setStatus('mandatory')
appnLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 6, 14, 1, 18), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsBadXids.setStatus('mandatory')
appnDirEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7))
appnDirEntRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 1), )
if mibBuilder.loadTexts: appnDirEntRowStatusTable.setStatus('mandatory')
appnDirEntRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDirEntIndex"))
if mibBuilder.loadTexts: appnDirEntRowStatusEntry.setStatus('mandatory')
appnDirEntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDirEntRowStatus.setStatus('mandatory')
appnDirEntComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDirEntComponentName.setStatus('mandatory')
appnDirEntStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDirEntStorageType.setStatus('mandatory')
appnDirEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: appnDirEntIndex.setStatus('mandatory')
appnDirEntOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 10), )
if mibBuilder.loadTexts: appnDirEntOperTable.setStatus('mandatory')
appnDirEntOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDirEntIndex"))
if mibBuilder.loadTexts: appnDirEntOperEntry.setStatus('mandatory')
appnDirEntServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDirEntServerName.setStatus('mandatory')
appnDirEntLuOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDirEntLuOwnerName.setStatus('mandatory')
appnDirEntLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("domain", 1), ("xdomain", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDirEntLocation.setStatus('mandatory')
appnDirEntEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("cache", 0), ("register", 2), ("home", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDirEntEntryType.setStatus('mandatory')
appnDirEntWildCard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("explicit", 2), ("partialWildcard", 3), ("fullWildcard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDirEntWildCard.setStatus('mandatory')
appnAdjNn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8))
appnAdjNnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 1), )
if mibBuilder.loadTexts: appnAdjNnRowStatusTable.setStatus('mandatory')
appnAdjNnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnAdjNnIndex"))
if mibBuilder.loadTexts: appnAdjNnRowStatusEntry.setStatus('mandatory')
appnAdjNnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnAdjNnRowStatus.setStatus('mandatory')
appnAdjNnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnAdjNnComponentName.setStatus('mandatory')
appnAdjNnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnAdjNnStorageType.setStatus('mandatory')
appnAdjNnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: appnAdjNnIndex.setStatus('mandatory')
appnAdjNnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 10), )
if mibBuilder.loadTexts: appnAdjNnOperTable.setStatus('mandatory')
appnAdjNnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnAdjNnIndex"))
if mibBuilder.loadTexts: appnAdjNnOperEntry.setStatus('mandatory')
appnAdjNnCpCpSessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("conLoserActive", 2), ("conWinnerActive", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnAdjNnCpCpSessStatus.setStatus('mandatory')
appnAdjNnOutOfSeqTdus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 10, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnAdjNnOutOfSeqTdus.setStatus('mandatory')
appnAdjNnLastFrsnSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnAdjNnLastFrsnSent.setStatus('mandatory')
appnAdjNnLastFrsnReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 8, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnAdjNnLastFrsnReceived.setStatus('mandatory')
appnNn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9))
appnNnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 1), )
if mibBuilder.loadTexts: appnNnRowStatusTable.setStatus('mandatory')
appnNnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnIndex"))
if mibBuilder.loadTexts: appnNnRowStatusEntry.setStatus('mandatory')
appnNnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnRowStatus.setStatus('mandatory')
appnNnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnComponentName.setStatus('mandatory')
appnNnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnStorageType.setStatus('mandatory')
appnNnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: appnNnIndex.setStatus('mandatory')
appnNnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 10), )
if mibBuilder.loadTexts: appnNnOperTable.setStatus('mandatory')
appnNnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnIndex"))
if mibBuilder.loadTexts: appnNnOperEntry.setStatus('mandatory')
appnNnDaysLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnDaysLeft.setStatus('mandatory')
appnNnNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("toBeDetermined", 0), ("networkNode", 1), ("virtualRoutingNode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnNodeType.setStatus('mandatory')
appnNnResourceSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnResourceSequenceNumber.setStatus('mandatory')
appnNnRouteAdditionResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnRouteAdditionResistance.setStatus('mandatory')
appnNnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnStatus.setStatus('mandatory')
appnNnFunctionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 9, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnFunctionSupported.setStatus('mandatory')
appnLocTg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10))
appnLocTgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 1), )
if mibBuilder.loadTexts: appnLocTgRowStatusTable.setStatus('mandatory')
appnLocTgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLocTgDestFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLocTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: appnLocTgRowStatusEntry.setStatus('mandatory')
appnLocTgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgRowStatus.setStatus('mandatory')
appnLocTgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgComponentName.setStatus('mandatory')
appnLocTgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgStorageType.setStatus('mandatory')
appnLocTgDestFqcpNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(3, 17)))
if mibBuilder.loadTexts: appnLocTgDestFqcpNameIndex.setStatus('mandatory')
appnLocTgTransmissionGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: appnLocTgTransmissionGroupIndex.setStatus('mandatory')
appnLocTgOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 10), )
if mibBuilder.loadTexts: appnLocTgOperTable.setStatus('mandatory')
appnLocTgOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLocTgDestFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLocTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: appnLocTgOperEntry.setStatus('mandatory')
appnLocTgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgStatus.setStatus('mandatory')
appnLocTgResourceSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgResourceSequenceNumber.setStatus('mandatory')
appnLocTgLinkAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 11), )
if mibBuilder.loadTexts: appnLocTgLinkAddressTable.setStatus('mandatory')
appnLocTgLinkAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLocTgDestFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLocTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: appnLocTgLinkAddressEntry.setStatus('mandatory')
appnLocTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 11, 1, 1), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgDlcData.setStatus('mandatory')
appnLocTgTgCharTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 12), )
if mibBuilder.loadTexts: appnLocTgTgCharTable.setStatus('mandatory')
appnLocTgTgCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLocTgDestFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnLocTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: appnLocTgTgCharEntry.setStatus('mandatory')
appnLocTgEffectiveCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("n600Gbps", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgEffectiveCap.setStatus('mandatory')
appnLocTgConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgConnectCost.setStatus('mandatory')
appnLocTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgByteCost.setStatus('mandatory')
appnLocTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("unKnown", 0), ("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('nonSecure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgSecurity.setStatus('mandatory')
appnLocTgPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153))).clone('terrestrial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgPropagationDelay.setStatus('mandatory')
appnLocTgUserDefinedParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgUserDefinedParm1.setStatus('mandatory')
appnLocTgUserDefinedParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgUserDefinedParm2.setStatus('mandatory')
appnLocTgUserDefinedParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 10, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocTgUserDefinedParm3.setStatus('mandatory')
appnIsrSess = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11))
appnIsrSessRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 1), )
if mibBuilder.loadTexts: appnIsrSessRowStatusTable.setStatus('mandatory')
appnIsrSessRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessProcedureCorrelationIdIndex"))
if mibBuilder.loadTexts: appnIsrSessRowStatusEntry.setStatus('mandatory')
appnIsrSessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessRowStatus.setStatus('mandatory')
appnIsrSessComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessComponentName.setStatus('mandatory')
appnIsrSessStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessStorageType.setStatus('mandatory')
appnIsrSessFqcpNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(3, 17)))
if mibBuilder.loadTexts: appnIsrSessFqcpNameIndex.setStatus('mandatory')
appnIsrSessProcedureCorrelationIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 1, 1, 11), HexString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: appnIsrSessProcedureCorrelationIdIndex.setStatus('mandatory')
appnIsrSessOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 10), )
if mibBuilder.loadTexts: appnIsrSessOperTable.setStatus('mandatory')
appnIsrSessOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessProcedureCorrelationIdIndex"))
if mibBuilder.loadTexts: appnIsrSessOperEntry.setStatus('mandatory')
appnIsrSessTransmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessTransmissionPriority.setStatus('mandatory')
appnIsrSessCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessCosName.setStatus('mandatory')
appnIsrSessLimitedResource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessLimitedResource.setStatus('mandatory')
appnIsrSessPriStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100))
appnIsrSessPriStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 1), )
if mibBuilder.loadTexts: appnIsrSessPriStatsRowStatusTable.setStatus('mandatory')
appnIsrSessPriStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessProcedureCorrelationIdIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessPriStatsIndex"))
if mibBuilder.loadTexts: appnIsrSessPriStatsRowStatusEntry.setStatus('mandatory')
appnIsrSessPriStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsRowStatus.setStatus('mandatory')
appnIsrSessPriStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsComponentName.setStatus('mandatory')
appnIsrSessPriStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsStorageType.setStatus('mandatory')
appnIsrSessPriStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnIsrSessPriStatsIndex.setStatus('mandatory')
appnIsrSessPriStatsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10), )
if mibBuilder.loadTexts: appnIsrSessPriStatsStatsTable.setStatus('mandatory')
appnIsrSessPriStatsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessProcedureCorrelationIdIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessPriStatsIndex"))
if mibBuilder.loadTexts: appnIsrSessPriStatsStatsEntry.setStatus('mandatory')
appnIsrSessPriStatsRxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsRxRuSize.setStatus('mandatory')
appnIsrSessPriStatsMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsMaxTxBtuSize.setStatus('mandatory')
appnIsrSessPriStatsMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsMaxRxBtuSize.setStatus('mandatory')
appnIsrSessPriStatsMaxTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsMaxTxPacWin.setStatus('mandatory')
appnIsrSessPriStatsCurTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsCurTxPacWin.setStatus('mandatory')
appnIsrSessPriStatsMaxRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsMaxRxPacWin.setStatus('mandatory')
appnIsrSessPriStatsCurRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsCurRxPacWin.setStatus('mandatory')
appnIsrSessPriStatsTxDataframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsTxDataframes.setStatus('mandatory')
appnIsrSessPriStatsTxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsTxFmdFrames.setStatus('mandatory')
appnIsrSessPriStatsTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsTxDataBytes.setStatus('mandatory')
appnIsrSessPriStatsRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsRxDataFrames.setStatus('mandatory')
appnIsrSessPriStatsRxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsRxFmdFrames.setStatus('mandatory')
appnIsrSessPriStatsRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsRxDataBytes.setStatus('mandatory')
appnIsrSessPriStatsSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 14), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsSidh.setStatus('mandatory')
appnIsrSessPriStatsSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 15), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsSidl.setStatus('mandatory')
appnIsrSessPriStatsOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsOdai.setStatus('mandatory')
appnIsrSessPriStatsLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 100, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessPriStatsLsName.setStatus('mandatory')
appnIsrSessSecStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101))
appnIsrSessSecStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 1), )
if mibBuilder.loadTexts: appnIsrSessSecStatsRowStatusTable.setStatus('mandatory')
appnIsrSessSecStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessProcedureCorrelationIdIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessSecStatsIndex"))
if mibBuilder.loadTexts: appnIsrSessSecStatsRowStatusEntry.setStatus('mandatory')
appnIsrSessSecStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsRowStatus.setStatus('mandatory')
appnIsrSessSecStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsComponentName.setStatus('mandatory')
appnIsrSessSecStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsStorageType.setStatus('mandatory')
appnIsrSessSecStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnIsrSessSecStatsIndex.setStatus('mandatory')
appnIsrSessSecStatsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10), )
if mibBuilder.loadTexts: appnIsrSessSecStatsStatsTable.setStatus('mandatory')
appnIsrSessSecStatsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessProcedureCorrelationIdIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnIsrSessSecStatsIndex"))
if mibBuilder.loadTexts: appnIsrSessSecStatsStatsEntry.setStatus('mandatory')
appnIsrSessSecStatsRxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsRxRuSize.setStatus('mandatory')
appnIsrSessSecStatsMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsMaxTxBtuSize.setStatus('mandatory')
appnIsrSessSecStatsMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsMaxRxBtuSize.setStatus('mandatory')
appnIsrSessSecStatsMaxTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsMaxTxPacWin.setStatus('mandatory')
appnIsrSessSecStatsCurTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsCurTxPacWin.setStatus('mandatory')
appnIsrSessSecStatsMaxRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsMaxRxPacWin.setStatus('mandatory')
appnIsrSessSecStatsCurRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsCurRxPacWin.setStatus('mandatory')
appnIsrSessSecStatsTxDataframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsTxDataframes.setStatus('mandatory')
appnIsrSessSecStatsTxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsTxFmdFrames.setStatus('mandatory')
appnIsrSessSecStatsTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsTxDataBytes.setStatus('mandatory')
appnIsrSessSecStatsRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsRxDataFrames.setStatus('mandatory')
appnIsrSessSecStatsRxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsRxFmdFrames.setStatus('mandatory')
appnIsrSessSecStatsRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsRxDataBytes.setStatus('mandatory')
appnIsrSessSecStatsSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 14), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsSidh.setStatus('mandatory')
appnIsrSessSecStatsSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 15), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsSidl.setStatus('mandatory')
appnIsrSessSecStatsOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsOdai.setStatus('mandatory')
appnIsrSessSecStatsLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 11, 101, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnIsrSessSecStatsLsName.setStatus('mandatory')
appnNnTg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12))
appnNnTgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 1), )
if mibBuilder.loadTexts: appnNnTgRowStatusTable.setStatus('mandatory')
appnNnTgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgOwnerFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgDestFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: appnNnTgRowStatusEntry.setStatus('mandatory')
appnNnTgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgRowStatus.setStatus('mandatory')
appnNnTgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgComponentName.setStatus('mandatory')
appnNnTgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgStorageType.setStatus('mandatory')
appnNnTgOwnerFqcpNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(3, 17)))
if mibBuilder.loadTexts: appnNnTgOwnerFqcpNameIndex.setStatus('mandatory')
appnNnTgDestFqcpNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(3, 17)))
if mibBuilder.loadTexts: appnNnTgDestFqcpNameIndex.setStatus('mandatory')
appnNnTgTransmissionGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: appnNnTgTransmissionGroupIndex.setStatus('mandatory')
appnNnTgOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 10), )
if mibBuilder.loadTexts: appnNnTgOperTable.setStatus('mandatory')
appnNnTgOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgOwnerFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgDestFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: appnNnTgOperEntry.setStatus('mandatory')
appnNnTgFlowReductionSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgFlowReductionSequenceNumber.setStatus('mandatory')
appnNnTgDaysLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgDaysLeft.setStatus('mandatory')
appnNnTgResourceSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgResourceSequenceNumber.setStatus('mandatory')
appnNnTgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgStatus.setStatus('mandatory')
appnNnTgLinkAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 11), )
if mibBuilder.loadTexts: appnNnTgLinkAddressTable.setStatus('mandatory')
appnNnTgLinkAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgOwnerFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgDestFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: appnNnTgLinkAddressEntry.setStatus('mandatory')
appnNnTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 11, 1, 1), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgDlcData.setStatus('mandatory')
appnNnTgTgCharTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 12), )
if mibBuilder.loadTexts: appnNnTgTgCharTable.setStatus('mandatory')
appnNnTgTgCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgOwnerFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgDestFqcpNameIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnNnTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: appnNnTgTgCharEntry.setStatus('mandatory')
appnNnTgEffectiveCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("n600Gbps", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgEffectiveCap.setStatus('mandatory')
appnNnTgConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgConnectCost.setStatus('mandatory')
appnNnTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgByteCost.setStatus('mandatory')
appnNnTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("unKnown", 0), ("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('nonSecure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgSecurity.setStatus('mandatory')
appnNnTgPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153))).clone('terrestrial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgPropagationDelay.setStatus('mandatory')
appnNnTgUserDefinedParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgUserDefinedParm1.setStatus('mandatory')
appnNnTgUserDefinedParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgUserDefinedParm2.setStatus('mandatory')
appnNnTgUserDefinedParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 12, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnNnTgUserDefinedParm3.setStatus('mandatory')
appnRtp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13))
appnRtpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 1), )
if mibBuilder.loadTexts: appnRtpRowStatusTable.setStatus('mandatory')
appnRtpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnRtpIndex"))
if mibBuilder.loadTexts: appnRtpRowStatusEntry.setStatus('mandatory')
appnRtpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpRowStatus.setStatus('mandatory')
appnRtpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpComponentName.setStatus('mandatory')
appnRtpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpStorageType.setStatus('mandatory')
appnRtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: appnRtpIndex.setStatus('mandatory')
appnRtpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 10), )
if mibBuilder.loadTexts: appnRtpOperTable.setStatus('mandatory')
appnRtpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnRtpIndex"))
if mibBuilder.loadTexts: appnRtpOperEntry.setStatus('mandatory')
appnRtpLocalLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpLocalLsName.setStatus('mandatory')
appnRtpRemoteCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpRemoteCpName.setStatus('mandatory')
appnRtpCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpCosName.setStatus('mandatory')
appnRtpActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpActiveSessions.setStatus('mandatory')
appnRtpLocalTcid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 10, 1, 5), HexString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpLocalTcid.setStatus('mandatory')
appnRtpRemoteTcid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 10, 1, 6), HexString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpRemoteTcid.setStatus('mandatory')
appnRtpIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpIdleTimer.setStatus('mandatory')
appnRtpMaxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpMaxBtuSize.setStatus('mandatory')
appnRtpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11), )
if mibBuilder.loadTexts: appnRtpStatsTable.setStatus('mandatory')
appnRtpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnRtpIndex"))
if mibBuilder.loadTexts: appnRtpStatsEntry.setStatus('mandatory')
appnRtpTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpTxBytes.setStatus('mandatory')
appnRtpRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpRxBytes.setStatus('mandatory')
appnRtpBytesResent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpBytesResent.setStatus('mandatory')
appnRtpBytesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpBytesDiscarded.setStatus('mandatory')
appnRtpPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpPktTx.setStatus('mandatory')
appnRtpPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpPktRx.setStatus('mandatory')
appnRtpPktResent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpPktResent.setStatus('mandatory')
appnRtpPktDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpPktDiscard.setStatus('mandatory')
appnRtpLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpLostFrames.setStatus('mandatory')
appnRtpCurTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpCurTxRate.setStatus('mandatory')
appnRtpMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpMaxTxRate.setStatus('mandatory')
appnRtpMinTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpMinTxRate.setStatus('mandatory')
appnRtpCurRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpCurRxRate.setStatus('mandatory')
appnRtpMaxRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpMaxRxRate.setStatus('mandatory')
appnRtpMinRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpMinRxRate.setStatus('mandatory')
appnRtpBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpBurstSize.setStatus('mandatory')
appnRtpUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpUptime.setStatus('mandatory')
appnRtpSmoothRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpSmoothRoundTripTime.setStatus('mandatory')
appnRtpLastRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpLastRoundTripTime.setStatus('mandatory')
appnRtpShortReqTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 20), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpShortReqTimer.setStatus('mandatory')
appnRtpShortReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 21), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpShortReqTimeouts.setStatus('mandatory')
appnRtpIdleTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 22), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpIdleTimeouts.setStatus('mandatory')
appnRtpRxInvalidSnaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 23), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpRxInvalidSnaFrames.setStatus('mandatory')
appnRtpInSessionControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 24), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpInSessionControlFrames.setStatus('mandatory')
appnRtpOutSessionControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 13, 11, 1, 25), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnRtpOutSessionControlFrames.setStatus('mandatory')
appnDlu = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14))
appnDluRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 1), )
if mibBuilder.loadTexts: appnDluRowStatusTable.setStatus('mandatory')
appnDluRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluIndex"))
if mibBuilder.loadTexts: appnDluRowStatusEntry.setStatus('mandatory')
appnDluRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluRowStatus.setStatus('mandatory')
appnDluComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluComponentName.setStatus('mandatory')
appnDluStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluStorageType.setStatus('mandatory')
appnDluIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: appnDluIndex.setStatus('mandatory')
appnDluOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 10), )
if mibBuilder.loadTexts: appnDluOperTable.setStatus('mandatory')
appnDluOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluIndex"))
if mibBuilder.loadTexts: appnDluOperEntry.setStatus('mandatory')
appnDluSscpSessActive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpSessActive.setStatus('mandatory')
appnDluPluSessActive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluPluSessActive.setStatus('mandatory')
appnDluDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDlusName.setStatus('mandatory')
appnDluPluName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 10, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluPluName.setStatus('mandatory')
appnDluNauAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluNauAddress.setStatus('mandatory')
appnDluSscp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100))
appnDluSscpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 1), )
if mibBuilder.loadTexts: appnDluSscpRowStatusTable.setStatus('mandatory')
appnDluSscpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluSscpIndex"))
if mibBuilder.loadTexts: appnDluSscpRowStatusEntry.setStatus('mandatory')
appnDluSscpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpRowStatus.setStatus('mandatory')
appnDluSscpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpComponentName.setStatus('mandatory')
appnDluSscpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpStorageType.setStatus('mandatory')
appnDluSscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnDluSscpIndex.setStatus('mandatory')
appnDluSscpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10), )
if mibBuilder.loadTexts: appnDluSscpStatsTable.setStatus('mandatory')
appnDluSscpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluSscpIndex"))
if mibBuilder.loadTexts: appnDluSscpStatsEntry.setStatus('mandatory')
appnDluSscpRxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpRxRuSize.setStatus('mandatory')
appnDluSscpMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpMaxTxBtuSize.setStatus('mandatory')
appnDluSscpMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpMaxRxBtuSize.setStatus('mandatory')
appnDluSscpMaxTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpMaxTxPacWin.setStatus('mandatory')
appnDluSscpCurTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpCurTxPacWin.setStatus('mandatory')
appnDluSscpMaxRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpMaxRxPacWin.setStatus('mandatory')
appnDluSscpCurRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpCurRxPacWin.setStatus('mandatory')
appnDluSscpTxDataframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpTxDataframes.setStatus('mandatory')
appnDluSscpTxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpTxFmdFrames.setStatus('mandatory')
appnDluSscpTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpTxDataBytes.setStatus('mandatory')
appnDluSscpRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpRxDataFrames.setStatus('mandatory')
appnDluSscpRxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpRxFmdFrames.setStatus('mandatory')
appnDluSscpRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpRxDataBytes.setStatus('mandatory')
appnDluSscpSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 14), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpSidh.setStatus('mandatory')
appnDluSscpSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 15), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpSidl.setStatus('mandatory')
appnDluSscpOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpOdai.setStatus('mandatory')
appnDluSscpLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 100, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluSscpLsName.setStatus('mandatory')
appnDluUsStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101))
appnDluUsStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 1), )
if mibBuilder.loadTexts: appnDluUsStatRowStatusTable.setStatus('mandatory')
appnDluUsStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluUsStatIndex"))
if mibBuilder.loadTexts: appnDluUsStatRowStatusEntry.setStatus('mandatory')
appnDluUsStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatRowStatus.setStatus('mandatory')
appnDluUsStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatComponentName.setStatus('mandatory')
appnDluUsStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatStorageType.setStatus('mandatory')
appnDluUsStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnDluUsStatIndex.setStatus('mandatory')
appnDluUsStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10), )
if mibBuilder.loadTexts: appnDluUsStatStatsTable.setStatus('mandatory')
appnDluUsStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluUsStatIndex"))
if mibBuilder.loadTexts: appnDluUsStatStatsEntry.setStatus('mandatory')
appnDluUsStatRxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatRxRuSize.setStatus('mandatory')
appnDluUsStatMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatMaxTxBtuSize.setStatus('mandatory')
appnDluUsStatMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatMaxRxBtuSize.setStatus('mandatory')
appnDluUsStatMaxTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatMaxTxPacWin.setStatus('mandatory')
appnDluUsStatCurTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatCurTxPacWin.setStatus('mandatory')
appnDluUsStatMaxRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatMaxRxPacWin.setStatus('mandatory')
appnDluUsStatCurRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatCurRxPacWin.setStatus('mandatory')
appnDluUsStatTxDataframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatTxDataframes.setStatus('mandatory')
appnDluUsStatTxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatTxFmdFrames.setStatus('mandatory')
appnDluUsStatTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatTxDataBytes.setStatus('mandatory')
appnDluUsStatRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatRxDataFrames.setStatus('mandatory')
appnDluUsStatRxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatRxFmdFrames.setStatus('mandatory')
appnDluUsStatRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatRxDataBytes.setStatus('mandatory')
appnDluUsStatSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 14), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatSidh.setStatus('mandatory')
appnDluUsStatSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 15), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatSidl.setStatus('mandatory')
appnDluUsStatOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatOdai.setStatus('mandatory')
appnDluUsStatLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 101, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluUsStatLsName.setStatus('mandatory')
appnDluDsStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102))
appnDluDsStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 1), )
if mibBuilder.loadTexts: appnDluDsStatRowStatusTable.setStatus('mandatory')
appnDluDsStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluDsStatIndex"))
if mibBuilder.loadTexts: appnDluDsStatRowStatusEntry.setStatus('mandatory')
appnDluDsStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatRowStatus.setStatus('mandatory')
appnDluDsStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatComponentName.setStatus('mandatory')
appnDluDsStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatStorageType.setStatus('mandatory')
appnDluDsStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnDluDsStatIndex.setStatus('mandatory')
appnDluDsStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10), )
if mibBuilder.loadTexts: appnDluDsStatStatsTable.setStatus('mandatory')
appnDluDsStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDluDsStatIndex"))
if mibBuilder.loadTexts: appnDluDsStatStatsEntry.setStatus('mandatory')
appnDluDsStatRxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatRxRuSize.setStatus('mandatory')
appnDluDsStatMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatMaxTxBtuSize.setStatus('mandatory')
appnDluDsStatMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatMaxRxBtuSize.setStatus('mandatory')
appnDluDsStatMaxTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatMaxTxPacWin.setStatus('mandatory')
appnDluDsStatCurTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatCurTxPacWin.setStatus('mandatory')
appnDluDsStatMaxRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatMaxRxPacWin.setStatus('mandatory')
appnDluDsStatCurRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatCurRxPacWin.setStatus('mandatory')
appnDluDsStatTxDataframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatTxDataframes.setStatus('mandatory')
appnDluDsStatTxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatTxFmdFrames.setStatus('mandatory')
appnDluDsStatTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatTxDataBytes.setStatus('mandatory')
appnDluDsStatRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatRxDataFrames.setStatus('mandatory')
appnDluDsStatRxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatRxFmdFrames.setStatus('mandatory')
appnDluDsStatRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatRxDataBytes.setStatus('mandatory')
appnDluDsStatSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 14), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatSidh.setStatus('mandatory')
appnDluDsStatSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 15), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatSidl.setStatus('mandatory')
appnDluDsStatOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatOdai.setStatus('mandatory')
appnDluDsStatLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 14, 102, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDluDsStatLsName.setStatus('mandatory')
appnDlus = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15))
appnDlusRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 1), )
if mibBuilder.loadTexts: appnDlusRowStatusTable.setStatus('mandatory')
appnDlusRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlusIndex"))
if mibBuilder.loadTexts: appnDlusRowStatusEntry.setStatus('mandatory')
appnDlusRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusRowStatus.setStatus('mandatory')
appnDlusComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusComponentName.setStatus('mandatory')
appnDlusStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusStorageType.setStatus('mandatory')
appnDlusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: appnDlusIndex.setStatus('mandatory')
appnDlusOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 10), )
if mibBuilder.loadTexts: appnDlusOperTable.setStatus('mandatory')
appnDlusOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlusIndex"))
if mibBuilder.loadTexts: appnDlusOperEntry.setStatus('mandatory')
appnDlusPrimaryDlus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusPrimaryDlus.setStatus('mandatory')
appnDlusPipeState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("inactive", 0), ("pendingActive", 1), ("active", 2), ("pendingInactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusPipeState.setStatus('mandatory')
appnDlusActivePUs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusActivePUs.setStatus('mandatory')
appnDlusDlusStatTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11), )
if mibBuilder.loadTexts: appnDlusDlusStatTable.setStatus('mandatory')
appnDlusDlusStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDlusIndex"))
if mibBuilder.loadTexts: appnDlusDlusStatEntry.setStatus('mandatory')
appnDlusReqActPuTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusReqActPuTx.setStatus('mandatory')
appnDlusReqActPuRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusReqActPuRspRx.setStatus('mandatory')
appnDlusActPuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusActPuRx.setStatus('mandatory')
appnDlusActPuRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusActPuRspTx.setStatus('mandatory')
appnDlusReqDactPuTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusReqDactPuTx.setStatus('mandatory')
appnDlusReqDactPuRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusReqDactPuRspRx.setStatus('mandatory')
appnDlusDactPuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusDactPuRx.setStatus('mandatory')
appnDlusDactPuRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusDactPuRspTx.setStatus('mandatory')
appnDlusActLuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusActLuRx.setStatus('mandatory')
appnDlusActLuRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusActLuRspTx.setStatus('mandatory')
appnDlusDactLuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusDactLuRx.setStatus('mandatory')
appnDlusDactLuRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusDactLuRspTx.setStatus('mandatory')
appnDlusSscpPuMuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusSscpPuMuRx.setStatus('mandatory')
appnDlusSscpPuMuTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusSscpPuMuTx.setStatus('mandatory')
appnDlusSscpLuMuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 15), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusSscpLuMuRx.setStatus('mandatory')
appnDlusSscpLuMuTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 15, 11, 1, 16), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDlusSscpLuMuTx.setStatus('mandatory')
appnDLUR = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16))
appnDLURRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 1), )
if mibBuilder.loadTexts: appnDLURRowStatusTable.setStatus('mandatory')
appnDLURRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDLURIndex"))
if mibBuilder.loadTexts: appnDLURRowStatusEntry.setStatus('mandatory')
appnDLURRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDLURRowStatus.setStatus('mandatory')
appnDLURComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDLURComponentName.setStatus('mandatory')
appnDLURStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnDLURStorageType.setStatus('mandatory')
appnDLURIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnDLURIndex.setStatus('mandatory')
appnDLURDlurParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 2), )
if mibBuilder.loadTexts: appnDLURDlurParmsTable.setStatus('mandatory')
appnDLURDlurParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 2, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnDLURIndex"))
if mibBuilder.loadTexts: appnDLURDlurParmsEntry.setStatus('mandatory')
appnDLURPrimaryDefDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 2, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDLURPrimaryDefDlusName.setStatus('mandatory')
appnDLURSecondaryDefDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 2, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDLURSecondaryDefDlusName.setStatus('mandatory')
appnDLURDlusRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDLURDlusRetryTimeout.setStatus('mandatory')
appnDLURDlusRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 16, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnDLURDlusRetryLimit.setStatus('mandatory')
appnCos = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17))
appnCosRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 1), )
if mibBuilder.loadTexts: appnCosRowStatusTable.setStatus('mandatory')
appnCosRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCosIndex"))
if mibBuilder.loadTexts: appnCosRowStatusEntry.setStatus('mandatory')
appnCosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosRowStatus.setStatus('mandatory')
appnCosComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnCosComponentName.setStatus('mandatory')
appnCosStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnCosStorageType.setStatus('mandatory')
appnCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: appnCosIndex.setStatus('mandatory')
appnCosProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 104), )
if mibBuilder.loadTexts: appnCosProvTable.setStatus('mandatory')
appnCosProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 104, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCosIndex"))
if mibBuilder.loadTexts: appnCosProvEntry.setStatus('mandatory')
appnCosTransmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTransmissionPriority.setStatus('mandatory')
appnCosTg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10))
appnCosTgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 1), )
if mibBuilder.loadTexts: appnCosTgRowStatusTable.setStatus('mandatory')
appnCosTgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCosIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCosTgIndex"))
if mibBuilder.loadTexts: appnCosTgRowStatusEntry.setStatus('mandatory')
appnCosTgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgRowStatus.setStatus('mandatory')
appnCosTgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnCosTgComponentName.setStatus('mandatory')
appnCosTgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnCosTgStorageType.setStatus('mandatory')
appnCosTgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: appnCosTgIndex.setStatus('mandatory')
appnCosTgProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10), )
if mibBuilder.loadTexts: appnCosTgProvTable.setStatus('mandatory')
appnCosTgProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCosIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCosTgIndex"))
if mibBuilder.loadTexts: appnCosTgProvEntry.setStatus('mandatory')
appnCosTgMinEffectiveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("max", 255))).clone('min')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMinEffectiveCapacity.setStatus('mandatory')
appnCosTgMaxEffectiveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("max", 255))).clone('max')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMaxEffectiveCapacity.setStatus('mandatory')
appnCosTgMinConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMinConnectCost.setStatus('mandatory')
appnCosTgMaxConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMaxConnectCost.setStatus('mandatory')
appnCosTgMinByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMinByteCost.setStatus('mandatory')
appnCosTgMaxByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMaxByteCost.setStatus('mandatory')
appnCosTgMinSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('nonSecure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMinSecurity.setStatus('mandatory')
appnCosTgMaxSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('guardedRadiation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMaxSecurity.setStatus('mandatory')
appnCosTgMinPropDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153, 255))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153), ("maximum", 255))).clone('minimum')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMinPropDelay.setStatus('mandatory')
appnCosTgMaxPropDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153, 255))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153), ("maximum", 255))).clone('maximum')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMaxPropDelay.setStatus('mandatory')
appnCosTgMinModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMinModemClass.setStatus('mandatory')
appnCosTgMaxModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMaxModemClass.setStatus('mandatory')
appnCosTgMinUserDefParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMinUserDefParm1.setStatus('mandatory')
appnCosTgMaxUserDefParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMaxUserDefParm1.setStatus('mandatory')
appnCosTgMinUserDefParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMinUserDefParm2.setStatus('mandatory')
appnCosTgMaxUserDefParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMaxUserDefParm2.setStatus('mandatory')
appnCosTgMinUserDefParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMinUserDefParm3.setStatus('mandatory')
appnCosTgMaxUserDefParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 10, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosTgMaxUserDefParm3.setStatus('mandatory')
appnCosNode = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11))
appnCosNodeRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 1), )
if mibBuilder.loadTexts: appnCosNodeRowStatusTable.setStatus('mandatory')
appnCosNodeRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCosIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCosNodeIndex"))
if mibBuilder.loadTexts: appnCosNodeRowStatusEntry.setStatus('mandatory')
appnCosNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosNodeRowStatus.setStatus('mandatory')
appnCosNodeComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnCosNodeComponentName.setStatus('mandatory')
appnCosNodeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnCosNodeStorageType.setStatus('mandatory')
appnCosNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: appnCosNodeIndex.setStatus('mandatory')
appnCosNodeProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 10), )
if mibBuilder.loadTexts: appnCosNodeProvTable.setStatus('mandatory')
appnCosNodeProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCosIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCosNodeIndex"))
if mibBuilder.loadTexts: appnCosNodeProvEntry.setStatus('mandatory')
appnCosNodeMinRouteAddResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosNodeMinRouteAddResistance.setStatus('mandatory')
appnCosNodeMaxRouteAddResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosNodeMaxRouteAddResistance.setStatus('mandatory')
appnCosNodeMinStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uncongested", 0), ("congested", 1))).clone('uncongested')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosNodeMinStatus.setStatus('mandatory')
appnCosNodeMaxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 17, 11, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uncongested", 0), ("congested", 1))).clone('uncongested')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnCosNodeMaxStatus.setStatus('mandatory')
appnFrSvc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18))
appnFrSvcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 1), )
if mibBuilder.loadTexts: appnFrSvcRowStatusTable.setStatus('mandatory')
appnFrSvcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnFrSvcIndex"))
if mibBuilder.loadTexts: appnFrSvcRowStatusEntry.setStatus('mandatory')
appnFrSvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnFrSvcRowStatus.setStatus('mandatory')
appnFrSvcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnFrSvcComponentName.setStatus('mandatory')
appnFrSvcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnFrSvcStorageType.setStatus('mandatory')
appnFrSvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: appnFrSvcIndex.setStatus('mandatory')
appnFrSvcBanTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 10), )
if mibBuilder.loadTexts: appnFrSvcBanTable.setStatus('mandatory')
appnFrSvcBanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnFrSvcIndex"))
if mibBuilder.loadTexts: appnFrSvcBanEntry.setStatus('mandatory')
appnFrSvcBanLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 10, 1, 1), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="4fff00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnFrSvcBanLocalMac.setStatus('mandatory')
appnFrSvcBanLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 10, 1, 2), Hex().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), ValueRangeConstraint(16, 16), ValueRangeConstraint(20, 20), ValueRangeConstraint(24, 24), ValueRangeConstraint(28, 28), ValueRangeConstraint(32, 32), ValueRangeConstraint(36, 36), ValueRangeConstraint(40, 40), ValueRangeConstraint(44, 44), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(68, 68), ValueRangeConstraint(72, 72), ValueRangeConstraint(76, 76), ValueRangeConstraint(80, 80), ValueRangeConstraint(84, 84), ValueRangeConstraint(88, 88), ValueRangeConstraint(92, 92), ValueRangeConstraint(96, 96), ValueRangeConstraint(100, 100), ValueRangeConstraint(104, 104), ValueRangeConstraint(108, 108), ValueRangeConstraint(112, 112), ValueRangeConstraint(116, 116), ValueRangeConstraint(120, 120), ValueRangeConstraint(124, 124), ValueRangeConstraint(128, 128), ValueRangeConstraint(132, 132), ValueRangeConstraint(136, 136), ValueRangeConstraint(140, 140), ValueRangeConstraint(144, 144), ValueRangeConstraint(148, 148), ValueRangeConstraint(152, 152), ValueRangeConstraint(156, 156), ValueRangeConstraint(160, 160), ValueRangeConstraint(164, 164), ValueRangeConstraint(168, 168), ValueRangeConstraint(172, 172), ValueRangeConstraint(176, 176), ValueRangeConstraint(180, 180), ValueRangeConstraint(184, 184), ValueRangeConstraint(188, 188), ValueRangeConstraint(192, 192), ValueRangeConstraint(196, 196), ValueRangeConstraint(200, 200), ValueRangeConstraint(204, 204), ValueRangeConstraint(208, 208), ValueRangeConstraint(212, 212), ValueRangeConstraint(216, 216), ValueRangeConstraint(220, 220), ValueRangeConstraint(224, 224), ValueRangeConstraint(228, 228), ValueRangeConstraint(232, 232), ValueRangeConstraint(236, 236), ValueRangeConstraint(240, 240), ValueRangeConstraint(244, 244), ValueRangeConstraint(248, 248), ValueRangeConstraint(252, 252), )).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnFrSvcBanLocalSap.setStatus('mandatory')
appnFrSvcProvisionedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 11), )
if mibBuilder.loadTexts: appnFrSvcProvisionedTable.setStatus('mandatory')
appnFrSvcProvisionedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnFrSvcIndex"))
if mibBuilder.loadTexts: appnFrSvcProvisionedEntry.setStatus('mandatory')
appnFrSvcMaximumFrameRelaySvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3072)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnFrSvcMaximumFrameRelaySvcs.setStatus('mandatory')
appnFrSvcRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnFrSvcRateEnforcement.setStatus('mandatory')
appnFrSvcMaximumCir = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 52000000)).clone(2048000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnFrSvcMaximumCir.setStatus('mandatory')
appnFrSvcOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 12), )
if mibBuilder.loadTexts: appnFrSvcOperationalTable.setStatus('mandatory')
appnFrSvcOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnFrSvcIndex"))
if mibBuilder.loadTexts: appnFrSvcOperationalEntry.setStatus('mandatory')
appnFrSvcCurrentNumberOfSvcCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 18, 12, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3072))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnFrSvcCurrentNumberOfSvcCalls.setStatus('mandatory')
appnCn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 19))
appnCnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 19, 1), )
if mibBuilder.loadTexts: appnCnRowStatusTable.setStatus('mandatory')
appnCnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 19, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCnIndex"))
if mibBuilder.loadTexts: appnCnRowStatusEntry.setStatus('mandatory')
appnCnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 19, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnCnRowStatus.setStatus('mandatory')
appnCnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnCnComponentName.setStatus('mandatory')
appnCnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 19, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnCnStorageType.setStatus('mandatory')
appnCnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 19, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: appnCnIndex.setStatus('mandatory')
appnCnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 19, 5), )
if mibBuilder.loadTexts: appnCnOperTable.setStatus('mandatory')
appnCnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 19, 5, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AppnMIB", "appnIndex"), (0, "Nortel-Magellan-Passport-AppnMIB", "appnCnIndex"))
if mibBuilder.loadTexts: appnCnOperEntry.setStatus('mandatory')
appnCnNumberActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 110, 19, 5, 1, 219), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnCnNumberActivePorts.setStatus('mandatory')
appnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 29, 1))
appnGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 29, 1, 5))
appnGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 29, 1, 5, 2))
appnGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 29, 1, 5, 2, 2))
appnCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 29, 3))
appnCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 29, 3, 5))
appnCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 29, 3, 5, 2))
appnCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 29, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AppnMIB", appnDlciBnnLsDefTgNum=appnDlciBnnLsDefTgNum, appnDlciBanLsDefComponentName=appnDlciBanLsDefComponentName, appnLsUserDefinedParm1=appnLsUserDefinedParm1, appnDnaComponentName=appnDnaComponentName, appnMdsTxAlertQueueSize=appnMdsTxAlertQueueSize, appnRtpStatsTable=appnRtpStatsTable, appnIsrSessSecStatsRxRuSize=appnIsrSessSecStatsRxRuSize, appnLcnVcCallingLcn=appnLcnVcCallingLcn, appnLsLinkStationSubState=appnLsLinkStationSubState, appnDlciDcRowStatusEntry=appnDlciDcRowStatusEntry, appnDnaCugCugOptionsTable=appnDnaCugCugOptionsTable, appnDnaCugComponentName=appnDnaCugComponentName, appnDlciBnnLsDefDspuService=appnDlciBnnLsDefDspuService, appnLcnVcSubnetRxPktSize=appnLcnVcSubnetRxPktSize, appnDirEnt=appnDirEnt, appnDluSscpTxFmdFrames=appnDluSscpTxFmdFrames, appnLsStatsTable=appnLsStatsTable, appnFrSvcRateEnforcement=appnFrSvcRateEnforcement, appnDluDsStatStorageType=appnDluDsStatStorageType, appnDluUsStatCurTxPacWin=appnDluUsStatCurTxPacWin, appnDnaOutDefaultPathSensitivity=appnDnaOutDefaultPathSensitivity, appnIsrMaxRuSize=appnIsrMaxRuSize, appnDnaHgMHgAddrAddrTable=appnDnaHgMHgAddrAddrTable, appnDlciBanLsDefDlusName=appnDlciBanLsDefDlusName, appnRtpRowStatusTable=appnRtpRowStatusTable, appnIsrSessSecStatsMaxRxPacWin=appnIsrSessSecStatsMaxRxPacWin, appnIsrSessPriStatsComponentName=appnIsrSessPriStatsComponentName, appnDlciVcDmepEntry=appnDlciVcDmepEntry, appnDnaCugDnic=appnDnaCugDnic, appnDnaCugPrivileged=appnDnaCugPrivileged, appnDnaCugRowStatusEntry=appnDnaCugRowStatusEntry, appnAdjNnCpCpSessStatus=appnAdjNnCpCpSessStatus, appnLocTgOperEntry=appnLocTgOperEntry, appnLocTgUserDefinedParm2=appnLocTgUserDefinedParm2, appnDirEntOperEntry=appnDirEntOperEntry, appnDluDsStatRxRuSize=appnDluDsStatRxRuSize, appnDluUsStatCurRxPacWin=appnDluUsStatCurRxPacWin, appnIsrSessPriStatsRxFmdFrames=appnIsrSessPriStatsRxFmdFrames, appnLsOutMsgBytes=appnLsOutMsgBytes, appnIsrSessPriStatsStatsTable=appnIsrSessPriStatsStatsTable, appnDluUsStatSidl=appnDluUsStatSidl, appnPortIndex=appnPortIndex, appnCosTgMaxUserDefParm2=appnCosTgMaxUserDefParm2, appnLsIndex=appnLsIndex, appnRtpMinRxRate=appnRtpMinRxRate, appnLcnVcWindowClosuresToSubnet=appnLcnVcWindowClosuresToSubnet, appnRtpRowStatusEntry=appnRtpRowStatusEntry, appnDlciVcPriority=appnDlciVcPriority, appnRtpOperEntry=appnRtpOperEntry, appnDlciBnnLsDefBackupDlusName=appnDlciBnnLsDefBackupDlusName, appnDefinedLsBadXids=appnDefinedLsBadXids, appnPortDlcType=appnPortDlcType, appnPortConfigTable=appnPortConfigTable, appnDlciBanLocalSap=appnDlciBanLocalSap, appn=appn, appnDlciBnnLsDefCpCpSessionSupport=appnDlciBnnLsDefCpCpSessionSupport, appnIsrSessSecStatsStorageType=appnIsrSessSecStatsStorageType, appnPortDefinedLsGoodXids=appnPortDefinedLsGoodXids, appnDluUsStatRowStatus=appnDluUsStatRowStatus, appnLsOutXidFrames=appnLsOutXidFrames, appnDluSscpCurTxPacWin=appnDluSscpCurTxPacWin, appnDlciVcStorageType=appnDlciVcStorageType, appnCosTgRowStatusTable=appnCosTgRowStatusTable, appnDluDsStatRxDataBytes=appnDluDsStatRxDataBytes, appnMaximumSvcs=appnMaximumSvcs, appnNnTgRowStatusTable=appnNnTgRowStatusTable, appnDlusRowStatusEntry=appnDlusRowStatusEntry, appnDluDsStatLsName=appnDluDsStatLsName, appnDlciBnnLsDefDlusName=appnDlciBnnLsDefDlusName, appnNnTgDestFqcpNameIndex=appnNnTgDestFqcpNameIndex, appnBlockNumber=appnBlockNumber, appnLcnVcSubnetTxWindowSize=appnLcnVcSubnetTxWindowSize, appnPortSecurity=appnPortSecurity, appnLsEchoResponse=appnLsEchoResponse, appnDlciBnnLsDefAdjacentCpType=appnDlciBnnLsDefAdjacentCpType, appnNnTgDlcData=appnNnTgDlcData, appnDlciComponentName=appnDlciComponentName, appnDluDsStatIndex=appnDluDsStatIndex, appnLsConfigEntry=appnLsConfigEntry, appnDluPluName=appnDluPluName, appnLsAnrLabel=appnLsAnrLabel, appnDlciSpRowStatusEntry=appnDlciSpRowStatusEntry, appnNnTgTransmissionGroupIndex=appnNnTgTransmissionGroupIndex, appnDluDsStatTxDataframes=appnDluDsStatTxDataframes, appnCosTgMaxUserDefParm3=appnCosTgMaxUserDefParm3, appnLocTgEffectiveCap=appnLocTgEffectiveCap, appnPortConnectCost=appnPortConnectCost, appnCnOperTable=appnCnOperTable, appnDnaHgMIndex=appnDnaHgMIndex, appnIsrSessPriStatsRxRuSize=appnIsrSessPriStatsRxRuSize, appnDnaHgMRowStatusTable=appnDnaHgMRowStatusTable, appnLsOutMsgFrames=appnLsOutMsgFrames, appnNnTgPropagationDelay=appnNnTgPropagationDelay, appnDluDsStatOdai=appnDluDsStatOdai, appnNnTgLinkAddressEntry=appnNnTgLinkAddressEntry, appnNnRouteAdditionResistance=appnNnRouteAdditionResistance, appnCosNodeMinStatus=appnCosNodeMinStatus, appnDlciDcDiscardPriority=appnDlciDcDiscardPriority, appnLcnVcFastSelectCall=appnLcnVcFastSelectCall, appnFrSvcRowStatusTable=appnFrSvcRowStatusTable, appnDlciVcPktRetryTimeouts=appnDlciVcPktRetryTimeouts, appnNnNodeType=appnNnNodeType, appnDlciDcRemoteDlci=appnDlciDcRemoteDlci, appnUsageState=appnUsageState, appnIsrSessPriStatsStatsEntry=appnIsrSessPriStatsStatsEntry, appnCosNodeMaxStatus=appnCosNodeMaxStatus, appnAdjNnRowStatusEntry=appnAdjNnRowStatusEntry, appnDlciDcRemoteNpi=appnDlciDcRemoteNpi, appnDnaDefaultTransferPriority=appnDnaDefaultTransferPriority, appnCapabilities=appnCapabilities, appnDlciBanLsDefAdjacentNodeID=appnDlciBanLsDefAdjacentNodeID, appnIsrSessLimitedResource=appnIsrSessLimitedResource, appnDlusReqActPuTx=appnDlusReqActPuTx, appnDlciBnnLsDefAdjacentCpName=appnDlciBnnLsDefAdjacentCpName, appnDLURSecondaryDefDlusName=appnDLURSecondaryDefDlusName, appnIsrSessRowStatus=appnIsrSessRowStatus, appnLcnVcRowStatusTable=appnLcnVcRowStatusTable, appnFrSvcOperationalTable=appnFrSvcOperationalTable, appnLcnVcPeakOoSeqFrmForwarded=appnLcnVcPeakOoSeqFrmForwarded, appnRtpLocalTcid=appnRtpLocalTcid, appnFrSvcBanLocalMac=appnFrSvcBanLocalMac, appnNnTgComponentName=appnNnTgComponentName, appnMaximumLocates=appnMaximumLocates, appnDlciSpStorageType=appnDlciSpStorageType, appnPortTargetPacingCount=appnPortTargetPacingCount, appnDlciVcNotDataXferToSubnet=appnDlciVcNotDataXferToSubnet, appnLcnUsageState=appnLcnUsageState, appnNnRowStatus=appnNnRowStatus, appnNnTgResourceSequenceNumber=appnNnTgResourceSequenceNumber, appnRtpShortReqTimeouts=appnRtpShortReqTimeouts, appnCosTgMinEffectiveCapacity=appnCosTgMinEffectiveCapacity, appnLsConnectCost=appnLsConnectCost, appnLcnVcSubnetRecoveries=appnLcnVcSubnetRecoveries, appnLcnVcPreviousDiagnosticCode=appnLcnVcPreviousDiagnosticCode, appnDluSscpLsName=appnDluSscpLsName, appnIsrSessPriStatsRxDataFrames=appnIsrSessPriStatsRxDataFrames, appnDluDsStatStatsEntry=appnDluDsStatStatsEntry, appnLcnDcIndex=appnLcnDcIndex, appnNnOperEntry=appnNnOperEntry, appnCosTgMaxPropDelay=appnCosTgMaxPropDelay, appnLocTgRowStatusEntry=appnLocTgRowStatusEntry, appnRtpCosName=appnRtpCosName, appnDlciVcRowStatus=appnDlciVcRowStatus, appnDlciBanRowStatusEntry=appnDlciBanRowStatusEntry, appnDluDsStatComponentName=appnDluDsStatComponentName, appnCosRowStatus=appnCosRowStatus, appnDluDsStatStatsTable=appnDluDsStatStatsTable, appnDlusDactPuRx=appnDlusDactPuRx, appnCosNodeIndex=appnCosNodeIndex, appnDlciVcFastSelectCall=appnDlciVcFastSelectCall, appnIsrSessTransmissionPriority=appnIsrSessTransmissionPriority, appnDnaCugInterlockCode=appnDnaCugInterlockCode, appnDnaDefaultSendToNetworkThruputClass=appnDnaDefaultSendToNetworkThruputClass, appnPortState=appnPortState, appnLcnVcSubnetRxWindowSize=appnLcnVcSubnetRxWindowSize, appnDnaDefaultRecvFrmNetworkWindowSize=appnDnaDefaultRecvFrmNetworkWindowSize, appnDlciVcCalledLcn=appnDlciVcCalledLcn, appnControlPointCreateParmsEntry=appnControlPointCreateParmsEntry, appnDlciBanLsDefLsRole=appnDlciBanLsDefLsRole, appnPortDynLsBadXids=appnPortDynLsBadXids, appnIsrSessFqcpNameIndex=appnIsrSessFqcpNameIndex, appnDluDsStatSidh=appnDluDsStatSidh, appnDnaCugCugOptionsEntry=appnDnaCugCugOptionsEntry, appnDlciVcDmepTable=appnDlciVcDmepTable, appnLsDlcType=appnLsDlcType, appnDefinedLsGoodXids=appnDefinedLsGoodXids, appnRtpPktResent=appnRtpPktResent, appnCosNodeMinRouteAddResistance=appnCosNodeMinRouteAddResistance, appnDlciOperationalState=appnDlciOperationalState, appnNnTgDaysLeft=appnNnTgDaysLeft, appnDlciBanLsDef=appnDlciBanLsDef, appnDluSscpRxDataFrames=appnDluSscpRxDataFrames, appnDlciSpRowStatusTable=appnDlciSpRowStatusTable, appnDnaServiceExchange=appnDnaServiceExchange, appnLsStorageType=appnLsStorageType, appnLs=appnLs, appnDlciSpIndex=appnDlciSpIndex, appnNn=appnNn, appnLcnVcCallReferenceNumber=appnLcnVcCallReferenceNumber, appnNnResourceSequenceNumber=appnNnResourceSequenceNumber, appnDlciVcSegmentSize=appnDlciVcSegmentSize, appnDnaHgMComponentName=appnDnaHgMComponentName, appnAdjNn=appnAdjNn, appnLcnVcTransferPriorityFromNetwork=appnLcnVcTransferPriorityFromNetwork, appnIsrSessPriStatsSidh=appnIsrSessPriStatsSidh, appnDlciCnStorageType=appnDlciCnStorageType, appnDluUsStatTxDataBytes=appnDluUsStatTxDataBytes, appnPortMaxIfrmRxWindow=appnPortMaxIfrmRxWindow, appnDlciBanLsDefMacIndex=appnDlciBanLsDefMacIndex, appnRtpBytesDiscarded=appnRtpBytesDiscarded, appnLsRowStatus=appnLsRowStatus, appnCosTgProvTable=appnCosTgProvTable, appnPortDynLsGoodXids=appnPortDynLsGoodXids, appnDirEntRowStatusEntry=appnDirEntRowStatusEntry, appnLcnVcCalledLcn=appnLcnVcCalledLcn, appnDluSscpMaxRxPacWin=appnDluSscpMaxRxPacWin, appnDlciVcRcosToNetwork=appnDlciVcRcosToNetwork, appnRowStatus=appnRowStatus, appnDlciBnnLsDefMaxTxBtuSize=appnDlciBnnLsDefMaxTxBtuSize, appnDlciDcNfaRowStatus=appnDlciDcNfaRowStatus, appnCnRowStatusTable=appnCnRowStatusTable, appnDlciVcFrmLossTimeouts=appnDlciVcFrmLossTimeouts, appnCosIndex=appnCosIndex, appnCosNode=appnCosNode, appnRtpTxBytes=appnRtpTxBytes, appnDlciBnnLsDefComponentName=appnDlciBnnLsDefComponentName, appnLcnVcPriority=appnLcnVcPriority, appnDluUsStatRxRuSize=appnDluUsStatRxRuSize, appnDLURStorageType=appnDLURStorageType, appnDynamicLsBadXids=appnDynamicLsBadXids, appnFrSvcComponentName=appnFrSvcComponentName, appnOperationalTable=appnOperationalTable, appnCosTgMaxConnectCost=appnCosTgMaxConnectCost, appnRtpLostFrames=appnRtpLostFrames, appnAdjNnRowStatusTable=appnAdjNnRowStatusTable, appnIsrSessPriStatsSidl=appnIsrSessPriStatsSidl, appnDLURRowStatusEntry=appnDLURRowStatusEntry, appnIsrSessPriStatsRowStatus=appnIsrSessPriStatsRowStatus, appnHprSupport=appnHprSupport, appnLocTgDlcData=appnLocTgDlcData, appnNnTgTgCharTable=appnNnTgTgCharTable, appnDlusDactLuRx=appnDlusDactLuRx, appnLocTgPropagationDelay=appnLocTgPropagationDelay, appnCosProvEntry=appnCosProvEntry, appnDluUsStatMaxTxPacWin=appnDluUsStatMaxTxPacWin, appnDnaHgMHgAddrRowStatus=appnDnaHgMHgAddrRowStatus, appnDlciRowStatusEntry=appnDlciRowStatusEntry, appnLocTg=appnLocTg, appnPort=appnPort, appnLocTgByteCost=appnLocTgByteCost, appnDluUsStatIndex=appnDluUsStatIndex, appnLcnVcAccountingEnd=appnLcnVcAccountingEnd, appnIsrSessSecStatsTxDataBytes=appnIsrSessSecStatsTxDataBytes, appnDLURDlusRetryLimit=appnDLURDlusRetryLimit, appnDluRowStatusEntry=appnDluRowStatusEntry, appnDluUsStatRowStatusTable=appnDluUsStatRowStatusTable, appnDluComponentName=appnDluComponentName, appnDnaHgMHgAddrRowStatusTable=appnDnaHgMHgAddrRowStatusTable, appnDlciBanRowStatus=appnDlciBanRowStatus, appnPortPropagationDelay=appnPortPropagationDelay, appnNnTgEffectiveCap=appnNnTgEffectiveCap, appnCosTgMaxUserDefParm1=appnCosTgMaxUserDefParm1, appnPortComponentName=appnPortComponentName, appnDlciVcOoSeqPktCntExceeded=appnDlciVcOoSeqPktCntExceeded, appnDlciBanLsDefTgNum=appnDlciBanLsDefTgNum, appnIsrSessPriStatsMaxRxPacWin=appnIsrSessPriStatsMaxRxPacWin, appnDlciSp=appnDlciSp, appnNnTgRowStatusEntry=appnNnTgRowStatusEntry, appnCosComponentName=appnCosComponentName, appnDluDsStatMaxRxBtuSize=appnDluDsStatMaxRxBtuSize, appnDnaIncomingOptionsTable=appnDnaIncomingOptionsTable, appnCosNodeRowStatus=appnCosNodeRowStatus, appnDlciBanLocalMac=appnDlciBanLocalMac, appnDlurSupport=appnDlurSupport)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AppnMIB", appnLcnVcWrTriggers=appnLcnVcWrTriggers, appnDlusActPuRx=appnDlusActPuRx, appnDlciBnnLsDefProvTable=appnDlciBnnLsDefProvTable, appnDlciBanLsDefSapIndex=appnDlciBanLsDefSapIndex, appnIsrSessSecStats=appnIsrSessSecStats, appnRtpRemoteCpName=appnRtpRemoteCpName, appnRtpRxBytes=appnRtpRxBytes, appnDirEntLocation=appnDirEntLocation, appnDluSscpStorageType=appnDluSscpStorageType, appnIsrSessSecStatsTxDataframes=appnIsrSessSecStatsTxDataframes, appnDnaStorageType=appnDnaStorageType, appnRtpOutSessionControlFrames=appnRtpOutSessionControlFrames, appnGroupBE=appnGroupBE, appnIsrSessStorageType=appnIsrSessStorageType, appnRtpRemoteTcid=appnRtpRemoteTcid, appnLsInMsgFrames=appnLsInMsgFrames, appnDnaHgMIfEntry=appnDnaHgMIfEntry, appnDlciDcNfaIndex=appnDlciDcNfaIndex, appnMaximumTopologyNodes=appnMaximumTopologyNodes, appnStorageType=appnStorageType, appnCosTgMaxModemClass=appnCosTgMaxModemClass, appnDlciVcIntdTable=appnDlciVcIntdTable, appnPortOperEntry=appnPortOperEntry, appnCnOperEntry=appnCnOperEntry, appnDlciVcPeakOoSeqByteCount=appnDlciVcPeakOoSeqByteCount, appnDluUsStatOdai=appnDluUsStatOdai, appnNnComponentName=appnNnComponentName, appnRtpOperTable=appnRtpOperTable, appnIsrSessPriStatsStorageType=appnIsrSessPriStatsStorageType, appnDirEntLuOwnerName=appnDirEntLuOwnerName, appnDlciBanLsDefProvTable=appnDlciBanLsDefProvTable, appnDlciBanLsDefAdjacentCpType=appnDlciBanLsDefAdjacentCpType, appnPortSimRim=appnPortSimRim, appnPortOperTable=appnPortOperTable, appnCosNodeRowStatusEntry=appnCosNodeRowStatusEntry, appnLcnVcStartTime=appnLcnVcStartTime, appnDlusDlusStatTable=appnDlusDlusStatTable, appnDluNauAddress=appnDluNauAddress, appnRtpIdleTimeouts=appnRtpIdleTimeouts, appnStatus=appnStatus, appnDirEntIndex=appnDirEntIndex, appnLsPropagationDelay=appnLsPropagationDelay, appnCosTgIndex=appnCosTgIndex, appnDlciBanLsDefBackupDlusName=appnDlciBanLsDefBackupDlusName, appnAdjNnOutOfSeqTdus=appnAdjNnOutOfSeqTdus, appnCosTgMaxSecurity=appnCosTgMaxSecurity, appnDlusActLuRspTx=appnDlusActLuRspTx, appnTreeCacheUseLimit=appnTreeCacheUseLimit, appnLsEffectiveCap=appnLsEffectiveCap, appnAdminState=appnAdminState, appnLcnDcTransferPriority=appnLcnDcTransferPriority, appnProcessParmsTable=appnProcessParmsTable, appnLsRowStatusEntry=appnLsRowStatusEntry, appnLcnVcRowStatusEntry=appnLcnVcRowStatusEntry, appnDlciBnnLsDefRowStatus=appnDlciBnnLsDefRowStatus, appnDlciBan=appnDlciBan, appnDnaOutAccess=appnDnaOutAccess, appnDlciCommittedBurstSize=appnDlciCommittedBurstSize, appnFrSvcBanEntry=appnFrSvcBanEntry, appnDnaIndex=appnDnaIndex, appnDlciSpParmsEntry=appnDlciSpParmsEntry, appnCosTgMaxByteCost=appnCosTgMaxByteCost, appnLcnVcState=appnLcnVcState, appnDluDsStatMaxTxBtuSize=appnDluDsStatMaxTxBtuSize, appnDlusSscpPuMuTx=appnDlusSscpPuMuTx, appnDlciBanLsDefProvEntry=appnDlciBanLsDefProvEntry, appnDluUsStatRxDataBytes=appnDluUsStatRxDataBytes, appnAdjNnLastFrsnSent=appnAdjNnLastFrsnSent, appnLsOperTable=appnLsOperTable, appnDnaIncomingOptionsEntry=appnDnaIncomingOptionsEntry, appnDlciBnnLsDefAdjacentNodeID=appnDlciBnnLsDefAdjacentNodeID, appnLcnDcRowStatus=appnLcnDcRowStatus, appnDlciVcCadEntry=appnDlciVcCadEntry, appnDlciSpOpTable=appnDlciSpOpTable, appnLcnVcAckStackingTimeouts=appnLcnVcAckStackingTimeouts, appnPortUserDefinedParm1=appnPortUserDefinedParm1, appnDlu=appnDlu, appnDluSscpIndex=appnDluSscpIndex, appnDirEntOperTable=appnDirEntOperTable, appnCosTgMinModemClass=appnCosTgMinModemClass, appnLcnVcCallingDna=appnLcnVcCallingDna, appnCosNodeComponentName=appnCosNodeComponentName, appnMaximumTopologyTgs=appnMaximumTopologyTgs, appnLsTgNum=appnLsTgNum, appnRtpBytesResent=appnRtpBytesResent, appnLcnVcPeakOoSeqQueueSize=appnLcnVcPeakOoSeqQueueSize, appnDnaOutDefaultPriority=appnDnaOutDefaultPriority, appnDlciVcDataPath=appnDlciVcDataPath, appnLsRowStatusTable=appnLsRowStatusTable, appnLocTgTgCharEntry=appnLocTgTgCharEntry, appnRtpRxInvalidSnaFrames=appnRtpRxInvalidSnaFrames, appnRtpUptime=appnRtpUptime, appnCosNodeRowStatusTable=appnCosNodeRowStatusTable, appnLsByteCost=appnLsByteCost, appnDluSscpSessActive=appnDluSscpSessActive, appnIsrSessPriStatsMaxRxBtuSize=appnIsrSessPriStatsMaxRxBtuSize, appnDlciDcStorageType=appnDlciDcStorageType, appnRtpComponentName=appnRtpComponentName, appnRtpIdleTimer=appnRtpIdleTimer, appnDnaTransferPriorityOverRide=appnDnaTransferPriorityOverRide, appnLcnDcRemoteDna=appnLcnDcRemoteDna, appnLcnVcCadEntry=appnLcnVcCadEntry, appnDluSscpSidl=appnDluSscpSidl, appnDlciVcRowStatusTable=appnDlciVcRowStatusTable, appnDlciBnnLsDefHprSupported=appnDlciBnnLsDefHprSupported, appnLcnDcStorageType=appnLcnDcStorageType, appnFrSvcMaximumCir=appnFrSvcMaximumCir, appnNnTgOperEntry=appnNnTgOperEntry, appnLsGoodXids=appnLsGoodXids, appnLocTgOperTable=appnLocTgOperTable, appnCosNodeMaxRouteAddResistance=appnCosNodeMaxRouteAddResistance, appnDlciVcPathReliability=appnDlciVcPathReliability, appnFrSvcOperationalEntry=appnFrSvcOperationalEntry, appnPortRowStatus=appnPortRowStatus, appnLsComponentName=appnLsComponentName, appnHeapSpaceCurrent=appnHeapSpaceCurrent, appnIsrUpperCongestionThreshold=appnIsrUpperCongestionThreshold, appnNnTgStorageType=appnNnTgStorageType, appnDlciBnnLsDefRowStatusEntry=appnDlciBnnLsDefRowStatusEntry, appnDluOperEntry=appnDluOperEntry, appnDluDsStatRowStatusEntry=appnDluDsStatRowStatusEntry, appnLcnVcSegmentsRx=appnLcnVcSegmentsRx, appnLcnVc=appnLcnVc, appnDlciDc=appnDlciDc, appnDlciDcRowStatus=appnDlciDcRowStatus, appnDlciUsageState=appnDlciUsageState, appnIsrSessRowStatusEntry=appnIsrSessRowStatusEntry, appnNnTgSecurity=appnNnTgSecurity, appnDlciVcIndex=appnDlciVcIndex, appnRowStatusTable=appnRowStatusTable, appnDlusSscpLuMuRx=appnDlusSscpLuMuRx, appnIsrSessSecStatsCurTxPacWin=appnIsrSessSecStatsCurTxPacWin, appnNnTgLinkAddressTable=appnNnTgLinkAddressTable, appnDnaHgMOpTable=appnDnaHgMOpTable, appnIsrSessSecStatsComponentName=appnIsrSessSecStatsComponentName, appnIsrSessPriStatsTxFmdFrames=appnIsrSessPriStatsTxFmdFrames, appnLcnVcStorageType=appnLcnVcStorageType, appnIsrSessPriStatsRowStatusTable=appnIsrSessPriStatsRowStatusTable, appnDluUsStatStorageType=appnDluUsStatStorageType, appnDlciBanLsDefMaxTxBtuSize=appnDlciBanLsDefMaxTxBtuSize, appnDLURRowStatus=appnDLURRowStatus, appnRtpCurTxRate=appnRtpCurTxRate, appnLcnVcPreviousState=appnLcnVcPreviousState, appnLocTgUserDefinedParm1=appnLocTgUserDefinedParm1, appnCnRowStatusEntry=appnCnRowStatusEntry, appnCnComponentName=appnCnComponentName, appnGroupBE01A=appnGroupBE01A, appnDlusActivePUs=appnDlusActivePUs, appnNnStorageType=appnNnStorageType, appnLocTgLinkAddressEntry=appnLocTgLinkAddressEntry, appnDluDsStatCurRxPacWin=appnDluDsStatCurRxPacWin, appnDlciExcessBurstSize=appnDlciExcessBurstSize, appnRtpInSessionControlFrames=appnRtpInSessionControlFrames, appnDlciVcRowStatusEntry=appnDlciVcRowStatusEntry, appnNnDaysLeft=appnNnDaysLeft, appnDluUsStat=appnDluUsStat, appnDnaCugPreferential=appnDnaCugPreferential, appnLcnDc=appnLcnDc, appnRtpShortReqTimer=appnRtpShortReqTimer, appnDnaDefaultSendToNetworkWindowSize=appnDnaDefaultSendToNetworkWindowSize, appnLcnVcSegmentSize=appnLcnVcSegmentSize, appnPortEffectiveCap=appnPortEffectiveCap, appnLsPortName=appnLsPortName, appnDluSscpStatsTable=appnDluSscpStatsTable, appnDlusSscpPuMuRx=appnDlusSscpPuMuRx, appnActiveSvcs=appnActiveSvcs, appnControlPointCreateParmsTable=appnControlPointCreateParmsTable, appnLsOperEntry=appnLsOperEntry, appnNnTgUserDefinedParm3=appnNnTgUserDefinedParm3, appnRtpStatsEntry=appnRtpStatsEntry, appnLsMaxDelay=appnLsMaxDelay, appnDlciRowStatus=appnDlciRowStatus, appnDlciSpRateEnforcement=appnDlciSpRateEnforcement, appnCosTgRowStatusEntry=appnCosTgRowStatusEntry, appnDlciCommittedInformationRate=appnDlciCommittedInformationRate, appnNnTgStatus=appnNnTgStatus, appnDlciVcIntdEntry=appnDlciVcIntdEntry, appnAdjNnComponentName=appnAdjNnComponentName, appnDluPluSessActive=appnDluPluSessActive, appnDluDsStatCurTxPacWin=appnDluDsStatCurTxPacWin, appnIsrSessPriStatsCurTxPacWin=appnIsrSessPriStatsCurTxPacWin, appnDnaHgMIfTable=appnDnaHgMIfTable, appnDlciBanIndex=appnDlciBanIndex, appnPortTotLinkActLim=appnPortTotLinkActLim, appnDlciVcSendSequenceNumber=appnDlciVcSendSequenceNumber, appnLcnDcOptionsEntry=appnLcnDcOptionsEntry, appnRtpLastRoundTripTime=appnRtpLastRoundTripTime, appnLcnVcType=appnLcnVcType, appnDluSscpRxRuSize=appnDluSscpRxRuSize, appnDluSscpCurRxPacWin=appnDluSscpCurRxPacWin, appnDlusReqDactPuRspRx=appnDlusReqDactPuRspRx, appnCosTgStorageType=appnCosTgStorageType, appnIsrSessPriStatsLsName=appnIsrSessPriStatsLsName, appnDnaCugIndex=appnDnaCugIndex, appnFlowReductionSequenceNumber=appnFlowReductionSequenceNumber, appnLsDlcName=appnLsDlcName, appnDluSscpTxDataBytes=appnDluSscpTxDataBytes, appnDluUsStatTxDataframes=appnDluUsStatTxDataframes, appnLsDynamicOrDefined=appnLsDynamicOrDefined, appnDluRowStatus=appnDluRowStatus, appnDluSscpSidh=appnDluSscpSidh, appnLocTgConnectCost=appnLocTgConnectCost, appnRtpPktRx=appnRtpPktRx, appnDlusDlusStatEntry=appnDlusDlusStatEntry, appnCosTgMaxEffectiveCapacity=appnCosTgMaxEffectiveCapacity, appnDlciVcCallingDna=appnDlciVcCallingDna, appnLcn=appnLcn, appnLsUserDefinedParm2=appnLsUserDefinedParm2, appnDlciBanProvTable=appnDlciBanProvTable, appnNnOperTable=appnNnOperTable, appnDlciBanLsDefRowStatusTable=appnDlciBanLsDefRowStatusTable, appnDlciVcAccountingEnd=appnDlciVcAccountingEnd, appnDlciVcElapsedTimeTillNow=appnDlciVcElapsedTimeTillNow, appnDluSscpRxDataBytes=appnDluSscpRxDataBytes, appnLsHprSupport=appnLsHprSupport, appnLocateTimeout=appnLocateTimeout, appnDlciVcFrdEntry=appnDlciVcFrdEntry, appnLocTgStorageType=appnLocTgStorageType, appnLsOutXidBytes=appnLsOutXidBytes, appnCosProvTable=appnCosProvTable, appnDluSscpStatsEntry=appnDluSscpStatsEntry, appnDlciBanLsDefCpCpSessionSupport=appnDlciBanLsDefCpCpSessionSupport, appnDluUsStatSidh=appnDluUsStatSidh, appnActiveLinkStations=appnActiveLinkStations, appnIsrSessPriStatsTxDataframes=appnIsrSessPriStatsTxDataframes, appnDnaHgMStorageType=appnDnaHgMStorageType, appnDnaHgMHgAddrStorageType=appnDnaHgMHgAddrStorageType, appnIsrSess=appnIsrSess, appnLsName=appnLsName, appnDluUsStatTxFmdFrames=appnDluUsStatTxFmdFrames, appnIdNumber=appnIdNumber, appnDlciBanLsDefAdjacentCpName=appnDlciBanLsDefAdjacentCpName, appnLsCurrentDelay=appnLsCurrentDelay, appnRtpMaxBtuSize=appnRtpMaxBtuSize, appnDlciMeasurementInterval=appnDlciMeasurementInterval, appnAdjNnRowStatus=appnAdjNnRowStatus, appnNnRowStatusEntry=appnNnRowStatusEntry, appnDluUsStatStatsEntry=appnDluUsStatStatsEntry, appnDluDsStatRxFmdFrames=appnDluDsStatRxFmdFrames, appnNnTgConnectCost=appnNnTgConnectCost, appnDluUsStatMaxRxPacWin=appnDluUsStatMaxRxPacWin, appnDnaRowStatusTable=appnDnaRowStatusTable, appnIsrSessPriStatsMaxTxPacWin=appnIsrSessPriStatsMaxTxPacWin, appnDluUsStatRxFmdFrames=appnDluUsStatRxFmdFrames, appnIsrSessSecStatsSidl=appnIsrSessSecStatsSidl, appnDlusSscpLuMuTx=appnDlusSscpLuMuTx, appnResourceSequenceNumber=appnResourceSequenceNumber, appnMaximumDirectorySize=appnMaximumDirectorySize, appnDnaCallOptionsTable=appnDnaCallOptionsTable, appnDnaOutgoingOptionsTable=appnDnaOutgoingOptionsTable, appnPortActXidExchLim=appnPortActXidExchLim, appnPortUserDefinedParm2=appnPortUserDefinedParm2, appnDluSscpMaxTxPacWin=appnDluSscpMaxTxPacWin, appnDlciAdminState=appnDlciAdminState)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AppnMIB", appnDluDsStatSidl=appnDluDsStatSidl, appnDlusStorageType=appnDlusStorageType, appnMemCriticalThreshold=appnMemCriticalThreshold, appnDlusOperTable=appnDlusOperTable, appnDlciVcPeakOoSeqFrmForwarded=appnDlciVcPeakOoSeqFrmForwarded, appnLcnVcLocalRxPktSize=appnLcnVcLocalRxPktSize, appnFqCpName=appnFqCpName, appnDluDlusName=appnDluDlusName, appnLcnVcCalledDna=appnLcnVcCalledDna, appnDirEntRowStatus=appnDirEntRowStatus, appnDnaCugType=appnDnaCugType, appnNnFunctionSupported=appnNnFunctionSupported, appnRtp=appnRtp, appnIsrSessPriStatsTxDataBytes=appnIsrSessPriStatsTxDataBytes, appnDlciVcDiagnosticCode=appnDlciVcDiagnosticCode, appnDluSscpMaxTxBtuSize=appnDluSscpMaxTxBtuSize, appnLcnStateEntry=appnLcnStateEntry, appnDlciVcCannotForwardToSubnet=appnDlciVcCannotForwardToSubnet, appnDluSscpRowStatus=appnDluSscpRowStatus, appnDlciCnRowStatus=appnDlciCnRowStatus, appnDLURDlusRetryTimeout=appnDLURDlusRetryTimeout, appnDlciBnnLsDefRowStatusTable=appnDlciBnnLsDefRowStatusTable, appnDlciSpComponentName=appnDlciSpComponentName, appnLcnVcMaxSubnetPktSize=appnLcnVcMaxSubnetPktSize, appnLcnVcStatsEntry=appnLcnVcStatsEntry, appnDlciIndex=appnDlciIndex, appnDlciVcPreviousState=appnDlciVcPreviousState, appnLogicalProcessor=appnLogicalProcessor, appnStateEntry=appnStateEntry, appnDlciStateEntry=appnDlciStateEntry, appnLsSecurity=appnLsSecurity, appnIsrRxPacingWindow=appnIsrRxPacingWindow, appnDluStorageType=appnDluStorageType, appnLsMigration=appnLsMigration, appnDluUsStatMaxRxBtuSize=appnDluUsStatMaxRxBtuSize, appnCnRowStatus=appnCnRowStatus, appnDlciVc=appnDlciVc, appnLcnVcComponentName=appnLcnVcComponentName, appnLcnOperationalState=appnLcnOperationalState, appnComponentName=appnComponentName, appnLcnVcSubnetTxPktSize=appnLcnVcSubnetTxPktSize, appnDlciBanLsDefDspuService=appnDlciBanLsDefDspuService, appnNnTgFlowReductionSequenceNumber=appnNnTgFlowReductionSequenceNumber, appnDlciVcCombErrorsFromSubnet=appnDlciVcCombErrorsFromSubnet, appnCosTransmissionPriority=appnCosTransmissionPriority, appnGroup=appnGroup, appnPortStorageType=appnPortStorageType, appnDirEntRowStatusTable=appnDirEntRowStatusTable, appnAdjNnLastFrsnReceived=appnAdjNnLastFrsnReceived, appnCosTgMinUserDefParm1=appnCosTgMinUserDefParm1, appnLsActualCpName=appnLsActualCpName, appnIsrSessComponentName=appnIsrSessComponentName, appnNnTgUserDefinedParm2=appnNnTgUserDefinedParm2, appnDlciVcNotDataXferFromSubnet=appnDlciVcNotDataXferFromSubnet, appnLcnVcPeakStackedAcksRx=appnLcnVcPeakStackedAcksRx, appnCosRowStatusTable=appnCosRowStatusTable, appnDlciBanRowStatusTable=appnDlciBanRowStatusTable, appnMaximumLinkStations=appnMaximumLinkStations, appnDlusOperEntry=appnDlusOperEntry, appnDlusRowStatus=appnDlusRowStatus, appnDluUsStatRxDataFrames=appnDluUsStatRxDataFrames, appnDnaOutPathSensitivityOverRide=appnDnaOutPathSensitivityOverRide, appnDlciBanLsDefHprSupported=appnDlciBanLsDefHprSupported, appnIsrSessPriStats=appnIsrSessPriStats, appnLcnVcRowStatus=appnLcnVcRowStatus, appnDluSscp=appnDluSscp, appnIsrSessProcedureCorrelationIdIndex=appnIsrSessProcedureCorrelationIdIndex, appnLcnDcRemoteNpi=appnLcnDcRemoteNpi, appnDnaHgMHgAddrNumberingPlanIndicator=appnDnaHgMHgAddrNumberingPlanIndicator, appnDlciBanStorageType=appnDlciBanStorageType, appnPortInbLinkActLim=appnPortInbLinkActLim, appnPortConfigEntry=appnPortConfigEntry, appnIsrSessPriStatsMaxTxBtuSize=appnIsrSessPriStatsMaxTxBtuSize, appnLcnDcRowStatusTable=appnLcnDcRowStatusTable, appnRtpPktDiscard=appnRtpPktDiscard, appnFrSvc=appnFrSvc, appnPortRowStatusTable=appnPortRowStatusTable, appnPortDefinedLsBadXids=appnPortDefinedLsBadXids, appnNnTgByteCost=appnNnTgByteCost, appnDluUsStatRowStatusEntry=appnDluUsStatRowStatusEntry, appnDlciRateEnforcement=appnDlciRateEnforcement, appnLcnVcPathReliability=appnLcnVcPathReliability, appnPortByteCost=appnPortByteCost, appnIsrSessSecStatsStatsTable=appnIsrSessSecStatsStatsTable, appnDlciVcEmissionPriorityToNetwork=appnDlciVcEmissionPriorityToNetwork, appnDlciStorageType=appnDlciStorageType, appnLocTgComponentName=appnLocTgComponentName, appnIsrSessSecStatsRxDataBytes=appnIsrSessSecStatsRxDataBytes, appnDLUR=appnDLUR, appnLsMinDelay=appnLsMinDelay, appnOperationalState=appnOperationalState, appnDlciBanComponentName=appnDlciBanComponentName, appnDluDsStatRowStatusTable=appnDluDsStatRowStatusTable, appnDlciVcPeakRetryQueueSize=appnDlciVcPeakRetryQueueSize, appnDLURDlurParmsEntry=appnDLURDlurParmsEntry, appnProcessParmsEntry=appnProcessParmsEntry, appnLsUserDefinedParm3=appnLsUserDefinedParm3, appnPortLsXmitRxCap=appnPortLsXmitRxCap, appnDlciBanLsDefRowStatusEntry=appnDlciBanLsDefRowStatusEntry, appnRtpCurRxRate=appnRtpCurRxRate, appnDluSscpComponentName=appnDluSscpComponentName, appnDlusRowStatusTable=appnDlusRowStatusTable, appnNnStatus=appnNnStatus, appnRowStatusEntry=appnRowStatusEntry, appnDlciVcMaxSubnetPktSize=appnDlciVcMaxSubnetPktSize, appnDnaHgMAvailableChannels=appnDnaHgMAvailableChannels, appnDlciDcTransferPriority=appnDlciDcTransferPriority, appnDlciDcNfaValue=appnDlciDcNfaValue, appnDlciSpCommittedBurstSize=appnDlciSpCommittedBurstSize, appnCnIndex=appnCnIndex, appnDlciBnnLsDefLsRole=appnDlciBnnLsDefLsRole, appnNnTgUserDefinedParm1=appnNnTgUserDefinedParm1, appnDlciSpParmsTable=appnDlciSpParmsTable, appnCn=appnCn, appnLcnStateTable=appnLcnStateTable, appnLsMaxTxBtuSize=appnLsMaxTxBtuSize, appnLsTgCharEntry=appnLsTgCharEntry, appnLcnVcWindowClosuresFromSubnet=appnLcnVcWindowClosuresFromSubnet, appnDluDsStatTxDataBytes=appnDluDsStatTxDataBytes, appnDnaCugRowStatusTable=appnDnaCugRowStatusTable, appnDlciDcOptionsTable=appnDlciDcOptionsTable, appnLsInXidFrames=appnLsInXidFrames, appnDlciBnnLsDefIndex=appnDlciBnnLsDefIndex, appnFrSvcIndex=appnFrSvcIndex, appnLocTgLinkAddressTable=appnLocTgLinkAddressTable, appnIsrSessPriStatsCurRxPacWin=appnIsrSessPriStatsCurRxPacWin, appnFrSvcCurrentNumberOfSvcCalls=appnFrSvcCurrentNumberOfSvcCalls, appnLsInMsgBytes=appnLsInMsgBytes, appnDnaOutDefaultPathReliability=appnDnaOutDefaultPathReliability, appnDlciExcessInformationRate=appnDlciExcessInformationRate, appnPortUserDefinedParm3=appnPortUserDefinedParm3, appnLcnVcCadTable=appnLcnVcCadTable, appnFrSvcBanLocalSap=appnFrSvcBanLocalSap, appnDnaDataNetworkAddress=appnDnaDataNetworkAddress, appnIsrSessSecStatsCurRxPacWin=appnIsrSessSecStatsCurRxPacWin, appnDnaHgMHgAddrRowStatusEntry=appnDnaHgMHgAddrRowStatusEntry, appnLcnVcPeakRetryQueueSize=appnLcnVcPeakRetryQueueSize, appnDlciDcType=appnDlciDcType, appnLsConfigTable=appnLsConfigTable, appnDlusIndex=appnDlusIndex, appnDlusPrimaryDlus=appnDlusPrimaryDlus, appnDluDsStatMaxTxPacWin=appnDluDsStatMaxTxPacWin, appnPortTgCharTable=appnPortTgCharTable, appnLsStatsEntry=appnLsStatsEntry, appnLocTgTransmissionGroupIndex=appnLocTgTransmissionGroupIndex, appnRtpPktTx=appnRtpPktTx, appnDlciSpRowStatus=appnDlciSpRowStatus, appnDnaNumberingPlanIndicator=appnDnaNumberingPlanIndicator, appnNnTgOperTable=appnNnTgOperTable, appnDlciSpMeasurementInterval=appnDlciSpMeasurementInterval, appnDluSscpMaxRxBtuSize=appnDluSscpMaxRxBtuSize, appnDnaHgMHgAddrComponentName=appnDnaHgMHgAddrComponentName, appnLcnRowStatusTable=appnLcnRowStatusTable, appnLcnVcFrmRetryTimeouts=appnLcnVcFrmRetryTimeouts, appnDlciVcCallingLcn=appnDlciVcCallingLcn, appnDluIndex=appnDluIndex, appnDluDsStatRxDataFrames=appnDluDsStatRxDataFrames, appnLcnVcStatsTable=appnLcnVcStatsTable, appnDnaHgMAvailabilityUpdateThreshold=appnDnaHgMAvailabilityUpdateThreshold, appnNnTg=appnNnTg, appnDluSscpRxFmdFrames=appnDluSscpRxFmdFrames, appnIndex=appnIndex, appnLcnVcIntdEntry=appnLcnVcIntdEntry, appnStateTable=appnStateTable, appnDluUsStatLsName=appnDluUsStatLsName, appnDlciVcDuplicatesFromSubnet=appnDlciVcDuplicatesFromSubnet, appnDlciVcRcosFromNetwork=appnDlciVcRcosFromNetwork, appnDlciCnIndex=appnDlciCnIndex, appnLsInSessionControlFrames=appnLsInSessionControlFrames, appnLsSap=appnLsSap, appnDnaRowStatus=appnDnaRowStatus, appnDlciBnnLsDef=appnDlciBnnLsDef, appnDlciBnnLsDefProvEntry=appnDlciBnnLsDefProvEntry, appnLcnRowStatus=appnLcnRowStatus, appnLcnVcTransferPriorityToNetwork=appnLcnVcTransferPriorityToNetwork, appnLocTgStatus=appnLocTgStatus, appnIsrSessCosName=appnIsrSessCosName, appnDlci=appnDlci, appnLocTgSecurity=appnLocTgSecurity, appnPortMaxRxBtuSize=appnPortMaxRxBtuSize, appnLsLsVcReferenceTable=appnLsLsVcReferenceTable, appnLcnVcOutOfRangeFrmFromSubnet=appnLcnVcOutOfRangeFrmFromSubnet, appnIsrSessSecStatsIndex=appnIsrSessSecStatsIndex, appnDirEntEntryType=appnDirEntEntryType, appnLcnVcCalledNpi=appnLcnVcCalledNpi, appnLocTgRowStatusTable=appnLocTgRowStatusTable, appnIsrSessPriStatsRowStatusEntry=appnIsrSessPriStatsRowStatusEntry, appnRtpLocalLsName=appnRtpLocalLsName, appnDlciDcRowStatusTable=appnDlciDcRowStatusTable, appnDlciVcOoSeqByteCntExceeded=appnDlciVcOoSeqByteCntExceeded, appnDirEntServerName=appnDirEntServerName, appnDlciVcState=appnDlciVcState, appnDlciDcComponentName=appnDlciDcComponentName, appnRtpMaxTxRate=appnRtpMaxTxRate, appnDluDsStat=appnDluDsStat, appnMemWarningThreshold=appnMemWarningThreshold, appnLcnDcComponentName=appnLcnDcComponentName, appnDnaHgMAvailabilityDelta=appnDnaHgMAvailabilityDelta, appnDnaCallOptionsEntry=appnDnaCallOptionsEntry, appnDlusPipeState=appnDlusPipeState, appnNnTgOwnerFqcpNameIndex=appnNnTgOwnerFqcpNameIndex, appnDnaHgMOpEntry=appnDnaHgMOpEntry, appnDirEntWildCard=appnDirEntWildCard, appnCapabilitiesBE01=appnCapabilitiesBE01, appnMaximumIsrSessions=appnMaximumIsrSessions, appnCapabilitiesBE=appnCapabilitiesBE, appnDluDsStatMaxRxPacWin=appnDluDsStatMaxRxPacWin, appnLcnIndex=appnLcnIndex, appnIsrSessPriStatsIndex=appnIsrSessPriStatsIndex, appnDLURIndex=appnDLURIndex, appnIsrSessSecStatsTxFmdFrames=appnIsrSessSecStatsTxFmdFrames, appnRtpSmoothRoundTripTime=appnRtpSmoothRoundTripTime, appnLcnVcDiagnosticCode=appnLcnVcDiagnosticCode, appnDnaHgMHgAddrAddrEntry=appnDnaHgMHgAddrAddrEntry, appnDnaAddressEntry=appnDnaAddressEntry, appnPortMaxTxBtuSize=appnPortMaxTxBtuSize, appnLcnVcSegmentsSent=appnLcnVcSegmentsSent, appnDluUsStatStatsTable=appnDluUsStatStatsTable, appnDlciVcEmissionPriorityFromNetwork=appnDlciVcEmissionPriorityFromNetwork, appnFeatures=appnFeatures, appnDlciDcIndex=appnDlciDcIndex, appnNnTgTgCharEntry=appnNnTgTgCharEntry, appnRtpMaxRxRate=appnRtpMaxRxRate, appnHeapSpaceLimit=appnHeapSpaceLimit, appnLsOutSessionControlFrames=appnLsOutSessionControlFrames, appnLocTgResourceSequenceNumber=appnLocTgResourceSequenceNumber, appnDluUsStatComponentName=appnDluUsStatComponentName, appnFrSvcMaximumFrameRelaySvcs=appnFrSvcMaximumFrameRelaySvcs, appnLcnVcAccountingEnabled=appnLcnVcAccountingEnabled, appnDLURPrimaryDefDlusName=appnDLURPrimaryDefDlusName, appnPortType=appnPortType, appnDlciVcFrdTable=appnDlciVcFrdTable, appnDlusDactLuRspTx=appnDlusDactLuRspTx, appnGroupBE01=appnGroupBE01, appnDlciDcRemoteDna=appnDlciDcRemoteDna, appnUpTime=appnUpTime, appnDLURComponentName=appnDLURComponentName, appnIsrSessSecStatsRowStatusTable=appnIsrSessSecStatsRowStatusTable, appnDlciDcNfaTable=appnDlciDcNfaTable, appnIsrSessSecStatsLsName=appnIsrSessSecStatsLsName, appnDnaCugOutCalls=appnDnaCugOutCalls, appnIsrSessSecStatsStatsEntry=appnIsrSessSecStatsStatsEntry, appnCosNodeProvTable=appnCosNodeProvTable, appnIsrSessSecStatsOdai=appnIsrSessSecStatsOdai, appnDlciVcCalledDna=appnDlciVcCalledDna, appnPortOutLinkActLim=appnPortOutLinkActLim, appnLocTgTgCharTable=appnLocTgTgCharTable, appnDluSscpRowStatusTable=appnDluSscpRowStatusTable, appnCos=appnCos, appnCosTgRowStatus=appnCosTgRowStatus, appnDnaHgM=appnDnaHgM, appnDlciBanLsDefStorageType=appnDlciBanLsDefStorageType, appnLocTgRowStatus=appnLocTgRowStatus, appnDlciVcSegmentsSent=appnDlciVcSegmentsSent)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AppnMIB", appnDlciVcSubnetRecoveries=appnDlciVcSubnetRecoveries, appnPortRowStatusEntry=appnPortRowStatusEntry, appnNnIndex=appnNnIndex, appnDlciVcDmepValue=appnDlciVcDmepValue, appnDlciVcOutOfRangeFrmFromSubnet=appnDlciVcOutOfRangeFrmFromSubnet, appnDluSscpOdai=appnDluSscpOdai, appnLsLsVcReferenceEntry=appnLsLsVcReferenceEntry, appnDnaOutgoingOptionsEntry=appnDnaOutgoingOptionsEntry, appnDlciVcCalledNpi=appnDlciVcCalledNpi, appnDlciVcAccountingEnabled=appnDlciVcAccountingEnabled, appnRtpStorageType=appnRtpStorageType, appnCnNumberActivePorts=appnCnNumberActivePorts, appnDlciCnRowStatusTable=appnDlciCnRowStatusTable, appnDlciVcType=appnDlciVcType, appnDirEntStorageType=appnDirEntStorageType, appnLsFeatures=appnLsFeatures, appnPortTgCharEntry=appnPortTgCharEntry, appnLcnVcElapsedTimeTillNow=appnLcnVcElapsedTimeTillNow, appnDluDsStatTxFmdFrames=appnDluDsStatTxFmdFrames, appnDlciBnnLsDefStorageType=appnDlciBnnLsDefStorageType, appnDnaHgMHgAddr=appnDnaHgMHgAddr, appnLsActualCpType=appnLsActualCpType, appnIsrSessSecStatsMaxTxPacWin=appnIsrSessSecStatsMaxTxPacWin, appnDlusActLuRx=appnDlusActLuRx, appnDlciSpOpEntry=appnDlciSpOpEntry, appnCosTgComponentName=appnCosTgComponentName, appnDlciCnRowStatusEntry=appnDlciCnRowStatusEntry, appnCosTgMinPropDelay=appnCosTgMinPropDelay, appnCosTgMinUserDefParm3=appnCosTgMinUserDefParm3, appnDlusReqActPuRspRx=appnDlusReqActPuRspRx, appnDynamicLsGoodXids=appnDynamicLsGoodXids, appnIsrSessSecStatsRowStatusEntry=appnIsrSessSecStatsRowStatusEntry, appnDlusActPuRspTx=appnDlusActPuRspTx, appnDnaCugIncCalls=appnDnaCugIncCalls, appnAdjNnOperEntry=appnAdjNnOperEntry, appnLsLinkStationState=appnLsLinkStationState, appnCosNodeProvEntry=appnCosNodeProvEntry, appnDlciSpExcessBurstSize=appnDlciSpExcessBurstSize, appnIsrSessPriStatsRxDataBytes=appnIsrSessPriStatsRxDataBytes, appnAdjNnOperTable=appnAdjNnOperTable, appnIsrSessSecStatsSidh=appnIsrSessSecStatsSidh, appnCosTgProvEntry=appnCosTgProvEntry, appnCapabilitiesBE01A=appnCapabilitiesBE01A, appnDlciSpCommittedInformationRate=appnDlciSpCommittedInformationRate, appnDnaCugRowStatus=appnDnaCugRowStatus, appnLcnVcLocalRxWindowSize=appnLcnVcLocalRxWindowSize, appnAdjNnIndex=appnAdjNnIndex, appnDnaHgMMaxAvailableChannels=appnDnaHgMMaxAvailableChannels, appnRtpActiveSessions=appnRtpActiveSessions, appnDlciDcOptionsEntry=appnDlciDcOptionsEntry, appnLcnDcRowStatusEntry=appnLcnDcRowStatusEntry, appnRtpRowStatus=appnRtpRowStatus, appnRtpMinTxRate=appnRtpMinTxRate, appnCosTg=appnCosTg, appnDlciVcCallingNpi=appnDlciVcCallingNpi, appnDlciBanLsDefRowStatus=appnDlciBanLsDefRowStatus, appnLcnDcDiscardPriority=appnLcnDcDiscardPriority, appnDnaHgMHgAddrDataNetworkAddress=appnDnaHgMHgAddrDataNetworkAddress, appnDluSscpTxDataframes=appnDluSscpTxDataframes, appnNnFunctionsSupported=appnNnFunctionsSupported, appnGeneralFunctionsSupported=appnGeneralFunctionsSupported, appnDna=appnDna, appnCosTgMinUserDefParm2=appnCosTgMinUserDefParm2, appnDlciVcCadTable=appnDlciVcCadTable, appnLcnDcOptionsTable=appnLcnDcOptionsTable, appnLcnVcCallingNpi=appnLcnVcCallingNpi, appnRouteAdditionResistance=appnRouteAdditionResistance, appnIsrSessRowStatusTable=appnIsrSessRowStatusTable, appnLcnAdminState=appnLcnAdminState, appnIsrLowerCongestionThreshold=appnIsrLowerCongestionThreshold, appnDnaIncAccess=appnDnaIncAccess, appnLcnStorageType=appnLcnStorageType, appnLcnRowStatusEntry=appnLcnRowStatusEntry, appnLocTgDestFqcpNameIndex=appnLocTgDestFqcpNameIndex, appnIsrSessSecStatsMaxTxBtuSize=appnIsrSessSecStatsMaxTxBtuSize, appnIsrSessSecStatsRxFmdFrames=appnIsrSessSecStatsRxFmdFrames, appnLcnVcIntdTable=appnLcnVcIntdTable, appnCosTgMinByteCost=appnCosTgMinByteCost, appnFrSvcRowStatusEntry=appnFrSvcRowStatusEntry, appnCnStorageType=appnCnStorageType, appnDlusReqDactPuTx=appnDlusReqDactPuTx, appnDnaCugStorageType=appnDnaCugStorageType, appnLcnVcDuplicatesFromSubnet=appnLcnVcDuplicatesFromSubnet, appnDnaHgMRowStatusEntry=appnDnaHgMRowStatusEntry, appnNnRowStatusTable=appnNnRowStatusTable, appnIsrSessSecStatsMaxRxBtuSize=appnIsrSessSecStatsMaxRxBtuSize, appnDnaAccountCollection=appnDnaAccountCollection, appnDluDsStatRowStatus=appnDluDsStatRowStatus, appnDnaAddressTable=appnDnaAddressTable, appnDlusComponentName=appnDlusComponentName, appnDlciRowStatusTable=appnDlciRowStatusTable, appnCosTgMinConnectCost=appnCosTgMinConnectCost, appnDlciVcSegmentsRx=appnDlciVcSegmentsRx, appnIsrSessSecStatsRxDataFrames=appnIsrSessSecStatsRxDataFrames, appnFrSvcProvisionedTable=appnFrSvcProvisionedTable, appnDnaHgMRowStatus=appnDnaHgMRowStatus, appnIsrSessPriStatsOdai=appnIsrSessPriStatsOdai, appnPortNonactXidExchLim=appnPortNonactXidExchLim, appnDLURRowStatusTable=appnDLURRowStatusTable, appnDirEntComponentName=appnDirEntComponentName, appnLsTgCharTable=appnLsTgCharTable, appnLsInInvalidSnaFrames=appnLsInInvalidSnaFrames, appnDluSscpRowStatusEntry=appnDluSscpRowStatusEntry, appnDlciVcCallReferenceNumber=appnDlciVcCallReferenceNumber, appnLsBadXids=appnLsBadXids, appnDluOperTable=appnDluOperTable, appnDluUsStatMaxTxBtuSize=appnDluUsStatMaxTxBtuSize, appnLcnVcLocalTxPktSize=appnLcnVcLocalTxPktSize, appnDlciVcStartTime=appnDlciVcStartTime, appnDlciCn=appnDlciCn, appnCosTgMinSecurity=appnCosTgMinSecurity, appnDluRowStatusTable=appnDluRowStatusTable, appnLsActSessCount=appnLsActSessCount, appnRtpBurstSize=appnRtpBurstSize, appnDlciVcPeakOoSeqPktCount=appnDlciVcPeakOoSeqPktCount, appnIsrSessOperEntry=appnIsrSessOperEntry, appnDlus=appnDlus, appnLcnVcIndex=appnLcnVcIndex, appnDnaRowStatusEntry=appnDnaRowStatusEntry, appnFrSvcStorageType=appnFrSvcStorageType, appnFrSvcRowStatus=appnFrSvcRowStatus, appnDnaCug=appnDnaCug, appnFrSvcProvisionedEntry=appnFrSvcProvisionedEntry, appnNnTgRowStatus=appnNnTgRowStatus, appnDnaDefaultRecvFrmNetworkThruputClass=appnDnaDefaultRecvFrmNetworkThruputClass, appnDLURDlurParmsTable=appnDLURDlurParmsTable, appnIsrSessOperTable=appnIsrSessOperTable, appnIsrSessSecStatsRowStatus=appnIsrSessSecStatsRowStatus, appnFrSvcBanTable=appnFrSvcBanTable, appnTreeCacheSize=appnTreeCacheSize, appnLsInXidBytes=appnLsInXidBytes, appnCosNodeStorageType=appnCosNodeStorageType, appnDlciBanProvEntry=appnDlciBanProvEntry, appnDlciDcNfaEntry=appnDlciDcNfaEntry, appnDnaAccountClass=appnDnaAccountClass, appnOperationalEntry=appnOperationalEntry, appnCosRowStatusEntry=appnCosRowStatusEntry, appnDlciCnComponentName=appnDlciCnComponentName, appnDlciVcPreviousDiagnosticCode=appnDlciVcPreviousDiagnosticCode, appnDlusDactPuRspTx=appnDlusDactPuRspTx, appnDlciVcComponentName=appnDlciVcComponentName, appnDnaHgMHgAddrIndex=appnDnaHgMHgAddrIndex, appnDlciVcFrmCongestedToSubnet=appnDlciVcFrmCongestedToSubnet, appnCosStorageType=appnCosStorageType, appnMIB=appnMIB, appnAdjNnStorageType=appnAdjNnStorageType, appnDlciStateTable=appnDlciStateTable, appnLocTgUserDefinedParm3=appnLocTgUserDefinedParm3, appnRtpIndex=appnRtpIndex, appnPortLsRole=appnPortLsRole, appnLcnComponentName=appnLcnComponentName, appnLcnVcLocalTxWindowSize=appnLcnVcLocalTxWindowSize)
