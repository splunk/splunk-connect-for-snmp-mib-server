#
# PySNMP MIB module ZHONE-COM-IP-IPSLA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-IP-IPSLA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:40:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ifName, = mibBuilder.importSymbols("IF-MIB", "ifName")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, IpAddress, Counter64, Unsigned32, Counter32, Bits, NotificationType, iso, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Counter64", "Unsigned32", "Counter32", "Bits", "NotificationType", "iso", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Gauge32")
RowStatus, DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "TextualConvention", "DisplayString")
rdIndex, ZhoneRDIndex = mibBuilder.importSymbols("ZHONE-COM-IP-RD-MIB", "rdIndex", "ZhoneRDIndex")
zhoneIp, = mibBuilder.importSymbols("Zhone", "zhoneIp")
zhoneIpSLA = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21))
zhoneIpSLA.setRevisions(('2007-06-05 07:16', '2006-11-16 10:48', '2006-11-03 07:57',))
if mibBuilder.loadTexts: zhoneIpSLA.setLastUpdated('200611031117Z')
if mibBuilder.loadTexts: zhoneIpSLA.setOrganization('Zhone Technologies')
zhoneIpSLAMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1))
zhoneIpSLAGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLAGlobalEnable.setStatus('current')
zhoneIpSLAGlobalPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLAGlobalPollInterval.setStatus('current')
zhoneIpSLACosActionTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3), )
if mibBuilder.loadTexts: zhoneIpSLACosActionTable.setStatus('current')
zhoneIpSLACosActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1), ).setIndexNames((0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionIndex"))
if mibBuilder.loadTexts: zhoneIpSLACosActionEntry.setStatus('current')
zhoneIpSLACosActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: zhoneIpSLACosActionIndex.setStatus('current')
zhoneIpSLACosActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionName.setStatus('current')
zhoneIpSLACosActionTrapOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionTrapOnError.setStatus('current')
zhoneIpSLACosActionTimeoutErrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionTimeoutErrThresh.setStatus('current')
zhoneIpSLACosActionTimeoutClrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionTimeoutClrThresh.setStatus('current')
zhoneIpSLACosActionLatencyErrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionLatencyErrThresh.setStatus('current')
zhoneIpSLACosActionLatencyClrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionLatencyClrThresh.setStatus('current')
zhoneIpSLACosActionJitterErrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionJitterErrThresh.setStatus('current')
zhoneIpSLACosActionJitterClrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionJitterClrThresh.setStatus('current')
zhoneIpSLACosActionMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionMetrics.setStatus('current')
zhoneIpSLACosActionPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 2048)).clone(64)).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionPacketSize.setStatus('current')
zhoneIpSLACosMapTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 4), )
if mibBuilder.loadTexts: zhoneIpSLACosMapTable.setStatus('current')
zhoneIpSLACosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 4, 1), ).setIndexNames((0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosMapDscpIndex"))
if mibBuilder.loadTexts: zhoneIpSLACosMapEntry.setStatus('current')
zhoneIpSLACosMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: zhoneIpSLACosMapDscpIndex.setStatus('current')
zhoneIpSLACosMapCosActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosMapCosActionIndex.setStatus('current')
zhoneIpSLAStaticPathTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5), )
if mibBuilder.loadTexts: zhoneIpSLAStaticPathTable.setStatus('current')
zhoneIpSLAStaticPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1), ).setIndexNames((0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathRdIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathTargetIP"))
if mibBuilder.loadTexts: zhoneIpSLAStaticPathEntry.setStatus('current')
zhoneIpSLAStaticPathRdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1, 1), ZhoneRDIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 127)))
if mibBuilder.loadTexts: zhoneIpSLAStaticPathRdIndex.setStatus('current')
zhoneIpSLAStaticPathTargetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: zhoneIpSLAStaticPathTargetIP.setStatus('current')
zhoneIpSLAStaticPathForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIpSLAStaticPathForwarding.setStatus('current')
zhoneIpSLAStaticPathState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIpSLAStaticPathState.setStatus('current')
zhoneIpSLAStaticPathRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIpSLAStaticPathRowstatus.setStatus('current')
zhoneIpSLAPathConnectTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6), )
if mibBuilder.loadTexts: zhoneIpSLAPathConnectTable.setStatus('current')
zhoneIpSLAPathConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1), ).setIndexNames((0, "ZHONE-COM-IP-RD-MIB", "rdIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectEndpointIP"))
if mibBuilder.loadTexts: zhoneIpSLAPathConnectEntry.setStatus('current')
zhoneIpSLAPathConnectEndpointIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: zhoneIpSLAPathConnectEndpointIP.setStatus('current')
zhoneIpSLAPathConnectDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectDevName.setStatus('current')
zhoneIpSLAPathConnectDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectDevType.setStatus('current')
zhoneIpSLAPathConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectStatus.setStatus('current')
zhoneIpSLAPathConnectSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectSrcIP.setStatus('current')
zhoneIpSLAPathConnectDiscoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectDiscoveryType.setStatus('current')
zhoneIpSLAPathConnectUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectUpTime.setStatus('current')
zhoneIpSLAPathConnectPollType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initiator", 1), ("responder", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectPollType.setStatus('current')
zhoneIpSLAPathConnectCosMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectCosMismatch.setStatus('current')
zhoneIpSLAPathConnectLastCosActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectLastCosActionIndex.setStatus('current')
zhoneIpSLAPathStatByCOSTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7), )
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSTable.setStatus('current')
zhoneIpSLAPathStatByCOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1), ).setIndexNames((0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSCosActIndex"), (0, "ZHONE-COM-IP-RD-MIB", "rdIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSEntry.setStatus('current')
zhoneIpSLAPathStatByCOSCosActIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSCosActIndex.setStatus('current')
zhoneIpSLAPathStatByCOSTargetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSTargetIP.setStatus('current')
zhoneIpSLAPathStatByCOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSStatus.setStatus('current')
zhoneIpSLAPathStatByCOSLastRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 4), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSLastRTT.setStatus('current')
zhoneIpSLAPathStatByCOSMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 5), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSMinRTT.setStatus('current')
zhoneIpSLAPathStatByCOSAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 6), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSAvgRTT.setStatus('current')
zhoneIpSLAPathStatByCOSMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 7), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSMaxRTT.setStatus('current')
zhoneIpSLAPathStatByCOSDroppedResp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSDroppedResp.setStatus('current')
zhoneIpSLAPathStatByIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8), )
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalTable.setStatus('current')
zhoneIpSLAPathStatByIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1), ).setIndexNames((0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalCosActIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalRdIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalTargetIP"))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalEntry.setStatus('current')
zhoneIpSLAPathStatByIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalIndex.setStatus('current')
zhoneIpSLAPathStatByIntervalCosActIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalCosActIndex.setStatus('current')
zhoneIpSLAPathStatByIntervalRdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 3), ZhoneRDIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 127)))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalRdIndex.setStatus('current')
zhoneIpSLAPathStatByIntervalTargetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 4), IpAddress())
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalTargetIP.setStatus('current')
zhoneIpSLAPathStatByIntervalDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalDateTime.setStatus('current')
zhoneIpSLAPathStatByIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalStatus.setStatus('current')
zhoneIpSLAPathStatByIntervalMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 7), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalMinRTT.setStatus('current')
zhoneIpSLAPathStatByIntervalAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 8), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalAvgRTT.setStatus('current')
zhoneIpSLAPathStatByIntervalMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 9), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalMaxRTT.setStatus('current')
zhoneIpSLAPathStatByIntervalDroppedResp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalDroppedResp.setStatus('current')
zhoneIpSLATraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2))
zhoneIpSLATrapsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0))
if mibBuilder.loadTexts: zhoneIpSLATrapsPrefix.setStatus('current')
zhoneIpSLATimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 1)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSDroppedResp"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionTimeoutErrThresh"))
if mibBuilder.loadTexts: zhoneIpSLATimeoutTrap.setStatus('current')
zhoneIpSLALatencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 2)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSAvgRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionLatencyErrThresh"))
if mibBuilder.loadTexts: zhoneIpSLALatencyTrap.setStatus('current')
zhoneIpSLAJitterTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 3)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSMinRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSMaxRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionJitterErrThresh"))
if mibBuilder.loadTexts: zhoneIpSLAJitterTrap.setStatus('current')
zhoneIpSLATimeoutClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 4)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"))
if mibBuilder.loadTexts: zhoneIpSLATimeoutClearTrap.setStatus('current')
zhoneIpSLALatencyClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 5)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"))
if mibBuilder.loadTexts: zhoneIpSLALatencyClearTrap.setStatus('current')
zhoneIpSLAJitterClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 6)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"))
if mibBuilder.loadTexts: zhoneIpSLAJitterClearTrap.setStatus('current')
zhoneIpSLAConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3))
zhoneIpSLAMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1))
zhoneIpSLAGlobalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 1)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAGlobalEnable"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAGlobalPollInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLAGlobalsGroup = zhoneIpSLAGlobalsGroup.setStatus('current')
zhoneIpSLACosActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 2)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionTrapOnError"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionTimeoutErrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionTimeoutClrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionLatencyErrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionLatencyClrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionJitterErrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionJitterClrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionMetrics"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionPacketSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLACosActionGroup = zhoneIpSLACosActionGroup.setStatus('current')
zhoneIpSLACOSMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 3)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosMapCosActionIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLACOSMapGroup = zhoneIpSLACOSMapGroup.setStatus('current')
zhoneIpSLAStaticPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 4)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathForwarding"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathState"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathRowstatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLAStaticPathGroup = zhoneIpSLAStaticPathGroup.setStatus('current')
zhoneIpSLAPathConnectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 5)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectDevName"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectDevType"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectStatus"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectDiscoveryType"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectUpTime"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectPollType"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectCosMismatch"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectLastCosActionIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLAPathConnectGroup = zhoneIpSLAPathConnectGroup.setStatus('current')
zhoneIpSLAPathStatByCOSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 6)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSStatus"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSLastRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSMinRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSAvgRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSMaxRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSDroppedResp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLAPathStatByCOSGroup = zhoneIpSLAPathStatByCOSGroup.setStatus('current')
zhoneIpSLAPathStatByIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 7)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalDateTime"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalStatus"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalMinRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalAvgRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalMaxRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalDroppedResp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLAPathStatByIntervalGroup = zhoneIpSLAPathStatByIntervalGroup.setStatus('current')
zhoneIpSLANotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 8)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLATimeoutTrap"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLALatencyTrap"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAJitterTrap"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLATimeoutClearTrap"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLALatencyClearTrap"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAJitterClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLANotificationGroup = zhoneIpSLANotificationGroup.setStatus('current')
zhoneIpSLACompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 2))
zhoneIpSLACompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 2, 1)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAGlobalsGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACOSMapGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLANotificationGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLACompliance = zhoneIpSLACompliance.setStatus('current')
mibBuilder.exportSymbols("ZHONE-COM-IP-IPSLA-MIB", zhoneIpSLAPathStatByIntervalCosActIndex=zhoneIpSLAPathStatByIntervalCosActIndex, zhoneIpSLACosActionEntry=zhoneIpSLACosActionEntry, zhoneIpSLAPathStatByIntervalDateTime=zhoneIpSLAPathStatByIntervalDateTime, zhoneIpSLACosActionJitterErrThresh=zhoneIpSLACosActionJitterErrThresh, zhoneIpSLAPathStatByIntervalGroup=zhoneIpSLAPathStatByIntervalGroup, zhoneIpSLAPathStatByIntervalEntry=zhoneIpSLAPathStatByIntervalEntry, zhoneIpSLACosActionGroup=zhoneIpSLACosActionGroup, zhoneIpSLAPathStatByCOSLastRTT=zhoneIpSLAPathStatByCOSLastRTT, zhoneIpSLAPathStatByIntervalMinRTT=zhoneIpSLAPathStatByIntervalMinRTT, zhoneIpSLALatencyClearTrap=zhoneIpSLALatencyClearTrap, zhoneIpSLACosMapTable=zhoneIpSLACosMapTable, zhoneIpSLATimeoutTrap=zhoneIpSLATimeoutTrap, zhoneIpSLAPathConnectTable=zhoneIpSLAPathConnectTable, zhoneIpSLACompliances=zhoneIpSLACompliances, PYSNMP_MODULE_ID=zhoneIpSLA, zhoneIpSLAPathConnectEntry=zhoneIpSLAPathConnectEntry, zhoneIpSLALatencyTrap=zhoneIpSLALatencyTrap, zhoneIpSLACosActionPacketSize=zhoneIpSLACosActionPacketSize, zhoneIpSLA=zhoneIpSLA, zhoneIpSLATimeoutClearTrap=zhoneIpSLATimeoutClearTrap, zhoneIpSLAPathConnectDevType=zhoneIpSLAPathConnectDevType, zhoneIpSLACosActionTimeoutClrThresh=zhoneIpSLACosActionTimeoutClrThresh, zhoneIpSLAStaticPathTargetIP=zhoneIpSLAStaticPathTargetIP, zhoneIpSLAPathStatByCOSCosActIndex=zhoneIpSLAPathStatByCOSCosActIndex, zhoneIpSLAConformance=zhoneIpSLAConformance, zhoneIpSLAPathStatByCOSDroppedResp=zhoneIpSLAPathStatByCOSDroppedResp, zhoneIpSLAPathStatByCOSMaxRTT=zhoneIpSLAPathStatByCOSMaxRTT, zhoneIpSLACOSMapGroup=zhoneIpSLACOSMapGroup, zhoneIpSLAPathStatByCOSGroup=zhoneIpSLAPathStatByCOSGroup, zhoneIpSLAPathStatByCOSTargetIP=zhoneIpSLAPathStatByCOSTargetIP, zhoneIpSLAPathStatByCOSMinRTT=zhoneIpSLAPathStatByCOSMinRTT, zhoneIpSLACompliance=zhoneIpSLACompliance, zhoneIpSLANotificationGroup=zhoneIpSLANotificationGroup, zhoneIpSLAPathStatByIntervalIndex=zhoneIpSLAPathStatByIntervalIndex, zhoneIpSLAGlobalEnable=zhoneIpSLAGlobalEnable, zhoneIpSLACosMapCosActionIndex=zhoneIpSLACosMapCosActionIndex, zhoneIpSLAPathStatByIntervalTargetIP=zhoneIpSLAPathStatByIntervalTargetIP, zhoneIpSLAGlobalPollInterval=zhoneIpSLAGlobalPollInterval, zhoneIpSLAStaticPathRowstatus=zhoneIpSLAStaticPathRowstatus, zhoneIpSLAPathConnectPollType=zhoneIpSLAPathConnectPollType, zhoneIpSLACosActionLatencyClrThresh=zhoneIpSLACosActionLatencyClrThresh, zhoneIpSLAMIBGroups=zhoneIpSLAMIBGroups, zhoneIpSLACosActionTable=zhoneIpSLACosActionTable, zhoneIpSLAPathConnectLastCosActionIndex=zhoneIpSLAPathConnectLastCosActionIndex, zhoneIpSLACosActionTrapOnError=zhoneIpSLACosActionTrapOnError, zhoneIpSLACosActionJitterClrThresh=zhoneIpSLACosActionJitterClrThresh, zhoneIpSLAPathConnectSrcIP=zhoneIpSLAPathConnectSrcIP, zhoneIpSLACosActionName=zhoneIpSLACosActionName, zhoneIpSLATraps=zhoneIpSLATraps, zhoneIpSLATrapsPrefix=zhoneIpSLATrapsPrefix, zhoneIpSLAPathConnectUpTime=zhoneIpSLAPathConnectUpTime, zhoneIpSLAStaticPathTable=zhoneIpSLAStaticPathTable, zhoneIpSLAStaticPathState=zhoneIpSLAStaticPathState, zhoneIpSLAPathConnectEndpointIP=zhoneIpSLAPathConnectEndpointIP, zhoneIpSLAPathStatByCOSTable=zhoneIpSLAPathStatByCOSTable, zhoneIpSLAPathConnectGroup=zhoneIpSLAPathConnectGroup, zhoneIpSLAStaticPathGroup=zhoneIpSLAStaticPathGroup, zhoneIpSLAPathStatByIntervalAvgRTT=zhoneIpSLAPathStatByIntervalAvgRTT, zhoneIpSLACosActionMetrics=zhoneIpSLACosActionMetrics, zhoneIpSLAPathConnectCosMismatch=zhoneIpSLAPathConnectCosMismatch, zhoneIpSLAPathStatByCOSEntry=zhoneIpSLAPathStatByCOSEntry, zhoneIpSLACosActionIndex=zhoneIpSLACosActionIndex, zhoneIpSLAPathStatByIntervalRdIndex=zhoneIpSLAPathStatByIntervalRdIndex, zhoneIpSLAGlobalsGroup=zhoneIpSLAGlobalsGroup, zhoneIpSLAPathStatByIntervalTable=zhoneIpSLAPathStatByIntervalTable, zhoneIpSLAStaticPathForwarding=zhoneIpSLAStaticPathForwarding, zhoneIpSLAJitterClearTrap=zhoneIpSLAJitterClearTrap, zhoneIpSLAMibObjects=zhoneIpSLAMibObjects, zhoneIpSLAPathStatByIntervalDroppedResp=zhoneIpSLAPathStatByIntervalDroppedResp, zhoneIpSLAJitterTrap=zhoneIpSLAJitterTrap, zhoneIpSLACosActionLatencyErrThresh=zhoneIpSLACosActionLatencyErrThresh, zhoneIpSLAPathConnectStatus=zhoneIpSLAPathConnectStatus, zhoneIpSLAPathStatByCOSAvgRTT=zhoneIpSLAPathStatByCOSAvgRTT, zhoneIpSLAPathStatByCOSStatus=zhoneIpSLAPathStatByCOSStatus, zhoneIpSLACosActionTimeoutErrThresh=zhoneIpSLACosActionTimeoutErrThresh, zhoneIpSLACosMapDscpIndex=zhoneIpSLACosMapDscpIndex, zhoneIpSLAStaticPathRdIndex=zhoneIpSLAStaticPathRdIndex, zhoneIpSLAPathStatByIntervalStatus=zhoneIpSLAPathStatByIntervalStatus, zhoneIpSLAPathStatByIntervalMaxRTT=zhoneIpSLAPathStatByIntervalMaxRTT, zhoneIpSLAPathConnectDiscoveryType=zhoneIpSLAPathConnectDiscoveryType, zhoneIpSLACosMapEntry=zhoneIpSLACosMapEntry, zhoneIpSLAPathConnectDevName=zhoneIpSLAPathConnectDevName, zhoneIpSLAStaticPathEntry=zhoneIpSLAStaticPathEntry)
