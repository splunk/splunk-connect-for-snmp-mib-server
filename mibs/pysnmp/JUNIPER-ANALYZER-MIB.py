#
# PySNMP MIB module JUNIPER-ANALYZER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-ANALYZER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
jnxExAnalyzer, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExAnalyzer")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ModuleIdentity, Counter32, Gauge32, ObjectIdentity, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, TimeTicks, Bits, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Counter32", "Gauge32", "ObjectIdentity", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "TimeTicks", "Bits", "Integer32", "Counter64")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
jnxAnalyzerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1))
jnxAnalyzerMIB.setRevisions(('2008-08-01 00:00', '2009-04-22 00:00', '2010-07-30 00:00', '2014-07-17 00:00',))
if mibBuilder.loadTexts: jnxAnalyzerMIB.setLastUpdated('201407170000Z')
if mibBuilder.loadTexts: jnxAnalyzerMIB.setOrganization('Juniper Networks, Inc.')
jnxAnalyzerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1))
jnxAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxAnalyzerTable.setStatus('current')
jnxAnalyzerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"))
if mibBuilder.loadTexts: jnxAnalyzerEntry.setStatus('current')
jnxAnalyzerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxAnalyzerName.setStatus('current')
jnxAnalyzerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerStatus.setStatus('obsolete')
jnxMirroringRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 3), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMirroringRatio.setStatus('current')
jnxLossPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLossPriority.setStatus('current')
jnxAnalyzerInputTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: jnxAnalyzerInputTable.setStatus('obsolete')
jnxAnalyzerInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"), (0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerInputValue"))
if mibBuilder.loadTexts: jnxAnalyzerInputEntry.setStatus('obsolete')
jnxAnalyzerInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxAnalyzerInputValue.setStatus('obsolete')
jnxAnalyzerInputOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerInputOption.setStatus('obsolete')
jnxAnalyzerInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("vlanname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerInputType.setStatus('obsolete')
jnxAnalyzerOutputTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3), )
if mibBuilder.loadTexts: jnxAnalyzerOutputTable.setStatus('current')
jnxAnalyzerOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"), (0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerOutputValue"))
if mibBuilder.loadTexts: jnxAnalyzerOutputEntry.setStatus('current')
jnxAnalyzerOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxAnalyzerOutputValue.setStatus('current')
jnxAnalyzerOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("vlanname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerOutputType.setStatus('current')
jnxExAnalyzerInputTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4), )
if mibBuilder.loadTexts: jnxExAnalyzerInputTable.setStatus('current')
jnxExAnalyzerInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"), (0, "JUNIPER-ANALYZER-MIB", "jnxExAnalyzerInputOption"), (0, "JUNIPER-ANALYZER-MIB", "jnxExAnalyzerInputValue"))
if mibBuilder.loadTexts: jnxExAnalyzerInputEntry.setStatus('current')
jnxExAnalyzerInputOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("vlan", 3), ("egress-vlan", 4))))
if mibBuilder.loadTexts: jnxExAnalyzerInputOption.setStatus('current')
jnxExAnalyzerInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxExAnalyzerInputValue.setStatus('current')
jnxExAnalyzerInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("vlanname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExAnalyzerInputType.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-ANALYZER-MIB", jnxAnalyzerMIBObjects=jnxAnalyzerMIBObjects, jnxAnalyzerOutputValue=jnxAnalyzerOutputValue, jnxExAnalyzerInputValue=jnxExAnalyzerInputValue, jnxExAnalyzerInputType=jnxExAnalyzerInputType, jnxLossPriority=jnxLossPriority, PYSNMP_MODULE_ID=jnxAnalyzerMIB, jnxExAnalyzerInputTable=jnxExAnalyzerInputTable, jnxMirroringRatio=jnxMirroringRatio, jnxAnalyzerName=jnxAnalyzerName, jnxAnalyzerOutputTable=jnxAnalyzerOutputTable, jnxAnalyzerMIB=jnxAnalyzerMIB, jnxAnalyzerInputValue=jnxAnalyzerInputValue, jnxAnalyzerOutputEntry=jnxAnalyzerOutputEntry, jnxAnalyzerEntry=jnxAnalyzerEntry, jnxAnalyzerStatus=jnxAnalyzerStatus, jnxExAnalyzerInputEntry=jnxExAnalyzerInputEntry, jnxAnalyzerOutputType=jnxAnalyzerOutputType, jnxAnalyzerInputTable=jnxAnalyzerInputTable, jnxAnalyzerTable=jnxAnalyzerTable, jnxExAnalyzerInputOption=jnxExAnalyzerInputOption, jnxAnalyzerInputType=jnxAnalyzerInputType, jnxAnalyzerInputEntry=jnxAnalyzerInputEntry, jnxAnalyzerInputOption=jnxAnalyzerInputOption)
