#
# PySNMP MIB module CISCO-ATM-SIG-DIAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-SIG-DIAG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:33:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "InterfaceIndexOrZero")
PnniPortId, ServiceCategory, PnniNodeId = mibBuilder.importSymbols("PNNI-MIB", "PnniPortId", "ServiceCategory", "PnniNodeId")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Bits, Unsigned32, TimeTicks, Counter64, ModuleIdentity, Gauge32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Bits", "Unsigned32", "TimeTicks", "Counter64", "ModuleIdentity", "Gauge32", "iso", "IpAddress")
TimeStamp, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString", "RowStatus")
ciscoAtmSigDiagMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 78))
ciscoAtmSigDiagMIB.setRevisions(('1997-07-28 00:00',))
if mibBuilder.loadTexts: ciscoAtmSigDiagMIB.setLastUpdated('9707280000Z')
if mibBuilder.loadTexts: ciscoAtmSigDiagMIB.setOrganization('Cisco Systems, Inc.')
ciscoSigFailMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 78, 1))
class AtmAddr(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(20, 20), )
csfBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 1))
csfFilterControl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csfFilterControl.setStatus('current')
csfFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2))
csfFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1), )
if mibBuilder.loadTexts: csfFilterTable.setStatus('current')
csfFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ATM-SIG-DIAG-MIB", "csfFilterIndex"))
if mibBuilder.loadTexts: csfFilterEntry.setStatus('current')
csfFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: csfFilterIndex.setStatus('current')
csfFilterScope = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("localRejects", 1), ("remoteRejects", 2), ("allRejects", 3))).clone('allRejects')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterScope.setStatus('current')
csfFilterConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterConnKind.setStatus('current')
csfFilterConnCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterConnCastType.setStatus('current')
csfFilterServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterServiceCategory.setStatus('current')
csfFilterInInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterInInterface.setStatus('current')
csfFilterOutInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterOutInterface.setStatus('current')
csfFilterCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterCause.setStatus('current')
csfFilterCallingParty = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 9), AtmAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterCallingParty.setStatus('current')
csfFilterCallingPartyMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterCallingPartyMask.setStatus('current')
csfFilterCalledParty = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 11), AtmAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterCalledParty.setStatus('current')
csfFilterCalledPartyMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterCalledPartyMask.setStatus('current')
csfFilterMaxRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 214783647)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterMaxRecords.setStatus('current')
csfFilterAgeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterAgeTimeout.setStatus('current')
csfFilterPurge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("purge", 1), ("noop", 2))).clone('noop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterPurge.setStatus('current')
csfFilterNumMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfFilterNumMatches.setStatus('current')
csfFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 2, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csfFilterRowStatus.setStatus('current')
csfRecordGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3))
csfRecordTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1), )
if mibBuilder.loadTexts: csfRecordTable.setStatus('current')
csfRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-ATM-SIG-DIAG-MIB", "csfFilterIndex"), (0, "CISCO-ATM-SIG-DIAG-MIB", "csfRecordIndex"))
if mibBuilder.loadTexts: csfRecordEntry.setStatus('current')
csfRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csfRecordIndex.setStatus('current')
csfRecordScope = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localReject", 1), ("remoteReject", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordScope.setStatus('current')
csfRecordConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("softPvcc", 1), ("softPvpc", 2), ("switchedVcc", 3), ("switchedVpc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordConnKind.setStatus('current')
csfRecordConnCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p2p", 1), ("p2mp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordConnCastType.setStatus('current')
csfRecordConnIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("addPartyReject", 1), ("setupReject", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordConnIndicator.setStatus('current')
csfRecordServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 6), ServiceCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordServiceCategory.setStatus('current')
csfRecordInInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordInInterface.setStatus('current')
csfRecordOutInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordOutInterface.setStatus('current')
csfRecordCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordCause.setStatus('current')
csfRecordDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordDiags.setStatus('current')
csfRecordCallingParty = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 11), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordCallingParty.setStatus('current')
csfRecordCallingPartySubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 12), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordCallingPartySubAddress.setStatus('current')
csfRecordCalledParty = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 13), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordCalledParty.setStatus('current')
csfRecordCalledPartySubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 14), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordCalledPartySubAddress.setStatus('current')
csfRecordCrankBackTransitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("blockedIncomingPort", 1), ("blockedNode", 2), ("blockedLink", 3), ("noCrankBack", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordCrankBackTransitType.setStatus('current')
csfRecordCrankBackNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 16), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordCrankBackNodeId.setStatus('current')
csfRecordCrankBackPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 17), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordCrankBackPortId.setStatus('current')
csfRecordCrankBackSucceedingNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 18), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordCrankBackSucceedingNodeId.setStatus('current')
csfRecordTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 1, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfRecordTimeStamp.setStatus('current')
csfDtlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 2), )
if mibBuilder.loadTexts: csfDtlTable.setStatus('current')
csfDtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-ATM-SIG-DIAG-MIB", "csfFilterIndex"), (0, "CISCO-ATM-SIG-DIAG-MIB", "csfRecordIndex"), (0, "CISCO-ATM-SIG-DIAG-MIB", "csfDtlEntryIndex"))
if mibBuilder.loadTexts: csfDtlEntry.setStatus('current')
csfDtlEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)))
if mibBuilder.loadTexts: csfDtlEntryIndex.setStatus('current')
csfDtlNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 2, 1, 2), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfDtlNodeId.setStatus('current')
csfDtlPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 2, 1, 3), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfDtlPortId.setStatus('current')
csfDtlLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 78, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("horizontal", 2), ("uplink", 3), ("last", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csfDtlLinkType.setStatus('current')
ciscoSigFailMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 78, 3))
ciscoSigFailMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 78, 3, 1))
ciscoSigFailMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 78, 3, 2))
ciscoSigFailMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 78, 3, 1, 1)).setObjects(("CISCO-ATM-SIG-DIAG-MIB", "ciscoSigFailGeneralGroup"), ("CISCO-ATM-SIG-DIAG-MIB", "ciscoSigFailMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSigFailMIBCompliance = ciscoSigFailMIBCompliance.setStatus('current')
ciscoSigFailGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 78, 3, 2, 1)).setObjects(("CISCO-ATM-SIG-DIAG-MIB", "csfFilterControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSigFailGeneralGroup = ciscoSigFailGeneralGroup.setStatus('current')
ciscoSigFailMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 78, 3, 2, 2)).setObjects(("CISCO-ATM-SIG-DIAG-MIB", "csfFilterScope"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterConnKind"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterConnCastType"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterServiceCategory"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterInInterface"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterOutInterface"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterCause"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterCallingParty"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterCallingPartyMask"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterCalledParty"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterCalledPartyMask"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterMaxRecords"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterAgeTimeout"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterPurge"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterNumMatches"), ("CISCO-ATM-SIG-DIAG-MIB", "csfFilterRowStatus"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordScope"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordConnKind"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordConnCastType"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordConnIndicator"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordServiceCategory"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordInInterface"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordOutInterface"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordCause"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordDiags"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordCallingParty"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordCallingPartySubAddress"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordCalledParty"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordCalledPartySubAddress"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordCrankBackTransitType"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordCrankBackNodeId"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordCrankBackSucceedingNodeId"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordCrankBackPortId"), ("CISCO-ATM-SIG-DIAG-MIB", "csfRecordTimeStamp"), ("CISCO-ATM-SIG-DIAG-MIB", "csfDtlNodeId"), ("CISCO-ATM-SIG-DIAG-MIB", "csfDtlPortId"), ("CISCO-ATM-SIG-DIAG-MIB", "csfDtlLinkType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSigFailMIBGroup = ciscoSigFailMIBGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-ATM-SIG-DIAG-MIB", csfFilterNumMatches=csfFilterNumMatches, csfRecordCallingPartySubAddress=csfRecordCallingPartySubAddress, csfRecordIndex=csfRecordIndex, csfRecordCrankBackTransitType=csfRecordCrankBackTransitType, ciscoSigFailGeneralGroup=ciscoSigFailGeneralGroup, ciscoAtmSigDiagMIB=ciscoAtmSigDiagMIB, csfFilterGroup=csfFilterGroup, ciscoSigFailMIBCompliance=ciscoSigFailMIBCompliance, csfRecordDiags=csfRecordDiags, PYSNMP_MODULE_ID=ciscoAtmSigDiagMIB, csfFilterAgeTimeout=csfFilterAgeTimeout, csfRecordTimeStamp=csfRecordTimeStamp, ciscoSigFailMIBGroup=ciscoSigFailMIBGroup, csfFilterScope=csfFilterScope, csfRecordCrankBackPortId=csfRecordCrankBackPortId, csfDtlNodeId=csfDtlNodeId, ciscoSigFailMIBConformance=ciscoSigFailMIBConformance, csfDtlEntry=csfDtlEntry, csfBaseGroup=csfBaseGroup, csfRecordConnKind=csfRecordConnKind, csfFilterCause=csfFilterCause, csfRecordTable=csfRecordTable, csfFilterRowStatus=csfFilterRowStatus, csfFilterMaxRecords=csfFilterMaxRecords, csfFilterInInterface=csfFilterInInterface, csfDtlPortId=csfDtlPortId, csfRecordInInterface=csfRecordInInterface, csfFilterPurge=csfFilterPurge, csfFilterConnKind=csfFilterConnKind, csfFilterConnCastType=csfFilterConnCastType, csfRecordServiceCategory=csfRecordServiceCategory, csfRecordCalledPartySubAddress=csfRecordCalledPartySubAddress, csfFilterEntry=csfFilterEntry, csfDtlTable=csfDtlTable, csfRecordCrankBackNodeId=csfRecordCrankBackNodeId, csfFilterControl=csfFilterControl, csfRecordConnCastType=csfRecordConnCastType, ciscoSigFailMIBCompliances=ciscoSigFailMIBCompliances, ciscoSigFailMIBGroups=ciscoSigFailMIBGroups, csfRecordConnIndicator=csfRecordConnIndicator, csfRecordCallingParty=csfRecordCallingParty, AtmAddr=AtmAddr, csfFilterServiceCategory=csfFilterServiceCategory, csfFilterCalledParty=csfFilterCalledParty, csfDtlEntryIndex=csfDtlEntryIndex, csfRecordScope=csfRecordScope, csfRecordOutInterface=csfRecordOutInterface, csfRecordEntry=csfRecordEntry, csfFilterIndex=csfFilterIndex, csfFilterOutInterface=csfFilterOutInterface, csfFilterCallingPartyMask=csfFilterCallingPartyMask, csfDtlLinkType=csfDtlLinkType, ciscoSigFailMIBObjects=ciscoSigFailMIBObjects, csfRecordCalledParty=csfRecordCalledParty, csfFilterTable=csfFilterTable, csfRecordGroup=csfRecordGroup, csfRecordCrankBackSucceedingNodeId=csfRecordCrankBackSucceedingNodeId, csfRecordCause=csfRecordCause, csfFilterCallingParty=csfFilterCallingParty, csfFilterCalledPartyMask=csfFilterCalledPartyMask)
