#
# PySNMP MIB module Fx8210-private (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/Fx8210-private
# Produced by pysmi-0.3.4 at Fri Jan 31 21:31:24 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, Gauge32, MibIdentifier, NotificationType, internet, ModuleIdentity, ObjectIdentity, Integer32, Counter64, Bits, TimeTicks, mgmt, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "Gauge32", "MibIdentifier", "NotificationType", "internet", "ModuleIdentity", "ObjectIdentity", "Integer32", "Counter64", "Bits", "TimeTicks", "mgmt", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3))
traprun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 1))
traperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 2))
trapvar = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 3))
fxm8000 = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 10))
finexsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 10, 1))
fxmsystemrun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 10, 1, 1))
fxmsystemperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 10, 1, 2))
rTrapAddrTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 3, 1, 1), )
if mibBuilder.loadTexts: rTrapAddrTbl.setStatus('mandatory')
rTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1), ).setIndexNames((0, "Fx8210-private", "rTrapAddrAddr"))
if mibBuilder.loadTexts: rTrapAddrEntry.setStatus('mandatory')
rTrapAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrAddr.setStatus('mandatory')
rTrapAddrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrComm.setStatus('mandatory')
rTrapAddrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrVer.setStatus('mandatory')
rTrapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrType.setStatus('mandatory')
rTrapAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrState.setStatus('mandatory')
rTrapAddrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("removable", 1), ("fixed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrFlag.setStatus('mandatory')
rTrapAddrAge = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrAge.setStatus('mandatory')
rTrapLearning = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapLearning.setStatus('mandatory')
rTrapAging = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAging.setStatus('mandatory')
pTrapAddrTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 3, 2, 1), )
if mibBuilder.loadTexts: pTrapAddrTbl.setStatus('mandatory')
pTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1), ).setIndexNames((0, "Fx8210-private", "pTrapAddrAddr"))
if mibBuilder.loadTexts: pTrapAddrEntry.setStatus('mandatory')
pTrapAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrAddr.setStatus('mandatory')
pTrapAddrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrComm.setStatus('mandatory')
pTrapAddrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrVer.setStatus('mandatory')
pTrapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrType.setStatus('mandatory')
pTrapAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrState.setStatus('mandatory')
pTrapLearning = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapLearning.setStatus('mandatory')
pTrapAging = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAging.setStatus('mandatory')
fxmSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemIpAddr.setStatus('mandatory')
fxmSystemIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemIPNetMask.setStatus('mandatory')
fxmSystemIPDefGway = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemIPDefGway.setStatus('mandatory')
fxmSystemBroadcastOpt = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemBroadcastOpt.setStatus('mandatory')
fxmSystemBootServer = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemBootServer.setStatus('mandatory')
fxmSystemBootGenName = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemBootGenName.setStatus('mandatory')
fxmSystemBootMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-memory", 1), ("bootp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemBootMode.setStatus('mandatory')
fxmSystemSelfTestLevel = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("full", 2), ("partial", 3), ("extended", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemSelfTestLevel.setStatus('mandatory')
fxmSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warm-reset", 1), ("cold-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxmSystemReset.setStatus('mandatory')
pfxmSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemIpAddr.setStatus('mandatory')
pfxmSystemIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemIPNetMask.setStatus('mandatory')
pfxmSystemIPDefGway = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemIPDefGway.setStatus('mandatory')
pfxmSystemBroadcastOpt = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemBroadcastOpt.setStatus('mandatory')
pfxmSystemBootServer = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemBootServer.setStatus('mandatory')
pfxmSystemBootGenName = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemBootGenName.setStatus('mandatory')
pfxmSystemBootMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-memory", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemBootMode.setStatus('mandatory')
pfxmSystemSelfTestLevel = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("full", 2), ("partial", 3), ("extended", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemSelfTestLevel.setStatus('mandatory')
pfxmSpanMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSpanMode.setStatus('mandatory')
pfxmSystemCommunity1 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 10), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity1.setStatus('mandatory')
pfxmSystemCommunity2 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 11), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity2.setStatus('mandatory')
pfxmSystemCommunity3 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 12), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity3.setStatus('mandatory')
pfxmSystemCommunity4 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 13), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity4.setStatus('mandatory')
pfxmSystemCommunity5 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 14), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity5.setStatus('mandatory')
pfxmSystemCommunity6 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 15), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity6.setStatus('mandatory')
pfxmSystemCommunity7 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 16), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity7.setStatus('mandatory')
pfxmSystemCommunity8 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 17), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity8.setStatus('mandatory')
eventTrap = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 3, 1), OctetString())
if mibBuilder.loadTexts: eventTrap.setStatus('mandatory')
sendGenericEvent = NotificationType((1, 3, 6, 1, 4, 1, 22, 10, 1) + (0,1)).setObjects(("Fx8210-private", "eventTrap"))
mibBuilder.exportSymbols("Fx8210-private", fxmSystemBootMode=fxmSystemBootMode, fxm8000=fxm8000, pfxmSystemCommunity8=pfxmSystemCommunity8, trapvar=trapvar, pfxmSpanMode=pfxmSpanMode, rTrapAddrFlag=rTrapAddrFlag, fxmsystemperm=fxmsystemperm, rTrapLearning=rTrapLearning, traprun=traprun, pfxmSystemIPNetMask=pfxmSystemIPNetMask, pTrapAddrState=pTrapAddrState, fxmSystemIPDefGway=fxmSystemIPDefGway, finexsystem=finexsystem, fxmSystemIPNetMask=fxmSystemIPNetMask, trap=trap, rTrapAging=rTrapAging, pfxmSystemCommunity2=pfxmSystemCommunity2, pTrapAging=pTrapAging, private=private, fxmsystemrun=fxmsystemrun, rTrapAddrComm=rTrapAddrComm, pTrapLearning=pTrapLearning, fxmSystemIpAddr=fxmSystemIpAddr, fibronics=fibronics, rTrapAddrAddr=rTrapAddrAddr, pfxmSystemCommunity4=pfxmSystemCommunity4, rTrapAddrTbl=rTrapAddrTbl, pfxmSystemCommunity6=pfxmSystemCommunity6, pTrapAddrVer=pTrapAddrVer, pfxmSystemIPDefGway=pfxmSystemIPDefGway, pTrapAddrComm=pTrapAddrComm, pfxmSystemIpAddr=pfxmSystemIpAddr, pTrapAddrAddr=pTrapAddrAddr, pfxmSystemBootServer=pfxmSystemBootServer, rTrapAddrState=rTrapAddrState, fxmSystemReset=fxmSystemReset, fxmSystemBroadcastOpt=fxmSystemBroadcastOpt, enterprises=enterprises, pfxmSystemSelfTestLevel=pfxmSystemSelfTestLevel, sendGenericEvent=sendGenericEvent, rTrapAddrAge=rTrapAddrAge, pfxmSystemCommunity3=pfxmSystemCommunity3, eventTrap=eventTrap, pTrapAddrTbl=pTrapAddrTbl, pfxmSystemBootGenName=pfxmSystemBootGenName, rTrapAddrType=rTrapAddrType, pfxmSystemBootMode=pfxmSystemBootMode, traperm=traperm, pfxmSystemCommunity7=pfxmSystemCommunity7, pTrapAddrEntry=pTrapAddrEntry, rTrapAddrEntry=rTrapAddrEntry, rTrapAddrVer=rTrapAddrVer, pTrapAddrType=pTrapAddrType, fxmSystemSelfTestLevel=fxmSystemSelfTestLevel, pfxmSystemCommunity1=pfxmSystemCommunity1, pfxmSystemBroadcastOpt=pfxmSystemBroadcastOpt, fxmSystemBootServer=fxmSystemBootServer, fxmSystemBootGenName=fxmSystemBootGenName, pfxmSystemCommunity5=pfxmSystemCommunity5)
