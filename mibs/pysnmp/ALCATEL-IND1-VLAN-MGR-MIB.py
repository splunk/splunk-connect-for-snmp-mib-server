#
# PySNMP MIB module ALCATEL-IND1-VLAN-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-VLAN-MGR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:02:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1VlanMgt, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1VlanMgt")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, iso, TimeTicks, Bits, ObjectIdentity, Counter64, Gauge32, Unsigned32, Counter32, Integer32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "iso", "TimeTicks", "Bits", "ObjectIdentity", "Counter64", "Gauge32", "Unsigned32", "Counter32", "Integer32", "ModuleIdentity", "NotificationType")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
alcatelIND1VLANMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1))
alcatelIND1VLANMgrMIB.setRevisions(('2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setOrganization('Alcatel-Lucent')
class IpxNetworkAddress(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'x'

alcatelIND1VLANMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBObjects.setStatus('current')
alcatelIND1VLANMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBConformance.setStatus('current')
alcatelIND1VLANMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBGroups.setStatus('current')
alcatelIND1VLANMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBCompliances.setStatus('current')
vlanMgrVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1))
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-MGR-MIB", "vlanNumber"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNumber.setStatus('current')
vlanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDescription.setStatus('current')
vlanAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAdmStatus.setStatus('current')
vlanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOperStatus.setStatus('current')
vlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStatus.setStatus('current')
vlanStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStpStatus.setStatus('current')
vlanAuthentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAuthentStatus.setStatus('current')
vlanVoiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceStatus.setStatus('current')
vlanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpAddress.setStatus('current')
vlanIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpMask.setStatus('current')
vlanIpEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet2", 1), ("snap", 2), ("notApplicable", 3))).clone('ethernet2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpEncap.setStatus('current')
vlanIpForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notApplicable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpForward.setStatus('current')
vlanIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpStatus.setStatus('current')
vlanIpxNet = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 14), IpxNetworkAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpxNet.setStatus('current')
vlanIpxEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet2", 1), ("novellraw", 2), ("llc", 3), ("snap", 4), ("notApplicable", 5))).clone('ethernet2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpxEncap.setStatus('current')
vlanIpxRipSapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("riponly", 1), ("ripsap", 2), ("triggered", 3), ("inactive", 4), ("notApplicable", 5))).clone('ripsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpxRipSapMode.setStatus('current')
vlanIpxDelayTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpxDelayTicks.setStatus('current')
vlanIpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpxStatus.setStatus('current')
vlanTagMobilePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTagMobilePortStatus.setStatus('current')
vlanPortMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortMacStatus.setStatus('current')
vlanLocalProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanLocalProxyArp.setStatus('current')
vlanMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1280, 9198))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMtu.setStatus('current')
vlan1x1StpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlan1x1StpStatus.setStatus('current')
vlanflatStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanflatStpStatus.setStatus('current')
vlanHABandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanHABandwidth.setStatus('current')
vlanSvlanTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 0), ("customer", 1), ("provider", 2), ("multicastEnterprise", 3), ("multicastVlanStacking", 4), ("eServiceCustomer", 6), ("eServiceManagement", 7), ("eServiceMulticastVlanStacking", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSvlanTrafficType.setStatus('current')
vlanSvlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSvlanPriority.setStatus('current')
vlanMacLearningControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMacLearningControlStatus.setStatus('current')
vlanMgrVpa = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2))
vpaTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1), )
if mibBuilder.loadTexts: vpaTable.setStatus('current')
vpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-MGR-MIB", "vpaVlanNumber"), (0, "ALCATEL-IND1-VLAN-MGR-MIB", "vpaIfIndex"))
if mibBuilder.loadTexts: vpaEntry.setStatus('current')
vpaVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpaVlanNumber.setStatus('current')
vpaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1001, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpaIfIndex.setStatus('current')
vpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("cfgDefault", 1), ("qTagged", 2), ("mobile", 3), ("mirrored", 4), ("svlan", 6), ("dynamic", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpaType.setStatus('current')
vpaState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("blocking", 2), ("forwarding", 3), ("filtering", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpaState.setStatus('current')
vpaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpaStatus.setStatus('current')
vpaPortMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("inapplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpaPortMacType.setStatus('current')
vlanMgrVlanSet = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3))
vlanSetVlanCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetVlanCount.setStatus('current')
vlanSetVlanRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetVlanRouterCount.setStatus('current')
vlanSetIpRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetIpRouterCount.setStatus('current')
vlanSetIpxRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetIpxRouterCount.setStatus('current')
vlanSetMultiRtrMacStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSetMultiRtrMacStatus.setStatus('current')
vlanMgrHAPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4))
vlanHAPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1), )
if mibBuilder.loadTexts: vlanHAPortTable.setStatus('current')
vlanHAPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-MGR-MIB", "vlanHAPortVlanId"), (0, "ALCATEL-IND1-VLAN-MGR-MIB", "vlanHAPortIfIndex"), (0, "ALCATEL-IND1-VLAN-MGR-MIB", "vlanHAPortType"))
if mibBuilder.loadTexts: vlanHAPortEntry.setStatus('current')
vlanHAPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanHAPortVlanId.setStatus('current')
vlanHAPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanHAPortIfIndex.setStatus('current')
vlanHAPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanHAPortType.setStatus('current')
vlanHAPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanHAPortRowStatus.setStatus('current')
alcatelIND1VLANMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vlanMgrVlanGroup"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanMgrVpaGroup"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanMgrVlanSetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1VLANMgrMIBCompliance = alcatelIND1VLANMgrMIBCompliance.setStatus('current')
vlanMgrVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vlanNumber"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanDescription"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanAdmStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanOperStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlan1x1StpStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanflatStpStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanStpStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanAuthentStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanVoiceStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpAddress"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpMask"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpEncap"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpForward"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpxNet"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpxEncap"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpxRipSapMode"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpxDelayTicks"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpxStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanMgrVlanGroup = vlanMgrVlanGroup.setStatus('current')
vlanMgrVpaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vpaVlanNumber"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vpaIfIndex"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vpaType"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vpaState"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vpaStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanMgrVpaGroup = vlanMgrVpaGroup.setStatus('current')
vlanMgrVlanSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetVlanCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetVlanRouterCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetIpRouterCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetIpxRouterCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetMultiRtrMacStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanMgrVlanSetGroup = vlanMgrVlanSetGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-VLAN-MGR-MIB", alcatelIND1VLANMgrMIBCompliances=alcatelIND1VLANMgrMIBCompliances, vlanAuthentStatus=vlanAuthentStatus, vlanMgrVpa=vlanMgrVpa, vlanSetMultiRtrMacStatus=vlanSetMultiRtrMacStatus, vlanVoiceStatus=vlanVoiceStatus, vlanIpForward=vlanIpForward, vlan1x1StpStatus=vlan1x1StpStatus, vlanTable=vlanTable, vlanHABandwidth=vlanHABandwidth, vlanAdmStatus=vlanAdmStatus, vlanSvlanTrafficType=vlanSvlanTrafficType, vpaEntry=vpaEntry, vpaVlanNumber=vpaVlanNumber, vlanIpxNet=vlanIpxNet, vlanHAPortEntry=vlanHAPortEntry, vlanIpMask=vlanIpMask, vlanMacLearningControlStatus=vlanMacLearningControlStatus, vpaType=vpaType, alcatelIND1VLANMgrMIB=alcatelIND1VLANMgrMIB, vlanHAPortVlanId=vlanHAPortVlanId, vlanHAPortType=vlanHAPortType, vlanNumber=vlanNumber, vpaState=vpaState, vlanMgrVlanSet=vlanMgrVlanSet, vlanIpxEncap=vlanIpxEncap, vlanMgrVlanGroup=vlanMgrVlanGroup, vlanIpStatus=vlanIpStatus, vpaStatus=vpaStatus, alcatelIND1VLANMgrMIBCompliance=alcatelIND1VLANMgrMIBCompliance, vlanSetIpRouterCount=vlanSetIpRouterCount, vlanIpEncap=vlanIpEncap, vlanOperStatus=vlanOperStatus, vpaTable=vpaTable, vlanMgrVlanSetGroup=vlanMgrVlanSetGroup, vlanDescription=vlanDescription, vlanIpxDelayTicks=vlanIpxDelayTicks, alcatelIND1VLANMgrMIBGroups=alcatelIND1VLANMgrMIBGroups, alcatelIND1VLANMgrMIBObjects=alcatelIND1VLANMgrMIBObjects, vpaPortMacType=vpaPortMacType, vlanHAPortTable=vlanHAPortTable, vlanSetIpxRouterCount=vlanSetIpxRouterCount, vlanStatus=vlanStatus, vlanStpStatus=vlanStpStatus, vlanSetVlanRouterCount=vlanSetVlanRouterCount, vlanSetVlanCount=vlanSetVlanCount, vlanLocalProxyArp=vlanLocalProxyArp, vlanMgrVpaGroup=vlanMgrVpaGroup, vlanMgrHAPort=vlanMgrHAPort, vlanMtu=vlanMtu, vlanIpxRipSapMode=vlanIpxRipSapMode, PYSNMP_MODULE_ID=alcatelIND1VLANMgrMIB, vlanIpAddress=vlanIpAddress, vlanTagMobilePortStatus=vlanTagMobilePortStatus, vlanflatStpStatus=vlanflatStpStatus, alcatelIND1VLANMgrMIBConformance=alcatelIND1VLANMgrMIBConformance, vlanSvlanPriority=vlanSvlanPriority, vlanHAPortRowStatus=vlanHAPortRowStatus, vlanPortMacStatus=vlanPortMacStatus, vlanMgrVlan=vlanMgrVlan, IpxNetworkAddress=IpxNetworkAddress, vlanHAPortIfIndex=vlanHAPortIfIndex, vpaIfIndex=vpaIfIndex, vlanIpxStatus=vlanIpxStatus, vlanEntry=vlanEntry)
