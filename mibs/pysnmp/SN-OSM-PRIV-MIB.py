#
# PySNMP MIB module SN-OSM-PRIV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SN-OSM-PRIV-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:59:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, NotificationType, Gauge32, ModuleIdentity, Unsigned32, MibIdentifier, enterprises, Integer32, Counter64, TimeTicks, internet, IpAddress, Bits, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "NotificationType", "Gauge32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "enterprises", "Integer32", "Counter64", "TimeTicks", "internet", "IpAddress", "Bits", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ad = MibIdentifier((1, 3, 6, 1, 4, 1, 4196))
adProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1))
simaticNet = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1))
iHub = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 1))
iSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2))
snOsmItp62 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 1))
snOsmItp53 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 2))
snOsmItpLd62 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 3))
snEsmItp80 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 4))
snOsmTp62 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 5))
snEsmTp80 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 6))
snOsmBC08 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 7))
snOsmTpLd62 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 8))
snOsmTp22 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 9))
snEsmTp40 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 10))
snOsmTp62_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 11)).setLabel("snOsmTp62-Advanced")
snEsmItp80_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 12)).setLabel("snEsmItp80-Advanced")
snEsmTp80_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 13)).setLabel("snEsmTp80-Advanced")
snOsmItpLd62_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 14)).setLabel("snOsmItpLd62-Advanced")
snOsmItp62_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 15)).setLabel("snOsmItp62-Advanced")
snOsmItp53_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 16)).setLabel("snOsmItp53-Advanced")
snOsmTp53 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 17))
iSwitchMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

snCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1))
snProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2))
snDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5))
snNvLog = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6))
snTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7))
snGen = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8))
snTcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10))
snOsm = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1))
snDownloadParams = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1))
snDownloadParamsTftpServerHostName = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDownloadParamsTftpServerHostName.setStatus('mandatory')
snDownloadParamsFile = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Not Defined Yet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDownloadParamsFile.setStatus('mandatory')
snDownloadParamsControl = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("start-load", 2), ("cancel-load", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snDownloadParamsControl.setStatus('mandatory')
snDownloadParamsStatus = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("load-in-progress", 2), ("load-inactive", 3), ("load-interrupted", 4))).clone('load-inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDownloadParamsStatus.setStatus('mandatory')
snDownloadNextBlockId = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDownloadNextBlockId.setStatus('mandatory')
snDownloadParamsError = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDownloadParamsError.setStatus('mandatory')
snDownloadAutoLoad = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDownloadAutoLoad.setStatus('mandatory')
snDownloadEventLogTableFile = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Not Defined Yet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDownloadEventLogTableFile.setStatus('mandatory')
snDownloadEventLogTableControl = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start-load", 2), ("start-save", 3), ("cancel", 4), ("continue-process", 5), ("abort-process", 6)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snDownloadEventLogTableControl.setStatus('mandatory')
snDownloadConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Not Defined Yet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDownloadConfigFile.setStatus('mandatory')
snDownloadConfigControl = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start-load", 2), ("start-save", 3), ("cancel", 4), ("continue-process", 5), ("abort-process", 6)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snDownloadConfigControl.setStatus('mandatory')
snNvLogMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 400)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNvLogMaxEntries.setStatus('mandatory')
snNvLogCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNvLogCurrentEntries.setStatus('mandatory')
snNvLogNewEntries = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNvLogNewEntries.setStatus('mandatory')
snNvLogClear = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snNvLogClear.setStatus('mandatory')
snNvLogTable = MibTable((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5), )
if mibBuilder.loadTexts: snNvLogTable.setStatus('mandatory')
snNvLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5, 1), ).setIndexNames((0, "SN-OSM-PRIV-MIB", "snNvLogPowerUpCount"), (0, "SN-OSM-PRIV-MIB", "snNvLogTime"), (0, "SN-OSM-PRIV-MIB", "snNvLogSequenceNumber"))
if mibBuilder.loadTexts: snNvLogEntry.setStatus('mandatory')
snNvLogPowerUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNvLogPowerUpCount.setStatus('mandatory')
snNvLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNvLogTime.setStatus('mandatory')
snNvLogSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNvLogSequenceNumber.setStatus('mandatory')
snNvLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNvLogDescr.setStatus('mandatory')
snNvLogPositionDescr = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNvLogPositionDescr.setStatus('mandatory')
snmpV2 = MibIdentifier((1, 3, 6, 1, 6))
snmpModules = MibIdentifier((1, 3, 6, 1, 6, 3))
snmpMIB = MibIdentifier((1, 3, 6, 1, 6, 3, 1))
snmpMIBObjects = MibIdentifier((1, 3, 6, 1, 6, 3, 1, 1))
snmpTraps = MibIdentifier((1, 3, 6, 1, 6, 3, 1, 1, 5))
class IANAifType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))
    namedValues = NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88024TokenBus", 8), ("iso88025TokenRing", 9), ("iso88026Man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frameRelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54))

snSwitchTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 1, 2))).clone(namedValues=NamedValues(("not-supported", 10), ("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchTrapsEnable.setStatus('mandatory')
snTrapTimeLastGenerated = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTrapTimeLastGenerated.setStatus('mandatory')
snTrapMaxManagers = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 6), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTrapMaxManagers.setStatus('mandatory')
snTrapTable = MibTable((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 7), )
if mibBuilder.loadTexts: snTrapTable.setStatus('mandatory')
snTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 7, 1), ).setIndexNames((0, "SN-OSM-PRIV-MIB", "snTrapIndex"))
if mibBuilder.loadTexts: snTrapEntry.setStatus('mandatory')
snTrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTrapAddress.setStatus('mandatory')
snTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTrapState.setStatus('mandatory')
snTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTrapIndex.setStatus('mandatory')
snUserDescription = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('Not Defined Yet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snUserDescription.setStatus('mandatory')
snHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHwVersion.setStatus('mandatory')
snBootStrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snBootStrapVersion.setStatus('mandatory')
snSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwVersion.setStatus('mandatory')
snInfoOrderNr = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInfoOrderNr.setStatus('mandatory')
snSerialPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 9))).clone(namedValues=NamedValues(("other", 1), ("o9600bps", 5), ("o19200bps", 6), ("o38400bps", 7), ("o115200bps", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSerialPortSpeed.setStatus('mandatory')
snSwitchTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 1, 2))).clone(namedValues=NamedValues(("not-supported", 10), ("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchTelnetEnable.setStatus('mandatory')
snSwitchTelnetTimeOutEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchTelnetTimeOutEnable.setStatus('mandatory')
snSwitchTelnetTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchTelnetTimeOut.setStatus('mandatory')
snSwitchSNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 1, 2))).clone(namedValues=NamedValues(("not-supported", 10), ("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchSNMPEnable.setStatus('mandatory')
snSysReset = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cold-reset", 1), ("warm-reset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snSysReset.setStatus('mandatory')
snResetPowerUpCount = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snResetPowerUpCount.setStatus('mandatory')
snSetFactoryDefs = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-factory-defaults", 1), ("set-factory-defaults-complete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSetFactoryDefs.setStatus('mandatory')
snResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-counters", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snResetCounters.setStatus('mandatory')
snEraseDataStoreFlash = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase-datastore", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snEraseDataStoreFlash.setStatus('mandatory')
snSetMemoryDefs = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-memory-defaults", 1), ("set-memory-defaults-complete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSetMemoryDefs.setStatus('mandatory')
snEmailSMTPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snEmailSMTPIpAddress.setStatus('mandatory')
snEmailSMTPPort = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snEmailSMTPPort.setStatus('mandatory')
snEmailEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snEmailEnable.setStatus('mandatory')
snEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('user@host.domain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snEmailAddress.setStatus('mandatory')
snIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAddress.setStatus('mandatory')
snIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpSubnetMask.setStatus('mandatory')
snIpDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpDefaultGateway.setStatus('mandatory')
snBootP = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snBootP.setStatus('mandatory')
snMacAddressBase = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMacAddressBase.setStatus('mandatory')
snOsmFaultState = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noFault", 1), ("fault", 2))).clone('noFault')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmFaultState.setStatus('mandatory')
snOsmSignalledFaults = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmSignalledFaults.setStatus('mandatory')
snOsmFaultValue = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmFaultValue.setStatus('mandatory')
snOsmDigitalInputChange = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8).clone('00000000')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmDigitalInputChange.setStatus('mandatory')
snOsmDigitalInputState = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmDigitalInputState.setStatus('mandatory')
snOsmRmMode = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rmOff", 1), ("rmOn", 2))).clone('rmOff')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmRmMode.setStatus('mandatory')
snOsmRmState = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rmPassive", 1), ("rmActive", 2))).clone('rmPassive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmRmState.setStatus('mandatory')
snOsmRmStateChanges = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmRmStateChanges.setStatus('mandatory')
snOsmRmObserverMode = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("restart", 3), ("not-supported", 10))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmRmObserverMode.setStatus('mandatory')
snOsmStandbyMode = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("standbyOff", 1), ("standbyOn", 2), ("not-supported", 10))).clone('standbyOff')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmStandbyMode.setStatus('mandatory')
snOsmStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("standbyPassive", 1), ("standbyActive", 2), ("not-supported", 10))).clone('standbyPassive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmStandbyState.setStatus('mandatory')
snOsmStandbyCableState = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2), ("not-supported", 10))).clone('connected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmStandbyCableState.setStatus('mandatory')
snOsmStandbyStateChanges = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmStandbyStateChanges.setStatus('mandatory')
snOsmPort7TestMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 31), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmPort7TestMac.setStatus('mandatory')
snOsmPort8TestMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 32), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmPort8TestMac.setStatus('mandatory')
snOsmMulticastTestMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 33), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmMulticastTestMac.setStatus('mandatory')
snOsmMulticastLinkMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 34), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmMulticastLinkMac.setStatus('mandatory')
snOsmUnicastLinkMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 35), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmUnicastLinkMac.setStatus('mandatory')
snOsmMulticastSyncMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 36), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmMulticastSyncMac.setStatus('mandatory')
snOsmMulticastFlowControlMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 37), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmMulticastFlowControlMac.setStatus('mandatory')
snOsmTestMaxDelay = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmTestMaxDelay.setStatus('mandatory')
snOsmPowerSupply1State = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmPowerSupply1State.setStatus('mandatory')
snOsmPowerSupply2State = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmPowerSupply2State.setStatus('mandatory')
snOsmPowerSupply1Mask = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('notChecked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPowerSupply1Mask.setStatus('mandatory')
snOsmPowerSupply2Mask = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('notChecked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPowerSupply2Mask.setStatus('mandatory')
snOsmChangedPowerLine = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nochange", 0), ("line1", 1), ("line2", 2))).clone('nochange')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmChangedPowerLine.setStatus('mandatory')
snOsmResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snOsmResetCounters.setStatus('mandatory')
snOsmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61), )
if mibBuilder.loadTexts: snOsmPortTable.setStatus('mandatory')
snOsmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1), ).setIndexNames((0, "SN-OSM-PRIV-MIB", "snOsmPortIndex"))
if mibBuilder.loadTexts: snOsmPortEntry.setStatus('mandatory')
snOsmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 1), Integer32())
if mibBuilder.loadTexts: snOsmPortIndex.setStatus('mandatory')
snOsmPortFaultMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('notChecked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPortFaultMaskState.setStatus('mandatory')
snOsmPortStandbyMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPortStandbyMaskState.setStatus('mandatory')
snOsmPortLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2))).clone('unlocked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPortLockState.setStatus('mandatory')
snOsmPortPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPartition", 1), ("partition", 2))).clone('noPartition')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmPortPartitionState.setStatus('mandatory')
snOsmPortBackPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPortBackPressure.setStatus('mandatory')
snOsmRmActiveState = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,11))
snOsmRmPassiveState = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,12))
snOsmStandbyActiveState = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,21))
snOsmStandbyPassiveState = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,22))
snOsmPowerLineDown = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,31)).setObjects(("SN-OSM-PRIV-MIB", "snOsmChangedPowerLine"))
snOsmPowerLineUp = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,32)).setObjects(("SN-OSM-PRIV-MIB", "snOsmChangedPowerLine"))
snOsmFault = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,41)).setObjects(("SN-OSM-PRIV-MIB", "snOsmFaultValue"))
snOsmDigitalInput = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,51)).setObjects(("SN-OSM-PRIV-MIB", "snOsmDigitalInputChange"), ("SN-OSM-PRIV-MIB", "snOsmDigitalInputState"))
snOsmEventTable = MibTable((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62), )
if mibBuilder.loadTexts: snOsmEventTable.setStatus('mandatory')
snOsmEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1), ).setIndexNames((0, "SN-OSM-PRIV-MIB", "snOsmEventIndex"))
if mibBuilder.loadTexts: snOsmEventEntry.setStatus('mandatory')
snOsmEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eMail", 1), ("trap", 2), ("logTabel", 3))).clone('eMail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmEventIndex.setStatus('mandatory')
snOsmEventColdWarmStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventColdWarmStart.setStatus('mandatory')
snOsmEventLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventLinkChange.setStatus('mandatory')
snOsmEventAuthenticationFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventAuthenticationFailure.setStatus('mandatory')
snOsmEventRmonAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventRmonAlarm.setStatus('mandatory')
snOsmEventPowerChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventPowerChange.setStatus('mandatory')
snOsmEventRmStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventRmStateChange.setStatus('mandatory')
snOsmEventStandbyStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventStandbyStateChange.setStatus('mandatory')
snOsmEventFault = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventFault.setStatus('mandatory')
snOsmDigitalInEventTable = MibTable((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63), )
if mibBuilder.loadTexts: snOsmDigitalInEventTable.setStatus('mandatory')
snOsmDigitalInEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1), ).setIndexNames((0, "SN-OSM-PRIV-MIB", "snOsmDigitalInIndex"))
if mibBuilder.loadTexts: snOsmDigitalInEventEntry.setStatus('mandatory')
snOsmDigitalInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmDigitalInIndex.setStatus('mandatory')
snOsmDigitalInName = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Digital XX')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmDigitalInName.setStatus('mandatory')
snOsmDigitalInMailEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2), ("notSupported", 3))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmDigitalInMailEvent.setStatus('mandatory')
snOsmDigitalInTrapEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2), ("notSupported", 3))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmDigitalInTrapEvent.setStatus('mandatory')
snOsmDigitalInLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2), ("notSupported", 3))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmDigitalInLogEvent.setStatus('mandatory')
snOsmDigitalInState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmDigitalInState.setStatus('mandatory')
snConfigId = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("osmItp62", 0), ("osmItp53", 1), ("osmTp62", 2), ("esmItp80", 3), ("esmTp80", 4), ("osmItpLd62", 5), ("osmTpLd62", 6), ("osmBC08", 7), ("osmTp22", 8), ("esmTp40", 9), ("osmTp62-Advanced", 10), ("esmItp80-Advanced", 11), ("esmTp80-Advanced", 12), ("osmItpLd62-Advanced", 13), ("osmItp62-Advanced", 14), ("osmItp53-Advanced", 15), ("osmTp53", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snConfigId.setStatus('mandatory')
snSwitchFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchFlowControl.setStatus('mandatory')
snSwitchSnifferSrc = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 102), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchSnifferSrc.setStatus('mandatory')
snSwitchSnifferDest = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 103), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchSnifferDest.setStatus('mandatory')
snSwitchSnifferEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchSnifferEnable.setStatus('mandatory')
snSwitchAgingEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchAgingEnable.setStatus('mandatory')
snSwitchRmonMode = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 10))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchRmonMode.setStatus('mandatory')
snSwitchFdbImagePollTime = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchFdbImagePollTime.setStatus('mandatory')
snSwitchLearningTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwitchLearningTableEntries.setStatus('mandatory')
snSwitchTimeToNextDataStore = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwitchTimeToNextDataStore.setStatus('mandatory')
snSwitchFlushDataStore = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("flush", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snSwitchFlushDataStore.setStatus('mandatory')
snLastObject = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 999), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("last-object", 1))).clone('last-object')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snLastObject.setStatus('mandatory')
mibBuilder.exportSymbols("SN-OSM-PRIV-MIB", snOsmTp62=snOsmTp62, snSwitchSnifferSrc=snSwitchSnifferSrc, snOsmRmObserverMode=snOsmRmObserverMode, snOsmTestMaxDelay=snOsmTestMaxDelay, snOsmDigitalInputChange=snOsmDigitalInputChange, snOsmRmStateChanges=snOsmRmStateChanges, snOsmStandbyCableState=snOsmStandbyCableState, snNvLog=snNvLog, snOsmTp53=snOsmTp53, snOsmMulticastTestMac=snOsmMulticastTestMac, snOsmEventPowerChange=snOsmEventPowerChange, snEsmTp40=snEsmTp40, snSwitchLearningTableEntries=snSwitchLearningTableEntries, snDownloadParamsError=snDownloadParamsError, snIpSubnetMask=snIpSubnetMask, snTcpip=snTcpip, snBootP=snBootP, snOsmPortEntry=snOsmPortEntry, snOsmEventAuthenticationFailure=snOsmEventAuthenticationFailure, snNvLogDescr=snNvLogDescr, snmpModules=snmpModules, snOsmSignalledFaults=snOsmSignalledFaults, snOsmRmMode=snOsmRmMode, snTrapMaxManagers=snTrapMaxManagers, snDownloadNextBlockId=snDownloadNextBlockId, snOsm=snOsm, snSwitchSNMPEnable=snSwitchSNMPEnable, snDownloadParams=snDownloadParams, snSwVersion=snSwVersion, snOsmFaultState=snOsmFaultState, snNvLogCurrentEntries=snNvLogCurrentEntries, snDownloadParamsFile=snDownloadParamsFile, snEsmTp80=snEsmTp80, snTrapAddress=snTrapAddress, snOsmDigitalInEventEntry=snOsmDigitalInEventEntry, snNvLogPositionDescr=snNvLogPositionDescr, snUserDescription=snUserDescription, snEsmItp80_Advanced=snEsmItp80_Advanced, snIpAddress=snIpAddress, snSwitchTrapsEnable=snSwitchTrapsEnable, snOsmStandbyMode=snOsmStandbyMode, snOsmDigitalInEventTable=snOsmDigitalInEventTable, snSwitchFlowControl=snSwitchFlowControl, snOsmFault=snOsmFault, snSetMemoryDefs=snSetMemoryDefs, snmpMIB=snmpMIB, snSwitchTelnetTimeOutEnable=snSwitchTelnetTimeOutEnable, snOsmItp53_Advanced=snOsmItp53_Advanced, snSwitchSnifferDest=snSwitchSnifferDest, snOsmPortTable=snOsmPortTable, snResetCounters=snResetCounters, snNvLogPowerUpCount=snNvLogPowerUpCount, snOsmRmState=snOsmRmState, snDownload=snDownload, snOsmBC08=snOsmBC08, snEmailEnable=snEmailEnable, snTrapInfo=snTrapInfo, snSwitchRmonMode=snSwitchRmonMode, snMacAddressBase=snMacAddressBase, snTrapTable=snTrapTable, iSwitchMib=iSwitchMib, snOsmEventTable=snOsmEventTable, snOsmItp53=snOsmItp53, snOsmDigitalInIndex=snOsmDigitalInIndex, adProductMibs=adProductMibs, snTrapEntry=snTrapEntry, snSerialPortSpeed=snSerialPortSpeed, snOsmPort8TestMac=snOsmPort8TestMac, snDownloadEventLogTableControl=snDownloadEventLogTableControl, snOsmDigitalInState=snOsmDigitalInState, snEraseDataStoreFlash=snEraseDataStoreFlash, snProductSpecific=snProductSpecific, snOsmItpLd62_Advanced=snOsmItpLd62_Advanced, snEmailSMTPPort=snEmailSMTPPort, snOsmPowerSupply2State=snOsmPowerSupply2State, snNvLogClear=snNvLogClear, snOsmMulticastFlowControlMac=snOsmMulticastFlowControlMac, snOsmItpLd62=snOsmItpLd62, snOsmTpLd62=snOsmTpLd62, snTrapState=snTrapState, snOsmPort7TestMac=snOsmPort7TestMac, snDownloadConfigControl=snDownloadConfigControl, snSwitchAgingEnable=snSwitchAgingEnable, snGen=snGen, snOsmMulticastSyncMac=snOsmMulticastSyncMac, snSwitchTimeToNextDataStore=snSwitchTimeToNextDataStore, snSysReset=snSysReset, snOsmItp62=snOsmItp62, snOsmPowerSupply1State=snOsmPowerSupply1State, snOsmStandbyActiveState=snOsmStandbyActiveState, snOsmPowerLineUp=snOsmPowerLineUp, snOsmPowerSupply2Mask=snOsmPowerSupply2Mask, snResetPowerUpCount=snResetPowerUpCount, snNvLogNewEntries=snNvLogNewEntries, snSwitchFlushDataStore=snSwitchFlushDataStore, snNvLogTime=snNvLogTime, snOsmEventLinkChange=snOsmEventLinkChange, snOsmDigitalInMailEvent=snOsmDigitalInMailEvent, snDownloadParamsTftpServerHostName=snDownloadParamsTftpServerHostName, snOsmEventRmStateChange=snOsmEventRmStateChange, snDownloadAutoLoad=snDownloadAutoLoad, snOsmFaultValue=snOsmFaultValue, snLastObject=snLastObject, snTrapIndex=snTrapIndex, snEmailAddress=snEmailAddress, snOsmDigitalInName=snOsmDigitalInName, ad=ad, snOsmUnicastLinkMac=snOsmUnicastLinkMac, snSwitchTelnetTimeOut=snSwitchTelnetTimeOut, MacAddress=MacAddress, snOsmEventStandbyStateChange=snOsmEventStandbyStateChange, snOsmDigitalInTrapEvent=snOsmDigitalInTrapEvent, snIpDefaultGateway=snIpDefaultGateway, snOsmEventColdWarmStart=snOsmEventColdWarmStart, snNvLogTable=snNvLogTable, snmpMIBObjects=snmpMIBObjects, IANAifType=IANAifType, snOsmChangedPowerLine=snOsmChangedPowerLine, iSwitch=iSwitch, snOsmPortStandbyMaskState=snOsmPortStandbyMaskState, snOsmDigitalInLogEvent=snOsmDigitalInLogEvent, snOsmPortLockState=snOsmPortLockState, snSwitchTelnetEnable=snSwitchTelnetEnable, snOsmRmPassiveState=snOsmRmPassiveState, snOsmStandbyPassiveState=snOsmStandbyPassiveState, snOsmMulticastLinkMac=snOsmMulticastLinkMac, snHwVersion=snHwVersion, snDownloadConfigFile=snDownloadConfigFile, snEsmItp80=snEsmItp80, snOsmStandbyStateChanges=snOsmStandbyStateChanges, snConfigId=snConfigId, snOsmPortIndex=snOsmPortIndex, snOsmDigitalInputState=snOsmDigitalInputState, snOsmPowerSupply1Mask=snOsmPowerSupply1Mask, snOsmEventFault=snOsmEventFault, snmpV2=snmpV2, snOsmTp22=snOsmTp22, snOsmItp62_Advanced=snOsmItp62_Advanced, snInfoOrderNr=snInfoOrderNr, snSwitchSnifferEnable=snSwitchSnifferEnable, snCommon=snCommon, simaticNet=simaticNet, snBootStrapVersion=snBootStrapVersion, snEmailSMTPIpAddress=snEmailSMTPIpAddress, snOsmStandbyState=snOsmStandbyState, snOsmPortFaultMaskState=snOsmPortFaultMaskState, snEsmTp80_Advanced=snEsmTp80_Advanced, snNvLogEntry=snNvLogEntry, snOsmEventIndex=snOsmEventIndex, snDownloadParamsStatus=snDownloadParamsStatus, snNvLogSequenceNumber=snNvLogSequenceNumber, snOsmResetCounters=snOsmResetCounters, snDownloadEventLogTableFile=snDownloadEventLogTableFile, snOsmRmActiveState=snOsmRmActiveState, snOsmPortBackPressure=snOsmPortBackPressure, snOsmDigitalInput=snOsmDigitalInput, snSetFactoryDefs=snSetFactoryDefs, snOsmPortPartitionState=snOsmPortPartitionState, snOsmPowerLineDown=snOsmPowerLineDown, snmpTraps=snmpTraps, snNvLogMaxEntries=snNvLogMaxEntries, snOsmTp62_Advanced=snOsmTp62_Advanced, snDownloadParamsControl=snDownloadParamsControl, iHub=iHub, snOsmEventRmonAlarm=snOsmEventRmonAlarm, snTrapTimeLastGenerated=snTrapTimeLastGenerated, snOsmEventEntry=snOsmEventEntry, snSwitchFdbImagePollTime=snSwitchFdbImagePollTime)
