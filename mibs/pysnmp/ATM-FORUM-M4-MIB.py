#
# PySNMP MIB module ATM-FORUM-M4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATM-FORUM-M4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:15:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
atmForum, = mibBuilder.importSymbols("ATM-FORUM-TC-MIB", "atmForum")
atmVcCrossConnectHighVci, atmVcCrossConnectEntry, atmVcCrossConnectLowVci, atmVcCrossConnectHighVpi, atmVcCrossConnectIndex, atmVpCrossConnectLowVpi, atmVplEntry, atmVpCrossConnectIndex, atmVcCrossConnectLowIfIndex, atmVpCrossConnectHighVpi, atmVclVpi, atmVclVci, atmVpCrossConnectLowIfIndex, atmVcCrossConnectLowVpi, atmVpCrossConnectHighIfIndex, atmVclEntry, atmVpCrossConnectEntry, atmVcCrossConnectHighIfIndex, atmVplVpi = mibBuilder.importSymbols("ATM-MIB", "atmVcCrossConnectHighVci", "atmVcCrossConnectEntry", "atmVcCrossConnectLowVci", "atmVcCrossConnectHighVpi", "atmVcCrossConnectIndex", "atmVpCrossConnectLowVpi", "atmVplEntry", "atmVpCrossConnectIndex", "atmVcCrossConnectLowIfIndex", "atmVpCrossConnectHighVpi", "atmVclVpi", "atmVclVci", "atmVpCrossConnectLowIfIndex", "atmVcCrossConnectLowVpi", "atmVpCrossConnectHighIfIndex", "atmVclEntry", "atmVpCrossConnectEntry", "atmVcCrossConnectHighIfIndex", "atmVplVpi")
entPhysicalIndex, entPhysicalContainedIn, entPhysicalClass, entPhysicalParentRelPos = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalContainedIn", "entPhysicalClass", "entPhysicalParentRelPos")
hrSWInstalledName, hrSWInstalledIndex = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrSWInstalledName", "hrSWInstalledIndex")
ifIndex, OwnerString = mibBuilder.importSymbols("IF-MIB", "ifIndex", "OwnerString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Unsigned32, Gauge32, ModuleIdentity, ObjectIdentity, iso, TimeTicks, IpAddress, Integer32, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "Gauge32", "ModuleIdentity", "ObjectIdentity", "iso", "TimeTicks", "IpAddress", "Integer32", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32")
TruthValue, RowPointer, TimeStamp, TestAndIncr, TextualConvention, TimeInterval, DateAndTime, DisplayString, AutonomousType, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowPointer", "TimeStamp", "TestAndIncr", "TextualConvention", "TimeInterval", "DateAndTime", "DisplayString", "AutonomousType", "RowStatus")
atmfM4MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 100))
if mibBuilder.loadTexts: atmfM4MIB.setLastUpdated('9701210000Z')
if mibBuilder.loadTexts: atmfM4MIB.setOrganization('ATM Forum')
atmfM4MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 1))
atmfM4MIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 2))
atmfM4MIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 3))
atmfM4NeVendor = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4NeVendor.setStatus('current')
atmfM4NeVersion = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4NeVersion.setStatus('current')
atmfM4NeStartTime = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4NeStartTime.setStatus('current')
atmfM4NeAlarmSeverityIndex = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4NeAlarmSeverityIndex.setStatus('current')
atmfM4NeSuppressZeroStats = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4NeSuppressZeroStats.setStatus('current')
atmfM4PhysPathTpTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 6), )
if mibBuilder.loadTexts: atmfM4PhysPathTpTable.setStatus('current')
atmfM4PhysPathTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4PhysPathTpEntry.setStatus('current')
atmfM4PhysPathTpHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PhysPathTpHwUnitIndex.setStatus('current')
atmfM4PhysPathTpPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PhysPathTpPortID.setStatus('current')
atmfM4PhysPathTpAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4PhysPathTpAlarmSeverityIndex.setStatus('current')
atmfM4TcAdaptorTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 7), )
if mibBuilder.loadTexts: atmfM4TcAdaptorTable.setStatus('current')
atmfM4TcAdaptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4TcAdaptorEntry.setStatus('current')
atmfM4TcACellScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 7, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4TcACellScrambling.setStatus('current')
atmfM4TcAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4TcAlarmSeverityIndex.setStatus('current')
atmfM4AtmLayerTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 8), )
if mibBuilder.loadTexts: atmfM4AtmLayerTable.setStatus('current')
atmfM4AtmLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4AtmLayerEntry.setStatus('current')
atmfM4IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("uni", 1), ("bici", 2), ("bissi", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfType.setStatus('current')
atmfM4IfLoopbackLocationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfLoopbackLocationCode.setStatus('current')
atmfM4IfSubscriberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfSubscriberAddress.setStatus('current')
atmfM4IfPreferredCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfPreferredCarrier.setStatus('current')
atmfM4IfFarEndCarrierNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfFarEndCarrierNetwork.setStatus('current')
atmfM4VplTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 9), )
if mibBuilder.loadTexts: atmfM4VplTable.setStatus('current')
atmfM4VplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 9, 1), )
atmVplEntry.registerAugmentions(("ATM-FORUM-M4-MIB", "atmfM4VplEntry"))
atmfM4VplEntry.setIndexNames(*atmVplEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VplEntry.setStatus('current')
atmfM4VplSegEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 9, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VplSegEndPt.setStatus('current')
atmfM4VclTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 10), )
if mibBuilder.loadTexts: atmfM4VclTable.setStatus('current')
atmfM4VclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 10, 1), )
atmVclEntry.registerAugmentions(("ATM-FORUM-M4-MIB", "atmfM4VclEntry"))
atmfM4VclEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VclEntry.setStatus('current')
atmfM4VclSegEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 10, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VclSegEndPt.setStatus('current')
atmfM4VpXConnTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 11), )
if mibBuilder.loadTexts: atmfM4VpXConnTable.setStatus('current')
atmfM4VpXConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 11, 1), )
atmVpCrossConnectEntry.registerAugmentions(("ATM-FORUM-M4-MIB", "atmfM4VpXConnEntry"))
atmfM4VpXConnEntry.setIndexNames(*atmVpCrossConnectEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VpXConnEntry.setStatus('current')
atmfM4VpXConnRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 11, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VpXConnRecover.setStatus('current')
atmfM4VcXConnTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 12), )
if mibBuilder.loadTexts: atmfM4VcXConnTable.setStatus('current')
atmfM4VcXConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 12, 1), )
atmVcCrossConnectEntry.registerAugmentions(("ATM-FORUM-M4-MIB", "atmfM4VcXConnEntry"))
atmfM4VcXConnEntry.setIndexNames(*atmVcCrossConnectEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VcXConnEntry.setStatus('current')
atmfM4VcXConnRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 12, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VcXConnRecover.setStatus('current')
atmfM4VpNextVpiTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 13), )
if mibBuilder.loadTexts: atmfM4VpNextVpiTable.setStatus('current')
atmfM4VpNextVpiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4VpNextVpiEntry.setStatus('current')
atmfM4VpNextVpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpNextVpiValue.setStatus('current')
atmfM4VcNextVciTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 14), )
if mibBuilder.loadTexts: atmfM4VcNextVciTable.setStatus('current')
atmfM4VcNextVciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: atmfM4VcNextVciEntry.setStatus('current')
atmfM4VcNextVciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcNextVciValue.setStatus('current')
atmfM4CellProtoCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 15), )
if mibBuilder.loadTexts: atmfM4CellProtoCurrTable.setStatus('current')
atmfM4CellProtoCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4CellProtoCurrEntry.setStatus('current')
atmfM4CellProtoCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrSuspect.setStatus('current')
atmfM4CellProtoCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrElapsedTime.setStatus('current')
atmfM4CellProtoCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrSupprIntvls.setStatus('current')
atmfM4CellProtoCurrProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrProtoErrors.setStatus('current')
atmfM4CellProtoCurrInOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrInOAMCells.setStatus('current')
atmfM4CellProtoHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 16), )
if mibBuilder.loadTexts: atmfM4CellProtoHistTable.setStatus('current')
atmfM4CellProtoHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4CellProtoHistIndex"))
if mibBuilder.loadTexts: atmfM4CellProtoHistEntry.setStatus('current')
atmfM4CellProtoHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4CellProtoHistIndex.setStatus('current')
atmfM4CellProtoHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistSuspect.setStatus('current')
atmfM4CellProtoHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistElapsedTime.setStatus('current')
atmfM4CellProtoHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistSupprIntvls.setStatus('current')
atmfM4CellProtoHistProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistProtoErrors.setStatus('current')
atmfM4CellProtoHistInOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistInOAMCells.setStatus('current')
atmfM4CellProtoErrorTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 17), )
if mibBuilder.loadTexts: atmfM4CellProtoErrorTable.setStatus('current')
atmfM4CellProtoErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorCode"))
if mibBuilder.loadTexts: atmfM4CellProtoErrorEntry.setStatus('current')
atmfM4CellProtoErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: atmfM4CellProtoErrorCode.setStatus('current')
atmfM4CellProtoErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorTime.setStatus('current')
atmfM4CellProtoErrorReason = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorReason.setStatus('current')
atmfM4CellProtoErrorVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorVpi.setStatus('current')
atmfM4CellProtoErrorVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorVci.setStatus('current')
atmfM4TcProtoCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 18), )
if mibBuilder.loadTexts: atmfM4TcProtoCurrTable.setStatus('current')
atmfM4TcProtoCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4TcProtoCurrEntry.setStatus('current')
atmfM4TcProtoCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 18, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrSuspect.setStatus('current')
atmfM4TcProtoCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 18, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrElapsedTime.setStatus('current')
atmfM4TcProtoCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrSupprIntvls.setStatus('current')
atmfM4TcProtoCurrDiscardHECViol = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrDiscardHECViol.setStatus('current')
atmfM4TcProtoHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 19), )
if mibBuilder.loadTexts: atmfM4TcProtoHistTable.setStatus('current')
atmfM4TcProtoHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4TcProtoHistIndex"))
if mibBuilder.loadTexts: atmfM4TcProtoHistEntry.setStatus('current')
atmfM4TcProtoHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4TcProtoHistIndex.setStatus('current')
atmfM4TcProtoHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistSuspect.setStatus('current')
atmfM4TcProtoHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistElapsedTime.setStatus('current')
atmfM4TcProtoHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistSupprIntvls.setStatus('current')
atmfM4TcProtoHistDiscardHECViol = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistDiscardHECViol.setStatus('current')
atmfM4VpUpcNpcCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 20), )
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrTable.setStatus('current')
atmfM4VpUpcNpcCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrEntry.setStatus('current')
atmfM4VpUpcNpcCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrSuspect.setStatus('current')
atmfM4VpUpcNpcCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrElapsedTime.setStatus('current')
atmfM4VpUpcNpcCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrSupprIntvls.setStatus('current')
atmfM4VpUpcNpcCurrDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrDiscardedCells.setStatus('current')
atmfM4VpUpcNpcCurrDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrDiscardedClp0.setStatus('current')
atmfM4VpUpcNpcCurrPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrPassedCells.setStatus('current')
atmfM4VpUpcNpcCurrPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrPassedClp0.setStatus('current')
atmfM4VpUpcNpcHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 21), )
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistTable.setStatus('current')
atmfM4VpUpcNpcHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistIndex"))
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistEntry.setStatus('current')
atmfM4VpUpcNpcHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistIndex.setStatus('current')
atmfM4VpUpcNpcHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistSuspect.setStatus('current')
atmfM4VpUpcNpcHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistElapsedTime.setStatus('current')
atmfM4VpUpcNpcHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistSupprIntvls.setStatus('current')
atmfM4VpUpcNpcHistDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistDiscardedCells.setStatus('current')
atmfM4VpUpcNpcHistDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistDiscardedClp0.setStatus('current')
atmfM4VpUpcNpcHistPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistPassedCells.setStatus('current')
atmfM4VpUpcNpcHistPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistPassedClp0.setStatus('current')
atmfM4VcUpcNpcCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 22), )
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrTable.setStatus('current')
atmfM4VcUpcNpcCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrEntry.setStatus('current')
atmfM4VcUpcNpcCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrSuspect.setStatus('current')
atmfM4VcUpcNpcCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrElapsedTime.setStatus('current')
atmfM4VcUpcNpcCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrSupprIntvls.setStatus('current')
atmfM4VcUpcNpcCurrDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrDiscardedCells.setStatus('current')
atmfM4VcUpcNpcCurrDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrDiscardedClp0.setStatus('current')
atmfM4VcUpcNpcCurrPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrPassedCells.setStatus('current')
atmfM4VcUpcNpcCurrPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrPassedClp0.setStatus('current')
atmfM4VcUpcNpcHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 23), )
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistTable.setStatus('current')
atmfM4VcUpcNpcHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistIndex"))
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistEntry.setStatus('current')
atmfM4VcUpcNpcHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistIndex.setStatus('current')
atmfM4VcUpcNpcHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistSuspect.setStatus('current')
atmfM4VcUpcNpcHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistElapsedTime.setStatus('current')
atmfM4VcUpcNpcHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistSupprIntvls.setStatus('current')
atmfM4VcUpcNpcHistDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistDiscardedCells.setStatus('current')
atmfM4VcUpcNpcHistDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistDiscardedClp0.setStatus('current')
atmfM4VcUpcNpcHistPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistPassedCells.setStatus('current')
atmfM4VcUpcNpcHistPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistPassedClp0.setStatus('current')
atmfM4TestTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 1, 24))
atmfM4TestOAMLoopbackSeg = ObjectIdentity((1, 3, 6, 1, 4, 1, 353, 100, 1, 24, 1))
if mibBuilder.loadTexts: atmfM4TestOAMLoopbackSeg.setStatus('current')
atmfM4TestOAMLoopbackE2E = ObjectIdentity((1, 3, 6, 1, 4, 1, 353, 100, 1, 24, 2))
if mibBuilder.loadTexts: atmfM4TestOAMLoopbackE2E.setStatus('current')
atmfM4VpTestTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 25), )
if mibBuilder.loadTexts: atmfM4VpTestTable.setStatus('current')
atmfM4VpTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-FORUM-M4-MIB", "atmfM4VpTestObject"))
if mibBuilder.loadTexts: atmfM4VpTestEntry.setStatus('current')
atmfM4VpTestObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vplTp", 1), ("vpcTp", 2))))
if mibBuilder.loadTexts: atmfM4VpTestObject.setStatus('current')
atmfM4VpTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestId.setStatus('current')
atmfM4VpTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInUse", 1), ("inUse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestStatus.setStatus('current')
atmfM4VpTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 4), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestType.setStatus('current')
atmfM4VpTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpTestResult.setStatus('current')
atmfM4VpTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpTestCode.setStatus('current')
atmfM4VpTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 7), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestOwner.setStatus('current')
atmfM4VcTestTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 26), )
if mibBuilder.loadTexts: atmfM4VcTestTable.setStatus('current')
atmfM4VcTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-FORUM-M4-MIB", "atmfM4VcTestObject"))
if mibBuilder.loadTexts: atmfM4VcTestEntry.setStatus('current')
atmfM4VcTestObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vclTp", 1), ("vccTp", 2))))
if mibBuilder.loadTexts: atmfM4VcTestObject.setStatus('current')
atmfM4VcTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestId.setStatus('current')
atmfM4VcTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInUse", 1), ("inUse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestStatus.setStatus('current')
atmfM4VcTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 4), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestType.setStatus('current')
atmfM4VcTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcTestResult.setStatus('current')
atmfM4VcTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcTestCode.setStatus('current')
atmfM4VcTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 7), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestOwner.setStatus('current')
atmfM4EquipTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 28), )
if mibBuilder.loadTexts: atmfM4EquipTable.setStatus('current')
atmfM4EquipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: atmfM4EquipEntry.setStatus('current')
atmfM4EquipAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipAdminStatus.setStatus('current')
atmfM4EquipLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipLocation.setStatus('current')
atmfM4EquipOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipOperStatus.setStatus('current')
atmfM4EquipVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipVendor.setStatus('current')
atmfM4EquipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 5), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipVersion.setStatus('current')
atmfM4EquipUserLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipUserLabel.setStatus('current')
atmfM4EquipAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipAlarmSeverityIndex.setStatus('current')
atmfM4EquipHolderTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 29), )
if mibBuilder.loadTexts: atmfM4EquipHolderTable.setStatus('current')
atmfM4EquipHolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 29, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: atmfM4EquipHolderEntry.setStatus('current')
atmfM4EquipHolderType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rack", 1), ("shelf", 2), ("drawer", 3), ("slot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipHolderType.setStatus('current')
atmfM4EquipHolderAcceptableTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 29, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipHolderAcceptableTypes.setStatus('current')
atmfM4EquipHolderSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("empty", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipHolderSlotStatus.setStatus('current')
atmfM4EquipHolderSwLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipHolderSwLoad.setStatus('current')
atmfM4PlugInUnitTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 30), )
if mibBuilder.loadTexts: atmfM4PlugInUnitTable.setStatus('current')
atmfM4PlugInUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: atmfM4PlugInUnitEntry.setStatus('current')
atmfM4PlugInUnitAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4PlugInUnitAdminStatus.setStatus('current')
atmfM4PlugInUnitAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("available", 1), ("inTest", 2), ("failed", 3), ("powerOff", 4), ("notInstalled", 5), ("offLine", 6), ("dependency", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitAvailStatus.setStatus('current')
atmfM4PlugInUnitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitOperStatus.setStatus('current')
atmfM4PlugInUnitVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitVendor.setStatus('current')
atmfM4PlugInUnitVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 5), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitVersion.setStatus('current')
atmfM4PlugInUnitAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4PlugInUnitAlarmSeverityIndex.setStatus('current')
atmfM4HwRunningSwTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 32), )
if mibBuilder.loadTexts: atmfM4HwRunningSwTable.setStatus('current')
atmfM4HwRunningSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 32, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4HwRunningSwHwIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4HwRunningSwIndex"))
if mibBuilder.loadTexts: atmfM4HwRunningSwEntry.setStatus('current')
atmfM4HwRunningSwHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4HwRunningSwHwIndex.setStatus('current')
atmfM4HwRunningSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4HwRunningSwIndex.setStatus('current')
atmfM4HwRunningSwSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4HwRunningSwSwIndex.setStatus('current')
atmfM4HwInstalledSwTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 33), )
if mibBuilder.loadTexts: atmfM4HwInstalledSwTable.setStatus('current')
atmfM4HwInstalledSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 33, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4HwInstalledSwHwIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4HwInstalledSwIndex"))
if mibBuilder.loadTexts: atmfM4HwInstalledSwEntry.setStatus('current')
atmfM4HwInstalledSwHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4HwInstalledSwHwIndex.setStatus('current')
atmfM4HwInstalledSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4HwInstalledSwIndex.setStatus('current')
atmfM4HwInstalledSwSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4HwInstalledSwSwIndex.setStatus('current')
atmfM4HwSwAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 33, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4HwSwAlarmSeverityIndex.setStatus('current')
class AtmfM4AlarmLogSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))
    namedValues = NamedValues(("cleared", -1), ("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4))

class AtmfM4AlarmSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4))

atmfM4AlarmSevDefault = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 34), AtmfM4AlarmSeverity().clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4AlarmSevDefault.setStatus('current')
atmfM4AlarmSevProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4AlarmSevProfileIndexNext.setStatus('current')
atmfM4AlarmSevProfileTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 36), )
if mibBuilder.loadTexts: atmfM4AlarmSevProfileTable.setStatus('current')
atmfM4AlarmSevProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 36, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4AlarmSevProfileIndex"))
if mibBuilder.loadTexts: atmfM4AlarmSevProfileEntry.setStatus('current')
atmfM4AlarmSevProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 36, 1, 1), Integer32())
if mibBuilder.loadTexts: atmfM4AlarmSevProfileIndex.setStatus('current')
atmfM4AlarmSevProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 36, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4AlarmSevProfileRowStatus.setStatus('current')
atmfM4AlarmSevTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 37), )
if mibBuilder.loadTexts: atmfM4AlarmSevTable.setStatus('current')
atmfM4AlarmSevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 37, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4AlarmSevProfileIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4AlarmSevTrapId"))
if mibBuilder.loadTexts: atmfM4AlarmSevEntry.setStatus('current')
atmfM4AlarmSevTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 37, 1, 1), Integer32())
if mibBuilder.loadTexts: atmfM4AlarmSevTrapId.setStatus('current')
atmfM4AlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 37, 1, 2), AtmfM4AlarmSeverity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4AlarmSeverity.setStatus('current')
atmfM4ForwardAllTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 353, 100, 1, 38))
if mibBuilder.loadTexts: atmfM4ForwardAllTraps.setStatus('current')
atmfM4TrapForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 39), )
if mibBuilder.loadTexts: atmfM4TrapForwardingTable.setStatus('current')
atmfM4TrapForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4TrapForwardingIndex"))
if mibBuilder.loadTexts: atmfM4TrapForwardingEntry.setStatus('current')
atmfM4TrapForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 1), Integer32())
if mibBuilder.loadTexts: atmfM4TrapForwardingIndex.setStatus('current')
atmfM4TrapForwardingDest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapForwardingDest.setStatus('current')
atmfM4ForwardedTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4ForwardedTrapId.setStatus('current')
atmfM4ForwardedTrapObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 4), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4ForwardedTrapObject.setStatus('current')
atmfM4TrapForwardingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 5), Integer32().clone(161)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapForwardingPort.setStatus('current')
atmfM4LowestForwardedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 6), AtmfM4AlarmSeverity().clone('minor')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4LowestForwardedSeverity.setStatus('current')
atmfM4ForwardedIndeterminate = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4ForwardedIndeterminate.setStatus('current')
atmfM4TrapForwardingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapForwardingRowStatus.setStatus('current')
atmfM4TrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 40), )
if mibBuilder.loadTexts: atmfM4TrapLogTable.setStatus('current')
atmfM4TrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogSrc"), (0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogType"))
if mibBuilder.loadTexts: atmfM4TrapLogEntry.setStatus('current')
atmfM4TrapLogSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 1), IpAddress())
if mibBuilder.loadTexts: atmfM4TrapLogSrc.setStatus('current')
atmfM4TrapLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("objectCreated", 1), ("objectDeleted", 2), ("configChange", 3), ("stateChange", 4), ("alarm", 5))))
if mibBuilder.loadTexts: atmfM4TrapLogType.setStatus('current')
atmfM4TrapLogAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapLogAdminStatus.setStatus('current')
atmfM4TrapLogOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("logFull", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TrapLogOperStatus.setStatus('current')
atmfM4TrapLogFullAction = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halt", 1), ("wrap", 2))).clone('wrap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapLogFullAction.setStatus('current')
atmfM4TrapLogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapLogRowStatus.setStatus('current')
atmfM4LoggedTrapTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 41), )
if mibBuilder.loadTexts: atmfM4LoggedTrapTable.setStatus('current')
atmfM4LoggedTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogSrc"), (0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogType"), (0, "ATM-FORUM-M4-MIB", "atmfM4LoggedTrapIndex"))
if mibBuilder.loadTexts: atmfM4LoggedTrapEntry.setStatus('current')
atmfM4LoggedTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1, 1), Unsigned32())
if mibBuilder.loadTexts: atmfM4LoggedTrapIndex.setStatus('current')
atmfM4LoggedTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedTrapTime.setStatus('current')
atmfM4LoggedTrapID = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedTrapID.setStatus('current')
atmfM4LoggedTrapObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedTrapObject.setStatus('current')
atmfM4LoggedTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4LoggedTrapRowStatus.setStatus('current')
atmfM4LoggedAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 42), )
if mibBuilder.loadTexts: atmfM4LoggedAlarmTable.setStatus('current')
atmfM4LoggedAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogSrc"), (0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogType"), (0, "ATM-FORUM-M4-MIB", "atmfM4LoggedTrapIndex"))
if mibBuilder.loadTexts: atmfM4LoggedAlarmEntry.setStatus('current')
atmfM4LoggedAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1, 1), AtmfM4AlarmLogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmSeverity.setStatus('current')
atmfM4LoggedAlarmBackedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmBackedUp.setStatus('current')
atmfM4LoggedAlarmBUObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmBUObject.setStatus('current')
atmfM4LoggedAlarmSpecificProb = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmSpecificProb.setStatus('current')
atmfM4LoggedAlarmRepairAct = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmRepairAct.setStatus('current')
atmfM4TrapAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 43), AtmfM4AlarmLogSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmSeverity.setStatus('current')
atmfM4TrapAlarmBackedUp = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 44), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmBackedUp.setStatus('current')
atmfM4TrapAlarmBUObject = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 45), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmBUObject.setStatus('current')
atmfM4TrapAlarmSpecificProb = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 46), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmSpecificProb.setStatus('current')
atmfM4TrapAlarmRepairAct = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 47), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmRepairAct.setStatus('current')
atmfM4IfAisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 1)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfAisAlarm.setStatus('current')
atmfM4IfLcdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 2)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLcdAlarm.setStatus('current')
atmfM4IfLofAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 3)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLofAlarm.setStatus('current')
atmfM4IfLopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 4)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLopAlarm.setStatus('current')
atmfM4IfLosAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 5)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLosAlarm.setStatus('current')
atmfM4IfPayloadMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 6)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfPayloadMismatchAlarm.setStatus('current')
atmfM4IfXmissionErrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 7)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfXmissionErrAlarm.setStatus('current')
atmfM4IfPathTraceMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 8)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfPathTraceMismatchAlarm.setStatus('current')
atmfM4IfRdiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 9)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfRdiAlarm.setStatus('current')
atmfM4IfSignalLabelMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 10)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfSignalLabelMismatchAlarm.setStatus('current')
atmfM4HwLineCardAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 23)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwLineCardAlarm.setStatus('current')
atmfM4HwPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 25)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPowerAlarm.setStatus('current')
atmfM4HwPIUnitMissingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 29)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPIUnitMissingAlarm.setStatus('current')
atmfM4HwPIUnitProbAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 30)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPIUnitProbAlarm.setStatus('current')
atmfM4HwPIUnitMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 31)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPIUnitMismatchAlarm.setStatus('current')
atmfM4HwTimingProbAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 32)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwTimingProbAlarm.setStatus('current')
atmfM4HwSwDownloadFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 39)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwSwDownloadFailAlarm.setStatus('current')
atmfM4HwVersionMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 40)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwVersionMismatchAlarm.setStatus('current')
atmfM4HwFanFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 41)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwFanFailAlarm.setStatus('current')
atmfM4HwHighTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 44)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwHighTempAlarm.setStatus('current')
atmfM4SwVersionMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 45)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4HwInstalledSwIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4SwVersionMismatchAlarm.setStatus('current')
atmfM4HwUnitUp = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 54)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwUnitUp.setStatus('current')
atmfM4HwUnitDown = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 55)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwUnitDown.setStatus('current')
atmfM4AtmCellIfCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 56)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4IfType"))
if mibBuilder.loadTexts: atmfM4AtmCellIfCreated.setStatus('current')
atmfM4AtmCellIfDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 57)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4AtmCellIfDeleted.setStatus('current')
atmfM4HwUnitCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 66)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwUnitCreated.setStatus('current')
atmfM4HwUnitDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 67)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwUnitDeleted.setStatus('current')
atmfM4IfChanged = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 70)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4IfChanged.setStatus('current')
atmfM4Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 3, 1))
atmfM4Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 3, 2))
atmfM4Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 100, 3, 2, 1)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4General"), ("ATM-FORUM-M4-MIB", "atmfM4PhysPathTpGroup"), ("ATM-FORUM-M4-MIB", "atmfM4TcAdaptorGroup"), ("ATM-FORUM-M4-MIB", "atmfM4AtmLayerGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VplGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VclGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VpXConnGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VcXConnGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VpNextVpiGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VcNextVciGroup"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrGroup"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistGroup"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorGroup"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoCurrGroup"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoHistGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestGroup"), ("ATM-FORUM-M4-MIB", "atmfM4EquipGroup"), ("ATM-FORUM-M4-MIB", "atmfM4EquipHolderGroup"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitGroup"), ("ATM-FORUM-M4-MIB", "atmfM4HwRunningSwGroup"), ("ATM-FORUM-M4-MIB", "atmfM4HwInstalledSwGroup"), ("ATM-FORUM-M4-MIB", "atmfM4AlarmSevGroup"), ("ATM-FORUM-M4-MIB", "atmfM4TrapForwardingGroup"), ("ATM-FORUM-M4-MIB", "atmfM4TrapLogGroup"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedTrapGroup"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4Compliance = atmfM4Compliance.setStatus('current')
atmfM4General = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 1)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4NeVendor"), ("ATM-FORUM-M4-MIB", "atmfM4NeVersion"), ("ATM-FORUM-M4-MIB", "atmfM4NeStartTime"), ("ATM-FORUM-M4-MIB", "atmfM4NeAlarmSeverityIndex"), ("ATM-FORUM-M4-MIB", "atmfM4NeSuppressZeroStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4General = atmfM4General.setStatus('current')
atmfM4PhysPathTpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 2)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4PhysPathTpHwUnitIndex"), ("ATM-FORUM-M4-MIB", "atmfM4PhysPathTpPortID"), ("ATM-FORUM-M4-MIB", "atmfM4PhysPathTpAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4PhysPathTpGroup = atmfM4PhysPathTpGroup.setStatus('current')
atmfM4TcAdaptorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 3)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TcACellScrambling"), ("ATM-FORUM-M4-MIB", "atmfM4TcAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TcAdaptorGroup = atmfM4TcAdaptorGroup.setStatus('current')
atmfM4AtmLayerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 4)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4IfType"), ("ATM-FORUM-M4-MIB", "atmfM4IfLoopbackLocationCode"), ("ATM-FORUM-M4-MIB", "atmfM4IfSubscriberAddress"), ("ATM-FORUM-M4-MIB", "atmfM4IfPreferredCarrier"), ("ATM-FORUM-M4-MIB", "atmfM4IfFarEndCarrierNetwork"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4AtmLayerGroup = atmfM4AtmLayerGroup.setStatus('current')
atmfM4VplGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 5)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VplSegEndPt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VplGroup = atmfM4VplGroup.setStatus('current')
atmfM4VclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 6)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VclSegEndPt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VclGroup = atmfM4VclGroup.setStatus('current')
atmfM4VpXConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 7)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VpXConnRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpXConnGroup = atmfM4VpXConnGroup.setStatus('current')
atmfM4VcXConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 8)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VcXConnRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcXConnGroup = atmfM4VcXConnGroup.setStatus('current')
atmfM4VpNextVpiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 9)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VpNextVpiValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpNextVpiGroup = atmfM4VpNextVpiGroup.setStatus('current')
atmfM4VcNextVciGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 10)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VcNextVciValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcNextVciGroup = atmfM4VcNextVciGroup.setStatus('current')
atmfM4CellProtoCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 11)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrProtoErrors"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrInOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4CellProtoCurrGroup = atmfM4CellProtoCurrGroup.setStatus('current')
atmfM4CellProtoHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 12)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistProtoErrors"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistInOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4CellProtoHistGroup = atmfM4CellProtoHistGroup.setStatus('current')
atmfM4CellProtoErrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 13)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorTime"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorReason"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorVpi"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorVci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4CellProtoErrorGroup = atmfM4CellProtoErrorGroup.setStatus('current')
atmfM4TcProtoCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 14)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TcProtoCurrSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoCurrElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoCurrSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoCurrDiscardHECViol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TcProtoCurrGroup = atmfM4TcProtoCurrGroup.setStatus('current')
atmfM4TcProtoHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 15)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TcProtoHistSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoHistElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoHistSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoHistDiscardHECViol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TcProtoHistGroup = atmfM4TcProtoHistGroup.setStatus('current')
atmfM4VpUpcNpcCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 16)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrDiscardedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrDiscardedClp0"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrPassedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpUpcNpcCurrGroup = atmfM4VpUpcNpcCurrGroup.setStatus('current')
atmfM4VpUpcNpcHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 17)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistDiscardedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistDiscardedClp0"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistPassedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpUpcNpcHistGroup = atmfM4VpUpcNpcHistGroup.setStatus('current')
atmfM4VcUpcNpcCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 18)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrDiscardedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrDiscardedClp0"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrPassedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcUpcNpcCurrGroup = atmfM4VcUpcNpcCurrGroup.setStatus('current')
atmfM4VcUpcNpcHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 19)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistDiscardedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistDiscardedClp0"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistPassedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcUpcNpcHistGroup = atmfM4VcUpcNpcHistGroup.setStatus('current')
atmfM4VpTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 20)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VpTestId"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestStatus"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestType"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestResult"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestCode"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpTestGroup = atmfM4VpTestGroup.setStatus('current')
atmfM4VcTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 21)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VcTestId"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestStatus"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestType"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestResult"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestCode"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcTestGroup = atmfM4VcTestGroup.setStatus('current')
atmfM4EquipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 22)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4EquipAdminStatus"), ("ATM-FORUM-M4-MIB", "atmfM4EquipLocation"), ("ATM-FORUM-M4-MIB", "atmfM4EquipOperStatus"), ("ATM-FORUM-M4-MIB", "atmfM4EquipVendor"), ("ATM-FORUM-M4-MIB", "atmfM4EquipVersion"), ("ATM-FORUM-M4-MIB", "atmfM4EquipUserLabel"), ("ATM-FORUM-M4-MIB", "atmfM4EquipAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4EquipGroup = atmfM4EquipGroup.setStatus('current')
atmfM4EquipHolderGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 23)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4EquipHolderType"), ("ATM-FORUM-M4-MIB", "atmfM4EquipHolderAcceptableTypes"), ("ATM-FORUM-M4-MIB", "atmfM4EquipHolderSlotStatus"), ("ATM-FORUM-M4-MIB", "atmfM4EquipHolderSwLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4EquipHolderGroup = atmfM4EquipHolderGroup.setStatus('current')
atmfM4PlugInUnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 24)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitAdminStatus"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitAvailStatus"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitOperStatus"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitVendor"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitVersion"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4PlugInUnitGroup = atmfM4PlugInUnitGroup.setStatus('current')
atmfM4HwRunningSwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 25)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4HwRunningSwSwIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4HwRunningSwGroup = atmfM4HwRunningSwGroup.setStatus('current')
atmfM4HwInstalledSwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 26)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4HwInstalledSwSwIndex"), ("ATM-FORUM-M4-MIB", "atmfM4HwSwAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4HwInstalledSwGroup = atmfM4HwInstalledSwGroup.setStatus('current')
atmfM4AlarmSevGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 27)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4AlarmSevProfileRowStatus"), ("ATM-FORUM-M4-MIB", "atmfM4AlarmSeverity"), ("ATM-FORUM-M4-MIB", "atmfM4AlarmSevDefault"), ("ATM-FORUM-M4-MIB", "atmfM4AlarmSevProfileIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4AlarmSevGroup = atmfM4AlarmSevGroup.setStatus('current')
atmfM4TrapForwardingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 28)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TrapForwardingDest"), ("ATM-FORUM-M4-MIB", "atmfM4ForwardedTrapId"), ("ATM-FORUM-M4-MIB", "atmfM4ForwardedTrapObject"), ("ATM-FORUM-M4-MIB", "atmfM4TrapForwardingPort"), ("ATM-FORUM-M4-MIB", "atmfM4LowestForwardedSeverity"), ("ATM-FORUM-M4-MIB", "atmfM4ForwardedIndeterminate"), ("ATM-FORUM-M4-MIB", "atmfM4TrapForwardingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TrapForwardingGroup = atmfM4TrapForwardingGroup.setStatus('current')
atmfM4TrapLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 29)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TrapLogAdminStatus"), ("ATM-FORUM-M4-MIB", "atmfM4TrapLogOperStatus"), ("ATM-FORUM-M4-MIB", "atmfM4TrapLogFullAction"), ("ATM-FORUM-M4-MIB", "atmfM4TrapLogRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TrapLogGroup = atmfM4TrapLogGroup.setStatus('current')
atmfM4LoggedTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 30)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4LoggedTrapTime"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedTrapID"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedTrapObject"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedTrapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4LoggedTrapGroup = atmfM4LoggedTrapGroup.setStatus('current')
atmfM4LoggedAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 31)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmSeverity"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmBackedUp"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmBUObject"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmSpecificProb"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmRepairAct"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmBackedUp"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmBUObject"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSpecificProb"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmRepairAct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4LoggedAlarmGroup = atmfM4LoggedAlarmGroup.setStatus('current')
mibBuilder.exportSymbols("ATM-FORUM-M4-MIB", atmfM4TrapAlarmBackedUp=atmfM4TrapAlarmBackedUp, atmfM4VpNextVpiEntry=atmfM4VpNextVpiEntry, atmfM4CellProtoCurrElapsedTime=atmfM4CellProtoCurrElapsedTime, atmfM4EquipUserLabel=atmfM4EquipUserLabel, atmfM4VpTestOwner=atmfM4VpTestOwner, atmfM4LoggedTrapGroup=atmfM4LoggedTrapGroup, atmfM4IfFarEndCarrierNetwork=atmfM4IfFarEndCarrierNetwork, atmfM4VcTestType=atmfM4VcTestType, atmfM4AlarmSevTrapId=atmfM4AlarmSevTrapId, atmfM4VpUpcNpcHistSuspect=atmfM4VpUpcNpcHistSuspect, atmfM4CellProtoErrorReason=atmfM4CellProtoErrorReason, atmfM4VclSegEndPt=atmfM4VclSegEndPt, atmfM4TcProtoHistTable=atmfM4TcProtoHistTable, atmfM4EquipEntry=atmfM4EquipEntry, atmfM4EquipHolderEntry=atmfM4EquipHolderEntry, AtmfM4AlarmLogSeverity=AtmfM4AlarmLogSeverity, atmfM4HwTimingProbAlarm=atmfM4HwTimingProbAlarm, atmfM4AtmLayerGroup=atmfM4AtmLayerGroup, atmfM4PlugInUnitVendor=atmfM4PlugInUnitVendor, atmfM4NeVendor=atmfM4NeVendor, atmfM4TrapLogSrc=atmfM4TrapLogSrc, atmfM4CellProtoErrorCode=atmfM4CellProtoErrorCode, atmfM4AlarmSevProfileTable=atmfM4AlarmSevProfileTable, atmfM4CellProtoErrorVci=atmfM4CellProtoErrorVci, atmfM4TrapLogOperStatus=atmfM4TrapLogOperStatus, atmfM4VcUpcNpcCurrSupprIntvls=atmfM4VcUpcNpcCurrSupprIntvls, atmfM4EquipHolderType=atmfM4EquipHolderType, atmfM4LoggedTrapRowStatus=atmfM4LoggedTrapRowStatus, atmfM4VcUpcNpcCurrDiscardedClp0=atmfM4VcUpcNpcCurrDiscardedClp0, atmfM4HwUnitCreated=atmfM4HwUnitCreated, atmfM4VcUpcNpcHistPassedCells=atmfM4VcUpcNpcHistPassedCells, atmfM4HwRunningSwGroup=atmfM4HwRunningSwGroup, atmfM4IfPayloadMismatchAlarm=atmfM4IfPayloadMismatchAlarm, atmfM4VplSegEndPt=atmfM4VplSegEndPt, atmfM4VcUpcNpcCurrPassedClp0=atmfM4VcUpcNpcCurrPassedClp0, atmfM4TcProtoHistDiscardHECViol=atmfM4TcProtoHistDiscardHECViol, atmfM4TcAdaptorGroup=atmfM4TcAdaptorGroup, atmfM4VcUpcNpcCurrDiscardedCells=atmfM4VcUpcNpcCurrDiscardedCells, atmfM4VcTestEntry=atmfM4VcTestEntry, atmfM4VcUpcNpcHistDiscardedClp0=atmfM4VcUpcNpcHistDiscardedClp0, atmfM4VpTestId=atmfM4VpTestId, atmfM4VcTestStatus=atmfM4VcTestStatus, atmfM4LoggedTrapTable=atmfM4LoggedTrapTable, atmfM4IfLopAlarm=atmfM4IfLopAlarm, atmfM4VpUpcNpcCurrSupprIntvls=atmfM4VpUpcNpcCurrSupprIntvls, atmfM4Compliance=atmfM4Compliance, atmfM4IfLoopbackLocationCode=atmfM4IfLoopbackLocationCode, atmfM4VplGroup=atmfM4VplGroup, atmfM4LowestForwardedSeverity=atmfM4LowestForwardedSeverity, atmfM4TcAdaptorTable=atmfM4TcAdaptorTable, atmfM4VcTestCode=atmfM4VcTestCode, atmfM4VcUpcNpcHistSuspect=atmfM4VcUpcNpcHistSuspect, atmfM4AtmCellIfDeleted=atmfM4AtmCellIfDeleted, atmfM4PhysPathTpAlarmSeverityIndex=atmfM4PhysPathTpAlarmSeverityIndex, atmfM4TcProtoCurrTable=atmfM4TcProtoCurrTable, atmfM4VpUpcNpcHistTable=atmfM4VpUpcNpcHistTable, atmfM4NeStartTime=atmfM4NeStartTime, atmfM4TcProtoCurrSupprIntvls=atmfM4TcProtoCurrSupprIntvls, atmfM4VpUpcNpcHistDiscardedClp0=atmfM4VpUpcNpcHistDiscardedClp0, atmfM4VcUpcNpcHistPassedClp0=atmfM4VcUpcNpcHistPassedClp0, atmfM4HwPIUnitProbAlarm=atmfM4HwPIUnitProbAlarm, atmfM4VpTestGroup=atmfM4VpTestGroup, atmfM4VpXConnTable=atmfM4VpXConnTable, atmfM4AlarmSevGroup=atmfM4AlarmSevGroup, atmfM4CellProtoCurrTable=atmfM4CellProtoCurrTable, atmfM4VcUpcNpcCurrPassedCells=atmfM4VcUpcNpcCurrPassedCells, atmfM4General=atmfM4General, atmfM4VpXConnEntry=atmfM4VpXConnEntry, atmfM4Compliances=atmfM4Compliances, atmfM4AtmLayerTable=atmfM4AtmLayerTable, atmfM4AlarmSeverity=atmfM4AlarmSeverity, atmfM4EquipHolderSlotStatus=atmfM4EquipHolderSlotStatus, atmfM4TrapForwardingGroup=atmfM4TrapForwardingGroup, atmfM4HwPowerAlarm=atmfM4HwPowerAlarm, atmfM4AlarmSevEntry=atmfM4AlarmSevEntry, atmfM4AtmLayerEntry=atmfM4AtmLayerEntry, atmfM4EquipHolderAcceptableTypes=atmfM4EquipHolderAcceptableTypes, atmfM4PlugInUnitAlarmSeverityIndex=atmfM4PlugInUnitAlarmSeverityIndex, atmfM4IfPathTraceMismatchAlarm=atmfM4IfPathTraceMismatchAlarm, atmfM4VcTestObject=atmfM4VcTestObject, atmfM4VpUpcNpcHistEntry=atmfM4VpUpcNpcHistEntry, atmfM4VpTestStatus=atmfM4VpTestStatus, atmfM4EquipHolderGroup=atmfM4EquipHolderGroup, atmfM4ForwardAllTraps=atmfM4ForwardAllTraps, atmfM4VpUpcNpcHistIndex=atmfM4VpUpcNpcHistIndex, atmfM4TrapForwardingTable=atmfM4TrapForwardingTable, PYSNMP_MODULE_ID=atmfM4MIB, atmfM4TcProtoCurrSuspect=atmfM4TcProtoCurrSuspect, atmfM4TcProtoHistSuspect=atmfM4TcProtoHistSuspect, atmfM4ForwardedTrapObject=atmfM4ForwardedTrapObject, atmfM4LoggedAlarmSeverity=atmfM4LoggedAlarmSeverity, atmfM4EquipVendor=atmfM4EquipVendor, atmfM4HwPIUnitMissingAlarm=atmfM4HwPIUnitMissingAlarm, atmfM4HwFanFailAlarm=atmfM4HwFanFailAlarm, atmfM4HwInstalledSwHwIndex=atmfM4HwInstalledSwHwIndex, atmfM4PhysPathTpHwUnitIndex=atmfM4PhysPathTpHwUnitIndex, atmfM4HwInstalledSwTable=atmfM4HwInstalledSwTable, atmfM4TcProtoHistIndex=atmfM4TcProtoHistIndex, atmfM4TrapForwardingRowStatus=atmfM4TrapForwardingRowStatus, atmfM4TrapLogAdminStatus=atmfM4TrapLogAdminStatus, atmfM4PlugInUnitOperStatus=atmfM4PlugInUnitOperStatus, atmfM4PlugInUnitVersion=atmfM4PlugInUnitVersion, atmfM4IfLosAlarm=atmfM4IfLosAlarm, atmfM4VcTestId=atmfM4VcTestId, atmfM4VcXConnTable=atmfM4VcXConnTable, atmfM4VpTestCode=atmfM4VpTestCode, atmfM4HwSwAlarmSeverityIndex=atmfM4HwSwAlarmSeverityIndex, atmfM4LoggedAlarmTable=atmfM4LoggedAlarmTable, atmfM4IfChanged=atmfM4IfChanged, atmfM4CellProtoErrorVpi=atmfM4CellProtoErrorVpi, atmfM4VplEntry=atmfM4VplEntry, atmfM4HwRunningSwHwIndex=atmfM4HwRunningSwHwIndex, atmfM4TrapLogRowStatus=atmfM4TrapLogRowStatus, atmfM4CellProtoHistElapsedTime=atmfM4CellProtoHistElapsedTime, atmfM4EquipHolderSwLoad=atmfM4EquipHolderSwLoad, atmfM4VcUpcNpcHistGroup=atmfM4VcUpcNpcHistGroup, atmfM4LoggedTrapObject=atmfM4LoggedTrapObject, atmfM4TrapLogType=atmfM4TrapLogType, atmfM4NeVersion=atmfM4NeVersion, atmfM4VcNextVciValue=atmfM4VcNextVciValue, atmfM4CellProtoCurrEntry=atmfM4CellProtoCurrEntry, atmfM4HwInstalledSwSwIndex=atmfM4HwInstalledSwSwIndex, atmfM4TcProtoHistGroup=atmfM4TcProtoHistGroup, atmfM4VpUpcNpcHistSupprIntvls=atmfM4VpUpcNpcHistSupprIntvls, atmfM4VpTestResult=atmfM4VpTestResult, atmfM4LoggedAlarmBackedUp=atmfM4LoggedAlarmBackedUp, atmfM4NeSuppressZeroStats=atmfM4NeSuppressZeroStats, atmfM4LoggedAlarmEntry=atmfM4LoggedAlarmEntry, atmfM4HwInstalledSwGroup=atmfM4HwInstalledSwGroup, atmfM4VpUpcNpcCurrTable=atmfM4VpUpcNpcCurrTable, atmfM4TcACellScrambling=atmfM4TcACellScrambling, atmfM4CellProtoCurrSupprIntvls=atmfM4CellProtoCurrSupprIntvls, atmfM4AlarmSevDefault=atmfM4AlarmSevDefault, atmfM4VpUpcNpcHistGroup=atmfM4VpUpcNpcHistGroup, atmfM4CellProtoCurrGroup=atmfM4CellProtoCurrGroup, atmfM4MIB=atmfM4MIB, atmfM4TrapAlarmSpecificProb=atmfM4TrapAlarmSpecificProb, atmfM4VpTestTable=atmfM4VpTestTable, atmfM4HwRunningSwSwIndex=atmfM4HwRunningSwSwIndex, atmfM4CellProtoHistTable=atmfM4CellProtoHistTable, atmfM4IfSignalLabelMismatchAlarm=atmfM4IfSignalLabelMismatchAlarm, atmfM4HwUnitDeleted=atmfM4HwUnitDeleted, atmfM4VpTestEntry=atmfM4VpTestEntry, atmfM4SwVersionMismatchAlarm=atmfM4SwVersionMismatchAlarm, atmfM4VcNextVciGroup=atmfM4VcNextVciGroup, atmfM4HwVersionMismatchAlarm=atmfM4HwVersionMismatchAlarm, atmfM4VcUpcNpcCurrGroup=atmfM4VcUpcNpcCurrGroup, atmfM4ForwardedIndeterminate=atmfM4ForwardedIndeterminate, atmfM4CellProtoCurrSuspect=atmfM4CellProtoCurrSuspect, atmfM4VpXConnRecover=atmfM4VpXConnRecover, atmfM4VcUpcNpcHistTable=atmfM4VcUpcNpcHistTable, atmfM4CellProtoHistSuspect=atmfM4CellProtoHistSuspect, atmfM4VpTestType=atmfM4VpTestType, atmfM4MIBTraps=atmfM4MIBTraps, atmfM4CellProtoHistSupprIntvls=atmfM4CellProtoHistSupprIntvls, atmfM4EquipOperStatus=atmfM4EquipOperStatus, atmfM4MIBCompliance=atmfM4MIBCompliance, atmfM4LoggedTrapID=atmfM4LoggedTrapID, atmfM4EquipTable=atmfM4EquipTable, atmfM4TrapAlarmSeverity=atmfM4TrapAlarmSeverity, atmfM4VcUpcNpcCurrElapsedTime=atmfM4VcUpcNpcCurrElapsedTime, AtmfM4AlarmSeverity=AtmfM4AlarmSeverity, atmfM4VcUpcNpcCurrTable=atmfM4VcUpcNpcCurrTable, atmfM4AlarmSevTable=atmfM4AlarmSevTable, atmfM4TcProtoHistEntry=atmfM4TcProtoHistEntry, atmfM4TrapForwardingIndex=atmfM4TrapForwardingIndex, atmfM4VcUpcNpcHistDiscardedCells=atmfM4VcUpcNpcHistDiscardedCells, atmfM4VpUpcNpcCurrSuspect=atmfM4VpUpcNpcCurrSuspect, atmfM4LoggedAlarmBUObject=atmfM4LoggedAlarmBUObject, atmfM4EquipAdminStatus=atmfM4EquipAdminStatus, atmfM4VpNextVpiGroup=atmfM4VpNextVpiGroup, atmfM4CellProtoErrorTable=atmfM4CellProtoErrorTable, atmfM4VcXConnGroup=atmfM4VcXConnGroup, atmfM4VpUpcNpcCurrDiscardedCells=atmfM4VpUpcNpcCurrDiscardedCells, atmfM4IfRdiAlarm=atmfM4IfRdiAlarm, atmfM4CellProtoCurrProtoErrors=atmfM4CellProtoCurrProtoErrors, atmfM4EquipGroup=atmfM4EquipGroup, atmfM4LoggedAlarmGroup=atmfM4LoggedAlarmGroup, atmfM4VcUpcNpcHistIndex=atmfM4VcUpcNpcHistIndex, atmfM4VpTestObject=atmfM4VpTestObject, atmfM4VpUpcNpcCurrElapsedTime=atmfM4VpUpcNpcCurrElapsedTime, atmfM4CellProtoHistIndex=atmfM4CellProtoHistIndex, atmfM4LoggedTrapEntry=atmfM4LoggedTrapEntry, atmfM4PhysPathTpEntry=atmfM4PhysPathTpEntry, atmfM4VpUpcNpcCurrDiscardedClp0=atmfM4VpUpcNpcCurrDiscardedClp0, atmfM4HwInstalledSwIndex=atmfM4HwInstalledSwIndex, atmfM4VcNextVciTable=atmfM4VcNextVciTable, atmfM4PlugInUnitTable=atmfM4PlugInUnitTable, atmfM4VpXConnGroup=atmfM4VpXConnGroup, atmfM4LoggedTrapIndex=atmfM4LoggedTrapIndex, atmfM4IfAisAlarm=atmfM4IfAisAlarm, atmfM4CellProtoCurrInOAMCells=atmfM4CellProtoCurrInOAMCells, atmfM4CellProtoHistEntry=atmfM4CellProtoHistEntry, atmfM4IfXmissionErrAlarm=atmfM4IfXmissionErrAlarm, atmfM4LoggedTrapTime=atmfM4LoggedTrapTime, atmfM4HwUnitUp=atmfM4HwUnitUp, atmfM4TrapLogFullAction=atmfM4TrapLogFullAction, atmfM4VpNextVpiTable=atmfM4VpNextVpiTable, atmfM4VpUpcNpcCurrEntry=atmfM4VpUpcNpcCurrEntry, atmfM4HwRunningSwTable=atmfM4HwRunningSwTable, atmfM4HwRunningSwIndex=atmfM4HwRunningSwIndex, atmfM4EquipLocation=atmfM4EquipLocation, atmfM4PhysPathTpTable=atmfM4PhysPathTpTable, atmfM4VcXConnEntry=atmfM4VcXConnEntry, atmfM4TcProtoHistSupprIntvls=atmfM4TcProtoHistSupprIntvls, atmfM4VcUpcNpcHistEntry=atmfM4VcUpcNpcHistEntry, atmfM4PlugInUnitGroup=atmfM4PlugInUnitGroup, atmfM4TrapForwardingDest=atmfM4TrapForwardingDest, atmfM4PhysPathTpPortID=atmfM4PhysPathTpPortID, atmfM4TcAlarmSeverityIndex=atmfM4TcAlarmSeverityIndex, atmfM4HwInstalledSwEntry=atmfM4HwInstalledSwEntry, atmfM4IfLofAlarm=atmfM4IfLofAlarm, atmfM4CellProtoErrorTime=atmfM4CellProtoErrorTime, atmfM4AlarmSevProfileIndexNext=atmfM4AlarmSevProfileIndexNext, atmfM4EquipHolderTable=atmfM4EquipHolderTable, atmfM4TcProtoCurrGroup=atmfM4TcProtoCurrGroup, atmfM4AlarmSevProfileIndex=atmfM4AlarmSevProfileIndex, atmfM4TrapLogTable=atmfM4TrapLogTable, atmfM4VpUpcNpcCurrGroup=atmfM4VpUpcNpcCurrGroup, atmfM4CellProtoErrorGroup=atmfM4CellProtoErrorGroup, atmfM4VpUpcNpcHistPassedClp0=atmfM4VpUpcNpcHistPassedClp0, atmfM4LoggedAlarmSpecificProb=atmfM4LoggedAlarmSpecificProb, atmfM4HwLineCardAlarm=atmfM4HwLineCardAlarm, atmfM4VpUpcNpcHistDiscardedCells=atmfM4VpUpcNpcHistDiscardedCells, atmfM4TrapForwardingEntry=atmfM4TrapForwardingEntry, atmfM4PlugInUnitEntry=atmfM4PlugInUnitEntry, atmfM4IfSubscriberAddress=atmfM4IfSubscriberAddress, atmfM4NeAlarmSeverityIndex=atmfM4NeAlarmSeverityIndex, atmfM4TcProtoCurrElapsedTime=atmfM4TcProtoCurrElapsedTime, atmfM4IfType=atmfM4IfType, atmfM4AtmCellIfCreated=atmfM4AtmCellIfCreated, atmfM4VclGroup=atmfM4VclGroup, atmfM4TrapLogEntry=atmfM4TrapLogEntry, atmfM4CellProtoHistProtoErrors=atmfM4CellProtoHistProtoErrors, atmfM4VpUpcNpcCurrPassedCells=atmfM4VpUpcNpcCurrPassedCells, atmfM4CellProtoErrorEntry=atmfM4CellProtoErrorEntry, atmfM4HwRunningSwEntry=atmfM4HwRunningSwEntry, atmfM4AlarmSevProfileEntry=atmfM4AlarmSevProfileEntry, atmfM4HwPIUnitMismatchAlarm=atmfM4HwPIUnitMismatchAlarm, atmfM4VclEntry=atmfM4VclEntry, atmfM4VcUpcNpcHistSupprIntvls=atmfM4VcUpcNpcHistSupprIntvls, atmfM4VcTestOwner=atmfM4VcTestOwner, atmfM4ForwardedTrapId=atmfM4ForwardedTrapId, atmfM4VcUpcNpcCurrEntry=atmfM4VcUpcNpcCurrEntry, atmfM4LoggedAlarmRepairAct=atmfM4LoggedAlarmRepairAct, atmfM4Groups=atmfM4Groups, atmfM4VcTestGroup=atmfM4VcTestGroup, atmfM4TrapLogGroup=atmfM4TrapLogGroup, atmfM4CellProtoHistInOAMCells=atmfM4CellProtoHistInOAMCells, atmfM4VcUpcNpcHistElapsedTime=atmfM4VcUpcNpcHistElapsedTime, atmfM4HwHighTempAlarm=atmfM4HwHighTempAlarm, atmfM4HwUnitDown=atmfM4HwUnitDown, atmfM4VcTestTable=atmfM4VcTestTable, atmfM4VpNextVpiValue=atmfM4VpNextVpiValue)
mibBuilder.exportSymbols("ATM-FORUM-M4-MIB", atmfM4TestTypes=atmfM4TestTypes, atmfM4CellProtoHistGroup=atmfM4CellProtoHistGroup, atmfM4IfLcdAlarm=atmfM4IfLcdAlarm, atmfM4IfPreferredCarrier=atmfM4IfPreferredCarrier, atmfM4TestOAMLoopbackSeg=atmfM4TestOAMLoopbackSeg, atmfM4HwSwDownloadFailAlarm=atmfM4HwSwDownloadFailAlarm, atmfM4VpUpcNpcCurrPassedClp0=atmfM4VpUpcNpcCurrPassedClp0, atmfM4VcUpcNpcCurrSuspect=atmfM4VcUpcNpcCurrSuspect, atmfM4PlugInUnitAdminStatus=atmfM4PlugInUnitAdminStatus, atmfM4VcTestResult=atmfM4VcTestResult, atmfM4TrapAlarmRepairAct=atmfM4TrapAlarmRepairAct, atmfM4TcProtoHistElapsedTime=atmfM4TcProtoHistElapsedTime, atmfM4VpUpcNpcHistElapsedTime=atmfM4VpUpcNpcHistElapsedTime, atmfM4VpUpcNpcHistPassedCells=atmfM4VpUpcNpcHistPassedCells, atmfM4VplTable=atmfM4VplTable, atmfM4TcProtoCurrEntry=atmfM4TcProtoCurrEntry, atmfM4VcXConnRecover=atmfM4VcXConnRecover, atmfM4EquipVersion=atmfM4EquipVersion, atmfM4AlarmSevProfileRowStatus=atmfM4AlarmSevProfileRowStatus, atmfM4TestOAMLoopbackE2E=atmfM4TestOAMLoopbackE2E, atmfM4EquipAlarmSeverityIndex=atmfM4EquipAlarmSeverityIndex, atmfM4PlugInUnitAvailStatus=atmfM4PlugInUnitAvailStatus, atmfM4TrapAlarmBUObject=atmfM4TrapAlarmBUObject, atmfM4PhysPathTpGroup=atmfM4PhysPathTpGroup, atmfM4VclTable=atmfM4VclTable, atmfM4MIBObjects=atmfM4MIBObjects, atmfM4TcAdaptorEntry=atmfM4TcAdaptorEntry, atmfM4TcProtoCurrDiscardHECViol=atmfM4TcProtoCurrDiscardHECViol, atmfM4VcNextVciEntry=atmfM4VcNextVciEntry, atmfM4TrapForwardingPort=atmfM4TrapForwardingPort)
