#
# PySNMP MIB module HPN-ICF-LswQos-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-LswQos-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:27:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
hpnicflswCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicflswCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter64, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, TimeTicks, Bits, Unsigned32, Integer32, Counter32, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Bits", "Unsigned32", "Integer32", "Counter32", "NotificationType", "Gauge32")
RowStatus, DisplayString, MacAddress, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention", "TruthValue")
hpnicfLswQosAclMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16))
hpnicfLswQosAclMib.setRevisions(('2002-11-19 00:00',))
if mibBuilder.loadTexts: hpnicfLswQosAclMib.setLastUpdated('200211190000Z')
if mibBuilder.loadTexts: hpnicfLswQosAclMib.setOrganization('')
class HpnicfMirrorOrMonitorType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("port", 1), ("board", 2))

hpnicfLswQosMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2))
hpnicfPriorityTrustMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 0), ("dscp", 1), ("ipprecedence", 2), ("cos", 3), ("localprecedence", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPriorityTrustMode.setStatus('current')
hpnicfPortMonitorBothIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPortMonitorBothIfIndex.setStatus('current')
hpnicfQueueTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3), )
if mibBuilder.loadTexts: hpnicfQueueTable.setStatus('current')
hpnicfQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfQueueIfIndex"))
if mibBuilder.loadTexts: hpnicfQueueEntry.setStatus('current')
hpnicfQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQueueIfIndex.setStatus('current')
hpnicfQueueScheduleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sp", 1), ("wrr", 2), ("wrr-max-delay", 3), ("sc-0", 4), ("sc-1", 5), ("sc-2", 6), ("rr", 7), ("wfq", 8), ("hq-wrr", 9))).clone('sp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQueueScheduleMode.setStatus('current')
hpnicfQueueWeight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQueueWeight1.setStatus('current')
hpnicfQueueWeight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQueueWeight2.setStatus('current')
hpnicfQueueWeight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQueueWeight3.setStatus('current')
hpnicfQueueWeight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQueueWeight4.setStatus('current')
hpnicfQueueMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQueueMaxDelay.setStatus('current')
hpnicfQueueWeight5 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQueueWeight5.setStatus('current')
hpnicfQueueWeight6 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQueueWeight6.setStatus('current')
hpnicfQueueWeight7 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQueueWeight7.setStatus('current')
hpnicfQueueWeight8 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQueueWeight8.setStatus('current')
hpnicfRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4), )
if mibBuilder.loadTexts: hpnicfRateLimitTable.setStatus('current')
hpnicfRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfRateLimitAclIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRateLimitIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRateLimitVlanID"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRateLimitDirection"))
if mibBuilder.loadTexts: hpnicfRateLimitEntry.setStatus('current')
hpnicfRateLimitAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitAclIndex.setStatus('current')
hpnicfRateLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitIfIndex.setStatus('current')
hpnicfRateLimitVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitVlanID.setStatus('current')
hpnicfRateLimitDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitDirection.setStatus('current')
hpnicfRateLimitUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitUserAclNum.setStatus('current')
hpnicfRateLimitUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitUserAclRule.setStatus('current')
hpnicfRateLimitIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitIpAclNum.setStatus('current')
hpnicfRateLimitIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitIpAclRule.setStatus('current')
hpnicfRateLimitLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitLinkAclNum.setStatus('current')
hpnicfRateLimitLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitLinkAclRule.setStatus('current')
hpnicfRateLimitTargetRateMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitTargetRateMbps.setStatus('current')
hpnicfRateLimitTargetRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitTargetRateKbps.setStatus('current')
hpnicfRateLimitPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 8388608), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitPeakRate.setStatus('current')
hpnicfRateLimitCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34120000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitCIR.setStatus('current')
hpnicfRateLimitCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitCBS.setStatus('current')
hpnicfRateLimitEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 268435455))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitEBS.setStatus('current')
hpnicfRateLimitPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34120000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitPIR.setStatus('current')
hpnicfRateLimitConformLocalPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 18), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitConformLocalPre.setStatus('current')
hpnicfRateLimitConformActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("remark-cos", 1), ("remark-drop-priority", 2), ("remark-cos-drop-priority", 3), ("remark-policed-service", 4), ("remark-dscp", 5))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitConformActionType.setStatus('current')
hpnicfRateLimitExceedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("forward", 1), ("drop", 2), ("remarkdscp", 3), ("exceed-cos", 4))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitExceedActionType.setStatus('current')
hpnicfRateLimitExceedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitExceedDscp.setStatus('current')
hpnicfRateLimitRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRateLimitRuntime.setStatus('current')
hpnicfRateLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitRowStatus.setStatus('current')
hpnicfRateLimitExceedCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 24), Integer32().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitExceedCos.setStatus('current')
hpnicfRateLimitConformCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitConformCos.setStatus('current')
hpnicfRateLimitConformDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitConformDscp.setStatus('current')
hpnicfRateLimitMeterStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRateLimitMeterStatByteCount.setStatus('current')
hpnicfRateLimitMeterStatByteXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRateLimitMeterStatByteXCount.setStatus('current')
hpnicfRateLimitMeterStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("set", 1), ("unDo", 2), ("reset", 3), ("running", 4), ("notRunning", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRateLimitMeterStatState.setStatus('current')
hpnicfPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5), )
if mibBuilder.loadTexts: hpnicfPriorityTable.setStatus('current')
hpnicfPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfPriorityAclIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfPriorityIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfPriorityVlanID"), (0, "HPN-ICF-LswQos-MIB", "hpnicfPriorityDirection"))
if mibBuilder.loadTexts: hpnicfPriorityEntry.setStatus('current')
hpnicfPriorityAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityAclIndex.setStatus('current')
hpnicfPriorityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityIfIndex.setStatus('current')
hpnicfPriorityVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityVlanID.setStatus('current')
hpnicfPriorityDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityDirection.setStatus('current')
hpnicfPriorityUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityUserAclNum.setStatus('current')
hpnicfPriorityUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityUserAclRule.setStatus('current')
hpnicfPriorityIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityIpAclNum.setStatus('current')
hpnicfPriorityIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityIpAclRule.setStatus('current')
hpnicfPriorityLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityLinkAclNum.setStatus('current')
hpnicfPriorityLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityLinkAclRule.setStatus('current')
hpnicfPriorityDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityDscp.setStatus('current')
hpnicfPriorityIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityIpPre.setStatus('current')
hpnicfPriorityIpPreFromCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 13), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityIpPreFromCos.setStatus('current')
hpnicfPriorityCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityCos.setStatus('current')
hpnicfPriorityCosFromIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 15), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityCosFromIpPre.setStatus('current')
hpnicfPriorityLocalPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityLocalPre.setStatus('current')
hpnicfPriorityPolicedServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("auto", 1), ("trust-dscp", 2), ("new-dscp", 3), ("untrusted", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityPolicedServiceType.setStatus('current')
hpnicfPriorityPolicedServiceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityPolicedServiceDscp.setStatus('current')
hpnicfPriorityPolicedServiceExp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityPolicedServiceExp.setStatus('current')
hpnicfPriorityPolicedServiceCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityPolicedServiceCos.setStatus('current')
hpnicfPriorityPolicedServiceLoaclPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityPolicedServiceLoaclPre.setStatus('current')
hpnicfPriorityPolicedServiceDropPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityPolicedServiceDropPriority.setStatus('current')
hpnicfPriorityRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPriorityRuntime.setStatus('current')
hpnicfPriorityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 5, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPriorityRowStatus.setStatus('current')
hpnicfRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6), )
if mibBuilder.loadTexts: hpnicfRedirectTable.setStatus('current')
hpnicfRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfRedirectAclIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRedirectIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRedirectVlanID"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRedirectDirection"))
if mibBuilder.loadTexts: hpnicfRedirectEntry.setStatus('current')
hpnicfRedirectAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectAclIndex.setStatus('current')
hpnicfRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectIfIndex.setStatus('current')
hpnicfRedirectVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectVlanID.setStatus('current')
hpnicfRedirectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectDirection.setStatus('current')
hpnicfRedirectUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectUserAclNum.setStatus('current')
hpnicfRedirectUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectUserAclRule.setStatus('current')
hpnicfRedirectIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectIpAclNum.setStatus('current')
hpnicfRedirectIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectIpAclRule.setStatus('current')
hpnicfRedirectLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectLinkAclNum.setStatus('current')
hpnicfRedirectLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectLinkAclRule.setStatus('current')
hpnicfRedirectToCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 11), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectToCpu.setStatus('current')
hpnicfRedirectToIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectToIfIndex.setStatus('current')
hpnicfRedirectToNextHop1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectToNextHop1.setStatus('current')
hpnicfRedirectToNextHop2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectToNextHop2.setStatus('current')
hpnicfRedirectRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRedirectRuntime.setStatus('current')
hpnicfRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectRowStatus.setStatus('current')
hpnicfRedirectToSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectToSlotNo.setStatus('current')
hpnicfRedirectRemarkedDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectRemarkedDSCP.setStatus('current')
hpnicfRedirectRemarkedPri = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectRemarkedPri.setStatus('current')
hpnicfRedirectRemarkedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectRemarkedTos.setStatus('current')
hpnicfRedirectToNextHop3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectToNextHop3.setStatus('current')
hpnicfRedirectTargetVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectTargetVlanID.setStatus('current')
hpnicfRedirectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict-priority", 1), ("load-balance", 2))).clone('strict-priority')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectMode.setStatus('current')
hpnicfRedirectToNestedVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectToNestedVlanID.setStatus('current')
hpnicfRedirectToModifiedVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 6, 1, 25), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedirectToModifiedVlanID.setStatus('current')
hpnicfStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7), )
if mibBuilder.loadTexts: hpnicfStatisticTable.setStatus('current')
hpnicfStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfStatisticAclIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfStatisticIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfStatisticVlanID"), (0, "HPN-ICF-LswQos-MIB", "hpnicfStatisticDirection"))
if mibBuilder.loadTexts: hpnicfStatisticEntry.setStatus('current')
hpnicfStatisticAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticAclIndex.setStatus('current')
hpnicfStatisticIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticIfIndex.setStatus('current')
hpnicfStatisticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticVlanID.setStatus('current')
hpnicfStatisticDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticDirection.setStatus('current')
hpnicfStatisticUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticUserAclNum.setStatus('current')
hpnicfStatisticUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticUserAclRule.setStatus('current')
hpnicfStatisticIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticIpAclNum.setStatus('current')
hpnicfStatisticIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticIpAclRule.setStatus('current')
hpnicfStatisticLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticLinkAclNum.setStatus('current')
hpnicfStatisticLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticLinkAclRule.setStatus('current')
hpnicfStatisticRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStatisticRuntime.setStatus('current')
hpnicfStatisticPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStatisticPacketCount.setStatus('current')
hpnicfStatisticByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStatisticByteCount.setStatus('current')
hpnicfStatisticCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfStatisticCountClear.setStatus('current')
hpnicfStatisticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfStatisticRowStatus.setStatus('current')
hpnicfStatisticPacketXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStatisticPacketXCount.setStatus('current')
hpnicfStatisticByteXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStatisticByteXCount.setStatus('current')
hpnicfMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8), )
if mibBuilder.loadTexts: hpnicfMirrorTable.setStatus('current')
hpnicfMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfMirrorAclIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfMirrorIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfMirrorVlanID"), (0, "HPN-ICF-LswQos-MIB", "hpnicfMirrorDirection"))
if mibBuilder.loadTexts: hpnicfMirrorEntry.setStatus('current')
hpnicfMirrorAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorAclIndex.setStatus('current')
hpnicfMirrorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorIfIndex.setStatus('current')
hpnicfMirrorVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorVlanID.setStatus('current')
hpnicfMirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorDirection.setStatus('current')
hpnicfMirrorUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorUserAclNum.setStatus('current')
hpnicfMirrorUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorUserAclRule.setStatus('current')
hpnicfMirrorIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorIpAclNum.setStatus('current')
hpnicfMirrorIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorIpAclRule.setStatus('current')
hpnicfMirrorLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorLinkAclNum.setStatus('current')
hpnicfMirrorLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorLinkAclRule.setStatus('current')
hpnicfMirrorToIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorToIfIndex.setStatus('current')
hpnicfMirrorToCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorToCpu.setStatus('current')
hpnicfMirrorRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMirrorRuntime.setStatus('current')
hpnicfMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorRowStatus.setStatus('current')
hpnicfMirrorToGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 8, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorToGroup.setStatus('current')
hpnicfPortMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 9), )
if mibBuilder.loadTexts: hpnicfPortMirrorTable.setStatus('current')
hpnicfPortMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 9, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfPortMirrorIfIndex"))
if mibBuilder.loadTexts: hpnicfPortMirrorEntry.setStatus('current')
hpnicfPortMirrorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 9, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPortMirrorIfIndex.setStatus('current')
hpnicfPortMirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPortMirrorDirection.setStatus('current')
hpnicfPortMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPortMirrorRowStatus.setStatus('current')
hpnicfLineRateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 10), )
if mibBuilder.loadTexts: hpnicfLineRateTable.setStatus('current')
hpnicfLineRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 10, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfLineRateIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfLineRateDirection"))
if mibBuilder.loadTexts: hpnicfLineRateEntry.setStatus('current')
hpnicfLineRateIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 10, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfLineRateIfIndex.setStatus('current')
hpnicfLineRateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfLineRateDirection.setStatus('current')
hpnicfLineRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 10, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfLineRateValue.setStatus('current')
hpnicfLineRateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfLineRateRowStatus.setStatus('current')
hpnicfBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11), )
if mibBuilder.loadTexts: hpnicfBandwidthTable.setStatus('current')
hpnicfBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfBandwidthAclIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfBandwidthIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfBandwidthVlanID"), (0, "HPN-ICF-LswQos-MIB", "hpnicfBandwidthDirection"))
if mibBuilder.loadTexts: hpnicfBandwidthEntry.setStatus('current')
hpnicfBandwidthAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfBandwidthAclIndex.setStatus('current')
hpnicfBandwidthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfBandwidthIfIndex.setStatus('current')
hpnicfBandwidthVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfBandwidthVlanID.setStatus('current')
hpnicfBandwidthDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("invalid", 0), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfBandwidthDirection.setStatus('current')
hpnicfBandwidthIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfBandwidthIpAclNum.setStatus('current')
hpnicfBandwidthIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfBandwidthIpAclRule.setStatus('current')
hpnicfBandwidthLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfBandwidthLinkAclNum.setStatus('current')
hpnicfBandwidthLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfBandwidthLinkAclRule.setStatus('current')
hpnicfBandwidthMinGuaranteedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8388608))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfBandwidthMinGuaranteedWidth.setStatus('current')
hpnicfBandwidthMaxGuaranteedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8388608))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfBandwidthMaxGuaranteedWidth.setStatus('current')
hpnicfBandwidthWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfBandwidthWeight.setStatus('current')
hpnicfBandwidthRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfBandwidthRuntime.setStatus('current')
hpnicfBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 11, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfBandwidthRowStatus.setStatus('current')
hpnicfRedTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12), )
if mibBuilder.loadTexts: hpnicfRedTable.setStatus('current')
hpnicfRedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfRedAclIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRedIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRedVlanID"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRedDirection"))
if mibBuilder.loadTexts: hpnicfRedEntry.setStatus('current')
hpnicfRedAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedAclIndex.setStatus('current')
hpnicfRedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedIfIndex.setStatus('current')
hpnicfRedVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedVlanID.setStatus('current')
hpnicfRedDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("invalid", 0), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedDirection.setStatus('current')
hpnicfRedIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedIpAclNum.setStatus('current')
hpnicfRedIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedIpAclRule.setStatus('current')
hpnicfRedLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedLinkAclNum.setStatus('current')
hpnicfRedLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRedLinkAclRule.setStatus('current')
hpnicfRedStartQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRedStartQueueLen.setStatus('current')
hpnicfRedStopQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRedStopQueueLen.setStatus('current')
hpnicfRedProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRedProbability.setStatus('current')
hpnicfRedRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRedRuntime.setStatus('current')
hpnicfRedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 12, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRedRowStatus.setStatus('current')
hpnicfMirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 13), )
if mibBuilder.loadTexts: hpnicfMirrorGroupTable.setStatus('current')
hpnicfMirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 13, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfMirrorGroupID"))
if mibBuilder.loadTexts: hpnicfMirrorGroupEntry.setStatus('current')
hpnicfMirrorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMirrorGroupID.setStatus('current')
hpnicfMirrorGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMirrorGroupDirection.setStatus('current')
hpnicfMirrorGroupMirrorIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 257))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMirrorGroupMirrorIfIndexList.setStatus('current')
hpnicfMirrorGroupMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 13, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMirrorGroupMonitorIfIndex.setStatus('current')
hpnicfMirrorGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 13, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMirrorGroupRowStatus.setStatus('current')
hpnicfFlowtempTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14), )
if mibBuilder.loadTexts: hpnicfFlowtempTable.setStatus('current')
hpnicfFlowtempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfFlowtempIndex"))
if mibBuilder.loadTexts: hpnicfFlowtempEntry.setStatus('current')
hpnicfFlowtempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("user-defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFlowtempIndex.setStatus('current')
hpnicfFlowtempIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempIpProtocol.setStatus('current')
hpnicfFlowtempTcpFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempTcpFlag.setStatus('current')
hpnicfFlowtempSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempSPort.setStatus('current')
hpnicfFlowtempDPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempDPort.setStatus('current')
hpnicfFlowtempIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempIcmpType.setStatus('current')
hpnicfFlowtempIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempIcmpCode.setStatus('current')
hpnicfFlowtempFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempFragment.setStatus('current')
hpnicfFlowtempDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempDscp.setStatus('current')
hpnicfFlowtempIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempIpPre.setStatus('current')
hpnicfFlowtempTos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempTos.setStatus('current')
hpnicfFlowtempSIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempSIp.setStatus('current')
hpnicfFlowtempSIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempSIpMask.setStatus('current')
hpnicfFlowtempDIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempDIp.setStatus('current')
hpnicfFlowtempDIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempDIpMask.setStatus('current')
hpnicfFlowtempEthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempEthProtocol.setStatus('current')
hpnicfFlowtempSMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempSMac.setStatus('current')
hpnicfFlowtempSMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 18), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempSMacMask.setStatus('current')
hpnicfFlowtempDMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempDMac.setStatus('current')
hpnicfFlowtempDMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 20), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempDMacMask.setStatus('current')
hpnicfFlowtempVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempVpn.setStatus('current')
hpnicfFlowtempRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempRowStatus.setStatus('current')
hpnicfFlowtempVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempVlanId.setStatus('current')
hpnicfFlowtempCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 14, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempCos.setStatus('current')
hpnicfFlowtempEnableTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 15), )
if mibBuilder.loadTexts: hpnicfFlowtempEnableTable.setStatus('current')
hpnicfFlowtempEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 15, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfFlowtempEnableIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfFlowtempEnableVlanID"))
if mibBuilder.loadTexts: hpnicfFlowtempEnableEntry.setStatus('current')
hpnicfFlowtempEnableIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 15, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempEnableIfIndex.setStatus('current')
hpnicfFlowtempEnableVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFlowtempEnableVlanID.setStatus('current')
hpnicfFlowtempEnableFlowtempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("user-defined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfFlowtempEnableFlowtempIndex.setStatus('current')
hpnicfTrafficShapeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 16), )
if mibBuilder.loadTexts: hpnicfTrafficShapeTable.setStatus('current')
hpnicfTrafficShapeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 16, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfTrafficShapeIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfTrafficShapeQueueId"))
if mibBuilder.loadTexts: hpnicfTrafficShapeEntry.setStatus('current')
hpnicfTrafficShapeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 16, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTrafficShapeIfIndex.setStatus('current')
hpnicfTrafficShapeQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTrafficShapeQueueId.setStatus('current')
hpnicfTrafficShapeMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTrafficShapeMaxRate.setStatus('current')
hpnicfTrafficShapeBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 16, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTrafficShapeBurstSize.setStatus('current')
hpnicfTrafficShapeBufferLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 8000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTrafficShapeBufferLimit.setStatus('current')
hpnicfTrafficShapeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTrafficShapeRowStatus.setStatus('current')
hpnicfPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 17), )
if mibBuilder.loadTexts: hpnicfPortQueueTable.setStatus('current')
hpnicfPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 17, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfPortQueueIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfPortQueueQueueID"))
if mibBuilder.loadTexts: hpnicfPortQueueEntry.setStatus('current')
hpnicfPortQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPortQueueIfIndex.setStatus('current')
hpnicfPortQueueQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPortQueueQueueID.setStatus('current')
hpnicfPortQueueWrrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sp", 1), ("wrr-high-priority", 2), ("wrr-low-priority", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPortQueueWrrPriority.setStatus('current')
hpnicfPortQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPortQueueWeight.setStatus('current')
hpnicfDropModeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 18), )
if mibBuilder.loadTexts: hpnicfDropModeTable.setStatus('current')
hpnicfDropModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 18, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfDropModeIfIndex"))
if mibBuilder.loadTexts: hpnicfDropModeEntry.setStatus('current')
hpnicfDropModeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDropModeIfIndex.setStatus('current')
hpnicfDropModeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("random-detect", 1), ("tail-drop", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDropModeMode.setStatus('current')
hpnicfDropModeWredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDropModeWredIndex.setStatus('current')
hpnicfWredTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19), )
if mibBuilder.loadTexts: hpnicfWredTable.setStatus('current')
hpnicfWredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfWredIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfWredQueueId"))
if mibBuilder.loadTexts: hpnicfWredEntry.setStatus('current')
hpnicfWredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWredIndex.setStatus('current')
hpnicfWredQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWredQueueId.setStatus('current')
hpnicfWredGreenMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWredGreenMinThreshold.setStatus('current')
hpnicfWredGreenMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWredGreenMaxThreshold.setStatus('current')
hpnicfWredGreenMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWredGreenMaxProb.setStatus('current')
hpnicfWredYellowMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWredYellowMinThreshold.setStatus('current')
hpnicfWredYellowMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWredYellowMaxThreshold.setStatus('current')
hpnicfWredYellowMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWredYellowMaxProb.setStatus('current')
hpnicfWredRedMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWredRedMinThreshold.setStatus('current')
hpnicfWredRedMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWredRedMaxThreshold.setStatus('current')
hpnicfWredRedMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWredRedMaxProb.setStatus('current')
hpnicfWredExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 19, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWredExponent.setStatus('current')
hpnicfCosToLocalPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 20), )
if mibBuilder.loadTexts: hpnicfCosToLocalPrecedenceMapTable.setStatus('current')
hpnicfCosToLocalPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 20, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfCosToLocalPrecedenceMapCosIndex"))
if mibBuilder.loadTexts: hpnicfCosToLocalPrecedenceMapEntry.setStatus('current')
hpnicfCosToLocalPrecedenceMapCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCosToLocalPrecedenceMapCosIndex.setStatus('current')
hpnicfCosToLocalPrecedenceMapLocalPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCosToLocalPrecedenceMapLocalPrecedenceValue.setStatus('current')
hpnicfCosToDropPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 21), )
if mibBuilder.loadTexts: hpnicfCosToDropPrecedenceMapTable.setStatus('current')
hpnicfCosToDropPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 21, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfCosToDropPrecedenceMapCosIndex"))
if mibBuilder.loadTexts: hpnicfCosToDropPrecedenceMapEntry.setStatus('current')
hpnicfCosToDropPrecedenceMapCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCosToDropPrecedenceMapCosIndex.setStatus('current')
hpnicfCosToDropPrecedenceMapDropPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCosToDropPrecedenceMapDropPrecedenceValue.setStatus('current')
hpnicfDscpMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 22), )
if mibBuilder.loadTexts: hpnicfDscpMapTable.setStatus('current')
hpnicfDscpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 22, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfDscpMapConformLevel"), (0, "HPN-ICF-LswQos-MIB", "hpnicfDscpMapDscpIndex"))
if mibBuilder.loadTexts: hpnicfDscpMapEntry.setStatus('current')
hpnicfDscpMapConformLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDscpMapConformLevel.setStatus('current')
hpnicfDscpMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDscpMapDscpIndex.setStatus('current')
hpnicfDscpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpMapDscpValue.setStatus('current')
hpnicfDscpMapExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpMapExpValue.setStatus('current')
hpnicfDscpMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpMapCosValue.setStatus('current')
hpnicfDscpMapLocalPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 22, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpMapLocalPrecedence.setStatus('current')
hpnicfDscpMapDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 22, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpMapDropPrecedence.setStatus('current')
hpnicfExpMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 23), )
if mibBuilder.loadTexts: hpnicfExpMapTable.setStatus('current')
hpnicfExpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 23, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfExpMapConformLevel"), (0, "HPN-ICF-LswQos-MIB", "hpnicfExpMapExpIndex"))
if mibBuilder.loadTexts: hpnicfExpMapEntry.setStatus('current')
hpnicfExpMapConformLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfExpMapConformLevel.setStatus('current')
hpnicfExpMapExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfExpMapExpIndex.setStatus('current')
hpnicfExpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfExpMapDscpValue.setStatus('current')
hpnicfExpMapExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfExpMapExpValue.setStatus('current')
hpnicfExpMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfExpMapCosValue.setStatus('current')
hpnicfExpMapLocalPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 23, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfExpMapLocalPrecedence.setStatus('current')
hpnicfExpMapDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 23, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfExpMapDropPrecedence.setStatus('current')
hpnicfLocalPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 24), )
if mibBuilder.loadTexts: hpnicfLocalPrecedenceMapTable.setStatus('current')
hpnicfLocalPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 24, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfLocalPrecedenceMapConformLevel"), (0, "HPN-ICF-LswQos-MIB", "hpnicfLocalPrecedenceMapLocalPrecedenceIndex"))
if mibBuilder.loadTexts: hpnicfLocalPrecedenceMapEntry.setStatus('current')
hpnicfLocalPrecedenceMapConformLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfLocalPrecedenceMapConformLevel.setStatus('current')
hpnicfLocalPrecedenceMapLocalPrecedenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfLocalPrecedenceMapLocalPrecedenceIndex.setStatus('current')
hpnicfLocalPrecedenceMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfLocalPrecedenceMapCosValue.setStatus('current')
hpnicfPortWredTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 25), )
if mibBuilder.loadTexts: hpnicfPortWredTable.setStatus('current')
hpnicfPortWredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 25, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfPortWredIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfPortWredQueueID"))
if mibBuilder.loadTexts: hpnicfPortWredEntry.setStatus('current')
hpnicfPortWredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPortWredIfIndex.setStatus('current')
hpnicfPortWredQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPortWredQueueID.setStatus('current')
hpnicfPortWredQueueStartLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPortWredQueueStartLength.setStatus('current')
hpnicfPortWredQueueProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 25, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPortWredQueueProbability.setStatus('current')
hpnicfMirroringGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 26), )
if mibBuilder.loadTexts: hpnicfMirroringGroupTable.setStatus('current')
hpnicfMirroringGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 26, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfMirroringGroupID"))
if mibBuilder.loadTexts: hpnicfMirroringGroupEntry.setStatus('current')
hpnicfMirroringGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: hpnicfMirroringGroupID.setStatus('current')
hpnicfMirroringGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote-source", 2), ("remote-destination", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupType.setStatus('current')
hpnicfMirroringGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMirroringGroupStatus.setStatus('current')
hpnicfMirroringGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 26, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupRowStatus.setStatus('current')
hpnicfMirroringGroupMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 27), )
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorTable.setStatus('current')
hpnicfMirroringGroupMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 27, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfMirroringGroupID"))
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorEntry.setStatus('current')
hpnicfMirroringGroupMirrorInboundIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 27, 1, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorInboundIfIndexList.setStatus('current')
hpnicfMirroringGroupMirrorOutboundIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 27, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorOutboundIfIndexList.setStatus('current')
hpnicfMirroringGroupMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 27, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorRowStatus.setStatus('current')
hpnicfMirroringGroupMirrorInTypeList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 27, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorInTypeList.setStatus('current')
hpnicfMirroringGroupMirrorOutTypeList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 27, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorOutTypeList.setStatus('current')
hpnicfMirroringGroupMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 28), )
if mibBuilder.loadTexts: hpnicfMirroringGroupMonitorTable.setStatus('current')
hpnicfMirroringGroupMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 28, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfMirroringGroupID"))
if mibBuilder.loadTexts: hpnicfMirroringGroupMonitorEntry.setStatus('current')
hpnicfMirroringGroupMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 28, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMonitorIfIndex.setStatus('current')
hpnicfMirroringGroupMonitorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 28, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMonitorRowStatus.setStatus('current')
hpnicfMirroringGroupMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 28, 1, 3), HpnicfMirrorOrMonitorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMonitorType.setStatus('current')
hpnicfMirroringGroupReflectorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 29), )
if mibBuilder.loadTexts: hpnicfMirroringGroupReflectorTable.setStatus('current')
hpnicfMirroringGroupReflectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 29, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfMirroringGroupID"))
if mibBuilder.loadTexts: hpnicfMirroringGroupReflectorEntry.setStatus('current')
hpnicfMirroringGroupReflectorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 29, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupReflectorIfIndex.setStatus('current')
hpnicfMirroringGroupReflectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 29, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupReflectorRowStatus.setStatus('current')
hpnicfMirroringGroupRprobeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 30), )
if mibBuilder.loadTexts: hpnicfMirroringGroupRprobeVlanTable.setStatus('current')
hpnicfMirroringGroupRprobeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 30, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfMirroringGroupID"))
if mibBuilder.loadTexts: hpnicfMirroringGroupRprobeVlanEntry.setStatus('current')
hpnicfMirroringGroupRprobeVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupRprobeVlanID.setStatus('current')
hpnicfMirroringGroupRprobeVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupRprobeVlanRowStatus.setStatus('current')
hpnicfMirroringGroupMirrorMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 31), )
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorMacTable.setStatus('current')
hpnicfMirroringGroupMirrorMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 31, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfMirroringGroupID"), (0, "HPN-ICF-LswQos-MIB", "hpnicfMirroringGroupMirrorMacSeq"))
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorMacEntry.setStatus('current')
hpnicfMirroringGroupMirrorMacSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 31, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorMacSeq.setStatus('current')
hpnicfMirroringGroupMirrorMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 31, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorMac.setStatus('current')
hpnicfMirrorMacVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirrorMacVlanID.setStatus('current')
hpnicfMirroringGroupMirroMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 31, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMirroMacStatus.setStatus('current')
hpnicfMirroringGroupMirrorVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 32), )
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorVlanTable.setStatus('current')
hpnicfMirroringGroupMirrorVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 32, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfMirroringGroupID"), (0, "HPN-ICF-LswQos-MIB", "hpnicfMirroringGroupMirrorVlanSeq"))
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorVlanEntry.setStatus('current')
hpnicfMirroringGroupMirrorVlanSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 32, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorVlanSeq.setStatus('current')
hpnicfMirroringGroupMirrorVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorVlanID.setStatus('current')
hpnicfMirroringGroupMirrorVlanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMirrorVlanDirection.setStatus('current')
hpnicfMirroringGroupMirroVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 32, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMirroringGroupMirroVlanStatus.setStatus('current')
hpnicfPortTrustTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 33), )
if mibBuilder.loadTexts: hpnicfPortTrustTable.setStatus('current')
hpnicfPortTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 33, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfPortTrustIfIndex"))
if mibBuilder.loadTexts: hpnicfPortTrustEntry.setStatus('current')
hpnicfPortTrustIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 33, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfPortTrustIfIndex.setStatus('current')
hpnicfPortTrustTrustType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port", 1), ("cos", 2), ("dscp", 3))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPortTrustTrustType.setStatus('current')
hpnicfPortTrustOvercastType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOvercast", 1), ("overcastDSCP", 2), ("overcastCOS", 3))).clone('noOvercast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPortTrustOvercastType.setStatus('current')
hpnicfPortTrustReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPortTrustReset.setStatus('current')
hpnicfRemarkVlanIDTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34), )
if mibBuilder.loadTexts: hpnicfRemarkVlanIDTable.setStatus('current')
hpnicfRemarkVlanIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfRemarkVlanIDAclIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRemarkVlanIDIfIndex"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRemarkVlanIDVlanID"), (0, "HPN-ICF-LswQos-MIB", "hpnicfRemarkVlanIDDirection"))
if mibBuilder.loadTexts: hpnicfRemarkVlanIDEntry.setStatus('current')
hpnicfRemarkVlanIDAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999)))
if mibBuilder.loadTexts: hpnicfRemarkVlanIDAclIndex.setStatus('current')
hpnicfRemarkVlanIDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfRemarkVlanIDIfIndex.setStatus('current')
hpnicfRemarkVlanIDVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hpnicfRemarkVlanIDVlanID.setStatus('current')
hpnicfRemarkVlanIDDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2))))
if mibBuilder.loadTexts: hpnicfRemarkVlanIDDirection.setStatus('current')
hpnicfRemarkVlanIDUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRemarkVlanIDUserAclNum.setStatus('current')
hpnicfRemarkVlanIDUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRemarkVlanIDUserAclRule.setStatus('current')
hpnicfRemarkVlanIDIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRemarkVlanIDIpAclNum.setStatus('current')
hpnicfRemarkVlanIDIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRemarkVlanIDIpAclRule.setStatus('current')
hpnicfRemarkVlanIDLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRemarkVlanIDLinkAclNum.setStatus('current')
hpnicfRemarkVlanIDLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRemarkVlanIDLinkAclRule.setStatus('current')
hpnicfRemarkVlanIDRemarkVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRemarkVlanIDRemarkVlanID.setStatus('current')
hpnicfRemarkVlanIDPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("tagged", 2), ("untagged", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRemarkVlanIDPacketType.setStatus('current')
hpnicfRemarkVlanIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 34, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRemarkVlanIDRowStatus.setStatus('current')
hpnicfCosToDscpMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 35), )
if mibBuilder.loadTexts: hpnicfCosToDscpMapTable.setStatus('current')
hpnicfCosToDscpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 35, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfCosToDscpMapCosIndex"))
if mibBuilder.loadTexts: hpnicfCosToDscpMapEntry.setStatus('current')
hpnicfCosToDscpMapCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hpnicfCosToDscpMapCosIndex.setStatus('current')
hpnicfCosToDscpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 35, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCosToDscpMapDscpValue.setStatus('current')
hpnicfCosToDscpMapReSet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCosToDscpMapReSet.setStatus('current')
hpnicfDscpToLocalPreMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 36), )
if mibBuilder.loadTexts: hpnicfDscpToLocalPreMapTable.setStatus('current')
hpnicfDscpToLocalPreMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 36, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfDscpToLocalPreMapDscpIndex"))
if mibBuilder.loadTexts: hpnicfDscpToLocalPreMapEntry.setStatus('current')
hpnicfDscpToLocalPreMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfDscpToLocalPreMapDscpIndex.setStatus('current')
hpnicfDscpToLocalPreMapLocalPreVal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 36, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpToLocalPreMapLocalPreVal.setStatus('current')
hpnicfDscpToLocalPreMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpToLocalPreMapReset.setStatus('current')
hpnicfDscpToDropPreMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 37), )
if mibBuilder.loadTexts: hpnicfDscpToDropPreMapTable.setStatus('current')
hpnicfDscpToDropPreMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 37, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfDscpToDropPreMapDscpIndex"))
if mibBuilder.loadTexts: hpnicfDscpToDropPreMapEntry.setStatus('current')
hpnicfDscpToDropPreMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfDscpToDropPreMapDscpIndex.setStatus('current')
hpnicfDscpToDropPreMapDropPreVal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpToDropPreMapDropPreVal.setStatus('current')
hpnicfDscpToDropPreMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpToDropPreMapReset.setStatus('current')
hpnicfDscpToCosMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 38), )
if mibBuilder.loadTexts: hpnicfDscpToCosMapTable.setStatus('current')
hpnicfDscpToCosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 38, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfDscpToCosMapDscpIndex"))
if mibBuilder.loadTexts: hpnicfDscpToCosMapEntry.setStatus('current')
hpnicfDscpToCosMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfDscpToCosMapDscpIndex.setStatus('current')
hpnicfDscpToCosMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 38, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpToCosMapCosValue.setStatus('current')
hpnicfDscpToCosMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 38, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpToCosMapReset.setStatus('current')
hpnicfDscpToDscpMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 39), )
if mibBuilder.loadTexts: hpnicfDscpToDscpMapTable.setStatus('current')
hpnicfDscpToDscpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 39, 1), ).setIndexNames((0, "HPN-ICF-LswQos-MIB", "hpnicfDscpToDscpMapDscpIndex"))
if mibBuilder.loadTexts: hpnicfDscpToDscpMapEntry.setStatus('current')
hpnicfDscpToDscpMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfDscpToDscpMapDscpIndex.setStatus('current')
hpnicfDscpToDscpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 39, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpToDscpMapDscpValue.setStatus('current')
hpnicfDscpToDscpMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 16, 2, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDscpToDscpMapReset.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-LswQos-MIB", hpnicfFlowtempEnableFlowtempIndex=hpnicfFlowtempEnableFlowtempIndex, hpnicfRedProbability=hpnicfRedProbability, hpnicfRedirectToNextHop3=hpnicfRedirectToNextHop3, hpnicfMirroringGroupMirrorRowStatus=hpnicfMirroringGroupMirrorRowStatus, hpnicfRedirectAclIndex=hpnicfRedirectAclIndex, hpnicfFlowtempTcpFlag=hpnicfFlowtempTcpFlag, hpnicfPriorityPolicedServiceType=hpnicfPriorityPolicedServiceType, hpnicfRateLimitAclIndex=hpnicfRateLimitAclIndex, hpnicfPortTrustEntry=hpnicfPortTrustEntry, hpnicfPortTrustOvercastType=hpnicfPortTrustOvercastType, hpnicfPortTrustTable=hpnicfPortTrustTable, hpnicfPortQueueIfIndex=hpnicfPortQueueIfIndex, hpnicfWredGreenMinThreshold=hpnicfWredGreenMinThreshold, hpnicfDscpMapDscpIndex=hpnicfDscpMapDscpIndex, hpnicfMirroringGroupReflectorEntry=hpnicfMirroringGroupReflectorEntry, hpnicfWredRedMaxThreshold=hpnicfWredRedMaxThreshold, hpnicfMirrorUserAclRule=hpnicfMirrorUserAclRule, hpnicfMirrorVlanID=hpnicfMirrorVlanID, hpnicfLineRateRowStatus=hpnicfLineRateRowStatus, hpnicfRateLimitUserAclNum=hpnicfRateLimitUserAclNum, hpnicfMirrorIfIndex=hpnicfMirrorIfIndex, hpnicfCosToDscpMapTable=hpnicfCosToDscpMapTable, hpnicfFlowtempSIpMask=hpnicfFlowtempSIpMask, hpnicfQueueWeight3=hpnicfQueueWeight3, hpnicfDscpMapDscpValue=hpnicfDscpMapDscpValue, hpnicfTrafficShapeTable=hpnicfTrafficShapeTable, hpnicfDscpToDropPreMapReset=hpnicfDscpToDropPreMapReset, hpnicfStatisticIfIndex=hpnicfStatisticIfIndex, hpnicfDscpMapCosValue=hpnicfDscpMapCosValue, hpnicfPortQueueWrrPriority=hpnicfPortQueueWrrPriority, hpnicfRateLimitCIR=hpnicfRateLimitCIR, hpnicfStatisticByteXCount=hpnicfStatisticByteXCount, hpnicfMirrorEntry=hpnicfMirrorEntry, hpnicfRedirectLinkAclRule=hpnicfRedirectLinkAclRule, hpnicfStatisticAclIndex=hpnicfStatisticAclIndex, hpnicfFlowtempSPort=hpnicfFlowtempSPort, HpnicfMirrorOrMonitorType=HpnicfMirrorOrMonitorType, hpnicfRedVlanID=hpnicfRedVlanID, hpnicfBandwidthIfIndex=hpnicfBandwidthIfIndex, hpnicfMirroringGroupMirrorVlanSeq=hpnicfMirroringGroupMirrorVlanSeq, hpnicfRateLimitVlanID=hpnicfRateLimitVlanID, hpnicfFlowtempEthProtocol=hpnicfFlowtempEthProtocol, hpnicfMirroringGroupMirrorInTypeList=hpnicfMirroringGroupMirrorInTypeList, hpnicfRateLimitConformCos=hpnicfRateLimitConformCos, hpnicfFlowtempDIpMask=hpnicfFlowtempDIpMask, hpnicfRateLimitPIR=hpnicfRateLimitPIR, hpnicfStatisticEntry=hpnicfStatisticEntry, hpnicfDscpToLocalPreMapReset=hpnicfDscpToLocalPreMapReset, hpnicfMirroringGroupType=hpnicfMirroringGroupType, hpnicfLocalPrecedenceMapEntry=hpnicfLocalPrecedenceMapEntry, hpnicfFlowtempIndex=hpnicfFlowtempIndex, hpnicfRedirectEntry=hpnicfRedirectEntry, hpnicfCosToDropPrecedenceMapEntry=hpnicfCosToDropPrecedenceMapEntry, hpnicfExpMapDscpValue=hpnicfExpMapDscpValue, hpnicfTrafficShapeBurstSize=hpnicfTrafficShapeBurstSize, hpnicfExpMapExpValue=hpnicfExpMapExpValue, hpnicfRateLimitTable=hpnicfRateLimitTable, hpnicfCosToLocalPrecedenceMapCosIndex=hpnicfCosToLocalPrecedenceMapCosIndex, hpnicfRedirectVlanID=hpnicfRedirectVlanID, hpnicfMirroringGroupMirrorOutboundIfIndexList=hpnicfMirroringGroupMirrorOutboundIfIndexList, hpnicfMirroringGroupRprobeVlanID=hpnicfMirroringGroupRprobeVlanID, hpnicfLocalPrecedenceMapTable=hpnicfLocalPrecedenceMapTable, hpnicfStatisticTable=hpnicfStatisticTable, hpnicfMirroringGroupMirrorVlanEntry=hpnicfMirroringGroupMirrorVlanEntry, hpnicfStatisticUserAclNum=hpnicfStatisticUserAclNum, hpnicfRateLimitMeterStatByteCount=hpnicfRateLimitMeterStatByteCount, hpnicfRedirectRemarkedTos=hpnicfRedirectRemarkedTos, hpnicfPortMirrorIfIndex=hpnicfPortMirrorIfIndex, hpnicfPriorityRuntime=hpnicfPriorityRuntime, hpnicfDropModeMode=hpnicfDropModeMode, hpnicfPortQueueWeight=hpnicfPortQueueWeight, hpnicfMirrorGroupRowStatus=hpnicfMirrorGroupRowStatus, hpnicfMirroringGroupMonitorTable=hpnicfMirroringGroupMonitorTable, hpnicfMirroringGroupRprobeVlanTable=hpnicfMirroringGroupRprobeVlanTable, hpnicfQueueWeight2=hpnicfQueueWeight2, hpnicfRedStartQueueLen=hpnicfRedStartQueueLen, hpnicfRemarkVlanIDIpAclNum=hpnicfRemarkVlanIDIpAclNum, hpnicfPortTrustIfIndex=hpnicfPortTrustIfIndex, hpnicfQueueMaxDelay=hpnicfQueueMaxDelay, hpnicfRemarkVlanIDLinkAclRule=hpnicfRemarkVlanIDLinkAclRule, hpnicfCosToLocalPrecedenceMapLocalPrecedenceValue=hpnicfCosToLocalPrecedenceMapLocalPrecedenceValue, hpnicfPriorityCos=hpnicfPriorityCos, hpnicfBandwidthTable=hpnicfBandwidthTable, hpnicfQueueWeight4=hpnicfQueueWeight4, hpnicfPriorityPolicedServiceDscp=hpnicfPriorityPolicedServiceDscp, hpnicfFlowtempDMac=hpnicfFlowtempDMac, hpnicfRateLimitLinkAclRule=hpnicfRateLimitLinkAclRule, hpnicfWredRedMinThreshold=hpnicfWredRedMinThreshold, hpnicfMirroringGroupMirrorOutTypeList=hpnicfMirroringGroupMirrorOutTypeList, hpnicfStatisticByteCount=hpnicfStatisticByteCount, hpnicfMirrorRowStatus=hpnicfMirrorRowStatus, hpnicfBandwidthWeight=hpnicfBandwidthWeight, hpnicfPriorityEntry=hpnicfPriorityEntry, hpnicfDscpToDscpMapReset=hpnicfDscpToDscpMapReset, hpnicfWredYellowMinThreshold=hpnicfWredYellowMinThreshold, hpnicfDscpToLocalPreMapTable=hpnicfDscpToLocalPreMapTable, hpnicfMirrorToIfIndex=hpnicfMirrorToIfIndex, hpnicfRedIpAclNum=hpnicfRedIpAclNum, hpnicfStatisticUserAclRule=hpnicfStatisticUserAclRule, hpnicfRemarkVlanIDUserAclNum=hpnicfRemarkVlanIDUserAclNum, hpnicfMirrorUserAclNum=hpnicfMirrorUserAclNum, hpnicfFlowtempIcmpType=hpnicfFlowtempIcmpType, hpnicfWredEntry=hpnicfWredEntry, hpnicfMirroringGroupID=hpnicfMirroringGroupID, hpnicfDropModeEntry=hpnicfDropModeEntry, hpnicfPortQueueTable=hpnicfPortQueueTable, hpnicfWredYellowMaxProb=hpnicfWredYellowMaxProb, hpnicfPriorityRowStatus=hpnicfPriorityRowStatus, hpnicfFlowtempEntry=hpnicfFlowtempEntry, hpnicfMirroringGroupMonitorType=hpnicfMirroringGroupMonitorType, hpnicfExpMapDropPrecedence=hpnicfExpMapDropPrecedence, hpnicfExpMapConformLevel=hpnicfExpMapConformLevel, hpnicfRedirectRemarkedPri=hpnicfRedirectRemarkedPri, hpnicfRedirectToNextHop1=hpnicfRedirectToNextHop1, hpnicfRateLimitPeakRate=hpnicfRateLimitPeakRate, hpnicfPriorityAclIndex=hpnicfPriorityAclIndex, hpnicfRedirectRowStatus=hpnicfRedirectRowStatus, hpnicfRateLimitIpAclNum=hpnicfRateLimitIpAclNum, hpnicfStatisticPacketCount=hpnicfStatisticPacketCount, hpnicfDscpToDropPreMapTable=hpnicfDscpToDropPreMapTable, hpnicfPortWredTable=hpnicfPortWredTable, hpnicfMirroringGroupMirrorVlanID=hpnicfMirroringGroupMirrorVlanID, hpnicfMirrorAclIndex=hpnicfMirrorAclIndex, hpnicfQueueWeight1=hpnicfQueueWeight1, hpnicfRateLimitTargetRateKbps=hpnicfRateLimitTargetRateKbps, hpnicfTrafficShapeIfIndex=hpnicfTrafficShapeIfIndex, hpnicfDscpToLocalPreMapLocalPreVal=hpnicfDscpToLocalPreMapLocalPreVal, hpnicfQueueScheduleMode=hpnicfQueueScheduleMode, hpnicfBandwidthIpAclRule=hpnicfBandwidthIpAclRule, hpnicfRedirectUserAclNum=hpnicfRedirectUserAclNum, hpnicfBandwidthDirection=hpnicfBandwidthDirection, hpnicfTrafficShapeBufferLimit=hpnicfTrafficShapeBufferLimit, hpnicfBandwidthRowStatus=hpnicfBandwidthRowStatus, hpnicfFlowtempIcmpCode=hpnicfFlowtempIcmpCode, hpnicfCosToDscpMapDscpValue=hpnicfCosToDscpMapDscpValue, hpnicfRemarkVlanIDRowStatus=hpnicfRemarkVlanIDRowStatus, hpnicfFlowtempSMac=hpnicfFlowtempSMac, hpnicfRedStopQueueLen=hpnicfRedStopQueueLen, hpnicfMirroringGroupReflectorRowStatus=hpnicfMirroringGroupReflectorRowStatus, hpnicfFlowtempDscp=hpnicfFlowtempDscp, hpnicfLineRateDirection=hpnicfLineRateDirection, hpnicfMirroringGroupEntry=hpnicfMirroringGroupEntry, hpnicfRedirectUserAclRule=hpnicfRedirectUserAclRule, hpnicfMirrorGroupMirrorIfIndexList=hpnicfMirrorGroupMirrorIfIndexList, hpnicfPriorityCosFromIpPre=hpnicfPriorityCosFromIpPre, hpnicfFlowtempEnableEntry=hpnicfFlowtempEnableEntry, hpnicfCosToLocalPrecedenceMapTable=hpnicfCosToLocalPrecedenceMapTable, hpnicfRedirectTable=hpnicfRedirectTable, hpnicfCosToDropPrecedenceMapDropPrecedenceValue=hpnicfCosToDropPrecedenceMapDropPrecedenceValue, hpnicfLswQosAclMib=hpnicfLswQosAclMib, hpnicfRedirectRemarkedDSCP=hpnicfRedirectRemarkedDSCP, hpnicfDscpMapEntry=hpnicfDscpMapEntry, hpnicfExpMapEntry=hpnicfExpMapEntry, hpnicfDscpToDropPreMapEntry=hpnicfDscpToDropPreMapEntry, hpnicfRateLimitConformDscp=hpnicfRateLimitConformDscp, hpnicfRedIfIndex=hpnicfRedIfIndex, hpnicfMirrorDirection=hpnicfMirrorDirection, hpnicfDscpToDscpMapTable=hpnicfDscpToDscpMapTable, hpnicfBandwidthLinkAclRule=hpnicfBandwidthLinkAclRule, hpnicfDscpToCosMapCosValue=hpnicfDscpToCosMapCosValue, hpnicfLineRateTable=hpnicfLineRateTable, hpnicfPortWredQueueStartLength=hpnicfPortWredQueueStartLength, hpnicfPortMirrorTable=hpnicfPortMirrorTable, hpnicfRemarkVlanIDEntry=hpnicfRemarkVlanIDEntry, hpnicfTrafficShapeQueueId=hpnicfTrafficShapeQueueId, hpnicfCosToDscpMapReSet=hpnicfCosToDscpMapReSet, hpnicfRemarkVlanIDAclIndex=hpnicfRemarkVlanIDAclIndex, hpnicfRedirectDirection=hpnicfRedirectDirection, hpnicfWredExponent=hpnicfWredExponent, hpnicfFlowtempVlanId=hpnicfFlowtempVlanId, hpnicfDscpToLocalPreMapEntry=hpnicfDscpToLocalPreMapEntry, hpnicfDscpMapConformLevel=hpnicfDscpMapConformLevel, hpnicfBandwidthAclIndex=hpnicfBandwidthAclIndex, hpnicfPriorityLinkAclRule=hpnicfPriorityLinkAclRule, hpnicfLocalPrecedenceMapCosValue=hpnicfLocalPrecedenceMapCosValue, hpnicfExpMapTable=hpnicfExpMapTable, hpnicfBandwidthLinkAclNum=hpnicfBandwidthLinkAclNum, hpnicfMirrorMacVlanID=hpnicfMirrorMacVlanID, hpnicfRemarkVlanIDLinkAclNum=hpnicfRemarkVlanIDLinkAclNum, hpnicfRateLimitEntry=hpnicfRateLimitEntry, hpnicfFlowtempEnableVlanID=hpnicfFlowtempEnableVlanID, hpnicfRedirectToCpu=hpnicfRedirectToCpu, hpnicfBandwidthMinGuaranteedWidth=hpnicfBandwidthMinGuaranteedWidth, hpnicfMirroringGroupReflectorTable=hpnicfMirroringGroupReflectorTable, hpnicfPriorityPolicedServiceExp=hpnicfPriorityPolicedServiceExp, hpnicfStatisticRowStatus=hpnicfStatisticRowStatus, hpnicfMirroringGroupMirrorVlanTable=hpnicfMirroringGroupMirrorVlanTable, hpnicfPriorityIpAclRule=hpnicfPriorityIpAclRule, hpnicfMirrorIpAclRule=hpnicfMirrorIpAclRule, hpnicfMirroringGroupMirrorMac=hpnicfMirroringGroupMirrorMac, hpnicfRemarkVlanIDRemarkVlanID=hpnicfRemarkVlanIDRemarkVlanID, hpnicfPriorityDirection=hpnicfPriorityDirection, hpnicfPortMirrorRowStatus=hpnicfPortMirrorRowStatus, hpnicfDscpToDscpMapDscpValue=hpnicfDscpToDscpMapDscpValue, hpnicfRateLimitConformActionType=hpnicfRateLimitConformActionType, hpnicfMirroringGroupMirrorMacTable=hpnicfMirroringGroupMirrorMacTable, hpnicfRedirectRuntime=hpnicfRedirectRuntime, hpnicfRateLimitExceedActionType=hpnicfRateLimitExceedActionType, hpnicfMirrorGroupMonitorIfIndex=hpnicfMirrorGroupMonitorIfIndex, hpnicfPriorityIpPre=hpnicfPriorityIpPre, hpnicfRateLimitMeterStatState=hpnicfRateLimitMeterStatState, hpnicfMirroringGroupStatus=hpnicfMirroringGroupStatus, hpnicfQueueEntry=hpnicfQueueEntry, hpnicfPortMonitorBothIfIndex=hpnicfPortMonitorBothIfIndex, hpnicfRateLimitTargetRateMbps=hpnicfRateLimitTargetRateMbps, hpnicfStatisticDirection=hpnicfStatisticDirection, hpnicfMirroringGroupMirroVlanStatus=hpnicfMirroringGroupMirroVlanStatus, hpnicfPriorityPolicedServiceLoaclPre=hpnicfPriorityPolicedServiceLoaclPre, hpnicfRedLinkAclNum=hpnicfRedLinkAclNum, hpnicfExpMapLocalPrecedence=hpnicfExpMapLocalPrecedence, hpnicfFlowtempCos=hpnicfFlowtempCos, hpnicfRedirectIpAclRule=hpnicfRedirectIpAclRule, hpnicfRateLimitRuntime=hpnicfRateLimitRuntime, hpnicfMirrorGroupID=hpnicfMirrorGroupID, hpnicfMirroringGroupRowStatus=hpnicfMirroringGroupRowStatus, hpnicfMirroringGroupMirrorMacEntry=hpnicfMirroringGroupMirrorMacEntry, hpnicfMirroringGroupMirrorMacSeq=hpnicfMirroringGroupMirrorMacSeq, hpnicfMirroringGroupMonitorRowStatus=hpnicfMirroringGroupMonitorRowStatus, hpnicfWredGreenMaxProb=hpnicfWredGreenMaxProb, hpnicfStatisticCountClear=hpnicfStatisticCountClear, hpnicfMirrorToGroup=hpnicfMirrorToGroup, hpnicfBandwidthMaxGuaranteedWidth=hpnicfBandwidthMaxGuaranteedWidth, hpnicfDscpMapDropPrecedence=hpnicfDscpMapDropPrecedence, hpnicfMirrorIpAclNum=hpnicfMirrorIpAclNum, hpnicfStatisticIpAclRule=hpnicfStatisticIpAclRule, hpnicfBandwidthIpAclNum=hpnicfBandwidthIpAclNum, hpnicfRedRuntime=hpnicfRedRuntime, hpnicfMirrorTable=hpnicfMirrorTable, hpnicfFlowtempDPort=hpnicfFlowtempDPort, hpnicfPriorityVlanID=hpnicfPriorityVlanID, hpnicfDropModeIfIndex=hpnicfDropModeIfIndex, hpnicfMirrorLinkAclRule=hpnicfMirrorLinkAclRule, hpnicfPriorityTrustMode=hpnicfPriorityTrustMode, hpnicfRemarkVlanIDVlanID=hpnicfRemarkVlanIDVlanID, hpnicfRedirectToNestedVlanID=hpnicfRedirectToNestedVlanID, hpnicfRedirectMode=hpnicfRedirectMode, PYSNMP_MODULE_ID=hpnicfLswQosAclMib, hpnicfStatisticLinkAclRule=hpnicfStatisticLinkAclRule, hpnicfLocalPrecedenceMapLocalPrecedenceIndex=hpnicfLocalPrecedenceMapLocalPrecedenceIndex, hpnicfCosToLocalPrecedenceMapEntry=hpnicfCosToLocalPrecedenceMapEntry, hpnicfLineRateEntry=hpnicfLineRateEntry, hpnicfPriorityLocalPre=hpnicfPriorityLocalPre, hpnicfPortMirrorDirection=hpnicfPortMirrorDirection, hpnicfRemarkVlanIDUserAclRule=hpnicfRemarkVlanIDUserAclRule, hpnicfDscpToDropPreMapDscpIndex=hpnicfDscpToDropPreMapDscpIndex, hpnicfPriorityUserAclRule=hpnicfPriorityUserAclRule, hpnicfExpMapExpIndex=hpnicfExpMapExpIndex, hpnicfBandwidthVlanID=hpnicfBandwidthVlanID, hpnicfCosToDscpMapEntry=hpnicfCosToDscpMapEntry, hpnicfRedirectToSlotNo=hpnicfRedirectToSlotNo, hpnicfRateLimitIpAclRule=hpnicfRateLimitIpAclRule, hpnicfMirrorToCpu=hpnicfMirrorToCpu, hpnicfRedEntry=hpnicfRedEntry, hpnicfRemarkVlanIDPacketType=hpnicfRemarkVlanIDPacketType)
mibBuilder.exportSymbols("HPN-ICF-LswQos-MIB", hpnicfRedDirection=hpnicfRedDirection, hpnicfFlowtempDIp=hpnicfFlowtempDIp, hpnicfRedirectTargetVlanID=hpnicfRedirectTargetVlanID, hpnicfMirroringGroupTable=hpnicfMirroringGroupTable, hpnicfRateLimitConformLocalPre=hpnicfRateLimitConformLocalPre, hpnicfMirroringGroupMonitorEntry=hpnicfMirroringGroupMonitorEntry, hpnicfRateLimitLinkAclNum=hpnicfRateLimitLinkAclNum, hpnicfQueueWeight8=hpnicfQueueWeight8, hpnicfFlowtempSIp=hpnicfFlowtempSIp, hpnicfWredGreenMaxThreshold=hpnicfWredGreenMaxThreshold, hpnicfDscpToCosMapEntry=hpnicfDscpToCosMapEntry, hpnicfPriorityIpAclNum=hpnicfPriorityIpAclNum, hpnicfQueueWeight6=hpnicfQueueWeight6, hpnicfDscpToDscpMapDscpIndex=hpnicfDscpToDscpMapDscpIndex, hpnicfPriorityTable=hpnicfPriorityTable, hpnicfMirroringGroupMirrorInboundIfIndexList=hpnicfMirroringGroupMirrorInboundIfIndexList, hpnicfPriorityDscp=hpnicfPriorityDscp, hpnicfRateLimitMeterStatByteXCount=hpnicfRateLimitMeterStatByteXCount, hpnicfDscpToDropPreMapDropPreVal=hpnicfDscpToDropPreMapDropPreVal, hpnicfRedirectIfIndex=hpnicfRedirectIfIndex, hpnicfMirrorLinkAclNum=hpnicfMirrorLinkAclNum, hpnicfPortQueueQueueID=hpnicfPortQueueQueueID, hpnicfMirrorGroupDirection=hpnicfMirrorGroupDirection, hpnicfFlowtempVpn=hpnicfFlowtempVpn, hpnicfPortWredEntry=hpnicfPortWredEntry, hpnicfDscpToCosMapDscpIndex=hpnicfDscpToCosMapDscpIndex, hpnicfRemarkVlanIDTable=hpnicfRemarkVlanIDTable, hpnicfFlowtempRowStatus=hpnicfFlowtempRowStatus, hpnicfCosToDropPrecedenceMapCosIndex=hpnicfCosToDropPrecedenceMapCosIndex, hpnicfRemarkVlanIDIfIndex=hpnicfRemarkVlanIDIfIndex, hpnicfPortWredQueueID=hpnicfPortWredQueueID, hpnicfExpMapCosValue=hpnicfExpMapCosValue, hpnicfDscpMapLocalPrecedence=hpnicfDscpMapLocalPrecedence, hpnicfPriorityIpPreFromCos=hpnicfPriorityIpPreFromCos, hpnicfDropModeTable=hpnicfDropModeTable, hpnicfMirroringGroupRprobeVlanRowStatus=hpnicfMirroringGroupRprobeVlanRowStatus, hpnicfPriorityUserAclNum=hpnicfPriorityUserAclNum, hpnicfPortTrustTrustType=hpnicfPortTrustTrustType, hpnicfFlowtempEnableIfIndex=hpnicfFlowtempEnableIfIndex, hpnicfPortTrustReset=hpnicfPortTrustReset, hpnicfMirrorGroupEntry=hpnicfMirrorGroupEntry, hpnicfFlowtempIpPre=hpnicfFlowtempIpPre, hpnicfPriorityPolicedServiceCos=hpnicfPriorityPolicedServiceCos, hpnicfMirroringGroupMonitorIfIndex=hpnicfMirroringGroupMonitorIfIndex, hpnicfFlowtempEnableTable=hpnicfFlowtempEnableTable, hpnicfCosToDropPrecedenceMapTable=hpnicfCosToDropPrecedenceMapTable, hpnicfStatisticIpAclNum=hpnicfStatisticIpAclNum, hpnicfStatisticPacketXCount=hpnicfStatisticPacketXCount, hpnicfFlowtempFragment=hpnicfFlowtempFragment, hpnicfTrafficShapeEntry=hpnicfTrafficShapeEntry, hpnicfRedirectLinkAclNum=hpnicfRedirectLinkAclNum, hpnicfWredRedMaxProb=hpnicfWredRedMaxProb, hpnicfMirroringGroupMirrorEntry=hpnicfMirroringGroupMirrorEntry, hpnicfTrafficShapeRowStatus=hpnicfTrafficShapeRowStatus, hpnicfStatisticLinkAclNum=hpnicfStatisticLinkAclNum, hpnicfDscpToCosMapTable=hpnicfDscpToCosMapTable, hpnicfRateLimitExceedDscp=hpnicfRateLimitExceedDscp, hpnicfLineRateValue=hpnicfLineRateValue, hpnicfRemarkVlanIDIpAclRule=hpnicfRemarkVlanIDIpAclRule, hpnicfMirroringGroupReflectorIfIndex=hpnicfMirroringGroupReflectorIfIndex, hpnicfStatisticRuntime=hpnicfStatisticRuntime, hpnicfRateLimitCBS=hpnicfRateLimitCBS, hpnicfRedRowStatus=hpnicfRedRowStatus, hpnicfRemarkVlanIDDirection=hpnicfRemarkVlanIDDirection, hpnicfStatisticVlanID=hpnicfStatisticVlanID, hpnicfQueueIfIndex=hpnicfQueueIfIndex, hpnicfLswQosMibObject=hpnicfLswQosMibObject, hpnicfLocalPrecedenceMapConformLevel=hpnicfLocalPrecedenceMapConformLevel, hpnicfRateLimitRowStatus=hpnicfRateLimitRowStatus, hpnicfPriorityIfIndex=hpnicfPriorityIfIndex, hpnicfRateLimitIfIndex=hpnicfRateLimitIfIndex, hpnicfRateLimitEBS=hpnicfRateLimitEBS, hpnicfMirroringGroupMirroMacStatus=hpnicfMirroringGroupMirroMacStatus, hpnicfRateLimitDirection=hpnicfRateLimitDirection, hpnicfPortQueueEntry=hpnicfPortQueueEntry, hpnicfCosToDscpMapCosIndex=hpnicfCosToDscpMapCosIndex, hpnicfFlowtempSMacMask=hpnicfFlowtempSMacMask, hpnicfRedirectIpAclNum=hpnicfRedirectIpAclNum, hpnicfRedTable=hpnicfRedTable, hpnicfFlowtempTable=hpnicfFlowtempTable, hpnicfPortWredIfIndex=hpnicfPortWredIfIndex, hpnicfRedIpAclRule=hpnicfRedIpAclRule, hpnicfWredTable=hpnicfWredTable, hpnicfRedLinkAclRule=hpnicfRedLinkAclRule, hpnicfDscpMapTable=hpnicfDscpMapTable, hpnicfWredYellowMaxThreshold=hpnicfWredYellowMaxThreshold, hpnicfDscpToDscpMapEntry=hpnicfDscpToDscpMapEntry, hpnicfFlowtempIpProtocol=hpnicfFlowtempIpProtocol, hpnicfQueueWeight7=hpnicfQueueWeight7, hpnicfDscpToLocalPreMapDscpIndex=hpnicfDscpToLocalPreMapDscpIndex, hpnicfMirroringGroupMirrorVlanDirection=hpnicfMirroringGroupMirrorVlanDirection, hpnicfRateLimitExceedCos=hpnicfRateLimitExceedCos, hpnicfPortMirrorEntry=hpnicfPortMirrorEntry, hpnicfRedirectToModifiedVlanID=hpnicfRedirectToModifiedVlanID, hpnicfDscpMapExpValue=hpnicfDscpMapExpValue, hpnicfPriorityPolicedServiceDropPriority=hpnicfPriorityPolicedServiceDropPriority, hpnicfMirrorGroupTable=hpnicfMirrorGroupTable, hpnicfRedirectToIfIndex=hpnicfRedirectToIfIndex, hpnicfQueueTable=hpnicfQueueTable, hpnicfRedirectToNextHop2=hpnicfRedirectToNextHop2, hpnicfRateLimitUserAclRule=hpnicfRateLimitUserAclRule, hpnicfFlowtempDMacMask=hpnicfFlowtempDMacMask, hpnicfWredIndex=hpnicfWredIndex, hpnicfDropModeWredIndex=hpnicfDropModeWredIndex, hpnicfWredQueueId=hpnicfWredQueueId, hpnicfLineRateIfIndex=hpnicfLineRateIfIndex, hpnicfBandwidthRuntime=hpnicfBandwidthRuntime, hpnicfDscpToCosMapReset=hpnicfDscpToCosMapReset, hpnicfQueueWeight5=hpnicfQueueWeight5, hpnicfMirroringGroupMirrorTable=hpnicfMirroringGroupMirrorTable, hpnicfPriorityLinkAclNum=hpnicfPriorityLinkAclNum, hpnicfPortWredQueueProbability=hpnicfPortWredQueueProbability, hpnicfBandwidthEntry=hpnicfBandwidthEntry, hpnicfTrafficShapeMaxRate=hpnicfTrafficShapeMaxRate, hpnicfMirroringGroupRprobeVlanEntry=hpnicfMirroringGroupRprobeVlanEntry, hpnicfRedAclIndex=hpnicfRedAclIndex, hpnicfFlowtempTos=hpnicfFlowtempTos, hpnicfMirrorRuntime=hpnicfMirrorRuntime)
