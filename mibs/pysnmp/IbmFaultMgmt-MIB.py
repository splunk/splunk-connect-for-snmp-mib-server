#
# PySNMP MIB module IbmFaultMgmt-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IbmFaultMgmt-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, iso, Integer32, Unsigned32, ModuleIdentity, enterprises, NotificationType, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "iso", "Integer32", "Unsigned32", "ModuleIdentity", "enterprises", "NotificationType", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "Bits", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmArchitecture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5))
alert = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1))
product_Set_ID = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 3)).setLabel("product-Set-ID")
supporting_Data_Correl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 7)).setLabel("supporting-Data-Correl")
generic_Alert_Data = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 11)).setLabel("generic-Alert-Data")
probable_Causes = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 12)).setLabel("probable-Causes")
user_Causes = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 13)).setLabel("user-Causes")
install_Causes = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 14)).setLabel("install-Causes")
failure_Causes = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 15)).setLabel("failure-Causes")
detailed_Data_SV = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 17)).setLabel("detailed-Data-SV")
hwProductInstallSpecificInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1), )
if mibBuilder.loadTexts: hwProductInstallSpecificInfoTable.setStatus('optional')
hwProductEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1), )
if mibBuilder.loadTexts: hwProductEntry.setStatus('optional')
productClassificationHW = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 9))).clone(namedValues=NamedValues(("hwIBM", 1), ("hwIBM-NonIBM", 3), ("hwNonIBM", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productClassificationHW.setStatus('optional')
formatType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(17))).clone(namedValues=NamedValues(("form11", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: formatType.setStatus('optional')
machineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineType.setStatus('optional')
modelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelNum.setStatus('optional')
plantOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plantOfManufacture.setStatus('optional')
seqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: seqNum.setStatus('optional')
microcodeECLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: microcodeECLevel.setStatus('optional')
hardwareProdCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareProdCommonName.setStatus('optional')
vendorIDhw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorIDhw.setStatus('optional')
swProductInstallSpecificInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2), )
if mibBuilder.loadTexts: swProductInstallSpecificInfoTable.setStatus('optional')
swProductEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1), )
if mibBuilder.loadTexts: swProductEntry.setStatus('optional')
productClassificationSW = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 12, 14))).clone(namedValues=NamedValues(("swIBM", 4), ("swNonIBM", 12), ("swIBM-NonIBM", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productClassificationSW.setStatus('optional')
commonVerID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonVerID.setStatus('optional')
commonRelID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonRelID.setStatus('optional')
commonModID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonModID.setStatus('optional')
softwareProdCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareProdCommonName.setStatus('optional')
softwareProdProgNmbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareProdProgNmbr.setStatus('optional')
vendorIDsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorIDsw.setStatus('optional')
detailedDataSDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2), )
if mibBuilder.loadTexts: detailedDataSDTable.setStatus('optional')
detailedDataSDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2, 1), )
if mibBuilder.loadTexts: detailedDataSDEntry.setStatus('optional')
productIDCodeSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 41, 42, 153, 154))).clone(namedValues=NamedValues(("displayNone", 0), ("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDCodeSD.setStatus('optional')
dataIDCodeSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIDCodeSD.setStatus('optional')
dataEncodingSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 17))).clone(namedValues=NamedValues(("hex", 0), ("binary", 1), ("ascii", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEncodingSD.setStatus('optional')
dataSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSD.setStatus('optional')
flags = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flags.setStatus('mandatory')
alertType = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 17, 18))).clone(namedValues=NamedValues(("perm", 1), ("temp", 2), ("perf", 3), ("pend", 17), ("unkn", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertType.setStatus('mandatory')
alertDescriptionCode = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertDescriptionCode.setStatus('mandatory')
probableCausesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 12, 1), )
if mibBuilder.loadTexts: probableCausesTable.setStatus('mandatory')
probableCausesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 12, 1, 1), )
if mibBuilder.loadTexts: probableCausesEntry.setStatus('mandatory')
probableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probableCause.setStatus('mandatory')
userCausesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 1), )
if mibBuilder.loadTexts: userCausesTable.setStatus('optional')
userCausesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 1, 1), )
if mibBuilder.loadTexts: userCausesEntry.setStatus('optional')
userCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCause.setStatus('optional')
recommendedActionsUCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 2), )
if mibBuilder.loadTexts: recommendedActionsUCTable.setStatus('optional')
recommendedActionsUCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 2, 1), )
if mibBuilder.loadTexts: recommendedActionsUCEntry.setStatus('optional')
recommendedActionUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recommendedActionUC.setStatus('optional')
detailedDataUCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3), )
if mibBuilder.loadTexts: detailedDataUCTable.setStatus('optional')
detailedDataUCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3, 1), )
if mibBuilder.loadTexts: detailedDataUCEntry.setStatus('optional')
productIDCodeUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 41, 42, 153, 154))).clone(namedValues=NamedValues(("displayNone", 0), ("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDCodeUC.setStatus('optional')
dataIDCodeUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIDCodeUC.setStatus('optional')
dataEncodingUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 17))).clone(namedValues=NamedValues(("hex", 0), ("binary", 1), ("ascii", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEncodingUC.setStatus('optional')
dataUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataUC.setStatus('optional')
productSetIDIndexUCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 4), )
if mibBuilder.loadTexts: productSetIDIndexUCTable.setStatus('optional')
productSetIDIndexUCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 4, 1), )
if mibBuilder.loadTexts: productSetIDIndexUCEntry.setStatus('optional')
productSetIDIndexUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(41, 42, 153, 154))).clone(namedValues=NamedValues(("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSetIDIndexUC.setStatus('optional')
installCausesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 1), )
if mibBuilder.loadTexts: installCausesTable.setStatus('optional')
installCausesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 1, 1), )
if mibBuilder.loadTexts: installCausesEntry.setStatus('optional')
installCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installCause.setStatus('optional')
recommendedActionsICTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 2), )
if mibBuilder.loadTexts: recommendedActionsICTable.setStatus('optional')
recommendedActionsICEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 2, 1), )
if mibBuilder.loadTexts: recommendedActionsICEntry.setStatus('optional')
recommendedActionIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recommendedActionIC.setStatus('optional')
detailedDataICTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3), )
if mibBuilder.loadTexts: detailedDataICTable.setStatus('optional')
detailedDataICEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3, 1), )
if mibBuilder.loadTexts: detailedDataICEntry.setStatus('optional')
productIDCodeIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 41, 42, 153, 154))).clone(namedValues=NamedValues(("displayNone", 0), ("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDCodeIC.setStatus('optional')
dataIDCodeIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIDCodeIC.setStatus('optional')
dataEncodingIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 17))).clone(namedValues=NamedValues(("hex", 0), ("binary", 1), ("ascii", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEncodingIC.setStatus('optional')
dataIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIC.setStatus('optional')
productSetIDIndexICTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 4), )
if mibBuilder.loadTexts: productSetIDIndexICTable.setStatus('optional')
productSetIDIndexICEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 4, 1), )
if mibBuilder.loadTexts: productSetIDIndexICEntry.setStatus('optional')
productSetIDIndexIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(41, 42, 153, 154))).clone(namedValues=NamedValues(("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSetIDIndexIC.setStatus('optional')
failureCausesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 1), )
if mibBuilder.loadTexts: failureCausesTable.setStatus('optional')
failureCausesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 1, 1), )
if mibBuilder.loadTexts: failureCausesEntry.setStatus('optional')
failureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failureCause.setStatus('optional')
recommendedActionsFCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 2), )
if mibBuilder.loadTexts: recommendedActionsFCTable.setStatus('optional')
recommendedActionsFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 2, 1), )
if mibBuilder.loadTexts: recommendedActionsFCEntry.setStatus('optional')
recommendedActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recommendedActionFC.setStatus('optional')
detailedDataFCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3), )
if mibBuilder.loadTexts: detailedDataFCTable.setStatus('optional')
detailedDataFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3, 1), )
if mibBuilder.loadTexts: detailedDataFCEntry.setStatus('optional')
productIDCodeFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 41, 42, 153, 154))).clone(namedValues=NamedValues(("displayNone", 0), ("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDCodeFC.setStatus('optional')
dataIDCodeFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIDCodeFC.setStatus('optional')
dataEncodingFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 17))).clone(namedValues=NamedValues(("hex", 0), ("binary", 1), ("ascii", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEncodingFC.setStatus('optional')
dataFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataFC.setStatus('optional')
productSetIDIndexFCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 4), )
if mibBuilder.loadTexts: productSetIDIndexFCTable.setStatus('optional')
productSetIDIndexFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 4, 1), )
if mibBuilder.loadTexts: productSetIDIndexFCEntry.setStatus('optional')
productSetIDIndexFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(41, 42, 153, 154))).clone(namedValues=NamedValues(("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSetIDIndexFC.setStatus('optional')
detailedDataDDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1), )
if mibBuilder.loadTexts: detailedDataDDTable.setStatus('optional')
detailedDataDDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1, 1), )
if mibBuilder.loadTexts: detailedDataDDEntry.setStatus('optional')
productIDCodeDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 41, 42, 153, 154))).clone(namedValues=NamedValues(("displayNone", 0), ("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDCodeDD.setStatus('optional')
dataIDCodeDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIDCodeDD.setStatus('optional')
dataEncodingDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 17))).clone(namedValues=NamedValues(("hex", 0), ("binary", 1), ("ascii", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEncodingDD.setStatus('optional')
dataDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataDD.setStatus('optional')
mibBuilder.exportSymbols("IbmFaultMgmt-MIB", installCause=installCause, dataIDCodeFC=dataIDCodeFC, commonRelID=commonRelID, dataSD=dataSD, productIDCodeIC=productIDCodeIC, formatType=formatType, detailedDataICEntry=detailedDataICEntry, alert=alert, failureCause=failureCause, recommendedActionsUCEntry=recommendedActionsUCEntry, ibm=ibm, flags=flags, productSetIDIndexFCTable=productSetIDIndexFCTable, installCausesTable=installCausesTable, productSetIDIndexFC=productSetIDIndexFC, softwareProdCommonName=softwareProdCommonName, failureCausesTable=failureCausesTable, hwProductEntry=hwProductEntry, machineType=machineType, productSetIDIndexUCTable=productSetIDIndexUCTable, failure_Causes=failure_Causes, dataEncodingUC=dataEncodingUC, productSetIDIndexICTable=productSetIDIndexICTable, recommendedActionsFCTable=recommendedActionsFCTable, swProductInstallSpecificInfoTable=swProductInstallSpecificInfoTable, dataIDCodeSD=dataIDCodeSD, probableCausesTable=probableCausesTable, dataIC=dataIC, productSetIDIndexICEntry=productSetIDIndexICEntry, modelNum=modelNum, detailedDataFCEntry=detailedDataFCEntry, productIDCodeFC=productIDCodeFC, commonModID=commonModID, dataIDCodeUC=dataIDCodeUC, detailedDataSDTable=detailedDataSDTable, productSetIDIndexFCEntry=productSetIDIndexFCEntry, user_Causes=user_Causes, detailed_Data_SV=detailed_Data_SV, dataFC=dataFC, dataIDCodeDD=dataIDCodeDD, softwareProdProgNmbr=softwareProdProgNmbr, vendorIDhw=vendorIDhw, ibmArchitecture=ibmArchitecture, install_Causes=install_Causes, generic_Alert_Data=generic_Alert_Data, installCausesEntry=installCausesEntry, dataIDCodeIC=dataIDCodeIC, dataDD=dataDD, productSetIDIndexIC=productSetIDIndexIC, swProductEntry=swProductEntry, userCausesTable=userCausesTable, dataEncodingIC=dataEncodingIC, productIDCodeDD=productIDCodeDD, detailedDataSDEntry=detailedDataSDEntry, detailedDataDDTable=detailedDataDDTable, recommendedActionsICTable=recommendedActionsICTable, alertType=alertType, vendorIDsw=vendorIDsw, microcodeECLevel=microcodeECLevel, productClassificationSW=productClassificationSW, probableCausesEntry=probableCausesEntry, probableCause=probableCause, detailedDataUCEntry=detailedDataUCEntry, productSetIDIndexUCEntry=productSetIDIndexUCEntry, detailedDataFCTable=detailedDataFCTable, hardwareProdCommonName=hardwareProdCommonName, dataUC=dataUC, recommendedActionIC=recommendedActionIC, userCause=userCause, recommendedActionsUCTable=recommendedActionsUCTable, recommendedActionFC=recommendedActionFC, productIDCodeUC=productIDCodeUC, dataEncodingFC=dataEncodingFC, probable_Causes=probable_Causes, supporting_Data_Correl=supporting_Data_Correl, productClassificationHW=productClassificationHW, recommendedActionsICEntry=recommendedActionsICEntry, alertDescriptionCode=alertDescriptionCode, plantOfManufacture=plantOfManufacture, recommendedActionsFCEntry=recommendedActionsFCEntry, failureCausesEntry=failureCausesEntry, commonVerID=commonVerID, productIDCodeSD=productIDCodeSD, hwProductInstallSpecificInfoTable=hwProductInstallSpecificInfoTable, product_Set_ID=product_Set_ID, recommendedActionUC=recommendedActionUC, detailedDataDDEntry=detailedDataDDEntry, detailedDataICTable=detailedDataICTable, seqNum=seqNum, dataEncodingDD=dataEncodingDD, productSetIDIndexUC=productSetIDIndexUC, userCausesEntry=userCausesEntry, detailedDataUCTable=detailedDataUCTable, dataEncodingSD=dataEncodingSD)
