#
# PySNMP MIB module JNX-OPT-IF-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JNX-OPT-IF-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
JnxoptIfDirectionality, jnxoptIfOChSinkCurrentEntry, jnxoptIfOChConfigEntry, jnxoptIfMibModule = mibBuilder.importSymbols("JNX-OPT-IF-MIB", "JnxoptIfDirectionality", "jnxoptIfOChSinkCurrentEntry", "jnxoptIfOChConfigEntry", "jnxoptIfMibModule")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, iso, ObjectIdentity, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, Integer32, Counter64, Bits, TimeTicks, Unsigned32, transmission, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "ObjectIdentity", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "Integer32", "Counter64", "Bits", "TimeTicks", "Unsigned32", "transmission", "ModuleIdentity")
RowPointer, DateAndTime, RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "DateAndTime", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
jnxoptIfExtMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3))
jnxoptIfExtMibModule.setRevisions(('2012-04-25 00:00', '2013-01-25 00:00', '2013-02-27 00:00', '2013-11-01 00:00',))
if mibBuilder.loadTexts: jnxoptIfExtMibModule.setLastUpdated('201204250000Z')
if mibBuilder.loadTexts: jnxoptIfExtMibModule.setOrganization('IETF Ops/Camp MIB Working Group')
class JnxoptIfChannelSpacing(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("spacing100Ghz", 1), ("spacing50Ghz", 2), ("spacing25Ghz", 3), ("spacing12point5Ghz", 4), ("spacing6point5Ghz", 5))

class JnxoptIfBitRateLineCoding(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("rate2point5G", 1), ("rate10G", 2), ("rate40G", 3), ("rate100G", 4), ("rate400G", 5))

class JnxoptIfFiberTypeRecommendation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("g652", 1), ("g653", 2), ("g654", 3), ("g655", 4), ("g656", 5), ("g657", 6))

class JnxoptIfFiberTypeCategory(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("categoryA", 1), ("categoryB", 2), ("categoryC", 3), ("categoryD", 4), ("categoryE", 5))

class JnxoptIfOTNType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nearEnd", 1), ("farEnd", 2))

class JnxoptIfOTNDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("jnxTxDir", 1), ("jnxRxDir", 2), ("jnxBiDir", 3))

class JnxoptIfOTNLayer(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("jnxoptIfOTUkLayer", 1), ("jnxoptIfODUkLayer", 2), ("jnxoptIfTCMSubLayer", 3))

class JnxoptIfOTNOChAlarms(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("jnxoptIfOtnNoAlarm", 0), ("jnxoptIfOtnLosAlarm", 1), ("jnxoptIfOtnLofAlarm", 2), ("jnxoptIfOtnLomAlarm", 3), ("jnxoptIfOtuSsfAlarm", 4), ("jnxoptIfOtuBdiAlarm", 5), ("jnxoptIfOtuTimAlarm", 6), ("jnxoptIfOtuIaeAlarm", 7), ("jnxoptIfOtuBiaeAlarm", 8), ("jnxoptIfOtuTsfAlarm", 9), ("jnxoptIfOtuDegAlarm", 10), ("jnxoptIfOtuFecExcessiveErrsAlarm", 11), ("jnxoptIf15MinThreshBBETCA", 12), ("jnxoptIf15MinThreshESTCA", 13), ("jnxoptIf15MinThreshSESTCA", 14), ("jnxoptIf15MinThreshUASTCA", 15), ("jnxoptIf15MinThreshBip8TCA", 16), ("jnxoptIf15MinThUnCorrectedWordsTCA", 17), ("jnxoptIf15MinThreshPreFECBERTCA", 18), ("jnxoptIf24HourThreshBBETCA", 19), ("jnxoptIf24HourThreshESTCA", 20), ("jnxoptIf24HourThreshSESTCA", 21), ("jnxoptIf24HourThreshUASTCA", 22), ("jnxoptIf24HourThreshBip8TCA", 23), ("jnxoptIf24HourThreshPreFECBERTCA", 24), ("jnxoptIfOtuAisAlarm", 25))

class JnxoptIfOTNODUkTcmAlarms(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))
    namedValues = NamedValues(("jnxoptIfOtnOdukTcmNoAlarm", 0), ("jnxoptIfOdukTcmOciAlarm", 1), ("jnxoptIfOdukTcmLckAlarm", 2), ("jnxoptIfOdukTcmBdiAlarm", 3), ("jnxoptIfOdukTcmTimAlarm", 4), ("jnxoptIfOdukTcmDegAlarm", 5), ("jnxoptIfOdukTcmIaeAlarm", 6), ("jnxoptIfOdukTcmLTCAlarm", 7), ("jnxoptIfOdukTcmCSfAlarm", 8), ("jnxoptIfOdukTcmSSfAlarm", 9), ("jnxoptIfOdukTcmTSfAlarm", 10), ("jnxoptIfOdukTcm15MinThreshBBETCA", 11), ("jnxoptIfOdukTcm15MinThreshESTCA", 12), ("jnxoptIfOdukTcm15MinThreshSESTCA", 13), ("jnxoptIfOdukTcm15MinThreshUASTCA", 14), ("jnxoptIfOdukTcm15MinThreshBip8TCA", 15), ("jnxoptIfOdukTcmAisAlarm", 16), ("jnxoptIfOdukPtmAlarm", 17), ("jnxoptIfOdukTcm24HourThreshBBETCA", 18), ("jnxoptIfOdukTcm24HourThreshESTCA", 19), ("jnxoptIfOdukTcm24HourThreshSESTCA", 20), ("jnxoptIfOdukTcm24HourThreshUASTCA", 21), ("jnxoptIfOdukTcm24HourThreshBip8TCA", 22))

class JnxoptIfOTNAlarmSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxCritical", 1), ("jnxMajor", 2), ("jnxMinor", 3), ("jnxInfo", 4))

jnxoptIfOTNNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0))
jnxoptIfOPSmEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1))
jnxoptIfOChSrcSinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2))
jnxoptIfOTNPMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3))
jnxoptIfOTNAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4))
jnxoptIfOPSmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1), )
if mibBuilder.loadTexts: jnxoptIfOPSmConfigTable.setStatus('current')
jnxoptIfOPSmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOPSmConfigEntry.setStatus('current')
jnxoptIfOPSmDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOPSmDirectionality.setStatus('current')
jnxoptIfOPSmFiberTypeRecommendation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1, 2), JnxoptIfFiberTypeRecommendation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOPSmFiberTypeRecommendation.setStatus('current')
jnxoptIfOPSmFiberTypeCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1, 3), JnxoptIfFiberTypeCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOPSmFiberTypeCategory.setStatus('current')
jnxoptIfOChConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1), )
if mibBuilder.loadTexts: jnxoptIfOChConfigExtTable.setStatus('current')
jnxoptIfOChConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1), )
jnxoptIfOChConfigEntry.registerAugmentions(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOChConfigExtEntry"))
jnxoptIfOChConfigExtEntry.setIndexNames(*jnxoptIfOChConfigEntry.getIndexNames())
if mibBuilder.loadTexts: jnxoptIfOChConfigExtEntry.setStatus('current')
jnxoptIfOChMiminumChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 1), JnxoptIfChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMiminumChannelSpacing.setStatus('current')
jnxoptIfOChBitRateLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 2), JnxoptIfBitRateLineCoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChBitRateLineCoding.setStatus('current')
jnxoptIfOChFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChFEC.setStatus('current')
jnxoptIfOChSinkMaximumBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumBERMantissa.setStatus('current')
jnxoptIfOChSinkMaximumBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumBERExponent.setStatus('current')
jnxoptIfOChMinWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 6), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMinWavelength.setStatus('current')
jnxoptIfOChMaxWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 7), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaxWavelength.setStatus('current')
jnxoptIfOChWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 8), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChWavelength.setStatus('current')
jnxoptIfOChVendorTransceiverClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChVendorTransceiverClass.setStatus('current')
jnxoptIfOChOpticalInterfaceApplicationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChOpticalInterfaceApplicationCode.setStatus('current')
jnxoptIfOChLaserAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChLaserAdminState.setStatus('current')
jnxoptIfOChLaserOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("fault", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChLaserOperationalState.setStatus('current')
jnxoptIfOChAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChAdminState.setStatus('current')
jnxoptIfOChOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("fault", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChOperationalState.setStatus('current')
jnxoptIfOChSrcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2), )
if mibBuilder.loadTexts: jnxoptIfOChSrcConfigTable.setStatus('current')
jnxoptIfOChSrcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcConfigEntry.setStatus('current')
jnxoptIfOChMinimumMeanChannelOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 1), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMinimumMeanChannelOutputPower.setStatus('current')
jnxoptIfOChMaximumMeanChannelOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 2), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumMeanChannelOutputPower.setStatus('current')
jnxoptIfOChMinimumCentralFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 3), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMinimumCentralFrequency.setStatus('current')
jnxoptIfOChMaximumCentralFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 4), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumCentralFrequency.setStatus('current')
jnxoptIfOChMaximumSpectralExcursion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 5), Unsigned32()).setUnits('0.1 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumSpectralExcursion.setStatus('current')
jnxoptIfOChMaximumTxDispersionOSNRPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumTxDispersionOSNRPenalty.setStatus('current')
jnxoptIfOChSrcSinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3), )
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkConfigTable.setStatus('current')
jnxoptIfOChSrcSinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkConfigEntry.setStatus('current')
jnxoptIfOChSrcSinkMinimumChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 1), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMinimumChromaticDispersion.setStatus('current')
jnxoptIfOChSrcSinkMaximumChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumChromaticDispersion.setStatus('current')
jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss.setStatus('current')
jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink.setStatus('current')
jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 5), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay.setStatus('current')
jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss.setStatus('current')
jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 7), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk.setStatus('current')
jnxoptIfOChSrcSinkInterFerometricCrosstalk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 8), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkInterFerometricCrosstalk.setStatus('current')
jnxoptIfOChSrcSinkOpticalPathOSNRPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 9), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkOpticalPathOSNRPenalty.setStatus('current')
jnxoptIfOChSinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4), )
if mibBuilder.loadTexts: jnxoptIfOChSinkConfigTable.setStatus('current')
jnxoptIfOChSinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSinkConfigEntry.setStatus('current')
jnxoptIfOChSinkMinimumMeanIntputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 1), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMinimumMeanIntputPower.setStatus('current')
jnxoptIfOChSinkMaximumMeanIntputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 2), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumMeanIntputPower.setStatus('current')
jnxoptIfOChSinkMinimumOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMinimumOSNR.setStatus('current')
jnxoptIfOChSinkOSNRTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkOSNRTolerance.setStatus('current')
jnxoptIfOChSinkCurrentExtTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1), )
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentExtTable.setStatus('current')
jnxoptIfOChSinkCurrentExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1), )
jnxoptIfOChSinkCurrentEntry.registerAugmentions(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOChSinkCurrentExtEntry"))
jnxoptIfOChSinkCurrentExtEntry.setIndexNames(*jnxoptIfOChSinkCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentExtEntry.setStatus('current')
jnxoptIfOChSinkCurrentChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1, 1), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentChromaticDispersion.setStatus('current')
jnxoptIfOChSinkCurrentOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentOSNR.setStatus('current')
jnxoptIfOChSinkCurrentQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentQ.setStatus('current')
jnxoptIfOTNPMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2), )
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigTable.setStatus('current')
jnxoptIfOTNPMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMConfigType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMConfigLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMConfigTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigEntry.setStatus('current')
jnxoptIfOTNPMConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigType.setStatus('current')
jnxoptIfOTNPMConfigLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 2), JnxoptIfOTNLayer())
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigLayer.setStatus('current')
jnxoptIfOTNPMConfigTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigTCMLevel.setStatus('current')
jnxoptIfOTNPMESRInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMESRInterval.setStatus('current')
jnxoptIfOTNPMSESRInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMSESRInterval.setStatus('current')
jnxoptIfOTNPMValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMValidIntervals.setStatus('current')
jnxoptIfOTNPM15MinBip8Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinBip8Threshold.setStatus('current')
jnxoptIfOTNPM15MinESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinESsThreshold.setStatus('current')
jnxoptIfOTNPM15MinSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinSESsThreshold.setStatus('current')
jnxoptIfOTNPM15MinUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinUASsThreshold.setStatus('current')
jnxoptIfOTNPM15MinBBEsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinBBEsThreshold.setStatus('current')
jnxoptIfOTNPM24HourBip8Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourBip8Threshold.setStatus('current')
jnxoptIfOTNPM24HourESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourESsThreshold.setStatus('current')
jnxoptIfOTNPM24HourSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourSESsThreshold.setStatus('current')
jnxoptIfOTNPM24HourUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourUASsThreshold.setStatus('current')
jnxoptIfOTNPM24HourBBEsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourBBEsThreshold.setStatus('current')
jnxoptIfOTNPMBip8EnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMBip8EnableTCA.setStatus('current')
jnxoptIfOTNPMESsEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMESsEnableTCA.setStatus('current')
jnxoptIfOTNPMSESsEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMSESsEnableTCA.setStatus('current')
jnxoptIfOTNPMUASsEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMUASsEnableTCA.setStatus('current')
jnxoptIfOTNPMBBEsEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMBBEsEnableTCA.setStatus('current')
jnxoptIfOTNPMCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3), )
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentTable.setStatus('current')
jnxoptIfOTNPMCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentEntry.setStatus('current')
jnxoptIfOTNPMCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentType.setStatus('current')
jnxoptIfOTNPMCurrentLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 2), JnxoptIfOTNLayer())
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentLayer.setStatus('current')
jnxoptIfOTNPMCurrentTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentTCMLevel.setStatus('current')
jnxoptIfOTNPMCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSuspectedFlag.setStatus('current')
jnxoptIfOTNPMCurrentBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBip8.setStatus('current')
jnxoptIfOTNPMCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentESs.setStatus('current')
jnxoptIfOTNPMCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSESs.setStatus('current')
jnxoptIfOTNPMCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentUASs.setStatus('current')
jnxoptIfOTNPMCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBBEs.setStatus('current')
jnxoptIfOTNPMCurrentESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 10), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentESR.setStatus('current')
jnxoptIfOTNPMCurrentSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 11), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSESR.setStatus('current')
jnxoptIfOTNPMCurrentBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 12), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBBER.setStatus('current')
jnxoptIfOTNPMCurrentElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentElapsedTime.setStatus('current')
jnxoptIfOTNPMCurSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurSuspectReason.setStatus('current')
jnxoptIfOTNPMIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4), )
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTable.setStatus('current')
jnxoptIfOTNPMIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalTCMLevel"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalEntry.setStatus('current')
jnxoptIfOTNPMIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalType.setStatus('current')
jnxoptIfOTNPMIntervalLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 2), JnxoptIfOTNLayer())
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalLayer.setStatus('current')
jnxoptIfOTNPMIntervalTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTCMLevel.setStatus('current')
jnxoptIfOTNPMIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalNumber.setStatus('current')
jnxoptIfOTNPMIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSuspectedFlag.setStatus('current')
jnxoptIfOTNPMIntervalBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBip8.setStatus('current')
jnxoptIfOTNPMIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalESs.setStatus('current')
jnxoptIfOTNPMIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSESs.setStatus('current')
jnxoptIfOTNPMIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalUASs.setStatus('current')
jnxoptIfOTNPMIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBBEs.setStatus('current')
jnxoptIfOTNPMIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 11), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalESR.setStatus('current')
jnxoptIfOTNPMIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 12), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSESR.setStatus('current')
jnxoptIfOTNPMIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 13), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBBER.setStatus('current')
jnxoptIfOTNPMIntervalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTimeStamp.setStatus('current')
jnxoptIfOTNPMIntSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntSuspectReason.setStatus('current')
jnxoptIfOTNPMCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5), )
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayTable.setStatus('current')
jnxoptIfOTNPMCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentDayType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentDayLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentDayTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayEntry.setStatus('current')
jnxoptIfOTNPMCurrentDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayType.setStatus('current')
jnxoptIfOTNPMCurrentDayLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 2), JnxoptIfOTNLayer())
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayLayer.setStatus('current')
jnxoptIfOTNPMCurrentDayTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayTCMLevel.setStatus('current')
jnxoptIfOTNPMCurrentDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySuspectedFlag.setStatus('current')
jnxoptIfOTNPMCurrentDayBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBip8.setStatus('current')
jnxoptIfOTNPMCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayESs.setStatus('current')
jnxoptIfOTNPMCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySESs.setStatus('current')
jnxoptIfOTNPMCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayUASs.setStatus('current')
jnxoptIfOTNPMCurrentDayBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBBEs.setStatus('current')
jnxoptIfOTNPMCurrentDayESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 10), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayESR.setStatus('current')
jnxoptIfOTNPMCurrentDaySESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 11), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySESR.setStatus('current')
jnxoptIfOTNPMCurrentDayBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 12), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBBER.setStatus('current')
jnxoptIfOTNPMCurrentDayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayElapsedTime.setStatus('current')
jnxoptIfOTNPMCurDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurDaySuspectReason.setStatus('current')
jnxoptIfOTNPMPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6), )
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTable.setStatus('current')
jnxoptIfOTNPMPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMPrevDayType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMPrevDayLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMPrevDayTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayEntry.setStatus('current')
jnxoptIfOTNPMPrevDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayType.setStatus('current')
jnxoptIfOTNPMPrevDayLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 2), JnxoptIfOTNLayer())
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayLayer.setStatus('current')
jnxoptIfOTNPMPrevDayTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTCMLevel.setStatus('current')
jnxoptIfOTNPMPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySuspectedFlag.setStatus('current')
jnxoptIfOTNPMPrevDayBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBip8.setStatus('current')
jnxoptIfOTNPMPrevDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayESs.setStatus('current')
jnxoptIfOTNPMPrevDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySESs.setStatus('current')
jnxoptIfOTNPMPrevDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayUASs.setStatus('current')
jnxoptIfOTNPMPrevDayBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBBEs.setStatus('current')
jnxoptIfOTNPMPrevDayESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 10), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayESR.setStatus('current')
jnxoptIfOTNPMPrevDaySESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 11), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySESR.setStatus('current')
jnxoptIfOTNPMPrevDayBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 12), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBBER.setStatus('current')
jnxoptIfOTNPMPrevDayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTimeStamp.setStatus('current')
jnxoptIfOTNPMPrevDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySuspectReason.setStatus('current')
jnxoptIfOTNPMFECConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7), )
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigTable.setStatus('current')
jnxoptIfOTNPMFECConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECConfigType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigEntry.setStatus('current')
jnxoptIfOTNPMFECConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigType.setStatus('current')
jnxoptIfOTNPMFECValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECValidIntervals.setStatus('current')
jnxoptIfOTNPM15MinPreFECBERMantissaThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinPreFECBERMantissaThreshold.setStatus('current')
jnxoptIfOTNPM15MinPreFECBERExponentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinPreFECBERExponentThreshold.setStatus('current')
jnxoptIfOTNPM24HourPreFECBERMantissaThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourPreFECBERMantissaThreshold.setStatus('current')
jnxoptIfOTNPM24HourPreFECBERExponentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourPreFECBERExponentThreshold.setStatus('current')
jnxoptIfOTNPMFECBEREnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECBEREnableTCA.setStatus('current')
jnxoptIfOTNPMFECCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8), )
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentTable.setStatus('current')
jnxoptIfOTNPMFECCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECCurrentType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentEntry.setStatus('current')
jnxoptIfOTNPMFECCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentType.setStatus('current')
jnxoptIfOTNPMFECCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentSuspectedFlag.setStatus('current')
jnxoptIfOTNPMCurrentFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECCorrectedErr.setStatus('current')
jnxoptIfOTNPMCurrentFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECUncorrectedWords.setStatus('current')
jnxoptIfOTNPMCurrentFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECBERMantissa.setStatus('current')
jnxoptIfOTNPMCurrentFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECBERExponent.setStatus('current')
jnxoptIfOTNPMCurrentFECMinBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMinBERMantissa.setStatus('current')
jnxoptIfOTNPMCurrentFECMinBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMinBERExponent.setStatus('current')
jnxoptIfOTNPMCurrentFECMaxBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMaxBERMantissa.setStatus('current')
jnxoptIfOTNPMCurrentFECMaxBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMaxBERExponent.setStatus('current')
jnxoptIfOTNPMCurrentFECAvgBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECAvgBERMantissa.setStatus('current')
jnxoptIfOTNPMCurrentFECAvgBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECAvgBERExponent.setStatus('current')
jnxoptIfOTNPMCurrentFECElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECElapsedTime.setStatus('current')
jnxoptIfOTNPMFECCurSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurSuspectReason.setStatus('current')
jnxoptIfOTNPMFECIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9), )
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalTable.setStatus('current')
jnxoptIfOTNPMFECIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECIntervalType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalEntry.setStatus('current')
jnxoptIfOTNPMFECIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalType.setStatus('current')
jnxoptIfOTNPMFECIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalNumber.setStatus('current')
jnxoptIfOTNPMFECIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalSuspectedFlag.setStatus('current')
jnxoptIfOTNPMIntervalFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalFECCorrectedErr.setStatus('current')
jnxoptIfOTNPMIntervalFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalFECUncorrectedWords.setStatus('current')
jnxoptIfOTNPMIntervalMinFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMinFECBERMantissa.setStatus('current')
jnxoptIfOTNPMIntervalMinFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMinFECBERExponent.setStatus('current')
jnxoptIfOTNPMIntervalMaxFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMaxFECBERMantissa.setStatus('current')
jnxoptIfOTNPMIntervalMaxFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMaxFECBERExponent.setStatus('current')
jnxoptIfOTNPMIntervalAvgFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalAvgFECBERMantissa.setStatus('current')
jnxoptIfOTNPMIntervalAvgFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalAvgFECBERExponent.setStatus('current')
jnxoptIfOTNPMFECIntervalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalTimeStamp.setStatus('current')
jnxoptIfOTNPMFECIntSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntSuspectReason.setStatus('current')
jnxoptIfOTNPMFECCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10), )
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayTable.setStatus('current')
jnxoptIfOTNPMFECCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECCurrentDayType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayEntry.setStatus('current')
jnxoptIfOTNPMFECCurrentDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayType.setStatus('current')
jnxoptIfOTNPMFECCurrentDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDaySuspectedFlag.setStatus('current')
jnxoptIfOTNPMCurrentDayFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayFECCorrectedErr.setStatus('current')
jnxoptIfOTNPMCurrentDayFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayFECUncorrectedWords.setStatus('current')
jnxoptIfOTNPMCurrentDayMinFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMinFECBERMantissa.setStatus('current')
jnxoptIfOTNPMCurrentDayMinFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMinFECBERExponent.setStatus('current')
jnxoptIfOTNPMCurrentDayMaxFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMaxFECBERMantissa.setStatus('current')
jnxoptIfOTNPMCurrentDayMaxFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMaxFECBERExponent.setStatus('current')
jnxoptIfOTNPMCurrentDayAvgFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayAvgFECBERMantissa.setStatus('current')
jnxoptIfOTNPMCurrentDayAvgFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayAvgFECBERExponent.setStatus('current')
jnxoptIfOTNPMFECCurrentDayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayElapsedTime.setStatus('current')
jnxoptIfOTNPMFECCurDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurDaySuspectReason.setStatus('current')
jnxoptIfOTNPMFECPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11), )
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayTable.setStatus('current')
jnxoptIfOTNPMFECPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECPrevDayType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayEntry.setStatus('current')
jnxoptIfOTNPMFECPrevDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayType.setStatus('current')
jnxoptIfOTNPMFECPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDaySuspectedFlag.setStatus('current')
jnxoptIfOTNPMPrevDayFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayFECCorrectedErr.setStatus('current')
jnxoptIfOTNPMPrevDayFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayFECUncorrectedWords.setStatus('current')
jnxoptIfOTNPMPrevDayMinFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMinFECBERMantissa.setStatus('current')
jnxoptIfOTNPMPrevDayMinFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMinFECBERExponent.setStatus('current')
jnxoptIfOTNPMPrevDayMaxFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMaxFECBERMantissa.setStatus('current')
jnxoptIfOTNPMPrevDayMaxFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMaxFECBERExponent.setStatus('current')
jnxoptIfOTNPMPrevDayAvgFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayAvgFECBERMantissa.setStatus('current')
jnxoptIfOTNPMPrevDayAvgFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayAvgFECBERExponent.setStatus('current')
jnxoptIfOTNPMFECPrevDayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayTimeStamp.setStatus('current')
jnxoptIfOTNPMFECPrevDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDaySuspectReason.setStatus('current')
jnxoptIfOTNAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1), )
if mibBuilder.loadTexts: jnxoptIfOTNAlarmTable.setStatus('current')
jnxoptIfOTNAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTNAlarmEntry.setStatus('current')
jnxoptIfOTNAlarmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 1), JnxoptIfOTNType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmLocation.setStatus('current')
jnxoptIfOTNAlarmDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 2), JnxoptIfOTNDirection()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmDirection.setStatus('current')
jnxoptIfOTNAlarmLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 3), JnxoptIfOTNLayer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmLayer.setStatus('current')
jnxoptIfOTNAlarmTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmTCMLevel.setStatus('current')
jnxoptIfOTNOChOTUkAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 5), JnxoptIfOTNOChAlarms()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmType.setStatus('current')
jnxoptIfOTNAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 6), JnxoptIfOTNAlarmSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmSeverity.setStatus('current')
jnxoptIfOTNAlarmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 7), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmDate.setStatus('current')
jnxoptIfOTNODUkTcmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 8), JnxoptIfOTNODUkTcmAlarms()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmType.setStatus('current')
jnxoptIfOTNOChOTUkAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 1)).setObjects(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNOChOTUkAlarmType"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"))
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmSet.setStatus('current')
jnxoptIfOTNOChOTUkAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 2)).setObjects(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNOChOTUkAlarmType"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"))
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmClear.setStatus('current')
jnxoptIfOTNODUkTcmAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 3)).setObjects(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNODUkTcmAlarmType"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"))
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmSet.setStatus('current')
jnxoptIfOTNODUkTcmAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 4)).setObjects(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNODUkTcmAlarmType"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"))
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmClear.setStatus('current')
mibBuilder.exportSymbols("JNX-OPT-IF-EXT-MIB", jnxoptIfOChSinkConfigTable=jnxoptIfOChSinkConfigTable, jnxoptIfOTNPM15MinUASsThreshold=jnxoptIfOTNPM15MinUASsThreshold, jnxoptIfOTNPMCurrentDayLayer=jnxoptIfOTNPMCurrentDayLayer, jnxoptIfOTNOChOTUkAlarmClear=jnxoptIfOTNOChOTUkAlarmClear, jnxoptIfOTNPMFECCurrentDayEntry=jnxoptIfOTNPMFECCurrentDayEntry, jnxoptIfOTNPMCurrentDayTCMLevel=jnxoptIfOTNPMCurrentDayTCMLevel, jnxoptIfOTNPMCurrentFECMaxBERMantissa=jnxoptIfOTNPMCurrentFECMaxBERMantissa, jnxoptIfOPSmDirectionality=jnxoptIfOPSmDirectionality, jnxoptIfOTNPMCurrentTable=jnxoptIfOTNPMCurrentTable, jnxoptIfOTNPMPrevDaySuspectReason=jnxoptIfOTNPMPrevDaySuspectReason, jnxoptIfOTNPMCurrentDaySuspectedFlag=jnxoptIfOTNPMCurrentDaySuspectedFlag, jnxoptIfOTNPMIntervalMaxFECBERExponent=jnxoptIfOTNPMIntervalMaxFECBERExponent, JnxoptIfFiberTypeCategory=JnxoptIfFiberTypeCategory, jnxoptIfOTNPMCurrentDayAvgFECBERExponent=jnxoptIfOTNPMCurrentDayAvgFECBERExponent, jnxoptIfOTNPM24HourUASsThreshold=jnxoptIfOTNPM24HourUASsThreshold, jnxoptIfOTNAlarmTCMLevel=jnxoptIfOTNAlarmTCMLevel, jnxoptIfOTNPMCurrentESR=jnxoptIfOTNPMCurrentESR, jnxoptIfOTNPM24HourESsThreshold=jnxoptIfOTNPM24HourESsThreshold, jnxoptIfOTNPMCurrentEntry=jnxoptIfOTNPMCurrentEntry, jnxoptIfOTNPMIntervalBip8=jnxoptIfOTNPMIntervalBip8, jnxoptIfOTNPMUASsEnableTCA=jnxoptIfOTNPMUASsEnableTCA, JnxoptIfOTNDirection=JnxoptIfOTNDirection, jnxoptIfOTNPMCurSuspectReason=jnxoptIfOTNPMCurSuspectReason, jnxoptIfOChSinkMaximumBERExponent=jnxoptIfOChSinkMaximumBERExponent, jnxoptIfOTNPMConfigTable=jnxoptIfOTNPMConfigTable, jnxoptIfOTNPMIntervalUASs=jnxoptIfOTNPMIntervalUASs, jnxoptIfOTNPMPrevDayMaxFECBERExponent=jnxoptIfOTNPMPrevDayMaxFECBERExponent, jnxoptIfOTNPMCurrentDayBBEs=jnxoptIfOTNPMCurrentDayBBEs, jnxoptIfOTNPMIntervalFECUncorrectedWords=jnxoptIfOTNPMIntervalFECUncorrectedWords, jnxoptIfOTNOChOTUkAlarmSet=jnxoptIfOTNOChOTUkAlarmSet, jnxoptIfOChSinkConfigEntry=jnxoptIfOChSinkConfigEntry, jnxoptIfOTNPMFECPrevDayTimeStamp=jnxoptIfOTNPMFECPrevDayTimeStamp, jnxoptIfOTNPMCurrentSuspectedFlag=jnxoptIfOTNPMCurrentSuspectedFlag, jnxoptIfOTNPMBip8EnableTCA=jnxoptIfOTNPMBip8EnableTCA, jnxoptIfOTNPMCurrentFECUncorrectedWords=jnxoptIfOTNPMCurrentFECUncorrectedWords, jnxoptIfOTNPMFECCurrentDayElapsedTime=jnxoptIfOTNPMFECCurrentDayElapsedTime, jnxoptIfOChSrcConfigEntry=jnxoptIfOChSrcConfigEntry, jnxoptIfOTNPMValidIntervals=jnxoptIfOTNPMValidIntervals, jnxoptIfOTNPMFECCurrentDayType=jnxoptIfOTNPMFECCurrentDayType, jnxoptIfOTNPMFECPrevDaySuspectedFlag=jnxoptIfOTNPMFECPrevDaySuspectedFlag, jnxoptIfOTNPMPrevDaySESs=jnxoptIfOTNPMPrevDaySESs, jnxoptIfOTNPM15MinBBEsThreshold=jnxoptIfOTNPM15MinBBEsThreshold, jnxoptIfOTNPMIntervalAvgFECBERExponent=jnxoptIfOTNPMIntervalAvgFECBERExponent, jnxoptIfOTNPMPrevDayAvgFECBERMantissa=jnxoptIfOTNPMPrevDayAvgFECBERMantissa, jnxoptIfExtMibModule=jnxoptIfExtMibModule, jnxoptIfOTNOChOTUkAlarmType=jnxoptIfOTNOChOTUkAlarmType, jnxoptIfOChSinkCurrentQ=jnxoptIfOChSinkCurrentQ, jnxoptIfOTNPMFECValidIntervals=jnxoptIfOTNPMFECValidIntervals, jnxoptIfOTNPMCurrentTCMLevel=jnxoptIfOTNPMCurrentTCMLevel, jnxoptIfOTNPMFECCurDaySuspectReason=jnxoptIfOTNPMFECCurDaySuspectReason, jnxoptIfOTNPMCurrentBBEs=jnxoptIfOTNPMCurrentBBEs, jnxoptIfOTNPMConfigEntry=jnxoptIfOTNPMConfigEntry, jnxoptIfOTNPMCurrentDayType=jnxoptIfOTNPMCurrentDayType, jnxoptIfOTNPMCurrentType=jnxoptIfOTNPMCurrentType, jnxoptIfOTNPMIntervalEntry=jnxoptIfOTNPMIntervalEntry, jnxoptIfOTNPMPrevDayType=jnxoptIfOTNPMPrevDayType, jnxoptIfOPSmFiberTypeCategory=jnxoptIfOPSmFiberTypeCategory, jnxoptIfOTNPM15MinBip8Threshold=jnxoptIfOTNPM15MinBip8Threshold, jnxoptIfOTNPMESRInterval=jnxoptIfOTNPMESRInterval, jnxoptIfOTNPMCurrentFECAvgBERExponent=jnxoptIfOTNPMCurrentFECAvgBERExponent, jnxoptIfOTNPMPrevDayMaxFECBERMantissa=jnxoptIfOTNPMPrevDayMaxFECBERMantissa, jnxoptIfOTNPMIntervalESR=jnxoptIfOTNPMIntervalESR, jnxoptIfOChVendorTransceiverClass=jnxoptIfOChVendorTransceiverClass, jnxoptIfOTNPM15MinESsThreshold=jnxoptIfOTNPM15MinESsThreshold, jnxoptIfOTNAlarm=jnxoptIfOTNAlarm, JnxoptIfOTNOChAlarms=JnxoptIfOTNOChAlarms, jnxoptIfOTNAlarmDirection=jnxoptIfOTNAlarmDirection, jnxoptIfOChSinkMinimumOSNR=jnxoptIfOChSinkMinimumOSNR, jnxoptIfOTNPMIntervalTable=jnxoptIfOTNPMIntervalTable, jnxoptIfOTNPMFECIntervalTimeStamp=jnxoptIfOTNPMFECIntervalTimeStamp, jnxoptIfOChMaxWavelength=jnxoptIfOChMaxWavelength, jnxoptIfOChSrcSinkOpticalPathOSNRPenalty=jnxoptIfOChSrcSinkOpticalPathOSNRPenalty, jnxoptIfOTNPM15MinPreFECBERMantissaThreshold=jnxoptIfOTNPM15MinPreFECBERMantissaThreshold, jnxoptIfOTNPMCurrentFECElapsedTime=jnxoptIfOTNPMCurrentFECElapsedTime, jnxoptIfOChLaserOperationalState=jnxoptIfOChLaserOperationalState, jnxoptIfOTNPMCurrentFECMinBERExponent=jnxoptIfOTNPMCurrentFECMinBERExponent, jnxoptIfOChSinkCurrentExtEntry=jnxoptIfOChSinkCurrentExtEntry, jnxoptIfOTNPMIntervalSuspectedFlag=jnxoptIfOTNPMIntervalSuspectedFlag, jnxoptIfOTNODUkTcmAlarmClear=jnxoptIfOTNODUkTcmAlarmClear, jnxoptIfOTNPMFECIntervalEntry=jnxoptIfOTNPMFECIntervalEntry, jnxoptIfOTNPMPrevDayFECUncorrectedWords=jnxoptIfOTNPMPrevDayFECUncorrectedWords, jnxoptIfOChWavelength=jnxoptIfOChWavelength, jnxoptIfOTNPMIntervalTimeStamp=jnxoptIfOTNPMIntervalTimeStamp, jnxoptIfOTNPMPrevDayESs=jnxoptIfOTNPMPrevDayESs, jnxoptIfOTNPMFECIntervalSuspectedFlag=jnxoptIfOTNPMFECIntervalSuspectedFlag, jnxoptIfOTNPMPrevDayMinFECBERMantissa=jnxoptIfOTNPMPrevDayMinFECBERMantissa, jnxoptIfOTNPMPrevDayMinFECBERExponent=jnxoptIfOTNPMPrevDayMinFECBERExponent, jnxoptIfOTNODUkTcmAlarmType=jnxoptIfOTNODUkTcmAlarmType, jnxoptIfOTNPMCurrentDayMaxFECBERExponent=jnxoptIfOTNPMCurrentDayMaxFECBERExponent, jnxoptIfOTNPMFECIntervalType=jnxoptIfOTNPMFECIntervalType, jnxoptIfOTNPMCurrentDayBBER=jnxoptIfOTNPMCurrentDayBBER, jnxoptIfOTNPMCurrentDaySESs=jnxoptIfOTNPMCurrentDaySESs, jnxoptIfOTNPMIntervalMaxFECBERMantissa=jnxoptIfOTNPMIntervalMaxFECBERMantissa, jnxoptIfOChSinkCurrentExtTable=jnxoptIfOChSinkCurrentExtTable, jnxoptIfOTNAlarmTable=jnxoptIfOTNAlarmTable, jnxoptIfOTNPMConfigLayer=jnxoptIfOTNPMConfigLayer, JnxoptIfOTNLayer=JnxoptIfOTNLayer, jnxoptIfOTNPMIntervalESs=jnxoptIfOTNPMIntervalESs, jnxoptIfOChAdminState=jnxoptIfOChAdminState, jnxoptIfOTNPMCurrentBBER=jnxoptIfOTNPMCurrentBBER, jnxoptIfOChMaximumTxDispersionOSNRPenalty=jnxoptIfOChMaximumTxDispersionOSNRPenalty, jnxoptIfOTNPM24HourSESsThreshold=jnxoptIfOTNPM24HourSESsThreshold, jnxoptIfOTNPMFECConfigType=jnxoptIfOTNPMFECConfigType, jnxoptIfOTNPMIntervalSESs=jnxoptIfOTNPMIntervalSESs, jnxoptIfOChConfigExtEntry=jnxoptIfOChConfigExtEntry, jnxoptIfOTNPMFECCurrentTable=jnxoptIfOTNPMFECCurrentTable, jnxoptIfOTNPM24HourPreFECBERMantissaThreshold=jnxoptIfOTNPM24HourPreFECBERMantissaThreshold, jnxoptIfOTNPMConfigType=jnxoptIfOTNPMConfigType, jnxoptIfOPSmEntry=jnxoptIfOPSmEntry, jnxoptIfOTNPMCurrentDayESs=jnxoptIfOTNPMCurrentDayESs, jnxoptIfOTNPMPrevDayTimeStamp=jnxoptIfOTNPMPrevDayTimeStamp, jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss=jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss, jnxoptIfOChMiminumChannelSpacing=jnxoptIfOChMiminumChannelSpacing, JnxoptIfOTNODUkTcmAlarms=JnxoptIfOTNODUkTcmAlarms, jnxoptIfOTNPMPrevDayFECCorrectedErr=jnxoptIfOTNPMPrevDayFECCorrectedErr, jnxoptIfOChSinkMaximumMeanIntputPower=jnxoptIfOChSinkMaximumMeanIntputPower, jnxoptIfOTNPMCurrentSESs=jnxoptIfOTNPMCurrentSESs, jnxoptIfOChMinWavelength=jnxoptIfOChMinWavelength, jnxoptIfOTNPMIntervalBBER=jnxoptIfOTNPMIntervalBBER, jnxoptIfOTNPMPrevDayTable=jnxoptIfOTNPMPrevDayTable, jnxoptIfOTNPMIntervalAvgFECBERMantissa=jnxoptIfOTNPMIntervalAvgFECBERMantissa, JnxoptIfBitRateLineCoding=JnxoptIfBitRateLineCoding, jnxoptIfOChMinimumCentralFrequency=jnxoptIfOChMinimumCentralFrequency, jnxoptIfOTNPMCurrentDayESR=jnxoptIfOTNPMCurrentDayESR, jnxoptIfOTNPMCurrentDayFECCorrectedErr=jnxoptIfOTNPMCurrentDayFECCorrectedErr, jnxoptIfOTNPMCurrentDayUASs=jnxoptIfOTNPMCurrentDayUASs, jnxoptIfOPSmFiberTypeRecommendation=jnxoptIfOPSmFiberTypeRecommendation, jnxoptIfOTNPMFECIntervalTable=jnxoptIfOTNPMFECIntervalTable, jnxoptIfOChSrcConfigTable=jnxoptIfOChSrcConfigTable, jnxoptIfOTNPMCurrentDayBip8=jnxoptIfOTNPMCurrentDayBip8, jnxoptIfOChMaximumMeanChannelOutputPower=jnxoptIfOChMaximumMeanChannelOutputPower, jnxoptIfOTNPMFECCurSuspectReason=jnxoptIfOTNPMFECCurSuspectReason, PYSNMP_MODULE_ID=jnxoptIfExtMibModule, jnxoptIfOTNPMSESRInterval=jnxoptIfOTNPMSESRInterval, jnxoptIfOTNPMCurrentFECBERMantissa=jnxoptIfOTNPMCurrentFECBERMantissa, jnxoptIfOTNAlarmDate=jnxoptIfOTNAlarmDate, jnxoptIfOChSrcSinkMaximumChromaticDispersion=jnxoptIfOChSrcSinkMaximumChromaticDispersion, jnxoptIfOTNPM15MinSESsThreshold=jnxoptIfOTNPM15MinSESsThreshold, jnxoptIfOTNPMCurrentDaySESR=jnxoptIfOTNPMCurrentDaySESR, jnxoptIfOTNPMPrevDayESR=jnxoptIfOTNPMPrevDayESR, jnxoptIfOTNPM24HourPreFECBERExponentThreshold=jnxoptIfOTNPM24HourPreFECBERExponentThreshold, jnxoptIfOTNPMFECCurrentEntry=jnxoptIfOTNPMFECCurrentEntry, jnxoptIfOChSrcSinkInterFerometricCrosstalk=jnxoptIfOChSrcSinkInterFerometricCrosstalk, jnxoptIfOTNPMFECCurrentSuspectedFlag=jnxoptIfOTNPMFECCurrentSuspectedFlag, jnxoptIfOTNAlarmLayer=jnxoptIfOTNAlarmLayer, jnxoptIfOTNPMIntSuspectReason=jnxoptIfOTNPMIntSuspectReason, jnxoptIfOChLaserAdminState=jnxoptIfOChLaserAdminState, jnxoptIfOChOperationalState=jnxoptIfOChOperationalState, jnxoptIfOTNPMCurrentBip8=jnxoptIfOTNPMCurrentBip8, jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss=jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss, jnxoptIfOTNPMCurrentFECMaxBERExponent=jnxoptIfOTNPMCurrentFECMaxBERExponent, jnxoptIfOChSinkCurrentOSNR=jnxoptIfOChSinkCurrentOSNR, jnxoptIfOTNPMFECCurrentType=jnxoptIfOTNPMFECCurrentType, jnxoptIfOTNPMFECBEREnableTCA=jnxoptIfOTNPMFECBEREnableTCA, jnxoptIfOChMaximumCentralFrequency=jnxoptIfOChMaximumCentralFrequency, jnxoptIfOTNPMPrevDayEntry=jnxoptIfOTNPMPrevDayEntry, jnxoptIfOTNPMCurrentFECBERExponent=jnxoptIfOTNPMCurrentFECBERExponent, JnxoptIfChannelSpacing=JnxoptIfChannelSpacing, jnxoptIfOTNPM24HourBBEsThreshold=jnxoptIfOTNPM24HourBBEsThreshold, jnxoptIfOChSrcSinkConfigEntry=jnxoptIfOChSrcSinkConfigEntry, jnxoptIfOChSinkCurrentChromaticDispersion=jnxoptIfOChSinkCurrentChromaticDispersion, jnxoptIfOTNPMPrevDayBBER=jnxoptIfOTNPMPrevDayBBER, jnxoptIfOChConfigExtTable=jnxoptIfOChConfigExtTable, jnxoptIfOTNAlarmLocation=jnxoptIfOTNAlarmLocation, jnxoptIfOTNPMCurDaySuspectReason=jnxoptIfOTNPMCurDaySuspectReason, jnxoptIfOChSrcSinkConfigTable=jnxoptIfOChSrcSinkConfigTable, jnxoptIfOTNPMIntervalFECCorrectedErr=jnxoptIfOTNPMIntervalFECCorrectedErr, jnxoptIfOTNPMConfigTCMLevel=jnxoptIfOTNPMConfigTCMLevel, jnxoptIfOChBitRateLineCoding=jnxoptIfOChBitRateLineCoding, jnxoptIfOTNPMIntervalType=jnxoptIfOTNPMIntervalType, jnxoptIfOTNPMCurrentDayElapsedTime=jnxoptIfOTNPMCurrentDayElapsedTime, jnxoptIfOTNPMCurrentUASs=jnxoptIfOTNPMCurrentUASs, jnxoptIfOTNPMFECConfigTable=jnxoptIfOTNPMFECConfigTable, jnxoptIfOTNPMFECIntSuspectReason=jnxoptIfOTNPMFECIntSuspectReason, jnxoptIfOTNNotifications=jnxoptIfOTNNotifications, jnxoptIfOTNPMPrevDayUASs=jnxoptIfOTNPMPrevDayUASs, jnxoptIfOTNPMFECPrevDayTable=jnxoptIfOTNPMFECPrevDayTable, jnxoptIfOTNODUkTcmAlarmSet=jnxoptIfOTNODUkTcmAlarmSet, jnxoptIfOTNPM24HourBip8Threshold=jnxoptIfOTNPM24HourBip8Threshold, jnxoptIfOTNPMIntervalMinFECBERExponent=jnxoptIfOTNPMIntervalMinFECBERExponent, jnxoptIfOTNPMPrevDaySESR=jnxoptIfOTNPMPrevDaySESR, jnxoptIfOTNPMIntervalBBEs=jnxoptIfOTNPMIntervalBBEs, jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay=jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay, jnxoptIfOPSmConfigEntry=jnxoptIfOPSmConfigEntry, jnxoptIfOTNPMPrevDayAvgFECBERExponent=jnxoptIfOTNPMPrevDayAvgFECBERExponent, jnxoptIfOChSinkMaximumBERMantissa=jnxoptIfOChSinkMaximumBERMantissa, jnxoptIfOTNPMCurrentDayMinFECBERExponent=jnxoptIfOTNPMCurrentDayMinFECBERExponent, jnxoptIfOChFEC=jnxoptIfOChFEC, jnxoptIfOTNPMCurrentDayMaxFECBERMantissa=jnxoptIfOTNPMCurrentDayMaxFECBERMantissa, jnxoptIfOTNPMCurrentFECAvgBERMantissa=jnxoptIfOTNPMCurrentFECAvgBERMantissa, jnxoptIfOTNPMIntervalSESR=jnxoptIfOTNPMIntervalSESR, jnxoptIfOTNPMFECConfigEntry=jnxoptIfOTNPMFECConfigEntry, JnxoptIfOTNType=JnxoptIfOTNType, jnxoptIfOPSmConfigTable=jnxoptIfOPSmConfigTable, jnxoptIfOTNPMCurrentLayer=jnxoptIfOTNPMCurrentLayer, jnxoptIfOTNPMESsEnableTCA=jnxoptIfOTNPMESsEnableTCA, jnxoptIfOChMinimumMeanChannelOutputPower=jnxoptIfOChMinimumMeanChannelOutputPower, jnxoptIfOChSinkMinimumMeanIntputPower=jnxoptIfOChSinkMinimumMeanIntputPower, jnxoptIfOTNPMCurrentElapsedTime=jnxoptIfOTNPMCurrentElapsedTime, jnxoptIfOTNPMIntervalLayer=jnxoptIfOTNPMIntervalLayer, jnxoptIfOTNPMPrevDayBip8=jnxoptIfOTNPMPrevDayBip8, jnxoptIfOTNPMCurrentFECMinBERMantissa=jnxoptIfOTNPMCurrentFECMinBERMantissa, jnxoptIfOTNPMIntervalMinFECBERMantissa=jnxoptIfOTNPMIntervalMinFECBERMantissa, jnxoptIfOTNPMPrevDaySuspectedFlag=jnxoptIfOTNPMPrevDaySuspectedFlag, jnxoptIfOTNPMCurrentDayFECUncorrectedWords=jnxoptIfOTNPMCurrentDayFECUncorrectedWords, jnxoptIfOTNPMCurrentDayMinFECBERMantissa=jnxoptIfOTNPMCurrentDayMinFECBERMantissa, jnxoptIfOTNPMCurrentDayEntry=jnxoptIfOTNPMCurrentDayEntry, jnxoptIfOTNPMIntervalNumber=jnxoptIfOTNPMIntervalNumber, jnxoptIfOChSrcSinkGroup=jnxoptIfOChSrcSinkGroup, jnxoptIfOChMaximumSpectralExcursion=jnxoptIfOChMaximumSpectralExcursion, jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink=jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink, jnxoptIfOTNPMPrevDayLayer=jnxoptIfOTNPMPrevDayLayer, jnxoptIfOChOpticalInterfaceApplicationCode=jnxoptIfOChOpticalInterfaceApplicationCode, jnxoptIfOTNPMFECCurrentDayTable=jnxoptIfOTNPMFECCurrentDayTable, jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk=jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk, jnxoptIfOTNPMFECCurrentDaySuspectedFlag=jnxoptIfOTNPMFECCurrentDaySuspectedFlag, jnxoptIfOTNPMCurrentDayAvgFECBERMantissa=jnxoptIfOTNPMCurrentDayAvgFECBERMantissa, jnxoptIfOTNPMCurrentFECCorrectedErr=jnxoptIfOTNPMCurrentFECCorrectedErr, jnxoptIfOTNPMGroup=jnxoptIfOTNPMGroup, JnxoptIfFiberTypeRecommendation=JnxoptIfFiberTypeRecommendation, jnxoptIfOTNPMCurrentSESR=jnxoptIfOTNPMCurrentSESR, jnxoptIfOTNPMFECIntervalNumber=jnxoptIfOTNPMFECIntervalNumber, jnxoptIfOChSinkOSNRTolerance=jnxoptIfOChSinkOSNRTolerance, jnxoptIfOTNPMCurrentESs=jnxoptIfOTNPMCurrentESs, jnxoptIfOTNAlarmSeverity=jnxoptIfOTNAlarmSeverity, jnxoptIfOChSrcSinkMinimumChromaticDispersion=jnxoptIfOChSrcSinkMinimumChromaticDispersion, jnxoptIfOTNPMBBEsEnableTCA=jnxoptIfOTNPMBBEsEnableTCA, jnxoptIfOTNPM15MinPreFECBERExponentThreshold=jnxoptIfOTNPM15MinPreFECBERExponentThreshold, jnxoptIfOTNPMCurrentDayTable=jnxoptIfOTNPMCurrentDayTable, JnxoptIfOTNAlarmSeverity=JnxoptIfOTNAlarmSeverity, jnxoptIfOTNPMPrevDayTCMLevel=jnxoptIfOTNPMPrevDayTCMLevel, jnxoptIfOTNPMFECPrevDayType=jnxoptIfOTNPMFECPrevDayType, jnxoptIfOTNPMIntervalTCMLevel=jnxoptIfOTNPMIntervalTCMLevel, jnxoptIfOTNPMFECPrevDaySuspectReason=jnxoptIfOTNPMFECPrevDaySuspectReason, jnxoptIfOTNPMFECPrevDayEntry=jnxoptIfOTNPMFECPrevDayEntry, jnxoptIfOTNPMPrevDayBBEs=jnxoptIfOTNPMPrevDayBBEs, jnxoptIfOTNAlarmEntry=jnxoptIfOTNAlarmEntry, jnxoptIfOTNPMSESsEnableTCA=jnxoptIfOTNPMSESsEnableTCA)
