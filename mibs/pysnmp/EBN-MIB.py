#
# PySNMP MIB module EBN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EBN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
SnaControlPointName, = mibBuilder.importSymbols("APPN-MIB", "SnaControlPointName")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
snanauMIB, = mibBuilder.importSymbols("SNA-NAU-MIB", "snanauMIB")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, ObjectIdentity, ModuleIdentity, Bits, Integer32, Gauge32, NotificationType, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Bits", "Integer32", "Gauge32", "NotificationType", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "TimeTicks", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ebnMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 34, 7))
if mibBuilder.loadTexts: ebnMIB.setLastUpdated('9804281800Z')
if mibBuilder.loadTexts: ebnMIB.setOrganization('IETF SNA NAU MIB WG / AIW APPN MIBs SIG')
class SnaNAUWildcardName(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 17)

ebnObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1))
ebnDir = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 1))
ebnDirTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 1, 1), )
if mibBuilder.loadTexts: ebnDirTable.setStatus('current')
ebnDirEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 1, 1, 1), ).setIndexNames((0, "EBN-MIB", "ebnDirLuName"))
if mibBuilder.loadTexts: ebnDirEntry.setStatus('current')
ebnDirLuName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 1, 1, 1, 1), SnaNAUWildcardName())
if mibBuilder.loadTexts: ebnDirLuName.setStatus('current')
ebnDirSubnetAffiliation = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("native", 1), ("nonNative", 2), ("subarea", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnDirSubnetAffiliation.setStatus('current')
ebnIsRscv = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 2))
ebnIsRscvTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1), )
if mibBuilder.loadTexts: ebnIsRscvTable.setStatus('current')
ebnIsRscvEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1, 1), ).setIndexNames((0, "EBN-MIB", "ebnIsRscvCpName"), (0, "EBN-MIB", "ebnIsRscvPcid"))
if mibBuilder.loadTexts: ebnIsRscvEntry.setStatus('current')
ebnIsRscvCpName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1, 1, 1), SnaControlPointName())
if mibBuilder.loadTexts: ebnIsRscvCpName.setStatus('current')
ebnIsRscvPcid = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: ebnIsRscvPcid.setStatus('current')
ebnIsRscvDestinationRoute = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnIsRscvDestinationRoute.setStatus('current')
ebnIsRscvDestinationCos = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnIsRscvDestinationCos.setStatus('current')
ebnDirConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 3))
ebnSearchCacheTime = MibScalar((1, 3, 6, 1, 2, 1, 34, 7, 1, 3, 1), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnSearchCacheTime.setStatus('current')
ebnMaxSearchCache = MibScalar((1, 3, 6, 1, 2, 1, 34, 7, 1, 3, 2), Unsigned32()).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnMaxSearchCache.setStatus('current')
ebnDefaultSubnetVisitCount = MibScalar((1, 3, 6, 1, 2, 1, 34, 7, 1, 3, 3), Unsigned32()).setUnits('topology subnetworks').setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnDefaultSubnetVisitCount.setStatus('current')
ebnCOS = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 4))
ebnCosMapTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 4, 1), )
if mibBuilder.loadTexts: ebnCosMapTable.setStatus('current')
ebnCosMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 4, 1, 1), ).setIndexNames((0, "EBN-MIB", "ebnCosMapCpName"), (0, "EBN-MIB", "ebnCosMapNonNativeCos"))
if mibBuilder.loadTexts: ebnCosMapEntry.setStatus('current')
ebnCosMapCpName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 4, 1, 1, 1), SnaNAUWildcardName())
if mibBuilder.loadTexts: ebnCosMapCpName.setStatus('current')
ebnCosMapNonNativeCos = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: ebnCosMapNonNativeCos.setStatus('current')
ebnCosMapNativeCos = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnCosMapNativeCos.setStatus('current')
ebnSubnetRoutingList = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 5))
ebnSubnetSearchTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 1), )
if mibBuilder.loadTexts: ebnSubnetSearchTable.setStatus('current')
ebnSubnetSearchEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 1, 1), ).setIndexNames((0, "EBN-MIB", "ebnSubnetSearchLuName"))
if mibBuilder.loadTexts: ebnSubnetSearchEntry.setStatus('current')
ebnSubnetSearchLuName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 1, 1, 1), SnaNAUWildcardName())
if mibBuilder.loadTexts: ebnSubnetSearchLuName.setStatus('current')
ebnSubnetSearchDynamics = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("limited", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnSubnetSearchDynamics.setStatus('current')
ebnSubnetSearchOrdering = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priority", 1), ("defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnSubnetSearchOrdering.setStatus('current')
ebnSearchTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2), )
if mibBuilder.loadTexts: ebnSearchTable.setStatus('current')
ebnSearchEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2, 1), ).setIndexNames((0, "EBN-MIB", "ebnSearchLuName"), (0, "EBN-MIB", "ebnSearchIndex"))
if mibBuilder.loadTexts: ebnSearchEntry.setStatus('current')
ebnSearchLuName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2, 1, 1), SnaNAUWildcardName())
if mibBuilder.loadTexts: ebnSearchLuName.setStatus('current')
ebnSearchIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ebnSearchIndex.setStatus('current')
ebnSearchCpName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnSearchCpName.setStatus('current')
ebnSearchSNVC = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnSearchSNVC.setStatus('current')
hbn = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 6))
hbnIsInTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1), )
if mibBuilder.loadTexts: hbnIsInTable.setStatus('current')
hbnIsInEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1, 1), ).setIndexNames((0, "EBN-MIB", "hbnIsInFqCpName"), (0, "EBN-MIB", "hbnIsInPcid"))
if mibBuilder.loadTexts: hbnIsInEntry.setStatus('current')
hbnIsInFqCpName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1, 1, 1), SnaControlPointName())
if mibBuilder.loadTexts: hbnIsInFqCpName.setStatus('current')
hbnIsInPcid = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: hbnIsInPcid.setStatus('current')
hbnIsInRtpNceId = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hbnIsInRtpNceId.setStatus('current')
hbnIsInRtpTcid = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hbnIsInRtpTcid.setStatus('current')
ebnConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 2))
ebnCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 2, 1))
ebnGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 2, 2))
ebnCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 34, 7, 2, 1, 1)).setObjects(("EBN-MIB", "ebnDirectoryGroup"), ("EBN-MIB", "ebnIsRscvGroup"), ("EBN-MIB", "ebnDirectoryConfigGroup"), ("EBN-MIB", "ebnCosMappingGroup"), ("EBN-MIB", "ebnSubnetRoutingListGroup"), ("EBN-MIB", "hbnIsInGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ebnCompliance = ebnCompliance.setStatus('current')
ebnDirectoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 1)).setObjects(("EBN-MIB", "ebnDirSubnetAffiliation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ebnDirectoryGroup = ebnDirectoryGroup.setStatus('current')
ebnIsRscvGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 2)).setObjects(("EBN-MIB", "ebnIsRscvDestinationRoute"), ("EBN-MIB", "ebnIsRscvDestinationCos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ebnIsRscvGroup = ebnIsRscvGroup.setStatus('current')
ebnDirectoryConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 3)).setObjects(("EBN-MIB", "ebnSearchCacheTime"), ("EBN-MIB", "ebnMaxSearchCache"), ("EBN-MIB", "ebnDefaultSubnetVisitCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ebnDirectoryConfigGroup = ebnDirectoryConfigGroup.setStatus('current')
ebnCosMappingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 4)).setObjects(("EBN-MIB", "ebnCosMapNativeCos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ebnCosMappingGroup = ebnCosMappingGroup.setStatus('current')
ebnSubnetRoutingListGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 5)).setObjects(("EBN-MIB", "ebnSubnetSearchDynamics"), ("EBN-MIB", "ebnSubnetSearchOrdering"), ("EBN-MIB", "ebnSearchCpName"), ("EBN-MIB", "ebnSearchSNVC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ebnSubnetRoutingListGroup = ebnSubnetRoutingListGroup.setStatus('current')
hbnIsInGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 6)).setObjects(("EBN-MIB", "hbnIsInRtpNceId"), ("EBN-MIB", "hbnIsInRtpTcid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hbnIsInGroup = hbnIsInGroup.setStatus('current')
mibBuilder.exportSymbols("EBN-MIB", ebnIsRscvCpName=ebnIsRscvCpName, ebnIsRscvDestinationCos=ebnIsRscvDestinationCos, hbnIsInFqCpName=hbnIsInFqCpName, ebnObjects=ebnObjects, hbnIsInPcid=hbnIsInPcid, ebnSubnetRoutingListGroup=ebnSubnetRoutingListGroup, ebnSearchEntry=ebnSearchEntry, ebnDirEntry=ebnDirEntry, ebnIsRscvPcid=ebnIsRscvPcid, ebnCOS=ebnCOS, ebnCompliances=ebnCompliances, hbn=hbn, hbnIsInTable=hbnIsInTable, hbnIsInRtpTcid=hbnIsInRtpTcid, ebnSearchCacheTime=ebnSearchCacheTime, hbnIsInGroup=hbnIsInGroup, ebnCosMapCpName=ebnCosMapCpName, ebnConformance=ebnConformance, ebnSearchTable=ebnSearchTable, ebnSearchLuName=ebnSearchLuName, ebnCosMapNonNativeCos=ebnCosMapNonNativeCos, ebnSubnetSearchEntry=ebnSubnetSearchEntry, ebnSubnetSearchLuName=ebnSubnetSearchLuName, ebnSubnetSearchOrdering=ebnSubnetSearchOrdering, ebnSearchSNVC=ebnSearchSNVC, ebnDir=ebnDir, ebnCosMapEntry=ebnCosMapEntry, ebnMaxSearchCache=ebnMaxSearchCache, ebnDirectoryConfigGroup=ebnDirectoryConfigGroup, ebnGroups=ebnGroups, ebnSubnetSearchDynamics=ebnSubnetSearchDynamics, ebnMIB=ebnMIB, ebnIsRscv=ebnIsRscv, ebnCosMapNativeCos=ebnCosMapNativeCos, hbnIsInRtpNceId=hbnIsInRtpNceId, ebnSearchCpName=ebnSearchCpName, ebnCosMapTable=ebnCosMapTable, ebnIsRscvDestinationRoute=ebnIsRscvDestinationRoute, ebnIsRscvGroup=ebnIsRscvGroup, ebnSubnetRoutingList=ebnSubnetRoutingList, ebnDirLuName=ebnDirLuName, PYSNMP_MODULE_ID=ebnMIB, SnaNAUWildcardName=SnaNAUWildcardName, ebnIsRscvTable=ebnIsRscvTable, ebnDirTable=ebnDirTable, ebnDirectoryGroup=ebnDirectoryGroup, ebnDirSubnetAffiliation=ebnDirSubnetAffiliation, ebnSubnetSearchTable=ebnSubnetSearchTable, ebnDirConfig=ebnDirConfig, ebnCompliance=ebnCompliance, ebnIsRscvEntry=ebnIsRscvEntry, ebnDefaultSubnetVisitCount=ebnDefaultSubnetVisitCount, ebnCosMappingGroup=ebnCosMappingGroup, ebnSearchIndex=ebnSearchIndex, hbnIsInEntry=hbnIsInEntry)
