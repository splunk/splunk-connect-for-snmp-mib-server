#
# PySNMP MIB module XYLAN-HREX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-HREX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:38:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ObjectIdentity, Bits, TimeTicks, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, MibIdentifier, ModuleIdentity, iso, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "Bits", "TimeTicks", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "MibIdentifier", "ModuleIdentity", "iso", "Counter32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanHrexArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanHrexArch")
xylanHrexRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 31, 1), )
if mibBuilder.loadTexts: xylanHrexRegisterTable.setStatus('mandatory')
xylanHrexRegisterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 31, 1, 1), ).setIndexNames((0, "XYLAN-HREX-MIB", "xylanHrexRegisterNumber"))
if mibBuilder.loadTexts: xylanHrexRegisterEntry.setStatus('mandatory')
xylanHrexRegisterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 31, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexRegisterNumber.setStatus('mandatory')
xylanHrexRegisterAllowType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("any", 1), ("cip", 2), ("m013", 3), ("mpoa", 4), ("routing", 5), ("vrrp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanHrexRegisterAllowType.setStatus('mandatory')
xylanHrexRegisterUseType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 31, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("unused", 1), ("cip", 2), ("m013", 3), ("mpoa", 4), ("routing", 5), ("vrrp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexRegisterUseType.setStatus('mandatory')
xylanHrexStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 31, 2))
xylanHrexIpPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpPacketsReceived.setStatus('mandatory')
xylanHrexIpPacketsForwarded = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpPacketsForwarded.setStatus('mandatory')
xylanHrexIpPacketsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpPacketsDiscarded.setStatus('mandatory')
xylanHrexIpxPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpxPacketsReceived.setStatus('mandatory')
xylanHrexIpxPacketsForwarded = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpxPacketsForwarded.setStatus('mandatory')
xylanHrexIpxPacketsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpxPacketsDiscarded.setStatus('mandatory')
xylanHrexUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 31, 3))
xylanHrexPseudoCamHashTotal = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexPseudoCamHashTotal.setStatus('mandatory')
xylanHrexPseudoCamHashFree = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexPseudoCamHashFree.setStatus('mandatory')
xylanHrexPseudoCamCollisionTotal = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexPseudoCamCollisionTotal.setStatus('mandatory')
xylanHrexPseudoCamCollisionFree = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexPseudoCamCollisionFree.setStatus('mandatory')
xylanHrexCacheTotal = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexCacheTotal.setStatus('mandatory')
xylanHrexCacheFree = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexCacheFree.setStatus('mandatory')
xylanHrexCollisionLengthMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexCollisionLengthMax.setStatus('mandatory')
xylanHrexCollisionLengthAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexCollisionLengthAvg.setStatus('mandatory')
xylanHrexHash = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 31, 4))
xylanHrexHashOptimize = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 4, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: xylanHrexHashOptimize.setStatus('mandatory')
xylanHrexHashDefault = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 4, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: xylanHrexHashDefault.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-HREX-MIB", xylanHrexPseudoCamCollisionFree=xylanHrexPseudoCamCollisionFree, xylanHrexCacheTotal=xylanHrexCacheTotal, xylanHrexPseudoCamHashFree=xylanHrexPseudoCamHashFree, xylanHrexRegisterUseType=xylanHrexRegisterUseType, xylanHrexHashOptimize=xylanHrexHashOptimize, xylanHrexRegisterEntry=xylanHrexRegisterEntry, xylanHrexUtilization=xylanHrexUtilization, xylanHrexCollisionLengthMax=xylanHrexCollisionLengthMax, xylanHrexIpxPacketsDiscarded=xylanHrexIpxPacketsDiscarded, xylanHrexIpxPacketsForwarded=xylanHrexIpxPacketsForwarded, xylanHrexHashDefault=xylanHrexHashDefault, xylanHrexCacheFree=xylanHrexCacheFree, xylanHrexStatistics=xylanHrexStatistics, xylanHrexIpPacketsReceived=xylanHrexIpPacketsReceived, xylanHrexIpPacketsForwarded=xylanHrexIpPacketsForwarded, xylanHrexCollisionLengthAvg=xylanHrexCollisionLengthAvg, xylanHrexRegisterNumber=xylanHrexRegisterNumber, xylanHrexHash=xylanHrexHash, xylanHrexIpxPacketsReceived=xylanHrexIpxPacketsReceived, xylanHrexRegisterTable=xylanHrexRegisterTable, xylanHrexPseudoCamCollisionTotal=xylanHrexPseudoCamCollisionTotal, xylanHrexRegisterAllowType=xylanHrexRegisterAllowType, xylanHrexPseudoCamHashTotal=xylanHrexPseudoCamHashTotal, xylanHrexIpPacketsDiscarded=xylanHrexIpPacketsDiscarded)
