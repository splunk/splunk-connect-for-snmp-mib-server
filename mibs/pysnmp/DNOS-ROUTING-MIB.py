#
# PySNMP MIB module DNOS-ROUTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-ROUTING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:37:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
dnOS, = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
ospfIfEntry, ospfVirtIfEntry, ospfAreaEntry, RouterID = mibBuilder.importSymbols("OSPF-MIB", "ospfIfEntry", "ospfVirtIfEntry", "ospfAreaEntry", "RouterID")
rip2IfConfEntry, = mibBuilder.importSymbols("RIPv2-MIB", "rip2IfConfEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, Counter32, TimeTicks, Counter64, NotificationType, ModuleIdentity, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Counter32", "TimeTicks", "Counter64", "NotificationType", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "MibIdentifier", "iso")
TruthValue, PhysAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "PhysAddress", "TextualConvention", "RowStatus", "DisplayString")
vrrpOperVrId, = mibBuilder.importSymbols("VRRP-MIB", "vrrpOperVrId")
fastPathRouting = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2))
fastPathRouting.setRevisions(('2011-01-26 00:00', '2007-05-23 00:00', '2003-11-21 00:00', '2003-04-02 17:00',))
if mibBuilder.loadTexts: fastPathRouting.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathRouting.setOrganization('Dell, Inc.')
class SpfTimerRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class AutoCostRefBw(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967)

agentSwitchArpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1))
agentSwitchArpAgeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 21600)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpAgeoutTime.setStatus('current')
agentSwitchArpResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpResponseTime.setStatus('current')
agentSwitchArpMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpMaxRetries.setStatus('current')
agentSwitchArpCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpCacheSize.setStatus('current')
agentSwitchArpDynamicRenew = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpDynamicRenew.setStatus('current')
agentSwitchArpTotalEntryCountCurrent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpTotalEntryCountCurrent.setStatus('current')
agentSwitchArpTotalEntryCountPeak = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpTotalEntryCountPeak.setStatus('current')
agentSwitchArpStaticEntryCountCurrent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpStaticEntryCountCurrent.setStatus('current')
agentSwitchArpStaticEntryCountMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpStaticEntryCountMax.setStatus('current')
agentSwitchArpTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10), )
if mibBuilder.loadTexts: agentSwitchArpTable.setStatus('obsolete')
agentSwitchArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentSwitchArpIpAddress"))
if mibBuilder.loadTexts: agentSwitchArpEntry.setStatus('obsolete')
agentSwitchArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpAge.setStatus('obsolete')
agentSwitchArpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpIpAddress.setStatus('obsolete')
agentSwitchArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 3), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchArpMacAddress.setStatus('obsolete')
agentSwitchArpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchArpInterface.setStatus('obsolete')
agentSwitchArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("gateway", 2), ("static", 3), ("dynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpType.setStatus('obsolete')
agentSwitchArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpStatus.setStatus('obsolete')
agentSwitchLocalProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 11), )
if mibBuilder.loadTexts: agentSwitchLocalProxyArpTable.setStatus('current')
agentSwitchLocalProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentSwitchLocalProxyArpEntry.setStatus('current')
agentSwitchLocalProxyArpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchLocalProxyArpMode.setStatus('current')
agentSwitchIntfArpTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12), )
if mibBuilder.loadTexts: agentSwitchIntfArpTable.setStatus('current')
agentSwitchIntfArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentSwitchIntfArpIpAddress"), (0, "DNOS-ROUTING-MIB", "agentSwitchIntfArpIfIndex"))
if mibBuilder.loadTexts: agentSwitchIntfArpEntry.setStatus('current')
agentSwitchIntfArpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchIntfArpIpAddress.setStatus('current')
agentSwitchIntfArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: agentSwitchIntfArpIfIndex.setStatus('current')
agentSwitchIntfArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIntfArpAge.setStatus('current')
agentSwitchIntfArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchIntfArpMacAddress.setStatus('current')
agentSwitchIntfArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("gateway", 2), ("static", 3), ("dynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIntfArpType.setStatus('current')
agentSwitchIntfArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchIntfArpStatus.setStatus('current')
agentSwitchIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2))
agentSwitchIpRoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRoutingMode.setStatus('current')
agentSwitchIpDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpDefaultGateway.setStatus('current')
agentSwitchIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: agentSwitchIpInterfaceTable.setStatus('current')
agentSwitchIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentSwitchIpInterfaceIfIndex"))
if mibBuilder.loadTexts: agentSwitchIpInterfaceEntry.setStatus('current')
agentSwitchIpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpInterfaceIfIndex.setStatus('current')
agentSwitchIPAddressConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("manual", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIPAddressConfigMethod.setStatus('current')
agentSwitchIpInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceIpAddress.setStatus('current')
agentSwitchIpInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceNetMask.setStatus('current')
agentSwitchIpInterfaceClearIp = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceClearIp.setStatus('current')
agentSwitchIpInterfaceRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceRoutingMode.setStatus('current')
agentSwitchIpInterfaceProxyARPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceProxyARPMode.setStatus('current')
agentSwitchIpInterfaceMtuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(68, 9198), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceMtuValue.setStatus('current')
agentSwitchIpInterfaceBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceBandwidth.setStatus('current')
agentSwitchIpInterfaceUnnumberedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceUnnumberedIfIndex.setStatus('current')
agentSwitchIpInterfaceIcmpUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceIcmpUnreachables.setStatus('current')
agentSwitchIpInterfaceIcmpRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceIcmpRedirects.setStatus('current')
agentSwitchDhcpOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("renew", 1), ("release", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDhcpOperation.setStatus('current')
agentSwitchIpInterfaceSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unsuppressed", 0), ("suppressed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpInterfaceSuppressed.setStatus('current')
agentSwitchIpInterfaceNumberOfFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpInterfaceNumberOfFlaps.setStatus('current')
agentSwitchIpInterfaceCurrentPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpInterfaceCurrentPenalty.setStatus('current')
agentSwitchIpInterfaceReUseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpInterfaceReUseTime.setStatus('current')
agentSwitchIpRouterDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4), )
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryTable.setStatus('current')
agentSwitchIpRouterDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentSwitchIpRouterDiscoveryIfIndex"))
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryEntry.setStatus('current')
agentSwitchIpRouterDiscoveryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryIfIndex.setStatus('current')
agentSwitchIpRouterDiscoveryAdvertiseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryAdvertiseMode.setStatus('current')
agentSwitchIpRouterDiscoveryMaxAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryMaxAdvertisementInterval.setStatus('current')
agentSwitchIpRouterDiscoveryMinAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1800)).clone(450)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryMinAdvertisementInterval.setStatus('current')
agentSwitchIpRouterDiscoveryAdvertisementLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9000)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryAdvertisementLifetime.setStatus('current')
agentSwitchIpRouterDiscoveryPreferenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryPreferenceLevel.setStatus('current')
agentSwitchIpRouterDiscoveryAdvertisementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 7), IpAddress().clone(hexValue="E0000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryAdvertisementAddress.setStatus('current')
agentSwitchIpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 5), )
if mibBuilder.loadTexts: agentSwitchIpVlanTable.setStatus('current')
agentSwitchIpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 5, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentSwitchIpVlanId"))
if mibBuilder.loadTexts: agentSwitchIpVlanEntry.setStatus('current')
agentSwitchIpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpVlanId.setStatus('current')
agentSwitchIpVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpVlanIfIndex.setStatus('current')
agentSwitchIpVlanRoutingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchIpVlanRoutingStatus.setStatus('current')
agentSwitchSecondaryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 6), )
if mibBuilder.loadTexts: agentSwitchSecondaryAddressTable.setStatus('current')
agentSwitchSecondaryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 6, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentSwitchIpInterfaceIfIndex"), (0, "DNOS-ROUTING-MIB", "agentSwitchSecondaryIpAddress"))
if mibBuilder.loadTexts: agentSwitchSecondaryAddressEntry.setStatus('current')
agentSwitchSecondaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchSecondaryIpAddress.setStatus('current')
agentSwitchSecondaryNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchSecondaryNetMask.setStatus('current')
agentSwitchSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchSecondaryStatus.setStatus('current')
agentSwitchHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 7), )
if mibBuilder.loadTexts: agentSwitchHelperAddressTable.setStatus('obsolete')
agentSwitchHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 7, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentSwitchIpInterfaceIfIndex"), (0, "DNOS-ROUTING-MIB", "agentSwitchHelperIpAddress"))
if mibBuilder.loadTexts: agentSwitchHelperAddressEntry.setStatus('obsolete')
agentSwitchHelperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchHelperIpAddress.setStatus('obsolete')
agentSwitchHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchHelperStatus.setStatus('obsolete')
agentSwitchIpIcmpControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 8))
agentSwitchIpIcmpEchoReplyMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpIcmpEchoReplyMode.setStatus('current')
agentSwitchIpIcmpRedirectsMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpIcmpRedirectsMode.setStatus('current')
agentSwitchIpIcmpRateLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpIcmpRateLimitInterval.setStatus('current')
agentSwitchIpIcmpRateLimitBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpIcmpRateLimitBurstSize.setStatus('current')
agentSwitchIntfIpHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10), )
if mibBuilder.loadTexts: agentSwitchIntfIpHelperAddressTable.setStatus('current')
agentSwitchIntfIpHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentSwitchIpInterfaceIfIndex"), (0, "DNOS-ROUTING-MIB", "agentSwitchIntfIpHelperUdpPort"), (0, "DNOS-ROUTING-MIB", "agentSwitchIntfIpHelperIpAddress"))
if mibBuilder.loadTexts: agentSwitchIntfIpHelperAddressEntry.setStatus('current')
agentSwitchIntfIpHelperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchIntfIpHelperIpAddress.setStatus('current')
agentSwitchIntfIpHelperUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: agentSwitchIntfIpHelperUdpPort.setStatus('current')
agentSwitchIntfIpHelperDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIntfIpHelperDiscard.setStatus('obsolete')
agentSwitchIntfIpHelperHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIntfIpHelperHitCount.setStatus('current')
agentSwitchIntfIpHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchIntfIpHelperStatus.setStatus('current')
agentSwitchClearIpDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchClearIpDefaultGateway.setStatus('current')
agentRouterRipConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3))
agentRouterRipAdminState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipAdminState.setStatus('current')
agentRouterRipSplitHorizonMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("poisonReverse", 3))).clone('simple')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipSplitHorizonMode.setStatus('current')
agentRouterRipAutoSummaryMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipAutoSummaryMode.setStatus('current')
agentRouterRipHostRoutesAcceptMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipHostRoutesAcceptMode.setStatus('current')
agentRouterRipDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipDefaultMetric.setStatus('current')
agentRouterRipDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipDefaultMetricConfigured.setStatus('current')
agentRouterRipDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipDefaultInfoOriginate.setStatus('current')
agentRipRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8), )
if mibBuilder.loadTexts: agentRipRouteRedistTable.setStatus('current')
agentRipRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentRipRouteRedistSource"))
if mibBuilder.loadTexts: agentRipRouteRedistEntry.setStatus('current')
agentRipRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("ospf", 3), ("bgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRipRouteRedistSource.setStatus('current')
agentRipRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMode.setStatus('current')
agentRipRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMetric.setStatus('current')
agentRipRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMetricConfigured.setStatus('current')
agentRipRouteRedistMatchInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMatchInternal.setStatus('current')
agentRipRouteRedistMatchExternal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMatchExternal1.setStatus('current')
agentRipRouteRedistMatchExternal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMatchExternal2.setStatus('current')
agentRipRouteRedistMatchNSSAExternal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMatchNSSAExternal1.setStatus('current')
agentRipRouteRedistMatchNSSAExternal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMatchNSSAExternal2.setStatus('current')
agentRipRouteRedistDistList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistDistList.setStatus('current')
agentRipRouteRedistDistListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistDistListConfigured.setStatus('current')
agentRip2IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 9), )
if mibBuilder.loadTexts: agentRip2IfConfTable.setStatus('current')
agentRip2IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 9, 1), )
rip2IfConfEntry.registerAugmentions(("DNOS-ROUTING-MIB", "agentRip2IfConfEntry"))
agentRip2IfConfEntry.setIndexNames(*rip2IfConfEntry.getIndexNames())
if mibBuilder.loadTexts: agentRip2IfConfEntry.setStatus('current')
agentRip2IfConfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRip2IfConfAuthKeyId.setStatus('current')
agentRouterRipRoutePref = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterRipRoutePref.setStatus('current')
agentRouterOspfConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4))
agentOspfDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16777214), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultMetric.setStatus('current')
agentOspfDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultMetricConfigured.setStatus('current')
agentOspfDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginate.setStatus('current')
agentOspfDefaultInfoOriginateAlways = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateAlways.setStatus('current')
agentOspfDefaultInfoOriginateMetric = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16777214), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateMetric.setStatus('current')
agentOspfDefaultInfoOriginateMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateMetricConfigured.setStatus('current')
agentOspfDefaultInfoOriginateMetricType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateMetricType.setStatus('current')
agentOspfRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8), )
if mibBuilder.loadTexts: agentOspfRouteRedistTable.setStatus('current')
agentOspfRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentOspfRouteRedistSource"))
if mibBuilder.loadTexts: agentOspfRouteRedistEntry.setStatus('current')
agentOspfRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("rip", 3), ("bgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfRouteRedistSource.setStatus('current')
agentOspfRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistMode.setStatus('current')
agentOspfRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistMetric.setStatus('current')
agentOspfRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistMetricConfigured.setStatus('current')
agentOspfRouteRedistMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone('externalType2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistMetricType.setStatus('current')
agentOspfRouteRedistTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistTag.setStatus('current')
agentOspfRouteRedistSubnets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistSubnets.setStatus('current')
agentOspfRouteRedistDistList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistDistList.setStatus('current')
agentOspfRouteRedistDistListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistDistListConfigured.setStatus('current')
agentOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9), )
if mibBuilder.loadTexts: agentOspfIfTable.setStatus('current')
agentOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9, 1), )
ospfIfEntry.registerAugmentions(("DNOS-ROUTING-MIB", "agentOspfIfEntry"))
agentOspfIfEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: agentOspfIfEntry.setStatus('current')
agentOspfIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOspfIfAuthKeyId.setStatus('current')
agentOspfIfIpMtuIgnoreFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfIfIpMtuIgnoreFlag.setStatus('current')
agentOspfIfPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfIfPassiveMode.setStatus('current')
agentOspfIfAdvertiseSecondaries = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfIfAdvertiseSecondaries.setStatus('current')
agentOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 10), )
if mibBuilder.loadTexts: agentOspfVirtIfTable.setStatus('current')
agentOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 10, 1), )
ospfVirtIfEntry.registerAugmentions(("DNOS-ROUTING-MIB", "agentOspfVirtIfEntry"))
agentOspfVirtIfEntry.setIndexNames(*ospfVirtIfEntry.getIndexNames())
if mibBuilder.loadTexts: agentOspfVirtIfEntry.setStatus('current')
agentOspfVirtIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOspfVirtIfAuthKeyId.setStatus('current')
agentRouterOspfRFC1583CompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterOspfRFC1583CompatibilityMode.setStatus('current')
agentOspfSpfDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 12), SpfTimerRange().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfSpfDelayTime.setStatus('current')
agentOspfSpfHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 13), SpfTimerRange().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfSpfHoldTime.setStatus('current')
agentOspfAutoCostRefBw = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 14), AutoCostRefBw().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfAutoCostRefBw.setStatus('current')
agentOspfOpaqueLsaSupport = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfOpaqueLsaSupport.setStatus('current')
agentOspfAreaOpaqueLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16), )
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbTable.setStatus('current')
agentOspfAreaOpaqueLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentOspfAreaOpaqueLsdbAreaId"), (0, "DNOS-ROUTING-MIB", "agentOspfAreaOpaqueLsdbType"), (0, "DNOS-ROUTING-MIB", "agentOspfAreaOpaqueLsdbLsid"), (0, "DNOS-ROUTING-MIB", "agentOspfAreaOpaqueLsdbRouterId"))
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbEntry.setStatus('current')
agentOspfAreaOpaqueLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAreaId.setStatus('current')
agentOspfAreaOpaqueLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("areaOpaqueLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbType.setStatus('current')
agentOspfAreaOpaqueLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbLsid.setStatus('current')
agentOspfAreaOpaqueLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbRouterId.setStatus('current')
agentOspfAreaOpaqueLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbSequence.setStatus('current')
agentOspfAreaOpaqueLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAge.setStatus('current')
agentOspfAreaOpaqueLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbChecksum.setStatus('current')
agentOspfAreaOpaqueLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAdvertisement.setStatus('current')
agentOspfLocalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17), )
if mibBuilder.loadTexts: agentOspfLocalLsdbTable.setStatus('current')
agentOspfLocalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentOspfLocalLsdbIpAddress"), (0, "DNOS-ROUTING-MIB", "agentOspfLocalLsdbAddressLessIf"), (0, "DNOS-ROUTING-MIB", "agentOspfLocalLsdbType"), (0, "DNOS-ROUTING-MIB", "agentOspfLocalLsdbLsid"), (0, "DNOS-ROUTING-MIB", "agentOspfLocalLsdbRouterId"))
if mibBuilder.loadTexts: agentOspfLocalLsdbEntry.setStatus('current')
agentOspfLocalLsdbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbIpAddress.setStatus('current')
agentOspfLocalLsdbAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbAddressLessIf.setStatus('current')
agentOspfLocalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9))).clone(namedValues=NamedValues(("localOpaqueLink", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbType.setStatus('current')
agentOspfLocalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbLsid.setStatus('current')
agentOspfLocalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 5), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbRouterId.setStatus('current')
agentOspfLocalLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbSequence.setStatus('current')
agentOspfLocalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbAge.setStatus('current')
agentOspfLocalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbChecksum.setStatus('current')
agentOspfLocalLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbAdvertisement.setStatus('current')
agentOspfAsLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18), )
if mibBuilder.loadTexts: agentOspfAsLsdbTable.setStatus('current')
agentOspfAsLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentOspfAsLsdbType"), (0, "DNOS-ROUTING-MIB", "agentOspfAsLsdbLsid"), (0, "DNOS-ROUTING-MIB", "agentOspfAsLsdbRouterId"))
if mibBuilder.loadTexts: agentOspfAsLsdbEntry.setStatus('current')
agentOspfAsLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11))).clone(namedValues=NamedValues(("asOpaqueLink", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbType.setStatus('current')
agentOspfAsLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbLsid.setStatus('current')
agentOspfAsLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbRouterId.setStatus('current')
agentOspfAsLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbSequence.setStatus('current')
agentOspfAsLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbAge.setStatus('current')
agentOspfAsLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbChecksum.setStatus('current')
agentOspfAsLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbAdvertisement.setStatus('current')
agentOspfDefaultPassiveMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultPassiveMode.setStatus('current')
agentOspfRoutePrefIntraArea = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRoutePrefIntraArea.setStatus('current')
agentOspfRoutePrefInterArea = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRoutePrefInterArea.setStatus('current')
agentOspfRoutePrefExternal = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRoutePrefExternal.setStatus('current')
agentSnmpTrapFlagsConfigGroupLayer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 5))
agentSnmpVRRPNewMasterTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpVRRPNewMasterTrapFlag.setStatus('current')
agentSnmpVRRPAuthFailureTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpVRRPAuthFailureTrapFlag.setStatus('current')
agentBootpDhcpRelayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6))
agentBootpDhcpRelayMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayMaxHopCount.setStatus('current')
agentBootpDhcpRelayForwardingIp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayForwardingIp.setStatus('obsolete')
agentBootpDhcpRelayForwardMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayForwardMode.setStatus('obsolete')
agentBootpDhcpRelayMinWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayMinWaitTime.setStatus('current')
agentBootpDhcpRelayCircuitIdOptionMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayCircuitIdOptionMode.setStatus('current')
agentBootpDhcpRelayNumOfRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBootpDhcpRelayNumOfRequestsReceived.setStatus('obsolete')
agentBootpDhcpRelayNumOfRequestsForwarded = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBootpDhcpRelayNumOfRequestsForwarded.setStatus('obsolete')
agentBootpDhcpRelayNumOfDiscards = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBootpDhcpRelayNumOfDiscards.setStatus('obsolete')
agentBootpDhcpRelayCheckReply = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayCheckReply.setStatus('current')
agentBootpDhcpRelayIntfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 10), )
if mibBuilder.loadTexts: agentBootpDhcpRelayIntfTable.setStatus('current')
agentBootpDhcpRelayIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 10, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentBootpVlanId"))
if mibBuilder.loadTexts: agentBootpDhcpRelayIntfEntry.setStatus('current')
agentBootpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBootpVlanId.setStatus('current')
agentBootpDhcpRelayIntfCircuitIdOptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayIntfCircuitIdOptionMode.setStatus('current')
agentBootpDhcpRelayIntfCheckReply = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayIntfCheckReply.setStatus('current')
agentECMPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 7))
agentECMPOspfMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 7, 1), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentECMPOspfMaxPaths.setStatus('current')
agentRouterVrrpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 8))
agentRouterVrrpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterVrrpAdminState.setStatus('current')
agentRouterVrrpConfiguredTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 8, 2), )
if mibBuilder.loadTexts: agentRouterVrrpConfiguredTable.setStatus('current')
agentRouterVrrpConfiguredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"))
if mibBuilder.loadTexts: agentRouterVrrpConfiguredEntry.setStatus('current')
agentRouterVrrpConfiguredPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouterVrrpConfiguredPriority.setStatus('current')
agentVrrpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 9))
agentRouterVrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 9, 1), )
if mibBuilder.loadTexts: agentRouterVrrpOperTable.setStatus('obsolete')
agentRouterVrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"))
if mibBuilder.loadTexts: agentRouterVrrpOperEntry.setStatus('obsolete')
agentRouterVrrpOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouterVrrpOperPriority.setStatus('obsolete')
agentRouterVrrpTrackGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10))
agentRouterVrrpTrackIntfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1), )
if mibBuilder.loadTexts: agentRouterVrrpTrackIntfTable.setStatus('current')
agentRouterVrrpTrackIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"), (0, "DNOS-ROUTING-MIB", "agentRouterVrrpTrackIntf"))
if mibBuilder.loadTexts: agentRouterVrrpTrackIntfEntry.setStatus('current')
agentRouterVrrpTrackIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackIntf.setStatus('current')
agentRouterVrrpTrackIfPrioDec = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackIfPrioDec.setStatus('current')
agentRouterVrrpTrackIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouterVrrpTrackIfState.setStatus('current')
agentRouterVrrpTrackIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackIfStatus.setStatus('current')
agentRouterVrrpTrackRouteTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2), )
if mibBuilder.loadTexts: agentRouterVrrpTrackRouteTable.setStatus('current')
agentRouterVrrpTrackRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"), (0, "DNOS-ROUTING-MIB", "agentRouterVrrpTrackRtPfx"), (0, "DNOS-ROUTING-MIB", "agentRouterVrrpTrackRtPfxLen"))
if mibBuilder.loadTexts: agentRouterVrrpTrackRouteEntry.setStatus('current')
agentRouterVrrpTrackRtPfx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentRouterVrrpTrackRtPfx.setStatus('current')
agentRouterVrrpTrackRtPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: agentRouterVrrpTrackRtPfxLen.setStatus('current')
agentRouterVrrpTrackRtPrioDec = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackRtPrioDec.setStatus('current')
agentRouterVrrpTrackRtReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouterVrrpTrackRtReachable.setStatus('current')
agentRouterVrrpTrackRtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackRtStatus.setStatus('current')
agentIpHelperGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11))
agentIpHelperAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpHelperAdminMode.setStatus('current')
agentDhcpClientMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpClientMsgsReceived.setStatus('current')
agentDhcpClientMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpClientMsgsRelayed.setStatus('current')
agentDhcpServerMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerMsgsReceived.setStatus('current')
agentDhcpServerMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerMsgsRelayed.setStatus('current')
agentUdpClientMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUdpClientMsgsReceived.setStatus('current')
agentUdpClientMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUdpClientMsgsRelayed.setStatus('current')
agentSwitchIpHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8), )
if mibBuilder.loadTexts: agentSwitchIpHelperAddressTable.setStatus('current')
agentSwitchIpHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentSwitchIpHelperAddress"), (0, "DNOS-ROUTING-MIB", "agentSwitchIpHelperUdpPort"))
if mibBuilder.loadTexts: agentSwitchIpHelperAddressEntry.setStatus('current')
agentSwitchIpHelperAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpHelperAddress.setStatus('current')
agentSwitchIpHelperUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpHelperUdpPort.setStatus('current')
agentSwitchIpHelperHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpHelperHitCount.setStatus('current')
agentSwitchIpHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchIpHelperStatus.setStatus('current')
agentUdpClientMsgsTtlExpired = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUdpClientMsgsTtlExpired.setStatus('current')
agentUdpClientMsgsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUdpClientMsgsDiscarded.setStatus('current')
agentInternalVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12))
agentInternalVlanBase = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 1), Integer32().clone(4093)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInternalVlanBase.setStatus('current')
agentInternalVlanPolicy = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ascending", 0), ("descending", 1))).clone('descending')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInternalVlanPolicy.setStatus('current')
agentSwitchInternalVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 3), )
if mibBuilder.loadTexts: agentSwitchInternalVlanTable.setStatus('current')
agentSwitchInternalVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 3, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentSwitchInternalVlanId"))
if mibBuilder.loadTexts: agentSwitchInternalVlanEntry.setStatus('current')
agentSwitchInternalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchInternalVlanId.setStatus('current')
agentSwitchInternalVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInternalVlanIfIndex.setStatus('current')
agentOspfQueueGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 13))
agentOspfQueueTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 13, 1), )
if mibBuilder.loadTexts: agentOspfQueueTable.setStatus('current')
agentOspfQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 13, 1, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentOspfQueueIndex"))
if mibBuilder.loadTexts: agentOspfQueueEntry.setStatus('current')
agentOspfQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 13, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentOspfQueueIndex.setStatus('current')
agentOspfQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfQueueName.setStatus('current')
agentOspfQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 13, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfQueueLength.setStatus('current')
agentOspfQueueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 13, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfQueueHigh.setStatus('current')
agentOspfQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 13, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfQueueDrops.setStatus('current')
agentOspfQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 13, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfQueueLimit.setStatus('current')
agentOspfPacketStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14))
agentOspfCountersCleared = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfCountersCleared.setStatus('current')
agentOspfLsaRetxCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLsaRetxCount.setStatus('current')
agentOspfHellosRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfHellosRx.setStatus('current')
agentOspfHellosTx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfHellosTx.setStatus('current')
agentOspfDdRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfDdRx.setStatus('current')
agentOspfDdTx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfDdTx.setStatus('current')
agentOspfLsReqRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLsReqRx.setStatus('current')
agentOspfLsReqTx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLsReqTx.setStatus('current')
agentOspfLsUpdatesRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLsUpdatesRx.setStatus('current')
agentOspfLsUpdatesTx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLsUpdatesTx.setStatus('current')
agentOspfLsAckRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLsAckRx.setStatus('current')
agentOspfLsAckTx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLsAckTx.setStatus('current')
agentOspfLsUpdatesRxMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLsUpdatesRxMax.setStatus('current')
agentOspfLsUpdatesTxMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLsUpdatesTxMax.setStatus('current')
agentOspfType1LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfType1LsasRx.setStatus('current')
agentOspfType2LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfType2LsasRx.setStatus('current')
agentOspfType3LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfType3LsasRx.setStatus('current')
agentOspfType4LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfType4LsasRx.setStatus('current')
agentOspfType5LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfType5LsasRx.setStatus('current')
agentOspfType7LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfType7LsasRx.setStatus('current')
agentOspfType9LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfType9LsasRx.setStatus('current')
agentOspfType10LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfType10LsasRx.setStatus('current')
agentOspfType11LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 14, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfType11LsasRx.setStatus('current')
agentOspfSpfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 15), )
if mibBuilder.loadTexts: agentOspfSpfStatsTable.setStatus('current')
agentOspfSpfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 15, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentOspfSpfIndex"))
if mibBuilder.loadTexts: agentOspfSpfStatsEntry.setStatus('current')
agentOspfSpfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 15, 1, 1), Counter32())
if mibBuilder.loadTexts: agentOspfSpfIndex.setStatus('current')
agentOspfSpfStatsDeltaT = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 15, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfSpfStatsDeltaT.setStatus('current')
agentOspfSpfStatsIntra = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfSpfStatsIntra.setStatus('current')
agentOspfSpfStatsSumm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfSpfStatsSumm.setStatus('current')
agentOspfSpfStatsExt = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfSpfStatsExt.setStatus('current')
agentOspfSpfStatsSpfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfSpfStatsSpfTotal.setStatus('current')
agentOspfSpfStatsRibUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfSpfStatsRibUpdate.setStatus('current')
agentOspfSpfStatsReason = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 15, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfSpfStatsReason.setStatus('current')
agentRoutingHeapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 16))
agentRoutingHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 16, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRoutingHeapSize.setStatus('current')
agentRoutingHeapInUse = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 16, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRoutingHeapInUse.setStatus('current')
agentRoutingHeapHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 16, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRoutingHeapHigh.setStatus('current')
agentRoutingTableSummaryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17))
agentConnectedRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConnectedRoutes.setStatus('current')
agentStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStaticRoutes.setStatus('current')
agentRipRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRipRoutes.setStatus('current')
agentOspfRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfRoutes.setStatus('current')
agentOspfIntraRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfIntraRoutes.setStatus('current')
agentOspfInterRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfInterRoutes.setStatus('current')
agentOspfExt1Routes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfExt1Routes.setStatus('current')
agentOspfExt2Routes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfExt2Routes.setStatus('current')
agentBgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBgpRoutes.setStatus('current')
agentEbgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEbgpRoutes.setStatus('current')
agentIbgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIbgpRoutes.setStatus('current')
agentLocalBgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLocalBgpRoutes.setStatus('current')
agentRejectRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRejectRoutes.setStatus('current')
agentTotalRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTotalRoutes.setStatus('current')
agentBestRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBestRoutes.setStatus('current')
agentBestRoutesHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBestRoutesHigh.setStatus('current')
agentAlternateRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAlternateRoutes.setStatus('current')
agentRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouteAdds.setStatus('current')
agentRouteModifies = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouteModifies.setStatus('current')
agentRouteDeletes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouteDeletes.setStatus('current')
agentUnresolvedRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUnresolvedRouteAdds.setStatus('current')
agentInvalidRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInvalidRouteAdds.setStatus('current')
agentFailedRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFailedRouteAdds.setStatus('current')
agentReservedLocals = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentReservedLocals.setStatus('current')
agentUniqueNextHops = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUniqueNextHops.setStatus('current')
agentUniqueNextHopsHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUniqueNextHopsHigh.setStatus('current')
agentNextHopGroups = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNextHopGroups.setStatus('current')
agentNextHopGroupsHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNextHopGroupsHigh.setStatus('current')
agentEcmpGroups = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEcmpGroups.setStatus('current')
agentEcmpGroupsHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEcmpGroupsHigh.setStatus('current')
agentEcmpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEcmpRoutes.setStatus('current')
agentTruncEcmpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTruncEcmpRoutes.setStatus('current')
agentEcmpRetries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 17, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEcmpRetries.setStatus('current')
agentEcmpCountTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 18), )
if mibBuilder.loadTexts: agentEcmpCountTable.setStatus('current')
agentEcmpCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 18, 1), ).setIndexNames((0, "DNOS-ROUTING-MIB", "agentEcmpNextHopCount"))
if mibBuilder.loadTexts: agentEcmpCountEntry.setStatus('current')
agentEcmpNextHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 18, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: agentEcmpNextHopCount.setStatus('current')
agentEcmpRouteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 18, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEcmpRouteCount.setStatus('current')
agentOspfStubRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 19))
ospfStubRouterAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotAdvertise", 1), ("advertise", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStubRouterAdvertisement.setStatus('current')
agentOspfStubRouterReason = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("configured", 0), ("startup", 1), ("resource-limitation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfStubRouterReason.setStatus('current')
agentOspfStubRouterStartupTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 19, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfStubRouterStartupTimeRemaining.setStatus('current')
agentOspfStubRouterDuration = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 19, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfStubRouterDuration.setStatus('current')
agentVrfTrapConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 21))
vrfName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 21, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrfName.setStatus('current')
appName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 21, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appName.setStatus('current')
fastPathRoutingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 22))
vrfMaxRoutesReachedTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 22, 1)).setObjects(("DNOS-ROUTING-MIB", "vrfName"))
if mibBuilder.loadTexts: vrfMaxRoutesReachedTrap.setStatus('current')
vrfApplicationRestartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 22, 2)).setObjects(("DNOS-ROUTING-MIB", "appName"), ("DNOS-ROUTING-MIB", "vrfName"))
if mibBuilder.loadTexts: vrfApplicationRestartedTrap.setStatus('current')
mibBuilder.exportSymbols("DNOS-ROUTING-MIB", agentOspfVirtIfTable=agentOspfVirtIfTable, agentOspfQueueName=agentOspfQueueName, agentSwitchSecondaryIpAddress=agentSwitchSecondaryIpAddress, agentTotalRoutes=agentTotalRoutes, agentRipRoutes=agentRipRoutes, agentOspfRoutes=agentOspfRoutes, agentBootpDhcpRelayIntfEntry=agentBootpDhcpRelayIntfEntry, agentSwitchIntfIpHelperDiscard=agentSwitchIntfIpHelperDiscard, agentOspfAreaOpaqueLsdbAge=agentOspfAreaOpaqueLsdbAge, agentOspfLocalLsdbTable=agentOspfLocalLsdbTable, agentIpHelperGroup=agentIpHelperGroup, agentDhcpClientMsgsRelayed=agentDhcpClientMsgsRelayed, agentSwitchArpStaticEntryCountCurrent=agentSwitchArpStaticEntryCountCurrent, agentOspfLsReqTx=agentOspfLsReqTx, agentOspfDefaultInfoOriginateMetricType=agentOspfDefaultInfoOriginateMetricType, agentIpHelperAdminMode=agentIpHelperAdminMode, agentSwitchIntfArpMacAddress=agentSwitchIntfArpMacAddress, agentOspfDefaultInfoOriginateAlways=agentOspfDefaultInfoOriginateAlways, agentRouterVrrpTrackGroup=agentRouterVrrpTrackGroup, agentSwitchIpHelperUdpPort=agentSwitchIpHelperUdpPort, agentUniqueNextHopsHigh=agentUniqueNextHopsHigh, agentRipRouteRedistMatchExternal2=agentRipRouteRedistMatchExternal2, agentOspfQueueLength=agentOspfQueueLength, agentSwitchSecondaryNetMask=agentSwitchSecondaryNetMask, agentSwitchIpInterfaceMtuValue=agentSwitchIpInterfaceMtuValue, agentUdpClientMsgsDiscarded=agentUdpClientMsgsDiscarded, agentRoutingTableSummaryGroup=agentRoutingTableSummaryGroup, agentSwitchSecondaryAddressEntry=agentSwitchSecondaryAddressEntry, agentBootpDhcpRelayGroup=agentBootpDhcpRelayGroup, agentRouterVrrpOperTable=agentRouterVrrpOperTable, agentEcmpGroups=agentEcmpGroups, agentSwitchLocalProxyArpTable=agentSwitchLocalProxyArpTable, agentRipRouteRedistMatchNSSAExternal1=agentRipRouteRedistMatchNSSAExternal1, agentSwitchArpStaticEntryCountMax=agentSwitchArpStaticEntryCountMax, agentReservedLocals=agentReservedLocals, agentSwitchIntfIpHelperUdpPort=agentSwitchIntfIpHelperUdpPort, agentOspfRouteRedistSource=agentOspfRouteRedistSource, agentUdpClientMsgsReceived=agentUdpClientMsgsReceived, agentSwitchIpRouterDiscoveryPreferenceLevel=agentSwitchIpRouterDiscoveryPreferenceLevel, appName=appName, agentOspfDefaultMetric=agentOspfDefaultMetric, agentOspfQueueGroup=agentOspfQueueGroup, agentBootpDhcpRelayIntfCircuitIdOptionMode=agentBootpDhcpRelayIntfCircuitIdOptionMode, agentEcmpRouteCount=agentEcmpRouteCount, agentOspfType10LsasRx=agentOspfType10LsasRx, agentRipRouteRedistMatchExternal1=agentRipRouteRedistMatchExternal1, agentOspfIfEntry=agentOspfIfEntry, agentSwitchArpResponseTime=agentSwitchArpResponseTime, vrfMaxRoutesReachedTrap=vrfMaxRoutesReachedTrap, agentOspfLocalLsdbChecksum=agentOspfLocalLsdbChecksum, agentSwitchIpRouterDiscoveryMaxAdvertisementInterval=agentSwitchIpRouterDiscoveryMaxAdvertisementInterval, agentSwitchIntfArpType=agentSwitchIntfArpType, agentRoutingHeapInUse=agentRoutingHeapInUse, agentAlternateRoutes=agentAlternateRoutes, agentOspfDefaultInfoOriginateMetricConfigured=agentOspfDefaultInfoOriginateMetricConfigured, agentRouterOspfRFC1583CompatibilityMode=agentRouterOspfRFC1583CompatibilityMode, agentBootpDhcpRelayIntfTable=agentBootpDhcpRelayIntfTable, agentSwitchIpInterfaceNumberOfFlaps=agentSwitchIpInterfaceNumberOfFlaps, agentOspfRouteRedistDistListConfigured=agentOspfRouteRedistDistListConfigured, fastPathRouting=fastPathRouting, agentRip2IfConfAuthKeyId=agentRip2IfConfAuthKeyId, agentOspfDefaultInfoOriginateMetric=agentOspfDefaultInfoOriginateMetric, agentOspfSpfHoldTime=agentOspfSpfHoldTime, agentSwitchIpRouterDiscoveryAdvertisementLifetime=agentSwitchIpRouterDiscoveryAdvertisementLifetime, agentSnmpVRRPNewMasterTrapFlag=agentSnmpVRRPNewMasterTrapFlag, agentSwitchArpMacAddress=agentSwitchArpMacAddress, agentOspfLocalLsdbIpAddress=agentOspfLocalLsdbIpAddress, agentSwitchIpHelperHitCount=agentSwitchIpHelperHitCount, agentOspfType7LsasRx=agentOspfType7LsasRx, agentRouterVrrpTrackIntf=agentRouterVrrpTrackIntf, PYSNMP_MODULE_ID=fastPathRouting, agentVrfTrapConfigGroup=agentVrfTrapConfigGroup, agentSwitchIpIcmpRateLimitInterval=agentSwitchIpIcmpRateLimitInterval, agentEcmpRetries=agentEcmpRetries, agentSwitchIpInterfaceRoutingMode=agentSwitchIpInterfaceRoutingMode, agentRouterVrrpConfiguredPriority=agentRouterVrrpConfiguredPriority, agentRejectRoutes=agentRejectRoutes, agentOspfQueueTable=agentOspfQueueTable, agentSwitchArpInterface=agentSwitchArpInterface, agentEcmpGroupsHigh=agentEcmpGroupsHigh, agentOspfAsLsdbRouterId=agentOspfAsLsdbRouterId, agentVrrpOperations=agentVrrpOperations, agentOspfSpfStatsEntry=agentOspfSpfStatsEntry, agentSwitchIpDefaultGateway=agentSwitchIpDefaultGateway, agentSwitchIpHelperStatus=agentSwitchIpHelperStatus, agentOspfOpaqueLsaSupport=agentOspfOpaqueLsaSupport, agentOspfSpfIndex=agentOspfSpfIndex, agentSwitchIpVlanIfIndex=agentSwitchIpVlanIfIndex, agentRipRouteRedistMatchInternal=agentRipRouteRedistMatchInternal, agentRipRouteRedistSource=agentRipRouteRedistSource, agentOspfLsAckTx=agentOspfLsAckTx, agentSwitchIntfArpAge=agentSwitchIntfArpAge, agentSwitchIpInterfaceIcmpRedirects=agentSwitchIpInterfaceIcmpRedirects, agentSwitchInternalVlanEntry=agentSwitchInternalVlanEntry, agentOspfStubRouterStartupTimeRemaining=agentOspfStubRouterStartupTimeRemaining, agentOspfVirtIfAuthKeyId=agentOspfVirtIfAuthKeyId, agentSwitchArpTable=agentSwitchArpTable, agentRouterVrrpConfigGroup=agentRouterVrrpConfigGroup, agentRouterVrrpTrackRouteTable=agentRouterVrrpTrackRouteTable, agentSwitchIpInterfaceIpAddress=agentSwitchIpInterfaceIpAddress, agentNextHopGroups=agentNextHopGroups, agentBootpDhcpRelayMinWaitTime=agentBootpDhcpRelayMinWaitTime, agentSwitchArpAgeoutTime=agentSwitchArpAgeoutTime, agentOspfAsLsdbChecksum=agentOspfAsLsdbChecksum, agentRouterRipSplitHorizonMode=agentRouterRipSplitHorizonMode, agentOspfStubRouterDuration=agentOspfStubRouterDuration, agentIbgpRoutes=agentIbgpRoutes, agentSwitchInternalVlanIfIndex=agentSwitchInternalVlanIfIndex, agentSwitchIpInterfaceSuppressed=agentSwitchIpInterfaceSuppressed, agentSwitchLocalProxyArpMode=agentSwitchLocalProxyArpMode, agentOspfExt1Routes=agentOspfExt1Routes, agentOspfAsLsdbAdvertisement=agentOspfAsLsdbAdvertisement, agentSwitchHelperIpAddress=agentSwitchHelperIpAddress, agentOspfSpfStatsReason=agentOspfSpfStatsReason, agentOspfType9LsasRx=agentOspfType9LsasRx, agentSwitchIpVlanId=agentSwitchIpVlanId, agentOspfLsAckRx=agentOspfLsAckRx, agentOspfLocalLsdbLsid=agentOspfLocalLsdbLsid, agentEcmpNextHopCount=agentEcmpNextHopCount, agentRouterRipConfigGroup=agentRouterRipConfigGroup, agentOspfAreaOpaqueLsdbChecksum=agentOspfAreaOpaqueLsdbChecksum, agentSwitchIpInterfaceIfIndex=agentSwitchIpInterfaceIfIndex, agentSwitchIpRouterDiscoveryAdvertiseMode=agentSwitchIpRouterDiscoveryAdvertiseMode, agentSwitchIpInterfaceTable=agentSwitchIpInterfaceTable, agentRouterVrrpTrackIfState=agentRouterVrrpTrackIfState, agentOspfIfPassiveMode=agentOspfIfPassiveMode, agentBootpDhcpRelayForwardingIp=agentBootpDhcpRelayForwardingIp, agentOspfDefaultPassiveMode=agentOspfDefaultPassiveMode, agentOspfAreaOpaqueLsdbRouterId=agentOspfAreaOpaqueLsdbRouterId, agentOspfRoutePrefIntraArea=agentOspfRoutePrefIntraArea, agentOspfSpfStatsSumm=agentOspfSpfStatsSumm, agentRouterRipRoutePref=agentRouterRipRoutePref, agentOspfDdTx=agentOspfDdTx, agentRouterRipDefaultInfoOriginate=agentRouterRipDefaultInfoOriginate, agentDhcpServerMsgsRelayed=agentDhcpServerMsgsRelayed, agentOspfLsaRetxCount=agentOspfLsaRetxCount, agentRouterVrrpTrackRtPrioDec=agentRouterVrrpTrackRtPrioDec, agentOspfRouteRedistMetricConfigured=agentOspfRouteRedistMetricConfigured, agentSwitchIntfIpHelperAddressEntry=agentSwitchIntfIpHelperAddressEntry, agentSwitchIntfArpStatus=agentSwitchIntfArpStatus, agentSwitchIpHelperAddress=agentSwitchIpHelperAddress, agentRouterVrrpTrackRtPfx=agentRouterVrrpTrackRtPfx, agentSwitchClearIpDefaultGateway=agentSwitchClearIpDefaultGateway, agentRouterVrrpConfiguredEntry=agentRouterVrrpConfiguredEntry, agentOspfDefaultInfoOriginate=agentOspfDefaultInfoOriginate, agentSnmpTrapFlagsConfigGroupLayer3=agentSnmpTrapFlagsConfigGroupLayer3, agentTruncEcmpRoutes=agentTruncEcmpRoutes, agentRouteAdds=agentRouteAdds, agentSwitchInternalVlanTable=agentSwitchInternalVlanTable, agentSwitchIpGroup=agentSwitchIpGroup, agentRouterVrrpAdminState=agentRouterVrrpAdminState, agentOspfInterRoutes=agentOspfInterRoutes, agentOspfDdRx=agentOspfDdRx, agentOspfType5LsasRx=agentOspfType5LsasRx, agentSwitchArpTotalEntryCountPeak=agentSwitchArpTotalEntryCountPeak, agentUdpClientMsgsTtlExpired=agentUdpClientMsgsTtlExpired, agentRipRouteRedistMode=agentRipRouteRedistMode, agentSwitchIpInterfaceBandwidth=agentSwitchIpInterfaceBandwidth, agentRouterVrrpTrackIntfEntry=agentRouterVrrpTrackIntfEntry, agentSwitchArpEntry=agentSwitchArpEntry, agentOspfLsUpdatesRx=agentOspfLsUpdatesRx, agentOspfAreaOpaqueLsdbTable=agentOspfAreaOpaqueLsdbTable, agentOspfRouteRedistSubnets=agentOspfRouteRedistSubnets, agentLocalBgpRoutes=agentLocalBgpRoutes, agentOspfIfIpMtuIgnoreFlag=agentOspfIfIpMtuIgnoreFlag, agentSwitchArpTotalEntryCountCurrent=agentSwitchArpTotalEntryCountCurrent, agentOspfRouteRedistDistList=agentOspfRouteRedistDistList, agentOspfSpfStatsExt=agentOspfSpfStatsExt, agentSwitchIpInterfaceIcmpUnreachables=agentSwitchIpInterfaceIcmpUnreachables, agentRipRouteRedistMetric=agentRipRouteRedistMetric, agentSwitchIpInterfaceUnnumberedIfIndex=agentSwitchIpInterfaceUnnumberedIfIndex, agentOspfLocalLsdbAdvertisement=agentOspfLocalLsdbAdvertisement, agentOspfIntraRoutes=agentOspfIntraRoutes, agentSwitchArpStatus=agentSwitchArpStatus, agentSwitchDhcpOperation=agentSwitchDhcpOperation, agentOspfType3LsasRx=agentOspfType3LsasRx, agentBootpDhcpRelayNumOfRequestsForwarded=agentBootpDhcpRelayNumOfRequestsForwarded, agentRouteDeletes=agentRouteDeletes, agentSwitchInternalVlanId=agentSwitchInternalVlanId, agentOspfRouteRedistMetric=agentOspfRouteRedistMetric, vrfName=vrfName, agentSwitchIpInterfaceProxyARPMode=agentSwitchIpInterfaceProxyARPMode, agentSwitchIpRouterDiscoveryTable=agentSwitchIpRouterDiscoveryTable, agentSwitchIpRouterDiscoveryAdvertisementAddress=agentSwitchIpRouterDiscoveryAdvertisementAddress, agentBestRoutes=agentBestRoutes, agentOspfSpfDelayTime=agentOspfSpfDelayTime, agentBootpDhcpRelayNumOfDiscards=agentBootpDhcpRelayNumOfDiscards, agentSwitchHelperStatus=agentSwitchHelperStatus, agentOspfAreaOpaqueLsdbEntry=agentOspfAreaOpaqueLsdbEntry, agentOspfLsUpdatesRxMax=agentOspfLsUpdatesRxMax, agentSwitchArpMaxRetries=agentSwitchArpMaxRetries, agentBootpDhcpRelayCheckReply=agentBootpDhcpRelayCheckReply, vrfApplicationRestartedTrap=vrfApplicationRestartedTrap, agentOspfAreaOpaqueLsdbAdvertisement=agentOspfAreaOpaqueLsdbAdvertisement, agentRoutingHeapSize=agentRoutingHeapSize, agentRouterRipHostRoutesAcceptMode=agentRouterRipHostRoutesAcceptMode, agentRouteModifies=agentRouteModifies, agentOspfQueueIndex=agentOspfQueueIndex, agentRipRouteRedistDistListConfigured=agentRipRouteRedistDistListConfigured, agentSwitchHelperAddressEntry=agentSwitchHelperAddressEntry, agentOspfRoutePrefExternal=agentOspfRoutePrefExternal, agentBootpDhcpRelayNumOfRequestsReceived=agentBootpDhcpRelayNumOfRequestsReceived, agentBootpDhcpRelayIntfCheckReply=agentBootpDhcpRelayIntfCheckReply, agentOspfType4LsasRx=agentOspfType4LsasRx, agentConnectedRoutes=agentConnectedRoutes, agentSwitchArpType=agentSwitchArpType, agentOspfAreaOpaqueLsdbSequence=agentOspfAreaOpaqueLsdbSequence, agentOspfRouteRedistMetricType=agentOspfRouteRedistMetricType, agentOspfAreaOpaqueLsdbLsid=agentOspfAreaOpaqueLsdbLsid, agentSwitchIpVlanEntry=agentSwitchIpVlanEntry, agentOspfVirtIfEntry=agentOspfVirtIfEntry, agentSwitchIntfArpIpAddress=agentSwitchIntfArpIpAddress, agentRouterVrrpTrackRouteEntry=agentRouterVrrpTrackRouteEntry, agentSwitchIPAddressConfigMethod=agentSwitchIPAddressConfigMethod, agentSwitchIpVlanTable=agentSwitchIpVlanTable, agentSwitchIpIcmpRedirectsMode=agentSwitchIpIcmpRedirectsMode, agentOspfLocalLsdbAge=agentOspfLocalLsdbAge, agentOspfLocalLsdbRouterId=agentOspfLocalLsdbRouterId, agentSwitchIntfIpHelperIpAddress=agentSwitchIntfIpHelperIpAddress, SpfTimerRange=SpfTimerRange, agentSwitchIpRouterDiscoveryIfIndex=agentSwitchIpRouterDiscoveryIfIndex, agentSwitchArpDynamicRenew=agentSwitchArpDynamicRenew, agentRouterRipAutoSummaryMode=agentRouterRipAutoSummaryMode, agentOspfLocalLsdbAddressLessIf=agentOspfLocalLsdbAddressLessIf, agentBgpRoutes=agentBgpRoutes, fastPathRoutingTraps=fastPathRoutingTraps, agentBootpDhcpRelayForwardMode=agentBootpDhcpRelayForwardMode, agentOspfAsLsdbType=agentOspfAsLsdbType, agentRouterVrrpTrackRtReachable=agentRouterVrrpTrackRtReachable, agentOspfHellosRx=agentOspfHellosRx, agentRoutingHeapGroup=agentRoutingHeapGroup, agentEcmpCountTable=agentEcmpCountTable, agentOspfAsLsdbTable=agentOspfAsLsdbTable, agentOspfAutoCostRefBw=agentOspfAutoCostRefBw, agentSwitchIpInterfaceEntry=agentSwitchIpInterfaceEntry, agentOspfQueueHigh=agentOspfQueueHigh, agentSwitchIpInterfaceNetMask=agentSwitchIpInterfaceNetMask, agentOspfRouteRedistTable=agentOspfRouteRedistTable, agentSwitchSecondaryStatus=agentSwitchSecondaryStatus, agentSwitchIpRoutingMode=agentSwitchIpRoutingMode, agentStaticRoutes=agentStaticRoutes, agentOspfSpfStatsIntra=agentOspfSpfStatsIntra, agentSwitchIpInterfaceClearIp=agentSwitchIpInterfaceClearIp, agentSwitchIpHelperAddressEntry=agentSwitchIpHelperAddressEntry, agentOspfQueueLimit=agentOspfQueueLimit, agentOspfSpfStatsRibUpdate=agentOspfSpfStatsRibUpdate, agentSwitchArpIpAddress=agentSwitchArpIpAddress, agentSwitchIntfIpHelperAddressTable=agentSwitchIntfIpHelperAddressTable, agentOspfIfAdvertiseSecondaries=agentOspfIfAdvertiseSecondaries, agentRip2IfConfEntry=agentRip2IfConfEntry, agentInvalidRouteAdds=agentInvalidRouteAdds, agentEbgpRoutes=agentEbgpRoutes, agentRouterVrrpTrackIfStatus=agentRouterVrrpTrackIfStatus, agentDhcpClientMsgsReceived=agentDhcpClientMsgsReceived)
mibBuilder.exportSymbols("DNOS-ROUTING-MIB", agentSwitchSecondaryAddressTable=agentSwitchSecondaryAddressTable, agentRouterVrrpConfiguredTable=agentRouterVrrpConfiguredTable, agentOspfIfAuthKeyId=agentOspfIfAuthKeyId, agentOspfAreaOpaqueLsdbAreaId=agentOspfAreaOpaqueLsdbAreaId, agentOspfCountersCleared=agentOspfCountersCleared, agentOspfType11LsasRx=agentOspfType11LsasRx, agentInternalVlanPolicy=agentInternalVlanPolicy, agentBootpDhcpRelayCircuitIdOptionMode=agentBootpDhcpRelayCircuitIdOptionMode, agentRouterRipDefaultMetric=agentRouterRipDefaultMetric, agentRouterRipAdminState=agentRouterRipAdminState, agentOspfPacketStatsGroup=agentOspfPacketStatsGroup, agentSwitchIpRouterDiscoveryMinAdvertisementInterval=agentSwitchIpRouterDiscoveryMinAdvertisementInterval, agentOspfLsReqRx=agentOspfLsReqRx, agentOspfLsUpdatesTxMax=agentOspfLsUpdatesTxMax, agentRipRouteRedistEntry=agentRipRouteRedistEntry, agentSwitchIpIcmpRateLimitBurstSize=agentSwitchIpIcmpRateLimitBurstSize, agentOspfAsLsdbAge=agentOspfAsLsdbAge, agentBootpDhcpRelayMaxHopCount=agentBootpDhcpRelayMaxHopCount, agentOspfStubRouterGroup=agentOspfStubRouterGroup, agentEcmpRoutes=agentEcmpRoutes, agentRouterVrrpOperEntry=agentRouterVrrpOperEntry, agentSwitchArpGroup=agentSwitchArpGroup, agentOspfRouteRedistMode=agentOspfRouteRedistMode, agentOspfDefaultMetricConfigured=agentOspfDefaultMetricConfigured, agentOspfAsLsdbSequence=agentOspfAsLsdbSequence, agentDhcpServerMsgsReceived=agentDhcpServerMsgsReceived, agentOspfRoutePrefInterArea=agentOspfRoutePrefInterArea, agentRouterVrrpTrackIfPrioDec=agentRouterVrrpTrackIfPrioDec, agentInternalVlanBase=agentInternalVlanBase, AutoCostRefBw=AutoCostRefBw, agentSwitchLocalProxyArpEntry=agentSwitchLocalProxyArpEntry, agentOspfRouteRedistTag=agentOspfRouteRedistTag, agentSwitchIntfArpTable=agentSwitchIntfArpTable, agentUnresolvedRouteAdds=agentUnresolvedRouteAdds, agentSwitchIntfIpHelperHitCount=agentSwitchIntfIpHelperHitCount, agentRipRouteRedistDistList=agentRipRouteRedistDistList, agentOspfSpfStatsDeltaT=agentOspfSpfStatsDeltaT, agentOspfRouteRedistEntry=agentOspfRouteRedistEntry, agentOspfHellosTx=agentOspfHellosTx, agentSwitchIntfArpIfIndex=agentSwitchIntfArpIfIndex, ospfStubRouterAdvertisement=ospfStubRouterAdvertisement, agentSwitchIpInterfaceCurrentPenalty=agentSwitchIpInterfaceCurrentPenalty, agentSwitchIntfIpHelperStatus=agentSwitchIntfIpHelperStatus, agentSwitchArpCacheSize=agentSwitchArpCacheSize, agentECMPOspfMaxPaths=agentECMPOspfMaxPaths, agentBootpVlanId=agentBootpVlanId, agentRouterVrrpTrackRtPfxLen=agentRouterVrrpTrackRtPfxLen, agentSwitchIpIcmpControlGroup=agentSwitchIpIcmpControlGroup, agentRouterOspfConfigGroup=agentRouterOspfConfigGroup, agentSwitchIpVlanRoutingStatus=agentSwitchIpVlanRoutingStatus, agentOspfExt2Routes=agentOspfExt2Routes, agentECMPGroup=agentECMPGroup, agentFailedRouteAdds=agentFailedRouteAdds, agentSnmpVRRPAuthFailureTrapFlag=agentSnmpVRRPAuthFailureTrapFlag, agentSwitchIpRouterDiscoveryEntry=agentSwitchIpRouterDiscoveryEntry, agentOspfSpfStatsTable=agentOspfSpfStatsTable, agentBestRoutesHigh=agentBestRoutesHigh, agentOspfLsUpdatesTx=agentOspfLsUpdatesTx, agentSwitchIpHelperAddressTable=agentSwitchIpHelperAddressTable, agentOspfAreaOpaqueLsdbType=agentOspfAreaOpaqueLsdbType, agentRip2IfConfTable=agentRip2IfConfTable, agentOspfLocalLsdbSequence=agentOspfLocalLsdbSequence, agentRipRouteRedistTable=agentRipRouteRedistTable, agentInternalVlanGroup=agentInternalVlanGroup, agentNextHopGroupsHigh=agentNextHopGroupsHigh, agentOspfAsLsdbLsid=agentOspfAsLsdbLsid, agentSwitchHelperAddressTable=agentSwitchHelperAddressTable, agentSwitchIpIcmpEchoReplyMode=agentSwitchIpIcmpEchoReplyMode, agentOspfAsLsdbEntry=agentOspfAsLsdbEntry, agentRouterVrrpTrackIntfTable=agentRouterVrrpTrackIntfTable, agentOspfType1LsasRx=agentOspfType1LsasRx, agentRipRouteRedistMatchNSSAExternal2=agentRipRouteRedistMatchNSSAExternal2, agentRouterRipDefaultMetricConfigured=agentRouterRipDefaultMetricConfigured, agentOspfQueueEntry=agentOspfQueueEntry, agentOspfType2LsasRx=agentOspfType2LsasRx, agentOspfLocalLsdbType=agentOspfLocalLsdbType, agentSwitchIntfArpEntry=agentSwitchIntfArpEntry, agentRouterVrrpTrackRtStatus=agentRouterVrrpTrackRtStatus, agentOspfSpfStatsSpfTotal=agentOspfSpfStatsSpfTotal, agentSwitchArpAge=agentSwitchArpAge, agentRouterVrrpOperPriority=agentRouterVrrpOperPriority, agentOspfQueueDrops=agentOspfQueueDrops, agentOspfIfTable=agentOspfIfTable, agentSwitchIpInterfaceReUseTime=agentSwitchIpInterfaceReUseTime, agentRoutingHeapHigh=agentRoutingHeapHigh, agentUdpClientMsgsRelayed=agentUdpClientMsgsRelayed, agentEcmpCountEntry=agentEcmpCountEntry, agentOspfStubRouterReason=agentOspfStubRouterReason, agentOspfLocalLsdbEntry=agentOspfLocalLsdbEntry, agentRipRouteRedistMetricConfigured=agentRipRouteRedistMetricConfigured, agentUniqueNextHops=agentUniqueNextHops)
