#
# PySNMP MIB module LAN-EMULATION-BUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LAN-EMULATION-BUS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
VpiInteger, VciInteger, atmfLanEmulation = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "VpiInteger", "VciInteger", "atmfLanEmulation")
IfIndexOrZero, AtmLaneMask, Integer, TIMESTAMP = mibBuilder.importSymbols("LAN-EMULATION-ELAN-MIB", "IfIndexOrZero", "AtmLaneMask", "Integer", "TIMESTAMP")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ModuleIdentity, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, Unsigned32, IpAddress, MibIdentifier, Gauge32, NotificationType, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "Unsigned32", "IpAddress", "MibIdentifier", "Gauge32", "NotificationType", "TimeTicks", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
busMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 4))
class RowStatus(Integer32):
    pass

class AtmLaneAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), )
busConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1))
busStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2))
busFaultGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3))
busConfNextId = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busConfNextId.setStatus('mandatory')
busConfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2), )
if mibBuilder.loadTexts: busConfTable.setStatus('mandatory')
busConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: busConfEntry.setStatus('mandatory')
busConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: busConfIndex.setStatus('mandatory')
busConfAtmAddrSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1, 2), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busConfAtmAddrSpec.setStatus('mandatory')
busConfAtmAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1, 3), AtmLaneMask().clone(hexValue="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busConfAtmAddrMask.setStatus('mandatory')
busConfAtmAddrActual = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1, 4), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busConfAtmAddrActual.setStatus('mandatory')
busConfElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busConfElanName.setStatus('mandatory')
busConfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1, 6), TIMESTAMP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busConfLastChange.setStatus('mandatory')
busConfMaxFrameAge = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busConfMaxFrameAge.setStatus('mandatory')
busConfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busConfOperStatus.setStatus('mandatory')
busConfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busConfAdminStatus.setStatus('mandatory')
busConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 2, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busConfRowStatus.setStatus('mandatory')
busVccTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 3), )
if mibBuilder.loadTexts: busVccTable.setStatus('mandatory')
busVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 3, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"), (0, "LAN-EMULATION-BUS-MIB", "busVccAtmIfIndex"), (0, "LAN-EMULATION-BUS-MIB", "busVccMtFwdVpi"), (0, "LAN-EMULATION-BUS-MIB", "busVccMtFwdVci"))
if mibBuilder.loadTexts: busVccEntry.setStatus('mandatory')
busVccAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 3, 1, 1), IfIndexOrZero())
if mibBuilder.loadTexts: busVccAtmIfIndex.setStatus('mandatory')
busVccMtFwdVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 3, 1, 2), VpiInteger())
if mibBuilder.loadTexts: busVccMtFwdVpi.setStatus('mandatory')
busVccMtFwdVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 3, 1, 3), VciInteger())
if mibBuilder.loadTexts: busVccMtFwdVci.setStatus('mandatory')
busVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busVccRowStatus.setStatus('mandatory')
busLecTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 4), TIMESTAMP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busLecTableLastChange.setStatus('mandatory')
busLecTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 5), )
if mibBuilder.loadTexts: busLecTable.setStatus('mandatory')
busLecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 5, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"), (0, "LAN-EMULATION-BUS-MIB", "busLecAtmAddr"))
if mibBuilder.loadTexts: busLecEntry.setStatus('mandatory')
busLecAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 5, 1, 1), AtmLaneAddress())
if mibBuilder.loadTexts: busLecAtmAddr.setStatus('mandatory')
busLecMcastSendAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 5, 1, 2), IfIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busLecMcastSendAtmIfIndex.setStatus('mandatory')
busLecMcastSendVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 5, 1, 4), VpiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busLecMcastSendVpi.setStatus('mandatory')
busLecMcastSendVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 5, 1, 5), VciInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busLecMcastSendVci.setStatus('mandatory')
busLecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 1, 5, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busLecRowStatus.setStatus('mandatory')
busStatTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 1), )
if mibBuilder.loadTexts: busStatTable.setStatus('mandatory')
busStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 1, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: busStatEntry.setStatus('mandatory')
busStatInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busStatInDiscards.setStatus('mandatory')
busStatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busStatInOctets.setStatus('mandatory')
busStatInUcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busStatInUcastFrms.setStatus('mandatory')
busStatInMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busStatInMcastFrms.setStatus('mandatory')
busStatFrmTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busStatFrmTimeOuts.setStatus('mandatory')
busStatMcastSendRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busStatMcastSendRefused.setStatus('mandatory')
busStatMcastFwdFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busStatMcastFwdFailure.setStatus('mandatory')
busLecStatTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 2), )
if mibBuilder.loadTexts: busLecStatTable.setStatus('mandatory')
busLecStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 2, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"), (0, "LAN-EMULATION-BUS-MIB", "busLecAtmAddr"))
if mibBuilder.loadTexts: busLecStatEntry.setStatus('mandatory')
busLecRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busLecRecvs.setStatus('mandatory')
busLecForwards = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busLecForwards.setStatus('mandatory')
busLecDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busLecDiscards.setStatus('mandatory')
busErrCtlTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 1), )
if mibBuilder.loadTexts: busErrCtlTable.setStatus('mandatory')
busErrCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 1, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: busErrCtlEntry.setStatus('mandatory')
busErrCtlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busErrCtlAdminStatus.setStatus('mandatory')
busErrCtlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("outOfRes", 3), ("failed", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busErrCtlOperStatus.setStatus('mandatory')
busErrCtlClearLog = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busErrCtlClearLog.setStatus('mandatory')
busErrCtlMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busErrCtlMaxEntries.setStatus('mandatory')
busErrCtlLastEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busErrCtlLastEntry.setStatus('mandatory')
busErrLogTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 2), )
if mibBuilder.loadTexts: busErrLogTable.setStatus('mandatory')
busErrLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 2, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"), (0, "LAN-EMULATION-BUS-MIB", "busErrLogIndex"))
if mibBuilder.loadTexts: busErrLogEntry.setStatus('mandatory')
busErrLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: busErrLogIndex.setStatus('mandatory')
busErrLogAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 2, 1, 2), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busErrLogAtmAddr.setStatus('mandatory')
busErrLogErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("outOfRes", 1), ("badCtlFrame", 2), ("badDataFrame", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busErrLogErrCode.setStatus('mandatory')
busErrLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 4, 3, 2, 1, 4), TIMESTAMP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busErrLogTime.setStatus('mandatory')
mibBuilder.exportSymbols("LAN-EMULATION-BUS-MIB", busLecTableLastChange=busLecTableLastChange, busLecRecvs=busLecRecvs, busErrCtlMaxEntries=busErrCtlMaxEntries, busErrLogTime=busErrLogTime, busLecRowStatus=busLecRowStatus, busErrCtlOperStatus=busErrCtlOperStatus, busConfAdminStatus=busConfAdminStatus, busStatInDiscards=busStatInDiscards, busStatMcastFwdFailure=busStatMcastFwdFailure, busLecMcastSendVpi=busLecMcastSendVpi, busLecStatTable=busLecStatTable, busLecMcastSendVci=busLecMcastSendVci, busVccMtFwdVci=busVccMtFwdVci, busErrLogEntry=busErrLogEntry, busMIB=busMIB, busLecDiscards=busLecDiscards, busLecForwards=busLecForwards, busConfAtmAddrActual=busConfAtmAddrActual, busLecEntry=busLecEntry, busStatTable=busStatTable, busErrCtlTable=busErrCtlTable, busErrCtlAdminStatus=busErrCtlAdminStatus, busErrLogIndex=busErrLogIndex, busConfOperStatus=busConfOperStatus, busConfRowStatus=busConfRowStatus, busStatGroup=busStatGroup, busConfNextId=busConfNextId, busErrLogAtmAddr=busErrLogAtmAddr, busStatEntry=busStatEntry, busConfTable=busConfTable, busStatInMcastFrms=busStatInMcastFrms, busConfElanName=busConfElanName, busErrLogTable=busErrLogTable, busVccEntry=busVccEntry, busLecStatEntry=busLecStatEntry, busConfEntry=busConfEntry, busStatMcastSendRefused=busStatMcastSendRefused, busConfMaxFrameAge=busConfMaxFrameAge, busConfAtmAddrMask=busConfAtmAddrMask, busVccTable=busVccTable, busVccRowStatus=busVccRowStatus, busVccAtmIfIndex=busVccAtmIfIndex, busStatInOctets=busStatInOctets, busConfAtmAddrSpec=busConfAtmAddrSpec, busFaultGroup=busFaultGroup, busStatFrmTimeOuts=busStatFrmTimeOuts, busConfGroup=busConfGroup, busErrCtlEntry=busErrCtlEntry, busErrCtlClearLog=busErrCtlClearLog, busLecAtmAddr=busLecAtmAddr, busErrLogErrCode=busErrLogErrCode, busErrCtlLastEntry=busErrCtlLastEntry, busStatInUcastFrms=busStatInUcastFrms, RowStatus=RowStatus, busConfLastChange=busConfLastChange, busConfIndex=busConfIndex, busVccMtFwdVpi=busVccMtFwdVpi, busLecMcastSendAtmIfIndex=busLecMcastSendAtmIfIndex, AtmLaneAddress=AtmLaneAddress, busLecTable=busLecTable)
