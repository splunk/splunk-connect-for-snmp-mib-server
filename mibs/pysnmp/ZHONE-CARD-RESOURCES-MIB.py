#
# PySNMP MIB module ZHONE-CARD-RESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-CARD-RESOURCES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:40:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, Integer32, Gauge32, iso, TimeTicks, Counter32, Counter64, IpAddress, MibIdentifier, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "Integer32", "Gauge32", "iso", "TimeTicks", "Counter32", "Counter64", "IpAddress", "MibIdentifier", "Bits", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
zhoneCard, zhoneModules, zhoneShelfIndex, zhoneSlotIndex = mibBuilder.importSymbols("Zhone", "zhoneCard", "zhoneModules", "zhoneShelfIndex", "zhoneSlotIndex")
ZhoneCardType, ZhoneAdminString, ZhoneDiagAction = mibBuilder.importSymbols("Zhone-TC", "ZhoneCardType", "ZhoneAdminString", "ZhoneDiagAction")
zhoneCardResourcesModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 4))
zhoneCardResourcesModule.setRevisions(('2011-10-24 14:47', '2011-10-12 12:44', '2011-08-24 15:33', '2010-07-13 10:41', '2009-05-12 07:58', '2009-04-24 08:51', '2008-10-22 03:11', '2007-08-15 17:30', '2006-10-17 15:03', '2006-09-28 11:42', '2005-10-11 16:47', '2005-10-05 11:16', '2005-05-23 14:22', '2004-04-15 13:27', '2003-12-22 12:14', '2003-11-21 15:18', '2002-10-29 15:30', '2002-10-24 17:24', '2002-07-09 11:27', '2002-06-07 17:38', '2002-05-24 12:58', '2002-03-22 14:55', '2001-11-16 18:11', '2001-10-23 11:10', '2001-10-09 10:00', '2001-10-08 13:36', '2001-10-04 12:26', '2001-09-17 16:50', '2001-09-07 16:40', '2001-09-06 16:03', '2001-09-05 20:38', '2001-08-29 11:23', '2001-08-09 10:43', '2001-07-26 10:47', '2001-07-20 13:20', '2000-09-12 10:59', '2000-09-20 11:00', '2000-11-11 10:59', '2000-11-21 18:31', '2000-12-01 12:18', '2000-12-18 19:11', '2001-01-22 14:56', '2001-03-27 10:29', '2001-04-06 14:25', '2001-04-27 11:49', '2001-05-24 13:15',))
if mibBuilder.loadTexts: zhoneCardResourcesModule.setLastUpdated('201110241558Z')
if mibBuilder.loadTexts: zhoneCardResourcesModule.setOrganization('Zhone Technologies')
class Kbytes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class ZhoneServiceId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("dspResource", 1), ("numberService", 2), ("tadService", 3), ("aal2Resource", 4), ("ctrpCallResource", 5), ("callControlResource", 6), ("mprrResource", 7), ("mamaResource", 8), ("raFtdResource", 9), ("voiceCall", 10), ("shelfControllerService", 11), ("snmpMasterAgent", 12), ("trapService", 13), ("informationServices", 14), ("lineResource", 15), ("ifCfgMgrResource", 16), ("logServer", 17), ("cardServer", 18), ("dhcpServer", 19), ("filterUpdate", 20), ("ringGenerator", 21), ("zhoneRouteTableService", 22), ("pppResourceProvider", 23), ("rootDirectoryService", 24), ("cssService", 25), ("sipResource", 26), ("mgcpResource", 27), ("npRedundantServer", 28))

cardResourceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1), )
if mibBuilder.loadTexts: cardResourceTable.setStatus('current')
cardResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"))
if mibBuilder.loadTexts: cardResourceEntry.setStatus('current')
cardIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 1), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIdentification.setStatus('current')
cardZhoneType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 2), ZhoneCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardZhoneType.setStatus('current')
cardMfgSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 3), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMfgSerialNumber.setStatus('current')
cardMfgCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 4), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMfgCLEICode.setStatus('current')
cardMfgRevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 5), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMfgRevisionCode.setStatus('current')
cardMfgBootRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 6), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMfgBootRevision.setStatus('current')
cardPostResults = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 7), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPostResults.setStatus('current')
cardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("operational", 1), ("disable", 2), ("maintenance", 3), ("warmreset", 4), ("reset", 5))).clone('operational')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAdminStatus.setStatus('current')
cardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("operating", 2), ("nonoperating", 3), ("maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOperStatus.setStatus('current')
cardAdminStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAdminStatsEnable.setStatus('current')
cardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardUpTime.setStatus('current')
cardProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 12), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProcessorType.setStatus('current')
cardPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPortStatus.setStatus('current')
cardInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 14), ZhoneCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInterfaceType.setStatus('current')
cardAtmManualAal2bw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAtmManualAal2bw.setStatus('current')
cardAtmManualAal2h = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAtmManualAal2h.setStatus('current')
cardLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("line-voltage-not-used", 1), ("line-voltage-60-volts", 2), ("line-voltage-68-volts", 3), ("line-voltage-95-volts", 4), ("line-voltage-100-volts", 5), ("line-voltage-110-volts", 6))).clone('line-voltage-not-used')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardLineVoltage.setStatus('deprecated')
cardVpiVciRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vpivci-range-not-applicable", 1), ("vpivci-range-vpi-15-vci-63", 2), ("vpivci-range-vpi-7-vci-127", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardVpiVciRange.setStatus('deprecated')
cardPweTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("source-differential", 2), ("source-adaptive", 3), ("remote-differential", 4), ("remote-adaptive", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardPweTimingMode.setStatus('current')
cardSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 2), )
if mibBuilder.loadTexts: cardSoftwareTable.setStatus('current')
cardSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 2, 1), )
cardResourceEntry.registerAugmentions(("ZHONE-CARD-RESOURCES-MIB", "cardSoftwareEntry"))
cardSoftwareEntry.setIndexNames(*cardResourceEntry.getIndexNames())
if mibBuilder.loadTexts: cardSoftwareEntry.setStatus('current')
cardSwRunningVers = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 2, 1, 1), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSwRunningVers.setStatus('current')
cardSwUpgradeVers = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 2, 1, 2), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSwUpgradeVers.setStatus('current')
cardSwAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loadUpgradeSw", 1), ("upgradeNow", 2), ("upgradeOnReset", 3), ("reloadCurrRev", 4))).clone('reloadCurrRev')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSwAdmin.setStatus('current')
cardSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("upgradeLoadSuccessful", 1), ("loadingSw", 2), ("upgrading", 3), ("upgradeLoadFailed", 4), ("upgradeFailed", 5), ("upgradeImageNotAvail", 6), ("pendingUpgradeOnReset", 7), ("upgradeNotRequested", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSwStatus.setStatus('current')
cardRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3), )
if mibBuilder.loadTexts: cardRuntimeTable.setStatus('current')
cardRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1), )
cardResourceEntry.registerAugmentions(("ZHONE-CARD-RESOURCES-MIB", "cardRuntimeEntry"))
cardRuntimeEntry.setIndexNames(*cardResourceEntry.getIndexNames())
if mibBuilder.loadTexts: cardRuntimeEntry.setStatus('current')
cardPeakMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1, 1), Kbytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPeakMemUsage.setStatus('current')
cardAvailMem = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1, 2), Kbytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardAvailMem.setStatus('current')
cardTotalMem = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1, 3), Kbytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTotalMem.setStatus('current')
cardProcessorIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProcessorIdle.setStatus('current')
cardProcessorUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProcessorUsage.setStatus('current')
cardMemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ramMemOK", 1), ("ramMemLow", 2), ("flashMemOK", 3), ("flashMemLow", 4), ("flashMemOut", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMemStatus.setStatus('current')
cardProcessorHighUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProcessorHighUsage.setStatus('current')
cardProcessorServicesUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProcessorServicesUsage.setStatus('current')
cardProcessorFrameworkUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProcessorFrameworkUsage.setStatus('current')
cardProcessorLowUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProcessorLowUsage.setStatus('current')
zhoneCardServices = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4))
cardServicesTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 1), )
if mibBuilder.loadTexts: cardServicesTable.setStatus('current')
cardServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 1, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"), (0, "ZHONE-CARD-RESOURCES-MIB", "cardServiceId"), (0, "ZHONE-CARD-RESOURCES-MIB", "cardServiceInstance"))
if mibBuilder.loadTexts: cardServicesEntry.setStatus('current')
cardServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 1, 1, 1), ZhoneServiceId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cardServiceId.setStatus('current')
cardServiceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 1, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cardServiceInstance.setStatus('current')
cardServiceChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardServiceChangeTime.setStatus('current')
cardServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unAvailable", 1), ("inActive", 2), ("standBy", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardServiceStatus.setStatus('current')
activeServicesTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 2), )
if mibBuilder.loadTexts: activeServicesTable.setStatus('current')
activeServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 2, 1), ).setIndexNames((0, "ZHONE-CARD-RESOURCES-MIB", "cardServiceId"), (0, "ZHONE-CARD-RESOURCES-MIB", "cardServiceInstance"))
if mibBuilder.loadTexts: activeServicesEntry.setStatus('current')
activeServiceShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeServiceShelf.setStatus('current')
activeServiceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeServiceSlot.setStatus('current')
activeServiceChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeServiceChangeTime.setStatus('current')
standbyServicesTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 3), )
if mibBuilder.loadTexts: standbyServicesTable.setStatus('current')
standbyServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 3, 1), ).setIndexNames((0, "ZHONE-CARD-RESOURCES-MIB", "cardServiceId"), (0, "ZHONE-CARD-RESOURCES-MIB", "cardServiceInstance"))
if mibBuilder.loadTexts: standbyServicesEntry.setStatus('current')
standbyServiceShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyServiceShelf.setStatus('current')
standbyServiceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyServiceSlot.setStatus('current')
standbyServiceChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyServiceChangeTime.setStatus('current')
zhoneTrapCardServices = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 4))
if mibBuilder.loadTexts: zhoneTrapCardServices.setStatus('current')
zhoneTrapCardServicesV2Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 4, 0))
if mibBuilder.loadTexts: zhoneTrapCardServicesV2Traps.setStatus('current')
zhoneCardServicesStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 4, 0, 1)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "cardServiceStatus"))
if mibBuilder.loadTexts: zhoneCardServicesStatusChange.setStatus('current')
zhoneCardServicesStandbyReady = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 3, 4, 4, 0, 2)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "standbyServiceShelf"), ("ZHONE-CARD-RESOURCES-MIB", "standbyServiceSlot"))
if mibBuilder.loadTexts: zhoneCardServicesStandbyReady.setStatus('current')
zhoneExternalRelay = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8))
if mibBuilder.loadTexts: zhoneExternalRelay.setStatus('current')
zhoneExternalRelayTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 1), )
if mibBuilder.loadTexts: zhoneExternalRelayTable.setStatus('current')
zhoneExternalRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 1, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"), (0, "ZHONE-CARD-RESOURCES-MIB", "zhoneExternalRelayId"))
if mibBuilder.loadTexts: zhoneExternalRelayEntry.setStatus('current')
zhoneExternalRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 1, 1, 1), ZhoneAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneExternalRelayName.setStatus('current')
zhoneExternalRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("relayStateOpen", 1), ("relayStateClosed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneExternalRelayState.setStatus('current')
zhoneExternalRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSpecified", 1), ("normallyOpen", 2), ("normallyClosed", 3))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneExternalRelayNormalState.setStatus('current')
zhoneExternalRelayMappingTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 2), )
if mibBuilder.loadTexts: zhoneExternalRelayMappingTable.setStatus('current')
zhoneExternalRelayMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 2, 1), ).setIndexNames((1, "ZHONE-CARD-RESOURCES-MIB", "zhoneExternalRelayName"))
if mibBuilder.loadTexts: zhoneExternalRelayMappingEntry.setStatus('current')
zhoneExternalRelayId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneExternalRelayId.setStatus('current')
zhoneTrapExternalRelay = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 3))
if mibBuilder.loadTexts: zhoneTrapExternalRelay.setStatus('current')
zhoneTrapExternalRelayV2Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 3, 0))
if mibBuilder.loadTexts: zhoneTrapExternalRelayV2Traps.setStatus('current')
zhoneExternalAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 3, 0, 1)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "zhoneExternalRelayName"), ("ZHONE-CARD-RESOURCES-MIB", "zhoneExternalRelayState"))
if mibBuilder.loadTexts: zhoneExternalAlarmTrap.setStatus('current')
zhoneMxkAlarmInputTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 3, 8, 3, 0, 2)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "zhoneExternalRelayName"), ("ZHONE-CARD-RESOURCES-MIB", "zhoneExternalRelayState"), ("ZHONE-CARD-RESOURCES-MIB", "zhoneExternalRelayNormalState"))
if mibBuilder.loadTexts: zhoneMxkAlarmInputTrap.setStatus('current')
zhoneCardCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 3, 3, 9))
zhoneCardGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 3, 3, 9, 1))
zhoneCardResourcesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 3, 3, 9, 1, 1)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "cardIdentification"), ("ZHONE-CARD-RESOURCES-MIB", "cardZhoneType"), ("ZHONE-CARD-RESOURCES-MIB", "cardMfgSerialNumber"), ("ZHONE-CARD-RESOURCES-MIB", "cardMfgCLEICode"), ("ZHONE-CARD-RESOURCES-MIB", "cardMfgRevisionCode"), ("ZHONE-CARD-RESOURCES-MIB", "cardMfgBootRevision"), ("ZHONE-CARD-RESOURCES-MIB", "cardPostResults"), ("ZHONE-CARD-RESOURCES-MIB", "cardAdminStatus"), ("ZHONE-CARD-RESOURCES-MIB", "cardOperStatus"), ("ZHONE-CARD-RESOURCES-MIB", "cardAdminStatsEnable"), ("ZHONE-CARD-RESOURCES-MIB", "cardUpTime"), ("ZHONE-CARD-RESOURCES-MIB", "cardProcessorType"), ("ZHONE-CARD-RESOURCES-MIB", "cardPortStatus"), ("ZHONE-CARD-RESOURCES-MIB", "cardInterfaceType"), ("ZHONE-CARD-RESOURCES-MIB", "cardSwRunningVers"), ("ZHONE-CARD-RESOURCES-MIB", "cardSwUpgradeVers"), ("ZHONE-CARD-RESOURCES-MIB", "cardSwAdmin"), ("ZHONE-CARD-RESOURCES-MIB", "cardSwStatus"), ("ZHONE-CARD-RESOURCES-MIB", "cardPeakMemUsage"), ("ZHONE-CARD-RESOURCES-MIB", "cardAvailMem"), ("ZHONE-CARD-RESOURCES-MIB", "cardTotalMem"), ("ZHONE-CARD-RESOURCES-MIB", "cardProcessorIdle"), ("ZHONE-CARD-RESOURCES-MIB", "cardProcessorUsage"), ("ZHONE-CARD-RESOURCES-MIB", "cardProcessorServicesUsage"), ("ZHONE-CARD-RESOURCES-MIB", "cardProcessorFrameworkUsage"), ("ZHONE-CARD-RESOURCES-MIB", "cardProcessorLowUsage"), ("ZHONE-CARD-RESOURCES-MIB", "cardProcessorHighUsage"), ("ZHONE-CARD-RESOURCES-MIB", "cardMemStatus"), ("ZHONE-CARD-RESOURCES-MIB", "cardPweTimingMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCardResourcesGroup = zhoneCardResourcesGroup.setStatus('current')
zhoneExternalRelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 3, 3, 9, 1, 2)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "zhoneExternalRelayName"), ("ZHONE-CARD-RESOURCES-MIB", "zhoneExternalRelayState"), ("ZHONE-CARD-RESOURCES-MIB", "zhoneExternalRelayId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneExternalRelayGroup = zhoneExternalRelayGroup.setStatus('current')
zhoneExternalAlarmTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 3, 3, 9, 1, 3)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "zhoneExternalAlarmTrap"), ("ZHONE-CARD-RESOURCES-MIB", "zhoneMxkAlarmInputTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneExternalAlarmTrapGroup = zhoneExternalAlarmTrapGroup.setStatus('current')
zhoneTrapCardMemV2Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 10))
if mibBuilder.loadTexts: zhoneTrapCardMemV2Traps.setStatus('current')
zhoneTrapCardMemGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 3, 3, 10, 1)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "zhoneTrapCardMemStatus"), ("ZHONE-CARD-RESOURCES-MIB", "zhoneTrapProcessorUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneTrapCardMemGroup = zhoneTrapCardMemGroup.setStatus('current')
zhoneTrapCardMemStatus = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 3, 10, 2)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "cardMemStatus"))
if mibBuilder.loadTexts: zhoneTrapCardMemStatus.setStatus('current')
zhoneTrapProcessorUsage = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 3, 10, 3)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "cardProcessorUsage"))
if mibBuilder.loadTexts: zhoneTrapProcessorUsage.setStatus('current')
zrgResources = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 11))
if mibBuilder.loadTexts: zrgResources.setStatus('current')
zrgBatteryRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 3, 11, 1), Bits().clone(namedValues=NamedValues(("normalMode", 0), ("batteryON", 1), ("batteryLOW", 2), ("batteryBAD", 3), ("batteryGone", 4), ("noUPS", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zrgBatteryRelayStatus.setStatus('current')
zrgTrapBatteryRelay = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 11, 2))
if mibBuilder.loadTexts: zrgTrapBatteryRelay.setStatus('current')
zrgBatterRelayTrapV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 11, 2, 0))
if mibBuilder.loadTexts: zrgBatterRelayTrapV2.setStatus('current')
zrgBatteryRelayNotification = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 3, 11, 2, 0, 1)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "zrgBatteryRelayStatus"))
if mibBuilder.loadTexts: zrgBatteryRelayNotification.setStatus('current')
znidResources = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 14))
if mibBuilder.loadTexts: znidResources.setStatus('current')
znidBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 3, 14, 1), Bits().clone(namedValues=NamedValues(("normal", 0), ("onBatteryPower", 1), ("batteryPowerLow", 2), ("replaceBattery", 3), ("batteryRemoved", 4), ("noUPS", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: znidBatteryStatus.setStatus('current')
znidSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 3, 14, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: znidSerialNumber.setStatus('current')
znidNotificationObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 14, 3))
if mibBuilder.loadTexts: znidNotificationObjects.setStatus('current')
znidNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 14, 3, 0))
if mibBuilder.loadTexts: znidNotifications.setStatus('current')
znidBatteryStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 3, 14, 3, 0, 1)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "znidSerialNumber"), ("ZHONE-CARD-RESOURCES-MIB", "znidBatteryStatus"))
if mibBuilder.loadTexts: znidBatteryStatusNotification.setStatus('current')
znidNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 3, 3, 14, 3, 1)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "znidBatteryStatusNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    znidNotificationGroup = znidNotificationGroup.setStatus('current')
znidOjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 3, 3, 14, 3, 2)).setObjects(("ZHONE-CARD-RESOURCES-MIB", "znidBatteryStatus"), ("ZHONE-CARD-RESOURCES-MIB", "znidSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    znidOjectGroup = znidOjectGroup.setStatus('current')
mibBuilder.exportSymbols("ZHONE-CARD-RESOURCES-MIB", zhoneCardCompliances=zhoneCardCompliances, cardAdminStatsEnable=cardAdminStatsEnable, zhoneExternalRelayNormalState=zhoneExternalRelayNormalState, zrgTrapBatteryRelay=zrgTrapBatteryRelay, cardMfgSerialNumber=cardMfgSerialNumber, cardSoftwareEntry=cardSoftwareEntry, activeServiceChangeTime=activeServiceChangeTime, zhoneTrapCardServices=zhoneTrapCardServices, cardMfgCLEICode=cardMfgCLEICode, cardOperStatus=cardOperStatus, zhoneMxkAlarmInputTrap=zhoneMxkAlarmInputTrap, cardRuntimeEntry=cardRuntimeEntry, activeServiceShelf=activeServiceShelf, zhoneExternalRelayMappingTable=zhoneExternalRelayMappingTable, zhoneCardServices=zhoneCardServices, cardIdentification=cardIdentification, cardServicesEntry=cardServicesEntry, zrgBatteryRelayNotification=zrgBatteryRelayNotification, zhoneCardResourcesModule=zhoneCardResourcesModule, cardProcessorHighUsage=cardProcessorHighUsage, cardProcessorLowUsage=cardProcessorLowUsage, standbyServiceChangeTime=standbyServiceChangeTime, cardSoftwareTable=cardSoftwareTable, cardProcessorType=cardProcessorType, zhoneTrapProcessorUsage=zhoneTrapProcessorUsage, zhoneTrapCardMemV2Traps=zhoneTrapCardMemV2Traps, znidBatteryStatus=znidBatteryStatus, cardAdminStatus=cardAdminStatus, standbyServicesTable=standbyServicesTable, zrgBatterRelayTrapV2=zrgBatterRelayTrapV2, Kbytes=Kbytes, cardPweTimingMode=cardPweTimingMode, zhoneTrapCardMemGroup=zhoneTrapCardMemGroup, cardPostResults=cardPostResults, ZhoneServiceId=ZhoneServiceId, cardProcessorUsage=cardProcessorUsage, cardInterfaceType=cardInterfaceType, cardServiceInstance=cardServiceInstance, cardServiceId=cardServiceId, cardProcessorFrameworkUsage=cardProcessorFrameworkUsage, cardServiceChangeTime=cardServiceChangeTime, zhoneExternalRelayName=zhoneExternalRelayName, zhoneExternalRelay=zhoneExternalRelay, cardSwStatus=cardSwStatus, cardProcessorServicesUsage=cardProcessorServicesUsage, cardLineVoltage=cardLineVoltage, zhoneExternalAlarmTrap=zhoneExternalAlarmTrap, cardPortStatus=cardPortStatus, cardUpTime=cardUpTime, cardMfgRevisionCode=cardMfgRevisionCode, standbyServiceShelf=standbyServiceShelf, zhoneExternalRelayTable=zhoneExternalRelayTable, activeServicesEntry=activeServicesEntry, activeServicesTable=activeServicesTable, cardTotalMem=cardTotalMem, zhoneCardServicesStatusChange=zhoneCardServicesStatusChange, PYSNMP_MODULE_ID=zhoneCardResourcesModule, zrgBatteryRelayStatus=zrgBatteryRelayStatus, activeServiceSlot=activeServiceSlot, zhoneExternalRelayState=zhoneExternalRelayState, zhoneTrapExternalRelay=zhoneTrapExternalRelay, zhoneExternalRelayEntry=zhoneExternalRelayEntry, standbyServiceSlot=standbyServiceSlot, cardProcessorIdle=cardProcessorIdle, znidNotifications=znidNotifications, cardSwUpgradeVers=cardSwUpgradeVers, cardAtmManualAal2h=cardAtmManualAal2h, zhoneTrapCardServicesV2Traps=zhoneTrapCardServicesV2Traps, cardZhoneType=cardZhoneType, standbyServicesEntry=standbyServicesEntry, znidBatteryStatusNotification=znidBatteryStatusNotification, zhoneExternalAlarmTrapGroup=zhoneExternalAlarmTrapGroup, znidSerialNumber=znidSerialNumber, znidNotificationObjects=znidNotificationObjects, cardAtmManualAal2bw=cardAtmManualAal2bw, zhoneExternalRelayId=zhoneExternalRelayId, zhoneTrapCardMemStatus=zhoneTrapCardMemStatus, zhoneExternalRelayMappingEntry=zhoneExternalRelayMappingEntry, cardMfgBootRevision=cardMfgBootRevision, cardServicesTable=cardServicesTable, znidNotificationGroup=znidNotificationGroup, cardSwAdmin=cardSwAdmin, zhoneCardGroups=zhoneCardGroups, cardPeakMemUsage=cardPeakMemUsage, cardVpiVciRange=cardVpiVciRange, cardResourceTable=cardResourceTable, zhoneTrapExternalRelayV2Traps=zhoneTrapExternalRelayV2Traps, cardMemStatus=cardMemStatus, zrgResources=zrgResources, cardAvailMem=cardAvailMem, zhoneCardResourcesGroup=zhoneCardResourcesGroup, cardResourceEntry=cardResourceEntry, zhoneCardServicesStandbyReady=zhoneCardServicesStandbyReady, znidOjectGroup=znidOjectGroup, cardServiceStatus=cardServiceStatus, cardSwRunningVers=cardSwRunningVers, zhoneExternalRelayGroup=zhoneExternalRelayGroup, cardRuntimeTable=cardRuntimeTable, znidResources=znidResources)
