#
# PySNMP MIB module A3COM-SWITCHING-SYSTEMS-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-SWITCHING-SYSTEMS-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:53:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, ObjectIdentity, IpAddress, NotificationType, Bits, TimeTicks, Counter32, Unsigned32, MibIdentifier, enterprises, Gauge32, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "ObjectIdentity", "IpAddress", "NotificationType", "Bits", "TimeTicks", "Counter32", "Unsigned32", "MibIdentifier", "enterprises", "Gauge32", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
switchingSystemsMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29))
a3ComSwitchingSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4))
a3ComQos = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 21))
a3ComQosClass = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1))
a3ComQosCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2))
a3ComQosRsvp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 3))
a3ComQosStats = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4))
a3ComQosMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 5))
a3ComQosGenClassTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 1), )
if mibBuilder.loadTexts: a3ComQosGenClassTable.setStatus('mandatory')
a3ComQosGenClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosGenClassIndex"))
if mibBuilder.loadTexts: a3ComQosGenClassEntry.setStatus('mandatory')
a3ComQosGenClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65532))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosGenClassIndex.setStatus('mandatory')
a3ComQosGenClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosGenClassName.setStatus('mandatory')
a3ComQosGenClassControlId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosGenClassControlId.setStatus('mandatory')
a3ComQosFlowClassTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2), )
if mibBuilder.loadTexts: a3ComQosFlowClassTable.setStatus('mandatory')
a3ComQosFlowClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosFlowClassIndex"), (0, "A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosFlowClassFilterIndex"))
if mibBuilder.loadTexts: a3ComQosFlowClassEntry.setStatus('mandatory')
a3ComQosFlowClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65532))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosFlowClassIndex.setStatus('mandatory')
a3ComQosFlowClassFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosFlowClassFilterIndex.setStatus('mandatory')
a3ComQosFlowClassCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosFlowClassCastType.setStatus('mandatory')
a3ComQosFlowClassIpProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("udp", 1), ("tcp", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosFlowClassIpProtoType.setStatus('mandatory')
a3ComQosFlowClassSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosFlowClassSrcAddr.setStatus('mandatory')
a3ComQosFlowClassSrcSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosFlowClassSrcSubnetMask.setStatus('mandatory')
a3ComQosFlowClassDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosFlowClassDestAddr.setStatus('mandatory')
a3ComQosFlowClassDestSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosFlowClassDestSubnetMask.setStatus('mandatory')
a3ComQosFlowClassPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosFlowClassPortStart.setStatus('mandatory')
a3ComQosFlowClassPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosFlowClassPortEnd.setStatus('mandatory')
a3ComQosFlowClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosFlowClassRowStatus.setStatus('mandatory')
a3ComQosNonFlowClassTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 3), )
if mibBuilder.loadTexts: a3ComQosNonFlowClassTable.setStatus('mandatory')
a3ComQosNonFlowClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 3, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosNonFlowClassIndex"))
if mibBuilder.loadTexts: a3ComQosNonFlowClassEntry.setStatus('mandatory')
a3ComQosNonFlowClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65532))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosNonFlowClassIndex.setStatus('mandatory')
a3ComQosNonFlowClassCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="07")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosNonFlowClassCastType.setStatus('mandatory')
a3ComQosNonFlowClassProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosNonFlowClassProtos.setStatus('mandatory')
a3ComQosNonFlowClass8021pTags = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="ff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosNonFlowClass8021pTags.setStatus('mandatory')
a3ComQosNonFlowClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosNonFlowClassRowStatus.setStatus('mandatory')
a3ComQosNonFlowClassProtoDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("name", 1), ("ethertype", 2), ("dsap-ssap", 3))).clone('name')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosNonFlowClassProtoDescriptor.setStatus('mandatory')
a3ComQosNonFlowClassCustomProto = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosNonFlowClassCustomProto.setStatus('mandatory')
a3ComQosCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1), )
if mibBuilder.loadTexts: a3ComQosCtrlTable.setStatus('mandatory')
a3ComQosCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosCtrlIndex"))
if mibBuilder.loadTexts: a3ComQosCtrlEntry.setStatus('mandatory')
a3ComQosCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65532))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosCtrlIndex.setStatus('mandatory')
a3ComQosCtrlName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlName.setStatus('mandatory')
a3ComQosCtrlServiceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("highPriority", 1), ("bestEffort", 2), ("lowPriority", 3), ("drop", 4))).clone('bestEffort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlServiceLevel.setStatus('mandatory')
a3ComQosCtrlConformPktsLossEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eligible", 1), ("nonEligible", 2))).clone('eligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlConformPktsLossEligible.setStatus('mandatory')
a3ComQosCtrlExcessPktsServiceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("highPriority", 1), ("bestEffort", 2), ("lowPriority", 3), ("drop", 4))).clone('bestEffort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlExcessPktsServiceLevel.setStatus('mandatory')
a3ComQosCtrlExcessPktsLossEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eligible", 1), ("nonEligible", 2))).clone('eligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlExcessPktsLossEligible.setStatus('mandatory')
a3ComQosCtrl8021pTag = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("ieee8021pTag0", 2), ("ieee8021pTag1", 3), ("ieee8021pTag2", 4), ("ieee8021pTag3", 5), ("ieee8021pTag4", 6), ("ieee8021pTag5", 7), ("ieee8021pTag6", 8), ("ieee8021pTag7", 9))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrl8021pTag.setStatus('mandatory')
a3ComQosCtrlRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("receivePort", 2), ("aggregate", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlRateLimitType.setStatus('mandatory')
a3ComQosCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlRowStatus.setStatus('mandatory')
a3ComQosCtrlRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 2), )
if mibBuilder.loadTexts: a3ComQosCtrlRateLimitTable.setStatus('mandatory')
a3ComQosCtrlRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosCtrlRateLimitCtrlIndex"), (0, "A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosCtrlRateLimitIndex"))
if mibBuilder.loadTexts: a3ComQosCtrlRateLimitEntry.setStatus('mandatory')
a3ComQosCtrlRateLimitCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65532))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosCtrlRateLimitCtrlIndex.setStatus('mandatory')
a3ComQosCtrlRateLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosCtrlRateLimitIndex.setStatus('mandatory')
a3ComQosCtrlRateLimitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlRateLimitPercent.setStatus('mandatory')
a3ComQosCtrlRateLimitKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 2, 1, 4), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlRateLimitKbps.setStatus('mandatory')
a3ComQosCtrlRateLimitPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlRateLimitPorts.setStatus('mandatory')
a3ComQosCtrlRateLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 2, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosCtrlRateLimitRowStatus.setStatus('mandatory')
a3ComQosRsvpStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rsvpEnabled", 1), ("rsvpDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosRsvpStatus.setStatus('mandatory')
a3ComQosRsvpMaxTotalResvdBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosRsvpMaxTotalResvdBandwidth.setStatus('mandatory')
a3ComQosRsvpMaxPerResvBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosRsvpMaxPerResvBandwidth.setStatus('mandatory')
a3ComQosRsvpPolicy = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("edge", 1), ("always", 2), ("never", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosRsvpPolicy.setStatus('mandatory')
a3ComQosRsvpExcessTrafficPolicy = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bestEffort", 1), ("lowPriority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosRsvpExcessTrafficPolicy.setStatus('mandatory')
a3ComQosRsvpExcessPktsLossEligible = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosRsvpExcessPktsLossEligible.setStatus('mandatory')
a3ComQosRsvpAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosRsvpAuthentication.setStatus('mandatory')
a3ComQosRsvpMd5Key = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 3, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosRsvpMd5Key.setStatus('mandatory')
a3ComQosStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 1), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosStatsInterval.setStatus('mandatory')
a3ComQosXmtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 2), )
if mibBuilder.loadTexts: a3ComQosXmtStatsTable.setStatus('mandatory')
a3ComQosXmtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosXmtStatsQindex"))
if mibBuilder.loadTexts: a3ComQosXmtStatsEntry.setStatus('mandatory')
a3ComQosXmtStatsQindex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reserved", 1), ("highPriority", 2), ("bestEffort", 3), ("lowPriority", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtStatsQindex.setStatus('mandatory')
a3ComQosXmtStatsLowLossPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtStatsLowLossPkts.setStatus('mandatory')
a3ComQosXmtStatsLowLossDelayedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtStatsLowLossDelayedPkts.setStatus('mandatory')
a3ComQosXmtStatsLowLossDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtStatsLowLossDiscardedPkts.setStatus('mandatory')
a3ComQosXmtStatsHighLossPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtStatsHighLossPkts.setStatus('mandatory')
a3ComQosXmtStatsHighLossDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtStatsHighLossDiscardedPkts.setStatus('mandatory')
a3ComQosXmtHmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 3), )
if mibBuilder.loadTexts: a3ComQosXmtHmStatsTable.setStatus('mandatory')
a3ComQosXmtHmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosXmtHmStatsQindex"))
if mibBuilder.loadTexts: a3ComQosXmtHmStatsEntry.setStatus('mandatory')
a3ComQosXmtHmStatsQindex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reserved", 1), ("highPriority", 2), ("bestEffort", 3), ("lowPriority", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtHmStatsQindex.setStatus('mandatory')
a3ComQosXmtHmStatsLowLossPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtHmStatsLowLossPkts.setStatus('mandatory')
a3ComQosXmtHmStatsLowLossDelayedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtHmStatsLowLossDelayedPkts.setStatus('mandatory')
a3ComQosXmtHmStatsLowLossDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtHmStatsLowLossDiscardedPkts.setStatus('mandatory')
a3ComQosXmtHmStatsHighLossPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtHmStatsHighLossPkts.setStatus('mandatory')
a3ComQosXmtHmStatsHighLossDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosXmtHmStatsHighLossDiscardedPkts.setStatus('mandatory')
a3ComQosRcvStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 4), )
if mibBuilder.loadTexts: a3ComQosRcvStatsTable.setStatus('mandatory')
a3ComQosRcvStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: a3ComQosRcvStatsEntry.setStatus('mandatory')
a3ComQosRcvStatsConformBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosRcvStatsConformBytesTotal.setStatus('mandatory')
a3ComQosRcvStatsNonConformBytesForFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosRcvStatsNonConformBytesForFlows.setStatus('mandatory')
a3ComQosRcvStatsNonConformBytesForNonFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosRcvStatsNonConformBytesForNonFlows.setStatus('mandatory')
a3ComQosRcvStatsDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 4, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQosRcvStatsDroppedPkts.setStatus('mandatory')
a3ComQosBandwidthRatio = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosBandwidthRatio.setStatus('mandatory')
a3ComQosExcessTrafficClassTag = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 21, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("ieee8021pTag0", 2), ("ieee8021pTag1", 3), ("ieee8021pTag2", 4), ("ieee8021pTag3", 5), ("ieee8021pTag4", 6), ("ieee8021pTag5", 7), ("ieee8021pTag6", 8), ("ieee8021pTag7", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQosExcessTrafficClassTag.setStatus('mandatory')
a3ComQosFlowClassIntrudingEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,88)).setObjects(("A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosFlowClassIndex"), ("A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosFlowClassIpProtoType"), ("A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosFlowClassSrcAddr"), ("A3COM-SWITCHING-SYSTEMS-QOS-MIB", "a3ComQosFlowClassDestAddr"))
mibBuilder.exportSymbols("A3COM-SWITCHING-SYSTEMS-QOS-MIB", a3ComQosRsvp=a3ComQosRsvp, a3ComQosGenClassTable=a3ComQosGenClassTable, a3ComQosRsvpExcessTrafficPolicy=a3ComQosRsvpExcessTrafficPolicy, a3ComQosFlowClassEntry=a3ComQosFlowClassEntry, a3ComQosRsvpMaxTotalResvdBandwidth=a3ComQosRsvpMaxTotalResvdBandwidth, a3ComQosFlowClassSrcAddr=a3ComQosFlowClassSrcAddr, a3ComQosExcessTrafficClassTag=a3ComQosExcessTrafficClassTag, a3ComQosRcvStatsEntry=a3ComQosRcvStatsEntry, a3ComQosFlowClassIndex=a3ComQosFlowClassIndex, a3ComQosRsvpPolicy=a3ComQosRsvpPolicy, a3ComQosNonFlowClassProtos=a3ComQosNonFlowClassProtos, a3ComQosNonFlowClassCastType=a3ComQosNonFlowClassCastType, a3ComQosXmtHmStatsQindex=a3ComQosXmtHmStatsQindex, a3ComQosFlowClassDestSubnetMask=a3ComQosFlowClassDestSubnetMask, a3ComQosGenClassName=a3ComQosGenClassName, a3ComSwitchingSystemsMib=a3ComSwitchingSystemsMib, a3ComQosXmtHmStatsHighLossPkts=a3ComQosXmtHmStatsHighLossPkts, a3ComQosCtrlRateLimitEntry=a3ComQosCtrlRateLimitEntry, a3ComQosFlowClassPortStart=a3ComQosFlowClassPortStart, a3ComQosNonFlowClassProtoDescriptor=a3ComQosNonFlowClassProtoDescriptor, a3ComQosRcvStatsNonConformBytesForNonFlows=a3ComQosRcvStatsNonConformBytesForNonFlows, RowStatus=RowStatus, a3ComQosCtrlRateLimitPorts=a3ComQosCtrlRateLimitPorts, a3ComQosXmtHmStatsTable=a3ComQosXmtHmStatsTable, a3ComQosCtrlRateLimitRowStatus=a3ComQosCtrlRateLimitRowStatus, a3ComQosCtrlRateLimitCtrlIndex=a3ComQosCtrlRateLimitCtrlIndex, a3ComQosCtrlRateLimitTable=a3ComQosCtrlRateLimitTable, a3ComQosCtrlConformPktsLossEligible=a3ComQosCtrlConformPktsLossEligible, a3ComQosFlowClassPortEnd=a3ComQosFlowClassPortEnd, a3ComQosNonFlowClassIndex=a3ComQosNonFlowClassIndex, a3ComQosFlowClassSrcSubnetMask=a3ComQosFlowClassSrcSubnetMask, a3ComQosNonFlowClassEntry=a3ComQosNonFlowClassEntry, a3ComQosGenClassIndex=a3ComQosGenClassIndex, a3ComQosRcvStatsNonConformBytesForFlows=a3ComQosRcvStatsNonConformBytesForFlows, a3ComQosFlowClassRowStatus=a3ComQosFlowClassRowStatus, a3ComQosXmtStatsEntry=a3ComQosXmtStatsEntry, switchingSystemsMibs=switchingSystemsMibs, a3ComQosCtrlRowStatus=a3ComQosCtrlRowStatus, a3ComQosXmtStatsTable=a3ComQosXmtStatsTable, a3Com=a3Com, a3ComQosRsvpExcessPktsLossEligible=a3ComQosRsvpExcessPktsLossEligible, a3ComQosCtrlTable=a3ComQosCtrlTable, a3ComQosCtrlExcessPktsLossEligible=a3ComQosCtrlExcessPktsLossEligible, a3ComQosRcvStatsDroppedPkts=a3ComQosRcvStatsDroppedPkts, a3ComQosXmtHmStatsHighLossDiscardedPkts=a3ComQosXmtHmStatsHighLossDiscardedPkts, a3ComQosNonFlowClassCustomProto=a3ComQosNonFlowClassCustomProto, a3ComQosXmtStatsLowLossDelayedPkts=a3ComQosXmtStatsLowLossDelayedPkts, a3ComQosRsvpMaxPerResvBandwidth=a3ComQosRsvpMaxPerResvBandwidth, a3ComQosFlowClassIntrudingEvent=a3ComQosFlowClassIntrudingEvent, a3ComQosCtrlRateLimitPercent=a3ComQosCtrlRateLimitPercent, a3ComQosStatsInterval=a3ComQosStatsInterval, a3ComQosXmtHmStatsEntry=a3ComQosXmtHmStatsEntry, a3ComQosXmtStatsLowLossDiscardedPkts=a3ComQosXmtStatsLowLossDiscardedPkts, a3ComQosXmtStatsHighLossDiscardedPkts=a3ComQosXmtStatsHighLossDiscardedPkts, a3ComQosXmtHmStatsLowLossPkts=a3ComQosXmtHmStatsLowLossPkts, a3ComQosNonFlowClassTable=a3ComQosNonFlowClassTable, a3ComQosXmtStatsHighLossPkts=a3ComQosXmtStatsHighLossPkts, a3ComQosXmtHmStatsLowLossDiscardedPkts=a3ComQosXmtHmStatsLowLossDiscardedPkts, a3ComQosCtrlExcessPktsServiceLevel=a3ComQosCtrlExcessPktsServiceLevel, a3ComQosXmtStatsLowLossPkts=a3ComQosXmtStatsLowLossPkts, a3ComQosRcvStatsTable=a3ComQosRcvStatsTable, a3ComQosNonFlowClassRowStatus=a3ComQosNonFlowClassRowStatus, a3ComQosCtrlName=a3ComQosCtrlName, a3ComQosFlowClassFilterIndex=a3ComQosFlowClassFilterIndex, a3ComQosCtrl=a3ComQosCtrl, a3ComQosCtrlRateLimitIndex=a3ComQosCtrlRateLimitIndex, a3ComQosBandwidthRatio=a3ComQosBandwidthRatio, a3ComQosFlowClassCastType=a3ComQosFlowClassCastType, a3ComQosFlowClassTable=a3ComQosFlowClassTable, a3ComQosRsvpAuthentication=a3ComQosRsvpAuthentication, a3ComQosGenClassEntry=a3ComQosGenClassEntry, a3ComQosFlowClassIpProtoType=a3ComQosFlowClassIpProtoType, a3ComQosCtrlRateLimitType=a3ComQosCtrlRateLimitType, a3ComQosNonFlowClass8021pTags=a3ComQosNonFlowClass8021pTags, a3ComQosCtrlRateLimitKbps=a3ComQosCtrlRateLimitKbps, a3ComQosGenClassControlId=a3ComQosGenClassControlId, a3ComQosCtrlIndex=a3ComQosCtrlIndex, a3ComQosRsvpMd5Key=a3ComQosRsvpMd5Key, a3ComQosClass=a3ComQosClass, a3ComQosRcvStatsConformBytesTotal=a3ComQosRcvStatsConformBytesTotal, a3ComQosXmtHmStatsLowLossDelayedPkts=a3ComQosXmtHmStatsLowLossDelayedPkts, a3ComQosXmtStatsQindex=a3ComQosXmtStatsQindex, a3ComQosFlowClassDestAddr=a3ComQosFlowClassDestAddr, a3ComQosMisc=a3ComQosMisc, a3ComQosRsvpStatus=a3ComQosRsvpStatus, a3ComQosCtrlEntry=a3ComQosCtrlEntry, a3ComQosStats=a3ComQosStats, a3ComQos=a3ComQos, a3ComQosCtrl8021pTag=a3ComQosCtrl8021pTag, a3ComQosCtrlServiceLevel=a3ComQosCtrlServiceLevel)
