#
# PySNMP MIB module Wellfleet-CCT-NAME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-CCT-NAME-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:32:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter32, ObjectIdentity, NotificationType, MibIdentifier, Integer32, Gauge32, IpAddress, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "ObjectIdentity", "NotificationType", "MibIdentifier", "Integer32", "Gauge32", "IpAddress", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfServices, wfCircuitNameExtension = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfServices", "wfCircuitNameExtension")
wfCircuitNameTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3), )
if mibBuilder.loadTexts: wfCircuitNameTable.setStatus('mandatory')
wfCircuitNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1), ).setIndexNames((0, "Wellfleet-CCT-NAME-MIB", "wfCircuitNumber"))
if mibBuilder.loadTexts: wfCircuitNameEntry.setStatus('mandatory')
wfCircuitNameDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitNameDelete.setStatus('mandatory')
wfCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCircuitNumber.setStatus('mandatory')
wfCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitName.setStatus('mandatory')
wfCircuitIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170))).clone(namedValues=NamedValues(("csmacd", 10), ("sync", 20), ("t1", 30), ("e1", 40), ("token", 50), ("fddi", 60), ("hssi", 70), ("mct1", 80), ("ds1e1", 90), ("none", 100), ("atm", 110), ("async", 120), ("isdn", 130), ("atmz", 140), ("bisync", 150), ("gre", 160), ("ds3e3", 170)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitIfType.setStatus('mandatory')
wfCircuitProtoMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitProtoMap.setStatus('mandatory')
wfCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("virtual", 2), ("master", 3), ("clip", 4), ("internal", 5), ("gre", 6), ("notrouted", 7))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitType.setStatus('mandatory')
wfCircuitRelCctList = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitRelCctList.setStatus('mandatory')
wfCircuitLineList = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitLineList.setStatus('mandatory')
wfCircuitMultilineName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitMultilineName.setStatus('mandatory')
wfCircuitTdmRes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notdmresources", 1), ("switchedh110", 2), ("routedh110", 3), ("cesh110", 4))).clone('notdmresources')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitTdmRes.setStatus('mandatory')
wfCircuitTdmCctInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notinuse", 1), ("inuse", 2))).clone('notinuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitTdmCctInUse.setStatus('mandatory')
wfLineMappingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1), )
if mibBuilder.loadTexts: wfLineMappingTable.setStatus('mandatory')
wfLineMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1, 1), ).setIndexNames((0, "Wellfleet-CCT-NAME-MIB", "wfLineMappingNumber"))
if mibBuilder.loadTexts: wfLineMappingEntry.setStatus('mandatory')
wfLineMappingDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLineMappingDelete.setStatus('mandatory')
wfLineMappingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLineMappingNumber.setStatus('mandatory')
wfLineMappingCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLineMappingCct.setStatus('mandatory')
wfLineMappingDef = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLineMappingDef.setStatus('mandatory')
wfNode = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 2))
wfNodeDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNodeDelete.setStatus('mandatory')
wfNodeProtoMap = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNodeProtoMap.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-CCT-NAME-MIB", wfLineMappingDef=wfLineMappingDef, wfCircuitProtoMap=wfCircuitProtoMap, wfCircuitTdmCctInUse=wfCircuitTdmCctInUse, wfLineMappingDelete=wfLineMappingDelete, wfCircuitLineList=wfCircuitLineList, wfCircuitNumber=wfCircuitNumber, wfCircuitType=wfCircuitType, wfNodeProtoMap=wfNodeProtoMap, wfLineMappingCct=wfLineMappingCct, wfNode=wfNode, wfCircuitNameEntry=wfCircuitNameEntry, wfCircuitName=wfCircuitName, wfCircuitNameTable=wfCircuitNameTable, wfCircuitIfType=wfCircuitIfType, wfLineMappingEntry=wfLineMappingEntry, wfCircuitRelCctList=wfCircuitRelCctList, wfLineMappingNumber=wfLineMappingNumber, wfCircuitMultilineName=wfCircuitMultilineName, wfCircuitNameDelete=wfCircuitNameDelete, wfNodeDelete=wfNodeDelete, wfCircuitTdmRes=wfCircuitTdmRes, wfLineMappingTable=wfLineMappingTable)
