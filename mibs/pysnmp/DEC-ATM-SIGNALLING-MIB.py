#
# PySNMP MIB module DEC-ATM-SIGNALLING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEC-ATM-SIGNALLING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:22:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
decMIBextension, = mibBuilder.importSymbols("DECATM-MIB", "decMIBextension")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Unsigned32, Counter64, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, ObjectIdentity, Gauge32, MibIdentifier, IpAddress, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Counter64", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "ObjectIdentity", "Gauge32", "MibIdentifier", "IpAddress", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
decAtmSignallingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 34))
decAtmSignallingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1))
decSignallingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 1))
decSignallingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 1, 1), )
if mibBuilder.loadTexts: decSignallingConfigTable.setStatus('mandatory')
decSignallingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DEC-ATM-SIGNALLING-MIB", "decAtmSignallingIndex"))
if mibBuilder.loadTexts: decSignallingConfigEntry.setStatus('mandatory')
decAtmSignallingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmSignallingIndex.setStatus('mandatory')
decAtmSignallingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoConfigure", 1), ("pnni", 2), ("uni30", 3), ("uni31", 4), ("uni40", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmSignallingMode.setStatus('mandatory')
decQ2931Group = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2))
decQ2931MsgTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1), )
if mibBuilder.loadTexts: decQ2931MsgTable.setStatus('mandatory')
decQ2931MsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DEC-ATM-SIGNALLING-MIB", "decAtmSignallingIndex"))
if mibBuilder.loadTexts: decQ2931MsgEntry.setStatus('mandatory')
callProceedingTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callProceedingTx.setStatus('mandatory')
callProceedingRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callProceedingRx.setStatus('mandatory')
connectTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectTx.setStatus('mandatory')
connectRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectRx.setStatus('mandatory')
connectAcknowledgeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectAcknowledgeTx.setStatus('mandatory')
connectAcknowledgeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectAcknowledgeRx.setStatus('mandatory')
setupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setupTx.setStatus('mandatory')
setupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setupRx.setStatus('mandatory')
releaseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: releaseTx.setStatus('mandatory')
releaseRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: releaseRx.setStatus('mandatory')
releaseCompleteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: releaseCompleteTx.setStatus('mandatory')
releaseCompleteRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: releaseCompleteRx.setStatus('mandatory')
restartTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartTx.setStatus('mandatory')
restartRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartRx.setStatus('mandatory')
restartAcknowledgeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartAcknowledgeTx.setStatus('mandatory')
restartAcknowledgeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartAcknowledgeRx.setStatus('mandatory')
statusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusTx.setStatus('mandatory')
statusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusRx.setStatus('mandatory')
statusEnquiryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEnquiryTx.setStatus('mandatory')
statusEnquiryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEnquiryRx.setStatus('mandatory')
addPartyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyTx.setStatus('mandatory')
addPartyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyRx.setStatus('mandatory')
addPartyAcknowledgeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyAcknowledgeTx.setStatus('mandatory')
addPartyAcknowledgeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyAcknowledgeRx.setStatus('mandatory')
addPartyRejectTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyRejectTx.setStatus('mandatory')
addPartyRejectRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyRejectRx.setStatus('mandatory')
dropPartyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dropPartyTx.setStatus('mandatory')
dropPartyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dropPartyRx.setStatus('mandatory')
dropPartyAcknowledgeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dropPartyAcknowledgeTx.setStatus('mandatory')
dropPartyAcknowledgeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dropPartyAcknowledgeRx.setStatus('mandatory')
decQ2931StatusTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2), )
if mibBuilder.loadTexts: decQ2931StatusTable.setStatus('mandatory')
decQ2931StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DEC-ATM-SIGNALLING-MIB", "decAtmSignallingIndex"))
if mibBuilder.loadTexts: decQ2931StatusEntry.setStatus('mandatory')
totalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalConns.setStatus('mandatory')
activeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeConns.setStatus('mandatory')
lastTxCause = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTxCause.setStatus('mandatory')
lastTxDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTxDiagnostic.setStatus('mandatory')
lastRxCause = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastRxCause.setStatus('mandatory')
lastRxDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastRxDiagnostic.setStatus('mandatory')
decQ2931TimerTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3), )
if mibBuilder.loadTexts: decQ2931TimerTable.setStatus('mandatory')
decQ2931TimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DEC-ATM-SIGNALLING-MIB", "decAtmSignallingIndex"))
if mibBuilder.loadTexts: decQ2931TimerEntry.setStatus('mandatory')
t303 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 1), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t303.setStatus('mandatory')
t308 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 2), Integer32().clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t308.setStatus('mandatory')
t309 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 3), Integer32().clone(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t309.setStatus('mandatory')
t310 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 4), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t310.setStatus('mandatory')
t313 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 5), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t313.setStatus('mandatory')
t316 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 6), Integer32().clone(120)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t316.setStatus('mandatory')
t317 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t317.setStatus('mandatory')
t322 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 8), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t322.setStatus('mandatory')
t398 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 9), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t398.setStatus('mandatory')
t399 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 10), Integer32().clone(14)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t399.setStatus('mandatory')
decQSaalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3))
decQSaalMsgTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1), )
if mibBuilder.loadTexts: decQSaalMsgTable.setStatus('mandatory')
decQSaalMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DEC-ATM-SIGNALLING-MIB", "decAtmSignallingIndex"))
if mibBuilder.loadTexts: decQSaalMsgEntry.setStatus('mandatory')
txDiscardedSdus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDiscardedSdus.setStatus('mandatory')
rxErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxErrorPdus.setStatus('mandatory')
txErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txErrorPdus.setStatus('mandatory')
rxDiscardedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiscardedPdus.setStatus('mandatory')
txDiscardedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDiscardedPdus.setStatus('mandatory')
bgnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgnTx.setStatus('mandatory')
bgnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgnRx.setStatus('mandatory')
bgakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgakTx.setStatus('mandatory')
bgakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgakRx.setStatus('mandatory')
endTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endTx.setStatus('mandatory')
endRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endRx.setStatus('mandatory')
endakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endakTx.setStatus('mandatory')
endakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endakRx.setStatus('mandatory')
rsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTx.setStatus('mandatory')
rsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRx.setStatus('mandatory')
rsakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsakTx.setStatus('mandatory')
rsakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsakRx.setStatus('mandatory')
bgrejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgrejTx.setStatus('mandatory')
bgrejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgrejRx.setStatus('mandatory')
sdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdTx.setStatus('mandatory')
sdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdRx.setStatus('mandatory')
sdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpTx.setStatus('mandatory')
sdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpRx.setStatus('mandatory')
erTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erTx.setStatus('mandatory')
erRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erRx.setStatus('mandatory')
pollTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollTx.setStatus('mandatory')
pollRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollRx.setStatus('mandatory')
statTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTx.setStatus('mandatory')
statRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRx.setStatus('mandatory')
ustatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ustatTx.setStatus('mandatory')
ustatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ustatRx.setStatus('mandatory')
udTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udTx.setStatus('mandatory')
udRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udRx.setStatus('mandatory')
mdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdTx.setStatus('mandatory')
mdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdRx.setStatus('mandatory')
erakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erakTx.setStatus('mandatory')
erakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erakRx.setStatus('mandatory')
mibBuilder.exportSymbols("DEC-ATM-SIGNALLING-MIB", decAtmSignallingMIB=decAtmSignallingMIB, releaseRx=releaseRx, lastTxCause=lastTxCause, endakTx=endakTx, decQ2931TimerEntry=decQ2931TimerEntry, endRx=endRx, txDiscardedPdus=txDiscardedPdus, restartRx=restartRx, connectAcknowledgeRx=connectAcknowledgeRx, mdRx=mdRx, t398=t398, ustatTx=ustatTx, decAtmSignallingMIBObjects=decAtmSignallingMIBObjects, decAtmSignallingIndex=decAtmSignallingIndex, releaseCompleteRx=releaseCompleteRx, decQ2931StatusTable=decQ2931StatusTable, dropPartyAcknowledgeRx=dropPartyAcknowledgeRx, rsakRx=rsakRx, addPartyRejectRx=addPartyRejectRx, sdTx=sdTx, rsRx=rsRx, txErrorPdus=txErrorPdus, bgrejRx=bgrejRx, decQ2931Group=decQ2931Group, callProceedingTx=callProceedingTx, sdpRx=sdpRx, statusEnquiryTx=statusEnquiryTx, decSignallingConfigEntry=decSignallingConfigEntry, setupRx=setupRx, lastTxDiagnostic=lastTxDiagnostic, decQSaalMsgTable=decQSaalMsgTable, statTx=statTx, statRx=statRx, t317=t317, lastRxCause=lastRxCause, rsakTx=rsakTx, releaseCompleteTx=releaseCompleteTx, dropPartyAcknowledgeTx=dropPartyAcknowledgeTx, endTx=endTx, sdpTx=sdpTx, statusTx=statusTx, addPartyTx=addPartyTx, bgrejTx=bgrejTx, lastRxDiagnostic=lastRxDiagnostic, t313=t313, erakRx=erakRx, addPartyAcknowledgeTx=addPartyAcknowledgeTx, txDiscardedSdus=txDiscardedSdus, udRx=udRx, restartTx=restartTx, erakTx=erakTx, callProceedingRx=callProceedingRx, totalConns=totalConns, endakRx=endakRx, bgnRx=bgnRx, releaseTx=releaseTx, restartAcknowledgeRx=restartAcknowledgeRx, decQ2931TimerTable=decQ2931TimerTable, t303=t303, bgakRx=bgakRx, t322=t322, mdTx=mdTx, pollTx=pollTx, rxDiscardedPdus=rxDiscardedPdus, decQSaalGroup=decQSaalGroup, connectTx=connectTx, statusRx=statusRx, dropPartyTx=dropPartyTx, bgakTx=bgakTx, dropPartyRx=dropPartyRx, decQ2931StatusEntry=decQ2931StatusEntry, udTx=udTx, decAtmSignallingMode=decAtmSignallingMode, t399=t399, erTx=erTx, decSignallingConfigTable=decSignallingConfigTable, ustatRx=ustatRx, decQ2931MsgTable=decQ2931MsgTable, rsTx=rsTx, connectAcknowledgeTx=connectAcknowledgeTx, addPartyRx=addPartyRx, decSignallingGroup=decSignallingGroup, connectRx=connectRx, t308=t308, addPartyRejectTx=addPartyRejectTx, restartAcknowledgeTx=restartAcknowledgeTx, addPartyAcknowledgeRx=addPartyAcknowledgeRx, statusEnquiryRx=statusEnquiryRx, t316=t316, setupTx=setupTx, rxErrorPdus=rxErrorPdus, sdRx=sdRx, activeConns=activeConns, decQSaalMsgEntry=decQSaalMsgEntry, erRx=erRx, t309=t309, t310=t310, decQ2931MsgEntry=decQ2931MsgEntry, pollRx=pollRx, bgnTx=bgnTx)
