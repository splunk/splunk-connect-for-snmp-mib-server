#
# PySNMP MIB module COMPEX-IN3000 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COMPEX-IN3000
# Produced by pysmi-0.3.4 at Mon Apr 29 18:10:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, ObjectIdentity, Integer32, MibIdentifier, enterprises, Bits, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, NotificationType, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "ObjectIdentity", "Integer32", "MibIdentifier", "enterprises", "Bits", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "NotificationType", "Gauge32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
compex = MibIdentifier((1, 3, 6, 1, 4, 1, 426))
in3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1))
hubTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 1))
tp3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 1, 1))
rp3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 1, 2))
productInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 2))
productName = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('mandatory')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('mandatory')
releasedDate = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: releasedDate.setStatus('mandatory')
compexAddress = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compexAddress.setStatus('mandatory')
compexPhone = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compexPhone.setStatus('mandatory')
compexImage = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 2, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compexImage.setStatus('mandatory')
compexMyAccess = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compexMyAccess.setStatus('mandatory')
devTeamTable = MibTable((1, 3, 6, 1, 4, 1, 426, 1, 2, 8), )
if mibBuilder.loadTexts: devTeamTable.setStatus('mandatory')
devTeamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 426, 1, 2, 8, 1), ).setIndexNames((0, "COMPEX-IN3000", "cpId"))
if mibBuilder.loadTexts: devTeamEntry.setStatus('mandatory')
cpId = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpId.setStatus('mandatory')
cpName = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 2, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpName.setStatus('mandatory')
communityInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 3))
communityTable = MibTable((1, 3, 6, 1, 4, 1, 426, 1, 3, 1), )
if mibBuilder.loadTexts: communityTable.setStatus('mandatory')
communityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 426, 1, 3, 1, 1), ).setIndexNames((0, "COMPEX-IN3000", "communityInstance"))
if mibBuilder.loadTexts: communityEntry.setStatus('mandatory')
communityInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: communityInstance.setStatus('mandatory')
communityString = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityString.setStatus('mandatory')
communityCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("clear", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityCapability.setStatus('mandatory')
trapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 4))
trapTable = MibTable((1, 3, 6, 1, 4, 1, 426, 1, 4, 1), )
if mibBuilder.loadTexts: trapTable.setStatus('mandatory')
trapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 426, 1, 4, 1, 1), ).setIndexNames((0, "COMPEX-IN3000", "trapDest"))
if mibBuilder.loadTexts: trapEntry.setStatus('mandatory')
trapDest = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 4, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDest.setStatus('mandatory')
trapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapStatus.setStatus('mandatory')
in3000StatsRptr = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 5))
rptrFifoColls = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFifoColls.setStatus('mandatory')
rptrShortWoPort = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrShortWoPort.setStatus('mandatory')
rptrNoStatsDsgntr = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrNoStatsDsgntr.setStatus('mandatory')
rptrInvalidDesgntr = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrInvalidDesgntr.setStatus('mandatory')
rptrPortIDwoPacket = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortIDwoPacket.setStatus('mandatory')
rptrOverflows = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrOverflows.setStatus('mandatory')
rptrNoFreeBuffers = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrNoFreeBuffers.setStatus('mandatory')
rptrTxTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrTxTimeouts.setStatus('mandatory')
rptrNICTxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrNICTxCollisions.setStatus('mandatory')
rptrNICTxFifoUruns = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrNICTxFifoUruns.setStatus('mandatory')
rptrNICTxCDHrtbts = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrNICTxCDHrtbts.setStatus('mandatory')
rptrNICTxOutWinCls = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrNICTxOutWinCls.setStatus('mandatory')
rptrNICCarrierLost = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrNICCarrierLost.setStatus('mandatory')
rptrInNoRxBuf = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrInNoRxBuf.setStatus('mandatory')
in3000StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 6))
groupOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 426, 1, 6, 1), )
if mibBuilder.loadTexts: groupOctetsTable.setStatus('mandatory')
groupOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1), ).setIndexNames((0, "COMPEX-IN3000", "gsoGroupIndex"))
if mibBuilder.loadTexts: groupOctetsEntry.setStatus('mandatory')
gsoGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsoGroupIndex.setStatus('mandatory')
gsoHostOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsoHostOctetsRxOk.setStatus('mandatory')
gsoHostOctetsRxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsoHostOctetsRxErr.setStatus('mandatory')
gsoOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsoOctetsRxOk.setStatus('mandatory')
gsoOctetsRxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsoOctetsRxErr.setStatus('mandatory')
gsobkt64Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt64Ok.setStatus('mandatory')
gsobkt64Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt64Err.setStatus('mandatory')
gsobkt65to127Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt65to127Ok.setStatus('mandatory')
gsobkt65to127Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt65to127Err.setStatus('mandatory')
gsobkt128to255Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt128to255Ok.setStatus('mandatory')
gsobkt128to255Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt128to255Err.setStatus('mandatory')
gsobkt256to511Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt256to511Ok.setStatus('mandatory')
gsobkt256to511Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt256to511Err.setStatus('mandatory')
gsobkt512to1023Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt512to1023Ok.setStatus('mandatory')
gsobkt512to1023Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt512to1023Err.setStatus('mandatory')
gsobkt1024to1518Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt1024to1518Ok.setStatus('mandatory')
gsobkt1024to1518Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsobkt1024to1518Err.setStatus('mandatory')
gsoRuntPacketsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsoRuntPacketsOk.setStatus('mandatory')
gsoRuntPacketsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsoRuntPacketsErr.setStatus('mandatory')
gsoPacketsTooBigOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsoPacketsTooBigOk.setStatus('mandatory')
gsoPacketsTooBigErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsoPacketsTooBigErr.setStatus('mandatory')
groupPacketTable = MibTable((1, 3, 6, 1, 4, 1, 426, 1, 6, 2), )
if mibBuilder.loadTexts: groupPacketTable.setStatus('mandatory')
groupPacketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1), ).setIndexNames((0, "COMPEX-IN3000", "gspGroupIndex"))
if mibBuilder.loadTexts: groupPacketEntry.setStatus('mandatory')
gspGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspGroupIndex.setStatus('mandatory')
gspPacketsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspPacketsRxOk.setStatus('mandatory')
gspPacketsRxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspPacketsRxErr.setStatus('mandatory')
gspPhysicalOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspPhysicalOk.setStatus('mandatory')
gspPhysicalErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspPhysicalErr.setStatus('mandatory')
gspMulticastOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspMulticastOk.setStatus('mandatory')
gspMulticastErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspMulticastErr.setStatus('mandatory')
gspBroadcastOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspBroadcastOk.setStatus('mandatory')
gspBroadcastErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspBroadcastErr.setStatus('mandatory')
gspHostPhysicalOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspHostPhysicalOk.setStatus('mandatory')
gspHostPhysicalErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gspHostPhysicalErr.setStatus('mandatory')
groupMiscTable = MibTable((1, 3, 6, 1, 4, 1, 426, 1, 6, 3), )
if mibBuilder.loadTexts: groupMiscTable.setStatus('mandatory')
groupMiscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1), ).setIndexNames((0, "COMPEX-IN3000", "gsmGroupIndex"))
if mibBuilder.loadTexts: groupMiscEntry.setStatus('mandatory')
gsmGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmGroupIndex.setStatus('mandatory')
gsmNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmNumPorts.setStatus('mandatory')
gsmName = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsmName.setStatus('mandatory')
gsmType = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tp3000", 1), ("rp3000", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmType.setStatus('mandatory')
gsmNumLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmNumLinkUp.setStatus('mandatory')
gsmNumLinkPulses = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmNumLinkPulses.setStatus('mandatory')
gsmCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmCollisions.setStatus('mandatory')
gsmLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmLateCollisions.setStatus('mandatory')
gsmPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmPartitions.setStatus('mandatory')
gsmJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmJabbers.setStatus('mandatory')
gsmShortFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmShortFragments.setStatus('mandatory')
gsmCrcFae = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmCrcFae.setStatus('mandatory')
gsmCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmCrc.setStatus('mandatory')
gsmFifoOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmFifoOverrun.setStatus('mandatory')
gsmDeferring = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsmDeferring.setStatus('mandatory')
in3000StatsPort = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 7))
portOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 426, 1, 7, 1), )
if mibBuilder.loadTexts: portOctetsTable.setStatus('mandatory')
portOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1), ).setIndexNames((0, "COMPEX-IN3000", "psoGroupIndex"), (0, "COMPEX-IN3000", "psoPortIndex"))
if mibBuilder.loadTexts: portOctetsEntry.setStatus('mandatory')
psoGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psoGroupIndex.setStatus('mandatory')
psoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psoPortIndex.setStatus('mandatory')
psoHostOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psoHostOctetsRxOk.setStatus('mandatory')
psoHostOctetsRxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psoHostOctetsRxErr.setStatus('mandatory')
psoOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psoOctetsRxOk.setStatus('mandatory')
psoOctetsRxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psoOctetsRxErr.setStatus('mandatory')
psobkt64Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt64Ok.setStatus('mandatory')
psobkt64Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt64Err.setStatus('mandatory')
psobkt65to127Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt65to127Ok.setStatus('mandatory')
psobkt65to127Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt65to127Err.setStatus('mandatory')
psobkt128to255Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt128to255Ok.setStatus('mandatory')
psobkt128to255Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt128to255Err.setStatus('mandatory')
psobkt256to511Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt256to511Ok.setStatus('mandatory')
psobkt256to511Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt256to511Err.setStatus('mandatory')
psobkt512to1023Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt512to1023Ok.setStatus('mandatory')
psobkt512to1023Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt512to1023Err.setStatus('mandatory')
psobkt1024to1518Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt1024to1518Ok.setStatus('mandatory')
psobkt1024to1518Err = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psobkt1024to1518Err.setStatus('mandatory')
psoRuntPacketsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psoRuntPacketsOk.setStatus('mandatory')
psoRuntPacketsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psoRuntPacketsErr.setStatus('mandatory')
psoPacketsTooBigOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psoPacketsTooBigOk.setStatus('mandatory')
psoPacketsTooBigErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psoPacketsTooBigErr.setStatus('mandatory')
portPacketTable = MibTable((1, 3, 6, 1, 4, 1, 426, 1, 7, 2), )
if mibBuilder.loadTexts: portPacketTable.setStatus('mandatory')
portPacketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1), ).setIndexNames((0, "COMPEX-IN3000", "pspGroupIndex"), (0, "COMPEX-IN3000", "pspPortIndex"))
if mibBuilder.loadTexts: portPacketEntry.setStatus('mandatory')
pspGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspGroupIndex.setStatus('mandatory')
pspPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspPortIndex.setStatus('mandatory')
pspPacketsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspPacketsRxOk.setStatus('mandatory')
pspPacketsRxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspPacketsRxErr.setStatus('mandatory')
pspPhysicalOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspPhysicalOk.setStatus('mandatory')
pspPhysicalErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspPhysicalErr.setStatus('mandatory')
pspMulticastOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspMulticastOk.setStatus('mandatory')
pspMulticastErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspMulticastErr.setStatus('mandatory')
pspBroadcastOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspBroadcastOk.setStatus('mandatory')
pspBroadcastErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspBroadcastErr.setStatus('mandatory')
pspHostPhysicalOk = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspHostPhysicalOk.setStatus('mandatory')
pspHostPhysicalErr = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspHostPhysicalErr.setStatus('mandatory')
portMiscTable = MibTable((1, 3, 6, 1, 4, 1, 426, 1, 7, 3), )
if mibBuilder.loadTexts: portMiscTable.setStatus('mandatory')
portMiscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1), ).setIndexNames((0, "COMPEX-IN3000", "psmGroupIndex"), (0, "COMPEX-IN3000", "psmPortIndex"))
if mibBuilder.loadTexts: portMiscEntry.setStatus('mandatory')
psmGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmGroupIndex.setStatus('mandatory')
psmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmPortIndex.setStatus('mandatory')
psmName = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psmName.setStatus('mandatory')
psmType = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tenBaseT", 1), ("aui-bnc", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmType.setStatus('mandatory')
psmLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmLinkState.setStatus('mandatory')
psmLinkPulses = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psmLinkPulses.setStatus('mandatory')
psmCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmCollisions.setStatus('mandatory')
psmLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmLateCollisions.setStatus('mandatory')
psmPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmPartitions.setStatus('mandatory')
psmJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmJabbers.setStatus('mandatory')
psmShortFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmShortFragments.setStatus('mandatory')
psmCrcFae = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmCrcFae.setStatus('mandatory')
psmCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmCrc.setStatus('mandatory')
psmFifoOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmFifoOverrun.setStatus('mandatory')
psmDeferring = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 7, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmDeferring.setStatus('mandatory')
in3000StatsMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 8))
initHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initHeapSize.setStatus('mandatory')
usedHeap = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedHeap.setStatus('mandatory')
freeHeap = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeHeap.setStatus('mandatory')
heapStatus = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("notOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heapStatus.setStatus('mandatory')
mallocCalls = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocCalls.setStatus('mandatory')
reallocCalls = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reallocCalls.setStatus('mandatory')
callocCalls = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callocCalls.setStatus('mandatory')
freeCalls = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeCalls.setStatus('mandatory')
noMemoryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noMemoryAvailable.setStatus('mandatory')
mnodeCoalesces = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mnodeCoalesces.setStatus('mandatory')
coalesceMemCalls = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coalesceMemCalls.setStatus('mandatory')
coalesceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 8, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coalesceThreshold.setStatus('mandatory')
in3000StatsIcmp = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 9))
inUnknownTypes = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUnknownTypes.setStatus('mandatory')
bufferPoolEmpty = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferPoolEmpty.setStatus('mandatory')
dataBufferTooSmall = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBufferTooSmall.setStatus('mandatory')
in3000StatsOS = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 10))
threadCreateReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadCreateReq.setStatus('mandatory')
threadCreateOk = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadCreateOk.setStatus('mandatory')
threadCreateFail = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadCreateFail.setStatus('mandatory')
threadTableFull = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadTableFull.setStatus('mandatory')
threadKill = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadKill.setStatus('mandatory')
threadMaximum = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: threadMaximum.setStatus('mandatory')
defaultStackSize = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultStackSize.setStatus('mandatory')
defaultTimeSlice = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultTimeSlice.setStatus('mandatory')
bogusInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bogusInterrupts.setStatus('mandatory')
divideError = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: divideError.setStatus('mandatory')
singleStep = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleStep.setStatus('mandatory')
breakpoint = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakpoint.setStatus('mandatory')
interruptOverflow = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interruptOverflow.setStatus('mandatory')
arrayBoundsCheck = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayBoundsCheck.setStatus('mandatory')
invalidOpcode = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invalidOpcode.setStatus('mandatory')
escapeOpcode = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: escapeOpcode.setStatus('mandatory')
coprocessorFault = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 10, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coprocessorFault.setStatus('mandatory')
threadTable = MibTable((1, 3, 6, 1, 4, 1, 426, 1, 10, 18), )
if mibBuilder.loadTexts: threadTable.setStatus('mandatory')
threadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 426, 1, 10, 18, 1), ).setIndexNames((0, "COMPEX-IN3000", "tid"))
if mibBuilder.loadTexts: threadEntry.setStatus('mandatory')
tid = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 10, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tid.setStatus('mandatory')
name = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 10, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: name.setStatus('mandatory')
priority = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 10, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priority.setStatus('mandatory')
muxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 10, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxCount.setStatus('mandatory')
status = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 10, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("running", 1), ("killed", 2), ("queued", 3), ("blocked", 4), ("dead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: status.setStatus('mandatory')
stackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 426, 1, 10, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackSize.setStatus('mandatory')
in3000StatsArp = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 11))
arpInReqs = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInReqs.setStatus('mandatory')
arpInRpls = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInRpls.setStatus('mandatory')
arpOutReqs = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpOutReqs.setStatus('mandatory')
arpOutRpls = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpOutRpls.setStatus('mandatory')
arpGetReqs = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpGetReqs.setStatus('mandatory')
arpPutReqs = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpPutReqs.setStatus('mandatory')
arpDeadEntries = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpDeadEntries.setStatus('mandatory')
arpCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheSize.setStatus('mandatory')
arpEntryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 60480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpEntryTimeout.setStatus('mandatory')
arpNumRetries = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpNumRetries.setStatus('mandatory')
arpReplyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 11, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpReplyTimeout.setStatus('mandatory')
in3000StatsIp = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 12))
inHdrTooSmall = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inHdrTooSmall.setStatus('mandatory')
inHdrBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inHdrBadVersion.setStatus('mandatory')
inHdrBadCheckSum = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inHdrBadCheckSum.setStatus('mandatory')
inHdrBadOption = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inHdrBadOption.setStatus('mandatory')
inDataNotAllocated = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inDataNotAllocated.setStatus('mandatory')
inNoPacketBuffers = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inNoPacketBuffers.setStatus('mandatory')
outNoPacketBuffers = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 12, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outNoPacketBuffers.setStatus('mandatory')
outBadTransmits = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 12, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outBadTransmits.setStatus('mandatory')
outAddrNotResolved = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 12, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outAddrNotResolved.setStatus('mandatory')
reasmTimeout = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 12, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reasmTimeout.setStatus('mandatory')
in3000StatsHmi = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 13))
hmiReqs = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiReqs.setStatus('mandatory')
hmiResp = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiResp.setStatus('mandatory')
hmiError = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiError.setStatus('mandatory')
hmiAckOk = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiAckOk.setStatus('mandatory')
hmiAckBad = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiAckBad.setStatus('mandatory')
hmiTrap = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiTrap.setStatus('mandatory')
hmiIdReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiIdReq.setStatus('mandatory')
hmiGetInfoReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiGetInfoReq.setStatus('mandatory')
hmiSelftestReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiSelftestReq.setStatus('mandatory')
hmiPortEnableReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiPortEnableReq.setStatus('mandatory')
hmiPortDisableReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiPortDisableReq.setStatus('mandatory')
hmiStatusReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiStatusReq.setStatus('mandatory')
hmiRepeaterReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiRepeaterReq.setStatus('mandatory')
hmiPortObjectsReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiPortObjectsReq.setStatus('mandatory')
hmiPortChangesReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiPortChangesReq.setStatus('mandatory')
hmiSelfTestStatReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiSelfTestStatReq.setStatus('mandatory')
hmiDebugOnReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiDebugOnReq.setStatus('mandatory')
hmiDebugOffReq = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiDebugOffReq.setStatus('mandatory')
hmiGetInfoResp = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiGetInfoResp.setStatus('mandatory')
hmiSelfTestResp = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiSelfTestResp.setStatus('mandatory')
hmiStatusResp = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiStatusResp.setStatus('mandatory')
hmiRepeaterResp = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiRepeaterResp.setStatus('mandatory')
hmiPortObjectsResp = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiPortObjectsResp.setStatus('mandatory')
hmiPortChangesResp = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiPortChangesResp.setStatus('mandatory')
hmiSelfTestStatResp = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 13, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmiSelfTestStatResp.setStatus('mandatory')
in3000StatsUart = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 14))
uartInOctets = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartInOctets.setStatus('mandatory')
uartOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartOutOctets.setStatus('mandatory')
uartInDelivers = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartInDelivers.setStatus('mandatory')
uartOutDelivers = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartOutDelivers.setStatus('mandatory')
uartBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200))).clone(namedValues=NamedValues(("br1200", 1200), ("br2400", 2400), ("br4800", 4800), ("br9600", 9600), ("br19200", 19200), ("br38400", 38400), ("br57600", 57600), ("br115200", 115200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartBaudRate.setStatus('mandatory')
uartDataBits = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8))).clone(namedValues=NamedValues(("five", 5), ("six", 6), ("seven", 7), ("eight", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uartDataBits.setStatus('mandatory')
uartStopBits = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uartStopBits.setStatus('mandatory')
uartParity = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uartParity.setStatus('mandatory')
uartHandshaking = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("xonXoff", 2), ("rtsCts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uartHandshaking.setStatus('mandatory')
uartOverrunErrors = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartOverrunErrors.setStatus('mandatory')
uartParityErrors = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartParityErrors.setStatus('mandatory')
uartFramingErrors = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartFramingErrors.setStatus('mandatory')
uartBreakIndicators = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 14, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartBreakIndicators.setStatus('mandatory')
in3000SelfTests = MibIdentifier((1, 3, 6, 1, 4, 1, 426, 1, 15))
dallasTest = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testPass", 1), ("testFailed", 2), ("runTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dallasTest.setStatus('mandatory')
flashTest = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testPass", 1), ("testFailed", 2), ("runTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flashTest.setStatus('mandatory')
uartTest = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testPass", 1), ("testFailed", 2), ("runTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uartTest.setStatus('mandatory')
nicTest = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testPass", 1), ("testFailed", 2), ("runTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTest.setStatus('mandatory')
netioTest = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("testPass", 1), ("testFailed", 2), ("testHub1", 3), ("testHub2", 4), ("testHub3", 5), ("testHub4", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netioTest.setStatus('mandatory')
heapTest = MibScalar((1, 3, 6, 1, 4, 1, 426, 1, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testPass", 1), ("testFailed", 2), ("runTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heapTest.setStatus('mandatory')
partState = NotificationType((1, 3, 6, 1, 4, 1, 426, 1) + (0,1)).setObjects(("COMPEX-IN3000", "psmGroupIndex"), ("COMPEX-IN3000", "psmPortIndex"))
notPartState = NotificationType((1, 3, 6, 1, 4, 1, 426, 1) + (0,2)).setObjects(("COMPEX-IN3000", "psmGroupIndex"), ("COMPEX-IN3000", "psmPortIndex"))
mibBuilder.exportSymbols("COMPEX-IN3000", gsmJabbers=gsmJabbers, trapDest=trapDest, arpOutReqs=arpOutReqs, hmiRepeaterReq=hmiRepeaterReq, netioTest=netioTest, interruptOverflow=interruptOverflow, inHdrTooSmall=inHdrTooSmall, hmiGetInfoReq=hmiGetInfoReq, gspMulticastErr=gspMulticastErr, mallocCalls=mallocCalls, rp3000=rp3000, psmLateCollisions=psmLateCollisions, arpDeadEntries=arpDeadEntries, psmLinkState=psmLinkState, portOctetsEntry=portOctetsEntry, gspHostPhysicalOk=gspHostPhysicalOk, uartStopBits=uartStopBits, groupMiscEntry=groupMiscEntry, pspPortIndex=pspPortIndex, gsmGroupIndex=gsmGroupIndex, rptrInvalidDesgntr=rptrInvalidDesgntr, gsmCrc=gsmCrc, usedHeap=usedHeap, flashTest=flashTest, psobkt128to255Err=psobkt128to255Err, gspPacketsRxErr=gspPacketsRxErr, in3000=in3000, psmLinkPulses=psmLinkPulses, coprocessorFault=coprocessorFault, hmiTrap=hmiTrap, hmiStatusResp=hmiStatusResp, psmGroupIndex=psmGroupIndex, threadKill=threadKill, arrayBoundsCheck=arrayBoundsCheck, gsmPartitions=gsmPartitions, in3000StatsPort=in3000StatsPort, psoOctetsRxOk=psoOctetsRxOk, psmName=psmName, threadCreateOk=threadCreateOk, psmCrc=psmCrc, rptrFifoColls=rptrFifoColls, freeHeap=freeHeap, tid=tid, stackSize=stackSize, in3000StatsGroup=in3000StatsGroup, gsobkt64Ok=gsobkt64Ok, arpInReqs=arpInReqs, gsoRuntPacketsOk=gsoRuntPacketsOk, gsobkt256to511Err=gsobkt256to511Err, communityEntry=communityEntry, in3000StatsUart=in3000StatsUart, muxCount=muxCount, hmiSelfTestResp=hmiSelfTestResp, rptrOverflows=rptrOverflows, hmiPortObjectsResp=hmiPortObjectsResp, in3000SelfTests=in3000SelfTests, pspMulticastOk=pspMulticastOk, compexAddress=compexAddress, inHdrBadOption=inHdrBadOption, hmiDebugOffReq=hmiDebugOffReq, name=name, uartInDelivers=uartInDelivers, gsoPacketsTooBigErr=gsoPacketsTooBigErr, gspPhysicalOk=gspPhysicalOk, psobkt64Err=psobkt64Err, psobkt128to255Ok=psobkt128to255Ok, gsoOctetsRxOk=gsoOctetsRxOk, gsmName=gsmName, gsmNumPorts=gsmNumPorts, threadTable=threadTable, inNoPacketBuffers=inNoPacketBuffers, hmiSelfTestStatResp=hmiSelfTestStatResp, in3000StatsMemory=in3000StatsMemory, heapStatus=heapStatus, uartFramingErrors=uartFramingErrors, in3000StatsRptr=in3000StatsRptr, noMemoryAvailable=noMemoryAvailable, arpGetReqs=arpGetReqs, uartTest=uartTest, bufferPoolEmpty=bufferPoolEmpty, pspPacketsRxErr=pspPacketsRxErr, psobkt256to511Err=psobkt256to511Err, pspPhysicalErr=pspPhysicalErr, callocCalls=callocCalls, gsmFifoOverrun=gsmFifoOverrun, arpCacheSize=arpCacheSize, compexImage=compexImage, groupPacketEntry=groupPacketEntry, cpName=cpName, psoRuntPacketsErr=psoRuntPacketsErr, hmiResp=hmiResp, gsoHostOctetsRxOk=gsoHostOctetsRxOk, hmiError=hmiError, gspPhysicalErr=gspPhysicalErr, rptrNoFreeBuffers=rptrNoFreeBuffers, portPacketTable=portPacketTable, psoGroupIndex=psoGroupIndex, singleStep=singleStep, psobkt512to1023Ok=psobkt512to1023Ok, psoRuntPacketsOk=psoRuntPacketsOk, threadTableFull=threadTableFull, status=status, hmiRepeaterResp=hmiRepeaterResp, psoPacketsTooBigOk=psoPacketsTooBigOk, partState=partState, compex=compex, portOctetsTable=portOctetsTable, psmType=psmType, hmiSelftestReq=hmiSelftestReq, gsobkt1024to1518Ok=gsobkt1024to1518Ok, groupPacketTable=groupPacketTable, cpId=cpId, rptrNoStatsDsgntr=rptrNoStatsDsgntr, psoOctetsRxErr=psoOctetsRxErr, pspGroupIndex=pspGroupIndex, bogusInterrupts=bogusInterrupts, compexPhone=compexPhone, gspPacketsRxOk=gspPacketsRxOk, threadEntry=threadEntry, hmiDebugOnReq=hmiDebugOnReq, pspPacketsRxOk=pspPacketsRxOk, invalidOpcode=invalidOpcode, freeCalls=freeCalls, productName=productName, psobkt512to1023Err=psobkt512to1023Err, mnodeCoalesces=mnodeCoalesces, pspPhysicalOk=pspPhysicalOk, productInfo=productInfo, gsoGroupIndex=gsoGroupIndex, uartOutDelivers=uartOutDelivers, hmiPortEnableReq=hmiPortEnableReq, trapEntry=trapEntry, psoHostOctetsRxOk=psoHostOctetsRxOk, rptrTxTimeouts=rptrTxTimeouts, inHdrBadCheckSum=inHdrBadCheckSum, hmiSelfTestStatReq=hmiSelfTestStatReq, gsmCollisions=gsmCollisions, gsmType=gsmType, rptrNICTxOutWinCls=rptrNICTxOutWinCls, in3000StatsHmi=in3000StatsHmi, gspBroadcastErr=gspBroadcastErr, divideError=divideError, arpInRpls=arpInRpls, in3000StatsArp=in3000StatsArp, rptrShortWoPort=rptrShortWoPort, portMiscTable=portMiscTable, hmiGetInfoResp=hmiGetInfoResp, in3000StatsIcmp=in3000StatsIcmp, uartDataBits=uartDataBits, threadMaximum=threadMaximum, psobkt1024to1518Err=psobkt1024to1518Err, hmiAckBad=hmiAckBad, nicTest=nicTest, heapTest=heapTest, escapeOpcode=escapeOpcode, rptrPortIDwoPacket=rptrPortIDwoPacket, psobkt256to511Ok=psobkt256to511Ok, gsoHostOctetsRxErr=gsoHostOctetsRxErr, uartInOctets=uartInOctets, devTeamEntry=devTeamEntry, communityString=communityString, pspHostPhysicalOk=pspHostPhysicalOk, psmCrcFae=psmCrcFae, reasmTimeout=reasmTimeout, uartOverrunErrors=uartOverrunErrors, gsobkt1024to1518Err=gsobkt1024to1518Err, inHdrBadVersion=inHdrBadVersion, psoPacketsTooBigErr=psoPacketsTooBigErr, psmJabbers=psmJabbers, gsobkt256to511Ok=gsobkt256to511Ok, gsobkt65to127Ok=gsobkt65to127Ok, threadCreateReq=threadCreateReq, gsmCrcFae=gsmCrcFae, rptrNICCarrierLost=rptrNICCarrierLost, gsobkt512to1023Err=gsobkt512to1023Err, rptrNICTxCollisions=rptrNICTxCollisions, psoPortIndex=psoPortIndex, arpNumRetries=arpNumRetries, gsobkt128to255Ok=gsobkt128to255Ok, pspBroadcastOk=pspBroadcastOk, gsoRuntPacketsErr=gsoRuntPacketsErr, gsmShortFragments=gsmShortFragments, gsobkt64Err=gsobkt64Err, hmiPortObjectsReq=hmiPortObjectsReq, compexMyAccess=compexMyAccess, coalesceMemCalls=coalesceMemCalls, gsoOctetsRxErr=gsoOctetsRxErr, gsobkt128to255Err=gsobkt128to255Err, uartParityErrors=uartParityErrors, groupMiscTable=groupMiscTable, hmiPortChangesReq=hmiPortChangesReq, communityInfo=communityInfo, gsobkt65to127Err=gsobkt65to127Err, communityCapability=communityCapability, threadCreateFail=threadCreateFail, portPacketEntry=portPacketEntry, psmShortFragments=psmShortFragments, gsmDeferring=gsmDeferring, psobkt64Ok=psobkt64Ok, trapTable=trapTable, trapStatus=trapStatus, uartParity=uartParity, arpEntryTimeout=arpEntryTimeout, devTeamTable=devTeamTable, gspMulticastOk=gspMulticastOk, psoHostOctetsRxErr=psoHostOctetsRxErr, inUnknownTypes=inUnknownTypes, hubTypes=hubTypes, psmPortIndex=psmPortIndex, reallocCalls=reallocCalls, releasedDate=releasedDate, rptrInNoRxBuf=rptrInNoRxBuf, groupOctetsEntry=groupOctetsEntry, communityTable=communityTable, gspHostPhysicalErr=gspHostPhysicalErr, rptrNICTxCDHrtbts=rptrNICTxCDHrtbts, outAddrNotResolved=outAddrNotResolved, groupOctetsTable=groupOctetsTable, portMiscEntry=portMiscEntry, outNoPacketBuffers=outNoPacketBuffers, dataBufferTooSmall=dataBufferTooSmall, psmPartitions=psmPartitions, psobkt1024to1518Ok=psobkt1024to1518Ok, gsobkt512to1023Ok=gsobkt512to1023Ok, dallasTest=dallasTest, in3000StatsIp=in3000StatsIp, gsmLateCollisions=gsmLateCollisions, communityInstance=communityInstance, gsmNumLinkUp=gsmNumLinkUp, gsmNumLinkPulses=gsmNumLinkPulses, hmiIdReq=hmiIdReq, initHeapSize=initHeapSize, psmFifoOverrun=psmFifoOverrun, hmiReqs=hmiReqs, hmiAckOk=hmiAckOk, hmiStatusReq=hmiStatusReq, gsoPacketsTooBigOk=gsoPacketsTooBigOk, psmDeferring=psmDeferring, pspHostPhysicalErr=pspHostPhysicalErr, inDataNotAllocated=inDataNotAllocated, in3000StatsOS=in3000StatsOS, psmCollisions=psmCollisions, gspBroadcastOk=gspBroadcastOk, hmiPortChangesResp=hmiPortChangesResp, tp3000=tp3000, coalesceThreshold=coalesceThreshold, gspGroupIndex=gspGroupIndex, trapInfo=trapInfo, rptrNICTxFifoUruns=rptrNICTxFifoUruns, breakpoint=breakpoint, uartHandshaking=uartHandshaking, pspBroadcastErr=pspBroadcastErr, uartBreakIndicators=uartBreakIndicators, arpPutReqs=arpPutReqs)
mibBuilder.exportSymbols("COMPEX-IN3000", notPartState=notPartState, productVersion=productVersion, arpReplyTimeout=arpReplyTimeout, outBadTransmits=outBadTransmits, uartBaudRate=uartBaudRate, uartOutOctets=uartOutOctets, defaultTimeSlice=defaultTimeSlice, pspMulticastErr=pspMulticastErr, arpOutRpls=arpOutRpls, psobkt65to127Err=psobkt65to127Err, defaultStackSize=defaultStackSize, priority=priority, hmiPortDisableReq=hmiPortDisableReq, psobkt65to127Ok=psobkt65to127Ok)
