#
# PySNMP MIB module GBNDeviceOEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GBNDeviceOEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:04:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
gbnDevice, = mibBuilder.importSymbols("GREENTECH-MASTER-MIB", "gbnDevice")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
MibIdentifier, Integer32, Unsigned32, NotificationType, Counter64, IpAddress, Bits, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "Unsigned32", "NotificationType", "Counter64", "IpAddress", "Bits", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "TimeTicks", "Counter32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
bcm5600 = ModuleIdentity((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3))
bcm5600.setRevisions(('1901-05-03 00:00',))
if mibBuilder.loadTexts: bcm5600.setLastUpdated('0105030000Z')
if mibBuilder.loadTexts: bcm5600.setOrganization('Greentech')
oemArchIface = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1))
oemChip = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 2))
oemProdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 3))
oemProdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 3, 1))
oemProdCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 3, 2))
oemArchIfaceTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1), )
if mibBuilder.loadTexts: oemArchIfaceTable.setStatus('current')
oemArchIfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1), ).setIndexNames((0, "GBNDeviceOEM-MIB", "oemArchIfaceUnit"), (0, "GBNDeviceOEM-MIB", "oemArchIfacePort"))
if mibBuilder.loadTexts: oemArchIfaceEntry.setStatus('current')
oemArchIfaceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oemArchIfaceUnit.setStatus('current')
oemArchIfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oemArchIfacePort.setStatus('current')
oemArchIfaceLLWHPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8193, 8296))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oemArchIfaceLLWHPort.setStatus('current')
oemArchIfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oemArchIfaceIfIndex.setStatus('current')
oemArchIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oemArchIfaceName.setStatus('current')
oemArchIfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oemArchIfaceEnable.setStatus('current')
oemArchIfaceSTPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oemArchIfaceSTPEnable.setStatus('current')
oemArchIfaceLink = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oemArchIfaceLink.setStatus('current')
oemArchIfaceDuplexSpeedSet = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("autonegotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-1000", 6), ("full-1000", 7), ("illegal", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oemArchIfaceDuplexSpeedSet.setStatus('current')
oemArchIfaceDuplexSpeedGet = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99))).clone(namedValues=NamedValues(("unknown", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-1000", 6), ("full-1000", 7), ("auto_10", 8), ("auto_100", 9), ("auto_1000", 10), ("illegal", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oemArchIfaceDuplexSpeedGet.setStatus('current')
oemArchIfacePortLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalEnable", 1), ("externalEnable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oemArchIfacePortLoop.setStatus('current')
oemArchIfaceFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oemArchIfaceFlowControl.setStatus('current')
oemArchIfaceTxVlanTagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oemArchIfaceTxVlanTagPkts.setStatus('current')
oemArchIfaceTxL3Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oemArchIfaceTxL3Pkts.setStatus('current')
oemArchIfaceTxL3AbortedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oemArchIfaceTxL3AbortedPkts.setStatus('current')
oemArchIfaceRxIpInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oemArchIfaceRxIpInHdrErrors.setStatus('current')
oemArchIfaceL2Tunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oemArchIfaceL2Tunneling.setStatus('current')
oemChipStub = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("chip-value2", 2), ("chip-value3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oemChipStub.setStatus('current')
oemArchIfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 3, 1, 1)).setObjects(("GBNDeviceOEM-MIB", "oemArchIfaceLLWHPort"), ("GBNDeviceOEM-MIB", "oemArchIfaceIfIndex"), ("GBNDeviceOEM-MIB", "oemArchIfaceName"), ("GBNDeviceOEM-MIB", "oemArchIfaceEnable"), ("GBNDeviceOEM-MIB", "oemArchIfaceSTPEnable"), ("GBNDeviceOEM-MIB", "oemArchIfaceLink"), ("GBNDeviceOEM-MIB", "oemArchIfaceDuplexSpeedSet"), ("GBNDeviceOEM-MIB", "oemArchIfaceDuplexSpeedGet"), ("GBNDeviceOEM-MIB", "oemArchIfacePortLoop"), ("GBNDeviceOEM-MIB", "oemArchIfaceFlowControl"), ("GBNDeviceOEM-MIB", "oemArchIfaceTxVlanTagPkts"), ("GBNDeviceOEM-MIB", "oemArchIfaceTxL3Pkts"), ("GBNDeviceOEM-MIB", "oemArchIfaceTxL3AbortedPkts"), ("GBNDeviceOEM-MIB", "oemArchIfaceRxIpInHdrErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oemArchIfaceGroup = oemArchIfaceGroup.setStatus('current')
oemChipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 3, 1, 2)).setObjects(("GBNDeviceOEM-MIB", "oemChipStub"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oemChipGroup = oemChipGroup.setStatus('current')
oemProdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 3, 2, 1)).setObjects(("GBNDeviceOEM-MIB", "oemArchIfaceGroup"), ("GBNDeviceOEM-MIB", "oemChipGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oemProdCompliance = oemProdCompliance.setStatus('current')
oemArchIfaceTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 2))
macAddrLimitOn = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 2, 1)).setObjects(("GBNDeviceOEM-MIB", "ifIndex"))
if mibBuilder.loadTexts: macAddrLimitOn.setStatus('current')
macAddrLimitOff = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 2, 2)).setObjects(("GBNDeviceOEM-MIB", "ifIndex"))
if mibBuilder.loadTexts: macAddrLimitOff.setStatus('current')
stormCtrlPortShutdown = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 2, 3)).setObjects(("GBNDeviceOEM-MIB", "ifIndex"))
if mibBuilder.loadTexts: stormCtrlPortShutdown.setStatus('current')
stormCtrlPortFree = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 3, 1, 2, 4)).setObjects(("GBNDeviceOEM-MIB", "ifIndex"))
if mibBuilder.loadTexts: stormCtrlPortFree.setStatus('current')
mibBuilder.exportSymbols("GBNDeviceOEM-MIB", oemArchIfaceUnit=oemArchIfaceUnit, oemChipStub=oemChipStub, macAddrLimitOff=macAddrLimitOff, oemProdCompliances=oemProdCompliances, oemArchIfacePort=oemArchIfacePort, oemArchIfaceDuplexSpeedSet=oemArchIfaceDuplexSpeedSet, stormCtrlPortShutdown=stormCtrlPortShutdown, oemProdConformance=oemProdConformance, oemArchIfaceGroup=oemArchIfaceGroup, oemProdGroups=oemProdGroups, oemArchIfaceTrap=oemArchIfaceTrap, oemArchIfaceRxIpInHdrErrors=oemArchIfaceRxIpInHdrErrors, bcm5600=bcm5600, oemArchIfaceLLWHPort=oemArchIfaceLLWHPort, oemProdCompliance=oemProdCompliance, oemArchIfaceTxL3AbortedPkts=oemArchIfaceTxL3AbortedPkts, stormCtrlPortFree=stormCtrlPortFree, oemArchIfaceTxVlanTagPkts=oemArchIfaceTxVlanTagPkts, oemChip=oemChip, oemChipGroup=oemChipGroup, oemArchIfaceTable=oemArchIfaceTable, oemArchIfaceEnable=oemArchIfaceEnable, oemArchIfaceLink=oemArchIfaceLink, oemArchIfaceEntry=oemArchIfaceEntry, oemArchIface=oemArchIface, oemArchIfaceSTPEnable=oemArchIfaceSTPEnable, oemArchIfaceFlowControl=oemArchIfaceFlowControl, oemArchIfaceIfIndex=oemArchIfaceIfIndex, oemArchIfaceL2Tunneling=oemArchIfaceL2Tunneling, PYSNMP_MODULE_ID=bcm5600, macAddrLimitOn=macAddrLimitOn, oemArchIfaceDuplexSpeedGet=oemArchIfaceDuplexSpeedGet, oemArchIfacePortLoop=oemArchIfacePortLoop, oemArchIfaceTxL3Pkts=oemArchIfaceTxL3Pkts, oemArchIfaceName=oemArchIfaceName)
