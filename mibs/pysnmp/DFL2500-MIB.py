#
# PySNMP MIB module DFL2500-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DFL2500-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Counter32, Bits, iso, IpAddress, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, Gauge32, NotificationType, enterprises, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Bits", "iso", "IpAddress", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "Gauge32", "NotificationType", "enterprises", "Unsigned32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dfl2500_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 1, 2)).setLabel("dfl2500-MIB")
dfl2500_MIB.setRevisions(('2010-09-02 11:39', '2010-03-30 09:00', '2009-11-10 09:16', '2008-11-18 16:05', '2008-10-14 12:27', '2007-10-31 00:00',))
if mibBuilder.loadTexts: dfl2500_MIB.setLastUpdated('201009021139Z')
if mibBuilder.loadTexts: dfl2500_MIB.setOrganization('D-Link Corporation')
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
netdefendMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20))
ipsFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1))
dfl2500 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5))
dfl2500OS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1))
dfl2500OSStats = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2))
dfl2500reg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2))
dfl2500MibModules = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 1))
dfl2500MibConfs = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 2))
dfl2500MibObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3))
dfl2500System = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1))
dfl2500SysCpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysCpuLoad.setStatus('current')
dfl2500SysForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysForwardedBits.setStatus('current')
dfl2500SysForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysForwardedPackets.setStatus('current')
dfl2500SysBuffUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysBuffUse.setStatus('current')
dfl2500SysConns = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysConns.setStatus('current')
dfl2500SysPerStateCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 6))
dfl2500SysPscTcpSyn = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysPscTcpSyn.setStatus('current')
dfl2500SysPscTcpOpen = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysPscTcpOpen.setStatus('current')
dfl2500SysPscTcpFin = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysPscTcpFin.setStatus('current')
dfl2500SysPscUdp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysPscUdp.setStatus('current')
dfl2500SysPscIcmp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysPscIcmp.setStatus('current')
dfl2500SysPscOther = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysPscOther.setStatus('current')
dfl2500IfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7), )
if mibBuilder.loadTexts: dfl2500IfStatsTable.setStatus('current')
dfl2500IfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500IfStatsIndex"))
if mibBuilder.loadTexts: dfl2500IfStatsEntry.setStatus('current')
dfl2500IfStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500IfStatsIndex.setStatus('current')
dfl2500IfName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfName.setStatus('current')
dfl2500IfFragsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfFragsIn.setStatus('current')
dfl2500IfFragReassOk = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfFragReassOk.setStatus('current')
dfl2500IfFragReassFail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfFragReassFail.setStatus('current')
dfl2500IfPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfPktsInCnt.setStatus('current')
dfl2500IfPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfPktsOutCnt.setStatus('current')
dfl2500IfBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfBitsInCnt.setStatus('current')
dfl2500IfBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfBitsOutCnt.setStatus('current')
dfl2500IfPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfPktsTotCnt.setStatus('current')
dfl2500IfBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfBitsTotCnt.setStatus('current')
dfl2500IfHCPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfHCPktsInCnt.setStatus('current')
dfl2500IfHCPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfHCPktsOutCnt.setStatus('current')
dfl2500IfHCBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfHCBitsInCnt.setStatus('current')
dfl2500IfHCBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfHCBitsOutCnt.setStatus('current')
dfl2500IfHCPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfHCPktsTotCnt.setStatus('current')
dfl2500IfHCBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfHCBitsTotCnt.setStatus('current')
dfl2500IfRxRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 8), )
if mibBuilder.loadTexts: dfl2500IfRxRingTable.setStatus('current')
dfl2500IfRxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 8, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500IfRxRingIndex"))
if mibBuilder.loadTexts: dfl2500IfRxRingEntry.setStatus('current')
dfl2500IfRxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500IfRxRingIndex.setStatus('current')
dfl2500IfRxRingFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfRxRingFifoErrors.setStatus('current')
dfl2500IfRxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfRxDespools.setStatus('current')
dfl2500IfRxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfRxAvgUse.setStatus('current')
dfl2500IfRxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfRxRingSaturation.setStatus('current')
dfl2500RxRingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500RxRingFlooded.setStatus('current')
dfl2500IfTxRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 9), )
if mibBuilder.loadTexts: dfl2500IfTxRingTable.setStatus('current')
dfl2500IfTxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 9, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500IfTxRingIndex"))
if mibBuilder.loadTexts: dfl2500IfTxRingEntry.setStatus('current')
dfl2500IfTxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500IfTxRingIndex.setStatus('current')
dfl2500IfTxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfTxDespools.setStatus('current')
dfl2500IfTxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfTxAvgUse.setStatus('current')
dfl2500IfTxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfTxRingSaturation.setStatus('current')
dfl2500RxTingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500RxTingFlooded.setStatus('current')
dfl2500IfVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 10), )
if mibBuilder.loadTexts: dfl2500IfVlanStatsTable.setStatus('current')
dfl2500IfVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 10, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500IfVlanIndex"))
if mibBuilder.loadTexts: dfl2500IfVlanStatsEntry.setStatus('current')
dfl2500IfVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500IfVlanIndex.setStatus('current')
dfl2500IfVlanUntaggedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfVlanUntaggedInPkts.setStatus('current')
dfl2500IfVlanUntaggedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfVlanUntaggedOutPkts.setStatus('current')
dfl2500IfVlanUntaggedTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfVlanUntaggedTotPkts.setStatus('current')
dfl2500IfVlanUntaggedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfVlanUntaggedInOctets.setStatus('current')
dfl2500IfVlanUntaggedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfVlanUntaggedOutOctets.setStatus('current')
dfl2500IfVlanUntaggedTotOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IfVlanUntaggedTotOctets.setStatus('current')
dfl2500HWSensorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 11), )
if mibBuilder.loadTexts: dfl2500HWSensorTable.setStatus('current')
dfl2500HWSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 11, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500HWSensorIndex"))
if mibBuilder.loadTexts: dfl2500HWSensorEntry.setStatus('current')
dfl2500HWSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500HWSensorIndex.setStatus('current')
dfl2500HWSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HWSensorName.setStatus('current')
dfl2500HWSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HWSensorValue.setStatus('current')
dfl2500HWSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HWSensorUnit.setStatus('current')
dfl2500SysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysMemUsage.setStatus('current')
dfl2500SysTCPUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 13))
dfl2500SysTCPRecvSmall = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 13, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysTCPRecvSmall.setStatus('current')
dfl2500SysTCPRecvLarge = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 13, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysTCPRecvLarge.setStatus('current')
dfl2500SysTCPSendSmall = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 13, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysTCPSendSmall.setStatus('current')
dfl2500SysTCPSendLarge = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 13, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysTCPSendLarge.setStatus('current')
dfl2500SysTimerUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysTimerUsage.setStatus('current')
dfl2500SysConnOPS = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysConnOPS.setStatus('current')
dfl2500SysConnCPS = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysConnCPS.setStatus('current')
dfl2500SysHCForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SysHCForwardedBits.setStatus('current')
dfl2500VPN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2))
dfl2500IPsec = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1))
dfl2500IPsecGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1))
dfl2500IPsecPhaseOneActive = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecPhaseOneActive.setStatus('current')
dfl2500IPsecPhaseOneAggrModeDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecPhaseOneAggrModeDone.setStatus('current')
dfl2500IPsecQuickModeActive = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecQuickModeActive.setStatus('current')
dfl2500IPsecPhaseOneDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecPhaseOneDone.setStatus('current')
dfl2500IPsecPhaseOneFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecPhaseOneFailed.setStatus('current')
dfl2500IPsecPhaseOneRekeyed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecPhaseOneRekeyed.setStatus('current')
dfl2500IPsecQuickModeDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecQuickModeDone.setStatus('current')
dfl2500IPsecQuickModeFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecQuickModeFailed.setStatus('current')
dfl2500IPsecInfoDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecInfoDone.setStatus('current')
dfl2500IPsecInfoFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecInfoFailed.setStatus('current')
dfl2500IPsecInOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecInOctetsComp.setStatus('current')
dfl2500IPsecInOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecInOctetsUncomp.setStatus('current')
dfl2500IPsecOutOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecOutOctetsComp.setStatus('current')
dfl2500IPsecOutOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecOutOctetsUncomp.setStatus('current')
dfl2500IPsecForwardedOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecForwardedOctetsComp.setStatus('current')
dfl2500IPsecForwardedOctetsUcomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecForwardedOctetsUcomp.setStatus('current')
dfl2500IPsecInPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecInPackets.setStatus('current')
dfl2500IPsecOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecOutPackets.setStatus('current')
dfl2500IPsecForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecForwardedPackets.setStatus('current')
dfl2500IPsecActiveTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecActiveTransforms.setStatus('current')
dfl2500IPsecTotalTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecTotalTransforms.setStatus('current')
dfl2500IPsecOutOfTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecOutOfTransforms.setStatus('current')
dfl2500IPsecTotalRekeys = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPsecTotalRekeys.setStatus('current')
dfl2500Rules = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 3))
dfl2500RuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 3, 2), )
if mibBuilder.loadTexts: dfl2500RuleUseTable.setStatus('current')
dfl2500RuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 3, 2, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500RuleIndex"))
if mibBuilder.loadTexts: dfl2500RuleUseEntry.setStatus('current')
dfl2500RuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500RuleIndex.setStatus('current')
dfl2500RuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500RuleName.setStatus('current')
dfl2500RuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500RuleUse.setStatus('current')
dfl2500IPPools = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4))
dfl2500IPPoolsNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPPoolsNumber.setStatus('current')
dfl2500IPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4, 2), )
if mibBuilder.loadTexts: dfl2500IPPoolTable.setStatus('current')
dfl2500IPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4, 2, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500IPPoolIndex"))
if mibBuilder.loadTexts: dfl2500IPPoolEntry.setStatus('current')
dfl2500IPPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500IPPoolIndex.setStatus('current')
dfl2500IPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPPoolName.setStatus('current')
dfl2500IPPoolPrepare = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPPoolPrepare.setStatus('current')
dfl2500IPPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPPoolFree.setStatus('current')
dfl2500IPPoolMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPPoolMisses.setStatus('current')
dfl2500IPPoolClientFails = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPPoolClientFails.setStatus('current')
dfl2500IPPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500IPPoolUsed.setStatus('current')
dfl2500DHCPServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5))
dfl2500DHCPTotalRejected = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPTotalRejected.setStatus('current')
dfl2500DHCPRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 2), )
if mibBuilder.loadTexts: dfl2500DHCPRuleTable.setStatus('current')
dfl2500DHCPRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 2, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500DHCPRuleIndex"))
if mibBuilder.loadTexts: dfl2500DHCPRuleEntry.setStatus('current')
dfl2500DHCPRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500DHCPRuleIndex.setStatus('current')
dfl2500DHCPRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRuleName.setStatus('current')
dfl2500DHCPRuleUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRuleUsage.setStatus('current')
dfl2500DHCPRuleUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRuleUsagePercent.setStatus('current')
dfl2500DHCPActiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPActiveClients.setStatus('current')
dfl2500DHCPActiveClientsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPActiveClientsPercent.setStatus('current')
dfl2500DHCPRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRejectedRequests.setStatus('current')
dfl2500DHCPTotalLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 5, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPTotalLeases.setStatus('current')
dfl2500UserAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6))
dfl2500UserAuthHTTPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500UserAuthHTTPUsers.setStatus('current')
dfl2500UserAuthXAUTHUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500UserAuthXAUTHUsers.setStatus('current')
dfl2500UserAuthHTTPSUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500UserAuthHTTPSUsers.setStatus('current')
dfl2500UserAuthPPPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500UserAuthPPPUsers.setStatus('current')
dfl2500UserAuthEAPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500UserAuthEAPUsers.setStatus('current')
dfl2500UserAuthRuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6, 6), )
if mibBuilder.loadTexts: dfl2500UserAuthRuleUseTable.setStatus('current')
dfl2500UserAuthRuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6, 6, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500UserAuthRuleIndex"))
if mibBuilder.loadTexts: dfl2500UserAuthRuleUseEntry.setStatus('current')
dfl2500UserAuthRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500UserAuthRuleIndex.setStatus('current')
dfl2500UserAuthRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500UserAuthRuleName.setStatus('current')
dfl2500UserAuthRuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 6, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500UserAuthRuleUse.setStatus('current')
dfl2500LinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7))
dfl2500LinkMonGrp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500LinkMonGrp.setStatus('current')
dfl2500LinkMonGrpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 2), )
if mibBuilder.loadTexts: dfl2500LinkMonGrpTable.setStatus('current')
dfl2500LinkMonGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 2, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500LinkMonGrpIndex"))
if mibBuilder.loadTexts: dfl2500LinkMonGrpEntry.setStatus('current')
dfl2500LinkMonGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500LinkMonGrpIndex.setStatus('current')
dfl2500LinkMonGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500LinkMonGrpName.setStatus('current')
dfl2500LinkMonGrpHostsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500LinkMonGrpHostsUp.setStatus('current')
dfl2500LinkMonHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 3), )
if mibBuilder.loadTexts: dfl2500LinkMonHostTable.setStatus('current')
dfl2500LinkMonHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 3, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500LinkMonGrpIndex"), (0, "DFL2500-MIB", "dfl2500LinkMonHostIndex"))
if mibBuilder.loadTexts: dfl2500LinkMonHostEntry.setStatus('current')
dfl2500LinkMonHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500LinkMonHostIndex.setStatus('current')
dfl2500LinkMonHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500LinkMonHostId.setStatus('current')
dfl2500LinkMonHostShortTermLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500LinkMonHostShortTermLoss.setStatus('current')
dfl2500LinkMonHostPacketsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500LinkMonHostPacketsLost.setStatus('current')
dfl2500Pipes = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8))
dfl2500PipeUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeUsers.setStatus('current')
dfl2500PipeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2), )
if mibBuilder.loadTexts: dfl2500PipeTable.setStatus('current')
dfl2500PipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500PipeIndex"))
if mibBuilder.loadTexts: dfl2500PipeEntry.setStatus('current')
dfl2500PipeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500PipeIndex.setStatus('current')
dfl2500PipeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeName.setStatus('current')
dfl2500PipeMinPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeMinPrec.setStatus('current')
dfl2500PipeMaxPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeMaxPrec.setStatus('current')
dfl2500PipeDefPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeDefPrec.setStatus('current')
dfl2500PipeNumPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeNumPrec.setStatus('current')
dfl2500PipeNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeNumUsers.setStatus('current')
dfl2500PipeCurrentBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeCurrentBps.setStatus('current')
dfl2500PipeCurrentPps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeCurrentPps.setStatus('current')
dfl2500PipeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeDelayedPackets.setStatus('current')
dfl2500PipeDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipeDropedPackets.setStatus('current')
dfl2500PipePrecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3), )
if mibBuilder.loadTexts: dfl2500PipePrecTable.setStatus('current')
dfl2500PipePrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500PipeIndex"), (0, "DFL2500-MIB", "dfl2500PipePrecIndex"))
if mibBuilder.loadTexts: dfl2500PipePrecEntry.setStatus('current')
dfl2500PipePrecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500PipePrecIndex.setStatus('current')
dfl2500PipePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipePrec.setStatus('current')
dfl2500PipePrecBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipePrecBps.setStatus('current')
dfl2500PipePrecTotalPps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipePrecTotalPps.setStatus('current')
dfl2500PipePrecReservedBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipePrecReservedBps.setStatus('current')
dfl2500PipePrecDynLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipePrecDynLimBps.setStatus('current')
dfl2500PipePrecDynUsrLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipePrecDynUsrLimBps.setStatus('current')
dfl2500PipePrecDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipePrecDelayedPackets.setStatus('current')
dfl2500PipePrecDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 8, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500PipePrecDropedPackets.setStatus('current')
dfl2500ALG = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9))
dfl2500AlgSessions = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500AlgSessions.setStatus('current')
dfl2500AlgConnections = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500AlgConnections.setStatus('current')
dfl2500AlgTCPStreams = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500AlgTCPStreams.setStatus('current')
dfl2500HttpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4))
dfl2500HttpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 1), )
if mibBuilder.loadTexts: dfl2500HttpAlgTable.setStatus('current')
dfl2500HttpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 1, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500HttpAlgIndex"))
if mibBuilder.loadTexts: dfl2500HttpAlgEntry.setStatus('current')
dfl2500HttpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500HttpAlgIndex.setStatus('current')
dfl2500HttpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HttpAlgName.setStatus('current')
dfl2500HttpAlgTotalRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HttpAlgTotalRequested.setStatus('current')
dfl2500HttpAlgTotalAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HttpAlgTotalAllowed.setStatus('current')
dfl2500HttpAlgTotalBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HttpAlgTotalBlocked.setStatus('current')
dfl2500HttpAlgCntFltTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 2), )
if mibBuilder.loadTexts: dfl2500HttpAlgCntFltTable.setStatus('current')
dfl2500HttpAlgCntFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 2, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500HttpAlgIndex"), (0, "DFL2500-MIB", "dfl2500HttpAlgCntFltIndex"))
if mibBuilder.loadTexts: dfl2500HttpAlgCntFltEntry.setStatus('current')
dfl2500HttpAlgCntFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500HttpAlgCntFltIndex.setStatus('current')
dfl2500HttpAlgCntFltName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HttpAlgCntFltName.setStatus('current')
dfl2500HttpAlgCntFltRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HttpAlgCntFltRequests.setStatus('current')
dfl2500HttpAlgCntFltAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HttpAlgCntFltAllowed.setStatus('current')
dfl2500HttpAlgCntFltBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HttpAlgCntFltBlocked.setStatus('current')
dfl2500SmtpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5))
dfl2500SmtpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 1), )
if mibBuilder.loadTexts: dfl2500SmtpAlgTable.setStatus('current')
dfl2500SmtpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 1, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500SmtpAlgIndex"))
if mibBuilder.loadTexts: dfl2500SmtpAlgEntry.setStatus('current')
dfl2500SmtpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500SmtpAlgIndex.setStatus('current')
dfl2500SmtpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SmtpAlgName.setStatus('current')
dfl2500SmtpAlgTotCheckedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SmtpAlgTotCheckedSes.setStatus('current')
dfl2500SmtpAlgTotSpamSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SmtpAlgTotSpamSes.setStatus('current')
dfl2500SmtpAlgTotDroppedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SmtpAlgTotDroppedSes.setStatus('current')
dfl2500SmtpAlgDnsBlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 2), )
if mibBuilder.loadTexts: dfl2500SmtpAlgDnsBlTable.setStatus('current')
dfl2500SmtpAlgDnsBlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 2, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500SmtpAlgIndex"), (0, "DFL2500-MIB", "dfl2500SmtpAlgDnsBlIndex"))
if mibBuilder.loadTexts: dfl2500SmtpAlgDnsBlEntry.setStatus('current')
dfl2500SmtpAlgDnsBlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500SmtpAlgDnsBlIndex.setStatus('current')
dfl2500SmtpAlgDnsBlName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SmtpAlgDnsBlName.setStatus('current')
dfl2500SmtpAlgDnsBlChecked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SmtpAlgDnsBlChecked.setStatus('current')
dfl2500SmtpAlgDnsBlMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SmtpAlgDnsBlMatched.setStatus('current')
dfl2500SmtpAlgDnsBlFailChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 9, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500SmtpAlgDnsBlFailChecks.setStatus('current')
dfl2500DHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11))
dfl2500DHCPRelayCurClients = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRelayCurClients.setStatus('current')
dfl2500DHCPRelayCurTrans = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRelayCurTrans.setStatus('current')
dfl2500DHCPRelayRejected = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRelayRejected.setStatus('current')
dfl2500DHCPRelayRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 4), )
if mibBuilder.loadTexts: dfl2500DHCPRelayRuleTable.setStatus('current')
dfl2500DHCPRelayRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 4, 1), ).setIndexNames((0, "DFL2500-MIB", "dfl2500DHCPRelayRuleIndex"))
if mibBuilder.loadTexts: dfl2500DHCPRelayRuleEntry.setStatus('current')
dfl2500DHCPRelayRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2500DHCPRelayRuleIndex.setStatus('current')
dfl2500DHCPRelayRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRelayRuleName.setStatus('current')
dfl2500DHCPRelayRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRelayRuleHits.setStatus('current')
dfl2500DHCPRelayRuleCurClients = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRelayRuleCurClients.setStatus('current')
dfl2500DHCPRelayRuleRejCliPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRelayRuleRejCliPkts.setStatus('current')
dfl2500DHCPRelayRuleRejSrvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 11, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500DHCPRelayRuleRejSrvPkts.setStatus('current')
dfl2500HA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 12))
dfl2500HASyncSendQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 12, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HASyncSendQueueLength.setStatus('current')
dfl2500HASyncSendQueueUsagePkt = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 12, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HASyncSendQueueUsagePkt.setStatus('current')
dfl2500HASyncSendQueueUsageOct = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 12, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HASyncSendQueueUsageOct.setStatus('current')
dfl2500HASyncSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HASyncSentPackets.setStatus('current')
dfl2500HASyncSendResentPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 1, 2, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2500HASyncSendResentPackets.setStatus('current')
dfl2500StatsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 2, 1))
dfl2500StatsRegGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1))
dfl2500SystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 1)).setObjects(("DFL2500-MIB", "dfl2500SysCpuLoad"), ("DFL2500-MIB", "dfl2500SysForwardedBits"), ("DFL2500-MIB", "dfl2500SysForwardedPackets"), ("DFL2500-MIB", "dfl2500SysBuffUse"), ("DFL2500-MIB", "dfl2500SysConns"), ("DFL2500-MIB", "dfl2500HWSensorName"), ("DFL2500-MIB", "dfl2500HWSensorValue"), ("DFL2500-MIB", "dfl2500HWSensorUnit"), ("DFL2500-MIB", "dfl2500SysMemUsage"), ("DFL2500-MIB", "dfl2500SysTimerUsage"), ("DFL2500-MIB", "dfl2500SysConnOPS"), ("DFL2500-MIB", "dfl2500SysConnCPS"), ("DFL2500-MIB", "dfl2500SysHCForwardedBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500SystemObjectGroup = dfl2500SystemObjectGroup.setStatus('current')
dfl2500IPsecObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 2)).setObjects(("DFL2500-MIB", "dfl2500IPsecPhaseOneActive"), ("DFL2500-MIB", "dfl2500IPsecPhaseOneAggrModeDone"), ("DFL2500-MIB", "dfl2500IPsecQuickModeActive"), ("DFL2500-MIB", "dfl2500IPsecPhaseOneDone"), ("DFL2500-MIB", "dfl2500IPsecPhaseOneFailed"), ("DFL2500-MIB", "dfl2500IPsecPhaseOneRekeyed"), ("DFL2500-MIB", "dfl2500IPsecQuickModeDone"), ("DFL2500-MIB", "dfl2500IPsecQuickModeFailed"), ("DFL2500-MIB", "dfl2500IPsecInfoDone"), ("DFL2500-MIB", "dfl2500IPsecInfoFailed"), ("DFL2500-MIB", "dfl2500IPsecInOctetsComp"), ("DFL2500-MIB", "dfl2500IPsecInOctetsUncomp"), ("DFL2500-MIB", "dfl2500IPsecOutOctetsComp"), ("DFL2500-MIB", "dfl2500IPsecOutOctetsUncomp"), ("DFL2500-MIB", "dfl2500IPsecForwardedOctetsComp"), ("DFL2500-MIB", "dfl2500IPsecForwardedOctetsUcomp"), ("DFL2500-MIB", "dfl2500IPsecInPackets"), ("DFL2500-MIB", "dfl2500IPsecOutPackets"), ("DFL2500-MIB", "dfl2500IPsecForwardedPackets"), ("DFL2500-MIB", "dfl2500IPsecActiveTransforms"), ("DFL2500-MIB", "dfl2500IPsecTotalTransforms"), ("DFL2500-MIB", "dfl2500IPsecOutOfTransforms"), ("DFL2500-MIB", "dfl2500IPsecTotalRekeys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500IPsecObjectGroup = dfl2500IPsecObjectGroup.setStatus('current')
dfl2500StateCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 3)).setObjects(("DFL2500-MIB", "dfl2500SysPscTcpSyn"), ("DFL2500-MIB", "dfl2500SysPscTcpOpen"), ("DFL2500-MIB", "dfl2500SysPscTcpFin"), ("DFL2500-MIB", "dfl2500SysPscUdp"), ("DFL2500-MIB", "dfl2500SysPscIcmp"), ("DFL2500-MIB", "dfl2500SysPscOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500StateCountersGroup = dfl2500StateCountersGroup.setStatus('current')
dfl2500IPPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 4)).setObjects(("DFL2500-MIB", "dfl2500IPPoolsNumber"), ("DFL2500-MIB", "dfl2500IPPoolName"), ("DFL2500-MIB", "dfl2500IPPoolPrepare"), ("DFL2500-MIB", "dfl2500IPPoolFree"), ("DFL2500-MIB", "dfl2500IPPoolMisses"), ("DFL2500-MIB", "dfl2500IPPoolClientFails"), ("DFL2500-MIB", "dfl2500IPPoolUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500IPPoolGroup = dfl2500IPPoolGroup.setStatus('current')
dfl2500DHCPServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 5)).setObjects(("DFL2500-MIB", "dfl2500DHCPTotalRejected"), ("DFL2500-MIB", "dfl2500DHCPRuleName"), ("DFL2500-MIB", "dfl2500DHCPRuleUsage"), ("DFL2500-MIB", "dfl2500DHCPRuleUsagePercent"), ("DFL2500-MIB", "dfl2500DHCPActiveClients"), ("DFL2500-MIB", "dfl2500DHCPActiveClientsPercent"), ("DFL2500-MIB", "dfl2500DHCPRejectedRequests"), ("DFL2500-MIB", "dfl2500DHCPTotalLeases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500DHCPServerGroup = dfl2500DHCPServerGroup.setStatus('current')
dfl2500RuleUseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 6)).setObjects(("DFL2500-MIB", "dfl2500RuleName"), ("DFL2500-MIB", "dfl2500RuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500RuleUseGroup = dfl2500RuleUseGroup.setStatus('current')
dfl2500UserAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 7)).setObjects(("DFL2500-MIB", "dfl2500UserAuthHTTPUsers"), ("DFL2500-MIB", "dfl2500UserAuthXAUTHUsers"), ("DFL2500-MIB", "dfl2500UserAuthHTTPSUsers"), ("DFL2500-MIB", "dfl2500UserAuthPPPUsers"), ("DFL2500-MIB", "dfl2500UserAuthEAPUsers"), ("DFL2500-MIB", "dfl2500UserAuthRuleName"), ("DFL2500-MIB", "dfl2500UserAuthRuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500UserAuthGroup = dfl2500UserAuthGroup.setStatus('current')
dfl2500IfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 8)).setObjects(("DFL2500-MIB", "dfl2500IfName"), ("DFL2500-MIB", "dfl2500IfFragsIn"), ("DFL2500-MIB", "dfl2500IfFragReassOk"), ("DFL2500-MIB", "dfl2500IfFragReassFail"), ("DFL2500-MIB", "dfl2500IfPktsInCnt"), ("DFL2500-MIB", "dfl2500IfPktsOutCnt"), ("DFL2500-MIB", "dfl2500IfBitsInCnt"), ("DFL2500-MIB", "dfl2500IfBitsOutCnt"), ("DFL2500-MIB", "dfl2500IfPktsTotCnt"), ("DFL2500-MIB", "dfl2500IfBitsTotCnt"), ("DFL2500-MIB", "dfl2500IfHCPktsInCnt"), ("DFL2500-MIB", "dfl2500IfHCPktsOutCnt"), ("DFL2500-MIB", "dfl2500IfHCBitsInCnt"), ("DFL2500-MIB", "dfl2500IfHCBitsOutCnt"), ("DFL2500-MIB", "dfl2500IfHCPktsTotCnt"), ("DFL2500-MIB", "dfl2500IfHCBitsTotCnt"), ("DFL2500-MIB", "dfl2500IfRxRingFifoErrors"), ("DFL2500-MIB", "dfl2500IfRxDespools"), ("DFL2500-MIB", "dfl2500IfRxAvgUse"), ("DFL2500-MIB", "dfl2500IfRxRingSaturation"), ("DFL2500-MIB", "dfl2500RxRingFlooded"), ("DFL2500-MIB", "dfl2500IfTxDespools"), ("DFL2500-MIB", "dfl2500IfTxAvgUse"), ("DFL2500-MIB", "dfl2500IfTxRingSaturation"), ("DFL2500-MIB", "dfl2500RxTingFlooded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500IfStatsGroup = dfl2500IfStatsGroup.setStatus('current')
dfl2500LinkMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 9)).setObjects(("DFL2500-MIB", "dfl2500LinkMonGrp"), ("DFL2500-MIB", "dfl2500LinkMonGrpName"), ("DFL2500-MIB", "dfl2500LinkMonGrpHostsUp"), ("DFL2500-MIB", "dfl2500LinkMonHostId"), ("DFL2500-MIB", "dfl2500LinkMonHostShortTermLoss"), ("DFL2500-MIB", "dfl2500LinkMonHostPacketsLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500LinkMonitorGroup = dfl2500LinkMonitorGroup.setStatus('current')
dfl2500PipesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 10)).setObjects(("DFL2500-MIB", "dfl2500PipeUsers"), ("DFL2500-MIB", "dfl2500PipeName"), ("DFL2500-MIB", "dfl2500PipeMinPrec"), ("DFL2500-MIB", "dfl2500PipeMaxPrec"), ("DFL2500-MIB", "dfl2500PipeDefPrec"), ("DFL2500-MIB", "dfl2500PipeNumPrec"), ("DFL2500-MIB", "dfl2500PipeNumUsers"), ("DFL2500-MIB", "dfl2500PipeCurrentBps"), ("DFL2500-MIB", "dfl2500PipeCurrentPps"), ("DFL2500-MIB", "dfl2500PipeDelayedPackets"), ("DFL2500-MIB", "dfl2500PipeDropedPackets"), ("DFL2500-MIB", "dfl2500PipePrec"), ("DFL2500-MIB", "dfl2500PipePrecBps"), ("DFL2500-MIB", "dfl2500PipePrecTotalPps"), ("DFL2500-MIB", "dfl2500PipePrecReservedBps"), ("DFL2500-MIB", "dfl2500PipePrecDynLimBps"), ("DFL2500-MIB", "dfl2500PipePrecDynUsrLimBps"), ("DFL2500-MIB", "dfl2500PipePrecDelayedPackets"), ("DFL2500-MIB", "dfl2500PipePrecDropedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500PipesObjectGroup = dfl2500PipesObjectGroup.setStatus('current')
dfl2500DHCPRelayObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 12)).setObjects(("DFL2500-MIB", "dfl2500DHCPRelayCurClients"), ("DFL2500-MIB", "dfl2500DHCPRelayCurTrans"), ("DFL2500-MIB", "dfl2500DHCPRelayRejected"), ("DFL2500-MIB", "dfl2500DHCPRelayRuleName"), ("DFL2500-MIB", "dfl2500DHCPRelayRuleHits"), ("DFL2500-MIB", "dfl2500DHCPRelayRuleCurClients"), ("DFL2500-MIB", "dfl2500DHCPRelayRuleRejCliPkts"), ("DFL2500-MIB", "dfl2500DHCPRelayRuleRejSrvPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500DHCPRelayObjectGroup = dfl2500DHCPRelayObjectGroup.setStatus('current')
dfl2500AlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 13)).setObjects(("DFL2500-MIB", "dfl2500AlgSessions"), ("DFL2500-MIB", "dfl2500AlgConnections"), ("DFL2500-MIB", "dfl2500AlgTCPStreams"), ("DFL2500-MIB", "dfl2500HttpAlgName"), ("DFL2500-MIB", "dfl2500HttpAlgTotalRequested"), ("DFL2500-MIB", "dfl2500HttpAlgTotalAllowed"), ("DFL2500-MIB", "dfl2500HttpAlgTotalBlocked"), ("DFL2500-MIB", "dfl2500HttpAlgCntFltName"), ("DFL2500-MIB", "dfl2500HttpAlgCntFltRequests"), ("DFL2500-MIB", "dfl2500HttpAlgCntFltAllowed"), ("DFL2500-MIB", "dfl2500HttpAlgCntFltBlocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500AlgGroup = dfl2500AlgGroup.setStatus('current')
dfl2500HAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 14)).setObjects(("DFL2500-MIB", "dfl2500HASyncSendQueueLength"), ("DFL2500-MIB", "dfl2500HASyncSendQueueUsagePkt"), ("DFL2500-MIB", "dfl2500HASyncSendQueueUsageOct"), ("DFL2500-MIB", "dfl2500HASyncSentPackets"), ("DFL2500-MIB", "dfl2500HASyncSendResentPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500HAGroup = dfl2500HAGroup.setStatus('current')
dfl2500IfVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 15)).setObjects(("DFL2500-MIB", "dfl2500IfVlanUntaggedInPkts"), ("DFL2500-MIB", "dfl2500IfVlanUntaggedOutPkts"), ("DFL2500-MIB", "dfl2500IfVlanUntaggedTotPkts"), ("DFL2500-MIB", "dfl2500IfVlanUntaggedInOctets"), ("DFL2500-MIB", "dfl2500IfVlanUntaggedOutOctets"), ("DFL2500-MIB", "dfl2500IfVlanUntaggedTotOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500IfVlanGroup = dfl2500IfVlanGroup.setStatus('current')
dfl2500SmtpAlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 16)).setObjects(("DFL2500-MIB", "dfl2500SmtpAlgName"), ("DFL2500-MIB", "dfl2500SmtpAlgTotCheckedSes"), ("DFL2500-MIB", "dfl2500SmtpAlgTotSpamSes"), ("DFL2500-MIB", "dfl2500SmtpAlgTotDroppedSes"), ("DFL2500-MIB", "dfl2500SmtpAlgDnsBlName"), ("DFL2500-MIB", "dfl2500SmtpAlgDnsBlChecked"), ("DFL2500-MIB", "dfl2500SmtpAlgDnsBlMatched"), ("DFL2500-MIB", "dfl2500SmtpAlgDnsBlFailChecks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500SmtpAlgGroup = dfl2500SmtpAlgGroup.setStatus('current')
dfl2500SysTCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 3, 1, 17)).setObjects(("DFL2500-MIB", "dfl2500SysTCPRecvSmall"), ("DFL2500-MIB", "dfl2500SysTCPRecvLarge"), ("DFL2500-MIB", "dfl2500SysTCPSendSmall"), ("DFL2500-MIB", "dfl2500SysTCPSendLarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500SysTCPGroup = dfl2500SysTCPGroup.setStatus('current')
dfl2500StatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 20, 1, 5, 2, 2, 1, 1)).setObjects(("DFL2500-MIB", "dfl2500SystemObjectGroup"), ("DFL2500-MIB", "dfl2500IPsecObjectGroup"), ("DFL2500-MIB", "dfl2500StateCountersGroup"), ("DFL2500-MIB", "dfl2500IPPoolGroup"), ("DFL2500-MIB", "dfl2500DHCPServerGroup"), ("DFL2500-MIB", "dfl2500RuleUseGroup"), ("DFL2500-MIB", "dfl2500UserAuthGroup"), ("DFL2500-MIB", "dfl2500IfStatsGroup"), ("DFL2500-MIB", "dfl2500LinkMonitorGroup"), ("DFL2500-MIB", "dfl2500PipesObjectGroup"), ("DFL2500-MIB", "dfl2500DHCPRelayObjectGroup"), ("DFL2500-MIB", "dfl2500AlgGroup"), ("DFL2500-MIB", "dfl2500HAGroup"), ("DFL2500-MIB", "dfl2500IfVlanGroup"), ("DFL2500-MIB", "dfl2500SmtpAlgGroup"), ("DFL2500-MIB", "dfl2500SysTCPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2500StatsCompliance = dfl2500StatsCompliance.setStatus('current')
mibBuilder.exportSymbols("DFL2500-MIB", dfl2500PipeTable=dfl2500PipeTable, dfl2500VPN=dfl2500VPN, dfl2500IfBitsTotCnt=dfl2500IfBitsTotCnt, dfl2500LinkMonGrpHostsUp=dfl2500LinkMonGrpHostsUp, dfl2500PipeMaxPrec=dfl2500PipeMaxPrec, dfl2500PipeNumPrec=dfl2500PipeNumPrec, dfl2500IfPktsInCnt=dfl2500IfPktsInCnt, dfl2500SysConnCPS=dfl2500SysConnCPS, dfl2500IPPoolIndex=dfl2500IPPoolIndex, dfl2500IPPoolMisses=dfl2500IPPoolMisses, dfl2500LinkMonHostTable=dfl2500LinkMonHostTable, dfl2500PipeDelayedPackets=dfl2500PipeDelayedPackets, dfl2500HASyncSendQueueLength=dfl2500HASyncSendQueueLength, dfl2500IfRxRingFifoErrors=dfl2500IfRxRingFifoErrors, dfl2500SysForwardedPackets=dfl2500SysForwardedPackets, dfl2500IfVlanUntaggedInPkts=dfl2500IfVlanUntaggedInPkts, dfl2500HWSensorIndex=dfl2500HWSensorIndex, dfl2500IfFragReassFail=dfl2500IfFragReassFail, dfl2500PipePrecTotalPps=dfl2500PipePrecTotalPps, dfl2500DHCPRuleUsagePercent=dfl2500DHCPRuleUsagePercent, dfl2500DHCPRejectedRequests=dfl2500DHCPRejectedRequests, dfl2500PipeDefPrec=dfl2500PipeDefPrec, dfl2500IPsecOutPackets=dfl2500IPsecOutPackets, dfl2500HttpAlg=dfl2500HttpAlg, dfl2500HttpAlgCntFltEntry=dfl2500HttpAlgCntFltEntry, dfl2500SysForwardedBits=dfl2500SysForwardedBits, dfl2500RxTingFlooded=dfl2500RxTingFlooded, dfl2500RuleUseEntry=dfl2500RuleUseEntry, dfl2500IPsecForwardedOctetsUcomp=dfl2500IPsecForwardedOctetsUcomp, dfl2500SysConns=dfl2500SysConns, dfl2500DHCPRuleUsage=dfl2500DHCPRuleUsage, dfl2500LinkMonHostId=dfl2500LinkMonHostId, dfl2500PipeName=dfl2500PipeName, dfl2500reg=dfl2500reg, dfl2500PipePrecReservedBps=dfl2500PipePrecReservedBps, dfl2500LinkMonHostShortTermLoss=dfl2500LinkMonHostShortTermLoss, dfl2500IfVlanUntaggedInOctets=dfl2500IfVlanUntaggedInOctets, dfl2500PipePrecEntry=dfl2500PipePrecEntry, dfl2500HttpAlgIndex=dfl2500HttpAlgIndex, dfl2500IfHCPktsInCnt=dfl2500IfHCPktsInCnt, dfl2500IfVlanStatsEntry=dfl2500IfVlanStatsEntry, dfl2500DHCPRelayRuleName=dfl2500DHCPRelayRuleName, dfl2500SysCpuLoad=dfl2500SysCpuLoad, dfl2500PipeUsers=dfl2500PipeUsers, dfl2500IPsecPhaseOneActive=dfl2500IPsecPhaseOneActive, dfl2500SysPscTcpFin=dfl2500SysPscTcpFin, dfl2500UserAuthRuleUseEntry=dfl2500UserAuthRuleUseEntry, dfl2500PipeMinPrec=dfl2500PipeMinPrec, dfl2500IfHCPktsOutCnt=dfl2500IfHCPktsOutCnt, dfl2500IPPoolGroup=dfl2500IPPoolGroup, dfl2500IPsecForwardedOctetsComp=dfl2500IPsecForwardedOctetsComp, dfl2500IPPoolName=dfl2500IPPoolName, dfl2500DHCPRelayRuleCurClients=dfl2500DHCPRelayRuleCurClients, dfl2500IPPoolPrepare=dfl2500IPPoolPrepare, dfl2500DHCPRuleEntry=dfl2500DHCPRuleEntry, dfl2500IPsecOutOctetsComp=dfl2500IPsecOutOctetsComp, dfl2500HttpAlgCntFltRequests=dfl2500HttpAlgCntFltRequests, dfl2500HWSensorName=dfl2500HWSensorName, dfl2500SmtpAlgTotDroppedSes=dfl2500SmtpAlgTotDroppedSes, dfl2500LinkMonGrp=dfl2500LinkMonGrp, dfl2500SysHCForwardedBits=dfl2500SysHCForwardedBits, dfl2500IPsecGlobal=dfl2500IPsecGlobal, dfl2500PipePrecTable=dfl2500PipePrecTable, dfl2500IfHCBitsTotCnt=dfl2500IfHCBitsTotCnt, dfl2500SysPscOther=dfl2500SysPscOther, dfl2500SysTCPRecvLarge=dfl2500SysTCPRecvLarge, dfl2500DHCPRelayRuleRejCliPkts=dfl2500DHCPRelayRuleRejCliPkts, dfl2500LinkMonHostPacketsLost=dfl2500LinkMonHostPacketsLost, dfl2500IfVlanUntaggedTotPkts=dfl2500IfVlanUntaggedTotPkts, dfl2500IPsecInfoFailed=dfl2500IPsecInfoFailed, dfl2500IfRxRingTable=dfl2500IfRxRingTable, dfl2500UserAuthHTTPUsers=dfl2500UserAuthHTTPUsers, dfl2500Rules=dfl2500Rules, dfl2500IfRxRingSaturation=dfl2500IfRxRingSaturation, dfl2500SmtpAlgDnsBlFailChecks=dfl2500SmtpAlgDnsBlFailChecks, dfl2500Pipes=dfl2500Pipes, dfl2500IPsecInOctetsComp=dfl2500IPsecInOctetsComp, dfl2500SysPscTcpOpen=dfl2500SysPscTcpOpen, dfl2500IfBitsInCnt=dfl2500IfBitsInCnt, dfl2500IPsecPhaseOneAggrModeDone=dfl2500IPsecPhaseOneAggrModeDone, dfl2500SysPscIcmp=dfl2500SysPscIcmp, dfl2500IPPoolsNumber=dfl2500IPPoolsNumber, dfl2500SysTCPGroup=dfl2500SysTCPGroup, dfl2500DHCPServerGroup=dfl2500DHCPServerGroup, dfl2500IfTxAvgUse=dfl2500IfTxAvgUse, dfl2500SmtpAlgIndex=dfl2500SmtpAlgIndex, dfl2500LinkMonGrpName=dfl2500LinkMonGrpName, dfl2500HWSensorUnit=dfl2500HWSensorUnit, dfl2500IfRxDespools=dfl2500IfRxDespools, dfl2500HttpAlgTotalAllowed=dfl2500HttpAlgTotalAllowed, dfl2500DHCPRelayRejected=dfl2500DHCPRelayRejected, dfl2500MibConfs=dfl2500MibConfs, dfl2500IPPoolTable=dfl2500IPPoolTable, dfl2500IfFragReassOk=dfl2500IfFragReassOk, dfl2500DHCPRelayRuleHits=dfl2500DHCPRelayRuleHits, dfl2500IPsecForwardedPackets=dfl2500IPsecForwardedPackets, dfl2500AlgSessions=dfl2500AlgSessions, dfl2500IfVlanGroup=dfl2500IfVlanGroup, dfl2500HttpAlgCntFltTable=dfl2500HttpAlgCntFltTable, dfl2500SmtpAlgEntry=dfl2500SmtpAlgEntry, dfl2500=dfl2500, dfl2500LinkMonHostIndex=dfl2500LinkMonHostIndex, dfl2500SystemObjectGroup=dfl2500SystemObjectGroup, dfl2500IfRxRingIndex=dfl2500IfRxRingIndex, dfl2500HttpAlgTable=dfl2500HttpAlgTable, dfl2500RuleUseGroup=dfl2500RuleUseGroup, dfl2500LinkMonGrpTable=dfl2500LinkMonGrpTable, dfl2500IfHCPktsTotCnt=dfl2500IfHCPktsTotCnt, dfl2500AlgConnections=dfl2500AlgConnections, dfl2500RuleUse=dfl2500RuleUse, dfl2500UserAuthRuleIndex=dfl2500UserAuthRuleIndex, dfl2500IPsecOutOfTransforms=dfl2500IPsecOutOfTransforms, dfl2500UserAuthEAPUsers=dfl2500UserAuthEAPUsers, dfl2500DHCPRelayRuleIndex=dfl2500DHCPRelayRuleIndex, dfl2500StatsConformance=dfl2500StatsConformance, dfl2500PipePrecBps=dfl2500PipePrecBps, dfl2500SmtpAlgTotSpamSes=dfl2500SmtpAlgTotSpamSes, dfl2500PipesObjectGroup=dfl2500PipesObjectGroup, dfl2500SysPscTcpSyn=dfl2500SysPscTcpSyn, dfl2500IPPoolFree=dfl2500IPPoolFree, dfl2500System=dfl2500System, dfl2500UserAuthRuleUseTable=dfl2500UserAuthRuleUseTable, dfl2500HttpAlgCntFltBlocked=dfl2500HttpAlgCntFltBlocked, dfl2500HASyncSendQueueUsagePkt=dfl2500HASyncSendQueueUsagePkt, dfl2500IPsecActiveTransforms=dfl2500IPsecActiveTransforms, dfl2500SmtpAlg=dfl2500SmtpAlg, dfl2500IfHCBitsOutCnt=dfl2500IfHCBitsOutCnt, dfl2500IPsecTotalTransforms=dfl2500IPsecTotalTransforms, dfl2500DHCPRelay=dfl2500DHCPRelay, dfl2500PipePrecDynLimBps=dfl2500PipePrecDynLimBps, dfl2500HttpAlgCntFltAllowed=dfl2500HttpAlgCntFltAllowed, dfl2500LinkMonGrpIndex=dfl2500LinkMonGrpIndex, dfl2500SmtpAlgName=dfl2500SmtpAlgName, dfl2500SmtpAlgDnsBlMatched=dfl2500SmtpAlgDnsBlMatched, dfl2500LinkMonitor=dfl2500LinkMonitor, dfl2500HWSensorEntry=dfl2500HWSensorEntry, ipsFirewall=ipsFirewall, dfl2500IfTxRingIndex=dfl2500IfTxRingIndex, dfl2500IfStatsTable=dfl2500IfStatsTable, dfl2500IfTxDespools=dfl2500IfTxDespools, dfl2500HASyncSendQueueUsageOct=dfl2500HASyncSendQueueUsageOct, dfl2500HWSensorValue=dfl2500HWSensorValue, dfl2500IPsecQuickModeDone=dfl2500IPsecQuickModeDone, dfl2500ALG=dfl2500ALG, dfl2500LinkMonitorGroup=dfl2500LinkMonitorGroup, dfl2500StatsCompliance=dfl2500StatsCompliance, dfl2500SysMemUsage=dfl2500SysMemUsage, dfl2500PipePrecDynUsrLimBps=dfl2500PipePrecDynUsrLimBps, dfl2500SmtpAlgDnsBlTable=dfl2500SmtpAlgDnsBlTable, dfl2500LinkMonGrpEntry=dfl2500LinkMonGrpEntry, dfl2500IPPoolEntry=dfl2500IPPoolEntry, dfl2500LinkMonHostEntry=dfl2500LinkMonHostEntry, dfl2500PipePrec=dfl2500PipePrec, dfl2500DHCPActiveClientsPercent=dfl2500DHCPActiveClientsPercent, dfl2500SmtpAlgGroup=dfl2500SmtpAlgGroup, dfl2500HWSensorTable=dfl2500HWSensorTable, dfl2500IPsecPhaseOneRekeyed=dfl2500IPsecPhaseOneRekeyed, dfl2500SysConnOPS=dfl2500SysConnOPS, dfl2500HttpAlgCntFltName=dfl2500HttpAlgCntFltName, dfl2500IfHCBitsInCnt=dfl2500IfHCBitsInCnt, dfl2500PipeCurrentBps=dfl2500PipeCurrentBps, dfl2500SysTCPUsage=dfl2500SysTCPUsage, netdefendMgmt=netdefendMgmt, dfl2500UserAuth=dfl2500UserAuth, dfl2500AlgTCPStreams=dfl2500AlgTCPStreams, dfl2500HttpAlgEntry=dfl2500HttpAlgEntry, dfl2500HttpAlgTotalBlocked=dfl2500HttpAlgTotalBlocked, dfl2500IfVlanUntaggedOutOctets=dfl2500IfVlanUntaggedOutOctets, dfl2500SmtpAlgDnsBlIndex=dfl2500SmtpAlgDnsBlIndex, dfl2500IPsecQuickModeFailed=dfl2500IPsecQuickModeFailed, dfl2500UserAuthRuleName=dfl2500UserAuthRuleName, dfl2500IfStatsEntry=dfl2500IfStatsEntry, dfl2500PipeDropedPackets=dfl2500PipeDropedPackets, dfl2500PipeEntry=dfl2500PipeEntry, dfl2500SmtpAlgDnsBlChecked=dfl2500SmtpAlgDnsBlChecked, dfl2500IfPktsOutCnt=dfl2500IfPktsOutCnt, dfl2500HASyncSendResentPackets=dfl2500HASyncSendResentPackets, dfl2500DHCPRelayCurClients=dfl2500DHCPRelayCurClients, dfl2500DHCPRelayRuleEntry=dfl2500DHCPRelayRuleEntry, dfl2500StatsRegGroups=dfl2500StatsRegGroups, dfl2500IfTxRingSaturation=dfl2500IfTxRingSaturation, PYSNMP_MODULE_ID=dfl2500_MIB, dfl2500DHCPRelayCurTrans=dfl2500DHCPRelayCurTrans, dfl2500_MIB=dfl2500_MIB, dfl2500DHCPRelayRuleRejSrvPkts=dfl2500DHCPRelayRuleRejSrvPkts, dfl2500HASyncSentPackets=dfl2500HASyncSentPackets, dfl2500HttpAlgName=dfl2500HttpAlgName, dfl2500IPsecOutOctetsUncomp=dfl2500IPsecOutOctetsUncomp, dfl2500RuleIndex=dfl2500RuleIndex, dfl2500IPsecPhaseOneFailed=dfl2500IPsecPhaseOneFailed, dfl2500RuleUseTable=dfl2500RuleUseTable, dlink=dlink, dfl2500SysTimerUsage=dfl2500SysTimerUsage, dfl2500DHCPRuleTable=dfl2500DHCPRuleTable, dfl2500UserAuthPPPUsers=dfl2500UserAuthPPPUsers, dfl2500IfFragsIn=dfl2500IfFragsIn, dfl2500HA=dfl2500HA, dfl2500DHCPActiveClients=dfl2500DHCPActiveClients, dfl2500UserAuthHTTPSUsers=dfl2500UserAuthHTTPSUsers, dfl2500IfTxRingEntry=dfl2500IfTxRingEntry, dfl2500AlgGroup=dfl2500AlgGroup, dfl2500IfStatsIndex=dfl2500IfStatsIndex, dfl2500IPsec=dfl2500IPsec, dfl2500SysPerStateCounters=dfl2500SysPerStateCounters, dfl2500PipeCurrentPps=dfl2500PipeCurrentPps, dfl2500IfRxAvgUse=dfl2500IfRxAvgUse, dfl2500HttpAlgCntFltIndex=dfl2500HttpAlgCntFltIndex, dfl2500UserAuthXAUTHUsers=dfl2500UserAuthXAUTHUsers, dfl2500OS=dfl2500OS, dfl2500SmtpAlgDnsBlEntry=dfl2500SmtpAlgDnsBlEntry, dfl2500IPPools=dfl2500IPPools, dfl2500DHCPRuleName=dfl2500DHCPRuleName, dfl2500UserAuthRuleUse=dfl2500UserAuthRuleUse, dfl2500IPsecQuickModeActive=dfl2500IPsecQuickModeActive, dfl2500RuleName=dfl2500RuleName, dfl2500DHCPServer=dfl2500DHCPServer, dfl2500HttpAlgTotalRequested=dfl2500HttpAlgTotalRequested, dfl2500IfRxRingEntry=dfl2500IfRxRingEntry, dfl2500DHCPRuleIndex=dfl2500DHCPRuleIndex, dfl2500DHCPTotalRejected=dfl2500DHCPTotalRejected, dfl2500DHCPRelayRuleTable=dfl2500DHCPRelayRuleTable, dfl2500IfVlanIndex=dfl2500IfVlanIndex, dfl2500IPsecInOctetsUncomp=dfl2500IPsecInOctetsUncomp, dfl2500PipePrecDelayedPackets=dfl2500PipePrecDelayedPackets, dfl2500DHCPRelayObjectGroup=dfl2500DHCPRelayObjectGroup, dfl2500DHCPTotalLeases=dfl2500DHCPTotalLeases, dfl2500StateCountersGroup=dfl2500StateCountersGroup, dfl2500IfBitsOutCnt=dfl2500IfBitsOutCnt, dfl2500SmtpAlgTotCheckedSes=dfl2500SmtpAlgTotCheckedSes, dfl2500SmtpAlgTable=dfl2500SmtpAlgTable, dfl2500PipeNumUsers=dfl2500PipeNumUsers, dfl2500IPsecInfoDone=dfl2500IPsecInfoDone, dfl2500IfName=dfl2500IfName, dfl2500MibModules=dfl2500MibModules, dfl2500SysTCPSendLarge=dfl2500SysTCPSendLarge, dfl2500OSStats=dfl2500OSStats, dfl2500SysTCPSendSmall=dfl2500SysTCPSendSmall, dfl2500SysBuffUse=dfl2500SysBuffUse, dfl2500IPsecTotalRekeys=dfl2500IPsecTotalRekeys, dfl2500UserAuthGroup=dfl2500UserAuthGroup, dfl2500SmtpAlgDnsBlName=dfl2500SmtpAlgDnsBlName, dfl2500MibObjectGroups=dfl2500MibObjectGroups, dfl2500SysTCPRecvSmall=dfl2500SysTCPRecvSmall, dfl2500IPPoolClientFails=dfl2500IPPoolClientFails, dfl2500PipePrecDropedPackets=dfl2500PipePrecDropedPackets, dfl2500SysPscUdp=dfl2500SysPscUdp, dfl2500IfTxRingTable=dfl2500IfTxRingTable, dfl2500IPPoolUsed=dfl2500IPPoolUsed, dfl2500HAGroup=dfl2500HAGroup, dfl2500IfVlanUntaggedOutPkts=dfl2500IfVlanUntaggedOutPkts, dfl2500IPsecPhaseOneDone=dfl2500IPsecPhaseOneDone, dfl2500RxRingFlooded=dfl2500RxRingFlooded, dfl2500IfVlanUntaggedTotOctets=dfl2500IfVlanUntaggedTotOctets, dfl2500IPsecInPackets=dfl2500IPsecInPackets)
mibBuilder.exportSymbols("DFL2500-MIB", dfl2500PipePrecIndex=dfl2500PipePrecIndex, dfl2500IfPktsTotCnt=dfl2500IfPktsTotCnt, dfl2500IfStatsGroup=dfl2500IfStatsGroup, dfl2500IfVlanStatsTable=dfl2500IfVlanStatsTable, dfl2500PipeIndex=dfl2500PipeIndex, dfl2500IPsecObjectGroup=dfl2500IPsecObjectGroup)
