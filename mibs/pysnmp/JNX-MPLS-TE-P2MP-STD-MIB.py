#
# PySNMP MIB module JNX-MPLS-TE-P2MP-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JNX-MPLS-TE-P2MP-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
IndexInteger, IndexIntegerNextFree = mibBuilder.importSymbols("DIFFSERV-MIB", "IndexInteger", "IndexIntegerNextFree")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
jnxP2mpExperiment, = mibBuilder.importSymbols("JUNIPER-EXPERIMENT-MIB", "jnxP2mpExperiment")
MplsIndexType, = mibBuilder.importSymbols("MPLS-LSR-STD-MIB", "MplsIndexType")
MplsPathIndexOrZero, mplsStdMIB = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsPathIndexOrZero", "mplsStdMIB")
mplsTunnelEgressLSRId, mplsTunnelInstance, mplsTunnelIngressLSRId, mplsTunnelIndex = mibBuilder.importSymbols("MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId", "mplsTunnelInstance", "mplsTunnelIngressLSRId", "mplsTunnelIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Gauge32, Bits, IpAddress, NotificationType, Unsigned32, Counter32, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Bits", "IpAddress", "NotificationType", "Unsigned32", "Counter32", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "ModuleIdentity", "MibIdentifier")
StorageType, TruthValue, RowStatus, DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TruthValue", "RowStatus", "DisplayString", "TimeStamp", "TextualConvention")
jnxMplsTeP2mpStdMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1))
jnxMplsTeP2mpStdMIB.setRevisions(('2009-04-17 00:00',))
if mibBuilder.loadTexts: jnxMplsTeP2mpStdMIB.setLastUpdated('200904170000Z')
if mibBuilder.loadTexts: jnxMplsTeP2mpStdMIB.setOrganization('Multiprotocol Label Switching (MPLS) Working Group')
jnxMplsTeP2mpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 0))
jnxMplsTeP2mpScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 1))
jnxMplsTeP2mpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2))
jnxMplsTeP2mpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 3))
jnxMplsTeP2mpTunnelConfigured = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelConfigured.setStatus('current')
jnxMplsTeP2mpTunnelActive = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelActive.setStatus('current')
jnxMplsTeP2mpTunnelTotalMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelTotalMaxHops.setStatus('current')
jnxMplsTeP2mpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 1), )
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelTable.setStatus('current')
jnxMplsTeP2mpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 1, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-STD-MIB", "mplsTunnelIngressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId"))
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelEntry.setStatus('current')
jnxMplsTeP2mpTunnelP2mpIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelP2mpIntegrity.setStatus('current')
jnxMplsTeP2mpTunnelBranchRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notBranch", 1), ("branch", 2), ("bud", 3))).clone('notBranch')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelBranchRole.setStatus('current')
jnxMplsTeP2mpTunnelP2mpXcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 1, 1, 4), MplsIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelP2mpXcIndex.setStatus('current')
jnxMplsTeP2mpTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelRowStatus.setStatus('current')
jnxMplsTeP2mpTunnelStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 1, 1, 6), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelStorageType.setStatus('current')
jnxMplsTeP2mpTunnelSubGroupIDNext = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 2), IndexIntegerNextFree().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelSubGroupIDNext.setStatus('current')
jnxMplsTeP2mpTunnelDestTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3), )
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestTable.setStatus('current')
jnxMplsTeP2mpTunnelDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-STD-MIB", "mplsTunnelIngressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId"), (0, "JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestSrcSubGroupOriginType"), (0, "JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestSrcSubGroupOrigin"), (0, "JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestSrcSubGroupID"), (0, "JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestSubGroupOriginType"), (0, "JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestSubGroupOrigin"), (0, "JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestSubGroupID"), (0, "JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestDestinationType"), (0, "JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestDestination"))
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestEntry.setStatus('current')
jnxMplsTeP2mpTunnelDestSrcSubGroupOriginType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestSrcSubGroupOriginType.setStatus('current')
jnxMplsTeP2mpTunnelDestSrcSubGroupOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestSrcSubGroupOrigin.setStatus('current')
jnxMplsTeP2mpTunnelDestSrcSubGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 3), IndexInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestSrcSubGroupID.setStatus('current')
jnxMplsTeP2mpTunnelDestSubGroupOriginType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 4), InetAddressType())
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestSubGroupOriginType.setStatus('current')
jnxMplsTeP2mpTunnelDestSubGroupOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestSubGroupOrigin.setStatus('current')
jnxMplsTeP2mpTunnelDestSubGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 6), IndexInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestSubGroupID.setStatus('current')
jnxMplsTeP2mpTunnelDestDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 7), InetAddressType())
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestDestinationType.setStatus('current')
jnxMplsTeP2mpTunnelDestDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestDestination.setStatus('current')
jnxMplsTeP2mpTunnelDestBranchOutSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 9), MplsIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestBranchOutSegment.setStatus('current')
jnxMplsTeP2mpTunnelDestHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 10), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestHopTableIndex.setStatus('current')
jnxMplsTeP2mpTunnelDestPathInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 11), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestPathInUse.setStatus('current')
jnxMplsTeP2mpTunnelDestCHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 12), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestCHopTableIndex.setStatus('current')
jnxMplsTeP2mpTunnelDestARHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 13), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestARHopTableIndex.setStatus('current')
jnxMplsTeP2mpTunnelDestTotalUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestTotalUpTime.setStatus('current')
jnxMplsTeP2mpTunnelDestInstanceUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestInstanceUpTime.setStatus('current')
jnxMplsTeP2mpTunnelDestPathChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestPathChanges.setStatus('current')
jnxMplsTeP2mpTunnelDestLastPathChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestLastPathChange.setStatus('current')
jnxMplsTeP2mpTunnelDestCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestCreationTime.setStatus('current')
jnxMplsTeP2mpTunnelDestStateTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestStateTransitions.setStatus('current')
jnxMplsTeP2mpTunnelDestDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestDiscontinuityTime.setStatus('current')
jnxMplsTeP2mpTunnelDestAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestAdminStatus.setStatus('current')
jnxMplsTeP2mpTunnelDestOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestOperStatus.setStatus('current')
jnxMplsTeP2mpTunnelDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestRowStatus.setStatus('current')
jnxMplsTeP2mpTunnelDestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 3, 1, 24), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestStorageType.setStatus('current')
jnxMplsTeP2mpTunnelBranchPerfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 4), )
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelBranchPerfTable.setStatus('current')
jnxMplsTeP2mpTunnelBranchPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 4, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-STD-MIB", "mplsTunnelIngressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId"), (0, "JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelBranchPerfBranch"))
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelBranchPerfEntry.setStatus('current')
jnxMplsTeP2mpTunnelBranchPerfBranch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 4, 1, 1), MplsIndexType())
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelBranchPerfBranch.setStatus('current')
jnxMplsTeP2mpTunnelBranchPerfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelBranchPerfPackets.setStatus('current')
jnxMplsTeP2mpTunnelBranchPerfHCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelBranchPerfHCPackets.setStatus('current')
jnxMplsTeP2mpTunnelBranchPerfErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelBranchPerfErrors.setStatus('current')
jnxMplsTeP2mpTunnelBranchPerfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelBranchPerfBytes.setStatus('current')
jnxMplsTeP2mpTunnelBranchPerfHCBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelBranchPerfHCBytes.setStatus('current')
jnxMplsTeP2mpTunnelBranchDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 4, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelBranchDiscontinuityTime.setStatus('current')
jnxMplsTeP2mpTunnelNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 2, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelNotificationEnable.setStatus('current')
jnxMplsTeP2mpTunnelDestUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 0, 1)).setObjects(("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestAdminStatus"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestOperStatus"))
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestUp.setStatus('current')
jnxMplsTeP2mpTunnelDestDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 0, 2)).setObjects(("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestAdminStatus"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestOperStatus"))
if mibBuilder.loadTexts: jnxMplsTeP2mpTunnelDestDown.setStatus('current')
jnxMplsTeP2mpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 3, 1))
jnxMplsTeP2mpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 3, 2))
jnxMplsTeP2mpModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 3, 2, 1)).setObjects(("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpGeneralGroup"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpNotifGroup"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpScalarGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsTeP2mpModuleFullCompliance = jnxMplsTeP2mpModuleFullCompliance.setStatus('current')
jnxMplsTeP2mpModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 3, 2, 2)).setObjects(("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpGeneralGroup"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpScalarGroup"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsTeP2mpModuleReadOnlyCompliance = jnxMplsTeP2mpModuleReadOnlyCompliance.setStatus('current')
jnxMplsTeP2mpGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 3, 1, 1)).setObjects(("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelConfigured"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelActive"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelTotalMaxHops"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelP2mpIntegrity"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelBranchRole"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelP2mpXcIndex"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelRowStatus"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelStorageType"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelSubGroupIDNext"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestBranchOutSegment"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestHopTableIndex"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestPathInUse"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestCHopTableIndex"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestARHopTableIndex"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestTotalUpTime"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestInstanceUpTime"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestPathChanges"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestLastPathChange"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestCreationTime"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestStateTransitions"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestDiscontinuityTime"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestAdminStatus"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestOperStatus"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestRowStatus"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestStorageType"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelBranchPerfPackets"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelBranchPerfHCPackets"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelBranchPerfErrors"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelBranchPerfBytes"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelBranchPerfHCBytes"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelBranchDiscontinuityTime"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsTeP2mpGeneralGroup = jnxMplsTeP2mpGeneralGroup.setStatus('current')
jnxMplsTeP2mpNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 3, 1, 2)).setObjects(("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestUp"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelDestDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsTeP2mpNotifGroup = jnxMplsTeP2mpNotifGroup.setStatus('current')
jnxMplsTeP2mpScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 7, 1, 3, 1, 3)).setObjects(("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelConfigured"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelActive"), ("JNX-MPLS-TE-P2MP-STD-MIB", "jnxMplsTeP2mpTunnelTotalMaxHops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsTeP2mpScalarGroup = jnxMplsTeP2mpScalarGroup.setStatus('current')
mibBuilder.exportSymbols("JNX-MPLS-TE-P2MP-STD-MIB", jnxMplsTeP2mpTunnelBranchPerfErrors=jnxMplsTeP2mpTunnelBranchPerfErrors, jnxMplsTeP2mpTunnelStorageType=jnxMplsTeP2mpTunnelStorageType, jnxMplsTeP2mpTunnelBranchPerfHCBytes=jnxMplsTeP2mpTunnelBranchPerfHCBytes, jnxMplsTeP2mpTunnelEntry=jnxMplsTeP2mpTunnelEntry, jnxMplsTeP2mpTunnelDestOperStatus=jnxMplsTeP2mpTunnelDestOperStatus, jnxMplsTeP2mpTunnelDestSrcSubGroupOriginType=jnxMplsTeP2mpTunnelDestSrcSubGroupOriginType, jnxMplsTeP2mpTunnelTotalMaxHops=jnxMplsTeP2mpTunnelTotalMaxHops, jnxMplsTeP2mpTunnelDestDestinationType=jnxMplsTeP2mpTunnelDestDestinationType, jnxMplsTeP2mpTunnelDestBranchOutSegment=jnxMplsTeP2mpTunnelDestBranchOutSegment, jnxMplsTeP2mpTunnelDestSrcSubGroupOrigin=jnxMplsTeP2mpTunnelDestSrcSubGroupOrigin, jnxMplsTeP2mpCompliances=jnxMplsTeP2mpCompliances, jnxMplsTeP2mpTunnelBranchPerfHCPackets=jnxMplsTeP2mpTunnelBranchPerfHCPackets, jnxMplsTeP2mpScalars=jnxMplsTeP2mpScalars, jnxMplsTeP2mpTunnelRowStatus=jnxMplsTeP2mpTunnelRowStatus, jnxMplsTeP2mpTunnelBranchPerfTable=jnxMplsTeP2mpTunnelBranchPerfTable, jnxMplsTeP2mpGeneralGroup=jnxMplsTeP2mpGeneralGroup, PYSNMP_MODULE_ID=jnxMplsTeP2mpStdMIB, jnxMplsTeP2mpTunnelDestDown=jnxMplsTeP2mpTunnelDestDown, jnxMplsTeP2mpObjects=jnxMplsTeP2mpObjects, jnxMplsTeP2mpTunnelDestStorageType=jnxMplsTeP2mpTunnelDestStorageType, jnxMplsTeP2mpTunnelTable=jnxMplsTeP2mpTunnelTable, jnxMplsTeP2mpTunnelDestSrcSubGroupID=jnxMplsTeP2mpTunnelDestSrcSubGroupID, jnxMplsTeP2mpTunnelDestDiscontinuityTime=jnxMplsTeP2mpTunnelDestDiscontinuityTime, jnxMplsTeP2mpModuleFullCompliance=jnxMplsTeP2mpModuleFullCompliance, jnxMplsTeP2mpTunnelBranchPerfPackets=jnxMplsTeP2mpTunnelBranchPerfPackets, jnxMplsTeP2mpNotifications=jnxMplsTeP2mpNotifications, jnxMplsTeP2mpTunnelDestPathInUse=jnxMplsTeP2mpTunnelDestPathInUse, jnxMplsTeP2mpTunnelDestRowStatus=jnxMplsTeP2mpTunnelDestRowStatus, jnxMplsTeP2mpTunnelConfigured=jnxMplsTeP2mpTunnelConfigured, jnxMplsTeP2mpTunnelDestInstanceUpTime=jnxMplsTeP2mpTunnelDestInstanceUpTime, jnxMplsTeP2mpTunnelDestARHopTableIndex=jnxMplsTeP2mpTunnelDestARHopTableIndex, jnxMplsTeP2mpTunnelNotificationEnable=jnxMplsTeP2mpTunnelNotificationEnable, jnxMplsTeP2mpTunnelDestUp=jnxMplsTeP2mpTunnelDestUp, jnxMplsTeP2mpTunnelDestSubGroupOrigin=jnxMplsTeP2mpTunnelDestSubGroupOrigin, jnxMplsTeP2mpTunnelDestLastPathChange=jnxMplsTeP2mpTunnelDestLastPathChange, jnxMplsTeP2mpModuleReadOnlyCompliance=jnxMplsTeP2mpModuleReadOnlyCompliance, jnxMplsTeP2mpTunnelP2mpIntegrity=jnxMplsTeP2mpTunnelP2mpIntegrity, jnxMplsTeP2mpScalarGroup=jnxMplsTeP2mpScalarGroup, jnxMplsTeP2mpTunnelDestCHopTableIndex=jnxMplsTeP2mpTunnelDestCHopTableIndex, jnxMplsTeP2mpTunnelBranchDiscontinuityTime=jnxMplsTeP2mpTunnelBranchDiscontinuityTime, jnxMplsTeP2mpTunnelP2mpXcIndex=jnxMplsTeP2mpTunnelP2mpXcIndex, jnxMplsTeP2mpTunnelDestStateTransitions=jnxMplsTeP2mpTunnelDestStateTransitions, jnxMplsTeP2mpTunnelBranchPerfEntry=jnxMplsTeP2mpTunnelBranchPerfEntry, jnxMplsTeP2mpTunnelDestTotalUpTime=jnxMplsTeP2mpTunnelDestTotalUpTime, jnxMplsTeP2mpNotifGroup=jnxMplsTeP2mpNotifGroup, jnxMplsTeP2mpTunnelDestSubGroupID=jnxMplsTeP2mpTunnelDestSubGroupID, jnxMplsTeP2mpTunnelActive=jnxMplsTeP2mpTunnelActive, jnxMplsTeP2mpGroups=jnxMplsTeP2mpGroups, jnxMplsTeP2mpTunnelDestPathChanges=jnxMplsTeP2mpTunnelDestPathChanges, jnxMplsTeP2mpTunnelDestDestination=jnxMplsTeP2mpTunnelDestDestination, jnxMplsTeP2mpTunnelDestCreationTime=jnxMplsTeP2mpTunnelDestCreationTime, jnxMplsTeP2mpStdMIB=jnxMplsTeP2mpStdMIB, jnxMplsTeP2mpTunnelBranchRole=jnxMplsTeP2mpTunnelBranchRole, jnxMplsTeP2mpTunnelDestEntry=jnxMplsTeP2mpTunnelDestEntry, jnxMplsTeP2mpTunnelBranchPerfBranch=jnxMplsTeP2mpTunnelBranchPerfBranch, jnxMplsTeP2mpTunnelDestAdminStatus=jnxMplsTeP2mpTunnelDestAdminStatus, jnxMplsTeP2mpTunnelSubGroupIDNext=jnxMplsTeP2mpTunnelSubGroupIDNext, jnxMplsTeP2mpTunnelDestTable=jnxMplsTeP2mpTunnelDestTable, jnxMplsTeP2mpTunnelBranchPerfBytes=jnxMplsTeP2mpTunnelBranchPerfBytes, jnxMplsTeP2mpTunnelDestSubGroupOriginType=jnxMplsTeP2mpTunnelDestSubGroupOriginType, jnxMplsTeP2mpTunnelDestHopTableIndex=jnxMplsTeP2mpTunnelDestHopTableIndex, jnxMplsTeP2mpConformance=jnxMplsTeP2mpConformance)
