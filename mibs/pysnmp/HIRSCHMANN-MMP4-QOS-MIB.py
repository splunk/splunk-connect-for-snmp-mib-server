#
# PySNMP MIB module HIRSCHMANN-MMP4-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HIRSCHMANN-MMP4-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
hmPlatform4, = mibBuilder.importSymbols("HIRSCHMANN-MMP4-BASICL2-MIB", "hmPlatform4")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Counter64, iso, TimeTicks, Gauge32, ModuleIdentity, Integer32, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Counter64", "iso", "TimeTicks", "Gauge32", "ModuleIdentity", "Integer32", "Unsigned32", "ObjectIdentity")
TruthValue, RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
hmPlatform4QOS = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 15, 3))
hmPlatform4QOS.setRevisions(('2005-08-18 12:00',))
if mibBuilder.loadTexts: hmPlatform4QOS.setLastUpdated('200508181200Z')
if mibBuilder.loadTexts: hmPlatform4QOS.setOrganization('Hirschmann Automation and Control GmbH')
hmAgentQOSACL = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 3, 2))
hmAgentQOSCOS = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 3, 3))
class EtypeValue(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1536, 65535)

class PercentByFives(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), ValueRangeConstraint(35, 35), ValueRangeConstraint(40, 40), ValueRangeConstraint(45, 45), ValueRangeConstraint(50, 50), ValueRangeConstraint(55, 55), ValueRangeConstraint(60, 60), ValueRangeConstraint(65, 65), ValueRangeConstraint(70, 70), ValueRangeConstraint(75, 75), ValueRangeConstraint(80, 80), ValueRangeConstraint(85, 85), ValueRangeConstraint(90, 90), ValueRangeConstraint(95, 95), ValueRangeConstraint(100, 100), )
class Sixteenths(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 16)

aclTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 1), )
if mibBuilder.loadTexts: aclTable.setStatus('current')
aclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 1, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-QOS-MIB", "aclIndex"))
if mibBuilder.loadTexts: aclEntry.setStatus('current')
aclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: aclIndex.setStatus('current')
aclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclStatus.setStatus('current')
aclIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 8), )
if mibBuilder.loadTexts: aclIfTable.setStatus('current')
aclIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 8, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-QOS-MIB", "aclIfIndex"), (0, "HIRSCHMANN-MMP4-QOS-MIB", "aclIfDirection"), (0, "HIRSCHMANN-MMP4-QOS-MIB", "aclIfSequence"), (0, "HIRSCHMANN-MMP4-QOS-MIB", "aclIfAclType"), (0, "HIRSCHMANN-MMP4-QOS-MIB", "aclIfAclId"))
if mibBuilder.loadTexts: aclIfEntry.setStatus('current')
aclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: aclIfIndex.setStatus('current')
aclIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: aclIfDirection.setStatus('current')
aclIfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: aclIfSequence.setStatus('current')
aclIfAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2))))
if mibBuilder.loadTexts: aclIfAclType.setStatus('current')
aclIfAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 8, 1, 5), Integer32())
if mibBuilder.loadTexts: aclIfAclId.setStatus('current')
aclIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIfStatus.setStatus('current')
aclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4), )
if mibBuilder.loadTexts: aclRuleTable.setStatus('current')
aclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-QOS-MIB", "aclIndex"), (0, "HIRSCHMANN-MMP4-QOS-MIB", "aclRuleIndex"))
if mibBuilder.loadTexts: aclRuleEntry.setStatus('current')
aclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: aclRuleIndex.setStatus('current')
aclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleAction.setStatus('current')
aclRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleProtocol.setStatus('current')
aclRuleSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpAddress.setStatus('current')
aclRuleSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpMask.setStatus('current')
aclRuleSrcL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4Port.setStatus('current')
aclRuleSrcL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeStart.setStatus('current')
aclRuleSrcL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeEnd.setStatus('current')
aclRuleDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpAddress.setStatus('current')
aclRuleDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpMask.setStatus('current')
aclRuleDestL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4Port.setStatus('current')
aclRuleDestL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeStart.setStatus('current')
aclRuleDestL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeEnd.setStatus('current')
aclRuleIPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIPDSCP.setStatus('current')
aclRuleIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpPrecedence.setStatus('current')
aclRuleIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosBits.setStatus('current')
aclRuleIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosMask.setStatus('current')
aclRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleStatus.setStatus('current')
aclRuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleAssignQueueId.setStatus('current')
aclRuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 20), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleRedirectIntf.setStatus('current')
aclRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 4, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleMatchEvery.setStatus('current')
aclMacIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacIndexNextFree.setStatus('current')
aclMacTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 6), )
if mibBuilder.loadTexts: aclMacTable.setStatus('current')
aclMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 6, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-QOS-MIB", "aclMacIndex"))
if mibBuilder.loadTexts: aclMacEntry.setStatus('current')
aclMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: aclMacIndex.setStatus('current')
aclMacName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacName.setStatus('current')
aclMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacStatus.setStatus('current')
aclMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7), )
if mibBuilder.loadTexts: aclMacRuleTable.setStatus('current')
aclMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-QOS-MIB", "aclMacIndex"), (0, "HIRSCHMANN-MMP4-QOS-MIB", "aclMacRuleIndex"))
if mibBuilder.loadTexts: aclMacRuleEntry.setStatus('current')
aclMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: aclMacRuleIndex.setStatus('current')
aclMacRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleAction.setStatus('current')
aclMacRuleCos = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleCos.setStatus('current')
aclMacRuleCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleCos2.setStatus('current')
aclMacRuleDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleDestMacAddr.setStatus('current')
aclMacRuleDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleDestMacMask.setStatus('current')
aclMacRuleEtypeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("custom", 1), ("appletalk", 2), ("arp", 3), ("ibmsna", 4), ("ipv4", 5), ("ipv6", 6), ("ipx", 7), ("mplsmcast", 8), ("mplsucast", 9), ("netbios", 10), ("novell", 11), ("pppoe", 12), ("rarp", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleEtypeKey.setStatus('current')
aclMacRuleEtypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 8), EtypeValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleEtypeValue.setStatus('current')
aclMacRuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleSrcMacAddr.setStatus('current')
aclMacRuleSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 10), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleSrcMacMask.setStatus('current')
aclMacRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId.setStatus('current')
aclMacRuleVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanIdRangeStart.setStatus('current')
aclMacRuleVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanIdRangeEnd.setStatus('current')
aclMacRuleVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2.setStatus('current')
aclMacRuleVlanId2RangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2RangeStart.setStatus('current')
aclMacRuleVlanId2RangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2RangeEnd.setStatus('current')
aclMacRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleStatus.setStatus('current')
aclMacRuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleAssignQueueId.setStatus('current')
aclMacRuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 19), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleRedirectIntf.setStatus('current')
aclMacRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 2, 7, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleMatchEvery.setStatus('current')
hmAgentCosMapCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1))
hmAgentCosMapIpPrecTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 1), )
if mibBuilder.loadTexts: hmAgentCosMapIpPrecTable.setStatus('current')
hmAgentCosMapIpPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 1, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-QOS-MIB", "hmAgentCosMapIpPrecIntfIndex"), (0, "HIRSCHMANN-MMP4-QOS-MIB", "hmAgentCosMapIpPrecValue"))
if mibBuilder.loadTexts: hmAgentCosMapIpPrecEntry.setStatus('current')
hmAgentCosMapIpPrecIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hmAgentCosMapIpPrecIntfIndex.setStatus('current')
hmAgentCosMapIpPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hmAgentCosMapIpPrecValue.setStatus('current')
hmAgentCosMapIpPrecTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosMapIpPrecTrafficClass.setStatus('current')
hmAgentCosMapIpDscpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 2), )
if mibBuilder.loadTexts: hmAgentCosMapIpDscpTable.setStatus('current')
hmAgentCosMapIpDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 2, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-QOS-MIB", "hmAgentCosMapIpDscpIntfIndex"), (0, "HIRSCHMANN-MMP4-QOS-MIB", "hmAgentCosMapIpDscpValue"))
if mibBuilder.loadTexts: hmAgentCosMapIpDscpEntry.setStatus('current')
hmAgentCosMapIpDscpIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 2, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hmAgentCosMapIpDscpIntfIndex.setStatus('current')
hmAgentCosMapIpDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hmAgentCosMapIpDscpValue.setStatus('current')
hmAgentCosMapIpDscpTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosMapIpDscpTrafficClass.setStatus('current')
hmAgentCosMapIntfTrustTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 3), )
if mibBuilder.loadTexts: hmAgentCosMapIntfTrustTable.setStatus('current')
hmAgentCosMapIntfTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 3, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-QOS-MIB", "hmAgentCosMapIntfTrustIntfIndex"))
if mibBuilder.loadTexts: hmAgentCosMapIntfTrustEntry.setStatus('current')
hmAgentCosMapIntfTrustIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 3, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hmAgentCosMapIntfTrustIntfIndex.setStatus('current')
hmAgentCosMapIntfTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrusted", 1), ("trustDot1p", 2), ("trustIpPrecedence", 3), ("trustIpDscp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosMapIntfTrustMode.setStatus('current')
hmAgentCosMapUntrustedTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentCosMapUntrustedTrafficClass.setStatus('current')
hmAgentCosQueueCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2))
hmAgentCosQueueNumQueuesPerPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentCosQueueNumQueuesPerPort.setStatus('current')
hmAgentCosQueueNumDropPrecedenceLevels = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentCosQueueNumDropPrecedenceLevels.setStatus('current')
hmAgentCosQueueControlTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 3), )
if mibBuilder.loadTexts: hmAgentCosQueueControlTable.setStatus('current')
hmAgentCosQueueControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 3, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-QOS-MIB", "hmAgentCosQueueIntfIndex"))
if mibBuilder.loadTexts: hmAgentCosQueueControlEntry.setStatus('current')
hmAgentCosQueueIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 3, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hmAgentCosQueueIntfIndex.setStatus('current')
hmAgentCosQueueIntfShapingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosQueueIntfShapingRate.setStatus('current')
hmAgentCosQueueMgmtTypeIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("taildrop", 1), ("wred", 2))).clone('taildrop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosQueueMgmtTypeIntf.setStatus('current')
hmAgentCosQueueWredDecayExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosQueueWredDecayExponent.setStatus('current')
hmAgentCosQueueDefaultsRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosQueueDefaultsRestore.setStatus('current')
hmAgentCosQueueTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 4), )
if mibBuilder.loadTexts: hmAgentCosQueueTable.setStatus('current')
hmAgentCosQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 4, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-QOS-MIB", "hmAgentCosQueueIntfIndex"), (0, "HIRSCHMANN-MMP4-QOS-MIB", "hmAgentCosQueueIndex"))
if mibBuilder.loadTexts: hmAgentCosQueueEntry.setStatus('current')
hmAgentCosQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hmAgentCosQueueIndex.setStatus('current')
hmAgentCosQueueSchedulerType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("weighted", 2))).clone('weighted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosQueueSchedulerType.setStatus('current')
hmAgentCosQueueMinBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosQueueMinBandwidth.setStatus('current')
hmAgentCosQueueMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosQueueMaxBandwidth.setStatus('current')
hmAgentCosQueueMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 3, 3, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("taildrop", 1), ("wred", 2))).clone('taildrop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCosQueueMgmtType.setStatus('current')
mibBuilder.exportSymbols("HIRSCHMANN-MMP4-QOS-MIB", hmAgentCosMapCfgGroup=hmAgentCosMapCfgGroup, aclMacRuleVlanId=aclMacRuleVlanId, aclRuleMatchEvery=aclRuleMatchEvery, aclMacRuleAssignQueueId=aclMacRuleAssignQueueId, hmAgentCosMapIntfTrustEntry=hmAgentCosMapIntfTrustEntry, aclRuleAction=aclRuleAction, EtypeValue=EtypeValue, hmAgentCosMapIpPrecEntry=hmAgentCosMapIpPrecEntry, hmAgentCosQueueMinBandwidth=hmAgentCosQueueMinBandwidth, aclIfSequence=aclIfSequence, aclIfIndex=aclIfIndex, aclRuleSrcL4PortRangeEnd=aclRuleSrcL4PortRangeEnd, aclMacEntry=aclMacEntry, hmAgentCosMapUntrustedTrafficClass=hmAgentCosMapUntrustedTrafficClass, aclMacRuleAction=aclMacRuleAction, aclMacRuleTable=aclMacRuleTable, hmAgentCosQueueControlTable=hmAgentCosQueueControlTable, Sixteenths=Sixteenths, aclRuleDestL4PortRangeEnd=aclRuleDestL4PortRangeEnd, hmAgentCosMapIpDscpTrafficClass=hmAgentCosMapIpDscpTrafficClass, hmAgentQOSCOS=hmAgentQOSCOS, hmAgentCosQueueControlEntry=hmAgentCosQueueControlEntry, aclIfAclType=aclIfAclType, aclMacRuleRedirectIntf=aclMacRuleRedirectIntf, hmAgentCosQueueNumDropPrecedenceLevels=hmAgentCosQueueNumDropPrecedenceLevels, aclRuleIpPrecedence=aclRuleIpPrecedence, hmAgentCosQueueIntfShapingRate=hmAgentCosQueueIntfShapingRate, aclTable=aclTable, aclMacRuleIndex=aclMacRuleIndex, aclMacRuleCos=aclMacRuleCos, hmAgentCosQueueCfgGroup=hmAgentCosQueueCfgGroup, hmAgentCosQueueMaxBandwidth=hmAgentCosQueueMaxBandwidth, aclMacRuleEtypeKey=aclMacRuleEtypeKey, hmAgentCosMapIntfTrustIntfIndex=hmAgentCosMapIntfTrustIntfIndex, aclRuleDestIpAddress=aclRuleDestIpAddress, hmAgentQOSACL=hmAgentQOSACL, hmAgentCosMapIpDscpIntfIndex=hmAgentCosMapIpDscpIntfIndex, aclIfEntry=aclIfEntry, PercentByFives=PercentByFives, hmAgentCosMapIpPrecTable=hmAgentCosMapIpPrecTable, aclMacRuleCos2=aclMacRuleCos2, aclMacRuleSrcMacAddr=aclMacRuleSrcMacAddr, hmAgentCosQueueSchedulerType=hmAgentCosQueueSchedulerType, aclMacRuleSrcMacMask=aclMacRuleSrcMacMask, aclMacRuleMatchEvery=aclMacRuleMatchEvery, hmAgentCosQueueWredDecayExponent=hmAgentCosQueueWredDecayExponent, hmAgentCosQueueDefaultsRestore=hmAgentCosQueueDefaultsRestore, aclRuleTable=aclRuleTable, aclRuleSrcL4PortRangeStart=aclRuleSrcL4PortRangeStart, aclMacTable=aclMacTable, aclMacRuleDestMacMask=aclMacRuleDestMacMask, aclMacName=aclMacName, aclEntry=aclEntry, aclMacRuleVlanId2=aclMacRuleVlanId2, hmAgentCosMapIntfTrustMode=hmAgentCosMapIntfTrustMode, aclMacRuleEtypeValue=aclMacRuleEtypeValue, aclIfDirection=aclIfDirection, aclMacRuleVlanId2RangeStart=aclMacRuleVlanId2RangeStart, aclRuleDestIpMask=aclRuleDestIpMask, aclMacIndexNextFree=aclMacIndexNextFree, aclMacRuleVlanId2RangeEnd=aclMacRuleVlanId2RangeEnd, hmAgentCosQueueTable=hmAgentCosQueueTable, PYSNMP_MODULE_ID=hmPlatform4QOS, aclIfStatus=aclIfStatus, aclMacRuleVlanIdRangeEnd=aclMacRuleVlanIdRangeEnd, aclMacStatus=aclMacStatus, aclMacRuleDestMacAddr=aclMacRuleDestMacAddr, aclMacRuleVlanIdRangeStart=aclMacRuleVlanIdRangeStart, aclIfAclId=aclIfAclId, aclRuleIpTosMask=aclRuleIpTosMask, hmAgentCosQueueEntry=hmAgentCosQueueEntry, aclRuleDestL4PortRangeStart=aclRuleDestL4PortRangeStart, aclRuleSrcIpMask=aclRuleSrcIpMask, aclRuleIpTosBits=aclRuleIpTosBits, hmAgentCosMapIntfTrustTable=hmAgentCosMapIntfTrustTable, hmAgentCosQueueNumQueuesPerPort=hmAgentCosQueueNumQueuesPerPort, aclMacRuleEntry=aclMacRuleEntry, hmAgentCosQueueMgmtTypeIntf=hmAgentCosQueueMgmtTypeIntf, hmAgentCosQueueIndex=hmAgentCosQueueIndex, aclRuleIPDSCP=aclRuleIPDSCP, hmAgentCosMapIpDscpEntry=hmAgentCosMapIpDscpEntry, aclIndex=aclIndex, aclIfTable=aclIfTable, aclRuleProtocol=aclRuleProtocol, hmAgentCosMapIpDscpValue=hmAgentCosMapIpDscpValue, hmAgentCosMapIpPrecIntfIndex=hmAgentCosMapIpPrecIntfIndex, aclRuleAssignQueueId=aclRuleAssignQueueId, hmAgentCosMapIpPrecValue=hmAgentCosMapIpPrecValue, aclMacIndex=aclMacIndex, hmAgentCosQueueIntfIndex=hmAgentCosQueueIntfIndex, aclRuleSrcL4Port=aclRuleSrcL4Port, hmAgentCosQueueMgmtType=hmAgentCosQueueMgmtType, aclRuleEntry=aclRuleEntry, hmAgentCosMapIpDscpTable=hmAgentCosMapIpDscpTable, aclRuleSrcIpAddress=aclRuleSrcIpAddress, aclRuleIndex=aclRuleIndex, aclRuleStatus=aclRuleStatus, hmAgentCosMapIpPrecTrafficClass=hmAgentCosMapIpPrecTrafficClass, aclRuleDestL4Port=aclRuleDestL4Port, hmPlatform4QOS=hmPlatform4QOS, aclMacRuleStatus=aclMacRuleStatus, aclStatus=aclStatus, aclRuleRedirectIntf=aclRuleRedirectIntf)
