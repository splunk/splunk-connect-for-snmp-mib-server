#
# PySNMP MIB module RADLAN-rlBrgMcMngr-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-rlBrgMcMngr-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:42:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, iso, ModuleIdentity, MibIdentifier, NotificationType, Bits, Counter64, Counter32, Integer32, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "ModuleIdentity", "MibIdentifier", "NotificationType", "Bits", "Counter64", "Counter32", "Integer32", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rlBrgMcMngr = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 117))
rlBrgMcMngr.setRevisions(('2006-02-12 00:00', '2004-04-19 00:00',))
if mibBuilder.loadTexts: rlBrgMcMngr.setLastUpdated('200602120000Z')
if mibBuilder.loadTexts: rlBrgMcMngr.setOrganization('Radlan Computer Communications Ltd.')
rlBrgMulticastManagerTable = MibTable((1, 3, 6, 1, 4, 1, 89, 117, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgMulticastManagerTable.setStatus('current')
rlBrgMulticastManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 117, 1, 1), ).setIndexNames((0, "RADLAN-rlBrgMcMngr-MIB", "rlBrgMulticastManagerVlanTag"))
if mibBuilder.loadTexts: rlBrgMulticastManagerEntry.setStatus('current')
rlBrgMulticastManagerVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 117, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: rlBrgMulticastManagerVlanTag.setStatus('current')
rlBrgMulticastManagerAdminVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 117, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac-group", 1), ("ip-group", 2), ("ip-src-group", 3))).clone('mac-group')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgMulticastManagerAdminVlanMode.setStatus('current')
rlBrgMulticastManagerOperVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 117, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac-group", 1), ("ip-group", 2), ("ip-src-group", 3))).clone('mac-group')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgMulticastManagerOperVlanMode.setStatus('current')
rlBrgMulticastInetManagerTable = MibTable((1, 3, 6, 1, 4, 1, 89, 117, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgMulticastInetManagerTable.setStatus('current')
rlBrgMulticastInetManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 117, 2, 1), ).setIndexNames((0, "RADLAN-rlBrgMcMngr-MIB", "rlBrgMulticastInetManagerIpType"), (0, "RADLAN-rlBrgMcMngr-MIB", "rlBrgMulticastInetManagerVlanTag"))
if mibBuilder.loadTexts: rlBrgMulticastInetManagerEntry.setStatus('current')
rlBrgMulticastInetManagerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 117, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("dns", 16))))
if mibBuilder.loadTexts: rlBrgMulticastInetManagerIpType.setStatus('current')
rlBrgMulticastInetManagerVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 117, 2, 1, 2), VlanIndex())
if mibBuilder.loadTexts: rlBrgMulticastInetManagerVlanTag.setStatus('current')
rlBrgMulticastInetManagerAdminVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 117, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac-group", 1), ("ip-group", 2), ("ip-src-group", 3))).clone('mac-group')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgMulticastInetManagerAdminVlanMode.setStatus('current')
rlBrgMulticastInetManagerOperVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 117, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac-group", 1), ("ip-group", 2), ("ip-src-group", 3))).clone('mac-group')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgMulticastInetManagerOperVlanMode.setStatus('current')
mibBuilder.exportSymbols("RADLAN-rlBrgMcMngr-MIB", rlBrgMulticastInetManagerTable=rlBrgMulticastInetManagerTable, rlBrgMulticastManagerAdminVlanMode=rlBrgMulticastManagerAdminVlanMode, rlBrgMulticastInetManagerIpType=rlBrgMulticastInetManagerIpType, rlBrgMulticastInetManagerAdminVlanMode=rlBrgMulticastInetManagerAdminVlanMode, rlBrgMulticastManagerEntry=rlBrgMulticastManagerEntry, rlBrgMulticastManagerOperVlanMode=rlBrgMulticastManagerOperVlanMode, PYSNMP_MODULE_ID=rlBrgMcMngr, rlBrgMulticastInetManagerEntry=rlBrgMulticastInetManagerEntry, rlBrgMulticastInetManagerVlanTag=rlBrgMulticastInetManagerVlanTag, rlBrgMulticastManagerVlanTag=rlBrgMulticastManagerVlanTag, rlBrgMulticastInetManagerOperVlanMode=rlBrgMulticastInetManagerOperVlanMode, rlBrgMcMngr=rlBrgMcMngr, rlBrgMulticastManagerTable=rlBrgMulticastManagerTable)
