#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-SERV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-TIMETRA-SERV-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:04:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
TFilterID, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-FILTER-MIB", "TFilterID")
tmnxSRConfs, timetraSRMIBModules, tmnxSRObjs, tmnxSRNotifyPrefix = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "tmnxSRConfs", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRNotifyPrefix")
tSchedulerPolicyName, tVirtualSchedulerName = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName", "tVirtualSchedulerName")
TmnxVPNRouteDistinguisher, TmnxServId, TmnxCustId, TmnxManagedRouteStatus, ServiceOperStatus, ServiceAdminStatus, TCIRRate, TPIRRate, TmnxEnabledDisabled, TmnxVRtrIDOrZero, SdpBindId, TmnxEncapVal, TNamedItemOrEmpty, TmnxActionType, TPolicyStatementNameOrEmpty, TNamedItem, QTag, TPortSchedulerPIR, TmnxPortID, TmnxAncpStringOrZero = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TmnxVPNRouteDistinguisher", "TmnxServId", "TmnxCustId", "TmnxManagedRouteStatus", "ServiceOperStatus", "ServiceAdminStatus", "TCIRRate", "TPIRRate", "TmnxEnabledDisabled", "TmnxVRtrIDOrZero", "SdpBindId", "TmnxEncapVal", "TNamedItemOrEmpty", "TmnxActionType", "TPolicyStatementNameOrEmpty", "TNamedItem", "QTag", "TPortSchedulerPIR", "TmnxPortID", "TmnxAncpStringOrZero")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddressPrefixLength, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Integer32, ModuleIdentity, TimeTicks, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, MibIdentifier, IpAddress, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "MibIdentifier", "IpAddress", "Counter32", "Unsigned32")
TextualConvention, RowStatus, TimeStamp, RowPointer, MacAddress, DisplayString, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeStamp", "RowPointer", "MacAddress", "DisplayString", "DateAndTime", "TruthValue")
timetraServicesMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 4))
timetraServicesMIBModule.setRevisions(('1908-01-01 00:00', '1907-01-01 00:00', '1906-02-28 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1900-08-14 00:00',))
if mibBuilder.loadTexts: timetraServicesMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: timetraServicesMIBModule.setOrganization('Alcatel')
tmnxServObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4))
tmnxCustObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1))
tmnxSvcObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2))
tmnxTstpNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5))
tmnxSvcNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6))
tmnxServConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4))
tmnxCustConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1))
tmnxSvcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2))
tmnxTstpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 5))
tmnxServNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4))
custTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1))
custTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0))
svcTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2))
svcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0))
tstpTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5))
tstpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0))
class ServObjName(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class ServObjDesc(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 80)

class ServObjLongDesc(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 160)

class ServType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 0), ("epipe", 1), ("p3pipe", 2), ("tls", 3), ("vprn", 4), ("ies", 5), ("mirror", 6), ("apipe", 7), ("fpipe", 8), ("ipipe", 9), ("cpipe", 10))

class VpnId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )
class SdpId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 17407), )
class SdpTemplateId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )
class PWTemplateId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )
class SdpBindTlsBpduTranslation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("auto", 1), ("disabled", 2), ("pvst", 3), ("stp", 4), ("cdp", 5), ("vtp", 6))

class TlsLimitMacMoveLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3))

class TlsLimitMacMove(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("blockable", 1), ("nonBlockable", 2))

class SdpBindVcType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("undef", 1), ("ether", 2), ("vlan", 4), ("mirror", 5), ("atmSdu", 6), ("atmCell", 7), ("atmVcc", 8), ("atmVpc", 9), ("frDlci", 10), ("ipipe", 11), ("satopE1", 12), ("satopT1", 13), ("satopE3", 14), ("satopT3", 15), ("cesopsn", 16), ("cesopsnCas", 17))

class StpExceptionCondition(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("oneWayCommuniation", 2), ("downstreamLoopDetected", 3))

class LspIdList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 68)

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class TSapIngQueueId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 32)

class TSapEgrQueueId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 8)

class TStpPortState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("discarding", 7))

class StpPortRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("master", 0), ("root", 1), ("designated", 2), ("alternate", 3), ("backup", 4), ("disabled", 5))

class StpProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("stp", 1), ("rstp", 2), ("mstp", 3))

class MfibLocation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sap", 1), ("sdp", 2))

class MfibGrpSrcFwdOrBlk(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forward", 1), ("block", 2))

class MvplsPruneState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notApplicable", 1), ("notPruned", 2), ("pruned", 3))

class TQosQueueAttribute(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("cbs", 0), ("cir", 1), ("cirAdaptRule", 2), ("mbs", 3), ("pir", 4), ("pirAdaptRule", 5), ("hiPrioOnly", 6), ("avgOverhead", 7))

class TVirtSchedAttribute(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("cir", 0), ("pir", 1), ("summedCir", 2))

class MstiInstanceId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4094)

class MstiInstanceIdOrZero(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4094)

class DhcpLseStateInfoOrigin(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("dhcp", 1), ("radius", 2), ("retailerRadius", 3), ("retailerDhcp", 4), ("default", 5))

class IAIDType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("temporary", 1), ("non-temporary", 2), ("prefix", 3))

class TdmOptionsSigPkts(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noSigPkts", 0), ("dataPkts", 1), ("sigPkts", 2), ("dataAndSigPkts", 3))

class TdmOptionsCasTrunkFraming(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noCas", 0), ("e1Trunk", 1), ("t1EsfTrunk", 2), ("t1SfTrunk", 3))

class CemSapReportAlarm(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("notUsed", 0), ("strayPkts", 1), ("malformedPkts", 2), ("pktLoss", 3), ("bfrOverrun", 4), ("bfrUnderrun", 5), ("rmtPktLoss", 6), ("rmtFault", 7), ("rmtRdi", 8))

class CemSapEcid(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 1048575)

class SdpBFHundredthsOfPercent(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 10000)

class SdpBindBandwidth(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100000000)

class L2ptProtocols(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("stp", 0), ("cdp", 1), ("vtp", 2), ("dtp", 3), ("pagp", 4), ("udld", 5))

class SvcISID(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16777215), )
class L2RouteOrigin(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("manual", 1), ("bgp-l2vpn", 2), ("radius", 3))

class ConfigStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("created", 1), ("modified", 2), ("deleted", 3))

custNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNumEntries.setStatus('current')
custNextFreeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 2), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNextFreeId.setStatus('current')
custInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3), )
if mibBuilder.loadTexts: custInfoTable.setStatus('current')
custInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"))
if mibBuilder.loadTexts: custInfoEntry.setStatus('current')
custId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 1), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custId.setStatus('current')
custRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custRowStatus.setStatus('current')
custDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custDescription.setStatus('current')
custContact = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 4), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custContact.setStatus('current')
custPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custPhone.setStatus('current')
custLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custLastMgmtChange.setStatus('current')
custMultiServiceSiteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4), )
if mibBuilder.loadTexts: custMultiServiceSiteTable.setStatus('current')
custMultiServiceSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultiServiceSiteEntry.setStatus('current')
custMultSvcSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 1), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteName.setStatus('current')
custMultSvcSiteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteRowStatus.setStatus('current')
custMultSvcSiteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteDescription.setStatus('current')
custMultSvcSiteScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("card", 2))).clone('port')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteScope.setStatus('current')
custMultSvcSiteAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteAssignment.setStatus('current')
custMultSvcSiteIngressSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 6), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteIngressSchedulerPolicy.setStatus('current')
custMultSvcSiteEgressSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 7), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteEgressSchedulerPolicy.setStatus('current')
custMultSvcSiteLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteLastMgmtChange.setStatus('current')
custMultSvcSiteTodSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteTodSuite.setStatus('current')
custMultSvcSiteCurrentIngrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 10), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteCurrentIngrSchedPlcy.setStatus('current')
custMultSvcSiteCurrentEgrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 11), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteCurrentEgrSchedPlcy.setStatus('current')
custMultSvcSiteEgressAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 12), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteEgressAggRateLimit.setStatus('current')
custMultSvcSiteIntendedIngrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 13), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteIntendedIngrSchedPlcy.setStatus('current')
custMultSvcSiteIntendedEgrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 14), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteIntendedEgrSchedPlcy.setStatus('current')
custMultSvcSiteFrameBasedAccnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteFrameBasedAccnt.setStatus('current')
custMultiSvcSiteIngStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5), )
if mibBuilder.loadTexts: custMultiSvcSiteIngStatsTable.setStatus('current')
custMultiSvcSiteIngStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosSchedName"))
if mibBuilder.loadTexts: custMultiSvcSiteIngStatsEntry.setStatus('current')
custIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosSchedName.setStatus('current')
custIngQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedPackets.setStatus('current')
custIngQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedOctets.setStatus('current')
custMultiSvcSiteEgrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrStatsTable.setStatus('current')
custMultiSvcSiteEgrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosSchedName"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrStatsEntry.setStatus('current')
custEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosSchedName.setStatus('current')
custEgrQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedPackets.setStatus('current')
custEgrQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedOctets.setStatus('current')
custIngQosPortIdSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7), )
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsTable.setStatus('current')
custIngQosPortIdSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosPortIdSchedName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosAssignmentPortId"))
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsEntry.setStatus('current')
custIngQosPortIdSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosPortIdSchedName.setStatus('current')
custIngQosAssignmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: custIngQosAssignmentPortId.setStatus('current')
custIngQosPortSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortSchedFwdPkts.setStatus('current')
custIngQosPortSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortSchedFwdOctets.setStatus('current')
custEgrQosPortIdSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8), )
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsTable.setStatus('current')
custEgrQosPortIdSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosPortIdSchedName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosAssignmentPortId"))
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsEntry.setStatus('current')
custEgrQosPortIdSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosPortIdSchedName.setStatus('current')
custEgrQosAssignmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: custEgrQosAssignmentPortId.setStatus('current')
custEgrQosPortSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortSchedFwdPkts.setStatus('current')
custEgrQosPortSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortSchedFwdOctets.setStatus('current')
custMssIngQosSchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9), )
if mibBuilder.loadTexts: custMssIngQosSchedInfoTable.setStatus('current')
custMssIngQosSchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSName"))
if mibBuilder.loadTexts: custMssIngQosSchedInfoEntry.setStatus('current')
custMssIngQosSName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custMssIngQosSName.setStatus('current')
custMssIngQosSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSRowStatus.setStatus('current')
custMssIngQosSLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssIngQosSLastMgmtChange.setStatus('current')
custMssIngQosSOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 4), TVirtSchedAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSOverrideFlags.setStatus('current')
custMssIngQosSPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 5), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSPIR.setStatus('current')
custMssIngQosSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 6), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSCIR.setStatus('current')
custMssIngQosSSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSSummedCIR.setStatus('current')
custMssEgrQosSchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10), )
if mibBuilder.loadTexts: custMssEgrQosSchedInfoTable.setStatus('current')
custMssEgrQosSchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSName"))
if mibBuilder.loadTexts: custMssEgrQosSchedInfoEntry.setStatus('current')
custMssEgrQosSName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custMssEgrQosSName.setStatus('current')
custMssEgrQosSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSRowStatus.setStatus('current')
custMssEgrQosSLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssEgrQosSLastMgmtChange.setStatus('current')
custMssEgrQosSOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 4), TVirtSchedAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSOverrideFlags.setStatus('current')
custMssEgrQosSPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 5), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSPIR.setStatus('current')
custMssEgrQosSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 6), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSCIR.setStatus('current')
custMssEgrQosSSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSSummedCIR.setStatus('current')
custMultiSvcSiteIngSchedPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11), )
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyStatsTable.setStatus('current')
custMultiSvcSiteIngSchedPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (1, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"))
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyStatsEntry.setStatus('current')
custIngSchedPlcyStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyStatsFwdPkt.setStatus('current')
custIngSchedPlcyStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyStatsFwdOct.setStatus('current')
custMultiSvcSiteEgrSchedPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyStatsTable.setStatus('current')
custMultiSvcSiteEgrSchedPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (1, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyStatsEntry.setStatus('current')
custEgrSchedPlcyStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyStatsFwdPkt.setStatus('current')
custEgrSchedPlcyStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyStatsFwdOct.setStatus('current')
custMultiSvcSiteIngSchedPlcyPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13), )
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyPortStatsTable.setStatus('current')
custMultiSvcSiteIngSchedPlcyPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsPort"))
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyPortStatsEntry.setStatus('current')
custIngSchedPlcyPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsPort.setStatus('current')
custIngSchedPlcyPortStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsFwdPkt.setStatus('current')
custIngSchedPlcyPortStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsFwdOct.setStatus('current')
custMultiSvcSiteEgrSchedPlcyPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyPortStatsTable.setStatus('current')
custMultiSvcSiteEgrSchedPlcyPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsPort"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyPortStatsEntry.setStatus('current')
custEgrSchedPlcyPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsPort.setStatus('current')
custEgrSchedPlcyPortStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsFwdPkt.setStatus('current')
custEgrSchedPlcyPortStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsFwdOct.setStatus('current')
custCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"))
if mibBuilder.loadTexts: custCreated.setStatus('obsolete')
custDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"))
if mibBuilder.loadTexts: custDeleted.setStatus('obsolete')
custMultSvcSiteCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultSvcSiteCreated.setStatus('obsolete')
custMultSvcSiteDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultSvcSiteDeleted.setStatus('obsolete')
svcNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumEntries.setStatus('current')
svcBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2), )
if mibBuilder.loadTexts: svcBaseInfoTable.setStatus('current')
svcBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcBaseInfoEntry.setStatus('current')
svcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 1), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcId.setStatus('current')
svcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRowStatus.setStatus('current')
svcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 3), ServType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcType.setStatus('current')
svcCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 4), TmnxCustId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcCustId.setStatus('current')
svcIpRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 5), TmnxEnabledDisabled()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIpRouting.setStatus('current')
svcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 6), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcDescription.setStatus('current')
svcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9194))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMtu.setStatus('current')
svcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 8), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcAdminStatus.setStatus('current')
svcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 9), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperStatus.setStatus('current')
svcNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumSaps.setStatus('current')
svcNumSdps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumSdps.setStatus('current')
svcLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLastMgmtChange.setStatus('current')
svcDefMeshVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcDefMeshVcId.setStatus('current')
svcVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 14), VpnId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVpnId.setStatus('current')
svcVRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 15), TmnxVRtrIDOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVRouterId.setStatus('current')
svcAutoBind = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("gre", 2), ("ldp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcAutoBind.setStatus('current')
svcLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLastStatusChange.setStatus('current')
svcVllType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("undef", 1), ("atmSdu", 6), ("atmCell", 7), ("atmVcc", 8), ("atmVpc", 9), ("frDlci", 10), ("satopE1", 12), ("satopT1", 13), ("satopE3", 14), ("satopT3", 15), ("cesopsn", 16), ("cesopsnCas", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllType.setStatus('current')
svcMgmtVpls = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMgmtVpls.setStatus('current')
svcRadiusDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusDiscovery.setStatus('current')
svcRadiusUserNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("vpn-id", 1), ("router-distinguisher", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusUserNameType.setStatus('current')
svcRadiusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusUserName.setStatus('current')
svcVcSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVcSwitching.setStatus('current')
svcRadiusPEDiscPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 24), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusPEDiscPolicy.setStatus('current')
svcRadiusDiscoveryShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 25), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusDiscoveryShutdown.setStatus('current')
svcVplsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bVpls", 2), ("iVpls", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVplsType.setStatus('current')
svcTlsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3), )
if mibBuilder.loadTexts: svcTlsInfoTable.setStatus('current')
svcTlsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcTlsInfoEntry.setStatus('current')
svcTlsMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 1), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacLearning.setStatus('current')
svcTlsDiscardUnknownDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 2), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsDiscardUnknownDest.setStatus('current')
svcTlsFdbTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 196607)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbTableSize.setStatus('current')
svcTlsFdbNumEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumEntries.setStatus('current')
svcTlsFdbNumStaticEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumStaticEntries.setStatus('current')
svcTlsFdbLocalAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbLocalAgeTime.setStatus('current')
svcTlsFdbRemoteAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbRemoteAgeTime.setStatus('current')
svcTlsStpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 8), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpAdminStatus.setStatus('current')
svcTlsStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpPriority.setStatus('current')
svcTlsStpBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpBridgeAddress.setStatus('current')
svcTlsStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpTimeSinceTopologyChange.setStatus('current')
svcTlsStpTopologyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpTopologyChanges.setStatus('current')
svcTlsStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 13), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpDesignatedRoot.setStatus('current')
svcTlsStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpRootCost.setStatus('current')
svcTlsStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpRootPort.setStatus('current')
svcTlsStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpMaxAge.setStatus('current')
svcTlsStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpHelloTime.setStatus('current')
svcTlsStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpHoldTime.setStatus('obsolete')
svcTlsStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpForwardDelay.setStatus('current')
svcTlsStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeMaxAge.setStatus('current')
svcTlsStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeHelloTime.setStatus('current')
svcTlsStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeForwardDelay.setStatus('current')
svcTlsStpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpOperStatus.setStatus('current')
svcTlsStpVirtualRootBridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpVirtualRootBridgeStatus.setStatus('current')
svcTlsMacAgeing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 32), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacAgeing.setStatus('current')
svcTlsStpTopologyChangeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpTopologyChangeActive.setStatus('current')
svcTlsFdbTableFullHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbTableFullHighWatermark.setStatus('current')
svcTlsFdbTableFullLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbTableFullLowWatermark.setStatus('current')
svcTlsVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 36), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsVpnId.setStatus('current')
svcTlsCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 37), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsCustId.setStatus('current')
svcTlsStpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rstp", 2), ("compDot1w", 3), ("dot1w", 4), ("mstp", 5), ("pmstp", 6))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpVersion.setStatus('current')
svcTlsStpHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpHoldCount.setStatus('current')
svcTlsStpPrimaryBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 40), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpPrimaryBridge.setStatus('current')
svcTlsStpBridgeInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpBridgeInstanceId.setStatus('current')
svcTlsStpVcpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 42), StpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpVcpOperProtocol.setStatus('current')
svcTlsMacMoveMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacMoveMaxRate.setStatus('current')
svcTlsMacMoveRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacMoveRetryTimeout.setStatus('current')
svcTlsMacMoveAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 45), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacMoveAdminStatus.setStatus('current')
svcTlsMacRelearnOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 46), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsMacRelearnOnly.setStatus('current')
svcTlsMfibTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMfibTableSize.setStatus('current')
svcTlsMfibTableFullHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMfibTableFullHighWatermark.setStatus('current')
svcTlsMfibTableFullLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMfibTableFullLowWatermark.setStatus('current')
svcTlsMacFlushOnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 50), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacFlushOnFail.setStatus('current')
svcTlsStpRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpRegionName.setStatus('current')
svcTlsStpRegionRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpRegionRevision.setStatus('current')
svcTlsStpBridgeMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeMaxHops.setStatus('current')
svcTlsStpCistRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 54), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistRegionalRoot.setStatus('current')
svcTlsStpCistIntRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistIntRootCost.setStatus('current')
svcTlsStpCistRemainingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistRemainingHopCount.setStatus('current')
svcTlsStpCistRegionalRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistRegionalRootPort.setStatus('current')
svcTlsFdbNumLearnedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumLearnedEntries.setStatus('current')
svcTlsFdbNumOamEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumOamEntries.setStatus('current')
svcTlsFdbNumDhcpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumDhcpEntries.setStatus('current')
svcTlsFdbNumHostEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumHostEntries.setStatus('current')
svcTlsShcvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("remove", 2))).clone('alarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvAction.setStatus('current')
svcTlsShcvSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 63), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvSrcIp.setStatus('current')
svcTlsShcvSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 64), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvSrcMac.setStatus('current')
svcTlsShcvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 65), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvInterval.setStatus('current')
svcTlsPriPortsCumulativeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 66), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsPriPortsCumulativeFactor.setStatus('current')
svcTlsSecPortsCumulativeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 67), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 9)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsSecPortsCumulativeFactor.setStatus('current')
svcTlsL2ptTermEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 68), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsL2ptTermEnabled.setStatus('current')
svcTlsPropagateMacFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 69), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsPropagateMacFlush.setStatus('current')
svcTlsMrpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 70), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpAdminStatus.setStatus('current')
svcTlsMrpMaxAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 71), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpMaxAttributes.setStatus('current')
svcTlsMrpAttributeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 72), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsMrpAttributeCount.setStatus('current')
svcTlsMrpFailedRegisterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 73), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsMrpFailedRegisterCount.setStatus('current')
svcTlsMcPathMgmtPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 74), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMcPathMgmtPlcyName.setStatus('current')
svcTlsMrpFloodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 75), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 600), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpFloodTime.setStatus('current')
svcTlsMrpAttrTblHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpAttrTblHighWatermark.setStatus('current')
svcTlsMrpAttrTblLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpAttrTblLowWatermark.setStatus('current')
tlsFdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4), )
if mibBuilder.loadTexts: tlsFdbInfoTable.setStatus('current')
tlsFdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbMacAddr"))
if mibBuilder.loadTexts: tlsFdbInfoEntry.setStatus('current')
tlsFdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbMacAddr.setStatus('current')
tlsFdbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbRowStatus.setStatus('current')
tlsFdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("static", 1), ("learned", 2), ("oam", 3), ("dhcp", 4), ("host", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbType.setStatus('current')
tlsFdbLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sap", 1), ("sdp", 2), ("cpm", 3), ("endpoint", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbLocale.setStatus('current')
tlsFdbPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 5), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbPortId.setStatus('current')
tlsFdbEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 6), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbEncapValue.setStatus('current')
tlsFdbSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 7), SdpId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbSdpId.setStatus('current')
tlsFdbVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbVcId.setStatus('current')
tlsFdbVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 9), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbVpnId.setStatus('current')
tlsFdbCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 10), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbCustId.setStatus('current')
tlsFdbLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbLastStateChange.setStatus('current')
tlsFdbProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbProtected.setStatus('current')
tlsFdbBackboneDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbBackboneDstMac.setStatus('current')
tlsFdbNumIVplsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbNumIVplsMac.setStatus('current')
tlsFdbEndPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 15), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbEndPointName.setStatus('current')
tlsFdbEPMacOperSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 16), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbEPMacOperSdpId.setStatus('current')
tlsFdbEPMacOperVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbEPMacOperVcId.setStatus('current')
tlsFdbPbbNumEpipes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbPbbNumEpipes.setStatus('current')
iesIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5), )
if mibBuilder.loadTexts: iesIfTable.setStatus('current')
iesIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesIfEntry.setStatus('current')
iesIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfIndex.setStatus('current')
iesIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfRowStatus.setStatus('current')
iesIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 3), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfName.setStatus('current')
iesIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 4), ServObjLongDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfDescription.setStatus('current')
iesIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 5), ServiceAdminStatus().clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfAdminStatus.setStatus('current')
iesIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 6), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfOperStatus.setStatus('current')
iesIfLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfLastMgmtChange.setStatus('current')
iesIfVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 8), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfVpnId.setStatus('current')
iesIfCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 9), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfCustId.setStatus('current')
iesIfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfLoopback.setStatus('current')
iesIfLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfLastStatusChange.setStatus('current')
iesIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("service", 1), ("subscriber", 2), ("group", 3), ("redundant", 4), ("cem", 5), ("ipsec", 6), ("ipMirror", 7))).clone('service')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfType.setStatus('current')
iesIfParentIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfParentIf.setStatus('current')
iesIfShcvSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("vrrp", 2))).clone('interface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvSource.setStatus('current')
iesIfShcvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("remove", 2))).clone('alarm')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvAction.setStatus('current')
iesIfShcvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvInterval.setStatus('current')
iesIfFwdServId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 17), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfFwdServId.setStatus('current')
iesIfFwdSubIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 18), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfFwdSubIf.setStatus('current')
tlsShgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6), )
if mibBuilder.loadTexts: tlsShgInfoTable.setStatus('current')
tlsShgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgName"))
if mibBuilder.loadTexts: tlsShgInfoEntry.setStatus('current')
tlsShgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tlsShgName.setStatus('current')
tlsShgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRowStatus.setStatus('current')
tlsShgCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 3), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgCustId.setStatus('current')
tlsShgInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgInstanceId.setStatus('current')
tlsShgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgDescription.setStatus('current')
tlsShgLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgLastMgmtChange.setStatus('current')
tlsShgResidential = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgResidential.setStatus('current')
tlsShgRestProtSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRestProtSrcMac.setStatus('current')
tlsShgRestUnprotDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRestUnprotDstMac.setStatus('current')
tlsShgRestProtSrcMacAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("alarm-only", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRestProtSrcMacAction.setStatus('current')
tlsShgCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 11), L2RouteOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgCreationOrigin.setStatus('current')
svcApipeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 7), )
if mibBuilder.loadTexts: svcApipeInfoTable.setStatus('current')
svcApipeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcApipeInfoEntry.setStatus('current')
svcApipeInterworking = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("frf-5", 2), ("frf-8-2-translate", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcApipeInterworking.setStatus('current')
tlsMFibInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8), )
if mibBuilder.loadTexts: tlsMFibInfoTable.setStatus('obsolete')
tlsMFibInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoGrpAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoSrcAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoLocale"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoPortId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoSdpId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoVcId"))
if mibBuilder.loadTexts: tlsMFibInfoEntry.setStatus('obsolete')
tlsMFibInfoGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: tlsMFibInfoGrpAddr.setStatus('obsolete')
tlsMFibInfoSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: tlsMFibInfoSrcAddr.setStatus('obsolete')
tlsMFibInfoLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 3), MfibLocation())
if mibBuilder.loadTexts: tlsMFibInfoLocale.setStatus('obsolete')
tlsMFibInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 4), TmnxPortID())
if mibBuilder.loadTexts: tlsMFibInfoPortId.setStatus('obsolete')
tlsMFibInfoEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 5), TmnxEncapVal())
if mibBuilder.loadTexts: tlsMFibInfoEncapValue.setStatus('obsolete')
tlsMFibInfoSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 6), SdpId())
if mibBuilder.loadTexts: tlsMFibInfoSdpId.setStatus('obsolete')
tlsMFibInfoVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 7), Unsigned32())
if mibBuilder.loadTexts: tlsMFibInfoVcId.setStatus('obsolete')
tlsMFibInfoFwdOrBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 8), MfibGrpSrcFwdOrBlk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibInfoFwdOrBlk.setStatus('obsolete')
tlsMFibInfoSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 9), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibInfoSvcId.setStatus('obsolete')
tlsMFibGrpSrcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9), )
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsTable.setStatus('obsolete')
tlsMFibGrpSrcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsGrpAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsSrcAddr"))
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsEntry.setStatus('obsolete')
tlsMFibGrpSrcStatsGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 1), IpAddress())
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsGrpAddr.setStatus('obsolete')
tlsMFibGrpSrcStatsSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 2), IpAddress())
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsSrcAddr.setStatus('obsolete')
tlsMFibGrpSrcStatsForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsForwardedPkts.setStatus('obsolete')
tlsMFibGrpSrcStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsForwardedOctets.setStatus('obsolete')
tlsRdntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10), )
if mibBuilder.loadTexts: tlsRdntGrpTable.setStatus('current')
tlsRdntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpName"))
if mibBuilder.loadTexts: tlsRdntGrpEntry.setStatus('current')
tlsRdntGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tlsRdntGrpName.setStatus('current')
tlsRdntGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsRdntGrpRowStatus.setStatus('current')
tlsRdntGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 3), ServObjDesc().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsRdntGrpDescription.setStatus('current')
tlsRdntGrpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsRdntGrpLastMgmtChange.setStatus('current')
tlsRdntGrpMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11), )
if mibBuilder.loadTexts: tlsRdntGrpMemberTable.setStatus('current')
tlsRdntGrpMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberRemoteNodeAddrTp"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberRemoteNodeAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberIsSap"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberPort"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberEncap"))
if mibBuilder.loadTexts: tlsRdntGrpMemberEntry.setStatus('current')
tlsRdntGrpMemberRemoteNodeAddrTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tlsRdntGrpMemberRemoteNodeAddrTp.setStatus('current')
tlsRdntGrpMemberRemoteNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 2), InetAddress())
if mibBuilder.loadTexts: tlsRdntGrpMemberRemoteNodeAddr.setStatus('current')
tlsRdntGrpMemberIsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 3), TruthValue())
if mibBuilder.loadTexts: tlsRdntGrpMemberIsSap.setStatus('current')
tlsRdntGrpMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 4), TmnxPortID())
if mibBuilder.loadTexts: tlsRdntGrpMemberPort.setStatus('current')
tlsRdntGrpMemberEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 5), TmnxEncapVal())
if mibBuilder.loadTexts: tlsRdntGrpMemberEncap.setStatus('current')
tlsRdntGrpMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsRdntGrpMemberRowStatus.setStatus('current')
tlsRdntGrpMemberLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsRdntGrpMemberLastMgmtChange.setStatus('current')
tlsMstiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12), )
if mibBuilder.loadTexts: tlsMstiTable.setStatus('current')
tlsMstiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiInstanceId"))
if mibBuilder.loadTexts: tlsMstiEntry.setStatus('current')
tlsMstiInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 1), MstiInstanceId())
if mibBuilder.loadTexts: tlsMstiInstanceId.setStatus('current')
tlsMstiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsMstiRowStatus.setStatus('current')
tlsMstiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsMstiPriority.setStatus('current')
tlsMstiLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiLastMgmtChange.setStatus('current')
tlsMstiRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiRegionalRoot.setStatus('current')
tlsMstiIntRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiIntRootCost.setStatus('current')
tlsMstiRemainingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiRemainingHopCount.setStatus('current')
tlsMstiRegionalRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiRegionalRootPort.setStatus('current')
tlsMstiManagedVlanListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13), )
if mibBuilder.loadTexts: tlsMstiManagedVlanListTable.setStatus('current')
tlsMstiManagedVlanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiInstanceId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiMvplsMinVlanTag"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiMvplsMaxVlanTag"))
if mibBuilder.loadTexts: tlsMstiManagedVlanListEntry.setStatus('current')
tlsMstiMvplsMinVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1, 1), QTag())
if mibBuilder.loadTexts: tlsMstiMvplsMinVlanTag.setStatus('current')
tlsMstiMvplsMaxVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1, 2), QTag())
if mibBuilder.loadTexts: tlsMstiMvplsMaxVlanTag.setStatus('current')
tlsMstiMvplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsMstiMvplsRowStatus.setStatus('current')
tlsEgressMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14), )
if mibBuilder.loadTexts: tlsEgressMulticastGroupTable.setStatus('current')
tlsEgressMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1), ).setIndexNames((1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpName"))
if mibBuilder.loadTexts: tlsEgressMulticastGroupEntry.setStatus('current')
tlsEgrMcGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tlsEgrMcGrpName.setStatus('current')
tlsEgrMcGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpRowStatus.setStatus('current')
tlsEgrMcGrpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsEgrMcGrpLastMgmtChange.setStatus('current')
tlsEgrMcGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 4), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpDescription.setStatus('current')
tlsEgrMcGrpChainLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpChainLimit.setStatus('current')
tlsEgrMcGrpEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 10))).clone(namedValues=NamedValues(("unknown", 0), ("nullEncap", 1), ("qEncap", 2), ("qinqEncap", 10))).clone('nullEncap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpEncapType.setStatus('current')
tlsEgrMcGrpDot1qEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpDot1qEtherType.setStatus('current')
tlsEgrMcGrpMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 8), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpMacFilterId.setStatus('current')
tlsEgrMcGrpIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 9), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpIpFilterId.setStatus('current')
tlsEgrMcGrpIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 10), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpIpv6FilterId.setStatus('current')
tlsEgrMcGrpQinqEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpQinqEtherType.setStatus('current')
tlsEgrMcGrpQinqFixedTagPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("topTag", 2), ("bottomTag", 3))).clone('bottomTag')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpQinqFixedTagPosition.setStatus('current')
tlsEgrMcGrpAdminQinqFixedTagVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpAdminQinqFixedTagVal.setStatus('current')
tlsEgrMcGrpOperQinqFixedTagVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsEgrMcGrpOperQinqFixedTagVal.setStatus('current')
svcDhcpLeaseStateTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16), )
if mibBuilder.loadTexts: svcDhcpLeaseStateTable.setStatus('current')
svcDhcpLeaseStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddr"))
if mibBuilder.loadTexts: svcDhcpLeaseStateEntry.setStatus('current')
svcDhcpLseStateCiAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 1), InetAddressType())
if mibBuilder.loadTexts: svcDhcpLseStateCiAddrType.setStatus('current')
svcDhcpLseStateCiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 2), InetAddress())
if mibBuilder.loadTexts: svcDhcpLseStateCiAddr.setStatus('current')
svcDhcpLseStateLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sap", 1), ("sdp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateLocale.setStatus('current')
svcDhcpLseStatePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 4), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePortId.setStatus('current')
svcDhcpLseStateEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 5), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateEncapValue.setStatus('current')
svcDhcpLseStateSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 6), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSdpId.setStatus('current')
svcDhcpLseStateVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateVcId.setStatus('current')
svcDhcpLseStateChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateChAddr.setStatus('current')
svcDhcpLseStateRemainLseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRemainLseTime.setStatus('current')
svcDhcpLseStateOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOption82.setStatus('current')
svcDhcpLseStatePersistKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePersistKey.setStatus('current')
svcDhcpLseStateSubscrIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSubscrIdent.setStatus('current')
svcDhcpLseStateSubProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSubProfString.setStatus('current')
svcDhcpLseStateSlaProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSlaProfString.setStatus('current')
svcDhcpLseStateShcvOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("undefined", 2), ("down", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvOperState.setStatus('current')
svcDhcpLseStateShcvChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvChecks.setStatus('current')
svcDhcpLseStateShcvReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvReplies.setStatus('current')
svcDhcpLseStateShcvReplyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvReplyTime.setStatus('current')
svcDhcpLseStateClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateClientId.setStatus('current')
svcDhcpLseStateIAID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateIAID.setStatus('current')
svcDhcpLseStateIAIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 21), IAIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateIAIDType.setStatus('current')
svcDhcpLseStateCiAddrMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateCiAddrMaskLen.setStatus('current')
svcDhcpLseStateRetailerSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 23), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRetailerSvcId.setStatus('current')
svcDhcpLseStateRetailerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 24), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRetailerIf.setStatus('current')
svcDhcpLseStateAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateAncpString.setStatus('current')
svcDhcpLseStateFramedIpNetMaskTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 26), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateFramedIpNetMaskTp.setStatus('current')
svcDhcpLseStateFramedIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 27), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateFramedIpNetMask.setStatus('current')
svcDhcpLseStateBCastIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 28), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBCastIpAddrType.setStatus('current')
svcDhcpLseStateBCastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 29), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBCastIpAddr.setStatus('current')
svcDhcpLseStateDefaultRouterTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 30), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDefaultRouterTp.setStatus('current')
svcDhcpLseStateDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 31), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDefaultRouter.setStatus('current')
svcDhcpLseStatePrimaryDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 32), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryDnsType.setStatus('current')
svcDhcpLseStatePrimaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 33), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryDns.setStatus('current')
svcDhcpLseStateSecondaryDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 34), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryDnsType.setStatus('current')
svcDhcpLseStateSecondaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 35), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryDns.setStatus('current')
svcDhcpLseStateSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSessionTimeout.setStatus('current')
svcDhcpLseStateServerLeaseStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateServerLeaseStart.setStatus('current')
svcDhcpLseStateServerLastRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateServerLastRenew.setStatus('current')
svcDhcpLseStateServerLeaseEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateServerLeaseEnd.setStatus('current')
svcDhcpLseStateDhcpServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 40), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpServerAddrType.setStatus('current')
svcDhcpLseStateDhcpServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 41), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpServerAddr.setStatus('current')
svcDhcpLseStateOriginSubscrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 42), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOriginSubscrId.setStatus('current')
svcDhcpLseStateOriginStrings = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 43), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOriginStrings.setStatus('current')
svcDhcpLseStateOriginLeaseInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 44), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOriginLeaseInfo.setStatus('current')
svcDhcpLseStateDhcpClientAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 45), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpClientAddrType.setStatus('current')
svcDhcpLseStateDhcpClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 46), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpClientAddr.setStatus('current')
svcDhcpLseStateLeaseSplitActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 47), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateLeaseSplitActive.setStatus('current')
svcDhcpLseStateInterDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateInterDestId.setStatus('current')
svcDhcpLseStatePrimaryNbnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 49), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryNbnsType.setStatus('current')
svcDhcpLseStatePrimaryNbns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 50), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryNbns.setStatus('current')
svcDhcpLseStateSecondaryNbnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 51), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryNbnsType.setStatus('current')
svcDhcpLseStateSecondaryNbns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryNbns.setStatus('current')
svcDhcpLseStateAppProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateAppProfString.setStatus('current')
svcDhcpLseStateNextHopMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 54), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateNextHopMacAddr.setStatus('current')
tlsProtectedMacTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17), )
if mibBuilder.loadTexts: tlsProtectedMacTable.setStatus('current')
tlsProtectedMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsProtMacAddress"))
if mibBuilder.loadTexts: tlsProtectedMacEntry.setStatus('current')
tlsProtMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1, 1), MacAddress())
if mibBuilder.loadTexts: tlsProtMacAddress.setStatus('current')
tlsProtMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsProtMacRowStatus.setStatus('current')
tlsProtMacLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsProtMacLastMgmtChange.setStatus('current')
svcDhcpLeaseStateModifyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18), )
if mibBuilder.loadTexts: svcDhcpLeaseStateModifyTable.setStatus('current')
svcDhcpLeaseStateModifyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1), )
svcDhcpLeaseStateEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLeaseStateModifyEntry"))
svcDhcpLeaseStateModifyEntry.setIndexNames(*svcDhcpLeaseStateEntry.getIndexNames())
if mibBuilder.loadTexts: svcDhcpLeaseStateModifyEntry.setStatus('current')
svcDhcpLseStateModifySubIndent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifySubIndent.setStatus('current')
svcDhcpLseStateModifySubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifySubProfile.setStatus('current')
svcDhcpLseStateModifySlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifySlaProfile.setStatus('current')
svcDhcpLseStateEvaluateState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateEvaluateState.setStatus('current')
svcDhcpLseStateModInterDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModInterDestId.setStatus('current')
svcDhcpLseStateModifyAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 6), TmnxAncpStringOrZero().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifyAncpString.setStatus('current')
svcDhcpLseStateModifyAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifyAppProfile.setStatus('current')
svcEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19), )
if mibBuilder.loadTexts: svcEndPointTable.setStatus('current')
svcEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointName"))
if mibBuilder.loadTexts: svcEndPointEntry.setStatus('current')
svcEndPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcEndPointName.setStatus('current')
svcEndPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointRowStatus.setStatus('current')
svcEndPointDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointDescription.setStatus('current')
svcEndPointRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 600), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointRevertTime.setStatus('current')
svcEndPointTxActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("sap", 1), ("sdpBind", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveType.setStatus('current')
svcEndPointTxActivePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 6), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActivePortId.setStatus('current')
svcEndPointTxActiveEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 7), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveEncap.setStatus('current')
svcEndPointTxActiveSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 8), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveSdpId.setStatus('current')
svcEndPointForceSwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 9), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointForceSwitchOver.setStatus('current')
svcEndPointForceSwitchOverSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 10), SdpBindId().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointForceSwitchOverSdpId.setStatus('current')
svcEndPointActiveHoldDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('deci-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointActiveHoldDelay.setStatus('current')
svcEndPointIgnoreStandbySig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointIgnoreStandbySig.setStatus('current')
svcEndPointMacPinning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 13), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointMacPinning.setStatus('current')
svcEndPointMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 196607))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointMacLimit.setStatus('current')
svcEndPointSuppressStandbySig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 15), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointSuppressStandbySig.setStatus('current')
svcEndPointRevertTimeCountDn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 600), ))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointRevertTimeCountDn.setStatus('current')
svcEndPointTxActiveChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveChangeCount.setStatus('current')
svcEndPointTxActiveLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveLastChange.setStatus('current')
svcEndPointTxActiveUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveUpTime.setStatus('current')
iesGrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21), )
if mibBuilder.loadTexts: iesGrpIfTable.setStatus('current')
iesGrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesGrpIfEntry.setStatus('current')
iesGrpIfRedInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesGrpIfRedInterface.setStatus('current')
iesGrpIfOperUpWhileEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesGrpIfOperUpWhileEmpty.setStatus('current')
svcPEDiscoveryPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22), )
if mibBuilder.loadTexts: svcPEDiscoveryPolicyTable.setStatus('current')
svcPEDiscoveryPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1), ).setIndexNames((1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyName"))
if mibBuilder.loadTexts: svcPEDiscoveryPolicyEntry.setStatus('current')
svcPEDiscoveryPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcPEDiscoveryPolicyName.setStatus('current')
svcPEDiscoveryPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyRowStatus.setStatus('current')
svcPEDiscoveryPolicyPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyPassword.setStatus('current')
svcPEDiscoveryPolicyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyInterval.setStatus('current')
svcPEDiscoveryPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 90)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyTimeout.setStatus('current')
svcPEDiscPolServerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23), )
if mibBuilder.loadTexts: svcPEDiscPolServerTable.setStatus('current')
svcPEDiscPolServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerIndex"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyName"))
if mibBuilder.loadTexts: svcPEDiscPolServerEntry.setStatus('current')
svcPEDiscPolServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: svcPEDiscPolServerIndex.setStatus('current')
svcPEDiscPolServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerRowStatus.setStatus('current')
svcPEDiscPolServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 3), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerAddressType.setStatus('current')
svcPEDiscPolServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 4), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerAddress.setStatus('current')
svcPEDiscPolServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerSecret.setStatus('current')
svcPEDiscPolServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 6), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPEDiscPolServerOperStatus.setStatus('current')
svcPEDiscPolServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerPort.setStatus('current')
svcWholesalerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24), )
if mibBuilder.loadTexts: svcWholesalerInfoTable.setStatus('current')
svcWholesalerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcWholesalerID"))
if mibBuilder.loadTexts: svcWholesalerInfoEntry.setStatus('current')
svcWholesalerID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 1), TmnxServId())
if mibBuilder.loadTexts: svcWholesalerID.setStatus('current')
svcWholesalerNumStaticHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcWholesalerNumStaticHosts.setStatus('current')
svcWholesalerNumDynamicHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcWholesalerNumDynamicHosts.setStatus('current')
svcDhcpLeaseStateActionTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 25), )
if mibBuilder.loadTexts: svcDhcpLeaseStateActionTable.setStatus('current')
svcDhcpLeaseStateActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 25, 1), )
svcDhcpLeaseStateEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLeaseStateActionEntry"))
svcDhcpLeaseStateActionEntry.setIndexNames(*svcDhcpLeaseStateEntry.getIndexNames())
if mibBuilder.loadTexts: svcDhcpLeaseStateActionEntry.setStatus('current')
svcDhcpLseStateForceRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 25, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateForceRenew.setStatus('current')
svcIfDHCP6MsgStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26), )
if mibBuilder.loadTexts: svcIfDHCP6MsgStatTable.setStatus('current')
svcIfDHCP6MsgStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: svcIfDHCP6MsgStatEntry.setStatus('current')
svcIfDHCP6MsgStatsLstClrd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsLstClrd.setStatus('current')
svcIfDHCP6MsgStatsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsRcvd.setStatus('current')
svcIfDHCP6MsgStatsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsSent.setStatus('current')
svcIfDHCP6MsgStatsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsDropped.setStatus('current')
svcTlsBackboneInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27), )
if mibBuilder.loadTexts: svcTlsBackboneInfoTable.setStatus('current')
svcTlsBackboneInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1), )
svcTlsInfoEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneInfoEntry"))
svcTlsBackboneInfoEntry.setIndexNames(*svcTlsInfoEntry.getIndexNames())
if mibBuilder.loadTexts: svcTlsBackboneInfoEntry.setStatus('current')
svcTlsBackboneSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneSrcMac.setStatus('current')
svcTlsBackboneVplsSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 2), TmnxServId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneVplsSvcId.setStatus('current')
svcTlsBackboneVplsSvcISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 3), SvcISID().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneVplsSvcISID.setStatus('current')
svcTlsBackboneOperSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBackboneOperSrcMac.setStatus('current')
svcTlsBackboneOperVplsSvcISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 5), SvcISID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBackboneOperVplsSvcISID.setStatus('current')
svcTlsBackboneLDPMacFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneLDPMacFlush.setStatus('current')
svcTlsBackboneVplsStp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 7), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneVplsStp.setStatus('current')
tlsMFibTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28), )
if mibBuilder.loadTexts: tlsMFibTable.setStatus('current')
tlsMFibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibEntryType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpMacAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpInetAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpInetAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibSrcInetAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibSrcInetAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibLocale"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibPortId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibSdpId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibVcId"))
if mibBuilder.loadTexts: tlsMFibEntry.setStatus('current')
tlsMFibEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipBased", 1), ("macBased", 2))))
if mibBuilder.loadTexts: tlsMFibEntryType.setStatus('current')
tlsMFibGrpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 2), MacAddress())
if mibBuilder.loadTexts: tlsMFibGrpMacAddr.setStatus('current')
tlsMFibGrpInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 3), InetAddressType())
if mibBuilder.loadTexts: tlsMFibGrpInetAddrType.setStatus('current')
tlsMFibGrpInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibGrpInetAddr.setStatus('current')
tlsMFibSrcInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 5), InetAddressType())
if mibBuilder.loadTexts: tlsMFibSrcInetAddrType.setStatus('current')
tlsMFibSrcInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibSrcInetAddr.setStatus('current')
tlsMFibLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 7), MfibLocation())
if mibBuilder.loadTexts: tlsMFibLocale.setStatus('current')
tlsMFibPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 8), TmnxPortID())
if mibBuilder.loadTexts: tlsMFibPortId.setStatus('current')
tlsMFibEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 9), TmnxEncapVal())
if mibBuilder.loadTexts: tlsMFibEncapValue.setStatus('current')
tlsMFibSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 10), SdpId())
if mibBuilder.loadTexts: tlsMFibSdpId.setStatus('current')
tlsMFibVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 11), Unsigned32())
if mibBuilder.loadTexts: tlsMFibVcId.setStatus('current')
tlsMFibFwdOrBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 12), MfibGrpSrcFwdOrBlk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibFwdOrBlk.setStatus('current')
tlsMFibSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 13), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibSvcId.setStatus('current')
tlsMFibStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29), )
if mibBuilder.loadTexts: tlsMFibStatsTable.setStatus('current')
tlsMFibStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsEntryType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsGrpMacAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsGrpInetAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsGrpInetAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsSrcInetAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsSrcInetAddr"))
if mibBuilder.loadTexts: tlsMFibStatsEntry.setStatus('current')
tlsMFibStatsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipBased", 1), ("macBased", 2))))
if mibBuilder.loadTexts: tlsMFibStatsEntryType.setStatus('current')
tlsMFibStatsGrpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 2), MacAddress())
if mibBuilder.loadTexts: tlsMFibStatsGrpMacAddr.setStatus('current')
tlsMFibStatsGrpInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 3), InetAddressType())
if mibBuilder.loadTexts: tlsMFibStatsGrpInetAddrType.setStatus('current')
tlsMFibStatsGrpInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibStatsGrpInetAddr.setStatus('current')
tlsMFibStatsSrcInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 5), InetAddressType())
if mibBuilder.loadTexts: tlsMFibStatsSrcInetAddrType.setStatus('current')
tlsMFibStatsSrcInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibStatsSrcInetAddr.setStatus('current')
tlsMFibStatsForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibStatsForwardedPkts.setStatus('current')
tlsMFibStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibStatsForwardedOctets.setStatus('current')
svcTlsBgpADTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADTableLastChanged.setStatus('current')
svcTlsBgpADTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31), )
if mibBuilder.loadTexts: svcTlsBgpADTable.setStatus('current')
svcTlsBgpADEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcTlsBgpADEntry.setStatus('current')
svcTlsBgpADRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADRowStatus.setStatus('current')
svcTlsBgpADLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADLastChanged.setStatus('current')
svcTlsBgpADVplsId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 3), TmnxVPNRouteDistinguisher().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVplsId.setStatus('current')
svcTlsBgpADVsiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiPrefix.setStatus('current')
svcTlsBgpADVsiRD = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 5), TmnxVPNRouteDistinguisher().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiRD.setStatus('current')
svcTlsBgpADExportRteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADExportRteTarget.setStatus('current')
svcTlsBgpADVsiExportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 7), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy1.setStatus('current')
svcTlsBgpADVsiExportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 8), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy2.setStatus('current')
svcTlsBgpADVsiExportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 9), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy3.setStatus('current')
svcTlsBgpADVsiExportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 10), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy4.setStatus('current')
svcTlsBgpADVsiExportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 11), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy5.setStatus('current')
svcTlsBgpADImportRteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 12), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADImportRteTarget.setStatus('current')
svcTlsBgpADVsiImportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 13), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy1.setStatus('current')
svcTlsBgpADVsiImportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 14), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy2.setStatus('current')
svcTlsBgpADVsiImportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 15), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy3.setStatus('current')
svcTlsBgpADVsiImportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 16), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy4.setStatus('current')
svcTlsBgpADVsiImportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 17), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy5.setStatus('current')
svcTlsBgpADAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 18), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADAdminStatus.setStatus('current')
svcEpipePbbTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 36), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipePbbTableLastChanged.setStatus('current')
svcEpipePbbTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37), )
if mibBuilder.loadTexts: svcEpipePbbTable.setStatus('current')
svcEpipePbbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcEpipePbbEntry.setStatus('current')
svcEpipePbbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbRowStatus.setStatus('current')
svcEpipePbbLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipePbbLastChngd.setStatus('current')
svcEpipePbbBvplsSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 3), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbBvplsSvcId.setStatus('current')
svcEpipePbbBvplsDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbBvplsDstMac.setStatus('current')
svcEpipePbbSvcISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 5), SvcISID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbSvcISID.setStatus('current')
tlsPipInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40), )
if mibBuilder.loadTexts: tlsPipInfoTable.setStatus('current')
tlsPipInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: tlsPipInfoEntry.setStatus('current')
tlsPipStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 1), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpPortState.setStatus('current')
tlsPipStpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 2), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpPortRole.setStatus('current')
tlsPipStpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpDesignatedBridge.setStatus('current')
tlsPipStpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpDesignatedPort.setStatus('current')
tlsPipStpException = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 5), StpExceptionCondition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpException.setStatus('current')
tlsPipStpForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpForwardTransitions.setStatus('current')
tlsPipStpInConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInConfigBpdus.setStatus('current')
tlsPipStpInTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInTcnBpdus.setStatus('current')
tlsPipStpInRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInRstBpdus.setStatus('current')
tlsPipStpInMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInMstBpdus.setStatus('current')
tlsPipStpInBadBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInBadBpdus.setStatus('current')
tlsPipStpOutConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutConfigBpdus.setStatus('current')
tlsPipStpOutTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutTcnBpdus.setStatus('current')
tlsPipStpOutRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutRstBpdus.setStatus('current')
tlsPipStpOutMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutMstBpdus.setStatus('current')
tlsPipStpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 16), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOperStatus.setStatus('current')
tlsPipStpMvplsPruneState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 17), MvplsPruneState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpMvplsPruneState.setStatus('current')
tlsPipStpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 18), StpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOperProtocol.setStatus('current')
tlsPipStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpPortNum.setStatus('current')
tlsPipMstiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41), )
if mibBuilder.loadTexts: tlsPipMstiTable.setStatus('current')
tlsPipMstiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiInstanceId"))
if mibBuilder.loadTexts: tlsPipMstiEntry.setStatus('current')
tlsPipMstiPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 1), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiPortRole.setStatus('current')
tlsPipMstiPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 2), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiPortState.setStatus('current')
tlsPipMstiDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiDesignatedBridge.setStatus('current')
tlsPipMstiDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiDesignatedPort.setStatus('current')
svcTotalFdbMimDestIdxEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalFdbMimDestIdxEntries.setStatus('current')
svcDhcpManagedRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43), )
if mibBuilder.loadTexts: svcDhcpManagedRouteTable.setStatus('current')
svcDhcpManagedRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpManagedRouteInetAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpManagedRouteInetAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpManagedRoutePrefixLen"))
if mibBuilder.loadTexts: svcDhcpManagedRouteEntry.setStatus('current')
svcDhcpManagedRouteInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 1), InetAddressType())
if mibBuilder.loadTexts: svcDhcpManagedRouteInetAddrType.setStatus('current')
svcDhcpManagedRouteInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 2), InetAddress())
if mibBuilder.loadTexts: svcDhcpManagedRouteInetAddr.setStatus('current')
svcDhcpManagedRoutePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: svcDhcpManagedRoutePrefixLen.setStatus('current')
svcDhcpManagedRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 4), TmnxManagedRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpManagedRouteStatus.setStatus('current')
macPinningMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningMacAddress.setStatus('current')
macPinningPinnedRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 2), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningPinnedRow.setStatus('current')
macPinningPinnedRowDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningPinnedRowDescr.setStatus('current')
macPinningViolatingRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 4), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningViolatingRow.setStatus('current')
macPinningViolatingRowDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningViolatingRowDescr.setStatus('current')
tlsDHCPClientLease = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDHCPClientLease.setStatus('obsolete')
tlsDhcpLseStateOldCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateOldCiAddr.setStatus('obsolete')
tlsDhcpLseStateOldChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 8), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateOldChAddr.setStatus('obsolete')
tlsDhcpLseStateNewCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateNewCiAddr.setStatus('obsolete')
tlsDhcpLseStateNewChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 10), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateNewChAddr.setStatus('obsolete')
tlsDhcpRestoreLseStateCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateCiAddr.setStatus('obsolete')
tlsDhcpRestoreLseStateSvcId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 12), TmnxServId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateSvcId.setStatus('obsolete')
tlsDhcpRestoreLseStatePortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 13), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStatePortId.setStatus('obsolete')
tlsDhcpRestoreLseStateEncapVal = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 14), TmnxEncapVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateEncapVal.setStatus('obsolete')
tlsDhcpRestoreLseStateProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateProblem.setStatus('obsolete')
tlsDhcpPacketProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpPacketProblem.setStatus('obsolete')
tlsDhcpLseStatePopulateError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 17), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStatePopulateError.setStatus('obsolete')
svcDhcpRestoreLseStateCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 18), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpRestoreLseStateCiAddr.setStatus('current')
svcDhcpRestoreLseStateProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpRestoreLseStateProblem.setStatus('current')
svcDhcpLseStateOldCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 20), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateOldCiAddr.setStatus('current')
svcDhcpLseStateOldChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 21), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateOldChAddr.setStatus('current')
svcDhcpLseStateNewCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 22), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateNewCiAddr.setStatus('current')
svcDhcpLseStateNewChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 23), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateNewChAddr.setStatus('current')
svcDhcpClientLease = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 24), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpClientLease.setStatus('current')
svcDhcpPacketProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 25), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpPacketProblem.setStatus('current')
svcDhcpLseStatePopulateError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 26), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStatePopulateError.setStatus('current')
hostConnectivityCiAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 27), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hostConnectivityCiAddrType.setStatus('current')
hostConnectivityCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 28), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hostConnectivityCiAddr.setStatus('current')
hostConnectivityChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 29), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hostConnectivityChAddr.setStatus('current')
protectedMacForNotify = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 30), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: protectedMacForNotify.setStatus('current')
staticHostDynamicMacIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 31), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: staticHostDynamicMacIpAddress.setStatus('current')
staticHostDynamicMacConflict = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 32), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: staticHostDynamicMacConflict.setStatus('current')
tmnxSvcObjRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 33), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSvcObjRow.setStatus('current')
tmnxSvcObjRowDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 34), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSvcObjRowDescr.setStatus('current')
tmnxSvcObjTodSuite = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 35), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSvcObjTodSuite.setStatus('current')
tmnxFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 36), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxFailureDescription.setStatus('current')
svcDhcpProxyError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 37), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpProxyError.setStatus('current')
svcDhcpCoAError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 38), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpCoAError.setStatus('current')
svcDhcpSubAuthError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 39), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpSubAuthError.setStatus('current')
svcTlsMrpAttrRegFailedReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("attribute-limit-reached", 2), ("system-attr-limit-reached", 3), ("unsupported-attribute", 4), ("mfib-entry-create-failed", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcTlsMrpAttrRegFailedReason.setStatus('current')
svcTlsMrpAttrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcTlsMrpAttrType.setStatus('current')
svcTlsMrpAttrValue = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcTlsMrpAttrValue.setStatus('current')
svcMstiInstanceId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 43), MstiInstanceId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcMstiInstanceId.setStatus('current')
svcCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcType"))
if mibBuilder.loadTexts: svcCreated.setStatus('obsolete')
svcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcDeleted.setStatus('obsolete')
svcStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcOperStatus"))
if mibBuilder.loadTexts: svcStatusChanged.setStatus('current')
svcTlsFdbTableFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsFdbTableFullAlarmRaised.setStatus('current')
svcTlsFdbTableFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsFdbTableFullAlarmCleared.setStatus('current')
iesIfCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesIfCreated.setStatus('obsolete')
iesIfDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesIfDeleted.setStatus('obsolete')
iesIfStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfOperStatus"))
if mibBuilder.loadTexts: iesIfStatusChanged.setStatus('current')
svcTlsMfibTableFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMfibTableFullAlarmRaised.setStatus('current')
svcTlsMfibTableFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMfibTableFullAlarmCleared.setStatus('current')
svcTlsMacPinningViolation = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningMacAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningPinnedRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningPinnedRowDescr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningViolatingRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningViolatingRowDescr"))
if mibBuilder.loadTexts: svcTlsMacPinningViolation.setStatus('current')
svcTlsDHCPLseStRestoreProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStatePortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateEncapVal"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateProblem"))
if mibBuilder.loadTexts: svcTlsDHCPLseStRestoreProblem.setStatus('obsolete')
svcTlsDHCPLseStatePopulateErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStatePopulateError"))
if mibBuilder.loadTexts: svcTlsDHCPLseStatePopulateErr.setStatus('obsolete')
svcDHCPLseStateRestoreProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateProblem"))
if mibBuilder.loadTexts: svcDHCPLseStateRestoreProblem.setStatus('current')
tmnxSvcObjTodSuiteApplicFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjRowDescr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjTodSuite"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxFailureDescription"))
if mibBuilder.loadTexts: tmnxSvcObjTodSuiteApplicFailed.setStatus('current')
tmnxEndPointTxActiveChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActivePortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveEncap"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveSdpId"))
if mibBuilder.loadTexts: tmnxEndPointTxActiveChanged.setStatus('current')
tmnxSvcPEDiscPolServOperStatChg = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerAddressType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerOperStatus"))
if mibBuilder.loadTexts: tmnxSvcPEDiscPolServOperStatChg.setStatus('current')
svcEndPointMacLimitAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacLimit"))
if mibBuilder.loadTexts: svcEndPointMacLimitAlarmRaised.setStatus('current')
svcEndPointMacLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacLimit"))
if mibBuilder.loadTexts: svcEndPointMacLimitAlarmCleared.setStatus('current')
svcTlsMrpAttrRegistrationFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrRegFailedReason"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrValue"))
if mibBuilder.loadTexts: svcTlsMrpAttrRegistrationFailed.setStatus('current')
svcFdbMimDestTblFullAlrm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 21)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTotalFdbMimDestIdxEntries"))
if mibBuilder.loadTexts: svcFdbMimDestTblFullAlrm.setStatus('current')
svcFdbMimDestTblFullAlrmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 22)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTotalFdbMimDestIdxEntries"))
if mibBuilder.loadTexts: svcFdbMimDestTblFullAlrmCleared.setStatus('current')
svcDHCPMiscellaneousProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 23)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxFailureDescription"))
if mibBuilder.loadTexts: svcDHCPMiscellaneousProblem.setStatus('current')
svcPersistencyProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 24)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxFailureDescription"))
if mibBuilder.loadTexts: svcPersistencyProblem.setStatus('current')
svcTlsMrpAttrTblFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 25)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMrpAttrTblFullAlarmRaised.setStatus('current')
svcTlsMrpAttrTblFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 26)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMrpAttrTblFullAlarmCleared.setStatus('current')
tmnxCustomerBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 1), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCustomerBridgeId.setStatus('current')
tmnxCustomerRootBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 2), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCustomerRootBridgeId.setStatus('current')
tmnxOtherBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 3), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxOtherBridgeId.setStatus('current')
tmnxOldSdpBindTlsStpPortState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 4), TStpPortState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxOldSdpBindTlsStpPortState.setStatus('current')
tmnxVcpState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 5), TStpPortState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxVcpState.setStatus('current')
topologyChangeVcpState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxVcpState"))
if mibBuilder.loadTexts: topologyChangeVcpState.setStatus('current')
newRootVcpState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: newRootVcpState.setStatus('current')
newRootBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: newRootBridge.setStatus('current')
vcpActiveProtocolChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 32)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpVcpOperProtocol"))
if mibBuilder.loadTexts: vcpActiveProtocolChange.setStatus('current')
tmnxNewCistRegionalRootBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 33)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpCistRegionalRoot"))
if mibBuilder.loadTexts: tmnxNewCistRegionalRootBridge.setStatus('current')
tmnxNewMstiRegionalRootBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 34)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcMstiInstanceId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiRegionalRoot"))
if mibBuilder.loadTexts: tmnxNewMstiRegionalRootBridge.setStatus('current')
topologyChangePipMajorState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 39)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: topologyChangePipMajorState.setStatus('current')
topologyChangePipState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 40)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: topologyChangePipState.setStatus('current')
tmnxPipStpExcepCondStateChng = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 41)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpException"))
if mibBuilder.loadTexts: tmnxPipStpExcepCondStateChng.setStatus('current')
pipActiveProtocolChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 42)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: pipActiveProtocolChange.setStatus('current')
tmnxCustCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 1))
tmnxCustGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 2))
tmnxSvcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1))
tmnxSvcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2))
tmnxTstpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 5, 1))
tmnxTstpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 5, 2))
tmnxCustCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 1, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCustCompliance = tmnxCustCompliance.setStatus('current')
tmnxSvc7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7450V6v0Compliance = tmnxSvc7450V6v0Compliance.setStatus('current')
tmnxSvc7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 101)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7750V6v0Compliance = tmnxSvc7750V6v0Compliance.setStatus('current')
tmnxSvc7710V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 102)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7710V6v0Compliance = tmnxSvc7710V6v0Compliance.setStatus('current')
tmnxCustV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 2, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custNumEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custNextFreeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custContact"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custPhone"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteScope"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteAssignment"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteIngressSchedulerPolicy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteEgressSchedulerPolicy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteTodSuite"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteCurrentIngrSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteCurrentEgrSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteEgressAggRateLimit"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteIntendedIngrSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteIntendedEgrSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteFrameBasedAccnt"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosSchedStatsForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosSchedStatsForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosSchedStatsForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosSchedStatsForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosPortSchedFwdPkts"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosPortSchedFwdOctets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosPortSchedFwdPkts"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosPortSchedFwdOctets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSPIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSCIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSSummedCIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSPIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSCIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSSummedCIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngSchedPlcyStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngSchedPlcyStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrSchedPlcyStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrSchedPlcyStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsFwdOct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCustV6v0Group = tmnxCustV6v0Group.setStatus('current')
tmnxSvcV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 101)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcNumEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcCustId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcIpRouting"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcMtu"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcOperStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcNumSaps"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcNumSdps"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDefMeshVcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVRouterId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcAutoBind"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcLastStatusChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVllType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcMgmtVpls"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRadiusDiscovery"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRadiusUserName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRadiusUserNameType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVcSwitching"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRadiusPEDiscPolicy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRadiusDiscoveryShutdown"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVplsType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTotalFdbMimDestIdxEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcV6v0Group = tmnxSvcV6v0Group.setStatus('current')
tmnxSvcTlsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 102)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacLearning"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsDiscardUnknownDest"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbTableSize"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumStaticEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbLocalAgeTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbRemoteAgeTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpPriority"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpTimeSinceTopologyChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpTopologyChanges"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpDesignatedRoot"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpRootCost"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpRootPort"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpMaxAge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpHelloTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpForwardDelay"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeMaxAge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeHelloTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeForwardDelay"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpOperStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpVirtualRootBridgeStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacAgeing"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpTopologyChangeActive"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbTableFullHighWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbTableFullLowWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsCustId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpVersion"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpHoldCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpPrimaryBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeInstanceId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpVcpOperProtocol"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacMoveMaxRate"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacMoveRetryTimeout"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacMoveAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacRelearnOnly"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMfibTableSize"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMfibTableFullHighWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMfibTableFullLowWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacFlushOnFail"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpRegionName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpRegionRevision"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeMaxHops"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpCistRegionalRoot"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpCistIntRootCost"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpCistRemainingHopCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpCistRegionalRootPort"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumLearnedEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumOamEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumDhcpEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumHostEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsShcvAction"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsShcvSrcIp"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsShcvSrcMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsShcvInterval"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsPriPortsCumulativeFactor"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsSecPortsCumulativeFactor"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsL2ptTermEnabled"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsPropagateMacFlush"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpMaxAttributes"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttributeCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpFailedRegisterCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpFloodTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrTblHighWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrTblLowWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMcPathMgmtPlcyName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpAdminQinqFixedTagVal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsV6v0Group = tmnxSvcTlsV6v0Group.setStatus('current')
tmnxSvcTlsFdbV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 103)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbMacAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbLocale"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbPortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbSdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbVcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbCustId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbLastStateChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbProtected"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbBackboneDstMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbNumIVplsMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbEndPointName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbEPMacOperSdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbEPMacOperVcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbPbbNumEpipes"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsProtMacRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsProtMacLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsFdbV6v0Group = tmnxSvcTlsFdbV6v0Group.setStatus('current')
tmnxSvcIesIfV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 104)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfOperStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfCustId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfLoopback"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfLastStatusChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfShcvSource"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfShcvAction"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfShcvInterval"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesGrpIfOperUpWhileEmpty"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIesIfV6v0Group = tmnxSvcIesIfV6v0Group.setStatus('current')
tmnxSvcTlsShgV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 105)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgCustId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgInstanceId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgResidential"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgRestProtSrcMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgRestUnprotDstMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgRestProtSrcMacAction"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgCreationOrigin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsShgV6v0Group = tmnxSvcTlsShgV6v0Group.setStatus('current')
tmnxSvcTlsMFibV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 106)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibFwdOrBlk"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsForwardedPkts"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsForwardedOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsMFibV6v0Group = tmnxSvcTlsMFibV6v0Group.setStatus('current')
tmnxSvcRdntV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 107)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRdntV6v0Group = tmnxSvcRdntV6v0Group.setStatus('current')
tmnxSvcTlsMstiV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 108)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiPriority"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiRegionalRoot"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiIntRootCost"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiRemainingHopCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiRegionalRootPort"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiMvplsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsMstiV6v0Group = tmnxSvcTlsMstiV6v0Group.setStatus('current')
tmnxSvcTlsEgrV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 109)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpChainLimit"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpEncapType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpDot1qEtherType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpQinqEtherType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpMacFilterId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpIpFilterId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpQinqFixedTagPosition"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpOperQinqFixedTagVal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsEgrV6v0Group = tmnxSvcTlsEgrV6v0Group.setStatus('current')
tmnxSvcDhcpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 110)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateLocale"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateVcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateRemainLseTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOption82"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePersistKey"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSubscrIdent"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSubProfString"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSlaProfString"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateShcvOperState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateShcvChecks"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateShcvReplies"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateShcvReplyTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateClientId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateIAID"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateIAIDType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrMaskLen"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateRetailerSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateRetailerIf"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateAncpString"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateFramedIpNetMaskTp"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateFramedIpNetMask"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateBCastIpAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateBCastIpAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDefaultRouterTp"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDefaultRouter"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryDnsType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryDns"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryDnsType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryDns"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSessionTimeout"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateServerLeaseStart"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateServerLastRenew"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateServerLeaseEnd"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpServerAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpServerAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOriginSubscrId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOriginStrings"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOriginLeaseInfo"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpClientAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpClientAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateLeaseSplitActive"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateInterDestId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryNbnsType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryNbns"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryNbnsType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryNbns"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNextHopMacAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModifySubIndent"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModifySubProfile"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModifySlaProfile"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateEvaluateState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModInterDestId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModifyAncpString"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateForceRenew"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpManagedRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcDhcpV6v0Group = tmnxSvcDhcpV6v0Group.setStatus('current')
tmnxSvcEndPointV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 111)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActivePortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveEncap"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveSdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointForceSwitchOver"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointForceSwitchOverSdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointActiveHoldDelay"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointIgnoreStandbySig"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacPinning"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacLimit"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointSuppressStandbySig"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveChangeCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveLastChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveUpTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointRevertTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointRevertTimeCountDn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcEndPointV6v0Group = tmnxSvcEndPointV6v0Group.setStatus('current')
tmnxSvcPEV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 112)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyPassword"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyInterval"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyTimeout"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerAddressType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerSecret"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerOperStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcPEV6v0Group = tmnxSvcPEV6v0Group.setStatus('current')
tmnxSvcIfDHCP6V6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 114)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsLstClrd"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsRcvd"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsSent"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIfDHCP6V6v0Group = tmnxSvcIfDHCP6V6v0Group.setStatus('current')
tmnxSvcTlsBackbone6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 115)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneSrcMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneVplsSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneVplsSvcISID"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneOperSrcMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneOperVplsSvcISID"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneLDPMacFlush"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneVplsStp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsBackbone6v0Group = tmnxSvcTlsBackbone6v0Group.setStatus('current')
tmnxSvcTlsBgpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 116)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADTableLastChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADLastChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVplsId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiPrefix"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiRD"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADExportRteTarget"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy1"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy2"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy3"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy4"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy5"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADImportRteTarget"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy1"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy2"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy3"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy4"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy5"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsBgpV6v0Group = tmnxSvcTlsBgpV6v0Group.setStatus('current')
tmnxSvcEpipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 117)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbTableLastChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbLastChngd"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbBvplsSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbBvplsDstMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbSvcISID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcEpipeV6v0Group = tmnxSvcEpipeV6v0Group.setStatus('current')
tmnxSvcTlsPipV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 118)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpPortState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpPortRole"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpDesignatedBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpDesignatedPort"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpException"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpForwardTransitions"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpInConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpInTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpInRstBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpInMstBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpInBadBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOutConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOutTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOutRstBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOutMstBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOperStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpMvplsPruneState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOperProtocol"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpPortNum"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipMstiPortRole"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipMstiPortState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipMstiDesignatedBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipMstiDesignatedPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsPipV6v0Group = tmnxSvcTlsPipV6v0Group.setStatus('current')
tmnxApipeV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 119)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcApipeInterworking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApipeV3v0Group = tmnxApipeV3v0Group.setStatus('current')
tmnxSvcRoutedCOV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 120)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfParentIf"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfFwdServId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfFwdSubIf"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesGrpIfRedInterface"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcWholesalerNumStaticHosts"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcWholesalerNumDynamicHosts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRoutedCOV5v0Group = tmnxSvcRoutedCOV5v0Group.setStatus('current')
tmnxSvcBsxV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 121)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateAppProfString"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModifyAppProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcBsxV6v0Group = tmnxSvcBsxV6v0Group.setStatus('current')
tmnxSvcNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 200)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpClientLease"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpPacketProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePopulateError"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "protectedMacForNotify"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "staticHostDynamicMacIpAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "staticHostDynamicMacConflict"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjRowDescr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjTodSuite"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxFailureDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpProxyError"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpCoAError"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpSubAuthError"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrRegFailedReason"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcMstiInstanceId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerBridgeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerRootBridgeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOldSdpBindTlsStpPortState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxVcpState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningMacAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningPinnedRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningPinnedRowDescr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningViolatingRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningViolatingRowDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyObjsV6v0Group = tmnxSvcNotifyObjsV6v0Group.setStatus('current')
tmnxSvcObsoletedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 300)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpHoldTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoFwdOrBlk"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsForwardedPkts"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDHCPClientLease"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateOldChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStatePortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateEncapVal"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpPacketProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStatePopulateError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcObsoletedV6v0Group = tmnxSvcObsoletedV6v0Group.setStatus('current')
tmnxSvcNotifyV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 401)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcStatusChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbTableFullAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbTableFullAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfStatusChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMfibTableFullAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMfibTableFullAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacPinningViolation"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDHCPLseStateRestoreProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjTodSuiteApplicFailed"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxEndPointTxActiveChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcPEDiscPolServOperStatChg"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacLimitAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacLimitAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrRegistrationFailed"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrTblFullAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrTblFullAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "topologyChangeVcpState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "newRootVcpState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "newRootBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "vcpActiveProtocolChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxNewCistRegionalRootBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxNewMstiRegionalRootBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "topologyChangePipMajorState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "topologyChangePipState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxPipStpExcepCondStateChng"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "pipActiveProtocolChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcFdbMimDestTblFullAlrm"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcFdbMimDestTblFullAlrmCleared"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDHCPMiscellaneousProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPersistencyProblem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyV6v0Group = tmnxSvcNotifyV6v0Group.setStatus('current')
tmnxSvcNotifyObsoletedGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 402)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custCreated"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custDeleted"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteCreated"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteDeleted"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcCreated"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDeleted"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfCreated"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfDeleted"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsDHCPLseStRestoreProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsDHCPLseStatePopulateErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyObsoletedGroup = tmnxSvcNotifyObsoletedGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", iesIfLastMgmtChange=iesIfLastMgmtChange, svcWholesalerID=svcWholesalerID, svcTlsBgpADVsiPrefix=svcTlsBgpADVsiPrefix, svcDhcpLseStateDhcpClientAddr=svcDhcpLseStateDhcpClientAddr, tlsEgrMcGrpChainLimit=tlsEgrMcGrpChainLimit, svcDhcpLseStateDhcpServerAddrType=svcDhcpLseStateDhcpServerAddrType, macPinningMacAddress=macPinningMacAddress, tmnxCustGroups=tmnxCustGroups, custMultSvcSiteName=custMultSvcSiteName, svcTlsBgpADImportRteTarget=svcTlsBgpADImportRteTarget, tlsMstiRemainingHopCount=tlsMstiRemainingHopCount, svcDhcpLseStateNextHopMacAddr=svcDhcpLseStateNextHopMacAddr, tmnxCustomerBridgeId=tmnxCustomerBridgeId, svcDhcpLseStatePrimaryNbns=svcDhcpLseStatePrimaryNbns, svcPEDiscPolServerIndex=svcPEDiscPolServerIndex, custMssEgrQosSchedInfoTable=custMssEgrQosSchedInfoTable, tmnxCustConformance=tmnxCustConformance, svcLastMgmtChange=svcLastMgmtChange, L2ptProtocols=L2ptProtocols, tlsFdbMacAddr=tlsFdbMacAddr, custMssEgrQosSRowStatus=custMssEgrQosSRowStatus, svcDhcpLseStateOriginSubscrId=svcDhcpLseStateOriginSubscrId, tlsPipStpPortNum=tlsPipStpPortNum, svcTlsFdbNumLearnedEntries=svcTlsFdbNumLearnedEntries, svcEndPointRowStatus=svcEndPointRowStatus, svcEndPointForceSwitchOverSdpId=svcEndPointForceSwitchOverSdpId, custIngSchedPlcyPortStatsFwdPkt=custIngSchedPlcyPortStatsFwdPkt, svcTlsMfibTableFullHighWatermark=svcTlsMfibTableFullHighWatermark, iesIfLoopback=iesIfLoopback, tlsMFibGrpSrcStatsSrcAddr=tlsMFibGrpSrcStatsSrcAddr, svcDhcpLseStateRetailerIf=svcDhcpLseStateRetailerIf, tmnxFailureDescription=tmnxFailureDescription, svcDhcpLseStateNewChAddr=svcDhcpLseStateNewChAddr, SdpId=SdpId, svcDhcpLseStateOriginStrings=svcDhcpLseStateOriginStrings, tlsPipInfoTable=tlsPipInfoTable, TdmOptionsSigPkts=TdmOptionsSigPkts, tmnxSvcNotifyV6v0Group=tmnxSvcNotifyV6v0Group, svcTlsBackboneOperSrcMac=svcTlsBackboneOperSrcMac, tlsFdbCustId=tlsFdbCustId, svcDhcpLseStateModifySubIndent=svcDhcpLseStateModifySubIndent, tlsRdntGrpRowStatus=tlsRdntGrpRowStatus, svcEpipePbbSvcISID=svcEpipePbbSvcISID, svcDhcpRestoreLseStateProblem=svcDhcpRestoreLseStateProblem, tmnxSvcTlsV6v0Group=tmnxSvcTlsV6v0Group, tmnxSvcBsxV6v0Group=tmnxSvcBsxV6v0Group, svcWholesalerNumDynamicHosts=svcWholesalerNumDynamicHosts, svcTlsBgpADVsiRD=svcTlsBgpADVsiRD, custMultSvcSiteCreated=custMultSvcSiteCreated, VpnId=VpnId, tmnxTstpNotifyObjs=tmnxTstpNotifyObjs, svcTlsBgpADVsiExportPolicy3=svcTlsBgpADVsiExportPolicy3, tlsMstiMvplsMinVlanTag=tlsMstiMvplsMinVlanTag, custMultiSvcSiteEgrStatsEntry=custMultiSvcSiteEgrStatsEntry, custIngQosPortIdSchedStatsEntry=custIngQosPortIdSchedStatsEntry, svcTlsStpHoldTime=svcTlsStpHoldTime, svcPEDiscoveryPolicyName=svcPEDiscoveryPolicyName, iesIfStatusChanged=iesIfStatusChanged, svcEndPointMacLimitAlarmCleared=svcEndPointMacLimitAlarmCleared, svcTlsShcvSrcIp=svcTlsShcvSrcIp, svcTlsStpPriority=svcTlsStpPriority, custEgrQosSchedName=custEgrQosSchedName, custIngSchedPlcyStatsFwdOct=custIngSchedPlcyStatsFwdOct, tlsShgResidential=tlsShgResidential, tlsPipStpOutConfigBpdus=tlsPipStpOutConfigBpdus, custIngQosPortIdSchedName=custIngQosPortIdSchedName, custMultiSvcSiteEgrSchedPlcyStatsTable=custMultiSvcSiteEgrSchedPlcyStatsTable, custIngQosSchedStatsForwardedOctets=custIngQosSchedStatsForwardedOctets, svcTlsFdbTableFullLowWatermark=svcTlsFdbTableFullLowWatermark, custEgrSchedPlcyStatsFwdPkt=custEgrSchedPlcyStatsFwdPkt, tlsMstiMvplsRowStatus=tlsMstiMvplsRowStatus, svcTlsInfoTable=svcTlsInfoTable, custPhone=custPhone, tlsEgrMcGrpEncapType=tlsEgrMcGrpEncapType, iesIfDescription=iesIfDescription, tlsMFibStatsEntryType=tlsMFibStatsEntryType, tlsRdntGrpMemberEncap=tlsRdntGrpMemberEncap, svcDhcpLeaseStateActionTable=svcDhcpLeaseStateActionTable, iesIfAdminStatus=iesIfAdminStatus, tlsMFibEntryType=tlsMFibEntryType, svcDhcpManagedRouteEntry=svcDhcpManagedRouteEntry, svcTlsMrpAttrTblFullAlarmRaised=svcTlsMrpAttrTblFullAlarmRaised, tlsPipStpOperStatus=tlsPipStpOperStatus, MstiInstanceId=MstiInstanceId, svcTlsStpVersion=svcTlsStpVersion, svcDhcpLeaseStateTable=svcDhcpLeaseStateTable, tmnxSvcObjs=tmnxSvcObjs, svcPEDiscoveryPolicyInterval=svcPEDiscoveryPolicyInterval, svcTlsStpDesignatedRoot=svcTlsStpDesignatedRoot, svcTlsMrpMaxAttributes=svcTlsMrpMaxAttributes, svcDhcpLseStateSecondaryNbns=svcDhcpLseStateSecondaryNbns, iesGrpIfRedInterface=iesGrpIfRedInterface, svcEpipePbbTable=svcEpipePbbTable, tlsDHCPClientLease=tlsDHCPClientLease, svcPEDiscPolServerSecret=svcPEDiscPolServerSecret, svcTlsMrpFloodTime=svcTlsMrpFloodTime, custMultSvcSiteCurrentEgrSchedPlcy=custMultSvcSiteCurrentEgrSchedPlcy, custEgrQosSchedStatsForwardedOctets=custEgrQosSchedStatsForwardedOctets, svcPEDiscoveryPolicyRowStatus=svcPEDiscoveryPolicyRowStatus, tlsDhcpRestoreLseStatePortId=tlsDhcpRestoreLseStatePortId, custCreated=custCreated, custTraps=custTraps, tlsPipMstiDesignatedBridge=tlsPipMstiDesignatedBridge, svcDhcpLseStateInterDestId=svcDhcpLseStateInterDestId, custMultSvcSiteEgressAggRateLimit=custMultSvcSiteEgressAggRateLimit, custMultSvcSiteLastMgmtChange=custMultSvcSiteLastMgmtChange, svcVplsType=svcVplsType, svcDhcpLseStateModInterDestId=svcDhcpLseStateModInterDestId, svcRadiusPEDiscPolicy=svcRadiusPEDiscPolicy, iesIfEntry=iesIfEntry, svcFdbMimDestTblFullAlrm=svcFdbMimDestTblFullAlrm, custMssIngQosSName=custMssIngQosSName, svcIfDHCP6MsgStatsRcvd=svcIfDHCP6MsgStatsRcvd, ConfigStatus=ConfigStatus, iesIfCreated=iesIfCreated, svcDhcpLseStateOriginLeaseInfo=svcDhcpLseStateOriginLeaseInfo, svcDhcpLseStateSecondaryDnsType=svcDhcpLseStateSecondaryDnsType, svcEpipePbbTableLastChanged=svcEpipePbbTableLastChanged, custMssEgrQosSSummedCIR=custMssEgrQosSSummedCIR, tlsMFibInfoTable=tlsMFibInfoTable, tmnxSvcTlsEgrV6v0Group=tmnxSvcTlsEgrV6v0Group, PWTemplateId=PWTemplateId, svcDhcpClientLease=svcDhcpClientLease, tlsShgRowStatus=tlsShgRowStatus, svcDhcpLseStateModifySlaProfile=svcDhcpLseStateModifySlaProfile, svcEndPointForceSwitchOver=svcEndPointForceSwitchOver, svcTlsBackboneVplsSvcISID=svcTlsBackboneVplsSvcISID, tlsMstiPriority=tlsMstiPriority, svcTlsStpCistRemainingHopCount=svcTlsStpCistRemainingHopCount, svcEndPointDescription=svcEndPointDescription, tlsShgCreationOrigin=tlsShgCreationOrigin, topologyChangeVcpState=topologyChangeVcpState, protectedMacForNotify=protectedMacForNotify, tlsDhcpLseStateNewChAddr=tlsDhcpLseStateNewChAddr, custIngSchedPlcyPortStatsFwdOct=custIngSchedPlcyPortStatsFwdOct, svcPEDiscoveryPolicyPassword=svcPEDiscoveryPolicyPassword, tlsMFibGrpSrcStatsEntry=tlsMFibGrpSrcStatsEntry, iesIfShcvInterval=iesIfShcvInterval, custTrapsPrefix=custTrapsPrefix, tmnxSvc7450V6v0Compliance=tmnxSvc7450V6v0Compliance, vcpActiveProtocolChange=vcpActiveProtocolChange, svcTlsBgpADRowStatus=svcTlsBgpADRowStatus, svcTlsBackboneOperVplsSvcISID=svcTlsBackboneOperVplsSvcISID, svcTlsFdbTableFullAlarmRaised=svcTlsFdbTableFullAlarmRaised, tlsMstiManagedVlanListEntry=tlsMstiManagedVlanListEntry, svcTlsBackboneInfoEntry=svcTlsBackboneInfoEntry, CemSapReportAlarm=CemSapReportAlarm, svcTlsMrpAttrTblFullAlarmCleared=svcTlsMrpAttrTblFullAlarmCleared, tlsFdbEncapValue=tlsFdbEncapValue, tlsMFibStatsSrcInetAddr=tlsMFibStatsSrcInetAddr, tlsEgrMcGrpAdminQinqFixedTagVal=tlsEgrMcGrpAdminQinqFixedTagVal, iesIfTable=iesIfTable, tlsMFibStatsEntry=tlsMFibStatsEntry, tlsRdntGrpMemberEntry=tlsRdntGrpMemberEntry, svcTlsStpBridgeAddress=svcTlsStpBridgeAddress, svcTlsBgpADExportRteTarget=svcTlsBgpADExportRteTarget, svcVpnId=svcVpnId, tlsMFibGrpSrcStatsGrpAddr=tlsMFibGrpSrcStatsGrpAddr, svcIfDHCP6MsgStatEntry=svcIfDHCP6MsgStatEntry, svcTlsMcPathMgmtPlcyName=svcTlsMcPathMgmtPlcyName, svcTlsStpPrimaryBridge=svcTlsStpPrimaryBridge, tmnxTstpGroups=tmnxTstpGroups, svcTlsFdbNumStaticEntries=svcTlsFdbNumStaticEntries, svcTlsPriPortsCumulativeFactor=svcTlsPriPortsCumulativeFactor, svcDhcpLseStatePopulateError=svcDhcpLseStatePopulateError, tlsRdntGrpMemberLastMgmtChange=tlsRdntGrpMemberLastMgmtChange, svcDhcpLeaseStateModifyTable=svcDhcpLeaseStateModifyTable, custRowStatus=custRowStatus, tlsProtMacLastMgmtChange=tlsProtMacLastMgmtChange, tlsProtMacRowStatus=tlsProtMacRowStatus, svcMtu=svcMtu, svcTlsPropagateMacFlush=svcTlsPropagateMacFlush, tlsMFibGrpSrcStatsForwardedPkts=tlsMFibGrpSrcStatsForwardedPkts, svcDhcpLseStateSecondaryNbnsType=svcDhcpLseStateSecondaryNbnsType, ServObjName=ServObjName, svcTlsMrpAdminStatus=svcTlsMrpAdminStatus, svcNumSaps=svcNumSaps, svcPEDiscPolServerRowStatus=svcPEDiscPolServerRowStatus, svcDHCPMiscellaneousProblem=svcDHCPMiscellaneousProblem, SdpBFHundredthsOfPercent=SdpBFHundredthsOfPercent, tmnxSvcNotifyObjs=tmnxSvcNotifyObjs, svcTlsStpRegionName=svcTlsStpRegionName, tlsMFibInfoGrpAddr=tlsMFibInfoGrpAddr, custIngSchedPlcyPortStatsPort=custIngSchedPlcyPortStatsPort, tmnxVcpState=tmnxVcpState, tlsShgRestProtSrcMac=tlsShgRestProtSrcMac, svcDhcpLseStateDhcpServerAddr=svcDhcpLseStateDhcpServerAddr, MvplsPruneState=MvplsPruneState, svcTlsBgpADEntry=svcTlsBgpADEntry, tmnxSvcTlsBgpV6v0Group=tmnxSvcTlsBgpV6v0Group, tmnxSvcObjRow=tmnxSvcObjRow, svcEndPointTxActiveSdpId=svcEndPointTxActiveSdpId, tlsDhcpPacketProblem=tlsDhcpPacketProblem, tlsPipStpInMstBpdus=tlsPipStpInMstBpdus, tmnxSvcEndPointV6v0Group=tmnxSvcEndPointV6v0Group, svcDhcpLseStateCiAddrMaskLen=svcDhcpLseStateCiAddrMaskLen, svcDescription=svcDescription, svcDhcpLseStateDefaultRouter=svcDhcpLseStateDefaultRouter, tmnxSvcGroups=tmnxSvcGroups, svcDhcpSubAuthError=svcDhcpSubAuthError, tlsFdbNumIVplsMac=tlsFdbNumIVplsMac, SdpBindBandwidth=SdpBindBandwidth, svcDhcpLseStateEvaluateState=svcDhcpLseStateEvaluateState, MstiInstanceIdOrZero=MstiInstanceIdOrZero, tlsRdntGrpMemberTable=tlsRdntGrpMemberTable, svcEndPointName=svcEndPointName, svcStatusChanged=svcStatusChanged, custMultSvcSiteCurrentIngrSchedPlcy=custMultSvcSiteCurrentIngrSchedPlcy, custMultiSvcSiteEgrStatsTable=custMultiSvcSiteEgrStatsTable, custContact=custContact, tlsFdbPortId=tlsFdbPortId, tlsFdbVpnId=tlsFdbVpnId, tmnxSvcObjTodSuite=tmnxSvcObjTodSuite, tlsEgrMcGrpLastMgmtChange=tlsEgrMcGrpLastMgmtChange, svcDhcpLseStateFramedIpNetMask=svcDhcpLseStateFramedIpNetMask, tlsMFibGrpSrcStatsForwardedOctets=tlsMFibGrpSrcStatsForwardedOctets, tmnxSvcPEDiscPolServOperStatChg=tmnxSvcPEDiscPolServOperStatChg, svcEpipePbbBvplsDstMac=svcEpipePbbBvplsDstMac, iesIfShcvAction=iesIfShcvAction, svcPEDiscPolServerEntry=svcPEDiscPolServerEntry, svcTlsBgpADVsiExportPolicy2=svcTlsBgpADVsiExportPolicy2, svcTlsStpHelloTime=svcTlsStpHelloTime, svcEpipePbbLastChngd=svcEpipePbbLastChngd, custMultiServiceSiteTable=custMultiServiceSiteTable, svcDhcpManagedRoutePrefixLen=svcDhcpManagedRoutePrefixLen, svcTlsStpCistRegionalRoot=svcTlsStpCistRegionalRoot, iesIfName=iesIfName, tlsMFibInfoSdpId=tlsMFibInfoSdpId, svcDhcpCoAError=svcDhcpCoAError, tlsFdbEPMacOperVcId=tlsFdbEPMacOperVcId, tlsShgInfoTable=tlsShgInfoTable, tstpTraps=tstpTraps, svcDhcpLseStateServerLastRenew=svcDhcpLseStateServerLastRenew, tlsRdntGrpMemberIsSap=tlsRdntGrpMemberIsSap, tlsPipStpOutRstBpdus=tlsPipStpOutRstBpdus, tlsRdntGrpName=tlsRdntGrpName, svcEndPointIgnoreStandbySig=svcEndPointIgnoreStandbySig, svcDhcpRestoreLseStateCiAddr=svcDhcpRestoreLseStateCiAddr, custIngQosPortSchedFwdOctets=custIngQosPortSchedFwdOctets, custEgrQosPortIdSchedStatsEntry=custEgrQosPortIdSchedStatsEntry, svcLastStatusChange=svcLastStatusChange, svcCustId=svcCustId, tmnxCustCompliances=tmnxCustCompliances, svcTlsStpBridgeForwardDelay=svcTlsStpBridgeForwardDelay, svcEndPointMacPinning=svcEndPointMacPinning, svcIfDHCP6MsgStatsSent=svcIfDHCP6MsgStatsSent, svcEpipePbbBvplsSvcId=svcEpipePbbBvplsSvcId, tlsEgrMcGrpDot1qEtherType=tlsEgrMcGrpDot1qEtherType, tlsEgrMcGrpQinqFixedTagPosition=tlsEgrMcGrpQinqFixedTagPosition, svcTlsStpForwardDelay=svcTlsStpForwardDelay, svcDhcpLseStateForceRenew=svcDhcpLseStateForceRenew, svcTlsFdbRemoteAgeTime=svcTlsFdbRemoteAgeTime, svcEndPointTxActiveUpTime=svcEndPointTxActiveUpTime, svcTlsStpBridgeHelloTime=svcTlsStpBridgeHelloTime)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", tlsPipStpException=tlsPipStpException, tlsMFibFwdOrBlk=tlsMFibFwdOrBlk, iesGrpIfOperUpWhileEmpty=iesGrpIfOperUpWhileEmpty, tlsMFibStatsForwardedPkts=tlsMFibStatsForwardedPkts, svcDhcpLseStateOldChAddr=svcDhcpLseStateOldChAddr, svcTlsStpVirtualRootBridgeStatus=svcTlsStpVirtualRootBridgeStatus, svcTlsMacPinningViolation=svcTlsMacPinningViolation, tlsDhcpRestoreLseStateCiAddr=tlsDhcpRestoreLseStateCiAddr, svcRadiusUserNameType=svcRadiusUserNameType, tlsProtectedMacTable=tlsProtectedMacTable, hostConnectivityCiAddrType=hostConnectivityCiAddrType, svcDefMeshVcId=svcDefMeshVcId, custMssEgrQosSCIR=custMssEgrQosSCIR, iesIfCustId=iesIfCustId, custIngQosAssignmentPortId=custIngQosAssignmentPortId, svcDhcpLseStateCiAddr=svcDhcpLseStateCiAddr, tlsMFibStatsTable=tlsMFibStatsTable, svcVRouterId=svcVRouterId, custMultiSvcSiteIngSchedPlcyStatsTable=custMultiSvcSiteIngSchedPlcyStatsTable, svcNumEntries=svcNumEntries, svcDhcpLseStateSdpId=svcDhcpLseStateSdpId, MfibLocation=MfibLocation, svcDhcpLseStateSessionTimeout=svcDhcpLseStateSessionTimeout, svcTlsBgpADVsiExportPolicy4=svcTlsBgpADVsiExportPolicy4, svcEndPointTxActiveChangeCount=svcEndPointTxActiveChangeCount, tlsEgrMcGrpRowStatus=tlsEgrMcGrpRowStatus, custMssEgrQosSOverrideFlags=custMssEgrQosSOverrideFlags, svcTlsMacAgeing=svcTlsMacAgeing, custInfoTable=custInfoTable, svcApipeInfoEntry=svcApipeInfoEntry, tlsMFibEncapValue=tlsMFibEncapValue, macPinningPinnedRowDescr=macPinningPinnedRowDescr, svcTlsMfibTableFullAlarmCleared=svcTlsMfibTableFullAlarmCleared, svcTlsSecPortsCumulativeFactor=svcTlsSecPortsCumulativeFactor, svcPEDiscoveryPolicyTimeout=svcPEDiscoveryPolicyTimeout, tlsMFibSrcInetAddrType=tlsMFibSrcInetAddrType, StpPortRole=StpPortRole, macPinningViolatingRow=macPinningViolatingRow, svcDhcpLseStateOption82=svcDhcpLseStateOption82, svcTlsVpnId=svcTlsVpnId, iesIfDeleted=iesIfDeleted, custMultSvcSiteEgressSchedulerPolicy=custMultSvcSiteEgressSchedulerPolicy, StpExceptionCondition=StpExceptionCondition, custMultiSvcSiteIngSchedPlcyPortStatsEntry=custMultiSvcSiteIngSchedPlcyPortStatsEntry, svcTlsInfoEntry=svcTlsInfoEntry, tlsMFibInfoSrcAddr=tlsMFibInfoSrcAddr, svcTlsMacRelearnOnly=svcTlsMacRelearnOnly, iesIfVpnId=iesIfVpnId, svcDhcpLseStateLocale=svcDhcpLseStateLocale, tlsMstiLastMgmtChange=tlsMstiLastMgmtChange, custEgrQosPortIdSchedName=custEgrQosPortIdSchedName, tlsFdbProtected=tlsFdbProtected, tmnxServObjs=tmnxServObjs, svcDhcpLseStateServerLeaseStart=svcDhcpLseStateServerLeaseStart, tmnxSvcObjRowDescr=tmnxSvcObjRowDescr, svcDhcpProxyError=svcDhcpProxyError, tlsPipStpOperProtocol=tlsPipStpOperProtocol, tlsMFibEntry=tlsMFibEntry, svcTrapsPrefix=svcTrapsPrefix, custMultSvcSiteIngressSchedulerPolicy=custMultSvcSiteIngressSchedulerPolicy, svcDhcpLseStateSlaProfString=svcDhcpLseStateSlaProfString, svcTlsMrpAttrRegFailedReason=svcTlsMrpAttrRegFailedReason, custMultSvcSiteTodSuite=custMultSvcSiteTodSuite, tlsPipStpDesignatedBridge=tlsPipStpDesignatedBridge, tlsMstiTable=tlsMstiTable, svcDHCPLseStateRestoreProblem=svcDHCPLseStateRestoreProblem, custIngQosSchedStatsForwardedPackets=custIngQosSchedStatsForwardedPackets, SdpBindVcType=SdpBindVcType, svcTlsStpTopologyChangeActive=svcTlsStpTopologyChangeActive, tlsEgrMcGrpMacFilterId=tlsEgrMcGrpMacFilterId, L2RouteOrigin=L2RouteOrigin, SdpBindTlsBpduTranslation=SdpBindTlsBpduTranslation, svcDhcpLseStateNewCiAddr=svcDhcpLseStateNewCiAddr, custIngQosSchedName=custIngQosSchedName, tmnxOtherBridgeId=tmnxOtherBridgeId, PYSNMP_MODULE_ID=timetraServicesMIBModule, custMssIngQosSLastMgmtChange=custMssIngQosSLastMgmtChange, IAIDType=IAIDType, tlsFdbVcId=tlsFdbVcId, svcDhcpLseStateShcvOperState=svcDhcpLseStateShcvOperState, tlsMFibStatsForwardedOctets=tlsMFibStatsForwardedOctets, custId=custId, tmnxSvcTlsFdbV6v0Group=tmnxSvcTlsFdbV6v0Group, tlsMFibLocale=tlsMFibLocale, svcDhcpLseStateDefaultRouterTp=svcDhcpLseStateDefaultRouterTp, svcDhcpLeaseStateActionEntry=svcDhcpLeaseStateActionEntry, svcTlsStpOperStatus=svcTlsStpOperStatus, tlsMFibSrcInetAddr=tlsMFibSrcInetAddr, tmnxSvcTlsMFibV6v0Group=tmnxSvcTlsMFibV6v0Group, TStpPortState=TStpPortState, tlsRdntGrpEntry=tlsRdntGrpEntry, svcTlsMrpFailedRegisterCount=svcTlsMrpFailedRegisterCount, TdmOptionsCasTrunkFraming=TdmOptionsCasTrunkFraming, topologyChangePipState=topologyChangePipState, tlsProtMacAddress=tlsProtMacAddress, svcTlsShcvAction=svcTlsShcvAction, tlsPipMstiTable=tlsPipMstiTable, tlsMFibStatsGrpInetAddrType=tlsMFibStatsGrpInetAddrType, tmnxSvcObjTodSuiteApplicFailed=tmnxSvcObjTodSuiteApplicFailed, svcRadiusDiscovery=svcRadiusDiscovery, svcDhcpLseStateDhcpClientAddrType=svcDhcpLseStateDhcpClientAddrType, tmnxTstpConformance=tmnxTstpConformance, svcVllType=svcVllType, tlsFdbEPMacOperSdpId=tlsFdbEPMacOperSdpId, custMultSvcSiteFrameBasedAccnt=custMultSvcSiteFrameBasedAccnt, tlsMstiRowStatus=tlsMstiRowStatus, custMssIngQosSCIR=custMssIngQosSCIR, custMultSvcSiteIntendedEgrSchedPlcy=custMultSvcSiteIntendedEgrSchedPlcy, tlsMstiIntRootCost=tlsMstiIntRootCost, tmnxSvcRoutedCOV5v0Group=tmnxSvcRoutedCOV5v0Group, custMultiServiceSiteEntry=custMultiServiceSiteEntry, svcTlsBgpADVsiImportPolicy5=svcTlsBgpADVsiImportPolicy5, tlsFdbEndPointName=tlsFdbEndPointName, hostConnectivityCiAddr=hostConnectivityCiAddr, custMssEgrQosSLastMgmtChange=custMssEgrQosSLastMgmtChange, tmnxSvc7750V6v0Compliance=tmnxSvc7750V6v0Compliance, svcDhcpManagedRouteTable=svcDhcpManagedRouteTable, tlsShgLastMgmtChange=tlsShgLastMgmtChange, SdpTemplateId=SdpTemplateId, tlsFdbInfoEntry=tlsFdbInfoEntry, svcDhcpLseStateRemainLseTime=svcDhcpLseStateRemainLseTime, svcWholesalerInfoTable=svcWholesalerInfoTable, tlsMstiEntry=tlsMstiEntry, svcDhcpLseStateLeaseSplitActive=svcDhcpLseStateLeaseSplitActive, svcTlsMrpAttrValue=svcTlsMrpAttrValue, custLastMgmtChange=custLastMgmtChange, custEgrSchedPlcyPortStatsFwdPkt=custEgrSchedPlcyPortStatsFwdPkt, svcIfDHCP6MsgStatsLstClrd=svcIfDHCP6MsgStatsLstClrd, svcMstiInstanceId=svcMstiInstanceId, svcTlsStpBridgeMaxHops=svcTlsStpBridgeMaxHops, newRootBridge=newRootBridge, svcEndPointRevertTimeCountDn=svcEndPointRevertTimeCountDn, tmnxSvcTlsPipV6v0Group=tmnxSvcTlsPipV6v0Group, custMultSvcSiteRowStatus=custMultSvcSiteRowStatus, svcPEDiscPolServerPort=svcPEDiscPolServerPort, svcIfDHCP6MsgStatTable=svcIfDHCP6MsgStatTable, tlsRdntGrpMemberPort=tlsRdntGrpMemberPort, TQosQueueAttribute=TQosQueueAttribute, tlsFdbType=tlsFdbType, custIngQosPortIdSchedStatsTable=custIngQosPortIdSchedStatsTable, svcTlsFdbLocalAgeTime=svcTlsFdbLocalAgeTime, tlsEgressMulticastGroupTable=tlsEgressMulticastGroupTable, svcTlsFdbTableSize=svcTlsFdbTableSize, svcDhcpLseStateIAIDType=svcDhcpLseStateIAIDType, tlsPipStpDesignatedPort=tlsPipStpDesignatedPort, custEgrQosSchedStatsForwardedPackets=custEgrQosSchedStatsForwardedPackets, svcPEDiscPolServerAddressType=svcPEDiscPolServerAddressType, svcTlsMrpAttrType=svcTlsMrpAttrType, ServObjLongDesc=ServObjLongDesc, tlsPipStpInTcnBpdus=tlsPipStpInTcnBpdus, custMssIngQosSchedInfoTable=custMssIngQosSchedInfoTable, svcTlsStpTimeSinceTopologyChange=svcTlsStpTimeSinceTopologyChange, svcEndPointMacLimit=svcEndPointMacLimit, tlsMFibTable=tlsMFibTable, tmnxNewMstiRegionalRootBridge=tmnxNewMstiRegionalRootBridge, custMultiSvcSiteEgrSchedPlcyPortStatsTable=custMultiSvcSiteEgrSchedPlcyPortStatsTable, svcDhcpLseStateModifySubProfile=svcDhcpLseStateModifySubProfile, tmnxCustCompliance=tmnxCustCompliance, svcTlsMacMoveRetryTimeout=svcTlsMacMoveRetryTimeout, svcDhcpLseStateAncpString=svcDhcpLseStateAncpString, tlsMFibGrpInetAddr=tlsMFibGrpInetAddr, staticHostDynamicMacIpAddress=staticHostDynamicMacIpAddress, svcDhcpLseStatePrimaryDnsType=svcDhcpLseStatePrimaryDnsType, tmnxSvcNotifyObjsV6v0Group=tmnxSvcNotifyObjsV6v0Group, svcDhcpLeaseStateEntry=svcDhcpLeaseStateEntry, tlsPipStpInBadBpdus=tlsPipStpInBadBpdus, tlsRdntGrpDescription=tlsRdntGrpDescription, tlsShgRestUnprotDstMac=tlsShgRestUnprotDstMac, tlsEgrMcGrpIpFilterId=tlsEgrMcGrpIpFilterId, tmnxServNotifications=tmnxServNotifications, tlsPipMstiEntry=tlsPipMstiEntry, svcDhcpLseStateModifyAncpString=svcDhcpLseStateModifyAncpString, ServObjDesc=ServObjDesc, custEgrQosPortIdSchedStatsTable=custEgrQosPortIdSchedStatsTable, TlsLimitMacMoveLevel=TlsLimitMacMoveLevel, svcTlsStpAdminStatus=svcTlsStpAdminStatus, svcTlsBgpADTableLastChanged=svcTlsBgpADTableLastChanged, tlsMstiMvplsMaxVlanTag=tlsMstiMvplsMaxVlanTag, custMultiSvcSiteIngStatsTable=custMultiSvcSiteIngStatsTable, CemSapEcid=CemSapEcid, svcDhcpLseStateAppProfString=svcDhcpLseStateAppProfString, iesIfIndex=iesIfIndex, tmnxSvcRdntV6v0Group=tmnxSvcRdntV6v0Group, custMultiSvcSiteIngSchedPlcyStatsEntry=custMultiSvcSiteIngSchedPlcyStatsEntry, custMultiSvcSiteEgrSchedPlcyStatsEntry=custMultiSvcSiteEgrSchedPlcyStatsEntry, tlsMstiInstanceId=tlsMstiInstanceId, SvcISID=SvcISID, custDescription=custDescription, tlsPipMstiPortState=tlsPipMstiPortState, tmnxCustV6v0Group=tmnxCustV6v0Group, svcTlsBgpADVplsId=svcTlsBgpADVplsId, svcTlsStpBridgeMaxAge=svcTlsStpBridgeMaxAge, iesGrpIfTable=iesGrpIfTable, tlsPipStpPortState=tlsPipStpPortState, svcPEDiscoveryPolicyEntry=svcPEDiscoveryPolicyEntry, tlsMFibStatsSrcInetAddrType=tlsMFibStatsSrcInetAddrType, tmnxNewCistRegionalRootBridge=tmnxNewCistRegionalRootBridge, svcRadiusDiscoveryShutdown=svcRadiusDiscoveryShutdown, tlsMstiManagedVlanListTable=tlsMstiManagedVlanListTable, tlsEgrMcGrpName=tlsEgrMcGrpName, svcDhcpLseStateModifyAppProfile=svcDhcpLseStateModifyAppProfile, svcTlsMacLearning=svcTlsMacLearning, svcDhcpLeaseStateModifyEntry=svcDhcpLeaseStateModifyEntry, tlsEgressMulticastGroupEntry=tlsEgressMulticastGroupEntry, pipActiveProtocolChange=pipActiveProtocolChange, iesIfOperStatus=iesIfOperStatus, svcTlsFdbNumOamEntries=svcTlsFdbNumOamEntries, iesIfFwdServId=iesIfFwdServId, svcTlsDiscardUnknownDest=svcTlsDiscardUnknownDest, svcDhcpLseStateOldCiAddr=svcDhcpLseStateOldCiAddr, MfibGrpSrcFwdOrBlk=MfibGrpSrcFwdOrBlk, svcTlsStpRootCost=svcTlsStpRootCost, svcDhcpLseStateShcvChecks=svcDhcpLseStateShcvChecks, tlsRdntGrpLastMgmtChange=tlsRdntGrpLastMgmtChange, svcTlsStpVcpOperProtocol=svcTlsStpVcpOperProtocol, svcFdbMimDestTblFullAlrmCleared=svcFdbMimDestTblFullAlrmCleared, svcApipeInterworking=svcApipeInterworking, svcDhcpManagedRouteStatus=svcDhcpManagedRouteStatus, custInfoEntry=custInfoEntry, svcEndPointEntry=svcEndPointEntry, custMssIngQosSRowStatus=custMssIngQosSRowStatus, svcTlsMacMoveAdminStatus=svcTlsMacMoveAdminStatus, tlsRdntGrpMemberRowStatus=tlsRdntGrpMemberRowStatus, tlsDhcpRestoreLseStateProblem=tlsDhcpRestoreLseStateProblem, svcDhcpLseStateVcId=svcDhcpLseStateVcId, tlsPipStpInRstBpdus=tlsPipStpInRstBpdus, tmnxSvcTlsMstiV6v0Group=tmnxSvcTlsMstiV6v0Group, tlsMFibInfoEntry=tlsMFibInfoEntry, svcTlsFdbNumEntries=svcTlsFdbNumEntries, tlsFdbLocale=tlsFdbLocale, newRootVcpState=newRootVcpState, tmnxSvcIesIfV6v0Group=tmnxSvcIesIfV6v0Group, svcTlsStpCistRegionalRootPort=svcTlsStpCistRegionalRootPort, iesIfParentIf=iesIfParentIf, custMultSvcSiteIntendedIngrSchedPlcy=custMultSvcSiteIntendedIngrSchedPlcy, svcTlsMrpAttributeCount=svcTlsMrpAttributeCount, tlsMFibInfoLocale=tlsMFibInfoLocale, svcAdminStatus=svcAdminStatus, svcTlsBgpADVsiExportPolicy1=svcTlsBgpADVsiExportPolicy1, tstpTrapsPrefix=tstpTrapsPrefix, svcTlsMacMoveMaxRate=svcTlsMacMoveMaxRate, svcPEDiscPolServerTable=svcPEDiscPolServerTable, custNextFreeId=custNextFreeId, tmnxCustObjs=tmnxCustObjs, tlsMstiRegionalRootPort=tlsMstiRegionalRootPort, macPinningPinnedRow=macPinningPinnedRow, custDeleted=custDeleted, custMssEgrQosSName=custMssEgrQosSName, svcDhcpLseStateBCastIpAddrType=svcDhcpLseStateBCastIpAddrType, svcTlsStpCistIntRootCost=svcTlsStpCistIntRootCost, tlsMFibPortId=tlsMFibPortId, custEgrQosPortSchedFwdPkts=custEgrQosPortSchedFwdPkts, svcEndPointTable=svcEndPointTable, svcTlsMacFlushOnFail=svcTlsMacFlushOnFail)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", svcEndPointSuppressStandbySig=svcEndPointSuppressStandbySig, svcCreated=svcCreated, svcOperStatus=svcOperStatus, svcVcSwitching=svcVcSwitching, svcDhcpLseStateCiAddrType=svcDhcpLseStateCiAddrType, custMultSvcSiteAssignment=custMultSvcSiteAssignment, svcEndPointTxActiveEncap=svcEndPointTxActiveEncap, iesIfFwdSubIf=iesIfFwdSubIf, svcTotalFdbMimDestIdxEntries=svcTotalFdbMimDestIdxEntries, svcDhcpManagedRouteInetAddr=svcDhcpManagedRouteInetAddr, svcIpRouting=svcIpRouting, custMultiSvcSiteEgrSchedPlcyPortStatsEntry=custMultiSvcSiteEgrSchedPlcyPortStatsEntry, svcDhcpLseStateChAddr=svcDhcpLseStateChAddr, StpProtocol=StpProtocol, tlsMFibInfoSvcId=tlsMFibInfoSvcId, svcPEDiscPolServerAddress=svcPEDiscPolServerAddress, svcDhcpLseStateSubscrIdent=svcDhcpLseStateSubscrIdent, tlsDhcpLseStateOldChAddr=tlsDhcpLseStateOldChAddr, svcTlsDHCPLseStatePopulateErr=svcTlsDHCPLseStatePopulateErr, tlsMFibVcId=tlsMFibVcId, svcWholesalerInfoEntry=svcWholesalerInfoEntry, svcTlsCustId=svcTlsCustId, tlsMFibInfoFwdOrBlk=tlsMFibInfoFwdOrBlk, iesIfType=iesIfType, svcTlsFdbNumHostEntries=svcTlsFdbNumHostEntries, custMssIngQosSchedInfoEntry=custMssIngQosSchedInfoEntry, tlsMFibGrpInetAddrType=tlsMFibGrpInetAddrType, tmnxSvcIfDHCP6V6v0Group=tmnxSvcIfDHCP6V6v0Group, svcDhcpLseStateClientId=svcDhcpLseStateClientId, svcTlsBgpADTable=svcTlsBgpADTable, svcBaseInfoTable=svcBaseInfoTable, svcDhcpLseStatePrimaryNbnsType=svcDhcpLseStatePrimaryNbnsType, svcIfDHCP6MsgStatsDropped=svcIfDHCP6MsgStatsDropped, LspIdList=LspIdList, svcTlsFdbTableFullHighWatermark=svcTlsFdbTableFullHighWatermark, tlsShgRestProtSrcMacAction=tlsShgRestProtSrcMacAction, tlsEgrMcGrpQinqEtherType=tlsEgrMcGrpQinqEtherType, svcDhcpLseStateSubProfString=svcDhcpLseStateSubProfString, custMssIngQosSOverrideFlags=custMssIngQosSOverrideFlags, svcTlsStpMaxAge=svcTlsStpMaxAge, svcTlsMrpAttrTblHighWatermark=svcTlsMrpAttrTblHighWatermark, tlsMFibSvcId=tlsMFibSvcId, svcTlsBackboneVplsSvcId=svcTlsBackboneVplsSvcId, svcTlsStpRegionRevision=svcTlsStpRegionRevision, tlsShgInstanceId=tlsShgInstanceId, custEgrQosPortSchedFwdOctets=custEgrQosPortSchedFwdOctets, tlsShgDescription=tlsShgDescription, svcTlsFdbTableFullAlarmCleared=svcTlsFdbTableFullAlarmCleared, svcTlsBgpADVsiImportPolicy2=svcTlsBgpADVsiImportPolicy2, svcPEDiscoveryPolicyTable=svcPEDiscoveryPolicyTable, svcTlsStpBridgeInstanceId=svcTlsStpBridgeInstanceId, tlsRdntGrpMemberRemoteNodeAddr=tlsRdntGrpMemberRemoteNodeAddr, tlsMFibStatsGrpInetAddr=tlsMFibStatsGrpInetAddr, tlsDhcpRestoreLseStateSvcId=tlsDhcpRestoreLseStateSvcId, svcTlsL2ptTermEnabled=svcTlsL2ptTermEnabled, svcPersistencyProblem=svcPersistencyProblem, custMssIngQosSSummedCIR=custMssIngQosSSummedCIR, custMultiSvcSiteIngStatsEntry=custMultiSvcSiteIngStatsEntry, tmnxSvcV6v0Group=tmnxSvcV6v0Group, tmnxSvcDhcpV6v0Group=tmnxSvcDhcpV6v0Group, tmnxSvc7710V6v0Compliance=tmnxSvc7710V6v0Compliance, svcRowStatus=svcRowStatus, svcPEDiscPolServerOperStatus=svcPEDiscPolServerOperStatus, svcTlsBgpADVsiExportPolicy5=svcTlsBgpADVsiExportPolicy5, TSapIngQueueId=TSapIngQueueId, tlsMFibGrpMacAddr=tlsMFibGrpMacAddr, svcTlsMrpAttrTblLowWatermark=svcTlsMrpAttrTblLowWatermark, tlsPipMstiPortRole=tlsPipMstiPortRole, tlsFdbLastStateChange=tlsFdbLastStateChange, hostConnectivityChAddr=hostConnectivityChAddr, svcNumSdps=svcNumSdps, timetraServicesMIBModule=timetraServicesMIBModule, TVirtSchedAttribute=TVirtSchedAttribute, svcDhcpLseStateRetailerSvcId=svcDhcpLseStateRetailerSvcId, svcDhcpLseStatePersistKey=svcDhcpLseStatePersistKey, custEgrSchedPlcyPortStatsPort=custEgrSchedPlcyPortStatsPort, svcTlsShcvInterval=svcTlsShcvInterval, tmnxSvcCompliances=tmnxSvcCompliances, tmnxTstpCompliances=tmnxTstpCompliances, svcEpipePbbRowStatus=svcEpipePbbRowStatus, svcTlsBgpADVsiImportPolicy1=svcTlsBgpADVsiImportPolicy1, svcTlsStpTopologyChanges=svcTlsStpTopologyChanges, tmnxEndPointTxActiveChanged=tmnxEndPointTxActiveChanged, tlsPipStpOutTcnBpdus=tlsPipStpOutTcnBpdus, custMultSvcSiteDeleted=custMultSvcSiteDeleted, tlsPipStpPortRole=tlsPipStpPortRole, BridgeId=BridgeId, tmnxSvcNotifyObsoletedGroup=tmnxSvcNotifyObsoletedGroup, svcTlsBackboneSrcMac=svcTlsBackboneSrcMac, custMssEgrQosSPIR=custMssEgrQosSPIR, tlsMFibGrpSrcStatsTable=tlsMFibGrpSrcStatsTable, svcEpipePbbEntry=svcEpipePbbEntry, custIngSchedPlcyStatsFwdPkt=custIngSchedPlcyStatsFwdPkt, svcEndPointRevertTime=svcEndPointRevertTime, svcMgmtVpls=svcMgmtVpls, svcAutoBind=svcAutoBind, svcTlsStpRootPort=svcTlsStpRootPort, tlsFdbBackboneDstMac=tlsFdbBackboneDstMac, tlsFdbPbbNumEpipes=tlsFdbPbbNumEpipes, tlsMstiRegionalRoot=tlsMstiRegionalRoot, tlsDhcpLseStateOldCiAddr=tlsDhcpLseStateOldCiAddr, svcApipeInfoTable=svcApipeInfoTable, tmnxSvcTlsBackbone6v0Group=tmnxSvcTlsBackbone6v0Group, svcDeleted=svcDeleted, tlsShgCustId=tlsShgCustId, tlsMFibInfoEncapValue=tlsMFibInfoEncapValue, tmnxOldSdpBindTlsStpPortState=tmnxOldSdpBindTlsStpPortState, svcDhcpManagedRouteInetAddrType=svcDhcpManagedRouteInetAddrType, svcId=svcId, svcTlsMfibTableFullAlarmRaised=svcTlsMfibTableFullAlarmRaised, svcTlsStpHoldCount=svcTlsStpHoldCount, tmnxSvcEpipeV6v0Group=tmnxSvcEpipeV6v0Group, svcBaseInfoEntry=svcBaseInfoEntry, custMssIngQosSPIR=custMssIngQosSPIR, svcDhcpLseStateSecondaryDns=svcDhcpLseStateSecondaryDns, custEgrQosAssignmentPortId=custEgrQosAssignmentPortId, tlsMFibStatsGrpMacAddr=tlsMFibStatsGrpMacAddr, svcTlsMrpAttrRegistrationFailed=svcTlsMrpAttrRegistrationFailed, svcRadiusUserName=svcRadiusUserName, svcTlsFdbNumDhcpEntries=svcTlsFdbNumDhcpEntries, tlsDhcpLseStatePopulateError=tlsDhcpLseStatePopulateError, svcDhcpLseStateFramedIpNetMaskTp=svcDhcpLseStateFramedIpNetMaskTp, svcWholesalerNumStaticHosts=svcWholesalerNumStaticHosts, tlsMFibInfoVcId=tlsMFibInfoVcId, tlsEgrMcGrpIpv6FilterId=tlsEgrMcGrpIpv6FilterId, tmnxSvcTlsShgV6v0Group=tmnxSvcTlsShgV6v0Group, ServType=ServType, staticHostDynamicMacConflict=staticHostDynamicMacConflict, tlsRdntGrpMemberRemoteNodeAddrTp=tlsRdntGrpMemberRemoteNodeAddrTp, tmnxApipeV3v0Group=tmnxApipeV3v0Group, tlsPipMstiDesignatedPort=tlsPipMstiDesignatedPort, tmnxCustomerRootBridgeId=tmnxCustomerRootBridgeId, tlsEgrMcGrpOperQinqFixedTagVal=tlsEgrMcGrpOperQinqFixedTagVal, macPinningViolatingRowDescr=macPinningViolatingRowDescr, tlsProtectedMacEntry=tlsProtectedMacEntry, iesGrpIfEntry=iesGrpIfEntry, svcTlsBackboneLDPMacFlush=svcTlsBackboneLDPMacFlush, svcEndPointMacLimitAlarmRaised=svcEndPointMacLimitAlarmRaised, iesIfLastStatusChange=iesIfLastStatusChange, tlsRdntGrpTable=tlsRdntGrpTable, tlsFdbInfoTable=tlsFdbInfoTable, custNumEntries=custNumEntries, tlsPipStpInConfigBpdus=tlsPipStpInConfigBpdus, svcTlsBgpADAdminStatus=svcTlsBgpADAdminStatus, tmnxSvcConformance=tmnxSvcConformance, svcDhcpLseStateShcvReplyTime=svcDhcpLseStateShcvReplyTime, svcTlsBgpADVsiImportPolicy3=svcTlsBgpADVsiImportPolicy3, topologyChangePipMajorState=topologyChangePipMajorState, svcTlsBgpADVsiImportPolicy4=svcTlsBgpADVsiImportPolicy4, tlsShgInfoEntry=tlsShgInfoEntry, tlsPipStpForwardTransitions=tlsPipStpForwardTransitions, svcTlsDHCPLseStRestoreProblem=svcTlsDHCPLseStRestoreProblem, DhcpLseStateInfoOrigin=DhcpLseStateInfoOrigin, svcDhcpLseStatePrimaryDns=svcDhcpLseStatePrimaryDns, tmnxSvcObsoletedV6v0Group=tmnxSvcObsoletedV6v0Group, svcDhcpLseStateEncapValue=svcDhcpLseStateEncapValue, tlsMFibSdpId=tlsMFibSdpId, svcEndPointActiveHoldDelay=svcEndPointActiveHoldDelay, svcType=svcType, svcDhcpLseStateShcvReplies=svcDhcpLseStateShcvReplies, iesIfRowStatus=iesIfRowStatus, svcDhcpLseStateIAID=svcDhcpLseStateIAID, svcTlsBgpADLastChanged=svcTlsBgpADLastChanged, iesIfShcvSource=iesIfShcvSource, custMultSvcSiteScope=custMultSvcSiteScope, custMultiSvcSiteIngSchedPlcyPortStatsTable=custMultiSvcSiteIngSchedPlcyPortStatsTable, custMssEgrQosSchedInfoEntry=custMssEgrQosSchedInfoEntry, TlsLimitMacMove=TlsLimitMacMove, svcEndPointTxActiveLastChange=svcEndPointTxActiveLastChange, tlsPipStpMvplsPruneState=tlsPipStpMvplsPruneState, tmnxPipStpExcepCondStateChng=tmnxPipStpExcepCondStateChng, svcDhcpLseStatePortId=svcDhcpLseStatePortId, custEgrSchedPlcyPortStatsFwdOct=custEgrSchedPlcyPortStatsFwdOct, svcDhcpPacketProblem=svcDhcpPacketProblem, svcDhcpLseStateBCastIpAddr=svcDhcpLseStateBCastIpAddr, svcTlsBackboneInfoTable=svcTlsBackboneInfoTable, tlsDhcpLseStateNewCiAddr=tlsDhcpLseStateNewCiAddr, svcEndPointTxActiveType=svcEndPointTxActiveType, custMultSvcSiteDescription=custMultSvcSiteDescription, svcTlsShcvSrcMac=svcTlsShcvSrcMac, svcTlsBackboneVplsStp=svcTlsBackboneVplsStp, tmnxSvcPEV6v0Group=tmnxSvcPEV6v0Group, svcEndPointTxActivePortId=svcEndPointTxActivePortId, custIngQosPortSchedFwdPkts=custIngQosPortSchedFwdPkts, svcTlsMfibTableSize=svcTlsMfibTableSize, tlsPipInfoEntry=tlsPipInfoEntry, svcDhcpLseStateServerLeaseEnd=svcDhcpLseStateServerLeaseEnd, tlsPipStpOutMstBpdus=tlsPipStpOutMstBpdus, svcTlsMfibTableFullLowWatermark=svcTlsMfibTableFullLowWatermark, tlsMFibInfoPortId=tlsMFibInfoPortId, tlsEgrMcGrpDescription=tlsEgrMcGrpDescription, tlsFdbRowStatus=tlsFdbRowStatus, tlsShgName=tlsShgName, custEgrSchedPlcyStatsFwdOct=custEgrSchedPlcyStatsFwdOct, tlsDhcpRestoreLseStateEncapVal=tlsDhcpRestoreLseStateEncapVal, tmnxServConformance=tmnxServConformance, tlsFdbSdpId=tlsFdbSdpId, TSapEgrQueueId=TSapEgrQueueId, svcTraps=svcTraps)
