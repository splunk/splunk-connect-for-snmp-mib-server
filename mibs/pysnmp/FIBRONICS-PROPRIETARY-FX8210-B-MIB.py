#
# PySNMP MIB module FIBRONICS-PROPRIETARY-FX8210-B-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FIBRONICS-PROPRIETARY-FX8210-B-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:59:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, TimeTicks, iso, Counter64, IpAddress, MibIdentifier, NotificationType, enterprises, Integer32, Gauge32, ObjectIdentity, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "TimeTicks", "iso", "Counter64", "IpAddress", "MibIdentifier", "NotificationType", "enterprises", "Integer32", "Gauge32", "ObjectIdentity", "Counter32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
spartacus = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3))
dec2 = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 4))
propSys = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 5))
propIp = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 6))
propFddi = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 7))
decrun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 1))
decperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 2))
traprun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 1))
traperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 2))
dec2run = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 4, 1))
dec2perm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 4, 2))
propSysRun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 5, 1))
propSysPerm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 5, 2))
propIpRun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 6, 1))
propIpPerm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 6, 2))
rcircs = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 1, 1))
rnodes = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 1, 2))
rareas = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 1, 3))
pcircs = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 2, 1))
pnodes = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 2, 2))
pnRtParms = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1))
rIpRipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 6, 1, 15))
rIpArpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 6, 1, 16))
rIpPArp = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 6, 1, 17))
rnNmParms = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 1))
rnRtParms = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2))
rnRtCount = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 3))
rCircNum = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rCircNum.setStatus('mandatory')
rccTable = MibTable((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 2), )
if mibBuilder.loadTexts: rccTable.setStatus('mandatory')
rccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 2, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rccIndex"))
if mibBuilder.loadTexts: rccEntry.setStatus('mandatory')
rccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rccIndex.setStatus('mandatory')
rccState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rccState.setStatus('mandatory')
rccType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rccType.setStatus('mandatory')
rccCost = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rccCost.setStatus('mandatory')
rccBSize = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rccBSize.setStatus('mandatory')
rccHTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rccHTimer.setStatus('mandatory')
rccLine = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rccLine.setStatus('mandatory')
rbcTable = MibTable((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 3), )
if mibBuilder.loadTexts: rbcTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 3, 1) + (1000, ), Integer32())
rbcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 3, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: rbcEntry.setStatus('mandatory')
rbcDrout = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbcDrout.setStatus('mandatory')
rbcMrout = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbcMrout.setStatus('mandatory')
rbcRpri = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbcRpri.setStatus('mandatory')
rCCntrs = MibTable((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 4), )
if mibBuilder.loadTexts: rCCntrs.setStatus('mandatory')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 4, 1) + (1001, ), Integer32())
rCCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 4, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: rCCntrEntry.setStatus('mandatory')
rCCntTePktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rCCntTePktsIn.setStatus('mandatory')
rCCntOPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rCCntOPktsOut.setStatus('mandatory')
rCCntTrPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rCCntTrPktsIn.setStatus('mandatory')
rCCntTrPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rCCntTrPktsOut.setStatus('mandatory')
rCCntAdjDown = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rCCntAdjDown.setStatus('mandatory')
rnNmId = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnNmId.setStatus('mandatory')
rnNmPaddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnNmPaddr.setStatus('mandatory')
rnRpAMaxC = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpAMaxC.setStatus('mandatory')
rnRpAMaxH = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpAMaxH.setStatus('mandatory')
rnRpBRtTmr = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpBRtTmr.setStatus('mandatory')
rnRpBSize = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpBSize.setStatus('mandatory')
rnRpMAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpMAddr.setStatus('mandatory')
rnRpMArea = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpMArea.setStatus('mandatory')
rnRpMaxBNR = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpMaxBNR.setStatus('mandatory')
rnRpMaxBR = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpMaxBR.setStatus('mandatory')
rnRpMaxCir = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRpMaxCir.setStatus('mandatory')
rnRpMaxCost = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpMaxCost.setStatus('mandatory')
rnRpMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpMaxHops.setStatus('mandatory')
rnRpMaxV = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpMaxV.setStatus('mandatory')
rnRpVers = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRpVers.setStatus('mandatory')
rnRpSegBuf = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRpSegBuf.setStatus('mandatory')
rnRpType = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpType.setStatus('mandatory')
rnRpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRpAddr.setStatus('mandatory')
rnRpUseL2A = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnRpUseL2A.setStatus('mandatory')
rnRcAgedPkt = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRcAgedPkt.setStatus('mandatory')
rnRcUnReach = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRcUnReach.setStatus('mandatory')
rnRcBadRange = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRcBadRange.setStatus('mandatory')
rnRcOversize = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRcOversize.setStatus('mandatory')
rnRcFormErr = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRcFormErr.setStatus('mandatory')
rnRcRtUpLoss = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRcRtUpLoss.setStatus('mandatory')
rnAdjTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 4), )
if mibBuilder.loadTexts: rnAdjTbl.setStatus('mandatory')
rnAdjEnt = MibTableRow((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 4, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rnAdjAddr"))
if mibBuilder.loadTexts: rnAdjEnt.setStatus('mandatory')
rnAdjAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnAdjAddr.setStatus('mandatory')
rnAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnAdjState.setStatus('mandatory')
rnAdjType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnAdjType.setStatus('mandatory')
rnAdjCIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnAdjCIdx.setStatus('mandatory')
rnAdjBSize = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnAdjBSize.setStatus('mandatory')
rnAdjLTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnAdjLTmr.setStatus('mandatory')
rnAdjPri = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnAdjPri.setStatus('mandatory')
rnLvl1Tbl = MibTable((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 5), )
if mibBuilder.loadTexts: rnLvl1Tbl.setStatus('mandatory')
rnLvl1Ent = MibTableRow((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 5, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rnLvl1Addr"))
if mibBuilder.loadTexts: rnLvl1Ent.setStatus('mandatory')
rnLvl1Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnLvl1Addr.setStatus('mandatory')
rnLvl1Cidx = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnLvl1Cidx.setStatus('mandatory')
rnLvl1Cost = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnLvl1Cost.setStatus('mandatory')
rnLvl1Hops = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnLvl1Hops.setStatus('mandatory')
rnLvl1Next = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 2, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnLvl1Next.setStatus('mandatory')
raParmTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 2, 1, 3, 1), )
if mibBuilder.loadTexts: raParmTbl.setStatus('mandatory')
raParmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 2, 1, 3, 1, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "raNum"))
if mibBuilder.loadTexts: raParmEntry.setStatus('mandatory')
raNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raNum.setStatus('mandatory')
raCIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raCIdx.setStatus('mandatory')
raCost = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raCost.setStatus('mandatory')
raHops = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raHops.setStatus('mandatory')
raNext = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 1, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raNext.setStatus('mandatory')
pccTable = MibTable((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 1), )
if mibBuilder.loadTexts: pccTable.setStatus('mandatory')
pccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 1, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pccIndex"))
if mibBuilder.loadTexts: pccEntry.setStatus('mandatory')
pccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccIndex.setStatus('mandatory')
pccState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccState.setStatus('mandatory')
pccCost = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccCost.setStatus('mandatory')
pccHTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccHTimer.setStatus('mandatory')
pbcTable = MibTable((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 2), )
if mibBuilder.loadTexts: pbcTable.setStatus('mandatory')
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 2, 1) + (1002, ), Integer32())
pbcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 2, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pysmiFakeCol1002"))
if mibBuilder.loadTexts: pbcEntry.setStatus('mandatory')
pbcMrout = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcMrout.setStatus('mandatory')
pbcRpri = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 2, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcRpri.setStatus('mandatory')
pnRpAMaxC = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpAMaxC.setStatus('mandatory')
pnRpAMaxH = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpAMaxH.setStatus('mandatory')
pnRpBRtTmr = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpBRtTmr.setStatus('mandatory')
pnRpBSize = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpBSize.setStatus('mandatory')
pnRpMAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpMAddr.setStatus('mandatory')
pnRpMArea = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpMArea.setStatus('mandatory')
pnRpMaxBNR = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpMaxBNR.setStatus('mandatory')
pnRpMaxBR = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpMaxBR.setStatus('mandatory')
pnRpMaxCost = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpMaxCost.setStatus('mandatory')
pnRpMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpMaxHops.setStatus('mandatory')
pnRpMaxV = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpMaxV.setStatus('mandatory')
pnRpType = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpType.setStatus('mandatory')
pnRpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpAddr.setStatus('mandatory')
pnRpUseL2A = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpUseL2A.setStatus('mandatory')
pnRpRstDaddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnRpRstDaddr.setStatus('mandatory')
pDecDefaults = MibScalar((1, 3, 6, 1, 4, 1, 22, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-defaults", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pDecDefaults.setStatus('mandatory')
rTrapAddrTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 3, 1, 1), )
if mibBuilder.loadTexts: rTrapAddrTbl.setStatus('mandatory')
rTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rTrapAddrAddr"))
if mibBuilder.loadTexts: rTrapAddrEntry.setStatus('mandatory')
rTrapAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrAddr.setStatus('mandatory')
rTrapAddrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrComm.setStatus('mandatory')
rTrapAddrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrVer.setStatus('mandatory')
rTrapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrType.setStatus('mandatory')
rTrapAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrState.setStatus('mandatory')
pTrapAddrTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 3, 2, 1), )
if mibBuilder.loadTexts: pTrapAddrTbl.setStatus('mandatory')
pTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pTrapAddrAddr"))
if mibBuilder.loadTexts: pTrapAddrEntry.setStatus('mandatory')
pTrapAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrAddr.setStatus('mandatory')
pTrapAddrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrComm.setStatus('mandatory')
pTrapAddrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrVer.setStatus('mandatory')
pTrapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrType.setStatus('mandatory')
pTrapAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrState.setStatus('mandatory')
pTrapDefaults = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-defautls", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapDefaults.setStatus('mandatory')
rClParmTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 4, 1, 1), )
if mibBuilder.loadTexts: rClParmTbl.setStatus('mandatory')
pysmiFakeCol1003 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 1, 1) + (1003, ), Integer32())
rClParmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 4, 1, 1, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pysmiFakeCol1003"))
if mibBuilder.loadTexts: rClParmEntry.setStatus('mandatory')
rClState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rClState.setStatus('mandatory')
rClSubSt = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rClSubSt.setStatus('mandatory')
rBlParmTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 4, 1, 2), )
if mibBuilder.loadTexts: rBlParmTbl.setStatus('mandatory')
pysmiFakeCol1004 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 2, 1) + (1004, ), Integer32())
rBlParmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 4, 1, 2, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pysmiFakeCol1004"))
if mibBuilder.loadTexts: rBlParmEntry.setStatus('mandatory')
rBlHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rBlHAddr.setStatus('mandatory')
rElCountTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 4, 1, 3), )
if mibBuilder.loadTexts: rElCountTbl.setStatus('mandatory')
pysmiFakeCol1005 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1) + (1005, ), Integer32())
rElCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pysmiFakeCol1005"))
if mibBuilder.loadTexts: rElCountEntry.setStatus('mandatory')
rElFrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElFrIn.setStatus('mandatory')
rElFrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElFrOut.setStatus('mandatory')
rElBcBIn = MibScalar((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElBcBIn.setStatus('mandatory')
rElBcFIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElBcFIn.setStatus('mandatory')
rElMcBIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElMcBIn.setStatus('mandatory')
rElMcFIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElMcFIn.setStatus('mandatory')
rElFDef = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElFDef.setStatus('mandatory')
rElF1Col = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElF1Col.setStatus('mandatory')
rElFMCol = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElFMCol.setStatus('mandatory')
rElOutF = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElOutF.setStatus('mandatory')
rElCDetF = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElCDetF.setStatus('mandatory')
rElInF = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElInF.setStatus('mandatory')
rElBadD = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElBadD.setStatus('mandatory')
rElOvRun = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElOvRun.setStatus('mandatory')
rElNoBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 4, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rElNoBuf.setStatus('mandatory')
rTod = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTod.setStatus('mandatory')
rFddiIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFddiIfIndex.setStatus('mandatory')
rPingTable = MibTable((1, 3, 6, 1, 4, 1, 22, 5, 1, 3), )
if mibBuilder.loadTexts: rPingTable.setStatus('mandatory')
rPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 5, 1, 3, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rPProto"), (0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rPDest"))
if mibBuilder.loadTexts: rPingEntry.setStatus('mandatory')
rPProto = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("icmp-echo", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPProto.setStatus('mandatory')
rPDest = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDest.setStatus('mandatory')
rPTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPTimeOut.setStatus('mandatory')
rPReply = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alive", 1), ("no-response", 2), ("in-process", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPReply.setStatus('mandatory')
rPState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPState.setStatus('mandatory')
rDebugTable = MibTable((1, 3, 6, 1, 4, 1, 22, 5, 1, 4), )
if mibBuilder.loadTexts: rDebugTable.setStatus('mandatory')
rDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 5, 1, 4, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rDTaskId"))
if mibBuilder.loadTexts: rDebugEntry.setStatus('mandatory')
rDTaskId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rDTaskId.setStatus('mandatory')
rDDevStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rDDevStat.setStatus('mandatory')
rDRunStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rDRunStat.setStatus('mandatory')
rUDnld = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rUDnld.setStatus('mandatory')
rURset = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rURset.setStatus('mandatory')
rUIpSw = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rUIpSw.setStatus('mandatory')
rUDecSw = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rUDecSw.setStatus('mandatory')
rUBrSw = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rUBrSw.setStatus('mandatory')
rUIpCfg = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rt-cfg-host-only", 1), ("rt-cfg-br-ether", 2), ("rt-cfg-br-all", 3), ("rt-cfg-rte-all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rUIpCfg.setStatus('mandatory')
rURunningVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rURunningVersion.setStatus('mandatory')
rUDnldAllowed = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rUDnldAllowed.setStatus('mandatory')
rUInitFlash = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rUInitFlash.setStatus('mandatory')
pPMibVer = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPMibVer.setStatus('mandatory')
pEepVer = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single-eth", 1), ("dual-eth", 2), ("brouter", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pEepVer.setStatus('mandatory')
pUIpSw = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pUIpSw.setStatus('mandatory')
pUDecSw = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pUDecSw.setStatus('mandatory')
pUBrSw = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pUBrSw.setStatus('mandatory')
pUIpCfg = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pUIpCfg.setStatus('mandatory')
pULoadVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pULoadVersion.setStatus('mandatory')
pUDefaults = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pUDefaults.setStatus('mandatory')
pUFlashTable = MibTable((1, 3, 6, 1, 4, 1, 22, 5, 2, 12), )
if mibBuilder.loadTexts: pUFlashTable.setStatus('mandatory')
pUFlashEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 5, 2, 12, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "FlashIndex"))
if mibBuilder.loadTexts: pUFlashEntry.setStatus('mandatory')
flashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashIndex.setStatus('mandatory')
flashVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 2, 12, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashVersion.setStatus('mandatory')
flashState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 5, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("dnloading-in-process", 3), ("reset-in-progress", 4), ("reset-complete", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashState.setStatus('mandatory')
sysPermBridgeAvailable = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPermBridgeAvailable.setStatus('mandatory')
sysPermIpAvailable = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPermIpAvailable.setStatus('mandatory')
sysPermDecAvailable = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPermDecAvailable.setStatus('mandatory')
pUloadType = MibScalar((1, 3, 6, 1, 4, 1, 22, 5, 2, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pUloadType.setStatus('mandatory')
rIpMaskTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 1), )
if mibBuilder.loadTexts: rIpMaskTable.setStatus('mandatory')
rIpMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 1, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rMaskNet"))
if mibBuilder.loadTexts: rIpMaskEntry.setStatus('mandatory')
rMaskNet = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rMaskNet.setStatus('mandatory')
rMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rMask.setStatus('mandatory')
rMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rMaskState.setStatus('mandatory')
rIpOurAddrTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 2), )
if mibBuilder.loadTexts: rIpOurAddrTable.setStatus('mandatory')
rIpOurAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 2, 1), ).setIndexNames((0, "SNMPv2-SMI", "IpAddress"))
if mibBuilder.loadTexts: rIpOurAddrEntry.setStatus('mandatory')
rAddrDbcast = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-directed-bdcst", 1), ("bdcst-host", 2), ("bdcst-net", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rAddrDbcast.setStatus('mandatory')
rAddrRipMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rAddrRipMetric.setStatus('mandatory')
rAddrRipState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("quiet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rAddrRipState.setStatus('mandatory')
rAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rAddrState.setStatus('mandatory')
rIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 3), )
if mibBuilder.loadTexts: rIpIfTable.setStatus('mandatory')
pysmiFakeCol1006 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 3, 1) + (1006, ), Integer32())
rIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 3, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pysmiFakeCol1006"))
if mibBuilder.loadTexts: rIpIfEntry.setStatus('mandatory')
rIfArpStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rIfArpStat.setStatus('mandatory')
rIfPArpStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rIfPArpStat.setStatus('mandatory')
rIfBcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rIfBcMask.setStatus('mandatory')
rDftGw = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rDftGw.setStatus('mandatory')
rIpAtTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 5), )
if mibBuilder.loadTexts: rIpAtTable.setStatus('mandatory')
pysmiFakeCol1007 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 5, 1) + (1007, ), Integer32())
pysmiFakeCol1008 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 5, 1) + (1008, ), Integer32())
rIpAtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 5, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pysmiFakeCol1007"), (0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pysmiFakeCol1008"), (0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "NetworkAddress"))
if mibBuilder.loadTexts: rIpAtEntry.setStatus('mandatory')
rAtStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rAtStatic.setStatus('mandatory')
rAtAge = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rAtAge.setStatus('mandatory')
rIpRtTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 6), )
if mibBuilder.loadTexts: rIpRtTable.setStatus('mandatory')
rIpRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 6, 1), ).setIndexNames((0, "SNMPv2-SMI", "IpAddress"))
if mibBuilder.loadTexts: rIpRtEntry.setStatus('mandatory')
rRtStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRtStatic.setStatus('mandatory')
rRipTrInd = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("trusted", 3), ("not-trusted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rRipTrInd.setStatus('mandatory')
rRipTrustTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 8), )
if mibBuilder.loadTexts: rRipTrustTable.setStatus('mandatory')
rRipTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 8, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rTrRestGw"))
if mibBuilder.loadTexts: rRipTrustEntry.setStatus('mandatory')
rTrRestGw = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrRestGw.setStatus('mandatory')
rTrRestState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrRestState.setStatus('mandatory')
rRipLsnIndTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 9), )
if mibBuilder.loadTexts: rRipLsnIndTable.setStatus('mandatory')
rRipLsnIndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 9, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rRipLsnIndDest"))
if mibBuilder.loadTexts: rRipLsnIndEntry.setStatus('mandatory')
rRipLsnIndDest = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 9, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rRipLsnIndDest.setStatus('mandatory')
rRipLsnType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("listen", 3), ("do-not-listen", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rRipLsnType.setStatus('mandatory')
rRipLsnTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 10), )
if mibBuilder.loadTexts: rRipLsnTable.setStatus('mandatory')
rRipLsnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 10, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rLsnAddr"), (0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rLsnRstAddr"))
if mibBuilder.loadTexts: rRipLsnEntry.setStatus('mandatory')
rLsnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rLsnAddr.setStatus('mandatory')
rLsnRstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rLsnRstAddr.setStatus('mandatory')
rLsnRstState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rLsnRstState.setStatus('mandatory')
rRipAnncIndTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 11), )
if mibBuilder.loadTexts: rRipAnncIndTable.setStatus('mandatory')
rRipAnncIndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 11, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rRipAnncIndNet"))
if mibBuilder.loadTexts: rRipAnncIndEntry.setStatus('mandatory')
rRipAnncIndNet = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 11, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rRipAnncIndNet.setStatus('mandatory')
rRipAnncType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("announce", 3), ("do-not-announce", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rRipAnncType.setStatus('mandatory')
rRipAnncTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 12), )
if mibBuilder.loadTexts: rRipAnncTable.setStatus('mandatory')
rRipAnncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 12, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rAnncDestAddr"), (0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rAnncNet"))
if mibBuilder.loadTexts: rRipAnncEntry.setStatus('mandatory')
rAnncNet = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 12, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rAnncNet.setStatus('mandatory')
rAnncDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rAnncDestAddr.setStatus('mandatory')
rAnncRstState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rAnncRstState.setStatus('mandatory')
rRipSrcTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 13), )
if mibBuilder.loadTexts: rRipSrcTable.setStatus('mandatory')
rRipSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 13, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rSrcAddr"), (0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rSrcRstGw"))
if mibBuilder.loadTexts: rRipSrcEntry.setStatus('mandatory')
rSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 13, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rSrcAddr.setStatus('mandatory')
rSrcRstGw = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rSrcRstGw.setStatus('mandatory')
rSrcRstState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rSrcRstState.setStatus('mandatory')
rIpRtEvTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 1, 14), )
if mibBuilder.loadTexts: rIpRtEvTable.setStatus('mandatory')
rIpRtEvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 1, 14, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rRtEvTskId"), (0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "rRtEvCode"))
if mibBuilder.loadTexts: rIpRtEvEntry.setStatus('mandatory')
rRtEvTskId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRtEvTskId.setStatus('mandatory')
rRtEvCode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRtEvCode.setStatus('mandatory')
rRtEvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rRtEvStatus.setStatus('mandatory')
rRipTotRef = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 15, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRipTotRef.setStatus('mandatory')
rRipTotFnd = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 15, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRipTotFnd.setStatus('mandatory')
rRipUdpRcv = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 15, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRipUdpRcv.setStatus('mandatory')
rRipUdpXmt = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 15, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRipUdpXmt.setStatus('mandatory')
rRipUdpTrig = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 15, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRipUdpTrig.setStatus('mandatory')
rRipReqRcv = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 15, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRipReqRcv.setStatus('mandatory')
rRipReqXmt = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 15, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRipReqXmt.setStatus('mandatory')
rRipInvRcv = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 15, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rRipInvRcv.setStatus('mandatory')
rArpInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpInMsgs.setStatus('mandatory')
rArpInErr = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpInErr.setStatus('mandatory')
rArpInIll = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpInIll.setStatus('mandatory')
rArpInOpCd = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpInOpCd.setStatus('mandatory')
rArpInReq = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpInReq.setStatus('mandatory')
rArpInRep = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpInRep.setStatus('mandatory')
rArpInNotMe = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpInNotMe.setStatus('mandatory')
rArpOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpOutMsgs.setStatus('mandatory')
rArpOutErr = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpOutErr.setStatus('mandatory')
rArpOutReq = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpOutReq.setStatus('mandatory')
rArpOutRep = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpOutRep.setStatus('mandatory')
rArpResReq = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 16, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rArpResReq.setStatus('mandatory')
rPArpInRep = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 17, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPArpInRep.setStatus('mandatory')
rPArpInReqSrch = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 17, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPArpInReqSrch.setStatus('mandatory')
rPArpOutReq = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 17, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPArpOutReq.setStatus('mandatory')
rPArpOutRep = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 17, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPArpOutRep.setStatus('mandatory')
rPArpOutActRep = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 17, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPArpOutActRep.setStatus('mandatory')
rPArpToutSrch = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 17, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPArpToutSrch.setStatus('mandatory')
rPArpNaiveReq = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 1, 17, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPArpNaiveReq.setStatus('mandatory')
pIpMaskTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 2, 1), )
if mibBuilder.loadTexts: pIpMaskTable.setStatus('mandatory')
pIpMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 2, 1, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pMaskNet"))
if mibBuilder.loadTexts: pIpMaskEntry.setStatus('mandatory')
pMaskNet = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaskNet.setStatus('mandatory')
pMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMask.setStatus('mandatory')
pMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaskState.setStatus('mandatory')
pIpOurAddrTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 2, 2), )
if mibBuilder.loadTexts: pIpOurAddrTable.setStatus('mandatory')
pIpOurAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 2, 2, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pAddrOurAddr"))
if mibBuilder.loadTexts: pIpOurAddrEntry.setStatus('mandatory')
pAddrOurAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAddrOurAddr.setStatus('mandatory')
pAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAddrIfIndex.setStatus('mandatory')
pAddrBcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAddrBcAddr.setStatus('mandatory')
pAddrDbcast = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAddrDbcast.setStatus('mandatory')
pAddrRipMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAddrRipMetric.setStatus('mandatory')
pAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAddrState.setStatus('mandatory')
pAddrRipState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("quiet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAddrRipState.setStatus('mandatory')
pIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 22, 6, 2, 3), )
if mibBuilder.loadTexts: pIpIfTable.setStatus('mandatory')
pIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 6, 2, 3, 1), ).setIndexNames((0, "FIBRONICS-PROPRIETARY-FX8210-B-MIB", "pIfIndex"))
if mibBuilder.loadTexts: pIpIfEntry.setStatus('mandatory')
pIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIfIndex.setStatus('mandatory')
pIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pIfType.setStatus('mandatory')
pIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pIfMtu.setStatus('mandatory')
pIfArpStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pIfArpStat.setStatus('mandatory')
pIfPArpStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pIfPArpStat.setStatus('mandatory')
pIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pIfAdminStat.setStatus('mandatory')
pIfBcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 6, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pIfBcMask.setStatus('mandatory')
pDftGw = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pDftGw.setStatus('mandatory')
pIpDefaults = MibScalar((1, 3, 6, 1, 4, 1, 22, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-defaults", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pIpDefaults.setStatus('mandatory')
fddiSmtChge = MibScalar((1, 3, 6, 1, 4, 1, 22, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSmtChge.setStatus('mandatory')
fddiMacChge = MibScalar((1, 3, 6, 1, 4, 1, 22, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMacChge.setStatus('mandatory')
fddiPortChge = MibScalar((1, 3, 6, 1, 4, 1, 22, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiPortChge.setStatus('mandatory')
fddiAttachChge = MibScalar((1, 3, 6, 1, 4, 1, 22, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiAttachChge.setStatus('mandatory')
mibBuilder.exportSymbols("FIBRONICS-PROPRIETARY-FX8210-B-MIB", rnRpType=rnRpType, rnRpMaxCir=rnRpMaxCir, rccHTimer=rccHTimer, rAnncDestAddr=rAnncDestAddr, rnAdjAddr=rnAdjAddr, pTrapAddrVer=pTrapAddrVer, rRipTrustEntry=rRipTrustEntry, rnRcBadRange=rnRcBadRange, rArpInNotMe=rArpInNotMe, rTrapAddrAddr=rTrapAddrAddr, rRtEvTskId=rRtEvTskId, rClParmEntry=rClParmEntry, pysmiFakeCol1003=pysmiFakeCol1003, rAddrRipState=rAddrRipState, pnRpBRtTmr=pnRpBRtTmr, rURset=rURset, pysmiFakeCol1001=pysmiFakeCol1001, rArpOutReq=rArpOutReq, rPArpOutReq=rPArpOutReq, rRtStatic=rRtStatic, rDRunStat=rDRunStat, rArpInIll=rArpInIll, pAddrOurAddr=pAddrOurAddr, rnLvl1Next=rnLvl1Next, propSysRun=propSysRun, rIpIfEntry=rIpIfEntry, rLsnRstState=rLsnRstState, pIfMtu=pIfMtu, traperm=traperm, rArpResReq=rArpResReq, rRipAnncIndNet=rRipAnncIndNet, pTrapAddrState=pTrapAddrState, pAddrRipMetric=pAddrRipMetric, pIpOurAddrTable=pIpOurAddrTable, rnRcAgedPkt=rnRcAgedPkt, rAtAge=rAtAge, rnAdjBSize=rnAdjBSize, rRipTotRef=rRipTotRef, rbcRpri=rbcRpri, rTrapAddrVer=rTrapAddrVer, rnLvl1Ent=rnLvl1Ent, rPProto=rPProto, rccTable=rccTable, pysmiFakeCol1006=pysmiFakeCol1006, rArpOutErr=rArpOutErr, pAddrRipState=pAddrRipState, spartacus=spartacus, rCCntTrPktsIn=rCCntTrPktsIn, pccTable=pccTable, rPArpNaiveReq=rPArpNaiveReq, rRipAnncIndEntry=rRipAnncIndEntry, pUFlashTable=pUFlashTable, pIpOurAddrEntry=pIpOurAddrEntry, rRtEvStatus=rRtEvStatus, pAddrDbcast=pAddrDbcast, pnRpMaxV=pnRpMaxV, rnLvl1Cidx=rnLvl1Cidx, rIpIfTable=rIpIfTable, pEepVer=pEepVer, rMask=rMask, rRtEvCode=rRtEvCode, pnRpMaxBNR=pnRpMaxBNR, rPReply=rPReply, pTrapAddrComm=pTrapAddrComm, rccBSize=rccBSize, rSrcAddr=rSrcAddr, rnLvl1Cost=rnLvl1Cost, pnRpMArea=pnRpMArea, rElCountEntry=rElCountEntry, rURunningVersion=rURunningVersion, fddiPortChge=fddiPortChge, rRipTotFnd=rRipTotFnd, flashIndex=flashIndex, rArpOutRep=rArpOutRep, propIpRun=propIpRun, rccIndex=rccIndex, rElNoBuf=rElNoBuf, rRipAnncType=rRipAnncType, pUFlashEntry=pUFlashEntry, rnRpMaxHops=rnRpMaxHops, sysPermIpAvailable=sysPermIpAvailable, rnLvl1Tbl=rnLvl1Tbl, rAddrDbcast=rAddrDbcast, rIpRipStats=rIpRipStats, raHops=raHops, rIpRtEvEntry=rIpRtEvEntry, rCCntrs=rCCntrs, pPMibVer=pPMibVer, rnodes=rnodes, rnNmPaddr=rnNmPaddr, pULoadVersion=pULoadVersion, rElFMCol=rElFMCol, rnRpMaxV=rnRpMaxV, rRipLsnIndTable=rRipLsnIndTable, rnRpMaxBNR=rnRpMaxBNR, rnRcUnReach=rnRcUnReach, rElMcBIn=rElMcBIn, pbcTable=pbcTable, rPingEntry=rPingEntry, rAtStatic=rAtStatic, rBlParmEntry=rBlParmEntry, rnAdjCIdx=rnAdjCIdx, rArpInReq=rArpInReq, rIpAtTable=rIpAtTable, pUDefaults=pUDefaults, fddiSmtChge=fddiSmtChge, rIpRtTable=rIpRtTable, pysmiFakeCol1004=pysmiFakeCol1004, pnRpAMaxC=pnRpAMaxC, rnAdjEnt=rnAdjEnt, rRipLsnType=rRipLsnType, rMaskNet=rMaskNet, rPState=rPState, rUBrSw=rUBrSw, rnRpMArea=rnRpMArea, rElCountTbl=rElCountTbl, rnRpUseL2A=rnRpUseL2A, propIp=propIp, propFddi=propFddi, rnRpMAddr=rnRpMAddr, pUloadType=pUloadType, raParmEntry=raParmEntry, pIfArpStat=pIfArpStat, pccEntry=pccEntry, rDftGw=rDftGw, rcircs=rcircs, pnRpBSize=pnRpBSize, rnRcRtUpLoss=rnRcRtUpLoss, rIpOurAddrEntry=rIpOurAddrEntry, rSrcRstState=rSrcRstState, rIpAtEntry=rIpAtEntry, pIpIfTable=pIpIfTable, pIpIfEntry=pIpIfEntry, rTrRestGw=rTrRestGw, pbcEntry=pbcEntry, rRipReqRcv=rRipReqRcv, pcircs=pcircs, pnRpMaxHops=pnRpMaxHops, pMaskState=pMaskState, rIpOurAddrTable=rIpOurAddrTable, rIfArpStat=rIfArpStat, rnRpMaxCost=rnRpMaxCost, rIpMaskTable=rIpMaskTable, rElMcFIn=rElMcFIn, rTod=rTod, pIfPArpStat=pIfPArpStat, rIpArpStats=rIpArpStats, dec=dec, rClState=rClState, decrun=decrun, rAnncNet=rAnncNet, pysmiFakeCol1007=pysmiFakeCol1007, pnRpType=pnRpType, raNum=raNum, rccState=rccState, rElOutF=rElOutF, rElBadD=rElBadD, rArpInMsgs=rArpInMsgs, rRipAnncIndTable=rRipAnncIndTable, rnAdjState=rnAdjState, pbcRpri=pbcRpri, rccEntry=rccEntry, rElBcFIn=rElBcFIn, rElCDetF=rElCDetF, rElBcBIn=rElBcBIn, pAddrBcAddr=pAddrBcAddr, rClSubSt=rClSubSt, pMaskNet=pMaskNet, rnRpVers=rnRpVers, rnAdjTbl=rnAdjTbl, pIfBcMask=pIfBcMask, rnAdjType=rnAdjType, rCCntTePktsIn=rCCntTePktsIn, rCCntrEntry=rCCntrEntry, rDDevStat=rDDevStat, sysPermBridgeAvailable=sysPermBridgeAvailable, rRipLsnIndEntry=rRipLsnIndEntry, rAnncRstState=rAnncRstState, rDTaskId=rDTaskId, pMask=pMask, rPDest=rPDest, rSrcRstGw=rSrcRstGw, rAddrRipMetric=rAddrRipMetric, raParmTbl=raParmTbl, rClParmTbl=rClParmTbl, rCircNum=rCircNum, rnRpBRtTmr=rnRpBRtTmr, rRipLsnTable=rRipLsnTable, pUIpCfg=pUIpCfg, rRipReqXmt=rRipReqXmt, rTrapAddrState=rTrapAddrState, pnRpRstDaddr=pnRpRstDaddr, rTrapAddrComm=rTrapAddrComm, rRipSrcTable=rRipSrcTable, trap=trap, rnRpAddr=rnRpAddr, propSysPerm=propSysPerm, pIfIndex=pIfIndex, fddiAttachChge=fddiAttachChge, flashVersion=flashVersion, pAddrIfIndex=pAddrIfIndex, rBlParmTbl=rBlParmTbl, rBlHAddr=rBlHAddr, rPArpOutRep=rPArpOutRep, rnLvl1Addr=rnLvl1Addr, rFddiIfIndex=rFddiIfIndex, raNext=raNext, pDftGw=pDftGw, rRipUdpRcv=rRipUdpRcv, rPTimeOut=rPTimeOut, rIpRtEntry=rIpRtEntry, propIpPerm=propIpPerm, rUIpCfg=rUIpCfg, decperm=decperm, flashState=flashState, pnRpAMaxH=pnRpAMaxH, rElFrOut=rElFrOut, rPArpInReqSrch=rPArpInReqSrch, rnRpMaxBR=rnRpMaxBR, rRipSrcEntry=rRipSrcEntry, rElF1Col=rElF1Col, pIfType=pIfType, rnRcFormErr=rnRcFormErr, rbcMrout=rbcMrout, rnRtCount=rnRtCount, rccCost=rccCost, rnAdjPri=rnAdjPri, propSys=propSys, pbcMrout=pbcMrout, rPingTable=rPingTable, rDebugTable=rDebugTable, rccType=rccType, rTrRestState=rTrRestState, pysmiFakeCol1000=pysmiFakeCol1000, pIpMaskEntry=pIpMaskEntry, rDebugEntry=rDebugEntry, sysPermDecAvailable=sysPermDecAvailable, rnRpBSize=rnRpBSize, rUDnldAllowed=rUDnldAllowed, rIfBcMask=rIfBcMask, rRipTrInd=rRipTrInd, rRipTrustTable=rRipTrustTable, rAddrState=rAddrState, pysmiFakeCol1008=pysmiFakeCol1008, pTrapDefaults=pTrapDefaults, rRipUdpTrig=rRipUdpTrig, rElFrIn=rElFrIn, rPArpOutActRep=rPArpOutActRep, rCCntAdjDown=rCCntAdjDown, rLsnRstAddr=rLsnRstAddr, pccHTimer=pccHTimer, rRipAnncEntry=rRipAnncEntry, pUBrSw=pUBrSw, rnRcOversize=rnRcOversize)
mibBuilder.exportSymbols("FIBRONICS-PROPRIETARY-FX8210-B-MIB", raCost=raCost, pysmiFakeCol1005=pysmiFakeCol1005, pccIndex=pccIndex, rPArpInRep=rPArpInRep, pysmiFakeCol1002=pysmiFakeCol1002, rArpInOpCd=rArpInOpCd, rbcEntry=rbcEntry, rnRtParms=rnRtParms, fddiMacChge=fddiMacChge, pUDecSw=pUDecSw, rnRpSegBuf=rnRpSegBuf, rnAdjLTmr=rnAdjLTmr, rMaskState=rMaskState, pUIpSw=pUIpSw, rCCntOPktsOut=rCCntOPktsOut, raCIdx=raCIdx, pnRpMaxCost=pnRpMaxCost, rnRpAMaxC=rnRpAMaxC, rTrapAddrType=rTrapAddrType, pccState=pccState, traprun=traprun, rRipInvRcv=rRipInvRcv, pIpDefaults=pIpDefaults, pnodes=pnodes, rnRpAMaxH=rnRpAMaxH, pDecDefaults=pDecDefaults, pTrapAddrType=pTrapAddrType, rCCntTrPktsOut=rCCntTrPktsOut, pIpMaskTable=pIpMaskTable, pccCost=pccCost, pnRpMaxBR=pnRpMaxBR, rElFDef=rElFDef, pIfAdminStat=pIfAdminStat, rElInF=rElInF, rElOvRun=rElOvRun, rIpMaskEntry=rIpMaskEntry, pnRpAddr=pnRpAddr, rbcDrout=rbcDrout, rTrapAddrEntry=rTrapAddrEntry, rArpOutMsgs=rArpOutMsgs, rUDecSw=rUDecSw, pTrapAddrAddr=pTrapAddrAddr, dec2run=dec2run, rnNmId=rnNmId, rTrapAddrTbl=rTrapAddrTbl, rIpRtEvTable=rIpRtEvTable, rnNmParms=rnNmParms, rPArpToutSrch=rPArpToutSrch, pAddrState=pAddrState, dec2perm=dec2perm, rbcTable=rbcTable, rareas=rareas, pnRpUseL2A=pnRpUseL2A, pnRtParms=pnRtParms, rRipUdpXmt=rRipUdpXmt, pTrapAddrTbl=pTrapAddrTbl, rUInitFlash=rUInitFlash, rnLvl1Hops=rnLvl1Hops, rArpInRep=rArpInRep, rLsnAddr=rLsnAddr, rccLine=rccLine, pTrapAddrEntry=pTrapAddrEntry, rIfPArpStat=rIfPArpStat, dec2=dec2, rArpInErr=rArpInErr, rRipLsnIndDest=rRipLsnIndDest, pnRpMAddr=pnRpMAddr, rRipLsnEntry=rRipLsnEntry, rUIpSw=rUIpSw, rRipAnncTable=rRipAnncTable, rIpPArp=rIpPArp, rUDnld=rUDnld)
