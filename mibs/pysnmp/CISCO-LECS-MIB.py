#
# PySNMP MIB module CISCO-LECS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LECS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:47:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
AtmLaneAddress, VciInteger, VpiInteger = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "AtmLaneAddress", "VciInteger", "VpiInteger")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, Integer32, Counter32, iso, ModuleIdentity, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Bits, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "Integer32", "Counter32", "iso", "ModuleIdentity", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Bits", "Unsigned32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
RowStatus, TimeStamp, TruthValue, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC-v1", "RowStatus", "TimeStamp", "TruthValue", "DisplayString", "MacAddress")
ciscoLecsMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38))
ciscoLecsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38, 1))
lecs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2))
lecsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38, 2))
lecsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38, 2, 1))
lecsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38, 2, 2))
lecsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1), )
if mibBuilder.loadTexts: lecsTable.setStatus('mandatory')
lecsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lecsEntry.setStatus('mandatory')
lecsConfigTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsConfigTableName.setStatus('mandatory')
lecsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsUpTime.setStatus('mandatory')
lecsInConfigReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsInConfigReqs.setStatus('mandatory')
lecsInConfigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsInConfigErrors.setStatus('mandatory')
lecsOutConfigFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsOutConfigFails.setStatus('mandatory')
lecsLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsLastFailCause.setStatus('mandatory')
lecsLastFailLec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 7), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsLastFailLec.setStatus('mandatory')
lecsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsOperStatus.setStatus('mandatory')
lecsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsAdminStatus.setStatus('mandatory')
lecsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsStatus.setStatus('mandatory')
lecsMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsMasterState.setStatus('mandatory')
lecsAtmAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 2), )
if mibBuilder.loadTexts: lecsAtmAddrTable.setStatus('mandatory')
lecsAtmAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-LECS-MIB", "lecsAtmAddrIndex"))
if mibBuilder.loadTexts: lecsAtmAddrEntry.setStatus('mandatory')
lecsAtmAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lecsAtmAddrIndex.setStatus('mandatory')
lecsAtmAddrSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 2, 1, 2), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsAtmAddrSpec.setStatus('mandatory')
lecsAtmAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsAtmAddrMask.setStatus('mandatory')
lecsAtmAddrActual = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 2, 1, 4), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsAtmAddrActual.setStatus('mandatory')
lecsAtmAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("actualValueInvalid", 1), ("actualValueValid", 2), ("registeredWithSignalling", 3), ("regSigAndValid", 4), ("registeredWithIlmi", 5), ("regIlmiAndValid", 6), ("regSigandIlmi", 7), ("regSigIlmiAndValid", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsAtmAddrState.setStatus('mandatory')
lecsAtmAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsAtmAddrStatus.setStatus('mandatory')
lecsConfigDirectConnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 3), )
if mibBuilder.loadTexts: lecsConfigDirectConnTable.setStatus('mandatory')
lecsConfigDirectConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-LECS-MIB", "lecsConfigDirectConnVpi"), (0, "CISCO-LECS-MIB", "lecsConfigDirectConnVci"))
if mibBuilder.loadTexts: lecsConfigDirectConnEntry.setStatus('mandatory')
lecsConfigDirectConnVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 3, 1, 1), VpiInteger())
if mibBuilder.loadTexts: lecsConfigDirectConnVpi.setStatus('mandatory')
lecsConfigDirectConnVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 3, 1, 2), VciInteger())
if mibBuilder.loadTexts: lecsConfigDirectConnVci.setStatus('mandatory')
lecsConfigDirectConnVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsConfigDirectConnVCType.setStatus('mandatory')
lecsConfigDirectConnSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 3, 1, 4), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsConfigDirectConnSrc.setStatus('mandatory')
lecsConfigDirectConnDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 3, 1, 5), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsConfigDirectConnDst.setStatus('mandatory')
lecsConfigDirectDstType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("laneClient", 1), ("laneServer", 2), ("laneConfig", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsConfigDirectDstType.setStatus('mandatory')
lecsConfigTblTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 1), )
if mibBuilder.loadTexts: lecsConfigTblTable.setStatus('mandatory')
lecsConfigTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 1, 1), ).setIndexNames((1, "CISCO-LECS-MIB", "lecsConfigTblName"))
if mibBuilder.loadTexts: lecsConfigTblEntry.setStatus('mandatory')
lecsConfigTblName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: lecsConfigTblName.setStatus('mandatory')
lecsConfigTblDefaultElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsConfigTblDefaultElanName.setStatus('mandatory')
lecsConfigTblStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsConfigTblStatus.setStatus('mandatory')
lecsElanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 2), )
if mibBuilder.loadTexts: lecsElanConfigTable.setStatus('mandatory')
lecsElanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LECS-MIB", "lecsConfigTblName"), (1, "CISCO-LECS-MIB", "lecsElanConfigName"))
if mibBuilder.loadTexts: lecsElanConfigEntry.setStatus('mandatory')
lecsElanConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: lecsElanConfigName.setStatus('mandatory')
lecsElanLesAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 2, 1, 2), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsElanLesAtmAddr.setStatus('mandatory')
lecsElanAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsElanAccess.setStatus('mandatory')
lecsElanConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsElanConfigStatus.setStatus('mandatory')
lecsElanSegmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsElanSegmentId.setStatus('mandatory')
lecsMacConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 3), )
if mibBuilder.loadTexts: lecsMacConfigTable.setStatus('mandatory')
lecsMacConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-LECS-MIB", "lecsConfigTblName"), (0, "CISCO-LECS-MIB", "lecsMacConfigAddress"))
if mibBuilder.loadTexts: lecsMacConfigEntry.setStatus('mandatory')
lecsMacConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: lecsMacConfigAddress.setStatus('mandatory')
lecsMacConfigElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsMacConfigElanName.setStatus('mandatory')
lecsMacConfigLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsMacConfigLastUsed.setStatus('mandatory')
lecsMacConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsMacConfigStatus.setStatus('mandatory')
lecsAtmAddrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 4), )
if mibBuilder.loadTexts: lecsAtmAddrConfigTable.setStatus('mandatory')
lecsAtmAddrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-LECS-MIB", "lecsConfigTblName"), (0, "CISCO-LECS-MIB", "lecsAtmAddrConfigAddress"), (0, "CISCO-LECS-MIB", "lecsAtmAddrConfigMask"))
if mibBuilder.loadTexts: lecsAtmAddrConfigEntry.setStatus('mandatory')
lecsAtmAddrConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20))
if mibBuilder.loadTexts: lecsAtmAddrConfigAddress.setStatus('mandatory')
lecsAtmAddrConfigMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20))
if mibBuilder.loadTexts: lecsAtmAddrConfigMask.setStatus('mandatory')
lecsAtmAddrConfigElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsAtmAddrConfigElanName.setStatus('mandatory')
lecsAtmAddrLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsAtmAddrLastUsed.setStatus('mandatory')
lecsAtmAddrConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsAtmAddrConfigStatus.setStatus('mandatory')
lecsLesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 5), )
if mibBuilder.loadTexts: lecsLesConfigTable.setStatus('mandatory')
lecsLesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-LECS-MIB", "lecsConfigTblName"), (0, "CISCO-LECS-MIB", "lecsElanConfigName"), (0, "CISCO-LECS-MIB", "lecsLesAtmAddr"))
if mibBuilder.loadTexts: lecsLesConfigEntry.setStatus('mandatory')
lecsLesAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20))
if mibBuilder.loadTexts: lecsLesAtmAddr.setStatus('mandatory')
lecsLesPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsLesPriority.setStatus('mandatory')
lecsLesConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("notConnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsLesConnState.setStatus('mandatory')
lecsLesConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsLesConfigStatus.setStatus('mandatory')
lecsRDConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 6), )
if mibBuilder.loadTexts: lecsRDConfigTable.setStatus('mandatory')
lecsRDConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-LECS-MIB", "lecsConfigTblName"), (0, "CISCO-LECS-MIB", "lecsRDConfigSegmentId"), (0, "CISCO-LECS-MIB", "lecsRDConfigBridgeNum"))
if mibBuilder.loadTexts: lecsRDConfigEntry.setStatus('mandatory')
lecsRDConfigSegmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: lecsRDConfigSegmentId.setStatus('mandatory')
lecsRDConfigBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: lecsRDConfigBridgeNum.setStatus('mandatory')
lecsRDConfigElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsRDConfigElanName.setStatus('mandatory')
lecsRDConfigLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 6, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsRDConfigLastUsed.setStatus('mandatory')
lecsRDConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 38, 1, 2, 6, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsRDConfigStatus.setStatus('mandatory')
lecsMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38, 2, 2, 1))
lecsTokenRingMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38, 2, 2, 2))
lecsRedundancyMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38, 2, 2, 3))
lecsMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 38, 2, 1, 1))
mibBuilder.exportSymbols("CISCO-LECS-MIB", lecsConfigDirectConnVpi=lecsConfigDirectConnVpi, lecsElanConfigTable=lecsElanConfigTable, lecsLesConnState=lecsLesConnState, lecsElanLesAtmAddr=lecsElanLesAtmAddr, lecsConfigDirectConnVci=lecsConfigDirectConnVci, lecsElanAccess=lecsElanAccess, lecsAtmAddrStatus=lecsAtmAddrStatus, lecsAtmAddrConfigMask=lecsAtmAddrConfigMask, lecsRDConfigTable=lecsRDConfigTable, lecsRDConfigBridgeNum=lecsRDConfigBridgeNum, lecsLastFailLec=lecsLastFailLec, lecsMacConfigElanName=lecsMacConfigElanName, lecsAdminStatus=lecsAdminStatus, lecsAtmAddrIndex=lecsAtmAddrIndex, lecsAtmAddrConfigElanName=lecsAtmAddrConfigElanName, lecsConfigDirectDstType=lecsConfigDirectDstType, lecsConfigTableName=lecsConfigTableName, lecsConfigTblStatus=lecsConfigTblStatus, lecsRDConfigSegmentId=lecsRDConfigSegmentId, lecsAtmAddrConfigAddress=lecsAtmAddrConfigAddress, lecsAtmAddrActual=lecsAtmAddrActual, lecsConfigTblEntry=lecsConfigTblEntry, lecsAtmAddrLastUsed=lecsAtmAddrLastUsed, lecsMIBGroup=lecsMIBGroup, lecsAtmAddrConfigTable=lecsAtmAddrConfigTable, lecsLesAtmAddr=lecsLesAtmAddr, lecsConfigDirectConnSrc=lecsConfigDirectConnSrc, ciscoLecsMIB=ciscoLecsMIB, lecsElanConfigStatus=lecsElanConfigStatus, lecsConfigTblTable=lecsConfigTblTable, lecsInConfigErrors=lecsInConfigErrors, lecsLesConfigEntry=lecsLesConfigEntry, lecsInConfigReqs=lecsInConfigReqs, lecsMacConfigAddress=lecsMacConfigAddress, lecsRDConfigLastUsed=lecsRDConfigLastUsed, lecsRedundancyMIBGroup=lecsRedundancyMIBGroup, lecsMacConfigLastUsed=lecsMacConfigLastUsed, lecsRDConfigElanName=lecsRDConfigElanName, lecsUpTime=lecsUpTime, lecsConfigTblName=lecsConfigTblName, lecs=lecs, lecsMasterState=lecsMasterState, lecsMIBConformance=lecsMIBConformance, lecsElanConfigName=lecsElanConfigName, lecsRDConfigStatus=lecsRDConfigStatus, lecsAtmAddrState=lecsAtmAddrState, lecsAtmAddrSpec=lecsAtmAddrSpec, lecsLastFailCause=lecsLastFailCause, lecsConfigDirectConnDst=lecsConfigDirectConnDst, lecsMacConfigStatus=lecsMacConfigStatus, lecsElanSegmentId=lecsElanSegmentId, lecsMacConfigEntry=lecsMacConfigEntry, lecsLesConfigStatus=lecsLesConfigStatus, lecsConfigTblDefaultElanName=lecsConfigTblDefaultElanName, lecsRDConfigEntry=lecsRDConfigEntry, lecsOperStatus=lecsOperStatus, lecsMIBCompliances=lecsMIBCompliances, lecsOutConfigFails=lecsOutConfigFails, lecsAtmAddrEntry=lecsAtmAddrEntry, config=config, lecsStatus=lecsStatus, lecsMacConfigTable=lecsMacConfigTable, lecsConfigDirectConnEntry=lecsConfigDirectConnEntry, lecsConfigDirectConnTable=lecsConfigDirectConnTable, lecsLesConfigTable=lecsLesConfigTable, lecsAtmAddrConfigEntry=lecsAtmAddrConfigEntry, ciscoLecsMIBObjects=ciscoLecsMIBObjects, lecsElanConfigEntry=lecsElanConfigEntry, lecsTokenRingMIBGroup=lecsTokenRingMIBGroup, lecsLesPriority=lecsLesPriority, lecsMIBCompliance=lecsMIBCompliance, lecsAtmAddrTable=lecsAtmAddrTable, lecsAtmAddrConfigStatus=lecsAtmAddrConfigStatus, lecsEntry=lecsEntry, lecsTable=lecsTable, lecsMIBGroups=lecsMIBGroups, lecsAtmAddrMask=lecsAtmAddrMask, lecsConfigDirectConnVCType=lecsConfigDirectConnVCType)
