#
# PySNMP MIB module LIGO-W-JET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIGO-W-JET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ligoMgmt, = mibBuilder.importSymbols("LIGOWAVE-MIB", "ligoMgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysLocation, = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation")
TimeTicks, MibIdentifier, IpAddress, Bits, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, ObjectIdentity, NotificationType, iso, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "IpAddress", "Bits", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "ObjectIdentity", "NotificationType", "iso", "Counter32", "Gauge32")
MacAddress, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "TextualConvention")
ligoWJetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 32750, 3, 6))
ligoWJetMIB.setRevisions(('2009-07-16 00:00', '2008-11-27 00:00',))
if mibBuilder.loadTexts: ligoWJetMIB.setLastUpdated('200907160000Z')
if mibBuilder.loadTexts: ligoWJetMIB.setOrganization('LigoWave')
ligoWJetMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1))
ligoWJetNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 0))
ligoWJetInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 1))
ligoWJetConf = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2))
ligoWJetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3))
wJetWrlssIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1), )
if mibBuilder.loadTexts: wJetWrlssIfConfTable.setStatus('current')
wJetWrlssIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1), ).setIndexNames((0, "LIGO-W-JET-MIB", "wJetIfIndex"))
if mibBuilder.loadTexts: wJetWrlssIfConfEntry.setStatus('current')
wJetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: wJetIfIndex.setStatus('current')
wJetIfProtoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetIfProtoEnabled.setStatus('current')
wJetIfDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1, 3), Integer32()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetIfDataRate.setStatus('current')
wJetIfAckRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1, 4), Integer32()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetIfAckRate.setStatus('current')
wJetIfAckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1, 5), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetIfAckTimeout.setStatus('current')
wJetIfTxQueueMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1, 6), Integer32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetIfTxQueueMaxLength.setStatus('current')
wJetIfRxTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1, 7), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetIfRxTimeout.setStatus('current')
wJetIfMaxAggregBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1, 8), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetIfMaxAggregBytes.setStatus('current')
wJetIfMaxAggregPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1, 9), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetIfMaxAggregPackets.setStatus('current')
wJetIfCcaThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetIfCcaThreshold.setStatus('current')
wJetP2pEndpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1), )
if mibBuilder.loadTexts: wJetP2pEndpStatsTable.setStatus('current')
wJetP2pEndpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1), ).setIndexNames((0, "LIGO-W-JET-MIB", "wJetP2pLocalIfIndex"), (0, "LIGO-W-JET-MIB", "wJetP2pEndpointType"))
if mibBuilder.loadTexts: wJetP2pEndpStatsEntry.setStatus('current')
wJetP2pLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: wJetP2pLocalIfIndex.setStatus('current')
wJetP2pEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("remote", 1))))
if mibBuilder.loadTexts: wJetP2pEndpointType.setStatus('current')
wJetP2pMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pMacAddress.setStatus('current')
wJetP2pRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRssi.setStatus('current')
wJetP2pMaxRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pMaxRssi.setStatus('current')
wJetP2pSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 6), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pSignalLevel.setStatus('current')
wJetP2pNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pNoiseLevel.setStatus('current')
wJetP2pTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 8), Gauge32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTxPower.setStatus('current')
wJetP2pRxStart = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRxStart.setStatus('current')
wJetP2pTxStart = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTxStart.setStatus('current')
wJetP2pRxStop = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRxStop.setStatus('current')
wJetP2pRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 12), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRxBytes.setStatus('current')
wJetP2pTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 13), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTxBytes.setStatus('current')
wJetP2pRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRxPackets.setStatus('current')
wJetP2pTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTxPackets.setStatus('current')
wJetP2pTxAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTxAcked.setStatus('current')
wJetP2pRxDuplicated = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRxDuplicated.setStatus('current')
wJetP2pRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRxDropped.setStatus('current')
wJetP2pRxTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 19), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRxTimeouts.setStatus('current')
wJetP2pTxTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 20), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTxTimeouts.setStatus('current')
wJetP2pRxNoRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRxNoRetries.setStatus('current')
wJetP2pTxNoRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 22), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTxNoRetries.setStatus('current')
wJetP2pRx1Retry = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 23), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRx1Retry.setStatus('current')
wJetP2pTx1Retry = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTx1Retry.setStatus('current')
wJetP2pRx2Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 25), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRx2Retries.setStatus('current')
wJetP2pTx2Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 26), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTx2Retries.setStatus('current')
wJetP2pRx3Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 27), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pRx3Retries.setStatus('current')
wJetP2pTx3Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 28), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTx3Retries.setStatus('current')
wJetP2pTxTotalRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 29), Counter32()).setUnits('retries').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTxTotalRetries.setStatus('current')
wJetP2pTxMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 30), Counter32()).setUnits('retries').setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pTxMaxRetries.setStatus('current')
wJetP2pIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 3, 1, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wJetP2pIpAddress.setStatus('current')
wJetNodeConnected = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 0, 1)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("LIGO-W-JET-MIB", "wJetP2pMacAddress"))
if mibBuilder.loadTexts: wJetNodeConnected.setStatus('current')
wJetNodeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 0, 2)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("LIGO-W-JET-MIB", "wJetP2pMacAddress"))
if mibBuilder.loadTexts: wJetNodeDisconnected.setStatus('current')
wJetLowSignalStrength = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 0, 3)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("LIGO-W-JET-MIB", "wJetP2pMacAddress"), ("LIGO-W-JET-MIB", "wJetP2pRssi"))
if mibBuilder.loadTexts: wJetLowSignalStrength.setStatus('current')
wJetRxDroppedThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 0, 4)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("LIGO-W-JET-MIB", "wJetP2pMacAddress"), ("LIGO-W-JET-MIB", "wJetP2pRxDropped"))
if mibBuilder.loadTexts: wJetRxDroppedThresholdReached.setStatus('current')
wJetTxRetriesThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 6, 1, 0, 5)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("LIGO-W-JET-MIB", "wJetP2pMacAddress"), ("LIGO-W-JET-MIB", "wJetP2pTxTotalRetries"))
if mibBuilder.loadTexts: wJetTxRetriesThresholdReached.setStatus('current')
mibBuilder.exportSymbols("LIGO-W-JET-MIB", wJetP2pEndpStatsTable=wJetP2pEndpStatsTable, wJetP2pTxStart=wJetP2pTxStart, wJetIfIndex=wJetIfIndex, wJetP2pTxBytes=wJetP2pTxBytes, wJetP2pRxPackets=wJetP2pRxPackets, wJetP2pRxDropped=wJetP2pRxDropped, wJetP2pRxNoRetries=wJetP2pRxNoRetries, wJetP2pRx2Retries=wJetP2pRx2Retries, wJetP2pLocalIfIndex=wJetP2pLocalIfIndex, wJetIfMaxAggregPackets=wJetIfMaxAggregPackets, wJetRxDroppedThresholdReached=wJetRxDroppedThresholdReached, wJetTxRetriesThresholdReached=wJetTxRetriesThresholdReached, wJetIfCcaThreshold=wJetIfCcaThreshold, ligoWJetMIBObjects=ligoWJetMIBObjects, ligoWJetConf=ligoWJetConf, wJetIfProtoEnabled=wJetIfProtoEnabled, wJetP2pRxStop=wJetP2pRxStop, wJetWrlssIfConfEntry=wJetWrlssIfConfEntry, wJetP2pEndpStatsEntry=wJetP2pEndpStatsEntry, wJetP2pTxPower=wJetP2pTxPower, wJetIfMaxAggregBytes=wJetIfMaxAggregBytes, ligoWJetStats=ligoWJetStats, wJetNodeDisconnected=wJetNodeDisconnected, wJetWrlssIfConfTable=wJetWrlssIfConfTable, wJetP2pMaxRssi=wJetP2pMaxRssi, wJetP2pRxStart=wJetP2pRxStart, wJetP2pTxMaxRetries=wJetP2pTxMaxRetries, wJetP2pRx1Retry=wJetP2pRx1Retry, wJetIfAckTimeout=wJetIfAckTimeout, wJetLowSignalStrength=wJetLowSignalStrength, wJetP2pRssi=wJetP2pRssi, ligoWJetInfo=ligoWJetInfo, wJetP2pRx3Retries=wJetP2pRx3Retries, wJetP2pTx3Retries=wJetP2pTx3Retries, wJetIfRxTimeout=wJetIfRxTimeout, wJetP2pSignalLevel=wJetP2pSignalLevel, wJetP2pNoiseLevel=wJetP2pNoiseLevel, ligoWJetMIB=ligoWJetMIB, wJetP2pTxNoRetries=wJetP2pTxNoRetries, wJetP2pEndpointType=wJetP2pEndpointType, wJetP2pIpAddress=wJetP2pIpAddress, wJetP2pTxAcked=wJetP2pTxAcked, wJetP2pRxDuplicated=wJetP2pRxDuplicated, wJetIfDataRate=wJetIfDataRate, wJetP2pTxTimeouts=wJetP2pTxTimeouts, ligoWJetNotifs=ligoWJetNotifs, PYSNMP_MODULE_ID=ligoWJetMIB, wJetIfAckRate=wJetIfAckRate, wJetP2pRxTimeouts=wJetP2pRxTimeouts, wJetIfTxQueueMaxLength=wJetIfTxQueueMaxLength, wJetP2pTxPackets=wJetP2pTxPackets, wJetP2pRxBytes=wJetP2pRxBytes, wJetNodeConnected=wJetNodeConnected, wJetP2pTxTotalRetries=wJetP2pTxTotalRetries, wJetP2pTx1Retry=wJetP2pTx1Retry, wJetP2pTx2Retries=wJetP2pTx2Retries, wJetP2pMacAddress=wJetP2pMacAddress)
