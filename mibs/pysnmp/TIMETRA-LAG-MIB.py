#
# PySNMP MIB module TIMETRA-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-LAG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:11:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
dot3adAggPortEntry, = mibBuilder.importSymbols("IEEE8023-LAG-MIB", "dot3adAggPortEntry")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, IpAddress, iso, Unsigned32, MibIdentifier, Bits, Integer32, TimeTicks, Gauge32, ModuleIdentity, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "IpAddress", "iso", "Unsigned32", "MibIdentifier", "Bits", "Integer32", "TimeTicks", "Gauge32", "ModuleIdentity", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TimeStamp, RowStatus, DisplayString, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "DisplayString", "TruthValue", "TextualConvention", "MacAddress")
tmnxSRConfs, tmnxSRObjs, timetraSRMIBModules, tmnxSRNotifyPrefix = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRConfs", "tmnxSRObjs", "timetraSRMIBModules", "tmnxSRNotifyPrefix")
tmnxPortLagId, tmnxPortPortID = mibBuilder.importSymbols("TIMETRA-PORT-MIB", "tmnxPortLagId", "tmnxPortPortID")
TmnxPortID, TNamedItemOrEmpty, TItemLongDescription = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxPortID", "TNamedItemOrEmpty", "TItemLongDescription")
timetraLagMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 15))
timetraLagMIBModule.setRevisions(('1912-04-06 00:00', '1911-02-01 00:00', '1909-02-28 00:00', '1908-07-01 00:00', '1908-01-01 00:00', '1907-01-01 00:00', '1906-03-15 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '2003-01-20 00:00', '2001-02-09 00:00',))
if mibBuilder.loadTexts: timetraLagMIBModule.setLastUpdated('201204060000Z')
if mibBuilder.loadTexts: timetraLagMIBModule.setOrganization('Alcatel-Lucent')
tLagObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15))
tLagNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15))
tLagNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0))
tmnxLagConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15))
tLagNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 4))
class LAGInterfaceNumber(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 200)

class LAGSubgroup(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 8), )
tLagConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2), )
if mibBuilder.loadTexts: tLagConfigTable.setStatus('current')
tLagConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1), ).setIndexNames((0, "TIMETRA-LAG-MIB", "tLagIndex"))
if mibBuilder.loadTexts: tLagConfigEntry.setStatus('current')
tLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 1), LAGInterfaceNumber())
if mibBuilder.loadTexts: tLagIndex.setStatus('current')
tLagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagRowStatus.setStatus('current')
tLagPortThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagPortThreshold.setStatus('current')
tLagPortThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("dynamicCost", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagPortThresholdAction.setStatus('current')
tLagEnableMarkerGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagEnableMarkerGenerator.setStatus('current')
tLagEnableLACP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagEnableLACP.setStatus('current')
tLagDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 7), TItemLongDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagDescription.setStatus('current')
tLagDynamicCosting = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagDynamicCosting.setStatus('current')
tLagLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2))).clone('passive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagLACPMode.setStatus('current')
tLagLACPAdminKeyAutogen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 10), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagLACPAdminKeyAutogen.setStatus('current')
tLagLACPTransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slow", 1), ("fast", 2))).clone('fast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagLACPTransmitInterval.setStatus('current')
tLagAccessAdaptQos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link", 1), ("distribute", 2))).clone('distribute')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagAccessAdaptQos.setStatus('current')
tLagLACPXmitStdby = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagLACPXmitStdby.setStatus('current')
tLagLACPSelCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highest-count", 1), ("highest-weight", 2), ("bestPort", 3))).clone('highest-count')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagLACPSelCrit.setStatus('current')
tLagLACPSelCritSlaveToPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagLACPSelCritSlaveToPartner.setStatus('current')
tLagLACPNbrOfSubGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagLACPNbrOfSubGroups.setStatus('current')
tLagholdTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('100s of milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagholdTimeDown.setStatus('current')
tLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("hsmda", 2), ("hsmdaV2", 3))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagPortType.setStatus('current')
tLagPerFpIngQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagPerFpIngQueuing.setStatus('current')
tLagSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 20), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagSystemId.setStatus('current')
tLagSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagSystemPriority.setStatus('current')
tLagStandbySignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lacp", 1), ("powerOff", 2))).clone('lacp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagStandbySignaling.setStatus('current')
tLagOperationTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3), )
if mibBuilder.loadTexts: tLagOperationTable.setStatus('current')
tLagOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1), )
tLagConfigEntry.registerAugmentions(("TIMETRA-LAG-MIB", "tLagOperationEntry"))
tLagOperationEntry.setIndexNames(*tLagConfigEntry.getIndexNames())
if mibBuilder.loadTexts: tLagOperationEntry.setStatus('current')
tLagIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagIfIndex.setStatus('current')
tLagConfigLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagConfigLastChange.setStatus('current')
tLagPortThresholdFalling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagPortThresholdFalling.setStatus('current')
tLagPortThresholdRising = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagPortThresholdRising.setStatus('current')
tLagLACPPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 5), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagLACPPrimaryPort.setStatus('obsolete')
tLagPortReasonDownFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 6), Bits().clone(namedValues=NamedValues(("unknown", 0), ("linklossFwd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagPortReasonDownFlags.setStatus('obsolete')
tLagMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 5), )
if mibBuilder.loadTexts: tLagMemberTable.setStatus('current')
tLagMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 5, 1), ).setIndexNames((0, "TIMETRA-LAG-MIB", "tLagIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tLagMemberEntry.setStatus('current')
tLagMemberPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 5, 1, 1), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagMemberPortName.setStatus('current')
tLagMemberPortIsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagMemberPortIsPrimary.setStatus('current')
tLagPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 6), )
if mibBuilder.loadTexts: tLagPortTable.setStatus('current')
tLagPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 6, 1), )
dot3adAggPortEntry.registerAugmentions(("TIMETRA-LAG-MIB", "tLagPortEntry"))
tLagPortEntry.setIndexNames(*dot3adAggPortEntry.getIndexNames())
if mibBuilder.loadTexts: tLagPortEntry.setStatus('current')
tLagPortSubgroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 6, 1, 1), LAGSubgroup().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tLagPortSubgroup.setStatus('current')
tLagPortActiveStdby = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("stand-by", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagPortActiveStdby.setStatus('current')
tLagNotifyPortAddFailReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("adminkey-mismatch", 1), ("sysid-mismatch", 2), ("lacp-passive-both-ends", 3), ("link-down", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tLagNotifyPortAddFailReason.setStatus('current')
tLagNotifySubGroupSelected = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 4, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tLagNotifySubGroupSelected.setStatus('current')
tLagNotifyAdditionalInfo = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 4, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tLagNotifyAdditionalInfo.setStatus('current')
tLagNotifyStateChangedReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("partner-oper-state-changed", 1), ("lacp-expired", 2), ("lacp-rx-state-machine", 3), ("efm-oam-state-changed", 4), ("dot1ag-state-changed", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tLagNotifyStateChangedReason.setStatus('current')
tLagDynamicCostOn = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 1)).setObjects(("TIMETRA-LAG-MIB", "tLagPortThreshold"))
if mibBuilder.loadTexts: tLagDynamicCostOn.setStatus('current')
tLagDynamicCostOff = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 2)).setObjects(("TIMETRA-LAG-MIB", "tLagPortThreshold"))
if mibBuilder.loadTexts: tLagDynamicCostOff.setStatus('current')
tLagPortAddFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 3)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-LAG-MIB", "tLagNotifyPortAddFailReason"))
if mibBuilder.loadTexts: tLagPortAddFailed.setStatus('current')
tLagSubGroupSelected = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 4)).setObjects(("TIMETRA-LAG-MIB", "tLagNotifySubGroupSelected"))
if mibBuilder.loadTexts: tLagSubGroupSelected.setStatus('current')
tLagPortAddFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 5)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-LAG-MIB", "tLagNotifyPortAddFailReason"))
if mibBuilder.loadTexts: tLagPortAddFailureCleared.setStatus('current')
tLagStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 6)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-LAG-MIB", "tLagNotifyAdditionalInfo"))
if mibBuilder.loadTexts: tLagStateEvent.setStatus('current')
tLagMemberStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 7)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-LAG-MIB", "tLagNotifyAdditionalInfo"), ("TIMETRA-LAG-MIB", "tLagNotifyStateChangedReason"))
if mibBuilder.loadTexts: tLagMemberStateEvent.setStatus('current')
tmnxLagCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1))
tmnxLagGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2))
tmnxLagV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 3)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV4v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagNotifyObjsGroup"), ("TIMETRA-LAG-MIB", "tmnxLagNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV4v0Compliance = tmnxLagV4v0Compliance.setStatus('obsolete')
tmnxLagV5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 4)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV5v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV5v0NotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV5v0Compliance = tmnxLagV5v0Compliance.setStatus('obsolete')
tmnxLagV6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 5)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV6v0Compliance = tmnxLagV6v0Compliance.setStatus('obsolete')
tmnxLagV6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 6)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagHsmdaV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV6v1Compliance = tmnxLagV6v1Compliance.setStatus('obsolete')
tmnxLagV7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 7)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV7v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagHsmdaV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV7v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV7v0Compliance = tmnxLagV7v0Compliance.setStatus('obsolete')
tmnxLagV8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 8)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV7v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagHsmdaV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV8v0Compliance = tmnxLagV8v0Compliance.setStatus('obsolete')
tmnxLagV9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 9)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV7v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagInstanceV9v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagHsmdaV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV9v0Compliance = tmnxLagV9v0Compliance.setStatus('obsolete')
tmnxLagV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 10)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV7v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagInstanceV9v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagV10v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagHsmdaV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV10v0Compliance = tmnxLagV10v0Compliance.setStatus('current')
tmnxLagNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 2)).setObjects(("TIMETRA-LAG-MIB", "tLagNotifyPortAddFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagNotifyObjsGroup = tmnxLagNotifyObjsGroup.setStatus('obsolete')
tmnxLagNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 3)).setObjects(("TIMETRA-LAG-MIB", "tLagDynamicCostOn"), ("TIMETRA-LAG-MIB", "tLagDynamicCostOff"), ("TIMETRA-LAG-MIB", "tLagPortAddFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagNotificationsGroup = tmnxLagNotificationsGroup.setStatus('obsolete')
tmnxLagInstanceV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 5)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-LAG-MIB", "tLagPortThreshold"), ("TIMETRA-LAG-MIB", "tLagPortThresholdAction"), ("TIMETRA-LAG-MIB", "tLagEnableMarkerGenerator"), ("TIMETRA-LAG-MIB", "tLagEnableLACP"), ("TIMETRA-LAG-MIB", "tLagDescription"), ("TIMETRA-LAG-MIB", "tLagDynamicCosting"), ("TIMETRA-LAG-MIB", "tLagLACPMode"), ("TIMETRA-LAG-MIB", "tLagLACPAdminKeyAutogen"), ("TIMETRA-LAG-MIB", "tLagLACPTransmitInterval"), ("TIMETRA-LAG-MIB", "tLagAccessAdaptQos"), ("TIMETRA-LAG-MIB", "tLagLACPXmitStdby"), ("TIMETRA-LAG-MIB", "tLagLACPSelCrit"), ("TIMETRA-LAG-MIB", "tLagLACPSelCritSlaveToPartner"), ("TIMETRA-LAG-MIB", "tLagLACPNbrOfSubGroups"), ("TIMETRA-LAG-MIB", "tLagholdTimeDown"), ("TIMETRA-LAG-MIB", "tLagIfIndex"), ("TIMETRA-LAG-MIB", "tLagConfigLastChange"), ("TIMETRA-LAG-MIB", "tLagPortThresholdFalling"), ("TIMETRA-LAG-MIB", "tLagPortThresholdRising"), ("TIMETRA-LAG-MIB", "tLagMemberPortName"), ("TIMETRA-LAG-MIB", "tLagMemberPortIsPrimary"), ("TIMETRA-LAG-MIB", "tLagPortSubgroup"), ("TIMETRA-LAG-MIB", "tLagPortActiveStdby"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagInstanceV4v0Group = tmnxLagInstanceV4v0Group.setStatus('obsolete')
tmnxObsoletedObjectsV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 6)).setObjects(("TIMETRA-LAG-MIB", "tLagLACPPrimaryPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxObsoletedObjectsV4v0Group = tmnxObsoletedObjectsV4v0Group.setStatus('current')
tmnxLagInstanceV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 7)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-LAG-MIB", "tLagPortThreshold"), ("TIMETRA-LAG-MIB", "tLagPortThresholdAction"), ("TIMETRA-LAG-MIB", "tLagEnableMarkerGenerator"), ("TIMETRA-LAG-MIB", "tLagEnableLACP"), ("TIMETRA-LAG-MIB", "tLagDescription"), ("TIMETRA-LAG-MIB", "tLagDynamicCosting"), ("TIMETRA-LAG-MIB", "tLagLACPMode"), ("TIMETRA-LAG-MIB", "tLagLACPAdminKeyAutogen"), ("TIMETRA-LAG-MIB", "tLagLACPTransmitInterval"), ("TIMETRA-LAG-MIB", "tLagAccessAdaptQos"), ("TIMETRA-LAG-MIB", "tLagLACPXmitStdby"), ("TIMETRA-LAG-MIB", "tLagLACPSelCrit"), ("TIMETRA-LAG-MIB", "tLagLACPSelCritSlaveToPartner"), ("TIMETRA-LAG-MIB", "tLagLACPNbrOfSubGroups"), ("TIMETRA-LAG-MIB", "tLagholdTimeDown"), ("TIMETRA-LAG-MIB", "tLagIfIndex"), ("TIMETRA-LAG-MIB", "tLagConfigLastChange"), ("TIMETRA-LAG-MIB", "tLagPortThresholdFalling"), ("TIMETRA-LAG-MIB", "tLagPortThresholdRising"), ("TIMETRA-LAG-MIB", "tLagMemberPortName"), ("TIMETRA-LAG-MIB", "tLagMemberPortIsPrimary"), ("TIMETRA-LAG-MIB", "tLagPortSubgroup"), ("TIMETRA-LAG-MIB", "tLagPortActiveStdby"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagInstanceV5v0Group = tmnxLagInstanceV5v0Group.setStatus('obsolete')
tmnxLagV5v0NotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 8)).setObjects(("TIMETRA-LAG-MIB", "tLagDynamicCostOn"), ("TIMETRA-LAG-MIB", "tLagDynamicCostOff"), ("TIMETRA-LAG-MIB", "tLagPortAddFailed"), ("TIMETRA-LAG-MIB", "tLagSubGroupSelected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV5v0NotifGroup = tmnxLagV5v0NotifGroup.setStatus('obsolete')
tmnxLagNotifyObjsV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 9)).setObjects(("TIMETRA-LAG-MIB", "tLagNotifyPortAddFailReason"), ("TIMETRA-LAG-MIB", "tLagNotifySubGroupSelected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagNotifyObjsV5v0Group = tmnxLagNotifyObjsV5v0Group.setStatus('obsolete')
tmnxLagHsmdaV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 10)).setObjects(("TIMETRA-LAG-MIB", "tLagPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagHsmdaV6v0Group = tmnxLagHsmdaV6v0Group.setStatus('current')
tmnxLagInstanceV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 11)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-LAG-MIB", "tLagPortThreshold"), ("TIMETRA-LAG-MIB", "tLagPortThresholdAction"), ("TIMETRA-LAG-MIB", "tLagEnableMarkerGenerator"), ("TIMETRA-LAG-MIB", "tLagEnableLACP"), ("TIMETRA-LAG-MIB", "tLagDescription"), ("TIMETRA-LAG-MIB", "tLagDynamicCosting"), ("TIMETRA-LAG-MIB", "tLagLACPMode"), ("TIMETRA-LAG-MIB", "tLagLACPAdminKeyAutogen"), ("TIMETRA-LAG-MIB", "tLagLACPTransmitInterval"), ("TIMETRA-LAG-MIB", "tLagAccessAdaptQos"), ("TIMETRA-LAG-MIB", "tLagLACPXmitStdby"), ("TIMETRA-LAG-MIB", "tLagLACPSelCrit"), ("TIMETRA-LAG-MIB", "tLagLACPSelCritSlaveToPartner"), ("TIMETRA-LAG-MIB", "tLagLACPNbrOfSubGroups"), ("TIMETRA-LAG-MIB", "tLagholdTimeDown"), ("TIMETRA-LAG-MIB", "tLagIfIndex"), ("TIMETRA-LAG-MIB", "tLagConfigLastChange"), ("TIMETRA-LAG-MIB", "tLagPortThresholdFalling"), ("TIMETRA-LAG-MIB", "tLagPortThresholdRising"), ("TIMETRA-LAG-MIB", "tLagMemberPortName"), ("TIMETRA-LAG-MIB", "tLagMemberPortIsPrimary"), ("TIMETRA-LAG-MIB", "tLagPortSubgroup"), ("TIMETRA-LAG-MIB", "tLagPortActiveStdby"), ("TIMETRA-LAG-MIB", "tLagPortReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagInstanceV6v0Group = tmnxLagInstanceV6v0Group.setStatus('obsolete')
tmnxLagV6v0NotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 12)).setObjects(("TIMETRA-LAG-MIB", "tLagDynamicCostOn"), ("TIMETRA-LAG-MIB", "tLagDynamicCostOff"), ("TIMETRA-LAG-MIB", "tLagPortAddFailed"), ("TIMETRA-LAG-MIB", "tLagSubGroupSelected"), ("TIMETRA-LAG-MIB", "tLagPortAddFailureCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV6v0NotifGroup = tmnxLagV6v0NotifGroup.setStatus('current')
tmnxLagV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 13)).setObjects(("TIMETRA-LAG-MIB", "tLagPerFpIngQueuing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV7v0Group = tmnxLagV7v0Group.setStatus('obsolete')
tmnxObsoletedObjectsV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 14)).setObjects(("TIMETRA-LAG-MIB", "tLagPortReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxObsoletedObjectsV7v0Group = tmnxObsoletedObjectsV7v0Group.setStatus('current')
tmnxLagInstanceV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 15)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-LAG-MIB", "tLagPortThreshold"), ("TIMETRA-LAG-MIB", "tLagPortThresholdAction"), ("TIMETRA-LAG-MIB", "tLagEnableMarkerGenerator"), ("TIMETRA-LAG-MIB", "tLagEnableLACP"), ("TIMETRA-LAG-MIB", "tLagDescription"), ("TIMETRA-LAG-MIB", "tLagDynamicCosting"), ("TIMETRA-LAG-MIB", "tLagLACPMode"), ("TIMETRA-LAG-MIB", "tLagLACPAdminKeyAutogen"), ("TIMETRA-LAG-MIB", "tLagLACPTransmitInterval"), ("TIMETRA-LAG-MIB", "tLagAccessAdaptQos"), ("TIMETRA-LAG-MIB", "tLagLACPXmitStdby"), ("TIMETRA-LAG-MIB", "tLagLACPSelCrit"), ("TIMETRA-LAG-MIB", "tLagLACPSelCritSlaveToPartner"), ("TIMETRA-LAG-MIB", "tLagLACPNbrOfSubGroups"), ("TIMETRA-LAG-MIB", "tLagholdTimeDown"), ("TIMETRA-LAG-MIB", "tLagIfIndex"), ("TIMETRA-LAG-MIB", "tLagConfigLastChange"), ("TIMETRA-LAG-MIB", "tLagPortThresholdFalling"), ("TIMETRA-LAG-MIB", "tLagPortThresholdRising"), ("TIMETRA-LAG-MIB", "tLagMemberPortName"), ("TIMETRA-LAG-MIB", "tLagMemberPortIsPrimary"), ("TIMETRA-LAG-MIB", "tLagPortSubgroup"), ("TIMETRA-LAG-MIB", "tLagPortActiveStdby"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagInstanceV7v0Group = tmnxLagInstanceV7v0Group.setStatus('current')
tmnxLagV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 16)).setObjects(("TIMETRA-LAG-MIB", "tLagPerFpIngQueuing"), ("TIMETRA-LAG-MIB", "tLagSystemId"), ("TIMETRA-LAG-MIB", "tLagSystemPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV8v0Group = tmnxLagV8v0Group.setStatus('current')
tmnxLagInstanceV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 17)).setObjects(("TIMETRA-LAG-MIB", "tLagStandbySignaling"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagInstanceV9v0Group = tmnxLagInstanceV9v0Group.setStatus('current')
tmnxLagNotifyObjsV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 18)).setObjects(("TIMETRA-LAG-MIB", "tLagNotifyPortAddFailReason"), ("TIMETRA-LAG-MIB", "tLagNotifySubGroupSelected"), ("TIMETRA-LAG-MIB", "tLagNotifyAdditionalInfo"), ("TIMETRA-LAG-MIB", "tLagNotifyStateChangedReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagNotifyObjsV10v0Group = tmnxLagNotifyObjsV10v0Group.setStatus('current')
tmnxLagV10v0NotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 19)).setObjects(("TIMETRA-LAG-MIB", "tLagStateEvent"), ("TIMETRA-LAG-MIB", "tLagMemberStateEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV10v0NotifGroup = tmnxLagV10v0NotifGroup.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-LAG-MIB", tmnxLagHsmdaV6v0Group=tmnxLagHsmdaV6v0Group, tmnxLagV5v0NotifGroup=tmnxLagV5v0NotifGroup, tLagEnableLACP=tLagEnableLACP, tLagPortEntry=tLagPortEntry, tLagConfigLastChange=tLagConfigLastChange, PYSNMP_MODULE_ID=timetraLagMIBModule, tLagLACPMode=tLagLACPMode, tLagNotifySubGroupSelected=tLagNotifySubGroupSelected, tLagMemberTable=tLagMemberTable, tLagPortAddFailed=tLagPortAddFailed, tLagObjects=tLagObjects, tLagPortType=tLagPortType, tLagNotifyAdditionalInfo=tLagNotifyAdditionalInfo, tLagPerFpIngQueuing=tLagPerFpIngQueuing, tLagSystemId=tLagSystemId, tLagPortTable=tLagPortTable, tmnxLagNotifyObjsGroup=tmnxLagNotifyObjsGroup, tLagLACPAdminKeyAutogen=tLagLACPAdminKeyAutogen, tmnxLagV10v0NotifGroup=tmnxLagV10v0NotifGroup, LAGSubgroup=LAGSubgroup, tmnxObsoletedObjectsV4v0Group=tmnxObsoletedObjectsV4v0Group, tLagMemberPortName=tLagMemberPortName, tmnxLagInstanceV9v0Group=tmnxLagInstanceV9v0Group, tLagLACPTransmitInterval=tLagLACPTransmitInterval, tmnxLagInstanceV7v0Group=tmnxLagInstanceV7v0Group, tLagNotifyPrefix=tLagNotifyPrefix, tmnxLagInstanceV5v0Group=tmnxLagInstanceV5v0Group, tLagNotifyStateChangedReason=tLagNotifyStateChangedReason, tLagMemberEntry=tLagMemberEntry, tmnxLagV10v0Compliance=tmnxLagV10v0Compliance, tmnxLagV9v0Compliance=tmnxLagV9v0Compliance, tmnxLagNotificationsGroup=tmnxLagNotificationsGroup, tLagPortThresholdFalling=tLagPortThresholdFalling, tLagDynamicCostOff=tLagDynamicCostOff, tLagAccessAdaptQos=tLagAccessAdaptQos, tLagNotificationObjects=tLagNotificationObjects, tmnxLagCompliances=tmnxLagCompliances, tLagLACPSelCritSlaveToPartner=tLagLACPSelCritSlaveToPartner, timetraLagMIBModule=timetraLagMIBModule, tmnxLagConformance=tmnxLagConformance, tmnxLagV4v0Compliance=tmnxLagV4v0Compliance, tLagConfigTable=tLagConfigTable, tLagSystemPriority=tLagSystemPriority, tLagNotifications=tLagNotifications, tmnxLagV6v1Compliance=tmnxLagV6v1Compliance, tLagPortThresholdRising=tLagPortThresholdRising, tLagIndex=tLagIndex, tLagDescription=tLagDescription, tLagNotifyPortAddFailReason=tLagNotifyPortAddFailReason, tLagPortThresholdAction=tLagPortThresholdAction, tLagEnableMarkerGenerator=tLagEnableMarkerGenerator, LAGInterfaceNumber=LAGInterfaceNumber, tLagOperationEntry=tLagOperationEntry, tLagStandbySignaling=tLagStandbySignaling, tLagLACPSelCrit=tLagLACPSelCrit, tLagPortAddFailureCleared=tLagPortAddFailureCleared, tLagMemberPortIsPrimary=tLagMemberPortIsPrimary, tmnxLagV7v0Group=tmnxLagV7v0Group, tLagDynamicCosting=tLagDynamicCosting, tLagLACPNbrOfSubGroups=tLagLACPNbrOfSubGroups, tLagPortSubgroup=tLagPortSubgroup, tmnxLagV5v0Compliance=tmnxLagV5v0Compliance, tmnxLagV8v0Compliance=tmnxLagV8v0Compliance, tLagOperationTable=tLagOperationTable, tmnxLagInstanceV4v0Group=tmnxLagInstanceV4v0Group, tmnxLagV6v0Compliance=tmnxLagV6v0Compliance, tmnxLagInstanceV6v0Group=tmnxLagInstanceV6v0Group, tLagStateEvent=tLagStateEvent, tLagDynamicCostOn=tLagDynamicCostOn, tLagConfigEntry=tLagConfigEntry, tLagPortReasonDownFlags=tLagPortReasonDownFlags, tLagholdTimeDown=tLagholdTimeDown, tmnxLagGroups=tmnxLagGroups, tLagSubGroupSelected=tLagSubGroupSelected, tmnxLagV8v0Group=tmnxLagV8v0Group, tmnxObsoletedObjectsV7v0Group=tmnxObsoletedObjectsV7v0Group, tLagRowStatus=tLagRowStatus, tmnxLagV6v0NotifGroup=tmnxLagV6v0NotifGroup, tLagLACPPrimaryPort=tLagLACPPrimaryPort, tLagIfIndex=tLagIfIndex, tLagPortThreshold=tLagPortThreshold, tLagLACPXmitStdby=tLagLACPXmitStdby, tLagPortActiveStdby=tLagPortActiveStdby, tmnxLagNotifyObjsV10v0Group=tmnxLagNotifyObjsV10v0Group, tLagMemberStateEvent=tLagMemberStateEvent, tmnxLagV7v0Compliance=tmnxLagV7v0Compliance, tmnxLagNotifyObjsV5v0Group=tmnxLagNotifyObjsV5v0Group)
