#
# PySNMP MIB module NSCTRAP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSCTRAP
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, ifType, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifType", "ifDescr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, Integer32, MibIdentifier, enterprises, NotificationType, TimeTicks, IpAddress, Counter64, iso, Bits, Counter32, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Integer32", "MibIdentifier", "enterprises", "NotificationType", "TimeTicks", "IpAddress", "Counter64", "iso", "Bits", "Counter32", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nsc = MibIdentifier((1, 3, 6, 1, 4, 1, 10))
nscMib = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2))
nscManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 2))
nscTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 2, 4))
nscTrapsProtBindIndex = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("ip", 1), ("decnet", 2), ("appleTalk", 3), ("ipx", 4), ("xns", 5), ("bridging", 9), ("bridgingEc", 10))))
if mibBuilder.loadTexts: nscTrapsProtBindIndex.setStatus('mandatory')
nscTrapsFddiSMTCFState = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cf0", 1), ("cf1", 2), ("cf2", 3), ("cf3", 4), ("cf4", 5), ("cf5", 6))))
if mibBuilder.loadTexts: nscTrapsFddiSMTCFState.setStatus('mandatory')
nscTrapsDecNetAreaNbr = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1))
if mibBuilder.loadTexts: nscTrapsDecNetAreaNbr.setStatus('mandatory')
nscTrapsDecNetNodeNbr = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1))
if mibBuilder.loadTexts: nscTrapsDecNetNodeNbr.setStatus('mandatory')
nscTrapsDecNetCircuitName = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6)))
if mibBuilder.loadTexts: nscTrapsDecNetCircuitName.setStatus('mandatory')
nscTrapsDecNetEventReason = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256)))
if mibBuilder.loadTexts: nscTrapsDecNetEventReason.setStatus('mandatory')
nscTrapsDecNetReachStatus = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reachable", 1), ("unreachable", 2))))
if mibBuilder.loadTexts: nscTrapsDecNetReachStatus.setStatus('mandatory')
nscTrapsVcpPortName = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12)))
if mibBuilder.loadTexts: nscTrapsVcpPortName.setStatus('mandatory')
nscTrapsVcpLogicalState = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30)))
if mibBuilder.loadTexts: nscTrapsVcpLogicalState.setStatus('mandatory')
nscTrapsVcpPhysicalState = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30)))
if mibBuilder.loadTexts: nscTrapsVcpPhysicalState.setStatus('mandatory')
protocolBound = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"), ("NSCTRAP", "nscTrapsProtBindIndex"))
protocolUnbound = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"), ("NSCTRAP", "nscTrapsProtBindIndex"))
physicalLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"))
physicalLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"))
fddiWrap = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,5)).setObjects(("IF-MIB", "ifIndex"), ("NSCTRAP", "nscTrapsFddiSMTCFState"))
vcpActive = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,6)).setObjects(("NSCTRAP", "nscTrapsVcpPortName"), ("NSCTRAP", "nscTrapsVcpLogicalState"), ("NSCTRAP", "nscTrapsVcpPhysicalState"))
vcpInactive = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,7)).setObjects(("NSCTRAP", "nscTrapsVcpPortName"), ("NSCTRAP", "nscTrapsVcpLogicalState"), ("NSCTRAP", "nscTrapsVcpPhysicalState"))
vcpReconfig = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,8)).setObjects(("NSCTRAP", "nscTrapsVcpPortName"), ("NSCTRAP", "nscTrapsVcpLogicalState"), ("NSCTRAP", "nscTrapsVcpPhysicalState"))
vcpBroken = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,9)).setObjects(("NSCTRAP", "nscTrapsVcpPortName"), ("NSCTRAP", "nscTrapsVcpLogicalState"), ("NSCTRAP", "nscTrapsVcpPhysicalState"))
vcpMisconfigured = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,10)).setObjects(("NSCTRAP", "nscTrapsVcpPortName"))
decNetCircDownFault = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,407)).setObjects(("NSCTRAP", "nscTrapsDecNetAreaNbr"), ("NSCTRAP", "nscTrapsDecNetNodeNbr"), ("NSCTRAP", "nscTrapsDecNetCircuitName"), ("NSCTRAP", "nscTrapsDecNetEventReason"))
decNetCircDown = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,408)).setObjects(("NSCTRAP", "nscTrapsDecNetAreaNbr"), ("NSCTRAP", "nscTrapsDecNetNodeNbr"), ("NSCTRAP", "nscTrapsDecNetCircuitName"), ("NSCTRAP", "nscTrapsDecNetEventReason"))
decNetCircUp = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,410)).setObjects(("NSCTRAP", "nscTrapsDecNetAreaNbr"), ("NSCTRAP", "nscTrapsDecNetNodeNbr"), ("NSCTRAP", "nscTrapsDecNetCircuitName"))
decNetNodeReachChg = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,414)).setObjects(("NSCTRAP", "nscTrapsDecNetNodeNbr"), ("NSCTRAP", "nscTrapsDecNetReachStatus"))
decNetAdjUp = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,415)).setObjects(("NSCTRAP", "nscTrapsDecNetAreaNbr"), ("NSCTRAP", "nscTrapsDecNetNodeNbr"), ("NSCTRAP", "nscTrapsDecNetCircuitName"))
decNetAdjRejected = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,416)).setObjects(("NSCTRAP", "nscTrapsDecNetAreaNbr"), ("NSCTRAP", "nscTrapsDecNetNodeNbr"), ("NSCTRAP", "nscTrapsDecNetCircuitName"), ("NSCTRAP", "nscTrapsDecNetEventReason"))
decNetAreaReachChg = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,417)).setObjects(("NSCTRAP", "nscTrapsDecNetAreaNbr"), ("NSCTRAP", "nscTrapsDecNetReachStatus"))
decNetAdjDown = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,418)).setObjects(("NSCTRAP", "nscTrapsDecNetAreaNbr"), ("NSCTRAP", "nscTrapsDecNetNodeNbr"), ("NSCTRAP", "nscTrapsDecNetCircuitName"), ("NSCTRAP", "nscTrapsDecNetEventReason"))
decNetDesignatedRouter = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 2, 4) + (0,422)).setObjects(("NSCTRAP", "nscTrapsDecNetAreaNbr"), ("NSCTRAP", "nscTrapsDecNetNodeNbr"), ("NSCTRAP", "nscTrapsDecNetCircuitName"))
mibBuilder.exportSymbols("NSCTRAP", nscTrapsVcpPhysicalState=nscTrapsVcpPhysicalState, decNetCircUp=decNetCircUp, nscTrapsProtBindIndex=nscTrapsProtBindIndex, nscMib=nscMib, nscTraps=nscTraps, nscManagement=nscManagement, physicalLinkUp=physicalLinkUp, vcpReconfig=vcpReconfig, nsc=nsc, nscTrapsDecNetCircuitName=nscTrapsDecNetCircuitName, decNetNodeReachChg=decNetNodeReachChg, protocolBound=protocolBound, vcpMisconfigured=vcpMisconfigured, decNetAdjUp=decNetAdjUp, fddiWrap=fddiWrap, nscTrapsVcpPortName=nscTrapsVcpPortName, nscTrapsDecNetEventReason=nscTrapsDecNetEventReason, vcpInactive=vcpInactive, decNetCircDownFault=decNetCircDownFault, decNetCircDown=decNetCircDown, decNetAreaReachChg=decNetAreaReachChg, decNetAdjDown=decNetAdjDown, decNetDesignatedRouter=decNetDesignatedRouter, nscTrapsVcpLogicalState=nscTrapsVcpLogicalState, nscTrapsFddiSMTCFState=nscTrapsFddiSMTCFState, nscTrapsDecNetReachStatus=nscTrapsDecNetReachStatus, decNetAdjRejected=decNetAdjRejected, nscTrapsDecNetAreaNbr=nscTrapsDecNetAreaNbr, vcpActive=vcpActive, nscTrapsDecNetNodeNbr=nscTrapsDecNetNodeNbr, physicalLinkDown=physicalLinkDown, vcpBroken=vcpBroken, protocolUnbound=protocolUnbound)
