#
# PySNMP MIB module CISCO-IP-PROTOCOL-FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IP-PROTOCOL-FILTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:45:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
CfgFilterGroupName, = mibBuilder.importSymbols("CISCO-FILTER-GROUP-MIB", "CfgFilterGroupName")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SyslogSeverity, = mibBuilder.importSymbols("CISCO-SYSLOG-MIB", "SyslogSeverity")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, TimeTicks, Bits, ObjectIdentity, iso, Counter64, MibIdentifier, ModuleIdentity, Gauge32, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "TimeTicks", "Bits", "ObjectIdentity", "iso", "Counter64", "MibIdentifier", "ModuleIdentity", "Gauge32", "Unsigned32", "NotificationType")
DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
ciscoIpProtocolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 278))
ciscoIpProtocolMIB.setRevisions(('2005-04-20 00:00', '2003-06-16 00:00', '2002-07-11 00:00',))
if mibBuilder.loadTexts: ciscoIpProtocolMIB.setLastUpdated('200504200000Z')
if mibBuilder.loadTexts: ciscoIpProtocolMIB.setOrganization('Cisco System Inc.')
ciscoIpProtocolFilterMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 278, 0))
ciscoIpProtocolFilterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 278, 1))
ciscoIpProtocolFilterMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 278, 2))
cippfIpFilterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1))
cippfIpFilterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 2))
class CippfIpFilterProfileName(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 64)

cippfIpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 1), )
if mibBuilder.loadTexts: cippfIpProfileTable.setStatus('current')
cippfIpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpProfileName"))
if mibBuilder.loadTexts: cippfIpProfileEntry.setStatus('current')
cippfIpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 1, 1, 1), CippfIpFilterProfileName())
if mibBuilder.loadTexts: cippfIpProfileName.setStatus('current')
cippfIpProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("simple", 1), ("extended", 2), ("extendedIPv6", 3))).clone('extended')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpProfileType.setStatus('current')
cippfIpProfileLastFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cippfIpProfileLastFilterIndex.setStatus('current')
cippfIpProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpProfileStatus.setStatus('current')
cippfIfIpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 2), )
if mibBuilder.loadTexts: cippfIfIpProfileTable.setStatus('current')
cippfIfIpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIfIpProfileDirection"))
if mibBuilder.loadTexts: cippfIfIpProfileEntry.setStatus('current')
cippfIfIpProfileDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("inboundIPv6", 3), ("outboundIPv6", 4))))
if mibBuilder.loadTexts: cippfIfIpProfileDirection.setStatus('current')
cippfIfIpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 2, 1, 2), CippfIpFilterProfileName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIfIpProfileName.setStatus('current')
cippfIfIpProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIfIpProfileStatus.setStatus('current')
cippfIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3), )
if mibBuilder.loadTexts: cippfIpFilterTable.setStatus('current')
cippfIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpProfileName"), (0, "CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterIndex"))
if mibBuilder.loadTexts: cippfIpFilterEntry.setStatus('current')
cippfIpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cippfIpFilterIndex.setStatus('current')
cippfIpFilterOrderPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterOrderPosition.setStatus('current')
cippfIpFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterAction.setStatus('current')
cippfIpFilterAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterAddressType.setStatus('current')
cippfIpFilterSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 5), InetAddress().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterSrcAddress.setStatus('current')
cippfIpFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 6), InetAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterSrcMask.setStatus('current')
cippfIpFilterDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 7), InetAddress().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterDestAddress.setStatus('current')
cippfIpFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 8), InetAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterDestMask.setStatus('current')
cippfIpFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterProtocol.setStatus('current')
cippfIpFilterSrcPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 10), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterSrcPortLow.setStatus('current')
cippfIpFilterSrcPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 11), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterSrcPortHigh.setStatus('current')
cippfIpFilterDestPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 12), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterDestPortLow.setStatus('current')
cippfIpFilterDestPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 13), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterDestPortHigh.setStatus('current')
cippfIpFilterPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", -1), ("routine", 0), ("priority", 1), ("immediate", 2), ("flash", 3), ("flashOverride", 4), ("critical", 5), ("internet", 6), ("network", 7))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterPrecedence.setStatus('current')
cippfIpFilterTos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterTos.setStatus('current')
cippfIpFilterLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterLogEnabled.setStatus('current')
cippfIpFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterStatus.setStatus('current')
cippfIpFilterICMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterICMPType.setStatus('current')
cippfIpFilterTCPEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterTCPEstablished.setStatus('current')
cippfIpFilterFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterFragments.setStatus('current')
cippfIpFilterICMPCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterICMPCode.setStatus('current')
cippfIpFilterSrcIPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 22), CfgFilterGroupName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterSrcIPGroupName.setStatus('current')
cippfIpFilterDstIPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 23), CfgFilterGroupName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterDstIPGroupName.setStatus('current')
cippfIpFilterProtocolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 24), CfgFilterGroupName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterProtocolGroupName.setStatus('current')
cippfIpFilterSrcServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 25), CfgFilterGroupName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterSrcServiceGroupName.setStatus('current')
cippfIpFilterDstServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 26), CfgFilterGroupName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterDstServiceGroupName.setStatus('current')
cippfIpFilterICMPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 3, 1, 27), CfgFilterGroupName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterICMPGroupName.setStatus('current')
cippfIpFilterExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 4), )
if mibBuilder.loadTexts: cippfIpFilterExtTable.setStatus('current')
cippfIpFilterExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 4, 1), )
cippfIpFilterEntry.registerAugmentions(("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterExtEntry"))
cippfIpFilterExtEntry.setIndexNames(*cippfIpFilterEntry.getIndexNames())
if mibBuilder.loadTexts: cippfIpFilterExtEntry.setStatus('current')
cippfIpFilterExtDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 4, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterExtDescription.setStatus('current')
cippfIpFilterExtLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 4, 1, 2), SyslogSeverity().clone('info')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterExtLogLevel.setStatus('current')
cippfIpFilterExtLogInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 1, 4, 1, 3), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cippfIpFilterExtLogInterval.setStatus('current')
cippfIpFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 2, 1), )
if mibBuilder.loadTexts: cippfIpFilterStatsTable.setStatus('current')
cippfIpFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpProfileName"), (0, "CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterIndex"))
if mibBuilder.loadTexts: cippfIpFilterStatsEntry.setStatus('current')
cippfIpFilterHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 278, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cippfIpFilterHits.setStatus('current')
ciscoIpProtocolFilterMIBCompl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 278, 2, 1))
ciscoIpProtocolFilterMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 278, 2, 2))
ciscoIpProtocolMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 278, 2, 1, 1)).setObjects(("CISCO-IP-PROTOCOL-FILTER-MIB", "ciscoIpProtocolFilteringGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpProtocolMIBCompliance = ciscoIpProtocolMIBCompliance.setStatus('deprecated')
ciscoIpProtocolMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 278, 2, 1, 2)).setObjects(("CISCO-IP-PROTOCOL-FILTER-MIB", "ciscoIpProtocolFilteringGroup"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "ciscoIpProtocolFilterGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpProtocolMIBComplianceRev1 = ciscoIpProtocolMIBComplianceRev1.setStatus('deprecated')
ciscoIpProtocolMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 278, 2, 1, 3)).setObjects(("CISCO-IP-PROTOCOL-FILTER-MIB", "ciscoIpProtocolFilteringGroup"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "ciscoIpProtocolFilterStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpProtocolMIBComplianceRev2 = ciscoIpProtocolMIBComplianceRev2.setStatus('current')
ciscoIpProtocolFilteringGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 278, 2, 2, 1)).setObjects(("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpProfileType"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpProfileLastFilterIndex"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpProfileStatus"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIfIpProfileName"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIfIpProfileStatus"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterOrderPosition"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterAction"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterAddressType"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterSrcAddress"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterSrcMask"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterDestAddress"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterDestMask"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterProtocol"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterSrcPortLow"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterSrcPortHigh"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterDestPortLow"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterDestPortHigh"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterPrecedence"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterTos"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterLogEnabled"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpProtocolFilteringGroup = ciscoIpProtocolFilteringGroup.setStatus('current')
ciscoIpProtocolFilterGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 278, 2, 2, 2)).setObjects(("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterICMPType"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterTCPEstablished"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterFragments"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterICMPCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpProtocolFilterGroup2 = ciscoIpProtocolFilterGroup2.setStatus('current')
ciscoIpProtocolFilterExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 278, 2, 2, 4)).setObjects(("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterExtDescription"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterExtLogLevel"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterExtLogInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpProtocolFilterExtGroup = ciscoIpProtocolFilterExtGroup.setStatus('current')
ciscoIpProtocolFilterObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 278, 2, 2, 5)).setObjects(("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterSrcIPGroupName"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterDstIPGroupName"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterProtocolGroupName"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterSrcServiceGroupName"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterDstServiceGroupName"), ("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterICMPGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpProtocolFilterObjectGroup = ciscoIpProtocolFilterObjectGroup.setStatus('current')
ciscoIpProtocolFilterStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 278, 2, 2, 6)).setObjects(("CISCO-IP-PROTOCOL-FILTER-MIB", "cippfIpFilterHits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpProtocolFilterStatsGroup = ciscoIpProtocolFilterStatsGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-IP-PROTOCOL-FILTER-MIB", ciscoIpProtocolFilterExtGroup=ciscoIpProtocolFilterExtGroup, cippfIpFilterExtTable=cippfIpFilterExtTable, cippfIpFilterDstIPGroupName=cippfIpFilterDstIPGroupName, cippfIpFilterICMPCode=cippfIpFilterICMPCode, ciscoIpProtocolFilterStatsGroup=ciscoIpProtocolFilterStatsGroup, cippfIfIpProfileStatus=cippfIfIpProfileStatus, cippfIpProfileName=cippfIpProfileName, cippfIpProfileEntry=cippfIpProfileEntry, cippfIfIpProfileDirection=cippfIfIpProfileDirection, cippfIpFilterIndex=cippfIpFilterIndex, cippfIpFilterOrderPosition=cippfIpFilterOrderPosition, cippfIpFilterDestAddress=cippfIpFilterDestAddress, cippfIpFilterFragments=cippfIpFilterFragments, cippfIpFilterProtocolGroupName=cippfIpFilterProtocolGroupName, cippfIfIpProfileName=cippfIfIpProfileName, cippfIpFilterEntry=cippfIpFilterEntry, cippfIpFilterSrcServiceGroupName=cippfIpFilterSrcServiceGroupName, cippfIpFilterExtDescription=cippfIpFilterExtDescription, CippfIpFilterProfileName=CippfIpFilterProfileName, cippfIpProfileStatus=cippfIpProfileStatus, cippfIpFilterStatsEntry=cippfIpFilterStatsEntry, ciscoIpProtocolFilterMIBGroups=ciscoIpProtocolFilterMIBGroups, cippfIpProfileType=cippfIpProfileType, ciscoIpProtocolFilterMIBObjects=ciscoIpProtocolFilterMIBObjects, cippfIpFilterStatsTable=cippfIpFilterStatsTable, cippfIpFilterTos=cippfIpFilterTos, ciscoIpProtocolMIBComplianceRev2=ciscoIpProtocolMIBComplianceRev2, cippfIpFilterProtocol=cippfIpFilterProtocol, cippfIpFilterSrcPortLow=cippfIpFilterSrcPortLow, cippfIpFilterTable=cippfIpFilterTable, cippfIpFilterDestMask=cippfIpFilterDestMask, cippfIpFilterPrecedence=cippfIpFilterPrecedence, cippfIpFilterExtEntry=cippfIpFilterExtEntry, ciscoIpProtocolFilterMIBConform=ciscoIpProtocolFilterMIBConform, cippfIpFilterTCPEstablished=cippfIpFilterTCPEstablished, cippfIpFilterDestPortLow=cippfIpFilterDestPortLow, cippfIpFilterStats=cippfIpFilterStats, cippfIpFilterAction=cippfIpFilterAction, cippfIpFilterLogEnabled=cippfIpFilterLogEnabled, cippfIpFilterICMPGroupName=cippfIpFilterICMPGroupName, cippfIpFilterExtLogLevel=cippfIpFilterExtLogLevel, ciscoIpProtocolMIBComplianceRev1=ciscoIpProtocolMIBComplianceRev1, cippfIfIpProfileTable=cippfIfIpProfileTable, ciscoIpProtocolFilterGroup2=ciscoIpProtocolFilterGroup2, cippfIpFilterSrcMask=cippfIpFilterSrcMask, cippfIpFilterConfig=cippfIpFilterConfig, cippfIpFilterICMPType=cippfIpFilterICMPType, cippfIpFilterHits=cippfIpFilterHits, cippfIpFilterSrcIPGroupName=cippfIpFilterSrcIPGroupName, cippfIpFilterStatus=cippfIpFilterStatus, ciscoIpProtocolFilterObjectGroup=ciscoIpProtocolFilterObjectGroup, cippfIpFilterDestPortHigh=cippfIpFilterDestPortHigh, cippfIpFilterExtLogInterval=cippfIpFilterExtLogInterval, ciscoIpProtocolMIB=ciscoIpProtocolMIB, ciscoIpProtocolFilteringGroup=ciscoIpProtocolFilteringGroup, ciscoIpProtocolFilterMIBNotifs=ciscoIpProtocolFilterMIBNotifs, ciscoIpProtocolFilterMIBCompl=ciscoIpProtocolFilterMIBCompl, cippfIpProfileLastFilterIndex=cippfIpProfileLastFilterIndex, PYSNMP_MODULE_ID=ciscoIpProtocolMIB, cippfIfIpProfileEntry=cippfIfIpProfileEntry, cippfIpFilterSrcPortHigh=cippfIpFilterSrcPortHigh, ciscoIpProtocolMIBCompliance=ciscoIpProtocolMIBCompliance, cippfIpFilterAddressType=cippfIpFilterAddressType, cippfIpProfileTable=cippfIpProfileTable, cippfIpFilterSrcAddress=cippfIpFilterSrcAddress, cippfIpFilterDstServiceGroupName=cippfIpFilterDstServiceGroupName)
