#
# PySNMP MIB module MRV-IN-REACH-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRV-IN-REACH-PPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:05:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
mrvInReachProductDivision, = mibBuilder.importSymbols("MRV-IN-REACH-PRODUCT-DIVISION-MIB", "mrvInReachProductDivision")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, Integer32, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, ObjectIdentity, Gauge32, TimeTicks, MibIdentifier, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Integer32", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Gauge32", "TimeTicks", "MibIdentifier", "iso", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22))
xPppBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 1))
xPppLcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 2))
xPppIpcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 3))
xPppAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 4))
xPppIpxcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 5))
xPppConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 1, 1), )
if mibBuilder.loadTexts: xPppConfigTable.setStatus('mandatory')
xPppConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppConfigEntry.setStatus('mandatory')
xPppConfigOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigOpen.setStatus('mandatory')
xPppConfigActive = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigActive.setStatus('mandatory')
xPppConfigDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigDefaults.setStatus('mandatory')
xPppConfigRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigRestartTimer.setStatus('mandatory')
xPppConfigConfLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigConfLimit.setStatus('mandatory')
xPppConfigFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigFailLimit.setStatus('mandatory')
xPppConfigPacketLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("raw", 2), ("interpreted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigPacketLogging.setStatus('mandatory')
xPppConfigKATimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigKATimer.setStatus('mandatory')
xPppConfigKATimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigKATimeout.setStatus('mandatory')
xPppStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 1, 2), )
if mibBuilder.loadTexts: xPppStatusTable.setStatus('mandatory')
xPppStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppStatusEntry.setStatus('mandatory')
xPppStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppStatusState.setStatus('mandatory')
xPppLinkOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notOpen", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLinkOpen.setStatus('mandatory')
xPppHdlcRxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxTotalPkts.setStatus('mandatory')
xPppHdlcTxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcTxTotalPkts.setStatus('mandatory')
xPppHdlcRxFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxFrameErrs.setStatus('mandatory')
xPppHdlcRxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxNoBuffer.setStatus('mandatory')
xPppHdlcTxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcTxNoBuffer.setStatus('mandatory')
xPppHdlcRxBadFcs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxBadFcs.setStatus('mandatory')
xPppHdlcVJDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcVJDiscards.setStatus('mandatory')
xPppLcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 2, 1), )
if mibBuilder.loadTexts: xPppLcpConfigTable.setStatus('mandatory')
xPppLcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppLcpConfigEntry.setStatus('mandatory')
xPppLcpConfigAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppLcpConfigAuth.setStatus('mandatory')
xPppLcpConfigChapAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("chap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppLcpConfigChapAuth.setStatus('mandatory')
xPppLcpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 2, 2), )
if mibBuilder.loadTexts: xPppLcpStatusTable.setStatus('mandatory')
xPppLcpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppLcpStatusEntry.setStatus('mandatory')
xPppLcpStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("open", 6), ("closing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusState.setStatus('deprecated')
xPppLcpStatusRxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxAuth.setStatus('mandatory')
xPppLcpStatusTxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxAuth.setStatus('mandatory')
xPppLcpStatusRxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConReq.setStatus('mandatory')
xPppLcpStatusTxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConReq.setStatus('mandatory')
xPppLcpStatusRxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConNak.setStatus('mandatory')
xPppLcpStatusTxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConNak.setStatus('mandatory')
xPppLcpStatusRxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConAck.setStatus('mandatory')
xPppLcpStatusTxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConAck.setStatus('mandatory')
xPppLcpStatusRxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConRej.setStatus('mandatory')
xPppLcpStatusTxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConRej.setStatus('mandatory')
xPppLcpStatusRxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxTrmReq.setStatus('mandatory')
xPppLcpStatusTxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxTrmReq.setStatus('mandatory')
xPppLcpStatusRxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxTrmAck.setStatus('mandatory')
xPppLcpStatusTxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxTrmAck.setStatus('mandatory')
xPppLcpStatusRxEcoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxEcoReq.setStatus('mandatory')
xPppLcpStatusTxEcoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxEcoReq.setStatus('mandatory')
xPppLcpStatusRxEcoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxEcoRep.setStatus('mandatory')
xPppLcpStatusTxEcoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxEcoRep.setStatus('mandatory')
xPppLcpStatusRxCodRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxCodRej.setStatus('mandatory')
xPppLcpStatusTxCodRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxCodRej.setStatus('mandatory')
xPppLcpStatusRxProRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxProRej.setStatus('mandatory')
xPppLcpStatusTxProRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxProRej.setStatus('mandatory')
xPppLcpStatusState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusState2.setStatus('mandatory')
xPppIpcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 3, 1), )
if mibBuilder.loadTexts: xPppIpcpConfigTable.setStatus('mandatory')
xPppIpcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpcpConfigEntry.setStatus('mandatory')
xPppIpcpConfigLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigLocalAddress.setStatus('mandatory')
xPppIpcpConfigRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigRemoteAddress.setStatus('mandatory')
xPppIpcpConfigVJCompSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigVJCompSlots.setStatus('mandatory')
xPppIpcpConfigRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigRangeStart.setStatus('mandatory')
xPppIpcpConfigRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigRangeEnd.setStatus('mandatory')
xPppIpcpConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigState.setStatus('mandatory')
xPppIpcpConfigLocalRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigLocalRangeStart.setStatus('mandatory')
xPppIpcpConfigLocalRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigLocalRangeEnd.setStatus('mandatory')
xPppIpcpConfigPppIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 9), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigPppIpMask.setStatus('mandatory')
xPppIpcpAsyncConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 3, 2), )
if mibBuilder.loadTexts: xPppIpcpAsyncConfigTable.setStatus('mandatory')
xPppIpcpAsyncConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpcpAsyncConfigEntry.setStatus('mandatory')
xPppIpcpAsyncConfigBrdcast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpAsyncConfigBrdcast.setStatus('mandatory')
xPppIpcpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 3, 3), )
if mibBuilder.loadTexts: xPppIpcpStatusTable.setStatus('mandatory')
xPppIpcpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpcpStatusEntry.setStatus('mandatory')
xPppIpcpStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("open", 6), ("closing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusState.setStatus('deprecated')
xPppIpcpStatusLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusLocalAddress.setStatus('mandatory')
xPppIpcpStatusRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusRemoteAddress.setStatus('mandatory')
xPppIpcpRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxPkts.setStatus('mandatory')
xPppIpcpTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxPkts.setStatus('mandatory')
xPppIpcpRxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConReq.setStatus('mandatory')
xPppIpcpTxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConReq.setStatus('mandatory')
xPppIpcpRxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConNak.setStatus('mandatory')
xPppIpcpTxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConNak.setStatus('mandatory')
xPppIpcpRxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConAck.setStatus('mandatory')
xPppIpcpTxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConAck.setStatus('mandatory')
xPppIpcpRxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConRej.setStatus('mandatory')
xPppIpcpTxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConRej.setStatus('mandatory')
xPppIpcpRxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxTrmReq.setStatus('mandatory')
xPppIpcpTxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxTrmReq.setStatus('mandatory')
xPppIpcpRxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxTrmAck.setStatus('mandatory')
xPppIpcpTxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxTrmAck.setStatus('mandatory')
xPppIpcpStatusState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusState2.setStatus('mandatory')
xPppPapPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 22, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppPapPassword.setStatus('mandatory')
xPppAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 4, 2), )
if mibBuilder.loadTexts: xPppAuthConfigTable.setStatus('mandatory')
xPppAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppAuthConfigEntry.setStatus('mandatory')
xPppAuthChapChallengeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppAuthChapChallengeTimer.setStatus('mandatory')
xPppAuthPapConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("kerberos", 3), ("radius", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppAuthPapConfigState.setStatus('mandatory')
xPppAuthChapConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("radius", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppAuthChapConfigState.setStatus('mandatory')
xPppAuthStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 4, 3), )
if mibBuilder.loadTexts: xPppAuthStatusTable.setStatus('mandatory')
xPppAuthStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppAuthStatusEntry.setStatus('mandatory')
xPppPapStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("initial", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("reqSent", 5), ("ackRecv", 6), ("ackSent", 7), ("opened", 8), ("kerberosReqSent", 9), ("kerberosStopped", 10), ("kerberosAckRecv", 11), ("kerberosAckSent", 12), ("papKerberosOpened", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppPapStatusState.setStatus('mandatory')
xPppChapStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("challengeWait", 2), ("challengeSent", 3), ("responseSent", 4), ("challengeSentResponseSent", 5), ("challengeSentAckRecv", 6), ("open", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppChapStatusState.setStatus('mandatory')
xPppChapPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 22, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppChapPassword.setStatus('mandatory')
xPppIpxcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 5, 1), )
if mibBuilder.loadTexts: xPppIpxcpConfigTable.setStatus('mandatory')
xPppIpxcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpxcpConfigEntry.setStatus('mandatory')
xPppIpxcpCipxCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpxcpCipxCompression.setStatus('mandatory')
xPppIpxcpConfigRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpxcpConfigRemoteNode.setStatus('mandatory')
xPppIpxcpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 5, 2), )
if mibBuilder.loadTexts: xPppIpxcpStatusTable.setStatus('mandatory')
xPppIpxcpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpxcpStatusEntry.setStatus('mandatory')
xPppIpxcpStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpStatusState.setStatus('mandatory')
xPppIpxcpCipxInCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxInCompression.setStatus('mandatory')
xPppIpxcpCipxOutCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxOutCompression.setStatus('mandatory')
xPppIpxcpCipxInSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxInSlots.setStatus('mandatory')
xPppIpxcpCipxOutSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxOutSlots.setStatus('mandatory')
xPppIpxcpStatusRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpStatusRemoteNode.setStatus('mandatory')
xPppIpxcpCountersTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 5, 3), )
if mibBuilder.loadTexts: xPppIpxcpCountersTable.setStatus('mandatory')
xPppIpxcpCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpxcpCountersEntry.setStatus('mandatory')
xPppIpxcpRxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConReq.setStatus('mandatory')
xPppIpxcpTxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConReq.setStatus('mandatory')
xPppIpxcpRxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConNak.setStatus('mandatory')
xPppIpxcpTxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConNak.setStatus('mandatory')
xPppIpxcpRxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConAck.setStatus('mandatory')
xPppIpxcpTxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConAck.setStatus('mandatory')
xPppIpxcpRxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConRej.setStatus('mandatory')
xPppIpxcpTxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConRej.setStatus('mandatory')
xPppIpxcpRxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxTrmReq.setStatus('mandatory')
xPppIpxcpTxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxTrmReq.setStatus('mandatory')
xPppIpxcpRxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxTrmAck.setStatus('mandatory')
xPppIpxcpTxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxTrmAck.setStatus('mandatory')
mibBuilder.exportSymbols("MRV-IN-REACH-PPP-MIB", xPppIpcpStatusState2=xPppIpcpStatusState2, xPppIpxcpCipxOutSlots=xPppIpxcpCipxOutSlots, xPppBasic=xPppBasic, xPppIpcpConfigEntry=xPppIpcpConfigEntry, xPppIpcpConfigVJCompSlots=xPppIpcpConfigVJCompSlots, xPppIpxcpRxConAck=xPppIpxcpRxConAck, xPppIpxcpTxConAck=xPppIpxcpTxConAck, xPppLcpStatusTxTrmReq=xPppLcpStatusTxTrmReq, xPppIpcpConfigRangeEnd=xPppIpcpConfigRangeEnd, xPppLcpStatusRxEcoReq=xPppLcpStatusRxEcoReq, xPppIpxcpRxConNak=xPppIpxcpRxConNak, xPppIpxcpTxTrmReq=xPppIpxcpTxTrmReq, xPppIpcpConfigState=xPppIpcpConfigState, xPppLcpStatusRxConReq=xPppLcpStatusRxConReq, xPppIpcpTxConAck=xPppIpcpTxConAck, xPppConfigConfLimit=xPppConfigConfLimit, xPppIpxcpCipxInSlots=xPppIpxcpCipxInSlots, xPppLcpStatusRxConRej=xPppLcpStatusRxConRej, xPppStatusState=xPppStatusState, xPppIpcpTxConNak=xPppIpcpTxConNak, xPppConfigRestartTimer=xPppConfigRestartTimer, xPppLcpStatusTxConAck=xPppLcpStatusTxConAck, xPppLcpStatusState=xPppLcpStatusState, xPppIpcpRxConRej=xPppIpcpRxConRej, xPppLcpStatusRxConNak=xPppLcpStatusRxConNak, xPppHdlcRxTotalPkts=xPppHdlcRxTotalPkts, xPppIpxcpStatusRemoteNode=xPppIpxcpStatusRemoteNode, xPppConfigKATimeout=xPppConfigKATimeout, xPppIpcpRxConReq=xPppIpcpRxConReq, xPppIpxcpTxConReq=xPppIpxcpTxConReq, xPppHdlcRxNoBuffer=xPppHdlcRxNoBuffer, xPppLcpStatusTxCodRej=xPppLcpStatusTxCodRej, xPppLcpStatusTxConRej=xPppLcpStatusTxConRej, xPppIpxcpCipxInCompression=xPppIpxcpCipxInCompression, xPppLcpConfigTable=xPppLcpConfigTable, xPppHdlcRxBadFcs=xPppHdlcRxBadFcs, xPppLcpStatusRxEcoRep=xPppLcpStatusRxEcoRep, xPppPapPassword=xPppPapPassword, xPppLcpStatusRxCodRej=xPppLcpStatusRxCodRej, xPppIpxcpRxConReq=xPppIpxcpRxConReq, xPppIpcpRxConNak=xPppIpcpRxConNak, xPppConfigPacketLogging=xPppConfigPacketLogging, xPppChapStatusState=xPppChapStatusState, xPppLcpStatusRxProRej=xPppLcpStatusRxProRej, xPppIpcpTxTrmAck=xPppIpcpTxTrmAck, xPppAuthStatusTable=xPppAuthStatusTable, xPppIpxcp=xPppIpxcp, xPppAuthConfigTable=xPppAuthConfigTable, xPppHdlcRxFrameErrs=xPppHdlcRxFrameErrs, xPppIpxcpTxConRej=xPppIpxcpTxConRej, xPppLcpStatusRxAuth=xPppLcpStatusRxAuth, xPppIpcpTxPkts=xPppIpcpTxPkts, xPppIpcpStatusEntry=xPppIpcpStatusEntry, xPppIpxcpConfigEntry=xPppIpxcpConfigEntry, xPppIpxcpCountersEntry=xPppIpxcpCountersEntry, xPppIpcpTxConRej=xPppIpcpTxConRej, xPppLcpStatusTxConReq=xPppLcpStatusTxConReq, xPppIpcpStatusState=xPppIpcpStatusState, xPppLcpStatusRxTrmAck=xPppLcpStatusRxTrmAck, xPppLcpConfigEntry=xPppLcpConfigEntry, xPppIpcpRxTrmReq=xPppIpcpRxTrmReq, xPppIpcpTxTrmReq=xPppIpcpTxTrmReq, xPppIpcpRxPkts=xPppIpcpRxPkts, xPppLcpStatusTxAuth=xPppLcpStatusTxAuth, xPppIpxcpConfigRemoteNode=xPppIpxcpConfigRemoteNode, xPppIpxcpStatusState=xPppIpxcpStatusState, xPppIpxcpCountersTable=xPppIpxcpCountersTable, xPppLcpStatusTxEcoRep=xPppLcpStatusTxEcoRep, xPppIpxcpStatusEntry=xPppIpxcpStatusEntry, xPppIpcpRxTrmAck=xPppIpcpRxTrmAck, xPppConfigActive=xPppConfigActive, xPppStatusEntry=xPppStatusEntry, xPppConfigTable=xPppConfigTable, xPppLcpStatusTxConNak=xPppLcpStatusTxConNak, xPppIpxcpCipxOutCompression=xPppIpxcpCipxOutCompression, xPppLcpStatusEntry=xPppLcpStatusEntry, xPppConfigEntry=xPppConfigEntry, xPppConfigFailLimit=xPppConfigFailLimit, xPppIpcpConfigLocalAddress=xPppIpcpConfigLocalAddress, xPppAuthChapConfigState=xPppAuthChapConfigState, xPppIpcpConfigRangeStart=xPppIpcpConfigRangeStart, xPppLcp=xPppLcp, xPppIpxcpRxTrmReq=xPppIpxcpRxTrmReq, xPppAuthConfigEntry=xPppAuthConfigEntry, xPppAuth=xPppAuth, xPppAuthChapChallengeTimer=xPppAuthChapChallengeTimer, xPppIpcpConfigLocalRangeStart=xPppIpcpConfigLocalRangeStart, xPppIpcpStatusLocalAddress=xPppIpcpStatusLocalAddress, xPppIpcpStatusTable=xPppIpcpStatusTable, xPppConfigKATimer=xPppConfigKATimer, xPppPapStatusState=xPppPapStatusState, xPppLcpStatusTxEcoReq=xPppLcpStatusTxEcoReq, xPppChapPassword=xPppChapPassword, xPppLcpStatusTable=xPppLcpStatusTable, xPppConfigDefaults=xPppConfigDefaults, xPppAuthStatusEntry=xPppAuthStatusEntry, xPppAuthPapConfigState=xPppAuthPapConfigState, xPppIpxcpRxTrmAck=xPppIpxcpRxTrmAck, xPppLcpStatusRxTrmReq=xPppLcpStatusRxTrmReq, xPppIpcpTxConReq=xPppIpcpTxConReq, xPppIpcpAsyncConfigEntry=xPppIpcpAsyncConfigEntry, xPppIpcpAsyncConfigBrdcast=xPppIpcpAsyncConfigBrdcast, xPppHdlcTxTotalPkts=xPppHdlcTxTotalPkts, xPppIpcp=xPppIpcp, xPppConfigOpen=xPppConfigOpen, xPppIpcpConfigTable=xPppIpcpConfigTable, xPppIpcpRxConAck=xPppIpcpRxConAck, xPppIpxcpTxConNak=xPppIpxcpTxConNak, xPppLinkOpen=xPppLinkOpen, xPppIpxcpCipxCompression=xPppIpxcpCipxCompression, xPppIpxcpTxTrmAck=xPppIpxcpTxTrmAck, xPppIpcpConfigRemoteAddress=xPppIpcpConfigRemoteAddress, xPppIpcpAsyncConfigTable=xPppIpcpAsyncConfigTable, xPppLcpConfigAuth=xPppLcpConfigAuth, xPppLcpStatusTxProRej=xPppLcpStatusTxProRej, xPppIpxcpStatusTable=xPppIpxcpStatusTable, xPpp=xPpp, xPppIpxcpRxConRej=xPppIpxcpRxConRej, xPppHdlcVJDiscards=xPppHdlcVJDiscards, xPppHdlcTxNoBuffer=xPppHdlcTxNoBuffer, xPppLcpStatusState2=xPppLcpStatusState2, xPppLcpStatusRxConAck=xPppLcpStatusRxConAck, xPppLcpConfigChapAuth=xPppLcpConfigChapAuth, xPppIpcpConfigLocalRangeEnd=xPppIpcpConfigLocalRangeEnd, xPppIpcpConfigPppIpMask=xPppIpcpConfigPppIpMask, xPppStatusTable=xPppStatusTable, xPppLcpStatusTxTrmAck=xPppLcpStatusTxTrmAck, xPppIpxcpConfigTable=xPppIpxcpConfigTable, xPppIpcpStatusRemoteAddress=xPppIpcpStatusRemoteAddress)
