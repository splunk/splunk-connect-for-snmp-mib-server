#
# PySNMP MIB module FA-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FA-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:57:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
connUnitPortEntry, = mibBuilder.importSymbols("FCMGMT-MIB", "connUnitPortEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, iso, Counter32, Integer32, NotificationType, IpAddress, ModuleIdentity, Bits, TimeTicks, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "Counter32", "Integer32", "NotificationType", "IpAddress", "ModuleIdentity", "Bits", "TimeTicks", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
sw, = mibBuilder.importSymbols("SW-MIB", "sw")
faExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28))
faExt.setRevisions(('2010-11-22 10:30', '2013-09-12 10:30', '2013-09-24 13:55', '2013-10-29 13:54',))
if mibBuilder.loadTexts: faExt.setLastUpdated('201310291354Z')
if mibBuilder.loadTexts: faExt.setOrganization('Brocade Communications Systems, Inc.,')
swSfpStatTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 1), )
if mibBuilder.loadTexts: swSfpStatTable.setStatus('current')
swFapwwnFeature = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 2))
if mibBuilder.loadTexts: swFapwwnFeature.setStatus('current')
swPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 3), )
if mibBuilder.loadTexts: swPortConfigTable.setStatus('current')
swConnUnitPortTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 4), )
if mibBuilder.loadTexts: swConnUnitPortTable.setStatus('current')
swSfpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 1, 1), )
connUnitPortEntry.registerAugmentions(("FA-EXT-MIB", "swSfpStatEntry"))
swSfpStatEntry.setIndexNames(*connUnitPortEntry.getIndexNames())
if mibBuilder.loadTexts: swSfpStatEntry.setStatus('current')
swSfpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setUnits('centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: swSfpTemperature.setStatus('current')
swSfpVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setUnits('milli voltage').setMaxAccess("readonly")
if mibBuilder.loadTexts: swSfpVoltage.setStatus('current')
swSfpCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setUnits('milli amphere').setMaxAccess("readonly")
if mibBuilder.loadTexts: swSfpCurrent.setStatus('current')
swSfpRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: swSfpRxPower.setStatus('current')
swSfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: swSfpTxPower.setStatus('current')
swSfpPoweronHrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 1, 1, 6), Integer32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: swSfpPoweronHrs.setStatus('current')
swSfpUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSfpUnitId.setStatus('current')
swPortFapwwnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 2, 1), )
if mibBuilder.loadTexts: swPortFapwwnConfigTable.setStatus('current')
swPortFapwwnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 2, 1, 1), )
connUnitPortEntry.registerAugmentions(("FA-EXT-MIB", "swPortFapwwnConfigEntry"))
swPortFapwwnConfigEntry.setIndexNames(*connUnitPortEntry.getIndexNames())
if mibBuilder.loadTexts: swPortFapwwnConfigEntry.setStatus('current')
class FapwwnType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("auto", 2), ("userConfigured", 3))

swPortFapwwnConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFapwwnConfigEnable.setStatus('current')
swPortFapwwnConfigFapwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFapwwnConfigFapwwn.setStatus('current')
swPortFapwwnConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 2, 1, 1, 3), FapwwnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFapwwnConfigType.setStatus('current')
swPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 3, 1), )
connUnitPortEntry.registerAugmentions(("FA-EXT-MIB", "swPortConfigEntry"))
swPortConfigEntry.setIndexNames(*connUnitPortEntry.getIndexNames())
if mibBuilder.loadTexts: swPortConfigEntry.setStatus('current')
class CiperMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("allFrames", 2), ("fcpAndNonFCP", 3), ("onlyFCP", 4))

class EncryptCompressStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3))

swPortEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 3, 1, 1), EncryptCompressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortEncrypt.setStatus('current')
swPortCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 3, 1, 2), EncryptCompressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortCompression.setStatus('current')
swPortCipherKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortCipherKeySize.setStatus('current')
swPortCipherMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 3, 1, 4), CiperMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortCipherMode.setStatus('current')
swConnUnitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 4, 1), )
connUnitPortEntry.registerAugmentions(("FA-EXT-MIB", "swConnUnitPortEntry"))
swConnUnitPortEntry.setIndexNames(*connUnitPortEntry.getIndexNames())
if mibBuilder.loadTexts: swConnUnitPortEntry.setStatus('current')
swConnUnitPortCapableSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitPortCapableSpeeds.setStatus('current')
swConnUnitPortSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto-neg", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitPortSpeedMode.setStatus('current')
swConnUnitPortFECMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3), ("notsupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitPortFECMode.setStatus('current')
swConnUnitPortFECState = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 28, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("active", 1), ("inactive", 2), ("notsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitPortFECState.setStatus('current')
mibBuilder.exportSymbols("FA-EXT-MIB", faExt=faExt, swConnUnitPortSpeedMode=swConnUnitPortSpeedMode, swConnUnitPortTable=swConnUnitPortTable, swSfpPoweronHrs=swSfpPoweronHrs, swPortFapwwnConfigEntry=swPortFapwwnConfigEntry, swPortCipherMode=swPortCipherMode, swSfpStatEntry=swSfpStatEntry, swSfpVoltage=swSfpVoltage, swPortEncrypt=swPortEncrypt, swConnUnitPortEntry=swConnUnitPortEntry, swPortConfigTable=swPortConfigTable, swPortFapwwnConfigTable=swPortFapwwnConfigTable, swSfpCurrent=swSfpCurrent, FapwwnType=FapwwnType, CiperMode=CiperMode, swPortFapwwnConfigType=swPortFapwwnConfigType, swSfpRxPower=swSfpRxPower, swFapwwnFeature=swFapwwnFeature, swConnUnitPortCapableSpeeds=swConnUnitPortCapableSpeeds, swPortFapwwnConfigFapwwn=swPortFapwwnConfigFapwwn, swSfpTxPower=swSfpTxPower, swConnUnitPortFECState=swConnUnitPortFECState, EncryptCompressStatus=EncryptCompressStatus, swPortFapwwnConfigEnable=swPortFapwwnConfigEnable, swPortConfigEntry=swPortConfigEntry, swPortCipherKeySize=swPortCipherKeySize, swConnUnitPortFECMode=swConnUnitPortFECMode, swSfpStatTable=swSfpStatTable, swPortCompression=swPortCompression, PYSNMP_MODULE_ID=faExt, swSfpUnitId=swSfpUnitId, swSfpTemperature=swSfpTemperature)
