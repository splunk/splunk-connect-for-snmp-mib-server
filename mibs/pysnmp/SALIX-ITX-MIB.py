#
# PySNMP MIB module SALIX-ITX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SALIX-ITX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:52:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
voip, = mibBuilder.importSymbols("SALIX-MIB", "voip")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Bits, NotificationType, Integer32, Counter64, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Gauge32, MibIdentifier, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "NotificationType", "Integer32", "Counter64", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Gauge32", "MibIdentifier", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
itxMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1))
if mibBuilder.loadTexts: itxMIB.setLastUpdated('9810130000Z')
if mibBuilder.loadTexts: itxMIB.setOrganization('SALIX Technologies')
itxMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1))
itxMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 2))
itxMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 3))
itxMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 2, 0))
itxSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 1))
itxDsp = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 2))
itxMediaController = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 3))
itxDspStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: itxDspStatusTable.setStatus('current')
itxDspStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "SALIX-ITX-MIB", "itxDspStatusPhysIndex"), (0, "SALIX-ITX-MIB", "itxDspStatusRow"), (0, "SALIX-ITX-MIB", "itxDspStatusColumn"))
if mibBuilder.loadTexts: itxDspStatusEntry.setStatus('current')
itxDspStatusPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 2, 1, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: itxDspStatusPhysIndex.setStatus('current')
itxDspStatusRow = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: itxDspStatusRow.setStatus('current')
itxDspStatusColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: itxDspStatusColumn.setStatus('current')
itxDspStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itxDspStatusOperStatus.setStatus('current')
itxMediaControllerPrimaryIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxMediaControllerPrimaryIpAddress.setStatus('current')
itxMediaControllerPrimaryPort = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxMediaControllerPrimaryPort.setStatus('current')
itxMediaControllerSecondaryIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxMediaControllerSecondaryIpAddress.setStatus('current')
itxMediaControllerSecondaryPort = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxMediaControllerSecondaryPort.setStatus('current')
itxMediaControllerActiveController = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxMediaControllerActiveController.setStatus('current')
itxIsdnBackHaulMediaControllerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 3, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxIsdnBackHaulMediaControllerIpAddress.setStatus('current')
itxIsdnBackHaulMediaControllerPort = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxIsdnBackHaulMediaControllerPort.setStatus('current')
itxMediaSubnet = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxMediaSubnet.setStatus('current')
itxMediaSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 5), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxMediaSubnetMask.setStatus('current')
itxNetworkManagementAddress = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxNetworkManagementAddress.setStatus('current')
itxNetworkManagementSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxNetworkManagementSubnetMask.setStatus('current')
itxCallControlAddress = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxCallControlAddress.setStatus('current')
itxCallControlSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxCallControlSubnetMask.setStatus('current')
itxEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 15), )
if mibBuilder.loadTexts: itxEthernetTable.setStatus('current')
itxEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: itxEthernetEntry.setStatus('current')
itxDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 15, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxDefaultGateway.setStatus('current')
itxIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxIpAddress.setStatus('current')
itxSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 15, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxSubnetMask.setStatus('current')
itxSnmpManagementEntityIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxSnmpManagementEntityIpAddress.setStatus('current')
itxSnmpManagementEntityPort = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxSnmpManagementEntityPort.setStatus('current')
itxCallControlProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipdcVersion0dot15", 1), ("sgcpVersion0", 2), ("mgcpVersion0dot1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxCallControlProtocol.setStatus('current')
itxCompandingLaw = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aLaw", 0), ("muLaw", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxCompandingLaw.setStatus('current')
itxDnsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxDnsIpAddress.setStatus('current')
itxHostname = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itxHostname.setStatus('current')
itxEthernetLoadSharing = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 0))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxEthernetLoadSharing.setStatus('current')
itxNFSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 22))
itxNFSIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 22, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxNFSIpAddress.setStatus('current')
itxNFSPath = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxNFSPath.setStatus('current')
itxNFSUserId = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 22, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxNFSUserId.setStatus('current')
itxNFSGroupId = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 22, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxNFSGroupId.setStatus('current')
itxNFSStatus = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 1, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mounted", 1), ("unmounted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itxNFSStatus.setStatus('current')
itxGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 3, 1))
itxCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 3, 2))
itxCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 3, 2, 1)).setObjects()

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    itxCompliance = itxCompliance.setStatus('current')
itxDspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 3, 1, 4)).setObjects(("SALIX-ITX-MIB", "itxDspStatusOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    itxDspGroup = itxDspGroup.setStatus('current')
itxMediaControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 2, 1, 3, 1, 7)).setObjects(("SALIX-ITX-MIB", "itxMediaControllerPrimaryIpAddress"), ("SALIX-ITX-MIB", "itxMediaControllerPrimaryPort"), ("SALIX-ITX-MIB", "itxMediaControllerSecondaryIpAddress"), ("SALIX-ITX-MIB", "itxMediaControllerSecondaryPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    itxMediaControllerGroup = itxMediaControllerGroup.setStatus('current')
mibBuilder.exportSymbols("SALIX-ITX-MIB", itxIsdnBackHaulMediaControllerPort=itxIsdnBackHaulMediaControllerPort, itxNFSStatus=itxNFSStatus, itxCallControlSubnetMask=itxCallControlSubnetMask, itxCallControlProtocol=itxCallControlProtocol, itxEthernetEntry=itxEthernetEntry, itxMediaControllerGroup=itxMediaControllerGroup, itxCompliance=itxCompliance, itxDspStatusEntry=itxDspStatusEntry, itxSubnetMask=itxSubnetMask, itxMediaSubnetMask=itxMediaSubnetMask, itxSnmpManagementEntityPort=itxSnmpManagementEntityPort, itxMIBTrapPrefix=itxMIBTrapPrefix, itxIsdnBackHaulMediaControllerIpAddress=itxIsdnBackHaulMediaControllerIpAddress, itxCompliances=itxCompliances, itxNFSPath=itxNFSPath, itxDspStatusOperStatus=itxDspStatusOperStatus, itxNetworkManagementAddress=itxNetworkManagementAddress, itxSnmpManagementEntityIpAddress=itxSnmpManagementEntityIpAddress, itxNFSIpAddress=itxNFSIpAddress, itxMIBObjects=itxMIBObjects, itxMediaSubnet=itxMediaSubnet, itxNFSUserId=itxNFSUserId, itxMediaControllerSecondaryIpAddress=itxMediaControllerSecondaryIpAddress, itxMIB=itxMIB, itxGroups=itxGroups, itxDspStatusColumn=itxDspStatusColumn, itxDspStatusRow=itxDspStatusRow, itxMIBTraps=itxMIBTraps, itxDspGroup=itxDspGroup, itxDspStatusPhysIndex=itxDspStatusPhysIndex, itxDspStatusTable=itxDspStatusTable, itxMediaControllerPrimaryPort=itxMediaControllerPrimaryPort, itxMediaControllerSecondaryPort=itxMediaControllerSecondaryPort, itxDnsIpAddress=itxDnsIpAddress, itxNFSObjects=itxNFSObjects, itxEthernetTable=itxEthernetTable, itxMediaControllerPrimaryIpAddress=itxMediaControllerPrimaryIpAddress, itxMediaControllerActiveController=itxMediaControllerActiveController, itxEthernetLoadSharing=itxEthernetLoadSharing, itxNFSGroupId=itxNFSGroupId, itxDsp=itxDsp, itxDefaultGateway=itxDefaultGateway, itxSystem=itxSystem, itxMediaController=itxMediaController, itxMIBCompliance=itxMIBCompliance, itxCompandingLaw=itxCompandingLaw, itxNetworkManagementSubnetMask=itxNetworkManagementSubnetMask, itxCallControlAddress=itxCallControlAddress, itxIpAddress=itxIpAddress, itxHostname=itxHostname, PYSNMP_MODULE_ID=itxMIB)
