#
# PySNMP MIB module HIPATH-WIRELESS-HWC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HIPATH-WIRELESS-HWC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:17:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
hiPathWirelessMgmt, hiPathWirelessModules = mibBuilder.importSymbols("HIPATH-WIRELESS-SMI", "hiPathWirelessMgmt", "hiPathWirelessModules")
WEPKeytype, = mibBuilder.importSymbols("IEEE802dot11-MIB", "WEPKeytype")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Gauge32, ObjectIdentity, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, MibIdentifier, IpAddress, Counter32, Unsigned32, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "MibIdentifier", "IpAddress", "Counter32", "Unsigned32", "TimeTicks", "iso")
TextualConvention, DisplayString, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus", "MacAddress")
hiPathWirelessControllerMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4329, 15, 5, 2))
hiPathWirelessControllerMib.setRevisions(('2016-04-13 13:55', '2016-03-09 16:41', '2015-10-06 17:31', '2015-06-12 12:05', '2015-03-17 10:31', '2014-11-28 17:31', '2014-06-17 15:29', '2014-04-16 14:29', '2014-01-27 14:29', '2013-11-18 10:29', '2013-08-28 11:17', '2013-08-01 15:55', '2013-07-12 16:50', '2013-04-18 15:55', '2012-10-18 11:50', '2012-09-27 11:10', '2012-09-10 14:10', '2012-02-13 19:33', '2011-08-17 14:18', '2011-06-13 13:10', '2011-04-29 16:06', '2011-01-13 13:25', '2010-04-29 17:44', '2010-04-08 16:45', '2010-02-23 15:17', '2009-08-18 12:00', '2009-07-23 12:47', '2009-04-23 17:14', '2009-01-19 13:49', '2008-08-13 14:31', '2007-11-26 16:15', '2007-08-11 16:15', '2007-01-15 13:38', '2005-10-28 13:12',))
if mibBuilder.loadTexts: hiPathWirelessControllerMib.setLastUpdated('201604131355Z')
if mibBuilder.loadTexts: hiPathWirelessControllerMib.setOrganization('Chantry Networks Inc.')
class LogEventSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("information", 4), ("trace", 5))

class HundredthOfGauge64(TextualConvention, Counter64):
    status = 'current'
    displayHint = 'd-2'

class HundredthOfGauge32(TextualConvention, Gauge32):
    status = 'current'
    displayHint = 'd-2'

class HundredthOfInt32(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-2'

hiPathWirelessController = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2))
systemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1))
sysSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSoftwareVersion.setStatus('current')
sysLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 2), LogEventSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogLevel.setStatus('current')
sysSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSerialNo.setStatus('current')
sysLogSupport = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4))
hiPathWirelessAppLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("local0", 0), ("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("local5", 5), ("local6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiPathWirelessAppLogFacility.setStatus('current')
serviceLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("local0", 0), ("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("local5", 5), ("local6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceLogFacility.setStatus('current')
includeAllServiceMessages = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: includeAllServiceMessages.setStatus('current')
sysLogServersTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4, 4), )
if mibBuilder.loadTexts: sysLogServersTable.setStatus('current')
sysLogServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4, 4, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "sysLogServerIndex"))
if mibBuilder.loadTexts: sysLogServersEntry.setStatus('current')
sysLogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerIndex.setStatus('current')
sysLogServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerEnabled.setStatus('current')
sysLogServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerIP.setStatus('current')
sysLogServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerPort.setStatus('current')
sysLogServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 4, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerRowStatus.setStatus('current')
sysCPUType = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUType.setStatus('current')
apLogManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6))
apLogCollectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogCollectionEnable.setStatus('current')
apLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogFrequency.setStatus('current')
apLogDestination = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("flash", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogDestination.setStatus('current')
apLogFTProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ftp", 0), ("scp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogFTProtocol.setStatus('current')
apLogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogServerIP.setStatus('current')
apLogUserId = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogUserId.setStatus('current')
apLogPassword = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogPassword.setStatus('current')
apLogDirectory = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogDirectory.setStatus('current')
apLogSelectedAPsTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 9), )
if mibBuilder.loadTexts: apLogSelectedAPsTable.setStatus('current')
apLogSelectedAPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 9, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apSerialNo"))
if mibBuilder.loadTexts: apLogSelectedAPsEntry.setStatus('current')
apSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: apSerialNo.setStatus('current')
select = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 9, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: select.setStatus('current')
apLogQuickSelectedOption = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("addAll", 1), ("addAllLocal", 2), ("addAllForeign", 3), ("removeAll", 4), ("removeAllLocal", 5), ("removeAllForeign", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogQuickSelectedOption.setStatus('current')
apLogFileUtility = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7))
apLogFileUtilityLimit = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLogFileUtilityLimit.setStatus('current')
apLogFileUtilityCurrent = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLogFileUtilityCurrent.setStatus('current')
apLogFileCopyTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5), )
if mibBuilder.loadTexts: apLogFileCopyTable.setStatus('current')
apLogFileCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apLogFileCopyIndex"))
if mibBuilder.loadTexts: apLogFileCopyEntry.setStatus('current')
apLogFileCopyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: apLogFileCopyIndex.setStatus('current')
apLogFileCopyDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("remoteServer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogFileCopyDestination.setStatus('current')
apLogFileCopyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ftp", 0), ("scp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogFileCopyProtocol.setStatus('current')
apLogFileCopyServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogFileCopyServerIP.setStatus('current')
apLogFileCopyUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogFileCopyUserID.setStatus('current')
apLogFileCopyPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogFileCopyPassword.setStatus('current')
apLogFileCopyServerDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogFileCopyServerDirectory.setStatus('current')
apLogFileCopyOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("start", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apLogFileCopyOperation.setStatus('current')
apLogFileCopyOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("pending", 2), ("running", 3), ("success", 4), ("failure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLogFileCopyOperationStatus.setStatus('current')
apLogFileCopyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 1, 7, 5, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apLogFileCopyRowStatus.setStatus('current')
dnsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 2))
primaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryDNS.setStatus('current')
secondaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryDNS.setStatus('current')
tertiaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tertiaryDNS.setStatus('current')
mgmtPortObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 3))
mgmtPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortIfIndex.setStatus('current')
mgmtPortHostname = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortHostname.setStatus('current')
mgmtPortDomain = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortDomain.setStatus('current')
physicalPortObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4))
physicalPortCount = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCount.setStatus('current')
physicalPortsTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2), )
if mibBuilder.loadTexts: physicalPortsTable.setStatus('deprecated')
physicalPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: physicalPortsEntry.setStatus('deprecated')
portMgmtTrafficEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMgmtTrafficEnable.setStatus('deprecated')
portDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDuplexMode.setStatus('deprecated')
portFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("router", 1), ("host", 2), ("thirdPartyAP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFunction.setStatus('deprecated')
portEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnabled.setStatus('deprecated')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('deprecated')
portIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIpAddress.setStatus('deprecated')
portMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMask.setStatus('deprecated')
portMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacAddress.setStatus('deprecated')
portVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVlanID.setStatus('deprecated')
portDHCPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDHCPEnable.setStatus('deprecated')
portDHCPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDHCPGateway.setStatus('deprecated')
portDHCPDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDHCPDomain.setStatus('deprecated')
portDHCPDefaultLease = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDHCPDefaultLease.setStatus('deprecated')
portDHCPMaxLease = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDHCPMaxLease.setStatus('deprecated')
portDHCPDnsServers = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDHCPDnsServers.setStatus('deprecated')
portDHCPWins = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDHCPWins.setStatus('deprecated')
physicalPortsInternalVlanID = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortsInternalVlanID.setStatus('current')
physicalFlash = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mounted", 1), ("unmounted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalFlash.setStatus('current')
phyDHCPRangeTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 5), )
if mibBuilder.loadTexts: phyDHCPRangeTable.setStatus('deprecated')
phyDHCPRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "phyDHCPRangeIndex"))
if mibBuilder.loadTexts: phyDHCPRangeEntry.setStatus('deprecated')
phyDHCPRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phyDHCPRangeIndex.setStatus('deprecated')
phyDHCPRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phyDHCPRangeStart.setStatus('deprecated')
phyDHCPRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phyDHCPRangeEnd.setStatus('deprecated')
phyDHCPRangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusion", 1), ("exclusion", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phyDHCPRangeType.setStatus('deprecated')
phyDHCPRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 5, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phyDHCPRangeStatus.setStatus('deprecated')
layerTwoPortTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 6), )
if mibBuilder.loadTexts: layerTwoPortTable.setStatus('current')
layerTwoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: layerTwoPortEntry.setStatus('current')
layerTwoPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layerTwoPortName.setStatus('current')
layerTwoPortMgmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layerTwoPortMgmtState.setStatus('current')
layerTwoPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layerTwoPortMacAddress.setStatus('current')
jumboFrames = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jumboFrames.setStatus('current')
vnManagerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 5))
vnRole = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("vnMgr", 2), ("vnAgent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnRole.setStatus('current')
vnIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnIfIndex.setStatus('current')
vnHeartbeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnHeartbeatInterval.setStatus('current')
vnLocalClients = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnLocalClients.setStatus('current')
vnForeignClients = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnForeignClients.setStatus('current')
vnTotalClients = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnTotalClients.setStatus('current')
ntpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 6))
ntpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpEnabled.setStatus('current')
ntpTimezone = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpTimezone.setStatus('current')
ntpTimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpTimeServer1.setStatus('current')
ntpTimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpTimeServer2.setStatus('current')
ntpTimeServer3 = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpTimeServer3.setStatus('current')
ntpServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 6, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerEnabled.setStatus('current')
controllerStats = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7))
tunnelsTxRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelsTxRxBytes.setStatus('current')
tunnelCount = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelCount.setStatus('current')
tunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 7), )
if mibBuilder.loadTexts: tunnelStatsTable.setStatus('current')
tunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 7, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "tunnelStartIP"), (0, "HIPATH-WIRELESS-HWC-MIB", "tunnelEndIP"))
if mibBuilder.loadTexts: tunnelStatsEntry.setStatus('current')
tunnelStartIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelStartIP.setStatus('current')
tunnelStartHWC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 7, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelStartHWC.setStatus('current')
tunnelEndIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEndIP.setStatus('current')
tunnelEndHWC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 7, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEndHWC.setStatus('current')
tunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelStatus.setStatus('current')
tunnelStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelStatsTxBytes.setStatus('current')
tunnelStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelStatsRxBytes.setStatus('current')
tunnelStatsTxRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelStatsTxRxBytes.setStatus('current')
clearAccessRejectMsg = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearAccessRejectMsg.setStatus('current')
accessRejectMsgTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 9), )
if mibBuilder.loadTexts: accessRejectMsgTable.setStatus('current')
accessRejectMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 9, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "armIndex"))
if mibBuilder.loadTexts: accessRejectMsgEntry.setStatus('current')
armIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: armIndex.setStatus('current')
armCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: armCount.setStatus('current')
armReplyMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 7, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: armReplyMessage.setStatus('current')
availability = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 8))
availabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standalone", 0), ("paired", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: availabilityStatus.setStatus('current')
pairIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairIPAddress.setStatus('current')
hwcAvailabilityRank = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", 0), ("secondary", 1), ("primary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwcAvailabilityRank.setStatus('current')
fastFailover = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastFailover.setStatus('current')
detectLinkFailure = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 30)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: detectLinkFailure.setStatus('current')
synchronizeSystemConfig = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 8, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synchronizeSystemConfig.setStatus('current')
synchronizeGuestPort = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 8, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synchronizeGuestPort.setStatus('current')
secureConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 9))
weakCipherEnable = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: weakCipherEnable.setStatus('current')
dashboard = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10))
licensingInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1))
licenseRegulatoryDomain = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseRegulatoryDomain.setStatus('current')
licenseType = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("temporary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseType.setStatus('current')
licenseDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseDaysRemaining.setStatus('current')
licenseAvailableAP = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAvailableAP.setStatus('current')
licenseInServiceRadarAP = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseInServiceRadarAP.setStatus('current')
licenseMode = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standAlone", 1), ("availabilityPaired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseMode.setStatus('current')
licenseLocalAP = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLocalAP.setStatus('current')
licenseForeignAP = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseForeignAP.setStatus('current')
licenseLocalRadarAP = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLocalRadarAP.setStatus('current')
licenseForeignRadarAP = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseForeignRadarAP.setStatus('current')
stationsByProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 2))
stationsByProtocolA = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationsByProtocolA.setStatus('current')
stationsByProtocolB = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationsByProtocolB.setStatus('current')
stationsByProtocolG = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationsByProtocolG.setStatus('current')
stationsByProtocolN24 = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationsByProtocolN24.setStatus('current')
stationsByProtocolN5 = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationsByProtocolN5.setStatus('current')
stationsByProtocolUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationsByProtocolUnavailable.setStatus('current')
stationsByProtocolError = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationsByProtocolError.setStatus('current')
stationsByProtocolAC = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationsByProtocolAC.setStatus('current')
apByChannelTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 3), )
if mibBuilder.loadTexts: apByChannelTable.setStatus('current')
apByChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 3, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apByChannelNumber"))
if mibBuilder.loadTexts: apByChannelEntry.setStatus('current')
apByChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: apByChannelNumber.setStatus('current')
apByChannelAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 2, 10, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apByChannelAPs.setStatus('current')
virtualNetworks = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3))
vnsConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1))
vnsCount = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsCount.setStatus('current')
vnsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2), )
if mibBuilder.loadTexts: vnsConfigTable.setStatus('current')
vnsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "vnsIfIndex"))
if mibBuilder.loadTexts: vnsConfigEntry.setStatus('current')
vnsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDescription.setStatus('current')
vnsAssignmentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ssid", 1), ("aaa", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsAssignmentMode.setStatus('obsolete')
vnsMUSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsMUSessionTimeout.setStatus('current')
vnsAllowMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsAllowMulticast.setStatus('current')
vnsSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsSSID.setStatus('current')
vnsDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDomain.setStatus('current')
vnsDNSServers = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDNSServers.setStatus('current')
vnsWINSServers = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWINSServers.setStatus('current')
vnsAuthModel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("captivePortal", 2), ("dot1X", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsAuthModel.setStatus('current')
vnsParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsParentIfIndex.setStatus('obsolete')
vnsMgmtTrafficEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsMgmtTrafficEnable.setStatus('current')
vnsUseDHCPRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("dhcpRelay", 1), ("localDhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsUseDHCPRelay.setStatus('current')
vns3rdPartyAP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vns3rdPartyAP.setStatus('current')
vnsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsStatus.setStatus('current')
vnsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("routed", 1), ("bridgeAtController", 2), ("bridgeAtAP", 3), ("wds", 4), ("thirdParty", 5))).clone('routed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsMode.setStatus('current')
vnsVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsVlanID.setStatus('current')
vnsInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsInterfaceName.setStatus('current')
vnsMgmIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsMgmIpAddress.setStatus('current')
vnsSuppressSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsSuppressSSID.setStatus('current')
vnsEnable11hSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsEnable11hSupport.setStatus('current')
vnsApplyPowerBackOff = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsApplyPowerBackOff.setStatus('current')
vnsProcessClientIEReq = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsProcessClientIEReq.setStatus('current')
vnsDLSSupportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDLSSupportEnable.setStatus('current')
vnsDLSAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDLSAddress.setStatus('current')
vnsDLSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 25), Integer32().clone(18443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDLSPort.setStatus('current')
vnsRateControlProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRateControlProfile.setStatus('current')
vnsSessionAvailabilityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsSessionAvailabilityEnable.setStatus('current')
vnsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsEnabled.setStatus('current')
vnsStrictSubnetAdherence = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsStrictSubnetAdherence.setStatus('current')
vnsSLPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsSLPEnabled.setStatus('current')
vnsConfigWLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 2, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsConfigWLANID.setStatus('current')
vnsDHCPRangeTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 3), )
if mibBuilder.loadTexts: vnsDHCPRangeTable.setStatus('current')
vnsDHCPRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "vnsDHCPRangeIndex"))
if mibBuilder.loadTexts: vnsDHCPRangeEntry.setStatus('current')
vnsDHCPRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDHCPRangeIndex.setStatus('current')
vnsDHCPRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDHCPRangeStart.setStatus('current')
vnsDHCPRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDHCPRangeEnd.setStatus('current')
vnsDHCPRangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusion", 1), ("exclusion", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDHCPRangeType.setStatus('current')
vnsDHCPRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsDHCPRangeStatus.setStatus('current')
vnsCaptivePortalTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4), )
if mibBuilder.loadTexts: vnsCaptivePortalTable.setStatus('current')
vnsCaptivePortalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vnsCaptivePortalEntry.setStatus('current')
cpURL = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpURL.setStatus('current')
cpLoginLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLoginLabel.setStatus('deprecated')
cpPasswordLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpPasswordLabel.setStatus('deprecated')
cpHeaderURL = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpHeaderURL.setStatus('deprecated')
cpFooterURL = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpFooterURL.setStatus('deprecated')
cpMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpMessage.setStatus('deprecated')
cpReplaceGatewayWithFQDN = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpReplaceGatewayWithFQDN.setStatus('current')
cpDefaultRedirectionURL = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpDefaultRedirectionURL.setStatus('current')
cpConnectionIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpConnectionIP.setStatus('current')
cpConnectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpConnectionPort.setStatus('current')
cpSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSharedSecret.setStatus('current')
cpLogOff = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLogOff.setStatus('current')
cpStatusCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpStatusCheck.setStatus('current')
cpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("internal", 2), ("external", 4), ("guestPortal", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpType.setStatus('current')
vnsRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5), )
if mibBuilder.loadTexts: vnsRadiusServerTable.setStatus('current')
vnsRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "vnsRadiusServerName"))
if mibBuilder.loadTexts: vnsRadiusServerEntry.setStatus('current')
vnsRadiusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRadiusServerName.setStatus('current')
vnsRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRadiusServerPort.setStatus('current')
vnsRadiusServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRadiusServerRetries.setStatus('current')
vnsRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRadiusServerTimeout.setStatus('current')
vnsRadiusServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRadiusServerSharedSecret.setStatus('current')
vnsRadiusServerNASIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRadiusServerNASIdentifier.setStatus('current')
vnsRadiusServerAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pap", 0), ("chap", 1), ("msChap", 2), ("msChapV2", 3), ("notApplicable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRadiusServerAuthType.setStatus('current')
vnsRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRadiusServerRowStatus.setStatus('current')
vnsRadiusServerNasAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 5, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRadiusServerNasAddress.setStatus('current')
vnsFilterIDTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 6), )
if mibBuilder.loadTexts: vnsFilterIDTable.setStatus('current')
vnsFilterIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "vnsFilterID"))
if mibBuilder.loadTexts: vnsFilterIDEntry.setStatus('current')
vnsFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 6, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterID.setStatus('current')
vnsFilterIDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 6, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterIDStatus.setStatus('current')
vnsFilterRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7), )
if mibBuilder.loadTexts: vnsFilterRuleTable.setStatus('current')
vnsFilterRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "vnsFilterID"), (0, "HIPATH-WIRELESS-HWC-MIB", "vnsFilterRuleOrder"))
if mibBuilder.loadTexts: vnsFilterRuleEntry.setStatus('current')
vnsFilterRuleOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65532))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterRuleOrder.setStatus('current')
vnsFilterRuleDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterRuleDirection.setStatus('current')
vnsFilterRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterRuleAction.setStatus('current')
vnsFilterRuleIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterRuleIPAddress.setStatus('current')
vnsFilterRulePortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterRulePortLow.setStatus('current')
vnsFilterRulePortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterRulePortHigh.setStatus('current')
vnsFilterRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("notApplicable", 1), ("tcp", 2), ("udp", 3), ("icmp", 4), ("ipsecESP", 5), ("ipsecAH", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterRuleProtocol.setStatus('current')
vnsFilterRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ip", 1), ("arp", 2), ("rarp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterRuleEtherType.setStatus('current')
vnsFilterRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 7, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsFilterRuleStatus.setStatus('current')
vnsPrivacyTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 8), )
if mibBuilder.loadTexts: vnsPrivacyTable.setStatus('current')
vnsPrivacyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vnsPrivacyEntry.setStatus('current')
vnsPrivWEPKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("wepstatic", 2), ("wpapsk", 3), ("dynamic", 4), ("wpa", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsPrivWEPKeyType.setStatus('current')
vnsPrivDynamicRekeyFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsPrivDynamicRekeyFrequency.setStatus('current')
vnsPrivWEPKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsPrivWEPKeyLength.setStatus('current')
vnsPrivWPA1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsPrivWPA1Enabled.setStatus('current')
vnsPrivUseSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 8, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsPrivUseSharedKey.setStatus('current')
vnsPrivWPASharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 8, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsPrivWPASharedKey.setStatus('current')
vnsPrivWPA2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 8, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsPrivWPA2Enabled.setStatus('current')
vnsWEPKeyTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 9), )
if mibBuilder.loadTexts: vnsWEPKeyTable.setStatus('current')
vnsWEPKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "vnsWEPKeyIndex"))
if mibBuilder.loadTexts: vnsWEPKeyEntry.setStatus('current')
vnsWEPKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWEPKeyIndex.setStatus('current')
vnsWEPKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 9, 1, 2), WEPKeytype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWEPKeyValue.setStatus('current')
vns3rdPartyAPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 10), )
if mibBuilder.loadTexts: vns3rdPartyAPTable.setStatus('current')
vns3rdPartyAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "apMacAddress"))
if mibBuilder.loadTexts: vns3rdPartyAPEntry.setStatus('current')
apMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 10, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMacAddress.setStatus('current')
apIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpAddress.setStatus('current')
vnsQoSTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11), )
if mibBuilder.loadTexts: vnsQoSTable.setStatus('current')
vnsQoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "vnsIfIndex"))
if mibBuilder.loadTexts: vnsQoSEntry.setStatus('current')
vnsQoSWirelessLegacyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWirelessLegacyFlag.setStatus('current')
vnsQoSWirelessWMMFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWirelessWMMFlag.setStatus('current')
vnsQoSWireless80211eFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWireless80211eFlag.setStatus('current')
vnsQoSWirelessTurboVoiceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWirelessTurboVoiceFlag.setStatus('current')
vnsQoSPriorityOverrideFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSPriorityOverrideFlag.setStatus('current')
vnsQoSPriorityOverrideSC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("background", 0), ("bestEffort", 1), ("bronze", 2), ("silver", 3), ("gold", 4), ("platinum", 5), ("premiumVoice", 6), ("networkControl", 7))).clone('background')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSPriorityOverrideSC.setStatus('current')
vnsQoSPriorityOverrideDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSPriorityOverrideDSCP.setStatus('current')
vnsQoSClassificationServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSClassificationServiceClass.setStatus('current')
vnsQoSWirelessEnableUAPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWirelessEnableUAPSD.setStatus('current')
vnsQoSWirelessUseAdmControlVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWirelessUseAdmControlVoice.setStatus('current')
vnsQoSWirelessUseAdmControlVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWirelessUseAdmControlVideo.setStatus('current')
vnsQoSWirelessULPolicerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNothing", 0), ("sendDELTStoClient", 1))).clone('doNothing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWirelessULPolicerAction.setStatus('current')
vnsQoSWirelessDLPolicerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("doNothing", 0), ("downgrade", 1), ("drop", 2))).clone('doNothing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWirelessDLPolicerAction.setStatus('current')
vnsQoSWirelessUseAdmControlBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWirelessUseAdmControlBestEffort.setStatus('current')
vnsQoSWirelessUseAdmControlBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsQoSWirelessUseAdmControlBackground.setStatus('current')
vnsWDSRFTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 12), )
if mibBuilder.loadTexts: vnsWDSRFTable.setStatus('obsolete')
vnsWDSRFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 12, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "vnsIfIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"))
if mibBuilder.loadTexts: vnsWDSRFEntry.setStatus('obsolete')
vnsWDSRFAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 12, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSRFAPName.setStatus('obsolete')
vnsWDSRFbgService = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("none", 1), ("child", 2), ("parent", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSRFbgService.setStatus('obsolete')
vnsWDSRFaService = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("none", 1), ("child", 2), ("parent", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSRFaService.setStatus('obsolete')
vnsWDSRFPreferredParent = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSRFPreferredParent.setStatus('obsolete')
vnsWDSRFBackupParent = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSRFBackupParent.setStatus('obsolete')
vnsWDSRFBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridged", 1), ("notBridged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSRFBridge.setStatus('obsolete')
vnsRateControlProfTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 13), )
if mibBuilder.loadTexts: vnsRateControlProfTable.setStatus('obsolete')
vnsRateControlProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 13, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "vnsRateControlProfInd"))
if mibBuilder.loadTexts: vnsRateControlProfEntry.setStatus('obsolete')
vnsRateControlProfInd = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 13, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRateControlProfInd.setStatus('obsolete')
vnsRateControlProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRateControlProfName.setStatus('obsolete')
vnsRateControlCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 13, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRateControlCIR.setStatus('obsolete')
vnsRateControlCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 13, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsRateControlCBS.setStatus('obsolete')
vnsAPFilterTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14), )
if mibBuilder.loadTexts: vnsAPFilterTable.setStatus('current')
vnsAPFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "vnsFilterID"), (0, "HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterRuleOrder"))
if mibBuilder.loadTexts: vnsAPFilterEntry.setStatus('current')
vnsAPFilterRuleOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vnsAPFilterRuleOrder.setStatus('current')
vnsAPFilterRuleDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vnsAPFilterRuleDirection.setStatus('current')
vnsAPFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vnsAPFilterAction.setStatus('current')
vnsAPFilterIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vnsAPFilterIPAddress.setStatus('current')
vnsAPFilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vnsAPFilterMask.setStatus('current')
vnsAPFilterPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vnsAPFilterPortLow.setStatus('current')
vnsAPFilterPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vnsAPFilterPortHigh.setStatus('current')
vnsAPFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vnsAPFilterProtocol.setStatus('current')
vnsAPFilterEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("arp", 2), ("rarp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vnsAPFilterEtherType.setStatus('current')
vnsAPFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 1, 14, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vnsAPFilterRowStatus.setStatus('current')
vnsStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2))
activeVNSSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeVNSSessionCount.setStatus('current')
vnsStatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2), )
if mibBuilder.loadTexts: vnsStatTable.setStatus('obsolete')
vnsStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "vnsIfIndex"))
if mibBuilder.loadTexts: vnsStatEntry.setStatus('obsolete')
vnsStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsStatName.setStatus('obsolete')
vnsStatTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatTxPkts.setStatus('obsolete')
vnsStatRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatRxPkts.setStatus('obsolete')
vnsStatTxOctects = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatTxOctects.setStatus('obsolete')
vnsStatRxOctects = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatRxOctects.setStatus('obsolete')
vnsStatMulticastTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatMulticastTxPkts.setStatus('obsolete')
vnsStatMulticastRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatMulticastRxPkts.setStatus('obsolete')
vnsStatBroadcastTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatBroadcastTxPkts.setStatus('obsolete')
vnsStatBroadcastRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatBroadcastRxPkts.setStatus('obsolete')
vnsStatRadiusTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatRadiusTotRequests.setStatus('obsolete')
vnsStatRadiusReqFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatRadiusReqFailed.setStatus('obsolete')
vnsStatRadiusReqRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsStatRadiusReqRejected.setStatus('obsolete')
vnsExceptionStatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 3), )
if mibBuilder.loadTexts: vnsExceptionStatTable.setStatus('obsolete')
vnsExceptionStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 3, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "vnsIfIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "vnsExceptionFiterName"))
if mibBuilder.loadTexts: vnsExceptionStatEntry.setStatus('obsolete')
vnsExceptionFiterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsExceptionFiterName.setStatus('obsolete')
vnsExceptionStatPktsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsExceptionStatPktsDenied.setStatus('obsolete')
vnsExceptionStatPktsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsExceptionStatPktsAllowed.setStatus('obsolete')
vnsWDSStatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4), )
if mibBuilder.loadTexts: vnsWDSStatTable.setStatus('obsolete')
vnsWDSStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "vnsIfIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"))
if mibBuilder.loadTexts: vnsWDSStatEntry.setStatus('obsolete')
vnsWDSStatAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatAPName.setStatus('obsolete')
vnsWDSStatAPRole = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", -1), ("none", 0), ("satellite", 1), ("root", 2), ("repeater", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatAPRole.setStatus('obsolete')
vnsWDSStatAPRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatAPRadio.setStatus('obsolete')
vnsWDSStatAPParent = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatAPParent.setStatus('obsolete')
vnsWDSStatSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatSSID.setStatus('obsolete')
vnsWDSStatRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 6), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatRxFrame.setStatus('obsolete')
vnsWDSStatTxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 7), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatTxFrame.setStatus('obsolete')
vnsWDSStatRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 8), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatRxError.setStatus('obsolete')
vnsWDSStatTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 9), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatTxError.setStatus('obsolete')
vnsWDSStatRxRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatRxRSSI.setStatus('obsolete')
vnsWDSStatRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 11), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatRxRate.setStatus('obsolete')
vnsWDSStatTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 2, 4, 1, 12), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsWDSStatTxRate.setStatus('obsolete')
vnsGlobalSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3))
wirelessQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 1))
maxVoiceBWforReassociation = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxVoiceBWforReassociation.setStatus('current')
maxVoiceBWforAssociation = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxVoiceBWforAssociation.setStatus('current')
maxVideoBWforReassociation = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxVideoBWforReassociation.setStatus('current')
maxVideoBWforAssociation = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxVideoBWforAssociation.setStatus('current')
maxBestEffortBWforReassociation = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxBestEffortBWforReassociation.setStatus('current')
maxBestEffortBWforAssociation = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxBestEffortBWforAssociation.setStatus('current')
maxBackgroundBWforReassociation = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxBackgroundBWforReassociation.setStatus('current')
maxBackgroundBWforAssociation = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxBackgroundBWforAssociation.setStatus('current')
radiusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 2))
externalRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 2, 2), )
if mibBuilder.loadTexts: externalRadiusServerTable.setStatus('obsolete')
externalRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 2, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "externalRadiusServerName"))
if mibBuilder.loadTexts: externalRadiusServerEntry.setStatus('obsolete')
externalRadiusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 2, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalRadiusServerName.setStatus('obsolete')
externalRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalRadiusServerAddress.setStatus('obsolete')
externalRadiusServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalRadiusServerSharedSecret.setStatus('obsolete')
externalRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 2, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalRadiusServerRowStatus.setStatus('obsolete')
dasInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 3))
dasPort = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535)).clone(3799)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dasPort.setStatus('current')
dasReplayInterval = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dasReplayInterval.setStatus('current')
advancedFilteringMode = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advancedFilteringMode.setStatus('current')
radiusStrictMode = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("strictModeDisabled", 0), ("strictModeEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusStrictMode.setStatus('current')
radiusFastFailoverEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 6))
radiusFastFailoverEventsTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 6, 1), )
if mibBuilder.loadTexts: radiusFastFailoverEventsTable.setStatus('current')
radiusFastFailoverEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 6, 1, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "radiusFFOEid"))
if mibBuilder.loadTexts: radiusFastFailoverEventsEntry.setStatus('current')
radiusFFOEid = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: radiusFFOEid.setStatus('current')
fastFailoverEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fastFailoverEventsDisabled", 0), ("fastFailoverEventsEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastFailoverEvents.setStatus('current')
dhcpRelayListeners = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 7))
dhcpRelayListenersMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 7, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayListenersMaxEntries.setStatus('current')
dhcpRelayListenersNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayListenersNumEntries.setStatus('current')
dhcpRelayListenersNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayListenersNextIndex.setStatus('current')
dhcpRelayListenersTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 7, 4), )
if mibBuilder.loadTexts: dhcpRelayListenersTable.setStatus('current')
dhcpRelayListenersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 7, 4, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "dhcpRelayListenersID"))
if mibBuilder.loadTexts: dhcpRelayListenersEntry.setStatus('current')
dhcpRelayListenersID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 7, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dhcpRelayListenersID.setStatus('current')
dhcpRelayListenersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 7, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayListenersRowStatus.setStatus('current')
destinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 7, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationName.setStatus('current')
destinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 7, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationIP.setStatus('current')
clientAutologinOption = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("hide", 0), ("redirect", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientAutologinOption.setStatus('current')
authenticationAdvanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 9))
includeServiceType = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: includeServiceType.setStatus('current')
clientMessageDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientMessageDelayTime.setStatus('current')
radiusAccounting = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccounting.setStatus('current')
serverUsageModel = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("roundRobin", 0), ("primaryBackup", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverUsageModel.setStatus('current')
radacctStartOnIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radacctStartOnIPAddr.setStatus('current')
clientServiceTypeLogin = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientServiceTypeLogin.setStatus('current')
applyMacAddressFormat = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applyMacAddressFormat.setStatus('current')
radiusExtnsSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 10))
radiusExtnsSettingTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 10, 1), )
if mibBuilder.loadTexts: radiusExtnsSettingTable.setStatus('current')
radiusExtnsSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 10, 1, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "radiusExtnsIndex"))
if mibBuilder.loadTexts: radiusExtnsSettingEntry.setStatus('current')
radiusExtnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: radiusExtnsIndex.setStatus('current')
pollingMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("authorizeAsActualUser", 0), ("useRFC5997StatusServerRequest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollingMechanism.setStatus('current')
serverPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPollingInterval.setStatus('current')
netflowAndMirrorN = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 11))
netflowDestinationIP = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 11, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netflowDestinationIP.setStatus('current')
netflowInterval = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 360)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netflowInterval.setStatus('current')
mirrorFirstN = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 11, 3), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorFirstN.setStatus('current')
mirrorL2Ports = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 11, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorL2Ports.setStatus('current')
radiusMacAddressFormatOption = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12))).clone(namedValues=NamedValues(("option1", 1), ("option2", 2), ("option3", 3), ("option4", 4), ("option5", 5), ("option6", 6), ("option7", 7), ("option8", 9), ("option10", 10), ("option11", 11), ("option12", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMacAddressFormatOption.setStatus('current')
wlan = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4))
wlanMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMaxEntries.setStatus('current')
wlanNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanNumEntries.setStatus('current')
wlanTableNextAvailableIndex = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanTableNextAvailableIndex.setStatus('current')
wlanTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4), )
if mibBuilder.loadTexts: wlanTable.setStatus('current')
wlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "wlanID"))
if mibBuilder.loadTexts: wlanEntry.setStatus('current')
wlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanID.setStatus('current')
wlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRowStatus.setStatus('current')
wlanServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6))).clone(namedValues=NamedValues(("standard", 0), ("wds", 3), ("thirdParty", 4), ("remote", 5), ("mesh", 6))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanServiceType.setStatus('current')
wlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanName.setStatus('current')
wlanSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSSID.setStatus('current')
wlanSynchronize = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 6), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSynchronize.setStatus('current')
wlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 7), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanEnabled.setStatus('current')
wlanDefaultTopologyID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanDefaultTopologyID.setStatus('current')
wlanSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 9), Unsigned32()).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSessionTimeout.setStatus('current')
wlanIdleTimeoutPreAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 10), Unsigned32().clone(5)).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIdleTimeoutPreAuth.setStatus('current')
wlanIdleSessionPostAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 11), Unsigned32().clone(30)).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIdleSessionPostAuth.setStatus('current')
wlanSupressSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 12), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSupressSSID.setStatus('current')
wlanDot11hSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 13), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanDot11hSupport.setStatus('current')
wlanDot11hClientPowerReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 14), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanDot11hClientPowerReduction.setStatus('current')
wlanProcessClientIE = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 15), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanProcessClientIE.setStatus('current')
wlanEngerySaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 16), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanEngerySaveMode.setStatus('current')
wlanBlockMuToMuTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 17), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanBlockMuToMuTraffic.setStatus('current')
wlanRemoteable = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 18), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRemoteable.setStatus('current')
wlanVNSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanVNSID.setStatus('current')
wlanRadioManagement11k = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadioManagement11k.setStatus('current')
wlanBeaconReport = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanBeaconReport.setStatus('current')
wlanQuietIE = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanQuietIE.setStatus('current')
wlanMirrorN = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("prohibited", 0), ("bothDirection", 1), ("rxDirectionOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMirrorN.setStatus('current')
wlanNetFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanNetFlow.setStatus('current')
wlanAppVisibility = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAppVisibility.setStatus('current')
wlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 5), )
if mibBuilder.loadTexts: wlanStatsTable.setStatus('current')
wlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 5, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "wlanStatsID"))
if mibBuilder.loadTexts: wlanStatsEntry.setStatus('current')
wlanStatsID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsID.setStatus('current')
wlanStatsAssociatedClients = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAssociatedClients.setStatus('current')
wlanStatsRadiusTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRadiusTotRequests.setStatus('current')
wlanStatsRadiusReqFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRadiusReqFailed.setStatus('current')
wlanStatsRadiusReqRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRadiusReqRejected.setStatus('current')
wlanPrivTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6), )
if mibBuilder.loadTexts: wlanPrivTable.setStatus('current')
wlanPrivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "wlanID"))
if mibBuilder.loadTexts: wlanPrivEntry.setStatus('current')
wlanPrivPrivacyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("staticWEP", 1), ("dynamicWEP", 2), ("wpa", 3), ("wpaPSK", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivPrivacyType.setStatus('current')
wlanPrivWEPKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivWEPKeyIndex.setStatus('current')
wlanPrivWEPKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sixtyFourBits", 1), ("oneHundred28Bits", 2), ("oneHundred52Bits", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivWEPKeyLength.setStatus('current')
wlanPrivWEPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivWEPKey.setStatus('current')
wlanPrivWPAv1EncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("tkipOnly", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivWPAv1EncryptionType.setStatus('current')
wlanPrivWPAv2EncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("auto", 2), ("aesOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivWPAv2EncryptionType.setStatus('current')
wlanPrivKeyManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("opportunisticKey", 1), ("preAuthentication", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivKeyManagement.setStatus('current')
wlanPrivBroadcastRekeying = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivBroadcastRekeying.setStatus('current')
wlanPrivRekeyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400)).clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivRekeyInterval.setStatus('current')
wlanPrivGroupKPSR = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivGroupKPSR.setStatus('current')
wlanPrivWPAPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivWPAPSK.setStatus('current')
wlanPrivWPAversion = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("wpaNone", 0), ("wpaV1", 1), ("wpaV2", 2), ("wpaV1andV2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivWPAversion.setStatus('current')
wlanPrivfastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivfastTransition.setStatus('current')
wlanPrivManagementFrameProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("require", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPrivManagementFrameProtection.setStatus('current')
wlanAuthTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7), )
if mibBuilder.loadTexts: wlanAuthTable.setStatus('current')
wlanAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "wlanID"))
if mibBuilder.loadTexts: wlanAuthEntry.setStatus('current')
wlanAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("internalCP", 2), ("dot1x", 3), ("externalCP", 4), ("easyGuestCP", 5), ("guestSplash", 6), ("firewallFriendlyExCP", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthType.setStatus('current')
wlanAuthMacBasedAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthMacBasedAuth.setStatus('current')
wlanAuthMACBasedAuthOnRoam = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthMACBasedAuthOnRoam.setStatus('current')
wlanAuthAutoAuthAuthorizedUser = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthAutoAuthAuthorizedUser.setStatus('current')
wlanAuthAllowUnauthorizedUser = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthAllowUnauthorizedUser.setStatus('current')
wlanAuthRadiusIncludeAP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusIncludeAP.setStatus('current')
wlanAuthRadiusIncludeVNS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusIncludeVNS.setStatus('current')
wlanAuthRadiusIncludeSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusIncludeSSID.setStatus('current')
wlanAuthRadiusIncludePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusIncludePolicy.setStatus('current')
wlanAuthRadiusIncludeTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusIncludeTopology.setStatus('current')
wlanAuthRadiusIncludeIngressRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusIncludeIngressRC.setStatus('current')
wlanAuthRadiusIncludeEgressRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusIncludeEgressRC.setStatus('current')
wlanAuthCollectAcctInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthCollectAcctInformation.setStatus('current')
wlanAuthReplaceCalledStationIDWithZone = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthReplaceCalledStationIDWithZone.setStatus('current')
wlanAuthRadiusAcctAfterMacBaseAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusAcctAfterMacBaseAuthorization.setStatus('current')
wlanAuthRadiusTimeoutRole = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusTimeoutRole.setStatus('current')
wlanAuthRadiusOperatorNameSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 48, 49, 50, 51))).clone(namedValues=NamedValues(("disabled", -1), ("tadig", 48), ("realm", 49), ("e212", 50), ("icc", 51)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusOperatorNameSpace.setStatus('current')
wlanAuthRadiusOperatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthRadiusOperatorName.setStatus('current')
wlanAuthMACBasedAuthReAuthOnAreaRoam = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 7, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuthMACBasedAuthReAuthOnAreaRoam.setStatus('current')
wlanRadiusTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8), )
if mibBuilder.loadTexts: wlanRadiusTable.setStatus('current')
wlanRadiusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "wlanID"), (0, "HIPATH-WIRELESS-HWC-MIB", "wlanRadiusIndex"))
if mibBuilder.loadTexts: wlanRadiusEntry.setStatus('current')
wlanRadiusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wlanRadiusIndex.setStatus('current')
wlanRadiusName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusName.setStatus('current')
wlanRadiusUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auth", 1), ("mac", 2), ("acc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusUsage.setStatus('current')
wlanRadiusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusPriority.setStatus('current')
wlanRadiusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 5), Unsigned32().clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusPort.setStatus('current')
wlanRadiusRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusRetries.setStatus('current')
wlanRadiusTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 360)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusTimeout.setStatus('current')
wlanRadiusNASUseVnsIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusNASUseVnsIP.setStatus('current')
wlanRadiusNASIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusNASIP.setStatus('current')
wlanRadiusNASIDUseVNSName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusNASIDUseVNSName.setStatus('current')
wlanRadiusNASID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusNASID.setStatus('current')
wlanRadiusAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pap", 0), ("chap", 1), ("mschap", 2), ("mschap2", 3))).clone('pap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusAuthType.setStatus('current')
wlanCPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9), )
if mibBuilder.loadTexts: wlanCPTable.setStatus('current')
wlanCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "wlanID"))
if mibBuilder.loadTexts: wlanCPEntry.setStatus('current')
wlanCPAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("internalCP", 2), ("dot1x", 3), ("externalCP", 4), ("easyGuestCP", 5), ("guestSplash", 6), ("firewallFriendlyExCP", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPAuthType.setStatus('current')
wlanCP802HttpRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCP802HttpRedirect.setStatus('current')
wlanCPExtConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPExtConnection.setStatus('current')
wlanCPExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32768, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPExtPort.setStatus('current')
wlanCPExtEnableHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPExtEnableHttps.setStatus('current')
wlanCPExtEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("legacy", 1), ("aes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPExtEncryption.setStatus('current')
wlanCPExtSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPExtSharedSecret.setStatus('current')
wlanCPExtTosOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPExtTosOverride.setStatus('current')
wlanCPExtTosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPExtTosValue.setStatus('deprecated')
wlanCPExtAddIPtoURL = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPExtAddIPtoURL.setStatus('current')
wlanCPIntLogoffButton = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPIntLogoffButton.setStatus('current')
wlanCPIntStatusCheckButton = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPIntStatusCheckButton.setStatus('current')
wlanCPReplaceIPwithFQDN = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPReplaceIPwithFQDN.setStatus('current')
wlanCPSendLoginTo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("originalDestination", 0), ("cpSessionPage", 1), ("customURL", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPSendLoginTo.setStatus('current')
wlanCPRedirectURL = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPRedirectURL.setStatus('current')
wlanCPGuestAccLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 16), Unsigned32()).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPGuestAccLifetime.setStatus('current')
wlanCPGuestAllowedLifetimeAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPGuestAllowedLifetimeAcct.setStatus('current')
wlanCPGuestSessionLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 18), Unsigned32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPGuestSessionLifetime.setStatus('current')
wlanCPGuestIDPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPGuestIDPrefix.setStatus('current')
wlanCPGuestMinPassLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPGuestMinPassLength.setStatus('current')
wlanCPGuestMaxConcurrentSession = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPGuestMaxConcurrentSession.setStatus('current')
wlanCPUseHTTPSforConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPUseHTTPSforConnection.setStatus('current')
wlanCPIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPIdentity.setStatus('current')
wlanCPCustomSpecificURL = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPCustomSpecificURL.setStatus('current')
wlanCPSelectionOption = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 9, 1, 25), Bits().clone(namedValues=NamedValues(("addEWCPortAndIP", 0), ("apNameAndSerial", 1), ("associatedBSSID", 2), ("vnsName", 3), ("userMacAddress", 4), ("currentlyAssignedRole", 5), ("containmentVLAN", 6), ("timeStamp", 7), ("signature", 8), ("ssid", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanCPSelectionOption.setStatus('current')
wlanUnsecuredWlanCounts = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanUnsecuredWlanCounts.setStatus('current')
wlanSecurityReportTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 11), )
if mibBuilder.loadTexts: wlanSecurityReportTable.setStatus('current')
wlanSecurityReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 11, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "wlanID"))
if mibBuilder.loadTexts: wlanSecurityReportEntry.setStatus('current')
wlanSecurityReportFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsecureSetting", 1), ("secureSetting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSecurityReportFlag.setStatus('current')
wlanSecurityReportUnsecureType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 11, 1, 2), Bits().clone(namedValues=NamedValues(("open", 0), ("wep", 1), ("tkip", 2), ("defaultSsid", 3), ("hotspotSsid", 4), ("rainbowSsid", 5), ("dictionaryWordKey", 6), ("dictionaryWordSubstring", 7), ("passwordTooShort", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSecurityReportUnsecureType.setStatus('current')
wlanSecurityReportNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSecurityReportNotes.setStatus('current')
wlanRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12), )
if mibBuilder.loadTexts: wlanRadiusServerTable.setStatus('current')
wlanRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "wlanID"), (0, "HIPATH-WIRELESS-HWC-MIB", "radiusId"))
if mibBuilder.loadTexts: wlanRadiusServerEntry.setStatus('current')
radiusId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: radiusId.setStatus('current')
wlanRadiusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanRadiusServerName.setStatus('current')
wlanRadiusServerUse = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notUse", 0), ("use", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerUse.setStatus('current')
wlanRadiusServerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 4), Bits().clone(namedValues=NamedValues(("auth", 0), ("mac", 1), ("acct", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerUsage.setStatus('current')
wlanRadiusServerAuthUseVNSIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerAuthUseVNSIPAddr.setStatus('current')
wlanRadiusServerAuthNASIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerAuthNASIP.setStatus('current')
wlanRadiusServerAuthUseVNSName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerAuthUseVNSName.setStatus('current')
wlanRadiusServerAuthNASId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerAuthNASId.setStatus('current')
wlanRadiusServerAuthAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pap", 0), ("chap", 1), ("mschap", 2), ("mschap2", 3), ("eap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerAuthAuthType.setStatus('current')
wlanRadiusServerAcctUseVNSIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerAcctUseVNSIPAddr.setStatus('current')
wlanRadiusServerAcctNASIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerAcctNASIP.setStatus('current')
wlanRadiusServerAcctUseVNSName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerAcctUseVNSName.setStatus('current')
wlanRadiusServerAcctNASId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerAcctNASId.setStatus('current')
wlanRadiusServerAcctSIAR = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerAcctSIAR.setStatus('current')
wlanRadiusServerMacUseVNSIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerMacUseVNSIPAddr.setStatus('current')
wlanRadiusServerMacNASIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerMacNASIP.setStatus('current')
wlanRadiusServerMacUseVNSName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerMacUseVNSName.setStatus('current')
wlanRadiusServerMacNASId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerMacNASId.setStatus('current')
wlanRadiusServerMacAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pap", 0), ("chap", 1), ("mschap", 2), ("mschap2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerMacAuthType.setStatus('current')
wlanRadiusServerMacPW = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 3, 4, 12, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRadiusServerMacPW.setStatus('current')
topology = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4))
topologyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1))
topologyTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1), )
if mibBuilder.loadTexts: topologyTable.setStatus('current')
topologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "topologyID"))
if mibBuilder.loadTexts: topologyEntry.setStatus('current')
topologyID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: topologyID.setStatus('current')
topologyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyName.setStatus('current')
topologyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("undefined", -1), ("routed", 0), ("bridgedAtAP", 1), ("bridgedAtAC", 2), ("thirdPartyAP", 4), ("physical", 5), ("management", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyMode.setStatus('current')
topologyTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyTagged.setStatus('current')
topologyVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4095), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyVlanID.setStatus('current')
topologyEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyEgressPort.setStatus('current')
topologyLayer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyLayer3.setStatus('current')
topologyIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyIPAddress.setStatus('current')
topologyIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyIPMask.setStatus('current')
topologyMTUsize = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 10), Unsigned32().clone(1436)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyMTUsize.setStatus('current')
topologyGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyGateway.setStatus('current')
topologyDHCPUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("useRelay", 1), ("localServer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyDHCPUsage.setStatus('current')
topologyAPRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyAPRegistration.setStatus('current')
topologyManagementTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyManagementTraffic.setStatus('current')
topologySynchronize = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologySynchronize.setStatus('current')
topologySyncGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologySyncGateway.setStatus('current')
topologySyncMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologySyncMask.setStatus('current')
topologySyncIPStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologySyncIPStart.setStatus('current')
topologySyncIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologySyncIPEnd.setStatus('current')
topologyStaticIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyStaticIPv6Address.setStatus('current')
topologyLinkLocalIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyLinkLocalIPv6Address.setStatus('current')
topologyPreFixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyPreFixLength.setStatus('current')
topologyIPv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyIPv6Gateway.setStatus('current')
topologyDynamicEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyDynamicEgress.setStatus('current')
topologyIsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyIsGroup.setStatus('current')
topologyGroupMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyGroupMembers.setStatus('current')
topologyMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 1, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyMemberId.setStatus('current')
topologyStat = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2))
topoStatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1), )
if mibBuilder.loadTexts: topoStatTable.setStatus('current')
topoStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "topologyID"))
if mibBuilder.loadTexts: topoStatEntry.setStatus('current')
topoStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatName.setStatus('current')
topoStatTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatTxPkts.setStatus('current')
topoStatRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatRxPkts.setStatus('current')
topoStatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatTxOctets.setStatus('current')
topoStatRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatRxOctets.setStatus('current')
topoStatMulticastTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatMulticastTxPkts.setStatus('current')
topoStatMulticastRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatMulticastRxPkts.setStatus('current')
topoStatBroadcastTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatBroadcastTxPkts.setStatus('current')
topoStatBroadcastRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatBroadcastRxPkts.setStatus('current')
topoStatFrameChkSeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatFrameChkSeqErrors.setStatus('current')
topoStatFrameTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoStatFrameTooLongErrors.setStatus('current')
topoExceptionStatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 2), )
if mibBuilder.loadTexts: topoExceptionStatTable.setStatus('current')
topoExceptionStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "topologyID"))
if mibBuilder.loadTexts: topoExceptionStatEntry.setStatus('current')
topoExceptionFiterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoExceptionFiterName.setStatus('current')
topoExceptionStatPktsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoExceptionStatPktsDenied.setStatus('current')
topoExceptionStatPktsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoExceptionStatPktsAllowed.setStatus('current')
topoWireStatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3), )
if mibBuilder.loadTexts: topoWireStatTable.setStatus('deprecated')
topoWireStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "topologyID"))
if mibBuilder.loadTexts: topoWireStatEntry.setStatus('deprecated')
topoWireStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatName.setStatus('deprecated')
topoWireStatTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatTxPkts.setStatus('deprecated')
topoWireStatRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatRxPkts.setStatus('deprecated')
topoWireStatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatTxOctets.setStatus('deprecated')
topoWireStatRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatRxOctets.setStatus('deprecated')
topoWireStatMulticastTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatMulticastTxPkts.setStatus('deprecated')
topoWireStatMulticastRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatMulticastRxPkts.setStatus('deprecated')
topoWireStatBroadcastTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatBroadcastTxPkts.setStatus('deprecated')
topoWireStatBroadcastRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatBroadcastRxPkts.setStatus('deprecated')
topoWireStatFrameChkSeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatFrameChkSeqErrors.setStatus('deprecated')
topoWireStatFrameTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoWireStatFrameTooLongErrors.setStatus('deprecated')
topoCompleteStatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4), )
if mibBuilder.loadTexts: topoCompleteStatTable.setStatus('current')
topoCompleteStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "topologyID"))
if mibBuilder.loadTexts: topoCompleteStatEntry.setStatus('current')
topoCompleteStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatName.setStatus('current')
topoCompleteStatTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatTxPkts.setStatus('current')
topoCompleteStatRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatRxPkts.setStatus('current')
topoCompleteStatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatTxOctets.setStatus('current')
topoCompleteStatRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatRxOctets.setStatus('current')
topoCompleteStatMulticastTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatMulticastTxPkts.setStatus('current')
topoCompleteStatMulticastRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatMulticastRxPkts.setStatus('current')
topoCompleteStatBroadcastTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatBroadcastTxPkts.setStatus('current')
topoCompleteStatBroadcastRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatBroadcastRxPkts.setStatus('current')
topoCompleteStatFrameChkSeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatFrameChkSeqErrors.setStatus('current')
topoCompleteStatFrameTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 4, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoCompleteStatFrameTooLongErrors.setStatus('current')
accessPoints = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5))
apConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1))
apCount = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCount.setStatus('current')
apTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2), )
if mibBuilder.loadTexts: apTable.setStatus('current')
apEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"))
if mibBuilder.loadTexts: apEntry.setStatus('current')
apIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIndex.setStatus('current')
apName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apName.setStatus('current')
apDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDesc.setStatus('current')
apSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSerialNumber.setStatus('current')
apPortifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 5), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPortifIndex.setStatus('current')
apWiredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 6), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWiredIfIndex.setStatus('current')
apSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSoftwareVersion.setStatus('current')
apSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSpecific.setStatus('current')
apBroadcastDisassociate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBroadcastDisassociate.setStatus('current')
apRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRowStatus.setStatus('current')
apVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 11), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVlanID.setStatus('current')
apIpAssignmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpAssignmentType.setStatus('current')
apIfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIfMAC.setStatus('current')
apIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIPAddress.setStatus('current')
apHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHwVersion.setStatus('current')
apSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSwVersion.setStatus('current')
apEnvironment = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEnvironment.setStatus('current')
apHome = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("foreign", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHome.setStatus('current')
apRole = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accessPoint", 1), ("sensor", 2), ("guardian", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRole.setStatus('current')
apState = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apState.setStatus('current')
apStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("approved", 1), ("pending", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apStatus.setStatus('current')
apPollTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 24), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(3, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPollTimeout.setStatus('current')
apPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 25), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPollInterval.setStatus('current')
apTelnetAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTelnetAccess.setStatus('current')
apMaintainClientSession = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMaintainClientSession.setStatus('current')
apRestartServiceContAbsent = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRestartServiceContAbsent.setStatus('current')
apHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHostname.setStatus('current')
apLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLocation.setStatus('current')
apStaticMTUsize = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(600, 1500)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apStaticMTUsize.setStatus('current')
apSiteID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 32), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSiteID.setStatus('current')
apZone = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apZone.setStatus('current')
apLLDP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLLDP.setStatus('current')
apSSHAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSSHAccess.setStatus('deprecated')
apLEDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("wdsSignalStrength", 1), ("identify", 2), ("normal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLEDMode.setStatus('current')
apLocationbasedService = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLocationbasedService.setStatus('current')
apSecureTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecureTunnel.setStatus('current')
apEncryptCntTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEncryptCntTraffic.setStatus('current')
apMICErrorWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMICErrorWarning.setStatus('current')
apSecureDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("encryptControlTraffic", 1), ("encryptControlDataTraffic", 2), ("debugMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecureDataTunnelType.setStatus('current')
apIPMulticastAssembly = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 42), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIPMulticastAssembly.setStatus('current')
apSSHConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSSHConnection.setStatus('current')
apRadioTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 3), )
if mibBuilder.loadTexts: apRadioTable.setStatus('current')
apRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 3, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apRadioEntry.setStatus('current')
apRadioFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freq50GHz", 1), ("freq24GHz", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioFrequency.setStatus('current')
apRadioNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNumber.setStatus('current')
apRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("off", 0), ("dot11a", 1), ("dot11an", 2), ("dot11anStrict", 3), ("dot11b", 4), ("dot11g", 5), ("dot11bg", 6), ("dot11gn", 7), ("dot11bgn", 8), ("dot11gnStrict", 9), ("dot11j", 10), ("dot11anc", 11), ("dot11cStrict", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioType.setStatus('deprecated')
apRadioProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 3, 1, 4), Bits().clone(namedValues=NamedValues(("dot1124b", 0), ("dot1124g", 1), ("dot1124n", 2), ("dot1150a", 3), ("dot1150ac", 4), ("dot1150j", 5), ("dot1150n", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioProtocol.setStatus('current')
radioVNSTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 4), )
if mibBuilder.loadTexts: radioVNSTable.setStatus('current')
radioVNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 4, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "radioIfIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "vnsIfIndex"))
if mibBuilder.loadTexts: radioVNSEntry.setStatus('current')
radioIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 4, 1, 1), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioIfIndex.setStatus('current')
vnsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 4, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vnsIfIndex.setStatus('current')
radioVNSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 4, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioVNSRowStatus.setStatus('current')
apFastFailoverEnable = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFastFailoverEnable.setStatus('current')
apLinkTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLinkTimeout.setStatus('current')
apAntennaTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 7), )
if mibBuilder.loadTexts: apAntennaTable.setStatus('current')
apAntennaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 7, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "apAntennaIndex"))
if mibBuilder.loadTexts: apAntennaEntry.setStatus('current')
apAntennaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: apAntennaIndex.setStatus('current')
apAntennanName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAntennanName.setStatus('current')
apAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAntennaType.setStatus('current')
apRadioAntennaTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 8), )
if mibBuilder.loadTexts: apRadioAntennaTable.setStatus('current')
apRadioAntennaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 8, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apRadioAntennaEntry.setStatus('current')
apRadioAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioAntennaType.setStatus('current')
apRadioAntennaModel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioAntennaModel.setStatus('current')
apRadioAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 1, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioAttenuation.setStatus('current')
apStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2))
apActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apActiveCount.setStatus('current')
apStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2), )
if mibBuilder.loadTexts: apStatsTable.setStatus('current')
apStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"))
if mibBuilder.loadTexts: apStatsEntry.setStatus('current')
apInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInUcastPkts.setStatus('current')
apInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInNUcastPkts.setStatus('current')
apInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInOctets.setStatus('current')
apInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInErrors.setStatus('current')
apInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInDiscards.setStatus('current')
apOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOutUcastPkts.setStatus('current')
apOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOutNUcastPkts.setStatus('current')
apOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOutOctets.setStatus('current')
apOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOutErrors.setStatus('current')
apOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOutDiscards.setStatus('current')
apUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUpTime.setStatus('current')
apCredentialType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("tls", 1), ("peap", 2), ("all", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCredentialType.setStatus('current')
apCertificateExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCertificateExpiry.setStatus('current')
apStatsMuCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apStatsMuCounts.setStatus('current')
apStatsSessionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apStatsSessionDuration.setStatus('current')
apTotalStationsA = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsA.setStatus('current')
apTotalStationsB = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsB.setStatus('current')
apTotalStationsG = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsG.setStatus('current')
apTotalStationsN50 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsN50.setStatus('current')
apTotalStationsN24 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsN24.setStatus('current')
apInvalidPolicyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInvalidPolicyCount.setStatus('current')
apInterfaceMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInterfaceMTU.setStatus('current')
apEffectiveTunnelMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEffectiveTunnelMTU.setStatus('current')
apTotalStationsAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsAC.setStatus('current')
apTotalStationsAInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsAInOctets.setStatus('current')
apTotalStationsAOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsAOutOctets.setStatus('current')
apTotalStationsBInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsBInOctets.setStatus('current')
apTotalStationsBOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsBOutOctets.setStatus('current')
apTotalStationsGInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsGInOctets.setStatus('current')
apTotalStationsGOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsGOutOctets.setStatus('current')
apTotalStationsN50InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsN50InOctets.setStatus('current')
apTotalStationsN50OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsN50OutOctets.setStatus('current')
apTotalStationsN24InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsN24InOctets.setStatus('current')
apTotalStationsN24OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsN24OutOctets.setStatus('current')
apTotalStationsACInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsACInOctets.setStatus('current')
apTotalStationsACOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalStationsACOutOctets.setStatus('current')
apRegistrationRequests = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRegistrationRequests.setStatus('current')
apRadioStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 4), )
if mibBuilder.loadTexts: apRadioStatusTable.setStatus('current')
apRadioStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apRadioStatusEntry.setStatus('current')
apRadioStatusChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioStatusChannel.setStatus('current')
apRadioStatusChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("width20Mhz", 1), ("width40Mhz", 2), ("width80Mhz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioStatusChannelWidth.setStatus('current')
apRadioStatusChannelOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioStatusChannelOffset.setStatus('current')
apPerformanceReportByRadioTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5), )
if mibBuilder.loadTexts: apPerformanceReportByRadioTable.setStatus('current')
apPerformanceReportByRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "apRadioIndex"))
if mibBuilder.loadTexts: apPerformanceReportByRadioEntry.setStatus('current')
apRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: apRadioIndex.setStatus('current')
apPerfRadioPrevPeakChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioPrevPeakChannelUtilization.setStatus('current')
apPerfRadioCurPeakChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioCurPeakChannelUtilization.setStatus('current')
apPerfRadioAverageChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 4), HundredthOfGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioAverageChannelUtilization.setStatus('current')
apPerfRadioCurrentChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioCurrentChannelUtilization.setStatus('current')
apPerfRadioPrevPeakRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioPrevPeakRSS.setStatus('current')
apPerfRadioCurPeakRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioCurPeakRSS.setStatus('current')
apPerfRadioAverageRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 8), HundredthOfInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioAverageRSS.setStatus('current')
apPerfRadioCurrentRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioCurrentRSS.setStatus('current')
apPerfRadioPrevPeakSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioPrevPeakSNR.setStatus('current')
apPerfRadioCurPeakSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioCurPeakSNR.setStatus('current')
apPerfRadioAverageSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 12), HundredthOfInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioAverageSNR.setStatus('current')
apPerfRadioCurrentSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioCurrentSNR.setStatus('current')
apPerfRadioPrevPeakPktRetx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 14), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioPrevPeakPktRetx.setStatus('current')
apPerfRadioCurPeakPktRetx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 15), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioCurPeakPktRetx.setStatus('current')
apPerfRadioAveragePktRetx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 16), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioAveragePktRetx.setStatus('current')
apPerfRadioCurrentPktRetx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 17), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioCurrentPktRetx.setStatus('current')
apPerfRadioPktRetx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfRadioPktRetx.setStatus('current')
apAccessibilityTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6), )
if mibBuilder.loadTexts: apAccessibilityTable.setStatus('current')
apAccessibilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "apRadioIndex"))
if mibBuilder.loadTexts: apAccessibilityEntry.setStatus('current')
apAccPrevPeakAssocReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 1), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccPrevPeakAssocReqRx.setStatus('current')
apAccCurPeakAssocReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 2), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccCurPeakAssocReqRx.setStatus('current')
apAccAverageAssocReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 3), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccAverageAssocReqRx.setStatus('current')
apAccCurrentAssocReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 4), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccCurrentAssocReqRx.setStatus('current')
apAccAssocReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccAssocReqRx.setStatus('current')
apAccPrevPeakReassocReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 6), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccPrevPeakReassocReqRx.setStatus('current')
apAccCurPeakReassocReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 7), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccCurPeakReassocReqRx.setStatus('current')
apAccAverageReassocReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 8), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccAverageReassocReqRx.setStatus('current')
apAccCurrentReassocReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 9), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccCurrentReassocReqRx.setStatus('current')
apAccReassocReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccReassocReqRx.setStatus('current')
apAccPrevPeakDisassocDeauthReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 11), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccPrevPeakDisassocDeauthReqTx.setStatus('current')
apAccCurPeakDisassocDeauthReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 12), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccCurPeakDisassocDeauthReqTx.setStatus('current')
apAccAverageDisassocDeauthReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 13), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccAverageDisassocDeauthReqTx.setStatus('current')
apAccCurrentDisassocDeauthReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 14), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccCurrentDisassocDeauthReqTx.setStatus('current')
apAccDisassocDeauthReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccDisassocDeauthReqTx.setStatus('current')
apAccPrevPeakDisassocDeauthReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 16), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccPrevPeakDisassocDeauthReqRx.setStatus('current')
apAccCurPeakDisassocDeauthReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 17), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccCurPeakDisassocDeauthReqRx.setStatus('current')
apAccAverageDisassocDeauthReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 18), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccAverageDisassocDeauthReqRx.setStatus('current')
apAccCurrentDisassocDeauthReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 19), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccCurrentDisassocDeauthReqRx.setStatus('current')
apAccDisassocDeauthReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 6, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccDisassocDeauthReqRx.setStatus('current')
apPerformanceReportbyRadioAndWlanTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7), )
if mibBuilder.loadTexts: apPerformanceReportbyRadioAndWlanTable.setStatus('current')
apPerformanceReportbyRadioAndWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "apRadioIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "wlanID"))
if mibBuilder.loadTexts: apPerformanceReportbyRadioAndWlanEntry.setStatus('current')
apPerfWlanPrevPeakClientsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanPrevPeakClientsPerSec.setStatus('current')
apPerfWlanCurPeakClientsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanCurPeakClientsPerSec.setStatus('current')
apPerfWlanAverageClientsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 3), HundredthOfGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanAverageClientsPerSec.setStatus('current')
apPerfWlanCurrentClientsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanCurrentClientsPerSec.setStatus('current')
apPerfWlanPrevPeakULOctetsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 5), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanPrevPeakULOctetsPerSec.setStatus('current')
apPerfWlanCurPeakULOctetsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 6), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanCurPeakULOctetsPerSec.setStatus('current')
apPerfWlanAverageULOctetsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 7), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanAverageULOctetsPerSec.setStatus('current')
apPerfWlanCurrentULOctetsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 8), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanCurrentULOctetsPerSec.setStatus('current')
apPerfWlanULOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanULOctets.setStatus('current')
apPerfWlanPrevPeakULPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 10), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanPrevPeakULPktsPerSec.setStatus('current')
apPerfWlanCurPeakULPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 11), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanCurPeakULPktsPerSec.setStatus('current')
apPerfWlanAverageULPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 12), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanAverageULPktsPerSec.setStatus('current')
apPerfWlanCurrentULPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 13), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanCurrentULPktsPerSec.setStatus('current')
apPerfWlanULPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanULPkts.setStatus('current')
apPerfWlanPrevPeakDLOctetsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 15), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanPrevPeakDLOctetsPerSec.setStatus('current')
apPerfWlanCurPeakDLOctetsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 16), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanCurPeakDLOctetsPerSec.setStatus('current')
apPerfWlanAverageDLOctetsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 17), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanAverageDLOctetsPerSec.setStatus('current')
apPerfWlanCurrentDLOctetsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 18), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanCurrentDLOctetsPerSec.setStatus('current')
apPerfWlanDLOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanDLOctets.setStatus('current')
apPerfWlanPrevPeakDLPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 20), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanPrevPeakDLPktsPerSec.setStatus('current')
apPerfWlanCurPeakDLPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 21), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanCurPeakDLPktsPerSec.setStatus('current')
apPerfWlanAverageDLPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 22), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanAverageDLPktsPerSec.setStatus('current')
apPerfWlanCurrentDLPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 23), HundredthOfGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanCurrentDLPktsPerSec.setStatus('current')
apPerfWlanDLPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 7, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPerfWlanDLPkts.setStatus('current')
apChannelUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 8), )
if mibBuilder.loadTexts: apChannelUtilizationTable.setStatus('current')
apChannelUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 8, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "apRadioIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "channel"))
if mibBuilder.loadTexts: apChannelUtilizationEntry.setStatus('current')
channel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: channel.setStatus('current')
apChnlUtilPrevPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChnlUtilPrevPeakUtilization.setStatus('current')
apChnlUtilCurPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChnlUtilCurPeakUtilization.setStatus('current')
apChnlUtilAverageUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 8, 1, 4), HundredthOfGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChnlUtilAverageUtilization.setStatus('current')
apChnlUtilCurrentUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChnlUtilCurrentUtilization.setStatus('current')
apNeighboursTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 9), )
if mibBuilder.loadTexts: apNeighboursTable.setStatus('current')
apNeighboursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 9, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"), (0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "nearbyApIndex"))
if mibBuilder.loadTexts: apNeighboursEntry.setStatus('current')
nearbyApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nearbyApIndex.setStatus('current')
nearbyApInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nearbyApInfo.setStatus('current')
nearbyApBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nearbyApBSSID.setStatus('current')
nearbyApChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nearbyApChannel.setStatus('current')
nearbyApRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nearbyApRSS.setStatus('current')
sensorManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 3))
tftpSever = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpSever.setStatus('current')
imagePath26xx = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imagePath26xx.setStatus('current')
imagePath36xx = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imagePath36xx.setStatus('current')
imageVersionOfap26xx = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imageVersionOfap26xx.setStatus('current')
imageVersionOfngap36xx = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imageVersionOfngap36xx.setStatus('current')
apRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 4))
apRegSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowAll", 1), ("allowApprovedOnes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRegSecurityMode.setStatus('current')
apRegDiscoveryRetries = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 4, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRegDiscoveryRetries.setStatus('current')
apRegDiscoveryInterval = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRegDiscoveryInterval.setStatus('current')
apRegTelnetPassword = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRegTelnetPassword.setStatus('current')
apRegSSHPassword = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRegSSHPassword.setStatus('current')
apRegUseClusterEncryption = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 4, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRegUseClusterEncryption.setStatus('current')
apRegClusterSharedSecret = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 4, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRegClusterSharedSecret.setStatus('current')
loadBalancing = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5))
loadGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1), )
if mibBuilder.loadTexts: loadGroupTable.setStatus('current')
loadGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "loadGroupID"))
if mibBuilder.loadTexts: loadGroupEntry.setStatus('current')
loadGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadGroupID.setStatus('current')
loadGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGroupName.setStatus('current')
loadGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clientBalancing", 0), ("radioBalancing", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGroupType.setStatus('current')
loadGroupBandPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGroupBandPreference.setStatus('current')
loadGroupLoadControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGroupLoadControl.setStatus('deprecated')
loadGroupClientCountRadio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 60), ValueRangeConstraint(121, 121), )).clone(121)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGroupClientCountRadio1.setStatus('current')
loadGroupClientCountRadio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 60), ValueRangeConstraint(121, 121), )).clone(121)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGroupClientCountRadio2.setStatus('current')
loadGroupLoadControlEnableR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGroupLoadControlEnableR1.setStatus('current')
loadGroupLoadControlEnableR2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGroupLoadControlEnableR2.setStatus('current')
loadGroupLoadControlStrictLimitR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGroupLoadControlStrictLimitR1.setStatus('current')
loadGroupLoadControlStrictLimitR2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGroupLoadControlStrictLimitR2.setStatus('current')
loadGrpRadiosTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 2), )
if mibBuilder.loadTexts: loadGrpRadiosTable.setStatus('current')
loadGrpRadiosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "loadGroupID"), (0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"))
if mibBuilder.loadTexts: loadGrpRadiosEntry.setStatus('current')
loadGrpRadiosRadio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("assigned", 1), ("unassigned", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGrpRadiosRadio1.setStatus('current')
loadGrpRadiosRadio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("assigned", 1), ("unassigned", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGrpRadiosRadio2.setStatus('current')
loadGrpWlanTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 3), )
if mibBuilder.loadTexts: loadGrpWlanTable.setStatus('current')
loadGrpWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 3, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "loadGroupID"), (0, "HIPATH-WIRELESS-HWC-MIB", "wlanID"))
if mibBuilder.loadTexts: loadGrpWlanEntry.setStatus('current')
loadGrpWlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 5, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadGrpWlanAssigned.setStatus('current')
apMaintenanceCycle = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 6))
schedule = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("never", 0), ("daily", 1), ("weekly", 2), ("monthly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedule.setStatus('current')
startHour = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startHour.setStatus('current')
startMinute = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startMinute.setStatus('current')
duration = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duration.setStatus('current')
recurrenceDaily = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("everyDay", 0), ("everyWeekday", 1), ("everyWeekend", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recurrenceDaily.setStatus('current')
recurrenceWeekly = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 6, 6), Bits().clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recurrenceWeekly.setStatus('current')
recurrenceMonthly = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 6, 7), Bits().clone(namedValues=NamedValues(("first", 0), ("second", 1), ("third", 2), ("fourth", 3), ("fifth", 4), ("sunday", 5), ("monday", 6), ("tuesday", 7), ("wednesday", 8), ("thursday", 9), ("friday", 10), ("saturday", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recurrenceMonthly.setStatus('current')
apPlatforms = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 5, 6, 8), Bits().clone(namedValues=NamedValues(("ap2600", 0), ("ap2605", 1), ("ap2650", 2), ("ap4102", 3), ("w786", 4), ("ap3705", 5), ("ap3710", 6), ("ap3715", 7), ("ap3765", 8), ("ap3767", 9), ("ap3801", 10), ("ap3805", 11), ("ap3825", 12), ("ap3865", 13), ("ap3935", 14), ("ap3965", 15), ("w78xc", 16), ("w78xcsfp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPlatforms.setStatus('current')
mobileUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6))
mobileUnitCount = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mobileUnitCount.setStatus('current')
muTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2), )
if mibBuilder.loadTexts: muTable.setStatus('current')
muEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "muMACAddress"))
if mibBuilder.loadTexts: muEntry.setStatus('current')
muMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muMACAddress.setStatus('current')
muIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muIPAddress.setStatus('current')
muUser = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muUser.setStatus('current')
muState = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muState.setStatus('current')
muAPSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muAPSerialNo.setStatus('current')
muVnsSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muVnsSSID.setStatus('current')
muTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muTxPackets.setStatus('current')
muRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muRxPackets.setStatus('current')
muTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muTxOctets.setStatus('current')
muRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muRxOctets.setStatus('current')
muDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muDuration.setStatus('current')
muAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muAPName.setStatus('current')
muTopologyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muTopologyName.setStatus('current')
muPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muPolicyName.setStatus('current')
muDefaultCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muDefaultCoS.setStatus('current')
muConnectionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("a", 1), ("g", 2), ("b", 3), ("n50", 4), ("n24", 5), ("ac", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muConnectionProtocol.setStatus('current')
muConnectionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("a", 1), ("bg", 2), ("abg", 3), ("an", 4), ("bgn", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muConnectionCapability.setStatus('deprecated')
muWLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muWLANID.setStatus('current')
muBSSIDMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muBSSIDMac.setStatus('current')
muDot11ConnectionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 2, 1, 20), Bits().clone(namedValues=NamedValues(("dot1150", 0), ("dot1124", 1), ("wpaV1", 2), ("wpaV2", 3), ("oneStream", 4), ("twoStream", 5), ("threeSteam", 6), ("uapsdVoice", 7), ("uapsdVideo", 8), ("uapsdBackground", 9), ("uapsdBesteffort", 10), ("wmm", 11), ("greenfield", 12), ("fastTransition", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muDot11ConnectionCapability.setStatus('current')
muTSPECTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3), )
if mibBuilder.loadTexts: muTSPECTable.setStatus('current')
muTSPECEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "muMACAddress"), (0, "HIPATH-WIRELESS-HWC-MIB", "tspecAC"), (0, "HIPATH-WIRELESS-HWC-MIB", "tspecDirection"))
if mibBuilder.loadTexts: muTSPECEntry.setStatus('current')
tspecMuMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecMuMACAddress.setStatus('current')
tspecAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("be", 0), ("bk", 1), ("vi", 2), ("vo", 3), ("tvo", 4), ("nwme", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecAC.setStatus('current')
tspecDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("uplink", 0), ("dnlink", 1), ("reserved", 2), ("bidir", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecDirection.setStatus('current')
tspecApSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecApSerialNumber.setStatus('current')
tspecMuIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecMuIPAddress.setStatus('current')
tspecBssMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecBssMac.setStatus('current')
tspecSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecSsid.setStatus('current')
tspecMDR = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecMDR.setStatus('current')
tspecNMS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecNMS.setStatus('current')
tspecSBA = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecSBA.setStatus('current')
tspecDlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecDlRate.setStatus('current')
tspecUlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecUlRate.setStatus('current')
tspecDlViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecDlViolations.setStatus('current')
tspecUlViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecUlViolations.setStatus('current')
tspecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("proto80211a", 1), ("proto80211g", 2), ("proto80211b", 3), ("proto80211an", 4), ("proto80211bgn", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tspecProtocol.setStatus('current')
muACLType = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blacklist", 1), ("whitelist", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muACLType.setStatus('current')
muACLTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 5), )
if mibBuilder.loadTexts: muACLTable.setStatus('current')
muACLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 5, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "muACLMACAddress"))
if mibBuilder.loadTexts: muACLEntry.setStatus('current')
muACLMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muACLMACAddress.setStatus('current')
muACLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: muACLRowStatus.setStatus('current')
muAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 6), )
if mibBuilder.loadTexts: muAccessListTable.setStatus('current')
muAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 6, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "muAccessListMACAddress"))
if mibBuilder.loadTexts: muAccessListEntry.setStatus('current')
muAccessListMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muAccessListMACAddress.setStatus('current')
muAccessListBitmaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(24, 36, 48))).clone(namedValues=NamedValues(("bits24", 24), ("bits36", 36), ("bits48", 48)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: muAccessListBitmaskLength.setStatus('current')
muAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 6, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: muAccessListRowStatus.setStatus('current')
associations = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7))
assocCount = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: assocCount.setStatus('current')
assocTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 2), )
if mibBuilder.loadTexts: assocTable.setStatus('current')
assocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "assocMUMacAddress"), (0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"), (0, "HIPATH-WIRELESS-HWC-MIB", "assocStartSysUpTime"))
if mibBuilder.loadTexts: assocEntry.setStatus('current')
assocMUMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocMUMacAddress.setStatus('current')
assocStartSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocStartSysUpTime.setStatus('current')
assocTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocTxPackets.setStatus('current')
assocRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocRxPackets.setStatus('current')
assocTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocTxOctets.setStatus('current')
assocRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocRxOctets.setStatus('current')
assocDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: assocDuration.setStatus('current')
assocVnsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 7, 2, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocVnsIfIndex.setStatus('current')
protocols = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 8))
wassp = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 8, 1))
logNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 9))
logEventSeverityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 9, 1), LogEventSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logEventSeverityThreshold.setStatus('current')
logEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 9, 3), LogEventSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logEventSeverity.setStatus('current')
logEventComponent = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 9, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logEventComponent.setStatus('current')
logEventDescription = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 9, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logEventDescription.setStatus('current')
hiPathWirelessLogAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4329, 15, 3, 9, 6)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "logEventSeverity"), ("HIPATH-WIRELESS-HWC-MIB", "logEventComponent"), ("HIPATH-WIRELESS-HWC-MIB", "logEventDescription"))
if mibBuilder.loadTexts: hiPathWirelessLogAlarm.setStatus('current')
sites = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10))
siteMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMaxEntries.setStatus('current')
siteNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteNumEntries.setStatus('current')
siteTableNextAvailableIndex = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTableNextAvailableIndex.setStatus('current')
siteTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4), )
if mibBuilder.loadTexts: siteTable.setStatus('current')
siteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "siteID"))
if mibBuilder.loadTexts: siteEntry.setStatus('current')
siteID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteID.setStatus('current')
siteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteRowStatus.setStatus('current')
siteName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteName.setStatus('current')
siteLocalRadiusAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteLocalRadiusAuthentication.setStatus('current')
siteDefaultDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteDefaultDNSServer.setStatus('current')
siteEnableSecureTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteEnableSecureTunnel.setStatus('current')
siteEncryptCommAPtoController = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteEncryptCommAPtoController.setStatus('current')
siteEncryptCommBetweenAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteEncryptCommBetweenAPs.setStatus('current')
siteBandPreferenceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteBandPreferenceEnable.setStatus('current')
siteLoadControlEnableR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteLoadControlEnableR1.setStatus('current')
siteLoadControlEnableR2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteLoadControlEnableR2.setStatus('current')
siteMaxClientR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteMaxClientR1.setStatus('current')
siteMaxClientR2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteMaxClientR2.setStatus('current')
siteStrictLimitEnableR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteStrictLimitEnableR1.setStatus('current')
siteStrictLimitEnableR2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteStrictLimitEnableR2.setStatus('current')
siteReplaceStnIDwithSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 4, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteReplaceStnIDwithSiteName.setStatus('current')
sitePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 5), )
if mibBuilder.loadTexts: sitePolicyTable.setStatus('current')
sitePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 5, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "siteID"), (0, "HIPATH-WIRELESS-HWC-MIB", "sitePolicyID"))
if mibBuilder.loadTexts: sitePolicyEntry.setStatus('current')
sitePolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: sitePolicyID.setStatus('current')
sitePolicyMember = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notMember", 0), ("isMember", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sitePolicyMember.setStatus('current')
siteCosTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 6), )
if mibBuilder.loadTexts: siteCosTable.setStatus('current')
siteCosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 6, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "siteID"), (0, "HIPATH-WIRELESS-HWC-MIB", "siteCoSID"))
if mibBuilder.loadTexts: siteCosEntry.setStatus('current')
siteCoSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: siteCoSID.setStatus('current')
siteCoSMember = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notMember", 0), ("isMember", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteCoSMember.setStatus('current')
siteAPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 7), )
if mibBuilder.loadTexts: siteAPTable.setStatus('current')
siteAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 7, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "siteID"), (0, "HIPATH-WIRELESS-HWC-MIB", "apIndex"))
if mibBuilder.loadTexts: siteAPEntry.setStatus('current')
siteAPMember = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notMember", 0), ("isMember", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteAPMember.setStatus('current')
siteWlanTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 8), )
if mibBuilder.loadTexts: siteWlanTable.setStatus('current')
siteWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 8, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "siteID"), (0, "HIPATH-WIRELESS-HWC-MIB", "wlanID"), (0, "HIPATH-WIRELESS-HWC-MIB", "siteWlanApRadioIndex"))
if mibBuilder.loadTexts: siteWlanEntry.setStatus('current')
siteWlanApRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: siteWlanApRadioIndex.setStatus('current')
siteWlanApRadioAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAssigned", 0), ("assigned", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteWlanApRadioAssigned.setStatus('current')
widsWips = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11))
mitigatorAnalysisEngine = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitigatorAnalysisEngine.setStatus('current')
scanGroupMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanGroupMaxEntries.setStatus('current')
scanGroupsCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanGroupsCurrentEntries.setStatus('current')
activeThreatsCounts = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeThreatsCounts.setStatus('current')
friendlyAPCounts = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friendlyAPCounts.setStatus('current')
uncategorizedAPCounts = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uncategorizedAPCounts.setStatus('current')
widsWipsEngineTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 11), )
if mibBuilder.loadTexts: widsWipsEngineTable.setStatus('current')
widsWipsEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 11, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "widsWipsEngineControllerIPAddress"))
if mibBuilder.loadTexts: widsWipsEngineEntry.setStatus('current')
widsWipsEngineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 11, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: widsWipsEngineRowStatus.setStatus('current')
widsWipsEngineControllerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 11, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: widsWipsEngineControllerIPAddress.setStatus('current')
widsWipsEnginePollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: widsWipsEnginePollInterval.setStatus('current')
widsWipsEnginePollRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: widsWipsEnginePollRetry.setStatus('current')
inServiceScanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12), )
if mibBuilder.loadTexts: inServiceScanGroupTable.setStatus('current')
inServiceScanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "scanGroupProfileID"))
if mibBuilder.loadTexts: inServiceScanGroupEntry.setStatus('current')
scanGroupProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: scanGroupProfileID.setStatus('current')
inSrvScanGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inSrvScanGrpName.setStatus('current')
inSrvScanGrpSecurityThreats = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inSrvScanGrpSecurityThreats.setStatus('current')
inSrvScanGrpMaxConcurrentAttacksPerAP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inSrvScanGrpMaxConcurrentAttacksPerAP.setStatus('current')
inSrvScanGrpCounterMeasuresType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 5), Bits().clone(namedValues=NamedValues(("externalHoneypotAPs", 0), ("roamingToFriendlyAPs", 1), ("internalHoneypotAPs", 2), ("spoofedAPs", 3), ("dropFloodAttack", 4), ("removeDosAttack", 5), ("adHocModeDevice", 6), ("rogueAP", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inSrvScanGrpCounterMeasuresType.setStatus('current')
inSrvScanGrpScan2400MHzSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 6), Bits().clone(namedValues=NamedValues(("frequency2412MHz", 0), ("frequency2417MHz", 1), ("frequency2422MHz", 2), ("frequency2427MHz", 3), ("frequency2432MHz", 4), ("frequency2437MHz", 5), ("frequency2442MHz", 6), ("frequency2447MHz", 7), ("frequency2452MHz", 8), ("frequency2457MHz", 9), ("frequency2462MHz", 10), ("frequency2467MHz", 11), ("frequency2472MHz", 12), ("frequency2484MHz", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inSrvScanGrpScan2400MHzSelection.setStatus('current')
inSrvScanGrpScan5GHzSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 7), Bits().clone(namedValues=NamedValues(("frequency5040MHz", 0), ("frequency5060MHz", 1), ("frequency5080MHz", 2), ("frequency5180MHz", 3), ("frequency5200MHz", 4), ("frequency5220MHz", 5), ("frequency5240MHz", 6), ("frequency5260MHz", 7), ("frequency5280MHz", 8), ("frequency5300MHz", 9), ("frequency5320MHz", 10), ("frequency5500MHz", 11), ("frequency5520MHz", 12), ("frequency5540MHz", 13), ("frequency5560MHz", 14), ("frequency5580MHz", 15), ("frequency5600MHz", 16), ("frequency5620MHz", 17), ("frequency5640MHz", 18), ("frequency5660MHz", 19), ("frequency5680MHz", 20), ("frequency5700MHz", 21), ("frequency5745MHz", 22), ("frequency5765MHz", 23), ("frequency5785MHz", 24), ("frequency5805MHz", 25), ("frequency5825MHz", 26), ("frequency4920MHz", 27), ("frequency4940MHz", 28), ("frequency4960MHz", 29), ("frequency4980MHz", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inSrvScanGrpScan5GHzSelection.setStatus('current')
inSrvScanGrpblockAdHocClientsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inSrvScanGrpblockAdHocClientsPeriod.setStatus('current')
inSrvScanGrpClassifySourceIF = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inSrvScanGrpClassifySourceIF.setStatus('current')
inSrvScanGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inSrvScanGrpRowStatus.setStatus('current')
inSrvScanGrpDetectRogueAP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inSrvScanGrpDetectRogueAP.setStatus('current')
inSrvScanGrpListeningPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 12, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSrvScanGrpListeningPort.setStatus('current')
outOfServiceScanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13), )
if mibBuilder.loadTexts: outOfServiceScanGroupTable.setStatus('current')
outOfServiceScanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "scanGroupProfileID"))
if mibBuilder.loadTexts: outOfServiceScanGroupEntry.setStatus('current')
outOfSrvScanGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outOfSrvScanGrpName.setStatus('current')
outOfSrvScanGrpRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radio1", 1), ("radio2", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outOfSrvScanGrpRadio.setStatus('current')
outOfSrvScanGrpChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 999))).clone(namedValues=NamedValues(("allChannel", 0), ("currentChannel", 999)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outOfSrvScanGrpChannelList.setStatus('current')
outOfSrvScanGrpScanType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("passive", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outOfSrvScanGrpScanType.setStatus('current')
outOfSrvScanGrpChannelDwellTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outOfSrvScanGrpChannelDwellTime.setStatus('current')
outOfSrvScanGrpScanTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outOfSrvScanGrpScanTimeInterval.setStatus('current')
outOfSrvScanGrpSecurityScan = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outOfSrvScanGrpSecurityScan.setStatus('current')
outOfSrvScanGrpScanActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stop", 0), ("start", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outOfSrvScanGrpScanActivity.setStatus('current')
outOfSrvScanGrpScanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 13, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outOfSrvScanGrpScanRowStatus.setStatus('current')
scanGroupAPAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14), )
if mibBuilder.loadTexts: scanGroupAPAssignmentTable.setStatus('current')
scanGroupAPAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "scanGroupProfileID"), (0, "HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignApSerial"), (0, "HIPATH-WIRELESS-HWC-MIB", "widsWipsEngineControllerIPAddress"))
if mibBuilder.loadTexts: scanGroupAPAssignmentEntry.setStatus('current')
scanGroupAPAssignApSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanGroupAPAssignApSerial.setStatus('current')
scanGroupAPAssignGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanGroupAPAssignGroupName.setStatus('current')
scanGroupAPAssignName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanGroupAPAssignName.setStatus('current')
scanGroupAPAssignRadio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 8, 16, 18, 19, 20, 32, 34, 35, 36))).clone(namedValues=NamedValues(("off", 0), ("b", 1), ("g", 2), ("bg", 3), ("a", 4), ("j", 8), ("n", 16), ("gn", 18), ("bgn", 19), ("an", 20), ("nStrict", 32), ("gnStrict", 34), ("bgnStrict", 35), ("anStrict", 36)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanGroupAPAssignRadio1.setStatus('current')
scanGroupAPAssignRadio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 8, 16, 18, 19, 20, 32, 34, 35, 36))).clone(namedValues=NamedValues(("off", 0), ("b", 1), ("g", 2), ("bg", 3), ("a", 4), ("j", 8), ("n", 16), ("gn", 18), ("bgn", 19), ("an", 20), ("nStrict", 32), ("gnStrict", 34), ("bgnStrict", 35), ("anStrict", 36)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanGroupAPAssignRadio2.setStatus('current')
scanGroupAPAssignInactiveAP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanGroupAPAssignInactiveAP.setStatus('current')
scanGroupAPAssignAllowScanning = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllow", 0), ("allow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanGroupAPAssignAllowScanning.setStatus('current')
scanGroupAPAssignAllowSpectrumAnalysis = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllow", 0), ("allow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanGroupAPAssignAllowSpectrumAnalysis.setStatus('current')
scanGroupAPAssignControllerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanGroupAPAssignControllerIPAddress.setStatus('current')
scanGroupAPAssignFordwardingService = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 14, 1, 10), Bits().clone(namedValues=NamedValues(("assignedToSite", 0), ("assignedToLoadGroup", 1), ("assignedToWlanService", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanGroupAPAssignFordwardingService.setStatus('current')
scanAPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 15), )
if mibBuilder.loadTexts: scanAPTable.setStatus('current')
scanAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 15, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "scanAPControllerIPAddress"), (0, "HIPATH-WIRELESS-HWC-MIB", "scanAPSerialNumber"))
if mibBuilder.loadTexts: scanAPEntry.setStatus('current')
scanAPControllerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 15, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanAPControllerIPAddress.setStatus('current')
scanAPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 15, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanAPSerialNumber.setStatus('current')
scanAPAcessPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scanAPAcessPointName.setStatus('current')
scanAPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scanAPRowStatus.setStatus('current')
scanAPProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 15, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scanAPProfileName.setStatus('current')
scanAPProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inServiceScan", 1), ("guardianScan", 2), ("outOfServiceScan", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scanAPProfileType.setStatus('current')
friendlyAPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 16), )
if mibBuilder.loadTexts: friendlyAPTable.setStatus('current')
friendlyAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 16, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "friendlyAPMacAddress"))
if mibBuilder.loadTexts: friendlyAPEntry.setStatus('current')
friendlyAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 16, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friendlyAPMacAddress.setStatus('current')
friendlyAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friendlyAPSSID.setStatus('current')
friendlyAPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 16, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friendlyAPDescription.setStatus('current')
friendlyAPManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 16, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friendlyAPManufacturer.setStatus('current')
uncategorizedAPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 17), )
if mibBuilder.loadTexts: uncategorizedAPTable.setStatus('current')
uncategorizedAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 17, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "uncategorizedAPMAC"))
if mibBuilder.loadTexts: uncategorizedAPEntry.setStatus('current')
uncategorizedAPMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 17, 1, 1), MacAddress())
if mibBuilder.loadTexts: uncategorizedAPMAC.setStatus('current')
uncategorizedAPDescption = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uncategorizedAPDescption.setStatus('current')
uncategorizedAPManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 17, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uncategorizedAPManufacturer.setStatus('current')
uncategorizedAPClassify = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noAction", 0), ("clasifyAsAuthorized", 1), ("classifyAsFriendlyAP", 2), ("clasifyAsThreatForReport", 3), ("clasifyAsInternalHoneypotThreat", 4), ("clasifyAsExternalHoneypotThreat", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uncategorizedAPClassify.setStatus('current')
uncategorizedAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uncategorizedAPSSID.setStatus('current')
authorizedAPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 18), )
if mibBuilder.loadTexts: authorizedAPTable.setStatus('current')
authorizedAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 18, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "authorizedAPMAC"))
if mibBuilder.loadTexts: authorizedAPEntry.setStatus('current')
authorizedAPMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 18, 1, 1), MacAddress())
if mibBuilder.loadTexts: authorizedAPMAC.setStatus('current')
authorizedAPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 18, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authorizedAPDescription.setStatus('current')
authorizedAPManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 18, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authorizedAPManufacturer.setStatus('current')
authorizedAPClassify = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAction", 0), ("classifyAsFriendlyAP", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authorizedAPClassify.setStatus('current')
authorizedAPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 18, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authorizedAPRowStatus.setStatus('current')
prohibitedAPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 19), )
if mibBuilder.loadTexts: prohibitedAPTable.setStatus('current')
prohibitedAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 19, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "prohibitedAPMAC"))
if mibBuilder.loadTexts: prohibitedAPEntry.setStatus('current')
prohibitedAPMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 19, 1, 1), MacAddress())
if mibBuilder.loadTexts: prohibitedAPMAC.setStatus('current')
prohibitedAPCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 65529, 65530, 65531, 65532, 65533, 65534))).clone(namedValues=NamedValues(("notAvailable", 0), ("reportPresenceOnly", 65529), ("externalHoneyPot", 65530), ("internalHoneyPot", 65531), ("friendly", 65532), ("perauthorized", 65533), ("authorized", 65534)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prohibitedAPCategory.setStatus('current')
prohibitedAPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 19, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prohibitedAPDescription.setStatus('current')
prohibitedAPManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 19, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prohibitedAPManufacturer.setStatus('current')
prohibitedAPClassify = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("classifyAsFriendlyAP", 1), ("noAction", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prohibitedAPClassify.setStatus('current')
prohibitedAPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 19, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prohibitedAPRowStatus.setStatus('current')
dedicatedScanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20), )
if mibBuilder.loadTexts: dedicatedScanGroupTable.setStatus('current')
dedicatedScanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "scanGroupProfileID"))
if mibBuilder.loadTexts: dedicatedScanGroupEntry.setStatus('current')
dedicatedScanGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpName.setStatus('current')
dedicatedScanGrpSecurityThreats = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpSecurityThreats.setStatus('current')
dedicatedScanGrpMaxConcurrentAttacksPerAP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpMaxConcurrentAttacksPerAP.setStatus('current')
dedicatedScanGrpCounterMeasures = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 4), Bits().clone(namedValues=NamedValues(("externalHoneypotAPs", 0), ("roamingToFriendlyAPs", 1), ("internalHoneypotAPs", 2), ("spoofedAPs", 3), ("dropFloodAttack", 4), ("removeDosAttack", 5), ("adHocModeDevice", 6), ("rogueAP", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpCounterMeasures.setStatus('current')
dedicatedScanGrpScan2400MHzFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 5), Bits().clone(namedValues=NamedValues(("frequency2412MHz", 0), ("frequency2417MHz", 1), ("frequency2422MHz", 2), ("frequency2427MHz", 3), ("frequency2432MHz", 4), ("frequency2437MHz", 5), ("frequency2442MHz", 6), ("frequency2447MHz", 7), ("frequency2452MHz", 8), ("frequency2457MHz", 9), ("frequency2462MHz", 10), ("frequency2467MHz", 11), ("frequency2472MHz", 12), ("frequency2484MHz", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpScan2400MHzFreq.setStatus('current')
dedicatedScanGrpScan5GHzFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 6), Bits().clone(namedValues=NamedValues(("frequency5040MHz", 0), ("frequency5060MHz", 1), ("frequency5080MHz", 2), ("frequency5180MHz", 3), ("frequency5200MHz", 4), ("frequency5220MHz", 5), ("frequency5240MHz", 6), ("frequency5260MHz", 7), ("frequency5280MHz", 8), ("frequency5300MHz", 9), ("frequency5320MHz", 10), ("frequency5500MHz", 11), ("frequency5520MHz", 12), ("frequency5540MHz", 13), ("frequency5560MHz", 14), ("frequency5580MHz", 15), ("frequency5600MHz", 16), ("frequency5620MHz", 17), ("frequency5640MHz", 18), ("frequency5660MHz", 19), ("frequency5680MHz", 20), ("frequency5700MHz", 21), ("frequency5745MHz", 22), ("frequency5765MHz", 23), ("frequency5785MHz", 24), ("frequency5805MHz", 25), ("frequency5825MHz", 26), ("frequency4920MHz", 27), ("frequency4940MHz", 28), ("frequency4960MHz", 29), ("frequency4980MHz", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpScan5GHzFreq.setStatus('current')
dedicatedScanGrpBlockAdHocPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpBlockAdHocPeriod.setStatus('current')
dedicatedScanGrpClassifySourceIF = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpClassifySourceIF.setStatus('current')
dedicatedScanGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpRowStatus.setStatus('current')
dedicatedScanGrpDetectRogueAP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpDetectRogueAP.setStatus('current')
dedicatedScanGrpListeningPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 20, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dedicatedScanGrpListeningPort.setStatus('current')
widsWipsReport = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30))
activeThreatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1), )
if mibBuilder.loadTexts: activeThreatTable.setStatus('current')
activeThreatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "activeThreatIndex"))
if mibBuilder.loadTexts: activeThreatEntry.setStatus('current')
activeThreatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: activeThreatIndex.setStatus('current')
activeThreatCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeThreatCategory.setStatus('current')
activeThreatDeviceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeThreatDeviceMAC.setStatus('current')
activeThreatDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeThreatDateTime.setStatus('current')
activeThreatCounterMeasure = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("noCounterMeasure", 0), ("rateLimit", 1), ("preventUse", 2), ("preventRoaming", 4), ("blacklisted", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeThreatCounterMeasure.setStatus('current')
activeThreatAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeThreatAPName.setStatus('current')
activeThreatRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeThreatRSS.setStatus('current')
activeThreatExtraDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeThreatExtraDetails.setStatus('current')
activeThreatThreat = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeThreatThreat.setStatus('current')
countermeasureAPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 2), )
if mibBuilder.loadTexts: countermeasureAPTable.setStatus('current')
countermeasureAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "countermeasureAPSerial"), (0, "HIPATH-WIRELESS-HWC-MIB", "countermeasureAPThreatIndex"))
if mibBuilder.loadTexts: countermeasureAPEntry.setStatus('current')
countermeasureAPThreatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: countermeasureAPThreatIndex.setStatus('current')
countermeasureAPSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: countermeasureAPSerial.setStatus('current')
countermeasureAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: countermeasureAPName.setStatus('current')
countermeasureAPThreatCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: countermeasureAPThreatCategory.setStatus('current')
countermeasureAPCountermeasure = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: countermeasureAPCountermeasure.setStatus('current')
countermeasureAPTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: countermeasureAPTime.setStatus('current')
blacklistedClientTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 3), )
if mibBuilder.loadTexts: blacklistedClientTable.setStatus('current')
blacklistedClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 3, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "blacklistedClientMAC"))
if mibBuilder.loadTexts: blacklistedClientEntry.setStatus('current')
blacklistedClientMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blacklistedClientMAC.setStatus('current')
blacklistedClientStatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blacklistedClientStatTime.setStatus('current')
blacklistedClientEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blacklistedClientEndTime.setStatus('current')
blacklistedClientReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blacklistedClientReason.setStatus('current')
threatSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 4), )
if mibBuilder.loadTexts: threatSummaryTable.setStatus('current')
threatSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 4, 1), ).setIndexNames((0, "HIPATH-WIRELESS-HWC-MIB", "threatSummaryIndex"))
if mibBuilder.loadTexts: threatSummaryEntry.setStatus('current')
threatSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: threatSummaryIndex.setStatus('current')
threatSummaryCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatSummaryCategory.setStatus('current')
threatSummaryActiveThreat = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatSummaryActiveThreat.setStatus('current')
threatSummaryHistoricalCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 11, 30, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatSummaryHistoricalCounts.setStatus('current')
apNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 19))
apEventId = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("apPollTimeout", 1), ("apRegister", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEventId.setStatus('current')
apEventDescription = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 19, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEventDescription.setStatus('current')
apEventAPSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 19, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEventAPSerialNumber.setStatus('current')
apTunnelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4329, 15, 3, 19, 4)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "apEventId"), ("HIPATH-WIRELESS-HWC-MIB", "apEventDescription"), ("HIPATH-WIRELESS-HWC-MIB", "apEventAPSerialNumber"))
if mibBuilder.loadTexts: apTunnelAlarm.setStatus('current')
stationSessionNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20))
stationEventType = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("registration", 0), ("deRegistration", 1), ("stateChange", 2), ("registrationFailed", 3), ("roam", 4), ("mbaTimeout", 5), ("mbaAccepted", 6), ("mbaRejected", 7), ("authorizationChanged", 8), ("authentication", 9), ("authenticationFailed", 10), ("locationUpdate", 11), ("areaChange", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationEventType.setStatus('current')
stationMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationMacAddress.setStatus('current')
stationIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationIPAddress.setStatus('current')
stationAPName = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAPName.setStatus('current')
stationAPSSID = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAPSSID.setStatus('current')
stationDetailEvent = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationDetailEvent.setStatus('current')
stationRoamedAPName = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationRoamedAPName.setStatus('current')
stationName = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationName.setStatus('current')
stationBSSID = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationBSSID.setStatus('current')
stationEventTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationEventTimeStamp.setStatus('current')
stationEventAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 11)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "stationEventType"), ("HIPATH-WIRELESS-HWC-MIB", "stationMacAddress"), ("HIPATH-WIRELESS-HWC-MIB", "stationIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "stationAPName"), ("HIPATH-WIRELESS-HWC-MIB", "stationAPSSID"), ("HIPATH-WIRELESS-HWC-MIB", "stationDetailEvent"), ("HIPATH-WIRELESS-HWC-MIB", "stationRoamedAPName"), ("HIPATH-WIRELESS-HWC-MIB", "stationName"), ("HIPATH-WIRELESS-HWC-MIB", "stationBSSID"), ("HIPATH-WIRELESS-HWC-MIB", "stationEventTimeStamp"), ("HIPATH-WIRELESS-HWC-MIB", "stationIPv6Address1"), ("HIPATH-WIRELESS-HWC-MIB", "stationIPv6Address2"), ("HIPATH-WIRELESS-HWC-MIB", "stationIPv6Address3"))
if mibBuilder.loadTexts: stationEventAlarm.setStatus('current')
stationIPv6Address1 = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 12), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationIPv6Address1.setStatus('current')
stationIPv6Address2 = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 13), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationIPv6Address2.setStatus('current')
stationIPv6Address3 = MibScalar((1, 3, 6, 1, 4, 1, 4329, 15, 3, 20, 14), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationIPv6Address3.setStatus('current')
hiPathWirelessHWCConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30))
hiPathWirelessHWCModule = ModuleCompliance((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 1)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "hiPathWirelessHWCGroup"), ("HIPATH-WIRELESS-HWC-MIB", "layerTwoPortGroup"), ("HIPATH-WIRELESS-HWC-MIB", "muGroup"), ("HIPATH-WIRELESS-HWC-MIB", "apStatsGroup"), ("HIPATH-WIRELESS-HWC-MIB", "muACLGroup"), ("HIPATH-WIRELESS-HWC-MIB", "siteGroup"), ("HIPATH-WIRELESS-HWC-MIB", "sitePolicyGroup"), ("HIPATH-WIRELESS-HWC-MIB", "siteCosGroup"), ("HIPATH-WIRELESS-HWC-MIB", "siteAPGroup"), ("HIPATH-WIRELESS-HWC-MIB", "siteWlanGroup"), ("HIPATH-WIRELESS-HWC-MIB", "apGroup"), ("HIPATH-WIRELESS-HWC-MIB", "wlanGroup"), ("HIPATH-WIRELESS-HWC-MIB", "wlanStatsGroup"), ("HIPATH-WIRELESS-HWC-MIB", "topologyGroup"), ("HIPATH-WIRELESS-HWC-MIB", "topologyStatGroup"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroup"), ("HIPATH-WIRELESS-HWC-MIB", "outOfServiceScanGroup"), ("HIPATH-WIRELESS-HWC-MIB", "widsWipsEngineGroup"), ("HIPATH-WIRELESS-HWC-MIB", "widsWipsObjectsGroup"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignmentGroup"), ("HIPATH-WIRELESS-HWC-MIB", "inServiceScanGroup"), ("HIPATH-WIRELESS-HWC-MIB", "wlanSecurityReportGroup"), ("HIPATH-WIRELESS-HWC-MIB", "friendlyAPGroup"), ("HIPATH-WIRELESS-HWC-MIB", "scanAPGroup"), ("HIPATH-WIRELESS-HWC-MIB", "activeThreatGroup"), ("HIPATH-WIRELESS-HWC-MIB", "muAccessListGroup"), ("HIPATH-WIRELESS-HWC-MIB", "apAntennaGroup"), ("HIPATH-WIRELESS-HWC-MIB", "threatSummaryGroup"), ("HIPATH-WIRELESS-HWC-MIB", "blaclistedClientGroup"), ("HIPATH-WIRELESS-HWC-MIB", "countermeasureAPGroup"), ("HIPATH-WIRELESS-HWC-MIB", "apByChannelGroup"), ("HIPATH-WIRELESS-HWC-MIB", "stationsByProtocolGroup"), ("HIPATH-WIRELESS-HWC-MIB", "licensingInformationGroup"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGroup"), ("HIPATH-WIRELESS-HWC-MIB", "prohibitedAPGroup"), ("HIPATH-WIRELESS-HWC-MIB", "authorizedAPGroup"), ("HIPATH-WIRELESS-HWC-MIB", "uncategorizedAPGroup"), ("HIPATH-WIRELESS-HWC-MIB", "radiusFastFailoverEventsGroup"), ("HIPATH-WIRELESS-HWC-MIB", "dhcpRelayListenersGroup"), ("HIPATH-WIRELESS-HWC-MIB", "apRadioAntennaGroup"), ("HIPATH-WIRELESS-HWC-MIB", "authenticationAdvancedGroup"), ("HIPATH-WIRELESS-HWC-MIB", "radiusExtnsSettingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hiPathWirelessHWCModule = hiPathWirelessHWCModule.setStatus('current')
hiPathWirelessHWCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 2))
for _hiPathWirelessHWCGroup_obj in [[("HIPATH-WIRELESS-HWC-MIB", "sysSoftwareVersion"), ("HIPATH-WIRELESS-HWC-MIB", "sysCPUType"), ("HIPATH-WIRELESS-HWC-MIB", "sysLogLevel"), ("HIPATH-WIRELESS-HWC-MIB", "logEventSeverityThreshold"), ("HIPATH-WIRELESS-HWC-MIB", "logEventSeverity"), ("HIPATH-WIRELESS-HWC-MIB", "logEventComponent"), ("HIPATH-WIRELESS-HWC-MIB", "apLogCollectionEnable"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFrequency"), ("HIPATH-WIRELESS-HWC-MIB", "apLogDestination"), ("HIPATH-WIRELESS-HWC-MIB", "apLogUserId"), ("HIPATH-WIRELESS-HWC-MIB", "apLogServerIP"), ("HIPATH-WIRELESS-HWC-MIB", "apLogDirectory"), ("HIPATH-WIRELESS-HWC-MIB", "apLogPassword"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFTProtocol"), ("HIPATH-WIRELESS-HWC-MIB", "select"), ("HIPATH-WIRELESS-HWC-MIB", "apLogQuickSelectedOption"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileCopyDestination"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileCopyProtocol"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileCopyServerIP"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileCopyUserID"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileCopyPassword"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileCopyServerDirectory"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileCopyOperation"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileCopyOperationStatus"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileCopyRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileUtilityLimit"), ("HIPATH-WIRELESS-HWC-MIB", "apLogFileUtilityCurrent"), ("HIPATH-WIRELESS-HWC-MIB", "logEventDescription"), ("HIPATH-WIRELESS-HWC-MIB", "apEventId"), ("HIPATH-WIRELESS-HWC-MIB", "apEventDescription"), ("HIPATH-WIRELESS-HWC-MIB", "apEventAPSerialNumber"), ("HIPATH-WIRELESS-HWC-MIB", "assocTxPackets"), ("HIPATH-WIRELESS-HWC-MIB", "assocRxPackets"), ("HIPATH-WIRELESS-HWC-MIB", "assocTxOctets"), ("HIPATH-WIRELESS-HWC-MIB", "assocRxOctets"), ("HIPATH-WIRELESS-HWC-MIB", "assocDuration"), ("HIPATH-WIRELESS-HWC-MIB", "assocCount"), ("HIPATH-WIRELESS-HWC-MIB", "assocMUMacAddress"), ("HIPATH-WIRELESS-HWC-MIB", "assocStartSysUpTime"), ("HIPATH-WIRELESS-HWC-MIB", "mobileUnitCount"), ("HIPATH-WIRELESS-HWC-MIB", "vnsIfIndex"), ("HIPATH-WIRELESS-HWC-MIB", "radioVNSRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "radioIfIndex"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterRulePortLow"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterRulePortHigh"), ("HIPATH-WIRELESS-HWC-MIB", "cpURL"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDHCPRangeIndex"), ("HIPATH-WIRELESS-HWC-MIB", "vns3rdPartyAP"), ("HIPATH-WIRELESS-HWC-MIB", "vnsUseDHCPRelay"), ("HIPATH-WIRELESS-HWC-MIB", "vnsMgmtTrafficEnable"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAuthModel"), ("HIPATH-WIRELESS-HWC-MIB", "physicalPortCount"), ("HIPATH-WIRELESS-HWC-MIB", "mgmtPortIfIndex"), ("HIPATH-WIRELESS-HWC-MIB", "mgmtPortHostname"), ("HIPATH-WIRELESS-HWC-MIB", "mgmtPortDomain"), ("HIPATH-WIRELESS-HWC-MIB", "vnRole"), ("HIPATH-WIRELESS-HWC-MIB", "vnIfIndex"), ("HIPATH-WIRELESS-HWC-MIB", "vnHeartbeatInterval"), ("HIPATH-WIRELESS-HWC-MIB", "ntpEnabled"), ("HIPATH-WIRELESS-HWC-MIB", "ntpTimezone"), ("HIPATH-WIRELESS-HWC-MIB", "ntpTimeServer1"), ("HIPATH-WIRELESS-HWC-MIB", "ntpTimeServer2"), ("HIPATH-WIRELESS-HWC-MIB", "ntpTimeServer3"), ("HIPATH-WIRELESS-HWC-MIB", "tunnelCount"), ("HIPATH-WIRELESS-HWC-MIB", "vnsCount"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDescription"), ("HIPATH-WIRELESS-HWC-MIB", "vnsMUSessionTimeout"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAllowMulticast"), ("HIPATH-WIRELESS-HWC-MIB", "vnsSSID"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDomain"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDNSServers"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWINSServers"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatus"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDHCPRangeStart"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDHCPRangeEnd"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDHCPRangeType"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDHCPRangeStatus"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRadiusServerPort"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRadiusServerRetries"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRadiusServerTimeout"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRadiusServerSharedSecret"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRadiusServerNASIdentifier"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRadiusServerAuthType"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRadiusServerRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterID"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterIDStatus"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterRuleOrder"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterRuleDirection"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterRuleAction"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterRuleIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterRuleProtocol"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterRuleEtherType"), ("HIPATH-WIRELESS-HWC-MIB", "vnsFilterRuleStatus"), ("HIPATH-WIRELESS-HWC-MIB", "vnsPrivWEPKeyType"), ("HIPATH-WIRELESS-HWC-MIB", "vnsPrivDynamicRekeyFrequency"), ("HIPATH-WIRELESS-HWC-MIB", "vnsPrivWEPKeyLength"), ("HIPATH-WIRELESS-HWC-MIB", "vnsPrivWPA1Enabled"), ("HIPATH-WIRELESS-HWC-MIB", "vnsPrivUseSharedKey"), ("HIPATH-WIRELESS-HWC-MIB", "vnsPrivWPASharedKey"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWEPKeyIndex"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWEPKeyValue"), ("HIPATH-WIRELESS-HWC-MIB", "activeVNSSessionCount"), ("HIPATH-WIRELESS-HWC-MIB", "apCount"), ("HIPATH-WIRELESS-HWC-MIB", "cpReplaceGatewayWithFQDN"), ("HIPATH-WIRELESS-HWC-MIB", "cpDefaultRedirectionURL"), ("HIPATH-WIRELESS-HWC-MIB", "cpConnectionIP"), ("HIPATH-WIRELESS-HWC-MIB", "cpConnectionPort"), ("HIPATH-WIRELESS-HWC-MIB", "cpSharedSecret"), ("HIPATH-WIRELESS-HWC-MIB", "cpLogOff"), ("HIPATH-WIRELESS-HWC-MIB", "cpStatusCheck"), ("HIPATH-WIRELESS-HWC-MIB", "cpType"), ("HIPATH-WIRELESS-HWC-MIB", "apMacAddress"), ("HIPATH-WIRELESS-HWC-MIB", "serviceLogFacility"), ("HIPATH-WIRELESS-HWC-MIB", "sysLogServerIP"), ("HIPATH-WIRELESS-HWC-MIB", "sysLogServerPort"), ("HIPATH-WIRELESS-HWC-MIB", "sysLogServerRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "sysLogServerIndex"), ("HIPATH-WIRELESS-HWC-MIB", "apActiveCount"), ("HIPATH-WIRELESS-HWC-MIB", "sysLogServerEnabled"), ("HIPATH-WIRELESS-HWC-MIB", "assocVnsIfIndex"), ("HIPATH-WIRELESS-HWC-MIB", "apRadioFrequency"), ("HIPATH-WIRELESS-HWC-MIB", "includeAllServiceMessages"), ("HIPATH-WIRELESS-HWC-MIB", "tunnelStartIP"), ("HIPATH-WIRELESS-HWC-MIB", "tunnelStartHWC"), ("HIPATH-WIRELESS-HWC-MIB", "tunnelEndIP"), ("HIPATH-WIRELESS-HWC-MIB", "tunnelEndHWC"), ("HIPATH-WIRELESS-HWC-MIB", "apBroadcastDisassociate"), ("HIPATH-WIRELESS-HWC-MIB", "sysSerialNo"), ("HIPATH-WIRELESS-HWC-MIB", "vnsPrivWPA2Enabled"), ("HIPATH-WIRELESS-HWC-MIB", "tunnelStatus"), ("HIPATH-WIRELESS-HWC-MIB", "hiPathWirelessAppLogFacility"), ("HIPATH-WIRELESS-HWC-MIB", "vnsVlanID"), ("HIPATH-WIRELESS-HWC-MIB", "vnsMgmIpAddress"), ("HIPATH-WIRELESS-HWC-MIB", "maxVoiceBWforReassociation"), ("HIPATH-WIRELESS-HWC-MIB", "maxVoiceBWforAssociation"), ("HIPATH-WIRELESS-HWC-MIB", "maxVideoBWforReassociation"), ("HIPATH-WIRELESS-HWC-MIB", "maxVideoBWforAssociation"), ("HIPATH-WIRELESS-HWC-MIB", "maxBestEffortBWforReassociation"), ("HIPATH-WIRELESS-HWC-MIB", "maxBestEffortBWforAssociation"), ("HIPATH-WIRELESS-HWC-MIB", "maxBackgroundBWforReassociation"), ("HIPATH-WIRELESS-HWC-MIB", "maxBackgroundBWforAssociation"), ("HIPATH-WIRELESS-HWC-MIB", "physicalPortsInternalVlanID"), ("HIPATH-WIRELESS-HWC-MIB", "vnsMode"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSPriorityOverrideFlag"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSPriorityOverrideSC"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSPriorityOverrideDSCP"), ("HIPATH-WIRELESS-HWC-MIB", "netflowDestinationIP"), ("HIPATH-WIRELESS-HWC-MIB", "netflowInterval"), ("HIPATH-WIRELESS-HWC-MIB", "mirrorFirstN"), ("HIPATH-WIRELESS-HWC-MIB", "mirrorL2Ports"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSClassificationServiceClass"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWirelessLegacyFlag"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWirelessWMMFlag"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWireless80211eFlag"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWirelessTurboVoiceFlag"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWirelessEnableUAPSD"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWirelessUseAdmControlVoice"), ("HIPATH-WIRELESS-HWC-MIB", "vnsSuppressSSID"), ("HIPATH-WIRELESS-HWC-MIB", "vnsEnable11hSupport"), ("HIPATH-WIRELESS-HWC-MIB", "vnsApplyPowerBackOff"), ("HIPATH-WIRELESS-HWC-MIB", "vnsProcessClientIEReq"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWirelessUseAdmControlVideo"), ("HIPATH-WIRELESS-HWC-MIB", "vnsInterfaceName"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWirelessULPolicerAction"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWirelessDLPolicerAction"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWirelessUseAdmControlBestEffort"), ("HIPATH-WIRELESS-HWC-MIB", "vnsQoSWirelessUseAdmControlBackground"), ("HIPATH-WIRELESS-HWC-MIB", "tspecMuMACAddress"), ("HIPATH-WIRELESS-HWC-MIB", "tspecAC"), ("HIPATH-WIRELESS-HWC-MIB", "tspecDirection"), ("HIPATH-WIRELESS-HWC-MIB", "tspecApSerialNumber"), ("HIPATH-WIRELESS-HWC-MIB", "tspecMuIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "tspecBssMac"), ("HIPATH-WIRELESS-HWC-MIB", "tspecSsid"), ("HIPATH-WIRELESS-HWC-MIB", "tspecMDR"), ("HIPATH-WIRELESS-HWC-MIB", "tspecNMS"), ("HIPATH-WIRELESS-HWC-MIB", "tspecSBA"), ("HIPATH-WIRELESS-HWC-MIB", "tspecDlRate"), ("HIPATH-WIRELESS-HWC-MIB", "tspecUlRate"), ("HIPATH-WIRELESS-HWC-MIB", "tspecDlViolations"), ("HIPATH-WIRELESS-HWC-MIB", "tspecUlViolations"), ("HIPATH-WIRELESS-HWC-MIB", "tspecProtocol"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDLSSupportEnable"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDLSAddress"), ("HIPATH-WIRELESS-HWC-MIB", "vnsDLSPort"), ("HIPATH-WIRELESS-HWC-MIB", "vnsSessionAvailabilityEnable"), ("HIPATH-WIRELESS-HWC-MIB", "ntpServerEnabled"), ("HIPATH-WIRELESS-HWC-MIB", "primaryDNS"), ("HIPATH-WIRELESS-HWC-MIB", "secondaryDNS"), ("HIPATH-WIRELESS-HWC-MIB", "tertiaryDNS"), ("HIPATH-WIRELESS-HWC-MIB", "physicalFlash"), ("HIPATH-WIRELESS-HWC-MIB", "jumboFrames"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRadiusServerName"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRadiusServerNasAddress"), ("HIPATH-WIRELESS-HWC-MIB", "dasReplayInterval"), ("HIPATH-WIRELESS-HWC-MIB", "dasPort"), ("HIPATH-WIRELESS-HWC-MIB", "vnsEnabled"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterRuleOrder"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterRuleDirection"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterAction"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterMask"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterPortLow"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterPortHigh"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterProtocol"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterEtherType"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAPFilterRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStrictSubnetAdherence"), ("HIPATH-WIRELESS-HWC-MIB", "vnsSLPEnabled"), ("HIPATH-WIRELESS-HWC-MIB", "imagePath36xx"), ("HIPATH-WIRELESS-HWC-MIB", "imagePath26xx"), ("HIPATH-WIRELESS-HWC-MIB", "tftpSever"), ("HIPATH-WIRELESS-HWC-MIB", "imageVersionOfap26xx"), ("HIPATH-WIRELESS-HWC-MIB", "imageVersionOfngap36xx"), ("HIPATH-WIRELESS-HWC-MIB", "topoExceptionFiterName"), ("HIPATH-WIRELESS-HWC-MIB", "topoExceptionStatPktsDenied"), ("HIPATH-WIRELESS-HWC-MIB", "topoExceptionStatPktsAllowed"), ("HIPATH-WIRELESS-HWC-MIB", "synchronizeSystemConfig"), ("HIPATH-WIRELESS-HWC-MIB", "availabilityStatus"), ("HIPATH-WIRELESS-HWC-MIB", "pairIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "hwcAvailabilityRank"), ("HIPATH-WIRELESS-HWC-MIB", "fastFailover"), ("HIPATH-WIRELESS-HWC-MIB", "synchronizeGuestPort"), ("HIPATH-WIRELESS-HWC-MIB", "tunnelStatsTxBytes"), ("HIPATH-WIRELESS-HWC-MIB", "apRegistrationRequests"), ("HIPATH-WIRELESS-HWC-MIB", "vnForeignClients"), ("HIPATH-WIRELESS-HWC-MIB", "vnLocalClients"), ("HIPATH-WIRELESS-HWC-MIB", "apStatsSessionDuration"), ("HIPATH-WIRELESS-HWC-MIB", "detectLinkFailure"), ("HIPATH-WIRELESS-HWC-MIB", "apRegUseClusterEncryption"), ("HIPATH-WIRELESS-HWC-MIB", "apRegClusterSharedSecret"), ("HIPATH-WIRELESS-HWC-MIB", "apRegDiscoveryRetries"), ("HIPATH-WIRELESS-HWC-MIB", "apRegDiscoveryInterval"), ("HIPATH-WIRELESS-HWC-MIB", "apRegTelnetPassword"), ("HIPATH-WIRELESS-HWC-MIB", "apRegSSHPassword"), ("HIPATH-WIRELESS-HWC-MIB", "apRegSecurityMode"), ("HIPATH-WIRELESS-HWC-MIB", "vnTotalClients"), ("HIPATH-WIRELESS-HWC-MIB", "tunnelStatsRxBytes"), ("HIPATH-WIRELESS-HWC-MIB", "tunnelStatsTxRxBytes"), ("HIPATH-WIRELESS-HWC-MIB", "tunnelsTxRxBytes"), ("HIPATH-WIRELESS-HWC-MIB", "clearAccessRejectMsg"), ("HIPATH-WIRELESS-HWC-MIB", "armCount"), ("HIPATH-WIRELESS-HWC-MIB", "armReplyMessage"), ("HIPATH-WIRELESS-HWC-MIB", "apLinkTimeout"), ("HIPATH-WIRELESS-HWC-MIB", "apFastFailoverEnable"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatFrameTooLongErrors"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatFrameChkSeqErrors"), ("HIPATH-WIRELESS-HWC-MIB", "vnsConfigWLANID"), ("HIPATH-WIRELESS-HWC-MIB", "wlanVNSID"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivPrivacyType"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivWEPKeyIndex"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivWEPKeyLength"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivWEPKey"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivWPAv1EncryptionType"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivWPAv2EncryptionType")], [("HIPATH-WIRELESS-HWC-MIB", "wlanPrivKeyManagement"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivBroadcastRekeying"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivRekeyInterval"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivGroupKPSR"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivWPAPSK"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivWPAversion"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivfastTransition"), ("HIPATH-WIRELESS-HWC-MIB", "wlanPrivManagementFrameProtection"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthType"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthMacBasedAuth"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthMACBasedAuthOnRoam"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthAutoAuthAuthorizedUser"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthAllowUnauthorizedUser"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusIncludeAP"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusIncludeVNS"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusIncludeSSID"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusIncludePolicy"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusIncludeTopology"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusIncludeIngressRC"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusIncludeEgressRC"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthCollectAcctInformation"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthReplaceCalledStationIDWithZone"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusAcctAfterMacBaseAuthorization"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusTimeoutRole"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusOperatorNameSpace"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthRadiusOperatorName"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAuthMACBasedAuthReAuthOnAreaRoam"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusName"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusUsage"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusPriority"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusPort"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusRetries"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusTimeout"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusNASUseVnsIP"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusNASIP"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusNASIDUseVNSName"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusNASID"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusAuthType"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPAuthType"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCP802HttpRedirect"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPExtConnection"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPExtPort"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPExtEnableHttps"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPExtSharedSecret"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPExtTosOverride"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPExtTosValue"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPGuestAccLifetime"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPGuestSessionLifetime"), ("HIPATH-WIRELESS-HWC-MIB", "loadGrpRadiosRadio1"), ("HIPATH-WIRELESS-HWC-MIB", "loadGrpRadiosRadio2"), ("HIPATH-WIRELESS-HWC-MIB", "loadGrpWlanAssigned"), ("HIPATH-WIRELESS-HWC-MIB", "schedule"), ("HIPATH-WIRELESS-HWC-MIB", "startHour"), ("HIPATH-WIRELESS-HWC-MIB", "startMinute"), ("HIPATH-WIRELESS-HWC-MIB", "duration"), ("HIPATH-WIRELESS-HWC-MIB", "recurrenceDaily"), ("HIPATH-WIRELESS-HWC-MIB", "recurrenceWeekly"), ("HIPATH-WIRELESS-HWC-MIB", "recurrenceMonthly"), ("HIPATH-WIRELESS-HWC-MIB", "apPlatforms"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPIntLogoffButton"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPIntStatusCheckButton"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPRedirectURL"), ("HIPATH-WIRELESS-HWC-MIB", "apRadioProtocol"), ("HIPATH-WIRELESS-HWC-MIB", "apRadioNumber"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPReplaceIPwithFQDN"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPSendLoginTo"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPGuestAllowedLifetimeAcct"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPGuestIDPrefix"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPGuestMinPassLength"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPGuestMaxConcurrentSession"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPExtAddIPtoURL"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPUseHTTPSforConnection"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPIdentity"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPCustomSpecificURL"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPSelectionOption"), ("HIPATH-WIRELESS-HWC-MIB", "wlanCPExtEncryption"), ("HIPATH-WIRELESS-HWC-MIB", "radiusStrictMode"), ("HIPATH-WIRELESS-HWC-MIB", "advancedFilteringMode"), ("HIPATH-WIRELESS-HWC-MIB", "weakCipherEnable"), ("HIPATH-WIRELESS-HWC-MIB", "stationEventType"), ("HIPATH-WIRELESS-HWC-MIB", "stationMacAddress"), ("HIPATH-WIRELESS-HWC-MIB", "stationIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "stationAPName"), ("HIPATH-WIRELESS-HWC-MIB", "stationAPSSID"), ("HIPATH-WIRELESS-HWC-MIB", "stationDetailEvent"), ("HIPATH-WIRELESS-HWC-MIB", "stationRoamedAPName"), ("HIPATH-WIRELESS-HWC-MIB", "stationName"), ("HIPATH-WIRELESS-HWC-MIB", "stationBSSID"), ("HIPATH-WIRELESS-HWC-MIB", "stationEventTimeStamp"), ("HIPATH-WIRELESS-HWC-MIB", "stationIPv6Address1"), ("HIPATH-WIRELESS-HWC-MIB", "stationIPv6Address2"), ("HIPATH-WIRELESS-HWC-MIB", "stationIPv6Address3"), ("HIPATH-WIRELESS-HWC-MIB", "clientAutologinOption"), ("HIPATH-WIRELESS-HWC-MIB", "radiusMacAddressFormatOption"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerName"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerUse"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerUsage"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerAuthNASIP"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerAuthNASId"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerAuthAuthType"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerAcctNASIP"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerAcctNASId"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerAcctSIAR"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerMacNASIP"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerMacNASId"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerMacAuthType"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerMacPW"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerAuthUseVNSIPAddr"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerAuthUseVNSName"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerAcctUseVNSIPAddr"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerAcctUseVNSName"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerMacUseVNSIPAddr"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadiusServerMacUseVNSName")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        hiPathWirelessHWCGroup = hiPathWirelessHWCGroup.setObjects(*_hiPathWirelessHWCGroup_obj)
    else:
        hiPathWirelessHWCGroup = hiPathWirelessHWCGroup.setObjects(*_hiPathWirelessHWCGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hiPathWirelessHWCGroup = hiPathWirelessHWCGroup.setStatus('current')
hiPathWirelessHWCAlarms = NotificationGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 3)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "hiPathWirelessLogAlarm"), ("HIPATH-WIRELESS-HWC-MIB", "stationEventAlarm"), ("HIPATH-WIRELESS-HWC-MIB", "apTunnelAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hiPathWirelessHWCAlarms = hiPathWirelessHWCAlarms.setStatus('current')
hiPathWirelessHWCObsolete = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 4)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "vnsWDSRFAPName"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSRFbgService"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSRFaService"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSRFPreferredParent"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSRFBackupParent"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSRFBridge"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRateControlProfInd"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRateControlProfName"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRateControlCIR"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRateControlCBS"), ("HIPATH-WIRELESS-HWC-MIB", "vnsExceptionFiterName"), ("HIPATH-WIRELESS-HWC-MIB", "vnsExceptionStatPktsDenied"), ("HIPATH-WIRELESS-HWC-MIB", "vnsExceptionStatPktsAllowed"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatAPName"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatAPRole"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatAPRadio"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatAPParent"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatSSID"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatRxFrame"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatTxFrame"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatRxError"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatTxError"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatRxRSSI"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatRxRate"), ("HIPATH-WIRELESS-HWC-MIB", "vnsAssignmentMode"), ("HIPATH-WIRELESS-HWC-MIB", "vnsParentIfIndex"), ("HIPATH-WIRELESS-HWC-MIB", "externalRadiusServerName"), ("HIPATH-WIRELESS-HWC-MIB", "externalRadiusServerAddress"), ("HIPATH-WIRELESS-HWC-MIB", "externalRadiusServerSharedSecret"), ("HIPATH-WIRELESS-HWC-MIB", "externalRadiusServerRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "cpLoginLabel"), ("HIPATH-WIRELESS-HWC-MIB", "cpPasswordLabel"), ("HIPATH-WIRELESS-HWC-MIB", "cpHeaderURL"), ("HIPATH-WIRELESS-HWC-MIB", "cpFooterURL"), ("HIPATH-WIRELESS-HWC-MIB", "cpMessage"), ("HIPATH-WIRELESS-HWC-MIB", "cpURL"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroupLoadControl"), ("HIPATH-WIRELESS-HWC-MIB", "vnsWDSStatTxRate"), ("HIPATH-WIRELESS-HWC-MIB", "vnsRateControlProfile"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatName"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatTxOctects"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatRxOctects"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatMulticastTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatMulticastRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatBroadcastTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatBroadcastRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatRadiusTotRequests"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatRadiusReqFailed"), ("HIPATH-WIRELESS-HWC-MIB", "vnsStatRadiusReqRejected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hiPathWirelessHWCObsolete = hiPathWirelessHWCObsolete.setStatus('obsolete')
wirelessEWCGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5))
physicalPortsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 1)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "portMgmtTrafficEnable"), ("HIPATH-WIRELESS-HWC-MIB", "portDuplexMode"), ("HIPATH-WIRELESS-HWC-MIB", "portFunction"), ("HIPATH-WIRELESS-HWC-MIB", "portName"), ("HIPATH-WIRELESS-HWC-MIB", "portIpAddress"), ("HIPATH-WIRELESS-HWC-MIB", "portMask"), ("HIPATH-WIRELESS-HWC-MIB", "portVlanID"), ("HIPATH-WIRELESS-HWC-MIB", "portDHCPEnable"), ("HIPATH-WIRELESS-HWC-MIB", "portDHCPGateway"), ("HIPATH-WIRELESS-HWC-MIB", "portDHCPDomain"), ("HIPATH-WIRELESS-HWC-MIB", "portDHCPDefaultLease"), ("HIPATH-WIRELESS-HWC-MIB", "portDHCPMaxLease"), ("HIPATH-WIRELESS-HWC-MIB", "portDHCPDnsServers"), ("HIPATH-WIRELESS-HWC-MIB", "portDHCPWins"), ("HIPATH-WIRELESS-HWC-MIB", "portEnabled"), ("HIPATH-WIRELESS-HWC-MIB", "portMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    physicalPortsGroup = physicalPortsGroup.setStatus('deprecated')
phyDHCPRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 2)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "phyDHCPRangeIndex"), ("HIPATH-WIRELESS-HWC-MIB", "phyDHCPRangeStart"), ("HIPATH-WIRELESS-HWC-MIB", "phyDHCPRangeEnd"), ("HIPATH-WIRELESS-HWC-MIB", "phyDHCPRangeType"), ("HIPATH-WIRELESS-HWC-MIB", "phyDHCPRangeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyDHCPRangeGroup = phyDHCPRangeGroup.setStatus('deprecated')
layerTwoPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 3)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "layerTwoPortName"), ("HIPATH-WIRELESS-HWC-MIB", "layerTwoPortMacAddress"), ("HIPATH-WIRELESS-HWC-MIB", "layerTwoPortMgmtState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    layerTwoPortGroup = layerTwoPortGroup.setStatus('current')
muGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 4)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "muMACAddress"), ("HIPATH-WIRELESS-HWC-MIB", "muIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "muUser"), ("HIPATH-WIRELESS-HWC-MIB", "muState"), ("HIPATH-WIRELESS-HWC-MIB", "muAPSerialNo"), ("HIPATH-WIRELESS-HWC-MIB", "muVnsSSID"), ("HIPATH-WIRELESS-HWC-MIB", "muTxPackets"), ("HIPATH-WIRELESS-HWC-MIB", "muRxPackets"), ("HIPATH-WIRELESS-HWC-MIB", "muTxOctets"), ("HIPATH-WIRELESS-HWC-MIB", "muRxOctets"), ("HIPATH-WIRELESS-HWC-MIB", "muDuration"), ("HIPATH-WIRELESS-HWC-MIB", "muAPName"), ("HIPATH-WIRELESS-HWC-MIB", "muWLANID"), ("HIPATH-WIRELESS-HWC-MIB", "muConnectionProtocol"), ("HIPATH-WIRELESS-HWC-MIB", "muTopologyName"), ("HIPATH-WIRELESS-HWC-MIB", "muPolicyName"), ("HIPATH-WIRELESS-HWC-MIB", "muDefaultCoS"), ("HIPATH-WIRELESS-HWC-MIB", "muConnectionCapability"), ("HIPATH-WIRELESS-HWC-MIB", "muBSSIDMac"), ("HIPATH-WIRELESS-HWC-MIB", "muDot11ConnectionCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    muGroup = muGroup.setStatus('current')
apStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 5)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "apInUcastPkts"), ("HIPATH-WIRELESS-HWC-MIB", "apInNUcastPkts"), ("HIPATH-WIRELESS-HWC-MIB", "apInOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apInErrors"), ("HIPATH-WIRELESS-HWC-MIB", "apInDiscards"), ("HIPATH-WIRELESS-HWC-MIB", "apOutUcastPkts"), ("HIPATH-WIRELESS-HWC-MIB", "apOutNUcastPkts"), ("HIPATH-WIRELESS-HWC-MIB", "apOutOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apOutErrors"), ("HIPATH-WIRELESS-HWC-MIB", "apOutDiscards"), ("HIPATH-WIRELESS-HWC-MIB", "apUpTime"), ("HIPATH-WIRELESS-HWC-MIB", "apCredentialType"), ("HIPATH-WIRELESS-HWC-MIB", "apCertificateExpiry"), ("HIPATH-WIRELESS-HWC-MIB", "apStatsMuCounts"), ("HIPATH-WIRELESS-HWC-MIB", "apStatsSessionDuration"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsA"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsB"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsG"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsN50"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsN24"), ("HIPATH-WIRELESS-HWC-MIB", "apInvalidPolicyCount"), ("HIPATH-WIRELESS-HWC-MIB", "apInterfaceMTU"), ("HIPATH-WIRELESS-HWC-MIB", "apEffectiveTunnelMTU"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsAC"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsAInOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsAOutOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsBInOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsBOutOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsGInOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsGOutOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsN50InOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsN50OutOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsN24InOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsN24OutOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsACInOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apTotalStationsACOutOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apRadioStatusChannel"), ("HIPATH-WIRELESS-HWC-MIB", "apRadioStatusChannelWidth"), ("HIPATH-WIRELESS-HWC-MIB", "apRadioStatusChannelOffset"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioPrevPeakChannelUtilization"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioCurPeakChannelUtilization"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioAverageChannelUtilization"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioCurrentChannelUtilization"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioPrevPeakRSS"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioCurPeakRSS"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioAverageRSS"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioCurrentRSS"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioPrevPeakSNR"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioCurPeakSNR"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioAverageSNR"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioCurrentSNR"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioPrevPeakPktRetx"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioCurPeakPktRetx"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioAveragePktRetx"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioCurrentPktRetx"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfRadioPktRetx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccPrevPeakAssocReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccCurPeakAssocReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccAverageAssocReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccCurrentAssocReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccAssocReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccPrevPeakReassocReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccCurPeakReassocReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccAverageReassocReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccCurrentReassocReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccReassocReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccPrevPeakDisassocDeauthReqTx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccCurPeakDisassocDeauthReqTx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccAverageDisassocDeauthReqTx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccCurrentDisassocDeauthReqTx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccDisassocDeauthReqTx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccPrevPeakDisassocDeauthReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccCurPeakDisassocDeauthReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccAverageDisassocDeauthReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccCurrentDisassocDeauthReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apAccDisassocDeauthReqRx"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanPrevPeakClientsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanCurPeakClientsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanAverageClientsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanCurrentClientsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanPrevPeakULOctetsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanCurPeakULOctetsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanAverageULOctetsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanCurrentULOctetsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanULOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanPrevPeakULPktsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanCurPeakULPktsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanAverageULPktsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanCurrentULPktsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanULPkts"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanPrevPeakDLOctetsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanCurPeakDLOctetsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanAverageDLOctetsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanCurrentDLOctetsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanDLOctets"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanPrevPeakDLPktsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanCurPeakDLPktsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanAverageDLPktsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanCurrentDLPktsPerSec"), ("HIPATH-WIRELESS-HWC-MIB", "apPerfWlanDLPkts"), ("HIPATH-WIRELESS-HWC-MIB", "apChnlUtilPrevPeakUtilization"), ("HIPATH-WIRELESS-HWC-MIB", "apChnlUtilCurPeakUtilization"), ("HIPATH-WIRELESS-HWC-MIB", "apChnlUtilAverageUtilization"), ("HIPATH-WIRELESS-HWC-MIB", "apChnlUtilCurrentUtilization"), ("HIPATH-WIRELESS-HWC-MIB", "nearbyApInfo"), ("HIPATH-WIRELESS-HWC-MIB", "nearbyApBSSID"), ("HIPATH-WIRELESS-HWC-MIB", "nearbyApChannel"), ("HIPATH-WIRELESS-HWC-MIB", "nearbyApRSS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apStatsGroup = apStatsGroup.setStatus('current')
muACLGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 6)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "muACLRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "muACLMACAddress"), ("HIPATH-WIRELESS-HWC-MIB", "muACLType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    muACLGroup = muACLGroup.setStatus('current')
siteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 7)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "siteID"), ("HIPATH-WIRELESS-HWC-MIB", "siteName"), ("HIPATH-WIRELESS-HWC-MIB", "siteLocalRadiusAuthentication"), ("HIPATH-WIRELESS-HWC-MIB", "siteDefaultDNSServer"), ("HIPATH-WIRELESS-HWC-MIB", "siteMaxEntries"), ("HIPATH-WIRELESS-HWC-MIB", "siteNumEntries"), ("HIPATH-WIRELESS-HWC-MIB", "siteTableNextAvailableIndex"), ("HIPATH-WIRELESS-HWC-MIB", "siteEnableSecureTunnel"), ("HIPATH-WIRELESS-HWC-MIB", "siteReplaceStnIDwithSiteName"), ("HIPATH-WIRELESS-HWC-MIB", "siteRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "siteEncryptCommAPtoController"), ("HIPATH-WIRELESS-HWC-MIB", "siteEncryptCommBetweenAPs"), ("HIPATH-WIRELESS-HWC-MIB", "siteBandPreferenceEnable"), ("HIPATH-WIRELESS-HWC-MIB", "siteLoadControlEnableR1"), ("HIPATH-WIRELESS-HWC-MIB", "siteLoadControlEnableR2"), ("HIPATH-WIRELESS-HWC-MIB", "siteMaxClientR1"), ("HIPATH-WIRELESS-HWC-MIB", "siteMaxClientR2"), ("HIPATH-WIRELESS-HWC-MIB", "siteStrictLimitEnableR1"), ("HIPATH-WIRELESS-HWC-MIB", "siteStrictLimitEnableR2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    siteGroup = siteGroup.setStatus('current')
sitePolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 8)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "sitePolicyMember"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sitePolicyGroup = sitePolicyGroup.setStatus('current')
siteCosGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 9)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "siteCoSMember"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    siteCosGroup = siteCosGroup.setStatus('current')
siteAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 10)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "siteAPMember"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    siteAPGroup = siteAPGroup.setStatus('current')
siteWlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 11)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "siteWlanApRadioAssigned"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    siteWlanGroup = siteWlanGroup.setStatus('current')
apGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 12)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "apIndex"), ("HIPATH-WIRELESS-HWC-MIB", "apName"), ("HIPATH-WIRELESS-HWC-MIB", "apDesc"), ("HIPATH-WIRELESS-HWC-MIB", "apSerialNumber"), ("HIPATH-WIRELESS-HWC-MIB", "apPortifIndex"), ("HIPATH-WIRELESS-HWC-MIB", "apWiredIfIndex"), ("HIPATH-WIRELESS-HWC-MIB", "apSoftwareVersion"), ("HIPATH-WIRELESS-HWC-MIB", "apSpecific"), ("HIPATH-WIRELESS-HWC-MIB", "apBroadcastDisassociate"), ("HIPATH-WIRELESS-HWC-MIB", "apRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "apVlanID"), ("HIPATH-WIRELESS-HWC-MIB", "apIpAssignmentType"), ("HIPATH-WIRELESS-HWC-MIB", "apIfMAC"), ("HIPATH-WIRELESS-HWC-MIB", "apHwVersion"), ("HIPATH-WIRELESS-HWC-MIB", "apSwVersion"), ("HIPATH-WIRELESS-HWC-MIB", "apEnvironment"), ("HIPATH-WIRELESS-HWC-MIB", "apHome"), ("HIPATH-WIRELESS-HWC-MIB", "apRole"), ("HIPATH-WIRELESS-HWC-MIB", "apState"), ("HIPATH-WIRELESS-HWC-MIB", "apStatus"), ("HIPATH-WIRELESS-HWC-MIB", "apPollTimeout"), ("HIPATH-WIRELESS-HWC-MIB", "apPollInterval"), ("HIPATH-WIRELESS-HWC-MIB", "apTelnetAccess"), ("HIPATH-WIRELESS-HWC-MIB", "apMaintainClientSession"), ("HIPATH-WIRELESS-HWC-MIB", "apRestartServiceContAbsent"), ("HIPATH-WIRELESS-HWC-MIB", "apHostname"), ("HIPATH-WIRELESS-HWC-MIB", "apLocation"), ("HIPATH-WIRELESS-HWC-MIB", "apStaticMTUsize"), ("HIPATH-WIRELESS-HWC-MIB", "apSiteID"), ("HIPATH-WIRELESS-HWC-MIB", "apZone"), ("HIPATH-WIRELESS-HWC-MIB", "apLLDP"), ("HIPATH-WIRELESS-HWC-MIB", "apLEDMode"), ("HIPATH-WIRELESS-HWC-MIB", "apLocationbasedService"), ("HIPATH-WIRELESS-HWC-MIB", "apSecureTunnel"), ("HIPATH-WIRELESS-HWC-MIB", "apEncryptCntTraffic"), ("HIPATH-WIRELESS-HWC-MIB", "apIpAddress"), ("HIPATH-WIRELESS-HWC-MIB", "apMICErrorWarning"), ("HIPATH-WIRELESS-HWC-MIB", "apIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "apSecureDataTunnelType"), ("HIPATH-WIRELESS-HWC-MIB", "apIPMulticastAssembly"), ("HIPATH-WIRELESS-HWC-MIB", "apSSHConnection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroup = apGroup.setStatus('current')
wlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 13)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "wlanID"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "wlanServiceType"), ("HIPATH-WIRELESS-HWC-MIB", "wlanName"), ("HIPATH-WIRELESS-HWC-MIB", "wlanSSID"), ("HIPATH-WIRELESS-HWC-MIB", "wlanSynchronize"), ("HIPATH-WIRELESS-HWC-MIB", "wlanEnabled"), ("HIPATH-WIRELESS-HWC-MIB", "wlanDefaultTopologyID"), ("HIPATH-WIRELESS-HWC-MIB", "wlanSessionTimeout"), ("HIPATH-WIRELESS-HWC-MIB", "wlanIdleTimeoutPreAuth"), ("HIPATH-WIRELESS-HWC-MIB", "wlanIdleSessionPostAuth"), ("HIPATH-WIRELESS-HWC-MIB", "wlanSupressSSID"), ("HIPATH-WIRELESS-HWC-MIB", "wlanDot11hSupport"), ("HIPATH-WIRELESS-HWC-MIB", "wlanDot11hClientPowerReduction"), ("HIPATH-WIRELESS-HWC-MIB", "wlanProcessClientIE"), ("HIPATH-WIRELESS-HWC-MIB", "wlanEngerySaveMode"), ("HIPATH-WIRELESS-HWC-MIB", "wlanBlockMuToMuTraffic"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRemoteable"), ("HIPATH-WIRELESS-HWC-MIB", "wlanVNSID"), ("HIPATH-WIRELESS-HWC-MIB", "wlanMaxEntries"), ("HIPATH-WIRELESS-HWC-MIB", "wlanRadioManagement11k"), ("HIPATH-WIRELESS-HWC-MIB", "wlanBeaconReport"), ("HIPATH-WIRELESS-HWC-MIB", "wlanQuietIE"), ("HIPATH-WIRELESS-HWC-MIB", "wlanMirrorN"), ("HIPATH-WIRELESS-HWC-MIB", "wlanNetFlow"), ("HIPATH-WIRELESS-HWC-MIB", "wlanAppVisibility"), ("HIPATH-WIRELESS-HWC-MIB", "wlanNumEntries"), ("HIPATH-WIRELESS-HWC-MIB", "wlanTableNextAvailableIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wlanGroup = wlanGroup.setStatus('current')
wlanStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 14)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "wlanStatsAssociatedClients"), ("HIPATH-WIRELESS-HWC-MIB", "wlanStatsRadiusTotRequests"), ("HIPATH-WIRELESS-HWC-MIB", "wlanStatsRadiusReqFailed"), ("HIPATH-WIRELESS-HWC-MIB", "wlanStatsRadiusReqRejected"), ("HIPATH-WIRELESS-HWC-MIB", "wlanStatsID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wlanStatsGroup = wlanStatsGroup.setStatus('current')
topologyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 15)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "topologyName"), ("HIPATH-WIRELESS-HWC-MIB", "topologyMode"), ("HIPATH-WIRELESS-HWC-MIB", "topologyTagged"), ("HIPATH-WIRELESS-HWC-MIB", "topologyVlanID"), ("HIPATH-WIRELESS-HWC-MIB", "topologyEgressPort"), ("HIPATH-WIRELESS-HWC-MIB", "topologyLayer3"), ("HIPATH-WIRELESS-HWC-MIB", "topologyIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "topologyIPMask"), ("HIPATH-WIRELESS-HWC-MIB", "topologyMTUsize"), ("HIPATH-WIRELESS-HWC-MIB", "topologyGateway"), ("HIPATH-WIRELESS-HWC-MIB", "topologyDHCPUsage"), ("HIPATH-WIRELESS-HWC-MIB", "topologyAPRegistration"), ("HIPATH-WIRELESS-HWC-MIB", "topologyManagementTraffic"), ("HIPATH-WIRELESS-HWC-MIB", "topologySynchronize"), ("HIPATH-WIRELESS-HWC-MIB", "topologySyncGateway"), ("HIPATH-WIRELESS-HWC-MIB", "topologySyncMask"), ("HIPATH-WIRELESS-HWC-MIB", "topologySyncIPStart"), ("HIPATH-WIRELESS-HWC-MIB", "topologySyncIPEnd"), ("HIPATH-WIRELESS-HWC-MIB", "topologyStaticIPv6Address"), ("HIPATH-WIRELESS-HWC-MIB", "topologyLinkLocalIPv6Address"), ("HIPATH-WIRELESS-HWC-MIB", "topologyPreFixLength"), ("HIPATH-WIRELESS-HWC-MIB", "topologyIPv6Gateway"), ("HIPATH-WIRELESS-HWC-MIB", "topologyDynamicEgress"), ("HIPATH-WIRELESS-HWC-MIB", "topologyIsGroup"), ("HIPATH-WIRELESS-HWC-MIB", "topologyGroupMembers"), ("HIPATH-WIRELESS-HWC-MIB", "topologyMemberId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    topologyGroup = topologyGroup.setStatus('current')
topologyStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 16)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "topologyName"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatName"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatTxOctets"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatRxOctets"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatMulticastTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatMulticastRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatBroadcastTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatBroadcastRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatFrameChkSeqErrors"), ("HIPATH-WIRELESS-HWC-MIB", "topoStatFrameTooLongErrors"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatName"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatTxOctets"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatRxOctets"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatMulticastTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatMulticastRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatBroadcastTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatBroadcastRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatFrameChkSeqErrors"), ("HIPATH-WIRELESS-HWC-MIB", "topoWireStatFrameTooLongErrors"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatName"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatTxOctets"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatRxOctets"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatMulticastTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatMulticastRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatBroadcastTxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatBroadcastRxPkts"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatFrameChkSeqErrors"), ("HIPATH-WIRELESS-HWC-MIB", "topoCompleteStatFrameTooLongErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    topologyStatGroup = topologyStatGroup.setStatus('current')
loadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 17)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "loadGroupID"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroupName"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroupType"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroupBandPreference"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroupClientCountRadio1"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroupClientCountRadio2"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroupLoadControlEnableR1"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroupLoadControlEnableR2"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroupLoadControlStrictLimitR1"), ("HIPATH-WIRELESS-HWC-MIB", "loadGroupLoadControlStrictLimitR2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    loadGroup = loadGroup.setStatus('current')
widsWipsObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 18)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "mitigatorAnalysisEngine"), ("HIPATH-WIRELESS-HWC-MIB", "activeThreatsCounts"), ("HIPATH-WIRELESS-HWC-MIB", "uncategorizedAPCounts"), ("HIPATH-WIRELESS-HWC-MIB", "friendlyAPCounts"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupMaxEntries"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupsCurrentEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    widsWipsObjectsGroup = widsWipsObjectsGroup.setStatus('current')
widsWipsEngineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 19)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "widsWipsEngineRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "widsWipsEngineControllerIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "widsWipsEnginePollInterval"), ("HIPATH-WIRELESS-HWC-MIB", "widsWipsEnginePollRetry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    widsWipsEngineGroup = widsWipsEngineGroup.setStatus('current')
outOfServiceScanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 20)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "outOfSrvScanGrpName"), ("HIPATH-WIRELESS-HWC-MIB", "outOfSrvScanGrpRadio"), ("HIPATH-WIRELESS-HWC-MIB", "outOfSrvScanGrpChannelList"), ("HIPATH-WIRELESS-HWC-MIB", "outOfSrvScanGrpScanType"), ("HIPATH-WIRELESS-HWC-MIB", "outOfSrvScanGrpChannelDwellTime"), ("HIPATH-WIRELESS-HWC-MIB", "outOfSrvScanGrpScanTimeInterval"), ("HIPATH-WIRELESS-HWC-MIB", "outOfSrvScanGrpSecurityScan"), ("HIPATH-WIRELESS-HWC-MIB", "outOfSrvScanGrpScanActivity"), ("HIPATH-WIRELESS-HWC-MIB", "outOfSrvScanGrpScanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    outOfServiceScanGroup = outOfServiceScanGroup.setStatus('current')
inServiceScanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 21)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpName"), ("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpMaxConcurrentAttacksPerAP"), ("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpCounterMeasuresType"), ("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpScan2400MHzSelection"), ("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpScan5GHzSelection"), ("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpSecurityThreats"), ("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpblockAdHocClientsPeriod"), ("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpClassifySourceIF"), ("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpDetectRogueAP"), ("HIPATH-WIRELESS-HWC-MIB", "inSrvScanGrpListeningPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inServiceScanGroup = inServiceScanGroup.setStatus('current')
scanGroupAPAssignmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 22)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignApSerial"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignName"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignRadio1"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignRadio2"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignInactiveAP"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignAllowScanning"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignGroupName"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignAllowSpectrumAnalysis"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignControllerIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "scanGroupAPAssignFordwardingService"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scanGroupAPAssignmentGroup = scanGroupAPAssignmentGroup.setStatus('current')
scanAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 23)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "scanAPSerialNumber"), ("HIPATH-WIRELESS-HWC-MIB", "scanAPControllerIPAddress"), ("HIPATH-WIRELESS-HWC-MIB", "scanAPRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "scanAPAcessPointName"), ("HIPATH-WIRELESS-HWC-MIB", "scanAPProfileName"), ("HIPATH-WIRELESS-HWC-MIB", "scanAPProfileType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scanAPGroup = scanAPGroup.setStatus('current')
friendlyAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 24)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "friendlyAPMacAddress"), ("HIPATH-WIRELESS-HWC-MIB", "friendlyAPSSID"), ("HIPATH-WIRELESS-HWC-MIB", "friendlyAPDescription"), ("HIPATH-WIRELESS-HWC-MIB", "friendlyAPManufacturer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    friendlyAPGroup = friendlyAPGroup.setStatus('current')
wlanSecurityReportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 25)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "wlanSecurityReportFlag"), ("HIPATH-WIRELESS-HWC-MIB", "wlanSecurityReportUnsecureType"), ("HIPATH-WIRELESS-HWC-MIB", "wlanSecurityReportNotes"), ("HIPATH-WIRELESS-HWC-MIB", "wlanUnsecuredWlanCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wlanSecurityReportGroup = wlanSecurityReportGroup.setStatus('current')
apAntennaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 26)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "apAntennanName"), ("HIPATH-WIRELESS-HWC-MIB", "apAntennaType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apAntennaGroup = apAntennaGroup.setStatus('current')
muAccessListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 27)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "muAccessListMACAddress"), ("HIPATH-WIRELESS-HWC-MIB", "muAccessListBitmaskLength"), ("HIPATH-WIRELESS-HWC-MIB", "muAccessListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    muAccessListGroup = muAccessListGroup.setStatus('current')
activeThreatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 28)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "activeThreatCategory"), ("HIPATH-WIRELESS-HWC-MIB", "activeThreatDeviceMAC"), ("HIPATH-WIRELESS-HWC-MIB", "activeThreatDateTime"), ("HIPATH-WIRELESS-HWC-MIB", "activeThreatCounterMeasure"), ("HIPATH-WIRELESS-HWC-MIB", "activeThreatAPName"), ("HIPATH-WIRELESS-HWC-MIB", "activeThreatRSS"), ("HIPATH-WIRELESS-HWC-MIB", "activeThreatExtraDetails"), ("HIPATH-WIRELESS-HWC-MIB", "activeThreatThreat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    activeThreatGroup = activeThreatGroup.setStatus('current')
countermeasureAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 29)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "countermeasureAPName"), ("HIPATH-WIRELESS-HWC-MIB", "countermeasureAPThreatCategory"), ("HIPATH-WIRELESS-HWC-MIB", "countermeasureAPCountermeasure"), ("HIPATH-WIRELESS-HWC-MIB", "countermeasureAPTime"), ("HIPATH-WIRELESS-HWC-MIB", "countermeasureAPSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    countermeasureAPGroup = countermeasureAPGroup.setStatus('current')
blaclistedClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 30)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "blacklistedClientMAC"), ("HIPATH-WIRELESS-HWC-MIB", "blacklistedClientStatTime"), ("HIPATH-WIRELESS-HWC-MIB", "blacklistedClientEndTime"), ("HIPATH-WIRELESS-HWC-MIB", "blacklistedClientReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    blaclistedClientGroup = blaclistedClientGroup.setStatus('current')
threatSummaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 31)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "threatSummaryCategory"), ("HIPATH-WIRELESS-HWC-MIB", "threatSummaryActiveThreat"), ("HIPATH-WIRELESS-HWC-MIB", "threatSummaryHistoricalCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    threatSummaryGroup = threatSummaryGroup.setStatus('current')
licensingInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 32)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "licenseRegulatoryDomain"), ("HIPATH-WIRELESS-HWC-MIB", "licenseType"), ("HIPATH-WIRELESS-HWC-MIB", "licenseDaysRemaining"), ("HIPATH-WIRELESS-HWC-MIB", "licenseAvailableAP"), ("HIPATH-WIRELESS-HWC-MIB", "licenseInServiceRadarAP"), ("HIPATH-WIRELESS-HWC-MIB", "licenseMode"), ("HIPATH-WIRELESS-HWC-MIB", "licenseLocalAP"), ("HIPATH-WIRELESS-HWC-MIB", "licenseForeignAP"), ("HIPATH-WIRELESS-HWC-MIB", "licenseLocalRadarAP"), ("HIPATH-WIRELESS-HWC-MIB", "licenseForeignRadarAP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    licensingInformationGroup = licensingInformationGroup.setStatus('current')
stationsByProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 33)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "stationsByProtocolA"), ("HIPATH-WIRELESS-HWC-MIB", "stationsByProtocolB"), ("HIPATH-WIRELESS-HWC-MIB", "stationsByProtocolG"), ("HIPATH-WIRELESS-HWC-MIB", "stationsByProtocolN24"), ("HIPATH-WIRELESS-HWC-MIB", "stationsByProtocolN5"), ("HIPATH-WIRELESS-HWC-MIB", "stationsByProtocolUnavailable"), ("HIPATH-WIRELESS-HWC-MIB", "stationsByProtocolError"), ("HIPATH-WIRELESS-HWC-MIB", "stationsByProtocolAC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stationsByProtocolGroup = stationsByProtocolGroup.setStatus('current')
apByChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 34)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "apByChannelAPs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apByChannelGroup = apByChannelGroup.setStatus('current')
uncategorizedAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 35)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "uncategorizedAPDescption"), ("HIPATH-WIRELESS-HWC-MIB", "uncategorizedAPManufacturer"), ("HIPATH-WIRELESS-HWC-MIB", "uncategorizedAPClassify"), ("HIPATH-WIRELESS-HWC-MIB", "uncategorizedAPSSID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    uncategorizedAPGroup = uncategorizedAPGroup.setStatus('current')
authorizedAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 36)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "authorizedAPDescription"), ("HIPATH-WIRELESS-HWC-MIB", "authorizedAPManufacturer"), ("HIPATH-WIRELESS-HWC-MIB", "authorizedAPClassify"), ("HIPATH-WIRELESS-HWC-MIB", "authorizedAPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    authorizedAPGroup = authorizedAPGroup.setStatus('current')
prohibitedAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 37)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "prohibitedAPCategory"), ("HIPATH-WIRELESS-HWC-MIB", "prohibitedAPDescription"), ("HIPATH-WIRELESS-HWC-MIB", "prohibitedAPManufacturer"), ("HIPATH-WIRELESS-HWC-MIB", "prohibitedAPClassify"), ("HIPATH-WIRELESS-HWC-MIB", "prohibitedAPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prohibitedAPGroup = prohibitedAPGroup.setStatus('current')
dedicatedScanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 38)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpName"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpMaxConcurrentAttacksPerAP"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpCounterMeasures"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpScan2400MHzFreq"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpScan5GHzFreq"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpSecurityThreats"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpBlockAdHocPeriod"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpClassifySourceIF"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpDetectRogueAP"), ("HIPATH-WIRELESS-HWC-MIB", "dedicatedScanGrpListeningPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dedicatedScanGroup = dedicatedScanGroup.setStatus('current')
apRadioAntennaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 39)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "apRadioAntennaType"), ("HIPATH-WIRELESS-HWC-MIB", "apRadioAntennaModel"), ("HIPATH-WIRELESS-HWC-MIB", "apRadioAttenuation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRadioAntennaGroup = apRadioAntennaGroup.setStatus('current')
radiusFastFailoverEventsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 40)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "fastFailoverEvents"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    radiusFastFailoverEventsGroup = radiusFastFailoverEventsGroup.setStatus('current')
dhcpRelayListenersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 41)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "dhcpRelayListenersRowStatus"), ("HIPATH-WIRELESS-HWC-MIB", "destinationName"), ("HIPATH-WIRELESS-HWC-MIB", "destinationIP"), ("HIPATH-WIRELESS-HWC-MIB", "dhcpRelayListenersMaxEntries"), ("HIPATH-WIRELESS-HWC-MIB", "dhcpRelayListenersNextIndex"), ("HIPATH-WIRELESS-HWC-MIB", "dhcpRelayListenersNumEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dhcpRelayListenersGroup = dhcpRelayListenersGroup.setStatus('current')
authenticationAdvancedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 42)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "includeServiceType"), ("HIPATH-WIRELESS-HWC-MIB", "clientMessageDelayTime"), ("HIPATH-WIRELESS-HWC-MIB", "radiusAccounting"), ("HIPATH-WIRELESS-HWC-MIB", "serverUsageModel"), ("HIPATH-WIRELESS-HWC-MIB", "radacctStartOnIPAddr"), ("HIPATH-WIRELESS-HWC-MIB", "clientServiceTypeLogin"), ("HIPATH-WIRELESS-HWC-MIB", "applyMacAddressFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    authenticationAdvancedGroup = authenticationAdvancedGroup.setStatus('current')
radiusExtnsSettingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 30, 5, 43)).setObjects(("HIPATH-WIRELESS-HWC-MIB", "pollingMechanism"), ("HIPATH-WIRELESS-HWC-MIB", "serverPollingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    radiusExtnsSettingGroup = radiusExtnsSettingGroup.setStatus('current')
mibBuilder.exportSymbols("HIPATH-WIRELESS-HWC-MIB", topologyManagementTraffic=topologyManagementTraffic, apAccessibilityTable=apAccessibilityTable, siteCosEntry=siteCosEntry, apLocation=apLocation, loadGrpRadiosRadio1=loadGrpRadiosRadio1, scanGroupAPAssignRadio1=scanGroupAPAssignRadio1, wlanIdleSessionPostAuth=wlanIdleSessionPostAuth, mobileUnits=mobileUnits, synchronizeSystemConfig=synchronizeSystemConfig, apState=apState, apPerfRadioPrevPeakSNR=apPerfRadioPrevPeakSNR, muDuration=muDuration, radiusAccounting=radiusAccounting, activeThreatEntry=activeThreatEntry, siteAPGroup=siteAPGroup, stationsByProtocolAC=stationsByProtocolAC, prohibitedAPClassify=prohibitedAPClassify, portFunction=portFunction, stationsByProtocolN24=stationsByProtocolN24, apEffectiveTunnelMTU=apEffectiveTunnelMTU, countermeasureAPThreatCategory=countermeasureAPThreatCategory, wlanSecurityReportGroup=wlanSecurityReportGroup, topologySyncMask=topologySyncMask, apChnlUtilCurPeakUtilization=apChnlUtilCurPeakUtilization, blacklistedClientStatTime=blacklistedClientStatTime, apLinkTimeout=apLinkTimeout, apSpecific=apSpecific, wlanName=wlanName, wlanRadiusNASIP=wlanRadiusNASIP, tspecNMS=tspecNMS, loadGroupID=loadGroupID, stationIPv6Address3=stationIPv6Address3, outOfSrvScanGrpScanTimeInterval=outOfSrvScanGrpScanTimeInterval, vnsFilterRulePortHigh=vnsFilterRulePortHigh, apPlatforms=apPlatforms, vnsWDSStatAPRadio=vnsWDSStatAPRadio, vnsFilterRuleIPAddress=vnsFilterRuleIPAddress, vnsWDSRFTable=vnsWDSRFTable, ntpTimeServer3=ntpTimeServer3, pollingMechanism=pollingMechanism, muTSPECTable=muTSPECTable, licenseLocalAP=licenseLocalAP, maxVideoBWforAssociation=maxVideoBWforAssociation, vnsRadiusServerEntry=vnsRadiusServerEntry, apRole=apRole, siteCoSID=siteCoSID, apLogFileCopyEntry=apLogFileCopyEntry, apByChannelNumber=apByChannelNumber, activeThreatRSS=activeThreatRSS, scanAPGroup=scanAPGroup, friendlyAPGroup=friendlyAPGroup, vnsPrivWEPKeyLength=vnsPrivWEPKeyLength, vnsStatsObjects=vnsStatsObjects, radiusFFOEid=radiusFFOEid, hiPathWirelessLogAlarm=hiPathWirelessLogAlarm, topoExceptionStatPktsDenied=topoExceptionStatPktsDenied, inSrvScanGrpSecurityThreats=inSrvScanGrpSecurityThreats, apDesc=apDesc, wlanRadiusServerAuthUseVNSName=wlanRadiusServerAuthUseVNSName, vnsCaptivePortalEntry=vnsCaptivePortalEntry, vnsDHCPRangeEnd=vnsDHCPRangeEnd, apAccessibilityEntry=apAccessibilityEntry, apRegClusterSharedSecret=apRegClusterSharedSecret, wlanRadiusServerUsage=wlanRadiusServerUsage, apCount=apCount, phyDHCPRangeStatus=phyDHCPRangeStatus, vnsFilterRuleTable=vnsFilterRuleTable, wlanUnsecuredWlanCounts=wlanUnsecuredWlanCounts, apAccAverageDisassocDeauthReqTx=apAccAverageDisassocDeauthReqTx, apAccCurPeakReassocReqRx=apAccCurPeakReassocReqRx, vnsRadiusServerNASIdentifier=vnsRadiusServerNASIdentifier, stationIPv6Address1=stationIPv6Address1, vnsQoSPriorityOverrideFlag=vnsQoSPriorityOverrideFlag, accessRejectMsgEntry=accessRejectMsgEntry, vnsStatRadiusReqFailed=vnsStatRadiusReqFailed, maxBestEffortBWforAssociation=maxBestEffortBWforAssociation, externalRadiusServerName=externalRadiusServerName, inSrvScanGrpListeningPort=inSrvScanGrpListeningPort, vnsWINSServers=vnsWINSServers, topologyGroup=topologyGroup, dhcpRelayListeners=dhcpRelayListeners, apRadioProtocol=apRadioProtocol, wlanCPExtEncryption=wlanCPExtEncryption, apMaintainClientSession=apMaintainClientSession, vnsApplyPowerBackOff=vnsApplyPowerBackOff, layerTwoPortGroup=layerTwoPortGroup, muGroup=muGroup, licensingInformation=licensingInformation, tunnelStatus=tunnelStatus, vnsAllowMulticast=vnsAllowMulticast, wlanIdleTimeoutPreAuth=wlanIdleTimeoutPreAuth, topologyIPMask=topologyIPMask, apLEDMode=apLEDMode, muAccessListGroup=muAccessListGroup, apTotalStationsBInOctets=apTotalStationsBInOctets, topoWireStatMulticastRxPkts=topoWireStatMulticastRxPkts, widsWipsEnginePollRetry=widsWipsEnginePollRetry, siteCosGroup=siteCosGroup, vnsRateControlProfEntry=vnsRateControlProfEntry, vnsRateControlProfInd=vnsRateControlProfInd, threatSummaryIndex=threatSummaryIndex, vnsQoSPriorityOverrideDSCP=vnsQoSPriorityOverrideDSCP, apByChannelTable=apByChannelTable, topologyMemberId=topologyMemberId, serverPollingInterval=serverPollingInterval, wlanRadiusServerMacNASId=wlanRadiusServerMacNASId, apPerformanceReportByRadioEntry=apPerformanceReportByRadioEntry, topoStatName=topoStatName, loadGroupLoadControlEnableR1=loadGroupLoadControlEnableR1, siteGroup=siteGroup, portIpAddress=portIpAddress, protocols=protocols, apPerfWlanPrevPeakDLOctetsPerSec=apPerfWlanPrevPeakDLOctetsPerSec, wlanCPExtSharedSecret=wlanCPExtSharedSecret, wlanPrivKeyManagement=wlanPrivKeyManagement, apWiredIfIndex=apWiredIfIndex, apCredentialType=apCredentialType, siteEncryptCommAPtoController=siteEncryptCommAPtoController, apStatsEntry=apStatsEntry, muACLEntry=muACLEntry, apNeighboursEntry=apNeighboursEntry, jumboFrames=jumboFrames, widsWipsEnginePollInterval=widsWipsEnginePollInterval, inSrvScanGrpMaxConcurrentAttacksPerAP=inSrvScanGrpMaxConcurrentAttacksPerAP, hiPathWirelessAppLogFacility=hiPathWirelessAppLogFacility, vnsStatBroadcastRxPkts=vnsStatBroadcastRxPkts, portDHCPDomain=portDHCPDomain, licenseType=licenseType, vnsDomain=vnsDomain, dasReplayInterval=dasReplayInterval, apPerfRadioPktRetx=apPerfRadioPktRetx, layerTwoPortMacAddress=layerTwoPortMacAddress, vnsStrictSubnetAdherence=vnsStrictSubnetAdherence, netflowInterval=netflowInterval, mobileUnitCount=mobileUnitCount, vnsPrivWPASharedKey=vnsPrivWPASharedKey, muTxOctets=muTxOctets, stationsByProtocol=stationsByProtocol, authorizedAPTable=authorizedAPTable, vnsRadiusServerTimeout=vnsRadiusServerTimeout, dedicatedScanGrpRowStatus=dedicatedScanGrpRowStatus, apStatsTable=apStatsTable, vnsQoSWireless80211eFlag=vnsQoSWireless80211eFlag, apAntennaIndex=apAntennaIndex, secureConnection=secureConnection, topologyTable=topologyTable, scanAPProfileType=scanAPProfileType, wlanRadiusServerAcctNASId=wlanRadiusServerAcctNASId, vnsAPFilterPortHigh=vnsAPFilterPortHigh, scanGroupsCurrentEntries=scanGroupsCurrentEntries, activeThreatCategory=activeThreatCategory, friendlyAPDescription=friendlyAPDescription, stationsByProtocolError=stationsByProtocolError, apActiveCount=apActiveCount, topoCompleteStatBroadcastTxPkts=topoCompleteStatBroadcastTxPkts, apOutErrors=apOutErrors, siteCosTable=siteCosTable, topologySynchronize=topologySynchronize, vnsStatRadiusReqRejected=vnsStatRadiusReqRejected, mirrorL2Ports=mirrorL2Ports, wlanSupressSSID=wlanSupressSSID, apTotalStationsAC=apTotalStationsAC, prohibitedAPDescription=prohibitedAPDescription, clientServiceTypeLogin=clientServiceTypeLogin, includeAllServiceMessages=includeAllServiceMessages, mirrorFirstN=mirrorFirstN, radiusFastFailoverEventsTable=radiusFastFailoverEventsTable, topoExceptionStatEntry=topoExceptionStatEntry, outOfSrvScanGrpSecurityScan=outOfSrvScanGrpSecurityScan, wlanNetFlow=wlanNetFlow, tunnelStatsTable=tunnelStatsTable, loadGroupClientCountRadio2=loadGroupClientCountRadio2, inSrvScanGrpClassifySourceIF=inSrvScanGrpClassifySourceIF, prohibitedAPTable=prohibitedAPTable, uncategorizedAPTable=uncategorizedAPTable, vnsWDSStatAPRole=vnsWDSStatAPRole, apSiteID=apSiteID, loadGroupBandPreference=loadGroupBandPreference, outOfSrvScanGrpScanType=outOfSrvScanGrpScanType, netflowDestinationIP=netflowDestinationIP, loadGrpWlanEntry=loadGrpWlanEntry, prohibitedAPGroup=prohibitedAPGroup, muACLType=muACLType, apCertificateExpiry=apCertificateExpiry, apLogFileUtility=apLogFileUtility, cpHeaderURL=cpHeaderURL, wlanVNSID=wlanVNSID, vnsIfIndex=vnsIfIndex, wlanAuthRadiusOperatorName=wlanAuthRadiusOperatorName, tspecDlViolations=tspecDlViolations, assocEntry=assocEntry, apLLDP=apLLDP, apIpAssignmentType=apIpAssignmentType, tunnelsTxRxBytes=tunnelsTxRxBytes, vnsExceptionFiterName=vnsExceptionFiterName, externalRadiusServerRowStatus=externalRadiusServerRowStatus, hiPathWirelessHWCObsolete=hiPathWirelessHWCObsolete, siteLoadControlEnableR1=siteLoadControlEnableR1, muEntry=muEntry, vnsPrivWPA1Enabled=vnsPrivWPA1Enabled, radioIfIndex=radioIfIndex, muTable=muTable, apRadioAntennaType=apRadioAntennaType, vnsDHCPRangeIndex=vnsDHCPRangeIndex, wlanRadiusPriority=wlanRadiusPriority, loadGroupLoadControlEnableR2=loadGroupLoadControlEnableR2, scanAPTable=scanAPTable, cpType=cpType, mgmtPortDomain=mgmtPortDomain, authorizedAPDescription=authorizedAPDescription, portDHCPDnsServers=portDHCPDnsServers, apConfigObjects=apConfigObjects, apOutDiscards=apOutDiscards, wlanStatsGroup=wlanStatsGroup, vnsParentIfIndex=vnsParentIfIndex, topoWireStatName=topoWireStatName, maxBestEffortBWforReassociation=maxBestEffortBWforReassociation, sysLogServerIndex=sysLogServerIndex, includeServiceType=includeServiceType, apLogFileCopyServerIP=apLogFileCopyServerIP, primaryDNS=primaryDNS, scanGroupAPAssignGroupName=scanGroupAPAssignGroupName, dhcpRelayListenersNumEntries=dhcpRelayListenersNumEntries, wlanCPTable=wlanCPTable, topoWireStatTxOctets=topoWireStatTxOctets, vnsWEPKeyIndex=vnsWEPKeyIndex, vnsRadiusServerTable=vnsRadiusServerTable, apLocationbasedService=apLocationbasedService, apPerfRadioPrevPeakChannelUtilization=apPerfRadioPrevPeakChannelUtilization, dedicatedScanGroupTable=dedicatedScanGroupTable, apTotalStationsAOutOctets=apTotalStationsAOutOctets, wlanCPSelectionOption=wlanCPSelectionOption, apLogDestination=apLogDestination, vnsDNSServers=vnsDNSServers, topologyName=topologyName, threatSummaryHistoricalCounts=threatSummaryHistoricalCounts, apTotalStationsN24=apTotalStationsN24, apTotalStationsN50=apTotalStationsN50, apOutOctets=apOutOctets, logEventSeverityThreshold=logEventSeverityThreshold, apPerfRadioAverageChannelUtilization=apPerfRadioAverageChannelUtilization, vnsWDSRFPreferredParent=vnsWDSRFPreferredParent, siteNumEntries=siteNumEntries, availability=availability, nearbyApInfo=nearbyApInfo, scanGroupAPAssignControllerIPAddress=scanGroupAPAssignControllerIPAddress, authorizedAPMAC=authorizedAPMAC, licenseForeignRadarAP=licenseForeignRadarAP, apPerfWlanCurrentDLOctetsPerSec=apPerfWlanCurrentDLOctetsPerSec, apTable=apTable, threatSummaryGroup=threatSummaryGroup, apEntry=apEntry, stationsByProtocolB=stationsByProtocolB, apChnlUtilAverageUtilization=apChnlUtilAverageUtilization)
mibBuilder.exportSymbols("HIPATH-WIRELESS-HWC-MIB", outOfServiceScanGroup=outOfServiceScanGroup, loadGroupName=loadGroupName, vnsFilterRulePortLow=vnsFilterRulePortLow, apRegTelnetPassword=apRegTelnetPassword, activeThreatGroup=activeThreatGroup, wlanRadioManagement11k=wlanRadioManagement11k, hiPathWirelessHWCGroup=hiPathWirelessHWCGroup, muIPAddress=muIPAddress, wlanPrivWPAv1EncryptionType=wlanPrivWPAv1EncryptionType, muWLANID=muWLANID, vns3rdPartyAP=vns3rdPartyAP, muBSSIDMac=muBSSIDMac, tspecMDR=tspecMDR, tspecUlRate=tspecUlRate, siteTableNextAvailableIndex=siteTableNextAvailableIndex, sitePolicyTable=sitePolicyTable, apIPMulticastAssembly=apIPMulticastAssembly, sysCPUType=sysCPUType, apLogFileCopyOperationStatus=apLogFileCopyOperationStatus, portDuplexMode=portDuplexMode, armReplyMessage=armReplyMessage, apTelnetAccess=apTelnetAccess, siteMaxClientR1=siteMaxClientR1, authorizedAPEntry=authorizedAPEntry, fastFailover=fastFailover, apTotalStationsGInOctets=apTotalStationsGInOctets, apAccAverageDisassocDeauthReqRx=apAccAverageDisassocDeauthReqRx, vnsWEPKeyTable=vnsWEPKeyTable, wlanCPGuestMinPassLength=wlanCPGuestMinPassLength, sitePolicyMember=sitePolicyMember, authorizedAPManufacturer=authorizedAPManufacturer, physicalPortsEntry=physicalPortsEntry, stationEventAlarm=stationEventAlarm, loadGroupClientCountRadio1=loadGroupClientCountRadio1, tftpSever=tftpSever, apSerialNumber=apSerialNumber, wlanAuthReplaceCalledStationIDWithZone=wlanAuthReplaceCalledStationIDWithZone, sysLogServersTable=sysLogServersTable, topoExceptionFiterName=topoExceptionFiterName, maxVideoBWforReassociation=maxVideoBWforReassociation, wlanTableNextAvailableIndex=wlanTableNextAvailableIndex, topoWireStatRxPkts=topoWireStatRxPkts, apLogManagement=apLogManagement, stationsByProtocolN5=stationsByProtocolN5, vns3rdPartyAPEntry=vns3rdPartyAPEntry, vnsInterfaceName=vnsInterfaceName, radiusInfo=radiusInfo, wlanSecurityReportNotes=wlanSecurityReportNotes, apPerfWlanDLPkts=apPerfWlanDLPkts, apRegDiscoveryInterval=apRegDiscoveryInterval, vnsPrivacyEntry=vnsPrivacyEntry, topology=topology, apAccCurrentAssocReqRx=apAccCurrentAssocReqRx, apRadioAntennaEntry=apRadioAntennaEntry, widsWipsEngineGroup=widsWipsEngineGroup, wlanPrivWPAPSK=wlanPrivWPAPSK, apLogFileCopyProtocol=apLogFileCopyProtocol, tunnelStatsEntry=tunnelStatsEntry, vnsPrivWPA2Enabled=vnsPrivWPA2Enabled, uncategorizedAPSSID=uncategorizedAPSSID, apIfMAC=apIfMAC, wlanPrivWEPKeyIndex=wlanPrivWEPKeyIndex, wlanRadiusServerName=wlanRadiusServerName, blacklistedClientEndTime=blacklistedClientEndTime, sysSoftwareVersion=sysSoftwareVersion, apLogCollectionEnable=apLogCollectionEnable, wlanAuthTable=wlanAuthTable, wlanCPReplaceIPwithFQDN=wlanCPReplaceIPwithFQDN, apPerfRadioAverageSNR=apPerfRadioAverageSNR, ntpEnabled=ntpEnabled, apLogQuickSelectedOption=apLogQuickSelectedOption, wlanAuthEntry=wlanAuthEntry, assocStartSysUpTime=assocStartSysUpTime, wlanPrivTable=wlanPrivTable, clientMessageDelayTime=clientMessageDelayTime, topoCompleteStatMulticastTxPkts=topoCompleteStatMulticastTxPkts, vnsRateControlCIR=vnsRateControlCIR, vnsSessionAvailabilityEnable=vnsSessionAvailabilityEnable, apStatsGroup=apStatsGroup, scanAPEntry=scanAPEntry, friendlyAPEntry=friendlyAPEntry, virtualNetworks=virtualNetworks, siteMaxClientR2=siteMaxClientR2, vnsMgmtTrafficEnable=vnsMgmtTrafficEnable, portName=portName, vnsWDSStatRxRSSI=vnsWDSStatRxRSSI, apRadioTable=apRadioTable, siteName=siteName, apLogPassword=apLogPassword, vnsFilterRuleStatus=vnsFilterRuleStatus, mgmtPortIfIndex=mgmtPortIfIndex, apAccCurrentReassocReqRx=apAccCurrentReassocReqRx, apRadioEntry=apRadioEntry, tunnelCount=tunnelCount, recurrenceWeekly=recurrenceWeekly, vnsStatTxPkts=vnsStatTxPkts, wlanAuthType=wlanAuthType, vnsEnabled=vnsEnabled, wlanSecurityReportUnsecureType=wlanSecurityReportUnsecureType, scanGroupAPAssignmentTable=scanGroupAPAssignmentTable, dedicatedScanGrpClassifySourceIF=dedicatedScanGrpClassifySourceIF, pairIPAddress=pairIPAddress, vnsWDSStatAPParent=vnsWDSStatAPParent, wlanDot11hClientPowerReduction=wlanDot11hClientPowerReduction, prohibitedAPEntry=prohibitedAPEntry, apEventId=apEventId, startHour=startHour, vnsQoSWirelessUseAdmControlVideo=vnsQoSWirelessUseAdmControlVideo, topologyLayer3=topologyLayer3, muAPName=muAPName, stationEventTimeStamp=stationEventTimeStamp, vnsAPFilterTable=vnsAPFilterTable, vnsAPFilterAction=vnsAPFilterAction, vnsWEPKeyValue=vnsWEPKeyValue, apPerfWlanAverageDLPktsPerSec=apPerfWlanAverageDLPktsPerSec, friendlyAPTable=friendlyAPTable, vnsAPFilterProtocol=vnsAPFilterProtocol, scanGroupAPAssignApSerial=scanGroupAPAssignApSerial, uncategorizedAPEntry=uncategorizedAPEntry, topoStatFrameTooLongErrors=topoStatFrameTooLongErrors, apPerfWlanCurrentDLPktsPerSec=apPerfWlanCurrentDLPktsPerSec, tunnelEndIP=tunnelEndIP, muRxPackets=muRxPackets, loadGrpRadiosRadio2=loadGrpRadiosRadio2, ntpTimeServer2=ntpTimeServer2, topoWireStatRxOctets=topoWireStatRxOctets, outOfServiceScanGroupTable=outOfServiceScanGroupTable, cpConnectionIP=cpConnectionIP, vnsWDSStatTxFrame=vnsWDSStatTxFrame, licenseInServiceRadarAP=licenseInServiceRadarAP, vnsStatus=vnsStatus, wlanAuthRadiusIncludePolicy=wlanAuthRadiusIncludePolicy, threatSummaryActiveThreat=threatSummaryActiveThreat, phyDHCPRangeEntry=phyDHCPRangeEntry, topologyEgressPort=topologyEgressPort, portVlanID=portVlanID, vnsStatMulticastRxPkts=vnsStatMulticastRxPkts, loadGrpWlanAssigned=loadGrpWlanAssigned, dedicatedScanGroup=dedicatedScanGroup, vnsRateControlProfile=vnsRateControlProfile, vnsQoSWirelessWMMFlag=vnsQoSWirelessWMMFlag, stationName=stationName, accessRejectMsgTable=accessRejectMsgTable, vnsWDSStatEntry=vnsWDSStatEntry, wlanRadiusServerAcctSIAR=wlanRadiusServerAcctSIAR, radiusExtnsIndex=radiusExtnsIndex, externalRadiusServerTable=externalRadiusServerTable, apIndex=apIndex, apSSHConnection=apSSHConnection, stationAPSSID=stationAPSSID, topoStatMulticastRxPkts=topoStatMulticastRxPkts, wlanCPAuthType=wlanCPAuthType, topologyVlanID=topologyVlanID, apLogFileCopyTable=apLogFileCopyTable, prohibitedAPCategory=prohibitedAPCategory, wassp=wassp, stationEventType=stationEventType, apRadioAttenuation=apRadioAttenuation, prohibitedAPManufacturer=prohibitedAPManufacturer, wlanBeaconReport=wlanBeaconReport, dasInfo=dasInfo, wlanCPCustomSpecificURL=wlanCPCustomSpecificURL, topologyDHCPUsage=topologyDHCPUsage, apTotalStationsN24OutOctets=apTotalStationsN24OutOctets, duration=duration, assocRxOctets=assocRxOctets, topologyStatGroup=topologyStatGroup, apPollTimeout=apPollTimeout, channel=channel, apRadioStatusChannelOffset=apRadioStatusChannelOffset, stationSessionNotifications=stationSessionNotifications, wlanPrivGroupKPSR=wlanPrivGroupKPSR, wlanRadiusServerEntry=wlanRadiusServerEntry, vnsConfigEntry=vnsConfigEntry, cpLogOff=cpLogOff, loadBalancing=loadBalancing, tspecSsid=tspecSsid, wlanPrivfastTransition=wlanPrivfastTransition, wlanRadiusTimeout=wlanRadiusTimeout, inSrvScanGrpName=inSrvScanGrpName, assocCount=assocCount, wlanMaxEntries=wlanMaxEntries, vnsRadiusServerPort=vnsRadiusServerPort, uncategorizedAPManufacturer=uncategorizedAPManufacturer, activeThreatThreat=activeThreatThreat, apTunnelAlarm=apTunnelAlarm, apPerfWlanAverageULOctetsPerSec=apPerfWlanAverageULOctetsPerSec, apLogFileCopyServerDirectory=apLogFileCopyServerDirectory, apAccAssocReqRx=apAccAssocReqRx, apPerfWlanCurPeakDLPktsPerSec=apPerfWlanCurPeakDLPktsPerSec, nearbyApChannel=nearbyApChannel, tspecAC=tspecAC, radiusFastFailoverEventsGroup=radiusFastFailoverEventsGroup, siteBandPreferenceEnable=siteBandPreferenceEnable, apPerfWlanAverageDLOctetsPerSec=apPerfWlanAverageDLOctetsPerSec, apAccDisassocDeauthReqTx=apAccDisassocDeauthReqTx, wlanAuthRadiusIncludeVNS=wlanAuthRadiusIncludeVNS, muAccessListRowStatus=muAccessListRowStatus, sysLogServerPort=sysLogServerPort, wlanCPIdentity=wlanCPIdentity, topoCompleteStatEntry=topoCompleteStatEntry, vnsWDSStatSSID=vnsWDSStatSSID, apMacAddress=apMacAddress, topologyStat=topologyStat, siteWlanApRadioIndex=siteWlanApRadioIndex, authenticationAdvancedGroup=authenticationAdvancedGroup, vnsEnable11hSupport=vnsEnable11hSupport, apTotalStationsGOutOctets=apTotalStationsGOutOctets, vnsExceptionStatPktsAllowed=vnsExceptionStatPktsAllowed, topologyTagged=topologyTagged, physicalPortObjects=physicalPortObjects, apHostname=apHostname, authorizedAPRowStatus=authorizedAPRowStatus, apPerfRadioCurrentSNR=apPerfRadioCurrentSNR, assocVnsIfIndex=assocVnsIfIndex, HundredthOfInt32=HundredthOfInt32, vnsDLSAddress=vnsDLSAddress, wlanStatsRadiusReqRejected=wlanStatsRadiusReqRejected, wlanRadiusServerAuthAuthType=wlanRadiusServerAuthAuthType, wlanRadiusServerAcctUseVNSName=wlanRadiusServerAcctUseVNSName, apIPAddress=apIPAddress, muState=muState, vnsAPFilterEtherType=vnsAPFilterEtherType, vnsExceptionStatPktsDenied=vnsExceptionStatPktsDenied, topoStatTxOctets=topoStatTxOctets, apAccReassocReqRx=apAccReassocReqRx, apByChannelEntry=apByChannelEntry, apRadioStatusChannelWidth=apRadioStatusChannelWidth, apRadioAntennaModel=apRadioAntennaModel, armIndex=armIndex, wlanAuthAllowUnauthorizedUser=wlanAuthAllowUnauthorizedUser, apPerformanceReportByRadioTable=apPerformanceReportByRadioTable, apPerfWlanCurrentClientsPerSec=apPerfWlanCurrentClientsPerSec, cpPasswordLabel=cpPasswordLabel, apPerfWlanCurPeakClientsPerSec=apPerfWlanCurPeakClientsPerSec, wlanRadiusUsage=wlanRadiusUsage, apLogDirectory=apLogDirectory, wirelessQoS=wirelessQoS, vnsPrivWEPKeyType=vnsPrivWEPKeyType, apLogFileUtilityCurrent=apLogFileUtilityCurrent, vnsDLSPort=vnsDLSPort, tspecMuMACAddress=tspecMuMACAddress, muVnsSSID=muVnsSSID, stationRoamedAPName=stationRoamedAPName, siteStrictLimitEnableR2=siteStrictLimitEnableR2, inSrvScanGrpScan5GHzSelection=inSrvScanGrpScan5GHzSelection, outOfSrvScanGrpChannelDwellTime=outOfSrvScanGrpChannelDwellTime, dhcpRelayListenersMaxEntries=dhcpRelayListenersMaxEntries, apAccCurPeakDisassocDeauthReqRx=apAccCurPeakDisassocDeauthReqRx, activeVNSSessionCount=activeVNSSessionCount, apEnvironment=apEnvironment, vnsQoSWirelessUseAdmControlVoice=vnsQoSWirelessUseAdmControlVoice, apLogFileUtilityLimit=apLogFileUtilityLimit, threatSummaryEntry=threatSummaryEntry)
mibBuilder.exportSymbols("HIPATH-WIRELESS-HWC-MIB", apVlanID=apVlanID, muDot11ConnectionCapability=muDot11ConnectionCapability, apLogFileCopyOperation=apLogFileCopyOperation, stationsByProtocolUnavailable=stationsByProtocolUnavailable, apRegDiscoveryRetries=apRegDiscoveryRetries, apNotifications=apNotifications, wlanDefaultTopologyID=wlanDefaultTopologyID, wirelessEWCGroups=wirelessEWCGroups, vnsCount=vnsCount, vnsWDSRFAPName=vnsWDSRFAPName, wlanAuthRadiusIncludeAP=wlanAuthRadiusIncludeAP, wlanRadiusNASID=wlanRadiusNASID, inSrvScanGrpRowStatus=inSrvScanGrpRowStatus, activeThreatIndex=activeThreatIndex, vnsRadiusServerAuthType=vnsRadiusServerAuthType, radiusId=radiusId, muConnectionProtocol=muConnectionProtocol, scanGroupAPAssignInactiveAP=scanGroupAPAssignInactiveAP, stationMacAddress=stationMacAddress, vnsDHCPRangeType=vnsDHCPRangeType, hiPathWirelessHWCAlarms=hiPathWirelessHWCAlarms, phyDHCPRangeStart=phyDHCPRangeStart, licenseMode=licenseMode, wlanGroup=wlanGroup, wlanCPUseHTTPSforConnection=wlanCPUseHTTPSforConnection, topologyDynamicEgress=topologyDynamicEgress, logEventDescription=logEventDescription, muACLGroup=muACLGroup, radiusStrictMode=radiusStrictMode, wlanPrivWPAv2EncryptionType=wlanPrivWPAv2EncryptionType, radiusExtnsSettingGroup=radiusExtnsSettingGroup, wlanAuthRadiusAcctAfterMacBaseAuthorization=wlanAuthRadiusAcctAfterMacBaseAuthorization, advancedFilteringMode=advancedFilteringMode, portDHCPGateway=portDHCPGateway, destinationName=destinationName, vnsDescription=vnsDescription, wlanAuthAutoAuthAuthorizedUser=wlanAuthAutoAuthAuthorizedUser, apMaintenanceCycle=apMaintenanceCycle, wlanCPExtTosValue=wlanCPExtTosValue, apTotalStationsN50InOctets=apTotalStationsN50InOctets, apRadioIndex=apRadioIndex, wlanEngerySaveMode=wlanEngerySaveMode, apTotalStationsN50OutOctets=apTotalStationsN50OutOctets, assocTable=assocTable, dashboard=dashboard, vnsRadiusServerRowStatus=vnsRadiusServerRowStatus, portDHCPWins=portDHCPWins, wlanRadiusServerAuthUseVNSIPAddr=wlanRadiusServerAuthUseVNSIPAddr, apRadioNumber=apRadioNumber, muDefaultCoS=muDefaultCoS, scanGroupAPAssignAllowScanning=scanGroupAPAssignAllowScanning, vnsFilterRuleEtherType=vnsFilterRuleEtherType, externalRadiusServerEntry=externalRadiusServerEntry, apPerfRadioAveragePktRetx=apPerfRadioAveragePktRetx, tspecDlRate=tspecDlRate, licenseForeignAP=licenseForeignAP, vnsPrivDynamicRekeyFrequency=vnsPrivDynamicRekeyFrequency, vnsAPFilterRowStatus=vnsAPFilterRowStatus, tspecUlViolations=tspecUlViolations, wlanStatsID=wlanStatsID, wlanNumEntries=wlanNumEntries, assocTxPackets=assocTxPackets, countermeasureAPSerial=countermeasureAPSerial, vnsExceptionStatTable=vnsExceptionStatTable, blacklistedClientTable=blacklistedClientTable, wlanRadiusNASUseVnsIP=wlanRadiusNASUseVnsIP, vnsFilterIDTable=vnsFilterIDTable, vnsWEPKeyEntry=vnsWEPKeyEntry, muACLTable=muACLTable, clientAutologinOption=clientAutologinOption, widsWipsEngineControllerIPAddress=widsWipsEngineControllerIPAddress, scanGroupProfileID=scanGroupProfileID, vnsStatRadiusTotRequests=vnsStatRadiusTotRequests, siteEnableSecureTunnel=siteEnableSecureTunnel, dhcpRelayListenersNextIndex=dhcpRelayListenersNextIndex, wlanRadiusServerMacUseVNSIPAddr=wlanRadiusServerMacUseVNSIPAddr, tunnelEndHWC=tunnelEndHWC, wlanPrivEntry=wlanPrivEntry, countermeasureAPTime=countermeasureAPTime, LogEventSeverity=LogEventSeverity, apPerfRadioCurrentRSS=apPerfRadioCurrentRSS, apFastFailoverEnable=apFastFailoverEnable, outOfSrvScanGrpName=outOfSrvScanGrpName, siteAPMember=siteAPMember, apPerfWlanPrevPeakClientsPerSec=apPerfWlanPrevPeakClientsPerSec, scanGroupAPAssignRadio2=scanGroupAPAssignRadio2, topoWireStatTable=topoWireStatTable, apChnlUtilCurrentUtilization=apChnlUtilCurrentUtilization, muACLMACAddress=muACLMACAddress, wlanRadiusServerAuthNASId=wlanRadiusServerAuthNASId, dedicatedScanGrpBlockAdHocPeriod=dedicatedScanGrpBlockAdHocPeriod, availabilityStatus=availabilityStatus, vnsPrivacyTable=vnsPrivacyTable, logEventSeverity=logEventSeverity, siteWlanApRadioAssigned=siteWlanApRadioAssigned, apAccCurPeakDisassocDeauthReqTx=apAccCurPeakDisassocDeauthReqTx, vnsConfigWLANID=vnsConfigWLANID, apRowStatus=apRowStatus, cpConnectionPort=cpConnectionPort, vnsQoSTable=vnsQoSTable, dedicatedScanGrpScan5GHzFreq=dedicatedScanGrpScan5GHzFreq, apOutUcastPkts=apOutUcastPkts, apInNUcastPkts=apInNUcastPkts, licensingInformationGroup=licensingInformationGroup, muAccessListTable=muAccessListTable, logEventComponent=logEventComponent, wlanBlockMuToMuTraffic=wlanBlockMuToMuTraffic, layerTwoPortMgmtState=layerTwoPortMgmtState, apTotalStationsA=apTotalStationsA, associations=associations, scanAPAcessPointName=scanAPAcessPointName, apRadioStatusTable=apRadioStatusTable, tspecApSerialNumber=tspecApSerialNumber, vnsDLSSupportEnable=vnsDLSSupportEnable, vnsAPFilterEntry=vnsAPFilterEntry, countermeasureAPName=countermeasureAPName, mgmtPortObjects=mgmtPortObjects, topologyConfig=topologyConfig, apPortifIndex=apPortifIndex, apRadioStatusEntry=apRadioStatusEntry, licenseLocalRadarAP=licenseLocalRadarAP, wlanRadiusServerUse=wlanRadiusServerUse, apSwVersion=apSwVersion, topoWireStatMulticastTxPkts=topoWireStatMulticastTxPkts, topologyGateway=topologyGateway, apInErrors=apInErrors, topologyMode=topologyMode, uncategorizedAPMAC=uncategorizedAPMAC, outOfServiceScanGroupEntry=outOfServiceScanGroupEntry, apAccAverageAssocReqRx=apAccAverageAssocReqRx, topoCompleteStatName=topoCompleteStatName, friendlyAPManufacturer=friendlyAPManufacturer, wlanCPExtAddIPtoURL=wlanCPExtAddIPtoURL, dhcpRelayListenersGroup=dhcpRelayListenersGroup, scanGroupAPAssignAllowSpectrumAnalysis=scanGroupAPAssignAllowSpectrumAnalysis, apPerfRadioCurrentPktRetx=apPerfRadioCurrentPktRetx, topoCompleteStatFrameTooLongErrors=topoCompleteStatFrameTooLongErrors, licenseAvailableAP=licenseAvailableAP, muTSPECEntry=muTSPECEntry, wlanRadiusIndex=wlanRadiusIndex, synchronizeGuestPort=synchronizeGuestPort, wlanRadiusAuthType=wlanRadiusAuthType, wlanAuthRadiusIncludeEgressRC=wlanAuthRadiusIncludeEgressRC, destinationIP=destinationIP, apRegistration=apRegistration, radioVNSRowStatus=radioVNSRowStatus, schedule=schedule, apRadioAntennaGroup=apRadioAntennaGroup, apTotalStationsACInOctets=apTotalStationsACInOctets, vnsRadiusServerName=vnsRadiusServerName, outOfSrvScanGrpRadio=outOfSrvScanGrpRadio, vnsAssignmentMode=vnsAssignmentMode, muRxOctets=muRxOctets, portEnabled=portEnabled, ntpTimezone=ntpTimezone, ntpServerEnabled=ntpServerEnabled, apTotalStationsACOutOctets=apTotalStationsACOutOctets, vnsFilterRuleProtocol=vnsFilterRuleProtocol, vnIfIndex=vnIfIndex, stationAPName=stationAPName, wlanCPSendLoginTo=wlanCPSendLoginTo, activeThreatsCounts=activeThreatsCounts, loadGroupLoadControl=loadGroupLoadControl, activeThreatTable=activeThreatTable, outOfSrvScanGrpChannelList=outOfSrvScanGrpChannelList, assocRxPackets=assocRxPackets, wlanSessionTimeout=wlanSessionTimeout, friendlyAPSSID=friendlyAPSSID, vnForeignClients=vnForeignClients, siteLocalRadiusAuthentication=siteLocalRadiusAuthentication, topoCompleteStatTxOctets=topoCompleteStatTxOctets, vnsFilterRuleOrder=vnsFilterRuleOrder, topoCompleteStatBroadcastRxPkts=topoCompleteStatBroadcastRxPkts, hiPathWirelessHWCModule=hiPathWirelessHWCModule, wlanPrivWPAversion=wlanPrivWPAversion, apPerformanceReportbyRadioAndWlanTable=apPerformanceReportbyRadioAndWlanTable, hwcAvailabilityRank=hwcAvailabilityRank, apNeighboursTable=apNeighboursTable, apAntennanName=apAntennanName, vnsWDSStatTable=vnsWDSStatTable, wlanPrivWEPKey=wlanPrivWEPKey, siteWlanEntry=siteWlanEntry, uncategorizedAPDescption=uncategorizedAPDescption, wlanCPExtConnection=wlanCPExtConnection, apTotalStationsBOutOctets=apTotalStationsBOutOctets, imageVersionOfngap36xx=imageVersionOfngap36xx, apSSHAccess=apSSHAccess, topoStatBroadcastRxPkts=topoStatBroadcastRxPkts, blacklistedClientMAC=blacklistedClientMAC, apAntennaGroup=apAntennaGroup, vnsConfigTable=vnsConfigTable, topoCompleteStatMulticastRxPkts=topoCompleteStatMulticastRxPkts, vnsMode=vnsMode, apAntennaEntry=apAntennaEntry, siteEntry=siteEntry, wlanPrivPrivacyType=wlanPrivPrivacyType, authorizedAPClassify=authorizedAPClassify, wlanRadiusServerMacNASIP=wlanRadiusServerMacNASIP, apInterfaceMTU=apInterfaceMTU, siteWlanTable=siteWlanTable, apPerfRadioCurPeakRSS=apPerfRadioCurPeakRSS, apPerfRadioCurPeakSNR=apPerfRadioCurPeakSNR, stationsByProtocolGroup=stationsByProtocolGroup, apLogFTProtocol=apLogFTProtocol, radacctStartOnIPAddr=radacctStartOnIPAddr, widsWips=widsWips, apLogFileCopyDestination=apLogFileCopyDestination, uncategorizedAPGroup=uncategorizedAPGroup, cpSharedSecret=cpSharedSecret, vnsAPFilterPortLow=vnsAPFilterPortLow, vnsWDSStatTxError=vnsWDSStatTxError, topoStatTable=topoStatTable, apRestartServiceContAbsent=apRestartServiceContAbsent, topoStatRxOctets=topoStatRxOctets, apInUcastPkts=apInUcastPkts, wlanCPExtPort=wlanCPExtPort, wlanRadiusServerTable=wlanRadiusServerTable, apPerfWlanPrevPeakULOctetsPerSec=apPerfWlanPrevPeakULOctetsPerSec, hiPathWirelessHWCConformance=hiPathWirelessHWCConformance, topologyIsGroup=topologyIsGroup, wlanSecurityReportFlag=wlanSecurityReportFlag, apRadioType=apRadioType, vnsCaptivePortalTable=vnsCaptivePortalTable, externalRadiusServerAddress=externalRadiusServerAddress, wlanRadiusRetries=wlanRadiusRetries, apMICErrorWarning=apMICErrorWarning, apTotalStationsAInOctets=apTotalStationsAInOctets, apPerfRadioPrevPeakPktRetx=apPerfRadioPrevPeakPktRetx, muAccessListBitmaskLength=muAccessListBitmaskLength, vnsWDSRFbgService=vnsWDSRFbgService, vnsWDSRFEntry=vnsWDSRFEntry, PYSNMP_MODULE_ID=hiPathWirelessControllerMib, apStatus=apStatus, countermeasureAPThreatIndex=countermeasureAPThreatIndex, apGroup=apGroup, countermeasureAPGroup=countermeasureAPGroup, vnsQoSClassificationServiceClass=vnsQoSClassificationServiceClass, vnsStatTable=vnsStatTable, topologyLinkLocalIPv6Address=topologyLinkLocalIPv6Address, inSrvScanGrpCounterMeasuresType=inSrvScanGrpCounterMeasuresType, apTotalStationsG=apTotalStationsG, maxBackgroundBWforReassociation=maxBackgroundBWforReassociation, imagePath36xx=imagePath36xx, apStatsSessionDuration=apStatsSessionDuration, dedicatedScanGrpScan2400MHzFreq=dedicatedScanGrpScan2400MHzFreq, vnsFilterRuleEntry=vnsFilterRuleEntry, apLogFileCopyIndex=apLogFileCopyIndex, muAccessListEntry=muAccessListEntry, layerTwoPortName=layerTwoPortName, vnsFilterIDEntry=vnsFilterIDEntry, apAccPrevPeakDisassocDeauthReqTx=apAccPrevPeakDisassocDeauthReqTx, apPerformanceReportbyRadioAndWlanEntry=apPerformanceReportbyRadioAndWlanEntry, wlanCPExtEnableHttps=wlanCPExtEnableHttps, apPerfWlanULPkts=apPerfWlanULPkts)
mibBuilder.exportSymbols("HIPATH-WIRELESS-HWC-MIB", assocDuration=assocDuration, muMACAddress=muMACAddress, inServiceScanGroup=inServiceScanGroup, stationsByProtocolA=stationsByProtocolA, wlanPrivWEPKeyLength=wlanPrivWEPKeyLength, topoStatBroadcastTxPkts=topoStatBroadcastTxPkts, sitePolicyGroup=sitePolicyGroup, apRegistrationRequests=apRegistrationRequests, siteTable=siteTable, accessPoints=accessPoints, sites=sites, vnsAuthModel=vnsAuthModel, dhcpRelayListenersEntry=dhcpRelayListenersEntry, outOfSrvScanGrpScanRowStatus=outOfSrvScanGrpScanRowStatus, cpFooterURL=cpFooterURL, apStaticMTUsize=apStaticMTUsize, loadGrpRadiosEntry=loadGrpRadiosEntry, ntpObjects=ntpObjects, systemObjects=systemObjects, licenseRegulatoryDomain=licenseRegulatoryDomain, dhcpRelayListenersID=dhcpRelayListenersID, topologyIPAddress=topologyIPAddress, controllerStats=controllerStats, inServiceScanGroupEntry=inServiceScanGroupEntry, vnsQoSEntry=vnsQoSEntry, scanGroupAPAssignmentEntry=scanGroupAPAssignmentEntry, dedicatedScanGrpListeningPort=dedicatedScanGrpListeningPort, apLogSelectedAPsEntry=apLogSelectedAPsEntry, tunnelStartHWC=tunnelStartHWC, wlanSecurityReportEntry=wlanSecurityReportEntry, wlanRadiusServerAuthNASIP=wlanRadiusServerAuthNASIP, apSecureDataTunnelType=apSecureDataTunnelType, apAccPrevPeakAssocReqRx=apAccPrevPeakAssocReqRx, scanAPProfileName=scanAPProfileName, apPerfWlanAverageULPktsPerSec=apPerfWlanAverageULPktsPerSec, vnsGlobalSetting=vnsGlobalSetting, loadGrpWlanTable=loadGrpWlanTable, wlanID=wlanID, apAccAverageReassocReqRx=apAccAverageReassocReqRx, countermeasureAPCountermeasure=countermeasureAPCountermeasure, tertiaryDNS=tertiaryDNS, wlanEnabled=wlanEnabled, topologyMTUsize=topologyMTUsize, apPerfWlanDLOctets=apPerfWlanDLOctets, sensorManagement=sensorManagement, weakCipherEnable=weakCipherEnable, apLogUserId=apLogUserId, muAccessListMACAddress=muAccessListMACAddress, uncategorizedAPClassify=uncategorizedAPClassify, vnsRateControlCBS=vnsRateControlCBS, wlanCPGuestAccLifetime=wlanCPGuestAccLifetime, apRegSSHPassword=apRegSSHPassword, muConnectionCapability=muConnectionCapability, cpURL=cpURL, select=select, physicalFlash=physicalFlash, vnsConfigObjects=vnsConfigObjects, topoStatRxPkts=topoStatRxPkts, topologySyncIPEnd=topologySyncIPEnd, siteDefaultDNSServer=siteDefaultDNSServer, authorizedAPGroup=authorizedAPGroup, topoWireStatBroadcastTxPkts=topoWireStatBroadcastTxPkts, physicalPortsGroup=physicalPortsGroup, topoWireStatTxPkts=topoWireStatTxPkts, siteStrictLimitEnableR1=siteStrictLimitEnableR1, wlanStatsTable=wlanStatsTable, wlanCPIntStatusCheckButton=wlanCPIntStatusCheckButton, topologyGroupMembers=topologyGroupMembers, apAccCurrentDisassocDeauthReqTx=apAccCurrentDisassocDeauthReqTx, scanGroupMaxEntries=scanGroupMaxEntries, scanAPSerialNumber=scanAPSerialNumber, vnsStatTxOctects=vnsStatTxOctects, topologyPreFixLength=topologyPreFixLength, tspecMuIPAddress=tspecMuIPAddress, wlanRadiusServerMacPW=wlanRadiusServerMacPW, wlanSynchronize=wlanSynchronize, apRadioStatusChannel=apRadioStatusChannel, imageVersionOfap26xx=imageVersionOfap26xx, activeThreatDeviceMAC=activeThreatDeviceMAC, wlanAuthRadiusOperatorNameSpace=wlanAuthRadiusOperatorNameSpace, dhcpRelayListenersTable=dhcpRelayListenersTable, inSrvScanGrpblockAdHocClientsPeriod=inSrvScanGrpblockAdHocClientsPeriod, vnsRadiusServerRetries=vnsRadiusServerRetries, apZone=apZone, vnsMUSessionTimeout=vnsMUSessionTimeout, physicalPortCount=physicalPortCount, blacklistedClientEntry=blacklistedClientEntry, blaclistedClientGroup=blaclistedClientGroup, apAntennaType=apAntennaType, physicalPortsInternalVlanID=physicalPortsInternalVlanID, vnLocalClients=vnLocalClients, ntpTimeServer1=ntpTimeServer1, wlan=wlan, portMacAddress=portMacAddress, topoExceptionStatTable=topoExceptionStatTable, vnsWDSStatAPName=vnsWDSStatAPName, vnManagerObjects=vnManagerObjects, dasPort=dasPort, apRadioFrequency=apRadioFrequency, wlanStatsRadiusTotRequests=wlanStatsRadiusTotRequests, apRadioAntennaTable=apRadioAntennaTable, vnsSSID=vnsSSID, vnsRateControlProfName=vnsRateControlProfName, siteAPEntry=siteAPEntry, phyDHCPRangeType=phyDHCPRangeType, tunnelStatsRxBytes=tunnelStatsRxBytes, threatSummaryCategory=threatSummaryCategory, tunnelStartIP=tunnelStartIP, dedicatedScanGrpCounterMeasures=dedicatedScanGrpCounterMeasures, vnsStatEntry=vnsStatEntry, wlanPrivManagementFrameProtection=wlanPrivManagementFrameProtection, cpDefaultRedirectionURL=cpDefaultRedirectionURL, apPerfRadioPrevPeakRSS=apPerfRadioPrevPeakRSS, sitePolicyID=sitePolicyID, countermeasureAPEntry=countermeasureAPEntry, vnsQoSWirelessULPolicerAction=vnsQoSWirelessULPolicerAction, vnsWDSRFaService=vnsWDSRFaService, wlanRadiusTable=wlanRadiusTable, topoWireStatFrameChkSeqErrors=topoWireStatFrameChkSeqErrors, vnsAPFilterIPAddress=vnsAPFilterIPAddress, maxVoiceBWforAssociation=maxVoiceBWforAssociation, apLogSelectedAPsTable=apLogSelectedAPsTable, siteLoadControlEnableR2=siteLoadControlEnableR2, vnsAPFilterRuleOrder=vnsAPFilterRuleOrder, tspecBssMac=tspecBssMac, threatSummaryTable=threatSummaryTable, vns3rdPartyAPTable=vns3rdPartyAPTable, vnsSLPEnabled=vnsSLPEnabled, vnsPrivUseSharedKey=vnsPrivUseSharedKey, maxBackgroundBWforAssociation=maxBackgroundBWforAssociation, assocMUMacAddress=assocMUMacAddress, scanAPControllerIPAddress=scanAPControllerIPAddress, topoStatTxPkts=topoStatTxPkts, apHome=apHome, radiusExtnsSetting=radiusExtnsSetting, loadGroupLoadControlStrictLimitR1=loadGroupLoadControlStrictLimitR1, scanAPRowStatus=scanAPRowStatus, netflowAndMirrorN=netflowAndMirrorN, topologySyncGateway=topologySyncGateway, apSerialNo=apSerialNo, muAPSerialNo=muAPSerialNo, wlanPrivBroadcastRekeying=wlanPrivBroadcastRekeying, tspecProtocol=tspecProtocol, vnsRateControlProfTable=vnsRateControlProfTable, loadGroupEntry=loadGroupEntry, wlanAuthRadiusIncludeTopology=wlanAuthRadiusIncludeTopology, vnsRadiusServerSharedSecret=vnsRadiusServerSharedSecret, wlanStatsRadiusReqFailed=wlanStatsRadiusReqFailed, cpMessage=cpMessage, topoCompleteStatFrameChkSeqErrors=topoCompleteStatFrameChkSeqErrors, stationDetailEvent=stationDetailEvent, topoStatEntry=topoStatEntry, wlanRowStatus=wlanRowStatus, radioVNSEntry=radioVNSEntry, apChannelUtilizationEntry=apChannelUtilizationEntry, radiusFastFailoverEvents=radiusFastFailoverEvents, serviceLogFacility=serviceLogFacility, topologySyncIPStart=topologySyncIPStart, apLogFileCopyUserID=apLogFileCopyUserID, activeThreatExtraDetails=activeThreatExtraDetails, wlanAuthMACBasedAuthReAuthOnAreaRoam=wlanAuthMACBasedAuthReAuthOnAreaRoam, scanGroupAPAssignFordwardingService=scanGroupAPAssignFordwardingService, radiusExtnsSettingTable=radiusExtnsSettingTable, topoStatMulticastTxPkts=topoStatMulticastTxPkts, logNotifications=logNotifications, vnsFilterRuleAction=vnsFilterRuleAction, wlanServiceType=wlanServiceType, apAccCurPeakAssocReqRx=apAccCurPeakAssocReqRx, apLogServerIP=apLogServerIP, wlanSecurityReportTable=wlanSecurityReportTable, apPerfWlanULOctets=apPerfWlanULOctets, sysLogServerIP=sysLogServerIP, vnsWDSStatRxFrame=vnsWDSStatRxFrame, vnTotalClients=vnTotalClients, phyDHCPRangeGroup=phyDHCPRangeGroup, secondaryDNS=secondaryDNS, sysSerialNo=sysSerialNo, wlanCPGuestAllowedLifetimeAcct=wlanCPGuestAllowedLifetimeAcct, wlanCPEntry=wlanCPEntry, vnsWDSStatRxError=vnsWDSStatRxError, apStatsMuCounts=apStatsMuCounts, sysLogSupport=sysLogSupport, applyMacAddressFormat=applyMacAddressFormat, tspecDirection=tspecDirection, dnsObjects=dnsObjects, nearbyApIndex=nearbyApIndex, sysLogServerRowStatus=sysLogServerRowStatus, tunnelStatsTxRxBytes=tunnelStatsTxRxBytes, wlanRadiusServerMacUseVNSName=wlanRadiusServerMacUseVNSName, friendlyAPMacAddress=friendlyAPMacAddress, portDHCPEnable=portDHCPEnable, wlanAuthMACBasedAuthOnRoam=wlanAuthMACBasedAuthOnRoam, loadGroupType=loadGroupType, widsWipsEngineTable=widsWipsEngineTable, siteWlanGroup=siteWlanGroup, wlanRadiusServerMacAuthType=wlanRadiusServerMacAuthType, topologyIPv6Gateway=topologyIPv6Gateway, vnsStatRxPkts=vnsStatRxPkts, activeThreatAPName=activeThreatAPName, scanGroupAPAssignName=scanGroupAPAssignName, apPollInterval=apPollInterval, apPerfRadioCurrentChannelUtilization=apPerfRadioCurrentChannelUtilization, apPerfWlanCurPeakULOctetsPerSec=apPerfWlanCurPeakULOctetsPerSec, uncategorizedAPCounts=uncategorizedAPCounts, wlanCPGuestMaxConcurrentSession=wlanCPGuestMaxConcurrentSession, recurrenceMonthly=recurrenceMonthly, topoCompleteStatTxPkts=topoCompleteStatTxPkts, topologyID=topologyID, apRegSecurityMode=apRegSecurityMode, tspecSBA=tspecSBA, apPerfWlanPrevPeakULPktsPerSec=apPerfWlanPrevPeakULPktsPerSec, vnsVlanID=vnsVlanID, vnsFilterID=vnsFilterID, radiusExtnsSettingEntry=radiusExtnsSettingEntry, siteEncryptCommBetweenAPs=siteEncryptCommBetweenAPs, inSrvScanGrpDetectRogueAP=inSrvScanGrpDetectRogueAP, wlanStatsEntry=wlanStatsEntry, vnsAPFilterRuleDirection=vnsAPFilterRuleDirection, wlanCPGuestIDPrefix=wlanCPGuestIDPrefix, apAntennaTable=apAntennaTable, apPerfWlanPrevPeakDLPktsPerSec=apPerfWlanPrevPeakDLPktsPerSec, apEncryptCntTraffic=apEncryptCntTraffic, inServiceScanGroupTable=inServiceScanGroupTable, layerTwoPortTable=layerTwoPortTable, activeThreatDateTime=activeThreatDateTime, apByChannelGroup=apByChannelGroup, blacklistedClientReason=blacklistedClientReason, wlanAuthRadiusIncludeIngressRC=wlanAuthRadiusIncludeIngressRC, apHwVersion=apHwVersion, apPerfWlanAverageClientsPerSec=apPerfWlanAverageClientsPerSec, wlanRemoteable=wlanRemoteable, loadGrpRadiosTable=loadGrpRadiosTable, wlanStatsAssociatedClients=wlanStatsAssociatedClients, licenseDaysRemaining=licenseDaysRemaining, vnsUseDHCPRelay=vnsUseDHCPRelay, wlanQuietIE=wlanQuietIE, externalRadiusServerSharedSecret=externalRadiusServerSharedSecret, wlanCPRedirectURL=wlanCPRedirectURL, HundredthOfGauge64=HundredthOfGauge64, topologyEntry=topologyEntry, apUpTime=apUpTime, apInvalidPolicyCount=apInvalidPolicyCount, apAccCurrentDisassocDeauthReqRx=apAccCurrentDisassocDeauthReqRx, phyDHCPRangeTable=phyDHCPRangeTable, apInOctets=apInOctets, loadGroup=loadGroup, wlanRadiusName=wlanRadiusName, assocTxOctets=assocTxOctets, apIpAddress=apIpAddress, muTxPackets=muTxPackets, wlanAuthRadiusIncludeSSID=wlanAuthRadiusIncludeSSID, vnsFilterIDStatus=vnsFilterIDStatus, vnsQoSWirelessEnableUAPSD=vnsQoSWirelessEnableUAPSD, apEventAPSerialNumber=apEventAPSerialNumber)
mibBuilder.exportSymbols("HIPATH-WIRELESS-HWC-MIB", vnsAPFilterMask=vnsAPFilterMask, muPolicyName=muPolicyName, friendlyAPCounts=friendlyAPCounts, activeThreatCounterMeasure=activeThreatCounterMeasure, armCount=armCount, apLogFrequency=apLogFrequency, tunnelStatsTxBytes=tunnelStatsTxBytes, vnsQoSWirelessTurboVoiceFlag=vnsQoSWirelessTurboVoiceFlag, wlanRadiusNASIDUseVNSName=wlanRadiusNASIDUseVNSName, topoWireStatBroadcastRxPkts=topoWireStatBroadcastRxPkts, vnsSuppressSSID=vnsSuppressSSID, vnsDHCPRangeTable=vnsDHCPRangeTable, loadGroupLoadControlStrictLimitR2=loadGroupLoadControlStrictLimitR2, dedicatedScanGrpDetectRogueAP=dedicatedScanGrpDetectRogueAP, wlanAppVisibility=wlanAppVisibility, vnsQoSPriorityOverrideSC=vnsQoSPriorityOverrideSC, wlanTable=wlanTable, apAccPrevPeakDisassocDeauthReqRx=apAccPrevPeakDisassocDeauthReqRx, wlanCPIntLogoffButton=wlanCPIntLogoffButton, wlanRadiusServerAcctNASIP=wlanRadiusServerAcctNASIP, authenticationAdvanced=authenticationAdvanced, wlanDot11hSupport=wlanDot11hSupport, widsWipsObjectsGroup=widsWipsObjectsGroup, topoWireStatEntry=topoWireStatEntry, topoCompleteStatRxPkts=topoCompleteStatRxPkts, maxVoiceBWforReassociation=maxVoiceBWforReassociation, imagePath26xx=imagePath26xx, topologyAPRegistration=topologyAPRegistration, apPerfWlanCurPeakDLOctetsPerSec=apPerfWlanCurPeakDLOctetsPerSec, stationBSSID=stationBSSID, vnsWDSStatRxRate=vnsWDSStatRxRate, vnsMgmIpAddress=vnsMgmIpAddress, loadGroupTable=loadGroupTable, apLogFileCopyPassword=apLogFileCopyPassword, radiusFastFailoverEventsEntry=radiusFastFailoverEventsEntry, dedicatedScanGrpName=dedicatedScanGrpName, inSrvScanGrpScan2400MHzSelection=inSrvScanGrpScan2400MHzSelection, wlanPrivRekeyInterval=wlanPrivRekeyInterval, scanGroupAPAssignmentGroup=scanGroupAPAssignmentGroup, apLogFileCopyRowStatus=apLogFileCopyRowStatus, phyDHCPRangeIndex=phyDHCPRangeIndex, apAccPrevPeakReassocReqRx=apAccPrevPeakReassocReqRx, sysLogServersEntry=sysLogServersEntry, apInDiscards=apInDiscards, apBroadcastDisassociate=apBroadcastDisassociate, cpReplaceGatewayWithFQDN=cpReplaceGatewayWithFQDN, apSecureTunnel=apSecureTunnel, cpStatusCheck=cpStatusCheck, dedicatedScanGroupEntry=dedicatedScanGroupEntry, stationsByProtocolG=stationsByProtocolG, vnsStatRxOctects=vnsStatRxOctects, topologyStaticIPv6Address=topologyStaticIPv6Address, apTotalStationsN24InOctets=apTotalStationsN24InOctets, wlanProcessClientIE=wlanProcessClientIE, apChnlUtilPrevPeakUtilization=apChnlUtilPrevPeakUtilization, hiPathWirelessController=hiPathWirelessController, wlanMirrorN=wlanMirrorN, nearbyApRSS=nearbyApRSS, vnsDHCPRangeStart=vnsDHCPRangeStart, topoExceptionStatPktsAllowed=topoExceptionStatPktsAllowed, muACLRowStatus=muACLRowStatus, wlanCP802HttpRedirect=wlanCP802HttpRedirect, stationIPAddress=stationIPAddress, apPerfRadioAverageRSS=apPerfRadioAverageRSS, portDHCPDefaultLease=portDHCPDefaultLease, apPerfRadioCurPeakChannelUtilization=apPerfRadioCurPeakChannelUtilization, vnsRadiusServerNasAddress=vnsRadiusServerNasAddress, vnsQoSWirelessDLPolicerAction=vnsQoSWirelessDLPolicerAction, vnsWDSRFBridge=vnsWDSRFBridge, apPerfWlanCurrentULOctetsPerSec=apPerfWlanCurrentULOctetsPerSec, apName=apName, topoWireStatFrameTooLongErrors=topoWireStatFrameTooLongErrors, portMgmtTrafficEnable=portMgmtTrafficEnable, vnsDHCPRangeEntry=vnsDHCPRangeEntry, serverUsageModel=serverUsageModel, widsWipsEngineRowStatus=widsWipsEngineRowStatus, hiPathWirelessControllerMib=hiPathWirelessControllerMib, vnsDHCPRangeStatus=vnsDHCPRangeStatus, siteRowStatus=siteRowStatus, dedicatedScanGrpSecurityThreats=dedicatedScanGrpSecurityThreats, vnsStatBroadcastTxPkts=vnsStatBroadcastTxPkts, siteID=siteID, wlanAuthMacBasedAuth=wlanAuthMacBasedAuth, apPerfRadioCurPeakPktRetx=apPerfRadioCurPeakPktRetx, vnsWDSRFBackupParent=vnsWDSRFBackupParent, widsWipsEngineEntry=widsWipsEngineEntry, startMinute=startMinute, vnsWDSStatTxRate=vnsWDSStatTxRate, wlanAuthRadiusTimeoutRole=wlanAuthRadiusTimeoutRole, detectLinkFailure=detectLinkFailure, topoStatFrameChkSeqErrors=topoStatFrameChkSeqErrors, apPerfWlanCurPeakULPktsPerSec=apPerfWlanCurPeakULPktsPerSec, recurrenceDaily=recurrenceDaily, wlanEntry=wlanEntry, siteReplaceStnIDwithSiteName=siteReplaceStnIDwithSiteName, portMask=portMask, apByChannelAPs=apByChannelAPs, vnsFilterRuleDirection=vnsFilterRuleDirection, wlanAuthCollectAcctInformation=wlanAuthCollectAcctInformation, apOutNUcastPkts=apOutNUcastPkts, siteMaxEntries=siteMaxEntries, siteAPTable=siteAPTable, apAccDisassocDeauthReqRx=apAccDisassocDeauthReqRx, vnsQoSWirelessUseAdmControlBackground=vnsQoSWirelessUseAdmControlBackground, apChannelUtilizationTable=apChannelUtilizationTable, widsWipsReport=widsWipsReport, cpLoginLabel=cpLoginLabel, wlanRadiusServerAcctUseVNSIPAddr=wlanRadiusServerAcctUseVNSIPAddr, topoCompleteStatTable=topoCompleteStatTable, wlanSSID=wlanSSID, apSoftwareVersion=apSoftwareVersion, prohibitedAPMAC=prohibitedAPMAC, wlanRadiusPort=wlanRadiusPort, mgmtPortHostname=mgmtPortHostname, wlanCPGuestSessionLifetime=wlanCPGuestSessionLifetime, apEventDescription=apEventDescription, apTotalStationsB=apTotalStationsB, vnsProcessClientIEReq=vnsProcessClientIEReq, apRegUseClusterEncryption=apRegUseClusterEncryption, dhcpRelayListenersRowStatus=dhcpRelayListenersRowStatus, mitigatorAnalysisEngine=mitigatorAnalysisEngine, fastFailoverEvents=fastFailoverEvents, sitePolicyEntry=sitePolicyEntry, HundredthOfGauge32=HundredthOfGauge32, apStatsObjects=apStatsObjects, stationIPv6Address2=stationIPv6Address2, siteCoSMember=siteCoSMember, wlanCPExtTosOverride=wlanCPExtTosOverride, sysLogServerEnabled=sysLogServerEnabled, vnRole=vnRole, vnsExceptionStatEntry=vnsExceptionStatEntry, wlanRadiusEntry=wlanRadiusEntry, topoCompleteStatRxOctets=topoCompleteStatRxOctets, countermeasureAPTable=countermeasureAPTable, clearAccessRejectMsg=clearAccessRejectMsg, radiusMacAddressFormatOption=radiusMacAddressFormatOption, sysLogLevel=sysLogLevel, portDHCPMaxLease=portDHCPMaxLease, dedicatedScanGrpMaxConcurrentAttacksPerAP=dedicatedScanGrpMaxConcurrentAttacksPerAP, vnHeartbeatInterval=vnHeartbeatInterval, physicalPortsTable=physicalPortsTable, vnsQoSWirelessUseAdmControlBestEffort=vnsQoSWirelessUseAdmControlBestEffort, vnsStatName=vnsStatName, phyDHCPRangeEnd=phyDHCPRangeEnd, apPerfWlanCurrentULPktsPerSec=apPerfWlanCurrentULPktsPerSec, muTopologyName=muTopologyName, outOfSrvScanGrpScanActivity=outOfSrvScanGrpScanActivity, vnsQoSWirelessLegacyFlag=vnsQoSWirelessLegacyFlag, layerTwoPortEntry=layerTwoPortEntry, prohibitedAPRowStatus=prohibitedAPRowStatus, vnsStatMulticastTxPkts=vnsStatMulticastTxPkts, muUser=muUser, radioVNSTable=radioVNSTable, nearbyApBSSID=nearbyApBSSID)
