#
# PySNMP MIB module TERAWAVE-teratca-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-teratca-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, IpAddress, ObjectIdentity, Counter64, iso, Bits, TimeTicks, Counter32, NotificationType, Gauge32, Integer32, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "IpAddress", "ObjectIdentity", "Counter64", "iso", "Bits", "TimeTicks", "Counter32", "NotificationType", "Gauge32", "Integer32", "MibIdentifier", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teratraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 1))
teraTCA = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 1, 4))
teraTcaTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1), )
if mibBuilder.loadTexts: teraTcaTable.setStatus('mandatory')
teraTcaTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1), ).setIndexNames((0, "TERAWAVE-teratca-MIB", "teraTcaIndex"))
if mibBuilder.loadTexts: teraTcaTableEntry.setStatus('mandatory')
teraTcaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTcaIndex.setStatus('mandatory')
teraTcaInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duration-15m", 1), ("duration-1day", 2), ("duration-Var", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaInterval.setStatus('mandatory')
teraTcaVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaVariable.setStatus('mandatory')
teraTcaIntervalSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaIntervalSec.setStatus('mandatory')
teraTcaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTcaValue.setStatus('mandatory')
teraTcaType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("risingTca", 1), ("fallingTca", 2), ("risingOrFalingTca", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaType.setStatus('mandatory')
teraTcaRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaRisingThreshold.setStatus('mandatory')
teraTcaFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaFallingThreshold.setStatus('mandatory')
teraTcaRisingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcaTrap", 1), ("tcaLog", 2), ("tcaIgnore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaRisingEvent.setStatus('mandatory')
teraTcaFallingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcaTrap", 1), ("tcaLog", 2), ("tcaIgnore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaFallingEvent.setStatus('mandatory')
teraTcaOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaOwner.setStatus('mandatory')
teraTcaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createdRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaStatus.setStatus('mandatory')
mibBuilder.exportSymbols("TERAWAVE-teratca-MIB", teraTcaIndex=teraTcaIndex, teraTcaType=teraTcaType, terawave=terawave, teraTcaTableEntry=teraTcaTableEntry, teraTcaRisingThreshold=teraTcaRisingThreshold, teraTcaOwner=teraTcaOwner, teraTCA=teraTCA, teraTcaStatus=teraTcaStatus, teraTcaValue=teraTcaValue, teraTcaIntervalSec=teraTcaIntervalSec, teraTcaFallingThreshold=teraTcaFallingThreshold, teraTcaVariable=teraTcaVariable, teraTcaRisingEvent=teraTcaRisingEvent, teratraps=teratraps, teraTcaInterval=teraTcaInterval, teraTcaFallingEvent=teraTcaFallingEvent, teraTcaTable=teraTcaTable)
