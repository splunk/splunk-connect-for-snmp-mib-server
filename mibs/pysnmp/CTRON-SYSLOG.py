#
# PySNMP MIB module CTRON-SYSLOG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-SYSLOG
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
cabletron, = mibBuilder.importSymbols("CTRON-OIDS", "cabletron")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, ObjectIdentity, Counter64, IpAddress, Counter32, NotificationType, Integer32, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "Counter64", "IpAddress", "Counter32", "NotificationType", "Integer32", "Gauge32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ctSSA = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497))
aapsLog = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497, 9))
logWindow = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1))
logWindowTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 1), )
if mibBuilder.loadTexts: logWindowTable.setStatus('mandatory')
logWindowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 1, 1), ).setIndexNames((0, "CTRON-SYSLOG", "ltIndex"))
if mibBuilder.loadTexts: logWindowEntry.setStatus('mandatory')
ltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltIndex.setStatus('mandatory')
ltLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltLogString.setStatus('mandatory')
ltWindowOperation = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("refresh", 2), ("pageUp", 3), ("pageDown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltWindowOperation.setStatus('mandatory')
ltWindowReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("toLogStart", 2), ("toLogEnd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltWindowReset.setStatus('mandatory')
ltClientMatchString = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltClientMatchString.setStatus('mandatory')
ltEventMatchString = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltEventMatchString.setStatus('mandatory')
serverConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497, 9, 2))
scAutoFreeze = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAutoFreeze.setStatus('mandatory')
scAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5))).clone(namedValues=NamedValues(("disableLogging", 2), ("enableLogging", 3), ("reset", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAdminStatus.setStatus('mandatory')
scLastChange = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scLastChange.setStatus('mandatory')
clientConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3), )
if mibBuilder.loadTexts: clientConfigTable.setStatus('mandatory')
clientConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1), ).setIndexNames((0, "CTRON-SYSLOG", "ccClientID"))
if mibBuilder.loadTexts: clientConfigEntry.setStatus('mandatory')
ccClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccClientID.setStatus('mandatory')
ccClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccClientName.setStatus('mandatory')
ccClientPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientPersistent.setStatus('mandatory')
ccClientLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientLogStatus.setStatus('mandatory')
ccClientDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientDisplayStatus.setStatus('mandatory')
ccClientFreezeLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientFreezeLogStatus.setStatus('mandatory')
ccClientFreezeDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientFreezeDisplayStatus.setStatus('mandatory')
ccClientErrorLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientErrorLogStatus.setStatus('mandatory')
ccClientErrorDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientErrorDisplayStatus.setStatus('mandatory')
ccClientCriticalLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientCriticalLogStatus.setStatus('mandatory')
ccClientCriticalDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientCriticalDisplayStatus.setStatus('mandatory')
ccClientStatusLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientStatusLogStatus.setStatus('mandatory')
ccClientStatusDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientStatusDisplayStatus.setStatus('mandatory')
ccClientInfoLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientInfoLogStatus.setStatus('mandatory')
ccClientInfoDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientInfoDisplayStatus.setStatus('mandatory')
ccClientDebugLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientDebugLogStatus.setStatus('mandatory')
ccClientDebugDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientDebugDisplayStatus.setStatus('mandatory')
recoveredLogTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4497, 9, 4), )
if mibBuilder.loadTexts: recoveredLogTable.setStatus('mandatory')
recoveredLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4497, 9, 4, 1), ).setIndexNames((0, "CTRON-SYSLOG", "rlIndex"))
if mibBuilder.loadTexts: recoveredLogTableEntry.setStatus('mandatory')
rlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIndex.setStatus('mandatory')
rlLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(200, 200)).setFixedLength(200)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlLogString.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SYSLOG", aapsLog=aapsLog, ccClientPersistent=ccClientPersistent, ccClientStatusLogStatus=ccClientStatusLogStatus, logWindowEntry=logWindowEntry, ltWindowOperation=ltWindowOperation, ccClientDebugDisplayStatus=ccClientDebugDisplayStatus, ccClientStatusDisplayStatus=ccClientStatusDisplayStatus, ccClientInfoDisplayStatus=ccClientInfoDisplayStatus, ltWindowReset=ltWindowReset, ltEventMatchString=ltEventMatchString, rlLogString=rlLogString, ccClientErrorDisplayStatus=ccClientErrorDisplayStatus, serverConfig=serverConfig, ccClientInfoLogStatus=ccClientInfoLogStatus, logWindowTable=logWindowTable, ltLogString=ltLogString, scLastChange=scLastChange, ccClientCriticalDisplayStatus=ccClientCriticalDisplayStatus, recoveredLogTable=recoveredLogTable, ccClientID=ccClientID, scAutoFreeze=scAutoFreeze, ccClientFreezeLogStatus=ccClientFreezeLogStatus, ctSSA=ctSSA, ccClientErrorLogStatus=ccClientErrorLogStatus, ccClientFreezeDisplayStatus=ccClientFreezeDisplayStatus, clientConfigEntry=clientConfigEntry, ccClientName=ccClientName, recoveredLogTableEntry=recoveredLogTableEntry, scAdminStatus=scAdminStatus, clientConfigTable=clientConfigTable, ltIndex=ltIndex, ccClientLogStatus=ccClientLogStatus, ccClientDisplayStatus=ccClientDisplayStatus, rlIndex=rlIndex, ccClientDebugLogStatus=ccClientDebugLogStatus, ltClientMatchString=ltClientMatchString, ccClientCriticalLogStatus=ccClientCriticalLogStatus, logWindow=logWindow)
