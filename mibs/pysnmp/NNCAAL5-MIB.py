#
# PySNMP MIB module NNCAAL5-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNCAAL5-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:13:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
atmVclVpi, atmVclVci = mibBuilder.importSymbols("ATM-MIB", "atmVclVpi", "atmVclVci")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
nncExtensions, = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, MibIdentifier, Counter32, Unsigned32, Counter64, Bits, iso, IpAddress, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "MibIdentifier", "Counter32", "Unsigned32", "Counter64", "Bits", "iso", "IpAddress", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nncAAL5 = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 71))
if mibBuilder.loadTexts: nncAAL5.setLastUpdated('9906101200Z')
if mibBuilder.loadTexts: nncAAL5.setOrganization('Newbridge Networks Corporation')
nncAAL5Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 71, 1))
nncAAL5Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 71, 2))
nncAAL5Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 71, 3))
nncAAL5Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 71, 4))
nncAAL5Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 1))
nncAAL5Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 2))
nncAAL5StatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 2, 1), )
if mibBuilder.loadTexts: nncAAL5StatisticsTable.setStatus('current')
nncAAL5StatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: nncAAL5StatisticsEntry.setStatus('current')
nncAAL5RxPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAAL5RxPDUs.setStatus('current')
nncAAL5TxPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAAL5TxPDUs.setStatus('current')
nncAAL5Crc32PDUErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAAL5Crc32PDUErrors.setStatus('current')
nncAAL5InvalidFormatPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAAL5InvalidFormatPDU.setStatus('current')
nncAAL5OversizedSDU = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAAL5OversizedSDU.setStatus('current')
nncAAL5InvalidFields = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAAL5InvalidFields.setStatus('current')
nncAAL5ReassemblyTimerExpirations = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 71, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAAL5ReassemblyTimerExpirations.setStatus('current')
nncAAL5BasicStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 71, 3, 1)).setObjects(("NNCAAL5-MIB", "nncAAL5RxPDUs"), ("NNCAAL5-MIB", "nncAAL5TxPDUs"), ("NNCAAL5-MIB", "nncAAL5Crc32PDUErrors"), ("NNCAAL5-MIB", "nncAAL5InvalidFormatPDU"), ("NNCAAL5-MIB", "nncAAL5OversizedSDU"), ("NNCAAL5-MIB", "nncAAL5InvalidFields"), ("NNCAAL5-MIB", "nncAAL5ReassemblyTimerExpirations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAAL5BasicStatisticsGroup = nncAAL5BasicStatisticsGroup.setStatus('current')
nncAAL5Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 71, 4, 1)).setObjects(("NNCAAL5-MIB", "nncAAL5BasicStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAAL5Compliance = nncAAL5Compliance.setStatus('current')
mibBuilder.exportSymbols("NNCAAL5-MIB", nncAAL5ReassemblyTimerExpirations=nncAAL5ReassemblyTimerExpirations, nncAAL5Traps=nncAAL5Traps, nncAAL5Crc32PDUErrors=nncAAL5Crc32PDUErrors, nncAAL5InvalidFormatPDU=nncAAL5InvalidFormatPDU, nncAAL5StatisticsEntry=nncAAL5StatisticsEntry, nncAAL5OversizedSDU=nncAAL5OversizedSDU, nncAAL5InvalidFields=nncAAL5InvalidFields, nncAAL5BasicStatisticsGroup=nncAAL5BasicStatisticsGroup, nncAAL5Statistics=nncAAL5Statistics, nncAAL5RxPDUs=nncAAL5RxPDUs, PYSNMP_MODULE_ID=nncAAL5, nncAAL5Groups=nncAAL5Groups, nncAAL5Compliance=nncAAL5Compliance, nncAAL5TxPDUs=nncAAL5TxPDUs, nncAAL5StatisticsTable=nncAAL5StatisticsTable, nncAAL5Compliances=nncAAL5Compliances, nncAAL5Objects=nncAAL5Objects, nncAAL5=nncAAL5, nncAAL5Configuration=nncAAL5Configuration)
