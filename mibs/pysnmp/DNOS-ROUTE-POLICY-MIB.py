#
# PySNMP MIB module DNOS-ROUTE-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-ROUTE-POLICY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:37:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
fastPathRouting, = mibBuilder.importSymbols("DNOS-ROUTING-MIB", "fastPathRouting")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, Counter32, TimeTicks, Counter64, NotificationType, ModuleIdentity, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Counter32", "TimeTicks", "Counter64", "NotificationType", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "MibIdentifier", "iso")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
fastPathRoutePolicy = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20))
if mibBuilder.loadTexts: fastPathRoutePolicy.setLastUpdated('201210010000Z')
if mibBuilder.loadTexts: fastPathRoutePolicy.setOrganization('Dell, Inc.')
class FastpathRoutePolicyAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("permit", 1), ("deny", 2))

class FastpathRoutePolicyStmtIpPrecedence(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("routine", 0), ("priority", 1), ("immediate", 2), ("flash", 3), ("flash-override", 4), ("critical", 5), ("internet", 6), ("network", 7), ("invalid", 8))

fastpathRoutePolicyNameTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 1), )
if mibBuilder.loadTexts: fastpathRoutePolicyNameTable.setStatus('current')
fastpathRoutePolicyNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 1, 1), ).setIndexNames((0, "DNOS-ROUTE-POLICY-MIB", "fastpathRoutePolicyName"), (0, "DNOS-ROUTE-POLICY-MIB", "fastpathRoutePolicyStmtActionType"), (0, "DNOS-ROUTE-POLICY-MIB", "fastpathRoutePolicySequence"))
if mibBuilder.loadTexts: fastpathRoutePolicyNameEntry.setStatus('current')
fastpathRoutePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastpathRoutePolicyName.setStatus('current')
fastpathRoutePolicyStmtActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 1, 1, 2), FastpathRoutePolicyAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtActionType.setStatus('current')
fastpathRoutePolicySequence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastpathRoutePolicySequence.setStatus('current')
fastpathRoutePolicyNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastpathRoutePolicyNameRowStatus.setStatus('current')
fastpathRoutePolicyStamentTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2), )
if mibBuilder.loadTexts: fastpathRoutePolicyStamentTable.setStatus('current')
fastpathRoutePolicyStatementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1), ).setIndexNames((0, "DNOS-ROUTE-POLICY-MIB", "fastpathRoutePolicyStmtName"), (0, "DNOS-ROUTE-POLICY-MIB", "fastpathRoutePolicyStmtSeqNum"), (0, "DNOS-ROUTE-POLICY-MIB", "fastpathRoutePolicyStmtAction"))
if mibBuilder.loadTexts: fastpathRoutePolicyStatementEntry.setStatus('current')
fastpathRoutePolicyStmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: fastpathRoutePolicyStmtName.setStatus('current')
fastpathRoutePolicyStmtSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: fastpathRoutePolicyStmtSeqNum.setStatus('current')
fastpathRoutePolicyStmtAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 3), FastpathRoutePolicyAction())
if mibBuilder.loadTexts: fastpathRoutePolicyStmtAction.setStatus('current')
fastpathRoutePolicyStmtMatchIpv4AclList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtMatchIpv4AclList.setStatus('current')
fastpathRoutePolicyStmtMatchIpv4AclDelList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtMatchIpv4AclDelList.setStatus('current')
fastpathRoutePolicyStmtMatchMacAclList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtMatchMacAclList.setStatus('current')
fastpathRoutePolicyStmtMatchMacAclDelList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtMatchMacAclDelList.setStatus('current')
fastpathRoutePolicyStmtMatchPacketLengthRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtMatchPacketLengthRangeMin.setStatus('current')
fastpathRoutePolicyStmtMatchPacketLengthRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtMatchPacketLengthRangeMax.setStatus('current')
fastpathRoutePolicyStmtSetIpNextHopList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtSetIpNextHopList.setStatus('current')
fastpathRoutePolicyStmtSetIpNextHopDelList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtSetIpNextHopDelList.setStatus('current')
fastpathRoutePolicyStmtSetDefaultIpNextHopList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtSetDefaultIpNextHopList.setStatus('current')
fastpathRoutePolicyStmtSetDefaultIpNextHopDelList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtSetDefaultIpNextHopDelList.setStatus('current')
fastpathRoutePolicyStmtSetIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 14), FastpathRoutePolicyStmtIpPrecedence()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtSetIpPrecedence.setStatus('current')
fastpathRoutePolicyStmtSetIntfNull0 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 2, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastpathRoutePolicyStmtSetIntfNull0.setStatus('current')
fastpathRoutePolicyIfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 3), )
if mibBuilder.loadTexts: fastpathRoutePolicyIfTable.setStatus('current')
fastpathRoutePolicyIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 3, 1), ).setIndexNames((0, "DNOS-ROUTE-POLICY-MIB", "fastpathRoutePolicyIfIndex"), (0, "DNOS-ROUTE-POLICY-MIB", "fastpathRoutePolicyIfName"))
if mibBuilder.loadTexts: fastpathRoutePolicyIfEntry.setStatus('current')
fastpathRoutePolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 3, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastpathRoutePolicyIfIndex.setStatus('current')
fastpathRoutePolicyIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastpathRoutePolicyIfName.setStatus('current')
fastpathRoutePolicyIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 20, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastpathRoutePolicyIfRowStatus.setStatus('current')
mibBuilder.exportSymbols("DNOS-ROUTE-POLICY-MIB", fastpathRoutePolicyIfIndex=fastpathRoutePolicyIfIndex, fastpathRoutePolicyStmtSetDefaultIpNextHopList=fastpathRoutePolicyStmtSetDefaultIpNextHopList, fastpathRoutePolicyStmtMatchPacketLengthRangeMin=fastpathRoutePolicyStmtMatchPacketLengthRangeMin, fastpathRoutePolicyNameRowStatus=fastpathRoutePolicyNameRowStatus, fastpathRoutePolicyStmtSetIpPrecedence=fastpathRoutePolicyStmtSetIpPrecedence, fastpathRoutePolicyStmtMatchPacketLengthRangeMax=fastpathRoutePolicyStmtMatchPacketLengthRangeMax, PYSNMP_MODULE_ID=fastPathRoutePolicy, fastpathRoutePolicyNameEntry=fastpathRoutePolicyNameEntry, fastpathRoutePolicyIfEntry=fastpathRoutePolicyIfEntry, fastpathRoutePolicyStmtSetIpNextHopList=fastpathRoutePolicyStmtSetIpNextHopList, fastpathRoutePolicyStmtActionType=fastpathRoutePolicyStmtActionType, fastpathRoutePolicyNameTable=fastpathRoutePolicyNameTable, fastpathRoutePolicyStmtSetIpNextHopDelList=fastpathRoutePolicyStmtSetIpNextHopDelList, fastpathRoutePolicyStatementEntry=fastpathRoutePolicyStatementEntry, fastpathRoutePolicySequence=fastpathRoutePolicySequence, fastpathRoutePolicyStmtName=fastpathRoutePolicyStmtName, fastpathRoutePolicyStmtMatchIpv4AclList=fastpathRoutePolicyStmtMatchIpv4AclList, FastpathRoutePolicyStmtIpPrecedence=FastpathRoutePolicyStmtIpPrecedence, fastpathRoutePolicyStmtAction=fastpathRoutePolicyStmtAction, fastpathRoutePolicyStmtSetDefaultIpNextHopDelList=fastpathRoutePolicyStmtSetDefaultIpNextHopDelList, fastPathRoutePolicy=fastPathRoutePolicy, fastpathRoutePolicyIfRowStatus=fastpathRoutePolicyIfRowStatus, fastpathRoutePolicyStmtMatchMacAclList=fastpathRoutePolicyStmtMatchMacAclList, fastpathRoutePolicyStmtMatchMacAclDelList=fastpathRoutePolicyStmtMatchMacAclDelList, fastpathRoutePolicyStamentTable=fastpathRoutePolicyStamentTable, fastpathRoutePolicyStmtSetIntfNull0=fastpathRoutePolicyStmtSetIntfNull0, fastpathRoutePolicyIfName=fastpathRoutePolicyIfName, FastpathRoutePolicyAction=FastpathRoutePolicyAction, fastpathRoutePolicyStmtSeqNum=fastpathRoutePolicyStmtSeqNum, fastpathRoutePolicyStmtMatchIpv4AclDelList=fastpathRoutePolicyStmtMatchIpv4AclDelList, fastpathRoutePolicyIfTable=fastpathRoutePolicyIfTable, fastpathRoutePolicyName=fastpathRoutePolicyName)
