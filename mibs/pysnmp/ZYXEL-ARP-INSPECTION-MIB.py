#
# PySNMP MIB module ZYXEL-ARP-INSPECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-ARP-INSPECTION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:42:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, ModuleIdentity, NotificationType, Bits, Counter32, Counter64, Unsigned32, MibIdentifier, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Bits", "Counter32", "Counter64", "Unsigned32", "MibIdentifier", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "iso")
DisplayString, DateAndTime, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "MacAddress", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelArpInspection = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12))
if mibBuilder.loadTexts: zyxelArpInspection.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelArpInspection.setOrganization('Enterprise Solution ZyXEL')
zyxelArpInspectSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1))
zyxelArpInspectStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2))
zyArpInspectState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectState.setStatus('current')
zyArpInspectFilterAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectFilterAgingTime.setStatus('current')
zyxelArpInspectLog = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 3))
zyArpInspectLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectLogEntries.setStatus('current')
zyArpInspectLogRate = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectLogRate.setStatus('current')
zyArpInspectLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectLogInterval.setStatus('current')
zyxelArpInspectVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 4), )
if mibBuilder.loadTexts: zyxelArpInspectVlanTable.setStatus('current')
zyxelArpInspectVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 4, 1), ).setIndexNames((0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectVlanVid"))
if mibBuilder.loadTexts: zyxelArpInspectVlanEntry.setStatus('current')
zyArpInspectVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: zyArpInspectVlanVid.setStatus('current')
zyArpInspectVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 4, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectVlanState.setStatus('current')
zyArpInspectVlanLog = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("none", 2), ("permit", 3), ("deny", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectVlanLog.setStatus('current')
zyxelArpInspectPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 5), )
if mibBuilder.loadTexts: zyxelArpInspectPortTable.setStatus('current')
zyxelArpInspectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 5, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelArpInspectPortEntry.setStatus('current')
zyArpInspectPortTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 5, 1, 1), EnabledStatus().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectPortTrustState.setStatus('current')
zyArpInspectPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectPortRate.setStatus('current')
zyArpInspectPortInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectPortInterval.setStatus('current')
zyArpInspectFilterClearAll = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectFilterClearAll.setStatus('current')
zyArpInspectLogClear = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectLogClear.setStatus('current')
zyxelArpInspectFilterTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3), )
if mibBuilder.loadTexts: zyxelArpInspectFilterTable.setStatus('current')
zyxelArpInspectFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1), ).setIndexNames((0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectFilterMacAddress"), (0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectFilterVid"))
if mibBuilder.loadTexts: zyxelArpInspectFilterEntry.setStatus('current')
zyArpInspectFilterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: zyArpInspectFilterMacAddress.setStatus('current')
zyArpInspectFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: zyArpInspectFilterVid.setStatus('current')
zyArpInspectFilterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectFilterPort.setStatus('current')
zyArpInspectFilterExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectFilterExpiry.setStatus('current')
zyArpInspectFilterReasonType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("macVid", 1), ("port", 2), ("ip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectFilterReasonType.setStatus('current')
zyArpInspectFilterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyArpInspectFilterClear.setStatus('current')
zyxelArpInspectLogTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4), )
if mibBuilder.loadTexts: zyxelArpInspectLogTable.setStatus('current')
zyxelArpInspectLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1), ).setIndexNames((0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectLogMacAdderss"), (0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectLogVid"), (0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectLogPort"), (0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectLogIpAddress"), (0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectLogReasonType"))
if mibBuilder.loadTexts: zyxelArpInspectLogEntry.setStatus('current')
zyArpInspectLogMacAdderss = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: zyArpInspectLogMacAdderss.setStatus('current')
zyArpInspectLogVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: zyArpInspectLogVid.setStatus('current')
zyArpInspectLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: zyArpInspectLogPort.setStatus('current')
zyArpInspectLogIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 4), IpAddress())
if mibBuilder.loadTexts: zyArpInspectLogIpAddress.setStatus('current')
zyArpInspectLogNumberPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectLogNumberPacket.setStatus('current')
zyArpInspectLogReasonType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("deny", 1), ("denyStatic", 2), ("denyDHCP", 3), ("permitStatic", 4), ("permitDHCP", 5))))
if mibBuilder.loadTexts: zyArpInspectLogReasonType.setStatus('current')
zyArpInspectLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectLogTime.setStatus('current')
zyxelArpInspectStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5), )
if mibBuilder.loadTexts: zyxelArpInspectStatisticsTable.setStatus('current')
zyxelArpInspectStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1), ).setIndexNames((0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectStatisticsVid"))
if mibBuilder.loadTexts: zyxelArpInspectStatisticsEntry.setStatus('current')
zyArpInspectStatisticsVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: zyArpInspectStatisticsVid.setStatus('current')
zyArpInspectStatisticsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectStatisticsReceived.setStatus('current')
zyArpInspectStatisticsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectStatisticsRequest.setStatus('current')
zyArpInspectStatisticsReply = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectStatisticsReply.setStatus('current')
zyArpInspectStatisticsForward = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectStatisticsForward.setStatus('current')
zyArpInspectStatisticsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectStatisticsDrop.setStatus('current')
zyArpInspectStatisticsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectStatisticsClear.setStatus('current')
mibBuilder.exportSymbols("ZYXEL-ARP-INSPECTION-MIB", zyArpInspectFilterMacAddress=zyArpInspectFilterMacAddress, zyArpInspectPortTrustState=zyArpInspectPortTrustState, zyArpInspectStatisticsReply=zyArpInspectStatisticsReply, zyArpInspectPortRate=zyArpInspectPortRate, zyArpInspectFilterPort=zyArpInspectFilterPort, zyxelArpInspectStatus=zyxelArpInspectStatus, zyArpInspectLogPort=zyArpInspectLogPort, zyArpInspectFilterClearAll=zyArpInspectFilterClearAll, zyArpInspectStatisticsForward=zyArpInspectStatisticsForward, zyArpInspectVlanLog=zyArpInspectVlanLog, zyxelArpInspectPortEntry=zyxelArpInspectPortEntry, zyArpInspectLogInterval=zyArpInspectLogInterval, PYSNMP_MODULE_ID=zyxelArpInspection, zyxelArpInspectLogTable=zyxelArpInspectLogTable, zyArpInspectState=zyArpInspectState, zyxelArpInspectSetup=zyxelArpInspectSetup, zyArpInspectLogReasonType=zyArpInspectLogReasonType, zyArpInspectFilterReasonType=zyArpInspectFilterReasonType, zyArpInspectLogNumberPacket=zyArpInspectLogNumberPacket, zyArpInspectFilterVid=zyArpInspectFilterVid, zyArpInspectStatisticsDrop=zyArpInspectStatisticsDrop, zyArpInspectFilterClear=zyArpInspectFilterClear, zyxelArpInspectVlanEntry=zyxelArpInspectVlanEntry, zyxelArpInspectLog=zyxelArpInspectLog, zyArpInspectLogRate=zyArpInspectLogRate, zyxelArpInspectPortTable=zyxelArpInspectPortTable, zyxelArpInspectLogEntry=zyxelArpInspectLogEntry, zyArpInspectStatisticsRequest=zyArpInspectStatisticsRequest, zyArpInspectLogMacAdderss=zyArpInspectLogMacAdderss, zyArpInspectVlanVid=zyArpInspectVlanVid, zyArpInspectFilterExpiry=zyArpInspectFilterExpiry, zyxelArpInspectFilterTable=zyxelArpInspectFilterTable, zyxelArpInspectStatisticsEntry=zyxelArpInspectStatisticsEntry, zyArpInspectFilterAgingTime=zyArpInspectFilterAgingTime, zyArpInspectLogVid=zyArpInspectLogVid, zyxelArpInspectVlanTable=zyxelArpInspectVlanTable, zyArpInspectLogTime=zyArpInspectLogTime, zyArpInspectStatisticsClear=zyArpInspectStatisticsClear, zyxelArpInspectStatisticsTable=zyxelArpInspectStatisticsTable, zyArpInspectVlanState=zyArpInspectVlanState, zyArpInspectLogClear=zyArpInspectLogClear, zyxelArpInspectFilterEntry=zyxelArpInspectFilterEntry, zyxelArpInspection=zyxelArpInspection, zyArpInspectStatisticsReceived=zyArpInspectStatisticsReceived, zyArpInspectLogEntries=zyArpInspectLogEntries, zyArpInspectLogIpAddress=zyArpInspectLogIpAddress, zyArpInspectPortInterval=zyArpInspectPortInterval, zyArpInspectStatisticsVid=zyArpInspectStatisticsVid)
