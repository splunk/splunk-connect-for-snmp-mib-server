#
# PySNMP MIB module CTRON-REMOTE-ACCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-REMOTE-ACCESS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:15:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, MibIdentifier, Bits, Integer32, Counter32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, ModuleIdentity, Counter64, enterprises, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "Integer32", "Counter32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "ModuleIdentity", "Counter64", "enterprises", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Index(Integer32):
    pass

class DLCI(Integer32):
    pass

cabletron = MibIdentifier((1, 3, 6, 1, 4, 1, 52))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4))
ctron = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1))
ctDataLink = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2))
ctronWan = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7))
ctRemoteAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2))
ctRemoteConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1))
ctDs1Ext = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2))
ctRs232Ext = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 3))
ctFrDcp = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 4))
ctDDSExt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5))
ctPPPExt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6))
ctWanalyzer = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7))
ctDs1Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8))
ctIPPQFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9))
ctDs3Ext = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 10))
ctRemNumConnections = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemNumConnections.setStatus('mandatory')
ctRemPhysPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2), )
if mibBuilder.loadTexts: ctRemPhysPortTable.setStatus('mandatory')
ctRemPhysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctRemConnectionIndex"))
if mibBuilder.loadTexts: ctRemPhysPortEntry.setStatus('mandatory')
ctRemConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemConnectionIndex.setStatus('mandatory')
ctRemPhysPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("t1", 2), ("e1", 3), ("synchronous", 4), ("dds", 5), ("di", 6), ("hdsl", 7), ("isdnBRI", 8), ("ds30", 9), ("t1dds", 10))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemPhysPortType.setStatus('mandatory')
ctRemPhysPortSpecificMib = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemPhysPortSpecificMib.setStatus('mandatory')
ctRemPhysPortProtMgrType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("pppNailedUp", 2), ("isdnPriPpp", 3), ("isdnBriPpp", 4), ("frameRelayPvcRtr", 5), ("frameRelayPvcSw", 6), ("hdlc", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemPhysPortProtMgrType.setStatus('mandatory')
ctRemPhysPortProtMgrIfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemPhysPortProtMgrIfaceNum.setStatus('mandatory')
ctRemPhysPortWanIfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemPhysPortWanIfaceNum.setStatus('mandatory')
ctRemPhysPortProtMgrMaxIfos = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemPhysPortProtMgrMaxIfos.setStatus('mandatory')
ctRemPhysPortProtMgrIfaceList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemPhysPortProtMgrIfaceList.setStatus('mandatory')
ctRemPhysAlarmTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemPhysAlarmTimeOut.setStatus('mandatory')
ctRemPhysWpimType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 2, 1, 10), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemPhysWpimType.setStatus('mandatory')
ctRemInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3), )
if mibBuilder.loadTexts: ctRemInterfaceTable.setStatus('mandatory')
ctRemInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctRemIntEntIfIndex"))
if mibBuilder.loadTexts: ctRemInterfaceEntry.setStatus('mandatory')
ctRemIntEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemIntEntIfIndex.setStatus('mandatory')
ctRemIntEntCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntCompression.setStatus('mandatory')
ctRemIntEntCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemIntEntCompRatio.setStatus('mandatory')
ctRemIntEntCompStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemIntEntCompStatus.setStatus('mandatory')
ctRemIntEntMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntMTU.setStatus('mandatory')
ctRemIntEntCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntCongestion.setStatus('mandatory')
ctRemIntEntMaxProfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntMaxProfiles.setStatus('mandatory')
ctRemIntEntTxIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntTxIdleTimeout.setStatus('mandatory')
ctRemIntEntRxIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntRxIdleTimeout.setStatus('mandatory')
ctRemIntEntCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntCircuitName.setStatus('mandatory')
ctRemIntEntEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntEncryption.setStatus('mandatory')
ctRemIntEntEncryptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemIntEntEncryptStatus.setStatus('mandatory')
ctRemPrimaryInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 4), )
if mibBuilder.loadTexts: ctRemPrimaryInterfaceTable.setStatus('mandatory')
ctRemPrimaryInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 4, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctRemPriIntEntIfIndex"))
if mibBuilder.loadTexts: ctRemPrimaryInterfaceEntry.setStatus('mandatory')
ctRemPriIntEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemPriIntEntIfIndex.setStatus('mandatory')
ctRemPriIntEntConnectRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 4, 1, 2), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemPriIntEntConnectRetryInterval.setStatus('mandatory')
ctRemBackupInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 5), )
if mibBuilder.loadTexts: ctRemBackupInterfaceTable.setStatus('mandatory')
ctRemBackupInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 5, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctRemIntEntBackupIfIndex"))
if mibBuilder.loadTexts: ctRemBackupInterfaceEntry.setStatus('mandatory')
ctRemIntEntBackupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemIntEntBackupIfIndex.setStatus('mandatory')
ctRemIntEntBackupIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntBackupIfNum.setStatus('mandatory')
ctRemIntEntBackupIfInUseCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemIntEntBackupIfInUseCnt.setStatus('mandatory')
ctRemIntEntBackupIfTimeToConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntBackupIfTimeToConnect.setStatus('mandatory')
ctRemIntEntBackupIfTimeToDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntBackupIfTimeToDisconnect.setStatus('mandatory')
ctRemIntEntBackupIfOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntBackupIfOverride.setStatus('mandatory')
ctRemIntEntBackupConnectRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntBackupConnectRetries.setStatus('mandatory')
ctRemIntEntBackupConnectRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemIntEntBackupConnectRetryInterval.setStatus('mandatory')
ctRemExtPhysPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 6), )
if mibBuilder.loadTexts: ctRemExtPhysPortTable.setStatus('mandatory')
ctRemExtPhysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 6, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctRemExtConnectionIndex"))
if mibBuilder.loadTexts: ctRemExtPhysPortEntry.setStatus('mandatory')
ctRemExtConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemExtConnectionIndex.setStatus('mandatory')
ctRemExtProtMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemExtProtMgrIndex.setStatus('mandatory')
ctRemExtPhysPortProtMgrType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("pppNailedUp", 2), ("isdnPriPpp", 3), ("isdnBriPpp", 4), ("frameRelayPvcRtr", 5), ("frameRelayPvcSw", 6), ("hdlc", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemExtPhysPortProtMgrType.setStatus('mandatory')
ctRemExtPhysPortProtMgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemExtPhysPortProtMgrEnable.setStatus('mandatory')
ctRemExtPhysPortProtMgrIfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemExtPhysPortProtMgrIfaceNum.setStatus('mandatory')
ctRemExtPhysPortProtMgrMaxIfos = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRemExtPhysPortProtMgrMaxIfos.setStatus('mandatory')
ctRemExtPhysPortProtMgrIfaceList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemExtPhysPortProtMgrIfaceList.setStatus('mandatory')
ctRemExtPhysPortProtMgrChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 1, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRemExtPhysPortProtMgrChannelList.setStatus('mandatory')
ctDs1ExtensionsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1), )
if mibBuilder.loadTexts: ctDs1ExtensionsTable.setStatus('mandatory')
ctDs1ExtensionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctDs1ExtensionsEntryIndex"))
if mibBuilder.loadTexts: ctDs1ExtensionsEntry.setStatus('mandatory')
ctDs1ExtensionsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs1ExtensionsEntryIndex.setStatus('mandatory')
ctDs1ExtensionsNumInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs1ExtensionsNumInterfaces.setStatus('mandatory')
ctDs1ExtensionsToggleFracTable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("update-table", 1), ("display-new", 2), ("display-old", 3), ("restore-old", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDs1ExtensionsToggleFracTable.setStatus('mandatory')
ctDs1ExtensionsLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("zero", 2), ("minus-7point5", 3), ("minus-15", 4), ("a133to266feet", 5), ("a266to399feet", 6), ("a399to533feet", 7), ("a533to655feet", 8))).clone('zero')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDs1ExtensionsLineBuildOut.setStatus('mandatory')
ctDs1ExtensionsCFADuration = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDs1ExtensionsCFADuration.setStatus('mandatory')
ctDs1ExtensionsDIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDs1ExtensionsDIEnable.setStatus('mandatory')
ctDs1ExtensionsTotalValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs1ExtensionsTotalValidIntervals.setStatus('mandatory')
wanDs1ExtensionsBertTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("internal", 2), ("manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanDs1ExtensionsBertTestMode.setStatus('mandatory')
wanDs1ExtensionsBertRun = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanDs1ExtensionsBertRun.setStatus('mandatory')
wanDs1ExtensionsBertCurrentResults = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanDs1ExtensionsBertCurrentResults.setStatus('mandatory')
wanDs1ExtensionsBertCumulativeResults = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanDs1ExtensionsBertCumulativeResults.setStatus('mandatory')
wanDs1ExtensionsBertPeakResults = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanDs1ExtensionsBertPeakResults.setStatus('mandatory')
wanDs1ExtensionsBertAverageResult = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanDs1ExtensionsBertAverageResult.setStatus('mandatory')
wanDs1ExtensionsBertTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("patternOther", 1), ("pattern1s", 2), ("pattern63", 3), ("pattern511", 4), ("pattern2047", 5), ("pattern3in24", 6), ("patternQRSS", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanDs1ExtensionsBertTestPattern.setStatus('mandatory')
wanDs1ExtensionsBertSamplePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanDs1ExtensionsBertSamplePeriod.setStatus('mandatory')
wanDs1ExtensionsBertNumPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanDs1ExtensionsBertNumPeriods.setStatus('mandatory')
wanDs1ExtensionsBertTestTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanDs1ExtensionsBertTestTraps.setStatus('mandatory')
wanDs1ExtensionsBertDataStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("waitingForLink", 2), ("waitingForLoopback", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanDs1ExtensionsBertDataStatus.setStatus('mandatory')
ctDs1WanDriverTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 2), )
if mibBuilder.loadTexts: ctDs1WanDriverTable.setStatus('mandatory')
ctDs1WanDriverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 2, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctDs1WanDriverEntryIndex"), (0, "CTRON-REMOTE-ACCESS-MIB", "ctDs1WanDriverChannelIndex"))
if mibBuilder.loadTexts: ctDs1WanDriverEntry.setStatus('mandatory')
ctDs1WanDriverEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs1WanDriverEntryIndex.setStatus('mandatory')
ctDs1WanDriverChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs1WanDriverChannelIndex.setStatus('mandatory')
ctDs1WanDriverLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("jBZS", 2), ("invHDLC", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDs1WanDriverLineCode.setStatus('mandatory')
ctDs1WanDriverCRCBits = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDs1WanDriverCRCBits.setStatus('mandatory')
ctRs232ExtensionsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 3, 1), )
if mibBuilder.loadTexts: ctRs232ExtensionsTable.setStatus('mandatory')
ctRs232ExtensionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 3, 1, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctRs232ExtensionsEntryIndex"))
if mibBuilder.loadTexts: ctRs232ExtensionsEntry.setStatus('mandatory')
ctRs232ExtensionsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctRs232ExtensionsEntryIndex.setStatus('mandatory')
ctRs232ExtensionsCTSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRs232ExtensionsCTSEnable.setStatus('mandatory')
ctRs232ExtensionsDSREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRs232ExtensionsDSREnable.setStatus('mandatory')
ctRs232ExtensionsRTSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRs232ExtensionsRTSEnable.setStatus('mandatory')
ctRs232ExtensionsDTREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctRs232ExtensionsDTREnable.setStatus('mandatory')
frDcpCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 4, 1), )
if mibBuilder.loadTexts: frDcpCircuitTable.setStatus('mandatory')
frDcpCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 4, 1, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "frDcpCircuitIfIndex"), (0, "CTRON-REMOTE-ACCESS-MIB", "frDcpCircuitDlci"))
if mibBuilder.loadTexts: frDcpCircuitEntry.setStatus('mandatory')
frDcpCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 4, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDcpCircuitIfIndex.setStatus('mandatory')
frDcpCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 4, 1, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDcpCircuitDlci.setStatus('mandatory')
frDcpCircuitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDcpCircuitEnable.setStatus('mandatory')
frDcpCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDcpCircuitStatus.setStatus('mandatory')
frDcpCircuitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDcpCircuitRatio.setStatus('mandatory')
ctDDSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1), )
if mibBuilder.loadTexts: ctDDSConfigTable.setStatus('mandatory')
ctDDSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctDDSLineIndex"))
if mibBuilder.loadTexts: ctDDSConfigEntry.setStatus('mandatory')
ctDDSLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDDSLineIndex.setStatus('mandatory')
ctDDSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDDSIfIndex.setStatus('mandatory')
ctDDSLineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsPri", 1), ("ddsSc", 2), ("ddsCc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDDSLineMode.setStatus('mandatory')
ctDDSLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNone", 1), ("ddsJBZS", 2), ("otherLineCode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDDSLineCoding.setStatus('mandatory')
ctDDSLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ddsNoLoop", 1), ("ddsLocalLoop", 2), ("ddsLineLoop", 3), ("ddsOtherLoop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDDSLoopbackConfig.setStatus('mandatory')
ctDDSLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ddsNoAlarm", 1), ("ddsLossOfSignal", 2), ("ddsOutOfService", 3), ("ddsOutOfFrame", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDDSLineStatus.setStatus('mandatory')
ctDDSTxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsLoopTiming", 1), ("ddsLocalTiming", 2), ("ddsThroughTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDDSTxClockSource.setStatus('mandatory')
ctDDSPortInSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDDSPortInSpeed.setStatus('mandatory')
ctDDSPortOutSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDDSPortOutSpeed.setStatus('mandatory')
ctPppCountersTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 1), )
if mibBuilder.loadTexts: ctPppCountersTable.setStatus('mandatory')
ctPppCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 1, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctPppCountersIfIndex"))
if mibBuilder.loadTexts: ctPppCountersEntry.setStatus('mandatory')
ctPppCountersIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppCountersIfIndex.setStatus('mandatory')
ctPppCountersMaxTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppCountersMaxTerminate.setStatus('mandatory')
ctPppCountersMaxConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppCountersMaxConfigure.setStatus('mandatory')
ctPppCountersMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppCountersMaxFailure.setStatus('mandatory')
ctPppCountersRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppCountersRestartTimer.setStatus('mandatory')
ctPppLcpExtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2), )
if mibBuilder.loadTexts: ctPppLcpExtTable.setStatus('mandatory')
ctPppLcpExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctPppLcpExtIfIndex"))
if mibBuilder.loadTexts: ctPppLcpExtEntry.setStatus('mandatory')
ctPppLcpExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtIfIndex.setStatus('mandatory')
ctPppLcpExtAuthenticationProt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPppLcpExtAuthenticationProt.setStatus('mandatory')
ctPppLcpExtQualityProt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("lqr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtQualityProt.setStatus('mandatory')
ctPppLcpExtPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtPFC.setStatus('mandatory')
ctPppLcpExtACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtACFC.setStatus('mandatory')
ctPppLcpExtSelfDescribePadding = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtSelfDescribePadding.setStatus('mandatory')
ctPppLcpExtCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtCallback.setStatus('mandatory')
ctPppLcpExtCompoundFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtCompoundFrames.setStatus('mandatory')
ctPppLcpExtMru = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtMru.setStatus('mandatory')
ctPppLcpExtAccm = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtAccm.setStatus('mandatory')
ctPppLcpExtEchoRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtEchoRequest.setStatus('mandatory')
ctPppLcpExtReplyCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPppLcpExtReplyCounter.setStatus('mandatory')
ctPppLcpExtMpCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtMpCapable.setStatus('mandatory')
ctPppBncpExtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 3), )
if mibBuilder.loadTexts: ctPppBncpExtTable.setStatus('mandatory')
ctPppBncpExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 3, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctPppBncpExtIfIndex"))
if mibBuilder.loadTexts: ctPppBncpExtEntry.setStatus('mandatory')
ctPppBncpExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppBncpExtIfIndex.setStatus('mandatory')
ctPppBncpExtCrcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppBncpExtCrcStatus.setStatus('mandatory')
ctPppMpExtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 4), )
if mibBuilder.loadTexts: ctPppMpExtTable.setStatus('mandatory')
ctPppMpExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 4, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctPppMpExtIfIndex"))
if mibBuilder.loadTexts: ctPppMpExtEntry.setStatus('mandatory')
ctPppMpExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppMpExtIfIndex.setStatus('mandatory')
ctPppLcpExtMpLUT = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtMpLUT.setStatus('mandatory')
ctPppLcpExtMpHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtMpHistoryTime.setStatus('mandatory')
ctPppLcpExtMpMoreBW = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtMpMoreBW.setStatus('mandatory')
ctPppLcpExtMpLessBW = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtMpLessBW.setStatus('mandatory')
ctPppLcpExtMpMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtMpMaxChannels.setStatus('mandatory')
ctPppLcpExtMpChannelsToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtMpChannelsToAdd.setStatus('mandatory')
ctPppLcpExtMpChannelsToRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppLcpExtMpChannelsToRemove.setStatus('mandatory')
ctPppEcpExtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 5), )
if mibBuilder.loadTexts: ctPppEcpExtTable.setStatus('mandatory')
ctPppEcpExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 5, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctPppEcpExtIfIndex"))
if mibBuilder.loadTexts: ctPppEcpExtEntry.setStatus('mandatory')
ctPppEcpExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppEcpExtIfIndex.setStatus('mandatory')
ctPppEcpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppEcpKey.setStatus('mandatory')
ctPppEcpIV = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 6, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPppEcpIV.setStatus('mandatory')
ctWanalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 1), )
if mibBuilder.loadTexts: ctWanalyzerTable.setStatus('mandatory')
ctWanalyzerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 1, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctWanalyzerIfIndex"))
if mibBuilder.loadTexts: ctWanalyzerEntry.setStatus('mandatory')
ctWanalyzerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctWanalyzerIfIndex.setStatus('mandatory')
ctWanalyzerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctWanalyzerEnabled.setStatus('mandatory')
ctWanalyzerMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctWanalyzerMaxEntries.setStatus('mandatory')
ctWanalyzerClearAll = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctWanalyzerClearAll.setStatus('mandatory')
ctWanalyzerClearInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctWanalyzerClearInterface.setStatus('mandatory')
ctWanalyzerDisplayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctWanalyzerDisplayInterface.setStatus('mandatory')
ctWanalyzerCurrEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanalyzerCurrEntries.setStatus('mandatory')
wanalyzerMessageTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 2), )
if mibBuilder.loadTexts: wanalyzerMessageTable.setStatus('mandatory')
wanalyzerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 2, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "wanMessageIndex"))
if mibBuilder.loadTexts: wanalyzerEntry.setStatus('mandatory')
wanMessageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanMessageIndex.setStatus('mandatory')
wanMessageInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanMessageInterfaceIndex.setStatus('mandatory')
wanMessageDate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanMessageDate.setStatus('mandatory')
wanMessageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanMessageTime.setStatus('mandatory')
wanMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256), SingleValueConstraint(257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 1000, 1001, 1002, 1003, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510))).clone(namedValues=NamedValues(("wanalyzerLastMessageRepeated", 1), ("pppAuthentication", 2), ("pppBncpThisLayerStart", 3), ("pppBncpThisLayerFinished", 4), ("pppBncpThisLayerUp", 5), ("pppBncpThisLayerDown", 6), ("pppBncpInitializeRestartCount", 7), ("pppBncpZeroRestartCount", 8), ("pppBncpRcvConfReqGood", 9), ("pppBncpRcvConfReqBad", 10), ("pppBncpReceiveConfigureAck", 11), ("pppBncpReceiveConfigureNak", 12), ("pppBncpReceiveConfigureReject", 13), ("pppBncpReceiveTerminateRequest", 14), ("pppBncpReceiveTerminateAck", 15), ("pppBncpReceiveCodeRejectPermitted", 16), ("pppBncpReceiveCodeRejectCatastrophic", 17), ("pppBncpReceiveProtocolRejectPermitted", 18), ("pppBncpReceiveEchoRequest", 19), ("pppBncpReceiveEchoReply", 20), ("pppBncpReceiveDiscardRequest", 21), ("pppBncpReceiveUnknownCode", 22), ("pppBncpIllegalAction", 23), ("pppBncpSendConfigureRequest", 24), ("pppBncpSendConfigureAck", 25), ("pppBncpSendConfigureNak", 26), ("pppBncpSendConfigureReject", 27), ("pppBncpSendTerminateRequest", 28), ("pppBncpSendTerminateAck", 29), ("pppBncpSendCodeReject", 30), ("pppBncpSendProtocolReject", 31), ("pppBncpSendEchoReply", 32), ("pppBncpInitialState", 33), ("pppBncpStartingState", 34), ("pppBncpClosedState", 35), ("pppBncpStoppedState", 36), ("pppBncpClosingState", 37), ("pppBncpStoppingState", 38), ("pppBncpReqSentState", 39), ("pppBncpAckRcvdState", 40), ("pppBncpAckSentState", 41), ("pppBncpOpenedState", 42), ("pppBncpEthernetMacType", 43), ("pppBncpTokenRingMacType", 44), ("pppBncpFddiMacType", 45), ("pppBncpBridgeIdRcvReq", 46), ("pppBncpBridgeIdRcvNak", 47), ("pppBncpBridgeIdRcvRej", 48), ("pppBncpBridgeIdXmitReq", 49), ("pppBncpMacSelectRcvReq", 50), ("pppBncpMacSelectRcvNak", 51), ("pppBncpMacSelectRcvRej", 52), ("pppBncpMacSelectXmitReq", 53), ("pppBncpTinygramRcvReq", 54), ("pppBncpTinygramRcvNak", 55), ("pppBncpTinygramRcvRej", 56), ("pppBncpTinygramXmitReq", 57), ("pppBncpLanIdRcvReq", 58), ("pppBncpLanIdRcvNak", 59), ("pppBncpLanIdRcvRej", 60), ("pppBncpLanIdXmitReq", 61), ("pppCcpThisLayerStart", 62), ("pppCcpThisLayerFinished", 63), ("pppCcpThisLayerUp", 64), ("pppCcpThisLayerDown", 65), ("pppCcpInitializeRestartCount", 66), ("pppCcpZeroRestartCount", 67), ("pppCcpRcvConfReqGood", 68), ("pppCcpRcvConfReqBad", 69), ("pppCcpReceiveConfigureAck", 70), ("pppCcpReceiveConfigureNak", 71), ("pppCcpReceiveConfigureReject", 72), ("pppCcpReceiveTerminateRequest", 73), ("pppCcpReceiveTerminateAck", 74), ("pppCcpReceiveCodeRejectPermitted", 75), ("pppCcpReceiveCodeRejectCatastrophic", 76), ("pppCcpReceiveProtocolRejectPermitted", 77), ("pppCcpReceiveEchoRequest", 78), ("pppCcpReceiveEchoReply", 79), ("pppCcpReceiveDiscardRequest", 80), ("pppCcpReceiveUnknownCode", 81), ("pppCcpIllegalAction", 82), ("pppCcpSendConfigureRequest", 83), ("pppCcpSendConfigureAck", 84), ("pppCcpSendConfigureNak", 85), ("pppCcpSendConfigureReject", 86), ("pppCcpSendTerminateRequest", 87), ("pppCcpSendTerminateAck", 88), ("pppCcpSendCodeReject", 89), ("pppCcpSendProtocolReject", 90), ("pppCcpSendEchoReply", 91), ("pppCcpInitialState", 92), ("pppCcpStartingState", 93), ("pppCcpClosedState", 94), ("pppCcpStoppedState", 95), ("pppCcpClosingState", 96), ("pppCcpStoppingState", 97), ("pppCcpReqSentState", 98), ("pppCcpAckRcvdState", 99), ("pppCcpAckSentState", 100), ("pppCcpOpenedState", 101), ("pppCcpProprietaryCompRcvReq", 102), ("pppCcpProprietaryCompRcvNak", 103), ("pppCcpProprietaryCompRcvRej", 104), ("pppCcpProprietaryCompXmitReq", 105), ("pppCcpPredictorType1RcvReq", 106), ("pppCcpPredictorType1RcvNak", 107), ("pppCcpPredictorType1RcvRej", 108), ("pppCcpPredictorType1XmitReq", 109), ("pppCcpPredictorType2RcvReq", 110), ("pppCcpPredictorType2RcvNak", 111), ("pppCcpPredictorType2RcvRej", 112), ("pppCcpPredictorType2XmitReq", 113), ("pppCcpPuddleJumperRcvReq", 114), ("pppCcpPuddleJumperRcvNak", 115), ("pppCcpPuddleJumperRcvRej", 116), ("pppCcpPuddleJumperXmitReq", 117), ("pppCcpHpPpcRcvReq", 118), ("pppCcpHpPpcRcvNak", 119), ("pppCcpHpPpcRcvRej", 120), ("pppCcpHpPpcXmitReq", 121), ("pppCcpStacLzsRcvReq", 122), ("pppCcpStacLzsRcvNak", 123), ("pppCcpStacLzsRcvRej", 124), ("pppCcpStacLzsXmitReq", 125), ("pppCcpMsPpcRcvReq", 126), ("pppCcpMsPpcRcvNak", 127), ("pppCcpMsPpcRcvRej", 128), ("pppCcpMsPpcXmitReq", 129), ("pppCcpGandalfFzaRcvReq", 130), ("pppCcpGandalfFzaRcvNak", 131), ("pppCcpGandalfFzaRcvRej", 132), ("pppCcpGandalfFzaXmitReq", 133), ("pppCcpV42bisRcvReq", 134), ("pppCcpV42bisRcvNak", 135), ("pppCcpV42bisRcvRej", 136), ("pppCcpV42bisXmitReq", 137), ("pppCcpBsdLzwRcvReq", 138), ("pppCcpBsdLzwRcvNak", 139), ("pppCcpBsdLzwRcvRej", 140), ("pppCcpBsdLzwXmitReq", 141), ("pppCcpStackDcpRcvReq", 142), ("pppCcpStackDcpRcvNak", 143), ("pppCcpStackDcpRcvRej", 144), ("pppCcpStackDcpXmitReq", 145), ("pppChapChallengeReceived", 146), ("pppChapResponseReceived", 147), ("pppChapSuccessReceived", 148), ("pppChapFailureReceived", 149), ("pppChapSuccessSent", 150), ("pppChapFailureSent", 151), ("pppChapChallengeSent", 152), ("pppChapResponseSent", 153), ("pppIpcpThisLayerStart", 154), ("pppIpcpThisLayerFinished", 155), ("pppIpcpThisLayerUp", 156), ("pppIpcpThisLayerDown", 157), ("pppIpcpInitializeRestartCount", 158), ("pppIpcpZeroRestartCount", 159), ("pppIpcpRcvConfReqGood", 160), ("pppIpcpRcvConfReqBad", 161), ("pppIpcpReceiveConfigureAck", 162), ("pppIpcpReceiveConfigureNak", 163), ("pppIpcpReceiveConfigureReject", 164), ("pppIpcpReceiveTerminateRequest", 165), ("pppIpcpReceiveTerminateAck", 166), ("pppIpcpReceiveCodeRejectPermitted", 167), ("pppIpcpReceiveCodeRejectCatastrophic", 168), ("pppIpcpReceiveProtocolRejectPermitted", 169), ("pppIpcpReceiveEchoRequest", 170), ("pppIpcpReceiveEchoReply", 171), ("pppIpcpReceiveDiscardRequest", 172), ("pppIpcpReceiveUnknownCode", 173), ("pppIpcpIllegalAction", 174), ("pppIpcpSendConfigureRequest", 175), ("pppIpcpSendConfigureAck", 176), ("pppIpcpSendConfigureNak", 177), ("pppIpcpSendConfigureReject", 178), ("pppIpcpSendTerminateRequest", 179), ("pppIpcpSendTerminateAck", 180), ("pppIpcpSendCodeReject", 181), ("pppIpcpSendProtocolReject", 182), ("pppIpcpSendEchoReply", 183), ("pppIpcpInitialState", 184), ("pppIpcpStartingState", 185), ("pppIpcpClosedState", 186), ("pppIpcpStoppedState", 187), ("pppIpcpClosingState", 188), ("pppIpcpStoppingState", 189), ("pppIpcpReqSentState", 190), ("pppIpcpAckRcvdState", 191), ("pppIpcpAckSentState", 192), ("pppIpcpOpenedState", 193), ("pppIpcpIpAddressRcvReq", 194), ("pppIpcpIpAddressRcvNak", 195), ("pppIpcpIpAddressRcvRej", 196), ("pppIpcpIpAddressXmitReq", 197), ("pppIpcpCompressionTypeRcvReq", 198), ("pppIpcpCompressionTypeRcvRej", 199), ("pppIpcpCompressionTypeRcvNak", 200), ("pppIpcpCompressionTypeXmitReq", 201), ("pppIpxcpThisLayerStart", 202), ("pppIpxcpThisLayerFinished", 203), ("pppIpxcpThisLayerUp", 204), ("pppIpxcpThisLayerDown", 205), ("pppIpxcpInitializeRestartCount", 206), ("pppIpxcpZeroRestartCount", 207), ("pppIpxcpRcvConfReqGood", 208), ("pppIpxcpRcvConfReqBad", 209), ("pppIpxcpReceiveConfigureAck", 210), ("pppIpxcpReceiveConfigureNak", 211), ("pppIpxcpReceiveConfigureReject", 212), ("pppIpxcpReceiveTerminateAck", 214), ("pppIpxcpReceiveCodeRejectPermitted", 215), ("pppIpxcpReceiveCodeRejectCatastrophic", 216), ("pppIpxcpReceiveProtocolRejectPermitted", 217), ("pppIpxcpReceiveEchoRequest", 218), ("pppIpxcpReceiveEchoReply", 219), ("pppIpxcpReceiveDiscardRequest", 220), ("pppIpxcpReceiveUnknownCode", 221), ("pppIpxcpIllegalAction", 222), ("pppIpxcpSendConfigureRequest", 223), ("pppIpxcpSendConfigureAck", 224), ("pppIpxcpSendConfigureNak", 225), ("pppIpxcpSendConfigureReject", 226), ("pppIpxcpSendTerminateRequest", 227), ("pppIpxcpSendTerminateAck", 228), ("pppIpxcpSendCodeReject", 229), ("pppIpxcpSendProtocolReject", 230), ("pppIpxcpSendEchoReply", 231), ("pppIpxcpInitialState", 232), ("pppIpxcpStartingState", 233), ("pppIpxcpClosedState", 234), ("pppIpxcpStoppedState", 235), ("pppIpxcpClosingState", 236), ("pppIpxcpStoppingState", 237), ("pppIpxcpReqSentState", 238), ("pppIpxcpAckRcvdState", 239), ("pppIpxcpAckSentState", 240), ("pppIpxcpOpenedState", 241), ("pppIpxcpCompressionProtocolRcvReq", 242), ("pppIpxcpCompressionProtocolRcvNak", 243), ("pppIpxcpCompressionProtocolRcvRej", 244), ("pppIpxcpCompressionProtocolXmitReq", 245), ("pppIpxcpNetworkNumberRcvReq", 246), ("pppIpxcpNetworkNumberRcvNak", 247), ("pppIpxcpNetworkNumberRcvRej", 248), ("pppIpxcpNetworkNumberXmitReq", 249), ("pppIpxcpNodeNumberRcvReq", 250), ("pppIpxcpNodeNumberRcvNak", 251), ("pppIpxcpNodeNumberRcvRej", 252), ("pppIpxcpNodeNumberXmitReq", 253), ("pppIpxcpRoutingProtocolRcvReq", 254), ("pppIpxcpRoutingProtocolRcvNak", 255), ("pppIpxcpRoutingProtocolRcvRej", 256)) + NamedValues(("pppIpxcpRoutingProtocolXmitReq", 257), ("pppIpxcpRouterNameRcvReq", 258), ("pppIpxcpRouterNameRcvNak", 259), ("pppIpxcpRouterNameRcvRej", 260), ("pppIpxcpRouterNameXmitReq", 261), ("pppIpxcpConfigurationCompleteRcvReq", 262), ("pppIpxcpConfigurationCompleteRcvNak", 263), ("pppIpxcpConfigurationCompleteRcvRej", 264), ("pppIpxcpConfigurationCompleteXmitReq", 265), ("pppLcpThisLayerStart", 266), ("pppLcpThisLayerFinished", 267), ("pppLcpThisLayerUp", 268), ("pppLcpThisLayerDown", 269), ("pppLcpInitializeRestartCount", 270), ("pppLcpZeroRestartCount", 271), ("pppLcpRcvConfReqGood", 272), ("pppLcpRcvConfReqBad", 273), ("pppLcpReceiveConfigureAck", 274), ("pppLcpReceiveConfigureNak", 275), ("pppLcpReceiveConfigureReject", 276), ("pppLcpReceiveTerminateRequest", 277), ("pppLcpReceiveTerminateAck", 278), ("pppLcpReceiveCodeRejectPermitted", 279), ("pppLcpReceiveCodeRejectCatastrophic", 280), ("pppLcpReceiveProtocolReject", 281), ("pppLcpReceiveEchoRequest", 282), ("pppLcpReceiveEchoReply", 283), ("pppLcpReceiveDiscardRequest", 284), ("pppLcpReceiveUnknownCode", 285), ("pppLcpIllegalAction", 286), ("pppLcpSendConfigureRequest", 287), ("pppLcpSendConfigureAck", 288), ("pppLcpSendConfigureNak", 289), ("pppLcpSendConfigureReject", 290), ("pppLcpSendTerminateRequest", 291), ("pppLcpSendTerminateAck", 292), ("pppLcpSendCodeReject", 293), ("pppLcpSendProtocolReject", 294), ("pppLcpSendEchoReply", 295), ("pppLcpInitialState", 296), ("pppLcpStartingState", 297), ("pppLcpClosedState", 298), ("pppLcpStoppedState", 299), ("pppLcpClosingState", 300), ("pppLcpStoppingState", 301), ("pppLcpReqSentState", 302), ("pppLcpAckRcvdState", 303), ("pppLcpAckSentState", 304), ("pppLcpOpenedState", 305), ("pppLcpMruRcvReq", 306), ("pppLcpMruRcvNak", 307), ("pppLcpMruRcvRej", 308), ("pppLcpMruXmitReq", 309), ("pppLcpAsyncCharMapRcvReq", 310), ("pppLcpAsyncCharMapRcvNak", 311), ("pppLcpAsyncCharMapRcvRej", 312), ("pppLcpAsyncCharMapXmitReq", 313), ("pppLcpAuthenticationRcvReq", 314), ("pppLcpAuthenticationRcvNak", 315), ("pppLcpAuthenticationRcvRej", 316), ("pppLcpAuthenticationXmitReq", 317), ("pppLcpMagicNumberRcvReq", 318), ("pppLcpMagicNumberRcvNak", 319), ("pppLcpMagicNumberRcvRej", 320), ("pppLcpMagicNumberXmitReq", 321), ("pppLcpLinkQualityRcvReq", 322), ("pppLcpLinkQualityRcvNak", 323), ("pppLcpLinkQualityRcvRej", 324), ("pppLcpLinkQualityXmitReq", 325), ("pppLcpProtCompRcvReq", 326), ("pppLcpProtCompRcvNak", 327), ("pppLcpProtCompRcvRej", 328), ("pppLcpProtCompXmitReq", 329), ("pppLcpAddrCompRcvReq", 330), ("pppLcpAddrCompRcvNak", 331), ("pppLcpAddrCompRcvRej", 332), ("pppLcpAddrCompXmitReq", 333), ("pppLcpFcs32BitRcvReq", 334), ("pppLcpFcs32BitRcvNak", 335), ("pppLcpFcs32BitRcvRej", 336), ("pppLcpFcs32BitXmitReq", 337), ("pppLcpSelfDescPaddingRcvReq", 338), ("pppLcpSelfDescPaddingRcvNak", 339), ("pppLcpSelfDescPaddingRcvRej", 340), ("pppLcpSelfDescPaddingXmitReq", 341), ("pppLcpCompoundFramesRcvReq", 342), ("pppLcpCompoundFramesRcvNak", 343), ("pppLcpCompoundFramesRcvRej", 344), ("pppLcpCompoundFramesXmitReq", 345), ("pppLcpCallbackRcvReq", 346), ("pppLcpCallbackRcvNak", 347), ("pppLcpCallbackRcvRej", 348), ("pppLcpCallbackXmitReq", 349), ("pppLexThisLayerStart", 350), ("pppLexThisLayerFinished", 351), ("pppLexThisLayerUp", 352), ("pppLexThisLayerDown", 353), ("pppLexInitializeRestartCount", 354), ("pppLexZeroRestartCount", 355), ("pppLexRcvConfReqGood", 356), ("pppLexRcvConfReqBad", 357), ("pppLexReceiveConfigureAck", 358), ("pppLexReceiveConfigureNak", 359), ("pppLexReceiveConfigureReject", 360), ("pppLexReceiveTerminateRequest", 361), ("pppLexReceiveTerminateAck", 362), ("pppLexReceiveCodeRejectPermitted", 363), ("pppLexReceiveCodeRejectCatastrophic", 364), ("pppLexReceiveProtocolRejectPermitted", 365), ("pppLexReceiveEchoRequest", 366), ("pppLexReceiveEchoReply", 367), ("pppLexReceiveDiscardRequest", 368), ("pppLexReceiveUnknownCode", 369), ("pppLexIllegalAction", 370), ("pppLexSendConfigureRequest", 371), ("pppLexSendConfigureAck", 372), ("pppLexSendConfigureNak", 373), ("pppLexSendConfigureReject", 374), ("pppLexSendTerminateRequest", 375), ("pppLexSendTerminateAck", 376), ("pppLexSendCodeReject", 377), ("pppLexSendProtocolReject", 378), ("pppLexSendEchoReply", 379), ("pppLexInitialState", 380), ("pppLexStartingState", 381), ("pppLexClosedState", 382), ("pppLexStoppedState", 383), ("pppLexClosingState", 384), ("pppLexStoppingState", 385), ("pppLexReqSentState", 386), ("pppLexAckRcvdState", 387), ("pppLexAckSentState", 388), ("pppLexOpenedState", 389), ("pppLexMacTypeSelectRcvReq", 390), ("pppLexMacTypeSelectRcvNak", 391), ("pppLexMacTypeSelectRcvRej", 392), ("pppLexMacTypeSelectXmitReq", 393), ("pppLexTinygramCompressRcvReq", 394), ("pppLexTinygramCompressRcvNak", 395), ("pppLexTinygramCompressRcvRej", 396), ("pppLexTinygramCompressXmitReq", 397), ("pppLexMacAddressRcvReq", 398), ("pppLexMacAddressRcvNak", 399), ("pppLexMacAddressRcvRej", 400), ("pppLexMacAddressXmitReq", 401), ("pppLexMacRelayRcvReq", 402), ("pppLexMacRelayRcvNak", 403), ("pppLexMacRelayRcvRej", 404), ("pppLexMacRelayXmitReq", 405), ("pppLexStatisticsRequestRcvReq", 406), ("pppLqrSent", 407), ("pppLqrReceived", 408), ("pppLinkDead", 409), ("pppLinkEstablishment", 410), ("pppLinkTermination", 411), ("pppNetworkLayerPhase", 412), ("pppPapAuthenticateReqReceived", 413), ("pppPapAuthenticateAckReceived", 414), ("pppPapAuthenticateNakReceived", 415), ("pppPapAuthenticateReqSent", 416), ("pppPapAuthenticateAckSent", 417), ("pppPapAuthenticateNakSent", 418), ("frGotLmiPacket", 500), ("frGotBadQ922Header", 501), ("frGotCllmPacket", 502), ("frInactiveReceivedPacket", 503), ("frReceivedNlpidIpPacket", 504), ("frSentXidPacket", 505), ("frSentXidResponse", 506), ("frReceivedXidPacket", 507), ("frXidTimerExpired", 508), ("frGotBadUi", 509), ("frGotBadSnapPacket", 510), ("frLinkUp", 511), ("frLinkDown", 512), ("frLmiStarted", 513), ("frLmiStopped", 514), ("frLmiSentFullStatusEnquiry", 515), ("frLmiSentKeepAliveMessage", 516), ("frLmiStatusResponseReceived", 517), ("frLmiGotAnsiReportType", 518), ("frLmiGotFullStatusReport", 519), ("frLmiGotKeepAliveMessage", 520), ("frLmiUnsolicitedKeepAlive", 521), ("frLmiAsynchronousStatus", 522), ("frLmiGotQ933AReportType", 523), ("frLmiBadPvcStatusLength", 524), ("frLmiT391TimeoutFs", 525), ("frLmiT391TimeoutSe", 526), ("frLmiT391PollFailed", 527), ("frLmiT391PollSucceeded", 528), ("frLmiStatusEnquiryReceived", 529), ("frDcpMode1Initializing", 530), ("frDcpMode1Disabled", 531), ("frDcpMode1ControlPacketReceived", 532), ("frDcpMode1DataPacketReceived", 533), ("frDcpMode1RequestSent", 534), ("frDcpMode1RequestReceived", 535), ("frDcpMode1ResponseSent", 536), ("frDcpMode1ResponseReceived", 537), ("frDcpMode1Operational", 538), ("frDcpMode1TimerExpired", 539), ("frDcpMode2ControlPacketReceived", 540), ("frDcpResetPacketSent", 541), ("frDcpResetTimerExpired", 542), ("frDcpResetAckSent", 543), ("frDcpDictionaryQuotaExceeded", 544), ("isdnRemoteConnectionUp", 1000), ("isdnRemoteConnectionDown", 1001), ("isdnActivateConnection", 1002), ("isdnDeactivateConnection", 1003), ("multilinkMpLinkUp", 1500), ("multilinkMpAddBW", 1501), ("multilinkMpRemoveBW", 1502), ("multilinkMpSentBeginningFragment", 1503), ("multilinkMpSentMiddleFragment", 1504), ("multilinkMpSentEndFragment", 1505), ("multilinkMpSentCompleteMessage", 1506), ("multilinkMpReceivedBeginningFragment", 1507), ("multilinkMpReceivedMiddleFragment", 1508), ("multilinkMpReceivedEndFragment", 1509), ("multilinkMpReceivedCompleteMessage", 1510)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanMessageCode.setStatus('mandatory')
ds1AlarmsGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 1))
ds1AlarmGlobalAdmin = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmGlobalAdmin.setStatus('mandatory')
ds1AlarmGlobalAutoRecovery = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmGlobalAutoRecovery.setStatus('mandatory')
ds1AlarmGlobalTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmGlobalTrapEnable.setStatus('mandatory')
ds1AlarmGlobalESCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmGlobalESCount.setStatus('mandatory')
ds1AlarmGlobalESInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmGlobalESInterval.setStatus('mandatory')
ds1AlarmGlobalBPVErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmGlobalBPVErrorRate.setStatus('mandatory')
ds1AlarmGlobalBPVInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmGlobalBPVInterval.setStatus('mandatory')
ds1AlarmGlobalManualRecovery = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("recover", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmGlobalManualRecovery.setStatus('mandatory')
ds1AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2), )
if mibBuilder.loadTexts: ds1AlarmConfigTable.setStatus('mandatory')
ds1AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ds1PhysNum"))
if mibBuilder.loadTexts: ds1AlarmConfigEntry.setStatus('mandatory')
ds1PhysNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1PhysNum.setStatus('mandatory')
ds1AlarmAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmAdmin.setStatus('mandatory')
ds1AlarmAutoRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmAutoRecovery.setStatus('mandatory')
ds1AlarmTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmTrapEnable.setStatus('mandatory')
ds1AlarmESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmESCount.setStatus('mandatory')
ds1AlarmESInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmESInterval.setStatus('mandatory')
ds1AlarmBPVErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmBPVErrorRate.setStatus('mandatory')
ds1AlarmBPVInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmBPVInterval.setStatus('mandatory')
ds1AlarmManualRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("recover", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1AlarmManualRecovery.setStatus('mandatory')
ipPQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9, 1))
ipPQAdmin = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPQAdmin.setStatus('mandatory')
iPPQMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPPQMaxEntries.setStatus('mandatory')
iPPQNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPPQNumEntries.setStatus('mandatory')
iPPQAddAddress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPPQAddAddress.setStatus('mandatory')
iPPQDelAddress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPPQDelAddress.setStatus('mandatory')
ipPQAddressTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9, 2), )
if mibBuilder.loadTexts: ipPQAddressTable.setStatus('mandatory')
ipPQAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9, 2, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ipPQAddressId"))
if mibBuilder.loadTexts: ipPQAddressEntry.setStatus('mandatory')
ipPQAddressId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPQAddressId.setStatus('mandatory')
ipPQIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 9, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPQIPAddress.setStatus('mandatory')
ctDs3ExtensionsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 10, 1), )
if mibBuilder.loadTexts: ctDs3ExtensionsTable.setStatus('mandatory')
ctDs3ExtensionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 10, 1, 1), ).setIndexNames((0, "CTRON-REMOTE-ACCESS-MIB", "ctDs3ExtensionsEntryIndex"))
if mibBuilder.loadTexts: ctDs3ExtensionsEntry.setStatus('mandatory')
ctDs3ExtensionsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs3ExtensionsEntryIndex.setStatus('mandatory')
ctDs3ExtensionsNumInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs3ExtensionsNumInterfaces.setStatus('mandatory')
ctDs3ExtensionsLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("zeroto255feet", 2), ("a255to450feet", 3))).clone('zeroto255feet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDs3ExtensionsLineBuildOut.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-REMOTE-ACCESS-MIB", ctPppEcpKey=ctPppEcpKey, ctRemPhysPortProtMgrMaxIfos=ctRemPhysPortProtMgrMaxIfos, ctPppLcpExtIfIndex=ctPppLcpExtIfIndex, wanDs1ExtensionsBertSamplePeriod=wanDs1ExtensionsBertSamplePeriod, ctRs232ExtensionsRTSEnable=ctRs232ExtensionsRTSEnable, ctDDSPortInSpeed=ctDDSPortInSpeed, wanMessageIndex=wanMessageIndex, ctRemIntEntBackupIfOverride=ctRemIntEntBackupIfOverride, ctRemIntEntEncryptStatus=ctRemIntEntEncryptStatus, wanDs1ExtensionsBertPeakResults=wanDs1ExtensionsBertPeakResults, ctRemPhysAlarmTimeOut=ctRemPhysAlarmTimeOut, ctPppBncpExtEntry=ctPppBncpExtEntry, ctWanalyzerIfIndex=ctWanalyzerIfIndex, ctPppLcpExtSelfDescribePadding=ctPppLcpExtSelfDescribePadding, ipPQAdmin=ipPQAdmin, ctPppBncpExtCrcStatus=ctPppBncpExtCrcStatus, wanMessageTime=wanMessageTime, ctRemPhysPortProtMgrIfaceList=ctRemPhysPortProtMgrIfaceList, ctPppLcpExtMpLUT=ctPppLcpExtMpLUT, wanDs1ExtensionsBertRun=wanDs1ExtensionsBertRun, ctRemIntEntBackupIfTimeToDisconnect=ctRemIntEntBackupIfTimeToDisconnect, ctDs1WanDriverTable=ctDs1WanDriverTable, ctRemPhysPortSpecificMib=ctRemPhysPortSpecificMib, ctPppLcpExtMru=ctPppLcpExtMru, ds1AlarmGlobalBPVInterval=ds1AlarmGlobalBPVInterval, cabletron=cabletron, ctPppCountersRestartTimer=ctPppCountersRestartTimer, ctPppLcpExtMpCapable=ctPppLcpExtMpCapable, ctDs1ExtensionsTotalValidIntervals=ctDs1ExtensionsTotalValidIntervals, ctPppEcpExtTable=ctPppEcpExtTable, ctPppLcpExtMpHistoryTime=ctPppLcpExtMpHistoryTime, ctRemExtPhysPortProtMgrType=ctRemExtPhysPortProtMgrType, ctRemPhysPortEntry=ctRemPhysPortEntry, ipPQAddressTable=ipPQAddressTable, ctPppCountersMaxConfigure=ctPppCountersMaxConfigure, iPPQDelAddress=iPPQDelAddress, ctRemExtPhysPortEntry=ctRemExtPhysPortEntry, ctRemIntEntTxIdleTimeout=ctRemIntEntTxIdleTimeout, ctRs232ExtensionsCTSEnable=ctRs232ExtensionsCTSEnable, ctRemIntEntEncryption=ctRemIntEntEncryption, ctIPPQFilters=ctIPPQFilters, ctDDSTxClockSource=ctDDSTxClockSource, ctDDSLineStatus=ctDDSLineStatus, wanalyzerMessageTable=wanalyzerMessageTable, ctPppEcpIV=ctPppEcpIV, ctDDSLineMode=ctDDSLineMode, ctDs1Alarms=ctDs1Alarms, ctDs1ExtensionsDIEnable=ctDs1ExtensionsDIEnable, frDcpCircuitIfIndex=frDcpCircuitIfIndex, wanDs1ExtensionsBertAverageResult=wanDs1ExtensionsBertAverageResult, ctDs1WanDriverChannelIndex=ctDs1WanDriverChannelIndex, ctRemIntEntBackupIfTimeToConnect=ctRemIntEntBackupIfTimeToConnect, ctPppLcpExtQualityProt=ctPppLcpExtQualityProt, ds1AlarmGlobalAutoRecovery=ds1AlarmGlobalAutoRecovery, ds1AlarmConfigTable=ds1AlarmConfigTable, ipPQIPAddress=ipPQIPAddress, iPPQNumEntries=iPPQNumEntries, ctRemPhysPortWanIfaceNum=ctRemPhysPortWanIfaceNum, ctRemIntEntCompStatus=ctRemIntEntCompStatus, ctWanalyzerMaxEntries=ctWanalyzerMaxEntries, ctWanalyzerClearInterface=ctWanalyzerClearInterface, ctDs3ExtensionsNumInterfaces=ctDs3ExtensionsNumInterfaces, wanMessageDate=wanMessageDate, ctWanalyzerDisplayInterface=ctWanalyzerDisplayInterface, wanDs1ExtensionsBertTestMode=wanDs1ExtensionsBertTestMode, ctRemBackupInterfaceTable=ctRemBackupInterfaceTable, ctPPPExt=ctPPPExt, ctRemoteAccess=ctRemoteAccess, frDcpCircuitTable=frDcpCircuitTable, ctWanalyzerEntry=ctWanalyzerEntry, ds1AlarmGlobalManualRecovery=ds1AlarmGlobalManualRecovery, ctRemIntEntIfIndex=ctRemIntEntIfIndex, ds1AlarmManualRecovery=ds1AlarmManualRecovery, ctDataLink=ctDataLink, ctDDSLoopbackConfig=ctDDSLoopbackConfig, ctRemPrimaryInterfaceTable=ctRemPrimaryInterfaceTable, ctDs1ExtensionsTable=ctDs1ExtensionsTable, ctFrDcp=ctFrDcp, ctWanalyzerCurrEntries=ctWanalyzerCurrEntries, wanDs1ExtensionsBertCurrentResults=wanDs1ExtensionsBertCurrentResults, ctRs232Ext=ctRs232Ext, ctPppLcpExtEchoRequest=ctPppLcpExtEchoRequest, ctRs232ExtensionsTable=ctRs232ExtensionsTable, ds1AlarmESCount=ds1AlarmESCount, ctRemIntEntBackupConnectRetries=ctRemIntEntBackupConnectRetries, ctRemPhysPortType=ctRemPhysPortType, ctDs1WanDriverEntry=ctDs1WanDriverEntry, ds1AlarmBPVErrorRate=ds1AlarmBPVErrorRate, frDcpCircuitEntry=frDcpCircuitEntry, ctPppLcpExtCallback=ctPppLcpExtCallback, ctRs232ExtensionsEntryIndex=ctRs232ExtensionsEntryIndex, ctDs1ExtensionsNumInterfaces=ctDs1ExtensionsNumInterfaces, ctRemExtConnectionIndex=ctRemExtConnectionIndex, ctDs3Ext=ctDs3Ext, ctDs1ExtensionsLineBuildOut=ctDs1ExtensionsLineBuildOut, ctRemExtProtMgrIndex=ctRemExtProtMgrIndex, ctDs1ExtensionsToggleFracTable=ctDs1ExtensionsToggleFracTable, ds1AlarmConfigEntry=ds1AlarmConfigEntry, ds1AlarmAdmin=ds1AlarmAdmin, ctRemIntEntRxIdleTimeout=ctRemIntEntRxIdleTimeout, Index=Index, ctDDSConfigTable=ctDDSConfigTable, ctRemNumConnections=ctRemNumConnections, ctRs232ExtensionsDTREnable=ctRs232ExtensionsDTREnable, wanMessageInterfaceIndex=wanMessageInterfaceIndex, ctRemConnectionIndex=ctRemConnectionIndex, ds1AlarmGlobalESCount=ds1AlarmGlobalESCount, ds1PhysNum=ds1PhysNum, ctRs232ExtensionsDSREnable=ctRs232ExtensionsDSREnable, ctDs1WanDriverCRCBits=ctDs1WanDriverCRCBits, ctRemIntEntCircuitName=ctRemIntEntCircuitName, ctRemIntEntMTU=ctRemIntEntMTU, ctPppLcpExtAuthenticationProt=ctPppLcpExtAuthenticationProt, ctPppCountersEntry=ctPppCountersEntry, ctPppLcpExtMpChannelsToRemove=ctPppLcpExtMpChannelsToRemove, ipPQConfigGroup=ipPQConfigGroup, ctRemPriIntEntConnectRetryInterval=ctRemPriIntEntConnectRetryInterval, ctDs1ExtensionsEntryIndex=ctDs1ExtensionsEntryIndex, ctPppMpExtIfIndex=ctPppMpExtIfIndex, ctPppLcpExtPFC=ctPppLcpExtPFC, ctron=ctron, ctRemPriIntEntIfIndex=ctRemPriIntEntIfIndex, ctRemIntEntBackupIfInUseCnt=ctRemIntEntBackupIfInUseCnt, ctPppBncpExtIfIndex=ctPppBncpExtIfIndex, wanDs1ExtensionsBertNumPeriods=wanDs1ExtensionsBertNumPeriods, ctRemInterfaceEntry=ctRemInterfaceEntry, ctDs1WanDriverLineCode=ctDs1WanDriverLineCode, ctRemInterfaceTable=ctRemInterfaceTable, ctPppCountersTable=ctPppCountersTable, frDcpCircuitDlci=frDcpCircuitDlci, wanMessageCode=wanMessageCode, ds1AlarmGlobalBPVErrorRate=ds1AlarmGlobalBPVErrorRate, ds1AlarmESInterval=ds1AlarmESInterval, ctDDSLineCoding=ctDDSLineCoding, ipPQAddressEntry=ipPQAddressEntry, ds1AlarmTrapEnable=ds1AlarmTrapEnable, ctPppBncpExtTable=ctPppBncpExtTable, ds1AlarmsGlobalConfigGroup=ds1AlarmsGlobalConfigGroup, ctRemExtPhysPortProtMgrChannelList=ctRemExtPhysPortProtMgrChannelList, ctWanalyzerEnabled=ctWanalyzerEnabled, ctRemExtPhysPortProtMgrEnable=ctRemExtPhysPortProtMgrEnable, wanDs1ExtensionsBertTestPattern=wanDs1ExtensionsBertTestPattern, ds1AlarmGlobalAdmin=ds1AlarmGlobalAdmin, ctRemIntEntCompression=ctRemIntEntCompression, wanDs1ExtensionsBertTestTraps=wanDs1ExtensionsBertTestTraps, ds1AlarmBPVInterval=ds1AlarmBPVInterval, ctRemExtPhysPortProtMgrIfaceNum=ctRemExtPhysPortProtMgrIfaceNum, ctDDSPortOutSpeed=ctDDSPortOutSpeed, ctPppMpExtTable=ctPppMpExtTable, ctDs1WanDriverEntryIndex=ctDs1WanDriverEntryIndex, ctWanalyzerTable=ctWanalyzerTable, ctRemPhysPortProtMgrIfaceNum=ctRemPhysPortProtMgrIfaceNum, ctPppLcpExtTable=ctPppLcpExtTable, ctRemIntEntMaxProfiles=ctRemIntEntMaxProfiles, ctPppCountersMaxFailure=ctPppCountersMaxFailure, ctPppLcpExtMpMoreBW=ctPppLcpExtMpMoreBW, ctRemIntEntBackupConnectRetryInterval=ctRemIntEntBackupConnectRetryInterval, ctDDSExt=ctDDSExt, ctPppEcpExtEntry=ctPppEcpExtEntry, ctDs1Ext=ctDs1Ext, ctPppCountersMaxTerminate=ctPppCountersMaxTerminate, ctPppLcpExtEntry=ctPppLcpExtEntry, ctDs3ExtensionsEntryIndex=ctDs3ExtensionsEntryIndex, wanDs1ExtensionsBertDataStatus=wanDs1ExtensionsBertDataStatus, ctRemBackupInterfaceEntry=ctRemBackupInterfaceEntry, ctPppLcpExtMpChannelsToAdd=ctPppLcpExtMpChannelsToAdd, ctWanalyzerClearAll=ctWanalyzerClearAll, wanalyzerEntry=wanalyzerEntry, ctDDSLineIndex=ctDDSLineIndex, ctDDSIfIndex=ctDDSIfIndex, ctRemoteConnection=ctRemoteConnection, ctRemExtPhysPortProtMgrIfaceList=ctRemExtPhysPortProtMgrIfaceList, ctPppCountersIfIndex=ctPppCountersIfIndex, ctronWan=ctronWan, ds1AlarmGlobalESInterval=ds1AlarmGlobalESInterval, ctRemIntEntBackupIfIndex=ctRemIntEntBackupIfIndex, ctDs1ExtensionsCFADuration=ctDs1ExtensionsCFADuration, ctPppLcpExtReplyCounter=ctPppLcpExtReplyCounter, ctRemPhysPortTable=ctRemPhysPortTable, ctRemIntEntCompRatio=ctRemIntEntCompRatio, frDcpCircuitStatus=frDcpCircuitStatus, frDcpCircuitRatio=frDcpCircuitRatio, ctDs3ExtensionsEntry=ctDs3ExtensionsEntry, ctPppLcpExtAccm=ctPppLcpExtAccm, mibs=mibs, ds1AlarmAutoRecovery=ds1AlarmAutoRecovery, ctRemExtPhysPortProtMgrMaxIfos=ctRemExtPhysPortProtMgrMaxIfos, ctRemIntEntCongestion=ctRemIntEntCongestion, wanDs1ExtensionsBertCumulativeResults=wanDs1ExtensionsBertCumulativeResults, ctDs3ExtensionsTable=ctDs3ExtensionsTable, ctPppLcpExtACFC=ctPppLcpExtACFC, ctRemPhysWpimType=ctRemPhysWpimType, ds1AlarmGlobalTrapEnable=ds1AlarmGlobalTrapEnable, ctPppLcpExtMpLessBW=ctPppLcpExtMpLessBW, ctRemPrimaryInterfaceEntry=ctRemPrimaryInterfaceEntry, ctPppLcpExtCompoundFrames=ctPppLcpExtCompoundFrames, ctPppEcpExtIfIndex=ctPppEcpExtIfIndex, ctRs232ExtensionsEntry=ctRs232ExtensionsEntry, ctDs1ExtensionsEntry=ctDs1ExtensionsEntry, ipPQAddressId=ipPQAddressId, ctPppMpExtEntry=ctPppMpExtEntry, frDcpCircuitEnable=frDcpCircuitEnable, iPPQMaxEntries=iPPQMaxEntries, ctRemExtPhysPortTable=ctRemExtPhysPortTable, iPPQAddAddress=iPPQAddAddress, ctRemPhysPortProtMgrType=ctRemPhysPortProtMgrType, ctRemIntEntBackupIfNum=ctRemIntEntBackupIfNum, ctDs3ExtensionsLineBuildOut=ctDs3ExtensionsLineBuildOut, ctDDSConfigEntry=ctDDSConfigEntry, ctPppLcpExtMpMaxChannels=ctPppLcpExtMpMaxChannels, DLCI=DLCI, ctWanalyzer=ctWanalyzer)
