#
# PySNMP MIB module HH3C-MPLS-BGP-VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-MPLS-BGP-VPN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:15:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
hh3cMpls, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cMpls")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, Unsigned32, Integer32, TimeTicks, Gauge32, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, IpAddress, Counter32, Counter64, experimental, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Integer32", "TimeTicks", "Gauge32", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter32", "Counter64", "experimental", "ModuleIdentity")
DisplayString, TruthValue, RowStatus, TimeStamp, TextualConvention, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TimeStamp", "TextualConvention", "StorageType")
hh3cMplsVpn = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3))
hh3cMplsVpn.setRevisions(('2001-07-20 12:00', '2001-07-17 12:00', '2001-07-10 12:00', '2001-06-19 12:00', '2001-05-30 12:00', '2000-09-30 12:00',))
if mibBuilder.loadTexts: hh3cMplsVpn.setLastUpdated('200107201200Z')
if mibBuilder.loadTexts: hh3cMplsVpn.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class Hh3cMplsVpnId(TextualConvention, OctetString):
    reference = "RFC 2685 [VPN-RFC2685] Fox B., et al, 'Virtual Private Networks Identifier', September 1999."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

class Hh3cMplsVpnRouteDistinguisher(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

hh3cmplsVpnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1))
hh3cmplsVpnScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 1))
hh3cmplsVpnConf = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2))
hh3cmplsVpnRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 3))
hh3cmplsVpnConfiguredVrfs = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnConfiguredVrfs.setStatus('current')
hh3cmplsVpnActiveVrfs = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnActiveVrfs.setStatus('current')
hh3cmplsVpnInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cmplsVpnInterfaceConfTable.setStatus('current')
hh3cmplsVpnInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 1, 1), ).setIndexNames((0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfName"), (0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnInterfaceConfIndex"))
if mibBuilder.loadTexts: hh3cmplsVpnInterfaceConfEntry.setStatus('current')
hh3cmplsVpnInterfaceConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnInterfaceConfIndex.setStatus('current')
hh3cmplsVpnInterfaceLabelEdgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("providerEdge", 1), ("customerEdge", 2))).clone('providerEdge')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnInterfaceLabelEdgeType.setStatus('current')
hh3cmplsVpnInterfaceVpnClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("carrierOfCarrier", 1), ("enterprise", 2), ("interProvider", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnInterfaceVpnClassification.setStatus('current')
hh3cmplsVpnInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnInterfaceIpAddress.setStatus('current')
hh3cmplsVpnInterfaceIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnInterfaceIpAddressMask.setStatus('current')
hh3cmplsVpnInterfaceConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnInterfaceConfRowStatus.setStatus('current')
hh3cmplsVpnVrfConfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cmplsVpnVrfConfTable.setStatus('current')
hh3cmplsVpnVrfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1), ).setIndexNames((0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfName"))
if mibBuilder.loadTexts: hh3cmplsVpnVrfConfEntry.setStatus('current')
hh3cmplsVpnVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 1), Hh3cMplsVpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnVrfName.setStatus('current')
hh3cmplsVpnVrfRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 2), Hh3cMplsVpnRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteDistinguisher.setStatus('current')
hh3cmplsVpnVrfNetPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3), ("isis", 4), ("bgp", 5), ("static", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnVrfNetPrefixType.setStatus('current')
hh3cmplsVpnVrfNetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnVrfNetPrefix.setStatus('current')
hh3cmplsVpnVrfIpRouteRedistributeConn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfIpRouteRedistributeConn.setStatus('current')
hh3cmplsVpnVrfIpRouteRedistributeStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfIpRouteRedistributeStatic.setStatus('current')
hh3cmplsVpnVrfIpRouteRedistributeRip = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfIpRouteRedistributeRip.setStatus('current')
hh3cmplsVpnVrfConfHighRouteThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfConfHighRouteThreshold.setStatus('current')
hh3cmplsVpnVrfConfIsWarnOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfConfIsWarnOnly.setStatus('current')
hh3cmplsVpnVrfConfMaxRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfConfMaxRoutes.setStatus('current')
hh3cmplsVpnVrfConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfConfRowStatus.setStatus('current')
hh3cmplsVpnVrfRouteTargetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 3), )
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteTargetTable.setStatus('current')
hh3cmplsVpnVrfRouteTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 3, 1), ).setIndexNames((0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfName"), (0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfRouteTarget"), (0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfRouteTargetType"))
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteTargetEntry.setStatus('current')
hh3cmplsVpnVrfRouteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 3, 1, 1), Hh3cMplsVpnRouteDistinguisher()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteTarget.setStatus('current')
hh3cmplsVpnVrfRouteTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteTargetType.setStatus('current')
hh3cmplsVpnVrfRouteTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteTargetRowStatus.setStatus('current')
hh3cmplsVpnVrfBgpNbrAddrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 4), )
if mibBuilder.loadTexts: hh3cmplsVpnVrfBgpNbrAddrTable.setStatus('current')
hh3cmplsVpnVrfBgpNbrAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 4, 1), ).setIndexNames((0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfName"), (0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfBgpNbrAddr"))
if mibBuilder.loadTexts: hh3cmplsVpnVrfBgpNbrAddrEntry.setStatus('current')
hh3cmplsVpnVrfBgpNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 4, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnVrfBgpNbrAddr.setStatus('current')
hh3cmplsVpnVrfBgpNbrRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ce", 1), ("pe", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfBgpNbrRole.setStatus('current')
hh3cmplsVpnVrfBgpNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 4, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfBgpNbrType.setStatus('current')
hh3cmplsVpnVrfBgpNbrAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfBgpNbrAsNumber.setStatus('current')
hh3cmplsVpnVrfBgpNbrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mplsVpnVrfBgpNbrSetUp", 1), ("mplsVpnVrfBgpNbrSetDown", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfBgpNbrAdminStatus.setStatus('current')
hh3cmplsVpnVrfBgpNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 2, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfBgpNbrRowStatus.setStatus('current')
hh3cmplsVpnVrfRouteTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 3, 1), )
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteTable.setStatus('current')
hh3cmplsVpnVrfRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 3, 1, 1), ).setIndexNames((0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfName"), (0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfRouteDest"), (0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfRouteMask"), (0, "HH3C-MPLS-BGP-VPN-MIB", "hh3cmplsVpnVrfRouteNextHop"))
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteEntry.setStatus('current')
hh3cmplsVpnVrfRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 3, 1, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteDest.setStatus('current')
hh3cmplsVpnVrfRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 3, 1, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteMask.setStatus('current')
hh3cmplsVpnVrfRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 3, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteNextHop.setStatus('current')
hh3cmplsVpnVrfRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 3, 1, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteIfIndex.setStatus('current')
hh3cmplsVpnVrfRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteProto.setStatus('current')
hh3cmplsVpnVrfRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 3, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsVpnVrfRouteRowStatus.setStatus('current')
mibBuilder.exportSymbols("HH3C-MPLS-BGP-VPN-MIB", hh3cmplsVpnVrfConfTable=hh3cmplsVpnVrfConfTable, hh3cmplsVpnVrfRouteTargetRowStatus=hh3cmplsVpnVrfRouteTargetRowStatus, hh3cmplsVpnInterfaceConfTable=hh3cmplsVpnInterfaceConfTable, hh3cmplsVpnVrfConfEntry=hh3cmplsVpnVrfConfEntry, hh3cmplsVpnVrfRouteNextHop=hh3cmplsVpnVrfRouteNextHop, hh3cmplsVpnVrfNetPrefix=hh3cmplsVpnVrfNetPrefix, hh3cmplsVpnVrfIpRouteRedistributeStatic=hh3cmplsVpnVrfIpRouteRedistributeStatic, hh3cmplsVpnVrfRouteProto=hh3cmplsVpnVrfRouteProto, hh3cmplsVpnVrfBgpNbrAddrTable=hh3cmplsVpnVrfBgpNbrAddrTable, hh3cmplsVpnRoute=hh3cmplsVpnRoute, hh3cmplsVpnVrfBgpNbrAsNumber=hh3cmplsVpnVrfBgpNbrAsNumber, PYSNMP_MODULE_ID=hh3cMplsVpn, hh3cmplsVpnVrfRouteTargetEntry=hh3cmplsVpnVrfRouteTargetEntry, hh3cmplsVpnVrfConfRowStatus=hh3cmplsVpnVrfConfRowStatus, hh3cmplsVpnVrfRouteTargetTable=hh3cmplsVpnVrfRouteTargetTable, hh3cmplsVpnVrfRouteTarget=hh3cmplsVpnVrfRouteTarget, hh3cmplsVpnVrfBgpNbrAddrEntry=hh3cmplsVpnVrfBgpNbrAddrEntry, hh3cmplsVpnVrfRouteRowStatus=hh3cmplsVpnVrfRouteRowStatus, hh3cmplsVpnVrfConfHighRouteThreshold=hh3cmplsVpnVrfConfHighRouteThreshold, hh3cmplsVpnVrfRouteIfIndex=hh3cmplsVpnVrfRouteIfIndex, hh3cmplsVpnInterfaceConfRowStatus=hh3cmplsVpnInterfaceConfRowStatus, hh3cmplsVpnVrfRouteDest=hh3cmplsVpnVrfRouteDest, hh3cmplsVpnScalars=hh3cmplsVpnScalars, hh3cmplsVpnVrfRouteDistinguisher=hh3cmplsVpnVrfRouteDistinguisher, hh3cmplsVpnVrfConfIsWarnOnly=hh3cmplsVpnVrfConfIsWarnOnly, hh3cmplsVpnVrfRouteMask=hh3cmplsVpnVrfRouteMask, hh3cmplsVpnVrfConfMaxRoutes=hh3cmplsVpnVrfConfMaxRoutes, hh3cMplsVpn=hh3cMplsVpn, hh3cmplsVpnVrfBgpNbrType=hh3cmplsVpnVrfBgpNbrType, hh3cmplsVpnVrfIpRouteRedistributeConn=hh3cmplsVpnVrfIpRouteRedistributeConn, hh3cmplsVpnInterfaceVpnClassification=hh3cmplsVpnInterfaceVpnClassification, hh3cmplsVpnVrfRouteTable=hh3cmplsVpnVrfRouteTable, hh3cmplsVpnVrfRouteEntry=hh3cmplsVpnVrfRouteEntry, hh3cmplsVpnConf=hh3cmplsVpnConf, hh3cmplsVpnVrfBgpNbrAddr=hh3cmplsVpnVrfBgpNbrAddr, hh3cmplsVpnConfiguredVrfs=hh3cmplsVpnConfiguredVrfs, hh3cmplsVpnInterfaceIpAddress=hh3cmplsVpnInterfaceIpAddress, hh3cmplsVpnVrfBgpNbrRole=hh3cmplsVpnVrfBgpNbrRole, hh3cmplsVpnObjects=hh3cmplsVpnObjects, Hh3cMplsVpnRouteDistinguisher=Hh3cMplsVpnRouteDistinguisher, hh3cmplsVpnInterfaceLabelEdgeType=hh3cmplsVpnInterfaceLabelEdgeType, Hh3cMplsVpnId=Hh3cMplsVpnId, hh3cmplsVpnVrfBgpNbrAdminStatus=hh3cmplsVpnVrfBgpNbrAdminStatus, hh3cmplsVpnVrfBgpNbrRowStatus=hh3cmplsVpnVrfBgpNbrRowStatus, hh3cmplsVpnVrfName=hh3cmplsVpnVrfName, hh3cmplsVpnInterfaceConfIndex=hh3cmplsVpnInterfaceConfIndex, hh3cmplsVpnInterfaceIpAddressMask=hh3cmplsVpnInterfaceIpAddressMask, hh3cmplsVpnActiveVrfs=hh3cmplsVpnActiveVrfs, hh3cmplsVpnVrfIpRouteRedistributeRip=hh3cmplsVpnVrfIpRouteRedistributeRip, hh3cmplsVpnVrfNetPrefixType=hh3cmplsVpnVrfNetPrefixType, hh3cmplsVpnVrfRouteTargetType=hh3cmplsVpnVrfRouteTargetType, hh3cmplsVpnInterfaceConfEntry=hh3cmplsVpnInterfaceConfEntry)
