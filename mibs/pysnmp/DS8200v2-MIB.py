#
# PySNMP MIB module DS8200v2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DS8200v2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:39:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
hbu, verilink = mibBuilder.importSymbols("DS8200v2-TC-MIB", "hbu", "verilink")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Integer32, Counter32, ObjectIdentity, ModuleIdentity, TimeTicks, Counter64, enterprises, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "Counter32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "Counter64", "enterprises", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "iso", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tinterfaces = ModuleIdentity((1, 3, 6, 1, 4, 1, 321, 100, 2))
if mibBuilder.loadTexts: tinterfaces.setLastUpdated('0008180000Z')
if mibBuilder.loadTexts: tinterfaces.setOrganization('Verilink Corporation')
mgmtPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 1))
dbu = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 2))
t1e1 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 3))
ddsNet = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 4))
serialDte = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 5))
analogDte = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 6))
connection = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 7))
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 8))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 9))
itable = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 10))
traplog = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 11))
unitUtilities = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 12))
productInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 13))
netAPS = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 14))
productModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModelNumber.setStatus('current')
productModelDescr = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModelDescr.setStatus('current')
productElementId = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productElementId.setStatus('current')
productSoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSoftwareRev.setStatus('current')
productHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productHardwareRev.setStatus('current')
productSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNum.setStatus('current')
productPhysicalAddress = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPhysicalAddress.setStatus('current')
productNmsAddress = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productNmsAddress.setStatus('current')
productLabelTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 9), )
if mibBuilder.loadTexts: productLabelTable.setStatus('current')
productLabelTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 9, 1), ).setIndexNames((0, "DS8200v2-MIB", "labelTableIndex"))
if mibBuilder.loadTexts: productLabelTableEntry.setStatus('current')
labelTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: labelTableIndex.setStatus('current')
labelTableLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: labelTableLabel.setStatus('current')
labelTableValue = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: labelTableValue.setStatus('current')
mgmtPortsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1), )
if mibBuilder.loadTexts: mgmtPortsTable.setStatus('current')
mgmtPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "mgmtPortsTableIndex"))
if mibBuilder.loadTexts: mgmtPortsTableEntry.setStatus('current')
mgmtPortsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortsTableIndex.setStatus('current')
mgmtPortsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortsDescription.setStatus('current')
mgmtPortsElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsElementID.setStatus('current')
mgmtPortsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("coadial", 3), ("coadirect", 4), ("extAlarmOnOpen", 5), ("extAlarmOnClosed", 6), ("slipdial", 7), ("slipdirect", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsMode.setStatus('current')
mgmtPortsDialPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsDialPrefix.setStatus('current')
mgmtPortsPrimaryDialString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsPrimaryDialString.setStatus('current')
mgmtPortsSecondaryDialString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsSecondaryDialString.setStatus('current')
mgmtPortsExtInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsExtInitString.setStatus('current')
mgmtPortsCompressedSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsCompressedSlip.setStatus('current')
mgmtPortsInternalModem = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notPresent", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsInternalModem.setStatus('current')
dbuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1), )
if mibBuilder.loadTexts: dbuConfigTable.setStatus('current')
dbuConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "dbuNearIndex"), (0, "DS8200v2-MIB", "dbuFarIndex"), (0, "DS8200v2-MIB", "dbuConfigTableIndex"))
if mibBuilder.loadTexts: dbuConfigTableEntry.setStatus('current')
dbuNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuNearIndex.setStatus('current')
dbuFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuFarIndex.setStatus('current')
dbuConfigTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuConfigTableIndex.setStatus('current')
dbuDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuDescription.setStatus('current')
dbuRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dbuRateOther", 1), ("dbuRate2400", 2), ("dbuRate4800", 3), ("dbuRate9600", 4), ("dbuRate19200", 5), ("dbuRate38400", 6), ("dbuRate56000", 7), ("dbuRate57600", 8), ("dbuRate64000", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuRate.setStatus('current')
dbuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dbuModeOther", 1), ("dbuModeOrig", 2), ("dbuModeAnsw", 3), ("dbuModeNotAvail", 4), ("dbuModeCallbackOrig", 5), ("dbuModeCallbackAnsw", 6), ("dbuModeMaster", 7), ("dbuModeSlave", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuMode.setStatus('current')
dbuFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dbuFormatOther", 1), ("dbuFormatSync", 2), ("dbuFormatAsync", 3), ("dbuFormatNotAvail", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuFormat.setStatus('current')
dbuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuNumber.setStatus('current')
dbuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("dbuStatusOther", 1), ("dbuStatusDisabled", 2), ("dbuStatusEnabled", 3), ("dbuStatusActive", 4), ("dbuStatusLocked", 5), ("dbuStatusConnecting", 6), ("dbuStatusDisallowed", 7), ("dbuStatusAwaitingCall", 8), ("dbuStatusDialing", 9), ("dbuStatusDisconnecting", 10), ("dbuStatusTesting", 11), ("dbuStatusTestPassed", 12), ("dbuStatusTestFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuStatus.setStatus('current')
dbuCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dbuCommandOther", 1), ("dbuCommandDisable", 2), ("dbuCommandEnable", 3), ("dbuCommandActivate", 4), ("dbuCommandLock", 5), ("dbuCommandEnableDaily", 6), ("dbuCommandTest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuCommand.setStatus('current')
dbuActivator1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("dbuActivatorOther", 1), ("dbuActivatorLOS", 2), ("dbuActivatorOOS", 3), ("dbuActivatorOOF", 4), ("dbuActivatorAny", 5), ("dbuActivatorES", 6), ("dbuActivatorSES", 7), ("dbuActivatorUAS", 8), ("dbuActivatorLOF", 9), ("dbuActivatorRAS", 10), ("dbuActivatorAIS", 11), ("dbuActivatorBPV", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuActivator1.setStatus('current')
dbuActivator2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("dbuActivatorOther", 1), ("dbuActivatorLOS", 2), ("dbuActivatorOOS", 3), ("dbuActivatorOOF", 4), ("dbuActivatorAny", 5), ("dbuActivatorES", 6), ("dbuActivatorSES", 7), ("dbuActivatorUAS", 8), ("dbuActivatorLOF", 9), ("dbuActivatorRAS", 10), ("dbuActivatorAIS", 11), ("dbuActivatorBPV", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuActivator2.setStatus('current')
dbuDialStr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuDialStr.setStatus('current')
dbuInitStr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuInitStr.setStatus('current')
dbuHangupStr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuHangupStr.setStatus('current')
dbuPasswordStr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuPasswordStr.setStatus('current')
dbuSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dbuSecurityOther", 1), ("dbuSecurityDisable", 2), ("dbuSecurityEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuSecurity.setStatus('current')
dbuDtrDial = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dbuDtrDialOther", 1), ("dbuDtrDialDisable", 2), ("dbuDtrDialEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuDtrDial.setStatus('current')
dbuISDNSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuISDNSwitchType.setStatus('current')
dbuISDNSwitchVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dbuISDNSwitchVersionOther", 1), ("dbuISDNSwitchVersionNational1", 2), ("dbuISDNSwitchVersionATTP2P", 3), ("dbuISDNSwitchVersionATTMP", 4), ("dbuISDNSwitchVersionDMS100PVCIC0", 5), ("dbuISDNSwitchVersionDMS100PVCIC1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuISDNSwitchVersion.setStatus('current')
dbuISDNTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67))).clone(namedValues=NamedValues(("dbuISDNTEIOther", 1), ("dbuISDNTEIDisable", 2), ("dbuISDNTEIAuto", 3), ("dbuISDNTEI0", 4), ("dbuISDNTEI1", 5), ("dbuISDNTEI2", 6), ("dbuISDNTEI3", 7), ("dbuISDNTEI4", 8), ("dbuISDNTEI5", 9), ("dbuISDNTEI6", 10), ("dbuISDNTEI7", 11), ("dbuISDNTEI8", 12), ("dbuISDNTEI9", 13), ("dbuISDNTEI10", 14), ("dbuISDNTEI11", 15), ("dbuISDNTEI12", 16), ("dbuISDNTEI13", 17), ("dbuISDNTEI14", 18), ("dbuISDNTEI15", 19), ("dbuISDNTEI16", 20), ("dbuISDNTEI17", 21), ("dbuISDNTEI18", 22), ("dbuISDNTEI19", 23), ("dbuISDNTEI20", 24), ("dbuISDNTEI21", 25), ("dbuISDNTEI22", 26), ("dbuISDNTEI23", 27), ("dbuISDNTEI24", 28), ("dbuISDNTEI25", 29), ("dbuISDNTEI26", 30), ("dbuISDNTEI27", 31), ("dbuISDNTEI28", 32), ("dbuISDNTEI29", 33), ("dbuISDNTEI30", 34), ("dbuISDNTEI31", 35), ("dbuISDNTEI32", 36), ("dbuISDNTEI33", 37), ("dbuISDNTEI34", 38), ("dbuISDNTEI35", 39), ("dbuISDNTEI36", 40), ("dbuISDNTEI37", 41), ("dbuISDNTEI38", 42), ("dbuISDNTEI39", 43), ("dbuISDNTEI40", 44), ("dbuISDNTEI41", 45), ("dbuISDNTEI42", 46), ("dbuISDNTEI43", 47), ("dbuISDNTEI44", 48), ("dbuISDNTEI45", 49), ("dbuISDNTEI46", 50), ("dbuISDNTEI47", 51), ("dbuISDNTEI48", 52), ("dbuISDNTEI49", 53), ("dbuISDNTEI50", 54), ("dbuISDNTEI51", 55), ("dbuISDNTEI52", 56), ("dbuISDNTEI53", 57), ("dbuISDNTEI54", 58), ("dbuISDNTEI55", 59), ("dbuISDNTEI56", 60), ("dbuISDNTEI57", 61), ("dbuISDNTEI58", 62), ("dbuISDNTEI59", 63), ("dbuISDNTEI60", 64), ("dbuISDNTEI61", 65), ("dbuISDNTEI62", 66), ("dbuISDNTEI63", 67)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuISDNTEI.setStatus('current')
dbuISDNSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuISDNSPID.setStatus('current')
dbuISDNDDNUM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuISDNDDNUM.setStatus('current')
dbuResetStringsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2), )
if mibBuilder.loadTexts: dbuResetStringsTable.setStatus('current')
dbuResetStringsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "dbuResetNearIndex"), (0, "DS8200v2-MIB", "dbuResetFarIndex"), (0, "DS8200v2-MIB", "dbuResetConfigEntryIndex"), (0, "DS8200v2-MIB", "dbuResetStringsIndex"))
if mibBuilder.loadTexts: dbuResetStringsEntry.setStatus('current')
dbuResetNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuResetNearIndex.setStatus('current')
dbuResetFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuResetFarIndex.setStatus('current')
dbuResetConfigEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuResetConfigEntryIndex.setStatus('current')
dbuResetStringsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuResetStringsIndex.setStatus('current')
dbuResetString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuResetString.setStatus('current')
dbuStartStopTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3), )
if mibBuilder.loadTexts: dbuStartStopTable.setStatus('current')
dbuStartStopTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1), ).setIndexNames((0, "DS8200v2-MIB", "dbuStartStopNearIndex"), (0, "DS8200v2-MIB", "dbuStartStopFarIndex"), (0, "DS8200v2-MIB", "dbuStartStopConfigEntryIndex"), (0, "DS8200v2-MIB", "dbuStartStopDayOfWeek"))
if mibBuilder.loadTexts: dbuStartStopTableEntry.setStatus('current')
dbuStartStopNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuStartStopNearIndex.setStatus('current')
dbuStartStopFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuStartStopFarIndex.setStatus('current')
dbuStartStopConfigEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuStartStopConfigEntryIndex.setStatus('current')
dbuStartStopDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dbuStartStopSunday", 1), ("dbuStartStopMonday", 2), ("dbuStartStopTuesday", 3), ("dbuStartStopWednesday", 4), ("dbuStartStopThursday", 5), ("dbuStartStopFriday", 6), ("dbuStartStopSaturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuStartStopDayOfWeek.setStatus('current')
dbuStart = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("dbuStartHour00", 1), ("dbuStartHour01", 2), ("dbuStartHour02", 3), ("dbuStartHour03", 4), ("dbuStartHour04", 5), ("dbuStartHour05", 6), ("dbuStartHour06", 7), ("dbuStartHour07", 8), ("dbuStartHour08", 9), ("dbuStartHour09", 10), ("dbuStartHour10", 11), ("dbuStartHour11", 12), ("dbuStartHour12", 13), ("dbuStartHour13", 14), ("dbuStartHour14", 15), ("dbuStartHour15", 16), ("dbuStartHour16", 17), ("dbuStartHour17", 18), ("dbuStartHour18", 19), ("dbuStartHour19", 20), ("dbuStartHour20", 21), ("dbuStartHour21", 22), ("dbuStartHour22", 23), ("dbuStartHour23", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuStart.setStatus('current')
dbuStop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("dbuStopHour00", 1), ("dbuStopHour01", 2), ("dbuStopHour02", 3), ("dbuStopHour03", 4), ("dbuStopHour04", 5), ("dbuStopHour05", 6), ("dbuStopHour06", 7), ("dbuStopHour07", 8), ("dbuStopHour08", 9), ("dbuStopHour09", 10), ("dbuStopHour10", 11), ("dbuStopHour11", 12), ("dbuStopHour12", 13), ("dbuStopHour13", 14), ("dbuStopHour14", 15), ("dbuStopHour15", 16), ("dbuStopHour16", 17), ("dbuStopHour17", 18), ("dbuStopHour18", 19), ("dbuStopHour19", 20), ("dbuStopHour20", 21), ("dbuStopHour21", 22), ("dbuStopHour22", 23), ("dbuStopHour23", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuStop.setStatus('current')
t1e1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1), )
if mibBuilder.loadTexts: t1e1ConfigTable.setStatus('current')
t1e1ConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "t1e1ConfigNearIndex"), (0, "DS8200v2-MIB", "t1e1ConfigFarIndex"), (0, "DS8200v2-MIB", "t1e1ConfigIndex"))
if mibBuilder.loadTexts: t1e1ConfigTableEntry.setStatus('current')
t1e1ConfigNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ConfigNearIndex.setStatus('current')
t1e1ConfigFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ConfigFarIndex.setStatus('current')
t1e1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ConfigIndex.setStatus('current')
t1e1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Description.setStatus('current')
t1e1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1ModeOther", 1), ("t1e1ModeDTE", 2), ("t1e1ModeNetwork", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Mode.setStatus('current')
t1e1FrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("t1e1FrameTypeOther", 1), ("t1e1FrameTypeESF", 2), ("t1e1FrameTypeD4", 3), ("t1e1FrameTypeCCSCRC", 4), ("t1e1FrameTypeCCS", 5), ("t1e1FrameTypeCAS", 6), ("t1e1FrameTypeCASCRC", 7), ("t1e1FrameTypeUnframed", 8), ("t1e1FrameTypeV3", 9), ("t1e1FrameTypeT1Unframed", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1FrameType.setStatus('current')
t1e1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1e1LineCodeOther", 1), ("t1e1LineCodeAMI", 2), ("t1e1LineCodeB8ZS", 3), ("t1e1LineCodeHDB3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1LineCode.setStatus('current')
t1e1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1e1LineBuildOutOther", 1), ("t1e1LineBuildOut0db", 2), ("t1e1LineBuildOut75db", 3), ("t1e1LineBuildOut15db", 4), ("t1e1LineBuildOut225db", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1LineBuildOut.setStatus('current')
t1e1Timing = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108))).clone(namedValues=NamedValues(("t1e1TimingOther", 1), ("t1e1TimingInternal", 2), ("t1e1TimingNetwork", 3), ("t1e1TimingT1DTE", 4), ("t1e1TimingStation", 5), ("t1e1TimingStaClock", 6), ("t1e1TimingPort1", 7), ("t1e1TimingPort2", 8), ("t1e1TimingPort3", 9), ("t1e1TimingPort4", 10), ("t1e1TimingPort5", 11), ("t1e1TimingPort6", 12), ("t1e1TimingPort7", 13), ("t1e1TimingPort8", 14), ("t1e1TimingPort9", 15), ("t1e1TimingPort10", 16), ("t1e1TimingPort11", 17), ("t1e1TimingPort12", 18), ("t1e1TimingPort13", 19), ("t1e1TimingPort14", 20), ("t1e1TimingPort15", 21), ("t1e1TimingPort16", 22), ("t1e1TimingPort17", 23), ("t1e1TimingPort18", 24), ("t1e1TimingPort19", 25), ("t1e1TimingPort20", 26), ("t1e1TimingPort21", 27), ("t1e1TimingPort22", 28), ("t1e1TimingPort23", 29), ("t1e1TimingPort24", 30), ("t1e1TimingPort25", 31), ("t1e1TimingPort26", 32), ("t1e1TimingPort27", 33), ("t1e1TimingPort28", 34), ("t1e1TimingPort29", 35), ("t1e1TimingPort30", 36), ("t1e1TimingPort31", 37), ("t1e1TimingPort32", 38), ("t1e1TimingSlot2PortA", 39), ("t1e1TimingSlot2PortB", 40), ("t1e1TimingSlot3PortA", 41), ("t1e1TimingSlot3PortB", 42), ("t1e1TimingSlot4PortA", 43), ("t1e1TimingSlot4PortB", 44), ("t1e1TimingSlot5PortA", 45), ("t1e1TimingSlot5PortB", 46), ("t1e1TimingSlot6PortA", 47), ("t1e1TimingSlot6PortB", 48), ("t1e1TimingSlot2Dsu1PortA", 49), ("t1e1TimingSlot2Dsu1PortB", 50), ("t1e1TimingSlot2Dsu2PortA", 51), ("t1e1TimingSlot2Dsu2PortB", 52), ("t1e1TimingSlot2Dsu3PortA", 53), ("t1e1TimingSlot2Dsu3PortB", 54), ("t1e1TimingSlot2Dsu4PortA", 55), ("t1e1TimingSlot2Dsu4PortB", 56), ("t1e1TimingSlot2Dsu5PortA", 57), ("t1e1TimingSlot2Dsu5PortB", 58), ("t1e1TimingSlot2Dsu6PortA", 59), ("t1e1TimingSlot2Dsu6PortB", 60), ("t1e1TimingSlot3Dsu1PortA", 61), ("t1e1TimingSlot3Dsu1PortB", 62), ("t1e1TimingSlot3Dsu2PortA", 63), ("t1e1TimingSlot3Dsu2PortB", 64), ("t1e1TimingSlot3Dsu3PortA", 65), ("t1e1TimingSlot3Dsu3PortB", 66), ("t1e1TimingSlot3Dsu4PortA", 67), ("t1e1TimingSlot3Dsu4PortB", 68), ("t1e1TimingSlot3Dsu5PortA", 69), ("t1e1TimingSlot3Dsu5PortB", 70), ("t1e1TimingSlot3Dsu6PortA", 71), ("t1e1TimingSlot3Dsu6PortB", 72), ("t1e1TimingSlot4Dsu1PortA", 73), ("t1e1TimingSlot4Dsu1PortB", 74), ("t1e1TimingSlot4Dsu2PortA", 75), ("t1e1TimingSlot4Dsu2PortB", 76), ("t1e1TimingSlot4Dsu3PortA", 77), ("t1e1TimingSlot4Dsu3PortB", 78), ("t1e1TimingSlot4Dsu4PortA", 79), ("t1e1TimingSlot4Dsu4PortB", 80), ("t1e1TimingSlot4Dsu5PortA", 81), ("t1e1TimingSlot4Dsu5PortB", 82), ("t1e1TimingSlot4Dsu6PortA", 83), ("t1e1TimingSlot4Dsu6PortB", 84), ("t1e1TimingSlot5Dsu1PortA", 85), ("t1e1TimingSlot5Dsu1PortB", 86), ("t1e1TimingSlot5Dsu2PortA", 87), ("t1e1TimingSlot5Dsu2PortB", 88), ("t1e1TimingSlot5Dsu3PortA", 89), ("t1e1TimingSlot5Dsu3PortB", 90), ("t1e1TimingSlot5Dsu4PortA", 91), ("t1e1TimingSlot5Dsu4PortB", 92), ("t1e1TimingSlot5Dsu5PortA", 93), ("t1e1TimingSlot5Dsu5PortB", 94), ("t1e1TimingSlot5Dsu6PortA", 95), ("t1e1TimingSlot5Dsu6PortB", 96), ("t1e1TimingSlot6Dsu1PortA", 97), ("t1e1TimingSlot6Dsu1PortB", 98), ("t1e1TimingSlot6Dsu2PortA", 99), ("t1e1TimingSlot6Dsu2PortB", 100), ("t1e1TimingSlot6Dsu3PortA", 101), ("t1e1TimingSlot6Dsu3PortB", 102), ("t1e1TimingSlot6Dsu4PortA", 103), ("t1e1TimingSlot6Dsu4PortB", 104), ("t1e1TimingSlot6Dsu5PortA", 105), ("t1e1TimingSlot6Dsu5PortB", 106), ("t1e1TimingSlot6Dsu6PortA", 107), ("t1e1TimingSlot6Dsu6PortB", 108)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Timing.setStatus('current')
t1e1StationInTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1e1StationInTimingOther", 1), ("t1e1StationInTimingNX56", 2), ("t1e1StationInTimingNX64", 3), ("t1e1StationInTiming1544", 4), ("t1e1StationInTiming2048", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1StationInTiming.setStatus('current')
t1e1StationTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1StationTiming.setStatus('current')
t1e1PRM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1PRMOther", 1), ("t1e1PRMDisable", 2), ("t1e1PRMEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1PRM.setStatus('current')
t1e1ZeroSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1ZeroOther", 1), ("t1e1ZeroDisable", 2), ("t1e1ZeroEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1ZeroSuppress.setStatus('current')
t1e1NationalBit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("t1e1NationalOther", 1), ("t1e1NationalNone", 2), ("t1e1NationalSA4", 3), ("t1e1NationalSA5", 4), ("t1e1NationalSA6", 5), ("t1e1NationalSA7", 6), ("t1e1NationalSA8", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1NationalBit.setStatus('current')
t1e1KeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1e1KeepAliveOther", 1), ("t1e1KeepAliveUnframedOnes", 2), ("t1e1KeepAliveFramedOnes", 3), ("t1e1KeepAliveLoop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1KeepAlive.setStatus('current')
t1e1CRC4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1CRC4Other", 1), ("t1e1CRC4Disabled", 2), ("t1e1CRC4Enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CRC4Mode.setStatus('current')
t1e1DSXLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("t1e1DSXOther", 1), ("t1e1DSX0110", 2), ("t1e1DSX111220", 3), ("t1e1DSX221330", 4), ("t1e1DSX331440", 5), ("t1e1DSX441550", 6), ("t1e1DSX551660", 7), ("t1e1DSX661up", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1DSXLevel.setStatus('current')
t1e1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1CRCOther", 1), ("t1e1CRCPass", 2), ("t1e1CRCRegenerate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CRC.setStatus('current')
t1e1FDLPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1FDLPassThroughOther", 1), ("t1e1FDLPassThroughPass", 2), ("t1e1FDLPassThroughTerminate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1FDLPassThrough.setStatus('current')
t1e1AudibleAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1AudibleAlarmOther", 1), ("t1e1AudibleAlarmDisabled", 2), ("t1e1AudibleAlarmEnabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1AudibleAlarm.setStatus('current')
t1e1Function = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1e1FunctionOther", 1), ("t1e1FunctionNetwork", 2), ("t1e1FunctionSlaved", 3), ("t1e1FunctionBackup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Function.setStatus('current')
t1e1EBitGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1EBitGeneration.setStatus('current')
t1e1RAIGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1RAIGeneration.setStatus('current')
t1e1SpareBitInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1SpareBitInsertion.setStatus('current')
t1e1Sa4In = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Sa4In.setStatus('current')
t1e1Sa5In = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Sa5In.setStatus('current')
t1e1Sa6In = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Sa6In.setStatus('current')
t1e1Sa7In = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Sa7In.setStatus('current')
t1e1Sa8In = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Sa8In.setStatus('current')
t1e1Sa4Out = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Sa4Out.setStatus('current')
t1e1Sa5Out = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Sa5Out.setStatus('current')
t1e1Sa6Out = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Sa6Out.setStatus('current')
t1e1Sa7Out = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Sa7Out.setStatus('current')
t1e1Sa8Out = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Sa8Out.setStatus('current')
t1e1AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2), )
if mibBuilder.loadTexts: t1e1AlarmTable.setStatus('current')
t1e1AlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "t1e1AlarmNearIndex"), (0, "DS8200v2-MIB", "t1e1AlarmFarIndex"), (0, "DS8200v2-MIB", "t1e1AlarmIndex"))
if mibBuilder.loadTexts: t1e1AlarmTableEntry.setStatus('current')
t1e1AlarmNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AlarmNearIndex.setStatus('current')
t1e1AlarmFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AlarmFarIndex.setStatus('current')
t1e1AlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AlarmIndex.setStatus('current')
t1e1StatusSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1StatusSummary.setStatus('current')
t1e1AlarmSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AlarmSummary.setStatus('current')
t1e1ESStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoES", 2), ("t1e1StatusES", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ESStatus.setStatus('current')
t1e1ESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ESCount.setStatus('current')
t1e1ESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1ESThreshold.setStatus('current')
t1e1ESAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1ESAlarmOther", 1), ("t1e1ESAlarmNone", 2), ("t1e1ESAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ESAlarm.setStatus('current')
t1e1SESStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoSES", 2), ("t1e1StatusSES", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1SESStatus.setStatus('current')
t1e1SESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1SESCount.setStatus('current')
t1e1SESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1SESThreshold.setStatus('current')
t1e1SESAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1SESAlarmOther", 1), ("t1e1SESAlarmNone", 2), ("t1e1SESAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1SESAlarm.setStatus('current')
t1e1LOSSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoLOSS", 2), ("t1e1StatusLOSS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1LOSSStatus.setStatus('current')
t1e1LOSSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1LOSSCount.setStatus('current')
t1e1LOSSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1LOSSThreshold.setStatus('current')
t1e1LOSSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1LOSSAlarmOther", 1), ("t1e1LOSSAlarmNone", 2), ("t1e1LOSSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1LOSSAlarm.setStatus('current')
t1e1UASStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoUAS", 2), ("t1e1StatusUAS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1UASStatus.setStatus('current')
t1e1UASCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1UASCount.setStatus('current')
t1e1UASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1UASThreshold.setStatus('current')
t1e1UASAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1UASAlarmOther", 1), ("t1e1UASAlarmNone", 2), ("t1e1UASAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1UASAlarm.setStatus('current')
t1e1CSSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoCSS", 2), ("t1e1StatusCSS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CSSStatus.setStatus('current')
t1e1CSSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CSSCount.setStatus('current')
t1e1CSSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CSSThreshold.setStatus('current')
t1e1CSSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1CSSAlarmOther", 1), ("t1e1CSSAlarmNone", 2), ("t1e1CSSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CSSAlarm.setStatus('current')
t1e1BPVSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoBPVS", 2), ("t1e1StatusBPVS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1BPVSStatus.setStatus('current')
t1e1BPVSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1BPVSCount.setStatus('current')
t1e1BPVSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1BPVSThreshold.setStatus('current')
t1e1BPVSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1BPVSAlarmOther", 1), ("t1e1BPVSAlarmNone", 2), ("t1e1BPVSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1BPVSAlarm.setStatus('current')
t1e1OOFSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoOOF", 2), ("t1e1StatusOOF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1OOFSStatus.setStatus('current')
t1e1OOFSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1OOFSCount.setStatus('current')
t1e1OOFSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1OOFSThreshold.setStatus('current')
t1e1OOFSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1OOFSAlarmOther", 1), ("t1e1OOFSAlarmNone", 2), ("t1e1OOFSAlarmExists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1OOFSAlarm.setStatus('current')
t1e1AISStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoAIS", 2), ("t1e1StatusAIS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AISStatus.setStatus('current')
t1e1AISCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AISCount.setStatus('current')
t1e1AISThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1AISThreshold.setStatus('current')
t1e1AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1AISAlarmOther", 1), ("t1e1AISAlarmNone", 2), ("t1e1AISAlarmExists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AISAlarm.setStatus('current')
t1e1RASStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1RASStatusOther", 1), ("t1e1RASStatusNoRAS", 2), ("t1e1RASStatusRAS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1RASStatus.setStatus('current')
t1e1RASCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1RASCount.setStatus('current')
t1e1RASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1RASThreshold.setStatus('current')
t1e1RASAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1RASAlarmOther", 1), ("t1e1RASAlarmNone", 2), ("t1e1RASAlarmExists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1RASAlarm.setStatus('current')
t1e1AlarmResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1AlarmResetTimer.setStatus('current')
t1e1AlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1e1AlarmResetOther", 1), ("t1e1AlarmResetClearAlarms", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1AlarmReset.setStatus('current')
ddsNetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1), )
if mibBuilder.loadTexts: ddsNetConfigTable.setStatus('current')
ddsNetConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "ddsNetConfigNearIndex"), (0, "DS8200v2-MIB", "ddsNetConfigFarIndex"), (0, "DS8200v2-MIB", "ddsNetConfigIndex"))
if mibBuilder.loadTexts: ddsNetConfigTableEntry.setStatus('current')
ddsNetConfigNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetConfigNearIndex.setStatus('current')
ddsNetConfigFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetConfigFarIndex.setStatus('current')
ddsNetConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetConfigIndex.setStatus('current')
ddsNetDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetDescription.setStatus('current')
ddsNetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ddsNetRate2400", 1), ("ddsNetRate4800", 2), ("ddsNetRate9600", 3), ("ddsNetRate19200", 4), ("ddsNetRate38400", 5), ("ddsNetRate56000", 6), ("ddsNetRate64000", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetRate.setStatus('current')
ddsNetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ddsNetModeNormal", 1), ("ddsNetModeProprietaryTXPI", 2), ("ddsNetMode64KClearChannel", 3), ("ddsNetMode64KCCProprietaryTXPII", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetMode.setStatus('current')
ddsNetTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ddsNetTimingNet", 1), ("ddsNetTimingInt", 2), ("ddsNetTimingDTE", 3), ("ddsNetTimingPort1", 4), ("ddsNetTimingPort2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetTimingSource.setStatus('current')
ddsNetRemComm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetRemCommEnabled", 1), ("ddsNetRemCommDisabled", 2), ("ddsNetRemCommNotAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetRemComm.setStatus('current')
ddsNetCircuitAssur = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetCircuitAssurEnabled", 1), ("ddsNetCircuitAssurDisabled", 2), ("ddsNetCircuitAssurNotAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetCircuitAssur.setStatus('current')
ddsNetAntiStrTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ddsNetAntiStrTimerOff", 1), ("ddsNetAntiStrTimer10", 2), ("ddsNetAntiStrTimer30", 3), ("ddsNetAntiStrTimer60", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetAntiStrTimer.setStatus('current')
ddsNetAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2), )
if mibBuilder.loadTexts: ddsNetAlarmTable.setStatus('current')
ddsNetAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "ddsNetAlarmNearIndex"), (0, "DS8200v2-MIB", "ddsNetAlarmFarIndex"), (0, "DS8200v2-MIB", "ddsNetAlarmIndex"))
if mibBuilder.loadTexts: ddsNetAlarmTableEntry.setStatus('current')
ddsNetAlarmNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetAlarmNearIndex.setStatus('current')
ddsNetAlarmFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetAlarmFarIndex.setStatus('current')
ddsNetAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetAlarmIndex.setStatus('current')
ddsNetStatusSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetStatusSummary.setStatus('current')
ddsNetAlarmSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetAlarmSummary.setStatus('current')
ddsNetLOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetStatusLOSOther", 1), ("ddsNetStatusNoLOS", 2), ("ddsNetStatusLOS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetLOSStatus.setStatus('current')
ddsNetLOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetLOSCount.setStatus('current')
ddsNetLOSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ddsNetLOSThresholdOther", 1), ("ddsNetLOSThresholdNone", 2), ("ddsNetLOSThreshold1", 3), ("ddsNetLOSThreshold2", 4), ("ddsNetLOSThreshold3", 5), ("ddsNetLOSThreshold4", 6), ("ddsNetLOSThreshold5", 7), ("ddsNetLOSThreshold10", 8), ("ddsNetLOSThreshold20", 9), ("ddsNetLOSThreshold30", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetLOSThreshold.setStatus('current')
ddsNetLOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetLOSAlarmOther", 1), ("ddsNetLOSAlarmNone", 2), ("ddsNetLOSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetLOSAlarm.setStatus('current')
ddsNetOOFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetStatusOOFOther", 1), ("ddsNetStatusNoOOF", 2), ("ddsNetStatusOOF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOFStatus.setStatus('current')
ddsNetOOFCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOFCount.setStatus('current')
ddsNetOOFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ddsNetOOFThresholdOther", 1), ("ddsNetOOFThresholdNone", 2), ("ddsNetOOFThreshold1", 3), ("ddsNetOOFThreshold2", 4), ("ddsNetOOFThreshold3", 5), ("ddsNetOOFThreshold4", 6), ("ddsNetOOFThreshold5", 7), ("ddsNetOOFThreshold10", 8), ("ddsNetOOFThreshold20", 9), ("ddsNetOOFThreshold30", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetOOFThreshold.setStatus('current')
ddsNetOOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetOOFSAlarmOther", 1), ("ddsNetOOFSAlarmNone", 2), ("ddsNetOOFSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOFAlarm.setStatus('current')
ddsNetOOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetStatusOOSOther", 1), ("ddsNetStatusNoOOS", 2), ("ddsNetStatusOOS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOSStatus.setStatus('current')
ddsNetOOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOSCount.setStatus('current')
ddsNetOOSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ddsNetOOSThresholdOther", 1), ("ddsNetOOSThresholdNone", 2), ("ddsNetOOSThreshold1", 3), ("ddsNetOOSThreshold2", 4), ("ddsNetOOSThreshold3", 5), ("ddsNetOOSThreshold4", 6), ("ddsNetOOSThreshold5", 7), ("ddsNetOOSThreshold10", 8), ("ddsNetOOSThreshold20", 9), ("ddsNetOOSThreshold30", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetOOSThreshold.setStatus('current')
ddsNetOOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetOOSAlarmOther", 1), ("ddsNetOOSAlarmNone", 2), ("ddsNetOOSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOSAlarm.setStatus('current')
ddsNetFDLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetStatusFDLOther", 1), ("ddsNetStatusNoFDL", 2), ("ddsNetStatusFDL", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetFDLStatus.setStatus('current')
ddsNetFDLCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetFDLCount.setStatus('current')
ddsNetFDLThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ddsNetFDLThresholdOther", 1), ("ddsNetFDLThresholdNone", 2), ("ddsNetFDLThreshold1", 3), ("ddsNetFDLThreshold2", 4), ("ddsNetFDLThreshold3", 5), ("ddsNetFDLThreshold4", 6), ("ddsNetFDLThreshold5", 7), ("ddsNetFDLThreshold10", 8), ("ddsNetFDLThreshold20", 9), ("ddsNetFDLThreshold30", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetFDLThreshold.setStatus('current')
ddsNetFDLAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetFDLAlarmOther", 1), ("ddsNetFDLAlarmNone", 2), ("ddsNetFDLAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetFDLAlarm.setStatus('current')
ddsNetAlarmResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetAlarmResetTimer.setStatus('current')
ddsNetAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ddsNetAlarmResetOther", 1), ("ddsNetAlarmResetClearAlarms", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetAlarmReset.setStatus('current')
ddsNetBPVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetStatusBPVOther", 1), ("ddsNetStatusNoBPV", 2), ("ddsNetStatusBPV", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetBPVStatus.setStatus('current')
ddsNetBPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetBPVCount.setStatus('current')
ddsNetBPVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ddsNetBPVThresholdOther", 1), ("ddsNetBPVThresholdNone", 2), ("ddsNetBPVThreshold1", 3), ("ddsNetBPVThreshold2", 4), ("ddsNetBPVThreshold3", 5), ("ddsNetBPVThreshold4", 6), ("ddsNetBPVThreshold5", 7), ("ddsNetBPVThreshold10", 8), ("ddsNetBPVThreshold20", 9), ("ddsNetBPVThreshold30", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetBPVThreshold.setStatus('current')
ddsNetBPVAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetBPVAlarmOther", 1), ("ddsNetBPVAlarmNone", 2), ("ddsNetBPVAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetBPVAlarm.setStatus('current')
serialDteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1), )
if mibBuilder.loadTexts: serialDteConfigTable.setStatus('current')
serialDteConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "serialDteConfigNearIndex"), (0, "DS8200v2-MIB", "serialDteConfigFarIndex"), (0, "DS8200v2-MIB", "serialDteConfigIndex"))
if mibBuilder.loadTexts: serialDteConfigTableEntry.setStatus('current')
serialDteConfigNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteConfigNearIndex.setStatus('current')
serialDteConfigFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteConfigFarIndex.setStatus('current')
serialDteConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteConfigIndex.setStatus('current')
serialDteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteDescription.setStatus('current')
serialDteType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("serialDteTypeOther", 1), ("serialDteTypeV35", 2), ("serialDteTypeRS232", 3), ("serialDteTypeEIA530", 4), ("serialDteTypeX21", 5), ("serialDteTypeV36", 6), ("serialDteTypeEIA530A", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteType.setStatus('current')
serialDteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("serialDteRateOther", 1), ("serialDteRate2400", 2), ("serialDteRate4800", 3), ("serialDteRate9600", 4), ("serialDteRate19200", 5), ("serialDteRate38400", 6), ("serialDteRate52000", 7), ("serialDteRate56000", 8), ("serialDteRate57600", 9), ("serialDteRate60000", 10), ("serialDteRate64000", 11), ("serialDteRate112000", 12), ("serialDteRate128000", 13), ("serialDteRate168000", 14), ("serialDteRate192000", 15), ("serialDteRate224000", 16), ("serialDteRate256000", 17), ("serialDteRate280000", 18), ("serialDteRate320000", 19), ("serialDteRate336000", 20), ("serialDteRate384000", 21), ("serialDteRate392000", 22), ("serialDteRate448000", 23), ("serialDteRate504000", 24), ("serialDteRate512000", 25), ("serialDteRate560000", 26), ("serialDteRate576000", 27), ("serialDteRate616000", 28), ("serialDteRate640000", 29), ("serialDteRate672000", 30), ("serialDteRate704000", 31), ("serialDteRate728000", 32), ("serialDteRate768000", 33), ("serialDteRate784000", 34), ("serialDteRate832000", 35), ("serialDteRate840000", 36), ("serialDteRate896000", 37), ("serialDteRate952000", 38), ("serialDteRate960000", 39), ("serialDteRate1008000", 40), ("serialDteRate1024000", 41), ("serialDteRate1064000", 42), ("serialDteRate1088000", 43), ("serialDteRate1120000", 44), ("serialDteRate1152000", 45), ("serialDteRate1176000", 46), ("serialDteRate1216000", 47), ("serialDteRate1232000", 48), ("serialDteRate1280000", 49), ("serialDteRate1288000", 50), ("serialDteRate1344000", 51), ("serialDteRate1400000", 52), ("serialDteRate1408000", 53), ("serialDteRate1456000", 54), ("serialDteRate1472000", 55), ("serialDteRate1512000", 56), ("serialDteRate1536000", 57), ("serialDteRate1568000", 58), ("serialDteRate1600000", 59), ("serialDteRate1624000", 60), ("serialDteRate1664000", 61), ("serialDteRate1680000", 62), ("serialDteRate1728000", 63), ("serialDteRate1736000", 64), ("serialDteRate1792000", 65), ("serialDteRate1856000", 66), ("serialDteRate1920000", 67), ("serialDteRate1984000", 68), ("serialDteRate2048000", 69), ("serialDteRate1200", 70), ("serialDteRate14400", 71), ("serialDteRate28800", 72), ("serialDteRate48000", 73), ("serialDteRate31200", 74), ("serialDteRate115200", 75), ("serialDteRate2112000", 76), ("serialDteRate2176000", 77), ("serialDteRate2240000", 78), ("serialDteRate2304000", 79), ("serialDteRate300", 80), ("serialDteRate600", 81), ("serialDteRate3072000", 82), ("serialDteRate4096000", 83)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteRate.setStatus('current')
serialDteInvertData = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteInvertDataOther", 1), ("serialDteInvertDataDisabled", 2), ("serialDteInvertDataEnabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteInvertData.setStatus('current')
serialDteFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialDteFormatOther", 1), ("serialDteFormatSync", 2), ("serialDteFormatAsync", 3), ("serialDteFormatNotAvail", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteFormat.setStatus('current')
serialDteParity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("serialDteParityOther", 1), ("serialDteParityNone", 2), ("serialDteParityOdd", 3), ("serialDteParityEven", 4), ("serialDteParityMark", 5), ("serialDteParitySpace", 6), ("serialDteParityNotAvail", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteParity.setStatus('current')
serialDteStopBit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialDteStopBitOther", 1), ("serialDteStopBit1", 2), ("serialDteStopBit2", 3), ("serialDteStopBitNotAvail", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteStopBit.setStatus('current')
serialDteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("serialDteModeOther", 1), ("serialDteModeDDSI", 2), ("serialDteModeDDSII", 3), ("serialDteModeTxpINormal", 4), ("serialDteModeTxpITDM", 5), ("serialDteModeTxpIINormal", 6), ("serialDteModeTxpIITDM", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteMode.setStatus('current')
serialDteDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serialDteDSROther", 1), ("serialDteDSRTestOff", 2), ("serialDteDSRForcedOn", 3), ("serialDteDSRForcedOff", 4), ("serialDteDSRInternal", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteDSR.setStatus('current')
serialDteDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("serialDteDCDOther", 1), ("serialDteDCDIdleOff", 2), ("serialDteDCDForcedOn", 3), ("serialDteDCDForcedOff", 4), ("serialDteDCDInternal", 5), ("serialDteDCDFarRTS", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteDCD.setStatus('current')
serialDteRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialDteRTSOther", 1), ("serialDteRTSNormal", 2), ("serialDteRTSForcedOn", 3), ("serialDteRTSExternal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteRTS.setStatus('current')
serialDteRTSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteRTSDelayOther", 1), ("serialDteRTSDelayNormal", 2), ("serialDteRTSDelayLong", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteRTSDelay.setStatus('current')
serialDteDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteDTROther", 1), ("serialDteDTRFalse", 2), ("serialDteDTRTrue", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteDTR.setStatus('current')
serialDteCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialDteCTSOther", 1), ("serialDteCTSForceTrue", 2), ("serialDteCTSForceFalse", 3), ("serialDteCTSInternal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteCTS.setStatus('current')
serialDteV54 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteV54Other", 1), ("serialDteV54Disable", 2), ("serialDteV54Enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteV54.setStatus('current')
serialDteLL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteLLOther", 1), ("serialDteLLDisable", 2), ("serialDteLLEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteLL.setStatus('current')
serialDteRL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteRLOther", 1), ("serialDteRLDisable", 2), ("serialDteRLEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteRL.setStatus('current')
serialDteStartChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteStartChannel.setStatus('current')
serialDteNumberOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteNumberOfChannels.setStatus('current')
serialDteTxClock = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialDteTxClockOther", 1), ("serialDteTxClockInternal", 2), ("serialDteTxClockExternal", 3), ("serialDteTxClockOversample", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteTxClock.setStatus('current')
serialDteBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("contiguous", 2), ("alternate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteBundle.setStatus('current')
serialDteChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("nx56k", 2), ("nx64k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteChannelRate.setStatus('current')
serialDteInvertClock = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteInvertClock.setStatus('current')
serialDteCharSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("five", 2), ("six", 3), ("seven", 4), ("eight", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteCharSize.setStatus('current')
serialDteFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("xonXoff", 3), ("rtsCts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteFlowControl.setStatus('current')
serialDtePinStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDtePinStatus.setStatus('current')
serialDteInInvertClock = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteInInvertClock.setStatus('current')
serialDteAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2), )
if mibBuilder.loadTexts: serialDteAlarmTable.setStatus('current')
serialDteAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "serialDteAlarmNearIndex"), (0, "DS8200v2-MIB", "serialDteAlarmFarIndex"), (0, "DS8200v2-MIB", "serialDteAlarmIndex"))
if mibBuilder.loadTexts: serialDteAlarmTableEntry.setStatus('current')
serialDteAlarmNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteAlarmNearIndex.setStatus('current')
serialDteAlarmFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteAlarmFarIndex.setStatus('current')
serialDteAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteAlarmIndex.setStatus('current')
serialDteDTRAlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteDTRAlarmOther", 1), ("serialDteDTRAlarmDisable", 2), ("serialDteDTRAlarmEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteDTRAlarmControl.setStatus('current')
serialDteDTRAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteDTRAlarmOther", 1), ("serialDteDTRAlarmNone", 2), ("serialDteDTRAlarmActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteDTRAlarmStatus.setStatus('current')
serialDteStatusSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteStatusSummary.setStatus('current')
serialDteAlarmSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteAlarmSummary.setStatus('current')
serialDteASCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteStatusASCOther", 1), ("serialDteStatusNoASC", 2), ("serialDteStatusASC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteASCStatus.setStatus('current')
serialDteASCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteASCCount.setStatus('current')
serialDteASCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteASCThreshold.setStatus('current')
serialDteASCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteASCAlarmOther", 1), ("serialDteASCAlarmNone", 2), ("serialDteASCAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteASCAlarm.setStatus('current')
serialDteFDLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteStatusFDLOther", 1), ("serialDteStatusNoFDL", 2), ("serialDteStatusFDL", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteFDLStatus.setStatus('current')
serialDteFDLCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteFDLCount.setStatus('current')
serialDteFDLThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteFDLThreshold.setStatus('current')
serialDteFDLAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteFDLAlarmOther", 1), ("serialDteFDLAlarmNone", 2), ("serialDteFDLAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteFDLAlarm.setStatus('current')
serialDteLOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteStatusLOSOther", 1), ("serialDteStatusNoLOS", 2), ("serialDteStatusLOS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteLOSStatus.setStatus('current')
serialDteLOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteLOSCount.setStatus('current')
serialDteLOSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteLOSThreshold.setStatus('current')
serialDteLOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteLOSAlarmOther", 1), ("serialDteLOSAlarmNone", 2), ("serialDteLOSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteLOSAlarm.setStatus('current')
analogDteTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1), )
if mibBuilder.loadTexts: analogDteTable.setStatus('current')
analogDteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "analogDteNearIndex"), (0, "DS8200v2-MIB", "analogDteFarIndex"), (0, "DS8200v2-MIB", "analogDteIndex"))
if mibBuilder.loadTexts: analogDteTableEntry.setStatus('current')
analogDteNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteNearIndex.setStatus('current')
analogDteFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteFarIndex.setStatus('current')
analogDteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteIndex.setStatus('current')
analogDteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteDescription.setStatus('current')
analogDteCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("analogDteCardTypeOther", 1), ("analogDteCardTypeFXS", 2), ("analogDteCardTypeFXO", 3), ("analogDteCardType4WEM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteCardType.setStatus('current')
analogDteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("analogDteModeOther", 1), ("analogDteModeSpare", 2), ("analogDteModeActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteMode.setStatus('current')
analogDteState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("analogDteStateOther", 1), ("analogDteStateIdle", 2), ("analogDteStateBusy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteState.setStatus('current')
analogDteElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteElementID.setStatus('current')
analogDteSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("analogDteSignallingOther", 1), ("analogDteSignallingFXSLS", 2), ("analogDteSignallingFXSGS", 3), ("analogDteSignallingUVG", 4), ("analogDteSignallingMEGLS", 5), ("analogDteSignallingMEGGS", 6), ("analogDteSignallingMEGRLS", 7), ("analogDteSignallingMEGRGS", 8), ("analogDteSignallingPLAR", 9), ("analogDteSignallingSLC96", 10), ("analogDteSignallingDIDDNIS", 11), ("analogDteSignallingDNISWLS", 12), ("analogDteSignallingDNISDLS", 13), ("analogDteSignallingDNISWRLS", 14), ("analogDteSignallingDNISDRLS", 15), ("analogDteSignallingDNISWGS", 16), ("analogDteSignallingDNISDGS", 17), ("analogDteSignallingDNISWRGS", 18), ("analogDteSignallingDNISDRGS", 19), ("analogDteSignallingFXOLS", 20), ("analogDteSignallingFXOGS", 21), ("analogDteSignallingFXOUVG", 22), ("analogDteSignallingFXOUVGR", 23), ("analogDteSignalling4WEMTYPE1", 24), ("analogDteSignalling4WEMTYPE2", 25), ("analogDteSignalling4WEMTYPE3", 26), ("analogDteSignalling4WEMTYPE4", 27), ("analogDteSignalling4WEMTYPE5", 28), ("analogDteSignalling4WEMTO", 29)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteSignalling.setStatus('current')
analogDteDNISDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("analogDteDNISDelayOther", 1), ("analogDteDNISDelay1Second", 2), ("analogDteDNISDelay2Seconds", 3), ("analogDteDNISDelay3Seconds", 4), ("analogDteDNISDelay4Seconds", 5), ("analogDteDNISDelay5Seconds", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteDNISDelay.setStatus('current')
analogDteTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("analogDteTxGainOther", 1), ("analogDteTxGain3DB", 2), ("analogDteTxGain2DB", 3), ("analogDteTxGain1DB", 4), ("analogDteTxGain0DB", 5), ("analogDteTxGainm1DB", 6), ("analogDteTxGainm2DB", 7), ("analogDteTxGainm3DB", 8), ("analogDteTxGainm4DB", 9), ("analogDteTxGainm5DB", 10), ("analogDteTxGainm6DB", 11), ("analogDteTxGainm7DB", 12), ("analogDteTxGainm8DB", 13), ("analogDteTxGainm9DB", 14), ("analogDteTxGainm10DB", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteTxGain.setStatus('current')
analogDteRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("analogDteRxGainOther", 1), ("analogDteRxGain2DB", 2), ("analogDteRxGain1DB", 3), ("analogDteRxGain0DB", 4), ("analogDteRxGainm1DB", 5), ("analogDteRxGainm2DB", 6), ("analogDteRxGainm3DB", 7), ("analogDteRxGainm4DB", 8), ("analogDteRxGainm5DB", 9), ("analogDteRxGainm6DB", 10), ("analogDteRxGainm7DB", 11), ("analogDteRxGainm8DB", 12), ("analogDteRxGainm9DB", 13), ("analogDteRxGainm10DB", 14), ("analogDteRxGainm11DB", 15), ("analogDteRxGainm12DB", 16), ("analogDteRxGainm13DB", 17), ("analogDteRxGainm14DB", 18), ("analogDteRxGainm15DB", 19), ("analogDteRxGainm16DB", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteRxGain.setStatus('current')
connectionTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1), )
if mibBuilder.loadTexts: connectionTable.setStatus('current')
connectionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "connectionNearIndex"), (0, "DS8200v2-MIB", "connectionFarIndex"), (0, "DS8200v2-MIB", "connectionTableIndex"))
if mibBuilder.loadTexts: connectionTableEntry.setStatus('current')
connectionNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionNearIndex.setStatus('current')
connectionFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionFarIndex.setStatus('current')
connectionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTableIndex.setStatus('current')
connectionTableDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTableDescription.setStatus('current')
connectionChannelTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2), )
if mibBuilder.loadTexts: connectionChannelTable.setStatus('current')
connectionChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "connectionChannelNearIndex"), (0, "DS8200v2-MIB", "connectionChannelFarIndex"), (0, "DS8200v2-MIB", "connectionChannelLineIndex"), (0, "DS8200v2-MIB", "connectionChannelIndex"))
if mibBuilder.loadTexts: connectionChannelEntry.setStatus('current')
connectionChannelNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionChannelNearIndex.setStatus('current')
connectionChannelFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionChannelFarIndex.setStatus('current')
connectionChannelLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionChannelLineIndex.setStatus('current')
connectionChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionChannelIndex.setStatus('current')
channelInterfaceAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106))).clone(namedValues=NamedValues(("other", 1), ("unassigned", 2), ("dTE", 3), ("remComm", 4), ("port1", 5), ("port2", 6), ("port3", 7), ("port4", 8), ("port5", 9), ("port6", 10), ("port7", 11), ("port8", 12), ("port9", 13), ("port10", 14), ("port11", 15), ("port12", 16), ("port13", 17), ("port14", 18), ("port15", 19), ("port16", 20), ("port17", 21), ("port18", 22), ("port19", 23), ("port20", 24), ("port21", 25), ("port22", 26), ("port23", 27), ("port24", 28), ("port25", 29), ("port26", 30), ("port27", 31), ("port28", 32), ("port29", 33), ("port30", 34), ("port31", 35), ("port32", 36), ("slot2PortA", 37), ("slot2PortB", 38), ("slot3PortA", 39), ("slot3PortB", 40), ("slot4PortA", 41), ("slot4PortB", 42), ("slot5PortA", 43), ("slot5PortB", 44), ("slot6PortA", 45), ("slot6PortB", 46), ("slot2Dsu1PortA", 47), ("slot2Dsu1PortB", 48), ("slot2Dsu2PortA", 49), ("slot2Dsu2PortB", 50), ("slot2Dsu3PortA", 51), ("slot2Dsu3PortB", 52), ("slot2Dsu4PortA", 53), ("slot2Dsu4PortB", 54), ("slot2Dsu5PortA", 55), ("slot2Dsu5PortB", 56), ("slot2Dsu6PortA", 57), ("slot2Dsu6PortB", 58), ("slot3Dsu1PortA", 59), ("slot3Dsu1PortB", 60), ("slot3Dsu2PortA", 61), ("slot3Dsu2PortB", 62), ("slot3Dsu3PortA", 63), ("slot3Dsu3PortB", 64), ("slot3Dsu4PortA", 65), ("slot3Dsu4PortB", 66), ("slot3Dsu5PortA", 67), ("slot3Dsu5PortB", 68), ("slot3Dsu6PortA", 69), ("slot3Dsu6PortB", 70), ("slot4Dsu1PortA", 71), ("slot4Dsu1PortB", 72), ("slot4Dsu2PortA", 73), ("slot4Dsu2PortB", 74), ("slot4Dsu3PortA", 75), ("slot4Dsu3PortB", 76), ("slot4Dsu4PortA", 77), ("slot4Dsu4PortB", 78), ("slot4Dsu5PortA", 79), ("slot4Dsu5PortB", 80), ("slot4Dsu6PortA", 81), ("slot4Dsu6PortB", 82), ("slot5Dsu1PortA", 83), ("slot5Dsu1PortB", 84), ("slot5Dsu2PortA", 85), ("slot5Dsu2PortB", 86), ("slot5Dsu3PortA", 87), ("slot5Dsu3PortB", 88), ("slot5Dsu4PortA", 89), ("slot5Dsu4PortB", 90), ("slot5Dsu5PortA", 91), ("slot5Dsu5PortB", 92), ("slot5Dsu6PortA", 93), ("slot5Dsu6PortB", 94), ("slot6Dsu1PortA", 95), ("slot6Dsu1PortB", 96), ("slot6Dsu2PortA", 97), ("slot6Dsu2PortB", 98), ("slot6Dsu3PortA", 99), ("slot6Dsu3PortB", 100), ("slot6Dsu4PortA", 101), ("slot6Dsu4PortB", 102), ("slot6Dsu5PortA", 103), ("slot6Dsu5PortB", 104), ("slot6Dsu6PortA", 105), ("slot6Dsu6PortB", 106)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelInterfaceAssignment.setStatus('current')
channelInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelInterfaceDescription.setStatus('current')
channelInterfaceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelInterfaceChannel.setStatus('current')
channelSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("clearChannel", 2), ("robbedBit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelSignalling.setStatus('current')
bertTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1), )
if mibBuilder.loadTexts: bertTable.setStatus('current')
bertTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "bertNearIndex"), (0, "DS8200v2-MIB", "bertFarIndex"), (0, "DS8200v2-MIB", "bertIndex"))
if mibBuilder.loadTexts: bertTableEntry.setStatus('current')
bertNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertNearIndex.setStatus('current')
bertFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertFarIndex.setStatus('current')
bertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertIndex.setStatus('current')
bertPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("bertPatternOther", 1), ("bertPatternQRSS", 2), ("bertPattern63", 3), ("bertPattern511", 4), ("bertPattern2047", 5), ("bertPattern215", 6), ("bertPattern220", 7), ("bertPattern223", 8), ("bertPattern1in8", 9), ("bertPattern3in24", 10), ("bertPatternALT", 11), ("bertPatternCLEAR", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertPattern.setStatus('current')
bertLength = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bertLengthOther", 1), ("bertLength15minutes", 2), ("bertLength30minutes", 3), ("bertLength60minutes", 4), ("bertLength24hours", 5), ("bertLengthContinuous", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertLength.setStatus('current')
bertPatternSync = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bertPatternSyncOther", 1), ("bertPatternSyncNoTest", 2), ("bertPatternSyncNoSync", 3), ("bertPatternSyncInsync", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertPatternSync.setStatus('current')
bertElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertElapsedTime.setStatus('current')
bertBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertBitErrors.setStatus('current')
bertErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertErroredSeconds.setStatus('current')
bertPercentEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertPercentEFS.setStatus('current')
bertCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bertCommandOther", 1), ("bertCommandStart", 2), ("bertCommandStop", 3), ("bertCommandResetErrors", 4), ("bertCommandInjectError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertCommand.setStatus('current')
bertInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2), )
if mibBuilder.loadTexts: bertInterfaceTable.setStatus('current')
bertInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "bertInterfaceNearIndex"), (0, "DS8200v2-MIB", "bertInterfaceFarIndex"), (0, "DS8200v2-MIB", "bertChipIndex"), (0, "DS8200v2-MIB", "bertInterfaceIndex"))
if mibBuilder.loadTexts: bertInterfaceTableEntry.setStatus('current')
bertInterfaceNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertInterfaceNearIndex.setStatus('current')
bertInterfaceFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertInterfaceFarIndex.setStatus('current')
bertChipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertChipIndex.setStatus('current')
bertInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertInterfaceIndex.setStatus('current')
bertInterfaceSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("bertInterfaceSettingOther", 1), ("bertInterfaceSettingIdle", 2), ("bertInterfaceSettingChannel1", 3), ("bertInterfaceSettingChannel2", 4), ("bertInterfaceSettingChannel3", 5), ("bertInterfaceSettingChannel4", 6), ("bertInterfaceSettingChannel5", 7), ("bertInterfaceSettingChannel6", 8), ("bertInterfaceSettingChannel7", 9), ("bertInterfaceSettingChannel8", 10), ("bertInterfaceSettingChannel9", 11), ("bertInterfaceSettingChannel10", 12), ("bertInterfaceSettingChannel11", 13), ("bertInterfaceSettingChannel12", 14), ("bertInterfaceSettingChannel13", 15), ("bertInterfaceSettingChannel14", 16), ("bertInterfaceSettingChannel15", 17), ("bertInterfaceSettingChannel16", 18), ("bertInterfaceSettingChannel17", 19), ("bertInterfaceSettingChannel18", 20), ("bertInterfaceSettingChannel19", 21), ("bertInterfaceSettingChannel20", 22), ("bertInterfaceSettingChannel21", 23), ("bertInterfaceSettingChannel22", 24), ("bertInterfaceSettingChannel23", 25), ("bertInterfaceSettingChannel24", 26), ("bertInterfaceSettingChannel25", 27), ("bertInterfaceSettingChannel26", 28), ("bertInterfaceSettingChannel27", 29), ("bertInterfaceSettingChannel28", 30), ("bertInterfaceSettingChannel29", 31), ("bertInterfaceSettingChannel30", 32), ("bertInterfaceSettingChannel31", 33), ("bertInterfaceSettingChannel32", 34), ("bertInterfaceSettingNet", 35), ("bertInterfaceSettingDTE", 36), ("bertInterfaceSettingNotEnabled", 37), ("bertInterfaceSettingUseService", 38)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertInterfaceSetting.setStatus('current')
bertInterfaceService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertInterfaceService.setStatus('current')
bertInterfaceChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("nx56k", 2), ("nx64k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertInterfaceChannelRate.setStatus('current')
testTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3), )
if mibBuilder.loadTexts: testTable.setStatus('current')
testTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1), ).setIndexNames((0, "DS8200v2-MIB", "testNearIndex"), (0, "DS8200v2-MIB", "testFarIndex"), (0, "DS8200v2-MIB", "testTableIndex"))
if mibBuilder.loadTexts: testTableEntry.setStatus('current')
testNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testNearIndex.setStatus('current')
testFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testFarIndex.setStatus('current')
testTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testTableIndex.setStatus('current')
testType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("testTypeOther", 1), ("testTypeNoTest", 2), ("testTypePLB", 3), ("testTypeLLB", 4), ("testtypeMLB", 5), ("testTypeFarPLB", 6), ("testTypeFarLLB", 7), ("testTypeFarMLB", 8), ("testTypePortLoop", 9), ("testTypeV54Loop", 10), ("testTypeFarV54Loop", 11), ("testTypeFarPortLoop", 12), ("testTypeTDM", 13), ("testTypeFarPortUnloop", 14), ("testTypeFarV54Unloop", 15), ("testTypeDualLoop", 16), ("testTypeNetworkSideTransparent", 17), ("testTypeNetworkSideNonTransparent", 18), ("testTypeCustomerSideTransparent", 19), ("testTypeCustomerSideNonTransparent", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: testType.setStatus('current')
testLoopDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testLoopOther", 1), ("testLoopUnidirectional", 2), ("testLoopBidirectional", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: testLoopDirection.setStatus('current')
testFarLLBFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testFarLLBFramingOther", 1), ("testFarLLBFramingUnframed", 2), ("testFarLLBFramingFramed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: testFarLLBFraming.setStatus('current')
testLoopInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testLoopInitiatorOther", 1), ("testLoopInitiatorLMP", 2), ("testLoopInitiatorSNMP", 3), ("testLoopInitiatorWeb", 4), ("testLoopInitiatorEOC", 5), ("testLoopInitiatorButtons", 6), ("testLoopInitiatorDCEControl", 7), ("testLoopInitiatorISDNPRAV3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: testLoopInitiator.setStatus('current')
testDefaultLoopType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("testDefaultLoopTypeOther", 1), ("testDefaultLoopTypeTransparent", 2), ("testDefaultLoopTypeNonTransparent", 3), ("testDefaultLoopTypeDual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: testDefaultLoopType.setStatus('current')
performance24Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1), )
if mibBuilder.loadTexts: performance24Table.setStatus('current')
performance24TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "performance24NearIndex"), (0, "DS8200v2-MIB", "performance24FarIndex"), (0, "DS8200v2-MIB", "performance24InterfaceIndex"), (0, "DS8200v2-MIB", "performance24Index"))
if mibBuilder.loadTexts: performance24TableEntry.setStatus('current')
performance24NearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24NearIndex.setStatus('current')
performance24FarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24FarIndex.setStatus('current')
performance24InterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24InterfaceIndex.setStatus('current')
performance24Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("performance24Summary", 1), ("performance24Current", 2), ("performance24period1", 3), ("performance24period2", 4), ("performance24period3", 5), ("performance24period4", 6), ("performance24period5", 7), ("performance24period6", 8), ("performance24period7", 9), ("performance24period8", 10), ("performance24period9", 11), ("performance24period10", 12), ("performance24period11", 13), ("performance24period12", 14), ("performance24period13", 15), ("performance24period14", 16), ("performance24period15", 17), ("performance24period16", 18), ("performance24period17", 19), ("performance24period18", 20), ("performance24period19", 21), ("performance24period20", 22), ("performance24period21", 23), ("performance24period22", 24), ("performance24period23", 25), ("performance24period24", 26), ("performance24period25", 27), ("performance24period26", 28), ("performance24period27", 29), ("performance24period28", 30), ("performance24period29", 31), ("performance24period30", 32), ("performance24period31", 33), ("performance24period32", 34), ("performance24period33", 35), ("performance24period34", 36), ("performance24period35", 37), ("performance24period36", 38), ("performance24period37", 39), ("performance24period38", 40), ("performance24period39", 41), ("performance24period40", 42), ("performance24period41", 43), ("performance24period42", 44), ("performance24period43", 45), ("performance24period44", 46), ("performance24period45", 47), ("performance24period46", 48), ("performance24period47", 49), ("performance24period48", 50), ("performance24period49", 51), ("performance24period50", 52), ("performance24period51", 53), ("performance24period52", 54), ("performance24period53", 55), ("performance24period54", 56), ("performance24period55", 57), ("performance24period56", 58), ("performance24period57", 59), ("performance24period58", 60), ("performance24period59", 61), ("performance24period60", 62), ("performance24period61", 63), ("performance24period62", 64), ("performance24period63", 65), ("performance24period64", 66), ("performance24period65", 67), ("performance24period66", 68), ("performance24period67", 69), ("performance24period68", 70), ("performance24period69", 71), ("performance24period70", 72), ("performance24period71", 73), ("performance24period72", 74), ("performance24period73", 75), ("performance24period74", 76), ("performance24period75", 77), ("performance24period76", 78), ("performance24period77", 79), ("performance24period78", 80), ("performance24period79", 81), ("performance24period80", 82), ("performance24period81", 83), ("performance24period82", 84), ("performance24period83", 85), ("performance24period84", 86), ("performance24period85", 87), ("performance24period86", 88), ("performance24period87", 89), ("performance24period88", 90), ("performance24period89", 91), ("performance24period90", 92), ("performance24period91", 93), ("performance24period92", 94), ("performance24period93", 95), ("performance24period94", 96), ("performance24period95", 97), ("performance24period96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24Index.setStatus('current')
performance24ES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24ES.setStatus('current')
performance24BES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24BES.setStatus('current')
performance24SES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24SES.setStatus('current')
performance24UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24UAS.setStatus('current')
performance24LOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24LOFC.setStatus('current')
performance24CSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24CSS.setStatus('current')
performance24CRCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24CRCES.setStatus('current')
performance24OOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24OOFS.setStatus('current')
performance24LOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24LOSS.setStatus('current')
performance24AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24AISS.setStatus('current')
performance24RAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24RAS.setStatus('current')
performance24BPVS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24BPVS.setStatus('current')
performance24timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24timestamp.setStatus('current')
performance30Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2), )
if mibBuilder.loadTexts: performance30Table.setStatus('current')
performance30TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "performance30NearIndex"), (0, "DS8200v2-MIB", "performance30FarIndex"), (0, "DS8200v2-MIB", "performance30InterfaceIndex"), (0, "DS8200v2-MIB", "performance30Index"))
if mibBuilder.loadTexts: performance30TableEntry.setStatus('current')
performance30NearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30NearIndex.setStatus('current')
performance30FarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30FarIndex.setStatus('current')
performance30InterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30InterfaceIndex.setStatus('current')
performance30Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("performance30Summary", 1), ("performance30day1", 2), ("performance30day2", 3), ("performance30day3", 4), ("performance30day4", 5), ("performance30day5", 6), ("performance30day6", 7), ("performance30day7", 8), ("performance30day8", 9), ("performance30day9", 10), ("performance30day10", 11), ("performance30day11", 12), ("performance30day12", 13), ("performance30day13", 14), ("performance30day14", 15), ("performance30day15", 16), ("performance30day16", 17), ("performance30day17", 18), ("performance30day18", 19), ("performance30day19", 20), ("performance30day20", 21), ("performance30day21", 22), ("performance30day22", 23), ("performance30day23", 24), ("performance30day24", 25), ("performance30day25", 26), ("performance30day26", 27), ("performance30day27", 28), ("performance30day28", 29), ("performance30day29", 30), ("performance30day30", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30Index.setStatus('current')
performance30ES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30ES.setStatus('current')
performance30BES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30BES.setStatus('current')
performance30SES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30SES.setStatus('current')
performance30UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30UAS.setStatus('current')
performance30LOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30LOFC.setStatus('current')
performance30CSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30CSS.setStatus('current')
performance30CRCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30CRCES.setStatus('current')
performance30OOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30OOFS.setStatus('current')
performance30LOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30LOSS.setStatus('current')
performance30AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30AISS.setStatus('current')
performance30RAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30RAS.setStatus('current')
performance30BPVS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30BPVS.setStatus('current')
performance30timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30timestamp.setStatus('current')
iTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1), )
if mibBuilder.loadTexts: iTable.setStatus('current')
iTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "iTableNearIndex"), (0, "DS8200v2-MIB", "iTableFarIndex"), (0, "DS8200v2-MIB", "iTableIndex"))
if mibBuilder.loadTexts: iTableEntry.setStatus('current')
iTableNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTableNearIndex.setStatus('current')
iTableFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTableFarIndex.setStatus('current')
iTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTableIndex.setStatus('current')
iDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iDescription.setStatus('current')
iType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 192))).clone(namedValues=NamedValues(("disabled", 0), ("v35", 1), ("eia530", 2), ("rs232", 3), ("voice", 4), ("hsdata", 5), ("dualt1dte", 6), ("dualddsv1", 7), ("hexdds", 8), ("ocudp", 9), ("x21", 10), ("dualddsv2", 11), ("rfdl", 128), ("alt", 129), ("t1dte", 130), ("didte", 131), ("t1ntw", 132), ("e1ntw", 133), ("ddsntw", 134), ("ddsdte", 135), ("ddsdbu", 136), ("fxs", 137), ("fxo", 138), ("eandm", 139), ("e1sig", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iType.setStatus('current')
iSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSlot.setStatus('current')
iPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPort.setStatus('current')
iStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("iStatusOther", 1), ("iStatusOK", 2), ("iStatusErrored", 3), ("iStatusAlarmed", 4), ("iStatusTesting", 5), ("iStatusUnassigned", 6), ("iStatusLoopDetected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iStatus.setStatus('current')
traplogTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1), )
if mibBuilder.loadTexts: traplogTable.setStatus('current')
traplogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "traplogIndex"))
if mibBuilder.loadTexts: traplogEntry.setStatus('current')
traplogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogIndex.setStatus('current')
traplogNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogNearIndex.setStatus('current')
traplogFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogFarIndex.setStatus('current')
traplogInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogInterfaceIndex.setStatus('current')
traplogTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogTrapNum.setStatus('current')
traplogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogTimeStamp.setStatus('current')
traplogDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("t12000", 3), ("e12048", 4), ("e13021", 5), ("t13000", 6), ("t13001", 7), ("t13002", 8), ("t13030", 9), ("t13060", 10), ("t13101", 11), ("t13102", 12), ("t13111", 13), ("t13112", 14), ("dds4001", 15), ("dds4101", 16), ("dds4051", 17), ("dds4151", 18), ("dds41TDM", 19), ("generic54016", 20), ("wanSuite", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogDeviceType.setStatus('current')
traplogOID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogOID1.setStatus('current')
traplogDescription1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogDescription1.setStatus('current')
traplogValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogValue1.setStatus('current')
traplogOID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogOID2.setStatus('current')
traplogDescription2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogDescription2.setStatus('current')
traplogValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogValue2.setStatus('current')
traplogOID3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogOID3.setStatus('current')
traplogDescription3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogDescription3.setStatus('current')
traplogValue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogValue3.setStatus('current')
traplogDeleteEntry = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traplogDeleteEntry.setStatus('current')
traplogSortOption = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ascendingtimestamp", 2), ("ascendingunit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traplogSortOption.setStatus('current')
traplogLastTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogLastTimeStamp.setStatus('current')
unitUtilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1), )
if mibBuilder.loadTexts: unitUtilitiesTable.setStatus('current')
unitUtilitiesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "unitUtilitiesNearIndex"), (0, "DS8200v2-MIB", "unitUtilitiesFarIndex"))
if mibBuilder.loadTexts: unitUtilitiesTableEntry.setStatus('current')
unitUtilitiesNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitUtilitiesNearIndex.setStatus('current')
unitUtilitiesFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitUtilitiesFarIndex.setStatus('current')
unitUtilitiesLocalPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesLocalPassword.setStatus('current')
unitUtilitiesTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesTime.setStatus('current')
unitUtilitiesDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesDate.setStatus('current')
unitUtilitiesMaintenanceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("restart", 3), ("resetProfile1", 4), ("resetProfile2", 5), ("resetProfile3", 6), ("resetProfile4", 7), ("resetProfile5", 8), ("resetProfile6", 9), ("resetProfile7", 10), ("resetProfile8", 11), ("resetProfile9", 12), ("resetProfile10", 13), ("resetProfile11", 14), ("resetProfile12", 15), ("resetProfile13", 16), ("resetProfile14", 17), ("resetProfile15", 18), ("resetProfile16", 19), ("resetProfile17", 20), ("resetProfile18", 21), ("resetProfile19", 22), ("resetProfile20", 23), ("resetProfile21", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesMaintenanceReset.setStatus('current')
unitUtilitiesAlarmResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesAlarmResetTimer.setStatus('current')
unitUtilitiesAlarmClear = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("utilitiesAlarmClearOther", 1), ("utilitiesAlarmClearNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesAlarmClear.setStatus('current')
unitUtilitiesSaveConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("saveConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesSaveConfig.setStatus('current')
unitUtilitiesRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notNeeded", 2), ("recommended", 3), ("required", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitUtilitiesRestartStatus.setStatus('current')
unitUtilitiesReadOnlyPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesReadOnlyPassword.setStatus('current')
unitUtilitiesPasswordLockoutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesPasswordLockoutEnable.setStatus('current')
unitUtilitiesPasswordLockoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("locked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitUtilitiesPasswordLockoutStatus.setStatus('current')
unitUtilitiesPasswordLockoutClear = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesPasswordLockoutClear.setStatus('current')
netAPSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1), )
if mibBuilder.loadTexts: netAPSConfigTable.setStatus('current')
netAPSConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "netAPSConfigNearIndex"), (0, "DS8200v2-MIB", "netAPSConfigFarIndex"), (0, "DS8200v2-MIB", "netAPSConfigifIndex"))
if mibBuilder.loadTexts: netAPSConfigTableEntry.setStatus('current')
netAPSConfigNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigNearIndex.setStatus('current')
netAPSConfigFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigFarIndex.setStatus('current')
netAPSConfigifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigifIndex.setStatus('current')
netAPSConfigOtherifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigOtherifIndex.setStatus('current')
netAPSConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("tr54017", 2), ("autoABswitch", 3), ("masterAltCarrier", 4), ("slaveAltCarrier", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigMode.setStatus('current')
netAPSConfigRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigRevert.setStatus('current')
netAPSConfigManualInhibit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("thisLine", 3), ("otherLine", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigManualInhibit.setStatus('current')
netAPSConfigAvailabilityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigAvailabilityTimer.setStatus('current')
netAPSConfigESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigESThreshold.setStatus('current')
netAPSConfigESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigESCount.setStatus('current')
netAPSConfigESSwitchEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigESSwitchEvent.setStatus('current')
netAPSConfigCSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigCSESThreshold.setStatus('current')
netAPSConfigCSESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigCSESCount.setStatus('current')
netAPSConfigCSESSwitchEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigCSESSwitchEvent.setStatus('current')
netAPSConfigStatusBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigStatusBitmap.setStatus('current')
netAPSConfigStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigStatusString.setStatus('current')
netAPSConfigTimeInInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigTimeInInterval.setStatus('current')
netAPSConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigValidIntervals.setStatus('current')
netAPSConfigValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigValidDays.setStatus('current')
netAPSConfigReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("clearAlarms", 2), ("clearHistory", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigReset.setStatus('current')
netAPSHist24Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2), )
if mibBuilder.loadTexts: netAPSHist24Table.setStatus('current')
netAPSHist24TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "netAPSHist24NearIndex"), (0, "DS8200v2-MIB", "netAPSHist24FarIndex"), (0, "DS8200v2-MIB", "netAPSHist24ifIndex"), (0, "DS8200v2-MIB", "netAPSHist24Index"))
if mibBuilder.loadTexts: netAPSHist24TableEntry.setStatus('current')
netAPSHist24NearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24NearIndex.setStatus('current')
netAPSHist24FarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24FarIndex.setStatus('current')
netAPSHist24ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24ifIndex.setStatus('current')
netAPSHist24Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("statSummary", 1), ("statCurrent", 2), ("statPeriod1", 3), ("statPeriod2", 4), ("statPeriod3", 5), ("statPeriod4", 6), ("statPeriod5", 7), ("statPeriod6", 8), ("statPeriod7", 9), ("statPeriod8", 10), ("statPeriod9", 11), ("statPeriod10", 12), ("statPeriod11", 13), ("statPeriod12", 14), ("statPeriod13", 15), ("statPeriod14", 16), ("statPeriod15", 17), ("statPeriod16", 18), ("statPeriod17", 19), ("statPeriod18", 20), ("statPeriod19", 21), ("statPeriod20", 22), ("statPeriod21", 23), ("statPeriod22", 24), ("statPeriod23", 25), ("statPeriod24", 26), ("statPeriod25", 27), ("statPeriod26", 28), ("statPeriod27", 29), ("statPeriod28", 30), ("statPeriod29", 31), ("statPeriod30", 32), ("statPeriod31", 33), ("statPeriod32", 34), ("statPeriod33", 35), ("statPeriod34", 36), ("statPeriod35", 37), ("statPeriod36", 38), ("statPeriod37", 39), ("statPeriod38", 40), ("statPeriod39", 41), ("statPeriod40", 42), ("statPeriod41", 43), ("statPeriod42", 44), ("statPeriod43", 45), ("statPeriod44", 46), ("statPeriod45", 47), ("statPeriod46", 48), ("statPeriod47", 49), ("statPeriod48", 50), ("statPeriod49", 51), ("statPeriod50", 52), ("statPeriod51", 53), ("statPeriod52", 54), ("statPeriod53", 55), ("statPeriod54", 56), ("statPeriod55", 57), ("statPeriod56", 58), ("statPeriod57", 59), ("statPeriod58", 60), ("statPeriod59", 61), ("statPeriod60", 62), ("statPeriod61", 63), ("statPeriod62", 64), ("statPeriod63", 65), ("statPeriod64", 66), ("statPeriod65", 67), ("statPeriod66", 68), ("statPeriod67", 69), ("statPeriod68", 70), ("statPeriod69", 71), ("statPeriod70", 72), ("statPeriod71", 73), ("statPeriod72", 74), ("statPeriod73", 75), ("statPeriod74", 76), ("statPeriod75", 77), ("statPeriod76", 78), ("statPeriod77", 79), ("statPeriod78", 80), ("statPeriod79", 81), ("statPeriod80", 82), ("statPeriod81", 83), ("statPeriod82", 84), ("statPeriod83", 85), ("statPeriod84", 86), ("statPeriod85", 87), ("statPeriod86", 88), ("statPeriod87", 89), ("statPeriod88", 90), ("statPeriod89", 91), ("statPeriod90", 92), ("statPeriod91", 93), ("statPeriod92", 94), ("statPeriod93", 95), ("statPeriod94", 96), ("statPeriod95", 97), ("statPeriod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24Index.setStatus('current')
netAPSHist24Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24Timestamp.setStatus('current')
netAPSHist24StatusBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24StatusBitmap.setStatus('current')
netAPSHist24StatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24StatusString.setStatus('current')
netAPSHist24Occurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24Occurrences.setStatus('current')
netAPSHist24Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24Duration.setStatus('current')
netAPSHist30Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3), )
if mibBuilder.loadTexts: netAPSHist30Table.setStatus('current')
netAPSHist30TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1), ).setIndexNames((0, "DS8200v2-MIB", "netAPSHist30NearIndex"), (0, "DS8200v2-MIB", "netAPSHist30FarIndex"), (0, "DS8200v2-MIB", "netAPSHist30ifIndex"), (0, "DS8200v2-MIB", "netAPSHist30Index"))
if mibBuilder.loadTexts: netAPSHist30TableEntry.setStatus('current')
netAPSHist30NearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30NearIndex.setStatus('current')
netAPSHist30FarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30FarIndex.setStatus('current')
netAPSHist30ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30ifIndex.setStatus('current')
netAPSHist30Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("statSummary", 1), ("statDay1", 2), ("statDay2", 3), ("statDay3", 4), ("statDay4", 5), ("statDay5", 6), ("statDay6", 7), ("statDay7", 8), ("statDay8", 9), ("statDay9", 10), ("statDay10", 11), ("statDay11", 12), ("statDay12", 13), ("statDay13", 14), ("statDay14", 15), ("statDay15", 16), ("statDay16", 17), ("statDay17", 18), ("statDay18", 19), ("statDay19", 20), ("statDay20", 21), ("statDay21", 22), ("statDay22", 23), ("statDay23", 24), ("statDay24", 25), ("statDay25", 26), ("statDay26", 27), ("statDay27", 28), ("statDay28", 29), ("statDay29", 30), ("statDay30", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30Index.setStatus('current')
netAPSHist30Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30Timestamp.setStatus('current')
netAPSHist30StatusBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30StatusBitmap.setStatus('current')
netAPSHist30StatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30StatusString.setStatus('current')
netAPSHist30Occurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30Occurrences.setStatus('current')
netAPSHist30Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30Duration.setStatus('current')
mibBuilder.exportSymbols("DS8200v2-MIB", t1e1ZeroSuppress=t1e1ZeroSuppress, iType=iType, bertCommand=bertCommand, bertLength=bertLength, productSoftwareRev=productSoftwareRev, analogDteTable=analogDteTable, t1e1CRC=t1e1CRC, t1e1DSXLevel=t1e1DSXLevel, t1e1AlarmIndex=t1e1AlarmIndex, unitUtilitiesDate=unitUtilitiesDate, performance30UAS=performance30UAS, productModelDescr=productModelDescr, dbuResetConfigEntryIndex=dbuResetConfigEntryIndex, traplogDescription1=traplogDescription1, serialDteRTS=serialDteRTS, bertTable=bertTable, t1e1BPVSThreshold=t1e1BPVSThreshold, serialDteDCD=serialDteDCD, netAPS=netAPS, analogDteDescription=analogDteDescription, unitUtilitiesPasswordLockoutEnable=unitUtilitiesPasswordLockoutEnable, mgmtPortsCompressedSlip=mgmtPortsCompressedSlip, traplogTrapNum=traplogTrapNum, serialDteDTRAlarmControl=serialDteDTRAlarmControl, serialDteASCThreshold=serialDteASCThreshold, ddsNetTimingSource=ddsNetTimingSource, performance24InterfaceIndex=performance24InterfaceIndex, iTableFarIndex=iTableFarIndex, iPort=iPort, performance24ES=performance24ES, serialDteFDLAlarm=serialDteFDLAlarm, unitUtilitiesTime=unitUtilitiesTime, performance30ES=performance30ES, performance24RAS=performance24RAS, netAPSHist24StatusString=netAPSHist24StatusString, t1e1LOSSThreshold=t1e1LOSSThreshold, netAPSHist24Occurrences=netAPSHist24Occurrences, bertTableEntry=bertTableEntry, bertInterfaceSetting=bertInterfaceSetting, t1e1ConfigTableEntry=t1e1ConfigTableEntry, t1e1LOSSStatus=t1e1LOSSStatus, serialDteType=serialDteType, serialDteASCAlarm=serialDteASCAlarm, t1e1ESThreshold=t1e1ESThreshold, t1e1AlarmSummary=t1e1AlarmSummary, serialDteFDLStatus=serialDteFDLStatus, bertBitErrors=bertBitErrors, netAPSConfigCSESCount=netAPSConfigCSESCount, mgmtPortsSecondaryDialString=mgmtPortsSecondaryDialString, ddsNetDescription=ddsNetDescription, performance24Table=performance24Table, traplogValue2=traplogValue2, bertInterfaceIndex=bertInterfaceIndex, mgmtPortsDescription=mgmtPortsDescription, performance30Index=performance30Index, t1e1OOFSThreshold=t1e1OOFSThreshold, t1e1Sa8In=t1e1Sa8In, bertFarIndex=bertFarIndex, netAPSConfigMode=netAPSConfigMode, performance30Table=performance30Table, netAPSConfigOtherifIndex=netAPSConfigOtherifIndex, t1e1RASCount=t1e1RASCount, t1e1Sa4In=t1e1Sa4In, serialDteDescription=serialDteDescription, dbuResetString=dbuResetString, netAPSConfigTable=netAPSConfigTable, t1e1LOSSCount=t1e1LOSSCount, t1e1Sa5In=t1e1Sa5In, ddsNetAntiStrTimer=ddsNetAntiStrTimer, ddsNetFDLThreshold=ddsNetFDLThreshold, bertInterfaceService=bertInterfaceService, ddsNetBPVAlarm=ddsNetBPVAlarm, netAPSConfigCSESThreshold=netAPSConfigCSESThreshold, t1e1Mode=t1e1Mode, dbuNumber=dbuNumber, bertPercentEFS=bertPercentEFS, ddsNetConfigTableEntry=ddsNetConfigTableEntry, t1e1ESAlarm=t1e1ESAlarm, ddsNetLOSThreshold=ddsNetLOSThreshold, connectionChannelNearIndex=connectionChannelNearIndex, mgmtPortsPrimaryDialString=mgmtPortsPrimaryDialString, traplog=traplog, unitUtilitiesMaintenanceReset=unitUtilitiesMaintenanceReset, netAPSHist30Timestamp=netAPSHist30Timestamp, t1e1ConfigFarIndex=t1e1ConfigFarIndex, t1e1UASStatus=t1e1UASStatus, t1e1CSSCount=t1e1CSSCount, performance24UAS=performance24UAS, PYSNMP_MODULE_ID=tinterfaces, t1e1SESCount=t1e1SESCount, t1e1AlarmNearIndex=t1e1AlarmNearIndex, unitUtilities=unitUtilities, t1e1OOFSStatus=t1e1OOFSStatus, performance30TableEntry=performance30TableEntry, netAPSConfigifIndex=netAPSConfigifIndex, ddsNetOOFCount=ddsNetOOFCount, t1e1RASAlarm=t1e1RASAlarm, productHardwareRev=productHardwareRev, serialDteConfigNearIndex=serialDteConfigNearIndex, serialDteStatusSummary=serialDteStatusSummary, connectionTableDescription=connectionTableDescription, bertIndex=bertIndex, serialDteInvertClock=serialDteInvertClock, t1e1AlarmReset=t1e1AlarmReset, serialDteASCStatus=serialDteASCStatus, bertInterfaceFarIndex=bertInterfaceFarIndex, t1e1UASThreshold=t1e1UASThreshold, performance24BES=performance24BES, netAPSHist24NearIndex=netAPSHist24NearIndex, serialDteMode=serialDteMode, connectionTable=connectionTable, ddsNetMode=ddsNetMode, connectionChannelEntry=connectionChannelEntry, t1e1LineCode=t1e1LineCode, serialDteAlarmSummary=serialDteAlarmSummary, t1e1Sa7Out=t1e1Sa7Out, unitUtilitiesPasswordLockoutStatus=unitUtilitiesPasswordLockoutStatus, netAPSConfigESCount=netAPSConfigESCount, ddsNetRate=ddsNetRate, traplogDeviceType=traplogDeviceType, analogDteRxGain=analogDteRxGain, performance30BPVS=performance30BPVS, netAPSConfigTableEntry=netAPSConfigTableEntry, testTableIndex=testTableIndex, dbuMode=dbuMode, netAPSConfigValidDays=netAPSConfigValidDays, traplogTable=traplogTable, tinterfaces=tinterfaces, connectionChannelTable=connectionChannelTable, analogDteDNISDelay=analogDteDNISDelay, serialDteConfigTableEntry=serialDteConfigTableEntry, performance30AISS=performance30AISS, dbuStartStopDayOfWeek=dbuStartStopDayOfWeek, t1e1SESStatus=t1e1SESStatus, netAPSConfigStatusBitmap=netAPSConfigStatusBitmap, serialDteFDLThreshold=serialDteFDLThreshold, performance24LOFC=performance24LOFC, t1e1AISAlarm=t1e1AISAlarm, netAPSConfigReset=netAPSConfigReset, performance24CRCES=performance24CRCES, netAPSHist30StatusString=netAPSHist30StatusString, connectionChannelLineIndex=connectionChannelLineIndex, labelTableLabel=labelTableLabel, netAPSConfigESSwitchEvent=netAPSConfigESSwitchEvent, t1e1BPVSAlarm=t1e1BPVSAlarm, netAPSConfigValidIntervals=netAPSConfigValidIntervals, performance30CRCES=performance30CRCES, t1e1PRM=t1e1PRM, serialDteConfigIndex=serialDteConfigIndex, dbuResetFarIndex=dbuResetFarIndex, ddsNetConfigTable=ddsNetConfigTable, netAPSHist30Occurrences=netAPSHist30Occurrences, analogDteSignalling=analogDteSignalling, netAPSHist24Index=netAPSHist24Index, serialDteBundle=serialDteBundle, bertErroredSeconds=bertErroredSeconds, serialDteASCCount=serialDteASCCount, ddsNetStatusSummary=ddsNetStatusSummary, mgmtPortsMode=mgmtPortsMode, traplogTimeStamp=traplogTimeStamp, mgmtPortsInternalModem=mgmtPortsInternalModem, dbuConfigTable=dbuConfigTable, dbuConfigTableEntry=dbuConfigTableEntry, t1e1AISThreshold=t1e1AISThreshold, netAPSHist30ifIndex=netAPSHist30ifIndex, dbuFormat=dbuFormat, performance30RAS=performance30RAS, t1e1AlarmFarIndex=t1e1AlarmFarIndex, productModelNumber=productModelNumber, channelInterfaceChannel=channelInterfaceChannel, dbuISDNTEI=dbuISDNTEI, bertInterfaceTableEntry=bertInterfaceTableEntry, iSlot=iSlot, t1e1CSSStatus=t1e1CSSStatus, netAPSConfigESThreshold=netAPSConfigESThreshold, t1e1FrameType=t1e1FrameType, ddsNet=ddsNet, ddsNetCircuitAssur=ddsNetCircuitAssur, dbuFarIndex=dbuFarIndex, dbuResetNearIndex=dbuResetNearIndex, t1e1RAIGeneration=t1e1RAIGeneration, unitUtilitiesAlarmClear=unitUtilitiesAlarmClear, t1e1Sa8Out=t1e1Sa8Out, dbuStartStopTable=dbuStartStopTable, dbuISDNDDNUM=dbuISDNDDNUM, mgmtPortsDialPrefix=mgmtPortsDialPrefix, bertChipIndex=bertChipIndex, iTableNearIndex=iTableNearIndex, unitUtilitiesTable=unitUtilitiesTable, traplogOID3=traplogOID3, analogDteElementID=analogDteElementID, t1e1FDLPassThrough=t1e1FDLPassThrough, analogDteMode=analogDteMode, analogDteCardType=analogDteCardType, performance30BES=performance30BES, ddsNetLOSCount=ddsNetLOSCount, testNearIndex=testNearIndex, t1e1Sa5Out=t1e1Sa5Out, unitUtilitiesSaveConfig=unitUtilitiesSaveConfig, serialDteChannelRate=serialDteChannelRate, bertPattern=bertPattern, ddsNetAlarmFarIndex=ddsNetAlarmFarIndex, connectionNearIndex=connectionNearIndex, ddsNetAlarmSummary=ddsNetAlarmSummary, serialDteParity=serialDteParity, bertNearIndex=bertNearIndex, dbuResetStringsIndex=dbuResetStringsIndex, traplogValue1=traplogValue1, performance24AISS=performance24AISS, ddsNetLOSStatus=ddsNetLOSStatus, serialDteLOSAlarm=serialDteLOSAlarm, unitUtilitiesPasswordLockoutClear=unitUtilitiesPasswordLockoutClear, ddsNetAlarmReset=ddsNetAlarmReset, t1e1OOFSCount=t1e1OOFSCount, t1e1AlarmResetTimer=t1e1AlarmResetTimer, ddsNetOOSAlarm=ddsNetOOSAlarm, unitUtilitiesAlarmResetTimer=unitUtilitiesAlarmResetTimer, connectionChannelFarIndex=connectionChannelFarIndex, serialDteConfigTable=serialDteConfigTable, unitUtilitiesRestartStatus=unitUtilitiesRestartStatus, t1e1Timing=t1e1Timing, t1e1Sa4Out=t1e1Sa4Out, testFarIndex=testFarIndex, serialDteRTSDelay=serialDteRTSDelay, testLoopInitiator=testLoopInitiator, mgmtPortsTableIndex=mgmtPortsTableIndex, serialDteInInvertClock=serialDteInInvertClock, channelInterfaceAssignment=channelInterfaceAssignment, traplogIndex=traplogIndex, ddsNetFDLCount=ddsNetFDLCount, labelTableIndex=labelTableIndex, bertInterfaceTable=bertInterfaceTable, netAPSHist30FarIndex=netAPSHist30FarIndex, traplogDeleteEntry=traplogDeleteEntry, dbuStartStopNearIndex=dbuStartStopNearIndex, mgmtPortsElementID=mgmtPortsElementID, t1e1RASStatus=t1e1RASStatus, ddsNetOOSThreshold=ddsNetOOSThreshold, dbuActivator1=dbuActivator1, t1e1Description=t1e1Description, testDefaultLoopType=testDefaultLoopType, ddsNetOOFAlarm=ddsNetOOFAlarm, performance24NearIndex=performance24NearIndex, t1e1RASThreshold=t1e1RASThreshold, serialDteCharSize=serialDteCharSize, t1e1BPVSStatus=t1e1BPVSStatus, dbuDialStr=dbuDialStr, mgmtPortsTableEntry=mgmtPortsTableEntry, netAPSConfigManualInhibit=netAPSConfigManualInhibit, dbuStart=dbuStart, serialDteAlarmFarIndex=serialDteAlarmFarIndex, traplogEntry=traplogEntry, serialDtePinStatus=serialDtePinStatus, serialDteDTR=serialDteDTR)
mibBuilder.exportSymbols("DS8200v2-MIB", dbuStatus=dbuStatus, performance24OOFS=performance24OOFS, dbuISDNSwitchVersion=dbuISDNSwitchVersion, analogDteTableEntry=analogDteTableEntry, netAPSHist24Table=netAPSHist24Table, t1e1Sa6In=t1e1Sa6In, ddsNetBPVStatus=ddsNetBPVStatus, performance24SES=performance24SES, t1e1Sa6Out=t1e1Sa6Out, productSerialNum=productSerialNum, ddsNetConfigIndex=ddsNetConfigIndex, dbuActivator2=dbuActivator2, performance30NearIndex=performance30NearIndex, iTableEntry=iTableEntry, iTable=iTable, ddsNetAlarmResetTimer=ddsNetAlarmResetTimer, t1e1CSSAlarm=t1e1CSSAlarm, ddsNetAlarmIndex=ddsNetAlarmIndex, serialDteRL=serialDteRL, t1e1AudibleAlarm=t1e1AudibleAlarm, traplogSortOption=traplogSortOption, netAPSHist30Table=netAPSHist30Table, serialDteLOSThreshold=serialDteLOSThreshold, bertInterfaceChannelRate=bertInterfaceChannelRate, serialDteAlarmTable=serialDteAlarmTable, t1e1KeepAlive=t1e1KeepAlive, performance24CSS=performance24CSS, dbuStartStopFarIndex=dbuStartStopFarIndex, dbuNearIndex=dbuNearIndex, performance30SES=performance30SES, ddsNetBPVCount=ddsNetBPVCount, mgmtPorts=mgmtPorts, netAPSConfigRevert=netAPSConfigRevert, unitUtilitiesTableEntry=unitUtilitiesTableEntry, iDescription=iDescription, ddsNetLOSAlarm=ddsNetLOSAlarm, t1e1StatusSummary=t1e1StatusSummary, serialDteLL=serialDteLL, t1e1AISCount=t1e1AISCount, ddsNetAlarmTableEntry=ddsNetAlarmTableEntry, bertPatternSync=bertPatternSync, serialDteLOSCount=serialDteLOSCount, productLabelTableEntry=productLabelTableEntry, testTable=testTable, unitUtilitiesFarIndex=unitUtilitiesFarIndex, ddsNetConfigNearIndex=ddsNetConfigNearIndex, dbuConfigTableIndex=dbuConfigTableIndex, t1e1ConfigIndex=t1e1ConfigIndex, channelSignalling=channelSignalling, serialDteRate=serialDteRate, testType=testType, ddsNetBPVThreshold=ddsNetBPVThreshold, traplogDescription2=traplogDescription2, performance24FarIndex=performance24FarIndex, serialDteInvertData=serialDteInvertData, serialDteFormat=serialDteFormat, t1e1UASAlarm=t1e1UASAlarm, performance30InterfaceIndex=performance30InterfaceIndex, dbuDescription=dbuDescription, performance24Index=performance24Index, t1e1SESThreshold=t1e1SESThreshold, netAPSConfigCSESSwitchEvent=netAPSConfigCSESSwitchEvent, traplogLastTimeStamp=traplogLastTimeStamp, testLoopDirection=testLoopDirection, analogDteNearIndex=analogDteNearIndex, analogDte=analogDte, t1e1StationTiming=t1e1StationTiming, netAPSHist24Duration=netAPSHist24Duration, traplogOID1=traplogOID1, bertElapsedTime=bertElapsedTime, traplogOID2=traplogOID2, netAPSConfigStatusString=netAPSConfigStatusString, netAPSHist30TableEntry=netAPSHist30TableEntry, mgmtPortsTable=mgmtPortsTable, t1e1ESCount=t1e1ESCount, performance30LOFC=performance30LOFC, performance24BPVS=performance24BPVS, netAPSConfigFarIndex=netAPSConfigFarIndex, productLabelTable=productLabelTable, traplogFarIndex=traplogFarIndex, t1e1ConfigTable=t1e1ConfigTable, t1e1ESStatus=t1e1ESStatus, dbuStop=dbuStop, performance24LOSS=performance24LOSS, t1e1NationalBit=t1e1NationalBit, t1e1SpareBitInsertion=t1e1SpareBitInsertion, bertInterfaceNearIndex=bertInterfaceNearIndex, t1e1AISStatus=t1e1AISStatus, analogDteTxGain=analogDteTxGain, t1e1AlarmTable=t1e1AlarmTable, serialDteLOSStatus=serialDteLOSStatus, performance30LOSS=performance30LOSS, performance24timestamp=performance24timestamp, dbuDtrDial=dbuDtrDial, performance24TableEntry=performance24TableEntry, serialDte=serialDte, dbuISDNSPID=dbuISDNSPID, analogDteState=analogDteState, traplogNearIndex=traplogNearIndex, netAPSHist30NearIndex=netAPSHist30NearIndex, serialDteStartChannel=serialDteStartChannel, serialDteConfigFarIndex=serialDteConfigFarIndex, productElementId=productElementId, connectionChannelIndex=connectionChannelIndex, itable=itable, t1e1UASCount=t1e1UASCount, t1e1LOSSAlarm=t1e1LOSSAlarm, connectionTableEntry=connectionTableEntry, analogDteFarIndex=analogDteFarIndex, serialDteV54=serialDteV54, performance30FarIndex=performance30FarIndex, t1e1CSSThreshold=t1e1CSSThreshold, testTableEntry=testTableEntry, t1e1StationInTiming=t1e1StationInTiming, t1e1EBitGeneration=t1e1EBitGeneration, traplogDescription3=traplogDescription3, connectionFarIndex=connectionFarIndex, productInfo=productInfo, serialDteAlarmIndex=serialDteAlarmIndex, dbuHangupStr=dbuHangupStr, ddsNetFDLAlarm=ddsNetFDLAlarm, t1e1OOFSAlarm=t1e1OOFSAlarm, serialDteCTS=serialDteCTS, netAPSHist30Duration=netAPSHist30Duration, mgmtPortsExtInitString=mgmtPortsExtInitString, iStatus=iStatus, dbuISDNSwitchType=dbuISDNSwitchType, ddsNetAlarmNearIndex=ddsNetAlarmNearIndex, dbuResetStringsTable=dbuResetStringsTable, performance30timestamp=performance30timestamp, ddsNetAlarmTable=ddsNetAlarmTable, productPhysicalAddress=productPhysicalAddress, connection=connection, productNmsAddress=productNmsAddress, testFarLLBFraming=testFarLLBFraming, serialDteTxClock=serialDteTxClock, serialDteAlarmNearIndex=serialDteAlarmNearIndex, ddsNetFDLStatus=ddsNetFDLStatus, netAPSHist24Timestamp=netAPSHist24Timestamp, ddsNetConfigFarIndex=ddsNetConfigFarIndex, unitUtilitiesReadOnlyPassword=unitUtilitiesReadOnlyPassword, netAPSHist24TableEntry=netAPSHist24TableEntry, ddsNetOOSCount=ddsNetOOSCount, netAPSConfigNearIndex=netAPSConfigNearIndex, t1e1Sa7In=t1e1Sa7In, dbuPasswordStr=dbuPasswordStr, iTableIndex=iTableIndex, dbuStartStopTableEntry=dbuStartStopTableEntry, t1e1ConfigNearIndex=t1e1ConfigNearIndex, t1e1SESAlarm=t1e1SESAlarm, performance=performance, dbuInitStr=dbuInitStr, serialDteDTRAlarmStatus=serialDteDTRAlarmStatus, t1e1Function=t1e1Function, netAPSHist24StatusBitmap=netAPSHist24StatusBitmap, performance30CSS=performance30CSS, t1e1AlarmTableEntry=t1e1AlarmTableEntry, traplogInterfaceIndex=traplogInterfaceIndex, netAPSHist24FarIndex=netAPSHist24FarIndex, maintenance=maintenance, t1e1=t1e1, dbuCommand=dbuCommand, dbuSecurity=dbuSecurity, netAPSConfigTimeInInterval=netAPSConfigTimeInInterval, ddsNetOOFThreshold=ddsNetOOFThreshold, dbu=dbu, dbuRate=dbuRate, netAPSConfigAvailabilityTimer=netAPSConfigAvailabilityTimer, channelInterfaceDescription=channelInterfaceDescription, labelTableValue=labelTableValue, performance30OOFS=performance30OOFS, ddsNetOOFStatus=ddsNetOOFStatus, serialDteDSR=serialDteDSR, serialDteFlowControl=serialDteFlowControl, traplogValue3=traplogValue3, ddsNetRemComm=ddsNetRemComm, serialDteFDLCount=serialDteFDLCount, t1e1CRC4Mode=t1e1CRC4Mode, netAPSHist30StatusBitmap=netAPSHist30StatusBitmap, serialDteAlarmTableEntry=serialDteAlarmTableEntry, analogDteIndex=analogDteIndex, t1e1BPVSCount=t1e1BPVSCount, netAPSHist24ifIndex=netAPSHist24ifIndex, connectionTableIndex=connectionTableIndex, serialDteNumberOfChannels=serialDteNumberOfChannels, unitUtilitiesLocalPassword=unitUtilitiesLocalPassword, dbuStartStopConfigEntryIndex=dbuStartStopConfigEntryIndex, ddsNetOOSStatus=ddsNetOOSStatus, t1e1LineBuildOut=t1e1LineBuildOut, netAPSHist30Index=netAPSHist30Index, unitUtilitiesNearIndex=unitUtilitiesNearIndex, serialDteStopBit=serialDteStopBit, dbuResetStringsEntry=dbuResetStringsEntry)
