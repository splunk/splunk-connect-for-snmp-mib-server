#
# PySNMP MIB module CERENT-MSDWDM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CERENT-MSDWDM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:30:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
cerentModules, cerentRequirements, cerentGeneric = mibBuilder.importSymbols("CERENT-GLOBAL-REGISTRY", "cerentModules", "cerentRequirements", "cerentGeneric")
CerentPeriod, = mibBuilder.importSymbols("CERENT-TC", "CerentPeriod")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, ModuleIdentity, MibIdentifier, Counter64, Gauge32, ObjectIdentity, Unsigned32, Integer32, IpAddress, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Counter64", "Gauge32", "ObjectIdentity", "Unsigned32", "Integer32", "IpAddress", "NotificationType", "iso")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
cerentMsDwdmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3607, 1, 10, 80))
cerentMsDwdmMIB.setRevisions(('1903-02-15 00:00', '1902-11-11 00:00',))
if mibBuilder.loadTexts: cerentMsDwdmMIB.setLastUpdated('0302150000Z')
if mibBuilder.loadTexts: cerentMsDwdmMIB.setOrganization('Cisco Systems, Inc.')
class ProtocolType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("tenGigEth", 4), ("fibreChOrOneGigEth", 5), ("unframed", 7), ("sonet", 8), ("sdh", 9), ("sysplexIscCompatibility", 10), ("sysplexIscPeer", 11), ("sysplexTimerEtr", 12), ("sysplexTimerClo", 13), ("fastEthernet", 14), ("fddi", 15), ("eightGfc", 16), ("oc768", 17), ("otn", 18))

class IntervalType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fifteenMin", 1), ("oneDay", 2))

class LocationAndIntervalType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("nearEnd15Min", 1), ("nearEndOneDay", 2), ("farEnd15Min", 3), ("farEndOneDay", 4))

class MonitorType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("path", 1), ("section", 2), ("tcm1", 3), ("tcm2", 4))

class RingDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("westEast", 1), ("eastWest", 2))

class SideIdentifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("unknownSide", 0), ("sideA", 1), ("sideB", 2), ("sideC", 3), ("sideD", 4), ("sideE", 5), ("sideF", 6), ("sideG", 7), ("sideH", 8), ("sideI", 9), ("sideJ", 10), ("sideK", 11), ("sideL", 12), ("sideM", 13), ("sideN", 14), ("sideO", 15), ("sideP", 16), ("sideQ", 17), ("sideR", 18), ("sideS", 19), ("sideT", 20))

class OpticalPortRule(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))
    namedValues = NamedValues(("inputLine", 1), ("outputLine", 2), ("inputCom", 3), ("outputCom", 4), ("inputOsc", 5), ("outputOsc", 6), ("inputDc", 7), ("outputDc", 8), ("inputExpress", 9), ("outputExpress", 10), ("add", 11), ("drop", 12), ("inputPassThru", 13), ("inputWorking", 14), ("outputWorking", 15), ("inputProtected", 16), ("outputProtected", 17), ("inputRaman", 18), ("outputRaman", 19), ("com", 20), ("ead", 21), ("ad", 22))

class LaserStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("on", 1), ("off", 2), ("apr", 3), ("none", 4))

class OpticalAmplifierMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("gain", 1), ("power", 2), ("none", 3), ("fixed-gain", 4))

class OpticalBand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 5, 25, 45, 65, 85, 105, 125, 145))
    namedValues = NamedValues(("unknown", 1), ("bn1530d33To1532d68", 5), ("bn1534d25To1536d61", 25), ("bn1538d19To1540d56", 45), ("bn1542d14To1544d53", 65), ("bn1546d12To1548d51", 85), ("bn1550d12To1552d52", 105), ("bn1554d13To1556d55", 125), ("bn1558d17To1560d61", 145))

class OpticalWavelength(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 7, 10, 12, 15, 17, 20, 22, 23, 24, 25, 27, 30, 32, 35, 37, 40, 42, 43, 44, 45, 47, 50, 52, 55, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 92, 95, 97, 100, 102, 103, 104, 105, 107, 110, 112, 115, 117, 120, 122, 123, 124, 125, 127, 130, 132, 135, 137, 140, 142, 143, 144, 145, 147, 150, 152, 155, 157, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 325, 330, 335, 340, 345, 350, 355, 360, 365, 370, 375, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 500, 505, 510, 515, 520, 530, 540))
    namedValues = NamedValues(("unknown", 1), ("wv1529d55", 3), ("wv1529d94", 4), ("wv1530d33", 5), ("wv1530d72", 7), ("wv1531d12", 10), ("wv1531d51", 12), ("wv1531d90", 15), ("wv1532d29", 17), ("wv1532d68", 20), ("wv1533d07", 22), ("wv1533d47", 23), ("wv1533d86", 24), ("wv1534d25", 25), ("wv1534d64", 27), ("wv1535d04", 30), ("wv1535d43", 32), ("wv1535d82", 35), ("wv1536d22", 37), ("wv1536d61", 40), ("wv1537d00", 42), ("wv1537d40", 43), ("wv1537d79", 44), ("wv1538d19", 45), ("wv1538d58", 47), ("wv1538d98", 50), ("wv1539d37", 52), ("wv1539d77", 55), ("wv1540d16", 57), ("wv1540d56", 60), ("wv1540d95", 62), ("wv1541d35", 63), ("wv1541d75", 64), ("wv1542d14", 65), ("wv1470", 66), ("wv1542d54", 67), ("wv1510", 68), ("wv1590", 69), ("wv1542d94", 70), ("wv850", 71), ("wv1543d33", 72), ("wv1310", 73), ("wv1550", 74), ("wv1543d73", 75), ("wv1490", 76), ("wv1544d13", 77), ("wv1530", 78), ("wv1570", 79), ("wv1544d53", 80), ("wv1610", 81), ("wv1544d92", 82), ("wv1545d32", 83), ("wv1545d72", 84), ("wv1546d12", 85), ("wv1546d52", 87), ("wv1546d92", 90), ("wv1547d32", 92), ("wv1547d72", 95), ("wv1548d11", 97), ("wv1548d51", 100), ("wv1548d91", 102), ("wv1549d32", 103), ("wv1549d72", 104), ("wv1550d12", 105), ("wv1550d52", 107), ("wv1550d92", 110), ("wv1551d32", 112), ("wv1551d72", 115), ("wv1552d12", 117), ("wv1552d52", 120), ("wv1552d93", 122), ("wv1553d33", 123), ("wv1553d73", 124), ("wv1554d13", 125), ("wv1554d54", 127), ("wv1554d94", 130), ("wv1555d34", 132), ("wv1555d75", 135), ("wv1556d15", 137), ("wv1556d55", 140), ("wv1556d96", 142), ("wv1557d36", 143), ("wv1557d77", 144), ("wv1558d17", 145), ("wv1558d58", 147), ("wv1558d98", 150), ("wv1559d39", 152), ("wv1559d79", 155), ("wv1560d20", 157), ("wv1560d61", 160), ("wv1561d01", 162), ("wv1561d42", 164), ("wv1561d83", 166), ("wv1570d83", 168), ("wv1571d24", 170), ("wv1571d65", 172), ("wv1572d06", 174), ("wv1572d48", 176), ("wv1572d89", 178), ("wv1573d30", 180), ("wv1573d71", 182), ("wv1574d13", 184), ("wv1574d54", 186), ("wv1574d95", 188), ("wv1575d37", 190), ("wv1575d78", 192), ("wv1576d20", 194), ("wv1576d61", 196), ("wv1577d03", 198), ("wv1577d44", 200), ("wv1577d86", 205), ("wv1578d27", 210), ("wv1578d69", 215), ("wv1579d10", 220), ("wv1579d52", 225), ("wv1579d93", 230), ("wv1580d35", 235), ("wv1580d77", 240), ("wv1581d18", 245), ("wv1581d60", 250), ("wv1582d02", 255), ("wv1582d44", 260), ("wv1582d85", 265), ("wv1583d27", 270), ("wv1583d69", 275), ("wv1584d11", 280), ("wv1584d53", 285), ("wv1584d95", 290), ("wv1585d36", 295), ("wv1585d78", 300), ("wv1586d20", 305), ("wv1586d62", 310), ("wv1587d04", 315), ("wv1587d46", 320), ("wv1587d88", 325), ("wv1588d30", 330), ("wv1588d73", 335), ("wv1589d15", 340), ("wv1589d57", 345), ("wv1589d99", 350), ("wv1590d41", 355), ("wv1590d83", 360), ("wv1591d26", 365), ("wv1591d68", 370), ("wv1592d10", 375), ("wv1592d52", 380), ("wv1592d95", 385), ("wv1593d37", 390), ("wv1593d79", 395), ("wv1594d22", 400), ("wv1594d64", 405), ("wv1595d06", 410), ("wv1595d49", 415), ("wv1595d91", 420), ("wv1596d34", 425), ("wv1596d76", 430), ("wv1597d19", 435), ("wv1597d62", 440), ("wv1598d04", 445), ("wv1598d47", 450), ("wv1598d89", 455), ("wv1599d32", 460), ("wv1599d75", 465), ("wv1600d17", 470), ("wv1600d60", 475), ("wv1601d03", 480), ("wv1601d46", 485), ("wv1601d88", 490), ("wv1602d31", 500), ("wv1602d74", 505), ("wv1603d17", 510), ("wv1603d60", 515), ("wv1604d03", 520), ("firsttunablewv", 530), ("wv1528d77", 540))

class OpticalPowerInDbm(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-400, 250), ValueRangeConstraint(-1000, -1000), )
class OpticalAttenInDb(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 400)

class TDCUCompensation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
    namedValues = NamedValues(("psnmNotApplicable", -1), ("psnm0", 0), ("psnmFineMinus45", 1), ("psnmFineMinus90", 2), ("psnmFineMinus135", 3), ("psnmFineMinus180", 4), ("psnmFineMinus225", 5), ("psnmFineMinus270", 6), ("psnmFineMinus315", 7), ("psnmFineMinus360", 8), ("psnmFineMinus405", 9), ("psnmFineMinus450", 10), ("psnmFineMinus495", 11), ("psnmFineMinus540", 12), ("psnmFineMinus585", 13), ("psnmFineMinus630", 14), ("psnmFineMinus675", 15), ("psnmCoarseMinus110", 16), ("psnmCoarseMinus220", 17), ("psnmCoarseMinus330", 18), ("psnmCoarseMinus440", 19), ("psnmCoarseMinus550", 20), ("psnmCoarseMinus660", 21), ("psnmCoarseMinus770", 22), ("psnmCoarseMinus880", 23), ("psnmCoarseMinus990", 24), ("psnmCoarseMinus1100", 25), ("psnmCoarseMinus1210", 26), ("psnmCoarseMinus1320", 27), ("psnmCoarseMinus1430", 28), ("psnmCoarseMinus1540", 29), ("psnmCoarseMinus1650", 30))

cerentMsDwdmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 40))
cerentMsDwdmIf = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1))
cerentMsDwdmOtn = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2))
cerentMsDwdmFEC = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3))
cerentMsDwdm8B10B = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4))
cMsDwdmIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1), )
if mibBuilder.loadTexts: cMsDwdmIfConfigTable.setStatus('current')
cMsDwdmIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cMsDwdmIfConfigEntry.setStatus('current')
cMsDwdmIfConfigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 1), ProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigProtocol.setStatus('current')
cMsDwdmIfConfigDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40, 50, 55, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390))).clone(namedValues=NamedValues(("passThru", 10), ("stm1", 20), ("stm4", 30), ("stm16", 40), ("stm64", 50), ("stm256", 55), ("gigE", 60), ("tenGigE", 70), ("fc", 80), ("oneGfcFicon", 90), ("twoGfcFiconIsc3", 100), ("escon", 110), ("dv6000", 120), ("sdiD1Video", 130), ("hdtv", 140), ("oc3", 150), ("oc12", 160), ("oc48", 170), ("oc192", 180), ("fourGfcFicon", 190), ("tenGfc", 200), ("isc1", 210), ("isc3", 220), ("oneGigIsc3", 230), ("twoGigIsc3", 240), ("etrClo", 250), ("infiniBand", 280), ("fe", 290), ("e1t1", 300), ("e3t3", 310), ("oc3Ge", 320), ("eightGfc", 330), ("oc768", 340), ("otu1", 350), ("otu2", 360), ("otu3", 370), ("otu4", 380), ("oneHundredGe", 390)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigDataRate.setStatus('current')
cMsDwdmIfConfigLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("diagnosticLoop", 2), ("lineLoop", 3), ("otherLoop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigLoopback.setStatus('current')
cMsDwdmIfConfigWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 4), OpticalWavelength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigWavelength.setStatus('current')
cMsDwdmIfConfigOtnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigOtnStatus.setStatus('current')
cMsDwdmIfConfigFECStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigFECStatus.setStatus('current')
cMsDwdmIfOpticsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfOpticsValidIntervals.setStatus('current')
cMsDwdmIfOTNValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfOTNValidIntervals.setStatus('current')
cMsDwdmIfFECValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfFECValidIntervals.setStatus('current')
cMsDwdmIfConfigFECMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disable", 1), ("enableStandard", 2), ("enableEnhanced", 3), ("enableEnhancedI4", 4), ("enableEnhancedI7", 5), ("enableEnhanced20", 6), ("enableHG7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigFECMode.setStatus('current')
cMsDwdmIfTransportTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2), )
if mibBuilder.loadTexts: cMsDwdmIfTransportTable.setStatus('current')
cMsDwdmIfTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cMsDwdmIfTransportEntry.setStatus('current')
cMsDwdmIfTransportRingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 1), RingDirection())
if mibBuilder.loadTexts: cMsDwdmIfTransportRingDirection.setStatus('obsolete')
cMsDwdmIfTransportPortRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 2), OpticalPortRule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportPortRule.setStatus('current')
cMsDwdmIfTransportPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 3), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportPower.setStatus('current')
cMsDwdmIfTransportReferencePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 4), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportReferencePower.setStatus('current')
cMsDwdmIfTransportCalibratedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 5), OpticalPowerInDbm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfTransportCalibratedPower.setStatus('current')
cMsDwdmIfTransportInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 6), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportInsertionLoss.setStatus('current')
cMsDwdmIfTransportLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 7), LaserStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportLaserStatus.setStatus('current')
cMsDwdmIfTransportAmplifierMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 8), OpticalAmplifierMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfTransportAmplifierMode.setStatus('current')
cMsDwdmIfTransportGain = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 9), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportGain.setStatus('current')
cMsDwdmIfTransportReferenceTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 10), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportReferenceTilt.setStatus('current')
cMsDwdmIfTransportCalibratedTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 11), OpticalAttenInDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfTransportCalibratedTilt.setStatus('current')
cMsDwdmIfTransportDCULoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 12), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportDCULoss.setStatus('current')
cMsDwdmIfTransportOSRI = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("none", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfTransportOSRI.setStatus('current')
cMsDwdmIfTransportExpectedGain = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 14), OpticalAttenInDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfTransportExpectedGain.setStatus('current')
cMsDwdmIfTransportSideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 15), SideIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportSideIdentifier.setStatus('current')
cMsDwdmIfTransportTDCUCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 18), TDCUCompensation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportTDCUCompensation.setStatus('current')
cMsDwdmIfTransportAddPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 16), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportAddPower.setStatus('current')
cMsDwdmIfTransportOSCPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 17), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportOSCPower.setStatus('current')
cMsDwdmIfMultiplexSectionTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3), )
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionTable.setStatus('current')
cMsDwdmIfMultiplexSectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionEntry.setStatus('current')
cMsDwdmIfMultiplexSectionRingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 1), RingDirection())
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionRingDirection.setStatus('obsolete')
cMsDwdmIfMultiplexSectionPortRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 2), OpticalPortRule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionPortRule.setStatus('current')
cMsDwdmIfMultiplexSectionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 3), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionPower.setStatus('current')
cMsDwdmIfMultiplexSectionReferencePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 4), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionReferencePower.setStatus('current')
cMsDwdmIfMultiplexSectionCalibratedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 5), OpticalPowerInDbm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionCalibratedPower.setStatus('current')
cMsDwdmIfMultiplexSectionInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 6), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionInsertionLoss.setStatus('current')
cMsDwdmIfMultiplexSectionActualBand = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 7), OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionActualBand.setStatus('current')
cMsDwdmIfMultiplexSectionExpectedBand = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 8), OpticalBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionExpectedBand.setStatus('current')
cMsDwdmIfMultiplexSectionSideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 9), SideIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionSideIdentifier.setStatus('current')
cMsDwdmIfChannelTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4), )
if mibBuilder.loadTexts: cMsDwdmIfChannelTable.setStatus('current')
cMsDwdmIfChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cMsDwdmIfChannelEntry.setStatus('current')
cMsDwdmIfChannelRingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 1), RingDirection())
if mibBuilder.loadTexts: cMsDwdmIfChannelRingDirection.setStatus('obsolete')
cMsDwdmIfChannelPortRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 2), OpticalPortRule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelPortRule.setStatus('current')
cMsDwdmIfChannelPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 3), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelPower.setStatus('current')
cMsDwdmIfChannelReferencePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 4), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelReferencePower.setStatus('current')
cMsDwdmIfChannelCalibratedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 5), OpticalPowerInDbm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfChannelCalibratedPower.setStatus('current')
cMsDwdmIfChannelInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 6), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelInsertionLoss.setStatus('current')
cMsDwdmIfChannelActualWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 7), OpticalWavelength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelActualWavelength.setStatus('current')
cMsDwdmIfChannelExpectedWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 8), OpticalWavelength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfChannelExpectedWavelength.setStatus('current')
cMsDwdmIfChannelSideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 9), SideIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelSideIdentifier.setStatus('current')
cMsDwdmOtnThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1), )
if mibBuilder.loadTexts: cMsDwdmOtnThresholdsTable.setStatus('current')
cMsDwdmOtnThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshMonType"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshIntervalType"))
if mibBuilder.loadTexts: cMsDwdmOtnThresholdsEntry.setStatus('current')
cMsDwdmOtnThreshMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 1), MonitorType())
if mibBuilder.loadTexts: cMsDwdmOtnThreshMonType.setStatus('current')
cMsDwdmOtnThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 2), LocationAndIntervalType())
if mibBuilder.loadTexts: cMsDwdmOtnThreshIntervalType.setStatus('current')
cMsDwdmOtnThreshFC = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmOtnThreshFC.setStatus('current')
cMsDwdmOtnThreshES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmOtnThreshES.setStatus('current')
cMsDwdmOtnThreshSES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmOtnThreshSES.setStatus('current')
cMsDwdmOtnThreshUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmOtnThreshUAS.setStatus('current')
cMsDwdmOtnThreshBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmOtnThreshBBE.setStatus('current')
cMsDwdmOtnCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2), )
if mibBuilder.loadTexts: cMsDwdmOtnCurrentTable.setStatus('current')
cMsDwdmOtnCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentMonType"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnCurIntervalType"))
if mibBuilder.loadTexts: cMsDwdmOtnCurrentEntry.setStatus('current')
cMsDwdmOtnCurrentMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 1), MonitorType())
if mibBuilder.loadTexts: cMsDwdmOtnCurrentMonType.setStatus('current')
cMsDwdmOtnCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 2), LocationAndIntervalType())
if mibBuilder.loadTexts: cMsDwdmOtnCurIntervalType.setStatus('current')
cMsDwdmOtnCurrentFC = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentFC.setStatus('current')
cMsDwdmOtnCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentES.setStatus('current')
cMsDwdmOtnCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentSES.setStatus('current')
cMsDwdmOtnCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentUAS.setStatus('current')
cMsDwdmOtnCurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentBBE.setStatus('current')
cMsDwdmOtnCurrentESR = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentESR.setStatus('current')
cMsDwdmOtnCurrentSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentSESR.setStatus('current')
cMsDwdmOtnCurrentBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentBBER.setStatus('current')
cMsDwdmOtnIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3), )
if mibBuilder.loadTexts: cMsDwdmOtnIntervalTable.setStatus('current')
cMsDwdmOtnIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalMonType"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalType"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalNum"))
if mibBuilder.loadTexts: cMsDwdmOtnIntervalEntry.setStatus('current')
cMsDwdmOtnIntervalMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 1), MonitorType())
if mibBuilder.loadTexts: cMsDwdmOtnIntervalMonType.setStatus('current')
cMsDwdmOtnIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 2), LocationAndIntervalType())
if mibBuilder.loadTexts: cMsDwdmOtnIntervalType.setStatus('current')
cMsDwdmOtnIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cMsDwdmOtnIntervalNum.setStatus('current')
cMsDwdmOtnIntervalFC = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalFC.setStatus('current')
cMsDwdmOtnIntervalES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalES.setStatus('current')
cMsDwdmOtnIntervalSES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalSES.setStatus('current')
cMsDwdmOtnIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalUAS.setStatus('current')
cMsDwdmOtnIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalBBE.setStatus('current')
cMsDwdmOtnIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalESR.setStatus('current')
cMsDwdmOtnIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalSESR.setStatus('current')
cMsDwdmOtnIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalBBER.setStatus('current')
cMsDwdmOtnIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalValidData.setStatus('current')
cMsDwdmFECThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1), )
if mibBuilder.loadTexts: cMsDwdmFECThresholdsTable.setStatus('current')
cMsDwdmFECThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmFECThreshIntervalType"))
if mibBuilder.loadTexts: cMsDwdmFECThresholdsEntry.setStatus('current')
cMsDwdmFECThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 1), CerentPeriod())
if mibBuilder.loadTexts: cMsDwdmFECThreshIntervalType.setStatus('current')
cMsDwdmFECThreshBitErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmFECThreshBitErrCor.setStatus('current')
cMsDwdmFECThreshByteErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmFECThreshByteErrCor.setStatus('current')
cMsDwdmFECThreshZeroErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmFECThreshZeroErrDet.setStatus('current')
cMsDwdmFECThreshOneErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmFECThreshOneErrDet.setStatus('current')
cMsDwdmFECThreshUncorWords = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmFECThreshUncorWords.setStatus('current')
cMsDwdmFECCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2), )
if mibBuilder.loadTexts: cMsDwdmFECCurrentTable.setStatus('current')
cMsDwdmFECCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmFECCurIntervalType"))
if mibBuilder.loadTexts: cMsDwdmFECCurrentEntry.setStatus('current')
cMsDwdmFECCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 1), CerentPeriod())
if mibBuilder.loadTexts: cMsDwdmFECCurIntervalType.setStatus('current')
cMsDwdmFECCurrentBitErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECCurrentBitErrCor.setStatus('current')
cMsDwdmFECCurrentByteErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECCurrentByteErrCor.setStatus('current')
cMsDwdmFECCurrentZeroErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECCurrentZeroErrDet.setStatus('current')
cMsDwdmFECCurrentOneErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECCurrentOneErrDet.setStatus('current')
cMsDwdmFECCurrentUncorWords = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECCurrentUncorWords.setStatus('current')
cMsDwdmFECIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3), )
if mibBuilder.loadTexts: cMsDwdmFECIntervalTable.setStatus('current')
cMsDwdmFECIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalType"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalNum"))
if mibBuilder.loadTexts: cMsDwdmFECIntervalEntry.setStatus('current')
cMsDwdmFECIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 1), CerentPeriod())
if mibBuilder.loadTexts: cMsDwdmFECIntervalType.setStatus('current')
cMsDwdmFECIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cMsDwdmFECIntervalNum.setStatus('current')
cMsDwdmFECIntervalBitErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalBitErrCor.setStatus('current')
cMsDwdmFECIntervalByteErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalByteErrCor.setStatus('current')
cMsDwdmFECIntervalZeroErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalZeroErrDet.setStatus('current')
cMsDwdmFECIntervalOneErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalOneErrDet.setStatus('current')
cMsDwdmFECIntervalUncorWords = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalUncorWords.setStatus('current')
cMsDwdmFECIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalValidData.setStatus('current')
c8B10BThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1), )
if mibBuilder.loadTexts: c8B10BThresholdsTable.setStatus('current')
c8B10BThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "c8B10BThreshIntervalType"))
if mibBuilder.loadTexts: c8B10BThresholdsEntry.setStatus('current')
c8B10BThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 1), IntervalType())
if mibBuilder.loadTexts: c8B10BThreshIntervalType.setStatus('current')
c8B10BThreshInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshInvalidPkts.setStatus('current')
c8B10BThreshIPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshIPOverflow.setStatus('current')
c8B10BThreshHCInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCInvalidPkts.setStatus('current')
c8B10BThreshValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshValidPkts.setStatus('current')
c8B10BThreshVPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshVPOverflow.setStatus('current')
c8B10BThreshHCValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCValidPkts.setStatus('current')
c8B10BThreshIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshIdleSets.setStatus('current')
c8B10BThreshISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshISOverflow.setStatus('current')
c8B10BThreshHCIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCIdleSets.setStatus('current')
c8B10BThreshNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshNonIdleSets.setStatus('current')
c8B10BThreshNISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshNISOverflow.setStatus('current')
c8B10BThreshHCNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCNonIdleSets.setStatus('current')
c8B10BThreshDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshDataSets.setStatus('current')
c8B10BThreshDSOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshDSOverflow.setStatus('current')
c8B10BThreshHCDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCDataSets.setStatus('current')
c8B10BThreshCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshCodeViols.setStatus('current')
c8B10BThreshCVOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshCVOverflow.setStatus('current')
c8B10BThreshHCCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCCodeViols.setStatus('current')
c8B10BCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2), )
if mibBuilder.loadTexts: c8B10BCurrentTable.setStatus('current')
c8B10BCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "c8B10BCurIntervalType"))
if mibBuilder.loadTexts: c8B10BCurrentEntry.setStatus('current')
c8B10BCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 1), IntervalType())
if mibBuilder.loadTexts: c8B10BCurIntervalType.setStatus('current')
c8B10BCurrentCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentCodeViols.setStatus('current')
c8B10BCurrentCVOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentCVOverflow.setStatus('current')
c8B10BCurrentHCCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCCodeViols.setStatus('current')
c8B10BCurrentValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentValidPkts.setStatus('current')
c8B10BCurrentVPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentVPOverflow.setStatus('current')
c8B10BCurrentHCValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCValidPkts.setStatus('current')
c8B10BCurrentInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentInvalidPkts.setStatus('current')
c8B10BCurrentIPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentIPOverflow.setStatus('current')
c8B10BCurrentHCInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCInvalidPkts.setStatus('current')
c8B10BCurrentIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentIdleSets.setStatus('current')
c8B10BCurrentISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentISOverflow.setStatus('current')
c8B10BCurrentHCIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCIdleSets.setStatus('current')
c8B10BCurrentNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentNonIdleSets.setStatus('current')
c8B10BCurrentNISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentNISOverflow.setStatus('current')
c8B10BCurrentHCNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCNonIdleSets.setStatus('current')
c8B10BCurrentDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentDataSets.setStatus('current')
c8B10BCurrentDSOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentDSOverflow.setStatus('current')
c8B10BCurrentHCDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCDataSets.setStatus('current')
c8B10BIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3), )
if mibBuilder.loadTexts: c8B10BIntervalTable.setStatus('current')
c8B10BIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "c8B10BIntervalType"), (0, "CERENT-MSDWDM-MIB", "c8B10BIntervalNum"))
if mibBuilder.loadTexts: c8B10BIntervalEntry.setStatus('current')
c8B10BIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 1), IntervalType())
if mibBuilder.loadTexts: c8B10BIntervalType.setStatus('current')
c8B10BIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: c8B10BIntervalNum.setStatus('current')
c8B10BIntervalCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalCodeViols.setStatus('current')
c8B10BIntervalCVOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalCVOverflow.setStatus('current')
c8B10BIntervalHCCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCCodeViols.setStatus('current')
c8B10BIntervalValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalValidPkts.setStatus('current')
c8B10BIntervalVPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalVPOverflow.setStatus('current')
c8B10BIntervalHCValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCValidPkts.setStatus('current')
c8B10BIntervalInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalInvalidPkts.setStatus('current')
c8B10BIntervalIPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalIPOverflow.setStatus('current')
c8B10BIntervalHCInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCInvalidPkts.setStatus('current')
c8B10BIntervalIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalIdleSets.setStatus('current')
c8B10BIntervalISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalISOverflow.setStatus('current')
c8B10BIntervalHCIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCIdleSets.setStatus('current')
c8B10BIntervalNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalNonIdleSets.setStatus('current')
c8B10BIntervalNISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalNISOverflow.setStatus('current')
c8B10BIntervalHCNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCNonIdleSets.setStatus('current')
c8B10BIntervalDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalDataSets.setStatus('current')
c8B10BIntervalDSOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalDSOverflow.setStatus('current')
c8B10BIntervalHCDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCDataSets.setStatus('current')
c8B10BIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalValidData.setStatus('current')
cerentMsDwdmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 30))
cerentMsDwdmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 30, 1))
cerentMsDwdmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2))
cerentMsDwdmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3607, 5, 30, 1, 1)).setObjects(("CERENT-MSDWDM-MIB", "cerentMsDwdmIfConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentMsDwdmMIBCompliance = cerentMsDwdmMIBCompliance.setStatus('current')
cerentMsDwdmIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 1)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigProtocol"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigDataRate"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigLoopback"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigWavelength"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigOtnStatus"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigFECStatus"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfOpticsValidIntervals"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfOTNValidIntervals"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfFECValidIntervals"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigFECMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentMsDwdmIfConfigGroup = cerentMsDwdmIfConfigGroup.setStatus('current')
cerentMsDwdmOtnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 2)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshFC"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshSES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshUAS"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshBBE"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentFC"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentSES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentUAS"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentBBE"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentESR"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentSESR"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentBBER"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalFC"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalSES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalUAS"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalBBE"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalESR"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalSESR"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalBBER"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentMsDwdmOtnGroup = cerentMsDwdmOtnGroup.setStatus('current')
cerentMsDwdmFECGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 3)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmFECThreshBitErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECThreshByteErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECThreshZeroErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECThreshOneErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECThreshUncorWords"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECCurrentBitErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECCurrentByteErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECCurrentZeroErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECCurrentOneErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECCurrentUncorWords"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalBitErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalByteErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalZeroErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalOneErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalUncorWords"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentMsDwdmFECGroup = cerentMsDwdmFECGroup.setStatus('current')
cMsDwdmIfTransportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 5)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportPortRule"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportReferencePower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportCalibratedPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportInsertionLoss"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportLaserStatus"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportAmplifierMode"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportGain"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportReferenceTilt"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportCalibratedTilt"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportDCULoss"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportExpectedGain"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportOSRI"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportSideIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMsDwdmIfTransportGroup = cMsDwdmIfTransportGroup.setStatus('current')
cMsDwdmIfMultiplexSectionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 6)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionPortRule"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionReferencePower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionCalibratedPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionInsertionLoss"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionActualBand"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionExpectedBand"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionSideIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMsDwdmIfMultiplexSectionTableGroup = cMsDwdmIfMultiplexSectionTableGroup.setStatus('current')
cMsDwdmIfChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 7)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelPortRule"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelReferencePower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelCalibratedPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelInsertionLoss"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelActualWavelength"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelExpectedWavelength"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelSideIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMsDwdmIfChannelGroup = cMsDwdmIfChannelGroup.setStatus('current')
cerent8B10BThreshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 8)).setObjects(("CERENT-MSDWDM-MIB", "c8B10BThreshInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BThreshValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BThreshIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshCodeViols"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalCodeViols"), ("CERENT-MSDWDM-MIB", "c8B10BThreshIPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshVPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshNISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshDSOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshCVOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCCodeViols"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerent8B10BThreshGroup = cerent8B10BThreshGroup.setStatus('current')
cerent8B10BStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 9)).setObjects(("CERENT-MSDWDM-MIB", "c8B10BCurrentCodeViols"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentCVOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCCodeViols"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentVPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentIPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentNISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentDSOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCCodeViols"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalCVOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalVPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalIPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalNISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalDSOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerent8B10BStatsGroup = cerent8B10BStatsGroup.setStatus('current')
mibBuilder.exportSymbols("CERENT-MSDWDM-MIB", cerent8B10BStatsGroup=cerent8B10BStatsGroup, cMsDwdmIfChannelPortRule=cMsDwdmIfChannelPortRule, cMsDwdmOtnIntervalSESR=cMsDwdmOtnIntervalSESR, cMsDwdmOtnThreshUAS=cMsDwdmOtnThreshUAS, OpticalWavelength=OpticalWavelength, cMsDwdmOtnThresholdsTable=cMsDwdmOtnThresholdsTable, c8B10BThreshHCCodeViols=c8B10BThreshHCCodeViols, c8B10BCurrentHCNonIdleSets=c8B10BCurrentHCNonIdleSets, cMsDwdmIfMultiplexSectionExpectedBand=cMsDwdmIfMultiplexSectionExpectedBand, cerent8B10BThreshGroup=cerent8B10BThreshGroup, cMsDwdmFECThreshZeroErrDet=cMsDwdmFECThreshZeroErrDet, cMsDwdmOtnIntervalMonType=cMsDwdmOtnIntervalMonType, cMsDwdmIfOTNValidIntervals=cMsDwdmIfOTNValidIntervals, cMsDwdmIfTransportGain=cMsDwdmIfTransportGain, c8B10BIntervalIdleSets=c8B10BIntervalIdleSets, ProtocolType=ProtocolType, cMsDwdmFECCurrentBitErrCor=cMsDwdmFECCurrentBitErrCor, cerentMsDwdmFEC=cerentMsDwdmFEC, cMsDwdmOtnThreshFC=cMsDwdmOtnThreshFC, c8B10BThreshNISOverflow=c8B10BThreshNISOverflow, c8B10BCurrentHCDataSets=c8B10BCurrentHCDataSets, c8B10BCurrentValidPkts=c8B10BCurrentValidPkts, cMsDwdmIfTransportCalibratedPower=cMsDwdmIfTransportCalibratedPower, cMsDwdmIfTransportPower=cMsDwdmIfTransportPower, cMsDwdmIfTransportOSRI=cMsDwdmIfTransportOSRI, cMsDwdmIfChannelGroup=cMsDwdmIfChannelGroup, c8B10BCurrentHCInvalidPkts=c8B10BCurrentHCInvalidPkts, cMsDwdmIfTransportTable=cMsDwdmIfTransportTable, cMsDwdmIfTransportEntry=cMsDwdmIfTransportEntry, c8B10BThreshValidPkts=c8B10BThreshValidPkts, cerentMsDwdmIf=cerentMsDwdmIf, cMsDwdmIfChannelEntry=cMsDwdmIfChannelEntry, c8B10BThreshNonIdleSets=c8B10BThreshNonIdleSets, cMsDwdmOtnThresholdsEntry=cMsDwdmOtnThresholdsEntry, cMsDwdmIfTransportTDCUCompensation=cMsDwdmIfTransportTDCUCompensation, c8B10BCurrentCodeViols=c8B10BCurrentCodeViols, c8B10BCurrentNISOverflow=c8B10BCurrentNISOverflow, cMsDwdmIfTransportRingDirection=cMsDwdmIfTransportRingDirection, cMsDwdmFECCurrentByteErrCor=cMsDwdmFECCurrentByteErrCor, cerentMsDwdmMIBGroups=cerentMsDwdmMIBGroups, cMsDwdmOtnThreshSES=cMsDwdmOtnThreshSES, cMsDwdmIfMultiplexSectionActualBand=cMsDwdmIfMultiplexSectionActualBand, cMsDwdmIfTransportGroup=cMsDwdmIfTransportGroup, c8B10BIntervalISOverflow=c8B10BIntervalISOverflow, cMsDwdmOtnThreshIntervalType=cMsDwdmOtnThreshIntervalType, cMsDwdmFECThreshIntervalType=cMsDwdmFECThreshIntervalType, cerentMsDwdmMIB=cerentMsDwdmMIB, c8B10BThreshCVOverflow=c8B10BThreshCVOverflow, cMsDwdmIfMultiplexSectionSideIdentifier=cMsDwdmIfMultiplexSectionSideIdentifier, cMsDwdmOtnThreshBBE=cMsDwdmOtnThreshBBE, c8B10BThreshCodeViols=c8B10BThreshCodeViols, cMsDwdmFECIntervalNum=cMsDwdmFECIntervalNum, cMsDwdmIfMultiplexSectionTable=cMsDwdmIfMultiplexSectionTable, cMsDwdmOtnIntervalBBE=cMsDwdmOtnIntervalBBE, c8B10BCurrentEntry=c8B10BCurrentEntry, cMsDwdmOtnCurrentESR=cMsDwdmOtnCurrentESR, c8B10BIntervalType=c8B10BIntervalType, cMsDwdmIfMultiplexSectionRingDirection=cMsDwdmIfMultiplexSectionRingDirection, cMsDwdmIfChannelActualWavelength=cMsDwdmIfChannelActualWavelength, cMsDwdmIfConfigWavelength=cMsDwdmIfConfigWavelength, RingDirection=RingDirection, c8B10BCurrentIdleSets=c8B10BCurrentIdleSets, cMsDwdmIfTransportInsertionLoss=cMsDwdmIfTransportInsertionLoss, cMsDwdmFECThresholdsTable=cMsDwdmFECThresholdsTable, cMsDwdmFECIntervalBitErrCor=cMsDwdmFECIntervalBitErrCor, cMsDwdmFECIntervalOneErrDet=cMsDwdmFECIntervalOneErrDet, cMsDwdmIfChannelCalibratedPower=cMsDwdmIfChannelCalibratedPower, cMsDwdmFECThreshBitErrCor=cMsDwdmFECThreshBitErrCor, c8B10BCurrentDSOverflow=c8B10BCurrentDSOverflow, c8B10BIntervalNISOverflow=c8B10BIntervalNISOverflow, cMsDwdmOtnCurrentSES=cMsDwdmOtnCurrentSES, c8B10BCurrentHCIdleSets=c8B10BCurrentHCIdleSets, cMsDwdmFECCurrentOneErrDet=cMsDwdmFECCurrentOneErrDet, cerentMsDwdmMIBCompliances=cerentMsDwdmMIBCompliances, c8B10BCurrentHCCodeViols=c8B10BCurrentHCCodeViols, cMsDwdmIfConfigLoopback=cMsDwdmIfConfigLoopback, cMsDwdmIfMultiplexSectionPower=cMsDwdmIfMultiplexSectionPower, cMsDwdmIfConfigProtocol=cMsDwdmIfConfigProtocol, c8B10BIntervalIPOverflow=c8B10BIntervalIPOverflow, cMsDwdmOtnCurrentMonType=cMsDwdmOtnCurrentMonType, cMsDwdmIfChannelExpectedWavelength=cMsDwdmIfChannelExpectedWavelength, cMsDwdmIfConfigFECMode=cMsDwdmIfConfigFECMode, cerentMsDwdmOtnGroup=cerentMsDwdmOtnGroup, cMsDwdmIfTransportOSCPower=cMsDwdmIfTransportOSCPower, c8B10BIntervalValidPkts=c8B10BIntervalValidPkts, c8B10BIntervalCodeViols=c8B10BIntervalCodeViols, cMsDwdmIfTransportAddPower=cMsDwdmIfTransportAddPower, cMsDwdmIfConfigEntry=cMsDwdmIfConfigEntry, cMsDwdmIfTransportReferenceTilt=cMsDwdmIfTransportReferenceTilt, LaserStatus=LaserStatus, cMsDwdmIfTransportCalibratedTilt=cMsDwdmIfTransportCalibratedTilt, c8B10BIntervalNonIdleSets=c8B10BIntervalNonIdleSets, cMsDwdmIfOpticsValidIntervals=cMsDwdmIfOpticsValidIntervals, cMsDwdmFECCurIntervalType=cMsDwdmFECCurIntervalType, cMsDwdmOtnIntervalType=cMsDwdmOtnIntervalType, cMsDwdmOtnCurrentES=cMsDwdmOtnCurrentES, cMsDwdmFECIntervalType=cMsDwdmFECIntervalType, cMsDwdmIfMultiplexSectionInsertionLoss=cMsDwdmIfMultiplexSectionInsertionLoss, c8B10BThresholdsEntry=c8B10BThresholdsEntry, cerentMsDwdmIfConfigGroup=cerentMsDwdmIfConfigGroup, PYSNMP_MODULE_ID=cerentMsDwdmMIB, c8B10BCurrentInvalidPkts=c8B10BCurrentInvalidPkts, cerentMsDwdmOtn=cerentMsDwdmOtn, cMsDwdmIfChannelPower=cMsDwdmIfChannelPower, c8B10BThreshHCValidPkts=c8B10BThreshHCValidPkts, cMsDwdmIfConfigFECStatus=cMsDwdmIfConfigFECStatus, c8B10BCurrentIPOverflow=c8B10BCurrentIPOverflow, cMsDwdmIfConfigDataRate=cMsDwdmIfConfigDataRate, c8B10BThreshHCNonIdleSets=c8B10BThreshHCNonIdleSets, c8B10BIntervalHCDataSets=c8B10BIntervalHCDataSets, c8B10BThreshHCDataSets=c8B10BThreshHCDataSets, OpticalAmplifierMode=OpticalAmplifierMode, c8B10BThreshHCInvalidPkts=c8B10BThreshHCInvalidPkts, cMsDwdmIfTransportDCULoss=cMsDwdmIfTransportDCULoss, cMsDwdmOtnIntervalEntry=cMsDwdmOtnIntervalEntry, cMsDwdmOtnIntervalES=cMsDwdmOtnIntervalES, LocationAndIntervalType=LocationAndIntervalType, cMsDwdmIfTransportSideIdentifier=cMsDwdmIfTransportSideIdentifier, cMsDwdmIfChannelRingDirection=cMsDwdmIfChannelRingDirection, c8B10BIntervalHCIdleSets=c8B10BIntervalHCIdleSets, c8B10BIntervalValidData=c8B10BIntervalValidData, cMsDwdmOtnCurrentEntry=cMsDwdmOtnCurrentEntry, cMsDwdmFECIntervalByteErrCor=cMsDwdmFECIntervalByteErrCor, c8B10BCurrentTable=c8B10BCurrentTable, c8B10BCurrentISOverflow=c8B10BCurrentISOverflow, OpticalPowerInDbm=OpticalPowerInDbm, c8B10BThreshIdleSets=c8B10BThreshIdleSets, IntervalType=IntervalType, cMsDwdmFECCurrentZeroErrDet=cMsDwdmFECCurrentZeroErrDet, cerentMsDwdmMIBCompliance=cerentMsDwdmMIBCompliance, cerentMsDwdmMIBConformance=cerentMsDwdmMIBConformance, c8B10BThreshISOverflow=c8B10BThreshISOverflow, c8B10BCurrentCVOverflow=c8B10BCurrentCVOverflow, cerentMsDwdm8B10B=cerentMsDwdm8B10B, c8B10BIntervalHCCodeViols=c8B10BIntervalHCCodeViols, cMsDwdmFECIntervalZeroErrDet=cMsDwdmFECIntervalZeroErrDet, c8B10BIntervalHCNonIdleSets=c8B10BIntervalHCNonIdleSets, c8B10BThreshVPOverflow=c8B10BThreshVPOverflow, cMsDwdmFECCurrentEntry=cMsDwdmFECCurrentEntry, c8B10BIntervalHCInvalidPkts=c8B10BIntervalHCInvalidPkts, c8B10BThreshIPOverflow=c8B10BThreshIPOverflow, OpticalPortRule=OpticalPortRule, cMsDwdmOtnIntervalTable=cMsDwdmOtnIntervalTable, cMsDwdmIfChannelSideIdentifier=cMsDwdmIfChannelSideIdentifier, cMsDwdmFECIntervalEntry=cMsDwdmFECIntervalEntry, cMsDwdmIfChannelTable=cMsDwdmIfChannelTable, cMsDwdmIfConfigOtnStatus=cMsDwdmIfConfigOtnStatus, cerentMsDwdmFECGroup=cerentMsDwdmFECGroup, cMsDwdmFECCurrentTable=cMsDwdmFECCurrentTable, c8B10BCurIntervalType=c8B10BCurIntervalType, cMsDwdmOtnIntervalNum=cMsDwdmOtnIntervalNum, cMsDwdmIfTransportPortRule=cMsDwdmIfTransportPortRule, cMsDwdmOtnCurrentUAS=cMsDwdmOtnCurrentUAS, OpticalBand=OpticalBand, cMsDwdmIfMultiplexSectionPortRule=cMsDwdmIfMultiplexSectionPortRule, c8B10BIntervalHCValidPkts=c8B10BIntervalHCValidPkts, cMsDwdmOtnCurrentFC=cMsDwdmOtnCurrentFC, c8B10BCurrentNonIdleSets=c8B10BCurrentNonIdleSets, cMsDwdmFECThresholdsEntry=cMsDwdmFECThresholdsEntry, cMsDwdmOtnIntervalBBER=cMsDwdmOtnIntervalBBER, cMsDwdmFECIntervalValidData=cMsDwdmFECIntervalValidData, cMsDwdmIfFECValidIntervals=cMsDwdmIfFECValidIntervals, cMsDwdmOtnCurrentBBE=cMsDwdmOtnCurrentBBE, cMsDwdmOtnCurrentSESR=cMsDwdmOtnCurrentSESR, MonitorType=MonitorType, c8B10BThreshIntervalType=c8B10BThreshIntervalType, c8B10BIntervalDSOverflow=c8B10BIntervalDSOverflow, cMsDwdmIfChannelReferencePower=cMsDwdmIfChannelReferencePower, c8B10BThreshDSOverflow=c8B10BThreshDSOverflow, cMsDwdmOtnThreshMonType=cMsDwdmOtnThreshMonType, cMsDwdmOtnCurrentBBER=cMsDwdmOtnCurrentBBER, cMsDwdmIfTransportExpectedGain=cMsDwdmIfTransportExpectedGain, cMsDwdmOtnCurrentTable=cMsDwdmOtnCurrentTable, c8B10BThreshInvalidPkts=c8B10BThreshInvalidPkts, c8B10BIntervalEntry=c8B10BIntervalEntry, c8B10BIntervalDataSets=c8B10BIntervalDataSets, c8B10BCurrentHCValidPkts=c8B10BCurrentHCValidPkts, cerentMsDwdmMIBObjects=cerentMsDwdmMIBObjects, cMsDwdmIfMultiplexSectionReferencePower=cMsDwdmIfMultiplexSectionReferencePower, cMsDwdmFECIntervalUncorWords=cMsDwdmFECIntervalUncorWords, cMsDwdmFECThreshUncorWords=cMsDwdmFECThreshUncorWords, cMsDwdmIfTransportLaserStatus=cMsDwdmIfTransportLaserStatus, c8B10BThreshHCIdleSets=c8B10BThreshHCIdleSets, cMsDwdmIfMultiplexSectionCalibratedPower=cMsDwdmIfMultiplexSectionCalibratedPower, c8B10BThresholdsTable=c8B10BThresholdsTable, cMsDwdmIfTransportReferencePower=cMsDwdmIfTransportReferencePower, c8B10BCurrentDataSets=c8B10BCurrentDataSets, cMsDwdmIfMultiplexSectionEntry=cMsDwdmIfMultiplexSectionEntry, cMsDwdmIfChannelInsertionLoss=cMsDwdmIfChannelInsertionLoss, TDCUCompensation=TDCUCompensation, cMsDwdmFECThreshOneErrDet=cMsDwdmFECThreshOneErrDet, c8B10BIntervalCVOverflow=c8B10BIntervalCVOverflow, cMsDwdmFECCurrentUncorWords=cMsDwdmFECCurrentUncorWords, cMsDwdmIfConfigTable=cMsDwdmIfConfigTable, cMsDwdmOtnIntervalValidData=cMsDwdmOtnIntervalValidData, c8B10BIntervalInvalidPkts=c8B10BIntervalInvalidPkts, c8B10BIntervalTable=c8B10BIntervalTable, cMsDwdmFECIntervalTable=cMsDwdmFECIntervalTable, c8B10BThreshDataSets=c8B10BThreshDataSets, cMsDwdmIfTransportAmplifierMode=cMsDwdmIfTransportAmplifierMode, OpticalAttenInDb=OpticalAttenInDb, c8B10BIntervalNum=c8B10BIntervalNum, cMsDwdmOtnThreshES=cMsDwdmOtnThreshES, cMsDwdmOtnIntervalSES=cMsDwdmOtnIntervalSES, cMsDwdmOtnIntervalUAS=cMsDwdmOtnIntervalUAS, cMsDwdmIfMultiplexSectionTableGroup=cMsDwdmIfMultiplexSectionTableGroup, cMsDwdmFECThreshByteErrCor=cMsDwdmFECThreshByteErrCor, c8B10BCurrentVPOverflow=c8B10BCurrentVPOverflow, cMsDwdmOtnCurIntervalType=cMsDwdmOtnCurIntervalType, cMsDwdmOtnIntervalESR=cMsDwdmOtnIntervalESR, SideIdentifier=SideIdentifier, c8B10BIntervalVPOverflow=c8B10BIntervalVPOverflow, cMsDwdmOtnIntervalFC=cMsDwdmOtnIntervalFC)
