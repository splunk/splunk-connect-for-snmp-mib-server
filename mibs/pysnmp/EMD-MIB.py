#
# PySNMP MIB module EMD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EMD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:48:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysLocation, sysContact, sysName = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysContact", "sysName")
Bits, ObjectIdentity, TimeTicks, Unsigned32, Integer32, NotificationType, enterprises, ModuleIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "TimeTicks", "Unsigned32", "Integer32", "NotificationType", "enterprises", "ModuleIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Gauge32", "Counter64")
TruthValue, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "DisplayString")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742))
raritan.setRevisions(('2015-10-26 00:00', '2014-09-29 00:00', '2014-02-21 00:00', '2013-12-17 00:00', '2012-10-01 00:00', '2012-07-11 00:00', '2012-05-25 00:00', '2012-01-25 00:00', '2011-12-14 00:00', '2011-12-12 00:00', '2011-11-04 00:00', '2011-08-26 00:00', '2011-08-05 00:00', '2011-06-30 00:00', '2011-03-30 00:00', '2011-03-10 00:00', '2011-02-14 00:00',))
if mibBuilder.loadTexts: raritan.setLastUpdated('201510260000Z')
if mibBuilder.loadTexts: raritan.setOrganization('Raritan')
emd = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 0))
trapInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1))
measurements = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 2))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 3))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 4))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 5))
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1))
externalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2))
serverReachability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3))
measurementsExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 3, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2))
logUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1))
logExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2))
actuatorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 5, 1))
complianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 8, 3, 1, 1)).setObjects(("EMD-MIB", "configGroup"), ("EMD-MIB", "measurementsGroup"), ("EMD-MIB", "trapInformationGroup"), ("EMD-MIB", "trapsGroup"), ("EMD-MIB", "logGroup"), ("EMD-MIB", "controlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev1 = complianceRev1.setStatus('current')
configGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 1)).setObjects(("EMD-MIB", "externalSensorCount"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "deviceInetNetmask"), ("EMD-MIB", "deviceInetGateway"), ("EMD-MIB", "deviceMACAddress"), ("EMD-MIB", "utcOffset"), ("EMD-MIB", "model"), ("EMD-MIB", "deviceName"), ("EMD-MIB", "hardwareVersion"), ("EMD-MIB", "firmwareVersion"), ("EMD-MIB", "externalSensorType"), ("EMD-MIB", "externalSensorSerialNumber"), ("EMD-MIB", "externalSensorName"), ("EMD-MIB", "externalSensorDescription"), ("EMD-MIB", "externalSensorXCoordinate"), ("EMD-MIB", "externalSensorYCoordinate"), ("EMD-MIB", "externalSensorZCoordinate"), ("EMD-MIB", "externalSensorChannelNumber"), ("EMD-MIB", "externalOnOffSensorSubtype"), ("EMD-MIB", "externalSensorUnits"), ("EMD-MIB", "externalSensorDecimalDigits"), ("EMD-MIB", "externalSensorAccuracy"), ("EMD-MIB", "externalSensorResolution"), ("EMD-MIB", "externalSensorTolerance"), ("EMD-MIB", "externalSensorMaximum"), ("EMD-MIB", "externalSensorMinimum"), ("EMD-MIB", "externalSensorHysteresis"), ("EMD-MIB", "externalSensorStateChangeDelay"), ("EMD-MIB", "externalSensorLowerCriticalThreshold"), ("EMD-MIB", "externalSensorLowerWarningThreshold"), ("EMD-MIB", "externalSensorUpperCriticalThreshold"), ("EMD-MIB", "externalSensorUpperWarningThreshold"), ("EMD-MIB", "externalSensorEnabledThresholds"), ("EMD-MIB", "externalSensorPort"), ("EMD-MIB", "externalSensorsZCoordinateUnits"), ("EMD-MIB", "externalSensorIsActuator"), ("EMD-MIB", "externalSensorUseDefaultThresholds"), ("EMD-MIB", "externalSensorTypeDefaultHysteresis"), ("EMD-MIB", "externalSensorTypeDefaultStateChangeDelay"), ("EMD-MIB", "externalSensorTypeDefaultLowerCriticalThreshold"), ("EMD-MIB", "externalSensorTypeDefaultLowerWarningThreshold"), ("EMD-MIB", "externalSensorTypeDefaultUpperCriticalThreshold"), ("EMD-MIB", "externalSensorTypeDefaultUpperWarningThreshold"), ("EMD-MIB", "externalSensorTypeDefaultEnabledThresholds"), ("EMD-MIB", "managedExternalSensorCount"), ("EMD-MIB", "serverCount"), ("EMD-MIB", "serverIPAddress"), ("EMD-MIB", "serverPingEnabled"), ("EMD-MIB", "measurementPeriod"), ("EMD-MIB", "measurementsPerLogEntry"), ("EMD-MIB", "logSize"), ("EMD-MIB", "cascadedDeviceConnected"), ("EMD-MIB", "peripheralDevicePackageSerialNumber"), ("EMD-MIB", "peripheralDevicePackageModel"), ("EMD-MIB", "peripheralDevicePackageFirmwareVersion"), ("EMD-MIB", "peripheralDevicePackageMinFirmwareVersion"), ("EMD-MIB", "peripheralDevicePackageFirmwareTimeStamp"), ("EMD-MIB", "peripheralDevicePackagePosition"), ("EMD-MIB", "peripheralDevicePackageState"), ("EMD-MIB", "peripheralDevicesAutoManagement"), ("EMD-MIB", "externalSensorAlarmedToNormalDelay"), ("EMD-MIB", "synchronizeWithNTPServer"), ("EMD-MIB", "useDHCPProvidedNTPServer"), ("EMD-MIB", "firstNTPServerAddressType"), ("EMD-MIB", "firstNTPServerAddress"), ("EMD-MIB", "secondNTPServerAddressType"), ("EMD-MIB", "secondNTPServerAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configGroup = configGroup.setStatus('current')
measurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 2)).setObjects(("EMD-MIB", "measurementsExternalSensorIsAvailable"), ("EMD-MIB", "measurementsExternalSensorState"), ("EMD-MIB", "measurementsExternalSensorValue"), ("EMD-MIB", "measurementsExternalSensorTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    measurementsGroup = measurementsGroup.setStatus('current')
trapInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 3)).setObjects(("EMD-MIB", "userName"), ("EMD-MIB", "targetUser"), ("EMD-MIB", "imageVersion"), ("EMD-MIB", "roleName"), ("EMD-MIB", "oldSensorState"), ("EMD-MIB", "externalSensorNumber"), ("EMD-MIB", "typeOfSensor"), ("EMD-MIB", "smtpMessageRecipients"), ("EMD-MIB", "smtpServer"), ("EMD-MIB", "errorDescription"), ("EMD-MIB", "deviceChangedParameter"), ("EMD-MIB", "changedParameterNewValue"), ("EMD-MIB", "lhxSupportEnabled"), ("EMD-MIB", "webcamModel"), ("EMD-MIB", "webcamConnectionPort"), ("EMD-MIB", "peripheralDeviceRomcode"), ("EMD-MIB", "peripheralDeviceFirmwareUpdateState"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "phoneNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapInformationGroup = trapInformationGroup.setStatus('current')
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 4)).setObjects(("EMD-MIB", "systemStarted"), ("EMD-MIB", "systemReset"), ("EMD-MIB", "userLogin"), ("EMD-MIB", "userLogout"), ("EMD-MIB", "userAuthenticationFailure"), ("EMD-MIB", "userSessionTimeout"), ("EMD-MIB", "userAdded"), ("EMD-MIB", "userModified"), ("EMD-MIB", "userDeleted"), ("EMD-MIB", "roleAdded"), ("EMD-MIB", "roleModified"), ("EMD-MIB", "roleDeleted"), ("EMD-MIB", "deviceUpdateStarted"), ("EMD-MIB", "deviceUpdateCompleted"), ("EMD-MIB", "userBlocked"), ("EMD-MIB", "userPasswordChanged"), ("EMD-MIB", "passwordSettingsChanged"), ("EMD-MIB", "firmwareValidationFailed"), ("EMD-MIB", "logFileCleared"), ("EMD-MIB", "bulkConfigurationSaved"), ("EMD-MIB", "bulkConfigurationCopied"), ("EMD-MIB", "externalSensorStateChange"), ("EMD-MIB", "smtpMessageTransmissionFailure"), ("EMD-MIB", "ldapError"), ("EMD-MIB", "deviceUpdateFailed"), ("EMD-MIB", "pingServerEnabled"), ("EMD-MIB", "pingServerDisabled"), ("EMD-MIB", "serverNotReachable"), ("EMD-MIB", "serverReachable"), ("EMD-MIB", "deviceIdentificationChanged"), ("EMD-MIB", "usbSlaveConnected"), ("EMD-MIB", "usbSlaveDisconnected"), ("EMD-MIB", "lhxSupportChanged"), ("EMD-MIB", "userAcceptedRestrictedServiceAgreement"), ("EMD-MIB", "userDeclinedRestrictedServiceAgreement"), ("EMD-MIB", "deviceSettingsSaved"), ("EMD-MIB", "deviceSettingsRestored"), ("EMD-MIB", "webcamInserted"), ("EMD-MIB", "webcamRemoved"), ("EMD-MIB", "serverConnectivityUnrecoverable"), ("EMD-MIB", "radiusError"), ("EMD-MIB", "serverReachabilityError"), ("EMD-MIB", "unknownPeripheralDeviceAttached"), ("EMD-MIB", "peripheralDeviceFirmwareUpdate"), ("EMD-MIB", "smsMessageTransmissionFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapsGroup = trapsGroup.setStatus('current')
logGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 5)).setObjects(("EMD-MIB", "dataLogging"), ("EMD-MIB", "oldestLogID"), ("EMD-MIB", "newestLogID"), ("EMD-MIB", "logTimeStamp"), ("EMD-MIB", "dataLoggingEnableForAllSensors"), ("EMD-MIB", "logExternalSensorDataAvailable"), ("EMD-MIB", "logExternalSensorState"), ("EMD-MIB", "logExternalSensorAvgValue"), ("EMD-MIB", "logExternalSensorMaxValue"), ("EMD-MIB", "logExternalSensorMinValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    logGroup = logGroup.setStatus('current')
controlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 6)).setObjects(("EMD-MIB", "actuatorState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    controlGroup = controlGroup.setStatus('current')
class SensorTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 30, 31, 42, 43, 44, 45))
    namedValues = NamedValues(("rmsCurrent", 1), ("peakCurrent", 2), ("unbalancedCurrent", 3), ("rmsVoltage", 4), ("activePower", 5), ("apparentPower", 6), ("powerFactor", 7), ("activeEnergy", 8), ("apparentEnergy", 9), ("temperature", 10), ("humidity", 11), ("airFlow", 12), ("airPressure", 13), ("onOff", 14), ("trip", 15), ("vibration", 16), ("waterDetection", 17), ("smokeDetection", 18), ("binary", 19), ("contact", 20), ("fanSpeed", 21), ("absoluteHumidity", 28), ("other", 30), ("none", 31), ("illuminance", 42), ("doorContact", 43), ("tamperDetection", 44), ("motionDetection", 45))

class SensorStateEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unavailable", -1), ("open", 0), ("closed", 1), ("belowLowerCritical", 2), ("belowLowerWarning", 3), ("normal", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6), ("on", 7), ("off", 8), ("detected", 9), ("notDetected", 10), ("alarmed", 11))

class SensorUnitsEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("none", -1), ("other", 0), ("volt", 1), ("amp", 2), ("watt", 3), ("voltamp", 4), ("wattHour", 5), ("voltampHour", 6), ("degreeC", 7), ("hertz", 8), ("percent", 9), ("meterpersec", 10), ("pascal", 11), ("psi", 12), ("g", 13), ("degreeF", 14), ("feet", 15), ("inches", 16), ("cm", 17), ("meters", 18), ("rpm", 19), ("degrees", 20), ("lux", 21), ("grampercubicmeter", 22), ("voltampReactive", 23))

class ExternalSensorsZCoordinateUnitsEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("rackUnits", 0), ("text", 1))

class HundredthsOfAPercentage(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 10000)

class DeviceIdentificationParameterEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("deviceName", 0), ("sysContact", 1), ("sysName", 2), ("sysLocation", 3))

class PeripheralDeviceFirmwareUpdateStateEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("started", 1), ("successful", 2), ("failed", 3))

unitConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1))
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
utcOffset = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utcOffset.setStatus('current')
externalSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorCount.setStatus('current')
managedExternalSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedExternalSensorCount.setStatus('current')
externalSensorsZCoordinateUnits = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 7), ExternalSensorsZCoordinateUnitsEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setStatus('current')
deviceMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMACAddress.setStatus('current')
deviceInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInetAddressType.setStatus('current')
deviceInetIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInetIPAddress.setStatus('current')
deviceInetNetmask = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInetNetmask.setStatus('current')
deviceInetGateway = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInetGateway.setStatus('current')
serverCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCount.setStatus('current')
model = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: model.setStatus('current')
cascadedDeviceConnected = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cascadedDeviceConnected.setStatus('current')
peripheralDevicesAutoManagement = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peripheralDevicesAutoManagement.setStatus('current')
synchronizeWithNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synchronizeWithNTPServer.setStatus('current')
useDHCPProvidedNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setStatus('current')
firstNTPServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 19), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddressType.setStatus('current')
firstNTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 20), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddress.setStatus('current')
secondNTPServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 21), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddressType.setStatus('current')
secondNTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 22), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddress.setStatus('current')
logConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2))
dataLogging = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLogging.setStatus('current')
measurementPeriod = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementPeriod.setStatus('current')
measurementsPerLogEntry = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measurementsPerLogEntry.setStatus('current')
logSize = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSize.setStatus('current')
dataLoggingEnableForAllSensors = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLoggingEnableForAllSensors.setStatus('current')
externalSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1), )
if mibBuilder.loadTexts: externalSensorConfigurationTable.setStatus('current')
externalSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1), ).setIndexNames((0, "EMD-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorConfigurationEntry.setStatus('current')
sensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: sensorID.setStatus('current')
externalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 2), SensorTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorType.setStatus('current')
externalSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorSerialNumber.setStatus('current')
externalSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorName.setStatus('current')
externalSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorDescription.setStatus('current')
externalSensorXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorXCoordinate.setStatus('current')
externalSensorYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorYCoordinate.setStatus('current')
externalSensorZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorZCoordinate.setStatus('current')
externalSensorChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorChannelNumber.setStatus('current')
externalOnOffSensorSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 10), SensorTypeEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalOnOffSensorSubtype.setStatus('current')
externalSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 11), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorUnits.setStatus('current')
externalSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorDecimalDigits.setStatus('current')
externalSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 13), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorAccuracy.setStatus('current')
externalSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorResolution.setStatus('current')
externalSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorTolerance.setStatus('current')
externalSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMaximum.setStatus('current')
externalSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMinimum.setStatus('current')
externalSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorHysteresis.setStatus('current')
externalSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorStateChangeDelay.setStatus('current')
externalSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setStatus('current')
externalSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setStatus('current')
externalSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setStatus('current')
externalSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setStatus('current')
externalSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 24), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorEnabledThresholds.setStatus('current')
externalSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorPort.setStatus('current')
externalSensorIsActuator = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorIsActuator.setStatus('current')
externalSensorAlarmedToNormalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorAlarmedToNormalDelay.setStatus('current')
externalSensorUseDefaultThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUseDefaultThresholds.setStatus('current')
externalSensorTypeDefaultThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4), )
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsTable.setStatus('current')
externalSensorTypeDefaultThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1), ).setIndexNames((0, "EMD-MIB", "externalSensorType"))
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsEntry.setStatus('current')
externalSensorTypeDefaultHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultHysteresis.setStatus('current')
externalSensorTypeDefaultStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultStateChangeDelay.setStatus('current')
externalSensorTypeDefaultLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerCriticalThreshold.setStatus('current')
externalSensorTypeDefaultLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerWarningThreshold.setStatus('current')
externalSensorTypeDefaultUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperCriticalThreshold.setStatus('current')
externalSensorTypeDefaultUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperWarningThreshold.setStatus('current')
externalSensorTypeDefaultEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 9), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultEnabledThresholds.setStatus('current')
peripheralDevicePackageTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5), )
if mibBuilder.loadTexts: peripheralDevicePackageTable.setStatus('current')
peripheralDevicePackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1), ).setIndexNames((0, "EMD-MIB", "peripheralDevicePackageId"))
if mibBuilder.loadTexts: peripheralDevicePackageEntry.setStatus('current')
peripheralDevicePackageId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: peripheralDevicePackageId.setStatus('current')
peripheralDevicePackageSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageSerialNumber.setStatus('current')
peripheralDevicePackageModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageModel.setStatus('current')
peripheralDevicePackageFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareVersion.setStatus('current')
peripheralDevicePackageMinFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageMinFirmwareVersion.setStatus('current')
peripheralDevicePackageFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareTimeStamp.setStatus('current')
peripheralDevicePackagePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackagePosition.setStatus('current')
peripheralDevicePackageState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageState.setStatus('current')
serverReachabilityTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3, 1), )
if mibBuilder.loadTexts: serverReachabilityTable.setStatus('current')
serverReachabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3, 1, 1), ).setIndexNames((0, "EMD-MIB", "serverID"))
if mibBuilder.loadTexts: serverReachabilityEntry.setStatus('current')
serverID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: serverID.setStatus('current')
serverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIPAddress.setStatus('current')
serverPingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPingEnabled.setStatus('current')
oldestLogID = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldestLogID.setStatus('current')
newestLogID = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newestLogID.setStatus('current')
logTimeStampTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 3), )
if mibBuilder.loadTexts: logTimeStampTable.setStatus('current')
logTimeStampEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 3, 1), ).setIndexNames((0, "EMD-MIB", "logIndex"))
if mibBuilder.loadTexts: logTimeStampEntry.setStatus('current')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: logIndex.setStatus('current')
logTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTimeStamp.setStatus('current')
externalSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1), )
if mibBuilder.loadTexts: externalSensorLogTable.setStatus('current')
externalSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1), ).setIndexNames((0, "EMD-MIB", "sensorID"), (0, "EMD-MIB", "logIndex"))
if mibBuilder.loadTexts: externalSensorLogEntry.setStatus('current')
logExternalSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorDataAvailable.setStatus('current')
logExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorState.setStatus('current')
logExternalSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorAvgValue.setStatus('current')
logExternalSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMaxValue.setStatus('current')
logExternalSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMinValue.setStatus('current')
externalSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1), )
if mibBuilder.loadTexts: externalSensorMeasurementsTable.setStatus('current')
externalSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1, 1), ).setIndexNames((0, "EMD-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorMeasurementsEntry.setStatus('current')
measurementsExternalSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorIsAvailable.setStatus('current')
measurementsExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1, 1, 2), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorState.setStatus('current')
measurementsExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorValue.setStatus('current')
measurementsExternalSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorTimeStamp.setStatus('current')
actuatorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 5, 1, 1), )
if mibBuilder.loadTexts: actuatorControlTable.setStatus('current')
actuatorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 5, 1, 1, 1), ).setIndexNames((0, "EMD-MIB", "sensorID"))
if mibBuilder.loadTexts: actuatorControlEntry.setStatus('current')
actuatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 5, 1, 1, 1, 1), SensorStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actuatorState.setStatus('current')
userName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
targetUser = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetUser.setStatus('current')
imageVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
roleName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: roleName.setStatus('current')
smtpMessageRecipients = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpMessageRecipients.setStatus('current')
smtpServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServer.setStatus('current')
oldSensorState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 7), SensorStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldSensorState.setStatus('current')
externalSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: externalSensorNumber.setStatus('current')
typeOfSensor = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 9), SensorTypeEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: typeOfSensor.setStatus('current')
errorDescription = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: errorDescription.setStatus('current')
deviceChangedParameter = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 11), DeviceIdentificationParameterEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceChangedParameter.setStatus('current')
changedParameterNewValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: changedParameterNewValue.setStatus('current')
lhxSupportEnabled = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 13), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lhxSupportEnabled.setStatus('current')
webcamModel = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: webcamModel.setStatus('current')
webcamConnectionPort = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: webcamConnectionPort.setStatus('current')
peripheralDeviceRomcode = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: peripheralDeviceRomcode.setStatus('current')
peripheralDeviceFirmwareUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 17), PeripheralDeviceFirmwareUpdateStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdateState.setStatus('current')
agentInetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 18), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentInetPortNumber.setStatus('current')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: phoneNumber.setStatus('current')
systemStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 1)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: systemStarted.setStatus('current')
systemReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 2)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: systemReset.setStatus('current')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 3)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 4)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userLogout.setStatus('current')
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 5)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAuthenticationFailure.setStatus('current')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 6)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 7)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "targetUser"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 8)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "targetUser"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userModified.setStatus('current')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 9)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "targetUser"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
roleAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 10)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "roleName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleAdded.setStatus('current')
roleModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 11)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "roleName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleModified.setStatus('current')
roleDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 12)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "roleName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleDeleted.setStatus('current')
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 13)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceUpdateStarted.setStatus('current')
deviceUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 14)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceUpdateCompleted.setStatus('current')
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 15)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userBlocked.setStatus('current')
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 16)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "targetUser"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userPasswordChanged.setStatus('current')
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 17)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: passwordSettingsChanged.setStatus('current')
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 18)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: firmwareValidationFailed.setStatus('current')
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 19)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: logFileCleared.setStatus('current')
bulkConfigurationSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 20)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: bulkConfigurationSaved.setStatus('current')
bulkConfigurationCopied = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 21)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: bulkConfigurationCopied.setStatus('current')
externalSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 22)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "externalSensorNumber"), ("EMD-MIB", "typeOfSensor"), ("EMD-MIB", "measurementsExternalSensorTimeStamp"), ("EMD-MIB", "measurementsExternalSensorValue"), ("EMD-MIB", "measurementsExternalSensorState"), ("EMD-MIB", "oldSensorState"), ("EMD-MIB", "externalSensorSerialNumber"), ("EMD-MIB", "externalOnOffSensorSubtype"), ("EMD-MIB", "externalSensorChannelNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: externalSensorStateChange.setStatus('current')
smtpMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 23)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "smtpMessageRecipients"), ("EMD-MIB", "smtpServer"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: smtpMessageTransmissionFailure.setStatus('current')
ldapError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 24)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: ldapError.setStatus('current')
deviceUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 25)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceUpdateFailed.setStatus('current')
pingServerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 26)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pingServerEnabled.setStatus('current')
pingServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 27)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pingServerDisabled.setStatus('current')
serverNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 28)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverNotReachable.setStatus('current')
serverReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 29)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverReachable.setStatus('current')
deviceIdentificationChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 30)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceChangedParameter"), ("EMD-MIB", "changedParameterNewValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceIdentificationChanged.setStatus('current')
usbSlaveConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 31)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: usbSlaveConnected.setStatus('current')
usbSlaveDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 32)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: usbSlaveDisconnected.setStatus('current')
lhxSupportChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 33)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("EMD-MIB", "lhxSupportEnabled"))
if mibBuilder.loadTexts: lhxSupportChanged.setStatus('current')
userAcceptedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 34)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAcceptedRestrictedServiceAgreement.setStatus('current')
userDeclinedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 35)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userDeclinedRestrictedServiceAgreement.setStatus('current')
deviceSettingsSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 36)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceSettingsSaved.setStatus('current')
deviceSettingsRestored = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 37)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceSettingsRestored.setStatus('current')
webcamInserted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 38)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "webcamModel"), ("EMD-MIB", "webcamConnectionPort"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: webcamInserted.setStatus('current')
webcamRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 39)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "webcamModel"), ("EMD-MIB", "webcamConnectionPort"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: webcamRemoved.setStatus('current')
serverConnectivityUnrecoverable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 40)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverConnectivityUnrecoverable.setStatus('current')
radiusError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 41)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: radiusError.setStatus('current')
serverReachabilityError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 42)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("EMD-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverReachabilityError.setStatus('current')
unknownPeripheralDeviceAttached = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 43)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "peripheralDeviceRomcode"), ("EMD-MIB", "peripheralDevicePackagePosition"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: unknownPeripheralDeviceAttached.setStatus('current')
peripheralDeviceFirmwareUpdate = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 44)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "peripheralDevicePackageSerialNumber"), ("EMD-MIB", "peripheralDeviceFirmwareUpdateState"), ("EMD-MIB", "peripheralDevicePackageFirmwareVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdate.setStatus('current')
smsMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 45)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "phoneNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: smsMessageTransmissionFailure.setStatus('current')
mibBuilder.exportSymbols("EMD-MIB", userSessionTimeout=userSessionTimeout, webcamModel=webcamModel, externalSensorType=externalSensorType, userName=userName, ldapError=ldapError, errorDescription=errorDescription, measurementsExternalSensorTimeStamp=measurementsExternalSensorTimeStamp, trapInformationGroup=trapInformationGroup, externalSensorLogEntry=externalSensorLogEntry, peripheralDevicePackagePosition=peripheralDevicePackagePosition, usbSlaveConnected=usbSlaveConnected, peripheralDevicePackageId=peripheralDevicePackageId, externalSensorUpperCriticalThreshold=externalSensorUpperCriticalThreshold, measurementsExternalSensor=measurementsExternalSensor, peripheralDevicePackageModel=peripheralDevicePackageModel, externalSensorSerialNumber=externalSensorSerialNumber, PeripheralDeviceFirmwareUpdateStateEnumeration=PeripheralDeviceFirmwareUpdateStateEnumeration, smsMessageTransmissionFailure=smsMessageTransmissionFailure, raritan=raritan, userLogout=userLogout, externalSensorMinimum=externalSensorMinimum, usbSlaveDisconnected=usbSlaveDisconnected, HundredthsOfAPercentage=HundredthsOfAPercentage, managedExternalSensorCount=managedExternalSensorCount, peripheralDevicePackageFirmwareTimeStamp=peripheralDevicePackageFirmwareTimeStamp, newestLogID=newestLogID, logIndex=logIndex, logExternalSensorMaxValue=logExternalSensorMaxValue, userModified=userModified, logExternalSensor=logExternalSensor, imageVersion=imageVersion, userPasswordChanged=userPasswordChanged, externalSensorTypeDefaultEnabledThresholds=externalSensorTypeDefaultEnabledThresholds, actuatorControlTable=actuatorControlTable, externalSensorStateChange=externalSensorStateChange, peripheralDevicePackageEntry=peripheralDevicePackageEntry, externalSensorMeasurementsTable=externalSensorMeasurementsTable, peripheralDeviceFirmwareUpdateState=peripheralDeviceFirmwareUpdateState, radiusError=radiusError, externalSensorTypeDefaultThresholdsEntry=externalSensorTypeDefaultThresholdsEntry, emd=emd, serverReachabilityTable=serverReachabilityTable, complianceRev1=complianceRev1, externalSensorPort=externalSensorPort, externalSensorLogTable=externalSensorLogTable, externalSensorConfigurationEntry=externalSensorConfigurationEntry, ExternalSensorsZCoordinateUnitsEnumeration=ExternalSensorsZCoordinateUnitsEnumeration, externalOnOffSensorSubtype=externalOnOffSensorSubtype, userAcceptedRestrictedServiceAgreement=userAcceptedRestrictedServiceAgreement, lhxSupportChanged=lhxSupportChanged, peripheralDevicesAutoManagement=peripheralDevicesAutoManagement, controlGroup=controlGroup, smtpMessageRecipients=smtpMessageRecipients, peripheralDeviceRomcode=peripheralDeviceRomcode, logConfiguration=logConfiguration, agentInetPortNumber=agentInetPortNumber, externalSensorUnits=externalSensorUnits, deviceChangedParameter=deviceChangedParameter, trapInformation=trapInformation, measurementsExternalSensorState=measurementsExternalSensorState, deviceInetAddressType=deviceInetAddressType, traps=traps, externalSensorTypeDefaultStateChangeDelay=externalSensorTypeDefaultStateChangeDelay, externalSensorConfigurationTable=externalSensorConfigurationTable, compliances=compliances, deviceInetGateway=deviceInetGateway, externalSensorXCoordinate=externalSensorXCoordinate, actuatorControlEntry=actuatorControlEntry, serverReachable=serverReachable, externalSensorStateChangeDelay=externalSensorStateChangeDelay, deviceSettingsRestored=deviceSettingsRestored, peripheralDevicePackageState=peripheralDevicePackageState, unitConfiguration=unitConfiguration, measurementsExternalSensorIsAvailable=measurementsExternalSensorIsAvailable, smtpMessageTransmissionFailure=smtpMessageTransmissionFailure, logExternalSensorState=logExternalSensorState, externalSensorDescription=externalSensorDescription, oldestLogID=oldestLogID, deviceMACAddress=deviceMACAddress, bulkConfigurationSaved=bulkConfigurationSaved, targetUser=targetUser, userLogin=userLogin, serverConnectivityUnrecoverable=serverConnectivityUnrecoverable, externalSensorTypeDefaultHysteresis=externalSensorTypeDefaultHysteresis, SensorUnitsEnumeration=SensorUnitsEnumeration, userBlocked=userBlocked, externalSensorAlarmedToNormalDelay=externalSensorAlarmedToNormalDelay, model=model, deviceUpdateFailed=deviceUpdateFailed, externalSensorTypeDefaultThresholdsTable=externalSensorTypeDefaultThresholdsTable, logExternalSensorMinValue=logExternalSensorMinValue, deviceName=deviceName, externalSensorZCoordinate=externalSensorZCoordinate, userAdded=userAdded, deviceSettingsSaved=deviceSettingsSaved, sensorID=sensorID, firstNTPServerAddressType=firstNTPServerAddressType, logSize=logSize, log=log, cascadedDeviceConnected=cascadedDeviceConnected, phoneNumber=phoneNumber, peripheralDevicePackageFirmwareVersion=peripheralDevicePackageFirmwareVersion, logUnit=logUnit, systemStarted=systemStarted, synchronizeWithNTPServer=synchronizeWithNTPServer, serverID=serverID, groups=groups, secondNTPServerAddressType=secondNTPServerAddressType, externalSensorDecimalDigits=externalSensorDecimalDigits, deviceInetIPAddress=deviceInetIPAddress, externalSensorCount=externalSensorCount, bulkConfigurationCopied=bulkConfigurationCopied, deviceUpdateStarted=deviceUpdateStarted, serverReachabilityError=serverReachabilityError, passwordSettingsChanged=passwordSettingsChanged, serverReachability=serverReachability, externalSensors=externalSensors, secondNTPServerAddress=secondNTPServerAddress, externalSensorAccuracy=externalSensorAccuracy, roleAdded=roleAdded, measurementsExternalSensorValue=measurementsExternalSensorValue, measurementsPerLogEntry=measurementsPerLogEntry, logTimeStampTable=logTimeStampTable, PYSNMP_MODULE_ID=raritan, measurementPeriod=measurementPeriod, peripheralDevicePackageTable=peripheralDevicePackageTable, externalSensorLowerWarningThreshold=externalSensorLowerWarningThreshold, logTimeStampEntry=logTimeStampEntry, deviceIdentificationChanged=deviceIdentificationChanged, roleName=roleName, serverCount=serverCount, smtpServer=smtpServer, configGroup=configGroup, logExternalSensorAvgValue=logExternalSensorAvgValue, externalSensorHysteresis=externalSensorHysteresis, deviceUpdateCompleted=deviceUpdateCompleted, SensorTypeEnumeration=SensorTypeEnumeration, dataLogging=dataLogging, pingServerEnabled=pingServerEnabled, webcamInserted=webcamInserted, externalSensorLowerCriticalThreshold=externalSensorLowerCriticalThreshold, firstNTPServerAddress=firstNTPServerAddress, logGroup=logGroup, externalSensorYCoordinate=externalSensorYCoordinate, externalSensorMaximum=externalSensorMaximum, serverPingEnabled=serverPingEnabled, externalSensorResolution=externalSensorResolution, typeOfSensor=typeOfSensor, actuatorState=actuatorState, externalSensorsZCoordinateUnits=externalSensorsZCoordinateUnits, roleDeleted=roleDeleted, serverIPAddress=serverIPAddress, DeviceIdentificationParameterEnumeration=DeviceIdentificationParameterEnumeration, pingServerDisabled=pingServerDisabled, externalSensorTypeDefaultUpperWarningThreshold=externalSensorTypeDefaultUpperWarningThreshold, webcamConnectionPort=webcamConnectionPort, actuatorControl=actuatorControl, unknownPeripheralDeviceAttached=unknownPeripheralDeviceAttached, deviceInetNetmask=deviceInetNetmask, measurements=measurements, measurementsGroup=measurementsGroup, externalSensorTypeDefaultUpperCriticalThreshold=externalSensorTypeDefaultUpperCriticalThreshold, control=control, externalSensorChannelNumber=externalSensorChannelNumber, changedParameterNewValue=changedParameterNewValue, lhxSupportEnabled=lhxSupportEnabled, logFileCleared=logFileCleared, peripheralDevicePackageMinFirmwareVersion=peripheralDevicePackageMinFirmwareVersion, conformance=conformance, peripheralDevicePackageSerialNumber=peripheralDevicePackageSerialNumber, dataLoggingEnableForAllSensors=dataLoggingEnableForAllSensors, logExternalSensorDataAvailable=logExternalSensorDataAvailable, roleModified=roleModified, utcOffset=utcOffset, externalSensorTolerance=externalSensorTolerance, externalSensorMeasurementsEntry=externalSensorMeasurementsEntry, configuration=configuration, externalSensorTypeDefaultLowerCriticalThreshold=externalSensorTypeDefaultLowerCriticalThreshold, externalSensorEnabledThresholds=externalSensorEnabledThresholds, firmwareValidationFailed=firmwareValidationFailed, externalSensorUseDefaultThresholds=externalSensorUseDefaultThresholds, externalSensorUpperWarningThreshold=externalSensorUpperWarningThreshold, peripheralDeviceFirmwareUpdate=peripheralDeviceFirmwareUpdate, firmwareVersion=firmwareVersion, oldSensorState=oldSensorState, userAuthenticationFailure=userAuthenticationFailure, hardwareVersion=hardwareVersion, externalSensorName=externalSensorName, serverReachabilityEntry=serverReachabilityEntry, logTimeStamp=logTimeStamp, useDHCPProvidedNTPServer=useDHCPProvidedNTPServer, serverNotReachable=serverNotReachable, systemReset=systemReset, SensorStateEnumeration=SensorStateEnumeration, externalSensorIsActuator=externalSensorIsActuator, externalSensorNumber=externalSensorNumber, unit=unit, externalSensorTypeDefaultLowerWarningThreshold=externalSensorTypeDefaultLowerWarningThreshold, userDeleted=userDeleted, userDeclinedRestrictedServiceAgreement=userDeclinedRestrictedServiceAgreement, webcamRemoved=webcamRemoved, trapsGroup=trapsGroup)
