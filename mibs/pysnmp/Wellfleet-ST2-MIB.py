#
# PySNMP MIB module Wellfleet-ST2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-ST2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, ModuleIdentity, MibIdentifier, IpAddress, Counter64, Bits, Counter32, iso, Integer32, NotificationType, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "IpAddress", "Counter64", "Bits", "Counter32", "iso", "Integer32", "NotificationType", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfReservationProtocolGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfReservationProtocolGroup")
wfSt2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2))
wfSt2BaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 1))
wfSt2BaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2BaseDelete.setStatus('mandatory')
wfSt2BaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2BaseDisable.setStatus('mandatory')
wfSt2BaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 3, 2, 1))).clone(namedValues=NamedValues(("notpresent", 4), ("initializing", 3), ("down", 2), ("up", 1))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2BaseState.setStatus('mandatory')
wfSt2BaseRoutingVers = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2BaseRoutingVers.setStatus('mandatory')
wfSt2BaseTunnelCapability = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2BaseTunnelCapability.setStatus('mandatory')
wfSt2BaseTunnelDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2BaseTunnelDisable.setStatus('mandatory')
wfSt2BaseAgentDBGMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2BaseAgentDBGMask.setStatus('mandatory')
wfSt2BaseReservedParameter1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2BaseReservedParameter1.setStatus('mandatory')
wfSt2BaseReservedParameter2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2BaseReservedParameter2.setStatus('mandatory')
wfSt2CircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2), )
if mibBuilder.loadTexts: wfSt2CircuitTable.setStatus('mandatory')
wfSt2CircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1), ).setIndexNames((0, "Wellfleet-ST2-MIB", "wfSt2CircuitID"))
if mibBuilder.loadTexts: wfSt2CircuitEntry.setStatus('mandatory')
wfSt2CircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitDelete.setStatus('mandatory')
wfSt2CircuitDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitDisable.setStatus('mandatory')
wfSt2CircuitCommonState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 3, 2, 1))).clone(namedValues=NamedValues(("notpresent", 4), ("initializing", 3), ("down", 2), ("up", 1))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitCommonState.setStatus('mandatory')
wfSt2CircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitID.setStatus('mandatory')
wfSt2CircuitCommonType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 15, 100, 101, 102, 103, 104))).clone(namedValues=NamedValues(("sync", 1), ("ethernet", 6), ("fddi", 15), ("smds", 100), ("fr", 101), ("atm", 102), ("ring", 103), ("ppp", 104)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitCommonType.setStatus('mandatory')
wfSt2CircuitIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitIPAddress.setStatus('mandatory')
wfSt2CircuitTmoAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("taccdef", 10))).clone('taccdef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitTmoAccept.setStatus('mandatory')
wfSt2CircuitRetryAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("raccdef", 3))).clone('raccdef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitRetryAccept.setStatus('mandatory')
wfSt2CircuitTmoConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("tcondef", 10))).clone('tcondef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitTmoConnect.setStatus('mandatory')
wfSt2CircuitRetryConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("rcondef", 5))).clone('rcondef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitRetryConnect.setStatus('mandatory')
wfSt2CircuitTmoDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("tdiscondef", 10))).clone('tdiscondef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitTmoDisconnect.setStatus('mandatory')
wfSt2CircuitRetryDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("rdiscondef", 3))).clone('rdiscondef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitRetryDisconnect.setStatus('mandatory')
wfSt2CircuitTmoHidChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("thidchgdef", 10))).clone('thidchgdef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitTmoHidChange.setStatus('mandatory')
wfSt2CircuitRetryHidChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("rhidchgdef", 3))).clone('rhidchgdef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitRetryHidChange.setStatus('mandatory')
wfSt2CircuitTmoRefuse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("trefusedef", 10))).clone('trefusedef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitTmoRefuse.setStatus('mandatory')
wfSt2CircuitRetryRefuse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("rrefusedef", 3))).clone('rrefusedef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitRetryRefuse.setStatus('mandatory')
wfSt2CircuitTmoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("thellodef", 10))).clone('thellodef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitTmoHello.setStatus('mandatory')
wfSt2CircuitRetryHello = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("rhellodef", 5))).clone('rhellodef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitRetryHello.setStatus('mandatory')
wfSt2CircuitMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitMTU.setStatus('mandatory')
wfSt2CircuitDBGMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitDBGMask.setStatus('mandatory')
wfSt2CircuitHelloFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preserve", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitHelloFailure.setStatus('mandatory')
wfSt2CircuitHidProposed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locally", 1), ("remotely", 2))).clone('locally')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitHidProposed.setStatus('mandatory')
wfSt2CircuitBadStCksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitBadStCksum.setStatus('mandatory')
wfSt2CircuitEncodeBadParm = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitEncodeBadParm.setStatus('mandatory')
wfSt2CircuitEncodeWrongParms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitEncodeWrongParms.setStatus('mandatory')
wfSt2CircuitMsgInHidColl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitMsgInHidColl.setStatus('mandatory')
wfSt2CircuitMsgInNoCon = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitMsgInNoCon.setStatus('mandatory')
wfSt2CircuitNotSt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitNotSt2.setStatus('mandatory')
wfSt2CircuitParmMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitParmMissing.setStatus('mandatory')
wfSt2CircuitScmpRefNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpRefNum.setStatus('mandatory')
wfSt2CircuitScmp0rVlid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmp0rVlid.setStatus('mandatory')
wfSt2CircuitScmp0sVlid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmp0sVlid.setStatus('mandatory')
wfSt2CircuitScmpBadVlid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpBadVlid.setStatus('mandatory')
wfSt2CircuitScmpCksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpCksum.setStatus('mandatory')
wfSt2CircuitScmpFailedResources = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpFailedResources.setStatus('mandatory')
wfSt2CircuitScmpFailedRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpFailedRoute.setStatus('mandatory')
wfSt2CircuitScmpLenInconsist = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpLenInconsist.setStatus('mandatory')
wfSt2CircuitScmpRxTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpRxTimeOut.setStatus('mandatory')
wfSt2CircuitScmpXmtCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpXmtCnt.setStatus('mandatory')
wfSt2CircuitScmpRcvCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpRcvCnt.setStatus('mandatory')
wfSt2CircuitDataXmtCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitDataXmtCnt.setStatus('mandatory')
wfSt2CircuitDataRcvCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitDataRcvCnt.setStatus('mandatory')
wfSt2CircuitSt2StreamCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitSt2StreamCnt.setStatus('mandatory')
wfSt2CircuitHelloXmtCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitHelloXmtCnt.setStatus('mandatory')
wfSt2CircuitHelloRcvCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitHelloRcvCnt.setStatus('mandatory')
wfSt2CircuitHelloRAckCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitHelloRAckCnt.setStatus('mandatory')
wfSt2CircuitLbPoliceDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitLbPoliceDrop.setStatus('mandatory')
wfSt2CircuitPbsDropCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitPbsDropCnt.setStatus('mandatory')
wfSt2CircuitOverDrop2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitOverDrop2Cnt.setStatus('mandatory')
wfSt2CircuitPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitPktCnt.setStatus('mandatory')
wfSt2CircuitScmpXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpXmt.setStatus('mandatory')
wfSt2CircuitScmpRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitScmpRcv.setStatus('mandatory')
wfSt2CircuitBWAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2CircuitBWAlloc.setStatus('mandatory')
wfSt2CircuitRsvdParameter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitRsvdParameter1.setStatus('mandatory')
wfSt2CircuitRsvdParameter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2CircuitRsvdParameter2.setStatus('mandatory')
wfSt2NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3), )
if mibBuilder.loadTexts: wfSt2NeighborTable.setStatus('mandatory')
wfSt2NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1), ).setIndexNames((0, "Wellfleet-ST2-MIB", "wfSt2NeighborNxtHopIPAddr"))
if mibBuilder.loadTexts: wfSt2NeighborEntry.setStatus('mandatory')
wfSt2NeighborDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborDelete.setStatus('mandatory')
wfSt2NeighborDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborDisable.setStatus('mandatory')
wfSt2NeighborNxtHopIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSt2NeighborNxtHopIPAddr.setStatus('mandatory')
wfSt2NeighborRteExplr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborRteExplr.setStatus('mandatory')
wfSt2NeighborHelloProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("active", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborHelloProtocol.setStatus('mandatory')
wfSt2NeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("tunnel", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborType.setStatus('mandatory')
wfSt2NeighborPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborPriorityLevel.setStatus('mandatory')
wfSt2NeighborRsvdParameter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborRsvdParameter1.setStatus('mandatory')
wfSt2NeighborRsvdParameter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborRsvdParameter2.setStatus('mandatory')
wfSt2NeighborLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborLocalIPAddress.setStatus('mandatory')
wfSt2NeighborTmoAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("taccdef", 10))).clone('taccdef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborTmoAccept.setStatus('mandatory')
wfSt2NeighborRetryAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("raccdef", 3))).clone('raccdef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborRetryAccept.setStatus('mandatory')
wfSt2NeighborTmoConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("tcondef", 10))).clone('tcondef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborTmoConnect.setStatus('mandatory')
wfSt2NeighborRetryConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("rcondef", 5))).clone('rcondef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborRetryConnect.setStatus('mandatory')
wfSt2NeighborTmoDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("tdiscondef", 10))).clone('tdiscondef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborTmoDisconnect.setStatus('mandatory')
wfSt2NeighborRetryDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("rdiscondef", 3))).clone('rdiscondef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborRetryDisconnect.setStatus('mandatory')
wfSt2NeighborTmoHidChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("thidchgdef", 10))).clone('thidchgdef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborTmoHidChange.setStatus('mandatory')
wfSt2NeighborRetryHidChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("rhidchgdef", 3))).clone('rhidchgdef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborRetryHidChange.setStatus('mandatory')
wfSt2NeighborTmoRefuse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("trefusedef", 10))).clone('trefusedef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborTmoRefuse.setStatus('mandatory')
wfSt2NeighborRetryRefuse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("rrefusedef", 3))).clone('rrefusedef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborRetryRefuse.setStatus('mandatory')
wfSt2NeighborTmoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("thellodef", 10))).clone('thellodef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborTmoHello.setStatus('mandatory')
wfSt2NeighborRetryHello = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("rhellodef", 5))).clone('rhellodef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2NeighborRetryHello.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-ST2-MIB", wfSt2NeighborRetryHello=wfSt2NeighborRetryHello, wfSt2CircuitScmpRcvCnt=wfSt2CircuitScmpRcvCnt, wfSt2BaseDelete=wfSt2BaseDelete, wfSt2CircuitBWAlloc=wfSt2CircuitBWAlloc, wfSt2CircuitHelloRcvCnt=wfSt2CircuitHelloRcvCnt, wfSt2CircuitScmpXmtCnt=wfSt2CircuitScmpXmtCnt, wfSt2CircuitLbPoliceDrop=wfSt2CircuitLbPoliceDrop, wfSt2NeighborPriorityLevel=wfSt2NeighborPriorityLevel, wfSt2NeighborRetryDisconnect=wfSt2NeighborRetryDisconnect, wfSt2CircuitScmpRcv=wfSt2CircuitScmpRcv, wfSt2CircuitPbsDropCnt=wfSt2CircuitPbsDropCnt, wfSt2BaseDisable=wfSt2BaseDisable, wfSt2CircuitTmoRefuse=wfSt2CircuitTmoRefuse, wfSt2NeighborDelete=wfSt2NeighborDelete, wfSt2CircuitRetryAccept=wfSt2CircuitRetryAccept, wfSt2NeighborRetryAccept=wfSt2NeighborRetryAccept, wfSt2NeighborTmoHello=wfSt2NeighborTmoHello, wfSt2BaseGroup=wfSt2BaseGroup, wfSt2CircuitHelloXmtCnt=wfSt2CircuitHelloXmtCnt, wfSt2BaseRoutingVers=wfSt2BaseRoutingVers, wfSt2NeighborTmoHidChange=wfSt2NeighborTmoHidChange, wfSt2BaseTunnelDisable=wfSt2BaseTunnelDisable, wfSt2NeighborType=wfSt2NeighborType, wfSt2NeighborTmoDisconnect=wfSt2NeighborTmoDisconnect, wfSt2CircuitMsgInHidColl=wfSt2CircuitMsgInHidColl, wfSt2BaseTunnelCapability=wfSt2BaseTunnelCapability, wfSt2CircuitMsgInNoCon=wfSt2CircuitMsgInNoCon, wfSt2BaseReservedParameter1=wfSt2BaseReservedParameter1, wfSt2CircuitDataXmtCnt=wfSt2CircuitDataXmtCnt, wfSt2CircuitScmpXmt=wfSt2CircuitScmpXmt, wfSt2Group=wfSt2Group, wfSt2NeighborTable=wfSt2NeighborTable, wfSt2NeighborEntry=wfSt2NeighborEntry, wfSt2CircuitDataRcvCnt=wfSt2CircuitDataRcvCnt, wfSt2NeighborHelloProtocol=wfSt2NeighborHelloProtocol, wfSt2BaseAgentDBGMask=wfSt2BaseAgentDBGMask, wfSt2NeighborRsvdParameter1=wfSt2NeighborRsvdParameter1, wfSt2CircuitRsvdParameter2=wfSt2CircuitRsvdParameter2, wfSt2CircuitScmp0sVlid=wfSt2CircuitScmp0sVlid, wfSt2CircuitNotSt2=wfSt2CircuitNotSt2, wfSt2CircuitDelete=wfSt2CircuitDelete, wfSt2NeighborRetryHidChange=wfSt2NeighborRetryHidChange, wfSt2CircuitRetryRefuse=wfSt2CircuitRetryRefuse, wfSt2CircuitMTU=wfSt2CircuitMTU, wfSt2CircuitOverDrop2Cnt=wfSt2CircuitOverDrop2Cnt, wfSt2CircuitTmoAccept=wfSt2CircuitTmoAccept, wfSt2CircuitScmpBadVlid=wfSt2CircuitScmpBadVlid, wfSt2CircuitRetryConnect=wfSt2CircuitRetryConnect, wfSt2BaseReservedParameter2=wfSt2BaseReservedParameter2, wfSt2CircuitRetryDisconnect=wfSt2CircuitRetryDisconnect, wfSt2CircuitEncodeWrongParms=wfSt2CircuitEncodeWrongParms, wfSt2CircuitScmpFailedResources=wfSt2CircuitScmpFailedResources, wfSt2CircuitCommonState=wfSt2CircuitCommonState, wfSt2CircuitRetryHidChange=wfSt2CircuitRetryHidChange, wfSt2CircuitRetryHello=wfSt2CircuitRetryHello, wfSt2CircuitDBGMask=wfSt2CircuitDBGMask, wfSt2NeighborTmoAccept=wfSt2NeighborTmoAccept, wfSt2NeighborRetryConnect=wfSt2NeighborRetryConnect, wfSt2CircuitTmoDisconnect=wfSt2CircuitTmoDisconnect, wfSt2NeighborRteExplr=wfSt2NeighborRteExplr, wfSt2NeighborDisable=wfSt2NeighborDisable, wfSt2CircuitSt2StreamCnt=wfSt2CircuitSt2StreamCnt, wfSt2CircuitID=wfSt2CircuitID, wfSt2CircuitScmpCksum=wfSt2CircuitScmpCksum, wfSt2CircuitParmMissing=wfSt2CircuitParmMissing, wfSt2CircuitScmpRefNum=wfSt2CircuitScmpRefNum, wfSt2CircuitScmpLenInconsist=wfSt2CircuitScmpLenInconsist, wfSt2BaseState=wfSt2BaseState, wfSt2CircuitHelloRAckCnt=wfSt2CircuitHelloRAckCnt, wfSt2CircuitTmoHidChange=wfSt2CircuitTmoHidChange, wfSt2CircuitScmpRxTimeOut=wfSt2CircuitScmpRxTimeOut, wfSt2CircuitScmpFailedRoute=wfSt2CircuitScmpFailedRoute, wfSt2CircuitTable=wfSt2CircuitTable, wfSt2NeighborNxtHopIPAddr=wfSt2NeighborNxtHopIPAddr, wfSt2CircuitScmp0rVlid=wfSt2CircuitScmp0rVlid, wfSt2CircuitPktCnt=wfSt2CircuitPktCnt, wfSt2CircuitHelloFailure=wfSt2CircuitHelloFailure, wfSt2CircuitCommonType=wfSt2CircuitCommonType, wfSt2CircuitTmoHello=wfSt2CircuitTmoHello, wfSt2NeighborRetryRefuse=wfSt2NeighborRetryRefuse, wfSt2CircuitIPAddress=wfSt2CircuitIPAddress, wfSt2CircuitEncodeBadParm=wfSt2CircuitEncodeBadParm, wfSt2CircuitBadStCksum=wfSt2CircuitBadStCksum, wfSt2NeighborLocalIPAddress=wfSt2NeighborLocalIPAddress, wfSt2NeighborTmoRefuse=wfSt2NeighborTmoRefuse, wfSt2CircuitEntry=wfSt2CircuitEntry, wfSt2NeighborTmoConnect=wfSt2NeighborTmoConnect, wfSt2NeighborRsvdParameter2=wfSt2NeighborRsvdParameter2, wfSt2CircuitHidProposed=wfSt2CircuitHidProposed, wfSt2CircuitTmoConnect=wfSt2CircuitTmoConnect, wfSt2CircuitDisable=wfSt2CircuitDisable, wfSt2CircuitRsvdParameter1=wfSt2CircuitRsvdParameter1)
