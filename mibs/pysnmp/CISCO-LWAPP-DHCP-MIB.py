#
# PySNMP MIB module CISCO-LWAPP-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-DHCP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:47:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoURLString, = mibBuilder.importSymbols("CISCO-TC", "CiscoURLString")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Counter64, iso, Bits, IpAddress, Integer32, NotificationType, Unsigned32, MibIdentifier, TimeTicks, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "iso", "Bits", "IpAddress", "Integer32", "NotificationType", "Unsigned32", "MibIdentifier", "TimeTicks", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, DisplayString, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "TimeStamp")
ciscoLwappDhcpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 792))
ciscoLwappDhcpMIB.setRevisions(('2012-01-31 00:00',))
if mibBuilder.loadTexts: ciscoLwappDhcpMIB.setLastUpdated('201204050000Z')
if mibBuilder.loadTexts: ciscoLwappDhcpMIB.setOrganization('Cisco Systems Inc.')
ciscoLwappDhcpMIBNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 0))
ciscoLwappDhcpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1))
ciscoLwappDhcpMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 2))
ciscoLwappDhcpGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1))
ciscoLwappDhcpStatsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2))
ciscoLwappDhcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3))
ciscoLwappDhcpScopeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4))
ciscoLwappDhcpMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 5))
cLDhcpClearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpClearAllStats.setStatus('current')
cLDhcpOpt82RemoteIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("apMac", 1), ("apMacSsid", 2), ("apEthMac", 3), ("apNameSsid", 4), ("apGroupName", 5), ("flexGroupName", 6), ("apLocation", 7), ("apMacVlanId", 8), ("apNameVlanId", 9), ("apEthMacSsid", 10))).clone('apMac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpOpt82RemoteIdFormat.setStatus('current')
cLDhcpClearAllDiscontinuityTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpClearAllDiscontinuityTime.setStatus('current')
cLDhcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpTimeout.setStatus('current')
cLDhcpOpt37RemoteIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("apMac", 1), ("apMacSsid", 2), ("apEthMac", 3), ("apNameSsid", 4), ("apGroupName", 5), ("flexGroupName", 6), ("apLocation", 7), ("apMacVlanId", 8), ("apNameVlanId", 9), ("apEthMacSsid", 10))).clone('apMac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpOpt37RemoteIdFormat.setStatus('current')
cLDhcpStatsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1), )
if mibBuilder.loadTexts: cLDhcpStatsConfigTable.setStatus('current')
cLDhcpStatsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DHCP-MIB", "cLDhcpServerInetAddressType"), (0, "CISCO-LWAPP-DHCP-MIB", "cLDhcpServerInetAddress"))
if mibBuilder.loadTexts: cLDhcpStatsConfigEntry.setStatus('current')
cLDhcpServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLDhcpServerInetAddressType.setStatus('current')
cLDhcpServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLDhcpServerInetAddress.setStatus('current')
cLDhcpClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpClearStats.setStatus('current')
cLDhcpClearDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpClearDiscontinuityTime.setStatus('current')
cLDhcpStatsShowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1), )
if mibBuilder.loadTexts: cLDhcpStatsShowTable.setStatus('current')
cLDhcpStatsShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DHCP-MIB", "cLDhcpServerInetAddressType"), (0, "CISCO-LWAPP-DHCP-MIB", "cLDhcpServerInetAddress"))
if mibBuilder.loadTexts: cLDhcpStatsShowEntry.setStatus('current')
cLDhcpProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpProxy.setStatus('current')
cLDhcpDiscoverPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpDiscoverPackets.setStatus('current')
cLDhcpRequestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpRequestPackets.setStatus('current')
cLDhcpDeclinePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpDeclinePackets.setStatus('current')
cLDhcpInformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpInformPackets.setStatus('current')
cLDhcpReleasePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpReleasePackets.setStatus('current')
cLDhcpReplyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpReplyPackets.setStatus('current')
cLDhcpOfferPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpOfferPackets.setStatus('current')
cLDhcpAckPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpAckPackets.setStatus('current')
cLDhcpNakPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpNakPackets.setStatus('current')
cLDhcpTxFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpTxFailures.setStatus('current')
cLDhcpLastResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 12), TimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpLastResponseTime.setStatus('current')
cLDhcpLastRequestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 13), TimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpLastRequestTime.setStatus('current')
cLDhcpRxDiscoverPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpRxDiscoverPackets.setStatus('current')
cLDhcpScopeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1), )
if mibBuilder.loadTexts: cLDhcpScopeStatsTable.setStatus('current')
cLDhcpScopeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DHCP-MIB", "cLDhcpScopeIndex"))
if mibBuilder.loadTexts: cLDhcpScopeStatsEntry.setStatus('current')
cLDhcpScopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLDhcpScopeIndex.setStatus('current')
cLDhcpScopeAddressPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 2), Unsigned32()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeAddressPoolUsage.setStatus('current')
cLDhcpScopeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeName.setStatus('current')
cLDhcpScopeAllocatedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeAllocatedIP.setStatus('current')
cLDhcpScopeAvailableIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeAvailableIP.setStatus('current')
cLDhcpScopeDiscoverPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeDiscoverPkts.setStatus('current')
cLDhcpScopeAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeAckPkts.setStatus('current')
cLDhcpScopeOfferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeOfferPkts.setStatus('current')
cLDhcpScopeTotalAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeTotalAckPkts.setStatus('current')
cLDhcpScopeRequestPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeRequestPkts.setStatus('current')
cLDhcpScopeRequestGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeRequestGoodPkts.setStatus('current')
cLDhcpTrapSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 5, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpTrapSet.setStatus('current')
ciscoLwappDhcpScopeAddressExhaust = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 792, 0, 1)).setObjects(("CISCO-LWAPP-DHCP-MIB", "cLDhcpScopeName"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpTrapSet"))
if mibBuilder.loadTexts: ciscoLwappDhcpScopeAddressExhaust.setStatus('current')
ciscoLwappDhcpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 2, 1))
ciscoLwappDhcpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 2, 2))
ciscoLwappDhcpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 792, 2, 1, 1)).setObjects(("CISCO-LWAPP-DHCP-MIB", "ciscoLwappDhcpMIBConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDhcpMIBCompliance = ciscoLwappDhcpMIBCompliance.setStatus('current')
ciscoLwappDhcpMIBConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 792, 2, 2, 1)).setObjects(("CISCO-LWAPP-DHCP-MIB", "cLDhcpClearAllStats"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpOpt82RemoteIdFormat"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpClearAllDiscontinuityTime"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpTimeout"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpOpt37RemoteIdFormat"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpClearStats"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpClearDiscontinuityTime"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpProxy"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpDiscoverPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpRequestPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpDeclinePackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpInformPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpReleasePackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpReplyPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpOfferPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpAckPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpNakPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpTxFailures"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpLastResponseTime"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpLastRequestTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDhcpMIBConfigGroup = ciscoLwappDhcpMIBConfigGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-LWAPP-DHCP-MIB", ciscoLwappDhcpStatsConfig=ciscoLwappDhcpStatsConfig, cLDhcpStatsShowTable=cLDhcpStatsShowTable, cLDhcpOpt82RemoteIdFormat=cLDhcpOpt82RemoteIdFormat, cLDhcpScopeIndex=cLDhcpScopeIndex, ciscoLwappDhcpMIBCompliances=ciscoLwappDhcpMIBCompliances, ciscoLwappDhcpMIBNotifObjects=ciscoLwappDhcpMIBNotifObjects, cLDhcpScopeRequestPkts=cLDhcpScopeRequestPkts, cLDhcpLastResponseTime=cLDhcpLastResponseTime, ciscoLwappDhcpGlobalConfig=ciscoLwappDhcpGlobalConfig, cLDhcpInformPackets=cLDhcpInformPackets, cLDhcpReplyPackets=cLDhcpReplyPackets, cLDhcpStatsConfigEntry=cLDhcpStatsConfigEntry, cLDhcpServerInetAddressType=cLDhcpServerInetAddressType, cLDhcpScopeAllocatedIP=cLDhcpScopeAllocatedIP, cLDhcpScopeAckPkts=cLDhcpScopeAckPkts, cLDhcpScopeTotalAckPkts=cLDhcpScopeTotalAckPkts, cLDhcpClearDiscontinuityTime=cLDhcpClearDiscontinuityTime, cLDhcpStatsConfigTable=cLDhcpStatsConfigTable, cLDhcpStatsShowEntry=cLDhcpStatsShowEntry, cLDhcpOfferPackets=cLDhcpOfferPackets, cLDhcpRxDiscoverPackets=cLDhcpRxDiscoverPackets, cLDhcpScopeStatsTable=cLDhcpScopeStatsTable, cLDhcpScopeRequestGoodPkts=cLDhcpScopeRequestGoodPkts, cLDhcpAckPackets=cLDhcpAckPackets, ciscoLwappDhcpMIBCompliance=ciscoLwappDhcpMIBCompliance, ciscoLwappDhcpScopeStats=ciscoLwappDhcpScopeStats, cLDhcpScopeOfferPkts=cLDhcpScopeOfferPkts, ciscoLwappDhcpMIBNotif=ciscoLwappDhcpMIBNotif, ciscoLwappDhcpMIBConform=ciscoLwappDhcpMIBConform, cLDhcpDiscoverPackets=cLDhcpDiscoverPackets, cLDhcpScopeName=cLDhcpScopeName, cLDhcpTimeout=cLDhcpTimeout, cLDhcpLastRequestTime=cLDhcpLastRequestTime, cLDhcpTxFailures=cLDhcpTxFailures, cLDhcpScopeAddressPoolUsage=cLDhcpScopeAddressPoolUsage, cLDhcpTrapSet=cLDhcpTrapSet, PYSNMP_MODULE_ID=ciscoLwappDhcpMIB, ciscoLwappDhcpMIBGroups=ciscoLwappDhcpMIBGroups, cLDhcpDeclinePackets=cLDhcpDeclinePackets, cLDhcpScopeDiscoverPkts=cLDhcpScopeDiscoverPkts, ciscoLwappDhcpMIBConfigGroup=ciscoLwappDhcpMIBConfigGroup, cLDhcpClearAllDiscontinuityTime=cLDhcpClearAllDiscontinuityTime, cLDhcpOpt37RemoteIdFormat=cLDhcpOpt37RemoteIdFormat, cLDhcpScopeStatsEntry=cLDhcpScopeStatsEntry, ciscoLwappDhcpStats=ciscoLwappDhcpStats, cLDhcpProxy=cLDhcpProxy, cLDhcpClearStats=cLDhcpClearStats, ciscoLwappDhcpScopeAddressExhaust=ciscoLwappDhcpScopeAddressExhaust, ciscoLwappDhcpMIB=ciscoLwappDhcpMIB, cLDhcpClearAllStats=cLDhcpClearAllStats, cLDhcpNakPackets=cLDhcpNakPackets, cLDhcpScopeAvailableIP=cLDhcpScopeAvailableIP, ciscoLwappDhcpMIBObjects=ciscoLwappDhcpMIBObjects, cLDhcpReleasePackets=cLDhcpReleasePackets, cLDhcpRequestPackets=cLDhcpRequestPackets, cLDhcpServerInetAddress=cLDhcpServerInetAddress)
