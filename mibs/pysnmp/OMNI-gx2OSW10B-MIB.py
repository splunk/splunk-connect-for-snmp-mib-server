#
# PySNMP MIB module OMNI-gx2OSW10B-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2OSW10B-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
gx2Osw10b, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Osw10b")
trapNetworkElemAvailStatus, trapText, trapChangedObjectId, trapChangedValueInteger, trapNETrapLastTrapTimeStamp, trapPerceivedSeverity, trapNetworkElemAlarmStatus, trapNetworkElemAdminState, trapNetworkElemModelNumber, trapNetworkElemSerialNum, trapChangedValueDisplayString, trapIdentifier, trapNetworkElemOperState = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus", "trapText", "trapChangedObjectId", "trapChangedValueInteger", "trapNETrapLastTrapTimeStamp", "trapPerceivedSeverity", "trapNetworkElemAlarmStatus", "trapNetworkElemAdminState", "trapNetworkElemModelNumber", "trapNetworkElemSerialNum", "trapChangedValueDisplayString", "trapIdentifier", "trapNetworkElemOperState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, ModuleIdentity, Counter32, iso, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, MibIdentifier, Counter64, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "ModuleIdentity", "Counter32", "iso", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "MibIdentifier", "Counter64", "ObjectIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2Osw10bDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 1))
gx2Osw10bAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2), )
if mibBuilder.loadTexts: gx2Osw10bAnalogTable.setStatus('mandatory')
gx2Osw10bAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1), ).setIndexNames((0, "OMNI-gx2OSW10B-MIB", "gx2Osw10bAnalogTableIndex"))
if mibBuilder.loadTexts: gx2Osw10bAnalogEntry.setStatus('mandatory')
gx2Osw10bDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3), )
if mibBuilder.loadTexts: gx2Osw10bDigitalTable.setStatus('mandatory')
gx2Osw10bDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2), ).setIndexNames((0, "OMNI-gx2OSW10B-MIB", "gx2Osw10bDigitalTableIndex"))
if mibBuilder.loadTexts: gx2Osw10bDigitalEntry.setStatus('mandatory')
gx2Osw10bStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4), )
if mibBuilder.loadTexts: gx2Osw10bStatusTable.setStatus('mandatory')
gx2Osw10bStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3), ).setIndexNames((0, "OMNI-gx2OSW10B-MIB", "gx2Osw10bStatusTableIndex"))
if mibBuilder.loadTexts: gx2Osw10bStatusEntry.setStatus('mandatory')
gx2Osw10bFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5), )
if mibBuilder.loadTexts: gx2Osw10bFactoryTable.setStatus('mandatory')
gx2Osw10bFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4), ).setIndexNames((0, "OMNI-gx2OSW10B-MIB", "gx2Osw10bFactoryTableIndex"))
if mibBuilder.loadTexts: gx2Osw10bFactoryEntry.setStatus('mandatory')
gx2Osw10bHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 6), )
if mibBuilder.loadTexts: gx2Osw10bHoldTimeTable.setStatus('mandatory')
gx2Osw10bHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 6, 5), ).setIndexNames((0, "OMNI-gx2OSW10B-MIB", "rxgx2Osw10bHoldTimeTableIndex"), (0, "OMNI-gx2OSW10B-MIB", "rxgx2Osw10bHoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2Osw10bHoldTimeEntry.setStatus('mandatory')
gx2Osw10bAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Osw10bAnalogTableIndex.setStatus('mandatory')
osw10blabelPriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelPriOpticalInputLevel.setStatus('optional')
osw10buomPriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10buomPriOpticalInputLevel.setStatus('optional')
osw10bmajorHighPriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorHighPriOpticalInputLevel.setStatus('mandatory')
osw10bmajorLowPriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorLowPriOpticalInputLevel.setStatus('mandatory')
osw10bminorHighPriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorHighPriOpticalInputLevel.setStatus('mandatory')
osw10bminorLowPriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorLowPriOpticalInputLevel.setStatus('mandatory')
osw10bcurrentValuePriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bcurrentValuePriOpticalInputLevel.setStatus('mandatory')
osw10bstateFlagPriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateFlagPriOpticalInputLevel.setStatus('mandatory')
osw10bminValuePriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminValuePriOpticalInputLevel.setStatus('mandatory')
osw10bmaxValuePriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmaxValuePriOpticalInputLevel.setStatus('mandatory')
osw10balarmStatePriOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10balarmStatePriOpticalInputLevel.setStatus('mandatory')
osw10blabelSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelSecOpticalInputLevel.setStatus('optional')
osw10buomSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10buomSecOpticalInputLevel.setStatus('optional')
osw10bmajorHighSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorHighSecOpticalInputLevel.setStatus('mandatory')
osw10bmajorLowSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorLowSecOpticalInputLevel.setStatus('mandatory')
osw10bminorHighSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorHighSecOpticalInputLevel.setStatus('mandatory')
osw10bminorLowSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorLowSecOpticalInputLevel.setStatus('mandatory')
osw10bcurrentValueSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bcurrentValueSecOpticalInputLevel.setStatus('mandatory')
osw10bstateFlagSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateFlagSecOpticalInputLevel.setStatus('mandatory')
osw10bminValueSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminValueSecOpticalInputLevel.setStatus('mandatory')
osw10bmaxValueSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmaxValueSecOpticalInputLevel.setStatus('mandatory')
osw10balarmStateSecOpticalInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10balarmStateSecOpticalInputLevel.setStatus('mandatory')
osw10blabelPriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelPriOpticalThreshold.setStatus('optional')
osw10buomPriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10buomPriOpticalThreshold.setStatus('optional')
osw10bmajorHighPriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorHighPriOpticalThreshold.setStatus('mandatory')
osw10bmajorLowPriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorLowPriOpticalThreshold.setStatus('mandatory')
osw10bminorHighPriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorHighPriOpticalThreshold.setStatus('mandatory')
osw10bminorLowPriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorLowPriOpticalThreshold.setStatus('mandatory')
osw10bcurrentValuePriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 30), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osw10bcurrentValuePriOpticalThreshold.setStatus('mandatory')
osw10bstateFlagPriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateFlagPriOpticalThreshold.setStatus('mandatory')
osw10bminValuePriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 32), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osw10bminValuePriOpticalThreshold.setStatus('mandatory')
osw10bmaxValuePriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmaxValuePriOpticalThreshold.setStatus('mandatory')
osw10balarmStatePriOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10balarmStatePriOpticalThreshold.setStatus('mandatory')
osw10blabelSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelSecOpticalThreshold.setStatus('optional')
osw10buomSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10buomSecOpticalThreshold.setStatus('optional')
osw10bmajorHighSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorHighSecOpticalThreshold.setStatus('mandatory')
osw10bmajorLowSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorLowSecOpticalThreshold.setStatus('mandatory')
osw10bminorHighSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorHighSecOpticalThreshold.setStatus('mandatory')
osw10bminorLowSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorLowSecOpticalThreshold.setStatus('mandatory')
osw10bcurrentValueSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 41), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osw10bcurrentValueSecOpticalThreshold.setStatus('mandatory')
osw10bstateFlagSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateFlagSecOpticalThreshold.setStatus('mandatory')
osw10bminValueSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminValueSecOpticalThreshold.setStatus('mandatory')
osw10bmaxValueSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmaxValueSecOpticalThreshold.setStatus('mandatory')
osw10balarmStateSecOpticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10balarmStateSecOpticalThreshold.setStatus('mandatory')
osw10blabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelModTemp.setStatus('optional')
osw10buomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10buomModTemp.setStatus('optional')
osw10bmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorHighModTemp.setStatus('mandatory')
osw10bmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorLowModTemp.setStatus('mandatory')
osw10bminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorHighModTemp.setStatus('mandatory')
osw10bminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorLowModTemp.setStatus('mandatory')
osw10bcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bcurrentValueModTemp.setStatus('mandatory')
osw10bstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateFlagModTemp.setStatus('mandatory')
osw10bminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminValueModTemp.setStatus('mandatory')
osw10bmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmaxValueModTemp.setStatus('mandatory')
osw10balarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10balarmStateModTemp.setStatus('mandatory')
osw10blabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelFanCurrent.setStatus('optional')
osw10buomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10buomFanCurrent.setStatus('optional')
osw10bmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorHighFanCurrent.setStatus('mandatory')
osw10bmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmajorLowFanCurrent.setStatus('mandatory')
osw10bminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorHighFanCurrent.setStatus('mandatory')
osw10bminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminorLowFanCurrent.setStatus('mandatory')
osw10bcurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bcurrentValueFanCurrent.setStatus('mandatory')
osw10bstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateFlagFanCurrent.setStatus('mandatory')
osw10bminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bminValueFanCurrent.setStatus('mandatory')
osw10bmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bmaxValueFanCurrent.setStatus('mandatory')
osw10balarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10balarmStateFanCurrent.setStatus('mandatory')
gx2Osw10bDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Osw10bDigitalTableIndex.setStatus('mandatory')
osw10blabelSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelSwitchControl.setStatus('optional')
osw10benumSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10benumSwitchControl.setStatus('optional')
osw10bvalueSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("through", 1), ("crossover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osw10bvalueSwitchControl.setStatus('mandatory')
osw10bstateflagSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagSwitchControl.setStatus('mandatory')
osw10blabelSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelSwitchMode.setStatus('optional')
osw10benumSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10benumSwitchMode.setStatus('optional')
osw10bvalueSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osw10bvalueSwitchMode.setStatus('mandatory')
osw10bstateflagSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagSwitchMode.setStatus('mandatory')
osw10blabelRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelRevertMode.setStatus('optional')
osw10benumRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10benumRevertMode.setStatus('optional')
osw10bvalueRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osw10bvalueRevertMode.setStatus('mandatory')
osw10bstateflagRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagRevertMode.setStatus('mandatory')
osw10blabelRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelRevertTime.setStatus('optional')
osw10benumRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10benumRevertTime.setStatus('optional')
osw10bvalueRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tensec", 1), ("sixtysec", 2), ("sixhundredsec", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osw10bvalueRevertTime.setStatus('mandatory')
osw10bstateflagRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagRevertTime.setStatus('mandatory')
osw10blabelWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelWavelength.setStatus('optional')
osw10benumWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10benumWavelength.setStatus('optional')
osw10bvalueWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("thirteentennm", 1), ("fifteenfiftynnm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osw10bvalueWavelength.setStatus('mandatory')
osw10bstateflagWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagWavelength.setStatus('mandatory')
osw10blabelSwitchMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelSwitchMonitor.setStatus('optional')
osw10benumSwitchMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10benumSwitchMonitor.setStatus('optional')
osw10bvalueSwitchMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("through", 1), ("crossover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvalueSwitchMonitor.setStatus('mandatory')
osw10bstateflagSwitchMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagSwitchMonitor.setStatus('mandatory')
osw10blabelOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelOperationMode.setStatus('optional')
osw10benumOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10benumOperationMode.setStatus('optional')
osw10bvalueOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode2x1", 1), ("mode1x2", 2), ("mode2x2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osw10bvalueOperationMode.setStatus('mandatory')
osw10bstateflagOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagOperationMode.setStatus('mandatory')
osw10blabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelFactoryDefault.setStatus('optional')
osw10benumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10benumFactoryDefault.setStatus('optional')
osw10bvalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osw10bvalueFactoryDefault.setStatus('mandatory')
osw10bstateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 3, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagFactoryDefault.setStatus('mandatory')
gx2Osw10bStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Osw10bStatusTableIndex.setStatus('mandatory')
osw10blabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelBoot.setStatus('optional')
osw10bvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvalueBoot.setStatus('mandatory')
osw10bstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagBoot.setStatus('mandatory')
osw10blabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelFlash.setStatus('optional')
osw10bvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvalueFlash.setStatus('mandatory')
osw10bstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagFlash.setStatus('mandatory')
osw10blabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelFactoryDataCRC.setStatus('optional')
osw10bvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvalueFactoryDataCRC.setStatus('mandatory')
osw10bstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagFactoryDataCRC.setStatus('mandatory')
osw10blabelCalibrateTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelCalibrateTableStatus.setStatus('optional')
osw10bvalueCalibrateTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvalueCalibrateTableStatus.setStatus('mandatory')
osw10bstateflagCalibrateTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagCalibrateTableStatus.setStatus('mandatory')
osw10blabelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelAlarmDataCrc.setStatus('optional')
osw10bvalueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvalueAlarmDataCrc.setStatus('mandatory')
osw10bstateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagAlarmDataCrc.setStatus('mandatory')
osw10blabelInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelInputStatus.setStatus('obsolete')
osw10bvalueInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvalueInputStatus.setStatus('obsolete')
osw10bstateflagInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagInputStatus.setStatus('obsolete')
osw10blabelPriActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelPriActiveStatus.setStatus('optional')
osw10bvaluePriActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvaluePriActiveStatus.setStatus('mandatory')
osw10bstateflagPriActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagPriActiveStatus.setStatus('mandatory')
osw10blabelHardwareErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelHardwareErr.setStatus('optional')
osw10bvalueHardwareErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvalueHardwareErr.setStatus('mandatory')
osw10bstateflagHardwareErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagHardwareErr.setStatus('mandatory')
osw10blabelPriThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelPriThresholdStatus.setStatus('optional')
osw10bvaluePriThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvaluePriThresholdStatus.setStatus('mandatory')
osw10bstateflagPriThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagPriThresholdStatus.setStatus('mandatory')
osw10blabelSecThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10blabelSecThresholdStatus.setStatus('optional')
osw10bvalueSecThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bvalueSecThresholdStatus.setStatus('mandatory')
osw10bstateflagSecThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 4, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bstateflagSecThresholdStatus.setStatus('mandatory')
gx2Osw10bFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Osw10bFactoryTableIndex.setStatus('mandatory')
osw10bbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bbootControlByte.setStatus('mandatory')
osw10bbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bbootStatusByte.setStatus('mandatory')
osw10bbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bbank1CRC.setStatus('mandatory')
osw10bbank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bbank2CRC.setStatus('mandatory')
osw10bprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bprgEEPROMByte.setStatus('mandatory')
osw10bfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bfactoryCRC.setStatus('mandatory')
osw10bcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("factory", 1), ("calTable", 2), ("alarm", 3), ("na", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bcalculateCRC.setStatus('mandatory')
osw10bhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bhourMeter.setStatus('mandatory')
osw10bflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bflashPrgCntA.setStatus('mandatory')
osw10bflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bflashPrgCntB.setStatus('mandatory')
osw10bflashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bflashBankARev.setStatus('mandatory')
osw10bflashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osw10bflashBankBRev.setStatus('mandatory')
rxgx2Osw10bHoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Osw10bHoldTimeTableIndex.setStatus('mandatory')
rxgx2Osw10bHoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Osw10bHoldTimeSpecIndex.setStatus('mandatory')
rxgx2Osw10bHoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxgx2Osw10bHoldTimeData.setStatus('mandatory')
trapOSW10BConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BOpticalInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BCaliDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BInputSwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BSecondaryInputActiveAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BPriOpticInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BSecOpticInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOSW10BHardwareErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 15) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2OSW10B-MIB", osw10blabelFlash=osw10blabelFlash, osw10bstateflagSecThresholdStatus=osw10bstateflagSecThresholdStatus, osw10blabelAlarmDataCrc=osw10blabelAlarmDataCrc, osw10bmajorLowSecOpticalThreshold=osw10bmajorLowSecOpticalThreshold, gx2Osw10bDigitalEntry=gx2Osw10bDigitalEntry, osw10bstateFlagSecOpticalThreshold=osw10bstateFlagSecOpticalThreshold, trapOSW10BSecOpticInputAlarm=trapOSW10BSecOpticInputAlarm, osw10bcurrentValueSecOpticalThreshold=osw10bcurrentValueSecOpticalThreshold, osw10bhourMeter=osw10bhourMeter, osw10bmajorHighSecOpticalInputLevel=osw10bmajorHighSecOpticalInputLevel, trapOSW10BConfigChangeInteger=trapOSW10BConfigChangeInteger, osw10benumOperationMode=osw10benumOperationMode, osw10bminorHighSecOpticalThreshold=osw10bminorHighSecOpticalThreshold, osw10benumFactoryDefault=osw10benumFactoryDefault, trapOSW10BInputSwitchedAlarm=trapOSW10BInputSwitchedAlarm, osw10bstateFlagPriOpticalInputLevel=osw10bstateFlagPriOpticalInputLevel, osw10blabelRevertMode=osw10blabelRevertMode, trapOSW10BFlashAlarm=trapOSW10BFlashAlarm, osw10benumWavelength=osw10benumWavelength, osw10bbootControlByte=osw10bbootControlByte, gx2Osw10bFactoryTable=gx2Osw10bFactoryTable, osw10balarmStateSecOpticalThreshold=osw10balarmStateSecOpticalThreshold, osw10buomSecOpticalThreshold=osw10buomSecOpticalThreshold, osw10balarmStateFanCurrent=osw10balarmStateFanCurrent, osw10bminorHighSecOpticalInputLevel=osw10bminorHighSecOpticalInputLevel, osw10blabelWavelength=osw10blabelWavelength, osw10bminorLowPriOpticalThreshold=osw10bminorLowPriOpticalThreshold, osw10blabelInputStatus=osw10blabelInputStatus, trapOSW10BHardwareErrorAlarm=trapOSW10BHardwareErrorAlarm, osw10bminorHighModTemp=osw10bminorHighModTemp, osw10bcurrentValuePriOpticalThreshold=osw10bcurrentValuePriOpticalThreshold, trapOSW10BAlarmDataCRCAlarm=trapOSW10BAlarmDataCRCAlarm, osw10blabelSwitchControl=osw10blabelSwitchControl, osw10bvalueAlarmDataCrc=osw10bvalueAlarmDataCrc, osw10bmajorLowPriOpticalInputLevel=osw10bmajorLowPriOpticalInputLevel, osw10bvalueSwitchControl=osw10bvalueSwitchControl, trapOSW10BFanCurrentAlarm=trapOSW10BFanCurrentAlarm, osw10blabelSwitchMonitor=osw10blabelSwitchMonitor, osw10blabelCalibrateTableStatus=osw10blabelCalibrateTableStatus, osw10bmaxValuePriOpticalInputLevel=osw10bmaxValuePriOpticalInputLevel, osw10bmaxValueSecOpticalThreshold=osw10bmaxValueSecOpticalThreshold, gx2Osw10bFactoryEntry=gx2Osw10bFactoryEntry, osw10bminorLowPriOpticalInputLevel=osw10bminorLowPriOpticalInputLevel, osw10bminValueSecOpticalThreshold=osw10bminValueSecOpticalThreshold, osw10bstateFlagModTemp=osw10bstateFlagModTemp, osw10bmajorLowPriOpticalThreshold=osw10bmajorLowPriOpticalThreshold, rxgx2Osw10bHoldTimeSpecIndex=rxgx2Osw10bHoldTimeSpecIndex, osw10bminValuePriOpticalInputLevel=osw10bminValuePriOpticalInputLevel, osw10blabelRevertTime=osw10blabelRevertTime, osw10bstateflagCalibrateTableStatus=osw10bstateflagCalibrateTableStatus, osw10bmajorHighPriOpticalThreshold=osw10bmajorHighPriOpticalThreshold, osw10bstateflagPriThresholdStatus=osw10bstateflagPriThresholdStatus, osw10bprgEEPROMByte=osw10bprgEEPROMByte, osw10bstateflagSwitchControl=osw10bstateflagSwitchControl, osw10bstateflagSwitchMonitor=osw10bstateflagSwitchMonitor, osw10bvalueFlash=osw10bvalueFlash, osw10blabelHardwareErr=osw10blabelHardwareErr, osw10bcurrentValueModTemp=osw10bcurrentValueModTemp, gx2Osw10bStatusEntry=gx2Osw10bStatusEntry, osw10bvalueSwitchMode=osw10bvalueSwitchMode, osw10bstateflagWavelength=osw10bstateflagWavelength, gx2Osw10bDescriptor=gx2Osw10bDescriptor, osw10bstateflagAlarmDataCrc=osw10bstateflagAlarmDataCrc, osw10blabelPriActiveStatus=osw10blabelPriActiveStatus, osw10blabelFactoryDataCRC=osw10blabelFactoryDataCRC, gx2Osw10bAnalogEntry=gx2Osw10bAnalogEntry, osw10blabelModTemp=osw10blabelModTemp, osw10blabelBoot=osw10blabelBoot, osw10bfactoryCRC=osw10bfactoryCRC, osw10bvalueOperationMode=osw10bvalueOperationMode, osw10buomSecOpticalInputLevel=osw10buomSecOpticalInputLevel, gx2Osw10bDigitalTableIndex=gx2Osw10bDigitalTableIndex, osw10blabelPriOpticalInputLevel=osw10blabelPriOpticalInputLevel, trapOSW10BSecondaryInputActiveAlarm=trapOSW10BSecondaryInputActiveAlarm, osw10bmajorHighPriOpticalInputLevel=osw10bmajorHighPriOpticalInputLevel, osw10bstateFlagFanCurrent=osw10bstateFlagFanCurrent, osw10bminValuePriOpticalThreshold=osw10bminValuePriOpticalThreshold, osw10bstateFlagPriOpticalThreshold=osw10bstateFlagPriOpticalThreshold, trapOSW10BOpticalInputAlarm=trapOSW10BOpticalInputAlarm, osw10buomFanCurrent=osw10buomFanCurrent, osw10bminorLowFanCurrent=osw10bminorLowFanCurrent, osw10bmaxValueModTemp=osw10bmaxValueModTemp, osw10bminorHighPriOpticalInputLevel=osw10bminorHighPriOpticalInputLevel, osw10bvalueCalibrateTableStatus=osw10bvalueCalibrateTableStatus, osw10bminorLowSecOpticalInputLevel=osw10bminorLowSecOpticalInputLevel, osw10bmaxValueSecOpticalInputLevel=osw10bmaxValueSecOpticalInputLevel, osw10bminValueModTemp=osw10bminValueModTemp, osw10bstateflagRevertTime=osw10bstateflagRevertTime, osw10benumSwitchMonitor=osw10benumSwitchMonitor, osw10bflashBankARev=osw10bflashBankARev, osw10bmajorLowModTemp=osw10bmajorLowModTemp, osw10bvaluePriActiveStatus=osw10bvaluePriActiveStatus, osw10bstateflagSwitchMode=osw10bstateflagSwitchMode, osw10blabelPriThresholdStatus=osw10blabelPriThresholdStatus, osw10bflashPrgCntB=osw10bflashPrgCntB, osw10bflashBankBRev=osw10bflashBankBRev, osw10bvalueFactoryDataCRC=osw10bvalueFactoryDataCRC, osw10bcalculateCRC=osw10bcalculateCRC, osw10bminorHighFanCurrent=osw10bminorHighFanCurrent, osw10bstateflagPriActiveStatus=osw10bstateflagPriActiveStatus, osw10bminValueSecOpticalInputLevel=osw10bminValueSecOpticalInputLevel, osw10bmajorHighSecOpticalThreshold=osw10bmajorHighSecOpticalThreshold, osw10bbank1CRC=osw10bbank1CRC, osw10blabelPriOpticalThreshold=osw10blabelPriOpticalThreshold, trapOSW10BPriOpticInputAlarm=trapOSW10BPriOpticInputAlarm, osw10blabelSecThresholdStatus=osw10blabelSecThresholdStatus, osw10bminValueFanCurrent=osw10bminValueFanCurrent, osw10benumRevertMode=osw10benumRevertMode, osw10bbootStatusByte=osw10bbootStatusByte, osw10balarmStateSecOpticalInputLevel=osw10balarmStateSecOpticalInputLevel, osw10buomPriOpticalInputLevel=osw10buomPriOpticalInputLevel, osw10bcurrentValuePriOpticalInputLevel=osw10bcurrentValuePriOpticalInputLevel, osw10bmajorLowSecOpticalInputLevel=osw10bmajorLowSecOpticalInputLevel, rxgx2Osw10bHoldTimeTableIndex=rxgx2Osw10bHoldTimeTableIndex, osw10bvalueRevertMode=osw10bvalueRevertMode, osw10balarmStateModTemp=osw10balarmStateModTemp, gx2Osw10bHoldTimeEntry=gx2Osw10bHoldTimeEntry, osw10bstateflagBoot=osw10bstateflagBoot, osw10bcurrentValueSecOpticalInputLevel=osw10bcurrentValueSecOpticalInputLevel, osw10benumRevertTime=osw10benumRevertTime, gx2Osw10bStatusTable=gx2Osw10bStatusTable, gx2Osw10bDigitalTable=gx2Osw10bDigitalTable, gx2Osw10bHoldTimeTable=gx2Osw10bHoldTimeTable, osw10blabelFanCurrent=osw10blabelFanCurrent, osw10benumSwitchMode=osw10benumSwitchMode, osw10buomPriOpticalThreshold=osw10buomPriOpticalThreshold, osw10bmajorLowFanCurrent=osw10bmajorLowFanCurrent, osw10bvalueSecThresholdStatus=osw10bvalueSecThresholdStatus, gx2Osw10bAnalogTable=gx2Osw10bAnalogTable, osw10bminorLowSecOpticalThreshold=osw10bminorLowSecOpticalThreshold, osw10bvalueFactoryDefault=osw10bvalueFactoryDefault, osw10bvalueWavelength=osw10bvalueWavelength, osw10bstateflagFactoryDefault=osw10bstateflagFactoryDefault, osw10bmaxValuePriOpticalThreshold=osw10bmaxValuePriOpticalThreshold, gx2Osw10bFactoryTableIndex=gx2Osw10bFactoryTableIndex, osw10bvalueSwitchMonitor=osw10bvalueSwitchMonitor, osw10bvalueBoot=osw10bvalueBoot, osw10bstateflagFlash=osw10bstateflagFlash, osw10bminorLowModTemp=osw10bminorLowModTemp, trapOSW10BResetFactoryDefaultAlarm=trapOSW10BResetFactoryDefaultAlarm, trapOSW10BBankBootAlarm=trapOSW10BBankBootAlarm, Float=Float, trapOSW10BFactoryDataCRCAlarm=trapOSW10BFactoryDataCRCAlarm, osw10bcurrentValueFanCurrent=osw10bcurrentValueFanCurrent, osw10bstateflagHardwareErr=osw10bstateflagHardwareErr, osw10blabelOperationMode=osw10blabelOperationMode, osw10blabelSecOpticalThreshold=osw10blabelSecOpticalThreshold, osw10bmaxValueFanCurrent=osw10bmaxValueFanCurrent, gx2Osw10bStatusTableIndex=gx2Osw10bStatusTableIndex, osw10bstateflagRevertMode=osw10bstateflagRevertMode, osw10bstateflagFactoryDataCRC=osw10bstateflagFactoryDataCRC, osw10bmajorHighModTemp=osw10bmajorHighModTemp, trapOSW10BConfigChangeDisplayString=trapOSW10BConfigChangeDisplayString, osw10bstateflagInputStatus=osw10bstateflagInputStatus, osw10bflashPrgCntA=osw10bflashPrgCntA, osw10blabelFactoryDefault=osw10blabelFactoryDefault, osw10bstateflagOperationMode=osw10bstateflagOperationMode, osw10bminorHighPriOpticalThreshold=osw10bminorHighPriOpticalThreshold, osw10bstateFlagSecOpticalInputLevel=osw10bstateFlagSecOpticalInputLevel, rxgx2Osw10bHoldTimeData=rxgx2Osw10bHoldTimeData, osw10bvalueRevertTime=osw10bvalueRevertTime, osw10benumSwitchControl=osw10benumSwitchControl, osw10bvalueHardwareErr=osw10bvalueHardwareErr, osw10balarmStatePriOpticalInputLevel=osw10balarmStatePriOpticalInputLevel, osw10bbank2CRC=osw10bbank2CRC, osw10buomModTemp=osw10buomModTemp, trapOSW10BModuleTempAlarm=trapOSW10BModuleTempAlarm, osw10bvaluePriThresholdStatus=osw10bvaluePriThresholdStatus, osw10blabelSecOpticalInputLevel=osw10blabelSecOpticalInputLevel, gx2Osw10bAnalogTableIndex=gx2Osw10bAnalogTableIndex, osw10bmajorHighFanCurrent=osw10bmajorHighFanCurrent, osw10balarmStatePriOpticalThreshold=osw10balarmStatePriOpticalThreshold, trapOSW10BCaliDataCRCAlarm=trapOSW10BCaliDataCRCAlarm, osw10blabelSwitchMode=osw10blabelSwitchMode, osw10bvalueInputStatus=osw10bvalueInputStatus)
