#
# PySNMP MIB module CISCO-MGX82XX-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MGX82XX-SONET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:50:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cwsonetObjects, = mibBuilder.importSymbols("BASIS-MIB", "cwsonetObjects")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibIdentifier, TimeTicks, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Bits, Integer32, Counter64, ObjectIdentity, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "TimeTicks", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Bits", "Integer32", "Counter64", "ObjectIdentity", "IpAddress", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sonetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1))
cwsonetMedium = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2))
cwsonetSection = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3))
cwsonetLine = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4))
cwsonetPath = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5))
sonetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1), )
if mibBuilder.loadTexts: sonetConfigTable.setStatus('mandatory')
sonetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetLineNum"))
if mibBuilder.loadTexts: sonetConfigEntry.setStatus('mandatory')
sonetLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineNum.setStatus('mandatory')
sonetLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sonetSts3c", 1), ("sonetStm1", 2), ("sonetSts12c", 3), ("sonetStm4", 4), ("sonetSts48c", 5), ("sonetStm16", 6), ("sonetSts192c", 7), ("sonetStm64", 8), ("sonetSts3", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineType.setStatus('mandatory')
sonetLineLoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonetNoLoop", 1), ("sonetRemoteLineLoop", 2), ("sonetLocalLineLoop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineLoopbackCommand.setStatus('mandatory')
sonetHCSmasking = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetHCSmasking.setStatus('mandatory')
sonetPayloadScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPayloadScrambling.setStatus('mandatory')
sonetFrameScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFrameScrambling.setStatus('mandatory')
sonetLineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineEnable.setStatus('mandatory')
sonetLineXmtClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("backplaneClk", 1), ("recoverClk", 2), ("localClk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineXmtClkSrc.setStatus('mandatory')
sonetRDIVType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("onebit", 1), ("threebit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetRDIVType.setStatus('mandatory')
sonetRDIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("onebit", 1), ("threebit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetRDIPType.setStatus('mandatory')
sonetTributaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vt15vc11", 1), ("vt2vc12", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTributaryType.setStatus('mandatory')
sonetTributaryMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asynchronous", 1), ("byteSynchronous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTributaryMappingType.setStatus('mandatory')
sonetTributaryFramingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("sf", 2), ("esf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTributaryFramingFormat.setStatus('mandatory')
sonetSignallingTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("signallingTransferMode", 2), ("clearMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSignallingTransportMode.setStatus('mandatory')
sonetTributaryGroupingType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("au3Grouping", 2), ("au4Grouping", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTributaryGroupingType.setStatus('mandatory')
sonetConfigNumOfValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetConfigNumOfValidEntries.setStatus('mandatory')
cwSonetMediumTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1), )
if mibBuilder.loadTexts: cwSonetMediumTable.setStatus('mandatory')
cwSonetMediumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetLineNum"))
if mibBuilder.loadTexts: cwSonetMediumEntry.setStatus('mandatory')
cwSonetMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumType.setStatus('mandatory')
cwSonetMediumTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumTimeElapsed.setStatus('mandatory')
cwSonetMediumValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumValidIntervals.setStatus('mandatory')
cwSonetMediumLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sonetMediumOther", 1), ("sonetMediumB3ZS", 2), ("sonetMediumCMI", 3), ("sonetMediumNRZ", 4), ("sonetMediumRZ", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumLineCoding.setStatus('mandatory')
cwSonetMediumLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sonetOther", 1), ("sonetShortSingleMode", 2), ("sonetLongSingleMode", 3), ("sonetMultiMode", 4), ("sonetCoax", 5), ("sonetUTP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumLineType.setStatus('mandatory')
cwSonetMediumCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumCircuitIdentifier.setStatus('mandatory')
cwSonetSectionCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1), )
if mibBuilder.loadTexts: cwSonetSectionCurrentTable.setStatus('mandatory')
cwSonetSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetSectionCurrentLineNum"))
if mibBuilder.loadTexts: cwSonetSectionCurrentEntry.setStatus('mandatory')
cwSonetSectionCurrentLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentLineNum.setStatus('mandatory')
cwSonetSectionCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentStatus.setStatus('mandatory')
cwSonetSectionCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentValidFlag.setStatus('mandatory')
cwSonetSectionCurrent15minTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrent15minTimeElapsed.setStatus('mandatory')
cwSonetSectionCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentESs.setStatus('mandatory')
cwSonetSectionCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentSESs.setStatus('mandatory')
cwSonetSectionCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentSEFSs.setStatus('mandatory')
cwSonetSectionCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentCVs.setStatus('mandatory')
cwSonetSectionCurrentClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwSonetSectionCurrentClrButton.setStatus('mandatory')
sonetSectionCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2), )
if mibBuilder.loadTexts: sonetSectionCurrentDayTable.setStatus('mandatory')
sonetSectionCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetSectionCurrentDayLineNum"))
if mibBuilder.loadTexts: sonetSectionCurrentDayEntry.setStatus('mandatory')
sonetSectionCurrentDayLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDayLineNum.setStatus('mandatory')
sonetSectionCurrentDayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDayValidFlag.setStatus('mandatory')
sonetSectionCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDayESs.setStatus('mandatory')
sonetSectionCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDaySESs.setStatus('mandatory')
sonetSectionCurrentDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDaySEFSs.setStatus('mandatory')
sonetSectionCurrentDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDayCVs.setStatus('mandatory')
sonetSectionCurrentDayClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentDayClrButton.setStatus('mandatory')
cwSonetSectionIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3), )
if mibBuilder.loadTexts: cwSonetSectionIntervalTable.setStatus('mandatory')
cwSonetSectionIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetSectionIntervalLineNum"), (0, "CISCO-MGX82XX-SONET-MIB", "cwSonetSectionIntervalNumber"))
if mibBuilder.loadTexts: cwSonetSectionIntervalEntry.setStatus('mandatory')
cwSonetSectionIntervalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalLineNum.setStatus('mandatory')
cwSonetSectionIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalNumber.setStatus('mandatory')
cwSonetSectionIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalValidFlag.setStatus('mandatory')
cwSonetSectionIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalESs.setStatus('mandatory')
cwSonetSectionIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalSESs.setStatus('mandatory')
cwSonetSectionIntervalSEFss = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalSEFss.setStatus('mandatory')
cwSonetSectionIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalCVs.setStatus('mandatory')
sonetSectionAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4), )
if mibBuilder.loadTexts: sonetSectionAlarmTable.setStatus('mandatory')
sonetSectionAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sectionAlarmLineNum"))
if mibBuilder.loadTexts: sonetSectionAlarmEntry.setStatus('mandatory')
sectionAlarmLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectionAlarmLineNum.setStatus('mandatory')
sonetSectionStatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionStatisticalAlarmSeverity.setStatus('mandatory')
sonetSectionCurrent15minESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrent15minESsThreshold.setStatus('mandatory')
sonetSectionCurrentDayESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentDayESsThreshold.setStatus('mandatory')
sonetSectionCurrent15minSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrent15minSESsThreshold.setStatus('mandatory')
sonetSectionCurrentDaySESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentDaySESsThreshold.setStatus('mandatory')
sonetSectionCurrent15minSEFSsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrent15minSEFSsThreshold.setStatus('mandatory')
sonetSectionCurrentDaySEFSsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentDaySEFSsThreshold.setStatus('mandatory')
sonetSectionCurrent15minCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrent15minCVsThreshold.setStatus('mandatory')
sonetSectionCurrentDayCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentDayCVsThreshold.setStatus('mandatory')
sonetSectionTraceSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("sixtyFourBytes", 2), ("sixtyFourBytesCrlf", 3), ("sixteenBytes", 4), ("sixteenBytesCrc7", 5), ("sixteenBytesMsb1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionTraceSelection.setStatus('mandatory')
sonetSectionTraceToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionTraceToTransmit.setStatus('mandatory')
sonetSectionTraceToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionTraceToExpect.setStatus('mandatory')
sonetSectionTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionTraceReceived.setStatus('mandatory')
sonetSectionStatAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionStatAlarmStatus.setStatus('mandatory')
sonetSectionCounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5), )
if mibBuilder.loadTexts: sonetSectionCounterTable.setStatus('mandatory')
sonetSectionCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sectionCounterLineNum"))
if mibBuilder.loadTexts: sonetSectionCounterEntry.setStatus('mandatory')
sectionCounterLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectionCounterLineNum.setStatus('mandatory')
sonetSectionCounterLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCounterLOSs.setStatus('mandatory')
sonetSectionCounterLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCounterLOFs.setStatus('mandatory')
sonetSectionCounterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCounterClrButton.setStatus('mandatory')
cwSonetLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1), )
if mibBuilder.loadTexts: cwSonetLineCurrentTable.setStatus('mandatory')
cwSonetLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetLineCurrentLineNum"))
if mibBuilder.loadTexts: cwSonetLineCurrentEntry.setStatus('mandatory')
cwSonetLineCurrentLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentLineNum.setStatus('mandatory')
cwSonetLineCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentStatus.setStatus('mandatory')
cwSonetLineCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentValidFlag.setStatus('mandatory')
cwSonetLineCurrent15minTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrent15minTimeElapsed.setStatus('mandatory')
cwSonetLineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentESs.setStatus('mandatory')
cwSonetLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentSESs.setStatus('mandatory')
cwSonetLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentCVs.setStatus('mandatory')
cwSonetLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentUASs.setStatus('mandatory')
cwSonetLineCurrentClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwSonetLineCurrentClrButton.setStatus('mandatory')
sonetLineCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2), )
if mibBuilder.loadTexts: sonetLineCurrentDayTable.setStatus('mandatory')
sonetLineCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "lineCurrentDayLineNum"))
if mibBuilder.loadTexts: sonetLineCurrentDayEntry.setStatus('mandatory')
lineCurrentDayLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCurrentDayLineNum.setStatus('mandatory')
sonetLineCurrentDayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDayValidFlag.setStatus('mandatory')
sonetLineCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDayESs.setStatus('mandatory')
sonetLineCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDaySESs.setStatus('mandatory')
sonetLineCurrentDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDayCVs.setStatus('mandatory')
sonetLineCurrentDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDayFCs.setStatus('mandatory')
sonetLineCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDayUASs.setStatus('mandatory')
sonetLineCurrentDayClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentDayClrButton.setStatus('mandatory')
cwSonetLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3), )
if mibBuilder.loadTexts: cwSonetLineIntervalTable.setStatus('mandatory')
cwSonetLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetLineIntervalLineNum"), (0, "CISCO-MGX82XX-SONET-MIB", "cwSonetLineIntervalNumber"))
if mibBuilder.loadTexts: cwSonetLineIntervalEntry.setStatus('mandatory')
cwSonetLineIntervalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalLineNum.setStatus('mandatory')
cwSonetLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalNumber.setStatus('mandatory')
cwSonetLineIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalValidFlag.setStatus('mandatory')
cwSonetLineIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalESs.setStatus('mandatory')
cwSonetLineIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalSESs.setStatus('mandatory')
cwSonetLineIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalCVs.setStatus('mandatory')
cwSonetLineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalFCs.setStatus('mandatory')
cwSonetLineIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalUASs.setStatus('mandatory')
cwSonetFarEndLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4), )
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentTable.setStatus('mandatory')
cwSonetFarEndLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFELineCurrentLineNum"))
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentEntry.setStatus('mandatory')
cwSonetFELineCurrentLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFELineCurrentLineNum.setStatus('mandatory')
cwSonetFarEndLineCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentValidFlag.setStatus('mandatory')
cwSonetFarEndLineCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentTimeElapsed.setStatus('mandatory')
cwSonetFarEndLineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentESs.setStatus('mandatory')
cwSonetFarEndLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentSESs.setStatus('mandatory')
cwSonetFarEndLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentCVs.setStatus('mandatory')
cwSonetFarEndLineCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentFCs.setStatus('mandatory')
cwSonetFarEndLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentUASs.setStatus('mandatory')
cwSonetFarEndLineCurrentClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentClrButton.setStatus('mandatory')
sonetFarEndLineCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5), )
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayTable.setStatus('mandatory')
sonetFarEndLineCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetFELineCurrentDayLineNum"))
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayEntry.setStatus('mandatory')
sonetFELineCurrentDayLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFELineCurrentDayLineNum.setStatus('mandatory')
sonetFarEndLineCurrentDayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayValidFlag.setStatus('mandatory')
sonetFarEndLineCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayESs.setStatus('mandatory')
sonetFarEndLineCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDaySESs.setStatus('mandatory')
sonetFarEndLineCurrentDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayCVs.setStatus('mandatory')
sonetFarEndLineCurrentDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayFCs.setStatus('mandatory')
sonetFarEndLineCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayUASs.setStatus('mandatory')
sonetFarEndLineCurrentDayClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayClrButton.setStatus('mandatory')
cwSonetFarEndLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6), )
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalTable.setStatus('mandatory')
cwSonetFarEndLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFELineIntervalLineNum"), (0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFarEndLineIntervalNumber"))
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalEntry.setStatus('mandatory')
cwSonetFELineIntervalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFELineIntervalLineNum.setStatus('mandatory')
cwSonetFarEndLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalNumber.setStatus('mandatory')
cwSonetFarEndLineIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalValidFlag.setStatus('mandatory')
cwSonetFarEndLineIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalESs.setStatus('mandatory')
cwSonetFarEndLineIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalSESs.setStatus('mandatory')
cwSonetFarEndLineIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalCVs.setStatus('mandatory')
cwSonetFarEndLineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalFCs.setStatus('mandatory')
cwSonetFarEndLineIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalUASs.setStatus('mandatory')
sonetLineAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7), )
if mibBuilder.loadTexts: sonetLineAlarmTable.setStatus('mandatory')
sonetLineAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetLineAlarmLineNum"))
if mibBuilder.loadTexts: sonetLineAlarmEntry.setStatus('mandatory')
sonetLineAlarmLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineAlarmLineNum.setStatus('mandatory')
sonetLineStatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineStatisticalAlarmSeverity.setStatus('mandatory')
sonetLineCurrent15minESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrent15minESsThreshold.setStatus('mandatory')
sonetLineCurrentDayESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentDayESsThreshold.setStatus('mandatory')
sonetLineCurrent15minSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrent15minSESsThreshold.setStatus('mandatory')
sonetLineCurrentDaySESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentDaySESsThreshold.setStatus('mandatory')
sonetLineCurrent15minCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrent15minCVsThreshold.setStatus('mandatory')
sonetLineCurrentDayCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentDayCVsThreshold.setStatus('mandatory')
sonetLineCurrent15minUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrent15minUASsThreshold.setStatus('mandatory')
sonetLineCurrentDayUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentDayUASsThreshold.setStatus('mandatory')
sonetLineStatAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineStatAlarmStatus.setStatus('mandatory')
sonetLineCounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8), )
if mibBuilder.loadTexts: sonetLineCounterTable.setStatus('mandatory')
sonetLineCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetLineCounterLineNum"))
if mibBuilder.loadTexts: sonetLineCounterEntry.setStatus('mandatory')
sonetLineCounterLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCounterLineNum.setStatus('mandatory')
sonetLineCounterAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCounterAISs.setStatus('mandatory')
sonetLineCounterRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCounterRFIs.setStatus('mandatory')
sonetLineCounterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCounterClrButton.setStatus('mandatory')
cwSonetPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1), )
if mibBuilder.loadTexts: cwSonetPathCurrentTable.setStatus('mandatory')
cwSonetPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetPathCurrentLineNum"))
if mibBuilder.loadTexts: cwSonetPathCurrentEntry.setStatus('mandatory')
cwSonetPathCurrentLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentLineNum.setStatus('mandatory')
cwSonetPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentStatus.setStatus('mandatory')
cwSonetPathCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentValidFlag.setStatus('mandatory')
cwSonetPathCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentTimeElapsed.setStatus('mandatory')
cwSonetPathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentESs.setStatus('mandatory')
cwSonetPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentSESs.setStatus('mandatory')
cwSonetPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentCVs.setStatus('mandatory')
cwSonetPathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentFCs.setStatus('mandatory')
cwSonetPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentUASs.setStatus('mandatory')
cwSonetPathCurrentClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwSonetPathCurrentClrButton.setStatus('mandatory')
sonetPathCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2), )
if mibBuilder.loadTexts: sonetPathCurrentDayTable.setStatus('mandatory')
sonetPathCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetPathCurrentDayLineNum"))
if mibBuilder.loadTexts: sonetPathCurrentDayEntry.setStatus('mandatory')
sonetPathCurrentDayLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayLineNum.setStatus('mandatory')
sonetPathCurrentDayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayValidFlag.setStatus('mandatory')
sonetPathCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayESs.setStatus('mandatory')
sonetPathCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDaySESs.setStatus('mandatory')
sonetPathCurrentDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayCVs.setStatus('mandatory')
sonetPathCurrentDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayFCs.setStatus('mandatory')
sonetPathCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayUASs.setStatus('mandatory')
sonetPathCurrentDayClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentDayClrButton.setStatus('mandatory')
cwSonetPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3), )
if mibBuilder.loadTexts: cwSonetPathIntervalTable.setStatus('mandatory')
cwSonetPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetPathIntervalLineNum"), (0, "CISCO-MGX82XX-SONET-MIB", "cwSonetPathIntervalNumber"))
if mibBuilder.loadTexts: cwSonetPathIntervalEntry.setStatus('mandatory')
cwSonetPathIntervalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalLineNum.setStatus('mandatory')
cwSonetPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalNumber.setStatus('mandatory')
cwSonetPathIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalValidFlag.setStatus('mandatory')
cwSonetPathIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalESs.setStatus('mandatory')
cwSonetPathIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalSESs.setStatus('mandatory')
cwSonetPathIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalCVs.setStatus('mandatory')
cwSonetPathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalFCs.setStatus('mandatory')
cwSonetPathIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalUASs.setStatus('mandatory')
cwSonetFarEndPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4), )
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentTable.setStatus('mandatory')
cwSonetFarEndPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFEPathCurrentLineNum"))
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentEntry.setStatus('mandatory')
cwSonetFEPathCurrentLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFEPathCurrentLineNum.setStatus('mandatory')
cwSonetFarEndPathCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentValidFlag.setStatus('mandatory')
cwSonetFarEndPathCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentTimeElapsed.setStatus('mandatory')
cwSonetFarEndPathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentESs.setStatus('mandatory')
cwSonetFarEndPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentSESs.setStatus('mandatory')
cwSonetFarEndPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentCVs.setStatus('mandatory')
cwSonetFarEndPathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentFCs.setStatus('mandatory')
cwSonetFarEndPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentUASs.setStatus('mandatory')
cwSonetFarEndPathCurrentClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentClrButton.setStatus('mandatory')
sonetFarEndPathCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5), )
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayTable.setStatus('mandatory')
sonetFarEndPathCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetFEPathCurrentDayLineNum"))
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayEntry.setStatus('mandatory')
sonetFEPathCurrentDayLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFEPathCurrentDayLineNum.setStatus('mandatory')
sonetFarEndPathCurrentDayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayValidFlag.setStatus('mandatory')
sonetFarEndPathCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayESs.setStatus('mandatory')
sonetFarEndPathCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDaySESs.setStatus('mandatory')
sonetFarEndPathCurrentDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayCVs.setStatus('mandatory')
sonetFarEndPathCurrentDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayFCs.setStatus('mandatory')
sonetFarEndPathCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayUASs.setStatus('mandatory')
sonetFarEndPathCurrentDayClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayClrButton.setStatus('mandatory')
cwSonetFarEndPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6), )
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalTable.setStatus('mandatory')
cwSonetFarEndPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFEPathIntervalLineNum"), (0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFarEndPathIntervalNumber"))
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalEntry.setStatus('mandatory')
cwSonetFEPathIntervalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFEPathIntervalLineNum.setStatus('mandatory')
cwSonetFarEndPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalNumber.setStatus('mandatory')
cwSonetFarEndPathIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalValidFlag.setStatus('mandatory')
cwSonetFarEndPathIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalESs.setStatus('mandatory')
cwSonetFarEndPathIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalSESs.setStatus('mandatory')
cwSonetFarEndPathIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalCVs.setStatus('mandatory')
cwSonetFarEndPathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalFCs.setStatus('mandatory')
cwSonetFarEndPathIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalUASs.setStatus('mandatory')
sonetPathAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7), )
if mibBuilder.loadTexts: sonetPathAlarmTable.setStatus('mandatory')
sonetPathAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetPathAlarmLineNum"))
if mibBuilder.loadTexts: sonetPathAlarmEntry.setStatus('mandatory')
sonetPathAlarmLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathAlarmLineNum.setStatus('mandatory')
sonetPathStatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathStatisticalAlarmSeverity.setStatus('mandatory')
sonetPathCurrent15minESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrent15minESsThreshold.setStatus('mandatory')
sonetPathCurrentDayESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentDayESsThreshold.setStatus('mandatory')
sonetPathCurrent15minSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrent15minSESsThreshold.setStatus('mandatory')
sonetPathCurrentDaySESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentDaySESsThreshold.setStatus('mandatory')
sonetPathCurrent15minCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrent15minCVsThreshold.setStatus('mandatory')
sonetPathCurrentDayCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentDayCVsThreshold.setStatus('mandatory')
sonetPathCurrent15minUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrent15minUASsThreshold.setStatus('mandatory')
sonetPathCurrentDayUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentDayUASsThreshold.setStatus('mandatory')
sonetPathTraceSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("sixtyFourBytes", 2), ("sixtyFourBytesCrlf", 3), ("sixteenBytes", 4), ("sixteenBytesCrc7", 5), ("sixteenBytesMsb1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathTraceSelection.setStatus('mandatory')
sonetPathTraceToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathTraceToTransmit.setStatus('mandatory')
sonetPathTraceToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathTraceToExpect.setStatus('mandatory')
sonetPathTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathTraceReceived.setStatus('mandatory')
sonetPathStatAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathStatAlarmStatus.setStatus('mandatory')
sonetPathCounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8), )
if mibBuilder.loadTexts: sonetPathCounterTable.setStatus('mandatory')
sonetPathCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetPathCounterLineNum"))
if mibBuilder.loadTexts: sonetPathCounterEntry.setStatus('mandatory')
sonetPathCounterLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCounterLineNum.setStatus('mandatory')
sonetPathCounterAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCounterAISs.setStatus('mandatory')
sonetPathCounterRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCounterRFIs.setStatus('mandatory')
sonetPathCounterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCounterClrButton.setStatus('mandatory')
sonetApsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6))
sonetApsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1), )
if mibBuilder.loadTexts: sonetApsConfigTable.setStatus('mandatory')
sonetApsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "apsWorkingLine"))
if mibBuilder.loadTexts: sonetApsConfigEntry.setStatus('mandatory')
apsWorkingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsWorkingSlot.setStatus('mandatory')
apsWorkingLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsWorkingLine.setStatus('mandatory')
apsProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsProtectionSlot.setStatus('mandatory')
apsProtectionLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsProtectionLine.setStatus('mandatory')
apsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("apsFeatDisable", 1), ("apsFeatEnable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsEnable.setStatus('mandatory')
apsArchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("singleCardonePlusOne", 1), ("dualCardonePlusOne", 2), ("singleCardOneToOne", 3), ("anexBOnePlusOne", 4), ("anexAOnePlusOne", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsArchMode.setStatus('mandatory')
apsActiveLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("apsWorkingLine", 1), ("apsProtectionLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsActiveLine.setStatus('mandatory')
apsSFBER = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsSFBER.setStatus('mandatory')
apsSDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsSDBER.setStatus('mandatory')
apsWtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsWtr.setStatus('mandatory')
apsdirection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsdirection.setStatus('mandatory')
apsRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonrevertive", 1), ("revertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsRevertive.setStatus('mandatory')
apsK1K2Disable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbandEnable", 1), ("kbandDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsK1K2Disable.setStatus('mandatory')
apsCardFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("apsProtectBCMissing", 1), ("apsProtectDCMissing", 2), ("apsWorkingBCMissing", 3), ("apsWorkingDCMissing", 4), ("apsWorkingCdMismatch", 5), ("apsProtectCdMismatch", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsCardFailureCode.setStatus('mandatory')
apsLineFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("apsSignalDegrade", 1), ("apsSignalFailure", 2), ("apsLineAlarm", 3), ("apsLineLoopBack", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsLineFailureCode.setStatus('mandatory')
apsLineSwReason = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("apsRevertive", 1), ("apsManual", 2), ("apsSignalDefectLow", 3), ("apsSignalDefectHigh", 4), ("apsSignalFailureLow", 5), ("apsSignalFailureHigh", 6), ("apsForceSwitch", 7), ("apsLockOut", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsLineSwReason.setStatus('mandatory')
apsLineSwFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("apsRevertiveSwitchFail", 1), ("apsManualSwitchFail", 2), ("apsSDLowSwitchFail", 3), ("apsSDHighSwitchFail", 4), ("apsSFLowSwitchFail", 5), ("apsSFHighSwitchFail", 6), ("apsForceSwitchFail", 7), ("apsLockOutSwitchFail", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsLineSwFailureCode.setStatus('mandatory')
apsStandbyLineFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("apsSignalDegrade", 1), ("apsSignalFailure", 2), ("apsLineAlarm", 3), ("apsLineLoopBack", 4), ("apsProtectionByteFail", 5), ("apsArchitectureMismatch", 6), ("apsChannelMismatch", 7), ("apsDirectionMismatch", 8), ("apsWrongRequest", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStandbyLineFailureCode.setStatus('mandatory')
mibBuilder.exportSymbols("CISCO-MGX82XX-SONET-MIB", cwSonetFarEndPathCurrentCVs=cwSonetFarEndPathCurrentCVs, sonetSectionTraceToTransmit=sonetSectionTraceToTransmit, sonetPathCounterAISs=sonetPathCounterAISs, sonetPathAlarmTable=sonetPathAlarmTable, sonetHCSmasking=sonetHCSmasking, cwSonetLineIntervalValidFlag=cwSonetLineIntervalValidFlag, cwSonetSectionIntervalSEFss=cwSonetSectionIntervalSEFss, lineCurrentDayLineNum=lineCurrentDayLineNum, sonetSectionCurrent15minCVsThreshold=sonetSectionCurrent15minCVsThreshold, apsProtectionSlot=apsProtectionSlot, cwsonetMedium=cwsonetMedium, cwSonetFarEndPathCurrentEntry=cwSonetFarEndPathCurrentEntry, sonetSectionCurrentDaySEFSsThreshold=sonetSectionCurrentDaySEFSsThreshold, sonetTributaryMappingType=sonetTributaryMappingType, cwSonetLineCurrentClrButton=cwSonetLineCurrentClrButton, cwSonetPathIntervalCVs=cwSonetPathIntervalCVs, sonetLineCounterLineNum=sonetLineCounterLineNum, sonetSectionStatisticalAlarmSeverity=sonetSectionStatisticalAlarmSeverity, sonetSectionCurrentDayCVsThreshold=sonetSectionCurrentDayCVsThreshold, sonetSectionTraceToExpect=sonetSectionTraceToExpect, sonetFarEndLineCurrentDayEntry=sonetFarEndLineCurrentDayEntry, cwSonetPathCurrentSESs=cwSonetPathCurrentSESs, sonetLineCurrentDayESs=sonetLineCurrentDayESs, sonetPathTraceReceived=sonetPathTraceReceived, sonetFrameScrambling=sonetFrameScrambling, sonetPathCurrent15minSESsThreshold=sonetPathCurrent15minSESsThreshold, sonetPathCurrentDayCVs=sonetPathCurrentDayCVs, sonetLineCounterTable=sonetLineCounterTable, cwSonetFarEndLineIntervalFCs=cwSonetFarEndLineIntervalFCs, cwSonetPathCurrentESs=cwSonetPathCurrentESs, cwSonetFarEndLineCurrentTimeElapsed=cwSonetFarEndLineCurrentTimeElapsed, cwSonetFarEndPathIntervalValidFlag=cwSonetFarEndPathIntervalValidFlag, sonetPathCurrentDaySESsThreshold=sonetPathCurrentDaySESsThreshold, cwSonetFarEndPathCurrentFCs=cwSonetFarEndPathCurrentFCs, cwSonetSectionCurrentValidFlag=cwSonetSectionCurrentValidFlag, sonetSectionCurrentDaySESsThreshold=sonetSectionCurrentDaySESsThreshold, sonetSectionCurrentDayValidFlag=sonetSectionCurrentDayValidFlag, cwSonetPathCurrentLineNum=cwSonetPathCurrentLineNum, sonetConfig=sonetConfig, sonetRDIPType=sonetRDIPType, cwSonetFarEndPathIntervalFCs=cwSonetFarEndPathIntervalFCs, cwSonetMediumTimeElapsed=cwSonetMediumTimeElapsed, sonetPathAlarmLineNum=sonetPathAlarmLineNum, sonetLineCurrentDayValidFlag=sonetLineCurrentDayValidFlag, cwSonetMediumEntry=cwSonetMediumEntry, cwSonetPathIntervalSESs=cwSonetPathIntervalSESs, sonetPathCurrent15minCVsThreshold=sonetPathCurrent15minCVsThreshold, sonetPathCurrentDayCVsThreshold=sonetPathCurrentDayCVsThreshold, sonetPathCounterRFIs=sonetPathCounterRFIs, cwSonetFarEndLineCurrentClrButton=cwSonetFarEndLineCurrentClrButton, cwSonetFEPathIntervalLineNum=cwSonetFEPathIntervalLineNum, cwSonetLineCurrentESs=cwSonetLineCurrentESs, cwSonetLineCurrentSESs=cwSonetLineCurrentSESs, sonetPathAlarmEntry=sonetPathAlarmEntry, sonetPathCurrentDayClrButton=sonetPathCurrentDayClrButton, sonetSectionCurrentDayCVs=sonetSectionCurrentDayCVs, apsActiveLine=apsActiveLine, cwSonetSectionIntervalLineNum=cwSonetSectionIntervalLineNum, cwSonetFarEndPathCurrentTable=cwSonetFarEndPathCurrentTable, apsCardFailureCode=apsCardFailureCode, sonetLineStatisticalAlarmSeverity=sonetLineStatisticalAlarmSeverity, cwSonetFarEndLineIntervalUASs=cwSonetFarEndLineIntervalUASs, cwSonetPathIntervalValidFlag=cwSonetPathIntervalValidFlag, cwSonetFarEndLineCurrentUASs=cwSonetFarEndLineCurrentUASs, cwSonetMediumLineCoding=cwSonetMediumLineCoding, cwSonetFarEndPathIntervalCVs=cwSonetFarEndPathIntervalCVs, sectionAlarmLineNum=sectionAlarmLineNum, apsEnable=apsEnable, cwSonetMediumTable=cwSonetMediumTable, sonetSectionCurrent15minESsThreshold=sonetSectionCurrent15minESsThreshold, cwSonetFarEndLineCurrentCVs=cwSonetFarEndLineCurrentCVs, cwSonetPathCurrentTable=cwSonetPathCurrentTable, cwSonetFEPathCurrentLineNum=cwSonetFEPathCurrentLineNum, sonetPathCurrentDayFCs=sonetPathCurrentDayFCs, cwSonetFarEndPathIntervalESs=cwSonetFarEndPathIntervalESs, cwSonetSectionCurrentLineNum=cwSonetSectionCurrentLineNum, sonetSectionTraceReceived=sonetSectionTraceReceived, sonetLineCounterAISs=sonetLineCounterAISs, cwSonetLineCurrent15minTimeElapsed=cwSonetLineCurrent15minTimeElapsed, sonetLineCurrentDaySESs=sonetLineCurrentDaySESs, sonetLineCurrentDayClrButton=sonetLineCurrentDayClrButton, sonetFarEndLineCurrentDayTable=sonetFarEndLineCurrentDayTable, sonetSectionCurrentDayESsThreshold=sonetSectionCurrentDayESsThreshold, cwSonetPathCurrentStatus=cwSonetPathCurrentStatus, apsArchMode=apsArchMode, apsRevertive=apsRevertive, cwSonetLineIntervalCVs=cwSonetLineIntervalCVs, cwSonetSectionCurrentEntry=cwSonetSectionCurrentEntry, apsLineSwReason=apsLineSwReason, sonetLineType=sonetLineType, cwSonetPathCurrentEntry=cwSonetPathCurrentEntry, sonetRDIVType=sonetRDIVType, apsdirection=apsdirection, cwSonetPathCurrentTimeElapsed=cwSonetPathCurrentTimeElapsed, apsLineFailureCode=apsLineFailureCode, sonetFarEndLineCurrentDayFCs=sonetFarEndLineCurrentDayFCs, sonetPathCurrentDayLineNum=sonetPathCurrentDayLineNum, cwSonetPathIntervalLineNum=cwSonetPathIntervalLineNum, sonetConfigEntry=sonetConfigEntry, sonetPayloadScrambling=sonetPayloadScrambling, cwSonetSectionIntervalTable=cwSonetSectionIntervalTable, cwSonetFarEndLineCurrentEntry=cwSonetFarEndLineCurrentEntry, cwSonetPathCurrentCVs=cwSonetPathCurrentCVs, cwSonetFarEndLineCurrentESs=cwSonetFarEndLineCurrentESs, sonetLineCurrent15minESsThreshold=sonetLineCurrent15minESsThreshold, sonetApsConfigEntry=sonetApsConfigEntry, cwSonetPathIntervalUASs=cwSonetPathIntervalUASs, sonetPathCurrentDayValidFlag=sonetPathCurrentDayValidFlag, sonetFarEndLineCurrentDayClrButton=sonetFarEndLineCurrentDayClrButton, sonetSectionCurrentDayEntry=sonetSectionCurrentDayEntry, cwSonetSectionCurrentSEFSs=cwSonetSectionCurrentSEFSs, cwSonetSectionCurrent15minTimeElapsed=cwSonetSectionCurrent15minTimeElapsed, sonetPathCurrentDayTable=sonetPathCurrentDayTable, sonetPathTraceSelection=sonetPathTraceSelection, sonetFarEndPathCurrentDayESs=sonetFarEndPathCurrentDayESs, sonetSectionCounterTable=sonetSectionCounterTable, cwSonetSectionIntervalESs=cwSonetSectionIntervalESs, cwSonetLineIntervalFCs=cwSonetLineIntervalFCs, cwSonetSectionCurrentTable=cwSonetSectionCurrentTable, cwSonetFELineCurrentLineNum=cwSonetFELineCurrentLineNum, sonetLineCounterRFIs=sonetLineCounterRFIs, cwSonetFarEndPathCurrentValidFlag=cwSonetFarEndPathCurrentValidFlag, cwSonetSectionIntervalEntry=cwSonetSectionIntervalEntry, sonetSectionAlarmTable=sonetSectionAlarmTable, apsWorkingSlot=apsWorkingSlot, sonetLineCurrentDaySESsThreshold=sonetLineCurrentDaySESsThreshold, cwSonetFarEndPathCurrentTimeElapsed=cwSonetFarEndPathCurrentTimeElapsed, sonetPathStatAlarmStatus=sonetPathStatAlarmStatus, cwSonetFarEndLineIntervalEntry=cwSonetFarEndLineIntervalEntry, cwSonetLineIntervalLineNum=cwSonetLineIntervalLineNum, sonetLineCurrentDayCVsThreshold=sonetLineCurrentDayCVsThreshold, cwSonetPathIntervalTable=cwSonetPathIntervalTable, cwSonetSectionIntervalSESs=cwSonetSectionIntervalSESs, apsLineSwFailureCode=apsLineSwFailureCode, sonetSectionStatAlarmStatus=sonetSectionStatAlarmStatus, sonetSectionAlarmEntry=sonetSectionAlarmEntry, cwSonetFarEndLineCurrentValidFlag=cwSonetFarEndLineCurrentValidFlag, sonetPathCurrentDaySESs=sonetPathCurrentDaySESs, apsSFBER=apsSFBER, cwSonetFarEndLineCurrentFCs=cwSonetFarEndLineCurrentFCs, sonetSectionCurrentDaySEFSs=sonetSectionCurrentDaySEFSs, sonetSectionCurrent15minSESsThreshold=sonetSectionCurrent15minSESsThreshold, sonetFarEndLineCurrentDayCVs=sonetFarEndLineCurrentDayCVs, cwSonetPathCurrentUASs=cwSonetPathCurrentUASs, cwsonetLine=cwsonetLine, cwSonetPathIntervalESs=cwSonetPathIntervalESs, sonetPathCurrentDayUASsThreshold=sonetPathCurrentDayUASsThreshold, apsWtr=apsWtr, cwSonetPathIntervalNumber=cwSonetPathIntervalNumber, apsStandbyLineFailureCode=apsStandbyLineFailureCode, sonetTributaryType=sonetTributaryType, cwSonetLineCurrentEntry=cwSonetLineCurrentEntry, sonetSectionCounterClrButton=sonetSectionCounterClrButton, sonetLineCurrentDayFCs=sonetLineCurrentDayFCs, sonetFarEndPathCurrentDayValidFlag=sonetFarEndPathCurrentDayValidFlag, cwSonetFarEndLineIntervalCVs=cwSonetFarEndLineIntervalCVs, sonetConfigTable=sonetConfigTable, cwSonetSectionCurrentStatus=cwSonetSectionCurrentStatus, sonetPathCurrentDayEntry=sonetPathCurrentDayEntry, sonetFarEndPathCurrentDayUASs=sonetFarEndPathCurrentDayUASs, sonetLineAlarmEntry=sonetLineAlarmEntry, apsWorkingLine=apsWorkingLine, sonetSectionCurrent15minSEFSsThreshold=sonetSectionCurrent15minSEFSsThreshold, cwSonetLineIntervalSESs=cwSonetLineIntervalSESs, sonetSectionCurrentDayClrButton=sonetSectionCurrentDayClrButton, cwSonetFarEndLineIntervalTable=cwSonetFarEndLineIntervalTable, sonetSectionTraceSelection=sonetSectionTraceSelection, cwSonetPathIntervalEntry=cwSonetPathIntervalEntry, cwSonetFELineIntervalLineNum=cwSonetFELineIntervalLineNum, apsProtectionLine=apsProtectionLine, cwSonetFarEndPathCurrentUASs=cwSonetFarEndPathCurrentUASs, sonetPathTraceToExpect=sonetPathTraceToExpect, apsK1K2Disable=apsK1K2Disable, sonetLineXmtClkSrc=sonetLineXmtClkSrc, cwSonetLineIntervalTable=cwSonetLineIntervalTable, sonetLineStatAlarmStatus=sonetLineStatAlarmStatus, sonetPathCounterTable=sonetPathCounterTable, cwSonetLineCurrentStatus=cwSonetLineCurrentStatus, cwSonetMediumCircuitIdentifier=cwSonetMediumCircuitIdentifier, cwSonetSectionCurrentCVs=cwSonetSectionCurrentCVs, cwSonetFarEndLineCurrentSESs=cwSonetFarEndLineCurrentSESs, cwSonetPathCurrentFCs=cwSonetPathCurrentFCs, cwSonetFarEndLineIntervalValidFlag=cwSonetFarEndLineIntervalValidFlag, sonetFarEndLineCurrentDayUASs=sonetFarEndLineCurrentDayUASs, sonetPathCurrentDayUASs=sonetPathCurrentDayUASs, sonetPathStatisticalAlarmSeverity=sonetPathStatisticalAlarmSeverity, sonetLineCurrentDayTable=sonetLineCurrentDayTable, sonetPathTraceToTransmit=sonetPathTraceToTransmit, cwSonetSectionCurrentSESs=cwSonetSectionCurrentSESs, cwsonetSection=cwsonetSection, cwSonetMediumValidIntervals=cwSonetMediumValidIntervals, sonetSectionCurrentDayESs=sonetSectionCurrentDayESs, cwSonetLineCurrentCVs=cwSonetLineCurrentCVs, sonetFarEndPathCurrentDayCVs=sonetFarEndPathCurrentDayCVs, sonetApsConfig=sonetApsConfig, cwSonetFarEndPathIntervalEntry=cwSonetFarEndPathIntervalEntry, cwSonetFarEndPathIntervalSESs=cwSonetFarEndPathIntervalSESs, cwSonetSectionIntervalCVs=cwSonetSectionIntervalCVs, sonetPathCounterLineNum=sonetPathCounterLineNum, sonetSectionCurrentDayTable=sonetSectionCurrentDayTable, sonetLineLoopbackCommand=sonetLineLoopbackCommand, sonetFarEndLineCurrentDaySESs=sonetFarEndLineCurrentDaySESs, cwSonetSectionIntervalValidFlag=cwSonetSectionIntervalValidFlag, sonetFarEndLineCurrentDayValidFlag=sonetFarEndLineCurrentDayValidFlag, sonetLineCurrentDayEntry=sonetLineCurrentDayEntry, sonetLineCurrent15minSESsThreshold=sonetLineCurrent15minSESsThreshold, sonetLineCurrent15minCVsThreshold=sonetLineCurrent15minCVsThreshold, cwSonetLineCurrentUASs=cwSonetLineCurrentUASs, cwSonetFarEndPathIntervalTable=cwSonetFarEndPathIntervalTable, cwSonetMediumType=cwSonetMediumType, cwSonetLineIntervalNumber=cwSonetLineIntervalNumber, cwSonetFarEndPathIntervalUASs=cwSonetFarEndPathIntervalUASs, cwSonetSectionIntervalNumber=cwSonetSectionIntervalNumber, sonetLineCurrentDayUASsThreshold=sonetLineCurrentDayUASsThreshold, cwSonetFarEndLineIntervalESs=cwSonetFarEndLineIntervalESs, sectionCounterLineNum=sectionCounterLineNum, cwSonetFarEndLineCurrentTable=cwSonetFarEndLineCurrentTable, cwSonetFarEndPathCurrentClrButton=cwSonetFarEndPathCurrentClrButton, sonetLineAlarmTable=sonetLineAlarmTable, cwSonetLineIntervalEntry=cwSonetLineIntervalEntry, sonetFarEndPathCurrentDayTable=sonetFarEndPathCurrentDayTable, cwsonetPath=cwsonetPath, cwSonetLineCurrentTable=cwSonetLineCurrentTable, cwSonetFarEndPathCurrentSESs=cwSonetFarEndPathCurrentSESs, cwSonetFarEndLineIntervalNumber=cwSonetFarEndLineIntervalNumber, apsSDBER=apsSDBER, cwSonetFarEndLineIntervalSESs=cwSonetFarEndLineIntervalSESs, cwSonetSectionCurrentESs=cwSonetSectionCurrentESs, cwSonetMediumLineType=cwSonetMediumLineType, sonetLineCounterEntry=sonetLineCounterEntry, cwSonetPathCurrentClrButton=cwSonetPathCurrentClrButton, sonetPathCounterClrButton=sonetPathCounterClrButton, sonetFarEndLineCurrentDayESs=sonetFarEndLineCurrentDayESs, cwSonetLineIntervalESs=cwSonetLineIntervalESs, cwSonetPathCurrentValidFlag=cwSonetPathCurrentValidFlag, sonetSectionCounterEntry=sonetSectionCounterEntry, sonetLineNum=sonetLineNum, sonetLineCurrentDayCVs=sonetLineCurrentDayCVs, sonetPathCurrentDayESsThreshold=sonetPathCurrentDayESsThreshold, cwSonetSectionCurrentClrButton=cwSonetSectionCurrentClrButton, sonetLineCurrentDayESsThreshold=sonetLineCurrentDayESsThreshold, cwSonetLineCurrentLineNum=cwSonetLineCurrentLineNum, sonetSectionCounterLOFs=sonetSectionCounterLOFs, sonetFEPathCurrentDayLineNum=sonetFEPathCurrentDayLineNum, sonetLineCurrentDayUASs=sonetLineCurrentDayUASs, sonetLineCurrent15minUASsThreshold=sonetLineCurrent15minUASsThreshold, sonetPathCurrent15minESsThreshold=sonetPathCurrent15minESsThreshold, sonetFarEndPathCurrentDayFCs=sonetFarEndPathCurrentDayFCs, cwSonetFarEndPathCurrentESs=cwSonetFarEndPathCurrentESs, sonetPathCurrent15minUASsThreshold=sonetPathCurrent15minUASsThreshold, sonetLineAlarmLineNum=sonetLineAlarmLineNum, sonetLineEnable=sonetLineEnable, sonetSectionCurrentDayLineNum=sonetSectionCurrentDayLineNum, sonetFELineCurrentDayLineNum=sonetFELineCurrentDayLineNum)
mibBuilder.exportSymbols("CISCO-MGX82XX-SONET-MIB", sonetPathCurrentDayESs=sonetPathCurrentDayESs, sonetFarEndPathCurrentDayEntry=sonetFarEndPathCurrentDayEntry, sonetPathCounterEntry=sonetPathCounterEntry, sonetTributaryGroupingType=sonetTributaryGroupingType, sonetApsConfigTable=sonetApsConfigTable, sonetTributaryFramingFormat=sonetTributaryFramingFormat, sonetSectionCurrentDaySESs=sonetSectionCurrentDaySESs, cwSonetLineCurrentValidFlag=cwSonetLineCurrentValidFlag, cwSonetLineIntervalUASs=cwSonetLineIntervalUASs, sonetFarEndPathCurrentDayClrButton=sonetFarEndPathCurrentDayClrButton, sonetFarEndPathCurrentDaySESs=sonetFarEndPathCurrentDaySESs, sonetConfigNumOfValidEntries=sonetConfigNumOfValidEntries, cwSonetFarEndPathIntervalNumber=cwSonetFarEndPathIntervalNumber, sonetSignallingTransportMode=sonetSignallingTransportMode, sonetSectionCounterLOSs=sonetSectionCounterLOSs, cwSonetPathIntervalFCs=cwSonetPathIntervalFCs, sonetLineCounterClrButton=sonetLineCounterClrButton)
