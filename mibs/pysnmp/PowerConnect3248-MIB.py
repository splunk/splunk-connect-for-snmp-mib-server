#
# PySNMP MIB module PowerConnect3248-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PowerConnect3248-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:34:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
BridgeId, dot1dStpPort, Timeout, dot1dStpPortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "dot1dStpPort", "Timeout", "dot1dStpPortEntry")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, ObjectIdentity, ModuleIdentity, Gauge32, MibIdentifier, TimeTicks, internet, Integer32, Unsigned32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Gauge32", "MibIdentifier", "TimeTicks", "internet", "Integer32", "Unsigned32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
dellLan = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895))
powerConnect3248MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 3))
powerConnect3248MIB.setRevisions(('2001-09-06 00:00',))
if mibBuilder.loadTexts: powerConnect3248MIB.setLastUpdated('200109060000Z')
if mibBuilder.loadTexts: powerConnect3248MIB.setOrganization('Dell Computer Corporation')
powerConnect3248MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1))
powerConnect3248Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 2))
powerConnect3248Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 3))
switchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1))
portMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2))
trunkMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 3))
lacpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 4))
staMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5))
tftpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 6))
restartMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 7))
mirrorMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 8))
igmpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9))
ipMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10))
bcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 11))
vlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 12))
priorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13))
trapDestMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 14))
securityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17))
sysLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19))
lineMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20))
class ValidStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

switchManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchManagementVlan.setStatus('current')
switchNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumber.setStatus('current')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
swHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
swMicrocodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMicrocodeVer.setStatus('current')
swLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoaderVer.setStatus('current')
swBootRomVer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('current')
swOpCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('current')
swPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumber.setStatus('current')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalPower", 1), ("redundantPower", 2), ("internalAndRedundantPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
swRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backupMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRoleInSystem.setStatus('current')
swSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
swExpansionSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notPresent", 1), ("other", 2), ("hundredBaseFxScMmf", 3), ("hundredBaseFxScSmf", 4), ("hundredBaseFxMtrjMmf", 5), ("thousandBaseSxScMmf", 6), ("thousandBaseSxMtrjMmf", 7), ("thousandBaseXGbic", 8), ("thousandBaseLxScSmf", 9), ("thousandBaseT", 10), ("stackingModule", 11), ("thousandBaseSfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swExpansionSlot1.setStatus('current')
swExpansionSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notPresent", 1), ("other", 2), ("hundredBaseFxScMmf", 3), ("hundredBaseFxScSmf", 4), ("hundredBaseFxMtrjMmf", 5), ("thousandBaseSxScMmf", 6), ("thousandBaseSxMtrjMmf", 7), ("thousandBaseXGbic", 8), ("thousandBaseLxScSmf", 9), ("thousandBaseT", 10), ("stackingModule", 11), ("thousandBaseSfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swExpansionSlot2.setStatus('current')
swServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swServiceTag.setStatus('current')
switchOperState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("noncritical", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchOperState.setStatus('current')
switchProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 5))
swProdName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdName.setStatus('current')
swProdManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdManufacturer.setStatus('current')
swProdDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdDescription.setStatus('current')
swProdVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdVersion.setStatus('current')
swProdUrl = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdUrl.setStatus('current')
swIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIdentifier.setStatus('current')
swChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swChassisServiceTag.setStatus('current')
switchIndivPowerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 6), )
if mibBuilder.loadTexts: switchIndivPowerTable.setStatus('current')
switchIndivPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 6, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "swIndivPowerUnitIndex"), (0, "PowerConnect3248-MIB", "swIndivPowerIndex"))
if mibBuilder.loadTexts: switchIndivPowerEntry.setStatus('current')
swIndivPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setStatus('current')
swIndivPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerIndex.setStatus('current')
swIndivPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("green", 2), ("red", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerStatus.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("portCap10half", 0), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
portTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkIndex.setStatus('current')
trunkMaxId = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMaxId.setStatus('current')
trunkValidNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkValidNumber.setStatus('current')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 3, 3), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 3, 3, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
trunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 3, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkPorts.setStatus('current')
trunkCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCreation.setStatus('current')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 4, 1), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 4, 1, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
lacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortStatus.setStatus('current')
staSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemStatus.setStatus('current')
staPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 2), )
if mibBuilder.loadTexts: staPortTable.setStatus('current')
staPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 2, 1), ).setMaxAccess("readonly").setIndexNames((0, "PowerConnect3248-MIB", "staPortIndex"))
if mibBuilder.loadTexts: staPortEntry.setStatus('current')
staPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortIndex.setStatus('current')
staPortFastForward = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortFastForward.setStatus('current')
staPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortProtocolMigration.setStatus('current')
staPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminEdgePort.setStatus('current')
staPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperEdgePort.setStatus('current')
staPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminPointToPoint.setStatus('current')
staPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperPointToPoint.setStatus('current')
staPortLongPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortLongPathCost.setStatus('current')
staProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staProtocolType.setStatus('current')
staTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTxHoldCount.setStatus('current')
staPathCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPathCostMethod.setStatus('current')
xstMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6))
xstInstanceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4), )
if mibBuilder.loadTexts: xstInstanceCfgTable.setStatus('current')
xstInstanceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1), ).setMaxAccess("readonly").setIndexNames((0, "PowerConnect3248-MIB", "xstInstanceCfgIndex"))
if mibBuilder.loadTexts: xstInstanceCfgEntry.setStatus('current')
xstInstanceCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgIndex.setStatus('current')
xstInstanceCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstanceCfgPriority.setStatus('current')
xstInstanceCfgTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setStatus('current')
xstInstanceCfgTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setStatus('current')
xstInstanceCfgDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setStatus('current')
xstInstanceCfgRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setStatus('current')
xstInstanceCfgRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setStatus('current')
xstInstanceCfgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setStatus('current')
xstInstanceCfgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setStatus('current')
xstInstanceCfgHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setStatus('current')
xstInstanceCfgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setStatus('current')
xstInstanceCfgBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setStatus('current')
xstInstanceCfgBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setStatus('current')
xstInstanceCfgBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setStatus('current')
xstInstanceCfgTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setStatus('current')
xstInstanceCfgPathCostMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setStatus('current')
xstInstancePortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5), )
if mibBuilder.loadTexts: xstInstancePortTable.setStatus('current')
xstInstancePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1), ).setMaxAccess("readonly").setIndexNames((0, "PowerConnect3248-MIB", "xstInstancePortInstance"), (0, "PowerConnect3248-MIB", "xstInstancePortPort"))
if mibBuilder.loadTexts: xstInstancePortEntry.setStatus('current')
xstInstancePortInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortInstance.setStatus('current')
xstInstancePortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortPort.setStatus('current')
xstInstancePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPriority.setStatus('current')
xstInstancePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortState.setStatus('current')
xstInstancePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortEnable.setStatus('current')
xstInstancePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPathCost.setStatus('current')
xstInstancePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setStatus('current')
xstInstancePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setStatus('current')
xstInstancePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setStatus('current')
xstInstancePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setStatus('current')
xstInstancePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setStatus('current')
xstInstancePortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 5, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5), ("master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortPortRole.setStatus('current')
tftpFileType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFileType.setStatus('current')
tftpSrcFile = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpSrcFile.setStatus('current')
tftpDestFile = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpDestFile.setStatus('current')
tftpServer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServer.setStatus('current')
tftpAction = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notDownloading", 1), ("downloadToPROM", 2), ("downloadToRAM", 3), ("upload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpAction.setStatus('current')
tftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tftpSuccess", 1), ("tftpStatusUnknown", 2), ("tftpGeneralError", 3), ("tftpNoResponseFromServer", 4), ("tftpDownloadChecksumError", 5), ("tftpDownloadIncompatibleImage", 6), ("tftpTftpFileNotFound", 7), ("tftpTftpAccessViolation", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpStatus.setStatus('current')
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('current')
restartConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartConfigFile.setStatus('current')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 8, 1), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 8, 1, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "mirrorDestinationPort"), (0, "PowerConnect3248-MIB", "mirrorSourcePort"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
mirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
mirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSourcePort.setStatus('current')
mirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorType.setStatus('current')
mirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorStatus.setStatus('current')
igmpSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
igmpSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQuerier.setStatus('current')
igmpSnoopQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryCount.setStatus('current')
igmpSnoopQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setStatus('current')
igmpSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setStatus('current')
igmpSnoopQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setStatus('current')
igmpSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersion.setStatus('current')
igmpSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 8), )
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setStatus('current')
igmpSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 8, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "igmpSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setStatus('current')
igmpSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setStatus('current')
igmpSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setStatus('current')
igmpSnoopRouterCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 8, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setStatus('current')
igmpSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 9), )
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setStatus('current')
igmpSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 9, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "igmpSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setStatus('current')
igmpSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setStatus('current')
igmpSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 9, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setStatus('current')
igmpSnoopRouterStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setStatus('current')
igmpSnoopMulticastCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 10), )
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setStatus('current')
igmpSnoopMulticastCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 10, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "igmpSnoopMulticastCurrentVlanIndex"), (0, "PowerConnect3248-MIB", "igmpSnoopMulticastCurrentIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setStatus('current')
igmpSnoopMulticastCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setStatus('current')
igmpSnoopMulticastCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setStatus('current')
igmpSnoopMulticastCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 10, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setStatus('current')
igmpSnoopMulticastCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 10, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentStatus.setStatus('current')
igmpSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 11), )
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setStatus('current')
igmpSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 11, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "igmpSnoopMulticastStaticVlanIndex"), (0, "PowerConnect3248-MIB", "igmpSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setStatus('current')
igmpSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setStatus('current')
igmpSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setStatus('current')
igmpSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 11, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setStatus('current')
igmpSnoopMulticastStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 9, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setStatus('current')
netConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 1), )
if mibBuilder.loadTexts: netConfigTable.setStatus('current')
netConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 1, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "netConfigIfIndex"), (0, "PowerConnect3248-MIB", "netConfigIPAddress"), (0, "PowerConnect3248-MIB", "netConfigSubnetMask"))
if mibBuilder.loadTexts: netConfigEntry.setStatus('current')
netConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigIfIndex.setStatus('current')
netConfigIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('current')
netConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('current')
netConfigPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigPrimaryInterface.setStatus('current')
netConfigUnnumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unnumbered", 1), ("notUnnumbered", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigUnnumbered.setStatus('current')
netConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigStatus.setStatus('current')
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('current')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('current')
ipDhcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpRestart.setStatus('current')
ipHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsState.setStatus('current')
ipHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsPort.setStatus('current')
bcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 11, 1), )
if mibBuilder.loadTexts: bcastStormTable.setStatus('current')
bcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 11, 1, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "bcastStormIfIndex"))
if mibBuilder.loadTexts: bcastStormEntry.setStatus('current')
bcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcastStormIfIndex.setStatus('current')
bcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormStatus.setStatus('current')
bcastStormSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pkt-rate", 1), ("octet-rate", 2), ("percent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormSampleType.setStatus('current')
bcastStormPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 11, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPktRate.setStatus('current')
bcastStormOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormOctetRate.setStatus('current')
bcastStormPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPercent.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 12, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 12, 1, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 12, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
vlanAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAddressMethod.setStatus('current')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 12, 2), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
vlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 12, 2, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "vlanPortIndex"))
if mibBuilder.loadTexts: vlanPortEntry.setStatus('current')
vlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortIndex.setStatus('current')
vlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hybrid", 1), ("dot1qTrunk", 2), ("access", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMode.setStatus('current')
prioIpPrecDscpStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("precedence", 2), ("dscp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecDscpStatus.setStatus('current')
prioIpPrecTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 2), )
if mibBuilder.loadTexts: prioIpPrecTable.setStatus('current')
prioIpPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 2, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "prioIpPrecPort"), (0, "PowerConnect3248-MIB", "prioIpPrecValue"))
if mibBuilder.loadTexts: prioIpPrecEntry.setStatus('current')
prioIpPrecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioIpPrecPort.setStatus('current')
prioIpPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioIpPrecValue.setStatus('current')
prioIpPrecCos = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecCos.setStatus('current')
prioIpPrecRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecRestoreDefault.setStatus('current')
prioIpDscpTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 4), )
if mibBuilder.loadTexts: prioIpDscpTable.setStatus('current')
prioIpDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 4, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "prioIpDscpPort"), (0, "PowerConnect3248-MIB", "prioIpDscpValue"))
if mibBuilder.loadTexts: prioIpDscpEntry.setStatus('current')
prioIpDscpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioIpDscpPort.setStatus('current')
prioIpDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioIpDscpValue.setStatus('current')
prioIpDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpCos.setStatus('current')
prioIpDscpRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpRestoreDefault.setStatus('current')
prioIpPortEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPortEnableStatus.setStatus('current')
prioIpPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 7), )
if mibBuilder.loadTexts: prioIpPortTable.setStatus('current')
prioIpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 7, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "prioIpPortPhysPort"), (0, "PowerConnect3248-MIB", "prioIpPortValue"))
if mibBuilder.loadTexts: prioIpPortEntry.setStatus('current')
prioIpPortPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioIpPortPhysPort.setStatus('current')
prioIpPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioIpPortValue.setStatus('current')
prioIpPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortCos.setStatus('current')
prioIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortStatus.setStatus('current')
prioCopy = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 8))
prioCopyIpPrec = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPrec.setStatus('current')
prioCopyIpDscp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpDscp.setStatus('current')
prioCopyIpPort = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPort.setStatus('current')
prioWrrTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 9), )
if mibBuilder.loadTexts: prioWrrTable.setStatus('current')
prioWrrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 9, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "prioWrrTrafficClass"))
if mibBuilder.loadTexts: prioWrrEntry.setStatus('current')
prioWrrTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioWrrTrafficClass.setStatus('current')
prioWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrWeight.setStatus('current')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 14, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('current')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 14, 1, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "trapDestAddress"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('current')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 14, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDestAddress.setStatus('current')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('current')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('current')
trapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestVersion.setStatus('current')
portSecurityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 2))
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 4))
tacacsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 5))
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6))
portSecPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 2, 1), )
if mibBuilder.loadTexts: portSecPortTable.setStatus('current')
portSecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 2, 1, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "portSecPortIndex"))
if mibBuilder.loadTexts: portSecPortEntry.setStatus('current')
portSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecPortIndex.setStatus('current')
portSecPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecPortStatus.setStatus('current')
portSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("shutdown", 3), ("trapAndShutdown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecAction.setStatus('current')
radiusServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('current')
radiusServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerPortNumber.setStatus('current')
radiusServerKey = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
radiusServerRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
radiusServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
tacacsServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerAddress.setStatus('current')
tacacsServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerPortNumber.setStatus('current')
tacacsServerKey = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerKey.setStatus('current')
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
sshServerMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMajorVersion.setStatus('current')
sshServerMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMinorVersion.setStatus('current')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
sshAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthRetries.setStatus('current')
sshConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 6), )
if mibBuilder.loadTexts: sshConnInfoTable.setStatus('current')
sshConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 6, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "sshConnID"))
if mibBuilder.loadTexts: sshConnInfoEntry.setStatus('current')
sshConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnID.setStatus('current')
sshConnMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMajorVersion.setStatus('current')
sshConnMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMinorVersion.setStatus('current')
sshConnEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("tribeDes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnEncryptionType.setStatus('current')
sshConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiationStart", 1), ("authenticationStart", 2), ("sessionStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnStatus.setStatus('current')
sshConnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnUserName.setStatus('current')
sshDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 17, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDisconnect", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshDisconnect.setStatus('current')
sysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogStatus.setStatus('current')
sysLogHistoryFlashLevel = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setStatus('current')
sysLogHistoryRamLevel = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setStatus('current')
remoteLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 6))
remoteLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogStatus.setStatus('current')
remoteLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogLevel.setStatus('current')
remoteLogFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogFacilityType.setStatus('current')
remoteLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 6, 4), )
if mibBuilder.loadTexts: remoteLogServerTable.setStatus('current')
remoteLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 6, 4, 1), ).setIndexNames((0, "PowerConnect3248-MIB", "remoteLogServerIp"))
if mibBuilder.loadTexts: remoteLogServerEntry.setStatus('current')
remoteLogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 6, 4, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerIp.setStatus('current')
remoteLogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 19, 6, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerStatus.setStatus('current')
consoleMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 1))
telnetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 2))
consoleDataBits = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits7", 1), ("databits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleDataBits.setStatus('current')
consoleParity = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("partyNone", 1), ("partyEven", 2), ("partyOdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleParity.setStatus('current')
consoleBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baudRate9600", 1), ("baudRate19200", 2), ("baudRate38400", 3), ("baudRate57600", 4), ("baudRate115200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleBaudRate.setStatus('current')
consoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits1", 1), ("stopbits2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleStopBits.setStatus('current')
consoleExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleExecTimeout.setStatus('current')
consolePasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePasswordThreshold.setStatus('current')
consoleSilentTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleSilentTime.setStatus('current')
telnetExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetExecTimeout.setStatus('current')
telnetPasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 3, 1, 20, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPasswordThreshold.setStatus('current')
powerConnect3248Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 2, 1))
powerConnect3248TrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 3, 2, 1, 0))
swPowerStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 3, 2, 1, 0, 1)).setObjects(("PowerConnect3248-MIB", "swIndivPowerUnitIndex"), ("PowerConnect3248-MIB", "swIndivPowerIndex"), ("PowerConnect3248-MIB", "swIndivPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setStatus('current')
swPortSecurityTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 3, 2, 1, 0, 36)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: swPortSecurityTrap.setStatus('current')
mibBuilder.exportSymbols("PowerConnect3248-MIB", trapDestStatus=trapDestStatus, portSecPortIndex=portSecPortIndex, portSecPortTable=portSecPortTable, sshServerMajorVersion=sshServerMajorVersion, tftpMgt=tftpMgt, securityMgt=securityMgt, igmpSnoopRouterCurrentVlanIndex=igmpSnoopRouterCurrentVlanIndex, tacacsMgt=tacacsMgt, igmpSnoopMulticastCurrentEntry=igmpSnoopMulticastCurrentEntry, sshTimeout=sshTimeout, sshConnEncryptionType=sshConnEncryptionType, radiusServerKey=radiusServerKey, trapDestCommunity=trapDestCommunity, igmpSnoopQuerier=igmpSnoopQuerier, restartOpCodeFile=restartOpCodeFile, sysLogMgt=sysLogMgt, xstInstanceCfgRootCost=xstInstanceCfgRootCost, portName=portName, prioIpDscpCos=prioIpDscpCos, consoleExecTimeout=consoleExecTimeout, dell=dell, vlanPortMode=vlanPortMode, trapDestAddress=trapDestAddress, portSecPortEntry=portSecPortEntry, restartConfigFile=restartConfigFile, prioCopyIpPrec=prioCopyIpPrec, prioWrrTable=prioWrrTable, prioCopyIpDscp=prioCopyIpDscp, swPowerStatus=swPowerStatus, xstInstanceCfgBridgeMaxAge=xstInstanceCfgBridgeMaxAge, portFlowCtrlStatus=portFlowCtrlStatus, staPathCostMethod=staPathCostMethod, switchIndivPowerTable=switchIndivPowerTable, swChassisServiceTag=swChassisServiceTag, sshConnMajorVersion=sshConnMajorVersion, netConfigStatus=netConfigStatus, xstInstanceCfgBridgeForwardDelay=xstInstanceCfgBridgeForwardDelay, sshConnMinorVersion=sshConnMinorVersion, ipMgt=ipMgt, vlanPortEntry=vlanPortEntry, swBootRomVer=swBootRomVer, bcastStormPktRate=bcastStormPktRate, prioIpDscpPort=prioIpDscpPort, tacacsServerKey=tacacsServerKey, swIdentifier=swIdentifier, vlanPortIndex=vlanPortIndex, portCapabilities=portCapabilities, prioIpPortValue=prioIpPortValue, sshConnInfoTable=sshConnInfoTable, igmpSnoopRouterStaticStatus=igmpSnoopRouterStaticStatus, staPortProtocolMigration=staPortProtocolMigration, prioIpPortCos=prioIpPortCos, sysLogStatus=sysLogStatus, xstInstanceCfgHelloTime=xstInstanceCfgHelloTime, staPortLongPathCost=staPortLongPathCost, xstInstancePortDesignatedBridge=xstInstancePortDesignatedBridge, swSerialNumber=swSerialNumber, tftpStatus=tftpStatus, tacacsServerAddress=tacacsServerAddress, sshConnStatus=sshConnStatus, xstInstancePortPathCost=xstInstancePortPathCost, consoleSilentTime=consoleSilentTime, ValidStatus=ValidStatus, tftpFileType=tftpFileType, prioIpPrecRestoreDefault=prioIpPrecRestoreDefault, trunkMgt=trunkMgt, swHardwareVer=swHardwareVer, xstInstanceCfgHoldTime=xstInstanceCfgHoldTime, prioIpDscpEntry=prioIpDscpEntry, consoleStopBits=consoleStopBits, xstInstanceCfgForwardDelay=xstInstanceCfgForwardDelay, prioIpPortStatus=prioIpPortStatus, enterprises=enterprises, swRoleInSystem=swRoleInSystem, sshMgt=sshMgt, prioIpPrecCos=prioIpPrecCos, bcastStormIfIndex=bcastStormIfIndex, swProdVersion=swProdVersion, bcastStormStatus=bcastStormStatus, prioIpDscpRestoreDefault=prioIpDscpRestoreDefault, portSecAction=portSecAction, private=private, vlanMgt=vlanMgt, swProdUrl=swProdUrl, switchIndivPowerEntry=switchIndivPowerEntry, xstInstancePortState=xstInstancePortState, sysLogHistoryRamLevel=sysLogHistoryRamLevel, portIndex=portIndex, staMgt=staMgt, lacpPortIndex=lacpPortIndex, xstInstancePortDesignatedCost=xstInstancePortDesignatedCost, bcastStormEntry=bcastStormEntry, xstInstanceCfgPriority=xstInstanceCfgPriority, mirrorType=mirrorType, portSpeedDpxCfg=portSpeedDpxCfg, tftpAction=tftpAction, prioIpDscpTable=prioIpDscpTable, trunkTable=trunkTable, remoteLogServerIp=remoteLogServerIp, mirrorStatus=mirrorStatus, xstInstanceCfgBridgeHelloTime=xstInstanceCfgBridgeHelloTime, prioIpPrecEntry=prioIpPrecEntry, telnetPasswordThreshold=telnetPasswordThreshold, xstInstanceCfgDesignatedRoot=xstInstanceCfgDesignatedRoot, powerConnect3248TrapsPrefix=powerConnect3248TrapsPrefix, xstMgt=xstMgt, xstInstanceCfgTimeSinceTopologyChange=xstInstanceCfgTimeSinceTopologyChange, portFlowCtrlCfg=portFlowCtrlCfg, staPortAdminPointToPoint=staPortAdminPointToPoint, mirrorDestinationPort=mirrorDestinationPort, prioWrrWeight=prioWrrWeight, prioIpPortPhysPort=prioIpPortPhysPort, consolePasswordThreshold=consolePasswordThreshold, swMicrocodeVer=swMicrocodeVer, staPortAdminEdgePort=staPortAdminEdgePort, bcastStormSampleType=bcastStormSampleType, portSpeedDpxStatus=portSpeedDpxStatus, xstInstanceCfgMaxAge=xstInstanceCfgMaxAge, igmpSnoopRouterCurrentEntry=igmpSnoopRouterCurrentEntry, trapDestTable=trapDestTable, prioCopyIpPort=prioCopyIpPort, portSecurityMgt=portSecurityMgt, switchInfoTable=switchInfoTable, restartControl=restartControl, sshAuthRetries=sshAuthRetries, swOpCodeVer=swOpCodeVer, radiusServerPortNumber=radiusServerPortNumber, portEntry=portEntry, trunkEntry=trunkEntry, vlanIndex=vlanIndex, sshConnInfoEntry=sshConnInfoEntry, bcastStormMgt=bcastStormMgt, xstInstanceCfgEntry=xstInstanceCfgEntry, igmpSnoopQueryInterval=igmpSnoopQueryInterval, prioIpPortEntry=prioIpPortEntry, swPortSecurityTrap=swPortSecurityTrap, switchManagementVlan=switchManagementVlan, igmpSnoopRouterCurrentStatus=igmpSnoopRouterCurrentStatus, igmpSnoopMgt=igmpSnoopMgt, igmpSnoopMulticastCurrentPorts=igmpSnoopMulticastCurrentPorts, ipHttpsPort=ipHttpsPort, swProdDescription=swProdDescription, bcastStormOctetRate=bcastStormOctetRate, ipHttpState=ipHttpState, prioIpPrecPort=prioIpPrecPort, trunkMaxId=trunkMaxId, swServiceTag=swServiceTag, staSystemStatus=staSystemStatus, vlanPortTable=vlanPortTable, prioIpPrecValue=prioIpPrecValue, bcastStormPercent=bcastStormPercent, igmpSnoopRouterStaticEntry=igmpSnoopRouterStaticEntry, portTrunkIndex=portTrunkIndex, switchInfoEntry=switchInfoEntry, swIndivPowerUnitIndex=swIndivPowerUnitIndex, xstInstancePortDesignatedRoot=xstInstancePortDesignatedRoot, prioIpPrecDscpStatus=prioIpPrecDscpStatus, consoleDataBits=consoleDataBits, consoleParity=consoleParity, swProdName=swProdName, staPortTable=staPortTable, igmpSnoopQueryMaxResponseTime=igmpSnoopQueryMaxResponseTime, prioIpPortEnableStatus=prioIpPortEnableStatus, switchOperState=switchOperState, igmpSnoopMulticastStaticIpAddress=igmpSnoopMulticastStaticIpAddress, ipDhcpRestart=ipDhcpRestart, remoteLogServerTable=remoteLogServerTable, xstInstancePortDesignatedPort=xstInstancePortDesignatedPort, staPortEntry=staPortEntry, trunkPorts=trunkPorts, staPortOperPointToPoint=staPortOperPointToPoint, igmpSnoopMulticastCurrentVlanIndex=igmpSnoopMulticastCurrentVlanIndex, remoteLogMgt=remoteLogMgt, sshServerMinorVersion=sshServerMinorVersion, staTxHoldCount=staTxHoldCount, vlanAddressMethod=vlanAddressMethod, xstInstancePortEnable=xstInstancePortEnable, igmpSnoopMulticastStaticStatus=igmpSnoopMulticastStaticStatus, lineMgt=lineMgt, remoteLogServerEntry=remoteLogServerEntry, xstInstancePortForwardTransitions=xstInstancePortForwardTransitions, remoteLogStatus=remoteLogStatus, swPowerStatusChangeTrap=swPowerStatusChangeTrap, switchProductId=switchProductId, lacpPortStatus=lacpPortStatus, netConfigSubnetMask=netConfigSubnetMask, xstInstancePortPortRole=xstInstancePortPortRole, prioIpDscpValue=prioIpDscpValue, netConfigIPAddress=netConfigIPAddress, igmpSnoopRouterStaticPorts=igmpSnoopRouterStaticPorts, powerConnect3248MIB=powerConnect3248MIB, consoleMgt=consoleMgt, sysLogHistoryFlashLevel=sysLogHistoryFlashLevel, portMgt=portMgt, prioIpPrecTable=prioIpPrecTable, prioCopy=prioCopy, powerConnect3248Notifications=powerConnect3248Notifications, PYSNMP_MODULE_ID=powerConnect3248MIB, igmpSnoopMulticastStaticPorts=igmpSnoopMulticastStaticPorts, staPortOperEdgePort=staPortOperEdgePort, swIndivPowerIndex=swIndivPowerIndex, mirrorTable=mirrorTable, tftpSrcFile=tftpSrcFile, powerConnect3248Traps=powerConnect3248Traps, staProtocolType=staProtocolType, remoteLogServerStatus=remoteLogServerStatus, trapDestMgt=trapDestMgt, priorityMgt=priorityMgt, portType=portType, igmpSnoopVersion=igmpSnoopVersion, trunkStatus=trunkStatus, sshDisconnect=sshDisconnect, tftpServer=tftpServer, vlanTable=vlanTable, sshServerStatus=sshServerStatus, portAutonegotiation=portAutonegotiation, switchMgt=switchMgt, swProdManufacturer=swProdManufacturer, trunkIndex=trunkIndex, swExpansionSlot1=swExpansionSlot1, xstInstancePortInstance=xstInstancePortInstance, mirrorSourcePort=mirrorSourcePort, telnetExecTimeout=telnetExecTimeout, dellLan=dellLan, switchNumber=switchNumber, xstInstanceCfgTopChanges=xstInstanceCfgTopChanges, xstInstanceCfgPathCostMethod=xstInstanceCfgPathCostMethod, lacpPortEntry=lacpPortEntry, igmpSnoopRouterCurrentTable=igmpSnoopRouterCurrentTable, igmpSnoopRouterStaticVlanIndex=igmpSnoopRouterStaticVlanIndex, portTable=portTable, radiusServerRetransmit=radiusServerRetransmit, tacacsServerPortNumber=tacacsServerPortNumber, telnetMgt=telnetMgt, powerConnect3248Conformance=powerConnect3248Conformance, trunkCreation=trunkCreation, sshConnID=sshConnID, igmpSnoopQueryCount=igmpSnoopQueryCount, netConfigTable=netConfigTable, remoteLogLevel=remoteLogLevel, swPortNumber=swPortNumber, radiusServerAddress=radiusServerAddress, sshConnUserName=sshConnUserName, xstInstancePortTable=xstInstancePortTable, restartMgt=restartMgt, xstInstancePortEntry=xstInstancePortEntry, consoleBaudRate=consoleBaudRate, powerConnect3248MIBObjects=powerConnect3248MIBObjects, trapDestEntry=trapDestEntry, igmpSnoopStatus=igmpSnoopStatus, netConfigUnnumbered=netConfigUnnumbered, swLoaderVer=swLoaderVer, lacpPortTable=lacpPortTable, xstInstanceCfgTable=xstInstanceCfgTable)
mibBuilder.exportSymbols("PowerConnect3248-MIB", igmpSnoopMulticastCurrentIpAddress=igmpSnoopMulticastCurrentIpAddress, igmpSnoopMulticastStaticVlanIndex=igmpSnoopMulticastStaticVlanIndex, swUnitIndex=swUnitIndex, ipHttpsState=ipHttpsState, radiusMgt=radiusMgt, xstInstancePortPort=xstInstancePortPort, trapDestVersion=trapDestVersion, igmpSnoopMulticastCurrentTable=igmpSnoopMulticastCurrentTable, swExpansionSlot2=swExpansionSlot2, xstInstanceCfgTxHoldCount=xstInstanceCfgTxHoldCount, prioIpPortTable=prioIpPortTable, igmpSnoopRouterStaticTable=igmpSnoopRouterStaticTable, bcastStormTable=bcastStormTable, mirrorEntry=mirrorEntry, prioWrrTrafficClass=prioWrrTrafficClass, netDefaultGateway=netDefaultGateway, radiusServerTimeout=radiusServerTimeout, vlanEntry=vlanEntry, igmpSnoopQueryTimeout=igmpSnoopQueryTimeout, netConfigIfIndex=netConfigIfIndex, igmpSnoopRouterCurrentPorts=igmpSnoopRouterCurrentPorts, ipHttpPort=ipHttpPort, remoteLogFacilityType=remoteLogFacilityType, staPortIndex=staPortIndex, tftpDestFile=tftpDestFile, netConfigPrimaryInterface=netConfigPrimaryInterface, lacpMgt=lacpMgt, portSecPortStatus=portSecPortStatus, trunkValidNumber=trunkValidNumber, igmpSnoopMulticastStaticEntry=igmpSnoopMulticastStaticEntry, xstInstanceCfgIndex=xstInstanceCfgIndex, swIndivPowerStatus=swIndivPowerStatus, xstInstancePortPriority=xstInstancePortPriority, netConfigEntry=netConfigEntry, mirrorMgt=mirrorMgt, staPortFastForward=staPortFastForward, prioWrrEntry=prioWrrEntry, igmpSnoopMulticastStaticTable=igmpSnoopMulticastStaticTable, xstInstanceCfgRootPort=xstInstanceCfgRootPort, igmpSnoopMulticastCurrentStatus=igmpSnoopMulticastCurrentStatus)
