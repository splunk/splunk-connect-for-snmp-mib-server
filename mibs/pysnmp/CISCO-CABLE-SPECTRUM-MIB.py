#
# PySNMP MIB module CISCO-CABLE-SPECTRUM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CABLE-SPECTRUM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:34:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, ObjectIdentity, Integer32, IpAddress, Counter32, NotificationType, Gauge32, TimeTicks, Counter64, iso, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "ObjectIdentity", "Integer32", "IpAddress", "Counter32", "NotificationType", "Gauge32", "TimeTicks", "Counter64", "iso", "MibIdentifier", "Unsigned32")
DisplayString, TimeStamp, TruthValue, StorageType, MacAddress, TextualConvention, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TruthValue", "StorageType", "MacAddress", "TextualConvention", "DateAndTime", "RowStatus")
ciscoCableSpectrumMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 114))
ciscoCableSpectrumMIB.setRevisions(('2011-04-08 00:00', '2006-10-10 00:00', '2004-09-05 00:00', '2004-07-14 00:00', '2004-03-02 00:00', '2003-06-18 00:00', '2002-06-10 00:00', '2001-02-01 00:00', '2000-08-18 00:00', '2000-04-24 00:00',))
if mibBuilder.loadTexts: ciscoCableSpectrumMIB.setLastUpdated('201104080000Z')
if mibBuilder.loadTexts: ciscoCableSpectrumMIB.setOrganization('Cisco Systems, Inc.')
class CCSFrequency(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(5000, 85000)

class CCSMeasuredFrequency(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(4000, 85000)

class CCSRequestOperation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("start", 1), ("abort", 2))

class CCSRequestOperState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("idle", 0), ("pending", 1), ("running", 2), ("noError", 3), ("aborted", 4), ("notOnLine", 5), ("invalidMac", 6), ("timeOut", 7), ("fftBusy", 8), ("fftFailed", 9), ("others", 10))

ciscoCableSpectrumMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 114, 1))
ccsFlapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1))
ccsSpectrumObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2))
ccsConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3))
ccsFlapListMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(100)).setUnits('modems').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsFlapListMaxSize.setStatus('current')
ccsFlapListCurrentSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setUnits('modems').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapListCurrentSize.setStatus('current')
ccsFlapAging = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(10080)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsFlapAging.setStatus('current')
ccsFlapInsertionTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(90)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsFlapInsertionTime.setStatus('current')
ccsFlapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5), )
if mibBuilder.loadTexts: ccsFlapTable.setStatus('deprecated')
ccsFlapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-CABLE-SPECTRUM-MIB", "ccsFlapMacAddr"))
if mibBuilder.loadTexts: ccsFlapEntry.setStatus('deprecated')
ccsFlapMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: ccsFlapMacAddr.setStatus('deprecated')
ccsFlapUpstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapUpstreamIfIndex.setStatus('deprecated')
ccsFlapDownstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapDownstreamIfIndex.setStatus('deprecated')
ccsFlapInsertionFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapInsertionFails.setStatus('deprecated')
ccsFlapHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapHits.setStatus('deprecated')
ccsFlapMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapMisses.setStatus('deprecated')
ccsFlapCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapCrcErrors.setStatus('deprecated')
ccsFlapPowerAdjustments = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapPowerAdjustments.setStatus('deprecated')
ccsFlapTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapTotal.setStatus('deprecated')
ccsFlapLastFlapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapLastFlapTime.setStatus('deprecated')
ccsFlapCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapCreateTime.setStatus('deprecated')
ccsFlapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsFlapRowStatus.setStatus('deprecated')
ccsFlapInsertionFailNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapInsertionFailNum.setStatus('deprecated')
ccsFlapHitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapHitNum.setStatus('deprecated')
ccsFlapMissNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapMissNum.setStatus('deprecated')
ccsFlapCrcErrorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapCrcErrorNum.setStatus('deprecated')
ccsFlapPowerAdjustmentNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapPowerAdjustmentNum.setStatus('deprecated')
ccsFlapTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapTotalNum.setStatus('deprecated')
ccsFlapResetNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsFlapResetNow.setStatus('deprecated')
ccsFlapLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 5, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapLastResetTime.setStatus('deprecated')
ccsFlapPowerAdjustThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('db').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsFlapPowerAdjustThreshold.setStatus('deprecated')
ccsFlapMissThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsFlapMissThreshold.setStatus('deprecated')
ccsFlapResetAll = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsFlapResetAll.setStatus('deprecated')
ccsFlapClearAll = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsFlapClearAll.setStatus('deprecated')
ccsFlapLastClearTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsFlapLastClearTime.setStatus('deprecated')
ccsCmFlapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11), )
if mibBuilder.loadTexts: ccsCmFlapTable.setStatus('current')
ccsCmFlapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1), ).setIndexNames((0, "CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapDownstreamIfIndex"), (0, "CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapUpstreamIfIndex"), (0, "CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapMacAddr"))
if mibBuilder.loadTexts: ccsCmFlapEntry.setStatus('current')
ccsCmFlapDownstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ccsCmFlapDownstreamIfIndex.setStatus('current')
ccsCmFlapUpstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: ccsCmFlapUpstreamIfIndex.setStatus('current')
ccsCmFlapMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 3), MacAddress())
if mibBuilder.loadTexts: ccsCmFlapMacAddr.setStatus('current')
ccsCmFlapLastFlapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsCmFlapLastFlapTime.setStatus('current')
ccsCmFlapCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsCmFlapCreateTime.setStatus('current')
ccsCmFlapInsertionFailNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsCmFlapInsertionFailNum.setStatus('current')
ccsCmFlapHitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsCmFlapHitNum.setStatus('current')
ccsCmFlapMissNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsCmFlapMissNum.setStatus('current')
ccsCmFlapCrcErrorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsCmFlapCrcErrorNum.setStatus('current')
ccsCmFlapPowerAdjustmentNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsCmFlapPowerAdjustmentNum.setStatus('current')
ccsCmFlapTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsCmFlapTotalNum.setStatus('current')
ccsCmFlapResetNow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsCmFlapResetNow.setStatus('current')
ccsCmFlapLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsCmFlapLastResetTime.setStatus('current')
ccsCmFlapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 1, 11, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsCmFlapRowStatus.setStatus('current')
ccsSpectrumRequestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1), )
if mibBuilder.loadTexts: ccsSpectrumRequestTable.setStatus('current')
ccsSpectrumRequestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestIndex"))
if mibBuilder.loadTexts: ccsSpectrumRequestEntry.setStatus('current')
ccsSpectrumRequestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: ccsSpectrumRequestIndex.setStatus('current')
ccsSpectrumRequestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpectrumRequestIfIndex.setStatus('current')
ccsSpectrumRequestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpectrumRequestMacAddr.setStatus('current')
ccsSpectrumRequestLowFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 4), CCSFrequency().clone(5000)).setUnits('KHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpectrumRequestLowFreq.setStatus('current')
ccsSpectrumRequestUpperFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 5), CCSFrequency().clone(42000)).setUnits('KHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpectrumRequestUpperFreq.setStatus('current')
ccsSpectrumRequestResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 37000)).clone(60)).setUnits('KHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpectrumRequestResolution.setStatus('current')
ccsSpectrumRequestOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 7), CCSRequestOperation().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpectrumRequestOperation.setStatus('current')
ccsSpectrumRequestOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 8), CCSRequestOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsSpectrumRequestOperState.setStatus('current')
ccsSpectrumRequestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsSpectrumRequestStartTime.setStatus('current')
ccsSpectrumRequestStoppedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsSpectrumRequestStoppedTime.setStatus('current')
ccsSpectrumRequestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpectrumRequestStatus.setStatus('current')
ccsSpectrumDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 2), )
if mibBuilder.loadTexts: ccsSpectrumDataTable.setStatus('current')
ccsSpectrumDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestIndex"), (0, "CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumDataFreq"))
if mibBuilder.loadTexts: ccsSpectrumDataEntry.setStatus('current')
ccsSpectrumDataFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 2, 1, 1), CCSMeasuredFrequency()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsSpectrumDataFreq.setStatus('current')
ccsSpectrumDataPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 50))).setUnits('dBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsSpectrumDataPower.setStatus('current')
ccsSNRRequestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 3), )
if mibBuilder.loadTexts: ccsSNRRequestTable.setStatus('current')
ccsSNRRequestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-CABLE-SPECTRUM-MIB", "ccsSNRRequestIndex"))
if mibBuilder.loadTexts: ccsSNRRequestEntry.setStatus('current')
ccsSNRRequestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: ccsSNRRequestIndex.setStatus('current')
ccsSNRRequestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 3, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSNRRequestMacAddr.setStatus('current')
ccsSNRRequestSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsSNRRequestSNR.setStatus('current')
ccsSNRRequestOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 3, 1, 4), CCSRequestOperation().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSNRRequestOperation.setStatus('current')
ccsSNRRequestOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 3, 1, 5), CCSRequestOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsSNRRequestOperState.setStatus('current')
ccsSNRRequestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsSNRRequestStartTime.setStatus('current')
ccsSNRRequestStoppedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsSNRRequestStoppedTime.setStatus('current')
ccsSNRRequestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSNRRequestStatus.setStatus('current')
ccsUpInSpecGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 4), )
if mibBuilder.loadTexts: ccsUpInSpecGroupTable.setStatus('current')
ccsUpInSpecGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupNumber"), (0, "CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupUpstreamIfIndex"))
if mibBuilder.loadTexts: ccsUpInSpecGroupEntry.setStatus('current')
ccsSpecGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ccsSpecGroupNumber.setStatus('current')
ccsSpecGroupUpstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: ccsSpecGroupUpstreamIfIndex.setStatus('current')
ccsSpecGroupUpstreamStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 4, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpecGroupUpstreamStorage.setStatus('current')
ccsSpecGroupUpstreamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpecGroupUpstreamRowStatus.setStatus('current')
ccsUpInFiberNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 5), )
if mibBuilder.loadTexts: ccsUpInFiberNodeTable.setStatus('current')
ccsUpInFiberNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-CABLE-SPECTRUM-MIB", "ccsFiberNodeNumber"), (0, "CISCO-CABLE-SPECTRUM-MIB", "ccsFiberNodeUpstreamIfIndex"))
if mibBuilder.loadTexts: ccsUpInFiberNodeEntry.setStatus('current')
ccsFiberNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ccsFiberNodeNumber.setStatus('current')
ccsFiberNodeUpstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 5, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: ccsFiberNodeUpstreamIfIndex.setStatus('current')
ccsFiberNodeUpstreamStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 5, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsFiberNodeUpstreamStorage.setStatus('current')
ccsFiberNodeUpstreamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 2, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsFiberNodeUpstreamRowStatus.setStatus('current')
ccsUpSpecMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1), )
if mibBuilder.loadTexts: ccsUpSpecMgmtTable.setStatus('current')
ccsUpSpecMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ccsUpSpecMgmtEntry.setStatus('current')
ccsUpSpecMgmtHopPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("frqModChannel", 0), ("frqChannelMod", 1), ("modFrqChannel", 2), ("modChannelFrq", 3), ("channelFrqMod", 4), ("channelModFrq", 5))).clone('frqModChannel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUpSpecMgmtHopPriority.setStatus('current')
ccsUpSpecMgmtSnrThres1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 35), )).clone(25)).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUpSpecMgmtSnrThres1.setStatus('current')
ccsUpSpecMgmtSnrThres2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 35), )).clone(15)).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUpSpecMgmtSnrThres2.setStatus('current')
ccsUpSpecMgmtFecCorrectThres1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 30), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUpSpecMgmtFecCorrectThres1.setStatus('current')
ccsUpSpecMgmtFecCorrectThres2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUpSpecMgmtFecCorrectThres2.setStatus('deprecated')
ccsUpSpecMgmtFecUnCorrectThres1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 30), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUpSpecMgmtFecUnCorrectThres1.setStatus('current')
ccsUpSpecMgmtFecUnCorrectThres2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 30), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUpSpecMgmtFecUnCorrectThres2.setStatus('current')
ccsUpSpecMgmtSnrPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 25000)).clone(500)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUpSpecMgmtSnrPollPeriod.setStatus('deprecated')
ccsUpSpecMgmtHopCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("snr", 0), ("stationMaintainenceMiss", 1), ("others", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtHopCondition.setStatus('deprecated')
ccsUpSpecMgmtFromCenterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 65000), ))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtFromCenterFreq.setStatus('current')
ccsUpSpecMgmtToCenterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 65000), ))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtToCenterFreq.setStatus('current')
ccsUpSpecMgmtFromBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(200, 200), ValueRangeConstraint(400, 400), ValueRangeConstraint(800, 800), ValueRangeConstraint(1600, 1600), ValueRangeConstraint(3200, 3200), ValueRangeConstraint(6400, 6400), ))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtFromBandWidth.setStatus('current')
ccsUpSpecMgmtToBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(200, 200), ValueRangeConstraint(400, 400), ValueRangeConstraint(800, 800), ValueRangeConstraint(1600, 1600), ValueRangeConstraint(3200, 3200), ValueRangeConstraint(6400, 6400), ))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtToBandWidth.setStatus('current')
ccsUpSpecMgmtFromModProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtFromModProfile.setStatus('current')
ccsUpSpecMgmtToModProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtToModProfile.setStatus('current')
ccsUpSpecMgmtSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtSNR.setStatus('current')
ccsUpSpecMgmtUpperBoundFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 17), CCSFrequency()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtUpperBoundFreq.setStatus('current')
ccsUpSpecMgmtCnrThres1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 35), )).clone(25)).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUpSpecMgmtCnrThres1.setStatus('current')
ccsUpSpecMgmtCnrThres2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 35), )).clone(15)).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUpSpecMgmtCnrThres2.setStatus('current')
ccsUpSpecMgmtCNR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtCNR.setStatus('current')
ccsUpSpecMgmtMissedMaintMsgThres = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtMissedMaintMsgThres.setStatus('current')
ccsUpSpecMgmtHopPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 3600), ))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtHopPeriod.setStatus('current')
ccsUpSpecMgmtCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 23), Bits().clone(namedValues=NamedValues(("snrBelowThres", 0), ("cnrBelowThres", 1), ("corrFecAboveThres", 2), ("uncorrFecAboveThres", 3), ("snrAboveThres", 4), ("cnrAboveThres", 5), ("corrFecBelowThres", 6), ("uncorrFecBelowThres", 7), ("noActiveModem", 8), ("uncorrFecAboveSecondThres", 9), ("others", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtCriteria.setStatus('current')
ccsUpSpecMgmtSpecGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtSpecGroup.setStatus('current')
ccsUpSpecMgmtSharedSpectrum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUpSpecMgmtSharedSpectrum.setStatus('current')
ccsSpecGroupFreqTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 2), )
if mibBuilder.loadTexts: ccsSpecGroupFreqTable.setStatus('current')
ccsSpecGroupFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupNumber"), (0, "CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupFreqIndex"))
if mibBuilder.loadTexts: ccsSpecGroupFreqEntry.setStatus('current')
ccsSpecGroupFreqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ccsSpecGroupFreqIndex.setStatus('current')
ccsSpecGroupFreqType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("centerFreq", 1), ("bandFreq", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpecGroupFreqType.setStatus('current')
ccsSpecGroupFreqLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpecGroupFreqLower.setStatus('current')
ccsSpecGroupFreqUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpecGroupFreqUpper.setStatus('current')
ccsSpecGroupStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 2, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpecGroupStorage.setStatus('current')
ccsSpecGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 114, 1, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsSpecGroupRowStatus.setStatus('current')
ciscoCableSpectrumMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 114, 2))
ccsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 114, 2, 0))
ccsHoppingNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 114, 2, 0, 1)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopCondition"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToModProfile"))
if mibBuilder.loadTexts: ccsHoppingNotification.setStatus('deprecated')
ccsSpecMgmtNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 114, 2, 0, 2)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtCriteria"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToModProfile"))
if mibBuilder.loadTexts: ccsSpecMgmtNotification.setStatus('current')
ciscoCableSpectrumMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 114, 3))
ciscoCableSpectrumMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 1))
ciscoCableSpectrumMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2))
ccsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 1, 1)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsCompliance = ccsCompliance.setStatus('obsolete')
ccsCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 1, 2)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsCompliance2 = ccsCompliance2.setStatus('deprecated')
ccsCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 1, 3)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapGroupRev1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsCompliance3 = ccsCompliance3.setStatus('deprecated')
ccsCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 1, 4)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapGroupRev1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsNotificationGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsCompliance4 = ccsCompliance4.setStatus('deprecated')
ccsCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 1, 5)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapGroupRev2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsNotificationGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsCompliance5 = ccsCompliance5.setStatus('deprecated')
ccsCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 1, 6)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapGroupRev2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsNotificationGroupRev1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtGroupRev3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsCompliance6 = ccsCompliance6.setStatus('deprecated')
ccsCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 1, 7)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapGroupRev2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsNotificationGroupRev1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtGroupRev4"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupFreqGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpInSpecGroupGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpInFiberNodeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsCompliance7 = ccsCompliance7.setStatus('current')
ccsFlapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 1)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapListMaxSize"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapListCurrentSize"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapAging"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapInsertionTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapUpstreamIfIndex"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapDownstreamIfIndex"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapInsertionFails"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapHits"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapMisses"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapCrcErrors"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapPowerAdjustments"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapTotal"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapLastFlapTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapCreateTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsFlapGroup = ccsFlapGroup.setStatus('deprecated')
ccsSpectrumGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 2)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestIfIndex"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestMacAddr"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestUpperFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestLowFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestResolution"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestStartTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestStoppedTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestOperation"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestOperState"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumRequestStatus"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumDataFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpectrumDataPower"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSNRRequestMacAddr"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSNRRequestSNR"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSNRRequestStartTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSNRRequestStoppedTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSNRRequestOperation"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSNRRequestOperState"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSNRRequestStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsSpectrumGroup = ccsSpectrumGroup.setStatus('current')
ccsUpSpecMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 3)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopPriority"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecCorrectThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecCorrectThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecUnCorrectThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecUnCorrectThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrPollPeriod"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopCondition"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSNR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsUpSpecMgmtGroup = ccsUpSpecMgmtGroup.setStatus('deprecated')
ccsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 4)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsHoppingNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsNotificationGroup = ccsNotificationGroup.setStatus('deprecated')
ccsFlapGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 5)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapListMaxSize"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapListCurrentSize"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapAging"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapInsertionTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapUpstreamIfIndex"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapDownstreamIfIndex"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapLastFlapTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapCreateTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapRowStatus"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapInsertionFailNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapHitNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapMissNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapCrcErrorNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapPowerAdjustmentNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapTotalNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapResetNow"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapLastResetTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapPowerAdjustThreshold"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapMissThreshold"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapResetAll"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapClearAll"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapLastClearTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsFlapGroupRev1 = ccsFlapGroupRev1.setStatus('deprecated')
ccsUpSpecMgmtGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 6)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopPriority"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecCorrectThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecCorrectThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecUnCorrectThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecUnCorrectThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopCondition"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSNR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsUpSpecMgmtGroupRev1 = ccsUpSpecMgmtGroupRev1.setStatus('deprecated')
ccsFlapGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 7)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapListMaxSize"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapListCurrentSize"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapAging"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFlapInsertionTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapLastFlapTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapCreateTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapInsertionFailNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapHitNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapMissNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapCrcErrorNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapPowerAdjustmentNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapTotalNum"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapResetNow"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapLastResetTime"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsCmFlapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsFlapGroupRev2 = ccsFlapGroupRev2.setStatus('current')
ccsUpSpecMgmtGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 8)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopPriority"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecCorrectThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecCorrectThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecUnCorrectThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecUnCorrectThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopCondition"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSNR"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtUpperBoundFreq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsUpSpecMgmtGroupRev2 = ccsUpSpecMgmtGroupRev2.setStatus('deprecated')
ccsNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 9)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsSpecMgmtNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsNotificationGroupRev1 = ccsNotificationGroupRev1.setStatus('current')
ccsUpSpecMgmtGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 10)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopPriority"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecCorrectThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecUnCorrectThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecUnCorrectThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSNR"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtUpperBoundFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtCnrThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtCnrThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtCNR"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtMissedMaintMsgThres"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopPeriod"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtCriteria"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsUpSpecMgmtGroupRev3 = ccsUpSpecMgmtGroupRev3.setStatus('deprecated')
ccsSpecGroupFreqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 11)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupFreqType"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupFreqLower"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupFreqUpper"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupStorage"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsSpecGroupFreqGroup = ccsSpecGroupFreqGroup.setStatus('current')
ccsUpSpecMgmtGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 12)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopPriority"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSnrThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecCorrectThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecUnCorrectThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFecUnCorrectThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToCenterFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToBandWidth"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtFromModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtToModProfile"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSNR"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtUpperBoundFreq"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtCnrThres1"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtCnrThres2"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtCNR"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtMissedMaintMsgThres"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtHopPeriod"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtCriteria"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSpecGroup"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsUpSpecMgmtSharedSpectrum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsUpSpecMgmtGroupRev4 = ccsUpSpecMgmtGroupRev4.setStatus('current')
ccsUpInSpecGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 13)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupUpstreamStorage"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsSpecGroupUpstreamRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsUpInSpecGroupGroup = ccsUpInSpecGroupGroup.setStatus('current')
ccsUpInFiberNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 114, 3, 2, 14)).setObjects(("CISCO-CABLE-SPECTRUM-MIB", "ccsFiberNodeUpstreamStorage"), ("CISCO-CABLE-SPECTRUM-MIB", "ccsFiberNodeUpstreamRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccsUpInFiberNodeGroup = ccsUpInFiberNodeGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-CABLE-SPECTRUM-MIB", ccsSpectrumRequestMacAddr=ccsSpectrumRequestMacAddr, ccsUpSpecMgmtFecCorrectThres1=ccsUpSpecMgmtFecCorrectThres1, ccsFlapCrcErrors=ccsFlapCrcErrors, ccsSpectrumDataTable=ccsSpectrumDataTable, ccsUpSpecMgmtEntry=ccsUpSpecMgmtEntry, ccsCompliance5=ccsCompliance5, ciscoCableSpectrumMIBConformance=ciscoCableSpectrumMIBConformance, ccsSpecMgmtNotification=ccsSpecMgmtNotification, ccsCompliance4=ccsCompliance4, ccsCompliance6=ccsCompliance6, ccsSNRRequestStoppedTime=ccsSNRRequestStoppedTime, PYSNMP_MODULE_ID=ciscoCableSpectrumMIB, ccsCmFlapCrcErrorNum=ccsCmFlapCrcErrorNum, ciscoCableSpectrumMIBCompliances=ciscoCableSpectrumMIBCompliances, ccsSpectrumRequestOperation=ccsSpectrumRequestOperation, ccsSpectrumRequestIfIndex=ccsSpectrumRequestIfIndex, ccsFlapResetNow=ccsFlapResetNow, ccsUpSpecMgmtToCenterFreq=ccsUpSpecMgmtToCenterFreq, ccsUpSpecMgmtSnrPollPeriod=ccsUpSpecMgmtSnrPollPeriod, ccsCmFlapRowStatus=ccsCmFlapRowStatus, ccsSpectrumRequestStoppedTime=ccsSpectrumRequestStoppedTime, ccsFlapRowStatus=ccsFlapRowStatus, ccsUpInFiberNodeTable=ccsUpInFiberNodeTable, ccsUpSpecMgmtFecCorrectThres2=ccsUpSpecMgmtFecCorrectThres2, ccsUpSpecMgmtUpperBoundFreq=ccsUpSpecMgmtUpperBoundFreq, ccsUpSpecMgmtCnrThres1=ccsUpSpecMgmtCnrThres1, ccsUpSpecMgmtHopPriority=ccsUpSpecMgmtHopPriority, ccsMIBNotifications=ccsMIBNotifications, ccsFlapListCurrentSize=ccsFlapListCurrentSize, ccsUpSpecMgmtGroup=ccsUpSpecMgmtGroup, CCSRequestOperation=CCSRequestOperation, ccsFlapHits=ccsFlapHits, ccsSpectrumRequestIndex=ccsSpectrumRequestIndex, ciscoCableSpectrumMIBGroups=ciscoCableSpectrumMIBGroups, ccsUpSpecMgmtCriteria=ccsUpSpecMgmtCriteria, ccsSpecGroupRowStatus=ccsSpecGroupRowStatus, CCSRequestOperState=CCSRequestOperState, ccsSpectrumRequestEntry=ccsSpectrumRequestEntry, ccsFiberNodeUpstreamStorage=ccsFiberNodeUpstreamStorage, ccsSpectrumDataFreq=ccsSpectrumDataFreq, ccsHoppingNotification=ccsHoppingNotification, ccsSpectrumObjects=ccsSpectrumObjects, ccsSpecGroupFreqTable=ccsSpecGroupFreqTable, ccsSpecGroupFreqUpper=ccsSpecGroupFreqUpper, ccsFlapCrcErrorNum=ccsFlapCrcErrorNum, ccsSpecGroupFreqType=ccsSpecGroupFreqType, ccsCompliance=ccsCompliance, ccsSpectrumDataPower=ccsSpectrumDataPower, ccsSNRRequestTable=ccsSNRRequestTable, ccsSNRRequestOperation=ccsSNRRequestOperation, ccsSpecGroupFreqGroup=ccsSpecGroupFreqGroup, ciscoCableSpectrumMIB=ciscoCableSpectrumMIB, ccsCmFlapMacAddr=ccsCmFlapMacAddr, ccsUpInFiberNodeEntry=ccsUpInFiberNodeEntry, ccsFlapTotal=ccsFlapTotal, ccsCmFlapInsertionFailNum=ccsCmFlapInsertionFailNum, ccsUpSpecMgmtToModProfile=ccsUpSpecMgmtToModProfile, ccsFlapGroupRev2=ccsFlapGroupRev2, ccsFlapPowerAdjustThreshold=ccsFlapPowerAdjustThreshold, ccsUpSpecMgmtSNR=ccsUpSpecMgmtSNR, ccsUpSpecMgmtSpecGroup=ccsUpSpecMgmtSpecGroup, ccsSpectrumRequestTable=ccsSpectrumRequestTable, ccsUpSpecMgmtMissedMaintMsgThres=ccsUpSpecMgmtMissedMaintMsgThres, ccsCompliance3=ccsCompliance3, ccsConfigObjects=ccsConfigObjects, ccsSpecGroupNumber=ccsSpecGroupNumber, ccsSpectrumRequestUpperFreq=ccsSpectrumRequestUpperFreq, ccsFlapGroupRev1=ccsFlapGroupRev1, ccsFlapObjects=ccsFlapObjects, ccsFlapLastClearTime=ccsFlapLastClearTime, ccsSpecGroupStorage=ccsSpecGroupStorage, ccsCmFlapEntry=ccsCmFlapEntry, ccsSNRRequestSNR=ccsSNRRequestSNR, ccsSpectrumRequestStartTime=ccsSpectrumRequestStartTime, ccsFlapMacAddr=ccsFlapMacAddr, CCSMeasuredFrequency=CCSMeasuredFrequency, ccsFlapMissThreshold=ccsFlapMissThreshold, ccsCmFlapResetNow=ccsCmFlapResetNow, ccsFlapLastFlapTime=ccsFlapLastFlapTime, ccsUpInSpecGroupTable=ccsUpInSpecGroupTable, ccsUpInSpecGroupGroup=ccsUpInSpecGroupGroup, ccsSpecGroupFreqIndex=ccsSpecGroupFreqIndex, ccsFlapInsertionFailNum=ccsFlapInsertionFailNum, ccsFlapMisses=ccsFlapMisses, ccsFlapPowerAdjustmentNum=ccsFlapPowerAdjustmentNum, ccsFlapTable=ccsFlapTable, ccsNotificationGroupRev1=ccsNotificationGroupRev1, ccsCmFlapLastFlapTime=ccsCmFlapLastFlapTime, ccsFiberNodeUpstreamIfIndex=ccsFiberNodeUpstreamIfIndex, ccsSNRRequestStatus=ccsSNRRequestStatus, ccsUpSpecMgmtSnrThres1=ccsUpSpecMgmtSnrThres1, ccsCmFlapCreateTime=ccsCmFlapCreateTime, ccsUpSpecMgmtToBandWidth=ccsUpSpecMgmtToBandWidth, ccsUpSpecMgmtGroupRev3=ccsUpSpecMgmtGroupRev3, ciscoCableSpectrumMIBObjects=ciscoCableSpectrumMIBObjects, ccsFlapInsertionFails=ccsFlapInsertionFails, ccsFlapTotalNum=ccsFlapTotalNum, ccsFlapInsertionTime=ccsFlapInsertionTime, ccsFlapEntry=ccsFlapEntry, ccsFiberNodeUpstreamRowStatus=ccsFiberNodeUpstreamRowStatus, ccsSpecGroupFreqLower=ccsSpecGroupFreqLower, ccsFlapGroup=ccsFlapGroup, ccsUpSpecMgmtFecUnCorrectThres2=ccsUpSpecMgmtFecUnCorrectThres2, ccsSpectrumRequestOperState=ccsSpectrumRequestOperState, ccsSpectrumRequestLowFreq=ccsSpectrumRequestLowFreq, ccsCmFlapTable=ccsCmFlapTable, ccsCompliance2=ccsCompliance2, ccsSNRRequestIndex=ccsSNRRequestIndex, ccsUpSpecMgmtGroupRev2=ccsUpSpecMgmtGroupRev2, ccsSpecGroupUpstreamIfIndex=ccsSpecGroupUpstreamIfIndex, ccsSNRRequestStartTime=ccsSNRRequestStartTime, ccsUpInSpecGroupEntry=ccsUpInSpecGroupEntry, ccsUpSpecMgmtSharedSpectrum=ccsUpSpecMgmtSharedSpectrum, ccsSpectrumRequestResolution=ccsSpectrumRequestResolution, ccsSNRRequestEntry=ccsSNRRequestEntry, ccsNotificationGroup=ccsNotificationGroup, ccsUpSpecMgmtCNR=ccsUpSpecMgmtCNR, ccsCmFlapHitNum=ccsCmFlapHitNum, ccsUpSpecMgmtHopCondition=ccsUpSpecMgmtHopCondition, ccsSpecGroupFreqEntry=ccsSpecGroupFreqEntry, ccsSpecGroupUpstreamStorage=ccsSpecGroupUpstreamStorage, ccsUpSpecMgmtSnrThres2=ccsUpSpecMgmtSnrThres2, ccsCmFlapUpstreamIfIndex=ccsCmFlapUpstreamIfIndex, ccsSpectrumDataEntry=ccsSpectrumDataEntry, ccsCompliance7=ccsCompliance7, CCSFrequency=CCSFrequency, ccsFiberNodeNumber=ccsFiberNodeNumber, ccsFlapDownstreamIfIndex=ccsFlapDownstreamIfIndex, ccsUpSpecMgmtCnrThres2=ccsUpSpecMgmtCnrThres2, ccsCmFlapMissNum=ccsCmFlapMissNum, ccsCmFlapLastResetTime=ccsCmFlapLastResetTime, ccsFlapMissNum=ccsFlapMissNum, ccsUpSpecMgmtFromCenterFreq=ccsUpSpecMgmtFromCenterFreq, ccsUpSpecMgmtHopPeriod=ccsUpSpecMgmtHopPeriod, ccsUpSpecMgmtFromBandWidth=ccsUpSpecMgmtFromBandWidth, ccsFlapPowerAdjustments=ccsFlapPowerAdjustments, ccsUpSpecMgmtFromModProfile=ccsUpSpecMgmtFromModProfile, ccsFlapUpstreamIfIndex=ccsFlapUpstreamIfIndex, ccsFlapListMaxSize=ccsFlapListMaxSize, ccsFlapClearAll=ccsFlapClearAll, ccsSpectrumGroup=ccsSpectrumGroup, ccsCmFlapDownstreamIfIndex=ccsCmFlapDownstreamIfIndex, ccsSpecGroupUpstreamRowStatus=ccsSpecGroupUpstreamRowStatus, ccsCmFlapPowerAdjustmentNum=ccsCmFlapPowerAdjustmentNum, ccsSpectrumRequestStatus=ccsSpectrumRequestStatus, ccsFlapHitNum=ccsFlapHitNum, ccsUpSpecMgmtGroupRev1=ccsUpSpecMgmtGroupRev1, ccsUpSpecMgmtGroupRev4=ccsUpSpecMgmtGroupRev4, ccsSNRRequestOperState=ccsSNRRequestOperState, ccsSNRRequestMacAddr=ccsSNRRequestMacAddr, ccsUpSpecMgmtTable=ccsUpSpecMgmtTable, ccsFlapAging=ccsFlapAging, ccsFlapResetAll=ccsFlapResetAll, ccsUpInFiberNodeGroup=ccsUpInFiberNodeGroup, ccsUpSpecMgmtFecUnCorrectThres1=ccsUpSpecMgmtFecUnCorrectThres1, ciscoCableSpectrumMIBNotificationPrefix=ciscoCableSpectrumMIBNotificationPrefix, ccsCmFlapTotalNum=ccsCmFlapTotalNum, ccsFlapLastResetTime=ccsFlapLastResetTime, ccsFlapCreateTime=ccsFlapCreateTime)
