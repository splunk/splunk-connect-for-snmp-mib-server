#
# PySNMP MIB module ERI-DNX-HDS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERI-DNX-HDS3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:51:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
trapSequence, OneByteField, LinkPortAddress, devices, PortStatus, FunctionSwitch, DecisionType, LinkCmdStatus = mibBuilder.importSymbols("ERI-DNX-SMC-MIB", "trapSequence", "OneByteField", "LinkPortAddress", "devices", "PortStatus", "FunctionSwitch", "DecisionType", "LinkCmdStatus")
eriMibs, = mibBuilder.importSymbols("ERI-ROOT-SMI", "eriMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Bits, Integer32, Unsigned32, Counter64, NotificationType, TimeTicks, Gauge32, ObjectIdentity, ModuleIdentity, Counter32, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "Integer32", "Unsigned32", "Counter64", "NotificationType", "TimeTicks", "Gauge32", "ObjectIdentity", "ModuleIdentity", "Counter32", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eriDNXHybridDS3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 644, 3, 5))
eriDNXHybridDS3MIB.setRevisions(('2003-01-27 00:00', '2002-04-08 00:00', '2002-03-14 00:00', '2002-01-04 00:00', '2001-10-10 00:00', '2001-04-03 00:00', '2001-03-01 00:00', '2000-09-15 00:00',))
if mibBuilder.loadTexts: eriDNXHybridDS3MIB.setLastUpdated('200301270000Z')
if mibBuilder.loadTexts: eriDNXHybridDS3MIB.setOrganization('Eastern Research, Inc.')
dnxHDS3 = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2))
hds3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1))
hds3Diag = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2))
class DS2GroupType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("e1", 0), ("ds1", 1))

hds3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1), )
if mibBuilder.loadTexts: hds3PortConfigTable.setStatus('current')
hds3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1), ).setIndexNames((0, "ERI-DNX-HDS3-MIB", "hds3PortCfgAddr"))
if mibBuilder.loadTexts: hds3PortConfigEntry.setStatus('current')
hds3PortCfgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3PortCfgAddr.setStatus('current')
hds3PortCfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3PortCfgResource.setStatus('current')
hds3PortCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3PortCfgName.setStatus('current')
hds3FacilityId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3FacilityId.setStatus('obsolete')
hds3EquipmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3EquipmentId.setStatus('obsolete')
hds3Location = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3Location.setStatus('obsolete')
hds3FrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3FrameId.setStatus('obsolete')
hds3UnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3UnitName.setStatus('obsolete')
hds3PortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3PortNumber.setStatus('obsolete')
hds3Generator = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3Generator.setStatus('obsolete')
hds3M13OpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bellcoreM13", 0), ("c-bitParity", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3M13OpMode.setStatus('current')
hds3RcvLoopTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 12), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3RcvLoopTiming.setStatus('current')
hds3ShortCable = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 13), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3ShortCable.setStatus('current')
hds3M13RemLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("third-cbit-inverted", 0), ("second-cbit-inverted", 1), ("first-cbit-inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3M13RemLoop.setStatus('current')
hds3FEACLoopbackReq = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 15), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3FEACLoopbackReq.setStatus('current')
hds3XmtAISLocalLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("framed-1010-cbitZero", 1), ("framed-allones-cbitZero", 2), ("unframed-allones", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3XmtAISLocalLoop.setStatus('current')
hds3RcvAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("framed1010-noOverheadBits", 1), ("cbitZero-noPayloadBits", 2), ("framed1010-cbitZero", 3), ("framed1111-noOverheadBits", 4), ("unframed-allones", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3RcvAIS.setStatus('current')
hds3XmtAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("framed-1010-cbitZero", 1), ("framed-allones-cbitZero", 2), ("unframed-allones", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3XmtAIS.setStatus('current')
hds3DS2Group1 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 19), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group1.setStatus('current')
hds3DS2Group2 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 20), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group2.setStatus('current')
hds3DS2Group3 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 21), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group3.setStatus('current')
hds3DS2Group4 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 22), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group4.setStatus('current')
hds3DS2Group5 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 23), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group5.setStatus('current')
hds3DS2Group6 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 24), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group6.setStatus('current')
hds3DS2Group7 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 25), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group7.setStatus('current')
hds3CmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 26), LinkCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3CmdStatus.setStatus('current')
hds3T1E1LinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2), )
if mibBuilder.loadTexts: hds3T1E1LinkConfigTable.setStatus('current')
hds3T1E1LinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1), ).setIndexNames((0, "ERI-DNX-HDS3-MIB", "hds3T1E1CfgLinkAddr"))
if mibBuilder.loadTexts: hds3T1E1LinkConfigEntry.setStatus('current')
hds3T1E1CfgLinkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3T1E1CfgLinkAddr.setStatus('current')
hds3T1E1CfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3T1E1CfgResource.setStatus('current')
hds3T1E1CfgLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1CfgLinkName.setStatus('current')
hds3T1E1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 4), PortStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1Status.setStatus('current')
hds3T1E1Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("framed", 1), ("unframed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1Clear.setStatus('current')
hds3T1E1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e1", 0), ("e1Crc", 1), ("e1Cas", 2), ("e1CasCrc", 3), ("e1Unframed", 4), ("t1Esf", 5), ("t1D4", 6), ("t1Unframed", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1Framing.setStatus('current')
hds3T1E1NetLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 7), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1NetLoop.setStatus('current')
hds3T1E1YelAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 8), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1YelAlrm.setStatus('current')
hds3T1E1RecoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 10, 15))).clone(namedValues=NamedValues(("timeout-3-secs", 3), ("timeout-10-secs", 10), ("timeout-15-secs", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1RecoverTime.setStatus('current')
hds3T1E1EsfFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("att-54016", 0), ("ansi-t1-403", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1EsfFormat.setStatus('current')
hds3T1E1IdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("busy", 0), ("idle", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1IdleCode.setStatus('current')
hds3T1E1CfgCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 12), LinkCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1CfgCmdStatus.setStatus('current')
hds3T1E1Gr303Facility = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 13), DecisionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3T1E1Gr303Facility.setStatus('obsolete')
hds3T1E1NationalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 14), OneByteField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1NationalBits.setStatus('current')
hds3T1E1InterNational = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 15), OneByteField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1InterNational.setStatus('current')
hds3FramerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1), )
if mibBuilder.loadTexts: hds3FramerStatusTable.setStatus('current')
hds3FramerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1), ).setIndexNames((0, "ERI-DNX-HDS3-MIB", "hds3FramerStatusAddr"))
if mibBuilder.loadTexts: hds3FramerStatusEntry.setStatus('current')
hds3FramerStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusAddr.setStatus('current')
hds3FramerStatusResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusResource.setStatus('current')
hds3FramerStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 32, 64, 2147483647))).clone(namedValues=NamedValues(("ok", 0), ("ais", 8), ("lof", 32), ("los", 64), ("errors", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusState.setStatus('current')
hds3FramerStatusRedAlrmErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusRedAlrmErrSecs.setStatus('current')
hds3FramerStatusLOSErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusLOSErrSecs.setStatus('current')
hds3FramerStatusOOFErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusOOFErrSecs.setStatus('current')
hds3FramerStatusAISErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusAISErrSecs.setStatus('current')
hds3FramerStatusRcvIdleErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusRcvIdleErrSecs.setStatus('current')
hds3FramerStatusFarEndRcvErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusFarEndRcvErrSecs.setStatus('current')
hds3FramerStatusCFAErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusCFAErrSecs.setStatus('current')
hds3FramerStatusTotErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusTotErrSecs.setStatus('current')
hds3FramerStatusPbitParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusPbitParityErrs.setStatus('current')
hds3FramerStatusCbitParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusCbitParityErrs.setStatus('current')
hds3FramerStatusFebeErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusFebeErrs.setStatus('current')
hds3FramerStatusLCVErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusLCVErrs.setStatus('current')
hds3FramerStatusFramingErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusFramingErrs.setStatus('current')
hds3FramerStatusExcessZeroErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusExcessZeroErrs.setStatus('current')
hds3FramerStatusInsErrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8))).clone(namedValues=NamedValues(("febe", 1), ("p-bit-parity", 2), ("c-bit-parity", 3), ("multiframe-align", 4), ("frame-alignment", 5), ("allErrors", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3FramerStatusInsErrMode.setStatus('current')
hds3FramerStatusCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14, 16, 101, 114, 116, 200, 205, 206, 208, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update", 1), ("clearErrors", 14), ("insertError", 16), ("update-successful", 101), ("clear-successful", 114), ("insert-successful", 116), ("err-general-framer-error", 200), ("err-test-in-progress", 205), ("err-field-cannot-be-set", 206), ("err-invalid-command", 208), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3FramerStatusCmdStatus.setStatus('current')
hds3LIUTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2), )
if mibBuilder.loadTexts: hds3LIUTable.setStatus('current')
hds3LIUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1), ).setIndexNames((0, "ERI-DNX-HDS3-MIB", "hds3LIUAddr"))
if mibBuilder.loadTexts: hds3LIUEntry.setStatus('current')
hds3LIUAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUAddr.setStatus('current')
hds3LIUResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUResource.setStatus('current')
hds3LIUBertState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(44, 45))).clone(namedValues=NamedValues(("liu-bert", 44), ("off", 45)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3LIUBertState.setStatus('current')
hds3LIUBertErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUBertErrSecs.setStatus('current')
hds3LIUBertDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUBertDuration.setStatus('current')
hds3LIULoopType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 36, 39))).clone(namedValues=NamedValues(("off", 0), ("ds3-local", 1), ("ds3-line", 36), ("liu", 39)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3LIULoopType.setStatus('current')
hds3LIUDigitalErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUDigitalErrs.setStatus('current')
hds3LIUAnalogErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUAnalogErrs.setStatus('current')
hds3LIUExcessZeroErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUExcessZeroErrs.setStatus('current')
hds3LIUCodingViolationErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUCodingViolationErrs.setStatus('current')
hds3LIUPRBSCheckErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUPRBSCheckErrs.setStatus('current')
hds3LIUCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14, 101, 114, 200, 202, 203, 205, 206, 208, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update", 1), ("clearErrors", 14), ("update-successful", 101), ("clear-successful", 114), ("err-general-liu-error", 200), ("err-invalid-loop-type", 202), ("err-invalid-bert-type", 203), ("err-test-in-progress", 205), ("err-field-cannot-be-set", 206), ("err-invalid-command", 208), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3LIUCmdStatus.setStatus('current')
dnxHDS3Enterprise = ObjectIdentity((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 0))
if mibBuilder.loadTexts: dnxHDS3Enterprise.setStatus('current')
hds3PortConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 0, 1)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-HDS3-MIB", "hds3PortCfgAddr"), ("ERI-DNX-HDS3-MIB", "hds3CmdStatus"))
if mibBuilder.loadTexts: hds3PortConfigTrap.setStatus('current')
hds3T1E1ConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 0, 2)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-HDS3-MIB", "hds3T1E1CfgLinkAddr"), ("ERI-DNX-HDS3-MIB", "hds3T1E1CfgCmdStatus"))
if mibBuilder.loadTexts: hds3T1E1ConfigTrap.setStatus('current')
mibBuilder.exportSymbols("ERI-DNX-HDS3-MIB", hds3FramerStatusOOFErrSecs=hds3FramerStatusOOFErrSecs, hds3CmdStatus=hds3CmdStatus, hds3FramerStatusState=hds3FramerStatusState, hds3LIUPRBSCheckErrs=hds3LIUPRBSCheckErrs, hds3FramerStatusFramingErrs=hds3FramerStatusFramingErrs, hds3LIUExcessZeroErrs=hds3LIUExcessZeroErrs, hds3T1E1YelAlrm=hds3T1E1YelAlrm, hds3T1E1IdleCode=hds3T1E1IdleCode, hds3FramerStatusCmdStatus=hds3FramerStatusCmdStatus, hds3PortNumber=hds3PortNumber, hds3FramerStatusPbitParityErrs=hds3FramerStatusPbitParityErrs, hds3LIUCmdStatus=hds3LIUCmdStatus, dnxHDS3Enterprise=dnxHDS3Enterprise, hds3Location=hds3Location, hds3FramerStatusLOSErrSecs=hds3FramerStatusLOSErrSecs, hds3Config=hds3Config, hds3T1E1LinkConfigTable=hds3T1E1LinkConfigTable, hds3PortConfigTable=hds3PortConfigTable, hds3DS2Group7=hds3DS2Group7, dnxHDS3=dnxHDS3, hds3FramerStatusExcessZeroErrs=hds3FramerStatusExcessZeroErrs, hds3T1E1LinkConfigEntry=hds3T1E1LinkConfigEntry, hds3FramerStatusLCVErrs=hds3FramerStatusLCVErrs, PYSNMP_MODULE_ID=eriDNXHybridDS3MIB, hds3XmtAIS=hds3XmtAIS, hds3DS2Group3=hds3DS2Group3, hds3T1E1CfgLinkName=hds3T1E1CfgLinkName, hds3FramerStatusTable=hds3FramerStatusTable, hds3LIUAnalogErrs=hds3LIUAnalogErrs, hds3M13OpMode=hds3M13OpMode, hds3DS2Group6=hds3DS2Group6, hds3T1E1CfgResource=hds3T1E1CfgResource, hds3T1E1Gr303Facility=hds3T1E1Gr303Facility, hds3FramerStatusTotErrSecs=hds3FramerStatusTotErrSecs, hds3LIUDigitalErrs=hds3LIUDigitalErrs, hds3LIUBertState=hds3LIUBertState, hds3FramerStatusFebeErrs=hds3FramerStatusFebeErrs, hds3FramerStatusCbitParityErrs=hds3FramerStatusCbitParityErrs, hds3FramerStatusCFAErrSecs=hds3FramerStatusCFAErrSecs, hds3FacilityId=hds3FacilityId, eriDNXHybridDS3MIB=eriDNXHybridDS3MIB, hds3PortCfgResource=hds3PortCfgResource, hds3FramerStatusAddr=hds3FramerStatusAddr, hds3LIUCodingViolationErrs=hds3LIUCodingViolationErrs, hds3Diag=hds3Diag, hds3T1E1Framing=hds3T1E1Framing, hds3Generator=hds3Generator, hds3PortCfgAddr=hds3PortCfgAddr, hds3DS2Group4=hds3DS2Group4, DS2GroupType=DS2GroupType, hds3XmtAISLocalLoop=hds3XmtAISLocalLoop, hds3T1E1Clear=hds3T1E1Clear, hds3T1E1EsfFormat=hds3T1E1EsfFormat, hds3PortConfigTrap=hds3PortConfigTrap, hds3DS2Group5=hds3DS2Group5, hds3T1E1RecoverTime=hds3T1E1RecoverTime, hds3LIULoopType=hds3LIULoopType, hds3FramerStatusAISErrSecs=hds3FramerStatusAISErrSecs, hds3FramerStatusInsErrMode=hds3FramerStatusInsErrMode, hds3T1E1NationalBits=hds3T1E1NationalBits, hds3DS2Group2=hds3DS2Group2, hds3T1E1InterNational=hds3T1E1InterNational, hds3DS2Group1=hds3DS2Group1, hds3FEACLoopbackReq=hds3FEACLoopbackReq, hds3T1E1ConfigTrap=hds3T1E1ConfigTrap, hds3M13RemLoop=hds3M13RemLoop, hds3T1E1CfgLinkAddr=hds3T1E1CfgLinkAddr, hds3LIUEntry=hds3LIUEntry, hds3LIUResource=hds3LIUResource, hds3FramerStatusRedAlrmErrSecs=hds3FramerStatusRedAlrmErrSecs, hds3FramerStatusFarEndRcvErrSecs=hds3FramerStatusFarEndRcvErrSecs, hds3T1E1NetLoop=hds3T1E1NetLoop, hds3FramerStatusRcvIdleErrSecs=hds3FramerStatusRcvIdleErrSecs, hds3UnitName=hds3UnitName, hds3T1E1Status=hds3T1E1Status, hds3FramerStatusEntry=hds3FramerStatusEntry, hds3EquipmentId=hds3EquipmentId, hds3LIUAddr=hds3LIUAddr, hds3ShortCable=hds3ShortCable, hds3RcvLoopTiming=hds3RcvLoopTiming, hds3FramerStatusResource=hds3FramerStatusResource, hds3PortCfgName=hds3PortCfgName, hds3LIUBertErrSecs=hds3LIUBertErrSecs, hds3PortConfigEntry=hds3PortConfigEntry, hds3LIUTable=hds3LIUTable, hds3LIUBertDuration=hds3LIUBertDuration, hds3FrameId=hds3FrameId, hds3RcvAIS=hds3RcvAIS, hds3T1E1CfgCmdStatus=hds3T1E1CfgCmdStatus)
