#
# PySNMP MIB module ZHONE-Wan-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-Wan-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:41:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, ifAlias, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifAlias", "ifIndex")
PerfIntervalCount, PerfTotalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfTotalCount", "PerfCurrentCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, NotificationType, ModuleIdentity, Unsigned32, IpAddress, Integer32, Counter64, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "NotificationType", "ModuleIdentity", "Unsigned32", "IpAddress", "Integer32", "Counter64", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Counter32")
TimeStamp, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString", "TruthValue")
zhoneDsx, = mibBuilder.importSymbols("Zhone", "zhoneDsx")
ZhoneAdminString, = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString")
zhoneDs1Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 2, 1))
zhoneDs1Mib.setRevisions(('2009-07-23 11:15', '2009-05-12 07:38', '2008-11-10 08:58', '2006-05-12 12:46', '2004-02-05 11:47', '2004-01-21 15:36', '2003-05-15 13:15', '2003-02-04 13:12', '2001-10-22 10:04', '2001-08-22 13:50', '2001-08-14 16:24', '2001-08-09 10:07', '2001-01-18 13:28', '2001-01-04 11:19', '2000-11-13 11:30', '2000-09-21 10:27', '2000-09-12 13:59',))
if mibBuilder.loadTexts: zhoneDs1Mib.setLastUpdated('200905120738Z')
if mibBuilder.loadTexts: zhoneDs1Mib.setOrganization('Zhone Technologies.')
zhoneDs1Table = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2), )
if mibBuilder.loadTexts: zhoneDs1Table.setStatus('current')
zhoneDs1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneLineIndex"))
if mibBuilder.loadTexts: zhoneDs1Entry.setStatus('current')
zhoneLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneLineIndex.setStatus('current')
zhoneTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTimeElapsed.setStatus('current')
zhoneValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneValidIntervals.setStatus('current')
zhoneLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("esf", 2), ("d4", 3), ("slc96", 4), ("e1", 5), ("e1Crc", 6), ("e1Mf", 7), ("e1CrcMf", 8), ("e1Unframed", 9), ("ds1Unframed", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneLineType.setStatus('current')
zhoneLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("jbzs", 1), ("b8zs", 2), ("hdb3", 3), ("zbtsi", 4), ("ami", 5), ("other", 6), ("b6zs", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneLineCoding.setStatus('current')
zhoneSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("sendNoCode", 1), ("sendLineCode", 2), ("sendPayloadCode", 3), ("sendResetCode", 4), ("sendQRSSPattern", 5), ("send511Pattern", 6), ("send3in24Pattern", 7), ("sendOtherTestPattern", 8), ("send2047Pattern", 9), ("send1in2Pattern", 10), ("sendInbandCode", 11), ("sendInbandCodeOff", 12), ("sendLineCodeOff", 13), ("sendPayloadCodeOff", 14), ("send2ToPower9Minus1Pattern", 15), ("send2ToPower11Minus1Pattern", 16), ("send2ToPower15Minus1Pattern", 17), ("send2ToPower20Minus1Pattern", 18), ("send2ToPower23Minus1Pattern", 19))).clone('sendNoCode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneSendCode.setStatus('current')
zhoneCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 7), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCircuitIdentifier.setStatus('current')
zhoneLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoop", 2), ("localLoop", 3), ("payloadLoop", 4))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneLoopbackConfig.setStatus('current')
zhoneLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLineStatus.setStatus('current')
zhoneSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("robbedBit", 2), ("bitOriented", 3), ("messageOriented", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneSignalMode.setStatus('current')
zhoneTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3), ("sonetThroughTiming", 4))).clone('throughTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneTransmitClockSource.setStatus('current')
zhoneFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ansiT1403", 2), ("att54016", 3), ("fdlNone", 4))).clone('fdlNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneFdl.setStatus('current')
zhoneInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneInvalidIntervals.setStatus('current')
zhoneDsxLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx0", 1), ("dsx133", 2), ("dsx266", 3), ("dsx399", 4), ("dsx533", 5), ("dsx655", 6))).clone('dsx0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDsxLineLength.setStatus('current')
zhoneLineStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLineStatusLastChange.setStatus('current')
zhoneLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneLineStatusChangeTrapEnable.setStatus('current')
zhoneLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLoopbackStatus.setStatus('current')
zhoneDs1ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDs1ChannelNumber.setStatus('current')
zhoneChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledDs0", 2), ("enabledDs1", 3))).clone('enabledDs0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneChannelization.setStatus('current')
zhoneDs1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dsx", 2), ("csu", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1Mode.setStatus('current')
zhoneCsuLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("csu00", 1), ("csu75", 2), ("csu150", 3), ("csu225", 4))).clone('csu00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCsuLineLength.setStatus('current')
zhoneClockSourceEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEligible", 1), ("eligible", 2))).clone('notEligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneClockSourceEligibility.setStatus('current')
zhoneCellScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 23), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCellScramble.setStatus('current')
zhoneCosetPolynomial = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCosetPolynomial.setStatus('current')
zhoneDs1ProtocolEmulation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("cpe", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1ProtocolEmulation.setStatus('current')
zhoneDs1SignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopStart", 1), ("groundStart", 2))).clone('loopStart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1SignalType.setStatus('current')
zhoneDs1GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1GroupIndex.setStatus('current')
zhoneDs1LinePower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1LinePower.setStatus('current')
zhoneDs1TimeslotAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 29), Bits().clone(namedValues=NamedValues(("ts0", 0), ("ts1", 1), ("ts2", 2), ("ts3", 3), ("ts4", 4), ("ts5", 5), ("ts6", 6), ("ts7", 7), ("ts8", 8), ("ts9", 9), ("ts10", 10), ("ts11", 11), ("ts12", 12), ("ts13", 13), ("ts14", 14), ("ts15", 15), ("ts16", 16), ("ts17", 17), ("ts18", 18), ("ts19", 19), ("ts20", 20), ("ts21", 21), ("ts22", 22), ("ts23", 23), ("ts24", 24), ("ts25", 25), ("ts26", 26), ("ts27", 27), ("ts28", 28), ("ts29", 29), ("ts30", 30), ("ts31", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1TimeslotAssignment.setStatus('current')
zhoneDs1TxClockRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("adaptive", 2), ("differential", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1TxClockRecovery.setStatus('obsolete')
zhoneDs1TxClockAdaptiveQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stratum1", 1), ("stratum3", 2), ("stratum3e", 3), ("stratum4", 4))).clone('stratum3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1TxClockAdaptiveQuality.setStatus('current')
zhoneDs1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3), )
if mibBuilder.loadTexts: zhoneDs1CurrentTable.setStatus('current')
zhoneDs1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneCurrentIndex"))
if mibBuilder.loadTexts: zhoneDs1CurrentEntry.setStatus('current')
zhoneCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneCurrentIndex.setStatus('current')
zhoneCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentESs.setStatus('current')
zhoneCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentSESs.setStatus('current')
zhoneCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentSEFSs.setStatus('current')
zhoneCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentUASs.setStatus('current')
zhoneCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentCSSs.setStatus('current')
zhoneCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentPCVs.setStatus('current')
zhoneCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentLESs.setStatus('current')
zhoneCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentBESs.setStatus('current')
zhoneCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentDMs.setStatus('current')
zhoneCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentLCVs.setStatus('current')
zhoneDs1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4), )
if mibBuilder.loadTexts: zhoneDs1IntervalTable.setStatus('current')
zhoneDs1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneIntervalIndex"), (0, "ZHONE-Wan-MIB", "zhoneIntervalNumber"))
if mibBuilder.loadTexts: zhoneDs1IntervalEntry.setStatus('current')
zhoneIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneIntervalIndex.setStatus('current')
zhoneIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalNumber.setStatus('current')
zhoneIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalESs.setStatus('current')
zhoneIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalSESs.setStatus('current')
zhoneIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalSEFSs.setStatus('current')
zhoneIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalUASs.setStatus('current')
zhoneIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalCSSs.setStatus('current')
zhoneIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalPCVs.setStatus('current')
zhoneIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalLESs.setStatus('current')
zhoneIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalBESs.setStatus('current')
zhoneIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalDMs.setStatus('current')
zhoneIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalLCVs.setStatus('current')
zhoneIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalValidData.setStatus('current')
zhoneDs1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5), )
if mibBuilder.loadTexts: zhoneDs1TotalTable.setStatus('current')
zhoneDs1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneTotalIndex"))
if mibBuilder.loadTexts: zhoneDs1TotalEntry.setStatus('current')
zhoneTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneTotalIndex.setStatus('current')
zhoneTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalESs.setStatus('current')
zhoneTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalSESs.setStatus('current')
zhoneTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalSEFSs.setStatus('current')
zhoneTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalUASs.setStatus('current')
zhoneTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalCSSs.setStatus('current')
zhoneTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalPCVs.setStatus('current')
zhoneTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalLESs.setStatus('current')
zhoneTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalBESs.setStatus('current')
zhoneTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalDMs.setStatus('current')
zhoneTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalLCVs.setStatus('current')
zhoneDs1FarEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6), )
if mibBuilder.loadTexts: zhoneDs1FarEndCurrentTable.setStatus('current')
zhoneDs1FarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneFarEndCurrentIndex"))
if mibBuilder.loadTexts: zhoneDs1FarEndCurrentEntry.setStatus('current')
zhoneFarEndCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneFarEndCurrentIndex.setStatus('current')
zhoneFarEndTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTimeElapsed.setStatus('current')
zhoneFarEndValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndValidIntervals.setStatus('current')
zhoneFarEndCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentESs.setStatus('current')
zhoneFarEndCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentSESs.setStatus('current')
zhoneFarEndCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentSEFSs.setStatus('current')
zhoneFarEndCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentUASs.setStatus('current')
zhoneFarEndCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentCSSs.setStatus('current')
zhoneFarEndCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentLESs.setStatus('current')
zhoneFarEndCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentPCVs.setStatus('current')
zhoneFarEndCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentBESs.setStatus('current')
zhoneFarEndCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentDMs.setStatus('current')
zhoneFarEndInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndInvalidIntervals.setStatus('current')
zhoneDs1FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7), )
if mibBuilder.loadTexts: zhoneDs1FarEndIntervalTable.setStatus('current')
zhoneDs1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneFarEndIntervalIndex"), (0, "ZHONE-Wan-MIB", "zhoneFarEndIntervalNumber"))
if mibBuilder.loadTexts: zhoneDs1FarEndIntervalEntry.setStatus('current')
zhoneFarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneFarEndIntervalIndex.setStatus('current')
zhoneFarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalNumber.setStatus('current')
zhoneFarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalESs.setStatus('current')
zhoneFarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalSESs.setStatus('current')
zhoneFarEndIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalSEFSs.setStatus('current')
zhoneFarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalUASs.setStatus('current')
zhoneFarEndIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalCSSs.setStatus('current')
zhoneFarEndIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalLESs.setStatus('current')
zhoneFarEndIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalPCVs.setStatus('current')
zhoneFarEndIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalBESs.setStatus('current')
zhoneFarEndIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalDMs.setStatus('current')
zhoneFarEndIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalValidData.setStatus('current')
zhoneDs1FarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8), )
if mibBuilder.loadTexts: zhoneDs1FarEndTotalTable.setStatus('current')
zhoneDs1FarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneFarEndTotalIndex"))
if mibBuilder.loadTexts: zhoneDs1FarEndTotalEntry.setStatus('current')
zhoneFarEndTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneFarEndTotalIndex.setStatus('current')
zhoneFarEndTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalESs.setStatus('current')
zhoneFarEndTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalSESs.setStatus('current')
zhoneFarEndTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalSEFSs.setStatus('current')
zhoneFarEndTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalUASs.setStatus('current')
zhoneFarEndTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalCSSs.setStatus('current')
zhoneFarEndTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalLESs.setStatus('current')
zhoneFarEndTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalPCVs.setStatus('current')
zhoneFarEndTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalBESs.setStatus('current')
zhoneFarEndTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalDMs.setStatus('current')
zhoneChanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 9), )
if mibBuilder.loadTexts: zhoneChanMappingTable.setStatus('current')
zhoneChanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-Wan-MIB", "zhoneDs1ChannelNumber"))
if mibBuilder.loadTexts: zhoneChanMappingEntry.setStatus('current')
zhoneChanMappedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneChanMappedIfIndex.setStatus('current')
zhoneDsxTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 2, 10))
zhoneDsxTrapsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 2, 10, 0))
zhoneLineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 2, 10, 0, 1)).setObjects(("ZHONE-Wan-MIB", "zhoneLineStatus"), ("ZHONE-Wan-MIB", "zhoneLineStatusLastChange"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: zhoneLineStatusChange.setStatus('current')
zhoneDs1BertTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13), )
if mibBuilder.loadTexts: zhoneDs1BertTable.setStatus('current')
zhoneDs1BertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneBertIndex"))
if mibBuilder.loadTexts: zhoneDs1BertEntry.setStatus('current')
zhoneBertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21)))
if mibBuilder.loadTexts: zhoneBertIndex.setStatus('current')
zhoneBertInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneBertInterfaceIndex.setStatus('current')
zhoneBertRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOp", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneBertRequest.setStatus('current')
zhoneBertType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qrss", 1), ("prbs215", 2), ("prbs220", 3))).clone('qrss')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneBertType.setStatus('current')
zhoneBertTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneBertTestDuration.setStatus('current')
zhoneBertLoopUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noloop", 1), ("lineloop", 2), ("payloadloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneBertLoopUp.setStatus('current')
zhoneDs1BertResultsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14), )
if mibBuilder.loadTexts: zhoneDs1BertResultsTable.setStatus('current')
zhoneDs1BertResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneBertIndex"))
if mibBuilder.loadTexts: zhoneDs1BertResultsEntry.setStatus('current')
zhoneBertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("inProgress", 1), ("abortInProgress", 2), ("complete", 3), ("noResults", 4), ("aborted", 5), ("unsupported", 6), ("portNotAdminTest", 7), ("failed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneBertStatus.setStatus('current')
zhoneBertElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneBertElapsedTime.setStatus('current')
zhoneBertErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneBertErroredSeconds.setStatus('current')
zhoneBertOutOfSynchSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneBertOutOfSynchSeconds.setStatus('current')
zhoneBertErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneBertErrors.setStatus('current')
mibBuilder.exportSymbols("ZHONE-Wan-MIB", PYSNMP_MODULE_ID=zhoneDs1Mib, zhoneChannelization=zhoneChannelization, zhoneTotalBESs=zhoneTotalBESs, zhoneFarEndIntervalSEFSs=zhoneFarEndIntervalSEFSs, zhoneCurrentSESs=zhoneCurrentSESs, zhoneFarEndTotalDMs=zhoneFarEndTotalDMs, zhoneDs1CurrentTable=zhoneDs1CurrentTable, zhoneBertStatus=zhoneBertStatus, zhoneCurrentUASs=zhoneCurrentUASs, zhoneIntervalESs=zhoneIntervalESs, zhoneDsxLineLength=zhoneDsxLineLength, zhoneDs1BertResultsTable=zhoneDs1BertResultsTable, zhoneFarEndCurrentCSSs=zhoneFarEndCurrentCSSs, zhoneFarEndCurrentUASs=zhoneFarEndCurrentUASs, zhoneCurrentPCVs=zhoneCurrentPCVs, zhoneChanMappedIfIndex=zhoneChanMappedIfIndex, zhoneFarEndTotalUASs=zhoneFarEndTotalUASs, zhoneLineType=zhoneLineType, zhoneFarEndIntervalNumber=zhoneFarEndIntervalNumber, zhoneClockSourceEligibility=zhoneClockSourceEligibility, zhoneFarEndIntervalValidData=zhoneFarEndIntervalValidData, zhoneFarEndCurrentDMs=zhoneFarEndCurrentDMs, zhoneDs1FarEndIntervalEntry=zhoneDs1FarEndIntervalEntry, zhoneTotalUASs=zhoneTotalUASs, zhoneDs1GroupIndex=zhoneDs1GroupIndex, zhoneIntervalValidData=zhoneIntervalValidData, zhoneDs1BertResultsEntry=zhoneDs1BertResultsEntry, zhoneDs1TimeslotAssignment=zhoneDs1TimeslotAssignment, zhoneBertErrors=zhoneBertErrors, zhoneFarEndTotalSESs=zhoneFarEndTotalSESs, zhoneFarEndTotalLESs=zhoneFarEndTotalLESs, zhoneFarEndIntervalCSSs=zhoneFarEndIntervalCSSs, zhoneDs1FarEndTotalTable=zhoneDs1FarEndTotalTable, zhoneDs1Mode=zhoneDs1Mode, zhoneFarEndValidIntervals=zhoneFarEndValidIntervals, zhoneFarEndCurrentLESs=zhoneFarEndCurrentLESs, zhoneFarEndTotalESs=zhoneFarEndTotalESs, zhoneLineIndex=zhoneLineIndex, zhoneBertErroredSeconds=zhoneBertErroredSeconds, zhoneFarEndIntervalIndex=zhoneFarEndIntervalIndex, zhoneFarEndIntervalESs=zhoneFarEndIntervalESs, zhoneBertOutOfSynchSeconds=zhoneBertOutOfSynchSeconds, zhoneFarEndTotalIndex=zhoneFarEndTotalIndex, zhoneTotalLCVs=zhoneTotalLCVs, zhoneDs1BertTable=zhoneDs1BertTable, zhoneDsxTraps=zhoneDsxTraps, zhoneFarEndCurrentESs=zhoneFarEndCurrentESs, zhoneTotalCSSs=zhoneTotalCSSs, zhoneCellScramble=zhoneCellScramble, zhoneChanMappingEntry=zhoneChanMappingEntry, zhoneFarEndIntervalBESs=zhoneFarEndIntervalBESs, zhoneIntervalSEFSs=zhoneIntervalSEFSs, zhoneTotalLESs=zhoneTotalLESs, zhoneFarEndCurrentPCVs=zhoneFarEndCurrentPCVs, zhoneCosetPolynomial=zhoneCosetPolynomial, zhoneLoopbackConfig=zhoneLoopbackConfig, zhoneDs1TxClockRecovery=zhoneDs1TxClockRecovery, zhoneDs1Table=zhoneDs1Table, zhoneFarEndIntervalUASs=zhoneFarEndIntervalUASs, zhoneCurrentSEFSs=zhoneCurrentSEFSs, zhoneBertInterfaceIndex=zhoneBertInterfaceIndex, zhoneCurrentCSSs=zhoneCurrentCSSs, zhoneFarEndCurrentSEFSs=zhoneFarEndCurrentSEFSs, zhoneDs1Mib=zhoneDs1Mib, zhoneFarEndTotalBESs=zhoneFarEndTotalBESs, zhoneSendCode=zhoneSendCode, zhoneDs1IntervalTable=zhoneDs1IntervalTable, zhoneDs1FarEndIntervalTable=zhoneDs1FarEndIntervalTable, zhoneTotalSEFSs=zhoneTotalSEFSs, zhoneDs1ChannelNumber=zhoneDs1ChannelNumber, zhoneInvalidIntervals=zhoneInvalidIntervals, zhoneFarEndIntervalDMs=zhoneFarEndIntervalDMs, zhoneCurrentLESs=zhoneCurrentLESs, zhoneFarEndCurrentSESs=zhoneFarEndCurrentSESs, zhoneDs1BertEntry=zhoneDs1BertEntry, zhoneTotalSESs=zhoneTotalSESs, zhoneDs1FarEndCurrentTable=zhoneDs1FarEndCurrentTable, zhoneDs1TxClockAdaptiveQuality=zhoneDs1TxClockAdaptiveQuality, zhoneDs1FarEndCurrentEntry=zhoneDs1FarEndCurrentEntry, zhoneDs1LinePower=zhoneDs1LinePower, zhoneBertRequest=zhoneBertRequest, zhoneFdl=zhoneFdl, zhoneDs1TotalEntry=zhoneDs1TotalEntry, zhoneFarEndCurrentBESs=zhoneFarEndCurrentBESs, zhoneBertTestDuration=zhoneBertTestDuration, zhoneIntervalBESs=zhoneIntervalBESs, zhoneBertType=zhoneBertType, zhoneLineCoding=zhoneLineCoding, zhoneBertElapsedTime=zhoneBertElapsedTime, zhoneCurrentDMs=zhoneCurrentDMs, zhoneLineStatusLastChange=zhoneLineStatusLastChange, zhoneTotalDMs=zhoneTotalDMs, zhoneValidIntervals=zhoneValidIntervals, zhoneBertIndex=zhoneBertIndex, zhoneLineStatusChange=zhoneLineStatusChange, zhoneTotalESs=zhoneTotalESs, zhoneCsuLineLength=zhoneCsuLineLength, zhoneTimeElapsed=zhoneTimeElapsed, zhoneIntervalLCVs=zhoneIntervalLCVs, zhoneLoopbackStatus=zhoneLoopbackStatus, zhoneFarEndCurrentIndex=zhoneFarEndCurrentIndex, zhoneDs1FarEndTotalEntry=zhoneDs1FarEndTotalEntry, zhoneBertLoopUp=zhoneBertLoopUp, zhoneFarEndTotalPCVs=zhoneFarEndTotalPCVs, zhoneDs1IntervalEntry=zhoneDs1IntervalEntry, zhoneFarEndIntervalLESs=zhoneFarEndIntervalLESs, zhoneIntervalNumber=zhoneIntervalNumber, zhoneIntervalUASs=zhoneIntervalUASs, zhoneIntervalCSSs=zhoneIntervalCSSs, zhoneDs1ProtocolEmulation=zhoneDs1ProtocolEmulation, zhoneIntervalSESs=zhoneIntervalSESs, zhoneCurrentIndex=zhoneCurrentIndex, zhoneFarEndInvalidIntervals=zhoneFarEndInvalidIntervals, zhoneDs1Entry=zhoneDs1Entry, zhoneDs1TotalTable=zhoneDs1TotalTable, zhoneIntervalPCVs=zhoneIntervalPCVs, zhoneChanMappingTable=zhoneChanMappingTable, zhoneFarEndIntervalPCVs=zhoneFarEndIntervalPCVs, zhoneLineStatusChangeTrapEnable=zhoneLineStatusChangeTrapEnable, zhoneCurrentESs=zhoneCurrentESs, zhoneCurrentBESs=zhoneCurrentBESs, zhoneCircuitIdentifier=zhoneCircuitIdentifier, zhoneDs1SignalType=zhoneDs1SignalType, zhoneTotalIndex=zhoneTotalIndex, zhoneFarEndIntervalSESs=zhoneFarEndIntervalSESs, zhoneTransmitClockSource=zhoneTransmitClockSource, zhoneCurrentLCVs=zhoneCurrentLCVs, zhoneIntervalIndex=zhoneIntervalIndex, zhoneFarEndTotalCSSs=zhoneFarEndTotalCSSs, zhoneSignalMode=zhoneSignalMode, zhoneIntervalLESs=zhoneIntervalLESs, zhoneFarEndTimeElapsed=zhoneFarEndTimeElapsed, zhoneLineStatus=zhoneLineStatus, zhoneDsxTrapsV2=zhoneDsxTrapsV2, zhoneDs1CurrentEntry=zhoneDs1CurrentEntry, zhoneIntervalDMs=zhoneIntervalDMs, zhoneFarEndTotalSEFSs=zhoneFarEndTotalSEFSs, zhoneTotalPCVs=zhoneTotalPCVs)
