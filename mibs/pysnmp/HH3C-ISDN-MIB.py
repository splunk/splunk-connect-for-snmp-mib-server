#
# PySNMP MIB module HH3C-ISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-ISDN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:14:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
hh3cmlsr, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cmlsr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, Counter32, Gauge32, ModuleIdentity, iso, Bits, ObjectIdentity, Counter64, IpAddress, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "Counter32", "Gauge32", "ModuleIdentity", "iso", "Bits", "ObjectIdentity", "Counter64", "IpAddress", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DateAndTime, DisplayString, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "TimeStamp", "RowStatus")
hh3cIsdnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9))
if mibBuilder.loadTexts: hh3cIsdnMib.setLastUpdated('200112200000Z')
if mibBuilder.loadTexts: hh3cIsdnMib.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
hh3cIsdnMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1))
hh3cisdnChannelB = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1))
hh3cChanbIsdnTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1), )
if mibBuilder.loadTexts: hh3cChanbIsdnTable.setStatus('current')
hh3cChanbIsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1), ).setIndexNames((0, "HH3C-ISDN-MIB", "hh3cChanbIsdnIf"))
if mibBuilder.loadTexts: hh3cChanbIsdnEntry.setStatus('current')
hh3cChanbIsdnIf = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnIf.setStatus('current')
hh3cChanbIsdnPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("callOut", 1), ("callIn", 2), ("callBidirection", 3))).clone('callBidirection')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnPermit.setStatus('current')
hh3cChanbIsdnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnAddr.setStatus('current')
hh3cChanbIsdnCallerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnCallerAddr.setStatus('current')
hh3cChanbIsdnCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nocall", 0), ("call", 1), ("answer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnCallType.setStatus('current')
hh3cChanbIsdnInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("speech", 2), ("unrestrDigit", 3), ("unrestrDigit56", 4), ("restrictDigit", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("swithchedPacket", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnInfoType.setStatus('current')
hh3cChanbIsdnState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("connecting", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnState.setStatus('current')
hh3cChanbIsdnCallFreeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnCallFreeReason.setStatus('current')
hh3cChanbIsdnCallFreeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnCallFreeCode.setStatus('current')
hh3cChanbIsdnCallAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnCallAccept.setStatus('current')
hh3cChanbIsdnCallReject = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnCallReject.setStatus('current')
hh3cChanbIsdnCallSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnCallSuccess.setStatus('current')
hh3cChanbIsdnCallFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnCallFailure.setStatus('current')
hh3cChanbIsdnMaxKeepTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 14), Integer32().clone(2147483647)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnMaxKeepTime.setStatus('current')
hh3cChanbIsdnLastKeepTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 15), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnLastKeepTime.setStatus('current')
hh3cChanbIsdnLastCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 1, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cChanbIsdnLastCallTime.setStatus('current')
hh3cChanbTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cChanbTrapEnable.setStatus('current')
hh3cisdnQ931 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2))
hh3cQ931IsdnControl = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 1))
hh3cQ931CallSetupTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQ931CallSetupTrapEnable.setStatus('current')
hh3cQ931CallClearTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQ931CallClearTrapEnable.setStatus('current')
hh3cQ931IsdnTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cQ931IsdnTable.setStatus('current')
hh3cQ931IsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 2, 1), ).setIndexNames((0, "HH3C-ISDN-MIB", "hh3cQ931IsdnOpIndex"))
if mibBuilder.loadTexts: hh3cQ931IsdnEntry.setStatus('current')
hh3cQ931IsdnOpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cQ931IsdnOpIndex.setStatus('current')
hh3cQ931IsdnLastCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQ931IsdnLastCalled.setStatus('current')
hh3cQ931IsdnLastCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQ931IsdnLastCalling.setStatus('current')
hh3cQ931IsdnLastCauseDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("normCallClr", 2), ("noRouteToTransNet", 3), ("noRouteToDest", 4), ("switchEquCongest", 5), ("netOutofOrder", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQ931IsdnLastCauseDisc.setStatus('current')
hh3cQ931IsdnCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQ931IsdnCallDirection.setStatus('current')
hh3cQ931IsdnCallTimeOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQ931IsdnCallTimeOpen.setStatus('current')
hh3cQ931IsdnCallTimeClose = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 2, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQ931IsdnCallTimeClose.setStatus('current')
hh3cIsdnLapd = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 3))
hh3cLapdIsdnTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 3, 1), )
if mibBuilder.loadTexts: hh3cLapdIsdnTable.setStatus('current')
hh3cLapdIsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 3, 1, 1), ).setIndexNames((0, "HH3C-ISDN-MIB", "hh3cLapdIsdnIf"))
if mibBuilder.loadTexts: hh3cLapdIsdnEntry.setStatus('current')
hh3cLapdIsdnIf = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLapdIsdnIf.setStatus('current')
hh3cLapdIsdnProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dss1", 1), ("qsig", 2), ("etsi", 3), ("ess5", 4), ("ansi", 5), ("ni2", 6), ("ntt", 7), ("att", 8), ("ni", 9))).clone('dss1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cLapdIsdnProtocol.setStatus('current')
hh3cLapdIsdnIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userSide", 1), ("networkSide", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cLapdIsdnIfMode.setStatus('current')
hh3cLapdIsdnLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("l1Active", 2), ("l2Active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLapdIsdnLinkStatus.setStatus('current')
hh3cLapdIsdnControl = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 3, 2))
hh3cLapdStatusTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cLapdStatusTrapEnable.setStatus('current')
hh3cIsdnMibTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 2))
hh3cChanbIsdnCall = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 2, 1)).setObjects(("HH3C-ISDN-MIB", "hh3cChanbIsdnIf"), ("HH3C-ISDN-MIB", "hh3cChanbIsdnAddr"), ("HH3C-ISDN-MIB", "hh3cChanbIsdnCallType"), ("HH3C-ISDN-MIB", "hh3cChanbIsdnCallerAddr"), ("HH3C-ISDN-MIB", "hh3cChanbIsdnInfoType"), ("HH3C-ISDN-MIB", "hh3cChanbIsdnLastKeepTime"), ("HH3C-ISDN-MIB", "hh3cChanbIsdnCallFreeReason"), ("HH3C-ISDN-MIB", "hh3cChanbIsdnCallFreeCode"))
if mibBuilder.loadTexts: hh3cChanbIsdnCall.setStatus('current')
hh3cQ931IsdnCallSetup = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 2, 2)).setObjects(("HH3C-ISDN-MIB", "hh3cQ931IsdnOpIndex"), ("HH3C-ISDN-MIB", "hh3cQ931IsdnLastCalled"), ("HH3C-ISDN-MIB", "hh3cQ931IsdnLastCalling"), ("HH3C-ISDN-MIB", "hh3cQ931IsdnCallDirection"), ("HH3C-ISDN-MIB", "hh3cQ931IsdnCallTimeOpen"))
if mibBuilder.loadTexts: hh3cQ931IsdnCallSetup.setStatus('current')
hh3cQ931IsdnCallClear = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 2, 3)).setObjects(("HH3C-ISDN-MIB", "hh3cQ931IsdnOpIndex"), ("HH3C-ISDN-MIB", "hh3cQ931IsdnLastCalled"), ("HH3C-ISDN-MIB", "hh3cQ931IsdnLastCalling"), ("HH3C-ISDN-MIB", "hh3cQ931IsdnLastCauseDisc"), ("HH3C-ISDN-MIB", "hh3cQ931IsdnCallDirection"), ("HH3C-ISDN-MIB", "hh3cQ931IsdnCallTimeOpen"), ("HH3C-ISDN-MIB", "hh3cQ931IsdnCallTimeClose"))
if mibBuilder.loadTexts: hh3cQ931IsdnCallClear.setStatus('current')
hh3cLapdIsdnStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 9, 2, 4)).setObjects(("HH3C-ISDN-MIB", "hh3cLapdIsdnIf"), ("HH3C-ISDN-MIB", "hh3cLapdIsdnLinkStatus"))
if mibBuilder.loadTexts: hh3cLapdIsdnStatusChange.setStatus('current')
mibBuilder.exportSymbols("HH3C-ISDN-MIB", hh3cChanbIsdnCallType=hh3cChanbIsdnCallType, hh3cChanbIsdnCallFreeReason=hh3cChanbIsdnCallFreeReason, hh3cChanbIsdnCallReject=hh3cChanbIsdnCallReject, hh3cQ931CallSetupTrapEnable=hh3cQ931CallSetupTrapEnable, hh3cChanbIsdnPermit=hh3cChanbIsdnPermit, hh3cChanbIsdnEntry=hh3cChanbIsdnEntry, hh3cChanbIsdnLastCallTime=hh3cChanbIsdnLastCallTime, hh3cChanbIsdnMaxKeepTime=hh3cChanbIsdnMaxKeepTime, hh3cQ931IsdnCallDirection=hh3cQ931IsdnCallDirection, hh3cQ931IsdnCallTimeOpen=hh3cQ931IsdnCallTimeOpen, hh3cQ931IsdnControl=hh3cQ931IsdnControl, hh3cIsdnMibTraps=hh3cIsdnMibTraps, hh3cQ931IsdnCallSetup=hh3cQ931IsdnCallSetup, hh3cisdnQ931=hh3cisdnQ931, hh3cQ931IsdnLastCalling=hh3cQ931IsdnLastCalling, hh3cChanbIsdnCall=hh3cChanbIsdnCall, hh3cQ931IsdnCallClear=hh3cQ931IsdnCallClear, hh3cLapdStatusTrapEnable=hh3cLapdStatusTrapEnable, hh3cLapdIsdnLinkStatus=hh3cLapdIsdnLinkStatus, hh3cChanbIsdnInfoType=hh3cChanbIsdnInfoType, hh3cQ931IsdnCallTimeClose=hh3cQ931IsdnCallTimeClose, hh3cQ931IsdnLastCauseDisc=hh3cQ931IsdnLastCauseDisc, hh3cChanbIsdnAddr=hh3cChanbIsdnAddr, hh3cQ931IsdnOpIndex=hh3cQ931IsdnOpIndex, hh3cQ931IsdnLastCalled=hh3cQ931IsdnLastCalled, hh3cChanbIsdnTable=hh3cChanbIsdnTable, PYSNMP_MODULE_ID=hh3cIsdnMib, hh3cChanbIsdnCallFreeCode=hh3cChanbIsdnCallFreeCode, hh3cChanbIsdnCallFailure=hh3cChanbIsdnCallFailure, hh3cLapdIsdnIfMode=hh3cLapdIsdnIfMode, hh3cLapdIsdnTable=hh3cLapdIsdnTable, hh3cChanbIsdnCallerAddr=hh3cChanbIsdnCallerAddr, hh3cQ931CallClearTrapEnable=hh3cQ931CallClearTrapEnable, hh3cIsdnLapd=hh3cIsdnLapd, hh3cChanbIsdnCallSuccess=hh3cChanbIsdnCallSuccess, hh3cLapdIsdnIf=hh3cLapdIsdnIf, hh3cLapdIsdnStatusChange=hh3cLapdIsdnStatusChange, hh3cChanbIsdnIf=hh3cChanbIsdnIf, hh3cLapdIsdnEntry=hh3cLapdIsdnEntry, hh3cChanbIsdnCallAccept=hh3cChanbIsdnCallAccept, hh3cChanbTrapEnable=hh3cChanbTrapEnable, hh3cQ931IsdnTable=hh3cQ931IsdnTable, hh3cisdnChannelB=hh3cisdnChannelB, hh3cIsdnMib=hh3cIsdnMib, hh3cLapdIsdnProtocol=hh3cLapdIsdnProtocol, hh3cIsdnMibObjects=hh3cIsdnMibObjects, hh3cChanbIsdnState=hh3cChanbIsdnState, hh3cLapdIsdnControl=hh3cLapdIsdnControl, hh3cQ931IsdnEntry=hh3cQ931IsdnEntry, hh3cChanbIsdnLastKeepTime=hh3cChanbIsdnLastKeepTime)
