#
# PySNMP MIB module RFC1406Ext-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1406Ext-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:48:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
cxDSX1Ext, = mibBuilder.importSymbols("CXProduct-SMI", "cxDSX1Ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ObjectIdentity, IpAddress, NotificationType, Integer32, MibIdentifier, TimeTicks, iso, Gauge32, Bits, Counter64, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "IpAddress", "NotificationType", "Integer32", "MibIdentifier", "TimeTicks", "iso", "Gauge32", "Bits", "Counter64", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dsx1ExtMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtMibLevel.setStatus('mandatory')
dsx1ExtCfgTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10), )
if mibBuilder.loadTexts: dsx1ExtCfgTable.setStatus('mandatory')
dsx1ExtCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1), ).setIndexNames((0, "RFC1406Ext-MIB", "dsx1ExtCfgLinkIndex"))
if mibBuilder.loadTexts: dsx1ExtCfgEntry.setStatus('mandatory')
dsx1ExtCfgLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgLinkIndex.setStatus('mandatory')
dsx1ExtCfgPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtCfgPortStatus.setStatus('mandatory')
dsx1ExtCfgTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtCfgTraps.setStatus('mandatory')
dsx1ExtCfgLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtCfgLineBuildOut.setStatus('mandatory')
dsx1ExtCfgCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dsx1ExtNoCard", 1), ("dsx1ExtT1Card", 2), ("dsx1ExtE1Card", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgCardType.setStatus('mandatory')
dsx1ExtCfgLossTxClock = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 51), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgLossTxClock.setStatus('mandatory')
dsx1ExtCfgLossSync = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 52), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgLossSync.setStatus('mandatory')
dsx1ExtCfgLossCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 53), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgLossCarrier.setStatus('mandatory')
dsx1ExtCfgT18ZeroDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 54), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgT18ZeroDetect.setStatus('mandatory')
dsx1ExtCfgT116ZeroDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 55), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgT116ZeroDetect.setStatus('mandatory')
dsx1ExtCfgT1RxB8ZSCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 56), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgT1RxB8ZSCode.setStatus('mandatory')
dsx1ExtCfgT1RxBlueAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 57), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgT1RxBlueAlarm.setStatus('mandatory')
dsx1ExtCfgT1RxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 58), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgT1RxYellowAlarm.setStatus('mandatory')
dsx1ExtCfgIoRegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("passed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgIoRegTest.setStatus('mandatory')
dsx1ExtCfgSctRegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("passed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgSctRegTest.setStatus('mandatory')
dsx1ExtCfgSctLatchRegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("passed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgSctLatchRegTest.setStatus('mandatory')
dsx1ExtCfgReinit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 81), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsx1ExtCfgReinit.setStatus('mandatory')
mibBuilder.exportSymbols("RFC1406Ext-MIB", dsx1ExtCfgEntry=dsx1ExtCfgEntry, dsx1ExtCfgT1RxB8ZSCode=dsx1ExtCfgT1RxB8ZSCode, dsx1ExtCfgLossSync=dsx1ExtCfgLossSync, dsx1ExtCfgT1RxBlueAlarm=dsx1ExtCfgT1RxBlueAlarm, dsx1ExtCfgTable=dsx1ExtCfgTable, dsx1ExtCfgLossCarrier=dsx1ExtCfgLossCarrier, dsx1ExtCfgSctLatchRegTest=dsx1ExtCfgSctLatchRegTest, dsx1ExtCfgCardType=dsx1ExtCfgCardType, dsx1ExtCfgPortStatus=dsx1ExtCfgPortStatus, dsx1ExtCfgTraps=dsx1ExtCfgTraps, dsx1ExtCfgIoRegTest=dsx1ExtCfgIoRegTest, dsx1ExtCfgSctRegTest=dsx1ExtCfgSctRegTest, dsx1ExtCfgReinit=dsx1ExtCfgReinit, dsx1ExtCfgLinkIndex=dsx1ExtCfgLinkIndex, dsx1ExtMibLevel=dsx1ExtMibLevel, dsx1ExtCfgLossTxClock=dsx1ExtCfgLossTxClock, dsx1ExtCfgT18ZeroDetect=dsx1ExtCfgT18ZeroDetect, dsx1ExtCfgT116ZeroDetect=dsx1ExtCfgT116ZeroDetect, dsx1ExtCfgLineBuildOut=dsx1ExtCfgLineBuildOut, dsx1ExtCfgT1RxYellowAlarm=dsx1ExtCfgT1RxYellowAlarm)
