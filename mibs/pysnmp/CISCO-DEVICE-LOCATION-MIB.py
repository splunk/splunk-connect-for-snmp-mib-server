#
# PySNMP MIB module CISCO-DEVICE-LOCATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DEVICE-LOCATION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:36:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CountryCode, = mibBuilder.importSymbols("CISCO-TC", "CountryCode")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Gauge32, IpAddress, Counter32, Counter64, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, NotificationType, TimeTicks, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "IpAddress", "Counter32", "Counter64", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "NotificationType", "TimeTicks", "iso", "ModuleIdentity")
StorageType, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "DisplayString", "TextualConvention")
ciscoDeviceLocationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 732))
ciscoDeviceLocationMIB.setRevisions(('2010-10-28 00:00', '2010-04-26 00:00',))
if mibBuilder.loadTexts: ciscoDeviceLocationMIB.setLastUpdated('201010280000Z')
if mibBuilder.loadTexts: ciscoDeviceLocationMIB.setOrganization('Cisco Systems, Inc.')
cdlMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 0))
cdlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 1))
cdlMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 2))
cdlMIBScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 1))
cdlKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlKey.setStatus('current')
cdlLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2), )
if mibBuilder.loadTexts: cdlLocationTable.setStatus('current')
cdlLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1), ).setIndexNames((0, "CISCO-DEVICE-LOCATION-MIB", "cdlLocationIndex"))
if mibBuilder.loadTexts: cdlLocationEntry.setStatus('current')
cdlLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cdlLocationIndex.setStatus('current')
cdlLocationSubTypeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1, 2), Bits().clone(namedValues=NamedValues(("noSubtypesConfigured", 0), ("geoLocation", 1), ("civic", 2), ("elin", 3), ("custom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdlLocationSubTypeCapability.setStatus('current')
cdlLocationCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1, 3), CountryCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlLocationCountryCode.setStatus('current')
cdlLocationTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("ipv4Addr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdlLocationTargetType.setStatus('current')
cdlLocationTargetIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdlLocationTargetIdentifier.setStatus('current')
cdlCivicAddrLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3), )
if mibBuilder.loadTexts: cdlCivicAddrLocationTable.setStatus('current')
cdlCivicAddrLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3, 1), ).setIndexNames((0, "CISCO-DEVICE-LOCATION-MIB", "cdlLocationIndex"), (0, "CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationType"))
if mibBuilder.loadTexts: cdlCivicAddrLocationEntry.setStatus('current')
cdlCivicAddrLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("state", 1), ("county", 2), ("city", 3), ("cityDivision", 4), ("neighborhood", 5), ("streetGroup", 6), ("leadingStreetDirection", 16), ("trailingStreetDirection", 17), ("streetSuffix", 18), ("house", 19), ("streetNumber", 20), ("landmark", 21), ("additionalLoc", 22), ("name", 23), ("zipcode", 24), ("building", 25), ("unit", 26), ("floor", 27), ("room", 28), ("place", 29), ("postalCommunityName", 30), ("postOffiiceBox", 31), ("additionalCode", 32), ("seat", 33), ("primaryRoad", 34), ("roadSection", 35), ("roadBranch", 36), ("roadSubBranch", 37), ("streetNamePreMod", 38), ("streetNamePostMod", 39))))
if mibBuilder.loadTexts: cdlCivicAddrLocationType.setStatus('current')
cdlCivicAddrLocationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCivicAddrLocationValue.setStatus('current')
cdlCivicAddrLocationStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCivicAddrLocationStorageType.setStatus('current')
cdlCivicAddrLocationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCivicAddrLocationStatus.setStatus('current')
cdlCustomLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4), )
if mibBuilder.loadTexts: cdlCustomLocationTable.setStatus('current')
cdlCustomLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4, 1), ).setIndexNames((0, "CISCO-DEVICE-LOCATION-MIB", "cdlLocationIndex"), (1, "CISCO-DEVICE-LOCATION-MIB", "cdlCustomLocationName"))
if mibBuilder.loadTexts: cdlCustomLocationEntry.setStatus('current')
cdlCustomLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cdlCustomLocationName.setStatus('current')
cdlCustomLocationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCustomLocationValue.setStatus('current')
cdlCustomLocationStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCustomLocationStorageType.setStatus('current')
cdlCustomLocationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCustomLocationStatus.setStatus('current')
cdlGeoLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5), )
if mibBuilder.loadTexts: cdlGeoLocationTable.setStatus('current')
cdlGeoLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1), ).setIndexNames((0, "CISCO-DEVICE-LOCATION-MIB", "cdlLocationIndex"))
if mibBuilder.loadTexts: cdlGeoLocationEntry.setStatus('current')
cdlGeoLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoLatitude.setStatus('current')
cdlGeoLatitudeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoLatitudeResolution.setStatus('current')
cdlGeoLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoLongitude.setStatus('current')
cdlGeoLongitudeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoLongitudeResolution.setStatus('current')
cdlGeoAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoAltitude.setStatus('current')
cdlGeoAltitudeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("meters", 1), ("floors", 2))).clone('meters')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoAltitudeType.setStatus('current')
cdlGeoAltitudeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 7), SnmpAdminString().clone('10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoAltitudeResolution.setStatus('current')
cdlGeoResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 8), SnmpAdminString().clone('10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoResolution.setStatus('current')
cdlGeoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoStorageType.setStatus('current')
cdlGeoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoStatus.setStatus('current')
cdlLocationPreferWeightTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 6), )
if mibBuilder.loadTexts: cdlLocationPreferWeightTable.setStatus('current')
cdlLocationPreferWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 6, 1), ).setIndexNames((0, "CISCO-DEVICE-LOCATION-MIB", "cdlLocationPreferWeightType"))
if mibBuilder.loadTexts: cdlLocationPreferWeightEntry.setStatus('current')
cdlLocationPreferWeightType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("static", 1), ("locp", 2), ("dhcp", 3), ("lldp", 4), ("cdp", 5))))
if mibBuilder.loadTexts: cdlLocationPreferWeightType.setStatus('current')
cdlLocationPreferWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlLocationPreferWeightValue.setStatus('current')
cdlMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 1))
cdlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2))
cdlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 1, 1)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlLocationGroup"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlMIBCompliance = cdlMIBCompliance.setStatus('deprecated')
cdlMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 1, 2)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlLocationGroup"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationGroup"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCustomLocationGroup"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoLocationGroup"), ("CISCO-DEVICE-LOCATION-MIB", "cdlLocationPreferWeightGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlMIBComplianceRev1 = cdlMIBComplianceRev1.setStatus('current')
cdlLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2, 1)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlLocationSubTypeCapability"), ("CISCO-DEVICE-LOCATION-MIB", "cdlLocationCountryCode"), ("CISCO-DEVICE-LOCATION-MIB", "cdlLocationTargetType"), ("CISCO-DEVICE-LOCATION-MIB", "cdlLocationTargetIdentifier"), ("CISCO-DEVICE-LOCATION-MIB", "cdlKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlLocationGroup = cdlLocationGroup.setStatus('current')
cdlCivicAddrLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2, 2)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationValue"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationStatus"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlCivicAddrLocationGroup = cdlCivicAddrLocationGroup.setStatus('current')
cdlCustomLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2, 3)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlCustomLocationValue"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCustomLocationStatus"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCustomLocationStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlCustomLocationGroup = cdlCustomLocationGroup.setStatus('current')
cdlGeoLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2, 4)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlGeoLatitude"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoLatitudeResolution"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoLongitude"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoLongitudeResolution"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoAltitude"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoAltitudeType"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoAltitudeResolution"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoResolution"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoStatus"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlGeoLocationGroup = cdlGeoLocationGroup.setStatus('current')
cdlLocationPreferWeightGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2, 5)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlLocationPreferWeightValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlLocationPreferWeightGroup = cdlLocationPreferWeightGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-DEVICE-LOCATION-MIB", cdlCustomLocationStatus=cdlCustomLocationStatus, cdlMIBScalars=cdlMIBScalars, cdlCivicAddrLocationValue=cdlCivicAddrLocationValue, cdlCivicAddrLocationStatus=cdlCivicAddrLocationStatus, cdlGeoLocationTable=cdlGeoLocationTable, cdlLocationPreferWeightTable=cdlLocationPreferWeightTable, cdlMIBComplianceRev1=cdlMIBComplianceRev1, cdlLocationTable=cdlLocationTable, cdlMIBObjects=cdlMIBObjects, cdlMIBNotifications=cdlMIBNotifications, cdlLocationPreferWeightType=cdlLocationPreferWeightType, ciscoDeviceLocationMIB=ciscoDeviceLocationMIB, cdlCustomLocationTable=cdlCustomLocationTable, cdlGeoLocationEntry=cdlGeoLocationEntry, cdlLocationPreferWeightValue=cdlLocationPreferWeightValue, cdlGeoStatus=cdlGeoStatus, cdlGeoLocationGroup=cdlGeoLocationGroup, cdlCivicAddrLocationType=cdlCivicAddrLocationType, cdlLocationGroup=cdlLocationGroup, cdlGeoLatitude=cdlGeoLatitude, cdlCivicAddrLocationGroup=cdlCivicAddrLocationGroup, cdlGeoLongitudeResolution=cdlGeoLongitudeResolution, cdlLocationSubTypeCapability=cdlLocationSubTypeCapability, cdlMIBGroups=cdlMIBGroups, cdlGeoResolution=cdlGeoResolution, cdlLocationTargetIdentifier=cdlLocationTargetIdentifier, cdlGeoLatitudeResolution=cdlGeoLatitudeResolution, cdlLocationIndex=cdlLocationIndex, cdlCustomLocationGroup=cdlCustomLocationGroup, cdlLocationTargetType=cdlLocationTargetType, cdlLocationCountryCode=cdlLocationCountryCode, cdlGeoLongitude=cdlGeoLongitude, cdlGeoAltitude=cdlGeoAltitude, cdlCustomLocationName=cdlCustomLocationName, cdlCivicAddrLocationTable=cdlCivicAddrLocationTable, cdlCustomLocationValue=cdlCustomLocationValue, cdlLocationPreferWeightEntry=cdlLocationPreferWeightEntry, cdlCustomLocationEntry=cdlCustomLocationEntry, cdlCustomLocationStorageType=cdlCustomLocationStorageType, cdlGeoStorageType=cdlGeoStorageType, PYSNMP_MODULE_ID=ciscoDeviceLocationMIB, cdlGeoAltitudeType=cdlGeoAltitudeType, cdlCivicAddrLocationStorageType=cdlCivicAddrLocationStorageType, cdlMIBCompliances=cdlMIBCompliances, cdlMIBCompliance=cdlMIBCompliance, cdlLocationPreferWeightGroup=cdlLocationPreferWeightGroup, cdlCivicAddrLocationEntry=cdlCivicAddrLocationEntry, cdlGeoAltitudeResolution=cdlGeoAltitudeResolution, cdlLocationEntry=cdlLocationEntry, cdlKey=cdlKey, cdlMIBConform=cdlMIBConform)
