#
# PySNMP MIB module CNTAU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CNTAU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:09:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter64, MibIdentifier, ModuleIdentity, Counter32, Unsigned32, Integer32, Gauge32, NotificationType, enterprises, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "MibIdentifier", "ModuleIdentity", "Counter32", "Unsigned32", "Integer32", "Gauge32", "NotificationType", "enterprises", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "IpAddress", "Bits")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
cnt = MibIdentifier((1, 3, 6, 1, 4, 1, 333))
cntau = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1))
cntsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 1))
cntSysNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSysNodeAddress.setStatus('mandatory')
cntSysTimeofDay = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSysTimeofDay.setStatus('mandatory')
cntSysMsgTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 1, 3), )
if mibBuilder.loadTexts: cntSysMsgTable.setStatus('mandatory')
cntMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 1, 3, 1), ).setIndexNames((0, "CNTAU-MIB", "cntMsgIndex"))
if mibBuilder.loadTexts: cntMsgEntry.setStatus('mandatory')
cntMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMsgIndex.setStatus('mandatory')
cntMsgSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("information-msg", 1), ("possible-error", 2), ("recoverable-error", 3), ("fatal-error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMsgSeverity.setStatus('mandatory')
cntMsgTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMsgTaskName.setStatus('mandatory')
cntMsgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMsgNumber.setStatus('mandatory')
cntMsgCpuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp-1", 1), ("lcp-2", 2), ("lcp-3", 3), ("lcp-4", 4), ("lcp-5", 5), ("lcp-6", 6), ("lcp-7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMsgCpuNumber.setStatus('mandatory')
cntMsgNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMsgNodeNumber.setStatus('mandatory')
cntMsgDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMsgDateTime.setStatus('mandatory')
cntMsgContent = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMsgContent.setStatus('mandatory')
cntMsgSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMsgSeqNumber.setStatus('mandatory')
cntSysHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 1, 4))
cntHwBBramType = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bbram-6500", 1), ("bbram-6704", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwBBramType.setStatus('mandatory')
cntHwBBramStatus = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("failing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwBBramStatus.setStatus('mandatory')
cntHwFailedCpu = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("no-failure", 1), ("lcp-1", 2), ("lcp-2", 3), ("lcp-3", 4), ("lcp-4", 5), ("lcp-5", 6), ("lcp-6", 7), ("lcp-7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwFailedCpu.setStatus('mandatory')
cntHwMonCpu = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("no-failure", 1), ("lcp-1", 2), ("lcp-2", 3), ("lcp-3", 4), ("lcp-4", 5), ("lcp-5", 6), ("lcp-6", 7), ("lcp-7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwMonCpu.setStatus('mandatory')
cntHwFailStatus = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-up", 1), ("ok", 2), ("abort-switch", 3), ("abort-remote", 4), ("parity-error", 5), ("ac-failure", 6), ("system-failure", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwFailStatus.setStatus('mandatory')
cntHwMonFailStatus = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-up", 1), ("ok", 2), ("failed", 3), ("mdm-error", 4), ("poll-error", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwMonFailStatus.setStatus('mandatory')
cntHwFailDate = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwFailDate.setStatus('mandatory')
cntHwReset1Why = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwReset1Why.setStatus('mandatory')
cntHwReset1Date = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwReset1Date.setStatus('mandatory')
cntHwReset2Why = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwReset2Why.setStatus('mandatory')
cntHwReset2Date = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwReset2Date.setStatus('mandatory')
cntHwReset3Why = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwReset3Why.setStatus('mandatory')
cntHwReset3Date = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwReset3Date.setStatus('mandatory')
cntHwPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwPowerSupply.setStatus('mandatory')
cntHwCpuTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15), )
if mibBuilder.loadTexts: cntHwCpuTable.setStatus('mandatory')
cntHwCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1), ).setIndexNames((0, "CNTAU-MIB", "cntCpuNum"))
if mibBuilder.loadTexts: cntHwCpuEntry.setStatus('mandatory')
cntCpuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp-1", 1), ("lcp-2", 2), ("lcp-3", 3), ("lcp-4", 4), ("lcp-5", 5), ("lcp-6", 6), ("lcp-7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuNum.setStatus('mandatory')
cntCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-cpu", 1), ("lcp-type1", 2), ("lcp-type2", 3), ("lcp-type3", 4), ("lcp-type4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuType.setStatus('mandatory')
cntCpuSemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuSemCount.setStatus('mandatory')
cntCpuSemLost = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuSemLost.setStatus('mandatory')
cntCpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-up", 1), ("ok", 2), ("abort-switch", 3), ("abort-remote", 4), ("parity-error", 5), ("ac-failure", 6), ("system-failure", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuStatus.setStatus('mandatory')
cntCpuMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-up", 1), ("ok", 2), ("failed", 3), ("mdm-error", 4), ("poll-error", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuMonStatus.setStatus('mandatory')
cntCpuPollStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuPollStatus.setStatus('mandatory')
cntCpuPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuPolls.setStatus('mandatory')
cntCpuResetDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuResetDelayTime.setStatus('mandatory')
cntCpuMonBy = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp-1", 1), ("lcp-2", 2), ("lcp-3", 3), ("lcp-4", 4), ("lcp-5", 5), ("lcp-6", 6), ("lcp-7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuMonBy.setStatus('mandatory')
cntCpuPort = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuPort.setStatus('mandatory')
cntCpuUnclaims = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuUnclaims.setStatus('mandatory')
cntCpuXtraInts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuXtraInts.setStatus('mandatory')
cntCpuLevel7s = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuLevel7s.setStatus('mandatory')
cntCpuMsgRets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuMsgRets.setStatus('mandatory')
cntCpuMsgHolds = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuMsgHolds.setStatus('mandatory')
cntCpuResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuResetFlag.setStatus('mandatory')
cntCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuUtil.setStatus('mandatory')
cntCpuLastFailDate = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuLastFailDate.setStatus('mandatory')
cntCpuLastChgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 15, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuLastChgDate.setStatus('mandatory')
cntHwStatusLED = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHwStatusLED.setStatus('mandatory')
cntSysBuild = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 1, 5))
cntRevDate = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRevDate.setStatus('mandatory')
cntCustomer = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCustomer.setStatus('mandatory')
cntMachineType = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMachineType.setStatus('mandatory')
cntSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSerialNumber.setStatus('mandatory')
cntWorkOrderNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntWorkOrderNumber.setStatus('mandatory')
cntChassisNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntChassisNumber.setStatus('mandatory')
cntModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntModelNumber.setStatus('mandatory')
cntReleaseLevel = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntReleaseLevel.setStatus('mandatory')
cntRevEditDate = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRevEditDate.setStatus('mandatory')
cntRevEditTime = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRevEditTime.setStatus('mandatory')
cntFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 11), )
if mibBuilder.loadTexts: cntFeatureTable.setStatus('mandatory')
cntFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 11, 1), ).setIndexNames((0, "CNTAU-MIB", "cntFeatureIndex"))
if mibBuilder.loadTexts: cntFeatureEntry.setStatus('mandatory')
cntFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFeatureIndex.setStatus('mandatory')
cntFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFeatureName.setStatus('mandatory')
cntFeatureQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFeatureQuantity.setStatus('mandatory')
cntFeatureDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFeatureDescr.setStatus('mandatory')
cntSlotTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 12), )
if mibBuilder.loadTexts: cntSlotTable.setStatus('mandatory')
cntSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 12, 1), ).setIndexNames((0, "CNTAU-MIB", "cntSlotIndex"))
if mibBuilder.loadTexts: cntSlotEntry.setStatus('mandatory')
cntSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSlotIndex.setStatus('mandatory')
cntSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSlotName.setStatus('mandatory')
cntSlotPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSlotPartNumber.setStatus('mandatory')
cntSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSlotSerialNumber.setStatus('mandatory')
cntSlotRevLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSlotRevLevel.setStatus('mandatory')
cntSlotInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSlotInterface.setStatus('mandatory')
cntSlotCpuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp-1", 1), ("lcp-2", 2), ("lcp-3", 3), ("lcp-4", 4), ("lcp-5", 5), ("lcp-6", 6), ("lcp-7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSlotCpuNumber.setStatus('mandatory')
cntSlotVMEbusGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSlotVMEbusGrant.setStatus('mandatory')
cntIOTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 13), )
if mibBuilder.loadTexts: cntIOTable.setStatus('mandatory')
cntIOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 13, 1), ).setIndexNames((0, "CNTAU-MIB", "cntIOIndex"))
if mibBuilder.loadTexts: cntIOEntry.setStatus('mandatory')
cntIOIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIOIndex.setStatus('mandatory')
cntIOName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIOName.setStatus('mandatory')
cntIOPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIOPartNumber.setStatus('mandatory')
cntIOSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIOSerialNumber.setStatus('mandatory')
cntIORevLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 13, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIORevLevel.setStatus('mandatory')
cntIOInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIOInterface.setStatus('mandatory')
cntIOCpuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp-1", 1), ("lcp-2", 2), ("lcp-3", 3), ("lcp-4", 4), ("lcp-5", 5), ("lcp-6", 6), ("lcp-7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIOCpuNumber.setStatus('mandatory')
cntPowerTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 14), )
if mibBuilder.loadTexts: cntPowerTable.setStatus('mandatory')
cntPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 14, 1), ).setIndexNames((0, "CNTAU-MIB", "cntPowerIndex"))
if mibBuilder.loadTexts: cntPowerEntry.setStatus('mandatory')
cntPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPowerIndex.setStatus('mandatory')
cntPowerName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPowerName.setStatus('mandatory')
cntPowerPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPowerPartNumber.setStatus('mandatory')
cntPowerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPowerSerialNumber.setStatus('mandatory')
cntPowerRevLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPowerRevLevel.setStatus('mandatory')
cntSCRTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 15), )
if mibBuilder.loadTexts: cntSCRTable.setStatus('mandatory')
cntSCREntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 15, 1), ).setIndexNames((0, "CNTAU-MIB", "cntSCRIndex"))
if mibBuilder.loadTexts: cntSCREntry.setStatus('mandatory')
cntSCRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSCRIndex.setStatus('mandatory')
cntSCRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSCRNumber.setStatus('mandatory')
cntSerialAlfaNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 5, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSerialAlfaNumber.setStatus('mandatory')
cntSysMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 1, 6))
cntMemBBramAddress = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMemBBramAddress.setStatus('mandatory')
cntMemBBramSpace = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMemBBramSpace.setStatus('mandatory')
cntMemBBramFree = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMemBBramFree.setStatus('mandatory')
cntMemSramAddress = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMemSramAddress.setStatus('mandatory')
cntMemSramSpace = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMemSramSpace.setStatus('mandatory')
cntMemSramFree = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMemSramFree.setStatus('mandatory')
cntSysCpuTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 1, 7), )
if mibBuilder.loadTexts: cntSysCpuTable.setStatus('mandatory')
cntSysCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 1, 7, 1), ).setIndexNames((0, "CNTAU-MIB", "cntCpuIndex"))
if mibBuilder.loadTexts: cntSysCpuEntry.setStatus('mandatory')
cntCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp-1", 1), ("lcp-2", 2), ("lcp-3", 3), ("lcp-4", 4), ("lcp-5", 5), ("lcp-6", 6), ("lcp-7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuIndex.setStatus('mandatory')
cntCpuMemSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuMemSpace.setStatus('mandatory')
cntCpuMemFree = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuMemFree.setStatus('mandatory')
cntCpuTaskTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 1, 7, 1, 4), )
if mibBuilder.loadTexts: cntCpuTaskTable.setStatus('mandatory')
cntCpuTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 1, 7, 1, 4, 1), ).setIndexNames((0, "CNTAU-MIB", "cntCpuTaskIndex"))
if mibBuilder.loadTexts: cntCpuTaskEntry.setStatus('mandatory')
cntCpuTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 7, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuTaskIndex.setStatus('mandatory')
cntCpuTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 1, 7, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCpuTaskName.setStatus('mandatory')
cntinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 2))
cntifTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 2, 1), )
if mibBuilder.loadTexts: cntifTable.setStatus('mandatory')
cntifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 2, 1, 1), ).setIndexNames((0, "CNTAU-MIB", "cntifIndex"))
if mibBuilder.loadTexts: cntifEntry.setStatus('mandatory')
cntifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntifIndex.setStatus('mandatory')
cntifType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet", 6), ("ethernet88023", 7), ("tokenBus", 8), ("tokenRing", 9), ("smds", 10), ("starLan", 11), ("proteon-10MBit", 12), ("proteon-80MBit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("t1", 18), ("cept", 19), ("basicIsdn", 20), ("primaryIsdn", 21), ("maintenance", 22), ("ppp", 23), ("sofwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32), ("hssi-dte", 33), ("fibre-trunk", 34), ("hippi", 35), ("crayfullduplex", 36), ("pt-to-pt-fiber", 37), ("channel-to-channel", 38), ("peripheral-gateway", 39), ("tape-pipelining", 40), ("tape-dasd", 41), ("hssi-dce", 42), ("ibm-channel", 43), ("dual-trunk", 44), ("teradata", 45), ("cray-hyperchannel", 46), ("scsi-target", 47), ("snmp-gateway", 48), ("ppp-async", 49), ("escon-host", 50), ("escon-peripheral", 51), ("tapecontrol-rs232", 52), ("ultra-dte", 53), ("ultra-dce", 54), ("fddi-ss", 55), ("hssi-ss", 56), ("tunneling", 57), ("stackstarter", 58), ("ethernet-geni", 59), ("tokenring-geni", 60), ("atm", 61), ("scsi-initiator", 62), ("escon-srdf", 63)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntifType.setStatus('mandatory')
cntifCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp-1", 1), ("lcp-2", 2), ("lcp-3", 3), ("lcp-4", 4), ("lcp-5", 5), ("lcp-6", 6), ("lcp-7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntifCpu.setStatus('mandatory')
cntifSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntifSubIndex.setStatus('mandatory')
cntIfsState = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIfsState.setStatus('mandatory')
cnticmp = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 5))
cnticmpInDuNets = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInDuNets.setStatus('mandatory')
cnticmpInDuHosts = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInDuHosts.setStatus('mandatory')
cnticmpInDuProtos = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInDuProtos.setStatus('mandatory')
cnticmpInDuPorts = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInDuPorts.setStatus('mandatory')
cnticmpInDuFrags = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInDuFrags.setStatus('mandatory')
cnticmpInDuSources = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInDuSources.setStatus('mandatory')
cnticmpInTmXceeds = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInTmXceeds.setStatus('mandatory')
cnticmpInTmFrags = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInTmFrags.setStatus('mandatory')
cnticmpInReNets = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInReNets.setStatus('mandatory')
cnticmpInReHosts = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInReHosts.setStatus('mandatory')
cnticmpInReServnets = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInReServnets.setStatus('mandatory')
cnticmpInReServhosts = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpInReServhosts.setStatus('mandatory')
cnticmpOutDuNets = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutDuNets.setStatus('mandatory')
cnticmpOutDuHosts = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutDuHosts.setStatus('mandatory')
cnticmpOutDuProtos = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutDuProtos.setStatus('mandatory')
cnticmpOutDuPorts = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutDuPorts.setStatus('mandatory')
cnticmpOutDuFrags = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutDuFrags.setStatus('mandatory')
cnticmpOutDuSources = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutDuSources.setStatus('mandatory')
cnticmpOutTmXceeds = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutTmXceeds.setStatus('mandatory')
cnticmpOutTmFrags = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutTmFrags.setStatus('mandatory')
cnticmpOutReNets = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutReNets.setStatus('mandatory')
cnticmpOutReHosts = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutReHosts.setStatus('mandatory')
cnticmpOutReServnets = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutReServnets.setStatus('mandatory')
cnticmpOutReServhosts = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 5, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnticmpOutReServhosts.setStatus('mandatory')
cnttransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 10))
cntdot3 = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 10, 1))
cntdot3Table = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1), )
if mibBuilder.loadTexts: cntdot3Table.setStatus('mandatory')
cntdot3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1), ).setIndexNames((0, "CNTAU-MIB", "cntdot3Index"))
if mibBuilder.loadTexts: cntdot3Entry.setStatus('mandatory')
cntdot3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3Index.setStatus('mandatory')
cntdot3SoftwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3SoftwareID.setStatus('mandatory')
cntdot3BufsAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3BufsAllocated.setStatus('mandatory')
cntdot3BufTooManys = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3BufTooManys.setStatus('mandatory')
cntdot3BufNotAvails = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3BufNotAvails.setStatus('mandatory')
cntdot3BufPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3BufPriority.setStatus('mandatory')
cntdot3PICBusErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3PICBusErrs.setStatus('mandatory')
cntdot3PICDMAErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3PICDMAErrs.setStatus('mandatory')
cntdot3PICMemSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3PICMemSeqErrs.setStatus('mandatory')
cntdot3PICMemParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3PICMemParityErrs.setStatus('mandatory')
cntdot3PICSpuriousInts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3PICSpuriousInts.setStatus('mandatory')
cntdot3LanceInts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3LanceInts.setStatus('mandatory')
cntdot3LanceParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3LanceParityErrs.setStatus('mandatory')
cntdot3LanceMemErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3LanceMemErrs.setStatus('mandatory')
cntdot3LanceMissedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3LanceMissedPkts.setStatus('mandatory')
cntdot3LanceUnderFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3LanceUnderFlows.setStatus('mandatory')
cntdot3LanceOverFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3LanceOverFlows.setStatus('mandatory')
cntdot3LanceTxWaitQ = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3LanceTxWaitQ.setStatus('mandatory')
cntdot3DMAChan1RxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 6, 7, 9, 10, 11, 13, 15, 16, 17))).clone(namedValues=NamedValues(("no-error", 0), ("config", 1), ("operation-timing", 2), ("address-mar", 5), ("address-dar", 6), ("address-bar", 7), ("buserr-mar", 9), ("buserr-dar", 10), ("buserr-bar", 11), ("count-mtc", 13), ("count-btc", 15), ("external-abort", 16), ("external-software-abort", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3DMAChan1RxErr.setStatus('mandatory')
cntdot3DMAChan3RxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8, 10, 11, 12, 14, 16, 17, 18))).clone(namedValues=NamedValues(("no-error", 1), ("config", 2), ("operation-timing", 3), ("address-mar", 6), ("address-dar", 7), ("address-bar", 8), ("buserr-mar", 10), ("buserr-dar", 11), ("buserr-bar", 12), ("count-mtc", 14), ("count-btc", 16), ("external-abort", 17), ("external-software-abort", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3DMAChan3RxErr.setStatus('mandatory')
cntdot3DMAChan0TxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8, 10, 11, 12, 14, 16, 17, 18))).clone(namedValues=NamedValues(("no-error", 1), ("config", 2), ("operation-timing", 3), ("address-mar", 6), ("address-dar", 7), ("address-bar", 8), ("buserr-mar", 10), ("buserr-dar", 11), ("buserr-bar", 12), ("count-mtc", 14), ("count-btc", 16), ("external-abort", 17), ("external-software-abort", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3DMAChan0TxErr.setStatus('mandatory')
cntdot3DMAChan2TxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8, 10, 11, 12, 14, 16, 17, 18))).clone(namedValues=NamedValues(("no-error", 1), ("config", 2), ("operation-timing", 3), ("address-mar", 6), ("address-dar", 7), ("address-bar", 8), ("buserr-mar", 10), ("buserr-dar", 11), ("buserr-bar", 12), ("count-mtc", 14), ("count-btc", 16), ("external-abort", 17), ("external-software-abort", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3DMAChan2TxErr.setStatus('mandatory')
cntdot3DMAChan1RxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3DMAChan1RxErrs.setStatus('mandatory')
cntdot3DMAChan3RxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3DMAChan3RxErrs.setStatus('mandatory')
cntdot3DMAChan0TxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3DMAChan0TxErrs.setStatus('mandatory')
cntdot3DMAChan2TxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3DMAChan2TxErrs.setStatus('mandatory')
cntdot3DMARxWaitQ = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3DMARxWaitQ.setStatus('mandatory')
cntdot3DMATxWaitQ = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3DMATxWaitQ.setStatus('mandatory')
cntdot3LPXParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3LPXParityErrs.setStatus('mandatory')
cntdot3Chan1Misreads = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdot3Chan1Misreads.setStatus('mandatory')
cntfddi = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 10, 2))
cntFddiSMT = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1))
cntFddiMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2))
cntFddiPATH = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3))
cntFddiPORT = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4))
cntFddiSMTNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiSMTNumber.setStatus('mandatory')
cntFddiSMTTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 2), )
if mibBuilder.loadTexts: cntFddiSMTTable.setStatus('mandatory')
cntFddiSMTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 2, 1), ).setIndexNames((0, "CNTAU-MIB", "cntFddiSMTIndex"))
if mibBuilder.loadTexts: cntFddiSMTEntry.setStatus('mandatory')
cntFddiSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiSMTIndex.setStatus('mandatory')
cntFddiSMTManufacturerData = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiSMTManufacturerData.setStatus('optional')
cntFddiSMTUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiSMTUserData.setStatus('optional')
cntFddiSMTReportLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiSMTReportLimit.setStatus('optional')
cntFddiSMTMsgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiSMTMsgTimeStamp.setStatus('mandatory')
cntFddiSMTTransitionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiSMTTransitionTimeStamp.setStatus('mandatory')
cntFddiSMTSetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiSMTSetCount.setStatus('optional')
cntFddiSMTLastSetStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 1, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiSMTLastSetStationID.setStatus('optional')
cntFddiMACNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACNumber.setStatus('mandatory')
cntFddiMACTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2), )
if mibBuilder.loadTexts: cntFddiMACTable.setStatus('mandatory')
cntFddiMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1), ).setIndexNames((0, "CNTAU-MIB", "cntFddiMACSMTIndex"))
if mibBuilder.loadTexts: cntFddiMACEntry.setStatus('mandatory')
cntFddiMACSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACSMTIndex.setStatus('mandatory')
cntFddiMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACIndex.setStatus('mandatory')
cntFddiMACBridgeFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACBridgeFunction.setStatus('optional')
cntFddiMACDownstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACDownstreamNbr.setStatus('optional')
cntFddiMACOldDownstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACOldDownstreamNbr.setStatus('optional')
cntFddiMACRootConcentratorMac = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACRootConcentratorMac.setStatus('optional')
cntFddiMACLongAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACLongAlias.setStatus('optional')
cntFddiMACShortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACShortAlias.setStatus('optional')
cntFddiMACLongGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACLongGrpAddr.setStatus('optional')
cntFddiMACShortGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACShortGrpAddr.setStatus('optional')
cntFddiMACTPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACTPri0.setStatus('optional')
cntFddiMACTPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACTPri1.setStatus('optional')
cntFddiMACTPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACTPri2.setStatus('optional')
cntFddiMACTPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACTPri3.setStatus('optional')
cntFddiMACTPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACTPri4.setStatus('optional')
cntFddiMACTPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACTPri5.setStatus('optional')
cntFddiMACTPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACTPri6.setStatus('optional')
cntFddiMACCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACCopies.setStatus('optional')
cntFddiMACTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACTransmits.setStatus('optional')
cntFddiMACTokens = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACTokens.setStatus('optional')
cntFddiMACTvxExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACTvxExpires.setStatus('optional')
cntFddiMACNotCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACNotCopies.setStatus('optional')
cntFddiMACLates = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACLates.setStatus('optional')
cntFddiMACRingOps = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACRingOps.setStatus('optional')
cntFddiMACBaseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACBaseFrames.setStatus('optional')
cntFddiMACBaseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACBaseErrs.setStatus('optional')
cntFddiMACBaseLosts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACBaseLosts.setStatus('optional')
cntFddiMACBaseTimeFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACBaseTimeFrameError.setStatus('optional')
cntFddiMACBaseNotCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACBaseNotCopies.setStatus('optional')
cntFddiMACBaseTimeNotCopied = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACBaseTimeNotCopied.setStatus('optional')
cntFddiMACNotCopiedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACNotCopiedThreshold.setStatus('optional')
cntFddiMACBaseCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACBaseCopies.setStatus('optional')
cntFddiMACNotCopiedRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACNotCopiedRatio.setStatus('optional')
cntFddiMACNotCopiedCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACNotCopiedCondition.setStatus('optional')
cntFddiMACLLCServiceAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACLLCServiceAvailable.setStatus('optional')
cntFddiMACMasterSlaveLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACMasterSlaveLoopStatus.setStatus('optional')
cntFddiMACRootMACDownStreamPORTType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACRootMACDownStreamPORTType.setStatus('optional')
cntFddiMACRootMACCurrentPath = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 2, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiMACRootMACCurrentPath.setStatus('optional')
cntFddiPATHNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHNumber.setStatus('mandatory')
cntFddiPATHTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2), )
if mibBuilder.loadTexts: cntFddiPATHTable.setStatus('mandatory')
cntFddiPATHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1), ).setIndexNames((0, "CNTAU-MIB", "cntFddiPATHSMTIndex"))
if mibBuilder.loadTexts: cntFddiPATHEntry.setStatus('mandatory')
cntFddiPATHSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHSMTIndex.setStatus('mandatory')
cntFddiPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHIndex.setStatus('mandatory')
cntFddiPATHTraceMaxExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHTraceMaxExpiration.setStatus('mandatory')
cntFddiPATHTVXLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHTVXLowerBound.setStatus('optional')
cntFddiPATHTMaxLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHTMaxLowerBound.setStatus('optional')
cntFddiPATHType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHType.setStatus('mandatory')
cntFddiPATHPORTOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHPORTOrder.setStatus('mandatory')
cntFddiPATHRingLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHRingLatency.setStatus('optional')
cntFddiPATHTraceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHTraceStatus.setStatus('optional')
cntFddiPATHSba = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHSba.setStatus('mandatory')
cntFddiPATHSbaOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHSbaOverhead.setStatus('mandatory')
cntFddiPATHStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHStatus.setStatus('mandatory')
cntFddiPATHTRmode = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPATHTRmode.setStatus('optional')
cntFddiPORTNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPORTNumber.setStatus('mandatory')
cntFddiPORTTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2), )
if mibBuilder.loadTexts: cntFddiPORTTable.setStatus('mandatory')
cntFddiPORTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2, 1), ).setIndexNames((0, "CNTAU-MIB", "cntFddiPORTSMTIndex"))
if mibBuilder.loadTexts: cntFddiPORTEntry.setStatus('mandatory')
cntFddiPORTSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPORTSMTIndex.setStatus('mandatory')
cntFddiPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPORTIndex.setStatus('mandatory')
cntFddiPORTFotxClass = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPORTFotxClass.setStatus('optional')
cntFddiPORTMaintLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPORTMaintLineState.setStatus('optional')
cntFddiPORTEBErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPORTEBErrs.setStatus('optional')
cntFddiPORTBaseLerEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPORTBaseLerEstimate.setStatus('mandatory')
cntFddiPORTBaseLemRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPORTBaseLemRejects.setStatus('mandatory')
cntFddiPORTBaseLems = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPORTBaseLems.setStatus('mandatory')
cntFddiPORTBaseLerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 10, 2, 4, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPORTBaseLerTimeStamp.setStatus('mandatory')
cntsnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 11))
cntsnmpconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 11, 1))
cntMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMibVersion.setStatus('mandatory')
cntMibObjectCount = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMibObjectCount.setStatus('mandatory')
cntConfigVersion = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntConfigVersion.setStatus('mandatory')
cntProxyStatus = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-proxy", 1), ("proxy-agent", 2), ("proxied-node", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntProxyStatus.setStatus('mandatory')
cntProxyCount = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntProxyCount.setStatus('mandatory')
cntSnmpBufferCount = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSnmpBufferCount.setStatus('mandatory')
cntIfPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIfPollInterval.setStatus('mandatory')
cntIfNextPoll = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIfNextPoll.setStatus('mandatory')
cntDoDIPCount = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntDoDIPCount.setStatus('mandatory')
cntDot3Count = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntDot3Count.setStatus('mandatory')
cntFddiCount = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiCount.setStatus('mandatory')
cntFddiPortCount = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiPortCount.setStatus('mandatory')
cntDataLinkCount = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntDataLinkCount.setStatus('mandatory')
cntLLC1Count = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntLLC1Count.setStatus('mandatory')
cntCofiVersion = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCofiVersion.setStatus('mandatory')
cntsnmpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 11, 2))
cntMib2Requests = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMib2Requests.setStatus('mandatory')
cntFddiRequests = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntFddiRequests.setStatus('mandatory')
cntDot3Requests = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntDot3Requests.setStatus('mandatory')
cntCntRequests = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCntRequests.setStatus('mandatory')
cntRowAdditions = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRowAdditions.setStatus('mandatory')
cntRowModifies = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRowModifies.setStatus('mandatory')
cntRowDeletions = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRowDeletions.setStatus('mandatory')
cntRowErrors = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRowErrors.setStatus('mandatory')
cntBadVersions = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntBadVersions.setStatus('mandatory')
cntNoBuffers = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntNoBuffers.setStatus('mandatory')
cntMailTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMailTimeouts.setStatus('mandatory')
cntCachedResponses = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCachedResponses.setStatus('mandatory')
cntUsedCaches = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntUsedCaches.setStatus('mandatory')
cntsnmptrap = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 11, 3))
cntTrapDestCount = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntTrapDestCount.setStatus('mandatory')
cntLastTrapMsg = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 11, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntLastTrapMsg.setStatus('mandatory')
cntTrapTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 11, 3, 3), )
if mibBuilder.loadTexts: cntTrapTable.setStatus('mandatory')
cnttrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 11, 3, 3, 1), ).setIndexNames((0, "CNTAU-MIB", "cnttrapIndex"))
if mibBuilder.loadTexts: cnttrapEntry.setStatus('mandatory')
cnttrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 11, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnttrapIndex.setStatus('mandatory')
cnttrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 11, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnttrapAddress.setStatus('mandatory')
cntsnmpTrapFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 11, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsnmpTrapFlags.setStatus('mandatory')
cntTrapFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 11, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntTrapFlags.setStatus('mandatory')
cnttrapIf = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 11, 3, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnttrapIf.setStatus('mandatory')
cntsnmpproxy = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 11, 4))
cntProxyTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 11, 4, 1), )
if mibBuilder.loadTexts: cntProxyTable.setStatus('mandatory')
cntproxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 11, 4, 1, 1), ).setIndexNames((0, "CNTAU-MIB", "cntproxyIndex"))
if mibBuilder.loadTexts: cntproxyEntry.setStatus('mandatory')
cntproxyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 11, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntproxyIndex.setStatus('mandatory')
cntproxyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 11, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntproxyAddress.setStatus('mandatory')
cntproxyNode = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 11, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntproxyNode.setStatus('mandatory')
cntdiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 12))
cntTraceTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 12, 1), )
if mibBuilder.loadTexts: cntTraceTable.setStatus('mandatory')
cnttraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 12, 1, 1), ).setIndexNames((0, "CNTAU-MIB", "cnttraceIndex"))
if mibBuilder.loadTexts: cnttraceEntry.setStatus('mandatory')
cnttraceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnttraceIndex.setStatus('mandatory')
cnttraceType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnttraceType.setStatus('mandatory')
cnttraceCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp-1", 1), ("lcp-2", 2), ("lcp-3", 3), ("lcp-4", 4), ("lcp-5", 5), ("lcp-6", 6), ("lcp-7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnttraceCpu.setStatus('mandatory')
cnttraceData = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 12, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnttraceData.setStatus('mandatory')
cntMailQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 12, 2))
cntMDMTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 12, 2, 1), )
if mibBuilder.loadTexts: cntMDMTable.setStatus('mandatory')
cntMDMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 12, 2, 1, 1), ).setIndexNames((0, "CNTAU-MIB", "cntmdmQIndex"))
if mibBuilder.loadTexts: cntMDMEntry.setStatus('mandatory')
cntmdmQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntmdmQIndex.setStatus('mandatory')
cntmdmQName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 12, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntmdmQName.setStatus('mandatory')
cntmdmQProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 12, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntmdmQProcessId.setStatus('mandatory')
cntmdmQTaskId = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 12, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntmdmQTaskId.setStatus('mandatory')
cntmdmQList = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 12, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntmdmQList.setStatus('mandatory')
cntdatalink = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 13))
cntdlNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlNumber.setStatus('mandatory')
cntdlTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 13, 2), )
if mibBuilder.loadTexts: cntdlTable.setStatus('mandatory')
cntdlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1), ).setIndexNames((0, "CNTAU-MIB", "cntdlIndex"))
if mibBuilder.loadTexts: cntdlEntry.setStatus('mandatory')
cntdlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlIndex.setStatus('mandatory')
cntdlDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlDescr.setStatus('mandatory')
cntdlType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("llc1", 1), ("llc2", 2), ("llc3", 3), ("snap", 4), ("cnet", 5), ("dnls", 6), ("strp", 7), ("ppp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlType.setStatus('mandatory')
cntdlTypeofService = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unacked-connectionless", 1), ("connection-oriented", 2), ("acked-connectionless", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlTypeofService.setStatus('mandatory')
cntdlMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlMtu.setStatus('mandatory')
cntdlPortAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlPortAddrLen.setStatus('mandatory')
cntdlMaxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlMaxPort.setStatus('mandatory')
cntdlActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlActivePort.setStatus('mandatory')
cntdlInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlInOctets.setStatus('mandatory')
cntdlInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlInUcastPkts.setStatus('mandatory')
cntdlInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlInNUcastPkts.setStatus('mandatory')
cntdlInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlInDiscards.setStatus('mandatory')
cntdlInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlInErrors.setStatus('mandatory')
cntdlInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlInUnknownProtos.setStatus('mandatory')
cntdlOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlOutOctets.setStatus('mandatory')
cntdlOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlOutUcastPkts.setStatus('mandatory')
cntdlOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlOutNUcastPkts.setStatus('mandatory')
cntdlOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlOutDiscards.setStatus('mandatory')
cntdlOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlOutErrors.setStatus('mandatory')
cntdlOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlOutQLen.setStatus('mandatory')
cntdlPortTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 21), )
if mibBuilder.loadTexts: cntdlPortTable.setStatus('mandatory')
cntdlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 21, 1), ).setIndexNames((0, "CNTAU-MIB", "cntdlPortIndex"))
if mibBuilder.loadTexts: cntdlPortEntry.setStatus('mandatory')
cntdlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlPortIndex.setStatus('mandatory')
cntdlState = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("connected", 1), ("data-transfer", 2), ("disconnected", 3), ("waiting-for-ack", 4), ("down", 5), ("closed", 6), ("listen", 7), ("ack-sent", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlState.setStatus('mandatory')
cntdlSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlSourcePort.setStatus('mandatory')
cntdlDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlDestPort.setStatus('mandatory')
cntdlPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 2, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dod-ip", 1), ("arp", 2), ("snmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntdlPortType.setStatus('mandatory')
cntllc1 = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 13, 3))
cntllc1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1), )
if mibBuilder.loadTexts: cntllc1ConfigTable.setStatus('mandatory')
cntllc1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1), ).setIndexNames((0, "CNTAU-MIB", "cntllc1ConfigIndex"))
if mibBuilder.loadTexts: cntllc1ConfigEntry.setStatus('mandatory')
cntllc1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1ConfigIndex.setStatus('mandatory')
cntllc1DriverType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cnt-node", 1), ("fddi", 2), ("fibre-trunk", 3), ("native", 4), ("ethernet", 5), ("hippi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1DriverType.setStatus('mandatory')
cntllc1Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1Addr.setStatus('mandatory')
cntllc1InitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uninitialized", 1), ("initialized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InitFlag.setStatus('mandatory')
cntllc1TraceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1TraceFlag.setStatus('mandatory')
cntllc1BufCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1BufCnt.setStatus('mandatory')
cntllc1BusId = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1BusId.setStatus('mandatory')
cntllc1CpuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp-1", 1), ("lcp-2", 2), ("lcp-3", 3), ("lcp-4", 4), ("lcp-5", 5), ("lcp-6", 6), ("lcp-7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1CpuNum.setStatus('mandatory')
cntllc1BufPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1BufPriority.setStatus('mandatory')
cntllc1WaitTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1WaitTimeOut.setStatus('mandatory')
cntllc1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2), )
if mibBuilder.loadTexts: cntllc1StatsTable.setStatus('mandatory')
cntllc1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1), ).setIndexNames((0, "CNTAU-MIB", "cntllc1StatIndex"))
if mibBuilder.loadTexts: cntllc1StatsEntry.setStatus('mandatory')
cntllc1StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1StatIndex.setStatus('mandatory')
cntllc1InXids = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InXids.setStatus('mandatory')
cntllc1InTests = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InTests.setStatus('mandatory')
cntllc1InUIs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InUIs.setStatus('mandatory')
cntllc1InNoDsaps = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InNoDsaps.setStatus('mandatory')
cntllc1InXidOks = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InXidOks.setStatus('mandatory')
cntllc1InTestOks = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InTestOks.setStatus('mandatory')
cntllc1InSnapIps = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InSnapIps.setStatus('mandatory')
cntllc1InSnapArps = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InSnapArps.setStatus('mandatory')
cntllc1InSnapNoProts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InSnapNoProts.setStatus('mandatory')
cntllc1InSnapNoTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InSnapNoTypes.setStatus('mandatory')
cntllc1OutSnapIps = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutSnapIps.setStatus('mandatory')
cntllc1OutSnapArps = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutSnapArps.setStatus('mandatory')
cntllc1OutXids = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutXids.setStatus('mandatory')
cntllc1OutXidResps = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutXidResps.setStatus('mandatory')
cntllc1OutTests = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutTests.setStatus('mandatory')
cntllc1OutTestResps = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutTestResps.setStatus('mandatory')
cntllc1OutRetOks = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutRetOks.setStatus('mandatory')
cntllc1OutFragPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutFragPkts.setStatus('mandatory')
cntllc1ErrorTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3), )
if mibBuilder.loadTexts: cntllc1ErrorTable.setStatus('mandatory')
cntllc1ErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1), ).setIndexNames((0, "CNTAU-MIB", "cntllc1ErrorIndex"))
if mibBuilder.loadTexts: cntllc1ErrorEntry.setStatus('mandatory')
cntllc1ErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1ErrorIndex.setStatus('mandatory')
cntllc1ArpMailErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1ArpMailErrs.setStatus('mandatory')
cntllc1IpMailErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1IpMailErrs.setStatus('mandatory')
cntllc1OutXmitErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutXmitErrs.setStatus('mandatory')
cntllc1OutMcastErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutMcastErrs.setStatus('mandatory')
cntllc1XidErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1XidErrs.setStatus('mandatory')
cntllc1TestErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1TestErrs.setStatus('mandatory')
cntllc1InBadTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InBadTypes.setStatus('mandatory')
cntllc1OutMismIpSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutMismIpSizes.setStatus('mandatory')
cntllc1OutBadIpSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutBadIpSizes.setStatus('mandatory')
cntllc1InMismIpSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InMismIpSizes.setStatus('mandatory')
cntllc1InBadIpSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InBadIpSizes.setStatus('mandatory')
cntllc1InLateXids = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InLateXids.setStatus('mandatory')
cntllc1InLateTests = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1InLateTests.setStatus('mandatory')
cntllc1OutTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutTooBigs.setStatus('mandatory')
cntllc1OutNoRooms = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutNoRooms.setStatus('mandatory')
cntllc1OutRetBads = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 13, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntllc1OutRetBads.setStatus('mandatory')
cntlua = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 1, 14))
cntLuaCount = MibScalar((1, 3, 6, 1, 4, 1, 333, 1, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntLuaCount.setStatus('mandatory')
cntLuaTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 14, 2), )
if mibBuilder.loadTexts: cntLuaTable.setStatus('mandatory')
cntluaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1), ).setIndexNames((0, "CNTAU-MIB", "cntluaIf"))
if mibBuilder.loadTexts: cntluaEntry.setStatus('mandatory')
cntluaIf = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntluaIf.setStatus('mandatory')
cntluaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntluaNumber.setStatus('mandatory')
cntSubChanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSubChanCount.setStatus('mandatory')
cntSubChanTable = MibTable((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4), )
if mibBuilder.loadTexts: cntSubChanTable.setStatus('mandatory')
cntsubchanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1), ).setIndexNames((0, "CNTAU-MIB", "cntsctIndex"))
if mibBuilder.loadTexts: cntsubchanEntry.setStatus('mandatory')
cntsctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctIndex.setStatus('mandatory')
cntsctNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctNumber.setStatus('mandatory')
cntsctTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctTxStatus.setStatus('mandatory')
cntsctRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctRxStatus.setStatus('mandatory')
cntsctSubChanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctSubChanStatus.setStatus('mandatory')
cntsctState = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctState.setStatus('mandatory')
cntsctRxCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctRxCredit.setStatus('mandatory')
cntsctRxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctRxMsgs.setStatus('mandatory')
cntsctRxMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctRxMsgBytes.setStatus('mandatory')
cntsctRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctRxDataBytes.setStatus('mandatory')
cntsctTxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctTxMsgs.setStatus('mandatory')
cntsctTxMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctTxMsgBytes.setStatus('mandatory')
cntsctTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctTxDataBytes.setStatus('mandatory')
cntsctTxErrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctTxErrMsgs.setStatus('mandatory')
cntsctTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctTotalBytes.setStatus('mandatory')
cntsctDrecPid = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctDrecPid.setStatus('mandatory')
cntsctDrecTask = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 1, 14, 2, 1, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntsctDrecTask.setStatus('mandatory')
cntInformationalMsg = NotificationType((1, 3, 6, 1, 4, 1, 333, 1) + (0,1)).setObjects(("CNTAU-MIB", "cntMsgTaskName"), ("CNTAU-MIB", "cntMsgNumber"), ("CNTAU-MIB", "cntMsgCpuNumber"), ("CNTAU-MIB", "cntMsgNodeNumber"), ("CNTAU-MIB", "cntMsgDateTime"), ("CNTAU-MIB", "cntMsgContent"))
cntPossibleErrMsg = NotificationType((1, 3, 6, 1, 4, 1, 333, 1) + (0,2)).setObjects(("CNTAU-MIB", "cntMsgTaskName"), ("CNTAU-MIB", "cntMsgNumber"), ("CNTAU-MIB", "cntMsgCpuNumber"), ("CNTAU-MIB", "cntMsgNodeNumber"), ("CNTAU-MIB", "cntMsgDateTime"), ("CNTAU-MIB", "cntMsgContent"))
cntSevereErrMsg = NotificationType((1, 3, 6, 1, 4, 1, 333, 1) + (0,3)).setObjects(("CNTAU-MIB", "cntMsgTaskName"), ("CNTAU-MIB", "cntMsgNumber"), ("CNTAU-MIB", "cntMsgCpuNumber"), ("CNTAU-MIB", "cntMsgNodeNumber"), ("CNTAU-MIB", "cntMsgDateTime"), ("CNTAU-MIB", "cntMsgContent"))
cntCriticalErrMsg = NotificationType((1, 3, 6, 1, 4, 1, 333, 1) + (0,4)).setObjects(("CNTAU-MIB", "cntMsgTaskName"), ("CNTAU-MIB", "cntMsgNumber"), ("CNTAU-MIB", "cntMsgCpuNumber"), ("CNTAU-MIB", "cntMsgNodeNumber"), ("CNTAU-MIB", "cntMsgDateTime"), ("CNTAU-MIB", "cntMsgContent"))
mibBuilder.exportSymbols("CNTAU-MIB", cntFeatureEntry=cntFeatureEntry, cntsystem=cntsystem, cntsctTxMsgs=cntsctTxMsgs, cntFddiPORTFotxClass=cntFddiPORTFotxClass, cntdot3PICDMAErrs=cntdot3PICDMAErrs, cntBadVersions=cntBadVersions, cntFddiMACLLCServiceAvailable=cntFddiMACLLCServiceAvailable, cntmdmQList=cntmdmQList, cntIfNextPoll=cntIfNextPoll, cntSysTimeofDay=cntSysTimeofDay, cntFddiPATHTable=cntFddiPATHTable, cntllc1OutSnapArps=cntllc1OutSnapArps, cntMachineType=cntMachineType, cnticmpInTmXceeds=cnticmpInTmXceeds, cntdlEntry=cntdlEntry, cntMDMEntry=cntMDMEntry, cntHwFailedCpu=cntHwFailedCpu, cntMsgIndex=cntMsgIndex, cntdatalink=cntdatalink, cntdot3Index=cntdot3Index, cntllc1CpuNum=cntllc1CpuNum, cntRowAdditions=cntRowAdditions, cntFddiSMTReportLimit=cntFddiSMTReportLimit, cntCpuMsgHolds=cntCpuMsgHolds, cntFddiMACBaseNotCopies=cntFddiMACBaseNotCopies, cntsctRxStatus=cntsctRxStatus, cntllc1OutMismIpSizes=cntllc1OutMismIpSizes, cntFddiPORTBaseLems=cntFddiPORTBaseLems, cntdlPortEntry=cntdlPortEntry, cntSysMemory=cntSysMemory, cntMemSramAddress=cntMemSramAddress, cntFddiPATHTVXLowerBound=cntFddiPATHTVXLowerBound, cntFddiPORTEBErrs=cntFddiPORTEBErrs, cntHwBBramStatus=cntHwBBramStatus, cntHwBBramType=cntHwBBramType, cntIOPartNumber=cntIOPartNumber, cntFddiMACRootMACDownStreamPORTType=cntFddiMACRootMACDownStreamPORTType, cntsnmpstat=cntsnmpstat, cntllc1ErrorTable=cntllc1ErrorTable, cntllc1XidErrs=cntllc1XidErrs, cntCpuPort=cntCpuPort, cntReleaseLevel=cntReleaseLevel, cnttransmission=cnttransmission, cntllc1OutFragPkts=cntllc1OutFragPkts, cntLuaTable=cntLuaTable, cnticmpInDuProtos=cnticmpInDuProtos, cntllc1InXidOks=cntllc1InXidOks, cntCpuMemSpace=cntCpuMemSpace, cntllc1WaitTimeOut=cntllc1WaitTimeOut, cntPossibleErrMsg=cntPossibleErrMsg, cntFddiMACTPri4=cntFddiMACTPri4, cntDataLinkCount=cntDataLinkCount, cntlua=cntlua, cntCpuMonBy=cntCpuMonBy, cntllc1TraceFlag=cntllc1TraceFlag, cntproxyEntry=cntproxyEntry, cntdot3DMAChan1RxErrs=cntdot3DMAChan1RxErrs, cntFddiMACNotCopiedCondition=cntFddiMACNotCopiedCondition, cntRevEditDate=cntRevEditDate, cntFddiPATHRingLatency=cntFddiPATHRingLatency, cntCpuPollStatus=cntCpuPollStatus, cntHwMonFailStatus=cntHwMonFailStatus, cntMemBBramAddress=cntMemBBramAddress, cntsctIndex=cntsctIndex, cntsnmpconfig=cntsnmpconfig, cntsctRxDataBytes=cntsctRxDataBytes, cntFddiSMTTable=cntFddiSMTTable, cntdlOutDiscards=cntdlOutDiscards, cntSCRTable=cntSCRTable, cntMibVersion=cntMibVersion, cntFddiPATHStatus=cntFddiPATHStatus, cntllc1OutRetBads=cntllc1OutRetBads, cntModelNumber=cntModelNumber, cntdot3DMAChan3RxErrs=cntdot3DMAChan3RxErrs, cntsctNumber=cntsctNumber, cntFddiPATHEntry=cntFddiPATHEntry, cntmdmQIndex=cntmdmQIndex, cntProxyStatus=cntProxyStatus, cntSCRIndex=cntSCRIndex, cntdlMtu=cntdlMtu, cntllc1DriverType=cntllc1DriverType, cntllc1ConfigTable=cntllc1ConfigTable, cntdot3LPXParityErrs=cntdot3LPXParityErrs, cntFddiMACNotCopiedThreshold=cntFddiMACNotCopiedThreshold, cntTrapDestCount=cntTrapDestCount, cntSysMsgTable=cntSysMsgTable, cntCpuPolls=cntCpuPolls, cnticmp=cnticmp, cntllc1BufCnt=cntllc1BufCnt, cntdot3LanceInts=cntdot3LanceInts, cntSysCpuEntry=cntSysCpuEntry, cntDot3Count=cntDot3Count, cntmdmQTaskId=cntmdmQTaskId, cntdlOutOctets=cntdlOutOctets, cntdot3DMARxWaitQ=cntdot3DMARxWaitQ, cnticmpInDuNets=cnticmpInDuNets, cntdlInNUcastPkts=cntdlInNUcastPkts, cntCpuSemLost=cntCpuSemLost, cntllc1=cntllc1, cnticmpInDuSources=cnticmpInDuSources, cntFddiPORT=cntFddiPORT, cntifCpu=cntifCpu, cntFddiPATHSba=cntFddiPATHSba, cntdlInOctets=cntdlInOctets, cntsctTxStatus=cntsctTxStatus, cntCpuStatus=cntCpuStatus, cntFddiMACDownstreamNbr=cntFddiMACDownstreamNbr, cntdot3LanceParityErrs=cntdot3LanceParityErrs, cnticmpOutDuProtos=cnticmpOutDuProtos, cntFeatureDescr=cntFeatureDescr, cntdlPortIndex=cntdlPortIndex, cntdlInUcastPkts=cntdlInUcastPkts, cntmdmQProcessId=cntmdmQProcessId, cntdlType=cntdlType, cntFeatureQuantity=cntFeatureQuantity, cntFddiMACTPri3=cntFddiMACTPri3, cntsubchanEntry=cntsubchanEntry, cntIOTable=cntIOTable, cntSlotCpuNumber=cntSlotCpuNumber, cntllc1InBadIpSizes=cntllc1InBadIpSizes, cntCpuTaskIndex=cntCpuTaskIndex, cntFddiMACNumber=cntFddiMACNumber, cntdot3DMAChan2TxErrs=cntdot3DMAChan2TxErrs, cntinterfaces=cntinterfaces, cntConfigVersion=cntConfigVersion, cntdot3DMAChan2TxErr=cntdot3DMAChan2TxErr, cntCpuSemCount=cntCpuSemCount, cntFddiPATHTMaxLowerBound=cntFddiPATHTMaxLowerBound, cntFddiMACRingOps=cntFddiMACRingOps, cntdot3PICSpuriousInts=cntdot3PICSpuriousInts, cntLuaCount=cntLuaCount, cnt=cnt, cnttraceType=cnttraceType, cntCpuLastFailDate=cntCpuLastFailDate, cntllc1BufPriority=cntllc1BufPriority, cntdlPortTable=cntdlPortTable, cntllc1InTestOks=cntllc1InTestOks, cntllc1InTests=cntllc1InTests, cntdot3LanceUnderFlows=cntdot3LanceUnderFlows, cntdlOutNUcastPkts=cntdlOutNUcastPkts, cnttrapIf=cnttrapIf, cntHwReset1Date=cntHwReset1Date, cntMsgDateTime=cntMsgDateTime, cntFddiSMTNumber=cntFddiSMTNumber, cntifIndex=cntifIndex, cntifSubIndex=cntifSubIndex, cntFddiSMTLastSetStationID=cntFddiSMTLastSetStationID, cntsctState=cntsctState, cntCachedResponses=cntCachedResponses, cntHwFailStatus=cntHwFailStatus, cntFddiPATHSMTIndex=cntFddiPATHSMTIndex, cntPowerPartNumber=cntPowerPartNumber, cntCpuLastChgDate=cntCpuLastChgDate, cntSysHardware=cntSysHardware, cntllc1ArpMailErrs=cntllc1ArpMailErrs, cntllc1StatIndex=cntllc1StatIndex, cnticmpInTmFrags=cnticmpInTmFrags, cntllc1OutSnapIps=cntllc1OutSnapIps, cntFddiMAC=cntFddiMAC, cntdot3PICBusErrs=cntdot3PICBusErrs, cntluaIf=cntluaIf, cnticmpInReHosts=cnticmpInReHosts, cntSlotEntry=cntSlotEntry, cntdlPortAddrLen=cntdlPortAddrLen, cntPowerName=cntPowerName, cntFddiMACTPri0=cntFddiMACTPri0, cntFddiPATH=cntFddiPATH, cntFeatureIndex=cntFeatureIndex, cntFddiPORTTable=cntFddiPORTTable, cntSnmpBufferCount=cntSnmpBufferCount, cntsctDrecPid=cntsctDrecPid, cnticmpInDuPorts=cnticmpInDuPorts, cntFddiMACTokens=cntFddiMACTokens, cnticmpOutReServhosts=cnticmpOutReServhosts, cntMemSramSpace=cntMemSramSpace, cntdot3LanceTxWaitQ=cntdot3LanceTxWaitQ, cntRowErrors=cntRowErrors, cntFddiPATHType=cntFddiPATHType, cntCpuType=cntCpuType, cntdot3BufPriority=cntdot3BufPriority, cntPowerSerialNumber=cntPowerSerialNumber, cntFddiPORTEntry=cntFddiPORTEntry, cntFddiMACRootMACCurrentPath=cntFddiMACRootMACCurrentPath, cntTrapTable=cntTrapTable, cntFddiPORTBaseLerTimeStamp=cntFddiPORTBaseLerTimeStamp, cntsctTotalBytes=cntsctTotalBytes, cnticmpOutDuNets=cnticmpOutDuNets, cntHwCpuEntry=cntHwCpuEntry, cntMailQueue=cntMailQueue, cntllc1ErrorIndex=cntllc1ErrorIndex, cntCntRequests=cntCntRequests, cntCpuMonStatus=cntCpuMonStatus, cntllc1OutNoRooms=cntllc1OutNoRooms, cntdot3BufsAllocated=cntdot3BufsAllocated, cntHwFailDate=cntHwFailDate, cntIOIndex=cntIOIndex, cnticmpInReNets=cnticmpInReNets, cntCofiVersion=cntCofiVersion, cnticmpOutReHosts=cnticmpOutReHosts, cntMsgSeqNumber=cntMsgSeqNumber, cntllc1ConfigEntry=cntllc1ConfigEntry, cntdot3LanceMemErrs=cntdot3LanceMemErrs, cntFddiMACNotCopies=cntFddiMACNotCopies, cntdot3BufTooManys=cntdot3BufTooManys, cntFddiMACTable=cntFddiMACTable, cntMsgNumber=cntMsgNumber, cntFddiPATHIndex=cntFddiPATHIndex, cntFddiMACCopies=cntFddiMACCopies, cntdlTypeofService=cntdlTypeofService, cntproxyNode=cntproxyNode, cntllc1InSnapIps=cntllc1InSnapIps, cntMsgTaskName=cntMsgTaskName, cntNoBuffers=cntNoBuffers, cntHwPowerSupply=cntHwPowerSupply, cntPowerRevLevel=cntPowerRevLevel, cntsctTxMsgBytes=cntsctTxMsgBytes, cntSysNodeAddress=cntSysNodeAddress, cntFddiMACLates=cntFddiMACLates, cntSlotIndex=cntSlotIndex, cntProxyCount=cntProxyCount, cntLLC1Count=cntLLC1Count, cntMsgEntry=cntMsgEntry, cntdot3LanceOverFlows=cntdot3LanceOverFlows, cntMib2Requests=cntMib2Requests, cntCpuUnclaims=cntCpuUnclaims, cntSubChanTable=cntSubChanTable, cntFddiMACShortGrpAddr=cntFddiMACShortGrpAddr, cntMsgCpuNumber=cntMsgCpuNumber, cnticmpOutDuSources=cnticmpOutDuSources, cntFddiPATHPORTOrder=cntFddiPATHPORTOrder, cntdiagnostics=cntdiagnostics, cntFddiMACBaseTimeNotCopied=cntFddiMACBaseTimeNotCopied, cntdot3Table=cntdot3Table, cntFddiPORTSMTIndex=cntFddiPORTSMTIndex, cntSlotTable=cntSlotTable, cntHwMonCpu=cntHwMonCpu, cntMemBBramSpace=cntMemBBramSpace, cntdot3BufNotAvails=cntdot3BufNotAvails, cntFddiPORTMaintLineState=cntFddiPORTMaintLineState, cntmdmQName=cntmdmQName, cntCpuTaskEntry=cntCpuTaskEntry, cntFddiMACIndex=cntFddiMACIndex, cntSubChanCount=cntSubChanCount, cntllc1ConfigIndex=cntllc1ConfigIndex, cntFddiCount=cntFddiCount, cntdlNumber=cntdlNumber, cntFddiSMTManufacturerData=cntFddiSMTManufacturerData, cntRowDeletions=cntRowDeletions, cntFddiPATHNumber=cntFddiPATHNumber, cntdot3LanceMissedPkts=cntdot3LanceMissedPkts, cntSlotSerialNumber=cntSlotSerialNumber, cntFddiPORTNumber=cntFddiPORTNumber, cntCpuUtil=cntCpuUtil, cntPowerEntry=cntPowerEntry)
mibBuilder.exportSymbols("CNTAU-MIB", cntRevEditTime=cntRevEditTime, cntllc1InNoDsaps=cntllc1InNoDsaps, cntFddiPATHTraceStatus=cntFddiPATHTraceStatus, cntproxyAddress=cntproxyAddress, cntllc1InMismIpSizes=cntllc1InMismIpSizes, cntifType=cntifType, cntifTable=cntifTable, cnttrapEntry=cnttrapEntry, cntdlOutUcastPkts=cntdlOutUcastPkts, cntdlOutErrors=cntdlOutErrors, cntWorkOrderNumber=cntWorkOrderNumber, cntSCRNumber=cntSCRNumber, cntdlTable=cntdlTable, cntChassisNumber=cntChassisNumber, cntCpuMsgRets=cntCpuMsgRets, cntllc1Addr=cntllc1Addr, cntllc1InLateTests=cntllc1InLateTests, cntdot3DMAChan1RxErr=cntdot3DMAChan1RxErr, cntdlIndex=cntdlIndex, cntCpuNum=cntCpuNum, cntllc1IpMailErrs=cntllc1IpMailErrs, cnttraceEntry=cnttraceEntry, cntllc1OutMcastErrs=cntllc1OutMcastErrs, cntFddiMACBaseErrs=cntFddiMACBaseErrs, cntSlotName=cntSlotName, cntllc1InBadTypes=cntllc1InBadTypes, cntFddiPORTBaseLemRejects=cntFddiPORTBaseLemRejects, cnticmpInReServnets=cnticmpInReServnets, cntRevDate=cntRevDate, cntFddiSMTMsgTimeStamp=cntFddiSMTMsgTimeStamp, cnticmpInDuHosts=cnticmpInDuHosts, cntSlotPartNumber=cntSlotPartNumber, cntFddiPATHTraceMaxExpiration=cntFddiPATHTraceMaxExpiration, cntllc1TestErrs=cntllc1TestErrs, cntsnmpproxy=cntsnmpproxy, cntCpuResetDelayTime=cntCpuResetDelayTime, cntluaNumber=cntluaNumber, cntMDMTable=cntMDMTable, cntdlPortType=cntdlPortType, cntFeatureTable=cntFeatureTable, cntIOName=cntIOName, cntFddiMACLongAlias=cntFddiMACLongAlias, cntllc1StatsTable=cntllc1StatsTable, cntSevereErrMsg=cntSevereErrMsg, cntdlOutQLen=cntdlOutQLen, cntdot3DMATxWaitQ=cntdot3DMATxWaitQ, cntFddiSMTEntry=cntFddiSMTEntry, cnticmpOutDuPorts=cnticmpOutDuPorts, cntdot3PICMemSeqErrs=cntdot3PICMemSeqErrs, cntMemSramFree=cntMemSramFree, cntFddiMACTPri2=cntFddiMACTPri2, cntIOInterface=cntIOInterface, cntsctRxMsgBytes=cntsctRxMsgBytes, cntSerialNumber=cntSerialNumber, cntSysBuild=cntSysBuild, cnticmpInDuFrags=cnticmpInDuFrags, cntFddiSMTIndex=cntFddiSMTIndex, cntFddiPORTIndex=cntFddiPORTIndex, cntMemBBramFree=cntMemBBramFree, cntllc1OutXids=cntllc1OutXids, cntSerialAlfaNumber=cntSerialAlfaNumber, cntdot3=cntdot3, cntSlotVMEbusGrant=cntSlotVMEbusGrant, cntSlotRevLevel=cntSlotRevLevel, cntFddiSMTTransitionTimeStamp=cntFddiSMTTransitionTimeStamp, cntCpuTaskName=cntCpuTaskName, cntsctTxErrMsgs=cntsctTxErrMsgs, cntllc1InLateXids=cntllc1InLateXids, cntSCREntry=cntSCREntry, cntFddiMACSMTIndex=cntFddiMACSMTIndex, cntFddiMACBridgeFunction=cntFddiMACBridgeFunction, cntPowerTable=cntPowerTable, cntsctRxMsgs=cntsctRxMsgs, cntdot3SoftwareID=cntdot3SoftwareID, cntllc1InSnapNoProts=cntllc1InSnapNoProts, cntdlActivePort=cntdlActivePort, cnticmpOutTmXceeds=cnticmpOutTmXceeds, cntDot3Requests=cntDot3Requests, cntProxyTable=cntProxyTable, cntllc1OutRetOks=cntllc1OutRetOks, cntFddiMACOldDownstreamNbr=cntFddiMACOldDownstreamNbr, cntHwReset2Why=cntHwReset2Why, cntllc1OutTestResps=cntllc1OutTestResps, cnticmpOutDuFrags=cnticmpOutDuFrags, cntllc1OutXidResps=cntllc1OutXidResps, cntFddiMACBaseLosts=cntFddiMACBaseLosts, cntsctDrecTask=cntsctDrecTask, cntHwCpuTable=cntHwCpuTable, cntau=cntau, cntFddiMACBaseCopies=cntFddiMACBaseCopies, cntFddiRequests=cntFddiRequests, cntdot3Entry=cntdot3Entry, cntdlInDiscards=cntdlInDiscards, cntFddiMACTPri5=cntFddiMACTPri5, cntfddi=cntfddi, cntFddiPortCount=cntFddiPortCount, cntluaEntry=cntluaEntry, cntllc1InXids=cntllc1InXids, cnticmpOutDuHosts=cnticmpOutDuHosts, cntFddiMACTvxExpires=cntFddiMACTvxExpires, cntHwReset2Date=cntHwReset2Date, cntFddiMACMasterSlaveLoopStatus=cntFddiMACMasterSlaveLoopStatus, cntIOCpuNumber=cntIOCpuNumber, cntllc1InSnapNoTypes=cntllc1InSnapNoTypes, cntdlInUnknownProtos=cntdlInUnknownProtos, cntCpuXtraInts=cntCpuXtraInts, cnttraceCpu=cnttraceCpu, cntMsgSeverity=cntMsgSeverity, cnticmpOutReServnets=cnticmpOutReServnets, cntTrapFlags=cntTrapFlags, cnttraceIndex=cnttraceIndex, cntllc1InSnapArps=cntllc1InSnapArps, cntCustomer=cntCustomer, cntSlotInterface=cntSlotInterface, cntFddiMACRootConcentratorMac=cntFddiMACRootConcentratorMac, cntFddiSMT=cntFddiSMT, cntllc1StatsEntry=cntllc1StatsEntry, cntdlMaxPort=cntdlMaxPort, cntdlDescr=cntdlDescr, cntLastTrapMsg=cntLastTrapMsg, cntUsedCaches=cntUsedCaches, cntsctTxDataBytes=cntsctTxDataBytes, cnttrapAddress=cnttrapAddress, cntFddiMACLongGrpAddr=cntFddiMACLongGrpAddr, cntdot3DMAChan3RxErr=cntdot3DMAChan3RxErr, cntdot3PICMemParityErrs=cntdot3PICMemParityErrs, cntHwReset3Date=cntHwReset3Date, cntdot3DMAChan0TxErrs=cntdot3DMAChan0TxErrs, cntFddiMACTPri1=cntFddiMACTPri1, cntCpuIndex=cntCpuIndex, cntCpuResetFlag=cntCpuResetFlag, cntFddiPATHTRmode=cntFddiPATHTRmode, cntPowerIndex=cntPowerIndex, cntCpuTaskTable=cntCpuTaskTable, cntMibObjectCount=cntMibObjectCount, cntHwReset3Why=cntHwReset3Why, cntFddiSMTSetCount=cntFddiSMTSetCount, cntHwStatusLED=cntHwStatusLED, cntFddiMACTPri6=cntFddiMACTPri6, cntCriticalErrMsg=cntCriticalErrMsg, cnticmpOutReNets=cnticmpOutReNets, cntIfPollInterval=cntIfPollInterval, cntllc1OutXmitErrs=cntllc1OutXmitErrs, cntFddiMACShortAlias=cntFddiMACShortAlias, cntFddiPORTBaseLerEstimate=cntFddiPORTBaseLerEstimate, cntCpuLevel7s=cntCpuLevel7s, cntFddiPATHSbaOverhead=cntFddiPATHSbaOverhead, cntHwReset1Why=cntHwReset1Why, cntInformationalMsg=cntInformationalMsg, cntIOEntry=cntIOEntry, cnttraceData=cnttraceData, cntdlState=cntdlState, cntFddiMACNotCopiedRatio=cntFddiMACNotCopiedRatio, cntsnmp=cntsnmp, cntMsgNodeNumber=cntMsgNodeNumber, cntRowModifies=cntRowModifies, cntllc1OutTooBigs=cntllc1OutTooBigs, cntsnmpTrapFlags=cntsnmpTrapFlags, cnttrapIndex=cnttrapIndex, cntifEntry=cntifEntry, cntdot3Chan1Misreads=cntdot3Chan1Misreads, cntMsgContent=cntMsgContent, cntFddiMACBaseTimeFrameError=cntFddiMACBaseTimeFrameError, cntTraceTable=cntTraceTable, cntFddiMACTransmits=cntFddiMACTransmits, cntllc1OutBadIpSizes=cntllc1OutBadIpSizes, cntllc1OutTests=cntllc1OutTests, cnticmpOutTmFrags=cnticmpOutTmFrags, cntIORevLevel=cntIORevLevel, cntllc1InitFlag=cntllc1InitFlag, cntdlSourcePort=cntdlSourcePort, cntFeatureName=cntFeatureName, cntMailTimeouts=cntMailTimeouts, cntFddiMACEntry=cntFddiMACEntry, cntIfsState=cntIfsState, cntSysCpuTable=cntSysCpuTable, cntdlDestPort=cntdlDestPort, cntCpuMemFree=cntCpuMemFree, cntDoDIPCount=cntDoDIPCount, cntsctRxCredit=cntsctRxCredit, cntllc1InUIs=cntllc1InUIs, cntFddiMACBaseFrames=cntFddiMACBaseFrames, cntproxyIndex=cntproxyIndex, cntsnmptrap=cntsnmptrap, cntdot3DMAChan0TxErr=cntdot3DMAChan0TxErr, cntllc1BusId=cntllc1BusId, cntIOSerialNumber=cntIOSerialNumber, cntFddiSMTUserData=cntFddiSMTUserData, cntdlInErrors=cntdlInErrors, cntsctSubChanStatus=cntsctSubChanStatus, cnticmpInReServhosts=cnticmpInReServhosts, cntllc1ErrorEntry=cntllc1ErrorEntry)
