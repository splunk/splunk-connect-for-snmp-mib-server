#
# PySNMP MIB module DELL-SNMP-UPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DELL-SNMP-UPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:22:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ObjectIdentity, Integer32, Counter64, NotificationType, enterprises, iso, Unsigned32, Bits, Counter32, IpAddress, MibIdentifier, Gauge32, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Integer32", "Counter64", "NotificationType", "enterprises", "iso", "Unsigned32", "Bits", "Counter32", "IpAddress", "MibIdentifier", "Gauge32", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp")
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
upsdell = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2))
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100))
productStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110))
physical = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120))
logical = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 130))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140))
physicalIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 1))
physicalOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2))
physicalRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 3))
physicalUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 4))
physicalBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 5))
physicalLoadSegment = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6))
physicalEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7))
productIDDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDDisplayName.setStatus('mandatory')
productIDDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDDescription.setStatus('mandatory')
productIDVendor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDVendor.setStatus('mandatory')
productIDVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDVersion.setStatus('mandatory')
productIDBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDBuildNumber.setStatus('mandatory')
productIDURL = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDURL.setStatus('mandatory')
productIDDeviceNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDDeviceNetworkName.setStatus('mandatory')
productStatusGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("non-critical", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusGlobalStatus.setStatus('mandatory')
productStatusLastGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusLastGlobalStatus.setStatus('mandatory')
productStatusTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusTimeStamp.setStatus('mandatory')
productStatusGetTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusGetTimeOut.setStatus('optional')
productStatusRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusRefreshRate.setStatus('optional')
productStatusGeneratingTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusGeneratingTrapFlag.setStatus('optional')
physicalIdentFamilyName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalIdentFamilyName.setStatus('mandatory')
physicalIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalIdentSerialNumber.setStatus('mandatory')
physicalIdentConverterType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lineInteractive", 1), ("onLine", 2), ("onLineUnitaryParallel", 3), ("onLineParallelWithNS", 4), ("onLineHotStandbyRedundancy", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalIdentConverterType.setStatus('mandatory')
physicalIdentReferenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalIdentReferenceNumber.setStatus('mandatory')
physicalOutputInstantHeadroom = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputInstantHeadroom.setStatus('mandatory')
physicalOutputPeakHeadroom = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputPeakHeadroom.setStatus('mandatory')
physicalOutputPeakHeadroomTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputPeakHeadroomTimestamp.setStatus('mandatory')
physicalOutputPeakConsumption = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputPeakConsumption.setStatus('mandatory')
physicalOutputPeakConsumptionTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputPeakConsumptionTimestamp.setStatus('mandatory')
physicalOutputPresentConsumption = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputPresentConsumption.setStatus('mandatory')
physicalOutputCumulativeConsumption = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputCumulativeConsumption.setStatus('mandatory')
physicalOutputCumulativeConsumptionTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputCumulativeConsumptionTimestamp.setStatus('mandatory')
physicalOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputVA.setStatus('mandatory')
physicalRectifierPosVoltage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalRectifierPosVoltage.setStatus('mandatory')
physicalRectifierNegVoltage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalRectifierNegVoltage.setStatus('mandatory')
physicalUPSDateTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 4, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalUPSDateTime.setStatus('mandatory')
physicalUPSAlarmsStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalUPSAlarmsStatus.setStatus('mandatory')
physicalUPSRuntimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalUPSRuntimeToShutdown.setStatus('mandatory')
physicalUPSOutpoutSwitchable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchable", 1), ("notSwitchable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalUPSOutpoutSwitchable.setStatus('mandatory')
physicalBatteryABMStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("abmCharging", 1), ("abmDischarging", 2), ("abmFloating", 3), ("abmResting", 4), ("abmOff", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalBatteryABMStatus.setStatus('mandatory')
physicalBatteryTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("donePassed", 1), ("doneWarning", 2), ("doneError", 3), ("aborted", 4), ("inProgress", 5), ("noTestIniated", 6), ("testScheduled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalBatteryTestStatus.setStatus('mandatory')
physicalBatterySecondsRemaining = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalBatterySecondsRemaining.setStatus('mandatory')
physicalLoadSegment1ShutdownAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment1ShutdownAfterDelay.setStatus('mandatory')
physicalLoadSegment1StartupAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment1StartupAfterDelay.setStatus('mandatory')
physicalLoadSegment2ShutdownAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment2ShutdownAfterDelay.setStatus('mandatory')
physicalLoadSegment2StartupAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment2StartupAfterDelay.setStatus('mandatory')
physicalLoadSegment1RuntimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment1RuntimeToShutdown.setStatus('mandatory')
physicalLoadSegment2RuntimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment2RuntimeToShutdown.setStatus('mandatory')
physicalEnvironmentSensorPresent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentSensorPresent.setStatus('mandatory')
physicalEnvironmentSensorName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentSensorName.setStatus('mandatory')
physicalEnvironmentValues = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3))
physicalEnvironmentValuesTemperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureUnit.setStatus('mandatory')
physicalEnvironmentValuesTemperature = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperature.setStatus('mandatory')
physicalEnvironmentValuesHumidity = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesHumidity.setStatus('mandatory')
physicalEnvironmentValuesTemperatureLow = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureLow.setStatus('mandatory')
physicalEnvironmentValuesTemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureHigh.setStatus('mandatory')
physicalEnvironmentValuesTemperatureHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureHysteresis.setStatus('mandatory')
physicalEnvironmentValueshHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValueshHumidityLow.setStatus('mandatory')
physicalEnvironmentValuesHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesHumidityHigh.setStatus('mandatory')
physicalEnvironmentValuesHumidityHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesHumidityHysteresis.setStatus('mandatory')
physicalEnvironmentInputTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4), )
if mibBuilder.loadTexts: physicalEnvironmentInputTable.setStatus('mandatory')
physicalEnvironmentInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1), ).setIndexNames((0, "DELL-SNMP-UPS-MIB", "physicalEnvironmentInputIndex"))
if mibBuilder.loadTexts: physicalEnvironmentInputEntry.setStatus('mandatory')
physicalEnvironmentInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentInputIndex.setStatus('mandatory')
physicalEnvironmentInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentInputName.setStatus('mandatory')
physicalEnvironmentInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentInputState.setStatus('mandatory')
physicalEnvironmentInputOpenedState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentInputOpenedState.setStatus('mandatory')
physicalEnvironmentInputClosedState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentInputClosedState.setStatus('mandatory')
trapInverterOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,1))
trapInverterOverVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,2))
trapInverterUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,3))
trapInverterUnderVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,4))
trapBypassFrequencyOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,5))
trapBypassFrequencyOutOfRangeOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,6))
trapOnBuck = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,7))
trapReturnFromBuck = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,8))
trapOnBoost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,9))
trapReturnFromBoost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,10))
trapInputOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,11))
trapInputOverVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,12))
trapInputUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,13))
trapInputUnderVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,14))
trapInputFrequencyOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,15))
trapInputFrequencyOutOfRangeOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,16))
trapRemoteEmergencyPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,17))
trapReturnFromEmergencyPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,18))
trapLevel1Overload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,19))
trapLevel1OverloadOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,20))
trapLevel2Overload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,21))
trapLevel2OverloadOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,22))
trapLevel3Overload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,23))
trapLevel3OverloadOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,24))
trapPosDCLinkOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,25))
trapPosDCLinkOverVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,26))
trapPosDCLinkUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,27))
trapPosDCLinkUnderVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,28))
trapNegDCLinkOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,29))
trapNegDCLinkOverVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,30))
trapNegDCLinkUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,31))
trapNegDCLinkUnderVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,32))
trapRectifierFault = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,33))
trapRectifierOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,34))
trapInverterFault = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,35))
trapInverterOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,36))
trapChargerFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,37))
trapChargerOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,38))
trapEepromFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,39))
trapEepromOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,40))
trapShutdownImminent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,41))
trapShutdownImminentOver = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,42))
trapBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,43))
trapBatteryOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,44))
trapOutputShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,45))
trapOutputReturnFromShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,46))
trapUtilityNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,47))
trapUtilityPresent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,48))
trapBatteryOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,49))
trapBatteryOverVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,50))
trapHeatsinkOvertemperature = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,51))
trapHeatsinkOvertemperatureOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,52))
trapBypassNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,53))
trapBypassNotAvailableOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,54))
trapOnManualBypass = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,55))
trapUPSOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,57))
trapUPSReturnFromBattery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,58))
trapUPSOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,59))
trapUPSReturnFromBypass = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,60))
trapBatteryTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,61))
trapBatteryTestDone = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,62)).setObjects(("DELL-SNMP-UPS-MIB", "physicalBatteryTestStatus"))
trapBatteryNeedReplacement = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,63))
trapBatteryReplacementDone = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,64))
trapFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,65))
trapFanOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,66))
trapSiteWiringFault = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,67))
trapSiteWiringOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,68))
trapBatteryDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,69))
trapBatteryConnected = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,70))
trapUPSOff = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,71))
trapUPSOn = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,72))
trapDCLinkImbalance = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,73))
trapDCLinkImbalanceOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,74))
trapABMOn = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,79)).setObjects(("DELL-SNMP-UPS-MIB", "physicalBatteryABMStatus"))
trapABMOff = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,80))
trapLoadSegment1Off = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,81))
trapLoadSegment1On = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,82))
trapLoadSegment2Off = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,83))
trapLoadSegment2On = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,84))
trapInHighEfficiencyMode = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,85))
trapReturnFromHighEfficiencyMode = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,86))
trapRectifierOverload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,87))
trapRectifierOverloadOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,88))
trapInverterOverload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,89))
trapInverterOverloadOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,90))
trapBypassVoltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,91))
trapBypassVoltageOutOfRangeOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,92))
trapServiceBattery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,93))
trapToBypassCommand = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,94))
trapFromBypassCommand = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,95))
trapCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,96))
trapCommunicationRestored = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,97))
trapEnvironComFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,98))
trapEnvironComOK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,99))
trapEnvironTemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,100))
trapEnvironTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,102))
trapEnvironTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,103))
trapEnvironHumidityLow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,104))
trapEnvironHumidityHigh = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,106))
trapEnvironHumidityOK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,107))
trapEnvironInput1Closed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,108))
trapEnvironInput1Open = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,109))
trapEnvironInput2Closed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,110))
trapEnvironInput2Open = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,111))
mibBuilder.exportSymbols("DELL-SNMP-UPS-MIB", physicalEnvironmentValuesHumidityHigh=physicalEnvironmentValuesHumidityHigh, trapOnBoost=trapOnBoost, trapLevel3OverloadOk=trapLevel3OverloadOk, trapEnvironInput1Closed=trapEnvironInput1Closed, trapOnBuck=trapOnBuck, trapUtilityNotPresent=trapUtilityNotPresent, traps=traps, physicalBatteryABMStatus=physicalBatteryABMStatus, trapFromBypassCommand=trapFromBypassCommand, productStatusRefreshRate=productStatusRefreshRate, productStatusTimeStamp=productStatusTimeStamp, physicalLoadSegment1ShutdownAfterDelay=physicalLoadSegment1ShutdownAfterDelay, trapHeatsinkOvertemperature=trapHeatsinkOvertemperature, trapEnvironComFailure=trapEnvironComFailure, physicalIdentReferenceNumber=physicalIdentReferenceNumber, physicalLoadSegment1StartupAfterDelay=physicalLoadSegment1StartupAfterDelay, physicalBattery=physicalBattery, trapBatteryTestInProgress=trapBatteryTestInProgress, trapRectifierOk=trapRectifierOk, trapBatteryReplacementDone=trapBatteryReplacementDone, trapInputOverVoltageOk=trapInputOverVoltageOk, physicalEnvironmentValuesTemperatureUnit=physicalEnvironmentValuesTemperatureUnit, trapInputFrequencyOutOfRangeOk=trapInputFrequencyOutOfRangeOk, physicalEnvironmentInputState=physicalEnvironmentInputState, trapEepromOk=trapEepromOk, physicalIdentFamilyName=physicalIdentFamilyName, physicalEnvironment=physicalEnvironment, physicalEnvironmentValuesTemperatureLow=physicalEnvironmentValuesTemperatureLow, trapInverterOverVoltageOk=trapInverterOverVoltageOk, trapPosDCLinkOverVoltageOk=trapPosDCLinkOverVoltageOk, physicalEnvironmentValues=physicalEnvironmentValues, trapLevel1OverloadOk=trapLevel1OverloadOk, trapReturnFromEmergencyPowerOff=trapReturnFromEmergencyPowerOff, trapBatteryOverVoltage=trapBatteryOverVoltage, trapRectifierOverloadOk=trapRectifierOverloadOk, trapHeatsinkOvertemperatureOk=trapHeatsinkOvertemperatureOk, trapUPSOff=trapUPSOff, trapLevel1Overload=trapLevel1Overload, trapInputUnderVoltageOk=trapInputUnderVoltageOk, physicalOutputPeakConsumptionTimestamp=physicalOutputPeakConsumptionTimestamp, upsdell=upsdell, physicalEnvironmentSensorPresent=physicalEnvironmentSensorPresent, physicalUPSOutpoutSwitchable=physicalUPSOutpoutSwitchable, trapShutdownImminent=trapShutdownImminent, physical=physical, trapLevel3Overload=trapLevel3Overload, trapEnvironHumidityHigh=trapEnvironHumidityHigh, productIDVendor=productIDVendor, physicalLoadSegment1RuntimeToShutdown=physicalLoadSegment1RuntimeToShutdown, trapInputOverVoltage=trapInputOverVoltage, productStatusGeneratingTrapFlag=productStatusGeneratingTrapFlag, trapBatteryOk=trapBatteryOk, trapOutputReturnFromShortCircuit=trapOutputReturnFromShortCircuit, trapBatteryTestDone=trapBatteryTestDone, trapLevel2OverloadOk=trapLevel2OverloadOk, trapServiceBattery=trapServiceBattery, trapInputFrequencyOutOfRange=trapInputFrequencyOutOfRange, physicalEnvironmentValuesHumidity=physicalEnvironmentValuesHumidity, physicalEnvironmentValueshHumidityLow=physicalEnvironmentValueshHumidityLow, physicalOutputCumulativeConsumptionTimestamp=physicalOutputCumulativeConsumptionTimestamp, trapEnvironInput2Open=trapEnvironInput2Open, trapInverterUnderVoltage=trapInverterUnderVoltage, trapNegDCLinkUnderVoltageOk=trapNegDCLinkUnderVoltageOk, trapRectifierOverload=trapRectifierOverload, trapSiteWiringFault=trapSiteWiringFault, productID=productID, trapBatteryDisconnected=trapBatteryDisconnected, physicalOutputPresentConsumption=physicalOutputPresentConsumption, trapPosDCLinkUnderVoltageOk=trapPosDCLinkUnderVoltageOk, trapFanOk=trapFanOk, trapNegDCLinkOverVoltageOk=trapNegDCLinkOverVoltageOk, productIDURL=productIDURL, physicalOutputVA=physicalOutputVA, trapBatteryOverVoltageOk=trapBatteryOverVoltageOk, trapBypassFrequencyOutOfRange=trapBypassFrequencyOutOfRange, trapLoadSegment2Off=trapLoadSegment2Off, physicalEnvironmentInputTable=physicalEnvironmentInputTable, trapEnvironTemperatureOK=trapEnvironTemperatureOK, physicalLoadSegment2StartupAfterDelay=physicalLoadSegment2StartupAfterDelay, trapRectifierFault=trapRectifierFault, physicalEnvironmentValuesTemperature=physicalEnvironmentValuesTemperature, trapNegDCLinkOverVoltage=trapNegDCLinkOverVoltage, trapLoadSegment1On=trapLoadSegment1On, physicalLoadSegment2RuntimeToShutdown=physicalLoadSegment2RuntimeToShutdown, trapChargerOk=trapChargerOk, productIDDeviceNetworkName=productIDDeviceNetworkName, trapEnvironTemperatureLow=trapEnvironTemperatureLow, trapBatteryConnected=trapBatteryConnected, trapRemoteEmergencyPowerOff=trapRemoteEmergencyPowerOff, trapEnvironComOK=trapEnvironComOK, trapSiteWiringOk=trapSiteWiringOk, trapChargerFailure=trapChargerFailure, trapUPSReturnFromBattery=trapUPSReturnFromBattery, physicalIdent=physicalIdent, physicalBatterySecondsRemaining=physicalBatterySecondsRemaining, physicalEnvironmentInputClosedState=physicalEnvironmentInputClosedState, physicalEnvironmentValuesTemperatureHysteresis=physicalEnvironmentValuesTemperatureHysteresis, physicalIdentConverterType=physicalIdentConverterType, physicalOutputInstantHeadroom=physicalOutputInstantHeadroom, productStatus=productStatus, physicalBatteryTestStatus=physicalBatteryTestStatus, physicalEnvironmentInputName=physicalEnvironmentInputName, productStatusGlobalStatus=productStatusGlobalStatus, trapABMOn=trapABMOn, trapABMOff=trapABMOff, physicalRectifierPosVoltage=physicalRectifierPosVoltage, trapDCLinkImbalance=trapDCLinkImbalance, trapBypassVoltageOutOfRange=trapBypassVoltageOutOfRange, trapBypassVoltageOutOfRangeOk=trapBypassVoltageOutOfRangeOk, trapOutputShortCircuit=trapOutputShortCircuit, trapReturnFromHighEfficiencyMode=trapReturnFromHighEfficiencyMode, productIDVersion=productIDVersion, trapEnvironInput1Open=trapEnvironInput1Open, productIDDescription=productIDDescription, trapUPSOnBattery=trapUPSOnBattery, trapEnvironHumidityOK=trapEnvironHumidityOK, trapPosDCLinkUnderVoltage=trapPosDCLinkUnderVoltage, trapEepromFailure=trapEepromFailure, trapBatteryNeedReplacement=trapBatteryNeedReplacement, physicalOutput=physicalOutput, trapPosDCLinkOverVoltage=trapPosDCLinkOverVoltage, trapInverterFault=trapInverterFault, trapCommunicationLost=trapCommunicationLost, physicalEnvironmentInputIndex=physicalEnvironmentInputIndex, trapLoadSegment1Off=trapLoadSegment1Off, trapToBypassCommand=trapToBypassCommand, trapEnvironTemperatureHigh=trapEnvironTemperatureHigh, trapUPSOnBypass=trapUPSOnBypass, trapUPSReturnFromBypass=trapUPSReturnFromBypass, physicalEnvironmentInputOpenedState=physicalEnvironmentInputOpenedState, trapBatteryLow=trapBatteryLow, trapInverterUnderVoltageOk=trapInverterUnderVoltageOk, trapBypassFrequencyOutOfRangeOk=trapBypassFrequencyOutOfRangeOk, trapInverterOk=trapInverterOk, physicalUPSRuntimeToShutdown=physicalUPSRuntimeToShutdown, logical=logical, productIDBuildNumber=productIDBuildNumber, trapLevel2Overload=trapLevel2Overload, productStatusLastGlobalStatus=productStatusLastGlobalStatus, physicalUPSDateTime=physicalUPSDateTime, physicalOutputPeakHeadroom=physicalOutputPeakHeadroom, productIDDisplayName=productIDDisplayName, physicalLoadSegment2ShutdownAfterDelay=physicalLoadSegment2ShutdownAfterDelay, trapBypassNotAvailable=trapBypassNotAvailable, physicalOutputPeakConsumption=physicalOutputPeakConsumption, trapLoadSegment2On=trapLoadSegment2On, trapReturnFromBuck=trapReturnFromBuck, trapInHighEfficiencyMode=trapInHighEfficiencyMode, trapReturnFromBoost=trapReturnFromBoost, trapEnvironHumidityLow=trapEnvironHumidityLow, physicalRectifierNegVoltage=physicalRectifierNegVoltage, trapUPSOn=trapUPSOn, trapEnvironInput2Closed=trapEnvironInput2Closed, physicalEnvironmentSensorName=physicalEnvironmentSensorName, trapDCLinkImbalanceOk=trapDCLinkImbalanceOk, physicalRectifier=physicalRectifier, trapCommunicationRestored=trapCommunicationRestored, dell=dell, physicalEnvironmentValuesTemperatureHigh=physicalEnvironmentValuesTemperatureHigh, trapFanFailure=trapFanFailure, trapInputUnderVoltage=trapInputUnderVoltage, physicalEnvironmentValuesHumidityHysteresis=physicalEnvironmentValuesHumidityHysteresis, hardware=hardware, physicalUPSAlarmsStatus=physicalUPSAlarmsStatus, productStatusGetTimeOut=productStatusGetTimeOut, trapOnManualBypass=trapOnManualBypass, trapNegDCLinkUnderVoltage=trapNegDCLinkUnderVoltage, trapUtilityPresent=trapUtilityPresent, trapBypassNotAvailableOk=trapBypassNotAvailableOk, physicalUPS=physicalUPS, trapInverterOverloadOk=trapInverterOverloadOk, physicalIdentSerialNumber=physicalIdentSerialNumber, physicalEnvironmentInputEntry=physicalEnvironmentInputEntry, trapInverterOverload=trapInverterOverload, trapInverterOverVoltage=trapInverterOverVoltage, physicalOutputPeakHeadroomTimestamp=physicalOutputPeakHeadroomTimestamp, trapShutdownImminentOver=trapShutdownImminentOver, physicalLoadSegment=physicalLoadSegment, physicalOutputCumulativeConsumption=physicalOutputCumulativeConsumption)
