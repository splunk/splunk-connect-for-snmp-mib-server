#
# PySNMP MIB module PACKETPOWER-EG4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACKETPOWER-EG4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:27:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter32, Bits, IpAddress, Gauge32, MibIdentifier, iso, TimeTicks, Unsigned32, Counter64, enterprises, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Bits", "IpAddress", "Gauge32", "MibIdentifier", "iso", "TimeTicks", "Unsigned32", "Counter64", "enterprises", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TruthValue, TextualConvention, RowStatus, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DateAndTime", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
packetPower = MibIdentifier((1, 3, 6, 1, 4, 1, 33688))
eg4 = MibIdentifier((1, 3, 6, 1, 4, 1, 33688, 4))
readingsTable = MibTable((1, 3, 6, 1, 4, 1, 33688, 4, 1), )
if mibBuilder.loadTexts: readingsTable.setStatus('current')
readingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1), ).setIndexNames((0, "PACKETPOWER-EG4-MIB", "reNodeId1"), (0, "PACKETPOWER-EG4-MIB", "reNodeId2"), (0, "PACKETPOWER-EG4-MIB", "reNodeId3"), (0, "PACKETPOWER-EG4-MIB", "reNodeId4"), (0, "PACKETPOWER-EG4-MIB", "channelId"))
if mibBuilder.loadTexts: readingsEntry.setStatus('current')
reNodeId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: reNodeId1.setStatus('current')
reNodeId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: reNodeId2.setStatus('current')
reNodeId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: reNodeId3.setStatus('current')
reNodeId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: reNodeId4.setStatus('current')
channelId = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("current", 2), ("voltage", 1), ("power", 3), ("energy", 4), ("frequency", 5), ("temperature", 6), ("humidity", 7), ("va", 8), ("vdd", 9), ("battery", 10), ("pressure", 11), ("contact", 12), ("contactcount", 13))))
if mibBuilder.loadTexts: channelId.setStatus('current')
reNodeIdHex = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reNodeIdHex.setStatus('current')
reNodeIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reNodeIdString.setStatus('current')
reChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reChannelName.setStatus('current')
reTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reTime.setStatus('current')
reUnixTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reUnixTime.setStatus('current')
reIso8601Time = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reIso8601Time.setStatus('current')
reValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reValue.setStatus('current')
reUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reUnits.setStatus('current')
nodesTable = MibTable((1, 3, 6, 1, 4, 1, 33688, 4, 2), )
if mibBuilder.loadTexts: nodesTable.setStatus('current')
nodesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1), ).setIndexNames((0, "PACKETPOWER-EG4-MIB", "ntNodeId1"), (0, "PACKETPOWER-EG4-MIB", "ntNodeId2"), (0, "PACKETPOWER-EG4-MIB", "ntNodeId3"), (0, "PACKETPOWER-EG4-MIB", "ntNodeId4"))
if mibBuilder.loadTexts: nodesEntry.setStatus('current')
ntNodeId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65532)))
if mibBuilder.loadTexts: ntNodeId1.setStatus('current')
ntNodeId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65532)))
if mibBuilder.loadTexts: ntNodeId2.setStatus('current')
ntNodeId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65532)))
if mibBuilder.loadTexts: ntNodeId3.setStatus('current')
ntNodeId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65532)))
if mibBuilder.loadTexts: ntNodeId4.setStatus('current')
ntNodeIdHex = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntNodeIdHex.setStatus('current')
ntNodeIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntNodeIdString.setStatus('current')
ntTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTime.setStatus('current')
ntUnixTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntUnixTime.setStatus('current')
ntIso8601Time = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntIso8601Time.setStatus('current')
ntLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 33688, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLinkQuality.setStatus('current')
mibBuilder.exportSymbols("PACKETPOWER-EG4-MIB", ntNodeId2=ntNodeId2, packetPower=packetPower, reNodeId4=reNodeId4, internet=internet, ntTime=ntTime, ntNodeIdString=ntNodeIdString, reNodeId3=reNodeId3, private=private, dod=dod, ntLinkQuality=ntLinkQuality, reNodeId1=reNodeId1, ntNodeIdHex=ntNodeIdHex, reChannelName=reChannelName, ntUnixTime=ntUnixTime, eg4=eg4, reNodeId2=reNodeId2, reTime=reTime, reNodeIdHex=reNodeIdHex, reNodeIdString=reNodeIdString, nodesEntry=nodesEntry, org=org, nodesTable=nodesTable, ntIso8601Time=ntIso8601Time, ntNodeId1=ntNodeId1, readingsEntry=readingsEntry, reIso8601Time=reIso8601Time, ntNodeId4=ntNodeId4, readingsTable=readingsTable, reValue=reValue, reUnits=reUnits, ntNodeId3=ntNodeId3, reUnixTime=reUnixTime, channelId=channelId, enterprises=enterprises)
