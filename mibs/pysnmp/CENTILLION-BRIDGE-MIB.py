#
# PySNMP MIB module CENTILLION-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:30:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
EnableIndicator, extensions = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "EnableIndicator", "extensions")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, IpAddress, Bits, ObjectIdentity, iso, Integer32, Counter64, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "IpAddress", "Bits", "ObjectIdentity", "iso", "Integer32", "Counter64", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

cndot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 17))
cndot1dBase = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 17, 1))
cndot1dStp = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 17, 2))
cndot1dSr = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 17, 3))
cndot1dTp = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 17, 4))
cndot1dBaseBridgeAddress = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dBaseBridgeAddress.setStatus('mandatory')
cndot1dBaseNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dBaseNumPorts.setStatus('mandatory')
cndot1dBaseType = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dBaseType.setStatus('mandatory')
cndot1dBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 17, 1, 4), )
if mibBuilder.loadTexts: cndot1dBasePortTable.setStatus('mandatory')
cndot1dBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 17, 1, 4, 1), ).setIndexNames((0, "CENTILLION-BRIDGE-MIB", "cndot1dBasePort"))
if mibBuilder.loadTexts: cndot1dBasePortEntry.setStatus('mandatory')
cndot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dBasePort.setStatus('mandatory')
cndot1dBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dBasePortIfIndex.setStatus('mandatory')
cndot1dBasePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 1, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dBasePortCircuit.setStatus('mandatory')
cndot1dStpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpProtocolSpecification.setStatus('mandatory')
cndot1dStpPriority = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndot1dStpPriority.setStatus('mandatory')
cndot1dStpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpTimeSinceTopologyChange.setStatus('mandatory')
cndot1dStpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpTopChanges.setStatus('mandatory')
cndot1dStpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpDesignatedRoot.setStatus('mandatory')
cndot1dStpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpRootCost.setStatus('mandatory')
cndot1dStpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpRootPort.setStatus('mandatory')
cndot1dStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpMaxAge.setStatus('mandatory')
cndot1dStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpHelloTime.setStatus('mandatory')
cndot1dStpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpHoldTime.setStatus('mandatory')
cndot1dStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpForwardDelay.setStatus('mandatory')
cndot1dStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 12), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndot1dStpBridgeMaxAge.setStatus('mandatory')
cndot1dStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndot1dStpBridgeHelloTime.setStatus('mandatory')
cndot1dStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndot1dStpBridgeForwardDelay.setStatus('mandatory')
cndot1dStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15), )
if mibBuilder.loadTexts: cndot1dStpPortTable.setStatus('mandatory')
cndot1dStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1), ).setIndexNames((0, "CENTILLION-BRIDGE-MIB", "cndot1dStpPort"))
if mibBuilder.loadTexts: cndot1dStpPortEntry.setStatus('mandatory')
cndot1dStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpPort.setStatus('mandatory')
cndot1dStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndot1dStpPortPriority.setStatus('mandatory')
cndot1dStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpPortState.setStatus('mandatory')
cndot1dStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndot1dStpPortEnable.setStatus('mandatory')
cndot1dStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndot1dStpPortPathCost.setStatus('mandatory')
cndot1dStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpPortDesignatedRoot.setStatus('mandatory')
cndot1dStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpPortDesignatedCost.setStatus('mandatory')
cndot1dStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpPortDesignatedBridge.setStatus('mandatory')
cndot1dStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpPortDesignatedPort.setStatus('mandatory')
cndot1dStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 17, 2, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndot1dStpPortForwardTransitions.setStatus('mandatory')
cndot1dTpSrFrameForward = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 17, 4, 5), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndot1dTpSrFrameForward.setStatus('mandatory')
mibBuilder.exportSymbols("CENTILLION-BRIDGE-MIB", cndot1dBasePortCircuit=cndot1dBasePortCircuit, cndot1dStpBridgeHelloTime=cndot1dStpBridgeHelloTime, cndot1dBaseNumPorts=cndot1dBaseNumPorts, cndot1dBridge=cndot1dBridge, cndot1dBaseBridgeAddress=cndot1dBaseBridgeAddress, BridgeId=BridgeId, cndot1dBasePortIfIndex=cndot1dBasePortIfIndex, cndot1dTpSrFrameForward=cndot1dTpSrFrameForward, cndot1dStpHelloTime=cndot1dStpHelloTime, cndot1dStpPortEnable=cndot1dStpPortEnable, cndot1dStpPortDesignatedCost=cndot1dStpPortDesignatedCost, cndot1dStpProtocolSpecification=cndot1dStpProtocolSpecification, cndot1dBase=cndot1dBase, MacAddress=MacAddress, cndot1dStpPortPriority=cndot1dStpPortPriority, cndot1dBasePort=cndot1dBasePort, cndot1dStpPortTable=cndot1dStpPortTable, cndot1dStpBridgeMaxAge=cndot1dStpBridgeMaxAge, cndot1dStpPortEntry=cndot1dStpPortEntry, cndot1dBaseType=cndot1dBaseType, cndot1dStpRootCost=cndot1dStpRootCost, cndot1dStpForwardDelay=cndot1dStpForwardDelay, cndot1dStpMaxAge=cndot1dStpMaxAge, cndot1dStpPortForwardTransitions=cndot1dStpPortForwardTransitions, cndot1dStpPortDesignatedPort=cndot1dStpPortDesignatedPort, cndot1dStpDesignatedRoot=cndot1dStpDesignatedRoot, cndot1dSr=cndot1dSr, cndot1dStpHoldTime=cndot1dStpHoldTime, cndot1dStp=cndot1dStp, cndot1dStpRootPort=cndot1dStpRootPort, cndot1dStpPriority=cndot1dStpPriority, cndot1dBasePortEntry=cndot1dBasePortEntry, cndot1dBasePortTable=cndot1dBasePortTable, cndot1dStpTimeSinceTopologyChange=cndot1dStpTimeSinceTopologyChange, cndot1dStpBridgeForwardDelay=cndot1dStpBridgeForwardDelay, cndot1dStpPortDesignatedBridge=cndot1dStpPortDesignatedBridge, cndot1dStpPortState=cndot1dStpPortState, Timeout=Timeout, cndot1dStpTopChanges=cndot1dStpTopChanges, cndot1dStpPort=cndot1dStpPort, cndot1dTp=cndot1dTp, cndot1dStpPortDesignatedRoot=cndot1dStpPortDesignatedRoot, cndot1dStpPortPathCost=cndot1dStpPortPathCost)
