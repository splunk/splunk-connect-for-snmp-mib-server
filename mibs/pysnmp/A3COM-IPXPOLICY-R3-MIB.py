#
# PySNMP MIB module A3Com-IPXpolicy-r3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-IPXPOLICY-R3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:53:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
MacAddress, = mibBuilder.importSymbols("RFC1286-MIB", "MacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Bits, NotificationType, ObjectIdentity, ModuleIdentity, Integer32, TimeTicks, Unsigned32, Counter64, Counter32, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Bits", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Integer32", "TimeTicks", "Unsigned32", "Counter64", "Counter32", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
a3ComIPXpol = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 11))
a3ipxPolNbr = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 11, 5))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class IPXNET(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

a3ipxPolControlTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 1), )
if mibBuilder.loadTexts: a3ipxPolControlTable.setStatus('mandatory')
a3ipxPolControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1), ).setIndexNames((0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPCPort"))
if mibBuilder.loadTexts: a3ipxPolControlEntry.setStatus('mandatory')
a3ipxPCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPCPort.setStatus('mandatory')
a3ipxPCRteAdvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCRteAdvCtl.setStatus('mandatory')
a3ipxPCRteAdvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCRteAdvType.setStatus('mandatory')
a3ipxPCRteRcvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCRteRcvCtl.setStatus('mandatory')
a3ipxPCRteRcvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCRteRcvType.setStatus('mandatory')
a3ipxPCSvcAdvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSvcAdvCtl.setStatus('mandatory')
a3ipxPCSvcAdvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSvcAdvType.setStatus('mandatory')
a3ipxPCSvcRcvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSvcRcvCtl.setStatus('mandatory')
a3ipxPCSvcRcvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSvcRcvType.setStatus('mandatory')
a3ipxPCNbrAdvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCNbrAdvCtl.setStatus('deprecated')
a3ipxPCNbrRcvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCNbrRcvCtl.setStatus('deprecated')
a3ipxPCNbrRcvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCNbrRcvType.setStatus('deprecated')
a3ipxPCPolicyOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("policyOverride", 1), ("noPolicyOverride", 2))).clone('noPolicyOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCPolicyOverride.setStatus('deprecated')
a3ipxPCSvrRplyCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bestSvrReply", 1), ("noBestSvrReply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSvrRplyCtl.setStatus('mandatory')
a3ipxPCRipPolOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("policyOverride", 1), ("noPolicyOverride", 2))).clone('noPolicyOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCRipPolOverride.setStatus('mandatory')
a3ipxPCSapPolOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("policyOverride", 1), ("noPolicyOverride", 2))).clone('noPolicyOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSapPolOverride.setStatus('mandatory')
a3ipxPolRteTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 2), )
if mibBuilder.loadTexts: a3ipxPolRteTable.setStatus('mandatory')
a3ipxPolRteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1), ).setIndexNames((0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolRtePort"), (0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolRteNet1"), (0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolRteNet2"))
if mibBuilder.loadTexts: a3ipxPolRteEntry.setStatus('mandatory')
a3ipxPolRtePort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRtePort.setStatus('mandatory')
a3ipxPolRteType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertise", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRteType.setStatus('mandatory')
a3ipxPolRteNet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1, 3), IPXNET()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRteNet1.setStatus('mandatory')
a3ipxPolRteNet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1, 4), IPXNET()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRteNet2.setStatus('mandatory')
a3ipxPolRteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRteStatus.setStatus('mandatory')
a3ipxPolSvcTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 3), )
if mibBuilder.loadTexts: a3ipxPolSvcTable.setStatus('mandatory')
a3ipxPolSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1), ).setIndexNames((0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolSvcPort"), (0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolSvcSvrName"), (0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolSvcType"))
if mibBuilder.loadTexts: a3ipxPolSvcEntry.setStatus('mandatory')
a3ipxPolSvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSvcPort.setStatus('mandatory')
a3ipxPolSvcEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertise", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSvcEntryType.setStatus('mandatory')
a3ipxPolSvcSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSvcSvrName.setStatus('mandatory')
a3ipxPolSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSvcType.setStatus('mandatory')
a3ipxPolSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSvcStatus.setStatus('mandatory')
a3ipxPolNbrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 4), )
if mibBuilder.loadTexts: a3ipxPolNbrTable.setStatus('deprecated')
a3ipxPolNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1), ).setIndexNames((0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolNbrPort"), (0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolNbrNet"), (0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolNbrAddress"))
if mibBuilder.loadTexts: a3ipxPolNbrEntry.setStatus('deprecated')
a3ipxPolNbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolNbrPort.setStatus('deprecated')
a3ipxPolNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertise", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolNbrType.setStatus('deprecated')
a3ipxPolNbrNet = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1, 3), IPXNET()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolNbrNet.setStatus('deprecated')
a3ipxPolNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolNbrAddress.setStatus('deprecated')
a3ipxPolNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolNbrStatus.setStatus('deprecated')
a3ipxPolRipNbrCtlTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1), )
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlTable.setStatus('mandatory')
a3ipxPolRipNbrCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1, 1), ).setIndexNames((0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolRipNbrCtlPort"))
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlEntry.setStatus('mandatory')
a3ipxPolRipNbrCtlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlPort.setStatus('mandatory')
a3ipxPolRipNbrCtlAdvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlAdvCtl.setStatus('mandatory')
a3ipxPolRipNbrCtlRcvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlRcvCtl.setStatus('mandatory')
a3ipxPolRipNbrCtlRcvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlRcvType.setStatus('mandatory')
a3ipxPolRipNbrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2), )
if mibBuilder.loadTexts: a3ipxPolRipNbrTable.setStatus('mandatory')
a3ipxPolRipNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1), ).setIndexNames((0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolRipNbrPort"), (0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolRipNbrNet"), (0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolRipNbrAddress"))
if mibBuilder.loadTexts: a3ipxPolRipNbrEntry.setStatus('mandatory')
a3ipxPolRipNbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRipNbrPort.setStatus('mandatory')
a3ipxPolRipNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertise", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRipNbrType.setStatus('mandatory')
a3ipxPolRipNbrNet = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1, 3), IPXNET()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRipNbrNet.setStatus('mandatory')
a3ipxPolRipNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRipNbrAddress.setStatus('mandatory')
a3ipxPolRipNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRipNbrStatus.setStatus('mandatory')
a3ipxPolSapNbrCtlTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3), )
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlTable.setStatus('mandatory')
a3ipxPolSapNbrCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3, 1), ).setIndexNames((0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolSapNbrCtlPort"))
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlEntry.setStatus('mandatory')
a3ipxPolSapNbrCtlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlPort.setStatus('mandatory')
a3ipxPolSapNbrCtlAdvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlAdvCtl.setStatus('mandatory')
a3ipxPolSapNbrCtlRcvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlRcvCtl.setStatus('mandatory')
a3ipxPolSapNbrCtlRcvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlRcvType.setStatus('mandatory')
a3ipxPolSapNbrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4), )
if mibBuilder.loadTexts: a3ipxPolSapNbrTable.setStatus('mandatory')
a3ipxPolSapNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1), ).setIndexNames((0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolSapNbrPort"), (0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolSapNbrNet"), (0, "A3Com-IPXpolicy-r3-MIB", "a3ipxPolSapNbrAddress"))
if mibBuilder.loadTexts: a3ipxPolSapNbrEntry.setStatus('mandatory')
a3ipxPolSapNbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSapNbrPort.setStatus('mandatory')
a3ipxPolSapNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertise", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSapNbrType.setStatus('mandatory')
a3ipxPolSapNbrNet = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1, 3), IPXNET()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSapNbrNet.setStatus('mandatory')
a3ipxPolSapNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSapNbrAddress.setStatus('mandatory')
a3ipxPolSapNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSapNbrStatus.setStatus('mandatory')
mibBuilder.exportSymbols("A3Com-IPXpolicy-r3-MIB", a3ipxPCSapPolOverride=a3ipxPCSapPolOverride, a3ipxPolRipNbrEntry=a3ipxPolRipNbrEntry, a3ipxPolSapNbrEntry=a3ipxPolSapNbrEntry, a3ipxPolSapNbrAddress=a3ipxPolSapNbrAddress, a3ipxPolSvcEntry=a3ipxPolSvcEntry, a3ipxPCRteRcvType=a3ipxPCRteRcvType, a3ipxPolSapNbrCtlTable=a3ipxPolSapNbrCtlTable, a3ipxPCNbrAdvCtl=a3ipxPCNbrAdvCtl, a3ipxPCRipPolOverride=a3ipxPCRipPolOverride, a3ipxPolRipNbrCtlEntry=a3ipxPolRipNbrCtlEntry, a3ipxPolRipNbrNet=a3ipxPolRipNbrNet, a3ipxPolNbrStatus=a3ipxPolNbrStatus, a3ipxPCSvcAdvType=a3ipxPCSvcAdvType, a3ipxPolRipNbrPort=a3ipxPolRipNbrPort, IPXNET=IPXNET, a3ipxPolRteNet2=a3ipxPolRteNet2, a3ipxPCSvrRplyCtl=a3ipxPCSvrRplyCtl, a3ipxPolNbrAddress=a3ipxPolNbrAddress, a3ipxPolSapNbrStatus=a3ipxPolSapNbrStatus, a3ipxPolRipNbrCtlRcvCtl=a3ipxPolRipNbrCtlRcvCtl, a3ipxPCPort=a3ipxPCPort, a3ipxPCNbrRcvCtl=a3ipxPCNbrRcvCtl, a3ipxPolSvcTable=a3ipxPolSvcTable, a3ipxPolRipNbrCtlAdvCtl=a3ipxPolRipNbrCtlAdvCtl, RowStatus=RowStatus, a3ipxPolRtePort=a3ipxPolRtePort, a3ipxPolSapNbrCtlAdvCtl=a3ipxPolSapNbrCtlAdvCtl, a3ipxPolNbrType=a3ipxPolNbrType, a3ipxPolSvcPort=a3ipxPolSvcPort, a3ipxPolNbrNet=a3ipxPolNbrNet, a3ipxPolRteTable=a3ipxPolRteTable, brouterMIB=brouterMIB, a3ipxPolRipNbrType=a3ipxPolRipNbrType, a3ipxPolControlTable=a3ipxPolControlTable, a3ipxPolSapNbrCtlRcvCtl=a3ipxPolSapNbrCtlRcvCtl, a3ipxPolSapNbrType=a3ipxPolSapNbrType, a3ipxPolNbrEntry=a3ipxPolNbrEntry, a3ipxPolSapNbrTable=a3ipxPolSapNbrTable, a3ipxPolRipNbrTable=a3ipxPolRipNbrTable, a3ipxPolRipNbrAddress=a3ipxPolRipNbrAddress, a3ipxPolSapNbrCtlEntry=a3ipxPolSapNbrCtlEntry, a3ipxPolSapNbrNet=a3ipxPolSapNbrNet, a3ipxPCSvcRcvType=a3ipxPCSvcRcvType, a3ipxPolRipNbrCtlTable=a3ipxPolRipNbrCtlTable, a3ipxPolControlEntry=a3ipxPolControlEntry, a3ipxPolSvcStatus=a3ipxPolSvcStatus, a3ipxPolSvcEntryType=a3ipxPolSvcEntryType, a3ipxPolRteType=a3ipxPolRteType, a3ipxPolSvcSvrName=a3ipxPolSvcSvrName, a3ipxPCSvcRcvCtl=a3ipxPCSvcRcvCtl, a3ipxPolSapNbrCtlRcvType=a3ipxPolSapNbrCtlRcvType, a3ComIPXpol=a3ComIPXpol, a3ipxPolRipNbrStatus=a3ipxPolRipNbrStatus, a3ipxPolRipNbrCtlRcvType=a3ipxPolRipNbrCtlRcvType, a3ipxPCSvcAdvCtl=a3ipxPCSvcAdvCtl, a3ipxPolNbrTable=a3ipxPolNbrTable, a3ipxPolRipNbrCtlPort=a3ipxPolRipNbrCtlPort, a3ipxPolNbr=a3ipxPolNbr, a3Com=a3Com, a3ipxPCRteRcvCtl=a3ipxPCRteRcvCtl, a3ipxPCRteAdvCtl=a3ipxPCRteAdvCtl, a3ipxPolSapNbrCtlPort=a3ipxPolSapNbrCtlPort, a3ipxPolSapNbrPort=a3ipxPolSapNbrPort, a3ipxPCNbrRcvType=a3ipxPCNbrRcvType, a3ipxPolSvcType=a3ipxPolSvcType, a3ipxPolRteNet1=a3ipxPolRteNet1, a3ipxPCRteAdvType=a3ipxPCRteAdvType, a3ipxPolRteEntry=a3ipxPolRteEntry, a3ipxPCPolicyOverride=a3ipxPCPolicyOverride, a3ipxPolNbrPort=a3ipxPolNbrPort, a3ipxPolRteStatus=a3ipxPolRteStatus)
