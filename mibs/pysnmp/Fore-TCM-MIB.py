#
# PySNMP MIB module Fore-TCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-TCM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:04:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
EntryStatus, atmSwitch, hardware = mibBuilder.importSymbols("Fore-Common-MIB", "EntryStatus", "atmSwitch", "hardware")
trapLogIndex, = mibBuilder.importSymbols("Fore-TrapLog-MIB", "trapLogIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, MibIdentifier, Integer32, Counter32, Gauge32, iso, IpAddress, Counter64, NotificationType, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Integer32", "Counter32", "Gauge32", "iso", "IpAddress", "Counter64", "NotificationType", "TimeTicks", "Bits")
TextualConvention, PhysAddress, DateAndTime, TimeInterval, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DateAndTime", "TimeInterval", "DisplayString")
ecpStationModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7))
if mibBuilder.loadTexts: ecpStationModule.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: ecpStationModule.setOrganization('FORE')
ecpHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1))
ecpSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2))
ecpSwMainGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1))
ecpIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2))
ecpEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3))
ecpAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1))
ecpSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 3))
ecpTrapConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 3, 1))
esiCard = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8))
esiHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 1))
esiSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2))
class EsiReferenceSource(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("fab1Pri", 1), ("fab1Sec", 2), ("fab2Pri", 3), ("fab2Sec", 4), ("fab3Pri", 5), ("fab3Sec", 6), ("fab4Pri", 7), ("fab4Sec", 8), ("bits1", 9), ("bits2", 10))

ecpBoardTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 1), )
if mibBuilder.loadTexts: ecpBoardTable.setStatus('current')
ecpBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 1, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"))
if mibBuilder.loadTexts: ecpBoardEntry.setStatus('current')
ecpBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slotX", 1), ("slotY", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpBoardIndex.setStatus('current')
ecpBoardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpBoardVersion.setStatus('current')
ecpBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpBoardSerialNumber.setStatus('current')
ecpBoardOtherEcpPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecpPresent", 1), ("ecpAbsent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpBoardOtherEcpPresent.setStatus('current')
ecpBoardEsiPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("esiPresent", 1), ("esiAbsent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpBoardEsiPresent.setStatus('current')
ecpSerialIfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 2), )
if mibBuilder.loadTexts: ecpSerialIfTable.setStatus('current')
ecpSerialIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 2, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"), (0, "Fore-TCM-MIB", "ecpSerialIfPortIndex"))
if mibBuilder.loadTexts: ecpSerialIfEntry.setStatus('current')
ecpSerialIfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSerialIfPortIndex.setStatus('current')
ecpSerialIfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("rs232", 2), ("rs422", 3), ("rs423", 4), ("v35", 5), ("x21", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSerialIfPortType.setStatus('current')
ecpSerialIfPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSerialIfPortSpeed.setStatus('current')
ecpSerialIfFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ctsRts", 2), ("dsrDtr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSerialIfFlowType.setStatus('current')
ecpSerialIfPortBits = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSerialIfPortBits.setStatus('current')
ecpSerialIfPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("oneAndHalf", 3), ("dynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSerialIfPortStopBits.setStatus('current')
ecpSerialIfPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSerialIfPortParity.setStatus('current')
ecpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 1), )
if mibBuilder.loadTexts: ecpAlarmTable.setStatus('current')
ecpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 1, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"), (0, "Fore-TCM-MIB", "ecpAlarmType"))
if mibBuilder.loadTexts: ecpAlarmEntry.setStatus('current')
ecpAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("powerSupplyInputFailed", 1), ("powerSupplyOutputFailed", 2), ("fanBankFailed", 3), ("tempSensorOverTemp", 4), ("linkFailed", 5), ("spansFailed", 6), ("powerSupplyOverCurrent", 7), ("powerSupply5VoltFailed", 8), ("faultyOrMissingStandbyTcm", 9), ("esiLossOfSyncSrc", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpAlarmType.setStatus('current')
ecpAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpAlarmStatus.setStatus('current')
ecpAlarmMinorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpAlarmMinorCategory.setStatus('current')
ecpAlarmMajorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpAlarmMajorCategory.setStatus('current')
ecpAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpAlarmReset.setStatus('current')
ecpAlarmMajorRelayState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpAlarmMajorRelayState.setStatus('current')
ecpAlarmMinorRelayState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpAlarmMinorRelayState.setStatus('current')
ecpAlarmRelayTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 4), )
if mibBuilder.loadTexts: ecpAlarmRelayTable.setStatus('current')
ecpAlarmRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 4, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"), (0, "Fore-TCM-MIB", "ecpAlarmRelayIndex"))
if mibBuilder.loadTexts: ecpAlarmRelayEntry.setStatus('current')
ecpAlarmRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpAlarmRelayIndex.setStatus('current')
ecpAlarmRelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ecpUnusedRelay", 1), ("ecpMajorAlarmRelay", 2), ("ecpMinorAlarmRelay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpAlarmRelayFunction.setStatus('current')
ecpAlarmRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 1, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpAlarmRelayState.setStatus('current')
ecpSwMainTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1), )
if mibBuilder.loadTexts: ecpSwMainTable.setStatus('current')
ecpSwMainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"))
if mibBuilder.loadTexts: ecpSwMainEntry.setStatus('current')
ecpName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpName.setStatus('current')
ecpHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpHardwareVersion.setStatus('current')
ecpSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSoftwareVersion.setStatus('current')
ecpSoftwareVersionText = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSoftwareVersionText.setStatus('current')
ecpType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unrecognized", 1), ("cec-plus", 2), ("cec-plus-t", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpType.setStatus('current')
ecpOperatingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ecpUnknown", 1), ("ecpStandby", 2), ("ecpActive", 3), ("ecpOffline", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpOperatingStatus.setStatus('current')
ecpProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpProtocolType.setStatus('current')
ecpTimeZone = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpTimeZone.setStatus('current')
ecpGMTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 9), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpGMTime.setStatus('current')
ecpUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpUptime.setStatus('current')
ecpModeChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpModeChangeTime.setStatus('current')
ecpOtherEcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecpNormal", 1), ("ecpUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpOtherEcpStatus.setStatus('current')
ecpExternalInput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecpInputOn", 1), ("ecpInputOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpExternalInput1.setStatus('current')
ecpExternalInput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecpInputOn", 1), ("ecpInputOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpExternalInput2.setStatus('current')
ecpExternalInput3 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecpInputOn", 1), ("ecpInputOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpExternalInput3.setStatus('current')
ecpExternalInput4 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecpInputOn", 1), ("ecpInputOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpExternalInput4.setStatus('current')
ecpExternalInput5 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecpInputOn", 1), ("ecpInputOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpExternalInput5.setStatus('current')
ecpNetIfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1), )
if mibBuilder.loadTexts: ecpNetIfTable.setStatus('current')
ecpNetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"), (0, "Fore-TCM-MIB", "ecpNetIfIndex"))
if mibBuilder.loadTexts: ecpNetIfEntry.setStatus('current')
ecpNetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfIndex.setStatus('current')
ecpNetIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfDescr.setStatus('current')
ecpNetIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfPhysAddress.setStatus('current')
ecpNetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpNetIfAdminStatus.setStatus('current')
ecpNetIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfOperStatus.setStatus('current')
ecpNetIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfLastChange.setStatus('current')
ecpNetIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpNetIfIpAddr.setStatus('current')
ecpNetIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpNetIfIpMask.setStatus('current')
ecpNetIfIpBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpNetIfIpBcastAddr.setStatus('current')
ecpNetIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2), )
if mibBuilder.loadTexts: ecpNetIfStatsTable.setStatus('current')
ecpNetIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"), (0, "Fore-TCM-MIB", "ecpNetIfIndex"))
if mibBuilder.loadTexts: ecpNetIfStatsEntry.setStatus('current')
ecpNetIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfInOctets.setStatus('current')
ecpNetIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfInUcastPkts.setStatus('current')
ecpNetIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfInNUcastPkts.setStatus('current')
ecpNetIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfInDiscards.setStatus('current')
ecpNetIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfInErrors.setStatus('current')
ecpNetIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfInUnknownProtos.setStatus('current')
ecpNetIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfOutOctets.setStatus('current')
ecpNetIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfOutUcastPkts.setStatus('current')
ecpNetIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfOutNUcastPkts.setStatus('current')
ecpNetIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfOutDiscards.setStatus('current')
ecpNetIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfOutErrors.setStatus('current')
ecpNetIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpNetIfOutQLen.setStatus('current')
ecpIpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3), )
if mibBuilder.loadTexts: ecpIpStatsTable.setStatus('current')
ecpIpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"))
if mibBuilder.loadTexts: ecpIpStatsEntry.setStatus('current')
ecpIpInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpInReceives.setStatus('current')
ecpIpInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpInHdrErrors.setStatus('current')
ecpIpInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpInAddrErrors.setStatus('current')
ecpIpForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpForwDatagrams.setStatus('current')
ecpIpInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpInUnknownProtos.setStatus('current')
ecpIpInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpInDiscards.setStatus('current')
ecpIpInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpInDelivers.setStatus('current')
ecpIpOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpOutRequests.setStatus('current')
ecpIpOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpOutDiscards.setStatus('current')
ecpIpOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpOutNoRoutes.setStatus('current')
ecpIpReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpReasmReqds.setStatus('current')
ecpIpReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpReasmOKs.setStatus('current')
ecpIpReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpReasmFails.setStatus('current')
ecpIpFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpFragOKs.setStatus('current')
ecpIpFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpFragFails.setStatus('current')
ecpIpFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpFragCreates.setStatus('current')
ecpIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 4), )
if mibBuilder.loadTexts: ecpIpRouteTable.setStatus('current')
ecpIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 4, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"), (0, "Fore-TCM-MIB", "ecpIpRouteDest"))
if mibBuilder.loadTexts: ecpIpRouteEntry.setStatus('current')
ecpIpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIpRouteDest.setStatus('current')
ecpIpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpIpRouteIfIndex.setStatus('current')
ecpIpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpIpRouteNextHop.setStatus('current')
ecpIpRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpIpRouteMetric1.setStatus('current')
ecpIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpIpRouteType.setStatus('current')
ecpIpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpIpRouteMask.setStatus('current')
ecpIcmpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5), )
if mibBuilder.loadTexts: ecpIcmpStatsTable.setStatus('current')
ecpIcmpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"))
if mibBuilder.loadTexts: ecpIcmpStatsEntry.setStatus('current')
ecpIcmpInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInMsgs.setStatus('current')
ecpIcmpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInErrors.setStatus('current')
ecpIcmpInDestUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInDestUnreach.setStatus('current')
ecpIcmpInTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInTimeExcds.setStatus('current')
ecpIcmpInParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInParmProbs.setStatus('current')
ecpIcmpInSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInSrcQuenchs.setStatus('current')
ecpIcmpInRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInRedirects.setStatus('current')
ecpIcmpInEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInEchos.setStatus('current')
ecpIcmpInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInEchoReps.setStatus('current')
ecpIcmpInTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInTimestamps.setStatus('current')
ecpIcmpInTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInTimestampReps.setStatus('current')
ecpIcmpInaddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInaddrMasks.setStatus('current')
ecpIcmpInAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpInAddrMaskReps.setStatus('current')
ecpIcmpOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutMsgs.setStatus('current')
ecpIcmpOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutErrors.setStatus('current')
ecpIcmpOutDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutDestUnreachs.setStatus('current')
ecpIcmpOutTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutTimeExcds.setStatus('current')
ecpIcmpOutParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutParmProbs.setStatus('current')
ecpIcmpOutSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutSrcQuenchs.setStatus('current')
ecpIcmpOutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutRedirects.setStatus('current')
ecpIcmpOutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutEchos.setStatus('current')
ecpIcmpOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutEchoReps.setStatus('current')
ecpIcmpOutTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutTimestamps.setStatus('current')
ecpIcmpOutTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutTimestampReps.setStatus('current')
ecpIcmpOutAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutAddrMasks.setStatus('current')
ecpIcmpOutAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpIcmpOutAddrMaskReps.setStatus('current')
ecpTcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 6), )
if mibBuilder.loadTexts: ecpTcpStatsTable.setStatus('current')
ecpTcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 6, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"))
if mibBuilder.loadTexts: ecpTcpStatsEntry.setStatus('current')
ecpTcpActiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpTcpActiveOpens.setStatus('current')
ecpTcpPassiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpTcpPassiveOpens.setStatus('current')
ecpTcpAttemptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpTcpAttemptFails.setStatus('current')
ecpTcpEstabResets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpTcpEstabResets.setStatus('current')
ecpTcpCurrEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpTcpCurrEstab.setStatus('current')
ecpTcpInSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpTcpInSegs.setStatus('current')
ecpTcpOutSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpTcpOutSegs.setStatus('current')
ecpTcpRetransSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpTcpRetransSegs.setStatus('current')
ecpUdpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 7), )
if mibBuilder.loadTexts: ecpUdpStatsTable.setStatus('current')
ecpUdpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 7, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"))
if mibBuilder.loadTexts: ecpUdpStatsEntry.setStatus('current')
ecpUdpInDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpUdpInDatagrams.setStatus('current')
ecpUdpNoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpUdpNoPorts.setStatus('current')
ecpUdpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpUdpInErrors.setStatus('current')
ecpUdpOutDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpUdpOutDatagrams.setStatus('current')
ecpIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 8), )
if mibBuilder.loadTexts: ecpIpConfigTable.setStatus('current')
ecpIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 8, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"))
if mibBuilder.loadTexts: ecpIpConfigEntry.setStatus('current')
ecpIpForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("not-forwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpIpForwarding.setStatus('current')
ecpTrapNumberOfDest = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpTrapNumberOfDest.setStatus('current')
ecpTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 3, 1, 2), )
if mibBuilder.loadTexts: ecpTrapDestTable.setStatus('current')
ecpTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 3, 1, 2, 1), ).setIndexNames((0, "Fore-TCM-MIB", "ecpBoardIndex"), (0, "Fore-TCM-MIB", "ecpTrapDest"))
if mibBuilder.loadTexts: ecpTrapDestEntry.setStatus('current')
ecpTrapDest = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 3, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpTrapDest.setStatus('current')
ecpTrapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 7, 2, 3, 1, 2, 1, 2), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpTrapDestStatus.setStatus('current')
esiCardHwTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 1, 1), )
if mibBuilder.loadTexts: esiCardHwTable.setStatus('current')
esiCardHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 1, 1, 1), ).setIndexNames((0, "Fore-TCM-MIB", "esiCardIndex"))
if mibBuilder.loadTexts: esiCardHwEntry.setStatus('current')
esiCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slotX", 1), ("slotY", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esiCardIndex.setStatus('current')
esiHwCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("esiDs1TypeA", 1), ("esiDs1TypeB", 2), ("esiE1TypeA", 3), ("esiE1TypeB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esiHwCardType.setStatus('current')
esiHwCardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esiHwCardVersion.setStatus('current')
esiHwPllStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pllFreeRun", 1), ("pllLocked", 2), ("pllAcquire", 3), ("pllHoldover", 4), ("pllRefQualFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esiHwPllStatus.setStatus('current')
esiCardSwTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1), )
if mibBuilder.loadTexts: esiCardSwTable.setStatus('current')
esiCardSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1), ).setIndexNames((0, "Fore-TCM-MIB", "esiCardIndex"))
if mibBuilder.loadTexts: esiCardSwEntry.setStatus('current')
esiOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esiOperationStatus.setStatus('current')
esiCurrentTimingRef = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("refFreeRun", 1), ("refIsPrimary", 2), ("refIsSecondary", 3), ("refIsBits1", 5), ("refIsBits2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esiCurrentTimingRef.setStatus('current')
esiRequestedTimingRef = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("requestFreeRun", 1), ("requestPrimary", 2), ("requestSecondary", 3), ("requestAutomatic", 4), ("requestBits", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiRequestedTimingRef.setStatus('current')
esiPrimaryRefSource = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 4), EsiReferenceSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiPrimaryRefSource.setStatus('current')
esiSecondaryRefSource = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 5), EsiReferenceSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiSecondaryRefSource.setStatus('current')
esiCurrentFaultBits = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esiCurrentFaultBits.setStatus('current')
esiBitsFramingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("d4", 1), ("esf", 2), ("mfas", 3), ("mfascrc4", 4), ("fas", 5), ("fascrc4", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiBitsFramingFormat.setStatus('current')
esiBitsCodingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiBitsCodingFormat.setStatus('current')
esiBitsOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("esiDs1Level0-6", 1), ("esiDs1Level1-2", 2), ("esiDs1Level1-8", 3), ("esiDs1Level2-4", 4), ("esiDs1Level3-0", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiBitsOutputLevel.setStatus('current')
esiRevertiveSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiRevertiveSwitching.setStatus('current')
esiRevertiveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 11), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiRevertiveDelay.setStatus('current')
esiSwitchingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 1, 1, 12), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiSwitchingDelay.setStatus('current')
esiReferenceTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 2), )
if mibBuilder.loadTexts: esiReferenceTable.setStatus('current')
esiReferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 2, 1), ).setIndexNames((0, "Fore-TCM-MIB", "esiCardIndex"), (0, "Fore-TCM-MIB", "esiRefSource"))
if mibBuilder.loadTexts: esiReferenceEntry.setStatus('current')
esiRefSource = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 2, 1, 1), EsiReferenceSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esiRefSource.setStatus('current')
esiRefSourceText = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esiRefSourceText.setStatus('current')
esiRefSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esiRefSourceStatus.setStatus('current')
esiRefSourceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiRefSourceAdminStatus.setStatus('current')
esiRefSourceQualStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 8, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esiRefSourceQualStatus.setStatus('current')
ecpOperatingModeChange = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1050)).setObjects(("Fore-TCM-MIB", "ecpBoardIndex"), ("Fore-TCM-MIB", "ecpOperatingStatus"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: ecpOperatingModeChange.setStatus('current')
esiTimingSourceChange = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1051)).setObjects(("Fore-TCM-MIB", "esiCardIndex"), ("Fore-TCM-MIB", "esiCurrentTimingRef"), ("Fore-TCM-MIB", "esiRefSource"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: esiTimingSourceChange.setStatus('current')
esiTimingSourceFailed = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1052)).setObjects(("Fore-TCM-MIB", "esiCardIndex"), ("Fore-TCM-MIB", "esiCurrentTimingRef"), ("Fore-TCM-MIB", "esiRefSource"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: esiTimingSourceFailed.setStatus('current')
ecpStandbyFailed = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1076)).setObjects(("Fore-TCM-MIB", "ecpBoardIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: ecpStandbyFailed.setStatus('current')
mibBuilder.exportSymbols("Fore-TCM-MIB", ecpSerialIfPortStopBits=ecpSerialIfPortStopBits, ecpTcpEstabResets=ecpTcpEstabResets, esiHwCardType=esiHwCardType, ecpIcmpInAddrMaskReps=ecpIcmpInAddrMaskReps, ecpIcmpStatsTable=ecpIcmpStatsTable, ecpNetIfLastChange=ecpNetIfLastChange, ecpIpConfigTable=ecpIpConfigTable, ecpIpConfigEntry=ecpIpConfigEntry, esiCard=esiCard, ecpBoardOtherEcpPresent=ecpBoardOtherEcpPresent, ecpUptime=ecpUptime, ecpIpOutNoRoutes=ecpIpOutNoRoutes, ecpSnmp=ecpSnmp, ecpIcmpOutParmProbs=ecpIcmpOutParmProbs, ecpIcmpInErrors=ecpIcmpInErrors, ecpIcmpOutAddrMaskReps=ecpIcmpOutAddrMaskReps, ecpIpInUnknownProtos=ecpIpInUnknownProtos, ecpTcpStatsEntry=ecpTcpStatsEntry, ecpName=ecpName, ecpExternalInput1=ecpExternalInput1, ecpTcpRetransSegs=ecpTcpRetransSegs, ecpSerialIfPortType=ecpSerialIfPortType, ecpNetIfIpBcastAddr=ecpNetIfIpBcastAddr, esiPrimaryRefSource=esiPrimaryRefSource, ecpTcpOutSegs=ecpTcpOutSegs, ecpIpInReceives=ecpIpInReceives, ecpIpRouteMask=ecpIpRouteMask, ecpUdpNoPorts=ecpUdpNoPorts, ecpStandbyFailed=ecpStandbyFailed, ecpIpFragFails=ecpIpFragFails, ecpIcmpInEchoReps=ecpIcmpInEchoReps, ecpTcpInSegs=ecpTcpInSegs, ecpSoftware=ecpSoftware, ecpNetIfOperStatus=ecpNetIfOperStatus, esiRefSource=esiRefSource, ecpIcmpOutAddrMasks=ecpIcmpOutAddrMasks, ecpAlarmMajorRelayState=ecpAlarmMajorRelayState, esiHardware=esiHardware, esiRefSourceText=esiRefSourceText, ecpIpOutDiscards=ecpIpOutDiscards, ecpIcmpOutDestUnreachs=ecpIcmpOutDestUnreachs, esiCurrentFaultBits=esiCurrentFaultBits, ecpUdpStatsEntry=ecpUdpStatsEntry, ecpTrapConfGroup=ecpTrapConfGroup, ecpSoftwareVersion=ecpSoftwareVersion, ecpModeChangeTime=ecpModeChangeTime, ecpNetIfOutErrors=ecpNetIfOutErrors, ecpTcpAttemptFails=ecpTcpAttemptFails, ecpBoardEsiPresent=ecpBoardEsiPresent, ecpIpInDelivers=ecpIpInDelivers, esiCardHwEntry=esiCardHwEntry, ecpAlarmRelayState=ecpAlarmRelayState, ecpSwMainEntry=ecpSwMainEntry, ecpAlarmRelayEntry=ecpAlarmRelayEntry, ecpIcmpOutTimeExcds=ecpIcmpOutTimeExcds, ecpAlarmReset=ecpAlarmReset, esiReferenceEntry=esiReferenceEntry, ecpIcmpOutTimestampReps=ecpIcmpOutTimestampReps, ecpIpReasmFails=ecpIpReasmFails, ecpIpFragCreates=ecpIpFragCreates, ecpAlarmRelayTable=ecpAlarmRelayTable, esiSoftware=esiSoftware, esiCurrentTimingRef=esiCurrentTimingRef, ecpIpStatsEntry=ecpIpStatsEntry, ecpIcmpOutSrcQuenchs=ecpIcmpOutSrcQuenchs, ecpTrapDest=ecpTrapDest, esiTimingSourceFailed=esiTimingSourceFailed, ecpTimeZone=ecpTimeZone, esiRefSourceAdminStatus=esiRefSourceAdminStatus, esiBitsCodingFormat=esiBitsCodingFormat, ecpTcpPassiveOpens=ecpTcpPassiveOpens, ecpNetIfInErrors=ecpNetIfInErrors, ecpSerialIfPortBits=ecpSerialIfPortBits, ecpBoardTable=ecpBoardTable, ecpSerialIfEntry=ecpSerialIfEntry, ecpNetIfIpMask=ecpNetIfIpMask, ecpNetIfInNUcastPkts=ecpNetIfInNUcastPkts, ecpOperatingStatus=ecpOperatingStatus, ecpHardwareVersion=ecpHardwareVersion, ecpSwMainGroup=ecpSwMainGroup, ecpNetIfOutDiscards=ecpNetIfOutDiscards, ecpNetIfInDiscards=ecpNetIfInDiscards, ecpType=ecpType, esiCardIndex=esiCardIndex, ecpNetIfInUnknownProtos=ecpNetIfInUnknownProtos, ecpTrapNumberOfDest=ecpTrapNumberOfDest, esiCardHwTable=esiCardHwTable, ecpSwMainTable=ecpSwMainTable, ecpBoardEntry=ecpBoardEntry, ecpIcmpInSrcQuenchs=ecpIcmpInSrcQuenchs, ecpNetIfOutQLen=ecpNetIfOutQLen, ecpAlarmStatus=ecpAlarmStatus, esiRevertiveDelay=esiRevertiveDelay, ecpOtherEcpStatus=ecpOtherEcpStatus, esiTimingSourceChange=esiTimingSourceChange, ecpIpRouteDest=ecpIpRouteDest, ecpSerialIfTable=ecpSerialIfTable, ecpNetIfAdminStatus=ecpNetIfAdminStatus, PYSNMP_MODULE_ID=ecpStationModule, esiCardSwEntry=esiCardSwEntry, ecpIpRouteTable=ecpIpRouteTable, ecpIcmpInaddrMasks=ecpIcmpInaddrMasks, ecpIpInDiscards=ecpIpInDiscards, esiSwitchingDelay=esiSwitchingDelay, esiReferenceTable=esiReferenceTable, ecpNetIfStatsEntry=ecpNetIfStatsEntry, ecpAlarmMinorRelayState=ecpAlarmMinorRelayState, ecpSerialIfPortParity=ecpSerialIfPortParity, ecpIpReasmReqds=ecpIpReasmReqds, ecpIcmpOutErrors=ecpIcmpOutErrors, ecpIcmpOutEchos=ecpIcmpOutEchos, ecpNetIfIpAddr=ecpNetIfIpAddr, ecpIcmpInRedirects=ecpIcmpInRedirects, ecpTrapDestStatus=ecpTrapDestStatus, ecpBoardVersion=ecpBoardVersion, ecpIpForwarding=ecpIpForwarding, ecpProtocolType=ecpProtocolType, esiRefSourceQualStatus=esiRefSourceQualStatus, ecpStationModule=ecpStationModule, ecpNetIfIndex=ecpNetIfIndex, ecpIpFragOKs=ecpIpFragOKs, esiRequestedTimingRef=esiRequestedTimingRef, ecpIpGroup=ecpIpGroup, EsiReferenceSource=EsiReferenceSource, ecpIpRouteNextHop=ecpIpRouteNextHop, ecpTcpActiveOpens=ecpTcpActiveOpens, ecpAlarmMajorCategory=ecpAlarmMajorCategory, ecpUdpOutDatagrams=ecpUdpOutDatagrams, ecpBoardSerialNumber=ecpBoardSerialNumber, ecpAlarmRelayIndex=ecpAlarmRelayIndex, ecpAlarmType=ecpAlarmType, ecpGMTime=ecpGMTime, ecpExternalInput4=ecpExternalInput4, ecpAlarmTable=ecpAlarmTable, ecpEnvironment=ecpEnvironment, ecpNetIfDescr=ecpNetIfDescr, ecpIpInAddrErrors=ecpIpInAddrErrors, ecpBoardIndex=ecpBoardIndex, ecpSerialIfPortIndex=ecpSerialIfPortIndex, ecpNetIfInOctets=ecpNetIfInOctets, ecpNetIfOutUcastPkts=ecpNetIfOutUcastPkts, ecpIpForwDatagrams=ecpIpForwDatagrams, ecpIcmpOutRedirects=ecpIcmpOutRedirects, ecpExternalInput2=ecpExternalInput2, esiBitsFramingFormat=esiBitsFramingFormat, esiRevertiveSwitching=esiRevertiveSwitching, ecpSerialIfPortSpeed=ecpSerialIfPortSpeed, ecpAlarmMinorCategory=ecpAlarmMinorCategory, ecpNetIfStatsTable=ecpNetIfStatsTable, ecpIpRouteEntry=ecpIpRouteEntry, ecpIcmpInEchos=ecpIcmpInEchos, ecpAlarmEntry=ecpAlarmEntry, ecpNetIfTable=ecpNetIfTable, ecpIpRouteIfIndex=ecpIpRouteIfIndex, ecpTcpStatsTable=ecpTcpStatsTable, ecpIcmpStatsEntry=ecpIcmpStatsEntry, ecpIcmpInMsgs=ecpIcmpInMsgs, ecpIpStatsTable=ecpIpStatsTable, ecpIpRouteType=ecpIpRouteType, esiSecondaryRefSource=esiSecondaryRefSource, ecpNetIfOutOctets=ecpNetIfOutOctets, ecpSerialIfFlowType=ecpSerialIfFlowType, ecpIcmpOutTimestamps=ecpIcmpOutTimestamps, ecpIcmpOutMsgs=ecpIcmpOutMsgs, ecpSoftwareVersionText=ecpSoftwareVersionText, ecpAlarmRelayFunction=ecpAlarmRelayFunction, ecpNetIfEntry=ecpNetIfEntry, ecpNetIfInUcastPkts=ecpNetIfInUcastPkts, esiOperationStatus=esiOperationStatus, ecpOperatingModeChange=ecpOperatingModeChange, ecpExternalInput3=ecpExternalInput3, esiCardSwTable=esiCardSwTable, esiHwCardVersion=esiHwCardVersion, ecpIcmpInTimestamps=ecpIcmpInTimestamps, ecpUdpInErrors=ecpUdpInErrors, ecpExternalInput5=ecpExternalInput5, ecpTcpCurrEstab=ecpTcpCurrEstab, ecpIcmpInParmProbs=ecpIcmpInParmProbs, ecpIcmpOutEchoReps=ecpIcmpOutEchoReps, ecpTrapDestEntry=ecpTrapDestEntry, ecpAlarmGroup=ecpAlarmGroup, ecpIpReasmOKs=ecpIpReasmOKs, ecpIcmpInTimestampReps=ecpIcmpInTimestampReps, esiBitsOutputLevel=esiBitsOutputLevel, esiHwPllStatus=esiHwPllStatus, ecpNetIfOutNUcastPkts=ecpNetIfOutNUcastPkts, ecpIpInHdrErrors=ecpIpInHdrErrors, ecpIpRouteMetric1=ecpIpRouteMetric1, ecpIcmpInDestUnreach=ecpIcmpInDestUnreach, ecpTrapDestTable=ecpTrapDestTable, ecpIpOutRequests=ecpIpOutRequests, ecpUdpInDatagrams=ecpUdpInDatagrams, ecpUdpStatsTable=ecpUdpStatsTable, ecpNetIfPhysAddress=ecpNetIfPhysAddress, ecpHardware=ecpHardware, esiRefSourceStatus=esiRefSourceStatus, ecpIcmpInTimeExcds=ecpIcmpInTimeExcds)
