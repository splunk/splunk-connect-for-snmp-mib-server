#
# PySNMP MIB module AISYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AISYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Gauge32, TimeTicks, ObjectIdentity, Unsigned32, MibIdentifier, IpAddress, Counter64, enterprises, Integer32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "TimeTicks", "ObjectIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "Counter64", "enterprises", "Integer32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32")
TextualConvention, TruthValue, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DateAndTime", "DisplayString")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 8))
aiSystem.setRevisions(('2001-08-15 10:00', '2001-06-28 15:00', '2001-05-22 20:00', '1999-10-25 00:00', '1998-10-30 00:00',))
if mibBuilder.loadTexts: aiSystem.setLastUpdated('200108151000Z')
if mibBuilder.loadTexts: aiSystem.setOrganization('Applied Innovation Incorporated')
class AIIHwIntType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
    namedValues = NamedValues(("noHwIfType", 0), ("serialSyncAsync", 1), ("serialSync", 2), ("serialAsync", 3), ("discreteIn", 4), ("discreteOut", 5), ("ethernetPort10", 6), ("ethernetPort100", 7), ("ethernetPort10-100", 8), ("hubbedEthernetPort10", 9), ("hubbedEthernetPort100", 10), ("hubbedEthernetPort10-100", 11), ("modem56K", 12), ("hubbedFiber1310", 13), ("hubbedFiber1550", 14), ("temperatureProbe", 15), ("power", 16), ("fan", 17), ("ethernetPort1000", 18), ("fiber850", 19), ("fiber1310", 20), ("analogIn", 21), ("switchedEthernetPort10", 22), ("switchedEthernetPort100", 23), ("switchedEthernetPort10-100", 24), ("switchedFiber1310", 25), ("switchedFiber1550", 26), ("luxChannel10G", 27), ("switchedEthernetPort1000", 28), ("serialSyncAsyncnoDSR", 29), ("serialAsyncnoDSR", 30))

class AIIConnType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("noConnType", 0), ("propConnType", 1), ("db9", 2), ("db25", 3), ("rj11", 4), ("rj45", 5), ("coax", 6), ("aui", 7), ("sc", 8), ("vhdci", 9), ("scsi2", 10), ("copperGBIC", 11), ("gbic", 12), ("sfp", 13))

aiSystemSendsStatusTraps = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemSendsStatusTraps.setStatus('current')
aiSystemLastTrapSequenceNum = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemLastTrapSequenceNum.setStatus('current')
aiSystemLastTrapMsg = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemLastTrapMsg.setStatus('current')
aiSystemDisc = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 8, 4))
aiSystemDiscVersion = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemDiscVersion.setStatus('current')
aiSystemDiscLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 4, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemDiscLastChanged.setStatus('current')
aiSysDiscModuleTable = MibTable((1, 3, 6, 1, 4, 1, 539, 8, 4, 3), )
if mibBuilder.loadTexts: aiSysDiscModuleTable.setStatus('current')
aiSysModuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 8, 4, 3, 1), ).setIndexNames((1, "AISYSTEM-MIB", "aiSysMTIndex"))
if mibBuilder.loadTexts: aiSysModuleTableEntry.setStatus('current')
aiSysMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 3, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysMTIndex.setStatus('current')
aiSysMTProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysMTProductName.setStatus('current')
aiSysMTSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysMTSerialNumber.setStatus('current')
aiSysMTManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysMTManufDate.setStatus('current')
aiSysDiscStatumTable = MibTable((1, 3, 6, 1, 4, 1, 539, 8, 4, 4), )
if mibBuilder.loadTexts: aiSysDiscStatumTable.setStatus('current')
aiSysStatumTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1), ).setIndexNames((1, "AISYSTEM-MIB", "aiSysSTIndex"))
if mibBuilder.loadTexts: aiSysStatumTableEntry.setStatus('current')
aiSysSTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTIndex.setStatus('current')
aiSysSTLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTLabel.setStatus('current')
aiSysSTFaceplateModule = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTFaceplateModule.setStatus('current')
aiSysSTFaceplateOpening = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTFaceplateOpening.setStatus('current')
aiSysSTOpeningIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTOpeningIndex.setStatus('current')
aiSysSTHwIntType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 6), AIIHwIntType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTHwIntType.setStatus('current')
aiSysSTConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 7), AIIConnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTConnType.setStatus('current')
aiSysSTMonTabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTMonTabIndex.setStatus('current')
aiSystemManagerTable = MibTable((1, 3, 6, 1, 4, 1, 539, 8, 5), )
if mibBuilder.loadTexts: aiSystemManagerTable.setStatus('current')
aiSystemManagerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 8, 5, 1), ).setIndexNames((0, "AISYSTEM-MIB", "aisysManagerIndex"))
if mibBuilder.loadTexts: aiSystemManagerTableEntry.setStatus('current')
aisysManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 5, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisysManagerIndex.setStatus('current')
aisysManagerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aisysManagerAddress.setStatus('current')
aiSystemCmdReboot = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("boot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSystemCmdReboot.setStatus('current')
aiSystemStatusLastConfig = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemStatusLastConfig.setStatus('current')
mibBuilder.exportSymbols("AISYSTEM-MIB", aiSysSTFaceplateOpening=aiSysSTFaceplateOpening, aiSysStatumTableEntry=aiSysStatumTableEntry, aiSysMTIndex=aiSysMTIndex, aiSystemManagerTable=aiSystemManagerTable, aiSystemLastTrapSequenceNum=aiSystemLastTrapSequenceNum, aisysManagerIndex=aisysManagerIndex, aiSysMTManufDate=aiSysMTManufDate, aiSystemDiscVersion=aiSystemDiscVersion, aiSysSTLabel=aiSysSTLabel, aiSysMTSerialNumber=aiSysMTSerialNumber, PositiveInteger=PositiveInteger, aiSystemSendsStatusTraps=aiSystemSendsStatusTraps, aiSysMTProductName=aiSysMTProductName, aiSystemLastTrapMsg=aiSystemLastTrapMsg, aiSysSTConnType=aiSysSTConnType, aiSysSTOpeningIndex=aiSysSTOpeningIndex, AIIHwIntType=AIIHwIntType, aii=aii, aiSystemManagerTableEntry=aiSystemManagerTableEntry, aiSystemCmdReboot=aiSystemCmdReboot, aisysManagerAddress=aisysManagerAddress, aiSysDiscStatumTable=aiSysDiscStatumTable, aiSystemDisc=aiSystemDisc, aiSystem=aiSystem, aiSysSTMonTabIndex=aiSysSTMonTabIndex, PYSNMP_MODULE_ID=aiSystem, aiSysModuleTableEntry=aiSysModuleTableEntry, aiSystemStatusLastConfig=aiSystemStatusLastConfig, aiSysSTIndex=aiSysSTIndex, aiSysSTFaceplateModule=aiSysSTFaceplateModule, aiSystemDiscLastChanged=aiSystemDiscLastChanged, aiSysSTHwIntType=aiSysSTHwIntType, AIIConnType=AIIConnType, aiSysDiscModuleTable=aiSysDiscModuleTable)
