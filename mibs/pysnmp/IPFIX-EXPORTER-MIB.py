#
# PySNMP MIB module IPFIX-EXPORTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPFIX-EXPORTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:44:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAutonomousSystemNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAutonomousSystemNumber", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Counter32, Counter64, Bits, TimeTicks, NotificationType, MibIdentifier, iso, ObjectIdentity, Gauge32, mib_2, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Counter64", "Bits", "TimeTicks", "NotificationType", "MibIdentifier", "iso", "ObjectIdentity", "Gauge32", "mib-2", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TruthValue, TextualConvention, DisplayString, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "DateAndTime", "RowStatus")
ipfixMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 999))
ipfixMIB.setRevisions(('2006-10-23 12:00',))
if mibBuilder.loadTexts: ipfixMIB.setLastUpdated('200610231200Z')
if mibBuilder.loadTexts: ipfixMIB.setOrganization('IETF IP Flow Information Export')
class PsampMethodAvailability(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("available", 1), ("notAvailable", 2))

ipfixExporter = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1))
ipfixCollector = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 2))
ipfixPsampExtension = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 3))
ipfixConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 4))
ipfixExporterObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1))
ipfixReporting = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 1))
ipfixCollectorTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 1), )
if mibBuilder.loadTexts: ipfixCollectorTable.setStatus('current')
ipfixCollectorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 1, 1), ).setIndexNames((0, "IPFIX-EXPORTER-MIB", "ipfixCollectorIndex"))
if mibBuilder.loadTexts: ipfixCollectorEntry.setStatus('current')
ipfixCollectorIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ipfixCollectorIndex.setStatus('current')
ipfixCollectorDstIpAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipfixCollectorDstIpAddressType.setStatus('current')
ipfixCollectorDstIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipfixCollectorDstIpAddress.setStatus('current')
ipfixCollectorDstProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(132)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipfixCollectorDstProtocol.setStatus('current')
ipfixCollectorDstPort = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipfixCollectorDstPort.setStatus('current')
ipfixCollectorReportsSent = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfixCollectorReportsSent.setStatus('current')
ipfixCollectorGroupTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 2), )
if mibBuilder.loadTexts: ipfixCollectorGroupTable.setStatus('current')
ipfixCollectorGroupEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 2, 1), ).setIndexNames((0, "IPFIX-EXPORTER-MIB", "ipfixCollectorGroupIndex"), (0, "IPFIX-EXPORTER-MIB", "ipfixCollectorIndex"))
if mibBuilder.loadTexts: ipfixCollectorGroupEntry.setStatus('current')
ipfixCollectorGroupIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ipfixCollectorGroupIndex.setStatus('current')
ipfixTemplateTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 3), )
if mibBuilder.loadTexts: ipfixTemplateTable.setStatus('current')
ipfixTemplateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 3, 1), ).setIndexNames((0, "IPFIX-EXPORTER-MIB", "ipfixObservationDomainId"), (0, "IPFIX-EXPORTER-MIB", "ipfixTemplateId"), (0, "IPFIX-EXPORTER-MIB", "ipfixTemplateIndex"))
if mibBuilder.loadTexts: ipfixTemplateEntry.setStatus('current')
ipfixTemplateId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ipfixTemplateId.setStatus('current')
ipfixTemplateIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ipfixTemplateIndex.setStatus('current')
ipfixTemplateFieldId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfixTemplateFieldId.setStatus('current')
ipfixTemplateFieldLength = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfixTemplateFieldLength.setStatus('current')
ipfixInstances = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 2))
ipfixObservationDomainTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 1), )
if mibBuilder.loadTexts: ipfixObservationDomainTable.setStatus('current')
ipfixObservationDomainEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 1, 1), ).setIndexNames((0, "IPFIX-EXPORTER-MIB", "ipfixObservationDomainId"))
if mibBuilder.loadTexts: ipfixObservationDomainEntry.setStatus('current')
ipfixObservationDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ipfixObservationDomainId.setStatus('current')
ipfixInstanceObservationPoint = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipfixInstanceObservationPoint.setStatus('current')
ipfixInstanceStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 1, 1, 3), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipfixInstanceStartTime.setStatus('current')
ipfixInstanceStopTime = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 1, 1, 4), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipfixInstanceStopTime.setStatus('current')
ipfixInstanceTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 2), )
if mibBuilder.loadTexts: ipfixInstanceTable.setStatus('current')
ipfixInstanceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 2, 1), ).setIndexNames((0, "IPFIX-EXPORTER-MIB", "ipfixInstanceIndex"), (0, "IPFIX-EXPORTER-MIB", "ipfixObservationDomainId"))
if mibBuilder.loadTexts: ipfixInstanceEntry.setStatus('current')
ipfixInstanceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ipfixInstanceIndex.setStatus('current')
ipfixInstanceTemplateId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipfixInstanceTemplateId.setStatus('current')
ipfixInstanceCollectorGroupIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipfixInstanceCollectorGroupIndex.setStatus('current')
ipfixInstancePacketsObserved = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfixInstancePacketsObserved.setStatus('current')
ipfixInstancePacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfixInstancePacketsDropped.setStatus('current')
ipfixInstanceProcessId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfixInstanceProcessId.setStatus('current')
ipfixInstanceReportingProcessId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfixInstanceReportingProcessId.setStatus('current')
ipfixInstanceReportsSent = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfixInstanceReportsSent.setStatus('current')
ipfixMethodChainTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 4), )
if mibBuilder.loadTexts: ipfixMethodChainTable.setStatus('current')
ipfixMethodChainEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 4, 1), ).setIndexNames((0, "IPFIX-EXPORTER-MIB", "ipfixInstanceIndex"), (0, "IPFIX-EXPORTER-MIB", "ipfixMethodChainIndex"))
if mibBuilder.loadTexts: ipfixMethodChainEntry.setStatus('current')
ipfixMethodChainIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ipfixMethodChainIndex.setStatus('current')
ipfixMethodChainMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipfixMethodChainMethod.setStatus('current')
ipfixMethodChainPacketsObserved = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfixMethodChainPacketsObserved.setStatus('current')
ipfixMethodChainPacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfixMethodChainPacketsDropped.setStatus('current')
ipfixCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 4, 1))
ipfixGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 4, 2))
ipfixCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 999, 4, 1, 1)).setObjects(("IPFIX-EXPORTER-MIB", "ipfixGroupMetering"), ("IPFIX-EXPORTER-MIB", "ipfixGroupReporting"), ("IPFIX-EXPORTER-MIB", "ipfixGroupStatistics"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipfixCompliance = ipfixCompliance.setStatus('current')
ipfixGroupMetering = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 4, 2, 1)).setObjects(("IPFIX-EXPORTER-MIB", "ipfixTemplateFieldId"), ("IPFIX-EXPORTER-MIB", "ipfixTemplateFieldLength"), ("IPFIX-EXPORTER-MIB", "ipfixMethodChainMethod"), ("IPFIX-EXPORTER-MIB", "ipfixInstanceObservationPoint"), ("IPFIX-EXPORTER-MIB", "ipfixInstanceStartTime"), ("IPFIX-EXPORTER-MIB", "ipfixInstanceStopTime"), ("IPFIX-EXPORTER-MIB", "ipfixInstanceTemplateId"), ("IPFIX-EXPORTER-MIB", "ipfixInstanceCollectorGroupIndex"), ("IPFIX-EXPORTER-MIB", "ipfixInstanceProcessId"), ("IPFIX-EXPORTER-MIB", "ipfixInstanceReportingProcessId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipfixGroupMetering = ipfixGroupMetering.setStatus('current')
ipfixGroupReporting = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 4, 2, 2)).setObjects(("IPFIX-EXPORTER-MIB", "ipfixCollectorDstIpAddressType"), ("IPFIX-EXPORTER-MIB", "ipfixCollectorDstIpAddress"), ("IPFIX-EXPORTER-MIB", "ipfixCollectorDstProtocol"), ("IPFIX-EXPORTER-MIB", "ipfixCollectorDstPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipfixGroupReporting = ipfixGroupReporting.setStatus('current')
ipfixGroupStatistics = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 4, 2, 3)).setObjects(("IPFIX-EXPORTER-MIB", "ipfixCollectorReportsSent"), ("IPFIX-EXPORTER-MIB", "ipfixMethodChainPacketsObserved"), ("IPFIX-EXPORTER-MIB", "ipfixMethodChainPacketsDropped"), ("IPFIX-EXPORTER-MIB", "ipfixInstancePacketsObserved"), ("IPFIX-EXPORTER-MIB", "ipfixInstanceReportsSent"), ("IPFIX-EXPORTER-MIB", "ipfixInstancePacketsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipfixGroupStatistics = ipfixGroupStatistics.setStatus('current')
mibBuilder.exportSymbols("IPFIX-EXPORTER-MIB", ipfixCollectorGroupEntry=ipfixCollectorGroupEntry, ipfixMethodChainIndex=ipfixMethodChainIndex, ipfixMethodChainPacketsDropped=ipfixMethodChainPacketsDropped, ipfixCollectorDstIpAddressType=ipfixCollectorDstIpAddressType, ipfixTemplateFieldId=ipfixTemplateFieldId, ipfixObservationDomainEntry=ipfixObservationDomainEntry, ipfixCollectorDstIpAddress=ipfixCollectorDstIpAddress, ipfixGroupStatistics=ipfixGroupStatistics, ipfixTemplateTable=ipfixTemplateTable, ipfixMIB=ipfixMIB, ipfixInstancePacketsObserved=ipfixInstancePacketsObserved, ipfixTemplateEntry=ipfixTemplateEntry, ipfixCollector=ipfixCollector, ipfixInstanceObservationPoint=ipfixInstanceObservationPoint, ipfixCollectorTable=ipfixCollectorTable, ipfixGroupReporting=ipfixGroupReporting, ipfixInstanceIndex=ipfixInstanceIndex, ipfixTemplateId=ipfixTemplateId, ipfixCollectorEntry=ipfixCollectorEntry, ipfixMethodChainEntry=ipfixMethodChainEntry, ipfixCompliances=ipfixCompliances, ipfixTemplateFieldLength=ipfixTemplateFieldLength, ipfixCollectorGroupTable=ipfixCollectorGroupTable, ipfixGroupMetering=ipfixGroupMetering, ipfixCollectorIndex=ipfixCollectorIndex, PsampMethodAvailability=PsampMethodAvailability, ipfixInstanceTable=ipfixInstanceTable, ipfixPsampExtension=ipfixPsampExtension, ipfixReporting=ipfixReporting, ipfixInstanceStartTime=ipfixInstanceStartTime, ipfixExporterObjects=ipfixExporterObjects, ipfixCollectorGroupIndex=ipfixCollectorGroupIndex, ipfixInstanceReportingProcessId=ipfixInstanceReportingProcessId, ipfixObservationDomainTable=ipfixObservationDomainTable, ipfixCollectorDstProtocol=ipfixCollectorDstProtocol, ipfixTemplateIndex=ipfixTemplateIndex, ipfixInstancePacketsDropped=ipfixInstancePacketsDropped, ipfixGroups=ipfixGroups, ipfixCollectorReportsSent=ipfixCollectorReportsSent, ipfixConformance=ipfixConformance, ipfixExporter=ipfixExporter, PYSNMP_MODULE_ID=ipfixMIB, ipfixInstances=ipfixInstances, ipfixInstanceProcessId=ipfixInstanceProcessId, ipfixMethodChainTable=ipfixMethodChainTable, ipfixMethodChainPacketsObserved=ipfixMethodChainPacketsObserved, ipfixMethodChainMethod=ipfixMethodChainMethod, ipfixInstanceEntry=ipfixInstanceEntry, ipfixInstanceReportsSent=ipfixInstanceReportsSent, ipfixInstanceStopTime=ipfixInstanceStopTime, ipfixInstanceTemplateId=ipfixInstanceTemplateId, ipfixObservationDomainId=ipfixObservationDomainId, ipfixCompliance=ipfixCompliance, ipfixInstanceCollectorGroupIndex=ipfixInstanceCollectorGroupIndex, ipfixCollectorDstPort=ipfixCollectorDstPort)
