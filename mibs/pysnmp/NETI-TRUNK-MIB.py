#
# PySNMP MIB module NETI-TRUNK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETI-TRUNK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:10:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
netiGeneric, = mibBuilder.importSymbols("NETI-COMMON-MIB", "netiGeneric")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ModuleIdentity, ObjectIdentity, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, NotificationType, MibIdentifier, Integer32, Unsigned32, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "ObjectIdentity", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "NotificationType", "MibIdentifier", "Integer32", "Unsigned32", "Gauge32", "Counter32")
TimeStamp, DisplayString, RowPointer, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "RowPointer", "TruthValue", "TextualConvention")
netiTrunkMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2928, 2, 3))
netiTrunkMIB.setRevisions(('2014-03-14 08:00', '2013-08-29 16:00', '2013-01-24 15:00', '2009-08-26 15:00',))
if mibBuilder.loadTexts: netiTrunkMIB.setLastUpdated('201403140800Z')
if mibBuilder.loadTexts: netiTrunkMIB.setOrganization('Net Insight AB')
trunkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1))
dppipGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1))
class FecMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("fecNone", 1), ("fec1D", 2), ("fec2D", 3))

class DppipSupport(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

dppipNumber = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipNumber.setStatus('current')
dppipLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipLastChange.setStatus('current')
dppipTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3), )
if mibBuilder.loadTexts: dppipTable.setStatus('current')
dppipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1), ).setIndexNames((0, "NETI-TRUNK-MIB", "dppipIndex"))
if mibBuilder.loadTexts: dppipEntry.setStatus('current')
dppipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dppipIndex.setStatus('current')
dppipName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipName.setStatus('current')
dppipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipAddress.setStatus('current')
dppipNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipNetMask.setStatus('current')
dppipDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipDefaultGateway.setStatus('current')
dppipPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipPeerAddress.setStatus('current')
dppipTxSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipTxSlots.setStatus('current')
dppipTxUsedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipTxUsedCapacity.setStatus('current')
dppipRxSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipRxSlots.setStatus('current')
dppipRxUsedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipRxUsedCapacity.setStatus('current')
dppipDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipDelayVariation.setStatus('current')
dppipOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipOperStatus.setStatus('current')
dppipFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipFailure.setStatus('current')
dppipReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipReceivedFrames.setStatus('current')
dppipMissingFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMissingFrames.setStatus('current')
dppipDeliveredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipDeliveredFrames.setStatus('current')
dppipDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipDroppedFrames.setStatus('current')
dppipDuplicateFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipDuplicateFrames.setStatus('current')
dppipReorderedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipReorderedFrames.setStatus('current')
dppipLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipLostFrames.setStatus('current')
dppipRecoveredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipRecoveredFrames.setStatus('current')
dppipSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipSentFrames.setStatus('current')
dppipDelayVarPtp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipDelayVarPtp.setStatus('current')
dppipDelayVar999 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipDelayVar999.setStatus('current')
dppipAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipAdminStatus.setStatus('current')
dppipVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipVlan.setStatus('current')
dppipDelayVar01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipDelayVar01.setStatus('current')
dppipPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipPrio.setStatus('current')
dppipPhysIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 29), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPhysIf.setStatus('current')
dppipMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipMtu.setStatus('current')
dppipTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipTtl.setStatus('current')
dppipDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipDscp.setStatus('current')
dppipRxSlotsPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipRxSlotsPerFrame.setStatus('current')
dppipAvailTxSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipAvailTxSlots.setStatus('current')
dppipAvailRxSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipAvailRxSlots.setStatus('current')
dppipMinUsageRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipMinUsageRatio.setStatus('current')
dppipTxTranspSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipTxTranspSlots.setStatus('current')
dppipRxTranspSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipRxTranspSlots.setStatus('current')
dppipNomDTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipNomDTDelay.setStatus('current')
dppipTxFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 40), FecMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipTxFecMode.setStatus('current')
dppipTxFecRows = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 41), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipTxFecRows.setStatus('current')
dppipTxFecCols = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipTxFecCols.setStatus('current')
dppipRxFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 43), FecMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipRxFecMode.setStatus('current')
dppipRxFecRows = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipRxFecRows.setStatus('current')
dppipRxFecCols = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipRxFecCols.setStatus('current')
dppipCntControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipCntControl.setStatus('current')
dppipSuppressAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipSuppressAlarms.setStatus('current')
dppipSigFailFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipSigFailFilter.setStatus('current')
dppipDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipDegThreshold.setStatus('current')
dppipDegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipDegPeriod.setStatus('current')
dppipTolJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 3, 1, 51), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dppipTolJitter.setStatus('current')
dppipLimitsTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4), )
if mibBuilder.loadTexts: dppipLimitsTable.setStatus('current')
dppipLimitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1), ).setIndexNames((0, "NETI-TRUNK-MIB", "dppipIndex"))
if mibBuilder.loadTexts: dppipLimitsEntry.setStatus('current')
dppipMaxFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 1), FecMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMaxFecMode.setStatus('current')
dppipMaxFecRows = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMaxFecRows.setStatus('current')
dppipMinFecRows = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMinFecRows.setStatus('current')
dppipMaxFecCols = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMaxFecCols.setStatus('current')
dppipMinFecCols = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMinFecCols.setStatus('current')
dppipMaxFecElems = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMaxFecElems.setStatus('current')
dppipMaxTxSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMaxTxSlots.setStatus('current')
dppipMinTxSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMinTxSlots.setStatus('current')
dppipMaxTolJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMaxTolJitter.setStatus('current')
dppipMinTolJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipMinTolJitter.setStatus('current')
dppipDTSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 11), DppipSupport()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipDTSupport.setStatus('current')
dppipTTSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 4, 1, 12), DppipSupport()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipTTSupport.setStatus('current')
dppipPeerLimitsTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5), )
if mibBuilder.loadTexts: dppipPeerLimitsTable.setStatus('current')
dppipPeerLimitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1), ).setIndexNames((0, "NETI-TRUNK-MIB", "dppipIndex"))
if mibBuilder.loadTexts: dppipPeerLimitsEntry.setStatus('current')
dppipPeerMaxFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1, 1), FecMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPeerMaxFecMode.setStatus('current')
dppipPeerMaxFecRows = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPeerMaxFecRows.setStatus('current')
dppipPeerMinFecRows = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPeerMinFecRows.setStatus('current')
dppipPeerMaxFecCols = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPeerMaxFecCols.setStatus('current')
dppipPeerMinFecCols = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPeerMinFecCols.setStatus('current')
dppipPeerMaxFecElems = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPeerMaxFecElems.setStatus('current')
dppipPeerMaxRxSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPeerMaxRxSlots.setStatus('current')
dppipPeerMinRxSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPeerMinRxSlots.setStatus('current')
dppipPeerDTSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1, 9), DppipSupport()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPeerDTSupport.setStatus('current')
dppipPeerTTSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 3, 1, 1, 5, 1, 10), DppipSupport()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dppipPeerTTSupport.setStatus('current')
mibBuilder.exportSymbols("NETI-TRUNK-MIB", dppipDelayVar01=dppipDelayVar01, dppipDegPeriod=dppipDegPeriod, dppipTxUsedCapacity=dppipTxUsedCapacity, dppipTxFecRows=dppipTxFecRows, dppipLimitsEntry=dppipLimitsEntry, netiTrunkMIB=netiTrunkMIB, dppipPeerDTSupport=dppipPeerDTSupport, dppipPeerMaxFecRows=dppipPeerMaxFecRows, dppipDelayVarPtp=dppipDelayVarPtp, dppipPeerMaxFecElems=dppipPeerMaxFecElems, dppipPrio=dppipPrio, dppipLostFrames=dppipLostFrames, dppipMaxFecRows=dppipMaxFecRows, dppipPeerMinFecRows=dppipPeerMinFecRows, dppipDuplicateFrames=dppipDuplicateFrames, dppipEntry=dppipEntry, dppipPeerMinFecCols=dppipPeerMinFecCols, dppipName=dppipName, dppipMaxTxSlots=dppipMaxTxSlots, dppipDegThreshold=dppipDegThreshold, dppipDTSupport=dppipDTSupport, dppipPeerTTSupport=dppipPeerTTSupport, dppipVlan=dppipVlan, dppipCntControl=dppipCntControl, dppipMaxFecMode=dppipMaxFecMode, dppipPeerAddress=dppipPeerAddress, dppipFailure=dppipFailure, DppipSupport=DppipSupport, dppipMinFecCols=dppipMinFecCols, dppipDscp=dppipDscp, dppipRxFecCols=dppipRxFecCols, dppipPeerLimitsTable=dppipPeerLimitsTable, dppipRxTranspSlots=dppipRxTranspSlots, FecMode=FecMode, dppipNumber=dppipNumber, dppipPeerLimitsEntry=dppipPeerLimitsEntry, dppipIndex=dppipIndex, dppipDefaultGateway=dppipDefaultGateway, dppipRxSlotsPerFrame=dppipRxSlotsPerFrame, dppipRxUsedCapacity=dppipRxUsedCapacity, dppipAvailRxSlots=dppipAvailRxSlots, dppipReceivedFrames=dppipReceivedFrames, dppipPeerMaxFecMode=dppipPeerMaxFecMode, dppipRxFecMode=dppipRxFecMode, dppipMissingFrames=dppipMissingFrames, dppipDelayVariation=dppipDelayVariation, trunkObjects=trunkObjects, dppipMaxTolJitter=dppipMaxTolJitter, dppipRxSlots=dppipRxSlots, dppipPhysIf=dppipPhysIf, dppipMinTxSlots=dppipMinTxSlots, dppipTxFecCols=dppipTxFecCols, dppipTtl=dppipTtl, dppipMaxFecCols=dppipMaxFecCols, dppipNetMask=dppipNetMask, dppipTxTranspSlots=dppipTxTranspSlots, dppipMinTolJitter=dppipMinTolJitter, dppipSigFailFilter=dppipSigFailFilter, dppipPeerMaxRxSlots=dppipPeerMaxRxSlots, dppipPeerMinRxSlots=dppipPeerMinRxSlots, dppipTolJitter=dppipTolJitter, dppipLastChange=dppipLastChange, dppipTxSlots=dppipTxSlots, dppipAdminStatus=dppipAdminStatus, dppipAddress=dppipAddress, PYSNMP_MODULE_ID=netiTrunkMIB, dppipDeliveredFrames=dppipDeliveredFrames, dppipTTSupport=dppipTTSupport, dppipMtu=dppipMtu, dppipDroppedFrames=dppipDroppedFrames, dppipLimitsTable=dppipLimitsTable, dppipReorderedFrames=dppipReorderedFrames, dppipMinFecRows=dppipMinFecRows, dppipOperStatus=dppipOperStatus, dppipTable=dppipTable, dppipSentFrames=dppipSentFrames, dppipTxFecMode=dppipTxFecMode, dppipRecoveredFrames=dppipRecoveredFrames, dppipSuppressAlarms=dppipSuppressAlarms, dppipMinUsageRatio=dppipMinUsageRatio, dppipRxFecRows=dppipRxFecRows, dppipAvailTxSlots=dppipAvailTxSlots, dppipMaxFecElems=dppipMaxFecElems, dppipNomDTDelay=dppipNomDTDelay, dppipDelayVar999=dppipDelayVar999, dppipGroup=dppipGroup, dppipPeerMaxFecCols=dppipPeerMaxFecCols)
