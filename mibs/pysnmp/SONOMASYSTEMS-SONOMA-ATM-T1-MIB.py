#
# PySNMP MIB module SONOMASYSTEMS-SONOMA-ATM-T1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONOMASYSTEMS-SONOMA-ATM-T1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:01:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, MibIdentifier, NotificationType, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, Bits, Counter32, Unsigned32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "Bits", "Counter32", "Unsigned32", "ObjectIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sonomaATM, = mibBuilder.importSymbols("SONOMASYSTEMS-SONOMA-MIB", "sonomaATM")
sonomaT1ATMAdapterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5))
atmDs1ConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 1))
atmDs1StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2))
atmDs1ConfPhyTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 1, 1), )
if mibBuilder.loadTexts: atmDs1ConfPhyTable.setStatus('mandatory')
atmDs1ConfPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 1, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-T1-MIB", "atmDs1ConfPhysIndex"))
if mibBuilder.loadTexts: atmDs1ConfPhyEntry.setStatus('mandatory')
atmDs1ConfPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1ConfPhysIndex.setStatus('mandatory')
atmDs1ConfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("payload", 2), ("line", 3), ("local", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs1ConfLoopback.setStatus('mandatory')
atmDs1ConfTxClockSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("recovered", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs1ConfTxClockSelect.setStatus('mandatory')
atmDs1ConfFillerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs1ConfFillerCells.setStatus('mandatory')
atmDs1ConfLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("short-haul-0-133-FT", 1), ("short-haul-133-266-FT", 2), ("short-haul-266-399-FT", 3), ("short-haul-399-533-FT", 4), ("short-haul-533-655-FT", 5), ("long-haul-0-0-dB", 6), ("long-haul-7-5-dB", 7), ("long-haul-15-0-dB", 8), ("long-haul-22-5-dB", 9))).clone('long-haul-0-0-dB')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs1ConfLineBuildOut.setStatus('mandatory')
atmDs1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1), )
if mibBuilder.loadTexts: atmDs1StatsTable.setStatus('mandatory')
atmDs1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-T1-MIB", "atmDs1StatsPhysIndex"))
if mibBuilder.loadTexts: atmDs1StatsEntry.setStatus('mandatory')
atmDs1StatsPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsPhysIndex.setStatus('mandatory')
atmDs1StatsNoSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsNoSignals.setStatus('mandatory')
atmDs1StatsAISDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsAISDetects.setStatus('mandatory')
atmDs1StatsYelAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsYelAlarmCount.setStatus('mandatory')
atmDs1StatsLCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsLCVErrors.setStatus('mandatory')
atmDs1StatsPCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsPCVErrors.setStatus('mandatory')
atmDs1StatsMOSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsMOSErrors.setStatus('mandatory')
atmDs1StatsSyncLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsSyncLossCount.setStatus('mandatory')
atmDs1StatsHECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsHECErrors.setStatus('mandatory')
atmDs1StatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsSignalLoss.setStatus('mandatory')
atmDs1StatsAISDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsAISDetect.setStatus('mandatory')
atmDs1StatsYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsYellowAlarm.setStatus('mandatory')
atmDs1StatsSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsSyncLoss.setStatus('mandatory')
atmDs1StatsTxClockLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs1StatsTxClockLoss.setStatus('mandatory')
atmDs1StatsClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 5, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs1StatsClearCounters.setStatus('mandatory')
mibBuilder.exportSymbols("SONOMASYSTEMS-SONOMA-ATM-T1-MIB", atmDs1ConfLoopback=atmDs1ConfLoopback, atmDs1StatsGroup=atmDs1StatsGroup, sonomaT1ATMAdapterGroup=sonomaT1ATMAdapterGroup, atmDs1StatsTxClockLoss=atmDs1StatsTxClockLoss, atmDs1StatsSyncLossCount=atmDs1StatsSyncLossCount, atmDs1ConfTxClockSelect=atmDs1ConfTxClockSelect, atmDs1ConfPhyTable=atmDs1ConfPhyTable, atmDs1StatsEntry=atmDs1StatsEntry, atmDs1ConfFillerCells=atmDs1ConfFillerCells, atmDs1StatsLCVErrors=atmDs1StatsLCVErrors, atmDs1ConfLineBuildOut=atmDs1ConfLineBuildOut, atmDs1ConfPhyEntry=atmDs1ConfPhyEntry, atmDs1StatsSignalLoss=atmDs1StatsSignalLoss, atmDs1StatsHECErrors=atmDs1StatsHECErrors, atmDs1StatsYelAlarmCount=atmDs1StatsYelAlarmCount, atmDs1ConfPhysIndex=atmDs1ConfPhysIndex, atmDs1StatsNoSignals=atmDs1StatsNoSignals, atmDs1StatsPhysIndex=atmDs1StatsPhysIndex, atmDs1ConfGroup=atmDs1ConfGroup, atmDs1StatsAISDetects=atmDs1StatsAISDetects, atmDs1StatsClearCounters=atmDs1StatsClearCounters, atmDs1StatsMOSErrors=atmDs1StatsMOSErrors, atmDs1StatsAISDetect=atmDs1StatsAISDetect, atmDs1StatsSyncLoss=atmDs1StatsSyncLoss, atmDs1StatsYellowAlarm=atmDs1StatsYellowAlarm, atmDs1StatsPCVErrors=atmDs1StatsPCVErrors, atmDs1StatsTable=atmDs1StatsTable)
