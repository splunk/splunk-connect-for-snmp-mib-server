#
# PySNMP MIB module Wellfleet-VCCT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-VCCT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Integer32, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, iso, TimeTicks, Counter32, Gauge32, IpAddress, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "iso", "TimeTicks", "Counter32", "Gauge32", "IpAddress", "ModuleIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfVcctGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfVcctGroup")
wfVcct = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 1))
wfVcctDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVcctDelete.setStatus('mandatory')
wfVcctDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVcctDisable.setStatus('mandatory')
wfVcctState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVcctState.setStatus('mandatory')
wfVcctTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 2), )
if mibBuilder.loadTexts: wfVcctTable.setStatus('mandatory')
wfVcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 2, 1), ).setIndexNames((0, "Wellfleet-VCCT-MIB", "wfVcctEntrySlot"), (0, "Wellfleet-VCCT-MIB", "wfVcctEntryCct"))
if mibBuilder.loadTexts: wfVcctEntry.setStatus('mandatory')
wfVcctEntryDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVcctEntryDelete.setStatus('mandatory')
wfVcctEntryDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVcctEntryDisable.setStatus('mandatory')
wfVcctEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("coisapwait", 1), ("connectwait", 2), ("connectrspwait", 3), ("connectrcv", 4), ("disconnectrspwait", 5))).clone('coisapwait')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVcctEntryState.setStatus('mandatory')
wfVcctEntrySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVcctEntrySlot.setStatus('mandatory')
wfVcctEntryCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVcctEntryCct.setStatus('mandatory')
wfVcctEntryNumClients = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVcctEntryNumClients.setStatus('mandatory')
wfVcctEntryServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 24, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("dlcClientApi", 1))).clone('dlcClientApi')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVcctEntryServiceType.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-VCCT-MIB", wfVcct=wfVcct, wfVcctEntryDisable=wfVcctEntryDisable, wfVcctEntryState=wfVcctEntryState, wfVcctEntryNumClients=wfVcctEntryNumClients, wfVcctDelete=wfVcctDelete, wfVcctEntryCct=wfVcctEntryCct, wfVcctEntryServiceType=wfVcctEntryServiceType, wfVcctState=wfVcctState, wfVcctEntrySlot=wfVcctEntrySlot, wfVcctDisable=wfVcctDisable, wfVcctEntry=wfVcctEntry, wfVcctEntryDelete=wfVcctEntryDelete, wfVcctTable=wfVcctTable)
