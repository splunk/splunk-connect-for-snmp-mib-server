#
# PySNMP MIB module Wellfleet-FNTS-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-FNTS-ATM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, IpAddress, TimeTicks, Counter64, Bits, ModuleIdentity, Counter32, NotificationType, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "TimeTicks", "Counter64", "Bits", "ModuleIdentity", "Counter32", "NotificationType", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfFntsAtmGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfFntsAtmGroup")
wfFntsAtmTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1), )
if mibBuilder.loadTexts: wfFntsAtmTable.setStatus('mandatory')
wfFntsAtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1), ).setIndexNames((0, "Wellfleet-FNTS-ATM-MIB", "wfFntsAtmSlot"), (0, "Wellfleet-FNTS-ATM-MIB", "wfFntsAtmConnector"))
if mibBuilder.loadTexts: wfFntsAtmEntry.setStatus('mandatory')
wfFntsAtmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmDelete.setStatus('mandatory')
wfFntsAtmDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmDisable.setStatus('mandatory')
wfFntsAtmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmState.setStatus('mandatory')
wfFntsAtmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmSlot.setStatus('mandatory')
wfFntsAtmConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmConnector.setStatus('mandatory')
wfFntsAtmCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmCct.setStatus('mandatory')
wfFntsAtmMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4508))).clone(namedValues=NamedValues(("default", 4508))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmMtu.setStatus('mandatory')
wfFntsAtmMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmMadr.setStatus('mandatory')
wfFntsAtmIpAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmIpAdr.setStatus('mandatory')
wfFntsAtmAtmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9))).clone(namedValues=NamedValues(("notready", 1), ("init", 2), ("intloop", 3), ("extloop", 4), ("reset", 5), ("down", 6), ("up", 7), ("notpresent", 9))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmAtmState.setStatus('mandatory')
wfFntsAtmSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50))).clone(namedValues=NamedValues(("default", 50))).clone('default')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmSpeed.setStatus('mandatory')
wfFntsAtmRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxOctets.setStatus('mandatory')
wfFntsAtmRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxFrames.setStatus('mandatory')
wfFntsAtmTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxOctets.setStatus('mandatory')
wfFntsAtmTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxFrames.setStatus('mandatory')
wfFntsAtmLackRescErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmLackRescErrorRx.setStatus('mandatory')
wfFntsAtmInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmInErrors.setStatus('mandatory')
wfFntsAtmOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmOutErrors.setStatus('mandatory')
wfFntsAtmRxLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxLongFrames.setStatus('mandatory')
wfFntsAtmTxClipFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxClipFrames.setStatus('mandatory')
wfFntsAtmRxReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxReplenMisses.setStatus('mandatory')
wfFntsAtmRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxOverruns.setStatus('mandatory')
wfFntsAtmRxRingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxRingErrors.setStatus('mandatory')
wfFntsAtmTxRingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxRingErrors.setStatus('mandatory')
wfFntsAtmOpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmOpErrors.setStatus('mandatory')
wfFntsAtmRxProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxProcessings.setStatus('mandatory')
wfFntsAtmTxProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxProcessings.setStatus('mandatory')
wfFntsAtmTxCmplProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxCmplProcessings.setStatus('mandatory')
wfFntsAtmIntrProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmIntrProcessings.setStatus('mandatory')
wfFntsAtmSintProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmSintProcessings.setStatus('mandatory')
wfFntsAtmPintProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmPintProcessings.setStatus('mandatory')
wfFntsAtmRxRingLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(63))).clone(namedValues=NamedValues(("default", 63))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmRxRingLength.setStatus('mandatory')
wfFntsAtmTxRingLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(63))).clone(namedValues=NamedValues(("default", 63))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmTxRingLength.setStatus('mandatory')
wfFntsAtmCfgRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(127))).clone(namedValues=NamedValues(("default", 127))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmCfgRxQueueLength.setStatus('mandatory')
wfFntsAtmCfgTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(127))).clone(namedValues=NamedValues(("default", 127))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmCfgTxQueueLength.setStatus('mandatory')
wfFntsAtmLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmLineNumber.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-FNTS-ATM-MIB", wfFntsAtmTxRingErrors=wfFntsAtmTxRingErrors, wfFntsAtmOpErrors=wfFntsAtmOpErrors, wfFntsAtmIpAdr=wfFntsAtmIpAdr, wfFntsAtmInErrors=wfFntsAtmInErrors, wfFntsAtmSlot=wfFntsAtmSlot, wfFntsAtmTxClipFrames=wfFntsAtmTxClipFrames, wfFntsAtmTxCmplProcessings=wfFntsAtmTxCmplProcessings, wfFntsAtmDisable=wfFntsAtmDisable, wfFntsAtmCct=wfFntsAtmCct, wfFntsAtmRxFrames=wfFntsAtmRxFrames, wfFntsAtmRxOctets=wfFntsAtmRxOctets, wfFntsAtmSintProcessings=wfFntsAtmSintProcessings, wfFntsAtmRxLongFrames=wfFntsAtmRxLongFrames, wfFntsAtmLackRescErrorRx=wfFntsAtmLackRescErrorRx, wfFntsAtmRxRingLength=wfFntsAtmRxRingLength, wfFntsAtmRxProcessings=wfFntsAtmRxProcessings, wfFntsAtmMadr=wfFntsAtmMadr, wfFntsAtmRxReplenMisses=wfFntsAtmRxReplenMisses, wfFntsAtmMtu=wfFntsAtmMtu, wfFntsAtmSpeed=wfFntsAtmSpeed, wfFntsAtmTable=wfFntsAtmTable, wfFntsAtmCfgRxQueueLength=wfFntsAtmCfgRxQueueLength, wfFntsAtmRxRingErrors=wfFntsAtmRxRingErrors, wfFntsAtmLineNumber=wfFntsAtmLineNumber, wfFntsAtmPintProcessings=wfFntsAtmPintProcessings, wfFntsAtmTxProcessings=wfFntsAtmTxProcessings, wfFntsAtmTxFrames=wfFntsAtmTxFrames, wfFntsAtmDelete=wfFntsAtmDelete, wfFntsAtmAtmState=wfFntsAtmAtmState, wfFntsAtmRxOverruns=wfFntsAtmRxOverruns, wfFntsAtmTxRingLength=wfFntsAtmTxRingLength, wfFntsAtmOutErrors=wfFntsAtmOutErrors, wfFntsAtmState=wfFntsAtmState, wfFntsAtmConnector=wfFntsAtmConnector, wfFntsAtmIntrProcessings=wfFntsAtmIntrProcessings, wfFntsAtmCfgTxQueueLength=wfFntsAtmCfgTxQueueLength, wfFntsAtmEntry=wfFntsAtmEntry, wfFntsAtmTxOctets=wfFntsAtmTxOctets)
