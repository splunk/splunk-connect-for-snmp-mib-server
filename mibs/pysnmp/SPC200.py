#
# PySNMP MIB module SPC200 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SPC200
# Produced by pysmi-0.3.4 at Mon Apr 29 21:02:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
interfaces, ifIndex = mibBuilder.importSymbols("IF-MIB", "interfaces", "ifIndex")
ObjectGroup, NotificationGroup, AgentCapabilities, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "AgentCapabilities", "ModuleCompliance")
iso, Bits, Integer32, ObjectIdentity, IpAddress, Unsigned32, NotificationType, Gauge32, MibIdentifier, ModuleIdentity, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Integer32", "ObjectIdentity", "IpAddress", "Unsigned32", "NotificationType", "Gauge32", "MibIdentifier", "ModuleIdentity", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TextualConvention, RowStatus, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue", "MacAddress")
spidcom, = mibBuilder.importSymbols("SPIDCOM-MIB", "spidcom")
spc200MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 22764, 1))
spc200MIB.setRevisions(('2004-12-17 12:30', '2004-11-16 12:30', '2004-09-21 12:00', '2004-09-13 12:00', '2004-07-22 12:00', '2004-07-01 17:57',))
if mibBuilder.loadTexts: spc200MIB.setLastUpdated('200412171230Z')
if mibBuilder.loadTexts: spc200MIB.setOrganization('Organization')
class ModulationValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("bpsk", 2), ("qpsk", 3), ("qam16", 4), ("qam64", 5), ("qam256", 6))

class CarrierValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

class PilotValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

class BandValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 7)

class PlcChannelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rx", 1), ("rxLast", 2), ("tx", 3))

class EstimationMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("automatic", 1), ("manual", 2))

class GroupValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16)

class ResultValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("success", 1), ("fail", 2))

class AdaptValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8191)

class ChannelBandwidthValue(TextualConvention, Integer32):
    status = 'current'

class SoftwareIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 10)

class SoftwareActionResultValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("success", 0), ("on-going", 1), ("fileNotExist", 2), ("flashExhausted", 3), ("flashCorrupted", 4), ("notEnoughMemory", 5), ("invalidParameter", 6), ("genericError", 7))

class SoftwareActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("switch", 1), ("remove", 2))

class PlcModeType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("ad-hoc", 0), ("slave", 1), ("master", 2))

plc = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1))
stats = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1))
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "portStatsBandIndex"), (0, "SPC200", "portStatsGroupIndex"), (0, "SPC200", "portStatsCarrierIndex"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('current')
portStatsBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1, 1), BandValue())
if mibBuilder.loadTexts: portStatsBandIndex.setStatus('current')
portStatsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1, 2), GroupValue())
if mibBuilder.loadTexts: portStatsGroupIndex.setStatus('current')
portStatsCarrierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1, 3), CarrierValue())
if mibBuilder.loadTexts: portStatsCarrierIndex.setStatus('current')
portStatsSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsSignal.setStatus('current')
portStatsNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsNoise.setStatus('current')
portStats2Table = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3), )
if mibBuilder.loadTexts: portStats2Table.setStatus('current')
portStats2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "plcModBandIndex"))
if mibBuilder.loadTexts: portStats2Entry.setStatus('current')
portStats2Signal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats2Signal.setStatus('current')
portStats2Noise = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats2Noise.setStatus('current')
portStats2AvgBandAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats2AvgBandAtt.setStatus('current')
portStats2AvgBandSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats2AvgBandSNR.setStatus('current')
portStats3Table = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 4), )
if mibBuilder.loadTexts: portStats3Table.setStatus('current')
portStats3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 4, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"))
if mibBuilder.loadTexts: portStats3Entry.setStatus('current')
portStats3AvgAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats3AvgAtt.setStatus('current')
portStats3AvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats3AvgSNR.setStatus('current')
bootstats = ObjectIdentity((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 5))
if mibBuilder.loadTexts: bootstats.setStatus('current')
bootstatsBoot = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootstatsBoot.setStatus('current')
bootstatsManualReset = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootstatsManualReset.setStatus('current')
bootstatsFailureReset = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootstatsFailureReset.setStatus('current')
plcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2))
plcMode = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 1), PlcModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcMode.setStatus('current')
plcTopo = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2))
plcNodeConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3))
plcSNAnalyser = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4))
plcSNAnalyserEnable = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcSNAnalyserEnable.setStatus('current')
plcSNAnalyserTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2), )
if mibBuilder.loadTexts: plcSNAnalyserTable.setStatus('current')
plcSNAnalyserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1), ).setIndexNames((0, "SPC200", "plcModBandIndex"))
if mibBuilder.loadTexts: plcSNAnalyserEntry.setStatus('current')
plcSNAnalyserMinSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserMinSignal.setStatus('current')
plcSNAnalyserMaxSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserMaxSignal.setStatus('current')
plcSNAnalyserAvgSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserAvgSignal.setStatus('current')
plcSNAnalyserLastSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserLastSignal.setStatus('current')
plcSNAnalyserFFTDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserFFTDiv.setStatus('current')
plcSNAnalyserAGC = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserAGC.setStatus('current')
plcAGCAnalyser = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 5))
plcAGCAnalyserEnable = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcAGCAnalyserEnable.setStatus('current')
plcAGCAnalyserSamplesPart1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcAGCAnalyserSamplesPart1.setStatus('current')
plcAGCAnalyserSamplesPart2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 5, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcAGCAnalyserSamplesPart2.setStatus('current')
plcTopoChanges = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcTopoChanges.setStatus('current')
plcBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: plcBasePortTable.setStatus('current')
plcBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"))
if mibBuilder.loadTexts: plcBasePortEntry.setStatus('current')
plcBasePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: plcBasePortIndex.setStatus('current')
plcBasePortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcBasePortAddress.setStatus('current')
plcBasePortChannelEstimation = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2, 1, 3), EstimationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcBasePortChannelEstimation.setStatus('current')
plcBasePortAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcBasePortAttenuation.setStatus('current')
plcChannelModulationStringTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: plcChannelModulationStringTable.setStatus('current')
plcChannelModulationStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"))
if mibBuilder.loadTexts: plcChannelModulationStringEntry.setStatus('current')
plcRxChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcRxChannelModulation.setStatus('current')
plcRxLastChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcRxLastChannelModulation.setStatus('current')
plcTxChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcTxChannelModulation.setStatus('current')
plcChannelModulationTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4), )
if mibBuilder.loadTexts: plcChannelModulationTable.setStatus('current')
plcChannelModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "plcPortChannelIndex"), (0, "SPC200", "plcModBandIndex"))
if mibBuilder.loadTexts: plcChannelModulationEntry.setStatus('current')
plcModBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 1), BandValue())
if mibBuilder.loadTexts: plcModBandIndex.setStatus('current')
plcModGroup1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 2), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup1.setStatus('current')
plcModGroup2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 3), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup2.setStatus('current')
plcModGroup3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 4), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup3.setStatus('current')
plcModGroup4 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 5), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup4.setStatus('current')
plcModGroup5 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 6), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup5.setStatus('current')
plcModGroup6 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 7), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup6.setStatus('current')
plcModGroup7 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 8), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup7.setStatus('current')
plcModGroup8 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 9), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup8.setStatus('current')
plcModGroup9 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 10), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup9.setStatus('current')
plcModGroup10 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 11), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup10.setStatus('current')
plcModGroup11 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 12), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup11.setStatus('current')
plcModGroup12 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 13), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup12.setStatus('current')
plcModGroup13 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 14), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup13.setStatus('current')
plcModGroup14 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 15), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup14.setStatus('current')
plcModGroup15 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 16), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup15.setStatus('current')
plcModGroup16 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 17), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup16.setStatus('current')
plcChannelModulationInput = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5))
plcModulationInputAddr = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcModulationInputAddr.setStatus('current')
plcModulationInputChannel = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 2), PlcChannelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcModulationInputChannel.setStatus('current')
plcModulationInputBand = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 3), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcModulationInputBand.setStatus('current')
plcInputModulationGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 4), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup1.setStatus('current')
plcInputModulationGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 5), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup2.setStatus('current')
plcInputModulationGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 6), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup3.setStatus('current')
plcInputModulationGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 7), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup4.setStatus('current')
plcInputModulationGroup5 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 8), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup5.setStatus('current')
plcInputModulationGroup6 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 9), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup6.setStatus('current')
plcInputModulationGroup7 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 10), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup7.setStatus('current')
plcInputModulationGroup8 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 11), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup8.setStatus('current')
plcInputModulationGroup9 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 12), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup9.setStatus('current')
plcInputModulationGroup10 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 13), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup10.setStatus('current')
plcInputModulationGroup11 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 14), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup11.setStatus('current')
plcInputModulationGroup12 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 15), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup12.setStatus('current')
plcInputModulationGroup13 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 16), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup13.setStatus('current')
plcInputModulationGroup14 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 17), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup14.setStatus('current')
plcInputModulationGroup15 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 18), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup15.setStatus('current')
plcInputModulationGroup16 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 19), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup16.setStatus('current')
plcModulationInputProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcModulationInputProceed.setStatus('current')
plcModulationInputResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 21), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModulationInputResult.setStatus('current')
plcPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6), )
if mibBuilder.loadTexts: plcPortChannelTable.setStatus('current')
plcPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "plcPortChannelIndex"))
if mibBuilder.loadTexts: plcPortChannelEntry.setStatus('current')
plcPortChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: plcPortChannelIndex.setStatus('current')
plcPortChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 2), PlcChannelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcPortChannelType.setStatus('current')
plcPortChannelGain = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcPortChannelGain.setStatus('current')
plcPortChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 4), ChannelBandwidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcPortChannelBandwidth.setStatus('current')
plcPortChannelMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 5), ChannelBandwidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcPortChannelMaxBandwidth.setStatus('current')
plcPortChannelSynchronizationBand = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 6), BandValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcPortChannelSynchronizationBand.setStatus('current')
plcChannelPilotStringTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 7), )
if mibBuilder.loadTexts: plcChannelPilotStringTable.setStatus('current')
plcChannelPilotStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 7, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"))
if mibBuilder.loadTexts: plcChannelPilotStringEntry.setStatus('current')
plcRxChannelPilots = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcRxChannelPilots.setStatus('current')
plcRxLastChannelPilots = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcRxLastChannelPilots.setStatus('current')
plcTxChannelPilots = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcTxChannelPilots.setStatus('current')
plcChannelPilotsTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 8), )
if mibBuilder.loadTexts: plcChannelPilotsTable.setStatus('current')
plcChannelPilotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 8, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "plcPortChannelIndex"), (0, "SPC200", "plcChannelPilotBandIndex"))
if mibBuilder.loadTexts: plcChannelPilotsEntry.setStatus('current')
plcChannelPilotBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 8, 1, 1), BandValue())
if mibBuilder.loadTexts: plcChannelPilotBandIndex.setStatus('current')
plcChannelPilot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 8, 1, 2), PilotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcChannelPilot1.setStatus('current')
plcChannePilot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 8, 1, 3), PilotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcChannePilot2.setStatus('current')
plcChannelPilotsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9))
plcPilotsInputAddr = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcPilotsInputAddr.setStatus('current')
plcPilotsInputChannel = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 2), PlcChannelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcPilotsInputChannel.setStatus('current')
plcPilotsInputBand = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 3), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcPilotsInputBand.setStatus('current')
plcInputChannelPilot1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 4), PilotValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputChannelPilot1.setStatus('current')
plcInputChannelPilot2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 5), PilotValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputChannelPilot2.setStatus('current')
plcPilotsInputProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcPilotsInputProceed.setStatus('current')
plcPilotsInputResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 7), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcPilotsInputResult.setStatus('current')
plcNodeNotches = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotches.setStatus('current')
plcNodeNotchesTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2), )
if mibBuilder.loadTexts: plcNodeNotchesTable.setStatus('current')
plcNodeNotchesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1), ).setIndexNames((0, "SPC200", "plcNodeNotchesBandIndex"), (0, "SPC200", "plcNodeNotchesGroupIndex"))
if mibBuilder.loadTexts: plcNodeNotchesEntry.setStatus('current')
plcNodeNotchesBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 1), BandValue())
if mibBuilder.loadTexts: plcNodeNotchesBandIndex.setStatus('current')
plcNodeNotchesGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 2), GroupValue())
if mibBuilder.loadTexts: plcNodeNotchesGroupIndex.setStatus('current')
plcNodeNotchesCarrier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier1.setStatus('current')
plcNodeNotchesCarrier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier2.setStatus('current')
plcNodeNotchesCarrier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier3.setStatus('current')
plcNodeNotchesCarrier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier4.setStatus('current')
plcNodeNotchesCarrier5 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier5.setStatus('current')
plcNodeNotchesCarrier6 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier6.setStatus('current')
plcNodeNotchesCarrier7 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier7.setStatus('current')
plcNodeNotchesCarrier8 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier8.setStatus('current')
plcNodeNotchesInput = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3))
plcNodeNotchesInputBand = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 1), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputBand.setStatus('current')
plcNodeNotchesInputGroup = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 2), GroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputGroup.setStatus('current')
plcNodeNotchesInputCarrier1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier1.setStatus('current')
plcNodeNotchesInputCarrier2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier2.setStatus('current')
plcNodeNotchesInputCarrier3 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier3.setStatus('current')
plcNodeNotchesInputCarrier4 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier4.setStatus('current')
plcNodeNotchesInputCarrier5 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier5.setStatus('current')
plcNodeNotchesInputCarrier6 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier6.setStatus('current')
plcNodeNotchesInputCarrier7 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier7.setStatus('current')
plcNodeNotchesInputCarrier8 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier8.setStatus('current')
plcNodeNotchesInputProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputProceed.setStatus('current')
plcNodeNotchesInputResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 12), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesInputResult.setStatus('current')
plcNodePilots = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodePilots.setStatus('current')
plcNodePilotsTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 5), )
if mibBuilder.loadTexts: plcNodePilotsTable.setStatus('current')
plcNodePilotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 5, 1), ).setIndexNames((0, "SPC200", "plcNodePilotsBandIndex"))
if mibBuilder.loadTexts: plcNodePilotsEntry.setStatus('current')
plcNodePilotsBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 5, 1, 1), BandValue())
if mibBuilder.loadTexts: plcNodePilotsBandIndex.setStatus('current')
plcNodePilot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 5, 1, 2), PilotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodePilot1.setStatus('current')
plcNodePilot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 5, 1, 3), PilotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodePilot2.setStatus('current')
plcNodePilotsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6))
plcNodePilotsInputBand = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6, 1), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodePilotsInputBand.setStatus('current')
plcInputNodePilot1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6, 2), PilotValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputNodePilot1.setStatus('current')
plcInputNodePilot2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6, 3), PilotValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputNodePilot2.setStatus('current')
plcNodePilotsInputProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodePilotsInputProceed.setStatus('current')
plcNodePilotsInputResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6, 5), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodePilotsInputResult.setStatus('current')
plcNodeAdaptsStringTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 7), )
if mibBuilder.loadTexts: plcNodeAdaptsStringTable.setStatus('current')
plcNodeAdaptsStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 7, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "plcNodeAdaptsStringBandIndex"))
if mibBuilder.loadTexts: plcNodeAdaptsStringEntry.setStatus('current')
plcNodeAdaptsStringBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 7, 1, 1), BandValue())
if mibBuilder.loadTexts: plcNodeAdaptsStringBandIndex.setStatus('current')
plcNodeAdaptsStringBand = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsStringBand.setStatus('current')
plcNodeAdaptsTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8), )
if mibBuilder.loadTexts: plcNodeAdaptsTable.setStatus('current')
plcNodeAdaptsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1), ).setIndexNames((0, "SPC200", "plcNodeAdaptsBandIndex"), (0, "SPC200", "plcNodeAdaptsGroupIndex"))
if mibBuilder.loadTexts: plcNodeAdaptsEntry.setStatus('current')
plcNodeAdaptsBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 1), BandValue())
if mibBuilder.loadTexts: plcNodeAdaptsBandIndex.setStatus('current')
plcNodeAdaptsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 2), GroupValue())
if mibBuilder.loadTexts: plcNodeAdaptsGroupIndex.setStatus('current')
plcNodeAdaptsCarrier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 3), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier1.setStatus('current')
plcNodeAdaptsCarrier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 4), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier2.setStatus('current')
plcNodeAdaptsCarrier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 5), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier3.setStatus('current')
plcNodeAdaptsCarrier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 6), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier4.setStatus('current')
plcNodeAdaptsCarrier5 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 7), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier5.setStatus('current')
plcNodeAdaptsCarrier6 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 8), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier6.setStatus('current')
plcNodeAdaptsCarrier7 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 9), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier7.setStatus('current')
plcNodeAdaptsCarrier8 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 10), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier8.setStatus('current')
plcNodeAdaptsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9))
plcNodeAdaptsInputBand = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 1), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputBand.setStatus('current')
plcNodeAdaptsInputGroup = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 2), GroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputGroup.setStatus('current')
plcNodeAdaptsInputCarrier1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 3), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier1.setStatus('current')
plcNodeAdaptsInputCarrier2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 4), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier2.setStatus('current')
plcNodeAdaptsInputCarrier3 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 5), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier3.setStatus('current')
plcNodeAdaptsInputCarrier4 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 6), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier4.setStatus('current')
plcNodeAdaptsInputCarrier5 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 7), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier5.setStatus('current')
plcNodeAdaptsInputCarrier6 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 8), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier6.setStatus('current')
plcNodeAdaptsInputCarrier7 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 9), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier7.setStatus('current')
plcNodeAdaptsInputCarrier8 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 10), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier8.setStatus('current')
plcNodeAdaptsInputProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputProceed.setStatus('current')
plcNodeAdaptsInputResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 12), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsInputResult.setStatus('current')
plcNodeNetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10), )
if mibBuilder.loadTexts: plcNodeNetConfigTable.setStatus('current')
plcNodeNetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: plcNodeNetConfigEntry.setStatus('current')
plcNodeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeIpAddr.setStatus('current')
plcNodeNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNetMask.setStatus('current')
plcNodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeMacAddr.setStatus('current')
plcNodeGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeGateway.setStatus('current')
plcNodeActions = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11))
plcNodeActionsCommit = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 1))
plcNodeActionsCommitProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeActionsCommitProceed.setStatus('current')
plcNodeActionsCommitResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 1, 2), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeActionsCommitResult.setStatus('current')
plcNodeActionsReset = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 2))
plcNodeActionsResetProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeActionsResetProceed.setStatus('current')
plcNodeActionsCarrier = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 3))
plcNodeActionsCarrierFlatProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeActionsCarrierFlatProceed.setStatus('current')
plcBssId = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 6))
plcMasterBssId = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcMasterBssId.setStatus('current')
plcSlaveBssId = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcSlaveBssId.setStatus('current')
plcSpy = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 7))
plcSpyIsDynamic = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcSpyIsDynamic.setStatus('current')
plcStaticSpySynchBandNb = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 7, 2), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcStaticSpySynchBandNb.setStatus('current')
softwareMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3))
currentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSoftwareVersion.setStatus('current')
currentSoftwareBoardVersion = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSoftwareBoardVersion.setStatus('current')
currentSoftwareAFEVersion = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSoftwareAFEVersion.setStatus('current')
softwareTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 4), )
if mibBuilder.loadTexts: softwareTable.setStatus('current')
softwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 4, 1), ).setIndexNames((0, "SPC200", "softwareIndex"))
if mibBuilder.loadTexts: softwareEntry.setStatus('current')
softwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 4, 1, 1), SoftwareIndex())
if mibBuilder.loadTexts: softwareIndex.setStatus('current')
softwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
softwareUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5))
softwareUploadTFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadTFTPServerIP.setStatus('current')
softwareUploadLogin = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadLogin.setStatus('current')
softwareUploadPassword = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadPassword.setStatus('current')
softwareUploadFileName = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadFileName.setStatus('current')
softwareUploadProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadProceed.setStatus('current')
softwareUploadResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 6), SoftwareActionResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareUploadResult.setStatus('current')
softwareUploadTFTPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadTFTPServerPort.setStatus('current')
softwareAction = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 6))
softwareActionIndex = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 6, 1), SoftwareIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareActionIndex.setStatus('current')
softwareActionType = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 6, 2), SoftwareActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareActionType.setStatus('current')
softwareActionProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 6, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareActionProceed.setStatus('current')
softwareActionResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 6, 4), SoftwareActionResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareActionResult.setStatus('current')
plcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4))
plcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 1))
plcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2))
plcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 1, 1)).setObjects(("SPC200", "nodeGroup"), ("SPC200", "topologyGroup"), ("SPC200", "statisticGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    plcCompliance = plcCompliance.setStatus('current')
nodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 1)).setObjects(("SPC200", "plcNodeNotches"), ("SPC200", "plcMode"), ("SPC200", "plcNodeNotchesCarrier1"), ("SPC200", "plcNodeNotchesCarrier2"), ("SPC200", "plcNodeNotchesCarrier3"), ("SPC200", "plcNodeNotchesCarrier4"), ("SPC200", "plcNodeNotchesCarrier5"), ("SPC200", "plcNodeNotchesCarrier6"), ("SPC200", "plcNodeNotchesCarrier7"), ("SPC200", "plcNodeNotchesCarrier8"), ("SPC200", "plcNodePilots"), ("SPC200", "plcNodePilot1"), ("SPC200", "plcNodePilot2"), ("SPC200", "plcNodeAdaptsStringBand"), ("SPC200", "plcNodeAdaptsCarrier1"), ("SPC200", "plcNodeAdaptsCarrier2"), ("SPC200", "plcNodeAdaptsCarrier3"), ("SPC200", "plcNodeAdaptsCarrier4"), ("SPC200", "plcNodeAdaptsCarrier5"), ("SPC200", "plcNodeAdaptsCarrier6"), ("SPC200", "plcNodeAdaptsCarrier7"), ("SPC200", "plcNodeAdaptsCarrier8"), ("SPC200", "plcNodeIpAddr"), ("SPC200", "plcNodeNetMask"), ("SPC200", "plcNodeMacAddr"), ("SPC200", "plcNodeGateway"), ("SPC200", "plcMasterBssId"), ("SPC200", "plcSlaveBssId"), ("SPC200", "plcSpyIsDynamic"), ("SPC200", "plcStaticSpySynchBandNb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nodeGroup = nodeGroup.setStatus('current')
inputNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 2)).setObjects(("SPC200", "plcNodeNotchesInputBand"), ("SPC200", "plcNodeNotchesInputGroup"), ("SPC200", "plcNodeNotchesInputCarrier1"), ("SPC200", "plcNodeNotchesInputCarrier2"), ("SPC200", "plcNodeNotchesInputCarrier3"), ("SPC200", "plcNodeNotchesInputCarrier4"), ("SPC200", "plcNodeNotchesInputCarrier5"), ("SPC200", "plcNodeNotchesInputCarrier6"), ("SPC200", "plcNodeNotchesInputCarrier7"), ("SPC200", "plcNodeNotchesInputCarrier8"), ("SPC200", "plcNodeNotchesInputProceed"), ("SPC200", "plcNodeNotchesInputResult"), ("SPC200", "plcNodePilotsInputBand"), ("SPC200", "plcInputNodePilot1"), ("SPC200", "plcInputNodePilot2"), ("SPC200", "plcNodePilotsInputProceed"), ("SPC200", "plcNodePilotsInputResult"), ("SPC200", "plcNodeAdaptsInputBand"), ("SPC200", "plcNodeAdaptsInputGroup"), ("SPC200", "plcNodeAdaptsInputCarrier1"), ("SPC200", "plcNodeAdaptsInputCarrier2"), ("SPC200", "plcNodeAdaptsInputCarrier3"), ("SPC200", "plcNodeAdaptsInputCarrier4"), ("SPC200", "plcNodeAdaptsInputCarrier5"), ("SPC200", "plcNodeAdaptsInputCarrier6"), ("SPC200", "plcNodeAdaptsInputCarrier7"), ("SPC200", "plcNodeAdaptsInputCarrier8"), ("SPC200", "plcNodeAdaptsInputProceed"), ("SPC200", "plcNodeAdaptsInputResult"), ("SPC200", "plcNodeActionsCommitProceed"), ("SPC200", "plcNodeActionsCommitResult"), ("SPC200", "plcNodeActionsResetProceed"), ("SPC200", "plcNodeActionsCarrierFlatProceed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inputNodeGroup = inputNodeGroup.setStatus('current')
topologyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 3)).setObjects(("SPC200", "plcBasePortAddress"), ("SPC200", "plcBasePortChannelEstimation"), ("SPC200", "plcBasePortAttenuation"), ("SPC200", "plcChannePilot2"), ("SPC200", "plcChannelPilot1"), ("SPC200", "plcRxChannelPilots"), ("SPC200", "plcRxLastChannelPilots"), ("SPC200", "plcTxChannelPilots"), ("SPC200", "plcRxChannelModulation"), ("SPC200", "plcRxLastChannelModulation"), ("SPC200", "plcTxChannelModulation"), ("SPC200", "plcModGroup1"), ("SPC200", "plcModGroup10"), ("SPC200", "plcModGroup11"), ("SPC200", "plcModGroup12"), ("SPC200", "plcModGroup13"), ("SPC200", "plcModGroup14"), ("SPC200", "plcModGroup15"), ("SPC200", "plcModGroup16"), ("SPC200", "plcModGroup2"), ("SPC200", "plcModGroup3"), ("SPC200", "plcModGroup4"), ("SPC200", "plcModGroup5"), ("SPC200", "plcModGroup6"), ("SPC200", "plcModGroup7"), ("SPC200", "plcModGroup8"), ("SPC200", "plcModGroup9"), ("SPC200", "plcPortChannelGain"), ("SPC200", "plcPortChannelBandwidth"), ("SPC200", "plcPortChannelMaxBandwidth"), ("SPC200", "plcPortChannelSynchronizationBand"), ("SPC200", "plcPortChannelType"), ("SPC200", "plcTopoChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    topologyGroup = topologyGroup.setStatus('current')
inputTopologyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 4)).setObjects(("SPC200", "plcModulationInputAddr"), ("SPC200", "plcModulationInputChannel"), ("SPC200", "plcModulationInputBand"), ("SPC200", "plcInputModulationGroup1"), ("SPC200", "plcInputModulationGroup2"), ("SPC200", "plcInputModulationGroup3"), ("SPC200", "plcInputModulationGroup4"), ("SPC200", "plcInputModulationGroup5"), ("SPC200", "plcInputModulationGroup6"), ("SPC200", "plcInputModulationGroup7"), ("SPC200", "plcInputModulationGroup8"), ("SPC200", "plcInputModulationGroup9"), ("SPC200", "plcInputModulationGroup10"), ("SPC200", "plcInputModulationGroup11"), ("SPC200", "plcInputModulationGroup12"), ("SPC200", "plcInputModulationGroup13"), ("SPC200", "plcInputModulationGroup14"), ("SPC200", "plcInputModulationGroup15"), ("SPC200", "plcInputModulationGroup16"), ("SPC200", "plcModulationInputProceed"), ("SPC200", "plcModulationInputResult"), ("SPC200", "plcPilotsInputAddr"), ("SPC200", "plcPilotsInputChannel"), ("SPC200", "plcPilotsInputBand"), ("SPC200", "plcInputChannelPilot1"), ("SPC200", "plcInputChannelPilot2"), ("SPC200", "plcPilotsInputProceed"), ("SPC200", "plcPilotsInputResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inputTopologyGroup = inputTopologyGroup.setStatus('current')
statisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 5)).setObjects(("SPC200", "portStats2AvgBandAtt"), ("SPC200", "portStats2AvgBandSNR"), ("SPC200", "portStats2Noise"), ("SPC200", "portStats2Signal"), ("SPC200", "portStatsNoise"), ("SPC200", "portStatsSignal"), ("SPC200", "portStats3AvgAtt"), ("SPC200", "portStats3AvgSNR"), ("SPC200", "bootstatsBoot"), ("SPC200", "bootstatsManualReset"), ("SPC200", "bootstatsFailureReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statisticGroup = statisticGroup.setStatus('current')
softwareGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 6)).setObjects(("SPC200", "currentSoftwareVersion"), ("SPC200", "currentSoftwareBoardVersion"), ("SPC200", "currentSoftwareAFEVersion"), ("SPC200", "softwareVersion"), ("SPC200", "softwareUploadTFTPServerIP"), ("SPC200", "softwareUploadLogin"), ("SPC200", "softwareUploadPassword"), ("SPC200", "softwareUploadFileName"), ("SPC200", "softwareUploadProceed"), ("SPC200", "softwareUploadResult"), ("SPC200", "softwareUploadTFTPServerPort"), ("SPC200", "softwareActionIndex"), ("SPC200", "softwareActionType"), ("SPC200", "softwareActionProceed"), ("SPC200", "softwareActionResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    softwareGroup = softwareGroup.setStatus('current')
analyserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 7)).setObjects(("SPC200", "plcSNAnalyserAGC"), ("SPC200", "plcSNAnalyserEnable"), ("SPC200", "plcSNAnalyserMinSignal"), ("SPC200", "plcSNAnalyserMaxSignal"), ("SPC200", "plcSNAnalyserAvgSignal"), ("SPC200", "plcSNAnalyserLastSignal"), ("SPC200", "plcSNAnalyserFFTDiv"), ("SPC200", "plcAGCAnalyserEnable"), ("SPC200", "plcAGCAnalyserSamplesPart1"), ("SPC200", "plcAGCAnalyserSamplesPart2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    analyserGroup = analyserGroup.setStatus('current')
agentCapabilities = AgentCapabilities((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 3))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    agentCapabilities = agentCapabilities.setProductRelease('Product-Release')
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    agentCapabilities = agentCapabilities.setStatus('current')
ipExt = ObjectIdentity((1, 3, 6, 1, 4, 1, 22764, 1, 4))
if mibBuilder.loadTexts: ipExt.setStatus('current')
ipDynamic = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDynamic.setStatus('current')
ipExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 4, 2)).setObjects(("SPC200", "ipDynamic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipExtGroup = ipExtGroup.setStatus('current')
mibBuilder.exportSymbols("SPC200", plcRxChannelModulation=plcRxChannelModulation, plcInputModulationGroup15=plcInputModulationGroup15, plcNodePilot1=plcNodePilot1, plcNodeAdaptsInputResult=plcNodeAdaptsInputResult, softwareActionIndex=softwareActionIndex, plcNodeNotchesTable=plcNodeNotchesTable, portStats3AvgAtt=portStats3AvgAtt, plcInputModulationGroup11=plcInputModulationGroup11, plcNodeNotchesCarrier7=plcNodeNotchesCarrier7, plcNodeAdaptsInputCarrier8=plcNodeAdaptsInputCarrier8, SoftwareIndex=SoftwareIndex, plcTopo=plcTopo, plcNodeAdaptsInputCarrier6=plcNodeAdaptsInputCarrier6, plcBasePortAttenuation=plcBasePortAttenuation, portStatsTable=portStatsTable, plcPortChannelSynchronizationBand=plcPortChannelSynchronizationBand, AdaptValue=AdaptValue, plcBasePortAddress=plcBasePortAddress, plcNodeAdaptsInputCarrier7=plcNodeAdaptsInputCarrier7, plcNodeIpAddr=plcNodeIpAddr, softwareUploadResult=softwareUploadResult, plcNodeNotchesInputCarrier8=plcNodeNotchesInputCarrier8, EstimationMode=EstimationMode, plcBasePortChannelEstimation=plcBasePortChannelEstimation, plcNodeGateway=plcNodeGateway, plcNodeAdaptsCarrier7=plcNodeAdaptsCarrier7, plcBasePortTable=plcBasePortTable, plcConformance=plcConformance, plcCompliances=plcCompliances, plcSNAnalyserEnable=plcSNAnalyserEnable, ipDynamic=ipDynamic, plcModGroup5=plcModGroup5, plcNodeNotchesCarrier3=plcNodeNotchesCarrier3, plcNodePilot2=plcNodePilot2, plcNodeAdaptsInputGroup=plcNodeAdaptsInputGroup, plcNodeNotchesInputCarrier2=plcNodeNotchesInputCarrier2, plcNodeNotchesCarrier5=plcNodeNotchesCarrier5, plcModGroup4=plcModGroup4, plcNodeNotchesBandIndex=plcNodeNotchesBandIndex, plcInputModulationGroup16=plcInputModulationGroup16, plcSNAnalyserTable=plcSNAnalyserTable, plcChannelPilotStringEntry=plcChannelPilotStringEntry, plcNodeAdaptsCarrier1=plcNodeAdaptsCarrier1, bootstats=bootstats, portStats2Noise=portStats2Noise, plcChannelPilotStringTable=plcChannelPilotStringTable, plcNodeActions=plcNodeActions, plcMode=plcMode, plcNodeAdaptsStringBand=plcNodeAdaptsStringBand, ipExtGroup=ipExtGroup, plcPilotsInputAddr=plcPilotsInputAddr, inputTopologyGroup=inputTopologyGroup, plcNodeAdaptsCarrier8=plcNodeAdaptsCarrier8, PlcModeType=PlcModeType, PlcChannelType=PlcChannelType, plcNodeNotchesInputCarrier5=plcNodeNotchesInputCarrier5, plcSNAnalyserEntry=plcSNAnalyserEntry, softwareEntry=softwareEntry, plcSNAnalyserAvgSignal=plcSNAnalyserAvgSignal, plcNodeNotchesInputCarrier7=plcNodeNotchesInputCarrier7, plcRxLastChannelPilots=plcRxLastChannelPilots, ChannelBandwidthValue=ChannelBandwidthValue, plcPilotsInputProceed=plcPilotsInputProceed, plcAGCAnalyserEnable=plcAGCAnalyserEnable, plcChannelModulationTable=plcChannelModulationTable, plcSNAnalyserLastSignal=plcSNAnalyserLastSignal, plcNodeAdaptsInputCarrier5=plcNodeAdaptsInputCarrier5, plcModGroup6=plcModGroup6, plcPortChannelIndex=plcPortChannelIndex, plcNodePilotsInputResult=plcNodePilotsInputResult, plcTopoChanges=plcTopoChanges, plcNodeActionsCarrierFlatProceed=plcNodeActionsCarrierFlatProceed, plcModGroup9=plcModGroup9, plcChannelPilotsTable=plcChannelPilotsTable, plcNodeActionsCommit=plcNodeActionsCommit, plcNodeActionsResetProceed=plcNodeActionsResetProceed, plcModulationInputResult=plcModulationInputResult, softwareUploadPassword=softwareUploadPassword, portStatsGroupIndex=portStatsGroupIndex, plcNodeAdaptsInputCarrier3=plcNodeAdaptsInputCarrier3, plcSNAnalyserMaxSignal=plcSNAnalyserMaxSignal, plcModGroup7=plcModGroup7, softwareIndex=softwareIndex, ipExt=ipExt, plc=plc, plcModGroup10=plcModGroup10, plcInputNodePilot1=plcInputNodePilot1, bootstatsFailureReset=bootstatsFailureReset, plcSNAnalyser=plcSNAnalyser, plcNodeNotchesEntry=plcNodeNotchesEntry, ResultValue=ResultValue, plcNodeNotchesInputResult=plcNodeNotchesInputResult, plcRxLastChannelModulation=plcRxLastChannelModulation, nodeGroup=nodeGroup, ModulationValue=ModulationValue, plcPilotsInputBand=plcPilotsInputBand, plcNodeAdaptsInputCarrier1=plcNodeAdaptsInputCarrier1, inputNodeGroup=inputNodeGroup, plcModGroup2=plcModGroup2, plcNodeNotchesInputCarrier6=plcNodeNotchesInputCarrier6, plcNodeAdaptsBandIndex=plcNodeAdaptsBandIndex, plcNodePilots=plcNodePilots, plcModGroup1=plcModGroup1, currentSoftwareAFEVersion=currentSoftwareAFEVersion, plcNodePilotsTable=plcNodePilotsTable, plcNodeAdaptsStringTable=plcNodeAdaptsStringTable, PYSNMP_MODULE_ID=spc200MIB, softwareUploadTFTPServerIP=softwareUploadTFTPServerIP, portStats3Entry=portStats3Entry, portStats3AvgSNR=portStats3AvgSNR, portStats2Entry=portStats2Entry, plcNodeNotches=plcNodeNotches, plcRxChannelPilots=plcRxChannelPilots, plcTxChannelPilots=plcTxChannelPilots, BandValue=BandValue, plcInputModulationGroup8=plcInputModulationGroup8, plcPortChannelTable=plcPortChannelTable, portStats2Table=portStats2Table, plcNodeNotchesCarrier6=plcNodeNotchesCarrier6, plcModGroup14=plcModGroup14, plcModGroup16=plcModGroup16, plcNodeNotchesInputCarrier3=plcNodeNotchesInputCarrier3, plcInputModulationGroup14=plcInputModulationGroup14, SoftwareActionResultValue=SoftwareActionResultValue, plcNodeNotchesInputGroup=plcNodeNotchesInputGroup, plcAGCAnalyser=plcAGCAnalyser, plcNodeAdaptsTable=plcNodeAdaptsTable, plcTxChannelModulation=plcTxChannelModulation, softwareMgnt=softwareMgnt, plcNodePilotsEntry=plcNodePilotsEntry, plcNodeAdaptsCarrier6=plcNodeAdaptsCarrier6, plcNodeNotchesInputBand=plcNodeNotchesInputBand, currentSoftwareVersion=currentSoftwareVersion, plcInputModulationGroup3=plcInputModulationGroup3, bootstatsBoot=bootstatsBoot, CarrierValue=CarrierValue, plcObjects=plcObjects, portStats2Signal=portStats2Signal, plcNodeAdaptsCarrier5=plcNodeAdaptsCarrier5, stats=stats, portStats2AvgBandAtt=portStats2AvgBandAtt, plcChannelModulationStringEntry=plcChannelModulationStringEntry, plcChannelPilotsEntry=plcChannelPilotsEntry, softwareUploadProceed=softwareUploadProceed, plcChannelModulationStringTable=plcChannelModulationStringTable, plcNodeActionsCommitProceed=plcNodeActionsCommitProceed, plcPortChannelBandwidth=plcPortChannelBandwidth, SoftwareActionType=SoftwareActionType, plcSNAnalyserMinSignal=plcSNAnalyserMinSignal, plcSNAnalyserFFTDiv=plcSNAnalyserFFTDiv, plcInputChannelPilot1=plcInputChannelPilot1, plcCompliance=plcCompliance, analyserGroup=analyserGroup, currentSoftwareBoardVersion=currentSoftwareBoardVersion, softwareTable=softwareTable, plcModGroup11=plcModGroup11, topologyGroup=topologyGroup, portStatsEntry=portStatsEntry, portStatsSignal=portStatsSignal, plcModulationInputBand=plcModulationInputBand, plcPortChannelMaxBandwidth=plcPortChannelMaxBandwidth, portStats2AvgBandSNR=portStats2AvgBandSNR, plcInputModulationGroup5=plcInputModulationGroup5, PilotValue=PilotValue, spc200MIB=spc200MIB, plcNodePilotsInput=plcNodePilotsInput, plcSpy=plcSpy, plcAGCAnalyserSamplesPart2=plcAGCAnalyserSamplesPart2, plcNodeNotchesCarrier1=plcNodeNotchesCarrier1, plcInputModulationGroup1=plcInputModulationGroup1, plcBssId=plcBssId, softwareActionProceed=softwareActionProceed, portStatsCarrierIndex=portStatsCarrierIndex, plcNodeAdaptsStringBandIndex=plcNodeAdaptsStringBandIndex, plcNodeConfiguration=plcNodeConfiguration, plcChannelModulationEntry=plcChannelModulationEntry, plcNodeActionsCarrier=plcNodeActionsCarrier, plcNodeNotchesCarrier4=plcNodeNotchesCarrier4, bootstatsManualReset=bootstatsManualReset, plcInputModulationGroup4=plcInputModulationGroup4, plcModGroup13=plcModGroup13, plcNodeNotchesInputCarrier4=plcNodeNotchesInputCarrier4, plcNodeAdaptsStringEntry=plcNodeAdaptsStringEntry, plcModGroup12=plcModGroup12, plcInputModulationGroup6=plcInputModulationGroup6, plcNodeNotchesInputCarrier1=plcNodeNotchesInputCarrier1, plcNodePilotsBandIndex=plcNodePilotsBandIndex, plcNodeAdaptsInputBand=plcNodeAdaptsInputBand, plcGroups=plcGroups, plcBasePortIndex=plcBasePortIndex, plcPortChannelEntry=plcPortChannelEntry, plcChannelPilotsInput=plcChannelPilotsInput, softwareAction=softwareAction, plcModulationInputAddr=plcModulationInputAddr, plcNodeNotchesInput=plcNodeNotchesInput, plcPilotsInputChannel=plcPilotsInputChannel, plcAGCAnalyserSamplesPart1=plcAGCAnalyserSamplesPart1, plcNodeNetConfigTable=plcNodeNetConfigTable, softwareGroup=softwareGroup, plcNodeNotchesCarrier8=plcNodeNotchesCarrier8, plcNodeNotchesGroupIndex=plcNodeNotchesGroupIndex, softwareUploadTFTPServerPort=softwareUploadTFTPServerPort, plcNodeAdaptsInputCarrier2=plcNodeAdaptsInputCarrier2, plcChannePilot2=plcChannePilot2, plcChannelPilotBandIndex=plcChannelPilotBandIndex, plcNodeActionsReset=plcNodeActionsReset, plcInputModulationGroup7=plcInputModulationGroup7, plcSNAnalyserAGC=plcSNAnalyserAGC, softwareActionResult=softwareActionResult, GroupValue=GroupValue, plcNodeAdaptsEntry=plcNodeAdaptsEntry, plcModGroup3=plcModGroup3, plcInputModulationGroup2=plcInputModulationGroup2, plcStaticSpySynchBandNb=plcStaticSpySynchBandNb, plcNodeAdaptsCarrier2=plcNodeAdaptsCarrier2, plcInputModulationGroup12=plcInputModulationGroup12, plcSlaveBssId=plcSlaveBssId, plcSpyIsDynamic=plcSpyIsDynamic, portStatsBandIndex=portStatsBandIndex, plcNodeAdaptsCarrier4=plcNodeAdaptsCarrier4, plcModulationInputProceed=plcModulationInputProceed, plcModGroup15=plcModGroup15, plcNodeNotchesCarrier2=plcNodeNotchesCarrier2, plcNodeNetConfigEntry=plcNodeNetConfigEntry, plcNodePilotsInputBand=plcNodePilotsInputBand, plcNodeAdaptsInput=plcNodeAdaptsInput, plcPortChannelGain=plcPortChannelGain, plcNodeActionsCommitResult=plcNodeActionsCommitResult, plcMasterBssId=plcMasterBssId, plcInputNodePilot2=plcInputNodePilot2, plcNodeNotchesInputProceed=plcNodeNotchesInputProceed, plcInputModulationGroup10=plcInputModulationGroup10, plcChannelModulationInput=plcChannelModulationInput, plcChannelPilot1=plcChannelPilot1, plcNodeMacAddr=plcNodeMacAddr, plcModulationInputChannel=plcModulationInputChannel, plcInputModulationGroup13=plcInputModulationGroup13, plcBasePortEntry=plcBasePortEntry, plcNodeAdaptsCarrier3=plcNodeAdaptsCarrier3, plcNodeAdaptsInputCarrier4=plcNodeAdaptsInputCarrier4, plcModGroup8=plcModGroup8, plcPilotsInputResult=plcPilotsInputResult, softwareVersion=softwareVersion, portStats3Table=portStats3Table, statisticGroup=statisticGroup, softwareUploadLogin=softwareUploadLogin, plcModBandIndex=plcModBandIndex, plcInputModulationGroup9=plcInputModulationGroup9, plcNodeNetMask=plcNodeNetMask, softwareActionType=softwareActionType, portStatsNoise=portStatsNoise, plcInputChannelPilot2=plcInputChannelPilot2, plcNodeAdaptsInputProceed=plcNodeAdaptsInputProceed, plcNodeAdaptsGroupIndex=plcNodeAdaptsGroupIndex)
mibBuilder.exportSymbols("SPC200", softwareUpload=softwareUpload, agentCapabilities=agentCapabilities, softwareUploadFileName=softwareUploadFileName, plcPortChannelType=plcPortChannelType, plcNodePilotsInputProceed=plcNodePilotsInputProceed)
