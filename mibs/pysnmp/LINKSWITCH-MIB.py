#
# PySNMP MIB module LINKSWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LINKSWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
a3Com, = mibBuilder.importSymbols("A3Com-products-MIB", "a3Com")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Bits, ModuleIdentity, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Gauge32, MibIdentifier, Counter32, NotificationType, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Gauge32", "MibIdentifier", "Counter32", "NotificationType", "iso", "Counter64")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
linkSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 17))
lsSRFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsSRFilterEnable.setStatus('mandatory')
lsSegmentFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsSegmentFilterEnable.setStatus('mandatory')
lsMcastFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsMcastFilterEnable.setStatus('mandatory')
lsLoopDetectAction = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("shutport", 1), ("shuteths", 2), ("shutunit", 3), ("no-action", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsLoopDetectAction.setStatus('mandatory')
lsAddressAgingTimer = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsAddressAgingTimer.setStatus('mandatory')
lsIPEchoAgingHelp = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsIPEchoAgingHelp.setStatus('mandatory')
lsProdVerSW = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsProdVerSW.setStatus('mandatory')
lsProdVerHW = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsProdVerHW.setStatus('mandatory')
lsLEDstate = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLEDstate.setStatus('mandatory')
lsTestResult = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsTestResult.setStatus('mandatory')
lsAction = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("age-addr-table", 2), ("clear-addr-table", 3), ("disconnect-FDDI", 4), ("connect-FDDI", 5), ("disconnect-Eth", 6), ("connect-Eth", 7), ("test-fddipath", 8), ("test-ethports", 9), ("test-lsfunc", 10), ("test-addr-filter", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsAction.setStatus('mandatory')
lsEportNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportNumber.setStatus('mandatory')
lsEportTable = MibTable((1, 3, 6, 1, 4, 1, 43, 17, 13), )
if mibBuilder.loadTexts: lsEportTable.setStatus('mandatory')
lsEportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 17, 13, 1), ).setIndexNames((0, "LINKSWITCH-MIB", "lsEportIndex"))
if mibBuilder.loadTexts: lsEportEntry.setStatus('mandatory')
lsEportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportIndex.setStatus('mandatory')
lsEportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsEportEnable.setStatus('mandatory')
lsEportActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsEportActivate.setStatus('mandatory')
lsEportLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("inactive", 3), ("ready", 4), ("active", 5), ("shutdown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportLinkState.setStatus('mandatory')
lsEportName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsEportName.setStatus('mandatory')
lsEportSQETestEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsEportSQETestEnable.setStatus('mandatory')
lsEportLongPktsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsEportLongPktsEnable.setStatus('mandatory')
lsEportMCastFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsEportMCastFilterEnable.setStatus('mandatory')
lsEportMCastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsEportMCastRate.setStatus('mandatory')
lsEportMCastBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsEportMCastBurstLimit.setStatus('mandatory')
lsEportStationsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportStationsNumber.setStatus('mandatory')
lsEportSecsSinceLastClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportSecsSinceLastClear.setStatus('mandatory')
lsEportTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportTestResult.setStatus('mandatory')
lsEportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("test-loopback", 2), ("test-addrfilter", 3), ("zero-counters", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsEportAction.setStatus('mandatory')
lsEportFtoEByteCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportFtoEByteCts.setStatus('mandatory')
lsEportEtoFByteCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportEtoFByteCts.setStatus('mandatory')
lsEportFtoEPacketCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportFtoEPacketCts.setStatus('mandatory')
lsEportEtoFPacketCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportEtoFPacketCts.setStatus('mandatory')
lsEportFtoEDropPktCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportFtoEDropPktCts.setStatus('mandatory')
lsEportEtoFDropPktCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportEtoFDropPktCts.setStatus('mandatory')
lsEportFtoEBusErrorCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportFtoEBusErrorCts.setStatus('mandatory')
lsEportEtoFBusErrorCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportEtoFBusErrorCts.setStatus('mandatory')
lsEportXMCastCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportXMCastCts.setStatus('mandatory')
lsEportXBCastCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportXBCastCts.setStatus('mandatory')
lsEportXDirectedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportXDirectedCts.setStatus('mandatory')
lsEportXDeferredCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportXDeferredCts.setStatus('mandatory')
lsEportXLateCollCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportXLateCollCts.setStatus('mandatory')
lsEportXCollAbortCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportXCollAbortCts.setStatus('mandatory')
lsEportXCSErrCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportXCSErrCts.setStatus('mandatory')
lsEportXExcessDeferCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportXExcessDeferCts.setStatus('mandatory')
lsEportXUnderrunCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportXUnderrunCts.setStatus('mandatory')
lsEportXSQETestFailCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportXSQETestFailCts.setStatus('mandatory')
lsEportRMCastCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportRMCastCts.setStatus('mandatory')
lsEportRBCastCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportRBCastCts.setStatus('mandatory')
lsEportRDirectedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportRDirectedCts.setStatus('mandatory')
lsEportRAlignmentCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportRAlignmentCts.setStatus('mandatory')
lsEportRTooLongCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportRTooLongCts.setStatus('mandatory')
lsEportRFCSErrorCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportRFCSErrorCts.setStatus('mandatory')
lsEportROverrunCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 13, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEportROverrunCts.setStatus('mandatory')
lsStationsNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsStationsNumber.setStatus('mandatory')
lsStationsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 17, 15), )
if mibBuilder.loadTexts: lsStationsTable.setStatus('mandatory')
lsStationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 17, 15, 1), ).setIndexNames((0, "LINKSWITCH-MIB", "lsStationsPortIndex"), (0, "LINKSWITCH-MIB", "lsStationsAddrIndex"))
if mibBuilder.loadTexts: lsStationsEntry.setStatus('mandatory')
lsStationsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsStationsPortIndex.setStatus('mandatory')
lsStationsAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsStationsAddrIndex.setStatus('mandatory')
lsStationsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 17, 15, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsStationsAddress.setStatus('mandatory')
lsBusCts = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(192, 192)).setFixedLength(192)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusCts.setStatus('mandatory')
lsPortAMediaPresent = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("notpresent", 2), ("fiberpresent", 3), ("fiberscpresent", 4), ("utppresent", 5), ("stppresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortAMediaPresent.setStatus('mandatory')
lsPortBMediaPresent = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("notpresent", 2), ("fiberpresent", 3), ("fiberscpresent", 4), ("utppresent", 5), ("stppresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortBMediaPresent.setStatus('mandatory')
lsFMSBackupPSSense = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notpresent", 2), ("goodstatus", 3), ("badstatus", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsFMSBackupPSSense.setStatus('mandatory')
lsfddiPATHRingLatency = MibScalar((1, 3, 6, 1, 4, 1, 43, 17, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfddiPATHRingLatency.setStatus('mandatory')
mibBuilder.exportSymbols("LINKSWITCH-MIB", lsStationsTable=lsStationsTable, lsEportRDirectedCts=lsEportRDirectedCts, lsIPEchoAgingHelp=lsIPEchoAgingHelp, lsEportAction=lsEportAction, lsEportXExcessDeferCts=lsEportXExcessDeferCts, lsEportRTooLongCts=lsEportRTooLongCts, lsEportFtoEBusErrorCts=lsEportFtoEBusErrorCts, lsEportFtoEByteCts=lsEportFtoEByteCts, linkSwitch=linkSwitch, lsEportXDeferredCts=lsEportXDeferredCts, lsSRFilterEnable=lsSRFilterEnable, lsfddiPATHRingLatency=lsfddiPATHRingLatency, lsEportLinkState=lsEportLinkState, lsEportStationsNumber=lsEportStationsNumber, lsEportName=lsEportName, lsEportFtoEPacketCts=lsEportFtoEPacketCts, lsEportRBCastCts=lsEportRBCastCts, lsTestResult=lsTestResult, lsFMSBackupPSSense=lsFMSBackupPSSense, lsEportXUnderrunCts=lsEportXUnderrunCts, lsEportTable=lsEportTable, lsEportRMCastCts=lsEportRMCastCts, lsEportXSQETestFailCts=lsEportXSQETestFailCts, lsEportSQETestEnable=lsEportSQETestEnable, lsEportEtoFDropPktCts=lsEportEtoFDropPktCts, lsProdVerSW=lsProdVerSW, lsEportRFCSErrorCts=lsEportRFCSErrorCts, lsLEDstate=lsLEDstate, lsEportFtoEDropPktCts=lsEportFtoEDropPktCts, lsEportEtoFByteCts=lsEportEtoFByteCts, lsPortAMediaPresent=lsPortAMediaPresent, lsMcastFilterEnable=lsMcastFilterEnable, lsStationsAddrIndex=lsStationsAddrIndex, lsLoopDetectAction=lsLoopDetectAction, lsSegmentFilterEnable=lsSegmentFilterEnable, lsEportTestResult=lsEportTestResult, lsEportXBCastCts=lsEportXBCastCts, lsEportRAlignmentCts=lsEportRAlignmentCts, lsEportXCollAbortCts=lsEportXCollAbortCts, lsProdVerHW=lsProdVerHW, lsEportEntry=lsEportEntry, lsBusCts=lsBusCts, lsEportXDirectedCts=lsEportXDirectedCts, lsEportMCastBurstLimit=lsEportMCastBurstLimit, lsStationsAddress=lsStationsAddress, lsEportNumber=lsEportNumber, lsAddressAgingTimer=lsAddressAgingTimer, lsEportSecsSinceLastClear=lsEportSecsSinceLastClear, lsEportXCSErrCts=lsEportXCSErrCts, lsStationsNumber=lsStationsNumber, lsEportMCastFilterEnable=lsEportMCastFilterEnable, lsStationsPortIndex=lsStationsPortIndex, lsEportXMCastCts=lsEportXMCastCts, lsEportROverrunCts=lsEportROverrunCts, lsStationsEntry=lsStationsEntry, lsEportActivate=lsEportActivate, lsEportEtoFBusErrorCts=lsEportEtoFBusErrorCts, lsEportEtoFPacketCts=lsEportEtoFPacketCts, lsEportXLateCollCts=lsEportXLateCollCts, lsAction=lsAction, lsEportIndex=lsEportIndex, lsPortBMediaPresent=lsPortBMediaPresent, lsEportMCastRate=lsEportMCastRate, lsEportLongPktsEnable=lsEportLongPktsEnable, lsEportEnable=lsEportEnable)
