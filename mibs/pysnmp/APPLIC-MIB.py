#
# PySNMP MIB module APPLIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPLIC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:08:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
lannet, = mibBuilder.importSymbols("GEN-MIB", "lannet")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
historyControlIndex, = mibBuilder.importSymbols("RMON-MIB", "historyControlIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, Counter64, NotificationType, Counter32, ModuleIdentity, Bits, MibIdentifier, Integer32, Gauge32, iso, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Counter64", "NotificationType", "Counter32", "ModuleIdentity", "Bits", "MibIdentifier", "Integer32", "Gauge32", "iso", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lntLanSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19))
lntTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 23))
smon = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 30))
lse = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 1))
lhs = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 2))
lsMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 3))
lst = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 4))
lsVNChange = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 6))
vnsPacket = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 7))
lseGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 1, 1), )
if mibBuilder.loadTexts: lseGroupTable.setStatus('mandatory')
lseGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1), ).setIndexNames((0, "APPLIC-MIB", "lseGroupId"))
if mibBuilder.loadTexts: lseGroupEntry.setStatus('mandatory')
lseGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseGroupId.setStatus('mandatory')
lseGroupFastOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupFastOpen.setStatus('mandatory')
lseGroup10MSqlt = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroup10MSqlt.setStatus('mandatory')
lseGroupSmartSqlt = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupSmartSqlt.setStatus('deprecated')
lseGroupCParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupCParameter.setStatus('mandatory')
lseGroupIPGJamLength = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 124))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupIPGJamLength.setStatus('mandatory')
lseGroupJamLength = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupJamLength.setStatus('mandatory')
lseGroupDataBlinderLength = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 124))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupDataBlinderLength.setStatus('mandatory')
lseGroupIPGDataLength = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 124))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupIPGDataLength.setStatus('mandatory')
lseGroupActiveMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseGroupActiveMonitor.setStatus('mandatory')
lseGroupBackbone12 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupBackbone12.setStatus('mandatory')
lseGroupSetDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupSetDefaults.setStatus('mandatory')
lseGroupBackbone34 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupBackbone34.setStatus('mandatory')
lseGroupBackboneRedun12 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupBackboneRedun12.setStatus('mandatory')
lseGroupBackoffFromJam = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupBackoffFromJam.setStatus('mandatory')
lseGroupCAMClear = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupCAMClear.setStatus('mandatory')
lseGroupJamPrevent = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupJamPrevent.setStatus('mandatory')
lseGroupNormOpCl = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupNormOpCl.setStatus('mandatory')
lseGroupNormOpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupNormOpDelay.setStatus('mandatory')
lseGroupAutoPartitionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupAutoPartitionEnable.setStatus('mandatory')
lseGroupWorkState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("run", 1), ("boot", 2), ("runAndBoot", 3), ("none", 4), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseGroupWorkState.setStatus('mandatory')
lseGroupBITResult = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseGroupBITResult.setStatus('mandatory')
lseGroupAssignSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupAssignSlots.setStatus('mandatory')
lseGroupHSBMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseGroupHSBMonStatus.setStatus('mandatory')
lseGroupEnableHSBReset = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupEnableHSBReset.setStatus('mandatory')
lseIntPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 1, 2))
lseIntPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1), )
if mibBuilder.loadTexts: lseIntPortTable.setStatus('mandatory')
lseIntPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1), ).setIndexNames((0, "APPLIC-MIB", "lseIntPortGroupId"), (0, "APPLIC-MIB", "lseIntPortId"))
if mibBuilder.loadTexts: lseIntPortEntry.setStatus('mandatory')
lseIntPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortGroupId.setStatus('mandatory')
lseIntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortId.setStatus('mandatory')
lseIntPortIOMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortIOMode.setStatus('mandatory')
lseIntPortResetSwitchCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortResetSwitchCAM.setStatus('mandatory')
lseIntPortVideoPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortVideoPacket.setStatus('mandatory')
lseIntPortPriorityStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortPriorityStateMachine.setStatus('mandatory')
lseIntPortActiveBroadcastPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortActiveBroadcastPriority.setStatus('mandatory')
lseIntPortPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("video", 3), ("regular", 4), ("default", 5), ("mngrTerminal", 6), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortPriorityLevel.setStatus('mandatory')
lseIntPortSuperPriorityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortSuperPriorityEnable.setStatus('mandatory')
lseIntPortRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("generic", 1), ("net", 2), ("dst-port", 3), ("allPackets", 4), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRoutingMode.setStatus('mandatory')
lseIntPortGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortGlobal.setStatus('mandatory')
lseIntPortLearnIOCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortLearnIOCAM.setStatus('mandatory')
lseIntPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortSecurity.setStatus('mandatory')
lseIntPortIgnoreBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortIgnoreBusy.setStatus('mandatory')
lseIntPortRetryPriorityLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRetryPriorityLevel1.setStatus('mandatory')
lseIntPortRetryPriorityLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRetryPriorityLevel2.setStatus('mandatory')
lseIntPortRetryPriorityLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRetryPriorityLevel3.setStatus('mandatory')
lseIntPortIgnoreProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ignore", 1), ("not-ignore", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortIgnoreProtocolType.setStatus('mandatory')
lseIntPortCompanyMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortCompanyMAC.setStatus('mandatory')
lseIntPortTxSafetyZone = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortTxSafetyZone.setStatus('mandatory')
lseIntPortRxSafetyZone = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRxSafetyZone.setStatus('mandatory')
lseIntPortTxBurstLength = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortTxBurstLength.setStatus('mandatory')
lseIntPortSecurityIntruder = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortSecurityIntruder.setStatus('mandatory')
lseIntPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortJabber.setStatus('mandatory')
lseIntPortCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 112))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortCAM.setStatus('mandatory')
lseIntPortVideoStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortVideoStateMachine.setStatus('mandatory')
lseIntPortTransmitWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortTransmitWeight.setStatus('mandatory')
lseIntPortSuperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortSuperPriority.setStatus('mandatory')
lseIntPortAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortAlignment.setStatus('mandatory')
lseIntPortRxReject = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortRxReject.setStatus('obsolete')
lseIntPortTxReject = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortTxReject.setStatus('obsolete')
lseIntPortRxEmpty0 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRxEmpty0.setStatus('mandatory')
lseIntPortRxEmpty1 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRxEmpty1.setStatus('mandatory')
lseIntPortRxEmpty2 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRxEmpty2.setStatus('mandatory')
lseIntPortSuperNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortSuperNetNumber.setStatus('mandatory')
lseIntPortGlobalSuperNet = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortGlobalSuperNet.setStatus('mandatory')
lseIntPortMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortMACAddress.setStatus('mandatory')
lseIntPortIgnoreRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ignore", 1), ("notIgnore", 2), ("notSupported", 255))).clone('notIgnore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortIgnoreRoutingMode.setStatus('mandatory')
lseIntPortCAMLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 39), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortCAMLastChange.setStatus('mandatory')
lseIntPortCopiedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortCopiedPort.setStatus('mandatory')
lseIntPortBroadcastBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("normal", 1), ("selective", 2), ("receiveAll", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortBroadcastBehavior.setStatus('mandatory')
lseIntPortFilteringMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("sourceOrDestination", 3), ("group", 4), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortFilteringMethod.setStatus('mandatory')
lseIntPortSetFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 452))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortSetFilter.setStatus('mandatory')
lseIntPortRemoveFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 452))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRemoveFilter.setStatus('mandatory')
lseIntPortClearFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("idle", 1), ("clear", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortClearFilter.setStatus('mandatory')
lseIntPortMonitorMissedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortMonitorMissedEvents.setStatus('mandatory')
lseIntPortMACAdd = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 2))
lseIntPortMACAddTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 2, 1), )
if mibBuilder.loadTexts: lseIntPortMACAddTable.setStatus('mandatory')
lseIntPortMACAddEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 2, 1, 1), ).setIndexNames((0, "APPLIC-MIB", "lseIntPortMACAddGroupId"), (0, "APPLIC-MIB", "lseIntPortMACAddPortId"), (0, "APPLIC-MIB", "lseIntPortMACAddLAId"))
if mibBuilder.loadTexts: lseIntPortMACAddEntry.setStatus('mandatory')
lseIntPortMACAddGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortMACAddGroupId.setStatus('mandatory')
lseIntPortMACAddPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortMACAddPortId.setStatus('mandatory')
lseIntPortMACAddLAId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortMACAddLAId.setStatus('mandatory')
lseIntPortMACAddList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 452))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortMACAddList.setStatus('mandatory')
lseIntPortFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 3))
lseIntPortFilterTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 3, 1), )
if mibBuilder.loadTexts: lseIntPortFilterTable.setStatus('mandatory')
lseIntPortFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 3, 1, 1), ).setIndexNames((0, "APPLIC-MIB", "lseIntPortFilterGroupId"), (0, "APPLIC-MIB", "lseIntPortFilterPortId"), (0, "APPLIC-MIB", "lseIntPortFilterLAId"))
if mibBuilder.loadTexts: lseIntPortFilterEntry.setStatus('mandatory')
lseIntPortFilterGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortFilterGroupId.setStatus('mandatory')
lseIntPortFilterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortFilterPortId.setStatus('mandatory')
lseIntPortFilterLAId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortFilterLAId.setStatus('mandatory')
lseIntPortFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 2, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 452))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortFilterList.setStatus('mandatory')
lsePort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 1, 3))
lsePortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 1, 3, 1), )
if mibBuilder.loadTexts: lsePortTable.setStatus('mandatory')
lsePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 1, 3, 1, 1), ).setIndexNames((0, "APPLIC-MIB", "lsePortGroupId"), (0, "APPLIC-MIB", "lsePortId"))
if mibBuilder.loadTexts: lsePortEntry.setStatus('mandatory')
lsePortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsePortGroupId.setStatus('mandatory')
lsePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsePortId.setStatus('mandatory')
lsePortPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsePortPolarity.setStatus('mandatory')
lsePortBackboneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("fault", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsePortBackboneStatus.setStatus('mandatory')
lhsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 2, 1), )
if mibBuilder.loadTexts: lhsGroupTable.setStatus('mandatory')
lhsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 2, 1, 1), ).setIndexNames((0, "APPLIC-MIB", "lhsGroupId"))
if mibBuilder.loadTexts: lhsGroupEntry.setStatus('mandatory')
lhsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsGroupId.setStatus('mandatory')
lhsGroupMainSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsGroupMainSWVersion.setStatus('mandatory')
lhsGroupProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("other", 1), ("ethernet", 2), ("tokenring", 3), ("ethernet-tokenring", 4), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lhsGroupProtocolType.setStatus('mandatory')
lhsPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 2, 2), )
if mibBuilder.loadTexts: lhsPortTable.setStatus('mandatory')
lhsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1), ).setIndexNames((0, "APPLIC-MIB", "lhsPortGroupId"), (0, "APPLIC-MIB", "lhsPortId"))
if mibBuilder.loadTexts: lhsPortEntry.setStatus('mandatory')
lhsPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsPortGroupId.setStatus('mandatory')
lhsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsPortId.setStatus('mandatory')
lhsTxUCast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsTxUCast.setStatus('mandatory')
lhsTxBCast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsTxBCast.setStatus('mandatory')
lhsTxMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsTxMCast.setStatus('mandatory')
lhsTxUrunErr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsTxUrunErr.setStatus('mandatory')
lhsTxParErr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsTxParErr.setStatus('mandatory')
lhsRxUCast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsRxUCast.setStatus('mandatory')
lhsRxBCast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsRxBCast.setStatus('mandatory')
lhsRxMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsRxMCast.setStatus('mandatory')
lhsRxOrunErr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsRxOrunErr.setStatus('mandatory')
lhsRxParErr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsRxParErr.setStatus('mandatory')
lhsRxRscErr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsRxRscErr.setStatus('mandatory')
lhsRxBadTypeErr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsRxBadTypeErr.setStatus('mandatory')
lhsLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("linkFailure", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lhsLinkStatus.setStatus('mandatory')
lsMonitorResourceAllocation = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("hostStats", 2), ("portExtendedStats", 3), ("hostMatrix", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsMonitorResourceAllocation.setStatus('mandatory')
lsBusStats = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 3, 2))
lsBusStatsDropEvents = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsDropEvents.setStatus('mandatory')
lsBusStatsPkts = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsPkts.setStatus('mandatory')
lsBusStatsOctets = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsOctets.setStatus('mandatory')
lsBusStatsUtilization = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsUtilization.setStatus('mandatory')
lsBusStatsEthBroadcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsEthBroadcastPkts.setStatus('mandatory')
lsBusStatsMulticastPkts = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsMulticastPkts.setStatus('mandatory')
lsBusStatsGoodEthPkts = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsGoodEthPkts.setStatus('mandatory')
lsBusStatsGoodEthOctets = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsGoodEthOctets.setStatus('mandatory')
lsBusStatsBadEthPkts = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsBadEthPkts.setStatus('mandatory')
lsBusStatsBadEthOctets = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsBadEthOctets.setStatus('mandatory')
lsBusStatsNonEthPkts = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsNonEthPkts.setStatus('mandatory')
lsBusStatsNonEthOctets = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsNonEthOctets.setStatus('mandatory')
lsBusStatsPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 13), )
if mibBuilder.loadTexts: lsBusStatsPriorityTable.setStatus('mandatory')
lsBusStatsPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 13, 1), ).setIndexNames((0, "APPLIC-MIB", "lsBusStatsPriorityIndex"))
if mibBuilder.loadTexts: lsBusStatsPriorityEntry.setStatus('mandatory')
lsBusStatsPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsPriorityIndex.setStatus('mandatory')
lsBusStatsPriorityPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsPriorityPkts.setStatus('mandatory')
lsBusStatsPriorityOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsPriorityOctets.setStatus('mandatory')
lsBusStatsVirtualNetList = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsVirtualNetList.setStatus('mandatory')
lsBusStatsVirtualNetTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 15), )
if mibBuilder.loadTexts: lsBusStatsVirtualNetTable.setStatus('mandatory')
lsBusStatsVirtualNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 15, 1), ).setIndexNames((0, "APPLIC-MIB", "lsBusStatsVirtualNet"))
if mibBuilder.loadTexts: lsBusStatsVirtualNetEntry.setStatus('mandatory')
lsBusStatsVirtualNet = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsVirtualNet.setStatus('mandatory')
lsBusStatsVirtualNetPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsVirtualNetPackets.setStatus('mandatory')
lsBusStatsVirtualNetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 2, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBusStatsVirtualNetOctets.setStatus('mandatory')
lsPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 3, 3))
lsPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 1), )
if mibBuilder.loadTexts: lsPortControlTable.setStatus('mandatory')
lsPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 1, 1), ).setIndexNames((0, "APPLIC-MIB", "lsPortControlIndex"))
if mibBuilder.loadTexts: lsPortControlEntry.setStatus('mandatory')
lsPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortControlIndex.setStatus('mandatory')
lsPortControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPortControlDataSource.setStatus('mandatory')
lsPortControlTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortControlTableSize.setStatus('mandatory')
lsPortControlLastDeleteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortControlLastDeleteTime.setStatus('mandatory')
lsPortControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPortControlOwner.setStatus('mandatory')
lsPortControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPortControlStatus.setStatus('mandatory')
lsPortFilterTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 2), )
if mibBuilder.loadTexts: lsPortFilterTable.setStatus('mandatory')
lsPortFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 2, 1), ).setIndexNames((0, "APPLIC-MIB", "lsPortFilter"))
if mibBuilder.loadTexts: lsPortFilterEntry.setStatus('mandatory')
lsPortFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortFilter.setStatus('mandatory')
lsPortFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPortFilterStatus.setStatus('mandatory')
lsPortFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPortFilterTableClear.setStatus('mandatory')
lsPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 4), )
if mibBuilder.loadTexts: lsPortTable.setStatus('mandatory')
lsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 4, 1), ).setIndexNames((0, "APPLIC-MIB", "lsPortNumber"))
if mibBuilder.loadTexts: lsPortEntry.setStatus('mandatory')
lsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortNumber.setStatus('mandatory')
lsPortInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortInPkts.setStatus('mandatory')
lsPortInFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortInFCSErrors.setStatus('mandatory')
lsPortInTooLongPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortInTooLongPkts.setStatus('mandatory')
lsPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortInOctets.setStatus('mandatory')
lsPortInTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortInTotalErrors.setStatus('mandatory')
lsPortInCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortInCollisions.setStatus('mandatory')
lsPortExtendedReportingList = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortExtendedReportingList.setStatus('mandatory')
lsPortExtendedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 6), )
if mibBuilder.loadTexts: lsPortExtendedStatsTable.setStatus('mandatory')
lsPortExtendedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 6, 1), ).setIndexNames((0, "APPLIC-MIB", "lsPortExtendedStatsNumber"))
if mibBuilder.loadTexts: lsPortExtendedStatsEntry.setStatus('mandatory')
lsPortExtendedStatsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortExtendedStatsNumber.setStatus('mandatory')
lsPortCreationOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortCreationOrder.setStatus('mandatory')
lsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortIndex.setStatus('mandatory')
lsPortOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortOutPkts.setStatus('mandatory')
lsPortInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortInBroadcastPkts.setStatus('mandatory')
lsPortInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortInMulticastPkts.setStatus('mandatory')
lsHostFilterTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 4), )
if mibBuilder.loadTexts: lsHostFilterTable.setStatus('mandatory')
lsHostFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 4, 1), ).setIndexNames((0, "APPLIC-MIB", "lsHostFilterAddress"))
if mibBuilder.loadTexts: lsHostFilterEntry.setStatus('mandatory')
lsHostFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHostFilterAddress.setStatus('mandatory')
lsHostFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsHostFilterStatus.setStatus('mandatory')
lsHostFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsHostFilterTableClear.setStatus('mandatory')
lsHostPortFilterTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 6), )
if mibBuilder.loadTexts: lsHostPortFilterTable.setStatus('mandatory')
lsHostPortFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 6, 1), ).setIndexNames((0, "APPLIC-MIB", "lsHostPortFilter"))
if mibBuilder.loadTexts: lsHostPortFilterEntry.setStatus('mandatory')
lsHostPortFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHostPortFilter.setStatus('mandatory')
lsHostPortFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsHostPortFilterStatus.setStatus('mandatory')
lsHostPortFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsHostPortFilterTableClear.setStatus('mandatory')
lsMatrixFilterTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 8), )
if mibBuilder.loadTexts: lsMatrixFilterTable.setStatus('mandatory')
lsMatrixFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 8, 1), ).setIndexNames((0, "APPLIC-MIB", "lsMatrixFilterAddress"))
if mibBuilder.loadTexts: lsMatrixFilterEntry.setStatus('mandatory')
lsMatrixFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 8, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsMatrixFilterAddress.setStatus('mandatory')
lsMatrixFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsMatrixFilterStatus.setStatus('mandatory')
lsMatrixFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsMatrixFilterTableClear.setStatus('mandatory')
lsHostTimePortCorrTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 10), )
if mibBuilder.loadTexts: lsHostTimePortCorrTable.setStatus('mandatory')
lsHostTimePortCorrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 10, 1), ).setIndexNames((0, "APPLIC-MIB", "hostTimeIndex"), (0, "APPLIC-MIB", "hostTimeCreationOrder"))
if mibBuilder.loadTexts: lsHostTimePortCorrEntry.setStatus('mandatory')
hostTimeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 10, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeAddress.setStatus('mandatory')
hostTimeCreationOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeCreationOrder.setStatus('mandatory')
hostTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeIndex.setStatus('mandatory')
hostTimePortConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimePortConnection.setStatus('mandatory')
lsHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 3, 11), )
if mibBuilder.loadTexts: lsHistoryTable.setStatus('mandatory')
lsHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1), ).setIndexNames((0, "APPLIC-MIB", "lsHistoryIndex"), (0, "APPLIC-MIB", "lsHistorySampleIndex"))
if mibBuilder.loadTexts: lsHistoryEntry.setStatus('mandatory')
lsHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryIndex.setStatus('mandatory')
lsHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistorySampleIndex.setStatus('mandatory')
lsHistoryIntervalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryIntervalTime.setStatus('mandatory')
lsHistoryStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsDropEvents.setStatus('mandatory')
lsHistoryStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsPkts.setStatus('mandatory')
lsHistoryStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsOctets.setStatus('mandatory')
lsHistoryStatsEthBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsEthBroadcastPkts.setStatus('mandatory')
lsHistoryStatsEthMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsEthMulticastPkts.setStatus('mandatory')
lsHistoryStatsGoodEthPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsGoodEthPkts.setStatus('mandatory')
lsHistoryStatsGoodEthOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsGoodEthOctets.setStatus('mandatory')
lsHistoryStatsBadEthPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsBadEthPkts.setStatus('mandatory')
lsHistoryStatsBadEthOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsBadEthOctets.setStatus('mandatory')
lsHistoryStatsNonEthPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsNonEthPkts.setStatus('mandatory')
lsHistoryStatsNonEthOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsNonEthOctets.setStatus('mandatory')
lsHistoryStatsPriority1Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsPriority1Pkts.setStatus('mandatory')
lsHistoryStatsPriority1Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsPriority1Octets.setStatus('mandatory')
lsHistoryStatsPriority2Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsPriority2Pkts.setStatus('mandatory')
lsHistoryStatsPriority2Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsPriority2Octets.setStatus('mandatory')
lsHistoryStatsPriority3Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsPriority3Pkts.setStatus('mandatory')
lsHistoryStatsPriority3Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsPriority3Octets.setStatus('mandatory')
lsHistoryStatsPriority4Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsPriority4Pkts.setStatus('mandatory')
lsHistoryStatsPriority4Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryStatsPriority4Octets.setStatus('mandatory')
lsHistoryBusUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 3, 11, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsHistoryBusUtilization.setStatus('mandatory')
lstIntPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 19, 4, 1))
lstIntPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1), )
if mibBuilder.loadTexts: lstIntPortTable.setStatus('mandatory')
lstIntPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1), ).setIndexNames((0, "APPLIC-MIB", "lstIntPortGroupId"), (0, "APPLIC-MIB", "lstIntPortId"))
if mibBuilder.loadTexts: lstIntPortEntry.setStatus('mandatory')
lstIntPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortGroupId.setStatus('mandatory')
lstIntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortId.setStatus('mandatory')
lstIntPortSidebandMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortSidebandMode.setStatus('mandatory')
lstIntPortTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortTotalOctets.setStatus('mandatory')
lstIntPortTotalTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortTotalTraffic.setStatus('mandatory')
lstIntPortLocalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortLocalOctets.setStatus('mandatory')
lstIntPortLocalTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortLocalTraffic.setStatus('mandatory')
lstIntPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortInOctets.setStatus('mandatory')
lstIntPortInTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortInTraffic.setStatus('mandatory')
lstIntPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortOutOctets.setStatus('mandatory')
lstIntPortOutTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortOutTraffic.setStatus('mandatory')
lstIntPortTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortTotalFrames.setStatus('mandatory')
lstIntPortLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortLostFrames.setStatus('mandatory')
lstIntPortClaimFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortClaimFrames.setStatus('mandatory')
lstIntPortPurgeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortPurgeFrames.setStatus('mandatory')
lstIntPortNormallyCloseOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("normallyClose", 1), ("normallyOpen", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortNormallyCloseOpen.setStatus('mandatory')
lstIntPortSlicingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortSlicingEnable.setStatus('mandatory')
lstIntPortSliceLength = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortSliceLength.setStatus('mandatory')
lstIntPortUNAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortUNAddr.setStatus('mandatory')
lstIntPortMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIntPortMACAddress.setStatus('mandatory')
lstIntPortSMPTransmitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortSMPTransmitEnable.setStatus('mandatory')
lstIntPortIPGLength = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortIPGLength.setStatus('mandatory')
lstIntPortBPDummyWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortBPDummyWindow.setStatus('mandatory')
lstIntPortBPTokenWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortBPTokenWindow.setStatus('mandatory')
lstIntPortTransmitWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortTransmitWindow.setStatus('mandatory')
lstIntPortBlockingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortBlockingPriority.setStatus('mandatory')
lstIntPortNormalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortNormalPriority.setStatus('mandatory')
lstIntPortDummyMV = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortDummyMV.setStatus('mandatory')
lstIntPortTxConsecutiveBusiesThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortTxConsecutiveBusiesThresh.setStatus('mandatory')
lstIntPortTxBufFullThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortTxBufFullThresh.setStatus('mandatory')
lstIntPortRxEmpty0 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortRxEmpty0.setStatus('mandatory')
lstIntPortRxEmpty1 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortRxEmpty1.setStatus('mandatory')
lstIntPortRxEmpty2 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortRxEmpty2.setStatus('mandatory')
lstIntPortRxFull = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortRxFull.setStatus('mandatory')
lstIntPortBPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortBPEnable.setStatus('mandatory')
lstIntPortRouteSideband = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 4, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lstIntPortRouteSideband.setStatus('mandatory')
lseWANTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 5), )
if mibBuilder.loadTexts: lseWANTable.setStatus('mandatory')
lseWANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 5, 1), ).setIndexNames((0, "APPLIC-MIB", "lseWANGroupId"), (0, "APPLIC-MIB", "lseWANPortId"))
if mibBuilder.loadTexts: lseWANEntry.setStatus('mandatory')
lseWANGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseWANGroupId.setStatus('mandatory')
lseWANPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseWANPortId.setStatus('mandatory')
lseWANConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseWANConnection.setStatus('mandatory')
lsVNChangeMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsVNChangeMACAddress.setStatus('mandatory')
lsVNChangeDetected = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsVNChangeDetected.setStatus('mandatory')
lsVNChangeExpected = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsVNChangeExpected.setStatus('mandatory')
lsVNChangeGroup = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsVNChangeGroup.setStatus('mandatory')
lsVNChangePort = MibScalar((1, 3, 6, 1, 4, 1, 81, 19, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsVNChangePort.setStatus('mandatory')
vnsPacketTable = MibTable((1, 3, 6, 1, 4, 1, 81, 19, 7, 1), )
if mibBuilder.loadTexts: vnsPacketTable.setStatus('mandatory')
vnsPacketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1), ).setIndexNames((0, "APPLIC-MIB", "vnsPacketMACAddress"))
if mibBuilder.loadTexts: vnsPacketEntry.setStatus('mandatory')
vnsPacketMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketMACAddress.setStatus('mandatory')
vnsPacketProtocolTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketProtocolTypeMask.setStatus('mandatory')
vnsPacketIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketIPAddress.setStatus('mandatory')
vnsPacketIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketIPNetMask.setStatus('mandatory')
vnsPacketIPXnetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketIPXnetwork.setStatus('mandatory')
vnsPacketStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("unknown", 1), ("client", 2), ("server", 3), ("notSupported", 255))).clone('notSupported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketStationType.setStatus('mandatory')
vnsPacketPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketPortGroupId.setStatus('mandatory')
vnsPacketPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketPortId.setStatus('mandatory')
vnsPacketBackbonePort = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("unknown", 1), ("backbone", 2), ("noBackbone", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketBackbonePort.setStatus('mandatory')
vnsPacketExpectedVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketExpectedVLAN.setStatus('mandatory')
vnsPacketDetectedVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketDetectedVLAN.setStatus('mandatory')
vnsPacketBoxAgentIP = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 19, 7, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vnsPacketBoxAgentIP.setStatus('mandatory')
topDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 81, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("idle", 1), ("topoMessages", 2), ("macFind", 3), ("swBackboneMsgMonitor", 4), ("notSupported", 255))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topDiscovery.setStatus('mandatory')
topDiscoveryTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 81, 23, 2), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topDiscoveryTimeOut.setStatus('mandatory')
ethTop = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 23, 3))
ethTopDiscoveryTx = MibScalar((1, 3, 6, 1, 4, 1, 81, 23, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("txInterhubMsg", 2), ("txBridgeMsg", 3), ("txAckMsg", 4))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethTopDiscoveryTx.setStatus('mandatory')
ethTopClearMessageResult = MibScalar((1, 3, 6, 1, 4, 1, 81, 23, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("clear", 2))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethTopClearMessageResult.setStatus('mandatory')
ethTopNumOfMessageResults = MibScalar((1, 3, 6, 1, 4, 1, 81, 23, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethTopNumOfMessageResults.setStatus('mandatory')
ethTopMessageResultTable = MibTable((1, 3, 6, 1, 4, 1, 81, 23, 3, 4), )
if mibBuilder.loadTexts: ethTopMessageResultTable.setStatus('mandatory')
ethTopMessageResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 23, 3, 4, 1), ).setIndexNames((0, "APPLIC-MIB", "ethTopMessageResultId"))
if mibBuilder.loadTexts: ethTopMessageResultEntry.setStatus('mandatory')
ethTopMessageResultId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 23, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTopMessageResultId.setStatus('mandatory')
ethTopMessageResult = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 23, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTopMessageResult.setStatus('mandatory')
ethTopMACFindList = MibScalar((1, 3, 6, 1, 4, 1, 81, 23, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethTopMACFindList.setStatus('mandatory')
ethTopMACFindResultTable = MibTable((1, 3, 6, 1, 4, 1, 81, 23, 3, 6), )
if mibBuilder.loadTexts: ethTopMACFindResultTable.setStatus('mandatory')
ethTopMACFindResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 23, 3, 6, 1), ).setIndexNames((0, "APPLIC-MIB", "ethTopMACFindBus"))
if mibBuilder.loadTexts: ethTopMACFindResultEntry.setStatus('mandatory')
ethTopMACFindBus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 23, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTopMACFindBus.setStatus('mandatory')
ethTopMACFindResult = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 23, 3, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTopMACFindResult.setStatus('mandatory')
ethTopLSATable = MibTable((1, 3, 6, 1, 4, 1, 81, 23, 3, 7), )
if mibBuilder.loadTexts: ethTopLSATable.setStatus('mandatory')
ethTopLSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 23, 3, 7, 1), ).setIndexNames((0, "APPLIC-MIB", "ethTopLSAId"))
if mibBuilder.loadTexts: ethTopLSAEntry.setStatus('mandatory')
ethTopLSAId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 23, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTopLSAId.setStatus('mandatory')
ethTopLSA = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 23, 3, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(384, 384)).setFixedLength(384)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTopLSA.setStatus('mandatory')
ethTopAddressTable = MibTable((1, 3, 6, 1, 4, 1, 81, 23, 3, 8), )
if mibBuilder.loadTexts: ethTopAddressTable.setStatus('mandatory')
ethTopAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 23, 3, 8, 1), ).setIndexNames((0, "APPLIC-MIB", "ethTopBus"))
if mibBuilder.loadTexts: ethTopAddressEntry.setStatus('mandatory')
ethTopBus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 23, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTopBus.setStatus('mandatory')
ethTopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 23, 3, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethTopAddress.setStatus('mandatory')
ethTopHSBMonitor = MibScalar((1, 3, 6, 1, 4, 1, 81, 23, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("idle", 1), ("startMonitor", 2), ("notSupported", 255))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethTopHSBMonitor.setStatus('mandatory')
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 30, 1))
alarmMonitorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 81, 30, 1, 1), )
if mibBuilder.loadTexts: alarmMonitorStatusTable.setStatus('mandatory')
alarmMonitorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 30, 1, 1, 1), ).setIndexNames((0, "APPLIC-MIB", "alarmMonitorStatusIndex"))
if mibBuilder.loadTexts: alarmMonitorStatusEntry.setStatus('mandatory')
alarmMonitorStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMonitorStatusIndex.setStatus('mandatory')
alarmMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("alarmState", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMonitorStatus.setStatus('mandatory')
alarmUtilitiesCommand = MibScalar((1, 3, 6, 1, 4, 1, 81, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("idle", 1), ("clearAll", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmUtilitiesCommand.setStatus('mandatory')
portHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 30, 3))
portHistoryExtendedControlTable = MibTable((1, 3, 6, 1, 4, 1, 81, 30, 3, 1), )
if mibBuilder.loadTexts: portHistoryExtendedControlTable.setStatus('mandatory')
portHistoryExtendedControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 30, 3, 1, 1), ).setIndexNames((0, "RMON-MIB", "historyControlIndex"))
if mibBuilder.loadTexts: portHistoryExtendedControlEntry.setStatus('mandatory')
portHistoryExtendedControlCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistoryExtendedControlCreateTime.setStatus('mandatory')
portHistoryExtendedControlLastBucketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistoryExtendedControlLastBucketIndex.setStatus('mandatory')
portHistoryExtendedControlNumberOfBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistoryExtendedControlNumberOfBuckets.setStatus('mandatory')
portHistoryExtendedControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHistoryExtendedControlName.setStatus('mandatory')
lsPortHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 81, 30, 3, 2), )
if mibBuilder.loadTexts: lsPortHistoryTable.setStatus('mandatory')
lsPortHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 30, 3, 2, 1), ).setIndexNames((0, "APPLIC-MIB", "lsPortHistoryIndex"), (0, "APPLIC-MIB", "lsPortHistorySampleIndex"), (0, "APPLIC-MIB", "lsPortNumber"))
if mibBuilder.loadTexts: lsPortHistoryEntry.setStatus('mandatory')
lsPortHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortHistoryIndex.setStatus('mandatory')
lsPortHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortHistorySampleIndex.setStatus('mandatory')
lsPortHistoryIntervalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortHistoryIntervalTime.setStatus('mandatory')
lsPortHistoryBoxConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortHistoryBoxConfiguration.setStatus('mandatory')
lsPortHistoryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortHistoryPkts.setStatus('mandatory')
lsPortHistoryCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortHistoryCollisions.setStatus('mandatory')
lsPortHistoryTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPortHistoryTotalErrors.setStatus('mandatory')
scPortHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 81, 30, 3, 3), )
if mibBuilder.loadTexts: scPortHistoryTable.setStatus('mandatory')
scPortHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 30, 3, 3, 1), ).setIndexNames((0, "APPLIC-MIB", "scPortHistoryIndex"), (0, "APPLIC-MIB", "scPortHistorySampleIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: scPortHistoryEntry.setStatus('mandatory')
scPortHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPortHistoryIndex.setStatus('mandatory')
scPortHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPortHistorySampleIndex.setStatus('mandatory')
scPortHistoryIntervalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPortHistoryIntervalTime.setStatus('mandatory')
scPortHistoryBoxConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPortHistoryBoxConfiguration.setStatus('mandatory')
scPortHistoryGoodPktsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPortHistoryGoodPktsRec.setStatus('mandatory')
scPortHistoryGoodNonUnicastPktsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPortHistoryGoodNonUnicastPktsRec.setStatus('mandatory')
scPortHistoryCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPortHistoryCollisions.setStatus('mandatory')
scPortHistoryBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPortHistoryBadPkts.setStatus('mandatory')
scPortHistoryGoodPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 30, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPortHistoryGoodPktsSent.setStatus('mandatory')
portHistoryMemoryAvailability = MibScalar((1, 3, 6, 1, 4, 1, 81, 30, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("standard", 1), ("limited1", 2), ("limited2", 3), ("notSupported", 255))).clone('standard')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistoryMemoryAvailability.setStatus('mandatory')
mibBuilder.exportSymbols("APPLIC-MIB", lsePortBackboneStatus=lsePortBackboneStatus, lstIntPortSliceLength=lstIntPortSliceLength, lseGroupTable=lseGroupTable, lst=lst, lseIntPortIgnoreProtocolType=lseIntPortIgnoreProtocolType, lsBusStatsPriorityEntry=lsBusStatsPriorityEntry, smon=smon, lseGroupSetDefaults=lseGroupSetDefaults, lsVNChangeDetected=lsVNChangeDetected, lstIntPortRxEmpty1=lstIntPortRxEmpty1, lsBusStats=lsBusStats, lstIntPortInTraffic=lstIntPortInTraffic, scPortHistoryEntry=scPortHistoryEntry, lseIntPortRetryPriorityLevel2=lseIntPortRetryPriorityLevel2, lstIntPortTotalOctets=lstIntPortTotalOctets, lsHistoryIndex=lsHistoryIndex, lseGroupCAMClear=lseGroupCAMClear, ethTopMACFindList=ethTopMACFindList, lsBusStatsMulticastPkts=lsBusStatsMulticastPkts, lseIntPortAlignment=lseIntPortAlignment, lstIntPortTxConsecutiveBusiesThresh=lstIntPortTxConsecutiveBusiesThresh, ethTopLSA=ethTopLSA, lseGroupBITResult=lseGroupBITResult, lseGroupIPGJamLength=lseGroupIPGJamLength, lseGroupNormOpDelay=lseGroupNormOpDelay, ethTopLSAEntry=ethTopLSAEntry, lseIntPortIgnoreBusy=lseIntPortIgnoreBusy, lsHistoryStatsPriority3Octets=lsHistoryStatsPriority3Octets, lsPortExtendedStatsEntry=lsPortExtendedStatsEntry, vnsPacketBoxAgentIP=vnsPacketBoxAgentIP, lsHistoryStatsEthMulticastPkts=lsHistoryStatsEthMulticastPkts, lsHistoryStatsGoodEthOctets=lsHistoryStatsGoodEthOctets, lseIntPortSuperNetNumber=lseIntPortSuperNetNumber, lhsRxUCast=lhsRxUCast, lsPortExtendedStatsTable=lsPortExtendedStatsTable, lstIntPortDummyMV=lstIntPortDummyMV, lsPortInBroadcastPkts=lsPortInBroadcastPkts, lseIntPortTransmitWeight=lseIntPortTransmitWeight, portHistoryExtendedControlEntry=portHistoryExtendedControlEntry, ethTopMessageResultTable=ethTopMessageResultTable, lstIntPortTxBufFullThresh=lstIntPortTxBufFullThresh, lsHistoryStatsPriority4Pkts=lsHistoryStatsPriority4Pkts, lseGroup10MSqlt=lseGroup10MSqlt, lhsTxBCast=lhsTxBCast, lseIntPortMonitorMissedEvents=lseIntPortMonitorMissedEvents, lstIntPortNormallyCloseOpen=lstIntPortNormallyCloseOpen, vnsPacketBackbonePort=vnsPacketBackbonePort, lsPortInTooLongPkts=lsPortInTooLongPkts, portHistoryMemoryAvailability=portHistoryMemoryAvailability, ethTopAddress=ethTopAddress, lstIntPortMACAddress=lstIntPortMACAddress, lseIntPortRetryPriorityLevel3=lseIntPortRetryPriorityLevel3, alarmMonitorStatusIndex=alarmMonitorStatusIndex, lseGroupJamLength=lseGroupJamLength, portHistoryExtendedControlName=portHistoryExtendedControlName, lseIntPortFilterLAId=lseIntPortFilterLAId, lstIntPortUNAddr=lstIntPortUNAddr, lstIntPortOutTraffic=lstIntPortOutTraffic, lhsRxOrunErr=lhsRxOrunErr, lsHostTimePortCorrEntry=lsHostTimePortCorrEntry, lsPortControlDataSource=lsPortControlDataSource, lsPortExtendedStatsNumber=lsPortExtendedStatsNumber, lsVNChangeExpected=lsVNChangeExpected, lsPortHistoryTotalErrors=lsPortHistoryTotalErrors, lsPortHistoryEntry=lsPortHistoryEntry, lsPortCreationOrder=lsPortCreationOrder, lseIntPortRxReject=lseIntPortRxReject, lsBusStatsBadEthOctets=lsBusStatsBadEthOctets, ethTopBus=ethTopBus, scPortHistoryGoodPktsSent=scPortHistoryGoodPktsSent, alarmMonitorStatusTable=alarmMonitorStatusTable, lseGroupBackbone34=lseGroupBackbone34, lseIntPortFilterTable=lseIntPortFilterTable, lsHistoryStatsOctets=lsHistoryStatsOctets, lsPortNumber=lsPortNumber, lsMonitor=lsMonitor, lseIntPortSecurityIntruder=lseIntPortSecurityIntruder, lseIntPortLearnIOCAM=lseIntPortLearnIOCAM, lstIntPortSMPTransmitEnable=lstIntPortSMPTransmitEnable, ethTopNumOfMessageResults=ethTopNumOfMessageResults, lsHostPortFilterEntry=lsHostPortFilterEntry, lhsRxRscErr=lhsRxRscErr, lseGroupEntry=lseGroupEntry, vnsPacketStationType=vnsPacketStationType, ethTopClearMessageResult=ethTopClearMessageResult, lseIntPortIOMode=lseIntPortIOMode, lsPortHistorySampleIndex=lsPortHistorySampleIndex, lstIntPortTransmitWindow=lstIntPortTransmitWindow, lsHistorySampleIndex=lsHistorySampleIndex, lsHistoryStatsPriority4Octets=lsHistoryStatsPriority4Octets, lsBusStatsNonEthPkts=lsBusStatsNonEthPkts, ethTop=ethTop, lseIntPortRetryPriorityLevel1=lseIntPortRetryPriorityLevel1, lhsRxBCast=lhsRxBCast, lsBusStatsPriorityPkts=lsBusStatsPriorityPkts, vnsPacketExpectedVLAN=vnsPacketExpectedVLAN, ethTopMACFindBus=ethTopMACFindBus, vnsPacketIPAddress=vnsPacketIPAddress, lsBusStatsPriorityIndex=lsBusStatsPriorityIndex, lsHistoryStatsGoodEthPkts=lsHistoryStatsGoodEthPkts, lhsGroupId=lhsGroupId, lstIntPortBPEnable=lstIntPortBPEnable, lseIntPortRoutingMode=lseIntPortRoutingMode, lhsTxParErr=lhsTxParErr, lseIntPortEntry=lseIntPortEntry, lhsLinkStatus=lhsLinkStatus, lsPortTable=lsPortTable, ethTopMessageResultId=ethTopMessageResultId, lsBusStatsPriorityOctets=lsBusStatsPriorityOctets, ethTopLSATable=ethTopLSATable, lsPortIndex=lsPortIndex, topDiscovery=topDiscovery, lseIntPortTxBurstLength=lseIntPortTxBurstLength, lseIntPortRxEmpty1=lseIntPortRxEmpty1, ethTopAddressEntry=ethTopAddressEntry, lseIntPortTable=lseIntPortTable, lsPortHistoryIndex=lsPortHistoryIndex, lseIntPortPriorityLevel=lseIntPortPriorityLevel, lhsTxUCast=lhsTxUCast, scPortHistoryBadPkts=scPortHistoryBadPkts, lstIntPortLocalOctets=lstIntPortLocalOctets, lsPortControlTableSize=lsPortControlTableSize, scPortHistoryCollisions=scPortHistoryCollisions, lstIntPortBPDummyWindow=lstIntPortBPDummyWindow, lseWANEntry=lseWANEntry, lsVNChangeGroup=lsVNChangeGroup, lsHistoryStatsPriority2Pkts=lsHistoryStatsPriority2Pkts, lsHostFilterTableClear=lsHostFilterTableClear, lsHistoryStatsNonEthPkts=lsHistoryStatsNonEthPkts, lstIntPortTotalTraffic=lstIntPortTotalTraffic, lstIntPortGroupId=lstIntPortGroupId, lsBusStatsVirtualNetEntry=lsBusStatsVirtualNetEntry, lhsGroupEntry=lhsGroupEntry, lsHistoryStatsDropEvents=lsHistoryStatsDropEvents, lsBusStatsPkts=lsBusStatsPkts, lsHistoryTable=lsHistoryTable, scPortHistoryGoodPktsRec=scPortHistoryGoodPktsRec, lsHistoryIntervalTime=lsHistoryIntervalTime, lseIntPortRxEmpty2=lseIntPortRxEmpty2, lstIntPortSlicingEnable=lstIntPortSlicingEnable, lsHistoryStatsEthBroadcastPkts=lsHistoryStatsEthBroadcastPkts, scPortHistoryBoxConfiguration=scPortHistoryBoxConfiguration, hostTimePortConnection=hostTimePortConnection, lseIntPortPriorityStateMachine=lseIntPortPriorityStateMachine, lhsPortTable=lhsPortTable, alarms=alarms, lsPortFilterTableClear=lsPortFilterTableClear, ethTopMessageResult=ethTopMessageResult, lseGroupIPGDataLength=lseGroupIPGDataLength, lsPortInOctets=lsPortInOctets, lhsGroupTable=lhsGroupTable, scPortHistoryGoodNonUnicastPktsRec=scPortHistoryGoodNonUnicastPktsRec, lsPortStats=lsPortStats, lsPortHistoryBoxConfiguration=lsPortHistoryBoxConfiguration, lsPortOutPkts=lsPortOutPkts, lsBusStatsVirtualNetList=lsBusStatsVirtualNetList, lsHostPortFilter=lsHostPortFilter, vnsPacketIPNetMask=vnsPacketIPNetMask, lseIntPortId=lseIntPortId, lsMatrixFilterStatus=lsMatrixFilterStatus, lseIntPortCopiedPort=lseIntPortCopiedPort, lseWANConnection=lseWANConnection, ethTopHSBMonitor=ethTopHSBMonitor, lstIntPortBPTokenWindow=lstIntPortBPTokenWindow, lstIntPortOutOctets=lstIntPortOutOctets, lsBusStatsGoodEthOctets=lsBusStatsGoodEthOctets, lseWANTable=lseWANTable, lsPortFilterTable=lsPortFilterTable, lsPortControlLastDeleteTime=lsPortControlLastDeleteTime, hostTimeIndex=hostTimeIndex, lhsRxParErr=lhsRxParErr, lsHostPortFilterStatus=lsHostPortFilterStatus, lhsPortEntry=lhsPortEntry, hostTimeAddress=hostTimeAddress, lseIntPortFilter=lseIntPortFilter, lsePortGroupId=lsePortGroupId, vnsPacketPortGroupId=vnsPacketPortGroupId, lsMatrixFilterTable=lsMatrixFilterTable, lsBusStatsVirtualNetTable=lsBusStatsVirtualNetTable, lsPortEntry=lsPortEntry, lhsGroupMainSWVersion=lhsGroupMainSWVersion, lseIntPortFilteringMethod=lseIntPortFilteringMethod, lsPortFilter=lsPortFilter, lsHostFilterStatus=lsHostFilterStatus, lseIntPortMACAddLAId=lseIntPortMACAddLAId, lstIntPortRxEmpty2=lstIntPortRxEmpty2, lsHostFilterTable=lsHostFilterTable, lseIntPortRxEmpty0=lseIntPortRxEmpty0, portHistoryExtendedControlTable=portHistoryExtendedControlTable, lsBusStatsUtilization=lsBusStatsUtilization, lhsTxUrunErr=lhsTxUrunErr, lsPortControlEntry=lsPortControlEntry, lseGroupNormOpCl=lseGroupNormOpCl, lsBusStatsNonEthOctets=lsBusStatsNonEthOctets, scPortHistoryTable=scPortHistoryTable, lstIntPortRxEmpty0=lstIntPortRxEmpty0, lsBusStatsDropEvents=lsBusStatsDropEvents, lsePortPolarity=lsePortPolarity, lsePortEntry=lsePortEntry, lsPortInMulticastPkts=lsPortInMulticastPkts, lstIntPortRxFull=lstIntPortRxFull, lseGroupJamPrevent=lseGroupJamPrevent, lseIntPortResetSwitchCAM=lseIntPortResetSwitchCAM, ethTopMACFindResultTable=ethTopMACFindResultTable, lstIntPortId=lstIntPortId, lseGroupBackbone12=lseGroupBackbone12, scPortHistorySampleIndex=scPortHistorySampleIndex, lsVNChange=lsVNChange, lseIntPortRxSafetyZone=lseIntPortRxSafetyZone, lsePortId=lsePortId, lsMatrixFilterTableClear=lsMatrixFilterTableClear, lhsTxMCast=lhsTxMCast, lseIntPortSecurity=lseIntPortSecurity, lseIntPortRemoveFilter=lseIntPortRemoveFilter, vnsPacketProtocolTypeMask=vnsPacketProtocolTypeMask, ethTopMessageResultEntry=ethTopMessageResultEntry, lsPortFilterEntry=lsPortFilterEntry, lseIntPortFilterList=lseIntPortFilterList, lsMatrixFilterEntry=lsMatrixFilterEntry, lsePortTable=lsePortTable, lsPortExtendedReportingList=lsPortExtendedReportingList, vnsPacket=vnsPacket, lntTopology=lntTopology, lseIntPortIgnoreRoutingMode=lseIntPortIgnoreRoutingMode, lseGroupCParameter=lseGroupCParameter, lsPortInTotalErrors=lsPortInTotalErrors, lseIntPortMACAddList=lseIntPortMACAddList, lsHostFilterEntry=lsHostFilterEntry, ethTopAddressTable=ethTopAddressTable, lsHostTimePortCorrTable=lsHostTimePortCorrTable, lsHistoryStatsPkts=lsHistoryStatsPkts, lseWANPortId=lseWANPortId, lsHostFilterAddress=lsHostFilterAddress, lseIntPortTxSafetyZone=lseIntPortTxSafetyZone, lhsRxBadTypeErr=lhsRxBadTypeErr, lseGroupWorkState=lseGroupWorkState, lsBusStatsBadEthPkts=lsBusStatsBadEthPkts, lsHistoryStatsPriority3Pkts=lsHistoryStatsPriority3Pkts, lseGroupSmartSqlt=lseGroupSmartSqlt, lsPortHistoryPkts=lsPortHistoryPkts, lstIntPortBlockingPriority=lstIntPortBlockingPriority, lseIntPortActiveBroadcastPriority=lseIntPortActiveBroadcastPriority, lseIntPortJabber=lseIntPortJabber, lstIntPortLostFrames=lstIntPortLostFrames, hostTimeCreationOrder=hostTimeCreationOrder, lseIntPortMACAdd=lseIntPortMACAdd, lsPortControlTable=lsPortControlTable, lseIntPortMACAddGroupId=lseIntPortMACAddGroupId, lhsPortId=lhsPortId, portHistoryExtendedControlCreateTime=portHistoryExtendedControlCreateTime, alarmUtilitiesCommand=alarmUtilitiesCommand, lsVNChangePort=lsVNChangePort, lstIntPortNormalPriority=lstIntPortNormalPriority, ethTopDiscoveryTx=ethTopDiscoveryTx)
mibBuilder.exportSymbols("APPLIC-MIB", lseIntPortGlobal=lseIntPortGlobal, lsePort=lsePort, lsMonitorResourceAllocation=lsMonitorResourceAllocation, lsHistoryStatsNonEthOctets=lsHistoryStatsNonEthOctets, lseIntPortFilterPortId=lseIntPortFilterPortId, lseGroupAutoPartitionEnable=lseGroupAutoPartitionEnable, lstIntPortIPGLength=lstIntPortIPGLength, lseGroupHSBMonStatus=lseGroupHSBMonStatus, lseGroupBackboneRedun12=lseGroupBackboneRedun12, lseIntPortFilterEntry=lseIntPortFilterEntry, lsBusStatsVirtualNetOctets=lsBusStatsVirtualNetOctets, ethTopMACFindResult=ethTopMACFindResult, lseIntPortMACAddress=lseIntPortMACAddress, lsBusStatsVirtualNet=lsBusStatsVirtualNet, lseGroupBackoffFromJam=lseGroupBackoffFromJam, lstIntPortPurgeFrames=lstIntPortPurgeFrames, lstIntPortEntry=lstIntPortEntry, lstIntPortSidebandMode=lstIntPortSidebandMode, lseIntPortMACAddPortId=lseIntPortMACAddPortId, lsPortControlIndex=lsPortControlIndex, lseIntPortCompanyMAC=lseIntPortCompanyMAC, lsHistoryStatsBadEthOctets=lsHistoryStatsBadEthOctets, lsBusStatsOctets=lsBusStatsOctets, lseIntPortSuperPriorityEnable=lseIntPortSuperPriorityEnable, lseGroupDataBlinderLength=lseGroupDataBlinderLength, lsPortHistoryCollisions=lsPortHistoryCollisions, lseWANGroupId=lseWANGroupId, lsHistoryStatsPriority1Octets=lsHistoryStatsPriority1Octets, lsPortInFCSErrors=lsPortInFCSErrors, lsHistoryStatsBadEthPkts=lsHistoryStatsBadEthPkts, lse=lse, lsPortFilterStatus=lsPortFilterStatus, vnsPacketPortId=vnsPacketPortId, lstIntPortTotalFrames=lstIntPortTotalFrames, vnsPacketMACAddress=vnsPacketMACAddress, vnsPacketIPXnetwork=vnsPacketIPXnetwork, lsBusStatsPriorityTable=lsBusStatsPriorityTable, lstIntPortClaimFrames=lstIntPortClaimFrames, lhs=lhs, lseIntPortTxReject=lseIntPortTxReject, portHistory=portHistory, lsPortControlOwner=lsPortControlOwner, lseIntPortClearFilter=lseIntPortClearFilter, scPortHistoryIntervalTime=scPortHistoryIntervalTime, lsHostPortFilterTableClear=lsHostPortFilterTableClear, lsPortInCollisions=lsPortInCollisions, lseIntPortCAM=lseIntPortCAM, lstIntPort=lstIntPort, lseIntPortMACAddEntry=lseIntPortMACAddEntry, lsBusStatsGoodEthPkts=lsBusStatsGoodEthPkts, lsHostPortFilterTable=lsHostPortFilterTable, lsPortHistoryIntervalTime=lsPortHistoryIntervalTime, lseIntPort=lseIntPort, lsHistoryEntry=lsHistoryEntry, lseGroupFastOpen=lseGroupFastOpen, vnsPacketEntry=vnsPacketEntry, lseGroupEnableHSBReset=lseGroupEnableHSBReset, lsHistoryBusUtilization=lsHistoryBusUtilization, portHistoryExtendedControlLastBucketIndex=portHistoryExtendedControlLastBucketIndex, lseIntPortGlobalSuperNet=lseIntPortGlobalSuperNet, lseIntPortSetFilter=lseIntPortSetFilter, lhsGroupProtocolType=lhsGroupProtocolType, lseIntPortBroadcastBehavior=lseIntPortBroadcastBehavior, lstIntPortRouteSideband=lstIntPortRouteSideband, scPortHistoryIndex=scPortHistoryIndex, lsVNChangeMACAddress=lsVNChangeMACAddress, lseGroupId=lseGroupId, lsPortControlStatus=lsPortControlStatus, lsMatrixFilterAddress=lsMatrixFilterAddress, alarmMonitorStatus=alarmMonitorStatus, lstIntPortInOctets=lstIntPortInOctets, lseIntPortFilterGroupId=lseIntPortFilterGroupId, lstIntPortTable=lstIntPortTable, portHistoryExtendedControlNumberOfBuckets=portHistoryExtendedControlNumberOfBuckets, lsHistoryStatsPriority1Pkts=lsHistoryStatsPriority1Pkts, lseIntPortSuperPriority=lseIntPortSuperPriority, lhsRxMCast=lhsRxMCast, topDiscoveryTimeOut=topDiscoveryTimeOut, lseIntPortCAMLastChange=lseIntPortCAMLastChange, lsPortHistoryTable=lsPortHistoryTable, lseGroupActiveMonitor=lseGroupActiveMonitor, lsBusStatsVirtualNetPackets=lsBusStatsVirtualNetPackets, ethTopLSAId=ethTopLSAId, lstIntPortLocalTraffic=lstIntPortLocalTraffic, lntLanSwitch=lntLanSwitch, lsBusStatsEthBroadcastPkts=lsBusStatsEthBroadcastPkts, lseIntPortMACAddTable=lseIntPortMACAddTable, lseGroupAssignSlots=lseGroupAssignSlots, lsPortInPkts=lsPortInPkts, vnsPacketTable=vnsPacketTable, lsHistoryStatsPriority2Octets=lsHistoryStatsPriority2Octets, vnsPacketDetectedVLAN=vnsPacketDetectedVLAN, lhsPortGroupId=lhsPortGroupId, alarmMonitorStatusEntry=alarmMonitorStatusEntry, ethTopMACFindResultEntry=ethTopMACFindResultEntry, lseIntPortVideoStateMachine=lseIntPortVideoStateMachine, lseIntPortVideoPacket=lseIntPortVideoPacket, lseIntPortGroupId=lseIntPortGroupId)
