#
# PySNMP MIB module XYLO-PORTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLO-PORTS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:39:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibIdentifier, Bits, TimeTicks, Integer32, Gauge32, ObjectIdentity, IpAddress, NotificationType, ModuleIdentity, Counter64, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "Bits", "TimeTicks", "Integer32", "Gauge32", "ObjectIdentity", "IpAddress", "NotificationType", "ModuleIdentity", "Counter64", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ports, parallelport, anxsyncports, anxModem = mibBuilder.importSymbols("XYLO-MIB-SMI", "ports", "parallelport", "anxsyncports", "anxModem")
totalPorts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPorts.setStatus('mandatory')
totalInChars = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalInChars.setStatus('mandatory')
totalOutChars = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOutChars.setStatus('mandatory')
totalParityErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalParityErrs.setStatus('mandatory')
totalOverrunErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOverrunErrs.setStatus('mandatory')
totalFramingErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFramingErrs.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 3, 7), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1), ).setIndexNames((0, "XYLO-PORTS-MIB", "anxpPortIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
anxpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpPortIndex.setStatus('mandatory')
anxpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("cli", 1), ("slave", 2), ("adaptive", 3), ("unused", 4), ("slip", 5), ("dedicated", 6), ("ppp", 7), ("arap", 8), ("invalid", 9), ("auto-detect", 10), ("auto-adapt", 11), ("ndp", 12), ("ipx", 13), ("call", 14), ("connect", 15), ("rlogin", 16), ("telnet", 17), ("tn3270", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpMode.setStatus('mandatory')
anxpCtrlLines = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("flowcontrol", 2), ("modemcontrol", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCtrlLines.setStatus('mandatory')
anxpBidirModem = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpBidirModem.setStatus('mandatory')
anxpAllowBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAllowBcast.setStatus('mandatory')
anxpBcastDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpBcastDirection.setStatus('mandatory')
anxpInputStartChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputStartChar.setStatus('mandatory')
anxpInputStopChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputStopChar.setStatus('mandatory')
anxpOutputStartChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpOutputStartChar.setStatus('mandatory')
anxpOutputStopChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpOutputStopChar.setStatus('mandatory')
anxpIxanyFlowCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpIxanyFlowCtl.setStatus('mandatory')
anxpLongBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLongBreak.setStatus('mandatory')
anxpShortBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpShortBreak.setStatus('mandatory')
anxpForwardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpForwardTimer.setStatus('mandatory')
anxpForwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpForwardCount.setStatus('mandatory')
anxpImask7Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpImask7Bits.setStatus('mandatory')
anxpAttnChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAttnChar.setStatus('mandatory')
anxpInputBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputBufSize.setStatus('mandatory')
anxpInputIsActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputIsActivity.setStatus('mandatory')
anxpOutputIsActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpOutputIsActivity.setStatus('mandatory')
anxpInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInactivityTimer.setStatus('mandatory')
anxpResetIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpResetIdleTimer.setStatus('mandatory')
anxpCliInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCliInactivity.setStatus('mandatory')
anxpCliSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCliSecurity.setStatus('mandatory')
anxpConnectSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpConnectSecurity.setStatus('mandatory')
anxpPortServerSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPortServerSecurity.setStatus('mandatory')
anxpPortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPortPassword.setStatus('mandatory')
anxpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpUserName.setStatus('mandatory')
anxpDedicatedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDedicatedAddr.setStatus('mandatory')
anxpDedicatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDedicatedPort.setStatus('mandatory')
anxpPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPrompt.setStatus('mandatory')
anxpTermVar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTermVar.setStatus('mandatory')
anxpNewLineTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNewLineTerm.setStatus('mandatory')
anxpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEcho.setStatus('mandatory')
anxpMapToLower = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpMapToLower.setStatus('mandatory')
anxpMapToUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpMapToUpper.setStatus('mandatory')
anxpHardwareTabs = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpHardwareTabs.setStatus('mandatory')
anxpCharErase = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCharErase.setStatus('mandatory')
anxpLineErase = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLineErase.setStatus('mandatory')
anxpEraseChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEraseChar.setStatus('mandatory')
anxpEraseWord = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEraseWord.setStatus('mandatory')
anxpEraseLine = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEraseLine.setStatus('mandatory')
anxpRedisplayLine = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpRedisplayLine.setStatus('mandatory')
anxpToggleOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpToggleOutput.setStatus('mandatory')
anxpTelnetEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTelnetEscape.setStatus('mandatory')
anxpNeedDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNeedDsr.setStatus('mandatory')
anxpTelnetCRLF = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTelnetCRLF.setStatus('mandatory')
anxpLatbEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLatbEnable.setStatus('mandatory')
anxpSlipSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipSecure.setStatus('mandatory')
anxpNetLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 50), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetLocalAddr.setStatus('mandatory')
anxpNetRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 51), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetRemoteAddr.setStatus('mandatory')
anxpSlipSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 52), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipSubnetMask.setStatus('mandatory')
anxpSlipLoadDumpHost = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 53), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipLoadDumpHost.setStatus('mandatory')
anxpNetMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetMetric.setStatus('mandatory')
anxpSlipAllowDump = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipAllowDump.setStatus('mandatory')
anxpDoCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDoCompression.setStatus('mandatory')
anxpAllowCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAllowCompression.setStatus('mandatory')
anxpSlipMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("large", 1), ("small", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipMtuSize.setStatus('mandatory')
anxpSlipNoIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipNoIcmp.setStatus('mandatory')
anxpSlipTos = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipTos.setStatus('mandatory')
anxpPppMru = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppMru.setStatus('mandatory')
anxpPppAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppAcm.setStatus('mandatory')
anxpPppSecurityProto = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3), ("chap-pap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppSecurityProto.setStatus('mandatory')
anxpPppUserRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppUserRemote.setStatus('mandatory')
anxpPppPasswdRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppPasswdRemote.setStatus('mandatory')
anxpLatAuthGroupVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLatAuthGroupVal.setStatus('mandatory')
anxpPppDialupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("authserver", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppDialupAddr.setStatus('mandatory')
anxpBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("beforesec", 3), ("aftersec", 4), ("motd_before_sec", 5), ("motd_after_sec", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpBanner.setStatus('mandatory')
anxpPsHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPsHistory.setStatus('mandatory')
anxpLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLocation.setStatus('mandatory')
anxpType = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("hardwired", 1), ("dialin", 2), ("x25", 3), ("tn3270", 4), ("pc", 5), ("terminal", 6), ("printer", 7), ("modem", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpType.setStatus('mandatory')
anxpCliImask7 = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCliImask7.setStatus('mandatory')
anxpModemVar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 73), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpModemVar.setStatus('mandatory')
anxpPppNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("ipcp", 1), ("atcp", 2), ("all", 3), ("ipxcp", 4), ("ipcp-atcp", 5), ("ipcp-ipxcp", 6), ("atcp-ipxcp", 7), ("ipcp-atcp-ipxcp", 8), ("ipcp-ccp", 9), ("atcp-ccp", 10), ("ipxcp-ccp", 11), ("ipcp-atcp-ccp", 12), ("ipcp-ipxcp-ccp", 13), ("atcp-ipxcp-ccp", 14), ("ipcp-atcp-ipxcp-ccp", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppNcp.setStatus('mandatory')
anxpDemandDial = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDemandDial.setStatus('deprecated')
anxpPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPhoneNumber.setStatus('mandatory')
anxpNetInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetInactivity.setStatus('mandatory')
anxpAtGuest = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAtGuest.setStatus('mandatory')
anxpAtNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAtNodeid.setStatus('mandatory')
anxpAtSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAtSecurity.setStatus('mandatory')
anxpArapV42bis = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpArapV42bis.setStatus('mandatory')
anxpTn3270PrinterHost = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 82), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTn3270PrinterHost.setStatus('mandatory')
anxpTn3270PrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTn3270PrinterName.setStatus('mandatory')
anxpTcpKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTcpKeepAlive.setStatus('mandatory')
anxpDtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("high", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDtrSignal.setStatus('mandatory')
anxpRtsSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("high", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpRtsSignal.setStatus('mandatory')
anxpCliInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uci", 1), ("vci", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCliInterface.setStatus('mandatory')
anxpAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAutobaud.setStatus('mandatory')
anxpDefSessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("interactive", 1), ("passthru", 2), ("passall", 3), ("transparent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDefSessMode.setStatus('mandatory')
anxpIpxSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpIpxSecurity.setStatus('mandatory')
anxpIpsoClass = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("secret", 2), ("topsecret", 3), ("confidential", 4), ("unclassified", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpIpsoClass.setStatus('mandatory')
anxpVciLoginPortPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpVciLoginPortPasswd.setStatus('mandatory')
anxpVciLoginTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpVciLoginTimeout.setStatus('mandatory')
anxpDedicatedArgs = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDedicatedArgs.setStatus('mandatory')
anxpNetInactivityUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minutes", 1), ("seconds", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetInactivityUnits.setStatus('mandatory')
anxpResolveProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 17, 19))).clone(namedValues=NamedValues(("connect", 15), ("telnet", 17), ("any", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpResolveProtocol.setStatus('mandatory')
anxpForwardKey = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 98), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpForwardKey.setStatus('mandatory')
anxpBackwardKey = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpBackwardKey.setStatus('mandatory')
anxpPppIpxNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppIpxNetwork.setStatus('mandatory')
anxpPppIpxNode = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppIpxNode.setStatus('mandatory')
anxpLatAuthMap = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 102), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLatAuthMap.setStatus('mandatory')
anxpMultiSession = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpMultiSession.setStatus('mandatory')
anxpAutoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAutoTimeout.setStatus('mandatory')
anxpAutoPPPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAutoPPPSecurity.setStatus('mandatory')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 3, 8), )
if mibBuilder.loadTexts: portStatsTable.setStatus('mandatory')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 3, 8, 1), ).setIndexNames((0, "XYLO-PORTS-MIB", "anxpPortStatsIndex"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('mandatory')
anxpPortStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpPortStatsIndex.setStatus('mandatory')
anxpCurrentUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpCurrentUserName.setStatus('mandatory')
anxpPortIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpPortIdleTime.setStatus('mandatory')
anxpPortLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpPortLoginTime.setStatus('mandatory')
anxpPortProto = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("cli", 1), ("psvr", 2), ("vcli", 5), ("dp", 6), ("slip", 7), ("lpd", 8), ("ppp", 9), ("arap", 10), ("ftp", 11), ("ndp", 12), ("ipx", 13), ("dyndial", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpPortProto.setStatus('mandatory')
anxpPortJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpPortJobs.setStatus('mandatory')
anxpParaPorts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpParaPorts.setStatus('mandatory')
anxpParaPortTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 4, 2), )
if mibBuilder.loadTexts: anxpParaPortTable.setStatus('mandatory')
anxpParaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1), ).setIndexNames((0, "XYLO-PORTS-MIB", "anxpParaPortIndex"))
if mibBuilder.loadTexts: anxpParaPortEntry.setStatus('mandatory')
anxpParaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpParaPortIndex.setStatus('mandatory')
anxpParaPortHardwareTabs = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortHardwareTabs.setStatus('mandatory')
anxpParaPortMapToUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortMapToUpper.setStatus('mandatory')
anxpParaPortPrinterWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 132))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortPrinterWidth.setStatus('mandatory')
anxpParaPortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("centronics", 1), ("dataproducts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortInterface.setStatus('mandatory')
anxpParaPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high-speed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortSpeed.setStatus('mandatory')
anxpParaPortCRLF = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortCRLF.setStatus('mandatory')
anxpParaPortTcpKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortTcpKeepAlive.setStatus('mandatory')
totalSyncPorts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSyncPorts.setStatus('mandatory')
totalSyncInChars = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSyncInChars.setStatus('mandatory')
totalSyncOutChars = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSyncOutChars.setStatus('mandatory')
totalSyncFrameCheckErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSyncFrameCheckErrs.setStatus('mandatory')
totalSyncXmitUnderrunErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSyncXmitUnderrunErrs.setStatus('mandatory')
totalSyncRecvOverrunErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSyncRecvOverrunErrs.setStatus('mandatory')
anxSyncTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 9, 7), )
if mibBuilder.loadTexts: anxSyncTable.setStatus('mandatory')
anxSyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1), ).setIndexNames((0, "XYLO-PORTS-MIB", "anxSyncPortIndex"))
if mibBuilder.loadTexts: anxSyncEntry.setStatus('mandatory')
anxSyncPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxSyncPortIndex.setStatus('mandatory')
anxSyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unused", 1), ("ppp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncMode.setStatus('mandatory')
anxSyncClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncClocking.setStatus('mandatory')
anxSyncLocalUser = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncLocalUser.setStatus('mandatory')
anxSyncPortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncPortPassword.setStatus('mandatory')
anxSyncLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncLocalAddr.setStatus('mandatory')
anxSyncRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncRemoteAddr.setStatus('mandatory')
anxSyncMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncMetric.setStatus('mandatory')
anxSyncAllowCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncAllowCompression.setStatus('mandatory')
anxSyncPppMru = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncPppMru.setStatus('mandatory')
anxSyncPppSecurityProto = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3), ("chappap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncPppSecurityProto.setStatus('mandatory')
anxSyncPppUserRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncPppUserRemote.setStatus('mandatory')
anxSyncPppPasswdRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncPppPasswdRemote.setStatus('mandatory')
anxSyncPppNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("ipcp", 1), ("atcp", 2), ("all", 3), ("ipxcp", 4), ("ipcp-atcp", 5), ("ipcp-ipxcp", 6), ("atcp-ipxcp", 7), ("ipcp-atcp-ipxcp", 8), ("ipcp-ccp", 9), ("atcp-ccp", 10), ("ipxcp-ccp", 11), ("ipcp-atcp-ccp", 12), ("ipcp-ipxcp-ccp", 13), ("atcp-ipxcp-ccp", 14), ("ipcp-atcp-ipxcp-ccp", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncPppNcp.setStatus('mandatory')
anxSyncLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncLocation.setStatus('mandatory')
anxSyncForceCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncForceCTS.setStatus('mandatory')
anxSyncSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncSubNetMask.setStatus('mandatory')
anxSyncDialupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncDialupAddr.setStatus('mandatory')
anxSyncPppSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 9, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSyncPppSecurity.setStatus('mandatory')
anxmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 100, 1), )
if mibBuilder.loadTexts: anxmStatsTable.setStatus('deprecated')
anxmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 100, 1, 1), ).setIndexNames((0, "XYLO-PORTS-MIB", "anxmStatsIndex"))
if mibBuilder.loadTexts: anxmStatsEntry.setStatus('deprecated')
anxmStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxmStatsIndex.setStatus('deprecated')
anxmStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxmStatsPort.setStatus('deprecated')
anxmStatsModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxmStatsModemType.setStatus('deprecated')
anxmStatsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxmStatsTime.setStatus('deprecated')
anxmStatsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxmStatsNumber.setStatus('deprecated')
anxmStatsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxmStatsDuration.setStatus('deprecated')
anxmStatsUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxmStatsUsername.setStatus('deprecated')
anxmStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("exitNormal", 2), ("exitAbort", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxmStatsStatus.setStatus('deprecated')
anxpModemTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 100, 2), )
if mibBuilder.loadTexts: anxpModemTable.setStatus('mandatory')
anxpModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1), ).setIndexNames((0, "XYLO-PORTS-MIB", "anxpModemIndex"))
if mibBuilder.loadTexts: anxpModemEntry.setStatus('mandatory')
anxpModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpModemIndex.setStatus('mandatory')
anxpModemConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("dialinautobaud", 3), ("dialin", 4), ("dialinoutautobaud", 5), ("dialinout", 6), ("dialout", 7), ("autodetect", 8), ("autoadapt", 9), ("ipx", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpModemConfig.setStatus('mandatory')
anxpModemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpModemReset.setStatus('deprecated')
anxpModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("available", 1), ("busied-out", 2), ("failed", 3), ("used", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpModemStatus.setStatus('deprecated')
anxpModemBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpModemBChannel.setStatus('mandatory')
anxpModemWhenBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpModemWhenBusy.setStatus('deprecated')
anxpModemTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpModemTotalCalls.setStatus('deprecated')
anxpModemRingFail = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpModemRingFail.setStatus('mandatory')
anxpModemOffhookFail = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpModemOffhookFail.setStatus('mandatory')
anxpModemDcdFail = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpModemDcdFail.setStatus('mandatory')
anxpModemConsecFail = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpModemConsecFail.setStatus('mandatory')
anxpModemFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 100, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpModemFirmware.setStatus('deprecated')
mibBuilder.exportSymbols("XYLO-PORTS-MIB", anxpUserName=anxpUserName, anxpNewLineTerm=anxpNewLineTerm, anxpPrompt=anxpPrompt, anxpParaPortIndex=anxpParaPortIndex, anxpModemDcdFail=anxpModemDcdFail, anxSyncEntry=anxSyncEntry, anxpType=anxpType, anxmStatsEntry=anxmStatsEntry, anxSyncPortPassword=anxSyncPortPassword, anxpDedicatedAddr=anxpDedicatedAddr, anxmStatsNumber=anxmStatsNumber, anxpDtrSignal=anxpDtrSignal, anxpParaPortInterface=anxpParaPortInterface, anxpMapToUpper=anxpMapToUpper, anxpDemandDial=anxpDemandDial, anxSyncPppSecurity=anxSyncPppSecurity, anxpModemWhenBusy=anxpModemWhenBusy, anxpNetLocalAddr=anxpNetLocalAddr, anxSyncForceCTS=anxSyncForceCTS, anxSyncPppNcp=anxSyncPppNcp, totalSyncOutChars=totalSyncOutChars, totalOverrunErrs=totalOverrunErrs, totalParityErrs=totalParityErrs, anxpMultiSession=anxpMultiSession, anxpLongBreak=anxpLongBreak, anxpModemRingFail=anxpModemRingFail, anxpInputStopChar=anxpInputStopChar, anxpCharErase=anxpCharErase, anxpPsHistory=anxpPsHistory, anxSyncPppPasswdRemote=anxSyncPppPasswdRemote, anxpLatAuthGroupVal=anxpLatAuthGroupVal, anxSyncPppUserRemote=anxSyncPppUserRemote, anxpAutoPPPSecurity=anxpAutoPPPSecurity, anxpEraseLine=anxpEraseLine, totalSyncXmitUnderrunErrs=totalSyncXmitUnderrunErrs, anxSyncTable=anxSyncTable, anxpEraseChar=anxpEraseChar, anxmStatsTable=anxmStatsTable, anxpParaPortCRLF=anxpParaPortCRLF, anxpInputBufSize=anxpInputBufSize, anxmStatsDuration=anxmStatsDuration, anxpDedicatedArgs=anxpDedicatedArgs, anxpPppIpxNetwork=anxpPppIpxNetwork, anxpPortJobs=anxpPortJobs, anxSyncLocalUser=anxSyncLocalUser, anxpPortServerSecurity=anxpPortServerSecurity, anxpNetMetric=anxpNetMetric, anxpAllowCompression=anxpAllowCompression, totalInChars=totalInChars, anxSyncSubNetMask=anxSyncSubNetMask, anxSyncDialupAddr=anxSyncDialupAddr, anxpInputIsActivity=anxpInputIsActivity, anxpModemConfig=anxpModemConfig, anxSyncMetric=anxSyncMetric, anxpSlipLoadDumpHost=anxpSlipLoadDumpHost, anxpTcpKeepAlive=anxpTcpKeepAlive, anxSyncClocking=anxSyncClocking, anxpParaPorts=anxpParaPorts, anxpPortPassword=anxpPortPassword, anxpParaPortTable=anxpParaPortTable, anxpTermVar=anxpTermVar, anxpHardwareTabs=anxpHardwareTabs, anxpModemOffhookFail=anxpModemOffhookFail, totalFramingErrs=totalFramingErrs, anxpRtsSignal=anxpRtsSignal, anxpParaPortMapToUpper=anxpParaPortMapToUpper, anxpModemTable=anxpModemTable, anxpModemEntry=anxpModemEntry, anxpSlipSubnetMask=anxpSlipSubnetMask, anxpCliImask7=anxpCliImask7, anxpNetInactivityUnits=anxpNetInactivityUnits, anxpPortIndex=anxpPortIndex, anxSyncPppMru=anxSyncPppMru, anxmStatsStatus=anxmStatsStatus, anxpIpsoClass=anxpIpsoClass, anxpSlipSecure=anxpSlipSecure, anxpBackwardKey=anxpBackwardKey, anxpPortProto=anxpPortProto, portTable=portTable, anxmStatsUsername=anxmStatsUsername, anxmStatsModemType=anxmStatsModemType, anxSyncPppSecurityProto=anxSyncPppSecurityProto, anxpBidirModem=anxpBidirModem, anxpVciLoginTimeout=anxpVciLoginTimeout, totalPorts=totalPorts, anxpCtrlLines=anxpCtrlLines, anxpModemFirmware=anxpModemFirmware, anxpTelnetCRLF=anxpTelnetCRLF, anxpPppIpxNode=anxpPppIpxNode, totalOutChars=totalOutChars, totalSyncRecvOverrunErrs=totalSyncRecvOverrunErrs, portStatsTable=portStatsTable, anxpSlipMtuSize=anxpSlipMtuSize, anxpParaPortEntry=anxpParaPortEntry, anxpResetIdleTimer=anxpResetIdleTimer, anxpLatbEnable=anxpLatbEnable, anxpAttnChar=anxpAttnChar, anxpToggleOutput=anxpToggleOutput, anxpMode=anxpMode, anxpConnectSecurity=anxpConnectSecurity, anxpCurrentUserName=anxpCurrentUserName, anxpShortBreak=anxpShortBreak, anxpNeedDsr=anxpNeedDsr, anxpArapV42bis=anxpArapV42bis, totalSyncPorts=totalSyncPorts, totalSyncFrameCheckErrs=totalSyncFrameCheckErrs, anxpPppSecurityProto=anxpPppSecurityProto, anxpImask7Bits=anxpImask7Bits, portStatsEntry=portStatsEntry, anxpEraseWord=anxpEraseWord, anxpForwardCount=anxpForwardCount, anxpParaPortSpeed=anxpParaPortSpeed, anxpPppMru=anxpPppMru, anxpIpxSecurity=anxpIpxSecurity, anxpDoCompression=anxpDoCompression, anxmStatsIndex=anxmStatsIndex, totalSyncInChars=totalSyncInChars, anxpPppDialupAddr=anxpPppDialupAddr, anxpModemConsecFail=anxpModemConsecFail, anxpTn3270PrinterName=anxpTn3270PrinterName, anxpForwardKey=anxpForwardKey, anxpParaPortTcpKeepAlive=anxpParaPortTcpKeepAlive, anxpBanner=anxpBanner, anxpModemBChannel=anxpModemBChannel, anxpModemIndex=anxpModemIndex, anxpPppPasswdRemote=anxpPppPasswdRemote, anxpDedicatedPort=anxpDedicatedPort, portEntry=portEntry, anxpAtGuest=anxpAtGuest, anxpNetRemoteAddr=anxpNetRemoteAddr, anxpForwardTimer=anxpForwardTimer, anxpCliInterface=anxpCliInterface, anxpOutputStopChar=anxpOutputStopChar, anxpIxanyFlowCtl=anxpIxanyFlowCtl, anxpPhoneNumber=anxpPhoneNumber, anxpSlipNoIcmp=anxpSlipNoIcmp, anxpLocation=anxpLocation, anxmStatsPort=anxmStatsPort, anxSyncPortIndex=anxSyncPortIndex, anxpOutputIsActivity=anxpOutputIsActivity, anxpRedisplayLine=anxpRedisplayLine, anxpModemTotalCalls=anxpModemTotalCalls, anxpTelnetEscape=anxpTelnetEscape, anxpSlipAllowDump=anxpSlipAllowDump, anxpAtSecurity=anxpAtSecurity, anxpPppUserRemote=anxpPppUserRemote, anxpAutoTimeout=anxpAutoTimeout, anxpResolveProtocol=anxpResolveProtocol, anxpModemVar=anxpModemVar, anxpPortStatsIndex=anxpPortStatsIndex, anxSyncLocalAddr=anxSyncLocalAddr, anxpCliSecurity=anxpCliSecurity, anxpDefSessMode=anxpDefSessMode, anxpParaPortPrinterWidth=anxpParaPortPrinterWidth, anxpAllowBcast=anxpAllowBcast, anxSyncMode=anxSyncMode, anxpPortLoginTime=anxpPortLoginTime, anxpAtNodeid=anxpAtNodeid, anxpAutobaud=anxpAutobaud, anxpParaPortHardwareTabs=anxpParaPortHardwareTabs, anxpBcastDirection=anxpBcastDirection, anxpInactivityTimer=anxpInactivityTimer, anxpModemReset=anxpModemReset, anxSyncLocation=anxSyncLocation, anxpPortIdleTime=anxpPortIdleTime, anxSyncAllowCompression=anxSyncAllowCompression, anxpCliInactivity=anxpCliInactivity, anxpOutputStartChar=anxpOutputStartChar, anxpPppAcm=anxpPppAcm, anxSyncRemoteAddr=anxSyncRemoteAddr, anxmStatsTime=anxmStatsTime, anxpModemStatus=anxpModemStatus, anxpNetInactivity=anxpNetInactivity, anxpLatAuthMap=anxpLatAuthMap, anxpTn3270PrinterHost=anxpTn3270PrinterHost, anxpVciLoginPortPasswd=anxpVciLoginPortPasswd, anxpInputStartChar=anxpInputStartChar, anxpEcho=anxpEcho, anxpLineErase=anxpLineErase, anxpSlipTos=anxpSlipTos, anxpMapToLower=anxpMapToLower, anxpPppNcp=anxpPppNcp)
