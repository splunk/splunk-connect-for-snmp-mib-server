#
# PySNMP MIB module EXPRESSGS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXPRESSGS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Unsigned32, NotificationType, TimeTicks, enterprises, ModuleIdentity, IpAddress, Counter32, Counter64, iso, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "NotificationType", "TimeTicks", "enterprises", "ModuleIdentity", "IpAddress", "Counter32", "Counter64", "iso", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class EventValueType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("integer", 2), ("longInteger", 3), ("string", 4), ("octets", 5), ("ipAddress", 6), ("macAddress", 7), ("timeTicks", 8))

class ResourceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("system", 1), ("module", 2), ("fan", 3), ("temperatureSensor", 4), ("interface", 5), ("powerSupply", 6), ("display", 7), ("switchPort", 8), ("bridge", 9), ("vlan", 10), ("aft", 11), ("inboundGroupTable", 12), ("outboundGroupTable", 13), ("threeComMappingTable", 14), ("event", 15), ("alarm", 16))

class ResourceId(ObjectIdentifier):
    pass

class DisplayString(OctetString):
    pass

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

class EventCategory(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("userDefined", 1), ("coldstart", 2), ("warmstart", 3), ("linkUp", 4), ("linkDown", 5), ("newResource", 6), ("deletedResource", 7), ("tempStatus", 8), ("configuration", 9), ("scheduled", 10), ("authentication", 11), ("system", 12), ("risingThreshold", 13), ("fallingThreshold", 14), ("fanStatus", 15), ("powerStatus", 16), ("status", 17), ("bridgeNewRoot", 18), ("bridgeTopChange", 19), ("switchFabricStatus", 20))

intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
mib2ext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6))
esGigaSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13))
expressGSAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 1))
expressGSAgentGen = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 1))
expressGSAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSAgentMIBVersion.setStatus('mandatory')
expressGSAgentMgrIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSAgentMgrIndex.setStatus('mandatory')
expressGSAgentCommunity = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2))
expressGSCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2, 1), )
if mibBuilder.loadTexts: expressGSCommunityTable.setStatus('mandatory')
expressGSCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSCommunityIndex"))
if mibBuilder.loadTexts: expressGSCommunityEntry.setStatus('mandatory')
expressGSCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSCommunityIndex.setStatus('mandatory')
expressGSCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSCommunityString.setStatus('mandatory')
expressGSCommunityAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("any", 1), ("ipv4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSCommunityAddressType.setStatus('mandatory')
expressGSCommunityAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSCommunityAddress.setStatus('mandatory')
expressGSCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("readOnly", 2), ("readWrite", 3), ("moreSpecific", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSCommunityAccess.setStatus('mandatory')
expressGSCommunityTrapReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSCommunityTrapReceiver.setStatus('mandatory')
expressGSCommunitySecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("administrator", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSCommunitySecurityLevel.setStatus('mandatory')
expressGSCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSCommunityStatus.setStatus('mandatory')
expressGSAgentWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 3))
expressGSAgentWebServerURL = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSAgentWebServerURL.setStatus('mandatory')
expressGSAgentWebServerHelpDirectory = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSAgentWebServerHelpDirectory.setStatus('mandatory')
expressGSChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3))
expressGSChassisGen = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 1))
expressGSChassisType = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p550", 1), ("p220", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSChassisType.setStatus('mandatory')
expressGSChassisSlots = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSChassisSlots.setStatus('mandatory')
expressGSInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 2))
expressGSInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 2, 1), )
if mibBuilder.loadTexts: expressGSInventoryTable.setStatus('mandatory')
expressGSInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 2, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSInventoryResourceType"), (0, "EXPRESSGS-MIB", "expressGSInventoryResourceIndex"))
if mibBuilder.loadTexts: expressGSInventoryEntry.setStatus('mandatory')
expressGSInventoryResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 2, 1, 1, 1), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSInventoryResourceType.setStatus('mandatory')
expressGSInventoryResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 2, 1, 1, 2), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSInventoryResourceIndex.setStatus('mandatory')
expressGSInventoryModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSInventoryModelNumber.setStatus('mandatory')
expressGSInventorySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSInventorySerialNumber.setStatus('mandatory')
expressGSInventoryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSInventoryVersion.setStatus('mandatory')
expressGSInventoryManufactureInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSInventoryManufactureInfo.setStatus('mandatory')
expressGSInventoryScratchPad = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSInventoryScratchPad.setStatus('mandatory')
expressGSPowerSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3))
expressGSPowerSupplies = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 1))
expressGSPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 1, 1), )
if mibBuilder.loadTexts: expressGSPowerSupplyTable.setStatus('mandatory')
expressGSPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 1, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSPowerSupplyIndex"))
if mibBuilder.loadTexts: expressGSPowerSupplyEntry.setStatus('mandatory')
expressGSPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 1, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPowerSupplyIndex.setStatus('mandatory')
expressGSPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("psA", 2), ("psB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPowerSupplyType.setStatus('mandatory')
expressGSPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPowerSupplyStatus.setStatus('mandatory')
expressGSPowerSupplyInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPowerSupplyInputStatus.setStatus('mandatory')
expressGSPowerSupplyOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPowerSupplyOutputStatus.setStatus('mandatory')
expressGSPowerSupplyOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPowerSupplyOutputCapacity.setStatus('mandatory')
expressGSPowerMgmtGen = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 2))
expressGSPowerCapacity = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPowerCapacity.setStatus('mandatory')
expressGSPowerUsed = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPowerUsed.setStatus('mandatory')
expressGSPowerMgmtCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 3))
expressGSPowerControlTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 3, 1), )
if mibBuilder.loadTexts: expressGSPowerControlTable.setStatus('mandatory')
expressGSPowerControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 3, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSModuleIndex"))
if mibBuilder.loadTexts: expressGSPowerControlEntry.setStatus('mandatory')
expressGSPowerControlUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPowerControlUsed.setStatus('mandatory')
expressGSPowerControlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("normal", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPowerControlPriority.setStatus('mandatory')
expressGSPowerControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("poweredDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPowerControlMode.setStatus('mandatory')
expressGSTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 4))
expressGSTempTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 4, 1), )
if mibBuilder.loadTexts: expressGSTempTable.setStatus('mandatory')
expressGSTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 4, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSTempIndex"))
if mibBuilder.loadTexts: expressGSTempEntry.setStatus('mandatory')
expressGSTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 4, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSTempIndex.setStatus('mandatory')
expressGSTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSTempValue.setStatus('mandatory')
expressGSTempUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSTempUpperLimit.setStatus('mandatory')
expressGSTempUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSTempUpperWarning.setStatus('mandatory')
expressGSTempLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSTempLowerWarning.setStatus('mandatory')
expressGSTempLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSTempLowerLimit.setStatus('mandatory')
expressGSModules = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 5))
expressGSModuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 5, 1), )
if mibBuilder.loadTexts: expressGSModuleTable.setStatus('mandatory')
expressGSModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 5, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSModuleIndex"))
if mibBuilder.loadTexts: expressGSModuleEntry.setStatus('mandatory')
expressGSModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 5, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSModuleIndex.setStatus('mandatory')
expressGSModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSModuleName.setStatus('mandatory')
expressGSModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("unknown", 1), ("m5502-1000", 2), ("m2206-1000", 3), ("m5520-100TX-QS", 4), ("m5510-100FX", 5), ("m5500-SUP", 6), ("m5504-1000", 7), ("m2201-1000", 8), ("m5520-100TX-I", 9), ("m2202-100FX", 10), ("m5510R-100FX", 11), ("m5512R-100TX", 12), ("m5500R-SUP", 13), ("m5502R-1000", 14), ("m2200-SUP", 15), ("m2204-100TX", 16), ("m2224-100TX", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSModuleType.setStatus('mandatory')
expressGSModuleBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gigabit", 1), ("fastEthernet", 2), ("supervisor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSModuleBaseType.setStatus('mandatory')
expressGSModuleSlotWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSModuleSlotWidth.setStatus('mandatory')
expressGSModuleSlotOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSModuleSlotOffset.setStatus('mandatory')
expressGSModulePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSModulePorts.setStatus('mandatory')
expressGSPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6))
expressGSPortMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1))
expressGSPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1), )
if mibBuilder.loadTexts: expressGSPortTable.setStatus('mandatory')
expressGSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSPortIndex"))
if mibBuilder.loadTexts: expressGSPortEntry.setStatus('mandatory')
expressGSPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPortIndex.setStatus('mandatory')
expressGSPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortName.setStatus('mandatory')
expressGSPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("ether-ten-oneHundred", 2), ("ether-oneHundred", 3), ("ether-gigabit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPortType.setStatus('mandatory')
expressGSPortBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("ether-ten-oneHundred", 2), ("ether-oneHundred", 3), ("ether-gigabit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPortBaseType.setStatus('mandatory')
expressGSPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortMode.setStatus('mandatory')
expressGSPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("okay", 2), ("warning", 3), ("disabledButOkay", 4), ("linkFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPortStatus.setStatus('mandatory')
expressGSPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("internal", 1), ("rj45", 2), ("fiber-ST", 3), ("fiber-SC", 4), ("rs-232", 5), ("aui", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPortConnector.setStatus('mandatory')
expressGSPortSpeedState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ten-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2), ("one-gigabit-per-second", 3), ("under-negotiation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPortSpeedState.setStatus('mandatory')
expressGSPortDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2), ("under-negotiation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPortDuplexState.setStatus('mandatory')
expressGSPortGroupBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 1, 1, 1, 10), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPortGroupBinding.setStatus('mandatory')
expressGSPortFlowControlMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 2))
expressGSPortFlowControlTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 2, 1), )
if mibBuilder.loadTexts: expressGSPortFlowControlTable.setStatus('mandatory')
expressGSPortFlowControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 2, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSPortIndex"))
if mibBuilder.loadTexts: expressGSPortFlowControlEntry.setStatus('mandatory')
expressGSPortFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enable-with-aggressive-backoff", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortFlowControlMode.setStatus('mandatory')
expressGSPortDuplexMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 3))
expressGSPortDuplexTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 3, 1), )
if mibBuilder.loadTexts: expressGSPortDuplexTable.setStatus('mandatory')
expressGSPortDuplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 3, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSPortIndex"))
if mibBuilder.loadTexts: expressGSPortDuplexEntry.setStatus('mandatory')
expressGSPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortDuplexMode.setStatus('mandatory')
expressGSPortSpeedMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 4))
expressGSPortSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 4, 1), )
if mibBuilder.loadTexts: expressGSPortSpeedTable.setStatus('mandatory')
expressGSPortSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 4, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSPortIndex"))
if mibBuilder.loadTexts: expressGSPortSpeedEntry.setStatus('mandatory')
expressGSPortSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 4, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ten-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortSpeedMode.setStatus('mandatory')
expressGSPortAutoNegotiationMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 5))
expressGSPortAutoNegotiationTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 5, 1), )
if mibBuilder.loadTexts: expressGSPortAutoNegotiationTable.setStatus('mandatory')
expressGSPortAutoNegotiationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 5, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSPortIndex"))
if mibBuilder.loadTexts: expressGSPortAutoNegotiationEntry.setStatus('mandatory')
expressGSPortAutoNegotiationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 5, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("manualConfiguration", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortAutoNegotiationMode.setStatus('mandatory')
expressGSPortAutoNegotiationSpeedAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 5, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ten-and-one-hundred-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2), ("ten-megabits-per-second", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortAutoNegotiationSpeedAdvertisement.setStatus('mandatory')
expressGSPortAutoNegotiationDuplexAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 5, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-and-half-duplex", 1), ("half-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortAutoNegotiationDuplexAdvertisement.setStatus('mandatory')
expressGSPortRateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 6))
expressGSPortRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 6, 1), )
if mibBuilder.loadTexts: expressGSPortRateLimitTable.setStatus('mandatory')
expressGSPortRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 6, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSPortIndex"))
if mibBuilder.loadTexts: expressGSPortRateLimitEntry.setStatus('mandatory')
expressGSPortRateLimitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 6, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enableIncludeKnownMulticast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortRateLimitMode.setStatus('mandatory')
expressGSPortRateLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 6, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("one-percent", 1), ("two-percent", 2), ("five-percent", 3), ("ten-percent", 4), ("twenty-percent", 5), ("forty-percent", 6), ("eighty-percent", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortRateLimitRate.setStatus('mandatory')
expressGSPortRateLimitBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 6, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("rateLimit1", 1), ("rateLimit2", 2), ("rateLimit4", 3), ("rateLimit8", 4), ("rateLimit16", 5), ("rateLimit32", 6), ("rateLimit64", 7), ("rateLimit128", 8), ("rateLimit256", 9), ("rateLimit1024", 10), ("rateLimit2048", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortRateLimitBurstSize.setStatus('mandatory')
expressGSPortPacePriorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 7))
expressGSPortPacePriorityTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 7, 1), )
if mibBuilder.loadTexts: expressGSPortPacePriorityTable.setStatus('mandatory')
expressGSPortPacePriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 7, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSPortIndex"))
if mibBuilder.loadTexts: expressGSPortPacePriorityEntry.setStatus('mandatory')
expressGSPortPacePriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 7, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortPacePriorityMode.setStatus('mandatory')
expressGSPortCategoryMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 8))
expressGSPortCategoryTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 8, 1), )
if mibBuilder.loadTexts: expressGSPortCategoryTable.setStatus('mandatory')
expressGSPortCategoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 8, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSPortIndex"))
if mibBuilder.loadTexts: expressGSPortCategoryEntry.setStatus('mandatory')
expressGSPortCategoryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 6, 8, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userPort", 1), ("servicePort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortCategoryMode.setStatus('mandatory')
expressGSBufferMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7))
expressGSBufferTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1), )
if mibBuilder.loadTexts: expressGSBufferTable.setStatus('mandatory')
expressGSBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSBufferIndex"))
if mibBuilder.loadTexts: expressGSBufferEntry.setStatus('mandatory')
expressGSBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferIndex.setStatus('mandatory')
expressGSBufferFabricPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 2), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferFabricPort.setStatus('mandatory')
expressGSBufferFabricPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferFabricPortDirection.setStatus('mandatory')
expressGSBufferSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 4), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferSwitchPort.setStatus('mandatory')
expressGSBufferMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferMemory.setStatus('mandatory')
expressGSBufferAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("quarter-second", 2), ("one-second", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBufferAgeTimer.setStatus('mandatory')
expressGSBufferPriorityServicing = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("strictPriority", 1), ("everyTenThousand", 2), ("everyThousand", 3), ("everyHundred", 4), ("everyFour", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBufferPriorityServicing.setStatus('mandatory')
expressGSBufferPriorityAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("tenPercent", 2), ("twentyPercent", 3), ("thirtyPercent", 4), ("fortyPercent", 5), ("fiftyPercent", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBufferPriorityAllocation.setStatus('mandatory')
expressGSBufferPriorityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5), ("five", 6), ("six", 7), ("seven", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBufferPriorityThreshold.setStatus('mandatory')
expressGSBufferCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informationNotAvailable", 1), ("notCongested", 2), ("congested", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferCongestion.setStatus('mandatory')
expressGSBufferHighOverflowDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferHighOverflowDrops.setStatus('mandatory')
expressGSBufferLowOverflowDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferLowOverflowDrops.setStatus('mandatory')
expressGSBufferHighStaleDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferHighStaleDrops.setStatus('mandatory')
expressGSBufferLowStaleDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferLowStaleDrops.setStatus('mandatory')
expressGSBufferCongestionDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 3, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBufferCongestionDrops.setStatus('mandatory')
expressGSSwitching = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5))
expressGSSwitchingLayerII = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1))
expressGSSwitchGen = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 1))
expressGSSwitchSTPConfig = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ieee8021dStp", 1), ("stpPerVlan", 2), ("twoLayerStp", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchSTPConfig.setStatus('mandatory')
expressGSSwitchAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchAgingTime.setStatus('mandatory')
expressGSSwitchSuperAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchSuperAgingTime.setStatus('mandatory')
expressGSBridgeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2))
expressGSBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1), )
if mibBuilder.loadTexts: expressGSBridgeTable.setStatus('mandatory')
expressGSBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSBridgeIndex"))
if mibBuilder.loadTexts: expressGSBridgeEntry.setStatus('mandatory')
expressGSBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeIndex.setStatus('mandatory')
expressGSBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeType.setStatus('mandatory')
expressGSBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgeMode.setStatus('mandatory')
expressGSBridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeStatus.setStatus('mandatory')
expressGSBridgeStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgeStpPriority.setStatus('mandatory')
expressGSBridgeStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeStpTimeSinceTopologyChange.setStatus('mandatory')
expressGSBridgeStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeStpTopChanges.setStatus('mandatory')
expressGSBridgeStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeStpDesignatedRoot.setStatus('mandatory')
expressGSBridgeStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeStpRootCost.setStatus('mandatory')
expressGSBridgeStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeStpRootPort.setStatus('mandatory')
expressGSBridgeStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeStpMaxAge.setStatus('mandatory')
expressGSBridgeStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeStpHelloTime.setStatus('mandatory')
expressGSBridgeStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeStpHoldTime.setStatus('mandatory')
expressGSBridgeStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgeStpForwardDelay.setStatus('mandatory')
expressGSBridgeStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgeStpBridgeMaxAge.setStatus('mandatory')
expressGSBridgeStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgeStpBridgeHelloTime.setStatus('mandatory')
expressGSBridgeStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 2, 1, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgeStpBridgeForwardDelay.setStatus('mandatory')
expressGSBridgePortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3))
expressGSBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1), )
if mibBuilder.loadTexts: expressGSBridgePortTable.setStatus('mandatory')
expressGSBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSBridgePortIndex"))
if mibBuilder.loadTexts: expressGSBridgePortEntry.setStatus('mandatory')
expressGSBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgePortIndex.setStatus('mandatory')
expressGSBridgePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgePortPriority.setStatus('mandatory')
expressGSBridgePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgePortState.setStatus('mandatory')
expressGSBridgePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgePortEnable.setStatus('mandatory')
expressGSBridgePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgePortPathCost.setStatus('mandatory')
expressGSBridgePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgePortDesignatedRoot.setStatus('mandatory')
expressGSBridgePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgePortDesignatedCost.setStatus('mandatory')
expressGSBridgePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgePortDesignatedBridge.setStatus('mandatory')
expressGSBridgePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgePortDesignatedPort.setStatus('mandatory')
expressGSBridgePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSBridgePortForwardTransitions.setStatus('mandatory')
expressGSBridgePortFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgePortFastStart.setStatus('deprecated')
expressGSBridgePortSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useCurrentValues", 1), ("setDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgePortSetDefault.setStatus('mandatory')
expressGSBridgePortEnableChangeDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSBridgePortEnableChangeDetection.setStatus('mandatory')
expressGSL2AddrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4))
expressGSL2AddrDatabaseMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1))
expressGSL2AddressTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1), )
if mibBuilder.loadTexts: expressGSL2AddressTable.setStatus('mandatory')
expressGSL2AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSL2AddressIndex"))
if mibBuilder.loadTexts: expressGSL2AddressEntry.setStatus('mandatory')
expressGSL2AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressIndex.setStatus('mandatory')
expressGSL2AddressTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressTableIndex.setStatus('mandatory')
expressGSL2AddressMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressMacAddress.setStatus('mandatory')
expressGSL2AddressPortBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 4), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSL2AddressPortBinding.setStatus('mandatory')
expressGSL2AddressBindingValid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressBindingValid.setStatus('mandatory')
expressGSL2AddressVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressVlanID.setStatus('mandatory')
expressGSL2AddressPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityZero", 1), ("priorityFour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSL2AddressPriority.setStatus('mandatory')
expressGSL2AddressForward = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalForward", 1), ("specialDelivery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressForward.setStatus('mandatory')
expressGSL2AddressCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalForward", 1), ("copyCPU", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressCopy.setStatus('mandatory')
expressGSL2AddressPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSL2AddressPersistence.setStatus('mandatory')
expressGSL2AddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("learned", 2), ("self", 3), ("mgmt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressStatus.setStatus('mandatory')
expressGSL2AddrSummaryMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 2))
expressGSL2AddrSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 2, 1), )
if mibBuilder.loadTexts: expressGSL2AddrSummaryTable.setStatus('mandatory')
expressGSL2AddrSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 2, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSL2AddressIndex"))
if mibBuilder.loadTexts: expressGSL2AddrSummaryEntry.setStatus('mandatory')
expressGSL2AddrSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddrSummary.setStatus('mandatory')
expressGSL2AddrControlMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 3))
expressGSL2AddressControlTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 3, 1), )
if mibBuilder.loadTexts: expressGSL2AddressControlTable.setStatus('mandatory')
expressGSL2AddressControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 3, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSAgentMgrIndex"))
if mibBuilder.loadTexts: expressGSL2AddressControlEntry.setStatus('mandatory')
expressGSL2AddressControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressControlIndex.setStatus('mandatory')
expressGSL2AddressControlMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 3, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSL2AddressControlMacAddress.setStatus('mandatory')
expressGSL2AddressControlPortBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 3, 1, 1, 3), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSL2AddressControlPortBinding.setStatus('mandatory')
expressGSL2AddressControlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSL2AddressControlVlanID.setStatus('mandatory')
expressGSL2AddressControlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityZero", 1), ("priorityFour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSL2AddressControlPriority.setStatus('mandatory')
expressGSL2AddressControlPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permanent", 1), ("deleteOnReset", 2), ("deleteOnTimeout", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSL2AddressControlPersistence.setStatus('mandatory')
expressGSL2AddressControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("success", 3), ("otherError", 4), ("entryExistsError", 5), ("invalidMacAddress", 6), ("invalidPortBinding", 7), ("invalidVlanID", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSL2AddressControlStatus.setStatus('mandatory')
expressGSL2AddrChangeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 4))
expressGSL2AddressChangeLast = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressChangeLast.setStatus('mandatory')
expressGSL2AddressChangeWraps = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressChangeWraps.setStatus('mandatory')
expressGSL2AddressChangeMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSL2AddressChangeMaxEntries.setStatus('mandatory')
expressGSL2AddressChangeTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 4, 4), )
if mibBuilder.loadTexts: expressGSL2AddressChangeTable.setStatus('mandatory')
expressGSL2AddressChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 4, 4, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSL2AddressChangeWrapCount"), (0, "EXPRESSGS-MIB", "expressGSL2AddressChangeIndex"))
if mibBuilder.loadTexts: expressGSL2AddressChangeEntry.setStatus('mandatory')
expressGSL2AddressChangeWrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressChangeWrapCount.setStatus('mandatory')
expressGSL2AddressChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressChangeIndex.setStatus('mandatory')
expressGSL2AddressChangeIndexChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressChangeIndexChanged.setStatus('mandatory')
expressGSL2AddressChangeSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 1, 4, 4, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSL2AddressChangeSummary.setStatus('mandatory')
expressGSSwitchPortMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2))
expressGSSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1), )
if mibBuilder.loadTexts: expressGSSwitchPortTable.setStatus('mandatory')
expressGSSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSSwitchPortIndex"))
if mibBuilder.loadTexts: expressGSSwitchPortEntry.setStatus('mandatory')
expressGSSwitchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSSwitchPortIndex.setStatus('mandatory')
expressGSSwitchPortSTAPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortSTAPMode.setStatus('mandatory')
expressGSSwitchPortConvertToStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learnAsDynamic", 1), ("convertToStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortConvertToStatic.setStatus('mandatory')
expressGSSwitchPortLearningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortLearningMode.setStatus('mandatory')
expressGSSwitchPortHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortHuntGroup.setStatus('mandatory')
expressGSSwitchPortPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 6), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSSwitchPortPhysicalPort.setStatus('mandatory')
expressGSSwitchPortKnownMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortKnownMode.setStatus('mandatory')
expressGSSwitchPortMappingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("port-based", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortMappingMethod.setStatus('mandatory')
expressGSSwitchPortTrunkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("ieee8021q", 2), ("multiLevel", 3), ("trunk3Com", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortTrunkingMode.setStatus('mandatory')
expressGSSwitchPortVlanBindingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("persistent", 2), ("dynamic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortVlanBindingMethod.setStatus('mandatory')
expressGSSwitchPortIgnoreTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useTag", 1), ("ignoreTag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortIgnoreTag.setStatus('mandatory')
expressGSSwitchPortVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortVlanID.setStatus('mandatory')
expressGSSwitchPort3ComMappingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPort3ComMappingTableIndex.setStatus('mandatory')
expressGSSwitchPortAutoVlanCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortAutoVlanCreation.setStatus('mandatory')
expressGSSwitchPortMirrorMode = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSSwitchPortMirrorMode.setStatus('mandatory')
expressGSSwitchPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSSwitchPortIfIndex.setStatus('mandatory')
expressGSSwitchPortFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSSwitchPortFastStart.setStatus('mandatory')
expressGSHuntGroupMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 4))
expressGSHuntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 4, 1), )
if mibBuilder.loadTexts: expressGSHuntGroupTable.setStatus('mandatory')
expressGSHuntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 4, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSHuntGroupIndex"))
if mibBuilder.loadTexts: expressGSHuntGroupEntry.setStatus('mandatory')
expressGSHuntGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSHuntGroupIndex.setStatus('mandatory')
expressGSHuntGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSHuntGroupName.setStatus('mandatory')
expressGSHuntGroupBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 4, 1, 1, 3), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSHuntGroupBasePort.setStatus('mandatory')
expressGSHuntGroupNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSHuntGroupNumberOfPorts.setStatus('mandatory')
expressGSHuntGroupLoadSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSHuntGroupLoadSharing.setStatus('mandatory')
expressGSHuntGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("deleteRequest", 3), ("active", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSHuntGroupStatus.setStatus('mandatory')
expressGSPortMirroringMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 5))
expressGSPortMirroringTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 5, 1), )
if mibBuilder.loadTexts: expressGSPortMirroringTable.setStatus('mandatory')
expressGSPortMirroringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 5, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSPortMirroringIndex"))
if mibBuilder.loadTexts: expressGSPortMirroringEntry.setStatus('mandatory')
expressGSPortMirroringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 5, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSPortMirroringIndex.setStatus('mandatory')
expressGSPortMirroringSourceSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortMirroringSourceSubPort.setStatus('mandatory')
expressGSPortMirroringSamplerType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("periodic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortMirroringSamplerType.setStatus('mandatory')
expressGSPortMirroringRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortMirroringRate.setStatus('mandatory')
expressGSPortMirroringMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 5, 5, 1, 1, 5), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSPortMirroringMirrorPort.setStatus('mandatory')
expressGSVlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 7))
expressGSVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1))
expressGSVlanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1, 1), )
if mibBuilder.loadTexts: expressGSVlanTable.setStatus('mandatory')
expressGSVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSVlanID"))
if mibBuilder.loadTexts: expressGSVlanEntry.setStatus('mandatory')
expressGSVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSVlanID.setStatus('mandatory')
expressGSVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVlanName.setStatus('mandatory')
expressGSVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSVlanIfIndex.setStatus('mandatory')
expressGSVlanAFTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVlanAFTIndex.setStatus('mandatory')
expressGSVlanBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1, 1, 1, 5), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVlanBridgeIndex.setStatus('mandatory')
expressGSVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("destroyRequest", 3), ("underDestruction", 4), ("active", 5), ("otherError", 6), ("entryExistsError", 7), ("invalidVlanID", 8), ("invalidVlanName", 9), ("invalidVlanAFTIndex", 10), ("invalidVlanBridgeIndex", 11), ("invalidVlanInitialHashTableSize", 12), ("invalidVlanAutoIncrementHTSize", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVlanStatus.setStatus('mandatory')
expressGSVlanInitialHashTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVlanInitialHashTableSize.setStatus('mandatory')
expressGSVlanAutoIncrementHTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVlanAutoIncrementHTSize.setStatus('mandatory')
expressGSVlanMappings = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3))
expressGS3ComMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 1))
expressGS3ComMappingTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 1, 1), )
if mibBuilder.loadTexts: expressGS3ComMappingTable.setStatus('mandatory')
expressGS3ComMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 1, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGS3ComMappingTableIndex"))
if mibBuilder.loadTexts: expressGS3ComMappingEntry.setStatus('mandatory')
expressGS3ComMappingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGS3ComMappingTableIndex.setStatus('mandatory')
expressGS3ComMappingTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGS3ComMappingTableName.setStatus('mandatory')
expressGS3ComMappingTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("createRequest", 1), ("destroyRequest", 2), ("active", 3), ("entryExistsError", 4), ("otherError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGS3ComMappingTableStatus.setStatus('mandatory')
expressGSVlan3ComMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 2))
expressGSVlan3ComMappingTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 2, 1), )
if mibBuilder.loadTexts: expressGSVlan3ComMappingTable.setStatus('mandatory')
expressGSVlan3ComMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 2, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGS3ComMappingTableIndex"), (0, "EXPRESSGS-MIB", "expressGSVlan3ComMappingIndex"))
if mibBuilder.loadTexts: expressGSVlan3ComMappingEntry.setStatus('mandatory')
expressGSVlan3ComMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSVlan3ComMappingIndex.setStatus('mandatory')
expressGSVlan3ComMappingVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVlan3ComMappingVlanID.setStatus('mandatory')
expressGSVlan3ComMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("createRequest", 1), ("destroyRequest", 2), ("active", 3), ("otherError", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVlan3ComMappingStatus.setStatus('mandatory')
expressGSVirtualPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 4))
expressGSVirtualSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 4, 1), )
if mibBuilder.loadTexts: expressGSVirtualSwitchPortTable.setStatus('mandatory')
expressGSVirtualSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 4, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSVirtualSwitchPortIndex"))
if mibBuilder.loadTexts: expressGSVirtualSwitchPortEntry.setStatus('mandatory')
expressGSVirtualSwitchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 4, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSVirtualSwitchPortIndex.setStatus('mandatory')
expressGSVirtualSwitchPortFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("trunkingFormat", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVirtualSwitchPortFormat.setStatus('mandatory')
expressGSVirtualSwitchPortBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 4, 1, 1, 3), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVirtualSwitchPortBridgePort.setStatus('mandatory')
expressGSVirtualSwitchPortBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("persistent", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSVirtualSwitchPortBindingType.setStatus('mandatory')
expressGSVirtualSwitchPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 7, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("createRequest", 1), ("destroyRequest", 2), ("active", 3), ("otherError", 4), ("entryExistsError", 5), ("entryNoExistError", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSVirtualSwitchPortStatus.setStatus('mandatory')
expressGSEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 10))
expressGSEventMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 1))
expressGSEventTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 1, 1), )
if mibBuilder.loadTexts: expressGSEventTable.setStatus('mandatory')
expressGSEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 1, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSEventIndex"))
if mibBuilder.loadTexts: expressGSEventEntry.setStatus('mandatory')
expressGSEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventIndex.setStatus('mandatory')
expressGSEventMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSEventMode.setStatus('mandatory')
expressGSEventLogAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSEventLogAction.setStatus('mandatory')
expressGSEventTrapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSEventTrapAction.setStatus('mandatory')
expressGSEventConsoleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSEventConsoleAction.setStatus('mandatory')
expressGSEventLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 2))
expressGSLogTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSLogTableMaxSize.setStatus('mandatory')
expressGSLogLastEntry = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSLogLastEntry.setStatus('mandatory')
expressGSLogWraps = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSLogWraps.setStatus('mandatory')
expressGSEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3))
expressGSEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1), )
if mibBuilder.loadTexts: expressGSEventLogTable.setStatus('mandatory')
expressGSEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSEventLogIndex"))
if mibBuilder.loadTexts: expressGSEventLogEntry.setStatus('mandatory')
expressGSEventLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogEventIndex.setStatus('mandatory')
expressGSEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogIndex.setStatus('mandatory')
expressGSEventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogTime.setStatus('mandatory')
expressGSEventLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogDescr.setStatus('mandatory')
expressGSEventLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 5), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogType.setStatus('mandatory')
expressGSEventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogSeverity.setStatus('mandatory')
expressGSEventLogDTM = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogDTM.setStatus('mandatory')
expressGSEventLogResType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 8), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogResType.setStatus('mandatory')
expressGSEventLogResID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 9), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogResID.setStatus('mandatory')
expressGSEventLogResLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogResLeaf.setStatus('mandatory')
expressGSEventLogValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 11), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogValueType.setStatus('mandatory')
expressGSEventLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogValue.setStatus('mandatory')
expressGSEventLogEpochTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogEpochTime.setStatus('mandatory')
expressGSEventLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventLogID.setStatus('mandatory')
expressGSShutdownLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 4))
expressGSShutdownLogTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expressGSShutdownLogTableMaxSize.setStatus('mandatory')
expressGSShutdownLogLastEntry = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSShutdownLogLastEntry.setStatus('mandatory')
expressGSShutdownLogAcknowledged = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-acknowledged", 1), ("acknowledged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSShutdownLogAcknowledged.setStatus('mandatory')
expressGSEventShutdownLog = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5))
expressGSEventShutdownLogTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1), )
if mibBuilder.loadTexts: expressGSEventShutdownLogTable.setStatus('mandatory')
expressGSEventShutdownLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSEventShutdownLogIndex"))
if mibBuilder.loadTexts: expressGSEventShutdownLogEntry.setStatus('mandatory')
expressGSEventShutdownLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogEventIndex.setStatus('mandatory')
expressGSEventShutdownLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogIndex.setStatus('mandatory')
expressGSEventShutdownLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogTime.setStatus('mandatory')
expressGSEventShutdownLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogDescr.setStatus('mandatory')
expressGSEventShutdownLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 5), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogType.setStatus('mandatory')
expressGSEventShutdownLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogSeverity.setStatus('mandatory')
expressGSEventShutdownLogDTM = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogDTM.setStatus('mandatory')
expressGSEventShutdownLogResType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 8), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogResType.setStatus('mandatory')
expressGSEventShutdownLogResID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 9), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogResID.setStatus('mandatory')
expressGSEventShutdownLogResLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogResLeaf.setStatus('mandatory')
expressGSEventShutdownLogValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 11), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogValueType.setStatus('mandatory')
expressGSEventShutdownLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogValue.setStatus('mandatory')
expressGSEventShutdownLogEpochTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogEpochTime.setStatus('mandatory')
expressGSEventShutdownLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventShutdownLogID.setStatus('mandatory')
expressGSEventTrapMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6))
expressGSEventTrapEventIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapEventIndex.setStatus('mandatory')
expressGSEventTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapTime.setStatus('mandatory')
expressGSEventTrapDescr = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapDescr.setStatus('mandatory')
expressGSEventTrapType = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 4), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapType.setStatus('mandatory')
expressGSEventTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapSeverity.setStatus('mandatory')
expressGSEventTrapDTM = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapDTM.setStatus('mandatory')
expressGSEventTrapResType = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 7), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapResType.setStatus('mandatory')
expressGSEventTrapResID = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 8), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapResID.setStatus('mandatory')
expressGSEventTrapResLeaf = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapResLeaf.setStatus('mandatory')
expressGSEventTrapValueType = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 10), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapValueType.setStatus('mandatory')
expressGSEventTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapValue.setStatus('mandatory')
expressGSEventTrapEpochTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapEpochTime.setStatus('mandatory')
expressGSEventTrapID = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 10, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSEventTrapID.setStatus('mandatory')
expressGSAlarmMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 11))
expressGSAlarmGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 1))
expressGSAlarmGeneralActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSAlarmGeneralActiveEntries.setStatus('mandatory')
expressGSAlarmGeneralTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSAlarmGeneralTimeStamp.setStatus('mandatory')
expressGSAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2))
expressGSActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2), )
if mibBuilder.loadTexts: expressGSActiveAlarmTable.setStatus('mandatory')
expressGSActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2, 1), ).setIndexNames((0, "EXPRESSGS-MIB", "expressGSActiveAlarmIndex"))
if mibBuilder.loadTexts: expressGSActiveAlarmEntry.setStatus('mandatory')
expressGSActiveAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSActiveAlarmIndex.setStatus('mandatory')
expressGSActiveAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSActiveAlarmName.setStatus('mandatory')
expressGSActiveAlarmValueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSActiveAlarmValueHigh.setStatus('mandatory')
expressGSActiveAlarmValueLow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSActiveAlarmValueLow.setStatus('mandatory')
expressGSActiveAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSActiveAlarmVariable.setStatus('mandatory')
expressGSActiveAlarmResType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2, 1, 6), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSActiveAlarmResType.setStatus('mandatory')
expressGSActiveAlarmResID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2, 1, 7), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSActiveAlarmResID.setStatus('mandatory')
expressGSActiveAlarmLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSActiveAlarmLeaf.setStatus('mandatory')
expressGSActiveAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 13, 11, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressGSActiveAlarmOwner.setStatus('mandatory')
expressGSSnmpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13, 13))
expressGSSystemTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 13, 13) + (0,2)).setObjects(("EXPRESSGS-MIB", "expressGSEventTrapEventIndex"), ("EXPRESSGS-MIB", "expressGSEventTrapTime"), ("EXPRESSGS-MIB", "expressGSEventTrapDescr"), ("EXPRESSGS-MIB", "expressGSEventTrapType"), ("EXPRESSGS-MIB", "expressGSEventTrapSeverity"), ("EXPRESSGS-MIB", "expressGSEventTrapDTM"), ("EXPRESSGS-MIB", "expressGSEventTrapResType"), ("EXPRESSGS-MIB", "expressGSEventTrapResID"), ("EXPRESSGS-MIB", "expressGSEventTrapResLeaf"), ("EXPRESSGS-MIB", "expressGSEventTrapValueType"), ("EXPRESSGS-MIB", "expressGSEventTrapValue"), ("EXPRESSGS-MIB", "expressGSEventTrapEpochTime"), ("EXPRESSGS-MIB", "expressGSEventTrapID"))
expressGSConfigurationTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 13, 13) + (0,3)).setObjects(("EXPRESSGS-MIB", "expressGSEventTrapEventIndex"), ("EXPRESSGS-MIB", "expressGSEventTrapTime"), ("EXPRESSGS-MIB", "expressGSEventTrapDescr"), ("EXPRESSGS-MIB", "expressGSEventTrapType"), ("EXPRESSGS-MIB", "expressGSEventTrapSeverity"), ("EXPRESSGS-MIB", "expressGSEventTrapDTM"), ("EXPRESSGS-MIB", "expressGSEventTrapResType"), ("EXPRESSGS-MIB", "expressGSEventTrapResID"), ("EXPRESSGS-MIB", "expressGSEventTrapResLeaf"), ("EXPRESSGS-MIB", "expressGSEventTrapValueType"), ("EXPRESSGS-MIB", "expressGSEventTrapValue"), ("EXPRESSGS-MIB", "expressGSEventTrapEpochTime"), ("EXPRESSGS-MIB", "expressGSEventTrapID"))
expressGSTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 13, 13) + (0,4)).setObjects(("EXPRESSGS-MIB", "expressGSEventTrapEventIndex"), ("EXPRESSGS-MIB", "expressGSEventTrapTime"), ("EXPRESSGS-MIB", "expressGSEventTrapDescr"), ("EXPRESSGS-MIB", "expressGSEventTrapType"), ("EXPRESSGS-MIB", "expressGSEventTrapSeverity"), ("EXPRESSGS-MIB", "expressGSEventTrapDTM"), ("EXPRESSGS-MIB", "expressGSEventTrapResType"), ("EXPRESSGS-MIB", "expressGSEventTrapResID"), ("EXPRESSGS-MIB", "expressGSEventTrapResLeaf"), ("EXPRESSGS-MIB", "expressGSEventTrapValueType"), ("EXPRESSGS-MIB", "expressGSEventTrapValue"), ("EXPRESSGS-MIB", "expressGSEventTrapEpochTime"), ("EXPRESSGS-MIB", "expressGSEventTrapID"))
expressGSResourceTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 13, 13) + (0,5)).setObjects(("EXPRESSGS-MIB", "expressGSEventTrapEventIndex"), ("EXPRESSGS-MIB", "expressGSEventTrapTime"), ("EXPRESSGS-MIB", "expressGSEventTrapDescr"), ("EXPRESSGS-MIB", "expressGSEventTrapType"), ("EXPRESSGS-MIB", "expressGSEventTrapSeverity"), ("EXPRESSGS-MIB", "expressGSEventTrapDTM"), ("EXPRESSGS-MIB", "expressGSEventTrapResType"), ("EXPRESSGS-MIB", "expressGSEventTrapResID"), ("EXPRESSGS-MIB", "expressGSEventTrapResLeaf"), ("EXPRESSGS-MIB", "expressGSEventTrapValueType"), ("EXPRESSGS-MIB", "expressGSEventTrapValue"), ("EXPRESSGS-MIB", "expressGSEventTrapEpochTime"), ("EXPRESSGS-MIB", "expressGSEventTrapID"))
expressGSFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 13, 13) + (0,6)).setObjects(("EXPRESSGS-MIB", "expressGSEventTrapEventIndex"), ("EXPRESSGS-MIB", "expressGSEventTrapTime"), ("EXPRESSGS-MIB", "expressGSEventTrapDescr"), ("EXPRESSGS-MIB", "expressGSEventTrapType"), ("EXPRESSGS-MIB", "expressGSEventTrapSeverity"), ("EXPRESSGS-MIB", "expressGSEventTrapDTM"), ("EXPRESSGS-MIB", "expressGSEventTrapResType"), ("EXPRESSGS-MIB", "expressGSEventTrapResID"), ("EXPRESSGS-MIB", "expressGSEventTrapResLeaf"), ("EXPRESSGS-MIB", "expressGSEventTrapValueType"), ("EXPRESSGS-MIB", "expressGSEventTrapValue"), ("EXPRESSGS-MIB", "expressGSEventTrapEpochTime"), ("EXPRESSGS-MIB", "expressGSEventTrapID"))
expressGSPowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 13, 13) + (0,9)).setObjects(("EXPRESSGS-MIB", "expressGSEventTrapEventIndex"), ("EXPRESSGS-MIB", "expressGSEventTrapTime"), ("EXPRESSGS-MIB", "expressGSEventTrapDescr"), ("EXPRESSGS-MIB", "expressGSEventTrapType"), ("EXPRESSGS-MIB", "expressGSEventTrapSeverity"), ("EXPRESSGS-MIB", "expressGSEventTrapDTM"), ("EXPRESSGS-MIB", "expressGSEventTrapResType"), ("EXPRESSGS-MIB", "expressGSEventTrapResID"), ("EXPRESSGS-MIB", "expressGSEventTrapResLeaf"), ("EXPRESSGS-MIB", "expressGSEventTrapValueType"), ("EXPRESSGS-MIB", "expressGSEventTrapValue"), ("EXPRESSGS-MIB", "expressGSEventTrapEpochTime"), ("EXPRESSGS-MIB", "expressGSEventTrapID"))
mibBuilder.exportSymbols("EXPRESSGS-MIB", expressGSEventShutdownLogEntry=expressGSEventShutdownLogEntry, expressGSSwitchAgingTime=expressGSSwitchAgingTime, expressGSShutdownLogMgt=expressGSShutdownLogMgt, expressGSAgentGen=expressGSAgentGen, expressGSSwitchSTPConfig=expressGSSwitchSTPConfig, expressGSInventoryResourceType=expressGSInventoryResourceType, expressGSCommunityIndex=expressGSCommunityIndex, expressGSBufferIndex=expressGSBufferIndex, expressGSL2AddressVlanID=expressGSL2AddressVlanID, expressGSVlanEntry=expressGSVlanEntry, expressGSInventoryResourceIndex=expressGSInventoryResourceIndex, expressGSPortCategoryMgt=expressGSPortCategoryMgt, expressGSAgent=expressGSAgent, expressGSEventConsoleAction=expressGSEventConsoleAction, expressGSPortMirroringMgt=expressGSPortMirroringMgt, expressGSEventLogResID=expressGSEventLogResID, expressGSBridgeStpTimeSinceTopologyChange=expressGSBridgeStpTimeSinceTopologyChange, expressGSPortMgt=expressGSPortMgt, expressGSSwitchPort3ComMappingTableIndex=expressGSSwitchPort3ComMappingTableIndex, expressGSHuntGroupNumberOfPorts=expressGSHuntGroupNumberOfPorts, expressGSL2AddressIndex=expressGSL2AddressIndex, expressGSEventShutdownLogIndex=expressGSEventShutdownLogIndex, expressGSEventShutdownLogID=expressGSEventShutdownLogID, expressGSL2AddressChangeWraps=expressGSL2AddressChangeWraps, expressGSL2AddrSummary=expressGSL2AddrSummary, expressGSEventShutdownLogDescr=expressGSEventShutdownLogDescr, expressGSPowerSupplyTable=expressGSPowerSupplyTable, expressGSLogLastEntry=expressGSLogLastEntry, expressGSPortMirroringRate=expressGSPortMirroringRate, expressGSL2AddrSummaryMgt=expressGSL2AddrSummaryMgt, expressGSSwitchPortSTAPMode=expressGSSwitchPortSTAPMode, expressGSInventoryScratchPad=expressGSInventoryScratchPad, expressGSEventEntry=expressGSEventEntry, expressGSL2AddressMacAddress=expressGSL2AddressMacAddress, expressGSAgentWeb=expressGSAgentWeb, expressGSPortSpeedTable=expressGSPortSpeedTable, expressGSL2AddressPersistence=expressGSL2AddressPersistence, expressGSBridgePortDesignatedPort=expressGSBridgePortDesignatedPort, expressGSCommunityAddress=expressGSCommunityAddress, expressGSInventoryEntry=expressGSInventoryEntry, expressGS3ComMappingTableIndex=expressGS3ComMappingTableIndex, expressGSPowerMgmtCtl=expressGSPowerMgmtCtl, expressGSSystemTrap=expressGSSystemTrap, expressGSBridgePortEnableChangeDetection=expressGSBridgePortEnableChangeDetection, expressGSEventTrapMgmt=expressGSEventTrapMgmt, expressGSBufferFabricPort=expressGSBufferFabricPort, expressGSShutdownLogTableMaxSize=expressGSShutdownLogTableMaxSize, expressGSTempEntry=expressGSTempEntry, expressGSL2AddrChangeMgt=expressGSL2AddrChangeMgt, expressGSBufferPriorityServicing=expressGSBufferPriorityServicing, expressGSBridgeMgmt=expressGSBridgeMgmt, expressGSPortMirroringEntry=expressGSPortMirroringEntry, expressGSL2AddressControlStatus=expressGSL2AddressControlStatus, expressGSHuntGroupTable=expressGSHuntGroupTable, expressGSVlanID=expressGSVlanID, expressGSEventLogMgt=expressGSEventLogMgt, expressGSPortCategoryMode=expressGSPortCategoryMode, expressGSBridgeStpRootPort=expressGSBridgeStpRootPort, expressGSBridgeStpHoldTime=expressGSBridgeStpHoldTime, expressGSBufferFabricPortDirection=expressGSBufferFabricPortDirection, expressGSBridgePortTable=expressGSBridgePortTable, expressGSPortPacePriorityMgt=expressGSPortPacePriorityMgt, expressGSSwitchPortKnownMode=expressGSSwitchPortKnownMode, expressGSVlan3ComMappingVlanID=expressGSVlan3ComMappingVlanID, expressGSEventShutdownLogDTM=expressGSEventShutdownLogDTM, expressGSEventShutdownLogResLeaf=expressGSEventShutdownLogResLeaf, expressGSSwitchPortMirrorMode=expressGSSwitchPortMirrorMode, expressGSSwitchPortIgnoreTag=expressGSSwitchPortIgnoreTag, expressGSCommunityEntry=expressGSCommunityEntry, expressGSBridgeStpTopChanges=expressGSBridgeStpTopChanges, expressGSBufferPriorityThreshold=expressGSBufferPriorityThreshold, expressGSSnmpTraps=expressGSSnmpTraps, expressGSSwitchPortTrunkingMode=expressGSSwitchPortTrunkingMode, expressGSSwitchPortTable=expressGSSwitchPortTable, expressGSResourceTrap=expressGSResourceTrap, expressGSAlarmGeneral=expressGSAlarmGeneral, expressGSPortDuplexTable=expressGSPortDuplexTable, expressGSEventLogEpochTime=expressGSEventLogEpochTime, expressGSEventLogResLeaf=expressGSEventLogResLeaf, expressGSModuleBaseType=expressGSModuleBaseType, expressGSBufferEntry=expressGSBufferEntry, expressGS3ComMappingTableName=expressGS3ComMappingTableName, expressGSActiveAlarmValueLow=expressGSActiveAlarmValueLow, expressGSBufferHighStaleDrops=expressGSBufferHighStaleDrops, expressGSEventShutdownLogType=expressGSEventShutdownLogType, expressGSShutdownLogLastEntry=expressGSShutdownLogLastEntry, expressGSPortPacePriorityTable=expressGSPortPacePriorityTable, expressGSEventLogEventIndex=expressGSEventLogEventIndex, expressGSInventorySerialNumber=expressGSInventorySerialNumber, expressGSBridgePortPathCost=expressGSBridgePortPathCost, expressGSModuleType=expressGSModuleType, expressGSBridgePortEnable=expressGSBridgePortEnable, expressGSChassis=expressGSChassis, expressGSBridgePortDesignatedRoot=expressGSBridgePortDesignatedRoot, expressGSVlan3ComMappingEntry=expressGSVlan3ComMappingEntry, expressGSModuleSlotOffset=expressGSModuleSlotOffset, expressGSVlan3ComMappingStatus=expressGSVlan3ComMappingStatus, expressGSConfigurationTrap=expressGSConfigurationTrap, expressGSChassisSlots=expressGSChassisSlots, expressGSEvents=expressGSEvents, expressGSL2AddressStatus=expressGSL2AddressStatus, expressGSEventLog=expressGSEventLog, expressGSActiveAlarmLeaf=expressGSActiveAlarmLeaf, expressGSVirtualSwitchPortStatus=expressGSVirtualSwitchPortStatus, expressGSEventShutdownLogTable=expressGSEventShutdownLogTable, expressGSEventTable=expressGSEventTable, expressGSPowerControlMode=expressGSPowerControlMode, expressGSEventShutdownLogSeverity=expressGSEventShutdownLogSeverity, expressGSEventTrapResLeaf=expressGSEventTrapResLeaf, expressGSHuntGroupIndex=expressGSHuntGroupIndex, expressGSPowerMgmtGen=expressGSPowerMgmtGen, expressGSL2AddressChangeWrapCount=expressGSL2AddressChangeWrapCount, expressGSVlanName=expressGSVlanName, expressGSVlans=expressGSVlans, expressGSPowerSupplyType=expressGSPowerSupplyType, expressGSEventTrapResID=expressGSEventTrapResID, expressGSBufferTable=expressGSBufferTable, expressGSModuleSlotWidth=expressGSModuleSlotWidth, expressGSInventoryManufactureInfo=expressGSInventoryManufactureInfo, expressGSHuntGroupLoadSharing=expressGSHuntGroupLoadSharing, expressGSL2AddressChangeSummary=expressGSL2AddressChangeSummary, expressGSVirtualSwitchPortBridgePort=expressGSVirtualSwitchPortBridgePort, expressGSSwitchPortLearningMode=expressGSSwitchPortLearningMode, expressGSBridgeStpMaxAge=expressGSBridgeStpMaxAge, expressGSTempLowerLimit=expressGSTempLowerLimit, expressGSL2AddressChangeTable=expressGSL2AddressChangeTable, expressGSAlarmMgt=expressGSAlarmMgt, BridgeId=BridgeId, expressGSEventLogValueType=expressGSEventLogValueType, esGigaSwitch=esGigaSwitch, expressGSPowerSystems=expressGSPowerSystems, expressGSSwitchPortFastStart=expressGSSwitchPortFastStart, expressGSPortCategoryEntry=expressGSPortCategoryEntry, EventCategory=EventCategory, expressGSBufferCongestionDrops=expressGSBufferCongestionDrops, expressGSEventTrapValueType=expressGSEventTrapValueType, expressGSL2AddressBindingValid=expressGSL2AddressBindingValid, expressGSL2AddressPortBinding=expressGSL2AddressPortBinding, expressGSPortMirroringIndex=expressGSPortMirroringIndex, expressGSL2AddressControlPersistence=expressGSL2AddressControlPersistence, expressGSPortGroupBinding=expressGSPortGroupBinding, expressGSSwitchPortIndex=expressGSSwitchPortIndex, expressGSBridgeStpBridgeMaxAge=expressGSBridgeStpBridgeMaxAge, expressGSActiveAlarmTable=expressGSActiveAlarmTable, expressGSVlanTable=expressGSVlanTable, expressGSL2AddressTableIndex=expressGSL2AddressTableIndex, expressGSSwitchPortPhysicalPort=expressGSSwitchPortPhysicalPort, expressGSInventoryVersion=expressGSInventoryVersion, expressGSCommunityTrapReceiver=expressGSCommunityTrapReceiver, expressGSVlan3ComMappingIndex=expressGSVlan3ComMappingIndex, expressGSActiveAlarmIndex=expressGSActiveAlarmIndex, expressGSPortSpeedState=expressGSPortSpeedState, expressGSTempUpperLimit=expressGSTempUpperLimit, mib2ext=mib2ext, expressGSBufferSwitchPort=expressGSBufferSwitchPort, expressGSBridgeIndex=expressGSBridgeIndex, expressGSBridgePortDesignatedCost=expressGSBridgePortDesignatedCost, expressGSModules=expressGSModules, DisplayString=DisplayString, expressGSActiveAlarmResID=expressGSActiveAlarmResID, expressGSEventLogEntry=expressGSEventLogEntry, expressGSL2AddrMgmt=expressGSL2AddrMgmt, expressGSTempValue=expressGSTempValue, expressGSPortSpeedEntry=expressGSPortSpeedEntry, expressGSPortDuplexMgt=expressGSPortDuplexMgt, expressGSPowerControlTable=expressGSPowerControlTable, expressGSPortAutoNegotiationMgt=expressGSPortAutoNegotiationMgt, expressGSPortSpeedMgt=expressGSPortSpeedMgt, expressGSBufferAgeTimer=expressGSBufferAgeTimer, expressGSPortMirroringTable=expressGSPortMirroringTable, expressGSActiveAlarmValueHigh=expressGSActiveAlarmValueHigh, expressGSVirtualSwitchPortIndex=expressGSVirtualSwitchPortIndex, expressGSEventLogDescr=expressGSEventLogDescr, expressGSVirtualSwitchPortFormat=expressGSVirtualSwitchPortFormat, expressGSBufferMemory=expressGSBufferMemory, expressGSPowerSupplyOutputStatus=expressGSPowerSupplyOutputStatus, expressGSL2AddressTable=expressGSL2AddressTable, expressGSEventLogValue=expressGSEventLogValue, expressGSPorts=expressGSPorts, MacAddress=MacAddress, expressGSPortStatus=expressGSPortStatus, expressGSL2AddressControlVlanID=expressGSL2AddressControlVlanID, expressGSBridgeTable=expressGSBridgeTable, expressGSL2AddressForward=expressGSL2AddressForward, expressGSPortAutoNegotiationDuplexAdvertisement=expressGSPortAutoNegotiationDuplexAdvertisement, expressGSPowerSupplyStatus=expressGSPowerSupplyStatus, expressGSCommunityTable=expressGSCommunityTable, expressGSBridgePortState=expressGSBridgePortState, expressGSL2AddressChangeIndex=expressGSL2AddressChangeIndex, expressGSAgentWebServerURL=expressGSAgentWebServerURL, expressGSSwitchGen=expressGSSwitchGen, expressGSPortRateLimitEntry=expressGSPortRateLimitEntry, expressGSPortFlowControlMgt=expressGSPortFlowControlMgt, expressGSBridgePortPriority=expressGSBridgePortPriority, expressGSSwitchPortMgt=expressGSSwitchPortMgt, expressGSVlanAFTIndex=expressGSVlanAFTIndex, expressGSPortMirroringSourceSubPort=expressGSPortMirroringSourceSubPort, expressGSVlanMappings=expressGSVlanMappings, expressGSPortRateLimitMode=expressGSPortRateLimitMode, expressGSSwitchPortHuntGroup=expressGSSwitchPortHuntGroup, expressGSEventLogResType=expressGSEventLogResType, expressGSModuleIndex=expressGSModuleIndex, expressGSActiveAlarmVariable=expressGSActiveAlarmVariable, expressGSPortRateLimitRate=expressGSPortRateLimitRate, expressGSVirtualPorts=expressGSVirtualPorts, expressGSEventTrapID=expressGSEventTrapID, expressGSSwitchPortVlanID=expressGSSwitchPortVlanID, expressGSPowerCapacity=expressGSPowerCapacity, expressGSTemperatureTrap=expressGSTemperatureTrap, expressGSL2AddressControlPortBinding=expressGSL2AddressControlPortBinding, expressGSL2AddressChangeLast=expressGSL2AddressChangeLast, expressGSBridgeStatus=expressGSBridgeStatus, expressGSBridgePortFastStart=expressGSBridgePortFastStart, expressGSVlanMgt=expressGSVlanMgt, expressGSPowerSupplyIndex=expressGSPowerSupplyIndex, expressGSSwitchPortEntry=expressGSSwitchPortEntry, expressGSEventTrapEventIndex=expressGSEventTrapEventIndex, expressGSEventLogAction=expressGSEventLogAction, ResourceId=ResourceId, expressGSInventoryTable=expressGSInventoryTable, expressGSL2AddressControlEntry=expressGSL2AddressControlEntry, expressGSAgentWebServerHelpDirectory=expressGSAgentWebServerHelpDirectory, expressGSEventLogDTM=expressGSEventLogDTM, expressGSBridgeStpRootCost=expressGSBridgeStpRootCost, expressGSVlan3ComMapping=expressGSVlan3ComMapping, expressGSAlarmGeneralTimeStamp=expressGSAlarmGeneralTimeStamp, expressGSBufferHighOverflowDrops=expressGSBufferHighOverflowDrops, expressGSBridgePortMgmt=expressGSBridgePortMgmt, expressGSPowerControlEntry=expressGSPowerControlEntry, expressGSBridgeStpForwardDelay=expressGSBridgeStpForwardDelay, expressGSPortMirroringMirrorPort=expressGSPortMirroringMirrorPort, expressGSAlarmGeneralActiveEntries=expressGSAlarmGeneralActiveEntries, expressGSSwitchPortConvertToStatic=expressGSSwitchPortConvertToStatic, expressGSHuntGroupBasePort=expressGSHuntGroupBasePort, expressGSPortType=expressGSPortType, expressGSPowerSupplyOutputCapacity=expressGSPowerSupplyOutputCapacity, expressGSEventShutdownLogEventIndex=expressGSEventShutdownLogEventIndex, expressGSBufferCongestion=expressGSBufferCongestion, EventValueType=EventValueType, expressGSEventShutdownLogTime=expressGSEventShutdownLogTime, expressGSPortMode=expressGSPortMode, expressGSPortMirroringSamplerType=expressGSPortMirroringSamplerType, expressGSEventIndex=expressGSEventIndex, expressGSEventMgt=expressGSEventMgt, expressGSEventLogID=expressGSEventLogID, expressGSSwitchPortAutoVlanCreation=expressGSSwitchPortAutoVlanCreation, expressGSPortEntry=expressGSPortEntry, expressGSEventTrapDescr=expressGSEventTrapDescr, ResourceType=ResourceType, expressGSHuntGroupEntry=expressGSHuntGroupEntry, expressGSL2AddressControlPriority=expressGSL2AddressControlPriority, expressGSBridgeEntry=expressGSBridgeEntry, expressGSPortAutoNegotiationSpeedAdvertisement=expressGSPortAutoNegotiationSpeedAdvertisement, expressGSVlanStatus=expressGSVlanStatus)
mibBuilder.exportSymbols("EXPRESSGS-MIB", expressGSVlanBridgeIndex=expressGSVlanBridgeIndex, expressGSEventTrapEpochTime=expressGSEventTrapEpochTime, expressGSPortConnector=expressGSPortConnector, expressGSBufferMgt=expressGSBufferMgt, expressGSBufferLowStaleDrops=expressGSBufferLowStaleDrops, expressGSPortSpeedMode=expressGSPortSpeedMode, expressGSActiveAlarmName=expressGSActiveAlarmName, expressGSModuleTable=expressGSModuleTable, expressGSPortTable=expressGSPortTable, expressGSEventShutdownLogEpochTime=expressGSEventShutdownLogEpochTime, expressGSBridgeStpBridgeHelloTime=expressGSBridgeStpBridgeHelloTime, expressGSPowerSupplyInputStatus=expressGSPowerSupplyInputStatus, expressGSCommunityAddressType=expressGSCommunityAddressType, expressGSBridgeStpPriority=expressGSBridgeStpPriority, expressGSL2AddressControlMacAddress=expressGSL2AddressControlMacAddress, expressGSBridgeStpDesignatedRoot=expressGSBridgeStpDesignatedRoot, expressGSBridgePortDesignatedBridge=expressGSBridgePortDesignatedBridge, expressGSPortFlowControlMode=expressGSPortFlowControlMode, expressGSL2AddrDatabaseMgt=expressGSL2AddrDatabaseMgt, expressGSPortDuplexEntry=expressGSPortDuplexEntry, expressGSPowerSupplyEntry=expressGSPowerSupplyEntry, expressGSTempTable=expressGSTempTable, expressGSEventLogSeverity=expressGSEventLogSeverity, expressGSEventShutdownLogValue=expressGSEventShutdownLogValue, expressGSModuleName=expressGSModuleName, expressGSL2AddressEntry=expressGSL2AddressEntry, expressGSPortPacePriorityEntry=expressGSPortPacePriorityEntry, expressGSHuntGroupMgt=expressGSHuntGroupMgt, expressGSActiveAlarmResType=expressGSActiveAlarmResType, expressGSModuleEntry=expressGSModuleEntry, expressGSAlarms=expressGSAlarms, expressGSAgentCommunity=expressGSAgentCommunity, expressGSEventTrapTime=expressGSEventTrapTime, expressGSCommunityAccess=expressGSCommunityAccess, expressGSVirtualSwitchPortBindingType=expressGSVirtualSwitchPortBindingType, expressGSSwitchPortIfIndex=expressGSSwitchPortIfIndex, expressGSCommunitySecurityLevel=expressGSCommunitySecurityLevel, expressGSVirtualSwitchPortTable=expressGSVirtualSwitchPortTable, expressGSEventShutdownLogResID=expressGSEventShutdownLogResID, expressGS3ComMappingTableStatus=expressGS3ComMappingTableStatus, expressGSInventory=expressGSInventory, expressGSCommunityString=expressGSCommunityString, expressGSPowerSupplies=expressGSPowerSupplies, expressGSBridgeType=expressGSBridgeType, expressGSPortCategoryTable=expressGSPortCategoryTable, expressGS3ComMapping=expressGS3ComMapping, RowStatus=RowStatus, expressGSTempUpperWarning=expressGSTempUpperWarning, expressGSPortFlowControlTable=expressGSPortFlowControlTable, expressGSSwitching=expressGSSwitching, expressGSEventShutdownLogValueType=expressGSEventShutdownLogValueType, expressGSEventTrapType=expressGSEventTrapType, expressGSActiveAlarmEntry=expressGSActiveAlarmEntry, expressGSFanTrap=expressGSFanTrap, expressGSLogWraps=expressGSLogWraps, expressGSBridgeStpHelloTime=expressGSBridgeStpHelloTime, expressGSPortRateLimitMgt=expressGSPortRateLimitMgt, expressGSL2AddrSummaryTable=expressGSL2AddrSummaryTable, expressGSPortName=expressGSPortName, expressGSAgentMIBVersion=expressGSAgentMIBVersion, expressGSChassisGen=expressGSChassisGen, expressGSTemperature=expressGSTemperature, expressGSInventoryModelNumber=expressGSInventoryModelNumber, expressGSL2AddressChangeIndexChanged=expressGSL2AddressChangeIndexChanged, expressGSEventLogIndex=expressGSEventLogIndex, expressGSL2AddrSummaryEntry=expressGSL2AddrSummaryEntry, expressGSL2AddressCopy=expressGSL2AddressCopy, expressGSEventLogTable=expressGSEventLogTable, expressGSBridgePortIndex=expressGSBridgePortIndex, expressGSSwitchPortMappingMethod=expressGSSwitchPortMappingMethod, expressGSEventTrapResType=expressGSEventTrapResType, expressGSEventTrapSeverity=expressGSEventTrapSeverity, expressGSSwitchPortVlanBindingMethod=expressGSSwitchPortVlanBindingMethod, expressGSBufferPriorityAllocation=expressGSBufferPriorityAllocation, expressGSLogTableMaxSize=expressGSLogTableMaxSize, expressGSEventTrapDTM=expressGSEventTrapDTM, expressGSBridgeMode=expressGSBridgeMode, expressGSVlanAutoIncrementHTSize=expressGSVlanAutoIncrementHTSize, expressGSModulePorts=expressGSModulePorts, expressGSL2AddressControlIndex=expressGSL2AddressControlIndex, expressGSPortAutoNegotiationEntry=expressGSPortAutoNegotiationEntry, expressGSPortRateLimitTable=expressGSPortRateLimitTable, expressGSAgentMgrIndex=expressGSAgentMgrIndex, expressGSL2AddressChangeMaxEntries=expressGSL2AddressChangeMaxEntries, expressGSBufferLowOverflowDrops=expressGSBufferLowOverflowDrops, expressGSEventShutdownLog=expressGSEventShutdownLog, expressGSBridgePortForwardTransitions=expressGSBridgePortForwardTransitions, expressGSPowerUsed=expressGSPowerUsed, expressGSEventTrapValue=expressGSEventTrapValue, intel=intel, expressGSHuntGroupName=expressGSHuntGroupName, expressGSEventLogTime=expressGSEventLogTime, expressGSPortRateLimitBurstSize=expressGSPortRateLimitBurstSize, expressGSSwitchSuperAgingTime=expressGSSwitchSuperAgingTime, expressGSEventLogType=expressGSEventLogType, expressGSTempIndex=expressGSTempIndex, expressGSEventMode=expressGSEventMode, expressGSL2AddressControlTable=expressGSL2AddressControlTable, expressGSVlan3ComMappingTable=expressGSVlan3ComMappingTable, expressGSTempLowerWarning=expressGSTempLowerWarning, expressGSPowerTrap=expressGSPowerTrap, expressGSSwitchingLayerII=expressGSSwitchingLayerII, expressGSBridgePortSetDefault=expressGSBridgePortSetDefault, expressGSActiveAlarmOwner=expressGSActiveAlarmOwner, expressGSCommunityStatus=expressGSCommunityStatus, expressGSL2AddressChangeEntry=expressGSL2AddressChangeEntry, expressGSPortDuplexMode=expressGSPortDuplexMode, expressGSEventTrapAction=expressGSEventTrapAction, expressGSVirtualSwitchPortEntry=expressGSVirtualSwitchPortEntry, expressGSHuntGroupStatus=expressGSHuntGroupStatus, expressGSBridgeStpBridgeForwardDelay=expressGSBridgeStpBridgeForwardDelay, expressGSPortFlowControlEntry=expressGSPortFlowControlEntry, expressGSVlanInitialHashTableSize=expressGSVlanInitialHashTableSize, expressGSBridgePortEntry=expressGSBridgePortEntry, expressGSPowerControlPriority=expressGSPowerControlPriority, expressGSPortPacePriorityMode=expressGSPortPacePriorityMode, expressGSPortBaseType=expressGSPortBaseType, expressGSL2AddrControlMgt=expressGSL2AddrControlMgt, expressGS3ComMappingTable=expressGS3ComMappingTable, expressGS3ComMappingEntry=expressGS3ComMappingEntry, expressGSEventShutdownLogResType=expressGSEventShutdownLogResType, expressGSVlanIfIndex=expressGSVlanIfIndex, expressGSPortAutoNegotiationMode=expressGSPortAutoNegotiationMode, expressGSL2AddressPriority=expressGSL2AddressPriority, expressGSChassisType=expressGSChassisType, expressGSPowerControlUsed=expressGSPowerControlUsed, Timeout=Timeout, expressGSPortIndex=expressGSPortIndex, expressGSPortAutoNegotiationTable=expressGSPortAutoNegotiationTable, expressGSPortDuplexState=expressGSPortDuplexState, expressGSShutdownLogAcknowledged=expressGSShutdownLogAcknowledged)
