#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-DcmeMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-DcmeMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:20:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
RowPointer, StorageType, Integer32, Gauge32, RowStatus, Counter32, DisplayString, Unsigned32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowPointer", "StorageType", "Integer32", "Gauge32", "RowStatus", "Counter32", "DisplayString", "Unsigned32")
FixedPoint1, DigitString, PassportCounter64, Link, AsciiString, NonReplicated, EnterpriseDateAndTime, Hex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "FixedPoint1", "DigitString", "PassportCounter64", "Link", "AsciiString", "NonReplicated", "EnterpriseDateAndTime", "Hex")
mscComponents, mscPassportMIBs = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscComponents", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter64, NotificationType, IpAddress, Integer32, ModuleIdentity, Bits, ObjectIdentity, Gauge32, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "NotificationType", "IpAddress", "Integer32", "ModuleIdentity", "Bits", "ObjectIdentity", "Gauge32", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dcmeMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134))
mscDcme = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129))
mscDcmeRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1), )
if mibBuilder.loadTexts: mscDcmeRowStatusTable.setStatus('mandatory')
mscDcmeRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"))
if mibBuilder.loadTexts: mscDcmeRowStatusEntry.setStatus('mandatory')
mscDcmeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeRowStatus.setStatus('mandatory')
mscDcmeComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeComponentName.setStatus('mandatory')
mscDcmeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeStorageType.setStatus('mandatory')
mscDcmeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: mscDcmeIndex.setStatus('mandatory')
mscDcmeProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10), )
if mibBuilder.loadTexts: mscDcmeProvTable.setStatus('mandatory')
mscDcmeProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"))
if mibBuilder.loadTexts: mscDcmeProvEntry.setStatus('mandatory')
mscDcmeCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeCommentText.setStatus('mandatory')
mscDcmePreestablishedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmePreestablishedConnections.setStatus('mandatory')
mscDcmeTrmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeTrmThreshold.setStatus('mandatory')
mscDcmeTrmSignalChangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeTrmSignalChangeInterval.setStatus('mandatory')
mscDcmeSpeechAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeSpeechAlarmThreshold.setStatus('mandatory')
mscDcmeAudio3kHzAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeAudio3kHzAlarmThreshold.setStatus('mandatory')
mscDcmeUnrestricted64kAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeUnrestricted64kAlarmThreshold.setStatus('mandatory')
mscDcmeAlarmTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeAlarmTimeInterval.setStatus('mandatory')
mscDcmeMaxUnrestricted64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 420)).clone(420)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeMaxUnrestricted64kCalls.setStatus('mandatory')
mscDcmeStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 11), )
if mibBuilder.loadTexts: mscDcmeStateTable.setStatus('mandatory')
mscDcmeStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"))
if mibBuilder.loadTexts: mscDcmeStateEntry.setStatus('mandatory')
mscDcmeAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeAdminState.setStatus('mandatory')
mscDcmeOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeOperationalState.setStatus('mandatory')
mscDcmeUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeUsageState.setStatus('mandatory')
mscDcmeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 13), )
if mibBuilder.loadTexts: mscDcmeStatsTable.setStatus('mandatory')
mscDcmeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"))
if mibBuilder.loadTexts: mscDcmeStatsEntry.setStatus('mandatory')
mscDcmeTrm64kNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeTrm64kNotAvailable.setStatus('mandatory')
mscDcmeTrmSpeechNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeTrmSpeechNotAvailable.setStatus('mandatory')
mscDcmeDLinksTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 419), )
if mibBuilder.loadTexts: mscDcmeDLinksTable.setStatus('mandatory')
mscDcmeDLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 419, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeDLinksValue"))
if mibBuilder.loadTexts: mscDcmeDLinksEntry.setStatus('mandatory')
mscDcmeDLinksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 419, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeDLinksValue.setStatus('mandatory')
mscDcmeDLinksRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 419, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscDcmeDLinksRowStatus.setStatus('mandatory')
mscDcmeActiveDcmeLinksTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 420), )
if mibBuilder.loadTexts: mscDcmeActiveDcmeLinksTable.setStatus('mandatory')
mscDcmeActiveDcmeLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 420, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeActiveDcmeLinksValue"))
if mibBuilder.loadTexts: mscDcmeActiveDcmeLinksEntry.setStatus('mandatory')
mscDcmeActiveDcmeLinksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 420, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeActiveDcmeLinksValue.setStatus('mandatory')
mscDcmeProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2))
mscDcmeProfileRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1), )
if mibBuilder.loadTexts: mscDcmeProfileRowStatusTable.setStatus('mandatory')
mscDcmeProfileRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeProfileIndex"))
if mibBuilder.loadTexts: mscDcmeProfileRowStatusEntry.setStatus('mandatory')
mscDcmeProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeProfileRowStatus.setStatus('mandatory')
mscDcmeProfileComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeProfileComponentName.setStatus('mandatory')
mscDcmeProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeProfileStorageType.setStatus('mandatory')
mscDcmeProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDcmeProfileIndex.setStatus('mandatory')
mscDcmeProfileLCOpsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10), )
if mibBuilder.loadTexts: mscDcmeProfileLCOpsTable.setStatus('mandatory')
mscDcmeProfileLCOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeProfileIndex"))
if mibBuilder.loadTexts: mscDcmeProfileLCOpsEntry.setStatus('mandatory')
mscDcmeProfileSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileSetupPriority.setStatus('mandatory')
mscDcmeProfileHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileHoldingPriority.setStatus('mandatory')
mscDcmeProfileBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1))).clone('bumpWhenNecessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileBumpPreference.setStatus('mandatory')
mscDcmeProfileRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7))).clone('voice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileRequiredTrafficType.setStatus('mandatory')
mscDcmeProfilePermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfilePermittedTrunkTypes.setStatus('mandatory')
mscDcmeProfileRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileRequiredSecurity.setStatus('mandatory')
mscDcmeProfileRequiredCustomerParm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileRequiredCustomerParm.setStatus('mandatory')
mscDcmeProfilePathAttributeToMinimize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cost", 0), ("delay", 1))).clone('cost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfilePathAttributeToMinimize.setStatus('mandatory')
mscDcmeProfileMaximumAcceptableCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1280)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMaximumAcceptableCost.setStatus('mandatory')
mscDcmeProfileMaximumAcceptableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMaximumAcceptableDelay.setStatus('mandatory')
mscDcmeProfileEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileEmissionPriority.setStatus('mandatory')
mscDcmeProfileDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileDiscardPriority.setStatus('mandatory')
mscDcmeProfilePathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1))).clone('reRoutePath')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfilePathFailureAction.setStatus('mandatory')
mscDcmeProfileOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileOptimization.setStatus('mandatory')
mscDcmeProfileFrOpsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11), )
if mibBuilder.loadTexts: mscDcmeProfileFrOpsTable.setStatus('mandatory')
mscDcmeProfileFrOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeProfileIndex"))
if mibBuilder.loadTexts: mscDcmeProfileFrOpsEntry.setStatus('mandatory')
mscDcmeProfileVoiceEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("g711G726", 0), ("g728at16", 1), ("g729at8", 2))).clone('g728at16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileVoiceEncoding.setStatus('mandatory')
mscDcmeProfileMaxVoiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMaxVoiceBitRate.setStatus('mandatory')
mscDcmeProfileMinVoiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMinVoiceBitRate.setStatus('mandatory')
mscDcmeProfileVoiceTrafficOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bandwidth", 0), ("delay", 1))).clone('bandwidth')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileVoiceTrafficOptimization.setStatus('mandatory')
mscDcmeProfileSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("congested", 2), ("slow", 3), ("slowAndCongested", 4))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileSilenceSuppression.setStatus('mandatory')
mscDcmeProfileSilenceSuppressionFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileSilenceSuppressionFactor.setStatus('mandatory')
mscDcmeProfileEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileEchoCancellation.setStatus('mandatory')
mscDcmeProfileModemFaxEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("g711G726", 0), ("faxRelayOnly", 1), ("faxRelayG711G726", 2), ("useVoiceEncoding", 3))).clone('faxRelayOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileModemFaxEncoding.setStatus('mandatory')
mscDcmeProfileMaxModemFaxG711G726Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMaxModemFaxG711G726Rate.setStatus('mandatory')
mscDcmeProfileMinModemFaxG711G726Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMinModemFaxG711G726Rate.setStatus('mandatory')
mscDcmeProfileFaxIdleSuppressionG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileFaxIdleSuppressionG711G726.setStatus('mandatory')
mscDcmeProfileInsertedOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 15, 22, 30, 35, 40, 45, 50, 75, 100, 125, 150))).clone(namedValues=NamedValues(("n5", 5), ("n15", 15), ("n22", 22), ("n30", 30), ("n35", 35), ("n40", 40), ("n45", 45), ("n50", 50), ("n75", 75), ("n100", 100), ("n125", 125), ("n150", 150))).clone('n22')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileInsertedOutputDelay.setStatus('mandatory')
mscDcmeProfileIngressAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileIngressAudioGain.setStatus('mandatory')
mscDcmeProfileEgressAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileEgressAudioGain.setStatus('mandatory')
mscDcmeProfileSpeechHangoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 500)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileSpeechHangoverTime.setStatus('mandatory')
mscDcmeProfileComfortNoiseCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-78, -78), ValueRangeConstraint(-65, -65), ValueRangeConstraint(-60, -60), ValueRangeConstraint(-54, -54), ValueRangeConstraint(-52, -52), ValueRangeConstraint(-50, -50), ValueRangeConstraint(-48, -48), ValueRangeConstraint(-46, -46), ValueRangeConstraint(-44, -44), ValueRangeConstraint(-42, -42), ValueRangeConstraint(-40, -40), )).clone(-40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileComfortNoiseCap.setStatus('mandatory')
mscDcmeProfileModemFaxSpeechDiscrim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileModemFaxSpeechDiscrim.setStatus('mandatory')
mscDcmeProfileV17EncodedAsG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileV17EncodedAsG711G726.setStatus('mandatory')
mscDcmeProfileDtmfRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileDtmfRegeneration.setStatus('mandatory')
mscDcmeProfileMaxFaxRelayRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 21), FixedPoint1().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(24, 24), ValueRangeConstraint(48, 48), ValueRangeConstraint(72, 72), ValueRangeConstraint(96, 96), ValueRangeConstraint(120, 120), ValueRangeConstraint(144, 144), )).clone(144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMaxFaxRelayRate.setStatus('mandatory')
mscDcl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130))
mscDclRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1), )
if mibBuilder.loadTexts: mscDclRowStatusTable.setStatus('mandatory')
mscDclRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"))
if mibBuilder.loadTexts: mscDclRowStatusEntry.setStatus('mandatory')
mscDclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclRowStatus.setStatus('mandatory')
mscDclComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclComponentName.setStatus('mandatory')
mscDclStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclStorageType.setStatus('mandatory')
mscDclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: mscDclIndex.setStatus('mandatory')
mscDclProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10), )
if mibBuilder.loadTexts: mscDclProvTable.setStatus('mandatory')
mscDclProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"))
if mibBuilder.loadTexts: mscDclProvEntry.setStatus('mandatory')
mscDclCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclCommentText.setStatus('mandatory')
mscDclRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('e164')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclRemoteNpi.setStatus('mandatory')
mscDclRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclRemoteDna.setStatus('mandatory')
mscDclDcme = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclDcme.setStatus('mandatory')
mscDclIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(213)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclIdlePattern.setStatus('mandatory')
mscDclAlternateIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 6), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(213)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclAlternateIdlePattern.setStatus('mandatory')
mscDclStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 11), )
if mibBuilder.loadTexts: mscDclStateTable.setStatus('mandatory')
mscDclStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"))
if mibBuilder.loadTexts: mscDclStateEntry.setStatus('mandatory')
mscDclAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclAdminState.setStatus('mandatory')
mscDclOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclOperationalState.setStatus('mandatory')
mscDclUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclUsageState.setStatus('mandatory')
mscDclOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12), )
if mibBuilder.loadTexts: mscDclOperTable.setStatus('mandatory')
mscDclOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"))
if mibBuilder.loadTexts: mscDclOperEntry.setStatus('mandatory')
mscDclActiveSpeechCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclActiveSpeechCalls.setStatus('mandatory')
mscDclActive3kHzCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclActive3kHzCalls.setStatus('mandatory')
mscDclActive64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclActive64kCalls.setStatus('mandatory')
mscDclReceivedTrmSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none000", 0), ("invalid001", 1), ("invalid010", 2), ("invalid011", 3), ("invalid100", 4), ("switchingCentreNormal101", 5), ("maintenanceReleaseAck110", 6), ("dcmeClearOfTraffic111", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclReceivedTrmSignal.setStatus('mandatory')
mscDclTransmittedTrmSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none000", 0), ("dcmeNormal100", 4), ("no64KbitSCapacity101", 5), ("maintenanceReleaseRequest110", 6), ("noCapacityAvailable111", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclTransmittedTrmSignal.setStatus('mandatory')
mscDclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13), )
if mibBuilder.loadTexts: mscDclStatsTable.setStatus('mandatory')
mscDclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"))
if mibBuilder.loadTexts: mscDclStatsEntry.setStatus('mandatory')
mscDclTotalSpeechCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclTotalSpeechCalls.setStatus('mandatory')
mscDclTotal3kHzCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclTotal3kHzCalls.setStatus('mandatory')
mscDclTotal64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclTotal64kCalls.setStatus('mandatory')
mscDclRejectedSpeechCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclRejectedSpeechCalls.setStatus('mandatory')
mscDclRejected3kHzCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclRejected3kHzCalls.setStatus('mandatory')
mscDclRejected64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclRejected64kCalls.setStatus('mandatory')
mscDclInvalidTrmSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclInvalidTrmSignals.setStatus('mandatory')
mscDclDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2))
mscDclDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1), )
if mibBuilder.loadTexts: mscDclDnaRowStatusTable.setStatus('mandatory')
mscDclDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclDnaIndex"))
if mibBuilder.loadTexts: mscDclDnaRowStatusEntry.setStatus('mandatory')
mscDclDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclDnaRowStatus.setStatus('mandatory')
mscDclDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclDnaComponentName.setStatus('mandatory')
mscDclDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclDnaStorageType.setStatus('mandatory')
mscDclDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclDnaIndex.setStatus('mandatory')
mscDclDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 10), )
if mibBuilder.loadTexts: mscDclDnaAddressTable.setStatus('mandatory')
mscDclDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclDnaIndex"))
if mibBuilder.loadTexts: mscDclDnaAddressEntry.setStatus('mandatory')
mscDclDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('e164')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclDnaNumberingPlanIndicator.setStatus('mandatory')
mscDclDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclDnaDataNetworkAddress.setStatus('mandatory')
mscDclFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3))
mscDclFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1), )
if mibBuilder.loadTexts: mscDclFramerRowStatusTable.setStatus('mandatory')
mscDclFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclFramerIndex"))
if mibBuilder.loadTexts: mscDclFramerRowStatusEntry.setStatus('mandatory')
mscDclFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerRowStatus.setStatus('mandatory')
mscDclFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerComponentName.setStatus('mandatory')
mscDclFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerStorageType.setStatus('mandatory')
mscDclFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclFramerIndex.setStatus('mandatory')
mscDclFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 10), )
if mibBuilder.loadTexts: mscDclFramerProvTable.setStatus('mandatory')
mscDclFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclFramerIndex"))
if mibBuilder.loadTexts: mscDclFramerProvEntry.setStatus('mandatory')
mscDclFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclFramerInterfaceName.setStatus('mandatory')
mscDclFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 12), )
if mibBuilder.loadTexts: mscDclFramerStateTable.setStatus('mandatory')
mscDclFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclFramerIndex"))
if mibBuilder.loadTexts: mscDclFramerStateEntry.setStatus('mandatory')
mscDclFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerAdminState.setStatus('mandatory')
mscDclFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerOperationalState.setStatus('mandatory')
mscDclFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerUsageState.setStatus('mandatory')
mscDclVs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4))
mscDclVsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1), )
if mibBuilder.loadTexts: mscDclVsRowStatusTable.setStatus('mandatory')
mscDclVsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"))
if mibBuilder.loadTexts: mscDclVsRowStatusEntry.setStatus('mandatory')
mscDclVsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsRowStatus.setStatus('mandatory')
mscDclVsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsComponentName.setStatus('mandatory')
mscDclVsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsStorageType.setStatus('mandatory')
mscDclVsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: mscDclVsIndex.setStatus('mandatory')
mscDclVsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 10), )
if mibBuilder.loadTexts: mscDclVsProvTable.setStatus('mandatory')
mscDclVsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"))
if mibBuilder.loadTexts: mscDclVsProvEntry.setStatus('mandatory')
mscDclVsVsType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynamicVs", 0), ("permanent64kVs", 1))).clone('dynamicVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsVsType.setStatus('mandatory')
mscDclVsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11), )
if mibBuilder.loadTexts: mscDclVsOperTable.setStatus('mandatory')
mscDclVsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"))
if mibBuilder.loadTexts: mscDclVsOperEntry.setStatus('mandatory')
mscDclVsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("seized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsStatus.setStatus('mandatory')
mscDclVsCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("speech", 1), ("n31KHz", 2), ("n64KbitS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsCallType.setStatus('mandatory')
mscDclVsReceivedAbBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none00", 0), ("normalServiceAvailable01", 1), ("n31KHzRequest10", 2), ("n64KbitSRequest11", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsReceivedAbBits.setStatus('mandatory')
mscDclVsTransmittedAbBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none00", 0), ("normalServiceAvailable01", 1), ("specialServiceAck10", 2), ("channelOutOfService11", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsTransmittedAbBits.setStatus('mandatory')
mscDclVsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 12), )
if mibBuilder.loadTexts: mscDclVsStatsTable.setStatus('mandatory')
mscDclVsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"))
if mibBuilder.loadTexts: mscDclVsStatsEntry.setStatus('mandatory')
mscDclVsTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsTotalCalls.setStatus('mandatory')
mscDclVsTotalCallSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsTotalCallSeconds.setStatus('mandatory')
mscDclVsInvalidAbBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsInvalidAbBits.setStatus('mandatory')
mscDclVsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 13), )
if mibBuilder.loadTexts: mscDclVsStateTable.setStatus('mandatory')
mscDclVsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"))
if mibBuilder.loadTexts: mscDclVsStateEntry.setStatus('mandatory')
mscDclVsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsAdminState.setStatus('mandatory')
mscDclVsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsOperationalState.setStatus('mandatory')
mscDclVsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsUsageState.setStatus('mandatory')
mscDclVsFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2))
mscDclVsFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1), )
if mibBuilder.loadTexts: mscDclVsFramerRowStatusTable.setStatus('mandatory')
mscDclVsFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerRowStatusEntry.setStatus('mandatory')
mscDclVsFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerRowStatus.setStatus('mandatory')
mscDclVsFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerComponentName.setStatus('mandatory')
mscDclVsFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerStorageType.setStatus('mandatory')
mscDclVsFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclVsFramerIndex.setStatus('mandatory')
mscDclVsFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 10), )
if mibBuilder.loadTexts: mscDclVsFramerProvTable.setStatus('mandatory')
mscDclVsFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerProvEntry.setStatus('mandatory')
mscDclVsFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerInterfaceName.setStatus('mandatory')
mscDclVsFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 14), )
if mibBuilder.loadTexts: mscDclVsFramerStateTable.setStatus('mandatory')
mscDclVsFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerStateEntry.setStatus('mandatory')
mscDclVsFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerAdminState.setStatus('mandatory')
mscDclVsFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerOperationalState.setStatus('mandatory')
mscDclVsFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerUsageState.setStatus('mandatory')
mscDclVsFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15), )
if mibBuilder.loadTexts: mscDclVsFramerStatsTable.setStatus('mandatory')
mscDclVsFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerStatsEntry.setStatus('mandatory')
mscDclVsFramerTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerTotalCells.setStatus('mandatory')
mscDclVsFramerAudioCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerAudioCells.setStatus('mandatory')
mscDclVsFramerSilenceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerSilenceCells.setStatus('mandatory')
mscDclVsFramerModemCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerModemCells.setStatus('obsolete')
mscDclVsFramerCurrentEncodingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n640", 1), ("n320", 2), ("n240", 3), ("n160", 4), ("n80", 5), ("n144", 6), ("n120", 7), ("n96", 8), ("n72", 9), ("n63", 10), ("n53", 11), ("n48", 12), ("n24", 13), ("n12", 14), ("n03", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerCurrentEncodingRate.setStatus('obsolete')
mscDclVsFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerLrcErrors.setStatus('mandatory')
mscDclVsFramerFrmLostInNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFrmLostInNetwork.setStatus('mandatory')
mscDclVsFramerFrmUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFrmUnderRuns.setStatus('mandatory')
mscDclVsFramerFrmDumped = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFrmDumped.setStatus('mandatory')
mscDclVsFramerModemSilenceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerModemSilenceCells.setStatus('obsolete')
mscDclVsFramerCurrentEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g723", 3), ("g726", 4), ("g711", 5), ("v22", 32), ("v22bis", 33), ("faxRelay", 64), ("v27", 65), ("v29", 66), ("v17", 67), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerCurrentEncoding.setStatus('obsolete')
mscDclVsFramerTptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("operating", 0), ("rejected", 1), ("monitoring", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerTptStatus.setStatus('obsolete')
mscDclVsFramerFaxRelayCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFaxRelayCells.setStatus('mandatory')
mscDclVsFramerModemFaxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerModemFaxCells.setStatus('mandatory')
mscDclVsFramerFaxIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFaxIdleCells.setStatus('mandatory')
mscDclVsFramerOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 16), )
if mibBuilder.loadTexts: mscDclVsFramerOperTable.setStatus('mandatory')
mscDclVsFramerOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerOperEntry.setStatus('mandatory')
mscDclVsFramerOpCurrentEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g723", 3), ("g726", 4), ("g711", 5), ("v22", 32), ("v22bis", 33), ("faxRelay", 64), ("v27", 65), ("v29", 66), ("v17", 67), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerOpCurrentEncoding.setStatus('mandatory')
mscDclVsFramerCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n640", 1), ("n320", 2), ("n240", 3), ("n160", 4), ("n80", 5), ("n144", 6), ("n120", 7), ("n96", 8), ("n72", 9), ("n63", 10), ("n53", 11), ("n48", 12), ("n24", 13), ("n12", 14), ("n03", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerCurrentRate.setStatus('mandatory')
mscDclVsFramerOpTptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("operating", 0), ("monitoring", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerOpTptStatus.setStatus('mandatory')
mscDclVsFramerNegTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17), )
if mibBuilder.loadTexts: mscDclVsFramerNegTable.setStatus('mandatory')
mscDclVsFramerNegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerNegEntry.setStatus('mandatory')
mscDclVsFramerNegotiatedSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("congested", 2), ("slow", 3), ("slowAndCongested", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedSilenceSuppression.setStatus('mandatory')
mscDclVsFramerNegotiatedFisG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedFisG711G726.setStatus('mandatory')
mscDclVsFramerNegotiatedDtmfRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedDtmfRegeneration.setStatus('mandatory')
mscDclVsFramerNegotiatedV17AsG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedV17AsG711G726.setStatus('mandatory')
mscDclVsFramerNegotiatedTandemPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedTandemPassThrough.setStatus('mandatory')
mscDclVsFramerFrmToNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 315), )
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkTable.setStatus('mandatory')
mscDclVsFramerFrmToNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 315, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerFrmToNetworkIndex"))
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkEntry.setStatus('mandatory')
mscDclVsFramerFrmToNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 315, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n64KbitS", 0), ("n32KbitS", 1), ("n24KbitS", 2), ("n16KbitS", 3), ("n8KbitS", 4))))
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkIndex.setStatus('mandatory')
mscDclVsFramerFrmToNetworkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 315, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkValue.setStatus('mandatory')
mscDclVsFramerFrmFromNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 316), )
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkTable.setStatus('mandatory')
mscDclVsFramerFrmFromNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 316, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerFrmFromNetworkIndex"))
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkEntry.setStatus('mandatory')
mscDclVsFramerFrmFromNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 316, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n64KbitS", 0), ("n32KbitS", 1), ("n24KbitS", 2), ("n16KbitS", 3), ("n8KbitS", 4))))
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkIndex.setStatus('mandatory')
mscDclVsFramerFrmFromNetworkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 316, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkValue.setStatus('mandatory')
mscDclVsFramerNEncodingTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 467), )
if mibBuilder.loadTexts: mscDclVsFramerNEncodingTable.setStatus('mandatory')
mscDclVsFramerNEncodingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 467, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerNEncodingIndex"))
if mibBuilder.loadTexts: mscDclVsFramerNEncodingEntry.setStatus('mandatory')
mscDclVsFramerNEncodingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 467, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("modemFax", 1), ("fax", 2))))
if mibBuilder.loadTexts: mscDclVsFramerNEncodingIndex.setStatus('mandatory')
mscDclVsFramerNEncodingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 467, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 31, 64, 68, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g726", 4), ("g711", 5), ("g711G726", 31), ("v29V27Relay", 64), ("v17V29V27Relay", 68), ("none", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerNEncodingValue.setStatus('mandatory')
mscDclVsFramerNRatesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 479), )
if mibBuilder.loadTexts: mscDclVsFramerNRatesTable.setStatus('mandatory')
mscDclVsFramerNRatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 479, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerNRatesTrafficIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerNRatesRateIndex"))
if mibBuilder.loadTexts: mscDclVsFramerNRatesEntry.setStatus('mandatory')
mscDclVsFramerNRatesTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 479, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("modemFax", 1), ("fax", 2))))
if mibBuilder.loadTexts: mscDclVsFramerNRatesTrafficIndex.setStatus('mandatory')
mscDclVsFramerNRatesRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 479, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("min", 0), ("max", 1))))
if mibBuilder.loadTexts: mscDclVsFramerNRatesRateIndex.setStatus('mandatory')
mscDclVsFramerNRatesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 479, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 66, 67, 68, 69, 70))).clone(namedValues=NamedValues(("n00", 0), ("n03", 1), ("n12", 2), ("n24", 3), ("n48", 4), ("n72", 5), ("n96", 6), ("n120", 7), ("n144", 8), ("n80", 66), ("n160", 67), ("n240", 68), ("n320", 69), ("n640", 70)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerNRatesValue.setStatus('mandatory')
mscDclVsFramerVfpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5))
mscDclVsFramerVfpDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1), )
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugRowStatusTable.setStatus('mandatory')
mscDclVsFramerVfpDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerVfpDebugIndex"))
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugRowStatusEntry.setStatus('mandatory')
mscDclVsFramerVfpDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugRowStatus.setStatus('mandatory')
mscDclVsFramerVfpDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugComponentName.setStatus('mandatory')
mscDclVsFramerVfpDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugStorageType.setStatus('mandatory')
mscDclVsFramerVfpDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugIndex.setStatus('mandatory')
mscDclVsFramerMvpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6))
mscDclVsFramerMvpDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1), )
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugRowStatusTable.setStatus('mandatory')
mscDclVsFramerMvpDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerMvpDebugIndex"))
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugRowStatusEntry.setStatus('mandatory')
mscDclVsFramerMvpDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugRowStatus.setStatus('mandatory')
mscDclVsFramerMvpDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugComponentName.setStatus('mandatory')
mscDclVsFramerMvpDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugStorageType.setStatus('mandatory')
mscDclVsFramerMvpDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugIndex.setStatus('mandatory')
mscDclVsFramerPcmCapture = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7))
mscDclVsFramerPcmCaptureRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1), )
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureRowStatusTable.setStatus('mandatory')
mscDclVsFramerPcmCaptureRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerPcmCaptureIndex"))
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureRowStatusEntry.setStatus('mandatory')
mscDclVsFramerPcmCaptureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureRowStatus.setStatus('mandatory')
mscDclVsFramerPcmCaptureComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureComponentName.setStatus('mandatory')
mscDclVsFramerPcmCaptureStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureStorageType.setStatus('mandatory')
mscDclVsFramerPcmCaptureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureIndex.setStatus('mandatory')
mscDclVsLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3))
mscDclVsLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1), )
if mibBuilder.loadTexts: mscDclVsLCoRowStatusTable.setStatus('mandatory')
mscDclVsLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsLCoIndex"))
if mibBuilder.loadTexts: mscDclVsLCoRowStatusEntry.setStatus('mandatory')
mscDclVsLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRowStatus.setStatus('mandatory')
mscDclVsLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoComponentName.setStatus('mandatory')
mscDclVsLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoStorageType.setStatus('mandatory')
mscDclVsLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclVsLCoIndex.setStatus('mandatory')
mscDclVsLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10), )
if mibBuilder.loadTexts: mscDclVsLCoPathDataTable.setStatus('mandatory')
mscDclVsLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsLCoIndex"))
if mibBuilder.loadTexts: mscDclVsLCoPathDataEntry.setStatus('mandatory')
mscDclVsLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoState.setStatus('mandatory')
mscDclVsLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsLCoOverrideRemoteName.setStatus('mandatory')
mscDclVsLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoEnd.setStatus('mandatory')
mscDclVsLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoCostMetric.setStatus('mandatory')
mscDclVsLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoDelayMetric.setStatus('mandatory')
mscDclVsLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRoundTripDelay.setStatus('mandatory')
mscDclVsLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoSetupPriority.setStatus('mandatory')
mscDclVsLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoHoldingPriority.setStatus('mandatory')
mscDclVsLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRequiredTxBandwidth.setStatus('mandatory')
mscDclVsLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRequiredRxBandwidth.setStatus('mandatory')
mscDclVsLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRequiredTrafficType.setStatus('mandatory')
mscDclVsLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPermittedTrunkTypes.setStatus('mandatory')
mscDclVsLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRequiredSecurity.setStatus('mandatory')
mscDclVsLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRequiredCustomerParameter.setStatus('mandatory')
mscDclVsLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoEmissionPriority.setStatus('mandatory')
mscDclVsLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoDiscardPriority.setStatus('mandatory')
mscDclVsLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPathType.setStatus('mandatory')
mscDclVsLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRetryCount.setStatus('mandatory')
mscDclVsLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPathFailureCount.setStatus('mandatory')
mscDclVsLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoReasonForNoRoute.setStatus('mandatory')
mscDclVsLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoLastTearDownReason.setStatus('mandatory')
mscDclVsLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPathFailureAction.setStatus('mandatory')
mscDclVsLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoBumpPreference.setStatus('mandatory')
mscDclVsLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoOptimization.setStatus('mandatory')
mscDclVsLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPathUpDateTime.setStatus('mandatory')
mscDclVsLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11), )
if mibBuilder.loadTexts: mscDclVsLCoStatsTable.setStatus('mandatory')
mscDclVsLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsLCoIndex"))
if mibBuilder.loadTexts: mscDclVsLCoStatsEntry.setStatus('mandatory')
mscDclVsLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPktsToNetwork.setStatus('mandatory')
mscDclVsLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoBytesToNetwork.setStatus('mandatory')
mscDclVsLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPktsFromNetwork.setStatus('mandatory')
mscDclVsLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoBytesFromNetwork.setStatus('mandatory')
mscDclVsLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 264), )
if mibBuilder.loadTexts: mscDclVsLCoPathTable.setStatus('mandatory')
mscDclVsLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 264, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsLCoIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsLCoPathValue"))
if mibBuilder.loadTexts: mscDclVsLCoPathEntry.setStatus('mandatory')
mscDclVsLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPathValue.setStatus('mandatory')
dcmeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 1))
dcmeGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 1, 1))
dcmeGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 1, 1, 3))
dcmeGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 1, 1, 3, 2))
dcmeCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 3))
dcmeCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 3, 1))
dcmeCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 3, 1, 3))
dcmeCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-DcmeMIB", mscDcmeProfilePathFailureAction=mscDcmeProfilePathFailureAction, mscDclStateEntry=mscDclStateEntry, mscDclFramerUsageState=mscDclFramerUsageState, mscDclVsLCo=mscDclVsLCo, mscDcmeDLinksTable=mscDcmeDLinksTable, mscDclFramerRowStatusEntry=mscDclFramerRowStatusEntry, mscDclFramerComponentName=mscDclFramerComponentName, mscDclVsLCoPktsFromNetwork=mscDclVsLCoPktsFromNetwork, mscDclVsRowStatus=mscDclVsRowStatus, mscDclStorageType=mscDclStorageType, mscDclVsFramerTotalCells=mscDclVsFramerTotalCells, mscDcmeProfileFrOpsEntry=mscDcmeProfileFrOpsEntry, mscDclVsComponentName=mscDclVsComponentName, mscDclVsFramerNRatesTable=mscDclVsFramerNRatesTable, mscDclDnaStorageType=mscDclDnaStorageType, mscDcmeStateTable=mscDcmeStateTable, mscDcmeProfileFrOpsTable=mscDcmeProfileFrOpsTable, mscDclFramerAdminState=mscDclFramerAdminState, mscDclVsTotalCalls=mscDclVsTotalCalls, mscDclVsFramerLrcErrors=mscDclVsFramerLrcErrors, mscDclDnaDataNetworkAddress=mscDclDnaDataNetworkAddress, mscDclRemoteDna=mscDclRemoteDna, mscDclVsTotalCallSeconds=mscDclVsTotalCallSeconds, mscDcmeProfileRowStatusTable=mscDcmeProfileRowStatusTable, mscDclVsLCoPathValue=mscDclVsLCoPathValue, mscDclRowStatusTable=mscDclRowStatusTable, mscDclVsFramerNegotiatedDtmfRegeneration=mscDclVsFramerNegotiatedDtmfRegeneration, mscDclInvalidTrmSignals=mscDclInvalidTrmSignals, mscDclVsStorageType=mscDclVsStorageType, mscDclVsFramerMvpDebugIndex=mscDclVsFramerMvpDebugIndex, mscDcmeProfilePermittedTrunkTypes=mscDcmeProfilePermittedTrunkTypes, mscDclVsLCoPathDataEntry=mscDclVsLCoPathDataEntry, mscDclVsFramerNegotiatedTandemPassThrough=mscDclVsFramerNegotiatedTandemPassThrough, mscDcmeUsageState=mscDcmeUsageState, mscDclFramerProvEntry=mscDclFramerProvEntry, mscDclVsFramerStateEntry=mscDclVsFramerStateEntry, mscDcmeProfileLCOpsTable=mscDcmeProfileLCOpsTable, mscDclVsProvEntry=mscDclVsProvEntry, mscDclFramerIndex=mscDclFramerIndex, mscDcmeProfileComponentName=mscDcmeProfileComponentName, mscDclVsFramerNEncodingTable=mscDclVsFramerNEncodingTable, mscDclProvEntry=mscDclProvEntry, mscDclVsFramer=mscDclVsFramer, mscDclVsFramerPcmCaptureStorageType=mscDclVsFramerPcmCaptureStorageType, mscDclVsLCoReasonForNoRoute=mscDclVsLCoReasonForNoRoute, mscDclVsLCoBytesToNetwork=mscDclVsLCoBytesToNetwork, mscDcmeProfileEmissionPriority=mscDcmeProfileEmissionPriority, mscDcmeTrm64kNotAvailable=mscDcmeTrm64kNotAvailable, mscDclVsRowStatusEntry=mscDclVsRowStatusEntry, mscDcmeCommentText=mscDcmeCommentText, mscDcmeAdminState=mscDcmeAdminState, mscDclReceivedTrmSignal=mscDclReceivedTrmSignal, mscDcmeSpeechAlarmThreshold=mscDcmeSpeechAlarmThreshold, mscDcmeProfileMaximumAcceptableCost=mscDcmeProfileMaximumAcceptableCost, mscDclVsVsType=mscDclVsVsType, mscDclVsStatsTable=mscDclVsStatsTable, mscDclVsFramerInterfaceName=mscDclVsFramerInterfaceName, mscDcmeProfileInsertedOutputDelay=mscDcmeProfileInsertedOutputDelay, mscDclVsFramerOpTptStatus=mscDclVsFramerOpTptStatus, mscDclVsFramerNegotiatedSilenceSuppression=mscDclVsFramerNegotiatedSilenceSuppression, mscDclVsFramerVfpDebugRowStatus=mscDclVsFramerVfpDebugRowStatus, mscDclVsFramerFaxIdleCells=mscDclVsFramerFaxIdleCells, mscDclVsFramerComponentName=mscDclVsFramerComponentName, mscDclVsFramerFrmToNetworkValue=mscDclVsFramerFrmToNetworkValue, mscDcmeOperationalState=mscDcmeOperationalState, mscDcmeProfileEgressAudioGain=mscDcmeProfileEgressAudioGain, mscDcmeProfileDtmfRegeneration=mscDcmeProfileDtmfRegeneration, mscDclStatsTable=mscDclStatsTable, mscDclVsFramerFrmToNetworkTable=mscDclVsFramerFrmToNetworkTable, mscDcmeProfileComfortNoiseCap=mscDcmeProfileComfortNoiseCap, mscDclVsFramerFrmDumped=mscDclVsFramerFrmDumped, mscDclVsFramerNegotiatedV17AsG711G726=mscDclVsFramerNegotiatedV17AsG711G726, mscDclVsFramerFrmFromNetworkTable=mscDclVsFramerFrmFromNetworkTable, mscDcmeStorageType=mscDcmeStorageType, mscDclFramerInterfaceName=mscDclFramerInterfaceName, mscDclVsFramerFrmFromNetworkEntry=mscDclVsFramerFrmFromNetworkEntry, mscDclVsLCoSetupPriority=mscDclVsLCoSetupPriority, mscDclVsLCoRequiredSecurity=mscDclVsLCoRequiredSecurity, mscDclDnaRowStatus=mscDclDnaRowStatus, mscDclVsFramerIndex=mscDclVsFramerIndex, mscDclVsFramerFrmUnderRuns=mscDclVsFramerFrmUnderRuns, mscDclFramerStateEntry=mscDclFramerStateEntry, mscDclVsOperEntry=mscDclVsOperEntry, mscDcmeProfileV17EncodedAsG711G726=mscDcmeProfileV17EncodedAsG711G726, mscDclVsLCoIndex=mscDclVsLCoIndex, mscDclVsLCoEmissionPriority=mscDclVsLCoEmissionPriority, mscDclVsLCoBytesFromNetwork=mscDclVsLCoBytesFromNetwork, mscDcmeProfileSpeechHangoverTime=mscDcmeProfileSpeechHangoverTime, mscDclVsFramerMvpDebug=mscDclVsFramerMvpDebug, mscDcmeProfilePathAttributeToMinimize=mscDcmeProfilePathAttributeToMinimize, mscDclVsFramerVfpDebugRowStatusTable=mscDclVsFramerVfpDebugRowStatusTable, mscDclRowStatusEntry=mscDclRowStatusEntry, mscDclVsLCoRowStatus=mscDclVsLCoRowStatus, mscDclDnaAddressTable=mscDclDnaAddressTable, mscDclVsFramerVfpDebugComponentName=mscDclVsFramerVfpDebugComponentName, mscDcmeAlarmTimeInterval=mscDcmeAlarmTimeInterval, mscDclVsFramerFrmToNetworkIndex=mscDclVsFramerFrmToNetworkIndex, mscDcmeTrmThreshold=mscDcmeTrmThreshold, mscDcmeProfileStorageType=mscDcmeProfileStorageType, mscDclVsFramerStateTable=mscDclVsFramerStateTable, mscDclVsLCoPathType=mscDclVsLCoPathType, mscDclVsLCoPktsToNetwork=mscDclVsLCoPktsToNetwork, mscDclVsLCoLastTearDownReason=mscDclVsLCoLastTearDownReason, mscDclVsFramerModemFaxCells=mscDclVsFramerModemFaxCells, mscDclCommentText=mscDclCommentText, mscDclStateTable=mscDclStateTable, mscDclVsReceivedAbBits=mscDclVsReceivedAbBits, mscDclVsFramerFrmFromNetworkValue=mscDclVsFramerFrmFromNetworkValue, mscDclVsStatus=mscDclVsStatus, mscDclVsLCoDelayMetric=mscDclVsLCoDelayMetric, mscDclVsFramerVfpDebugRowStatusEntry=mscDclVsFramerVfpDebugRowStatusEntry, mscDclVsFramerOperationalState=mscDclVsFramerOperationalState, mscDclVsLCoRequiredTrafficType=mscDclVsLCoRequiredTrafficType, mscDclFramerProvTable=mscDclFramerProvTable, mscDcmeMaxUnrestricted64kCalls=mscDcmeMaxUnrestricted64kCalls, mscDcmeTrmSpeechNotAvailable=mscDcmeTrmSpeechNotAvailable, mscDcmeProfileMinVoiceBitRate=mscDcmeProfileMinVoiceBitRate, mscDcmeProfileModemFaxEncoding=mscDcmeProfileModemFaxEncoding, mscDcmeProfileHoldingPriority=mscDcmeProfileHoldingPriority, mscDclFramer=mscDclFramer, mscDclVsFramerMvpDebugStorageType=mscDclVsFramerMvpDebugStorageType, mscDcmeProfileVoiceTrafficOptimization=mscDcmeProfileVoiceTrafficOptimization, mscDcmeDLinksEntry=mscDcmeDLinksEntry, mscDcmeProfileModemFaxSpeechDiscrim=mscDcmeProfileModemFaxSpeechDiscrim, mscDclVsStatsEntry=mscDclVsStatsEntry, mscDclVsFramerNEncodingValue=mscDclVsFramerNEncodingValue, mscDcmeStatsTable=mscDcmeStatsTable, dcmeGroupCA02=dcmeGroupCA02, mscDcmeRowStatus=mscDcmeRowStatus, mscDclVsFramerNEncodingEntry=mscDclVsFramerNEncodingEntry, mscDcmeProfile=mscDcmeProfile, mscDclTotal64kCalls=mscDclTotal64kCalls, mscDclVsFramerNegTable=mscDclVsFramerNegTable, dcmeGroupCA=dcmeGroupCA, mscDclActive3kHzCalls=mscDclActive3kHzCalls, mscDclIdlePattern=mscDclIdlePattern, mscDclVsFramerCurrentEncoding=mscDclVsFramerCurrentEncoding, mscDcmeActiveDcmeLinksEntry=mscDcmeActiveDcmeLinksEntry, mscDclProvTable=mscDclProvTable, mscDclVsFramerRowStatusTable=mscDclVsFramerRowStatusTable, mscDclVsFramerSilenceCells=mscDclVsFramerSilenceCells, mscDcmeStateEntry=mscDcmeStateEntry, mscDcmeProvTable=mscDcmeProvTable, mscDclStatsEntry=mscDclStatsEntry, mscDclFramerStateTable=mscDclFramerStateTable, mscDclVsFramerUsageState=mscDclVsFramerUsageState, mscDclVsFramerNegEntry=mscDclVsFramerNegEntry, mscDclVsCallType=mscDclVsCallType, mscDclVsLCoOverrideRemoteName=mscDclVsLCoOverrideRemoteName, mscDclFramerRowStatus=mscDclFramerRowStatus, mscDclDnaAddressEntry=mscDclDnaAddressEntry, mscDclVsFramerFrmLostInNetwork=mscDclVsFramerFrmLostInNetwork, mscDclDnaRowStatusTable=mscDclDnaRowStatusTable, mscDcmeProvEntry=mscDcmeProvEntry, mscDcmeProfileMaximumAcceptableDelay=mscDcmeProfileMaximumAcceptableDelay, mscDclVsLCoRequiredTxBandwidth=mscDclVsLCoRequiredTxBandwidth, mscDclUsageState=mscDclUsageState, mscDclVsFramerOperEntry=mscDclVsFramerOperEntry, mscDclVsFramerPcmCaptureIndex=mscDclVsFramerPcmCaptureIndex, mscDclVsFramerNRatesValue=mscDclVsFramerNRatesValue, mscDclVsRowStatusTable=mscDclVsRowStatusTable, mscDclVsLCoRequiredRxBandwidth=mscDclVsLCoRequiredRxBandwidth, mscDclVsFramerFaxRelayCells=mscDclVsFramerFaxRelayCells, mscDclVsLCoComponentName=mscDclVsLCoComponentName, mscDclVsFramerPcmCaptureRowStatusEntry=mscDclVsFramerPcmCaptureRowStatusEntry, mscDclVsLCoCostMetric=mscDclVsLCoCostMetric, mscDcmeProfileIngressAudioGain=mscDcmeProfileIngressAudioGain, mscDclDcme=mscDclDcme, mscDclActive64kCalls=mscDclActive64kCalls, mscDclVsLCoPathDataTable=mscDclVsLCoPathDataTable, mscDclVsLCoDiscardPriority=mscDclVsLCoDiscardPriority, mscDclRejectedSpeechCalls=mscDclRejectedSpeechCalls, mscDcmeUnrestricted64kAlarmThreshold=mscDcmeUnrestricted64kAlarmThreshold, mscDclVsLCoEnd=mscDclVsLCoEnd, mscDclVsFramerRowStatus=mscDclVsFramerRowStatus, mscDcmeProfileMaxVoiceBitRate=mscDcmeProfileMaxVoiceBitRate, mscDclIndex=mscDclIndex, mscDcmeProfileSilenceSuppressionFactor=mscDcmeProfileSilenceSuppressionFactor, mscDclVsLCoPermittedTrunkTypes=mscDclVsLCoPermittedTrunkTypes, mscDclVsFramerVfpDebugStorageType=mscDclVsFramerVfpDebugStorageType, mscDclVsTransmittedAbBits=mscDclVsTransmittedAbBits, mscDclVsFramerOpCurrentEncoding=mscDclVsFramerOpCurrentEncoding, dcmeMIB=dcmeMIB, mscDcmeRowStatusTable=mscDcmeRowStatusTable, mscDclVsFramerAdminState=mscDclVsFramerAdminState, mscDclDnaNumberingPlanIndicator=mscDclDnaNumberingPlanIndicator, mscDclVsFramerModemSilenceCells=mscDclVsFramerModemSilenceCells, mscDclRowStatus=mscDclRowStatus, mscDclVsFramerModemCells=mscDclVsFramerModemCells, mscDclDnaComponentName=mscDclDnaComponentName, mscDcmeProfileMaxFaxRelayRate=mscDcmeProfileMaxFaxRelayRate, mscDclVsFramerMvpDebugRowStatusEntry=mscDclVsFramerMvpDebugRowStatusEntry, mscDclVsFramerCurrentRate=mscDclVsFramerCurrentRate, mscDcmeProfileVoiceEncoding=mscDcmeProfileVoiceEncoding, mscDclVsFramerStatsEntry=mscDclVsFramerStatsEntry, mscDclVsFramerOperTable=mscDclVsFramerOperTable, mscDclTransmittedTrmSignal=mscDclTransmittedTrmSignal, mscDclVsFramerPcmCaptureRowStatus=mscDclVsFramerPcmCaptureRowStatus, mscDclAlternateIdlePattern=mscDclAlternateIdlePattern, mscDclRejected3kHzCalls=mscDclRejected3kHzCalls, mscDclVsProvTable=mscDclVsProvTable, mscDclVsOperationalState=mscDclVsOperationalState, mscDclVsFramerStorageType=mscDclVsFramerStorageType, mscDclVsFramerFrmFromNetworkIndex=mscDclVsFramerFrmFromNetworkIndex, mscDcmeStatsEntry=mscDcmeStatsEntry, dcmeCapabilitiesCA=dcmeCapabilitiesCA, mscDclVsFramerNRatesTrafficIndex=mscDclVsFramerNRatesTrafficIndex, mscDclFramerOperationalState=mscDclFramerOperationalState, mscDclActiveSpeechCalls=mscDclActiveSpeechCalls, mscDclVsFramerNEncodingIndex=mscDclVsFramerNEncodingIndex, mscDclVsStateTable=mscDclVsStateTable, mscDcmeActiveDcmeLinksTable=mscDcmeActiveDcmeLinksTable, mscDcmeProfileMinModemFaxG711G726Rate=mscDcmeProfileMinModemFaxG711G726Rate, mscDclVsFramerCurrentEncodingRate=mscDclVsFramerCurrentEncodingRate, mscDcmeDLinksRowStatus=mscDcmeDLinksRowStatus, mscDclAdminState=mscDclAdminState, mscDclVsIndex=mscDclVsIndex, mscDclVsFramerNRatesRateIndex=mscDclVsFramerNRatesRateIndex, mscDclVsFramerPcmCapture=mscDclVsFramerPcmCapture, mscDclVsFramerProvEntry=mscDclVsFramerProvEntry, mscDclVsFramerNegotiatedFisG711G726=mscDclVsFramerNegotiatedFisG711G726, mscDclVsLCoPathFailureCount=mscDclVsLCoPathFailureCount, mscDclVsStateEntry=mscDclVsStateEntry, mscDclVsLCoBumpPreference=mscDclVsLCoBumpPreference, mscDcmeComponentName=mscDcmeComponentName, mscDcmeProfileRowStatus=mscDcmeProfileRowStatus, mscDcmeProfileRowStatusEntry=mscDcmeProfileRowStatusEntry, mscDclRejected64kCalls=mscDclRejected64kCalls, mscDclVsLCoRetryCount=mscDclVsLCoRetryCount, mscDcmeProfileDiscardPriority=mscDcmeProfileDiscardPriority, mscDcmeDLinksValue=mscDcmeDLinksValue, mscDcmeProfileLCOpsEntry=mscDcmeProfileLCOpsEntry, mscDclDnaRowStatusEntry=mscDclDnaRowStatusEntry, mscDclFramerRowStatusTable=mscDclFramerRowStatusTable, mscDcme=mscDcme, mscDclVs=mscDclVs, mscDcmeIndex=mscDcmeIndex, mscDclVsFramerNRatesEntry=mscDclVsFramerNRatesEntry, mscDclVsLCoRowStatusTable=mscDclVsLCoRowStatusTable, mscDclVsLCoStatsEntry=mscDclVsLCoStatsEntry, dcmeGroupCA02A=dcmeGroupCA02A, mscDclVsAdminState=mscDclVsAdminState, mscDclVsLCoHoldingPriority=mscDclVsLCoHoldingPriority, mscDcmeProfileSilenceSuppression=mscDcmeProfileSilenceSuppression, mscDcmeProfileFaxIdleSuppressionG711G726=mscDcmeProfileFaxIdleSuppressionG711G726, mscDclVsLCoRequiredCustomerParameter=mscDclVsLCoRequiredCustomerParameter, mscDcmeProfileRequiredCustomerParm=mscDcmeProfileRequiredCustomerParm, mscDclVsLCoOptimization=mscDclVsLCoOptimization, mscDcmeTrmSignalChangeInterval=mscDcmeTrmSignalChangeInterval, mscDclVsLCoPathUpDateTime=mscDclVsLCoPathUpDateTime, mscDcmeProfileIndex=mscDcmeProfileIndex, mscDclVsUsageState=mscDclVsUsageState, mscDcmePreestablishedConnections=mscDcmePreestablishedConnections, mscDclVsLCoPathTable=mscDclVsLCoPathTable)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-DcmeMIB", mscDcmeProfileMaxModemFaxG711G726Rate=mscDcmeProfileMaxModemFaxG711G726Rate, dcmeCapabilities=dcmeCapabilities, mscDclVsFramerVfpDebugIndex=mscDclVsFramerVfpDebugIndex, mscDcmeProfileSetupPriority=mscDcmeProfileSetupPriority, mscDcmeActiveDcmeLinksValue=mscDcmeActiveDcmeLinksValue, mscDclOperTable=mscDclOperTable, mscDcmeProfileOptimization=mscDcmeProfileOptimization, mscDclVsFramerTptStatus=mscDclVsFramerTptStatus, mscDclTotal3kHzCalls=mscDclTotal3kHzCalls, mscDclVsFramerFrmToNetworkEntry=mscDclVsFramerFrmToNetworkEntry, mscDclVsLCoRoundTripDelay=mscDclVsLCoRoundTripDelay, mscDclVsLCoState=mscDclVsLCoState, mscDcmeRowStatusEntry=mscDcmeRowStatusEntry, mscDclVsFramerRowStatusEntry=mscDclVsFramerRowStatusEntry, mscDcl=mscDcl, mscDclVsFramerVfpDebug=mscDclVsFramerVfpDebug, mscDclVsFramerMvpDebugComponentName=mscDclVsFramerMvpDebugComponentName, mscDclVsLCoPathEntry=mscDclVsLCoPathEntry, dcmeCapabilitiesCA02=dcmeCapabilitiesCA02, dcmeCapabilitiesCA02A=dcmeCapabilitiesCA02A, mscDclOperationalState=mscDclOperationalState, mscDclVsFramerProvTable=mscDclVsFramerProvTable, mscDclVsInvalidAbBits=mscDclVsInvalidAbBits, mscDclVsLCoRowStatusEntry=mscDclVsLCoRowStatusEntry, mscDclComponentName=mscDclComponentName, mscDclDna=mscDclDna, mscDcmeProfileRequiredTrafficType=mscDcmeProfileRequiredTrafficType, mscDclRemoteNpi=mscDclRemoteNpi, mscDclVsLCoPathFailureAction=mscDclVsLCoPathFailureAction, dcmeGroup=dcmeGroup, mscDclVsFramerStatsTable=mscDclVsFramerStatsTable, mscDclVsOperTable=mscDclVsOperTable, mscDcmeProfileRequiredSecurity=mscDcmeProfileRequiredSecurity, mscDclVsFramerAudioCells=mscDclVsFramerAudioCells, mscDcmeProfileEchoCancellation=mscDcmeProfileEchoCancellation, mscDclDnaIndex=mscDclDnaIndex, mscDclVsFramerMvpDebugRowStatusTable=mscDclVsFramerMvpDebugRowStatusTable, mscDclVsLCoStatsTable=mscDclVsLCoStatsTable, mscDclTotalSpeechCalls=mscDclTotalSpeechCalls, mscDclVsLCoStorageType=mscDclVsLCoStorageType, mscDcmeProfileBumpPreference=mscDcmeProfileBumpPreference, mscDclVsFramerPcmCaptureComponentName=mscDclVsFramerPcmCaptureComponentName, mscDclVsFramerMvpDebugRowStatus=mscDclVsFramerMvpDebugRowStatus, mscDclFramerStorageType=mscDclFramerStorageType, mscDclVsFramerPcmCaptureRowStatusTable=mscDclVsFramerPcmCaptureRowStatusTable, mscDcmeAudio3kHzAlarmThreshold=mscDcmeAudio3kHzAlarmThreshold, mscDclOperEntry=mscDclOperEntry)
