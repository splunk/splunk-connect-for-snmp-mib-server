#
# PySNMP MIB module Wellfleet-CSMACD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-CSMACD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, ModuleIdentity, MibIdentifier, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, Unsigned32, IpAddress, Counter32, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "Unsigned32", "IpAddress", "Counter32", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfLine, wfCSMACDAutoNegGroup = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfLine", "wfCSMACDAutoNegGroup")
wfCSMACDTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 1), )
if mibBuilder.loadTexts: wfCSMACDTable.setStatus('mandatory')
wfCSMACDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1), ).setIndexNames((0, "Wellfleet-CSMACD-MIB", "wfCSMACDSlot"), (0, "Wellfleet-CSMACD-MIB", "wfCSMACDConnector"))
if mibBuilder.loadTexts: wfCSMACDEntry.setStatus('mandatory')
wfCSMACDDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDDelete.setStatus('mandatory')
wfCSMACDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDEnable.setStatus('mandatory')
wfCSMACDState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDState.setStatus('mandatory')
wfCSMACDSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDSlot.setStatus('mandatory')
wfCSMACDConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDConnector.setStatus('mandatory')
wfCSMACDCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDCct.setStatus('mandatory')
wfCSMACDBofl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDBofl.setStatus('mandatory')
wfCSMACDBoflTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDBoflTmo.setStatus('mandatory')
wfCSMACDMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1518))).clone(namedValues=NamedValues(("default", 1518))).clone('default')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDMtu.setStatus('mandatory')
wfCSMACDMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDMadr.setStatus('mandatory')
wfCSMACDOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDOctetsRxOk.setStatus('mandatory')
wfCSMACDFramesRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDFramesRxOk.setStatus('mandatory')
wfCSMACDOctetsTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDOctetsTxOk.setStatus('mandatory')
wfCSMACDFramesTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDFramesTxOk.setStatus('mandatory')
wfCSMACDDeferredTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDDeferredTx.setStatus('mandatory')
wfCSMACDLateCollnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLateCollnTx.setStatus('mandatory')
wfCSMACDExcessvCollnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDExcessvCollnTx.setStatus('mandatory')
wfCSMACDBablErrorTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDBablErrorTx.setStatus('mandatory')
wfCSMACDBufErrorTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDBufErrorTx.setStatus('mandatory')
wfCSMACDLcarTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLcarTx.setStatus('mandatory')
wfCSMACDUfloTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDUfloTx.setStatus('mandatory')
wfCSMACDFcsErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDFcsErrorRx.setStatus('mandatory')
wfCSMACDAlignErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAlignErrorRx.setStatus('mandatory')
wfCSMACDLackRescErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLackRescErrorRx.setStatus('mandatory')
wfCSMACDTooLongErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTooLongErrorRx.setStatus('mandatory')
wfCSMACDOfloRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDOfloRx.setStatus('mandatory')
wfCSMACDMerr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDMerr.setStatus('mandatory')
wfCSMACDCerr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDCerr.setStatus('mandatory')
wfCSMACDHardwareFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDHardwareFilter.setStatus('mandatory')
wfCSMACDTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxQueueLength.setStatus('mandatory')
wfCSMACDRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxQueueLength.setStatus('mandatory')
wfCSMACDTxClipFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxClipFrames.setStatus('mandatory')
wfCSMACDRxReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxReplenMisses.setStatus('mandatory')
wfCSMACDCfgTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDCfgTxQueueLength.setStatus('mandatory')
wfCSMACDCfgRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDCfgRxQueueLength.setStatus('mandatory')
wfCSMACDAlignmentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("bytes", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDAlignmentMode.setStatus('mandatory')
wfCSMACDUnAlignedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDUnAlignedFrames.setStatus('mandatory')
wfCSMACDLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDLineNumber.setStatus('mandatory')
wfCSMACDLateCollnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLateCollnRx.setStatus('mandatory')
wfCSMACDModule = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDModule.setStatus('mandatory')
wfCSMACDActualConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDActualConnector.setStatus('mandatory')
wfCSMACDLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 42), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLastChange.setStatus('mandatory')
wfCSMACDOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDOutQLen.setStatus('mandatory')
wfCSMACDIntProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDIntProcessings.setStatus('mandatory')
wfCSMACDTxProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxProcessings.setStatus('mandatory')
wfCSMACDRxProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxProcessings.setStatus('mandatory')
wfCSMACDTxCmplProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxCmplProcessings.setStatus('mandatory')
wfCSMACDTxQueueReductions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxQueueReductions.setStatus('mandatory')
wfCSMACDSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDSingleCollisionFrames.setStatus('mandatory')
wfCSMACDMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDMultipleCollisionFrames.setStatus('mandatory')
wfCSMACDInternalMacTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDInternalMacTxErrors.setStatus('mandatory')
wfCSMACDLineCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("tenbaset", 1), ("tenbasetduplex", 2), ("hundredbasetx", 3), ("hundredbasetxduplex", 4), ("hundredbaset4", 5), ("tenbasetduplexcongctrl", 6), ("hundredbasetxduplexcongctrl", 7), ("gigabitduplex", 8), ("gigabitduplexflowctrl", 9))).clone('tenbaset')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLineCapability.setStatus('mandatory')
wfCSMACDEtherChipSet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 53), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDEtherChipSet.setStatus('mandatory')
wfCSMACDRxSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxSymbolErrors.setStatus('mandatory')
wfCSMACDInternalMacRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDInternalMacRxErrors.setStatus('mandatory')
wfCSMACDConfigurableSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDConfigurableSpeed.setStatus('mandatory')
wfCSMACDRxFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxFlushes.setStatus('mandatory')
wfCSMACDTxDeadlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxDeadlocks.setStatus('mandatory')
wfCSMACDBoflRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDBoflRetries.setStatus('mandatory')
wfCSMACDBoflTmoDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDBoflTmoDivisor.setStatus('mandatory')
wfCSMACDTurboBoflDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDTurboBoflDebug.setStatus('mandatory')
wfCSMACDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDIfIndex.setStatus('mandatory')
wfCSMACDTxFlowControlPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxFlowControlPauseFrames.setStatus('mandatory')
wfCSMACDRxFlowControlPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxFlowControlPauseFrames.setStatus('mandatory')
wfCSMACDRxUnsupportedOpcodes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxUnsupportedOpcodes.setStatus('mandatory')
wfCSMACDFlowControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDFlowControlEnable.setStatus('mandatory')
wfCSMACDTxFlowControlPauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDTxFlowControlPauseTime.setStatus('mandatory')
wfCSMACDTxFlowControlPauseZeroEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDTxFlowControlPauseZeroEnable.setStatus('mandatory')
wfCSMACDDsqmsLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000)).clone(1250000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDDsqmsLineSpeed.setStatus('mandatory')
wfCSMACDAutoNegTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1), )
if mibBuilder.loadTexts: wfCSMACDAutoNegTable.setStatus('mandatory')
wfCSMACDAutoNegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1), ).setIndexNames((0, "Wellfleet-CSMACD-MIB", "wfCSMACDAutoNegSlot"), (0, "Wellfleet-CSMACD-MIB", "wfCSMACDAutoNegConnector"))
if mibBuilder.loadTexts: wfCSMACDAutoNegEntry.setStatus('mandatory')
wfCSMACDAutoNegDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDAutoNegDelete.setStatus('mandatory')
wfCSMACDAutoNegSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegSlot.setStatus('mandatory')
wfCSMACDAutoNegConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegConnector.setStatus('mandatory')
wfCSMACDAutoNegSpeedSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("nway", 1), ("tenbaset", 2), ("tenbasetduplex", 3), ("hundredbasetx", 4), ("hundredbasetxduplex", 5), ("hundredbaset4", 6), ("macloopback", 7), ("phyloopback", 8), ("twisterloopback", 9), ("tenbasetduplexcongctrl", 10), ("hundredbasetxduplexcongctrl", 11), ("gigabitduplex", 12), ("gigabitduplexflowctrl", 13))).clone('hundredbasetx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDAutoNegSpeedSelect.setStatus('mandatory')
wfCSMACDAutoNegRemoteSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detected", 1), ("notdetected", 2))).clone('notdetected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegRemoteSignaling.setStatus('mandatory')
wfCSMACDAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("configuring", 2), ("complete", 3), ("paralleldetectfail", 4))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegState.setStatus('mandatory')
wfCSMACDAutoNegRestartAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDAutoNegRestartAutoConfig.setStatus('mandatory')
wfCSMACDAutoNegLocalCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegLocalCapability.setStatus('mandatory')
wfCSMACDAutoNegAdvertisedCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 9), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDAutoNegAdvertisedCapability.setStatus('mandatory')
wfCSMACDAutoNegReceivedCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegReceivedCapability.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-CSMACD-MIB", wfCSMACDBoflTmoDivisor=wfCSMACDBoflTmoDivisor, wfCSMACDCerr=wfCSMACDCerr, wfCSMACDAutoNegReceivedCapability=wfCSMACDAutoNegReceivedCapability, wfCSMACDOctetsRxOk=wfCSMACDOctetsRxOk, wfCSMACDIfIndex=wfCSMACDIfIndex, wfCSMACDSingleCollisionFrames=wfCSMACDSingleCollisionFrames, wfCSMACDIntProcessings=wfCSMACDIntProcessings, wfCSMACDMerr=wfCSMACDMerr, wfCSMACDExcessvCollnTx=wfCSMACDExcessvCollnTx, wfCSMACDModule=wfCSMACDModule, wfCSMACDOfloRx=wfCSMACDOfloRx, wfCSMACDCfgTxQueueLength=wfCSMACDCfgTxQueueLength, wfCSMACDAutoNegTable=wfCSMACDAutoNegTable, wfCSMACDAutoNegRestartAutoConfig=wfCSMACDAutoNegRestartAutoConfig, wfCSMACDOctetsTxOk=wfCSMACDOctetsTxOk, wfCSMACDEntry=wfCSMACDEntry, wfCSMACDLateCollnRx=wfCSMACDLateCollnRx, wfCSMACDEtherChipSet=wfCSMACDEtherChipSet, wfCSMACDInternalMacRxErrors=wfCSMACDInternalMacRxErrors, wfCSMACDActualConnector=wfCSMACDActualConnector, wfCSMACDInternalMacTxErrors=wfCSMACDInternalMacTxErrors, wfCSMACDBofl=wfCSMACDBofl, wfCSMACDTurboBoflDebug=wfCSMACDTurboBoflDebug, wfCSMACDAlignmentMode=wfCSMACDAlignmentMode, wfCSMACDFramesRxOk=wfCSMACDFramesRxOk, wfCSMACDUnAlignedFrames=wfCSMACDUnAlignedFrames, wfCSMACDLineNumber=wfCSMACDLineNumber, wfCSMACDAutoNegState=wfCSMACDAutoNegState, wfCSMACDTxQueueLength=wfCSMACDTxQueueLength, wfCSMACDDeferredTx=wfCSMACDDeferredTx, wfCSMACDMtu=wfCSMACDMtu, wfCSMACDDelete=wfCSMACDDelete, wfCSMACDConfigurableSpeed=wfCSMACDConfigurableSpeed, wfCSMACDTxFlowControlPauseFrames=wfCSMACDTxFlowControlPauseFrames, wfCSMACDHardwareFilter=wfCSMACDHardwareFilter, wfCSMACDRxReplenMisses=wfCSMACDRxReplenMisses, wfCSMACDRxSymbolErrors=wfCSMACDRxSymbolErrors, wfCSMACDTooLongErrorRx=wfCSMACDTooLongErrorRx, wfCSMACDState=wfCSMACDState, wfCSMACDFcsErrorRx=wfCSMACDFcsErrorRx, wfCSMACDAutoNegLocalCapability=wfCSMACDAutoNegLocalCapability, wfCSMACDCfgRxQueueLength=wfCSMACDCfgRxQueueLength, wfCSMACDCct=wfCSMACDCct, wfCSMACDMultipleCollisionFrames=wfCSMACDMultipleCollisionFrames, wfCSMACDEnable=wfCSMACDEnable, wfCSMACDAutoNegSlot=wfCSMACDAutoNegSlot, wfCSMACDBoflRetries=wfCSMACDBoflRetries, wfCSMACDAutoNegAdvertisedCapability=wfCSMACDAutoNegAdvertisedCapability, wfCSMACDRxUnsupportedOpcodes=wfCSMACDRxUnsupportedOpcodes, wfCSMACDTxProcessings=wfCSMACDTxProcessings, wfCSMACDTable=wfCSMACDTable, wfCSMACDAutoNegDelete=wfCSMACDAutoNegDelete, wfCSMACDTxFlowControlPauseZeroEnable=wfCSMACDTxFlowControlPauseZeroEnable, wfCSMACDRxProcessings=wfCSMACDRxProcessings, wfCSMACDAutoNegSpeedSelect=wfCSMACDAutoNegSpeedSelect, wfCSMACDFlowControlEnable=wfCSMACDFlowControlEnable, wfCSMACDBablErrorTx=wfCSMACDBablErrorTx, wfCSMACDAlignErrorRx=wfCSMACDAlignErrorRx, wfCSMACDFramesTxOk=wfCSMACDFramesTxOk, wfCSMACDLackRescErrorRx=wfCSMACDLackRescErrorRx, wfCSMACDLineCapability=wfCSMACDLineCapability, wfCSMACDTxCmplProcessings=wfCSMACDTxCmplProcessings, wfCSMACDDsqmsLineSpeed=wfCSMACDDsqmsLineSpeed, wfCSMACDAutoNegEntry=wfCSMACDAutoNegEntry, wfCSMACDRxQueueLength=wfCSMACDRxQueueLength, wfCSMACDTxDeadlocks=wfCSMACDTxDeadlocks, wfCSMACDTxFlowControlPauseTime=wfCSMACDTxFlowControlPauseTime, wfCSMACDSlot=wfCSMACDSlot, wfCSMACDRxFlushes=wfCSMACDRxFlushes, wfCSMACDTxClipFrames=wfCSMACDTxClipFrames, wfCSMACDConnector=wfCSMACDConnector, wfCSMACDOutQLen=wfCSMACDOutQLen, wfCSMACDLcarTx=wfCSMACDLcarTx, wfCSMACDAutoNegRemoteSignaling=wfCSMACDAutoNegRemoteSignaling, wfCSMACDBufErrorTx=wfCSMACDBufErrorTx, wfCSMACDBoflTmo=wfCSMACDBoflTmo, wfCSMACDTxQueueReductions=wfCSMACDTxQueueReductions, wfCSMACDUfloTx=wfCSMACDUfloTx, wfCSMACDRxFlowControlPauseFrames=wfCSMACDRxFlowControlPauseFrames, wfCSMACDLateCollnTx=wfCSMACDLateCollnTx, wfCSMACDAutoNegConnector=wfCSMACDAutoNegConnector, wfCSMACDMadr=wfCSMACDMadr, wfCSMACDLastChange=wfCSMACDLastChange)
