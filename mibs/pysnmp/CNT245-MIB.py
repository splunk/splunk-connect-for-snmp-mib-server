#
# PySNMP MIB module CNT245-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CNT245-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:09:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, enterprises, Integer32, TimeTicks, Gauge32, ObjectIdentity, MibIdentifier, Counter64, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "enterprises", "Integer32", "TimeTicks", "Gauge32", "ObjectIdentity", "MibIdentifier", "Counter64", "ModuleIdentity", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cnt2Compression = ModuleIdentity((1, 3, 6, 1, 4, 1, 333, 2, 4, 5))
if mibBuilder.loadTexts: cnt2Compression.setLastUpdated('0110011200Z')
if mibBuilder.loadTexts: cnt2Compression.setOrganization('Computer Network Technology Corporation')
cnt2CompressionTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 1), )
if mibBuilder.loadTexts: cnt2CompressionTable.setStatus('current')
cnt2CompressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 1, 1), ).setIndexNames((0, "CNT245-MIB", "cnt2CompressionSlotIndex"), (0, "CNT245-MIB", "cnt2CompressionIndex"))
if mibBuilder.loadTexts: cnt2CompressionEntry.setStatus('current')
cnt2CompressionSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2CompressionSlotIndex.setStatus('current')
cnt2CompressionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2CompressionIndex.setStatus('current')
cnt2BytesToCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2BytesToCompress.setStatus('current')
cnt2CompressedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2CompressedBytes.setStatus('current')
cnt2BytesToDecompress = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2BytesToDecompress.setStatus('current')
cnt2DecompressedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2DecompressedBytes.setStatus('current')
cnt2ifCompressionNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2ifCompressionNumber.setStatus('current')
cnt2ifCompressionTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 3), )
if mibBuilder.loadTexts: cnt2ifCompressionTable.setStatus('current')
cnt2ifCompressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 3, 1), ).setIndexNames((0, "CNT245-MIB", "cnt2ifCompressionSlotIndex"), (0, "CNT245-MIB", "cnt2ifCompressionIndex"))
if mibBuilder.loadTexts: cnt2ifCompressionEntry.setStatus('current')
cnt2ifCompressionSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2ifCompressionSlotIndex.setStatus('current')
cnt2ifCompressionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2ifCompressionIndex.setStatus('current')
cnt2ifCompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2ifCompressedOctets.setStatus('current')
cnt2ifCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2ifCompressionRatio.setStatus('current')
cnt2ifDecompressionTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 4), )
if mibBuilder.loadTexts: cnt2ifDecompressionTable.setStatus('current')
cnt2ifDecompressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 4, 1), ).setIndexNames((0, "CNT245-MIB", "cnt2ifDecompressionSlotIndex"), (0, "CNT245-MIB", "cnt2ifDecompressionIndex"))
if mibBuilder.loadTexts: cnt2ifDecompressionEntry.setStatus('current')
cnt2ifDecompressionSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2ifDecompressionSlotIndex.setStatus('current')
cnt2ifDecompressionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2ifDecompressionIndex.setStatus('current')
cnt2ifDecompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2ifDecompressedOctets.setStatus('current')
cnt2ifDecompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2ifDecompressionRatio.setStatus('current')
mibBuilder.exportSymbols("CNT245-MIB", cnt2DecompressedBytes=cnt2DecompressedBytes, cnt2ifCompressionEntry=cnt2ifCompressionEntry, cnt2ifDecompressionIndex=cnt2ifDecompressionIndex, cnt2ifCompressionSlotIndex=cnt2ifCompressionSlotIndex, cnt2ifDecompressionSlotIndex=cnt2ifDecompressionSlotIndex, cnt2BytesToCompress=cnt2BytesToCompress, cnt2ifCompressionRatio=cnt2ifCompressionRatio, cnt2CompressionEntry=cnt2CompressionEntry, cnt2ifCompressionNumber=cnt2ifCompressionNumber, cnt2ifCompressionTable=cnt2ifCompressionTable, PYSNMP_MODULE_ID=cnt2Compression, cnt2CompressionTable=cnt2CompressionTable, cnt2ifCompressedOctets=cnt2ifCompressedOctets, cnt2CompressionSlotIndex=cnt2CompressionSlotIndex, cnt2CompressedBytes=cnt2CompressedBytes, cnt2ifDecompressedOctets=cnt2ifDecompressedOctets, cnt2ifDecompressionEntry=cnt2ifDecompressionEntry, cnt2ifCompressionIndex=cnt2ifCompressionIndex, cnt2Compression=cnt2Compression, cnt2ifDecompressionTable=cnt2ifDecompressionTable, cnt2BytesToDecompress=cnt2BytesToDecompress, cnt2ifDecompressionRatio=cnt2ifDecompressionRatio, cnt2CompressionIndex=cnt2CompressionIndex)
