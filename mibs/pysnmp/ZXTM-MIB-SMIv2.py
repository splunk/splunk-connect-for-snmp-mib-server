#
# PySNMP MIB module ZXTM-MIB-SMIv2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZXTM-MIB-SMIv2
# Produced by pysmi-0.3.4 at Mon Apr 29 21:42:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, enterprises, Counter32, IpAddress, ObjectIdentity, Integer32, TimeTicks, ModuleIdentity, MibIdentifier, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "enterprises", "Counter32", "IpAddress", "ObjectIdentity", "Integer32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
zxtm = ModuleIdentity((1, 3, 6, 1, 4, 1, 7146, 1, 2))
zxtm.setRevisions(('2016-12-05 11:00', '2016-09-29 01:00', '2016-05-09 19:00', '2015-11-18 09:00', '2015-11-16 17:03', '2015-11-09 09:00', '2015-09-23 14:00', '2015-07-07 15:00', '2015-06-16 14:00', '2015-01-23 14:00', '2014-12-04 11:00', '2014-10-29 11:00', '2014-09-21 10:00', '2014-08-19 12:00', '2014-07-01 14:00', '2014-02-24 17:00', '2014-02-03 16:00', '2014-02-03 11:00', '2013-11-11 11:00', '2011-11-22 11:00',))
if mibBuilder.loadTexts: zxtm.setLastUpdated('201612051100Z')
if mibBuilder.loadTexts: zxtm.setOrganization('Brocade Communications (vTM Team)')
zeus = MibIdentifier((1, 3, 6, 1, 4, 1, 7146))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1))
globals = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1))
virtualservers = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2))
pools = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3))
nodes = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4))
serviceprotection = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5))
trafficips = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6))
servicelevelmonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7))
pernodeservicelevelmon = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8))
bandwidthmgt = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9))
connratelimit = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10))
extra = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11))
netinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12))
events = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13))
actions = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14))
zxtmtraps = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15))
trapsZero = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0))
persistence = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 16))
cache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17))
webcache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1))
sslcache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2))
aspsessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3))
ipsessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4))
j2eesessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5))
unisessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6))
sslsessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7))
rules = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19))
licensekeys = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20))
zxtms = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21))
trapobjects = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22))
cloudcredentials = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23))
glbservices = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24))
perlocationservices = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25))
locations = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26))
listenips = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27))
authenticators = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28))
conformanceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29))
complianceStatements = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30))
steelheads = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31))
sslocspstapling = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32))
dpaCoreUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33))
mainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 1))
for _mainGroup_obj in [[("ZXTM-MIB-SMIv2", "version"), ("ZXTM-MIB-SMIv2", "numberChildProcesses"), ("ZXTM-MIB-SMIv2", "upTime"), ("ZXTM-MIB-SMIv2", "timeLastConfigUpdate"), ("ZXTM-MIB-SMIv2", "totalBytesIn"), ("ZXTM-MIB-SMIv2", "totalBytesOut"), ("ZXTM-MIB-SMIv2", "totalCurrentConn"), ("ZXTM-MIB-SMIv2", "totalConn"), ("ZXTM-MIB-SMIv2", "totalRequests"), ("ZXTM-MIB-SMIv2", "totalTransactions"), ("ZXTM-MIB-SMIv2", "numberDNSARequests"), ("ZXTM-MIB-SMIv2", "numberDNSACacheHits"), ("ZXTM-MIB-SMIv2", "numberDNSPTRRequests"), ("ZXTM-MIB-SMIv2", "numberDNSPTRCacheHits"), ("ZXTM-MIB-SMIv2", "numberSNMPUnauthorisedRequests"), ("ZXTM-MIB-SMIv2", "numberSNMPBadRequests"), ("ZXTM-MIB-SMIv2", "numberSNMPGetRequests"), ("ZXTM-MIB-SMIv2", "numberSNMPGetNextRequests"), ("ZXTM-MIB-SMIv2", "sslCipherEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipherDecrypts"), ("ZXTM-MIB-SMIv2", "sslCipherRC4Encrypts"), ("ZXTM-MIB-SMIv2", "sslCipherRC4Decrypts"), ("ZXTM-MIB-SMIv2", "sslCipherDESEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipherDESDecrypts"), ("ZXTM-MIB-SMIv2", "sslCipher3DESEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipher3DESDecrypts"), ("ZXTM-MIB-SMIv2", "sslCipherAESEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipherAESDecrypts"), ("ZXTM-MIB-SMIv2", "sslCipherRSAEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipherRSADecrypts"), ("ZXTM-MIB-SMIv2", "sslCipherRSADecryptsExternal"), ("ZXTM-MIB-SMIv2", "sslHandshakeSSLv3"), ("ZXTM-MIB-SMIv2", "sslHandshakeTLSv1"), ("ZXTM-MIB-SMIv2", "sslClientCertNotSent"), ("ZXTM-MIB-SMIv2", "sslClientCertInvalid"), ("ZXTM-MIB-SMIv2", "sslClientCertExpired"), ("ZXTM-MIB-SMIv2", "sslClientCertRevoked"), ("ZXTM-MIB-SMIv2", "sslSessionIDMemCacheHit"), ("ZXTM-MIB-SMIv2", "sslSessionIDMemCacheMiss"), ("ZXTM-MIB-SMIv2", "sslHandshakeTLSv11"), ("ZXTM-MIB-SMIv2", "sslConnections"), ("ZXTM-MIB-SMIv2", "sslCipherRSAEncryptsExternal"), ("ZXTM-MIB-SMIv2", "sysCPUIdlePercent"), ("ZXTM-MIB-SMIv2", "sysCPUBusyPercent"), ("ZXTM-MIB-SMIv2", "sysCPUUserBusyPercent"), ("ZXTM-MIB-SMIv2", "sysCPUSystemBusyPercent"), ("ZXTM-MIB-SMIv2", "sysFDsFree"), ("ZXTM-MIB-SMIv2", "sysMemTotal"), ("ZXTM-MIB-SMIv2", "sysMemFree"), ("ZXTM-MIB-SMIv2", "sysMemInUse"), ("ZXTM-MIB-SMIv2", "sysMemBuffered"), ("ZXTM-MIB-SMIv2", "sysMemSwapped"), ("ZXTM-MIB-SMIv2", "sysMemSwapTotal"), ("ZXTM-MIB-SMIv2", "numIdleConnections"), ("ZXTM-MIB-SMIv2", "dataEntries"), ("ZXTM-MIB-SMIv2", "dataMemoryUsage"), ("ZXTM-MIB-SMIv2", "eventsSeen"), ("ZXTM-MIB-SMIv2", "totalDNSResponses"), ("ZXTM-MIB-SMIv2", "totalBadDNSPackets"), ("ZXTM-MIB-SMIv2", "totalBackendServerErrors"), ("ZXTM-MIB-SMIv2", "virtualserverNumber"), ("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "virtualserverPort"), ("ZXTM-MIB-SMIv2", "virtualserverProtocol"), ("ZXTM-MIB-SMIv2", "virtualserverDefaultTrafficPool"), ("ZXTM-MIB-SMIv2", "virtualserverBytesIn"), ("ZXTM-MIB-SMIv2", "virtualserverBytesOut"), ("ZXTM-MIB-SMIv2", "virtualserverCurrentConn"), ("ZXTM-MIB-SMIv2", "virtualserverMaxConn"), ("ZXTM-MIB-SMIv2", "virtualserverDiscard"), ("ZXTM-MIB-SMIv2", "virtualserverDirectReplies"), ("ZXTM-MIB-SMIv2", "virtualserverConnectTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverDataTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverKeepaliveTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverMaxDurationTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverUdpTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverTotalDgram"), ("ZXTM-MIB-SMIv2", "virtualserverGzip"), ("ZXTM-MIB-SMIv2", "virtualserverGzipBytesSaved"), ("ZXTM-MIB-SMIv2", "virtualserverHttpRewriteLocation"), ("ZXTM-MIB-SMIv2", "virtualserverHttpRewriteCookie"), ("ZXTM-MIB-SMIv2", "virtualserverHttpCacheHits"), ("ZXTM-MIB-SMIv2", "virtualserverHttpCacheLookups"), ("ZXTM-MIB-SMIv2", "virtualserverHttpCacheHitRate"), ("ZXTM-MIB-SMIv2", "virtualserverSIPTotalCalls"), ("ZXTM-MIB-SMIv2", "virtualserverSIPRejectedRequests"), ("ZXTM-MIB-SMIv2", "virtualserverConnectionErrors"), ("ZXTM-MIB-SMIv2", "virtualserverConnectionFailures"), ("ZXTM-MIB-SMIv2", "virtualserverCertStatusRequests"), ("ZXTM-MIB-SMIv2", "virtualserverCertStatusResponses"), ("ZXTM-MIB-SMIv2", "virtualserverProcessingTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverTotalRequests"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTPRequests"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP1Requests"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP2Requests"), ("ZXTM-MIB-SMIv2", "virtualserverPktsIn"), ("ZXTM-MIB-SMIv2", "virtualserverPktsOut"), ("ZXTM-MIB-SMIv2", "virtualserverL4TCPConnectResets"), ("ZXTM-MIB-SMIv2", "virtualserverL4UDPUnreachables"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitPktsDrop"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitBytesDrop"), ("ZXTM-MIB-SMIv2", "poolNumber"), ("ZXTM-MIB-SMIv2", "poolName"), ("ZXTM-MIB-SMIv2", "poolAlgorithm"), ("ZXTM-MIB-SMIv2", "poolNodes"), ("ZXTM-MIB-SMIv2", "poolDraining"), ("ZXTM-MIB-SMIv2", "poolFailPool"), ("ZXTM-MIB-SMIv2", "poolBytesIn"), ("ZXTM-MIB-SMIv2", "poolBytesOut"), ("ZXTM-MIB-SMIv2", "poolTotalConn"), ("ZXTM-MIB-SMIv2", "poolPersistence"), ("ZXTM-MIB-SMIv2", "poolSessionMigrated"), ("ZXTM-MIB-SMIv2", "poolDisabled"), ("ZXTM-MIB-SMIv2", "poolState"), ("ZXTM-MIB-SMIv2", "poolConnsQueued"), ("ZXTM-MIB-SMIv2", "poolQueueTimeouts"), ("ZXTM-MIB-SMIv2", "poolMinQueueTime"), ("ZXTM-MIB-SMIv2", "poolMaxQueueTime"), ("ZXTM-MIB-SMIv2", "poolMeanQueueTime"), ("ZXTM-MIB-SMIv2", "poolBwLimitPktsDrop"), ("ZXTM-MIB-SMIv2", "poolBwLimitBytesDrop"), ("ZXTM-MIB-SMIv2", "nodeNumberInet46"), ("ZXTM-MIB-SMIv2", "nodeInet46AddressType"), ("ZXTM-MIB-SMIv2", "nodeInet46Address"), ("ZXTM-MIB-SMIv2", "nodeInet46Port"), ("ZXTM-MIB-SMIv2", "nodeInet46HostName"), ("ZXTM-MIB-SMIv2", "nodeInet46State"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesToNode"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesFromNode"), ("ZXTM-MIB-SMIv2", "nodeInet46CurrentRequests"), ("ZXTM-MIB-SMIv2", "nodeInet46TotalConn"), ("ZXTM-MIB-SMIv2", "nodeInet46PooledConn"), ("ZXTM-MIB-SMIv2", "nodeInet46Failures"), ("ZXTM-MIB-SMIv2", "nodeInet46NewConn"), ("ZXTM-MIB-SMIv2", "nodeInet46Errors"), ("ZXTM-MIB-SMIv2", "nodeInet46ResponseMin"), ("ZXTM-MIB-SMIv2", "nodeInet46ResponseMax"), ("ZXTM-MIB-SMIv2", "nodeInet46ResponseMean"), ("ZXTM-MIB-SMIv2", "nodeInet46IdleConns"), ("ZXTM-MIB-SMIv2", "nodeInet46CurrentConn"), ("ZXTM-MIB-SMIv2", "perPoolNodeNumber"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeHostName"), ("ZXTM-MIB-SMIv2", "perPoolNodeState"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesToNode"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesFromNode"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsToNode"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsFromNode"), ("ZXTM-MIB-SMIv2", "perPoolNodeL4StatelessBuckets"), ("ZXTM-MIB-SMIv2", "perPoolNodeCurrentRequests"), ("ZXTM-MIB-SMIv2", "perPoolNodeTotalConn"), ("ZXTM-MIB-SMIv2", "perPoolNodePooledConn"), ("ZXTM-MIB-SMIv2", "perPoolNodeFailures"), ("ZXTM-MIB-SMIv2", "perPoolNodeNewConn"), ("ZXTM-MIB-SMIv2", "perPoolNodeErrors"), ("ZXTM-MIB-SMIv2", "perPoolNodeResponseMin"), ("ZXTM-MIB-SMIv2", "perPoolNodeResponseMax"), ("ZXTM-MIB-SMIv2", "perPoolNodeResponseMean"), ("ZXTM-MIB-SMIv2", "perPoolNodeIdleConns"), ("ZXTM-MIB-SMIv2", "perPoolNodeCurrentConn"), ("ZXTM-MIB-SMIv2", "trafficIPGatewayPingRequests"), ("ZXTM-MIB-SMIv2", "trafficIPGatewayPingResponses"), ("ZXTM-MIB-SMIv2", "trafficIPNodePingRequests"), ("ZXTM-MIB-SMIv2", "trafficIPNodePingResponses"), ("ZXTM-MIB-SMIv2", "trafficIPPingResponseErrors"), ("ZXTM-MIB-SMIv2", "trafficIPARPMessage"), ("ZXTM-MIB-SMIv2", "trafficIPNumberInet46"), ("ZXTM-MIB-SMIv2", "trafficIPNumberRaisedInet46"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"), ("ZXTM-MIB-SMIv2", "trafficIPInet46State"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Time"), ("ZXTM-MIB-SMIv2", "serviceProtNumber"), ("ZXTM-MIB-SMIv2", "serviceProtName"), ("ZXTM-MIB-SMIv2", "serviceProtTotalRefusal"), ("ZXTM-MIB-SMIv2", "serviceProtLastRefusalTime"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalIP"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalConc1IP"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalConc10IP"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalConnRate"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalRFC2396"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalSize"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalBinary"), ("ZXTM-MIB-SMIv2", "serviceLevelNumber"), ("ZXTM-MIB-SMIv2", "serviceLevelName"), ("ZXTM-MIB-SMIv2", "serviceLevelTotalConn"), ("ZXTM-MIB-SMIv2", "serviceLevelTotalNonConf"), ("ZXTM-MIB-SMIv2", "serviceLevelResponseMin"), ("ZXTM-MIB-SMIv2", "serviceLevelResponseMax"), ("ZXTM-MIB-SMIv2", "serviceLevelResponseMean"), ("ZXTM-MIB-SMIv2", "serviceLevelIsOK"), ("ZXTM-MIB-SMIv2", "serviceLevelConforming"), ("ZXTM-MIB-SMIv2", "serviceLevelCurrentConns"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46SLMName"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddressType"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddress"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodePort"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46TotalConn"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46TotalNonConf"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46ResponseMin"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46ResponseMax"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46ResponseMean"), ("ZXTM-MIB-SMIv2", "bandwidthClassNumber"), ("ZXTM-MIB-SMIv2", "bandwidthClassName"), ("ZXTM-MIB-SMIv2", "bandwidthClassMaximum"), ("ZXTM-MIB-SMIv2", "bandwidthClassGuarantee"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesOut"), ("ZXTM-MIB-SMIv2", "bandwidthClassPktsDrop"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesDrop"), ("ZXTM-MIB-SMIv2", "rateClassNumber"), ("ZXTM-MIB-SMIv2", "rateClassName"), ("ZXTM-MIB-SMIv2", "rateClassMaxRatePerMin"), ("ZXTM-MIB-SMIv2", "rateClassMaxRatePerSec"), ("ZXTM-MIB-SMIv2", "rateClassQueueLength"), ("ZXTM-MIB-SMIv2", "rateClassCurrentRate"), ("ZXTM-MIB-SMIv2", "rateClassDropped"), ("ZXTM-MIB-SMIv2", "rateClassConnsEntered"), ("ZXTM-MIB-SMIv2", "rateClassConnsLeft"), ("ZXTM-MIB-SMIv2", "userCounterNumber"), ("ZXTM-MIB-SMIv2", "userCounterName"), ("ZXTM-MIB-SMIv2", "userCounterValue"), ("ZXTM-MIB-SMIv2", "userCounter64Name"), ("ZXTM-MIB-SMIv2", "userCounter64Value"), ("ZXTM-MIB-SMIv2", "interfaceNumber"), ("ZXTM-MIB-SMIv2", "interfaceName"), ("ZXTM-MIB-SMIv2", "interfaceRxPackets"), ("ZXTM-MIB-SMIv2", "interfaceTxPackets"), ("ZXTM-MIB-SMIv2", "interfaceRxErrors"), ("ZXTM-MIB-SMIv2", "interfaceTxErrors"), ("ZXTM-MIB-SMIv2", "interfaceCollisions"), ("ZXTM-MIB-SMIv2", "interfaceRxBytes"), ("ZXTM-MIB-SMIv2", "interfaceTxBytes"), ("ZXTM-MIB-SMIv2", "webCacheHits"), ("ZXTM-MIB-SMIv2", "webCacheMisses"), ("ZXTM-MIB-SMIv2", "webCacheLookups"), ("ZXTM-MIB-SMIv2", "webCacheMemUsed"), ("ZXTM-MIB-SMIv2", "webCacheMemMaximum"), ("ZXTM-MIB-SMIv2", "webCacheHitRate"), ("ZXTM-MIB-SMIv2", "webCacheEntries"), ("ZXTM-MIB-SMIv2", "webCacheMaxEntries"), ("ZXTM-MIB-SMIv2", "webCacheOldest"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreAllocated"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreFree"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreSize"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreTotalAllocations"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreTotalFailures"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreTotalFrees"), ("ZXTM-MIB-SMIv2", "sslCacheHits"), ("ZXTM-MIB-SMIv2", "sslCacheMisses"), ("ZXTM-MIB-SMIv2", "sslCacheLookups"), ("ZXTM-MIB-SMIv2", "sslCacheHitRate"), ("ZXTM-MIB-SMIv2", "sslCacheEntries")], [("ZXTM-MIB-SMIv2", "sslCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "sslCacheOldest"), ("ZXTM-MIB-SMIv2", "aspSessionCacheHits"), ("ZXTM-MIB-SMIv2", "aspSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "aspSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "aspSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "aspSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "aspSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "aspSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "ipSessionCacheHits"), ("ZXTM-MIB-SMIv2", "ipSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "ipSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "ipSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "ipSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "ipSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "ipSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheHits"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "uniSessionCacheHits"), ("ZXTM-MIB-SMIv2", "uniSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "uniSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "uniSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "uniSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "uniSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "uniSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "sslSessionCacheHits"), ("ZXTM-MIB-SMIv2", "sslSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "sslSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "sslSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "sslSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "sslSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "sslSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "ruleNumber"), ("ZXTM-MIB-SMIv2", "ruleName"), ("ZXTM-MIB-SMIv2", "ruleExecutions"), ("ZXTM-MIB-SMIv2", "ruleAborts"), ("ZXTM-MIB-SMIv2", "ruleResponds"), ("ZXTM-MIB-SMIv2", "rulePoolSelect"), ("ZXTM-MIB-SMIv2", "ruleRetries"), ("ZXTM-MIB-SMIv2", "ruleDiscards"), ("ZXTM-MIB-SMIv2", "ruleExecutionTimeWarnings"), ("ZXTM-MIB-SMIv2", "monitorNumber"), ("ZXTM-MIB-SMIv2", "monitorName"), ("ZXTM-MIB-SMIv2", "licensekeyNumber"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ("ZXTM-MIB-SMIv2", "zxtmNumber"), ("ZXTM-MIB-SMIv2", "zxtmName"), ("ZXTM-MIB-SMIv2", "glbServiceNumber"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "glbServiceResponses"), ("ZXTM-MIB-SMIv2", "glbServiceUnmodified"), ("ZXTM-MIB-SMIv2", "glbServiceDiscarded"), ("ZXTM-MIB-SMIv2", "perLocationServiceLocationName"), ("ZXTM-MIB-SMIv2", "perLocationServiceLocationCode"), ("ZXTM-MIB-SMIv2", "perLocationServiceName"), ("ZXTM-MIB-SMIv2", "perLocationServiceDraining"), ("ZXTM-MIB-SMIv2", "perLocationServiceState"), ("ZXTM-MIB-SMIv2", "perLocationServiceFrontendState"), ("ZXTM-MIB-SMIv2", "perLocationServiceMonitorState"), ("ZXTM-MIB-SMIv2", "perLocationServiceLoad"), ("ZXTM-MIB-SMIv2", "perLocationServiceResponses"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "locationCode"), ("ZXTM-MIB-SMIv2", "locationLoad"), ("ZXTM-MIB-SMIv2", "locationResponses"), ("ZXTM-MIB-SMIv2", "eventNumber"), ("ZXTM-MIB-SMIv2", "eventName"), ("ZXTM-MIB-SMIv2", "eventsMatched"), ("ZXTM-MIB-SMIv2", "actionNumber"), ("ZXTM-MIB-SMIv2", "actionName"), ("ZXTM-MIB-SMIv2", "actionsProcessed"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "customEventName"), ("ZXTM-MIB-SMIv2", "cloudcredentialsClassNumber"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"), ("ZXTM-MIB-SMIv2", "cloudcredentialsStatusRequests"), ("ZXTM-MIB-SMIv2", "cloudcredentialsNodeCreations"), ("ZXTM-MIB-SMIv2", "cloudcredentialsNodeDeletions"), ("ZXTM-MIB-SMIv2", "domainName"), ("ZXTM-MIB-SMIv2", "listenIPAddressType"), ("ZXTM-MIB-SMIv2", "listenIPAddress"), ("ZXTM-MIB-SMIv2", "listenIPBytesIn"), ("ZXTM-MIB-SMIv2", "listenIPBytesOut"), ("ZXTM-MIB-SMIv2", "listenIPCurrentConn"), ("ZXTM-MIB-SMIv2", "listenIPTotalRequests"), ("ZXTM-MIB-SMIv2", "listenIPMaxConn"), ("ZXTM-MIB-SMIv2", "hourlyPeakBytesInPerSecond"), ("ZXTM-MIB-SMIv2", "hourlyPeakBytesOutPerSecond"), ("ZXTM-MIB-SMIv2", "hourlyPeakRequestsPerSecond"), ("ZXTM-MIB-SMIv2", "hourlyPeakSSLConnectionsPerSecond"), ("ZXTM-MIB-SMIv2", "numberSNMPGetBulkRequests"), ("ZXTM-MIB-SMIv2", "authenticatorNumber"), ("ZXTM-MIB-SMIv2", "authenticatorName"), ("ZXTM-MIB-SMIv2", "authenticatorRequests"), ("ZXTM-MIB-SMIv2", "authenticatorPasses"), ("ZXTM-MIB-SMIv2", "authenticatorFails"), ("ZXTM-MIB-SMIv2", "authenticatorErrors"), ("ZXTM-MIB-SMIv2", "steelheadNumber"), ("ZXTM-MIB-SMIv2", "steelheadName"), ("ZXTM-MIB-SMIv2", "steelheadOptimized"), ("ZXTM-MIB-SMIv2", "virtualserverCertStatusRequests"), ("ZXTM-MIB-SMIv2", "virtualserverCertStatusResponses"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingCacheCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingSuccessCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingFailureCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingGoodCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingRevokedCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingUnknownCount"), ("ZXTM-MIB-SMIv2", "sslCipherDSASigns"), ("ZXTM-MIB-SMIv2", "sslCipherDSAVerifies"), ("ZXTM-MIB-SMIv2", "sslHandshakeTLSv12"), ("ZXTM-MIB-SMIv2", "sslCipherDHGenerates"), ("ZXTM-MIB-SMIv2", "sslCipherDHAgreements"), ("ZXTM-MIB-SMIv2", "sslCipherAESGCMEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipherAESGCMDecrypts"), ("ZXTM-MIB-SMIv2", "sslCipherECDHGenerates"), ("ZXTM-MIB-SMIv2", "sslCipherECDHAgreements"), ("ZXTM-MIB-SMIv2", "sslCipherECDSASigns"), ("ZXTM-MIB-SMIv2", "sslCipherECDSAVerifies"), ("ZXTM-MIB-SMIv2", "dataPlaneAccelCoreNumber"), ("ZXTM-MIB-SMIv2", "coreId"), ("ZXTM-MIB-SMIv2", "coreUtilizationPercent")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        mainGroup = mainGroup.setObjects(*_mainGroup_obj)
    else:
        mainGroup = mainGroup.setObjects(*_mainGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mainGroup = mainGroup.setStatus('current')
deprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 2)).setObjects(("ZXTM-MIB-SMIv2", "sslSessionIDDiskCacheHit"), ("ZXTM-MIB-SMIv2", "sslSessionIDDiskCacheMiss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deprecatedGroup = deprecatedGroup.setStatus('deprecated')
obsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 3)).setObjects(("ZXTM-MIB-SMIv2", "nodeNumber"), ("ZXTM-MIB-SMIv2", "nodeIPAddress"), ("ZXTM-MIB-SMIv2", "nodePort"), ("ZXTM-MIB-SMIv2", "nodeHostName"), ("ZXTM-MIB-SMIv2", "nodeState"), ("ZXTM-MIB-SMIv2", "nodeBytesToNodeLo"), ("ZXTM-MIB-SMIv2", "nodeBytesToNodeHi"), ("ZXTM-MIB-SMIv2", "nodeBytesFromNodeLo"), ("ZXTM-MIB-SMIv2", "nodeBytesFromNodeHi"), ("ZXTM-MIB-SMIv2", "nodeCurrentRequests"), ("ZXTM-MIB-SMIv2", "nodeTotalConn"), ("ZXTM-MIB-SMIv2", "nodePooledConn"), ("ZXTM-MIB-SMIv2", "nodeFailures"), ("ZXTM-MIB-SMIv2", "nodeNewConn"), ("ZXTM-MIB-SMIv2", "nodeErrors"), ("ZXTM-MIB-SMIv2", "nodeResponseMin"), ("ZXTM-MIB-SMIv2", "nodeResponseMax"), ("ZXTM-MIB-SMIv2", "nodeResponseMean"), ("ZXTM-MIB-SMIv2", "nodeCurrentConn"), ("ZXTM-MIB-SMIv2", "trafficIPNumber"), ("ZXTM-MIB-SMIv2", "trafficIPNumberRaised"), ("ZXTM-MIB-SMIv2", "trafficIPAddress"), ("ZXTM-MIB-SMIv2", "trafficIPTime"), ("ZXTM-MIB-SMIv2", "trafficIPState"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelSLMName"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelNodeIPAddr"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelNodePort"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelTotalConn"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelTotalNonConf"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelResponseMin"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelResponseMax"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelResponseMean"), ("ZXTM-MIB-SMIv2", "totalBytesInLo"), ("ZXTM-MIB-SMIv2", "totalBytesInHi"), ("ZXTM-MIB-SMIv2", "totalBytesOutLo"), ("ZXTM-MIB-SMIv2", "totalBytesOutHi"), ("ZXTM-MIB-SMIv2", "virtualserverBytesInLo"), ("ZXTM-MIB-SMIv2", "virtualserverBytesInHi"), ("ZXTM-MIB-SMIv2", "virtualserverBytesOutLo"), ("ZXTM-MIB-SMIv2", "virtualserverBytesOutHi"), ("ZXTM-MIB-SMIv2", "virtualserverPktsInLo"), ("ZXTM-MIB-SMIv2", "virtualserverPktsInHi"), ("ZXTM-MIB-SMIv2", "virtualserverPktsOutLo"), ("ZXTM-MIB-SMIv2", "virtualserverPktsOutHi"), ("ZXTM-MIB-SMIv2", "virtualserverGzipBytesSavedLo"), ("ZXTM-MIB-SMIv2", "virtualserverGzipBytesSavedHi"), ("ZXTM-MIB-SMIv2", "virtualserverTotalConn"), ("ZXTM-MIB-SMIv2", "virtualserverTotalRequestsLo"), ("ZXTM-MIB-SMIv2", "virtualserverTotalRequestsHi"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTPRequestsLo"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTPRequestsHi"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP1RequestsLo"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP1RequestsHi"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP2RequestsLo"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP2RequestsHi"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitPktsDropLo"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitPktsDropHi"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitBytesDropLo"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitBytesDropHi"), ("ZXTM-MIB-SMIv2", "poolBytesInLo"), ("ZXTM-MIB-SMIv2", "poolBytesInHi"), ("ZXTM-MIB-SMIv2", "poolBytesOutLo"), ("ZXTM-MIB-SMIv2", "poolBytesOutHi"), ("ZXTM-MIB-SMIv2", "poolBwLimitPktsDropLo"), ("ZXTM-MIB-SMIv2", "poolBwLimitPktsDropHi"), ("ZXTM-MIB-SMIv2", "poolBwLimitBytesDropLo"), ("ZXTM-MIB-SMIv2", "poolBwLimitBytesDropHi"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesToNodeLo"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesToNodeHi"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesFromNodeLo"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesFromNodeHi"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesToNodeLo"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesToNodeHi"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesFromNodeLo"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesFromNodeHi"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsToNodeLo"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsToNodeHi"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsFromNodeLo"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsFromNodeHi"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesOutLo"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesOutHi"), ("ZXTM-MIB-SMIv2", "bandwidthClassPktsDropLo"), ("ZXTM-MIB-SMIv2", "bandwidthClassPktsDropHi"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesDropLo"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesDropHi"), ("ZXTM-MIB-SMIv2", "interfaceRxBytesLo"), ("ZXTM-MIB-SMIv2", "interfaceRxBytesHi"), ("ZXTM-MIB-SMIv2", "interfaceTxBytesLo"), ("ZXTM-MIB-SMIv2", "interfaceTxBytesHi"), ("ZXTM-MIB-SMIv2", "webCacheHitsLo"), ("ZXTM-MIB-SMIv2", "webCacheHitsHi"), ("ZXTM-MIB-SMIv2", "webCacheMissesLo"), ("ZXTM-MIB-SMIv2", "webCacheMissesHi"), ("ZXTM-MIB-SMIv2", "webCacheLookupsLo"), ("ZXTM-MIB-SMIv2", "webCacheLookupsHi"), ("ZXTM-MIB-SMIv2", "listenIPBytesInLo"), ("ZXTM-MIB-SMIv2", "listenIPBytesInHi"), ("ZXTM-MIB-SMIv2", "listenIPBytesOutLo"), ("ZXTM-MIB-SMIv2", "listenIPBytesOutHi"), ("ZXTM-MIB-SMIv2", "listenIPTotalConn"), ("ZXTM-MIB-SMIv2", "listenIPTotalRequestsLo"), ("ZXTM-MIB-SMIv2", "listenIPTotalRequestsHi"), ("ZXTM-MIB-SMIv2", "sslHandshakeSSLv2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    obsoleteGroup = obsoleteGroup.setStatus('obsolete')
notificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 4))
for _notificationGroup_obj in [[("ZXTM-MIB-SMIv2", "testaction"), ("ZXTM-MIB-SMIv2", "running"), ("ZXTM-MIB-SMIv2", "fewfreefds"), ("ZXTM-MIB-SMIv2", "restartrequired"), ("ZXTM-MIB-SMIv2", "upgradereboot"), ("ZXTM-MIB-SMIv2", "sysctlreboot"), ("ZXTM-MIB-SMIv2", "upgraderestart"), ("ZXTM-MIB-SMIv2", "unspecifiedreboot"), ("ZXTM-MIB-SMIv2", "timemovedback"), ("ZXTM-MIB-SMIv2", "sslfail"), ("ZXTM-MIB-SMIv2", "appliance"), ("ZXTM-MIB-SMIv2", "zxtmswerror"), ("ZXTM-MIB-SMIv2", "customevent"), ("ZXTM-MIB-SMIv2", "versionmismatch"), ("ZXTM-MIB-SMIv2", "autherror"), ("ZXTM-MIB-SMIv2", "machineok"), ("ZXTM-MIB-SMIv2", "machinetimeout"), ("ZXTM-MIB-SMIv2", "machinefail"), ("ZXTM-MIB-SMIv2", "allmachinesok"), ("ZXTM-MIB-SMIv2", "flipperbackendsworking"), ("ZXTM-MIB-SMIv2", "flipperfrontendsworking"), ("ZXTM-MIB-SMIv2", "pingbackendfail"), ("ZXTM-MIB-SMIv2", "pingfrontendfail"), ("ZXTM-MIB-SMIv2", "pinggwfail"), ("ZXTM-MIB-SMIv2", "statebaddata"), ("ZXTM-MIB-SMIv2", "stateconnfail"), ("ZXTM-MIB-SMIv2", "stateok"), ("ZXTM-MIB-SMIv2", "statereadfail"), ("ZXTM-MIB-SMIv2", "statetimeout"), ("ZXTM-MIB-SMIv2", "stateunexpected"), ("ZXTM-MIB-SMIv2", "statewritefail"), ("ZXTM-MIB-SMIv2", "activatealldead"), ("ZXTM-MIB-SMIv2", "machinerecovered"), ("ZXTM-MIB-SMIv2", "flipperrecovered"), ("ZXTM-MIB-SMIv2", "activatedautomatically"), ("ZXTM-MIB-SMIv2", "zclustermoderr"), ("ZXTM-MIB-SMIv2", "ec2flipperraiselocalworking"), ("ZXTM-MIB-SMIv2", "ec2flipperraiseothersdead"), ("ZXTM-MIB-SMIv2", "ec2iperr"), ("ZXTM-MIB-SMIv2", "dropec2ipwarn"), ("ZXTM-MIB-SMIv2", "ec2nopublicip"), ("ZXTM-MIB-SMIv2", "ec2nosecondaryprivateip"), ("ZXTM-MIB-SMIv2", "ec2dataretrievalfailed"), ("ZXTM-MIB-SMIv2", "ec2dataretrievalsuccessful"), ("ZXTM-MIB-SMIv2", "ec2initialized"), ("ZXTM-MIB-SMIv2", "gcedataretrievalfailed"), ("ZXTM-MIB-SMIv2", "gcedataretrievalsuccessful"), ("ZXTM-MIB-SMIv2", "multihostload"), ("ZXTM-MIB-SMIv2", "sslhwfail"), ("ZXTM-MIB-SMIv2", "sslhwrestart"), ("ZXTM-MIB-SMIv2", "sslhwstart"), ("ZXTM-MIB-SMIv2", "confdel"), ("ZXTM-MIB-SMIv2", "confmod"), ("ZXTM-MIB-SMIv2", "confadd"), ("ZXTM-MIB-SMIv2", "confok"), ("ZXTM-MIB-SMIv2", "confreptimeout"), ("ZXTM-MIB-SMIv2", "confrepfailed"), ("ZXTM-MIB-SMIv2", "javadied"), ("ZXTM-MIB-SMIv2", "javastop"), ("ZXTM-MIB-SMIv2", "javastartfail"), ("ZXTM-MIB-SMIv2", "javaterminatefail"), ("ZXTM-MIB-SMIv2", "javanotfound"), ("ZXTM-MIB-SMIv2", "javastarted"), ("ZXTM-MIB-SMIv2", "servleterror"), ("ZXTM-MIB-SMIv2", "monitorfail"), ("ZXTM-MIB-SMIv2", "monitorok"), ("ZXTM-MIB-SMIv2", "rulexmlerr"), ("ZXTM-MIB-SMIv2", "pooluseunknown"), ("ZXTM-MIB-SMIv2", "ruleabort"), ("ZXTM-MIB-SMIv2", "rulebufferlarge"), ("ZXTM-MIB-SMIv2", "rulebodycomperror"), ("ZXTM-MIB-SMIv2", "forwardproxybadhost"), ("ZXTM-MIB-SMIv2", "invalidemit"), ("ZXTM-MIB-SMIv2", "rulenopersistence"), ("ZXTM-MIB-SMIv2", "rulelogmsginfo"), ("ZXTM-MIB-SMIv2", "rulelogmsgwarn"), ("ZXTM-MIB-SMIv2", "rulelogmsgserious"), ("ZXTM-MIB-SMIv2", "norate"), ("ZXTM-MIB-SMIv2", "poolactivenodesunknown"), ("ZXTM-MIB-SMIv2", "datastorefull"), ("ZXTM-MIB-SMIv2", "ruleoverrun"), ("ZXTM-MIB-SMIv2", "rulestreamerrortoomuch"), ("ZXTM-MIB-SMIv2", "rulestreamerrornotenough"), ("ZXTM-MIB-SMIv2", "rulestreamerrorprocessfailure"), ("ZXTM-MIB-SMIv2", "rulestreamerrornotstarted"), ("ZXTM-MIB-SMIv2", "rulestreamerrornotfinished"), ("ZXTM-MIB-SMIv2", "rulestreamerrorinternal"), ("ZXTM-MIB-SMIv2", "rulestreamerrorgetresponse"), ("ZXTM-MIB-SMIv2", "rulesinvalidrequestbody"), ("ZXTM-MIB-SMIv2", "serviceruleabort"), ("ZXTM-MIB-SMIv2", "servicerulelocunknown"), ("ZXTM-MIB-SMIv2", "servicerulelocnotconfigured"), ("ZXTM-MIB-SMIv2", "servicerulelocdead"), ("ZXTM-MIB-SMIv2", "expired"), ("ZXTM-MIB-SMIv2", "licensecorrupt"), ("ZXTM-MIB-SMIv2", "expiresoon"), ("ZXTM-MIB-SMIv2", "usinglicense"), ("ZXTM-MIB-SMIv2", "licenseclustertoobig"), ("ZXTM-MIB-SMIv2", "unlicensed"), ("ZXTM-MIB-SMIv2", "usingdevlicense"), ("ZXTM-MIB-SMIv2", "morememallowed"), ("ZXTM-MIB-SMIv2", "lessmemallowed"), ("ZXTM-MIB-SMIv2", "cachesizereduced"), ("ZXTM-MIB-SMIv2", "tpslimited"), ("ZXTM-MIB-SMIv2", "ssltpslimited"), ("ZXTM-MIB-SMIv2", "bwlimited"), ("ZXTM-MIB-SMIv2", "licensetoomanylocations"), ("ZXTM-MIB-SMIv2", "autoscalinglicenseerror"), ("ZXTM-MIB-SMIv2", "autoscalinglicenseenabled"), ("ZXTM-MIB-SMIv2", "autoscalinglicensedisabled"), ("ZXTM-MIB-SMIv2", "analyticslicenseenabled"), ("ZXTM-MIB-SMIv2", "analyticslicensedisabled"), ("ZXTM-MIB-SMIv2", "poolnonodes"), ("ZXTM-MIB-SMIv2", "poolok"), ("ZXTM-MIB-SMIv2", "pooldied"), ("ZXTM-MIB-SMIv2", "noderesolvefailure"), ("ZXTM-MIB-SMIv2", "noderesolvemultiple"), ("ZXTM-MIB-SMIv2", "nodeworking"), ("ZXTM-MIB-SMIv2", "nostarttls"), ("ZXTM-MIB-SMIv2", "nodefail"), ("ZXTM-MIB-SMIv2", "starttlsinvalid"), ("ZXTM-MIB-SMIv2", "ehloinvalid"), ("ZXTM-MIB-SMIv2", "usedcredsdeleted"), ("ZXTM-MIB-SMIv2", "autoscalestatusupdateerror"), ("ZXTM-MIB-SMIv2", "autoscaleresponseparseerror"), ("ZXTM-MIB-SMIv2", "autoscalingchangeprocessfailure"), ("ZXTM-MIB-SMIv2", "autoscalewrongimageid"), ("ZXTM-MIB-SMIv2", "autoscalewrongname"), ("ZXTM-MIB-SMIv2", "autoscalewrongsizeid"), ("ZXTM-MIB-SMIv2", "apistatusprocesshanging"), ("ZXTM-MIB-SMIv2", "autonodedestructioncomplete"), ("ZXTM-MIB-SMIv2", "autonodeexisted"), ("ZXTM-MIB-SMIv2", "autoscaledpooltoosmall"), ("ZXTM-MIB-SMIv2", "autoscaleinvalidargforcreatenode"), ("ZXTM-MIB-SMIv2", "autonodedisappeared"), ("ZXTM-MIB-SMIv2", "autonoderemoved"), ("ZXTM-MIB-SMIv2", "nameserverunavailable"), ("ZXTM-MIB-SMIv2", "nameserveravailable"), ("ZXTM-MIB-SMIv2", "autoscaleresolvefailure"), ("ZXTM-MIB-SMIv2", "autoscaledpoolrefractory"), ("ZXTM-MIB-SMIv2", "cannotshrinkemptypool"), ("ZXTM-MIB-SMIv2", "autoscalinghysteresiscantgrow"), ("ZXTM-MIB-SMIv2", "autonodecreationcomplete"), ("ZXTM-MIB-SMIv2", "autonodestatuschange"), ("ZXTM-MIB-SMIv2", "autoscalinghysteresiscantshrink"), ("ZXTM-MIB-SMIv2", "autoscalingpoolstatechange"), ("ZXTM-MIB-SMIv2", "autonodedestroyed"), ("ZXTM-MIB-SMIv2", "autonodecreationstarted"), ("ZXTM-MIB-SMIv2", "autoscaleinvalidargfordeletenode"), ("ZXTM-MIB-SMIv2", "autoscalinghitroof"), ("ZXTM-MIB-SMIv2", "autoscalinghitfloor"), ("ZXTM-MIB-SMIv2", "apichangeprocesshanging"), ("ZXTM-MIB-SMIv2", "autoscaledpooltoobig"), ("ZXTM-MIB-SMIv2", "autoscalingprocesstimedout"), ("ZXTM-MIB-SMIv2", "autoscalingdisabled"), ("ZXTM-MIB-SMIv2", "autoscalednodecontested"), ("ZXTM-MIB-SMIv2", "autoscalepoolconfupdate"), ("ZXTM-MIB-SMIv2", "flipperraiselocalworking"), ("ZXTM-MIB-SMIv2", "flipperraiseothersdead"), ("ZXTM-MIB-SMIv2", "flipperraiseosdrop"), ("ZXTM-MIB-SMIv2", "dropipinfo"), ("ZXTM-MIB-SMIv2", "dropipwarn"), ("ZXTM-MIB-SMIv2", "flipperdadreraise"), ("ZXTM-MIB-SMIv2", "flipperipexists"), ("ZXTM-MIB-SMIv2", "triggersummary"), ("ZXTM-MIB-SMIv2", "slmclasslimitexceeded"), ("ZXTM-MIB-SMIv2", "slmrecoveredwarn"), ("ZXTM-MIB-SMIv2", "slmrecoveredserious"), ("ZXTM-MIB-SMIv2", "slmfallenbelowwarn"), ("ZXTM-MIB-SMIv2", "slmfallenbelowserious"), ("ZXTM-MIB-SMIv2", "vscrloutofdate"), ("ZXTM-MIB-SMIv2", "vsstart"), ("ZXTM-MIB-SMIv2", "vsstop"), ("ZXTM-MIB-SMIv2", "privkeyok"), ("ZXTM-MIB-SMIv2", "ssldrop"), ("ZXTM-MIB-SMIv2", "vslogwritefail"), ("ZXTM-MIB-SMIv2", "vssslcertexpired"), ("ZXTM-MIB-SMIv2", "vssslcerttoexpire"), ("ZXTM-MIB-SMIv2", "vscacertexpired"), ("ZXTM-MIB-SMIv2", "vscacerttoexpire"), ("ZXTM-MIB-SMIv2", "glbmissingips"), ("ZXTM-MIB-SMIv2", "glbdeadlocmissingips"), ("ZXTM-MIB-SMIv2", "glbnolocations"), ("ZXTM-MIB-SMIv2", "locationmonitorok"), ("ZXTM-MIB-SMIv2", "locationmonitorfail"), ("ZXTM-MIB-SMIv2", "locationok"), ("ZXTM-MIB-SMIv2", "locationfail"), ("ZXTM-MIB-SMIv2", "locationsoapok"), ("ZXTM-MIB-SMIv2", "locationsoapfail"), ("ZXTM-MIB-SMIv2", "glbnewmaster"), ("ZXTM-MIB-SMIv2", "glblogwritefail"), ("ZXTM-MIB-SMIv2", "glbfailalter"), ("ZXTM-MIB-SMIv2", "glbservicedied"), ("ZXTM-MIB-SMIv2", "glbserviceok"), ("ZXTM-MIB-SMIv2", "locmovemachine"), ("ZXTM-MIB-SMIv2", "locempty"), ("ZXTM-MIB-SMIv2", "glbtoomanylocations"), ("ZXTM-MIB-SMIv2", "dnszonevalidate"), ("ZXTM-MIB-SMIv2", "dnszonecreaterecord"), ("ZXTM-MIB-SMIv2", "dnserroraddzone"), ("ZXTM-MIB-SMIv2", "dnsaddzone"), ("ZXTM-MIB-SMIv2", "dnszoneparse"), ("ZXTM-MIB-SMIv2", "dnszonedelete"), ("ZXTM-MIB-SMIv2", "dnserrordeletezone"), ("ZXTM-MIB-SMIv2", "maxclientbufferdrop"), ("ZXTM-MIB-SMIv2", "respcompfail"), ("ZXTM-MIB-SMIv2", "responsetoolarge"), ("ZXTM-MIB-SMIv2", "sipstreamnoports"), ("ZXTM-MIB-SMIv2", "rtspstreamnoports"), ("ZXTM-MIB-SMIv2", "geodataloadfail"), ("ZXTM-MIB-SMIv2", "poolpersistencemismatch"), ("ZXTM-MIB-SMIv2", "connerror"), ("ZXTM-MIB-SMIv2", "connfail"), ("ZXTM-MIB-SMIv2", "badcontentlen"), ("ZXTM-MIB-SMIv2", "logfiledeleted"), ("ZXTM-MIB-SMIv2", "license_graceperiodexpired"), ("ZXTM-MIB-SMIv2", "license_authorized"), ("ZXTM-MIB-SMIv2", "license_rejected_authorized"), ("ZXTM-MIB-SMIv2", "license_rejected_unauthorized"), ("ZXTM-MIB-SMIv2", "license_timedout_authorized"), ("ZXTM-MIB-SMIv2", "license_timedout_unauthorized"), ("ZXTM-MIB-SMIv2", "license_unauthorized"), ("ZXTM-MIB-SMIv2", "logdiskoverload"), ("ZXTM-MIB-SMIv2", "logdiskfull"), ("ZXTM-MIB-SMIv2", "aptimizeuseunknownprofile"), ("ZXTM-MIB-SMIv2", "aptimizedisabled"), ("ZXTM-MIB-SMIv2", "aptimizeuseunknownscope"), ("ZXTM-MIB-SMIv2", "sslhandshakemsgsizelimit"), ("ZXTM-MIB-SMIv2", "sslcrltoobig"), ("ZXTM-MIB-SMIv2", "childcommsfail"), ("ZXTM-MIB-SMIv2", "sslrehandshakemininterval"), ("ZXTM-MIB-SMIv2", "datalocalstorefull"), ("ZXTM-MIB-SMIv2", "fipsfailinit"), ("ZXTM-MIB-SMIv2", "fipsfailops"), ("ZXTM-MIB-SMIv2", "ocspstaplingfail"), ("ZXTM-MIB-SMIv2", "ocspstaplingnomem"), ("ZXTM-MIB-SMIv2", "ocspstaplingrevoked"), ("ZXTM-MIB-SMIv2", "ocspstaplingunknown"), ("ZXTM-MIB-SMIv2", "ocspstaplingunrevoked"), ("ZXTM-MIB-SMIv2", "flipperraiseremotedropped"), ("ZXTM-MIB-SMIv2", "autofailbacktimerstarted"), ("ZXTM-MIB-SMIv2", "autofailbacktimerstopped"), ("ZXTM-MIB-SMIv2", "autofailbackafterdelay"), ("ZXTM-MIB-SMIv2", "autofailbacktimercancelled"), ("ZXTM-MIB-SMIv2", "autoscalingresuscitatepool"), ("ZXTM-MIB-SMIv2", "license_rejected_unauthorized_ts"), ("ZXTM-MIB-SMIv2", "license_authorized_ts"), ("ZXTM-MIB-SMIv2", "license_rejected_authorized_ts"), ("ZXTM-MIB-SMIv2", "license_timedout_authorized_ts"), ("ZXTM-MIB-SMIv2", "license_timedout_unauthorized_ts"), ("ZXTM-MIB-SMIv2", "license_graceperiodexpired_ts"), ("ZXTM-MIB-SMIv2", "license_explicitlydisabled_ts"), ("ZXTM-MIB-SMIv2", "numnodes_exceeded"), ("ZXTM-MIB-SMIv2", "numpools_exceeded"), ("ZXTM-MIB-SMIv2", "numlocations_exceeded")], [("ZXTM-MIB-SMIv2", "numtipg_exceeded"), ("ZXTM-MIB-SMIv2", "zxtmhighload"), ("ZXTM-MIB-SMIv2", "clocknotmonotonic"), ("ZXTM-MIB-SMIv2", "clockjump"), ("ZXTM-MIB-SMIv2", "pingsendfail"), ("ZXTM-MIB-SMIv2", "autonodenopublicip"), ("ZXTM-MIB-SMIv2", "routingswoperational"), ("ZXTM-MIB-SMIv2", "routingswfailurelimitreached"), ("ZXTM-MIB-SMIv2", "routingswfailed"), ("ZXTM-MIB-SMIv2", "routingswstartfailed"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolstarted"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolstopped"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolrestarted"), ("ZXTM-MIB-SMIv2", "appfirewallcontroltimeout"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolerror"), ("ZXTM-MIB-SMIv2", "ospfneighborsok"), ("ZXTM-MIB-SMIv2", "ospfneighborsdegraded"), ("ZXTM-MIB-SMIv2", "ospfneighborsfailed"), ("ZXTM-MIB-SMIv2", "bgpneighborsok"), ("ZXTM-MIB-SMIv2", "bgpneighborsdegraded"), ("ZXTM-MIB-SMIv2", "bgpneighborsfailed"), ("ZXTM-MIB-SMIv2", "bgpnoneighbors"), ("ZXTM-MIB-SMIv2", "dnssecexpired"), ("ZXTM-MIB-SMIv2", "dnssecexpires"), ("ZXTM-MIB-SMIv2", "glbactivedcmismatch"), ("ZXTM-MIB-SMIv2", "locationdraining"), ("ZXTM-MIB-SMIv2", "locationnotdraining"), ("ZXTM-MIB-SMIv2", "locationdisabled"), ("ZXTM-MIB-SMIv2", "locationenabled"), ("ZXTM-MIB-SMIv2", "locationunavailable"), ("ZXTM-MIB-SMIv2", "locationavailable"), ("ZXTM-MIB-SMIv2", "glbmanualfailback"), ("ZXTM-MIB-SMIv2", "nodedrainingtodelete"), ("ZXTM-MIB-SMIv2", "nodedrainingtodeletetimeout"), ("ZXTM-MIB-SMIv2", "zxtmcpustarvation")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here! Upgrade your pysnmp version!
        notificationGroup = notificationGroup.setObjects(*_notificationGroup_obj)
    else:
        notificationGroup = notificationGroup.setObjects(*_notificationGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationGroup = notificationGroup.setStatus('current')
obsoleteNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 5)).setObjects(("ZXTM-MIB-SMIv2", "ec2vpceipassocerr"), ("ZXTM-MIB-SMIv2", "ec2vpciderr"), ("ZXTM-MIB-SMIv2", "rebootrequired"), ("ZXTM-MIB-SMIv2", "dnszoneparsechild"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    obsoleteNotificationGroup = obsoleteNotificationGroup.setStatus('obsolete')
deprecatedNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 6)).setObjects(("ZXTM-MIB-SMIv2", "hardware"), ("ZXTM-MIB-SMIv2", "childhung"), ("ZXTM-MIB-SMIv2", "childkilled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deprecatedNotificationGroup = deprecatedNotificationGroup.setStatus('deprecated')
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30, 1)).setObjects(("ZXTM-MIB-SMIv2", "mainGroup"), ("ZXTM-MIB-SMIv2", "notificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('current')
deprecatedCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30, 2)).setObjects(("ZXTM-MIB-SMIv2", "deprecatedGroup"), ("ZXTM-MIB-SMIv2", "deprecatedNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deprecatedCompliance = deprecatedCompliance.setStatus('deprecated')
obsoleteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30, 3)).setObjects(("ZXTM-MIB-SMIv2", "obsoleteGroup"), ("ZXTM-MIB-SMIv2", "obsoleteNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    obsoleteCompliance = obsoleteCompliance.setStatus('obsolete')
version = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('current')
numberChildProcesses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberChildProcesses.setStatus('current')
upTime = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upTime.setStatus('current')
timeLastConfigUpdate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeLastConfigUpdate.setStatus('current')
totalBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesIn.setStatus('current')
totalBytesInLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesInLo.setStatus('obsolete')
totalBytesInHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesInHi.setStatus('obsolete')
totalBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesOut.setStatus('current')
totalBytesOutLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesOutLo.setStatus('obsolete')
totalBytesOutHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesOutHi.setStatus('obsolete')
totalCurrentConn = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCurrentConn.setStatus('current')
totalConn = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalConn.setStatus('current')
totalRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 127), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRequests.setStatus('current')
totalTransactions = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 128), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalTransactions.setStatus('current')
hourlyPeakBytesInPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 129), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakBytesInPerSecond.setStatus('current')
hourlyPeakBytesOutPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 130), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakBytesOutPerSecond.setStatus('current')
hourlyPeakRequestsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 131), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakRequestsPerSecond.setStatus('current')
hourlyPeakSSLConnectionsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 132), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakSSLConnectionsPerSecond.setStatus('current')
numberDNSARequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSARequests.setStatus('current')
numberDNSACacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSACacheHits.setStatus('current')
numberDNSPTRRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSPTRRequests.setStatus('current')
numberDNSPTRCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSPTRCacheHits.setStatus('current')
numberSNMPUnauthorisedRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPUnauthorisedRequests.setStatus('current')
numberSNMPBadRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPBadRequests.setStatus('current')
numberSNMPGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPGetRequests.setStatus('current')
numberSNMPGetNextRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPGetNextRequests.setStatus('current')
numberSNMPGetBulkRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPGetBulkRequests.setStatus('current')
sslCipherEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherEncrypts.setStatus('current')
sslCipherDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDecrypts.setStatus('current')
sslCipherRC4Encrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRC4Encrypts.setStatus('current')
sslCipherRC4Decrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRC4Decrypts.setStatus('current')
sslCipherDESEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDESEncrypts.setStatus('current')
sslCipherDESDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDESDecrypts.setStatus('current')
sslCipher3DESEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipher3DESEncrypts.setStatus('current')
sslCipher3DESDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipher3DESDecrypts.setStatus('current')
sslCipherAESEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESEncrypts.setStatus('current')
sslCipherAESDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESDecrypts.setStatus('current')
sslCipherRSAEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSAEncrypts.setStatus('current')
sslCipherRSADecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSADecrypts.setStatus('current')
sslCipherRSADecryptsExternal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSADecryptsExternal.setStatus('current')
sslHandshakeSSLv2 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeSSLv2.setStatus('obsolete')
sslHandshakeSSLv3 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeSSLv3.setStatus('current')
sslHandshakeTLSv1 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeTLSv1.setStatus('current')
sslClientCertNotSent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertNotSent.setStatus('current')
sslClientCertInvalid = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertInvalid.setStatus('current')
sslClientCertExpired = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertExpired.setStatus('current')
sslClientCertRevoked = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertRevoked.setStatus('current')
sslSessionIDMemCacheHit = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDMemCacheHit.setStatus('current')
sslSessionIDMemCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDMemCacheMiss.setStatus('current')
sslSessionIDDiskCacheHit = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDDiskCacheHit.setStatus('deprecated')
sslSessionIDDiskCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDDiskCacheMiss.setStatus('deprecated')
sslHandshakeTLSv11 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeTLSv11.setStatus('current')
sslConnections = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslConnections.setStatus('current')
sslCipherRSAEncryptsExternal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSAEncryptsExternal.setStatus('current')
sslCipherDSASigns = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDSASigns.setStatus('current')
sslCipherDSAVerifies = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDSAVerifies.setStatus('current')
sslHandshakeTLSv12 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeTLSv12.setStatus('current')
sslCipherDHGenerates = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDHGenerates.setStatus('current')
sslCipherDHAgreements = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDHAgreements.setStatus('current')
sslCipherAESGCMEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESGCMEncrypts.setStatus('current')
sslCipherAESGCMDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESGCMDecrypts.setStatus('current')
sslCipherECDHGenerates = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherECDHGenerates.setStatus('current')
sslCipherECDHAgreements = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherECDHAgreements.setStatus('current')
sslCipherECDSASigns = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherECDSASigns.setStatus('current')
sslCipherECDSAVerifies = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherECDSAVerifies.setStatus('current')
sysCPUIdlePercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUIdlePercent.setStatus('current')
sysCPUBusyPercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUBusyPercent.setStatus('current')
sysCPUUserBusyPercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUUserBusyPercent.setStatus('current')
sysCPUSystemBusyPercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUSystemBusyPercent.setStatus('current')
sysFDsFree = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFDsFree.setStatus('current')
sysMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemTotal.setStatus('current')
sysMemFree = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemFree.setStatus('current')
sysMemInUse = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemInUse.setStatus('current')
sysMemBuffered = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemBuffered.setStatus('current')
sysMemSwapped = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemSwapped.setStatus('current')
sysMemSwapTotal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemSwapTotal.setStatus('current')
numIdleConnections = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numIdleConnections.setStatus('current')
dataEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEntries.setStatus('current')
dataMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataMemoryUsage.setStatus('current')
eventsSeen = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventsSeen.setStatus('current')
totalDNSResponses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDNSResponses.setStatus('current')
totalBadDNSPackets = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBadDNSPackets.setStatus('current')
totalBackendServerErrors = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBackendServerErrors.setStatus('current')
virtualserverNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverNumber.setStatus('current')
virtualserverTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2), )
if mibBuilder.loadTexts: virtualserverTable.setStatus('current')
virtualserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: virtualserverEntry.setStatus('current')
virtualserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverName.setStatus('current')
virtualserverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPort.setStatus('current')
virtualserverProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("http", 1), ("https", 2), ("ftp", 3), ("imaps", 4), ("imapv2", 5), ("imapv3", 6), ("imapv4", 7), ("pop3", 8), ("pop3s", 9), ("smtp", 10), ("ldap", 11), ("ldaps", 12), ("telnet", 13), ("sslforwarding", 14), ("udpstreaming", 15), ("udp", 16), ("dns", 17), ("genericserverfirst", 18), ("genericclientfirst", 19), ("dnstcp", 20), ("sipudp", 21), ("siptcp", 22), ("rtsp", 23), ("stream", 24), ("l4acceltcp", 25), ("l4acceludp", 26), ("l4accelgeneric", 27), ("l4accelstateless", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverProtocol.setStatus('current')
virtualserverDefaultTrafficPool = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDefaultTrafficPool.setStatus('current')
virtualserverBytesInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesInLo.setStatus('obsolete')
virtualserverBytesInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesInHi.setStatus('obsolete')
virtualserverBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesOutLo.setStatus('obsolete')
virtualserverBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesOutHi.setStatus('obsolete')
virtualserverCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverCurrentConn.setStatus('current')
virtualserverMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverMaxConn.setStatus('current')
virtualserverTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalConn.setStatus('obsolete')
virtualserverDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDiscard.setStatus('current')
virtualserverDirectReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDirectReplies.setStatus('current')
virtualserverConnectTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverConnectTimedOut.setStatus('current')
virtualserverDataTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDataTimedOut.setStatus('current')
virtualserverKeepaliveTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverKeepaliveTimedOut.setStatus('current')
virtualserverUdpTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverUdpTimedOut.setStatus('current')
virtualserverTotalDgram = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalDgram.setStatus('current')
virtualserverGzip = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzip.setStatus('current')
virtualserverGzipBytesSavedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzipBytesSavedLo.setStatus('obsolete')
virtualserverGzipBytesSavedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzipBytesSavedHi.setStatus('obsolete')
virtualserverHttpRewriteLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpRewriteLocation.setStatus('current')
virtualserverHttpRewriteCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpRewriteCookie.setStatus('current')
virtualserverHttpCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpCacheHits.setStatus('current')
virtualserverHttpCacheLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpCacheLookups.setStatus('current')
virtualserverHttpCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpCacheHitRate.setStatus('current')
virtualserverSIPTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverSIPTotalCalls.setStatus('current')
virtualserverSIPRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverSIPRejectedRequests.setStatus('current')
virtualserverConnectionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverConnectionErrors.setStatus('current')
virtualserverConnectionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverConnectionFailures.setStatus('current')
virtualserverBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesIn.setStatus('current')
virtualserverBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesOut.setStatus('current')
virtualserverGzipBytesSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzipBytesSaved.setStatus('current')
virtualserverCertStatusRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverCertStatusRequests.setStatus('current')
virtualserverCertStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverCertStatusResponses.setStatus('current')
virtualserverMaxDurationTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverMaxDurationTimedOut.setStatus('current')
virtualserverProcessingTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverProcessingTimedOut.setStatus('current')
virtualserverTotalRequestsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalRequestsLo.setStatus('obsolete')
virtualserverTotalRequestsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalRequestsHi.setStatus('obsolete')
virtualserverTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalRequests.setStatus('current')
virtualserverTotalHTTPRequestsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTPRequestsLo.setStatus('obsolete')
virtualserverTotalHTTPRequestsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTPRequestsHi.setStatus('obsolete')
virtualserverTotalHTTPRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTPRequests.setStatus('current')
virtualserverTotalHTTP1RequestsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP1RequestsLo.setStatus('obsolete')
virtualserverTotalHTTP1RequestsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP1RequestsHi.setStatus('obsolete')
virtualserverTotalHTTP1Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP1Requests.setStatus('current')
virtualserverTotalHTTP2RequestsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP2RequestsLo.setStatus('obsolete')
virtualserverTotalHTTP2RequestsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP2RequestsHi.setStatus('obsolete')
virtualserverTotalHTTP2Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP2Requests.setStatus('current')
virtualserverPktsInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsInLo.setStatus('obsolete')
virtualserverPktsInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsInHi.setStatus('obsolete')
virtualserverPktsOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsOutLo.setStatus('obsolete')
virtualserverPktsOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsOutHi.setStatus('obsolete')
virtualserverPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsIn.setStatus('current')
virtualserverPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsOut.setStatus('current')
virtualserverL4TCPConnectResets = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverL4TCPConnectResets.setStatus('current')
virtualserverL4UDPUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverL4UDPUnreachables.setStatus('current')
virtualserverBwLimitPktsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitPktsDrop.setStatus('current')
virtualserverBwLimitPktsDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitPktsDropLo.setStatus('obsolete')
virtualserverBwLimitPktsDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitPktsDropHi.setStatus('obsolete')
virtualserverBwLimitBytesDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitBytesDrop.setStatus('current')
virtualserverBwLimitBytesDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitBytesDropLo.setStatus('obsolete')
virtualserverBwLimitBytesDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitBytesDropHi.setStatus('obsolete')
poolNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolNumber.setStatus('current')
poolTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2), )
if mibBuilder.loadTexts: poolTable.setStatus('current')
poolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: poolEntry.setStatus('current')
poolName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolName.setStatus('current')
poolAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("roundrobin", 1), ("weightedRoundRobin", 2), ("perceptive", 3), ("leastConnections", 4), ("fastestResponseTime", 5), ("random", 6), ("weightedLeastConnections", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolAlgorithm.setStatus('current')
poolNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolNodes.setStatus('current')
poolDraining = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDraining.setStatus('current')
poolFailPool = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolFailPool.setStatus('current')
poolBytesInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesInLo.setStatus('obsolete')
poolBytesInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesInHi.setStatus('obsolete')
poolBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesOutLo.setStatus('obsolete')
poolBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesOutHi.setStatus('obsolete')
poolTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalConn.setStatus('current')
poolPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("rule", 3), ("transparent", 4), ("applicationCookie", 5), ("xZeusBackend", 6), ("ssl", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPersistence.setStatus('current')
poolSessionMigrated = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolSessionMigrated.setStatus('current')
poolDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDisabled.setStatus('current')
poolState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("disabled", 2), ("draining", 3), ("unused", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolState.setStatus('current')
poolConnsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolConnsQueued.setStatus('current')
poolQueueTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolQueueTimeouts.setStatus('current')
poolMinQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMinQueueTime.setStatus('current')
poolMaxQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMaxQueueTime.setStatus('current')
poolMeanQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMeanQueueTime.setStatus('current')
poolBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesIn.setStatus('current')
poolBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesOut.setStatus('current')
poolBwLimitPktsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitPktsDrop.setStatus('current')
poolBwLimitPktsDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitPktsDropLo.setStatus('obsolete')
poolBwLimitPktsDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitPktsDropHi.setStatus('obsolete')
poolBwLimitBytesDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitBytesDrop.setStatus('current')
poolBwLimitBytesDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitBytesDropLo.setStatus('obsolete')
poolBwLimitBytesDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitBytesDropHi.setStatus('obsolete')
nodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNumber.setStatus('obsolete')
nodeTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2), )
if mibBuilder.loadTexts: nodeTable.setStatus('obsolete')
nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "nodeIPAddress"), (0, "ZXTM-MIB-SMIv2", "nodePort"))
if mibBuilder.loadTexts: nodeEntry.setStatus('obsolete')
nodeIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIPAddress.setStatus('obsolete')
nodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePort.setStatus('obsolete')
nodeHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeHostName.setStatus('obsolete')
nodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeState.setStatus('obsolete')
nodeBytesToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesToNodeLo.setStatus('obsolete')
nodeBytesToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesToNodeHi.setStatus('obsolete')
nodeBytesFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesFromNodeLo.setStatus('obsolete')
nodeBytesFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesFromNodeHi.setStatus('obsolete')
nodeCurrentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCurrentRequests.setStatus('obsolete')
nodeTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeTotalConn.setStatus('obsolete')
nodePooledConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePooledConn.setStatus('obsolete')
nodeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFailures.setStatus('obsolete')
nodeNewConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNewConn.setStatus('obsolete')
nodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeErrors.setStatus('obsolete')
nodeResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeResponseMin.setStatus('obsolete')
nodeResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeResponseMax.setStatus('obsolete')
nodeResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeResponseMean.setStatus('obsolete')
nodeNumberInet46 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNumberInet46.setStatus('current')
nodeCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCurrentConn.setStatus('obsolete')
nodeInet46Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4), )
if mibBuilder.loadTexts: nodeInet46Table.setStatus('current')
nodeInet46Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "nodeInet46AddressType"), (0, "ZXTM-MIB-SMIv2", "nodeInet46Address"), (0, "ZXTM-MIB-SMIv2", "nodeInet46Port"))
if mibBuilder.loadTexts: nodeInet46Entry.setStatus('current')
nodeInet46AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46AddressType.setStatus('current')
nodeInet46Address = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Address.setStatus('current')
nodeInet46Port = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Port.setStatus('current')
nodeInet46HostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46HostName.setStatus('current')
nodeInet46State = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46State.setStatus('current')
nodeInet46BytesToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesToNodeLo.setStatus('obsolete')
nodeInet46BytesToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesToNodeHi.setStatus('obsolete')
nodeInet46BytesFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesFromNodeLo.setStatus('obsolete')
nodeInet46BytesFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesFromNodeHi.setStatus('obsolete')
nodeInet46CurrentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46CurrentRequests.setStatus('current')
nodeInet46TotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46TotalConn.setStatus('current')
nodeInet46PooledConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46PooledConn.setStatus('current')
nodeInet46Failures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Failures.setStatus('current')
nodeInet46NewConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46NewConn.setStatus('current')
nodeInet46Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Errors.setStatus('current')
nodeInet46ResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46ResponseMin.setStatus('current')
nodeInet46ResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46ResponseMax.setStatus('current')
nodeInet46ResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46ResponseMean.setStatus('current')
nodeInet46IdleConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46IdleConns.setStatus('current')
nodeInet46CurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46CurrentConn.setStatus('current')
nodeInet46BytesToNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesToNode.setStatus('current')
nodeInet46BytesFromNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesFromNode.setStatus('current')
perPoolNodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNumber.setStatus('current')
perPoolNodeTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6), )
if mibBuilder.loadTexts: perPoolNodeTable.setStatus('current')
perPoolNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "perPoolNodePoolName"), (0, "ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), (0, "ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), (0, "ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: perPoolNodeEntry.setStatus('current')
perPoolNodePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePoolName.setStatus('current')
perPoolNodeNodeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodeAddressType.setStatus('current')
perPoolNodeNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodeAddress.setStatus('current')
perPoolNodeNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodePort.setStatus('current')
perPoolNodeNodeHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodeHostName.setStatus('current')
perPoolNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2), ("unknown", 3), ("draining", 4), ("drainingtodelete", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeState.setStatus('current')
perPoolNodeBytesToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesToNodeLo.setStatus('obsolete')
perPoolNodeBytesToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesToNodeHi.setStatus('obsolete')
perPoolNodeBytesFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesFromNodeLo.setStatus('obsolete')
perPoolNodeBytesFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesFromNodeHi.setStatus('obsolete')
perPoolNodeCurrentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeCurrentRequests.setStatus('current')
perPoolNodeTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeTotalConn.setStatus('current')
perPoolNodePooledConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePooledConn.setStatus('current')
perPoolNodeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeFailures.setStatus('current')
perPoolNodeNewConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNewConn.setStatus('current')
perPoolNodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeErrors.setStatus('current')
perPoolNodeResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeResponseMin.setStatus('current')
perPoolNodeResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeResponseMax.setStatus('current')
perPoolNodeResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeResponseMean.setStatus('current')
perPoolNodeIdleConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeIdleConns.setStatus('current')
perPoolNodeCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeCurrentConn.setStatus('current')
perPoolNodePktsToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsToNodeLo.setStatus('obsolete')
perPoolNodePktsToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsToNodeHi.setStatus('obsolete')
perPoolNodePktsFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsFromNodeLo.setStatus('obsolete')
perPoolNodePktsFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsFromNodeHi.setStatus('obsolete')
perPoolNodeL4StatelessBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeL4StatelessBuckets.setStatus('current')
perPoolNodeBytesToNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesToNode.setStatus('current')
perPoolNodeBytesFromNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesFromNode.setStatus('current')
perPoolNodePktsToNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsToNode.setStatus('current')
perPoolNodePktsFromNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsFromNode.setStatus('current')
trafficIPNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumber.setStatus('obsolete')
trafficIPNumberRaised = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumberRaised.setStatus('obsolete')
trafficIPTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3), )
if mibBuilder.loadTexts: trafficIPTable.setStatus('obsolete')
trafficIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "trafficIPAddress"))
if mibBuilder.loadTexts: trafficIPEntry.setStatus('obsolete')
trafficIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPAddress.setStatus('obsolete')
trafficIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raised", 1), ("lowered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPState.setStatus('obsolete')
trafficIPTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPTime.setStatus('obsolete')
trafficIPGatewayPingRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPGatewayPingRequests.setStatus('current')
trafficIPGatewayPingResponses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPGatewayPingResponses.setStatus('current')
trafficIPNodePingRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNodePingRequests.setStatus('current')
trafficIPNodePingResponses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNodePingResponses.setStatus('current')
trafficIPPingResponseErrors = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPPingResponseErrors.setStatus('current')
trafficIPARPMessage = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPARPMessage.setStatus('current')
trafficIPNumberInet46 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumberInet46.setStatus('current')
trafficIPNumberRaisedInet46 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumberRaisedInet46.setStatus('current')
trafficIPInet46Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12), )
if mibBuilder.loadTexts: trafficIPInet46Table.setStatus('current')
trafficIPInet46Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), (0, "ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: trafficIPInet46Entry.setStatus('current')
trafficIPInet46AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46AddressType.setStatus('current')
trafficIPInet46Address = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46Address.setStatus('current')
trafficIPInet46State = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raised", 1), ("lowered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46State.setStatus('current')
trafficIPInet46Time = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46Time.setStatus('current')
serviceProtNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtNumber.setStatus('current')
serviceProtTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2), )
if mibBuilder.loadTexts: serviceProtTable.setStatus('current')
serviceProtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "serviceProtName"))
if mibBuilder.loadTexts: serviceProtEntry.setStatus('current')
serviceProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtName.setStatus('current')
serviceProtTotalRefusal = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtTotalRefusal.setStatus('current')
serviceProtLastRefusalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtLastRefusalTime.setStatus('current')
serviceProtRefusalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalIP.setStatus('current')
serviceProtRefusalConc1IP = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalConc1IP.setStatus('current')
serviceProtRefusalConc10IP = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalConc10IP.setStatus('current')
serviceProtRefusalConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalConnRate.setStatus('current')
serviceProtRefusalRFC2396 = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalRFC2396.setStatus('current')
serviceProtRefusalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalSize.setStatus('current')
serviceProtRefusalBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalBinary.setStatus('current')
serviceLevelNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelNumber.setStatus('current')
serviceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2), )
if mibBuilder.loadTexts: serviceLevelTable.setStatus('current')
serviceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: serviceLevelEntry.setStatus('current')
serviceLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelName.setStatus('current')
serviceLevelTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelTotalConn.setStatus('current')
serviceLevelTotalNonConf = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelTotalNonConf.setStatus('current')
serviceLevelResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelResponseMin.setStatus('current')
serviceLevelResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelResponseMax.setStatus('current')
serviceLevelResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelResponseMean.setStatus('current')
serviceLevelIsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notok", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelIsOK.setStatus('current')
serviceLevelConforming = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelConforming.setStatus('current')
serviceLevelCurrentConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelCurrentConns.setStatus('current')
perNodeServiceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1), )
if mibBuilder.loadTexts: perNodeServiceLevelTable.setStatus('obsolete')
perNodeServiceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelSLMName"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelNodeIPAddr"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelNodePort"))
if mibBuilder.loadTexts: perNodeServiceLevelEntry.setStatus('obsolete')
perNodeServiceLevelSLMName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelSLMName.setStatus('obsolete')
perNodeServiceLevelNodeIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelNodeIPAddr.setStatus('obsolete')
perNodeServiceLevelNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelNodePort.setStatus('obsolete')
perNodeServiceLevelTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelTotalConn.setStatus('obsolete')
perNodeServiceLevelTotalNonConf = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelTotalNonConf.setStatus('obsolete')
perNodeServiceLevelResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelResponseMin.setStatus('obsolete')
perNodeServiceLevelResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelResponseMax.setStatus('obsolete')
perNodeServiceLevelResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelResponseMean.setStatus('obsolete')
perNodeServiceLevelInet46Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2), )
if mibBuilder.loadTexts: perNodeServiceLevelInet46Table.setStatus('current')
perNodeServiceLevelInet46Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46SLMName"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddressType"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddress"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodePort"))
if mibBuilder.loadTexts: perNodeServiceLevelInet46Entry.setStatus('current')
perNodeServiceLevelInet46SLMName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46SLMName.setStatus('current')
perNodeServiceLevelInet46NodeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodeAddressType.setStatus('current')
perNodeServiceLevelInet46NodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodeAddress.setStatus('current')
perNodeServiceLevelInet46NodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodePort.setStatus('current')
perNodeServiceLevelInet46TotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46TotalConn.setStatus('current')
perNodeServiceLevelInet46TotalNonConf = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46TotalNonConf.setStatus('current')
perNodeServiceLevelInet46ResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMin.setStatus('current')
perNodeServiceLevelInet46ResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMax.setStatus('current')
perNodeServiceLevelInet46ResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMean.setStatus('current')
bandwidthClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassNumber.setStatus('current')
bandwidthClassTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2), )
if mibBuilder.loadTexts: bandwidthClassTable.setStatus('current')
bandwidthClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "bandwidthClassName"))
if mibBuilder.loadTexts: bandwidthClassEntry.setStatus('current')
bandwidthClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassName.setStatus('current')
bandwidthClassMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassMaximum.setStatus('current')
bandwidthClassGuarantee = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassGuarantee.setStatus('current')
bandwidthClassBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesOutLo.setStatus('obsolete')
bandwidthClassBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesOutHi.setStatus('obsolete')
bandwidthClassBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesOut.setStatus('current')
bandwidthClassPktsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassPktsDrop.setStatus('current')
bandwidthClassPktsDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassPktsDropLo.setStatus('obsolete')
bandwidthClassPktsDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassPktsDropHi.setStatus('obsolete')
bandwidthClassBytesDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesDrop.setStatus('current')
bandwidthClassBytesDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesDropLo.setStatus('obsolete')
bandwidthClassBytesDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesDropHi.setStatus('obsolete')
rateClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassNumber.setStatus('current')
rateClassTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2), )
if mibBuilder.loadTexts: rateClassTable.setStatus('current')
rateClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "rateClassName"))
if mibBuilder.loadTexts: rateClassEntry.setStatus('current')
rateClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassName.setStatus('current')
rateClassMaxRatePerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassMaxRatePerMin.setStatus('current')
rateClassMaxRatePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassMaxRatePerSec.setStatus('current')
rateClassQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassQueueLength.setStatus('current')
rateClassCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassCurrentRate.setStatus('current')
rateClassDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassDropped.setStatus('current')
rateClassConnsEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassConnsEntered.setStatus('current')
rateClassConnsLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassConnsLeft.setStatus('current')
userCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounterNumber.setStatus('current')
userCounterTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2), )
if mibBuilder.loadTexts: userCounterTable.setStatus('current')
userCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "userCounterName"))
if mibBuilder.loadTexts: userCounterEntry.setStatus('current')
userCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounterName.setStatus('current')
userCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounterValue.setStatus('current')
userCounter64Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3), )
if mibBuilder.loadTexts: userCounter64Table.setStatus('current')
userCounter64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "userCounter64Name"))
if mibBuilder.loadTexts: userCounter64Entry.setStatus('current')
userCounter64Name = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounter64Name.setStatus('current')
userCounter64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounter64Value.setStatus('current')
interfaceNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceNumber.setStatus('current')
interfaceTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2), )
if mibBuilder.loadTexts: interfaceTable.setStatus('current')
interfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "interfaceName"))
if mibBuilder.loadTexts: interfaceEntry.setStatus('current')
interfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceName.setStatus('current')
interfaceRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxPackets.setStatus('current')
interfaceTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxPackets.setStatus('current')
interfaceRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxErrors.setStatus('current')
interfaceTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxErrors.setStatus('current')
interfaceCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceCollisions.setStatus('current')
interfaceRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytesLo.setStatus('obsolete')
interfaceRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytesHi.setStatus('obsolete')
interfaceTxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytesLo.setStatus('obsolete')
interfaceTxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytesHi.setStatus('obsolete')
interfaceRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytes.setStatus('current')
interfaceTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytes.setStatus('current')
webCacheHitsLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHitsLo.setStatus('obsolete')
webCacheHitsHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHitsHi.setStatus('obsolete')
webCacheMissesLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMissesLo.setStatus('obsolete')
webCacheMissesHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMissesHi.setStatus('obsolete')
webCacheLookupsLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLookupsLo.setStatus('obsolete')
webCacheLookupsHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLookupsHi.setStatus('obsolete')
webCacheMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMemUsed.setStatus('current')
webCacheMemMaximum = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMemMaximum.setStatus('current')
webCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHitRate.setStatus('current')
webCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheEntries.setStatus('current')
webCacheMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMaxEntries.setStatus('current')
webCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheOldest.setStatus('current')
webCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHits.setStatus('current')
webCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMisses.setStatus('current')
webCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLookups.setStatus('current')
webCacheURLStoreAllocated = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreAllocated.setStatus('current')
webCacheURLStoreFree = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreFree.setStatus('current')
webCacheURLStoreSize = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreSize.setStatus('current')
webCacheURLStoreTotalAllocations = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreTotalAllocations.setStatus('current')
webCacheURLStoreTotalFailures = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreTotalFailures.setStatus('current')
webCacheURLStoreTotalFrees = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreTotalFrees.setStatus('current')
sslCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheHits.setStatus('current')
sslCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheMisses.setStatus('current')
sslCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheLookups.setStatus('current')
sslCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheHitRate.setStatus('current')
sslCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheEntries.setStatus('current')
sslCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheEntriesMax.setStatus('current')
sslCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheOldest.setStatus('current')
aspSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheHits.setStatus('current')
aspSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheMisses.setStatus('current')
aspSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheLookups.setStatus('current')
aspSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheHitRate.setStatus('current')
aspSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheEntries.setStatus('current')
aspSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheEntriesMax.setStatus('current')
aspSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheOldest.setStatus('current')
ipSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheHits.setStatus('current')
ipSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheMisses.setStatus('current')
ipSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheLookups.setStatus('current')
ipSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheHitRate.setStatus('current')
ipSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheEntries.setStatus('current')
ipSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheEntriesMax.setStatus('current')
ipSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheOldest.setStatus('current')
j2eeSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheHits.setStatus('current')
j2eeSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheMisses.setStatus('current')
j2eeSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheLookups.setStatus('current')
j2eeSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheHitRate.setStatus('current')
j2eeSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheEntries.setStatus('current')
j2eeSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheEntriesMax.setStatus('current')
j2eeSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheOldest.setStatus('current')
uniSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheHits.setStatus('current')
uniSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheMisses.setStatus('current')
uniSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheLookups.setStatus('current')
uniSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheHitRate.setStatus('current')
uniSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheEntries.setStatus('current')
uniSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheEntriesMax.setStatus('current')
uniSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheOldest.setStatus('current')
sslSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheHits.setStatus('current')
sslSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheMisses.setStatus('current')
sslSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheLookups.setStatus('current')
sslSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheHitRate.setStatus('current')
sslSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheEntries.setStatus('current')
sslSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheEntriesMax.setStatus('current')
sslSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheOldest.setStatus('current')
sslOcspStaplingCacheCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingCacheCount.setStatus('current')
sslOcspStaplingCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingCount.setStatus('current')
sslOcspStaplingSuccessCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingSuccessCount.setStatus('current')
sslOcspStaplingFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingFailureCount.setStatus('current')
sslOcspStaplingGoodCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingGoodCount.setStatus('current')
sslOcspStaplingRevokedCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingRevokedCount.setStatus('current')
sslOcspStaplingUnknownCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingUnknownCount.setStatus('current')
ruleNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleNumber.setStatus('current')
ruleTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2), )
if mibBuilder.loadTexts: ruleTable.setStatus('current')
ruleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: ruleEntry.setStatus('current')
ruleName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleName.setStatus('current')
ruleExecutions = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleExecutions.setStatus('current')
ruleAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleAborts.setStatus('current')
ruleResponds = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleResponds.setStatus('current')
rulePoolSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rulePoolSelect.setStatus('current')
ruleRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleRetries.setStatus('current')
ruleDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleDiscards.setStatus('current')
ruleExecutionTimeWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleExecutionTimeWarnings.setStatus('current')
monitorNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorNumber.setStatus('current')
monitorTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 2), )
if mibBuilder.loadTexts: monitorTable.setStatus('current')
monitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "monitorName"))
if mibBuilder.loadTexts: monitorEntry.setStatus('current')
monitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorName.setStatus('current')
licensekeyNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensekeyNumber.setStatus('current')
licensekeyTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 2), )
if mibBuilder.loadTexts: licensekeyTable.setStatus('current')
licensekeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: licensekeyEntry.setStatus('current')
licensekeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensekeyName.setStatus('current')
zxtmNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxtmNumber.setStatus('current')
zxtmTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 2), )
if mibBuilder.loadTexts: zxtmTable.setStatus('current')
zxtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: zxtmEntry.setStatus('current')
zxtmName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxtmName.setStatus('current')
glbServiceNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceNumber.setStatus('current')
glbServiceTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2), )
if mibBuilder.loadTexts: glbServiceTable.setStatus('current')
glbServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbServiceEntry.setStatus('current')
glbServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceName.setStatus('current')
glbServiceResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceResponses.setStatus('current')
glbServiceUnmodified = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceUnmodified.setStatus('current')
glbServiceDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceDiscarded.setStatus('current')
perLocationServiceTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1), )
if mibBuilder.loadTexts: perLocationServiceTable.setStatus('current')
perLocationServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "perLocationServiceLocationName"), (0, "ZXTM-MIB-SMIv2", "perLocationServiceName"))
if mibBuilder.loadTexts: perLocationServiceEntry.setStatus('current')
perLocationServiceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceLocationName.setStatus('current')
perLocationServiceLocationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceLocationCode.setStatus('current')
perLocationServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceName.setStatus('current')
perLocationServiceDraining = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("draining", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceDraining.setStatus('current')
perLocationServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceState.setStatus('current')
perLocationServiceFrontendState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceFrontendState.setStatus('current')
perLocationServiceMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceMonitorState.setStatus('current')
perLocationServiceLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceLoad.setStatus('current')
perLocationServiceResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceResponses.setStatus('current')
locationTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1), )
if mibBuilder.loadTexts: locationTable.setStatus('current')
locationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "locationName"))
if mibBuilder.loadTexts: locationEntry.setStatus('current')
locationName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationName.setStatus('current')
locationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationCode.setStatus('current')
locationLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationLoad.setStatus('current')
locationResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationResponses.setStatus('current')
eventNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventNumber.setStatus('current')
eventTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2), )
if mibBuilder.loadTexts: eventTable.setStatus('current')
eventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "eventName"))
if mibBuilder.loadTexts: eventEntry.setStatus('current')
eventName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventName.setStatus('current')
eventsMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventsMatched.setStatus('current')
actionNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionNumber.setStatus('current')
actionTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2), )
if mibBuilder.loadTexts: actionTable.setStatus('current')
actionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "actionName"))
if mibBuilder.loadTexts: actionEntry.setStatus('current')
actionName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionName.setStatus('current')
actionsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionsProcessed.setStatus('current')
fullLogLine = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fullLogLine.setStatus('current')
confName = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confName.setStatus('current')
customEventName = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: customEventName.setStatus('current')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setStatus('current')
testaction = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 1)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "actionName"))
if mibBuilder.loadTexts: testaction.setStatus('current')
running = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 2)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: running.setStatus('current')
fewfreefds = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 3)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: fewfreefds.setStatus('current')
restartrequired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 4)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: restartrequired.setStatus('current')
upgradereboot = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 288)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: upgradereboot.setStatus('current')
sysctlreboot = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 289)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sysctlreboot.setStatus('current')
upgraderestart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 290)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: upgraderestart.setStatus('current')
unspecifiedreboot = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 291)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: unspecifiedreboot.setStatus('current')
timemovedback = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 5)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: timemovedback.setStatus('current')
sslfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 6)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sslfail.setStatus('current')
hardware = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 7)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: hardware.setStatus('deprecated')
zxtmswerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 8)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: zxtmswerror.setStatus('current')
customevent = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 9)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "customEventName"))
if mibBuilder.loadTexts: customevent.setStatus('current')
versionmismatch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 10)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: versionmismatch.setStatus('current')
autherror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 114)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autherror.setStatus('current')
rebootrequired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 233)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: rebootrequired.setStatus('obsolete')
appliance = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 236)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appliance.setStatus('current')
machineok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 11)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: machineok.setStatus('current')
machinetimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 12)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: machinetimeout.setStatus('current')
machinefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 13)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: machinefail.setStatus('current')
allmachinesok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 14)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: allmachinesok.setStatus('current')
flipperbackendsworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 15)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: flipperbackendsworking.setStatus('current')
flipperfrontendsworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 16)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: flipperfrontendsworking.setStatus('current')
pingbackendfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 17)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: pingbackendfail.setStatus('current')
pingfrontendfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 18)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: pingfrontendfail.setStatus('current')
pinggwfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 19)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: pinggwfail.setStatus('current')
pingsendfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 237)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: pingsendfail.setStatus('current')
statebaddata = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 20)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: statebaddata.setStatus('current')
stateconnfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 21)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: stateconnfail.setStatus('current')
stateok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 22)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: stateok.setStatus('current')
statereadfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 23)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: statereadfail.setStatus('current')
statetimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 24)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: statetimeout.setStatus('current')
stateunexpected = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 25)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: stateunexpected.setStatus('current')
statewritefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 26)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: statewritefail.setStatus('current')
activatealldead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 107)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: activatealldead.setStatus('current')
machinerecovered = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 108)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: machinerecovered.setStatus('current')
flipperrecovered = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 109)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: flipperrecovered.setStatus('current')
activatedautomatically = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 110)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: activatedautomatically.setStatus('current')
zclustermoderr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 111)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: zclustermoderr.setStatus('current')
ec2flipperraiselocalworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 112)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2flipperraiselocalworking.setStatus('current')
ec2flipperraiseothersdead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 113)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2flipperraiseothersdead.setStatus('current')
ec2iperr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 130)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2iperr.setStatus('current')
ec2vpceipassocerr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 207)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2vpceipassocerr.setStatus('obsolete')
ec2vpciderr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 208)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2vpciderr.setStatus('obsolete')
dropec2ipwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 131)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: dropec2ipwarn.setStatus('current')
ec2nopublicip = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 132)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2nopublicip.setStatus('current')
ec2nosecondaryprivateip = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 206)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2nosecondaryprivateip.setStatus('current')
ec2dataretrievalfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 266)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2dataretrievalfailed.setStatus('current')
ec2dataretrievalsuccessful = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 267)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2dataretrievalsuccessful.setStatus('current')
ec2initialized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 287)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2initialized.setStatus('current')
gcedataretrievalfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 292)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: gcedataretrievalfailed.setStatus('current')
gcedataretrievalsuccessful = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 293)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: gcedataretrievalsuccessful.setStatus('current')
multihostload = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 133)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: multihostload.setStatus('current')
flipperraiseremotedropped = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 198)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: flipperraiseremotedropped.setStatus('current')
autofailbacktimerstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 294)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autofailbacktimerstarted.setStatus('current')
autofailbacktimerstopped = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 295)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autofailbacktimerstopped.setStatus('current')
autofailbackafterdelay = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 296)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autofailbackafterdelay.setStatus('current')
autofailbacktimercancelled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 297)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autofailbacktimercancelled.setStatus('current')
sslhwfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 27)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sslhwfail.setStatus('current')
sslhwrestart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 28)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sslhwrestart.setStatus('current')
sslhwstart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 29)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sslhwstart.setStatus('current')
confdel = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 30)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"))
if mibBuilder.loadTexts: confdel.setStatus('current')
confmod = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 31)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"))
if mibBuilder.loadTexts: confmod.setStatus('current')
confadd = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 32)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"))
if mibBuilder.loadTexts: confadd.setStatus('current')
confok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 33)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"))
if mibBuilder.loadTexts: confok.setStatus('current')
confreptimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 178)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: confreptimeout.setStatus('current')
confrepfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 179)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: confrepfailed.setStatus('current')
javadied = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 34)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javadied.setStatus('current')
javastop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 35)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javastop.setStatus('current')
javastartfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 36)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javastartfail.setStatus('current')
javaterminatefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 37)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javaterminatefail.setStatus('current')
javanotfound = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 38)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javanotfound.setStatus('current')
javastarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 39)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javastarted.setStatus('current')
servleterror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 40)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: servleterror.setStatus('current')
monitorfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 41)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "monitorName"))
if mibBuilder.loadTexts: monitorfail.setStatus('current')
monitorok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 42)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "monitorName"))
if mibBuilder.loadTexts: monitorok.setStatus('current')
rulexmlerr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 43)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulexmlerr.setStatus('current')
pooluseunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 44)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: pooluseunknown.setStatus('current')
ruleabort = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 45)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: ruleabort.setStatus('current')
rulebufferlarge = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 46)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulebufferlarge.setStatus('current')
rulebodycomperror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 47)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulebodycomperror.setStatus('current')
forwardproxybadhost = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 48)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: forwardproxybadhost.setStatus('current')
invalidemit = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 49)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: invalidemit.setStatus('current')
rulenopersistence = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 50)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulenopersistence.setStatus('current')
rulelogmsginfo = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 51)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulelogmsginfo.setStatus('current')
rulelogmsgwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 52)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulelogmsgwarn.setStatus('current')
rulelogmsgserious = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 53)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulelogmsgserious.setStatus('current')
norate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 54)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: norate.setStatus('current')
poolactivenodesunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 55)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: poolactivenodesunknown.setStatus('current')
datastorefull = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 56)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: datastorefull.setStatus('current')
ruleoverrun = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 242)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: ruleoverrun.setStatus('current')
rulestreamerrortoomuch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 210)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrortoomuch.setStatus('current')
rulestreamerrornotenough = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 211)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrornotenough.setStatus('current')
rulestreamerrorprocessfailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 212)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrorprocessfailure.setStatus('current')
rulestreamerrornotstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 213)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrornotstarted.setStatus('current')
rulestreamerrornotfinished = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 214)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrornotfinished.setStatus('current')
rulestreamerrorinternal = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 215)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrorinternal.setStatus('current')
rulestreamerrorgetresponse = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 216)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrorgetresponse.setStatus('current')
rulesinvalidrequestbody = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 217)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: rulesinvalidrequestbody.setStatus('current')
aptimizeuseunknownprofile = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 222)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: aptimizeuseunknownprofile.setStatus('current')
aptimizedisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 223)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: aptimizedisabled.setStatus('current')
aptimizeuseunknownscope = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 224)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: aptimizeuseunknownscope.setStatus('current')
datalocalstorefull = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 228)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: datalocalstorefull.setStatus('current')
serviceruleabort = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 218)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: serviceruleabort.setStatus('current')
servicerulelocunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 219)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: servicerulelocunknown.setStatus('current')
servicerulelocnotconfigured = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 220)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: servicerulelocnotconfigured.setStatus('current')
servicerulelocdead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 221)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: servicerulelocdead.setStatus('current')
expired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 57)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: expired.setStatus('current')
licensecorrupt = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 58)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: licensecorrupt.setStatus('current')
expiresoon = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 59)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: expiresoon.setStatus('current')
usinglicense = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 60)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: usinglicense.setStatus('current')
licenseclustertoobig = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 61)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: licenseclustertoobig.setStatus('current')
unlicensed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 62)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: unlicensed.setStatus('current')
usingdevlicense = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 63)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: usingdevlicense.setStatus('current')
morememallowed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 124)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: morememallowed.setStatus('current')
lessmemallowed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 125)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: lessmemallowed.setStatus('current')
cachesizereduced = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 123)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: cachesizereduced.setStatus('current')
tpslimited = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 134)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: tpslimited.setStatus('current')
ssltpslimited = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 135)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ssltpslimited.setStatus('current')
bwlimited = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 136)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: bwlimited.setStatus('current')
licensetoomanylocations = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 137)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: licensetoomanylocations.setStatus('current')
autoscalinglicenseerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 175)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autoscalinglicenseerror.setStatus('current')
autoscalinglicenseenabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 176)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autoscalinglicenseenabled.setStatus('current')
autoscalinglicensedisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 177)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autoscalinglicensedisabled.setStatus('current')
analyticslicenseenabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 180)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: analyticslicenseenabled.setStatus('current')
analyticslicensedisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 181)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: analyticslicensedisabled.setStatus('current')
poolnonodes = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 64)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: poolnonodes.setStatus('current')
poolok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 65)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: poolok.setStatus('current')
pooldied = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 66)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: pooldied.setStatus('current')
noderesolvefailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 67)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: noderesolvefailure.setStatus('current')
noderesolvemultiple = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 68)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: noderesolvemultiple.setStatus('current')
nodeworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 69)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: nodeworking.setStatus('current')
nostarttls = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 70)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: nostarttls.setStatus('current')
nodefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 71)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: nodefail.setStatus('current')
nodedrainingtodelete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 280)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: nodedrainingtodelete.setStatus('current')
nodedrainingtodeletetimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 281)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: nodedrainingtodeletetimeout.setStatus('current')
starttlsinvalid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 72)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: starttlsinvalid.setStatus('current')
ehloinvalid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 73)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: ehloinvalid.setStatus('current')
usedcredsdeleted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 126)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: usedcredsdeleted.setStatus('current')
autoscalestatusupdateerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 129)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: autoscalestatusupdateerror.setStatus('current')
autoscaleresponseparseerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 159)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: autoscaleresponseparseerror.setStatus('current')
autoscalingchangeprocessfailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 182)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalingchangeprocessfailure.setStatus('current')
autoscalewrongimageid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 183)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalewrongimageid.setStatus('current')
autoscalewrongname = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 184)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalewrongname.setStatus('current')
autoscalewrongsizeid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 185)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalewrongsizeid.setStatus('current')
apistatusprocesshanging = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 127)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: apistatusprocesshanging.setStatus('current')
autonodedestructioncomplete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 138)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodedestructioncomplete.setStatus('current')
autonodeexisted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 139)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodeexisted.setStatus('current')
autoscaledpooltoosmall = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 140)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaledpooltoosmall.setStatus('current')
autoscaleinvalidargforcreatenode = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 141)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaleinvalidargforcreatenode.setStatus('current')
autonodedisappeared = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 142)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodedisappeared.setStatus('current')
autonoderemoved = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 244)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonoderemoved.setStatus('current')
nameserverunavailable = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 256)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: nameserverunavailable.setStatus('current')
nameserveravailable = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 257)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: nameserveravailable.setStatus('current')
autoscaleresolvefailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 258)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaleresolvefailure.setStatus('current')
autoscaledpoolrefractory = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 143)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaledpoolrefractory.setStatus('current')
cannotshrinkemptypool = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 144)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: cannotshrinkemptypool.setStatus('current')
autoscalinghysteresiscantgrow = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 145)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalinghysteresiscantgrow.setStatus('current')
autonodecreationcomplete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 146)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodecreationcomplete.setStatus('current')
autonodestatuschange = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 147)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodestatuschange.setStatus('current')
autoscalinghysteresiscantshrink = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 148)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalinghysteresiscantshrink.setStatus('current')
autoscalingpoolstatechange = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 149)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalingpoolstatechange.setStatus('current')
autonodedestroyed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 128)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodedestroyed.setStatus('current')
autonodecreationstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 165)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodecreationstarted.setStatus('current')
autoscaleinvalidargfordeletenode = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 166)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaleinvalidargfordeletenode.setStatus('current')
autoscalinghitroof = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 167)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalinghitroof.setStatus('current')
autoscalinghitfloor = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 168)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalinghitfloor.setStatus('current')
apichangeprocesshanging = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 169)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: apichangeprocesshanging.setStatus('current')
autoscaledpooltoobig = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 170)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaledpooltoobig.setStatus('current')
autoscalingprocesstimedout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 171)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: autoscalingprocesstimedout.setStatus('current')
autoscalingdisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 172)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalingdisabled.setStatus('current')
autoscalednodecontested = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 163)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalednodecontested.setStatus('current')
autoscalepoolconfupdate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 164)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalepoolconfupdate.setStatus('current')
autoscalingresuscitatepool = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 188)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalingresuscitatepool.setStatus('current')
autonodenopublicip = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 238)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodenopublicip.setStatus('current')
flipperraiselocalworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 74)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: flipperraiselocalworking.setStatus('current')
flipperraiseothersdead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 75)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: flipperraiseothersdead.setStatus('current')
flipperraiseosdrop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 76)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: flipperraiseosdrop.setStatus('current')
dropipinfo = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 77)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: dropipinfo.setStatus('current')
dropipwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 78)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: dropipwarn.setStatus('current')
flipperdadreraise = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 79)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: flipperdadreraise.setStatus('current')
flipperipexists = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 80)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: flipperipexists.setStatus('current')
triggersummary = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 81)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceProtName"))
if mibBuilder.loadTexts: triggersummary.setStatus('current')
slmclasslimitexceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 82)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: slmclasslimitexceeded.setStatus('current')
slmrecoveredwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 83)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: slmrecoveredwarn.setStatus('current')
slmrecoveredserious = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 84)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: slmrecoveredserious.setStatus('current')
slmfallenbelowwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 85)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: slmfallenbelowwarn.setStatus('current')
slmfallenbelowserious = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 86)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: slmfallenbelowserious.setStatus('current')
vscrloutofdate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 87)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: vscrloutofdate.setStatus('current')
vsstart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 88)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vsstart.setStatus('current')
vsstop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 89)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vsstop.setStatus('current')
privkeyok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 90)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: privkeyok.setStatus('current')
ssldrop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 91)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: ssldrop.setStatus('current')
vslogwritefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 92)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vslogwritefail.setStatus('current')
vssslcertexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 93)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vssslcertexpired.setStatus('current')
vssslcerttoexpire = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 94)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vssslcerttoexpire.setStatus('current')
vscacertexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 95)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vscacertexpired.setStatus('current')
vscacerttoexpire = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 96)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vscacerttoexpire.setStatus('current')
sslhandshakemsgsizelimit = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 200)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: sslhandshakemsgsizelimit.setStatus('current')
sslrehandshakemininterval = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 199)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: sslrehandshakemininterval.setStatus('current')
glbmissingips = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 150)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: glbmissingips.setStatus('current')
glbdeadlocmissingips = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 158)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: glbdeadlocmissingips.setStatus('current')
glbnolocations = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 151)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: glbnolocations.setStatus('current')
glbactivedcmismatch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 272)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: glbactivedcmismatch.setStatus('current')
locationmonitorok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 152)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationmonitorok.setStatus('current')
locationmonitorfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 153)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationmonitorfail.setStatus('current')
locationok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 154)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationok.setStatus('current')
locationfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 155)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationfail.setStatus('current')
locationsoapok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 156)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationsoapok.setStatus('current')
locationsoapfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 157)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationsoapfail.setStatus('current')
locationdraining = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 273)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationdraining.setStatus('current')
locationnotdraining = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 274)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationnotdraining.setStatus('current')
locationdisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 275)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationdisabled.setStatus('current')
locationenabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 276)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationenabled.setStatus('current')
locationunavailable = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 277)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationunavailable.setStatus('current')
locationavailable = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 278)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationavailable.setStatus('current')
glbmanualfailback = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 279)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbmanualfailback.setStatus('current')
glbnewmaster = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 160)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbnewmaster.setStatus('current')
glblogwritefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 161)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glblogwritefail.setStatus('current')
glbfailalter = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 162)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbfailalter.setStatus('current')
glbservicedied = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 190)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbservicedied.setStatus('current')
glbserviceok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 191)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbserviceok.setStatus('current')
locmovemachine = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 173)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: locmovemachine.setStatus('current')
locempty = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 174)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"))
if mibBuilder.loadTexts: locempty.setStatus('current')
glbtoomanylocations = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 259)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbtoomanylocations.setStatus('current')
dnszonevalidate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 260)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: dnszonevalidate.setStatus('current')
dnszonecreaterecord = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 261)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: dnszonecreaterecord.setStatus('current')
dnszoneparsechild = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 262)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: dnszoneparsechild.setStatus('obsolete')
dnserroraddzone = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 263)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnserroraddzone.setStatus('current')
dnsaddzone = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 264)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnsaddzone.setStatus('current')
dnszoneparse = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 265)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: dnszoneparse.setStatus('current')
dnszonedelete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 268)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnszonedelete.setStatus('current')
dnserrordeletezone = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 269)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnserrordeletezone.setStatus('current')
dnssecexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 270)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnssecexpired.setStatus('current')
dnssecexpires = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 271)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnssecexpires.setStatus('current')
fipsfailinit = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 229)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: fipsfailinit.setStatus('current')
fipsfailops = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 230)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: fipsfailops.setStatus('current')
ocspstaplingfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 234)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ocspstaplingfail.setStatus('current')
ocspstaplingnomem = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 235)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ocspstaplingnomem.setStatus('current')
ocspstaplingrevoked = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 239)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ocspstaplingrevoked.setStatus('current')
ocspstaplingunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 240)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ocspstaplingunknown.setStatus('current')
ocspstaplingunrevoked = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 241)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ocspstaplingunrevoked.setStatus('current')
routingswoperational = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 245)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: routingswoperational.setStatus('current')
routingswfailurelimitreached = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 246)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: routingswfailurelimitreached.setStatus('current')
routingswfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 247)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: routingswfailed.setStatus('current')
routingswstartfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 248)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: routingswstartfailed.setStatus('current')
ospfneighborsok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 253)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ospfneighborsok.setStatus('current')
ospfneighborsdegraded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 254)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ospfneighborsdegraded.setStatus('current')
ospfneighborsfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 255)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ospfneighborsfailed.setStatus('current')
bgpneighborsok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 282)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: bgpneighborsok.setStatus('current')
bgpneighborsdegraded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 283)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: bgpneighborsdegraded.setStatus('current')
bgpneighborsfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 284)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: bgpneighborsfailed.setStatus('current')
bgpnoneighbors = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 285)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: bgpnoneighbors.setStatus('current')
maxclientbufferdrop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 97)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: maxclientbufferdrop.setStatus('current')
respcompfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 98)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: respcompfail.setStatus('current')
responsetoolarge = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 99)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: responsetoolarge.setStatus('current')
sipstreamnoports = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 100)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sipstreamnoports.setStatus('current')
rtspstreamnoports = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 101)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: rtspstreamnoports.setStatus('current')
geodataloadfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 102)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: geodataloadfail.setStatus('current')
poolpersistencemismatch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 103)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: poolpersistencemismatch.setStatus('current')
connerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 104)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: connerror.setStatus('current')
connfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 105)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: connfail.setStatus('current')
badcontentlen = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 106)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: badcontentlen.setStatus('current')
logfiledeleted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 115)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: logfiledeleted.setStatus('current')
license_graceperiodexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 116)).setLabel("license-graceperiodexpired").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_graceperiodexpired.setStatus('current')
license_authorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 117)).setLabel("license-authorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_authorized.setStatus('current')
license_rejected_authorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 118)).setLabel("license-rejected-authorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_rejected_authorized.setStatus('current')
license_rejected_unauthorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 119)).setLabel("license-rejected-unauthorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_rejected_unauthorized.setStatus('current')
license_timedout_authorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 120)).setLabel("license-timedout-authorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_timedout_authorized.setStatus('current')
license_timedout_unauthorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 121)).setLabel("license-timedout-unauthorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_timedout_unauthorized.setStatus('current')
license_unauthorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 122)).setLabel("license-unauthorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_unauthorized.setStatus('current')
license_rejected_unauthorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 192)).setLabel("license-rejected-unauthorized-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_rejected_unauthorized_ts.setStatus('current')
license_authorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 193)).setLabel("license-authorized-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_authorized_ts.setStatus('current')
license_rejected_authorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 194)).setLabel("license-rejected-authorized-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_rejected_authorized_ts.setStatus('current')
license_timedout_authorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 195)).setLabel("license-timedout-authorized-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_timedout_authorized_ts.setStatus('current')
license_timedout_unauthorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 196)).setLabel("license-timedout-unauthorized-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_timedout_unauthorized_ts.setStatus('current')
license_graceperiodexpired_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 197)).setLabel("license-graceperiodexpired-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_graceperiodexpired_ts.setStatus('current')
license_explicitlydisabled_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 209)).setLabel("license-explicitlydisabled-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_explicitlydisabled_ts.setStatus('current')
numnodes_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 205)).setLabel("numnodes-exceeded").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: numnodes_exceeded.setStatus('current')
numpools_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 202)).setLabel("numpools-exceeded").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: numpools_exceeded.setStatus('current')
numlocations_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 203)).setLabel("numlocations-exceeded").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: numlocations_exceeded.setStatus('current')
numtipg_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 204)).setLabel("numtipg-exceeded").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: numtipg_exceeded.setStatus('current')
logdiskoverload = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 186)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: logdiskoverload.setStatus('current')
logdiskfull = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 187)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: logdiskfull.setStatus('current')
zxtmhighload = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 189)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: zxtmhighload.setStatus('current')
sslcrltoobig = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 201)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sslcrltoobig.setStatus('current')
childcommsfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 225)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: childcommsfail.setStatus('current')
childhung = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 226)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: childhung.setStatus('deprecated')
childkilled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 227)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: childkilled.setStatus('deprecated')
clocknotmonotonic = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 231)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: clocknotmonotonic.setStatus('current')
clockjump = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 232)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: clockjump.setStatus('current')
zxtmcpustarvation = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 286)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: zxtmcpustarvation.setStatus('current')
appfirewallcontrolstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 243)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appfirewallcontrolstarted.setStatus('current')
appfirewallcontrolstopped = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 249)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appfirewallcontrolstopped.setStatus('current')
appfirewallcontrolrestarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 250)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appfirewallcontrolrestarted.setStatus('current')
appfirewallcontroltimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 251)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appfirewallcontroltimeout.setStatus('current')
appfirewallcontrolerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 252)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appfirewallcontrolerror.setStatus('current')
cloudcredentialsClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsClassNumber.setStatus('current')
cloudcredentialsTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2), )
if mibBuilder.loadTexts: cloudcredentialsTable.setStatus('current')
cloudcredentialsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: cloudcredentialsEntry.setStatus('current')
cloudcredentialsName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsName.setStatus('current')
cloudcredentialsStatusRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsStatusRequests.setStatus('current')
cloudcredentialsNodeCreations = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsNodeCreations.setStatus('current')
cloudcredentialsNodeDeletions = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsNodeDeletions.setStatus('current')
listenIPTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2), )
if mibBuilder.loadTexts: listenIPTable.setStatus('current')
listenIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "listenIPAddressType"), (0, "ZXTM-MIB-SMIv2", "listenIPAddress"))
if mibBuilder.loadTexts: listenIPEntry.setStatus('current')
listenIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPAddressType.setStatus('current')
listenIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPAddress.setStatus('current')
listenIPBytesInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesInLo.setStatus('obsolete')
listenIPBytesInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesInHi.setStatus('obsolete')
listenIPBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesOutLo.setStatus('obsolete')
listenIPBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesOutHi.setStatus('obsolete')
listenIPCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPCurrentConn.setStatus('current')
listenIPTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPTotalConn.setStatus('obsolete')
listenIPMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPMaxConn.setStatus('current')
listenIPBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesIn.setStatus('current')
listenIPBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesOut.setStatus('current')
listenIPTotalRequestsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPTotalRequestsLo.setStatus('obsolete')
listenIPTotalRequestsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPTotalRequestsHi.setStatus('obsolete')
listenIPTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPTotalRequests.setStatus('current')
authenticatorNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorNumber.setStatus('current')
authenticatorTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2), )
if mibBuilder.loadTexts: authenticatorTable.setStatus('current')
authenticatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "authenticatorName"))
if mibBuilder.loadTexts: authenticatorEntry.setStatus('current')
authenticatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorName.setStatus('current')
authenticatorRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorRequests.setStatus('current')
authenticatorPasses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorPasses.setStatus('current')
authenticatorFails = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorFails.setStatus('current')
authenticatorErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorErrors.setStatus('current')
steelheadNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steelheadNumber.setStatus('current')
steelheadTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2), )
if mibBuilder.loadTexts: steelheadTable.setStatus('current')
steelheadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "steelheadName"))
if mibBuilder.loadTexts: steelheadEntry.setStatus('current')
steelheadName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: steelheadName.setStatus('current')
steelheadOptimized = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steelheadOptimized.setStatus('current')
dataPlaneAccelCoreNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPlaneAccelCoreNumber.setStatus('current')
dpaCoreUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33, 2), )
if mibBuilder.loadTexts: dpaCoreUtilizationTable.setStatus('current')
dpaCoreUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "coreId"))
if mibBuilder.loadTexts: dpaCoreUtilizationEntry.setStatus('current')
coreId = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coreId.setStatus('current')
coreUtilizationPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coreUtilizationPercent.setStatus('current')
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", monitors=monitors, virtualserverCertStatusRequests=virtualserverCertStatusRequests, restartrequired=restartrequired, rulestreamerrornotfinished=rulestreamerrornotfinished, perPoolNodeCurrentRequests=perPoolNodeCurrentRequests, confName=confName, sysctlreboot=sysctlreboot, rulePoolSelect=rulePoolSelect, nodeNumber=nodeNumber, nodedrainingtodelete=nodedrainingtodelete, glbservicedied=glbservicedied, trafficIPNodePingResponses=trafficIPNodePingResponses, autonodecreationstarted=autonodecreationstarted, aspsessioncache=aspsessioncache, aptimizeuseunknownscope=aptimizeuseunknownscope, virtualserverTotalHTTP2Requests=virtualserverTotalHTTP2Requests, ospfneighborsok=ospfneighborsok, virtualserverBwLimitPktsDropHi=virtualserverBwLimitPktsDropHi, poolTotalConn=poolTotalConn, poolConnsQueued=poolConnsQueued, numberSNMPGetRequests=numberSNMPGetRequests, versionmismatch=versionmismatch, ospfneighborsfailed=ospfneighborsfailed, authenticatorNumber=authenticatorNumber, sslClientCertExpired=sslClientCertExpired, virtualserverBwLimitBytesDropLo=virtualserverBwLimitBytesDropLo, ruleRetries=ruleRetries, locationenabled=locationenabled, logdiskfull=logdiskfull, rulestreamerrortoomuch=rulestreamerrortoomuch, uniSessionCacheLookups=uniSessionCacheLookups, perLocationServiceName=perLocationServiceName, webCacheURLStoreSize=webCacheURLStoreSize, slmrecoveredwarn=slmrecoveredwarn, virtualserverPktsOutHi=virtualserverPktsOutHi, perPoolNodePktsToNode=perPoolNodePktsToNode, ec2dataretrievalfailed=ec2dataretrievalfailed, numberDNSPTRRequests=numberDNSPTRRequests, bandwidthClassBytesOut=bandwidthClassBytesOut, sslCipherDESDecrypts=sslCipherDESDecrypts, aspSessionCacheLookups=aspSessionCacheLookups, numberSNMPGetNextRequests=numberSNMPGetNextRequests, authenticatorName=authenticatorName, perPoolNodeBytesFromNodeLo=perPoolNodeBytesFromNodeLo, aptimizedisabled=aptimizedisabled, dpaCoreUtilizationTable=dpaCoreUtilizationTable, servicerulelocunknown=servicerulelocunknown, autoscalinghysteresiscantgrow=autoscalinghysteresiscantgrow, poolBwLimitBytesDrop=poolBwLimitBytesDrop, trafficips=trafficips, nodeInet46BytesFromNodeLo=nodeInet46BytesFromNodeLo, autoscalednodecontested=autoscalednodecontested, dropipwarn=dropipwarn, virtualserverConnectTimedOut=virtualserverConnectTimedOut, poolactivenodesunknown=poolactivenodesunknown, ipSessionCacheHitRate=ipSessionCacheHitRate, poolDisabled=poolDisabled, glbnewmaster=glbnewmaster, zxtmhighload=zxtmhighload, extra=extra, slmrecoveredserious=slmrecoveredserious, dnserrordeletezone=dnserrordeletezone, perPoolNodePktsFromNodeLo=perPoolNodePktsFromNodeLo, confmod=confmod, ocspstaplingunknown=ocspstaplingunknown, licensetoomanylocations=licensetoomanylocations, virtualserverTotalDgram=virtualserverTotalDgram, autoscaledpooltoosmall=autoscaledpooltoosmall, javastop=javastop, zxtmtraps=zxtmtraps, nodeInet46BytesToNode=nodeInet46BytesToNode, perPoolNodeL4StatelessBuckets=perPoolNodeL4StatelessBuckets, perPoolNodeNewConn=perPoolNodeNewConn, dnszonecreaterecord=dnszonecreaterecord, j2eeSessionCacheMisses=j2eeSessionCacheMisses, poolNumber=poolNumber, sslsessioncache=sslsessioncache, nodePort=nodePort, poolBytesIn=poolBytesIn, ocspstaplingnomem=ocspstaplingnomem, nodeInet46State=nodeInet46State, sysMemFree=sysMemFree, webCacheURLStoreFree=webCacheURLStoreFree, rules=rules, nodeNumberInet46=nodeNumberInet46, machinetimeout=machinetimeout, virtualserverTotalHTTPRequestsHi=virtualserverTotalHTTPRequestsHi, dnszoneparse=dnszoneparse, rateClassMaxRatePerSec=rateClassMaxRatePerSec, notificationGroup=notificationGroup, sslConnections=sslConnections, license_rejected_unauthorized_ts=license_rejected_unauthorized_ts, autoscalinghitfloor=autoscalinghitfloor, bandwidthClassTable=bandwidthClassTable, appfirewallcontroltimeout=appfirewallcontroltimeout, nodeResponseMin=nodeResponseMin, perLocationServiceTable=perLocationServiceTable, rebootrequired=rebootrequired, glbServiceTable=glbServiceTable, serviceProtNumber=serviceProtNumber, ruleDiscards=ruleDiscards, glbServiceResponses=glbServiceResponses, aspSessionCacheEntries=aspSessionCacheEntries, fullLogLine=fullLogLine, nodeInet46Port=nodeInet46Port, autoscaledpoolrefractory=autoscaledpoolrefractory, dropipinfo=dropipinfo, sslCipherAESGCMEncrypts=sslCipherAESGCMEncrypts, virtualserverEntry=virtualserverEntry, nodeInet46Address=nodeInet46Address, perPoolNodeIdleConns=perPoolNodeIdleConns, sslSessionCacheMisses=sslSessionCacheMisses, license_rejected_authorized_ts=license_rejected_authorized_ts, glbserviceok=glbserviceok, deprecatedNotificationGroup=deprecatedNotificationGroup, childkilled=childkilled, webCacheHitsLo=webCacheHitsLo, webCacheMissesLo=webCacheMissesLo, perlocationservices=perlocationservices, serviceLevelNumber=serviceLevelNumber, nodeInet46Errors=nodeInet46Errors, poolPersistence=poolPersistence, virtualserverKeepaliveTimedOut=virtualserverKeepaliveTimedOut, serviceLevelIsOK=serviceLevelIsOK, sslClientCertNotSent=sslClientCertNotSent, poolpersistencemismatch=poolpersistencemismatch, virtualserverHttpRewriteLocation=virtualserverHttpRewriteLocation, locationok=locationok, virtualserverTotalHTTP2RequestsLo=virtualserverTotalHTTP2RequestsLo, sslOcspStaplingUnknownCount=sslOcspStaplingUnknownCount, machinerecovered=machinerecovered, nodeInet46BytesFromNodeHi=nodeInet46BytesFromNodeHi, multihostload=multihostload, license_explicitlydisabled_ts=license_explicitlydisabled_ts, zxtmswerror=zxtmswerror, totalRequests=totalRequests, virtualserverHttpCacheHitRate=virtualserverHttpCacheHitRate, perPoolNodeNodeHostName=perPoolNodeNodeHostName, obsoleteCompliance=obsoleteCompliance, dnsaddzone=dnsaddzone, zxtmName=zxtmName, eventsMatched=eventsMatched, cloudcredentialsEntry=cloudcredentialsEntry, listenIPTotalRequestsHi=listenIPTotalRequestsHi, sslCacheMisses=sslCacheMisses, autoscalepoolconfupdate=autoscalepoolconfupdate, autonodestatuschange=autonodestatuschange, license_graceperiodexpired=license_graceperiodexpired, ocspstaplingfail=ocspstaplingfail, poolnonodes=poolnonodes, eventNumber=eventNumber, numtipg_exceeded=numtipg_exceeded, glbmissingips=glbmissingips, nodeTotalConn=nodeTotalConn, trafficIPInet46Table=trafficIPInet46Table, nodeResponseMax=nodeResponseMax, userCounter64Name=userCounter64Name, numberDNSPTRCacheHits=numberDNSPTRCacheHits, license_graceperiodexpired_ts=license_graceperiodexpired_ts, perNodeServiceLevelTotalConn=perNodeServiceLevelTotalConn, locationnotdraining=locationnotdraining, virtualserverDefaultTrafficPool=virtualserverDefaultTrafficPool, cloudcredentialsName=cloudcredentialsName, virtualserverGzip=virtualserverGzip, bandwidthClassGuarantee=bandwidthClassGuarantee, totalDNSResponses=totalDNSResponses, virtualserverProtocol=virtualserverProtocol, flipperraiseremotedropped=flipperraiseremotedropped, nodefail=nodefail, trapsZero=trapsZero, nodeCurrentConn=nodeCurrentConn, serviceProtName=serviceProtName, serviceLevelTotalNonConf=serviceLevelTotalNonConf, rulesinvalidrequestbody=rulesinvalidrequestbody, autoscalewrongsizeid=autoscalewrongsizeid, locationdraining=locationdraining, virtualserverBwLimitBytesDrop=virtualserverBwLimitBytesDrop, connfail=connfail, tpslimited=tpslimited, virtualserverProcessingTimedOut=virtualserverProcessingTimedOut, virtualserverSIPRejectedRequests=virtualserverSIPRejectedRequests, eventTable=eventTable, sslSessionCacheOldest=sslSessionCacheOldest, uniSessionCacheEntriesMax=uniSessionCacheEntriesMax, fipsfailinit=fipsfailinit, rateClassMaxRatePerMin=rateClassMaxRatePerMin, poolok=poolok, sslCipherEncrypts=sslCipherEncrypts, virtualserverCertStatusResponses=virtualserverCertStatusResponses, license_authorized=license_authorized, virtualserverTotalHTTP1RequestsLo=virtualserverTotalHTTP1RequestsLo, webCacheMaxEntries=webCacheMaxEntries, ec2flipperraiseothersdead=ec2flipperraiseothersdead, nostarttls=nostarttls, autoscalestatusupdateerror=autoscalestatusupdateerror, serviceProtTable=serviceProtTable, sslCacheHits=sslCacheHits, glbServiceUnmodified=glbServiceUnmodified, authenticators=authenticators, interfaceTxBytesHi=interfaceTxBytesHi, virtualserverL4UDPUnreachables=virtualserverL4UDPUnreachables, confrepfailed=confrepfailed, perPoolNodePktsFromNodeHi=perPoolNodePktsFromNodeHi, zxtm=zxtm, autoscalingdisabled=autoscalingdisabled, deprecatedGroup=deprecatedGroup, perLocationServiceLocationCode=perLocationServiceLocationCode, rateClassName=rateClassName, perNodeServiceLevelInet46NodeAddress=perNodeServiceLevelInet46NodeAddress, apichangeprocesshanging=apichangeprocesshanging, sslCacheEntries=sslCacheEntries, locationsoapfail=locationsoapfail, totalConn=totalConn, webCacheEntries=webCacheEntries, numberSNMPGetBulkRequests=numberSNMPGetBulkRequests, bandwidthClassMaximum=bandwidthClassMaximum, sslSessionCacheEntriesMax=sslSessionCacheEntriesMax, autonodecreationcomplete=autonodecreationcomplete, aspSessionCacheEntriesMax=aspSessionCacheEntriesMax, netinterfaces=netinterfaces, perNodeServiceLevelInet46NodeAddressType=perNodeServiceLevelInet46NodeAddressType, coreId=coreId, listenIPCurrentConn=listenIPCurrentConn, ec2iperr=ec2iperr, trafficIPInet46Time=trafficIPInet46Time, dnszoneparsechild=dnszoneparsechild, testaction=testaction, serviceProtRefusalConnRate=serviceProtRefusalConnRate, connerror=connerror, dpaCoreUtilizationEntry=dpaCoreUtilizationEntry, sslCipherRSAEncryptsExternal=sslCipherRSAEncryptsExternal, eventEntry=eventEntry, listenIPMaxConn=listenIPMaxConn, aspSessionCacheMisses=aspSessionCacheMisses, pingbackendfail=pingbackendfail, bandwidthClassBytesDropHi=bandwidthClassBytesDropHi, pingfrontendfail=pingfrontendfail, nodeInet46CurrentRequests=nodeInet46CurrentRequests, autofailbacktimercancelled=autofailbacktimercancelled, locationdisabled=locationdisabled, sslhwstart=sslhwstart, licensekeyEntry=licensekeyEntry, totalBytesInHi=totalBytesInHi, nodeInet46NewConn=nodeInet46NewConn, virtualserverPktsIn=virtualserverPktsIn, sslCipherRSADecryptsExternal=sslCipherRSADecryptsExternal, perPoolNodeResponseMean=perPoolNodeResponseMean, expiresoon=expiresoon, serviceLevelCurrentConns=serviceLevelCurrentConns, flipperraiseothersdead=flipperraiseothersdead, authenticatorErrors=authenticatorErrors, sslOcspStaplingRevokedCount=sslOcspStaplingRevokedCount, listenIPTotalRequests=listenIPTotalRequests, perPoolNodeBytesFromNode=perPoolNodeBytesFromNode)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", j2eeSessionCacheLookups=j2eeSessionCacheLookups, virtualserverTotalRequestsHi=virtualserverTotalRequestsHi, steelheadNumber=steelheadNumber, ocspstaplingunrevoked=ocspstaplingunrevoked, statetimeout=statetimeout, cloudcredentialsNodeCreations=cloudcredentialsNodeCreations, actions=actions, sslCipherDHGenerates=sslCipherDHGenerates, dataEntries=dataEntries, perNodeServiceLevelInet46TotalNonConf=perNodeServiceLevelInet46TotalNonConf, autonodeexisted=autonodeexisted, virtualserverTotalHTTP1RequestsHi=virtualserverTotalHTTP1RequestsHi, poolEntry=poolEntry, autofailbackafterdelay=autofailbackafterdelay, autoscalinglicenseerror=autoscalinglicenseerror, perPoolNodeNodeAddressType=perPoolNodeNodeAddressType, ocspstaplingrevoked=ocspstaplingrevoked, nodes=nodes, perPoolNodePktsToNodeLo=perPoolNodePktsToNodeLo, badcontentlen=badcontentlen, trafficIPPingResponseErrors=trafficIPPingResponseErrors, confok=confok, trafficIPAddress=trafficIPAddress, serviceProtRefusalRFC2396=serviceProtRefusalRFC2396, virtualserverCurrentConn=virtualserverCurrentConn, appliance=appliance, allmachinesok=allmachinesok, autofailbacktimerstarted=autofailbacktimerstarted, aptimizeuseunknownprofile=aptimizeuseunknownprofile, actionEntry=actionEntry, gcedataretrievalsuccessful=gcedataretrievalsuccessful, virtualserverConnectionFailures=virtualserverConnectionFailures, pooldied=pooldied, listenIPBytesIn=listenIPBytesIn, sslSessionIDMemCacheMiss=sslSessionIDMemCacheMiss, sslSessionIDDiskCacheMiss=sslSessionIDDiskCacheMiss, vscacertexpired=vscacertexpired, perNodeServiceLevelInet46ResponseMax=perNodeServiceLevelInet46ResponseMax, perPoolNodePktsFromNode=perPoolNodePktsFromNode, zxtmEntry=zxtmEntry, trafficIPState=trafficIPState, sysMemInUse=sysMemInUse, locationavailable=locationavailable, pooluseunknown=pooluseunknown, license_timedout_authorized_ts=license_timedout_authorized_ts, listenIPBytesOutHi=listenIPBytesOutHi, monitorNumber=monitorNumber, sslCipherDSAVerifies=sslCipherDSAVerifies, nodeInet46ResponseMean=nodeInet46ResponseMean, sslOcspStaplingCount=sslOcspStaplingCount, machinefail=machinefail, sysMemSwapped=sysMemSwapped, nodeEntry=nodeEntry, virtualserverBytesOutLo=virtualserverBytesOutLo, poolBwLimitPktsDropHi=poolBwLimitPktsDropHi, aspSessionCacheOldest=aspSessionCacheOldest, pinggwfail=pinggwfail, poolSessionMigrated=poolSessionMigrated, bandwidthClassBytesDrop=bandwidthClassBytesDrop, interfaceRxBytesHi=interfaceRxBytesHi, serviceProtRefusalConc1IP=serviceProtRefusalConc1IP, nodeInet46BytesToNodeLo=nodeInet46BytesToNodeLo, perNodeServiceLevelResponseMean=perNodeServiceLevelResponseMean, javastartfail=javastartfail, poolBwLimitBytesDropHi=poolBwLimitBytesDropHi, interfaceRxErrors=interfaceRxErrors, obsoleteNotificationGroup=obsoleteNotificationGroup, authenticatorEntry=authenticatorEntry, licensekeyName=licensekeyName, ec2flipperraiselocalworking=ec2flipperraiselocalworking, poolBwLimitPktsDropLo=poolBwLimitPktsDropLo, poolBytesInLo=poolBytesInLo, glbServiceName=glbServiceName, serviceProtEntry=serviceProtEntry, fipsfailops=fipsfailops, locationTable=locationTable, autoscaleinvalidargfordeletenode=autoscaleinvalidargfordeletenode, sslCipherRC4Decrypts=sslCipherRC4Decrypts, sslCipherDHAgreements=sslCipherDHAgreements, sysCPUBusyPercent=sysCPUBusyPercent, perNodeServiceLevelNodeIPAddr=perNodeServiceLevelNodeIPAddr, webCacheMissesHi=webCacheMissesHi, sslOcspStaplingSuccessCount=sslOcspStaplingSuccessCount, ec2vpciderr=ec2vpciderr, interfaceNumber=interfaceNumber, compliance=compliance, sslCacheEntriesMax=sslCacheEntriesMax, autoscalingpoolstatechange=autoscalingpoolstatechange, glbmanualfailback=glbmanualfailback, interfaceTxPackets=interfaceTxPackets, locationEntry=locationEntry, poolQueueTimeouts=poolQueueTimeouts, logdiskoverload=logdiskoverload, vssslcertexpired=vssslcertexpired, trapobjects=trapobjects, poolBytesOutHi=poolBytesOutHi, trafficIPNumberInet46=trafficIPNumberInet46, sslSessionCacheHits=sslSessionCacheHits, virtualserverMaxConn=virtualserverMaxConn, sslCipherECDSAVerifies=sslCipherECDSAVerifies, trafficIPARPMessage=trafficIPARPMessage, sslCipherECDSASigns=sslCipherECDSASigns, PYSNMP_MODULE_ID=zxtm, cloudcredentialsNodeDeletions=cloudcredentialsNodeDeletions, sslCipherDecrypts=sslCipherDecrypts, numIdleConnections=numIdleConnections, poolBytesOutLo=poolBytesOutLo, serviceLevelResponseMin=serviceLevelResponseMin, perNodeServiceLevelTotalNonConf=perNodeServiceLevelTotalNonConf, perNodeServiceLevelResponseMax=perNodeServiceLevelResponseMax, interfaceRxPackets=interfaceRxPackets, autonodedisappeared=autonodedisappeared, trafficIPGatewayPingRequests=trafficIPGatewayPingRequests, activatealldead=activatealldead, autoscalewrongimageid=autoscalewrongimageid, trafficIPInet46AddressType=trafficIPInet46AddressType, numlocations_exceeded=numlocations_exceeded, nodeworking=nodeworking, autoscalingchangeprocessfailure=autoscalingchangeprocessfailure, dnserroraddzone=dnserroraddzone, bandwidthClassName=bandwidthClassName, sslCacheHitRate=sslCacheHitRate, clockjump=clockjump, nodePooledConn=nodePooledConn, perLocationServiceLocationName=perLocationServiceLocationName, virtualserverBwLimitPktsDropLo=virtualserverBwLimitPktsDropLo, hourlyPeakRequestsPerSecond=hourlyPeakRequestsPerSecond, glbservices=glbservices, customevent=customevent, bwlimited=bwlimited, license_authorized_ts=license_authorized_ts, virtualserverTotalHTTP1Requests=virtualserverTotalHTTP1Requests, poolMaxQueueTime=poolMaxQueueTime, virtualserverTotalHTTPRequests=virtualserverTotalHTTPRequests, interfaceTxErrors=interfaceTxErrors, nodeInet46HostName=nodeInet46HostName, dropec2ipwarn=dropec2ipwarn, vsstart=vsstart, hourlyPeakSSLConnectionsPerSecond=hourlyPeakSSLConnectionsPerSecond, trafficIPNodePingRequests=trafficIPNodePingRequests, maxclientbufferdrop=maxclientbufferdrop, stateconnfail=stateconnfail, bandwidthClassEntry=bandwidthClassEntry, sslCipherRC4Encrypts=sslCipherRC4Encrypts, nodeFailures=nodeFailures, serviceLevelTotalConn=serviceLevelTotalConn, cloudcredentials=cloudcredentials, autoscalinghitroof=autoscalinghitroof, virtualserverHttpCacheHits=virtualserverHttpCacheHits, userCounter64Value=userCounter64Value, userCounter64Table=userCounter64Table, sslhwrestart=sslhwrestart, perPoolNodeEntry=perPoolNodeEntry, locationName=locationName, morememallowed=morememallowed, version=version, javanotfound=javanotfound, rulestreamerrornotenough=rulestreamerrornotenough, numberSNMPBadRequests=numberSNMPBadRequests, domainName=domainName, childcommsfail=childcommsfail, license_rejected_unauthorized=license_rejected_unauthorized, interfaceTable=interfaceTable, poolBwLimitBytesDropLo=poolBwLimitBytesDropLo, virtualserverGzipBytesSaved=virtualserverGzipBytesSaved, trafficIPNumberRaisedInet46=trafficIPNumberRaisedInet46, javaterminatefail=javaterminatefail, nameserveravailable=nameserveravailable, sslClientCertRevoked=sslClientCertRevoked, listenIPBytesOutLo=listenIPBytesOutLo, timemovedback=timemovedback, machineok=machineok, licenseclustertoobig=licenseclustertoobig, responsetoolarge=responsetoolarge, perNodeServiceLevelInet46Entry=perNodeServiceLevelInet46Entry, routingswoperational=routingswoperational, license_timedout_unauthorized=license_timedout_unauthorized, rulebodycomperror=rulebodycomperror, nodeCurrentRequests=nodeCurrentRequests, dataPlaneAccelCoreNumber=dataPlaneAccelCoreNumber, obsoleteGroup=obsoleteGroup, zeus=zeus, totalBytesOutLo=totalBytesOutLo, ruleTable=ruleTable, webCacheHits=webCacheHits, webCacheURLStoreTotalAllocations=webCacheURLStoreTotalAllocations, uniSessionCacheEntries=uniSessionCacheEntries, sslCipherAESEncrypts=sslCipherAESEncrypts, sslrehandshakemininterval=sslrehandshakemininterval, ruleEntry=ruleEntry, hardware=hardware, perPoolNodeState=perPoolNodeState, triggersummary=triggersummary, hourlyPeakBytesOutPerSecond=hourlyPeakBytesOutPerSecond, unspecifiedreboot=unspecifiedreboot, autonodenopublicip=autonodenopublicip, ipSessionCacheEntries=ipSessionCacheEntries, serviceLevelName=serviceLevelName, nodeInet46Table=nodeInet46Table, appfirewallcontrolstarted=appfirewallcontrolstarted, confadd=confadd, autoscalingresuscitatepool=autoscalingresuscitatepool, zxtmTable=zxtmTable, sslClientCertInvalid=sslClientCertInvalid, sslSessionCacheLookups=sslSessionCacheLookups, zclustermoderr=zclustermoderr, unlicensed=unlicensed, usingdevlicense=usingdevlicense, bgpneighborsok=bgpneighborsok, poolFailPool=poolFailPool, timeLastConfigUpdate=timeLastConfigUpdate, perPoolNodeResponseMin=perPoolNodeResponseMin, interfaceRxBytes=interfaceRxBytes, poolDraining=poolDraining, routingswfailurelimitreached=routingswfailurelimitreached, listenIPTotalConn=listenIPTotalConn, mainGroup=mainGroup, autonoderemoved=autonoderemoved, rulebufferlarge=rulebufferlarge, autoscalinghysteresiscantshrink=autoscalinghysteresiscantshrink, cannotshrinkemptypool=cannotshrinkemptypool, rulestreamerrorgetresponse=rulestreamerrorgetresponse, noderesolvefailure=noderesolvefailure, complianceStatements=complianceStatements, locationResponses=locationResponses, virtualserverBytesInLo=virtualserverBytesInLo, perPoolNodeNodeAddress=perPoolNodeNodeAddress, webCacheLookups=webCacheLookups, locationCode=locationCode, nodeInet46PooledConn=nodeInet46PooledConn, nodeInet46IdleConns=nodeInet46IdleConns, locationfail=locationfail, analyticslicensedisabled=analyticslicensedisabled, actionNumber=actionNumber, unisessioncache=unisessioncache, vslogwritefail=vslogwritefail, globals=globals, steelheadEntry=steelheadEntry, statebaddata=statebaddata, sslfail=sslfail, webCacheLookupsLo=webCacheLookupsLo, ec2vpceipassocerr=ec2vpceipassocerr, connratelimit=connratelimit, totalTransactions=totalTransactions, j2eesessioncache=j2eesessioncache, cache=cache, analyticslicenseenabled=analyticslicenseenabled, j2eeSessionCacheEntriesMax=j2eeSessionCacheEntriesMax, perLocationServiceFrontendState=perLocationServiceFrontendState, bgpneighborsfailed=bgpneighborsfailed, nodeErrors=nodeErrors, serviceProtRefusalConc10IP=serviceProtRefusalConc10IP, perPoolNodeTable=perPoolNodeTable, ruleNumber=ruleNumber)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", virtualserverBytesOut=virtualserverBytesOut, nodeBytesFromNodeHi=nodeBytesFromNodeHi, ec2initialized=ec2initialized, trafficIPGatewayPingResponses=trafficIPGatewayPingResponses, bandwidthmgt=bandwidthmgt, persistence=persistence, autoscalingprocesstimedout=autoscalingprocesstimedout, glbactivedcmismatch=glbactivedcmismatch, geodataloadfail=geodataloadfail, autoscaledpooltoobig=autoscaledpooltoobig, sslHandshakeTLSv12=sslHandshakeTLSv12, serviceLevelResponseMax=serviceLevelResponseMax, flipperbackendsworking=flipperbackendsworking, datastorefull=datastorefull, pernodeservicelevelmon=pernodeservicelevelmon, license_timedout_authorized=license_timedout_authorized, virtualserverHttpCacheLookups=virtualserverHttpCacheLookups, javadied=javadied, vsstop=vsstop, virtualservers=virtualservers, virtualserverGzipBytesSavedLo=virtualserverGzipBytesSavedLo, rateClassTable=rateClassTable, perPoolNodeBytesToNode=perPoolNodeBytesToNode, usinglicense=usinglicense, rulexmlerr=rulexmlerr, numberDNSACacheHits=numberDNSACacheHits, sslCacheOldest=sslCacheOldest, flipperdadreraise=flipperdadreraise, upgradereboot=upgradereboot, userCounterEntry=userCounterEntry, sslSessionCacheHitRate=sslSessionCacheHitRate, uniSessionCacheHits=uniSessionCacheHits, autofailbacktimerstopped=autofailbacktimerstopped, trafficIPNumberRaised=trafficIPNumberRaised, virtualserverDirectReplies=virtualserverDirectReplies, perNodeServiceLevelInet46TotalConn=perNodeServiceLevelInet46TotalConn, locempty=locempty, webCacheLookupsHi=webCacheLookupsHi, nameserverunavailable=nameserverunavailable, listenips=listenips, numpools_exceeded=numpools_exceeded, sslHandshakeTLSv11=sslHandshakeTLSv11, statereadfail=statereadfail, ruleabort=ruleabort, virtualserverBytesIn=virtualserverBytesIn, glbnolocations=glbnolocations, glbfailalter=glbfailalter, trafficIPNumber=trafficIPNumber, nodeInet46TotalConn=nodeInet46TotalConn, activatedautomatically=activatedautomatically, usedcredsdeleted=usedcredsdeleted, dataMemoryUsage=dataMemoryUsage, steelheadOptimized=steelheadOptimized, totalBytesOut=totalBytesOut, userCounterName=userCounterName, webCacheURLStoreAllocated=webCacheURLStoreAllocated, customEventName=customEventName, webCacheOldest=webCacheOldest, licensekeyTable=licensekeyTable, aspSessionCacheHits=aspSessionCacheHits, sslSessionCacheEntries=sslSessionCacheEntries, autoscalinglicensedisabled=autoscalinglicensedisabled, fewfreefds=fewfreefds, confdel=confdel, virtualserverTotalConn=virtualserverTotalConn, virtualserverTotalHTTPRequestsLo=virtualserverTotalHTTPRequestsLo, nodeBytesToNodeHi=nodeBytesToNodeHi, products=products, authenticatorFails=authenticatorFails, serviceLevelConforming=serviceLevelConforming, statewritefail=statewritefail, autoscaleresponseparseerror=autoscaleresponseparseerror, glbServiceDiscarded=glbServiceDiscarded, perPoolNodeNodePort=perPoolNodeNodePort, nodeInet46Entry=nodeInet46Entry, zxtmcpustarvation=zxtmcpustarvation, trafficIPInet46Address=trafficIPInet46Address, webCacheHitsHi=webCacheHitsHi, dnssecexpired=dnssecexpired, virtualserverPktsInLo=virtualserverPktsInLo, gcedataretrievalfailed=gcedataretrievalfailed, upTime=upTime, sslCacheLookups=sslCacheLookups, bandwidthClassPktsDrop=bandwidthClassPktsDrop, perPoolNodePoolName=perPoolNodePoolName, webCacheMemMaximum=webCacheMemMaximum, virtualserverL4TCPConnectResets=virtualserverL4TCPConnectResets, bgpnoneighbors=bgpnoneighbors, norate=norate, ec2nopublicip=ec2nopublicip, slmfallenbelowwarn=slmfallenbelowwarn, autonodedestructioncomplete=autonodedestructioncomplete, locationmonitorok=locationmonitorok, sslSessionIDDiskCacheHit=sslSessionIDDiskCacheHit, nodeInet46BytesFromNode=nodeInet46BytesFromNode, zxtmNumber=zxtmNumber, apistatusprocesshanging=apistatusprocesshanging, trafficIPInet46Entry=trafficIPInet46Entry, perPoolNodePktsToNodeHi=perPoolNodePktsToNodeHi, serviceProtLastRefusalTime=serviceProtLastRefusalTime, trafficIPInet46State=trafficIPInet46State, locations=locations, nodeNewConn=nodeNewConn, totalBackendServerErrors=totalBackendServerErrors, serviceLevelEntry=serviceLevelEntry, vscrloutofdate=vscrloutofdate, virtualserverTotalRequestsLo=virtualserverTotalRequestsLo, virtualserverTotalRequests=virtualserverTotalRequests, servleterror=servleterror, virtualserverTotalHTTP2RequestsHi=virtualserverTotalHTTP2RequestsHi, uniSessionCacheOldest=uniSessionCacheOldest, flipperraiselocalworking=flipperraiselocalworking, cloudcredentialsStatusRequests=cloudcredentialsStatusRequests, eventsSeen=eventsSeen, license_timedout_unauthorized_ts=license_timedout_unauthorized_ts, invalidemit=invalidemit, dnszonedelete=dnszonedelete, uniSessionCacheHitRate=uniSessionCacheHitRate, sslCipherAESGCMDecrypts=sslCipherAESGCMDecrypts, servicerulelocnotconfigured=servicerulelocnotconfigured, userCounter64Entry=userCounter64Entry, licensekeyNumber=licensekeyNumber, steelheadTable=steelheadTable, serviceprotection=serviceprotection, routingswstartfailed=routingswstartfailed, numnodes_exceeded=numnodes_exceeded, routingswfailed=routingswfailed, numberSNMPUnauthorisedRequests=numberSNMPUnauthorisedRequests, perPoolNodeCurrentConn=perPoolNodeCurrentConn, glblogwritefail=glblogwritefail, actionTable=actionTable, dnszonevalidate=dnszonevalidate, virtualserverHttpRewriteCookie=virtualserverHttpRewriteCookie, bgpneighborsdegraded=bgpneighborsdegraded, sslCipherRSAEncrypts=sslCipherRSAEncrypts, perPoolNodeErrors=perPoolNodeErrors, serviceProtRefusalSize=serviceProtRefusalSize, events=events, javastarted=javastarted, ipSessionCacheHits=ipSessionCacheHits, rulelogmsginfo=rulelogmsginfo, rateClassDropped=rateClassDropped, perNodeServiceLevelInet46ResponseMin=perNodeServiceLevelInet46ResponseMin, perPoolNodeBytesToNodeLo=perPoolNodeBytesToNodeLo, webCacheMemUsed=webCacheMemUsed, numberDNSARequests=numberDNSARequests, sslCipherDESEncrypts=sslCipherDESEncrypts, authenticatorPasses=authenticatorPasses, nodeInet46ResponseMin=nodeInet46ResponseMin, cloudcredentialsTable=cloudcredentialsTable, virtualserverDiscard=virtualserverDiscard, totalBytesInLo=totalBytesInLo, nodeIPAddress=nodeIPAddress, perPoolNodeBytesFromNodeHi=perPoolNodeBytesFromNodeHi, perPoolNodeTotalConn=perPoolNodeTotalConn, perNodeServiceLevelResponseMin=perNodeServiceLevelResponseMin, perPoolNodeBytesToNodeHi=perPoolNodeBytesToNodeHi, sslCipherDSASigns=sslCipherDSASigns, trafficIPTable=trafficIPTable, sslOcspStaplingGoodCount=sslOcspStaplingGoodCount, pingsendfail=pingsendfail, ruleoverrun=ruleoverrun, autoscaleinvalidargforcreatenode=autoscaleinvalidargforcreatenode, poolTable=poolTable, perNodeServiceLevelInet46ResponseMean=perNodeServiceLevelInet46ResponseMean, ruleAborts=ruleAborts, perLocationServiceResponses=perLocationServiceResponses, sslCipherECDHAgreements=sslCipherECDHAgreements, sslcache=sslcache, ipSessionCacheEntriesMax=ipSessionCacheEntriesMax, userCounterNumber=userCounterNumber, nodeTable=nodeTable, listenIPBytesInHi=listenIPBytesInHi, poolMinQueueTime=poolMinQueueTime, noderesolvemultiple=noderesolvemultiple, rateClassConnsLeft=rateClassConnsLeft, perLocationServiceEntry=perLocationServiceEntry, perNodeServiceLevelInet46SLMName=perNodeServiceLevelInet46SLMName, nodeInet46BytesToNodeHi=nodeInet46BytesToNodeHi, nodeInet46CurrentConn=nodeInet46CurrentConn, confreptimeout=confreptimeout, interfaceCollisions=interfaceCollisions, expired=expired, bandwidthClassBytesOutHi=bandwidthClassBytesOutHi, ruleExecutionTimeWarnings=ruleExecutionTimeWarnings, totalBytesOutHi=totalBytesOutHi, starttlsinvalid=starttlsinvalid, nodeResponseMean=nodeResponseMean, authenticatorTable=authenticatorTable, virtualserverConnectionErrors=virtualserverConnectionErrors, sslhwfail=sslhwfail, appfirewallcontrolerror=appfirewallcontrolerror, totalBytesIn=totalBytesIn, perNodeServiceLevelEntry=perNodeServiceLevelEntry, locationLoad=locationLoad, ehloinvalid=ehloinvalid, deprecatedCompliance=deprecatedCompliance, poolState=poolState, ipSessionCacheLookups=ipSessionCacheLookups, virtualserverPktsInHi=virtualserverPktsInHi, virtualserverBwLimitPktsDrop=virtualserverBwLimitPktsDrop, perLocationServiceMonitorState=perLocationServiceMonitorState, sslcrltoobig=sslcrltoobig, ipsessioncache=ipsessioncache, rateClassConnsEntered=rateClassConnsEntered, glbdeadlocmissingips=glbdeadlocmissingips, virtualserverPktsOut=virtualserverPktsOut, sysMemBuffered=sysMemBuffered, hourlyPeakBytesInPerSecond=hourlyPeakBytesInPerSecond, perPoolNodeNumber=perPoolNodeNumber, perPoolNodePooledConn=perPoolNodePooledConn, monitorTable=monitorTable, ruleName=ruleName, sslSessionIDMemCacheHit=sslSessionIDMemCacheHit, autoscalewrongname=autoscalewrongname, privkeyok=privkeyok, virtualserverTable=virtualserverTable, virtualserverBwLimitBytesDropHi=virtualserverBwLimitBytesDropHi, serviceProtTotalRefusal=serviceProtTotalRefusal, flipperipexists=flipperipexists, locationunavailable=locationunavailable, cloudcredentialsClassNumber=cloudcredentialsClassNumber, upgraderestart=upgraderestart, steelheads=steelheads, listenIPEntry=listenIPEntry, nodeInet46AddressType=nodeInet46AddressType, sslCipher3DESDecrypts=sslCipher3DESDecrypts, totalBadDNSPackets=totalBadDNSPackets, licensecorrupt=licensecorrupt, flipperrecovered=flipperrecovered, sysFDsFree=sysFDsFree, rateClassEntry=rateClassEntry, flipperraiseosdrop=flipperraiseosdrop, sysCPUUserBusyPercent=sysCPUUserBusyPercent, totalCurrentConn=totalCurrentConn, perNodeServiceLevelInet46Table=perNodeServiceLevelInet46Table, locationsoapok=locationsoapok, uniSessionCacheMisses=uniSessionCacheMisses, conformanceGroups=conformanceGroups, sysCPUSystemBusyPercent=sysCPUSystemBusyPercent, flipperfrontendsworking=flipperfrontendsworking, virtualserverPktsOutLo=virtualserverPktsOutLo, trafficIPTime=trafficIPTime, interfaceEntry=interfaceEntry, sslHandshakeSSLv3=sslHandshakeSSLv3, monitorok=monitorok, running=running, sslCipher3DESEncrypts=sslCipher3DESEncrypts, sysMemTotal=sysMemTotal, webCacheMisses=webCacheMisses, sslCipherRSADecrypts=sslCipherRSADecrypts, ipSessionCacheMisses=ipSessionCacheMisses, listenIPBytesInLo=listenIPBytesInLo, poolBwLimitPktsDrop=poolBwLimitPktsDrop)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", virtualserverSIPTotalCalls=virtualserverSIPTotalCalls, perPoolNodeFailures=perPoolNodeFailures, ssltpslimited=ssltpslimited, listenIPTable=listenIPTable, nodeHostName=nodeHostName, ipSessionCacheOldest=ipSessionCacheOldest, virtualserverUdpTimedOut=virtualserverUdpTimedOut, rulestreamerrornotstarted=rulestreamerrornotstarted, vssslcerttoexpire=vssslcerttoexpire, vscacerttoexpire=vscacerttoexpire, interfaceName=interfaceName, license_rejected_authorized=license_rejected_authorized, virtualserverBytesOutHi=virtualserverBytesOutHi, dnssecexpires=dnssecexpires, autonodedestroyed=autonodedestroyed, locationmonitorfail=locationmonitorfail, sslOcspStaplingCacheCount=sslOcspStaplingCacheCount, ruleResponds=ruleResponds, actionName=actionName, dpaCoreUtilization=dpaCoreUtilization, serviceruleabort=serviceruleabort, rulelogmsgserious=rulelogmsgserious, virtualserverGzipBytesSavedHi=virtualserverGzipBytesSavedHi, monitorName=monitorName, locmovemachine=locmovemachine, nodeBytesFromNodeLo=nodeBytesFromNodeLo, trafficIPEntry=trafficIPEntry, pools=pools, forwardproxybadhost=forwardproxybadhost, sslHandshakeSSLv2=sslHandshakeSSLv2, nodeInet46ResponseMax=nodeInet46ResponseMax, autoscalinglicenseenabled=autoscalinglicenseenabled, autoscaleresolvefailure=autoscaleresolvefailure, actionsProcessed=actionsProcessed, nodeBytesToNodeLo=nodeBytesToNodeLo, glbtoomanylocations=glbtoomanylocations, eventName=eventName, webCacheURLStoreTotalFailures=webCacheURLStoreTotalFailures, logfiledeleted=logfiledeleted, perLocationServiceState=perLocationServiceState, perNodeServiceLevelTable=perNodeServiceLevelTable, serviceProtRefusalIP=serviceProtRefusalIP, rateClassQueueLength=rateClassQueueLength, serviceLevelTable=serviceLevelTable, listenIPAddressType=listenIPAddressType, ruleExecutions=ruleExecutions, webCacheURLStoreTotalFrees=webCacheURLStoreTotalFrees, interfaceTxBytesLo=interfaceTxBytesLo, glbServiceEntry=glbServiceEntry, sysMemSwapTotal=sysMemSwapTotal, j2eeSessionCacheEntries=j2eeSessionCacheEntries, perLocationServiceDraining=perLocationServiceDraining, nodeState=nodeState, respcompfail=respcompfail, ec2nosecondaryprivateip=ec2nosecondaryprivateip, perNodeServiceLevelInet46NodePort=perNodeServiceLevelInet46NodePort, rtspstreamnoports=rtspstreamnoports, bandwidthClassBytesDropLo=bandwidthClassBytesDropLo, j2eeSessionCacheHits=j2eeSessionCacheHits, sysCPUIdlePercent=sysCPUIdlePercent, nodedrainingtodeletetimeout=nodedrainingtodeletetimeout, sipstreamnoports=sipstreamnoports, slmfallenbelowserious=slmfallenbelowserious, clocknotmonotonic=clocknotmonotonic, listenIPAddress=listenIPAddress, listenIPBytesOut=listenIPBytesOut, interfaceRxBytesLo=interfaceRxBytesLo, licensekeys=licensekeys, ec2dataretrievalsuccessful=ec2dataretrievalsuccessful, sslHandshakeTLSv1=sslHandshakeTLSv1, lessmemallowed=lessmemallowed, serviceProtRefusalBinary=serviceProtRefusalBinary, poolBytesInHi=poolBytesInHi, nodeInet46Failures=nodeInet46Failures, stateunexpected=stateunexpected, bandwidthClassPktsDropLo=bandwidthClassPktsDropLo, rateClassCurrentRate=rateClassCurrentRate, stateok=stateok, sslocspstapling=sslocspstapling, glbServiceNumber=glbServiceNumber, servicerulelocdead=servicerulelocdead, rulestreamerrorinternal=rulestreamerrorinternal, webcache=webcache, numberChildProcesses=numberChildProcesses, sslCipherAESDecrypts=sslCipherAESDecrypts, j2eeSessionCacheOldest=j2eeSessionCacheOldest, perPoolNodeResponseMax=perPoolNodeResponseMax, sslCipherECDHGenerates=sslCipherECDHGenerates, bandwidthClassNumber=bandwidthClassNumber, bandwidthClassPktsDropHi=bandwidthClassPktsDropHi, appfirewallcontrolrestarted=appfirewallcontrolrestarted, autherror=autherror, monitorEntry=monitorEntry, virtualserverDataTimedOut=virtualserverDataTimedOut, steelheadName=steelheadName, j2eeSessionCacheHitRate=j2eeSessionCacheHitRate, ssldrop=ssldrop, bandwidthClassBytesOutLo=bandwidthClassBytesOutLo, rulenopersistence=rulenopersistence, userCounterTable=userCounterTable, sslOcspStaplingFailureCount=sslOcspStaplingFailureCount, rulelogmsgwarn=rulelogmsgwarn, virtualserverMaxDurationTimedOut=virtualserverMaxDurationTimedOut, ospfneighborsdegraded=ospfneighborsdegraded, virtualserverBytesInHi=virtualserverBytesInHi, userCounterValue=userCounterValue, webCacheHitRate=webCacheHitRate, poolMeanQueueTime=poolMeanQueueTime, appfirewallcontrolstopped=appfirewallcontrolstopped, cachesizereduced=cachesizereduced, servicelevelmonitoring=servicelevelmonitoring, virtualserverPort=virtualserverPort, interfaceTxBytes=interfaceTxBytes, sslhandshakemsgsizelimit=sslhandshakemsgsizelimit, poolNodes=poolNodes, poolBytesOut=poolBytesOut, license_unauthorized=license_unauthorized, listenIPTotalRequestsLo=listenIPTotalRequestsLo, poolAlgorithm=poolAlgorithm, zxtms=zxtms, perLocationServiceLoad=perLocationServiceLoad, childhung=childhung, coreUtilizationPercent=coreUtilizationPercent, datalocalstorefull=datalocalstorefull, serviceLevelResponseMean=serviceLevelResponseMean, rateClassNumber=rateClassNumber, rulestreamerrorprocessfailure=rulestreamerrorprocessfailure, slmclasslimitexceeded=slmclasslimitexceeded, authenticatorRequests=authenticatorRequests, aspSessionCacheHitRate=aspSessionCacheHitRate, virtualserverNumber=virtualserverNumber, virtualserverName=virtualserverName, poolName=poolName, perNodeServiceLevelSLMName=perNodeServiceLevelSLMName, monitorfail=monitorfail, perNodeServiceLevelNodePort=perNodeServiceLevelNodePort)
