#
# PySNMP MIB module FORTINET-FORTIMAIL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORTINET-FORTIMAIL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:00:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
FnSessionProto, FnIndex, FnBoolState, fortinet = mibBuilder.importSymbols("FORTINET-CORE-MIB", "FnSessionProto", "FnIndex", "FnBoolState", "fortinet")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, TimeTicks, Counter32, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Counter64, Unsigned32, iso, MibIdentifier, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Counter32", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Counter64", "Unsigned32", "iso", "MibIdentifier", "NotificationType", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fnFortiMailMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 12356, 105))
fnFortiMailMib.setRevisions(('2010-03-23 00:00', '2009-10-22 00:00',))
if mibBuilder.loadTexts: fnFortiMailMib.setLastUpdated('201003230000Z')
if mibBuilder.loadTexts: fnFortiMailMib.setOrganization('Fortinet Technologies, Inc.')
class FmlOpMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("gateway", 1), ("transparent", 2), ("server", 3))

class FmlSysEventCodeVal(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("systemHalt", 1), ("systemReboot", 2), ("systemReload", 3), ("systemUpgrade", 4), ("guiUpgrade", 5), ("logdiskFormat", 6), ("maildiskFormat", 7), ("avDBUpdate", 8))

class FmlRAIDCodeVal(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("degradedArray", 1), ("sparesMissing", 2), ("rebuildStarted", 3), ("rebuildFinished", 4), ("fail", 5), ("failSpare", 6), ("spareActive", 7))

class FmlHAEventIdVal(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("masterUnitSwitch", 1), ("slaveUnitSwitch", 2), ("unitShutdown", 3))

class FmlHAModeVal(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("off", 0), ("master", 1), ("slave", 2), ("configMaster", 3), ("configSlave", 4))

fmlTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 0))
fmlSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1))
fmlSysOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1, 101))
fmlIp = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102))
fmlMailOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1, 103))
fmlHwSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110))
fmlSysHA = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1, 200))
fmlMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 600))
fmlSysModel = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysModel.setStatus('current')
fmlSysSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysSerial.setStatus('current')
fmlSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysVersion.setStatus('current')
fmlSysVersionAv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysVersionAv.setStatus('current')
fmlSysOpMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 5), FmlOpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysOpMode.setStatus('current')
fmlSysCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysCpuUsage.setStatus('current')
fmlSysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysMemUsage.setStatus('current')
fmlSysLogDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysLogDiskUsage.setStatus('current')
fmlSysMailDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysMailDiskUsage.setStatus('current')
fmlSysSesCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysSesCount.setStatus('current')
fmlSysEventCode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 11), FmlSysEventCodeVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlSysEventCode.setStatus('current')
fmlRAIDCode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 12), FmlRAIDCodeVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlRAIDCode.setStatus('current')
fmlRAIDDevName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlRAIDDevName.setStatus('current')
fmlHAEventId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 14), FmlHAEventIdVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlHAEventId.setStatus('current')
fmlHAUnitIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 15), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlHAUnitIp.setStatus('current')
fmlHAEventReason = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlHAEventReason.setStatus('current')
fmlSysLoad = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysLoad.setStatus('current')
fmlSysOptIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 101, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysOptIdleTimeout.setStatus('current')
fmlSysOptAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 101, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysOptAuthTimeout.setStatus('current')
fmlSysOptsLcdProt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 101, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysOptsLcdProt.setStatus('current')
fmlIpSessTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2), )
if mibBuilder.loadTexts: fmlIpSessTable.setStatus('current')
fmlIpSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1), ).setIndexNames((0, "FORTINET-FORTIMAIL-MIB", "fmlIpSessIndex"))
if mibBuilder.loadTexts: fmlIpSessEntry.setStatus('current')
fmlIpSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fmlIpSessIndex.setStatus('current')
fmlIpSessProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 2), FnSessionProto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessProto.setStatus('current')
fmlIpSessFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessFromAddr.setStatus('current')
fmlIpSessFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessFromPort.setStatus('current')
fmlIpSessToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessToAddr.setStatus('current')
fmlIpSessToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessToPort.setStatus('current')
fmlIpSessExp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessExp.setStatus('current')
fmlMailOptionsDeferQueue = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 103, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlMailOptionsDeferQueue.setStatus('current')
fmlHwSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHwSensorCount.setStatus('current')
fmlHwSensorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2), )
if mibBuilder.loadTexts: fmlHwSensorTable.setStatus('current')
fmlHwSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2, 1), ).setIndexNames((0, "FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntIndex"))
if mibBuilder.loadTexts: fmlHwSensorEntry.setStatus('current')
fmlHwSensorEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fmlHwSensorEntIndex.setStatus('current')
fmlHwSensorEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHwSensorEntName.setStatus('current')
fmlHwSensorEntValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHwSensorEntValue.setStatus('current')
fmlHwSensorEntAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHwSensorEntAlarmStatus.setStatus('current')
fmlHAMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 200, 1), FmlHAModeVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHAMode.setStatus('current')
fmlHAEffectiveMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 200, 2), FmlHAModeVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHAEffectiveMode.setStatus('current')
fmlTrapCpuHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 101)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapCpuHighThreshold.setStatus('obsolete')
fmlTrapMemLowThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 102)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapMemLowThreshold.setStatus('obsolete')
fmlTrapLogDiskHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 103)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapLogDiskHighThreshold.setStatus('obsolete')
fmlTrapMailDiskHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 104)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapMailDiskHighThreshold.setStatus('current')
fmlTrapMailDeferredQueueHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 105)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapMailDeferredQueueHighThreshold.setStatus('current')
fmlTrapAvThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 106)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapAvThresholdEvent.setStatus('current')
fmlTrapSpamThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 107)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapSpamThresholdEvent.setStatus('current')
fmlTrapPSUFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 108)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntName"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntValue"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntAlarmStatus"))
if mibBuilder.loadTexts: fmlTrapPSUFailureEvent.setStatus('obsolete')
fmlTrapSystemEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 201)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("FORTINET-FORTIMAIL-MIB", "fmlSysEventCode"))
if mibBuilder.loadTexts: fmlTrapSystemEvent.setStatus('current')
fmlTrapRAIDEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 202)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("FORTINET-FORTIMAIL-MIB", "fmlRAIDCode"), ("FORTINET-FORTIMAIL-MIB", "fmlRAIDDevName"))
if mibBuilder.loadTexts: fmlTrapRAIDEvent.setStatus('current')
fmlTrapHAEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 203)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("FORTINET-FORTIMAIL-MIB", "fmlHAEventId"), ("FORTINET-FORTIMAIL-MIB", "fmlHAUnitIp"), ("FORTINET-FORTIMAIL-MIB", "fmlHAEventReason"))
if mibBuilder.loadTexts: fmlTrapHAEvent.setStatus('current')
fmlTrapIpChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 301)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fmlTrapIpChange.setStatus('obsolete')
fmlSystemConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 1)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysModel"), ("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("FORTINET-FORTIMAIL-MIB", "fmlSysVersion"), ("FORTINET-FORTIMAIL-MIB", "fmlSysVersionAv"), ("FORTINET-FORTIMAIL-MIB", "fmlSysOpMode"), ("FORTINET-FORTIMAIL-MIB", "fmlSysCpuUsage"), ("FORTINET-FORTIMAIL-MIB", "fmlSysMemUsage"), ("FORTINET-FORTIMAIL-MIB", "fmlSysLogDiskUsage"), ("FORTINET-FORTIMAIL-MIB", "fmlSysMailDiskUsage"), ("FORTINET-FORTIMAIL-MIB", "fmlSysSesCount"), ("FORTINET-FORTIMAIL-MIB", "fmlSysEventCode"), ("FORTINET-FORTIMAIL-MIB", "fmlRAIDCode"), ("FORTINET-FORTIMAIL-MIB", "fmlRAIDDevName"), ("FORTINET-FORTIMAIL-MIB", "fmlHAEventId"), ("FORTINET-FORTIMAIL-MIB", "fmlHAUnitIp"), ("FORTINET-FORTIMAIL-MIB", "fmlHAEventReason"), ("FORTINET-FORTIMAIL-MIB", "fmlSysLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlSystemConformanceGroup = fmlSystemConformanceGroup.setStatus('current')
fmlSysOptionsConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 2)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysOptIdleTimeout"), ("FORTINET-FORTIMAIL-MIB", "fmlSysOptAuthTimeout"), ("FORTINET-FORTIMAIL-MIB", "fmlSysOptsLcdProt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlSysOptionsConformanceGroup = fmlSysOptionsConformanceGroup.setStatus('current')
fmlIpConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 3)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlIpSessProto"), ("FORTINET-FORTIMAIL-MIB", "fmlIpSessFromAddr"), ("FORTINET-FORTIMAIL-MIB", "fmlIpSessFromPort"), ("FORTINET-FORTIMAIL-MIB", "fmlIpSessToAddr"), ("FORTINET-FORTIMAIL-MIB", "fmlIpSessToPort"), ("FORTINET-FORTIMAIL-MIB", "fmlIpSessExp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlIpConformanceGroup = fmlIpConformanceGroup.setStatus('current')
fmlMailOptionsConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 4)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlMailOptionsDeferQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlMailOptionsConformanceGroup = fmlMailOptionsConformanceGroup.setStatus('current')
fmlHwSensorsConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 5)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlHwSensorCount"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntName"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntValue"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntAlarmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlHwSensorsConformanceGroup = fmlHwSensorsConformanceGroup.setStatus('current')
fmlHAModeConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 6)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlHAMode"), ("FORTINET-FORTIMAIL-MIB", "fmlHAEffectiveMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlHAModeConformanceGroup = fmlHAModeConformanceGroup.setStatus('current')
fmlTrapsComplianceGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 7)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlTrapMailDiskHighThreshold"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapMailDeferredQueueHighThreshold"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapAvThresholdEvent"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapSpamThresholdEvent"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapSystemEvent"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapRAIDEvent"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapHAEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlTrapsComplianceGroup = fmlTrapsComplianceGroup.setStatus('current')
fmlObsoleteTrapsComplianceGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 8)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlTrapCpuHighThreshold"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapMemLowThreshold"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapLogDiskHighThreshold"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapPSUFailureEvent"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapIpChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlObsoleteTrapsComplianceGroup = fmlObsoleteTrapsComplianceGroup.setStatus('obsolete')
fmlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 105, 600, 100)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSystemConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlSysOptionsConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlIpConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlMailOptionsConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorsConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlHAModeConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapsComplianceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlMIBCompliance = fmlMIBCompliance.setStatus('current')
fmlObsoleteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 105, 600, 101)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlObsoleteTrapsComplianceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlObsoleteMIBCompliance = fmlObsoleteMIBCompliance.setStatus('obsolete')
mibBuilder.exportSymbols("FORTINET-FORTIMAIL-MIB", fmlHwSensorEntName=fmlHwSensorEntName, fmlIpSessToAddr=fmlIpSessToAddr, fmlIp=fmlIp, fmlHAModeConformanceGroup=fmlHAModeConformanceGroup, FmlHAModeVal=FmlHAModeVal, PYSNMP_MODULE_ID=fnFortiMailMib, fmlHwSensorEntIndex=fmlHwSensorEntIndex, fmlMIBCompliance=fmlMIBCompliance, fmlSysSerial=fmlSysSerial, fmlMailOptionsDeferQueue=fmlMailOptionsDeferQueue, fmlSysMailDiskUsage=fmlSysMailDiskUsage, fmlHAMode=fmlHAMode, fmlSysVersion=fmlSysVersion, fmlSysLoad=fmlSysLoad, FmlSysEventCodeVal=FmlSysEventCodeVal, fmlSysMemUsage=fmlSysMemUsage, fmlTrapSystemEvent=fmlTrapSystemEvent, fmlTrapCpuHighThreshold=fmlTrapCpuHighThreshold, fmlHwSensorEntValue=fmlHwSensorEntValue, fmlTrapIpChange=fmlTrapIpChange, fmlHwSensorEntAlarmStatus=fmlHwSensorEntAlarmStatus, fmlObsoleteTrapsComplianceGroup=fmlObsoleteTrapsComplianceGroup, fmlSysOptIdleTimeout=fmlSysOptIdleTimeout, fmlTrapSpamThresholdEvent=fmlTrapSpamThresholdEvent, fmlHwSensorEntry=fmlHwSensorEntry, fmlTrapHAEvent=fmlTrapHAEvent, fmlTrapMailDeferredQueueHighThreshold=fmlTrapMailDeferredQueueHighThreshold, fmlIpSessToPort=fmlIpSessToPort, fmlIpConformanceGroup=fmlIpConformanceGroup, fmlIpSessTable=fmlIpSessTable, fmlMailOptionsConformanceGroup=fmlMailOptionsConformanceGroup, fmlSysModel=fmlSysModel, fmlHwSensorCount=fmlHwSensorCount, fmlSysCpuUsage=fmlSysCpuUsage, fmlTrapRAIDEvent=fmlTrapRAIDEvent, fmlTrapsComplianceGroup=fmlTrapsComplianceGroup, fmlHwSensors=fmlHwSensors, FmlOpMode=FmlOpMode, fmlHAEffectiveMode=fmlHAEffectiveMode, fmlIpSessFromAddr=fmlIpSessFromAddr, fmlTrapPSUFailureEvent=fmlTrapPSUFailureEvent, fmlTrapAvThresholdEvent=fmlTrapAvThresholdEvent, fmlHwSensorTable=fmlHwSensorTable, fmlObsoleteMIBCompliance=fmlObsoleteMIBCompliance, fmlHAEventReason=fmlHAEventReason, fmlSysSesCount=fmlSysSesCount, fmlIpSessExp=fmlIpSessExp, fmlMailOptions=fmlMailOptions, fmlMIBConformance=fmlMIBConformance, fmlTraps=fmlTraps, FmlHAEventIdVal=FmlHAEventIdVal, fmlHAUnitIp=fmlHAUnitIp, fmlTrapMemLowThreshold=fmlTrapMemLowThreshold, fmlSysVersionAv=fmlSysVersionAv, fnFortiMailMib=fnFortiMailMib, fmlSysHA=fmlSysHA, fmlSysLogDiskUsage=fmlSysLogDiskUsage, fmlSysEventCode=fmlSysEventCode, fmlSysOpMode=fmlSysOpMode, fmlRAIDDevName=fmlRAIDDevName, fmlHAEventId=fmlHAEventId, fmlSysOptions=fmlSysOptions, fmlSysOptsLcdProt=fmlSysOptsLcdProt, fmlSysOptAuthTimeout=fmlSysOptAuthTimeout, fmlIpSessIndex=fmlIpSessIndex, fmlSystem=fmlSystem, fmlIpSessProto=fmlIpSessProto, fmlRAIDCode=fmlRAIDCode, fmlIpSessFromPort=fmlIpSessFromPort, fmlTrapLogDiskHighThreshold=fmlTrapLogDiskHighThreshold, fmlTrapMailDiskHighThreshold=fmlTrapMailDiskHighThreshold, fmlSysOptionsConformanceGroup=fmlSysOptionsConformanceGroup, fmlIpSessEntry=fmlIpSessEntry, fmlHwSensorsConformanceGroup=fmlHwSensorsConformanceGroup, fmlSystemConformanceGroup=fmlSystemConformanceGroup, FmlRAIDCodeVal=FmlRAIDCodeVal)
