#
# PySNMP MIB module ZHONE-COM-BRIDGE-REC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-BRIDGE-REC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:40:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
AtmVpIdentifier, AtmVcIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVpIdentifier", "AtmVcIdentifier")
ifPhysAddress, ifIndex, ifAlias, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifPhysAddress", "ifIndex", "ifAlias", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, Gauge32, IpAddress, ObjectIdentity, NotificationType, Integer32, Unsigned32, ModuleIdentity, iso, TimeTicks, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "IpAddress", "ObjectIdentity", "NotificationType", "Integer32", "Unsigned32", "ModuleIdentity", "iso", "TimeTicks", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
PhysAddress, MacAddress, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "MacAddress", "DisplayString", "TruthValue", "TextualConvention")
zhoneModules, zhone, zhoneBridge = mibBuilder.importSymbols("Zhone", "zhoneModules", "zhone", "zhoneBridge")
ZhoneAdminString, ZhoneRowStatus = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString", "ZhoneRowStatus")
bridgeRecord = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 77))
bridgeRecord.setRevisions(('2014-11-11 07:01', '2014-09-06 05:32', '2014-05-16 05:58', '2014-04-07 10:38', '2013-11-12 08:56', '2013-10-10 11:21', '2013-08-14 03:51', '2013-06-18 11:03', '2013-06-14 12:08', '2013-06-06 21:02', '2013-05-10 03:59', '2013-02-20 13:34', '2012-10-22 15:59', '2012-06-12 12:40', '2012-04-11 14:44', '2012-03-15 07:04', '2012-03-06 09:05', '2012-01-26 17:35', '2011-11-15 17:59', '2011-09-20 02:49', '2011-07-06 17:07', '2011-06-21 11:46', '2011-06-16 21:07', '2011-05-15 10:35', '2011-02-15 17:16', '2011-01-31 21:16', '2010-08-31 17:26', '2010-08-16 12:47', '2010-07-30 12:07', '2010-03-17 10:32', '2010-02-08 15:08', '2010-02-08 15:07', '2010-02-08 15:05', '2010-02-08 14:55', '2009-09-16 16:35', '2009-09-10 16:49', '2009-07-06 16:21', '2009-06-26 10:42', '2009-05-01 15:21', '2009-03-23 16:23', '2009-02-13 16:50', '2009-01-14 13:24', '2008-11-04 09:54', '2008-04-18 14:29', '2008-01-10 16:28', '2007-11-21 07:23', '2007-11-12 14:21', '2007-11-08 13:08', '2007-10-10 15:28', '2007-09-25 09:31', '2007-07-18 16:04', '2007-04-16 17:36', '2007-04-11 12:22', '2006-11-27 09:25', '2006-09-10 10:02', '2006-04-26 15:51', '2006-02-01 14:19', '2006-01-20 15:00', '2005-11-11 16:46', '2005-08-01 12:13', '2005-07-20 17:13', '2004-12-17 15:06', '2004-06-02 16:09', '2004-04-15 13:26', '2004-02-01 13:21', '2003-10-07 14:22', '2003-09-22 09:32', '2003-07-29 19:21', '2001-09-18 11:00',))
if mibBuilder.loadTexts: bridgeRecord.setLastUpdated('201302200249Z')
if mibBuilder.loadTexts: bridgeRecord.setOrganization('Zhone Technologies, Inc.')
class PacketRuleGroupIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class EapsState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("idle", 0), ("complete", 1), ("failed", 2), ("links-up", 3), ("link-down", 4), ("preForwarding", 5), ("init", 6))

class BridgeState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("up", 1), ("down", 2), ("trouble", 3), ("notAvailable", 4), ("initializing", 5), ("adminDown", 6), ("adminStateTest", 7), ("adminStateNone", 8), ("ready", 9), ("discovering", 10), ("unknown", 11), ("blocked", 12), ("pending", 13), ("disabled", 14), ("learning", 15), ("forwarding", 16), ("blockedFlapping", 17), ("blockedPersistent", 18), ("blockedFlappingPersistent", 19))

class NetworkAddress(OctetString):
    pass

bridgeInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 7, 1)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVci"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVpi"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVlanId"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStripAndInsert"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfCustomARP"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfFilterBroadcast"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfLearnIp"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfLearnUnicast"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfMaxUnicast"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfLearnMulticast"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfForwardToUnicast"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfForwardToMulticast"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfForwardToDefault"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeLowerIfIndex"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeAddressLookupStaticOrDynamic"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfLookupStaticOrDynamic"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfCustomDHCP"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeMulticastAging"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfRowStatus"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeRowStatus"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfLookupFlush"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfOutgoingCOSValue"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfOutgoingCOSOption"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVlanIdCOS"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeAddressLookupFlush"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeFlapControl"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagOutgoingCOSValue"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagCOS"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagOutgoingCOSOption"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagStripAndInsert"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagId"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagTPID"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleValue"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleRowStatus"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleGroupMemberNextIndex"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfEgressPacketRuleGroupIndex"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfIngressPacketRuleGroupIndex"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleGroupIndexNext"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleValue5"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleValue4"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleValue3"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlan"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigIsMasterNode"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlanPriority"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigDomainName"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigMsgTxInterval"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigTimeout"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigMaxDroppedMessages"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSnmpTrap"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsProtectedVlanLowerRange"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsProtectedVlanUpperRange"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigDomainEnable"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsProtectedVlanEntryIndex"), ("ZHONE-COM-BRIDGE-REC-MIB", "genQueryRx"), ("ZHONE-COM-BRIDGE-REC-MIB", "genQueryTx"), ("ZHONE-COM-BRIDGE-REC-MIB", "specQueryRx"), ("ZHONE-COM-BRIDGE-REC-MIB", "specQueryTx"), ("ZHONE-COM-BRIDGE-REC-MIB", "v2ReportsRx"), ("ZHONE-COM-BRIDGE-REC-MIB", "v2ReportsTx"), ("ZHONE-COM-BRIDGE-REC-MIB", "leavesRx"), ("ZHONE-COM-BRIDGE-REC-MIB", "leavesTx"), ("ZHONE-COM-BRIDGE-REC-MIB", "unknownRx"), ("ZHONE-COM-BRIDGE-REC-MIB", "errorRx"), ("ZHONE-COM-BRIDGE-REC-MIB", "actChans"), ("ZHONE-COM-BRIDGE-REC-MIB", "actHosts"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeLoopPrevention"), ("ZHONE-COM-BRIDGE-REC-MIB", "v3ReportsTx"), ("ZHONE-COM-BRIDGE-REC-MIB", "v3ReportsRx"), ("ZHONE-COM-BRIDGE-REC-MIB", "v3SpecQueryTx"), ("ZHONE-COM-BRIDGE-REC-MIB", "v3SpecQueryRx"), ("ZHONE-COM-BRIDGE-REC-MIB", "v3GenQueryTx"), ("ZHONE-COM-BRIDGE-REC-MIB", "v3GenQueryRx"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleValue2"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeInterfaceGroup = bridgeInterfaceGroup.setStatus('current')
bridgeInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2), )
if mibBuilder.loadTexts: bridgeInterfaceTable.setStatus('current')
bridgeInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bridgeInterfaceEntry.setStatus('current')
bridgeIfVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 1), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfVpi.setStatus('current')
bridgeIfVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 2), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfVci.setStatus('current')
bridgeIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfVlanId.setStatus('current')
bridgeIfStripAndInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfStripAndInsert.setStatus('current')
bridgeIfCustomARP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfCustomARP.setStatus('current')
bridgeIfFilterBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfFilterBroadcast.setStatus('current')
bridgeIfLearnIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfLearnIp.setStatus('current')
bridgeIfLearnUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfLearnUnicast.setStatus('current')
bridgeIfMaxUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfMaxUnicast.setStatus('current')
bridgeIfLearnMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfLearnMulticast.setStatus('current')
bridgeIfForwardToUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfForwardToUnicast.setStatus('current')
bridgeIfForwardToMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfForwardToMulticast.setStatus('current')
bridgeIfForwardToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfForwardToDefault.setStatus('current')
bridgeLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 14), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeLowerIfIndex.setStatus('current')
bridgeIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 15), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfRowStatus.setStatus('current')
bridgeIfCustomDHCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfCustomDHCP.setStatus('current')
bridgeIfIngressPacketRuleGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 17), PacketRuleGroupIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfIngressPacketRuleGroupIndex.setStatus('current')
bridgeIfVlanIdCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfVlanIdCOS.setStatus('current')
bridgeIfOutgoingCOSOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outgoingCOSOptionDisable", 1), ("outgoingCOSOptionAll", 2))).clone('outgoingCOSOptionDisable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfOutgoingCOSOption.setStatus('current')
bridgeIfOutgoingCOSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfOutgoingCOSValue.setStatus('current')
bridgeIfStagTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(33024, 33024), ValueRangeConstraint(34984, 34984), ValueRangeConstraint(37120, 37120), ValueRangeConstraint(37376, 37376), )).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfStagTPID.setStatus('current')
bridgeIfStagId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfStagId.setStatus('current')
bridgeIfStagStripAndInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfStagStripAndInsert.setStatus('current')
bridgeIfStagOutgoingCOSOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sTagCOSDisable", 1), ("sTagCOSAll", 2))).clone('sTagCOSDisable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfStagOutgoingCOSOption.setStatus('current')
bridgeIfStagCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfStagCOS.setStatus('current')
bridgeIfStagOutgoingCOSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfStagOutgoingCOSValue.setStatus('current')
bridgeIfMcastControlList = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 27), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfMcastControlList.setStatus('current')
bridgeIfMaxVideoStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfMaxVideoStreams.setStatus('current')
bridgeIfIsPPPoA = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 29), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfIsPPPoA.setStatus('current')
bridgeIfFloodUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfFloodUnknown.setStatus('current')
bridgeIfFloodMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 31), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfFloodMulticast.setStatus('current')
bridgeIfEgressPacketRuleGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 32), PacketRuleGroupIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfEgressPacketRuleGroupIndex.setStatus('current')
bridgeIfTableBasedFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 33), Bits().clone(namedValues=NamedValues(("mac", 0), ("ip", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfTableBasedFilter.setStatus('current')
bridgeIfDhcpLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 34), Bits().clone(namedValues=NamedValues(("mac", 0), ("ip", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfDhcpLearn.setStatus('current')
bridgeIfOnDemandStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("bytes", 3))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfOnDemandStatsEnabled.setStatus('current')
bridgeIfMvrVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfMvrVlan.setStatus('current')
bridgeIfVlanXlateFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfVlanXlateFrom.setStatus('current')
bridgeIfSlanXlateFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfSlanXlateFrom.setStatus('current')
bridgeIfBridgeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 39), BridgeState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeIfBridgeState.setStatus('current')
bridgeIfUnblock = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeIfUnblock.setStatus('current')
bridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("uplink", 1), ("downlink", 2), ("intralink", 4), ("tls", 6), ("rlink", 8), ("pppoa", 9), ("wire", 10), ("mvr", 11), ("user", 12), ("downlinkVideo", 13), ("downlinkData", 14), ("downlinkPPPoE", 15), ("downlinkP2P", 16), ("downlinkVoice", 17), ("downlinkUpstreamMcast", 18), ("ipobTls", 19), ("ipobUplink", 20), ("ipobDownlink", 21)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeType.setStatus('current')
bridgeIfGponGemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeIfGponGemPortId.setStatus('current')
bridgeIfGponTrafficProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeIfGponTrafficProfile.setStatus('current')
bridgeIfIncomingCOSOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incomingCOSOptionDisable", 1), ("incomingCOSOptionAll", 2))).clone('incomingCOSOptionDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeIfIncomingCOSOption.setStatus('current')
bridgeIfStagIncomingCOSOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stagIncomingCOSOptionDisable", 1), ("stagIncomingCOSOptionAll", 2))).clone('stagIncomingCOSOptionDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeIfStagIncomingCOSOption.setStatus('current')
staticBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3), )
if mibBuilder.loadTexts: staticBridgeTable.setStatus('current')
staticBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeAddressType"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVlanId"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeMacOrIpAddress"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagId"))
if mibBuilder.loadTexts: staticBridgeEntry.setStatus('current')
staticBridgeMacOrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 1), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: staticBridgeMacOrIpAddress.setStatus('current')
staticBridgeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7, 8, 9, 10, 13, 14, 15, 720901))).clone(namedValues=NamedValues(("macAddr", 1), ("ipAddr", 2), ("vlanIdAddr", 3), ("globalAddr", 4), ("intralinkAddr", 7), ("globalIntralinkAddr", 8), ("dhcpIpAddr", 9), ("dhcpMacAddr", 10), ("mvrAddr", 13), ("vlanParms", 14), ("secMvrAddr", 15), ("dhcpAllowOui", 720901))))
if mibBuilder.loadTexts: staticBridgeAddressType.setStatus('current')
staticBridgeMulticastAging = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgeMulticastAging.setStatus('current')
staticBridgeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 4), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgeRowStatus.setStatus('current')
staticBridgeFlapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("disable", 2), ("enable", 3), ("fast", 4))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgeFlapControl.setStatus('current')
staticBridgeUnicastAging = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgeUnicastAging.setStatus('current')
staticBridgeIgmpQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgeIgmpQueryInterval.setStatus('current')
staticBridgeFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 8), Bits().clone(namedValues=NamedValues(("igmpProcessJoinAndLeave", 0), ("igmpRespondToQuery", 1), ("igmpUseBridgeIpAddress", 2), ("forceIGMPv2Down", 3), ("forceIGMPv2Up", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgeFlags.setStatus('current')
staticBridgeIgmpCustomIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgeIgmpCustomIpAddress.setStatus('current')
staticBridgeLoopPrevention = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("blockAsym", 1), ("blockAll", 2), ("blockAsymAuto", 3), ("blockAllAuto", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticBridgeLoopPrevention.setStatus('current')
staticBridgeIgmpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgeIgmpDscp.setStatus('current')
bridgeIfLookupTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 4), )
if mibBuilder.loadTexts: bridgeIfLookupTable.setStatus('current')
bridgeIfLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 4, 1), ).setIndexNames((0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfAddressType"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfMacOrIpAddress"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVlanId"), (0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagId"))
if mibBuilder.loadTexts: bridgeIfLookupEntry.setStatus('current')
bridgeIfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unicastMac", 1), ("multicastMac", 2), ("ipAddress", 3), ("dhcpMac", 4), ("dhcpIp", 5), ("ipV6Address", 6), ("dhcpV6Mac", 7), ("dhcpV6Ip", 8))))
if mibBuilder.loadTexts: bridgeIfAddressType.setStatus('current')
bridgeIfMacOrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 4, 1, 2), PhysAddress())
if mibBuilder.loadTexts: bridgeIfMacOrIpAddress.setStatus('current')
bridgeIfLookupStaticOrDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticEntry", 1), ("dynamicEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeIfLookupStaticOrDynamic.setStatus('current')
bridgeIfLookupFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 4, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeIfLookupFlush.setStatus('current')
bridgeAddressLookupTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 5), )
if mibBuilder.loadTexts: bridgeAddressLookupTable.setStatus('current')
bridgeAddressLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfAddressType"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfMacOrIpAddress"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVlanId"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagId"))
if mibBuilder.loadTexts: bridgeAddressLookupEntry.setStatus('current')
bridgeAddressLookupStaticOrDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticEntry", 1), ("dynamicEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAddressLookupStaticOrDynamic.setStatus('current')
bridgeAddressLookupFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAddressLookupFlush.setStatus('current')
packetRuleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6))
packetRuleGroupIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 1), PacketRuleGroupIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetRuleGroupIndexNext.setStatus('current')
packetRuleGroupNextIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 2), )
if mibBuilder.loadTexts: packetRuleGroupNextIndexTable.setStatus('current')
packetRuleGroupNextIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 2, 1), ).setIndexNames((0, "ZHONE-COM-BRIDGE-REC-MIB", "packetRuleGroupIndex"))
if mibBuilder.loadTexts: packetRuleGroupNextIndexEntry.setStatus('current')
packetRuleGroupMemberNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 2, 1, 1), PacketRuleGroupIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetRuleGroupMemberNextIndex.setStatus('current')
packetRuleTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3), )
if mibBuilder.loadTexts: packetRuleTable.setStatus('current')
packetRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1), ).setIndexNames((0, "ZHONE-COM-BRIDGE-REC-MIB", "packetRuleGroupIndex"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "packetRuleGroupMemberIndex"))
if mibBuilder.loadTexts: packetRuleEntry.setStatus('current')
packetRuleGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: packetRuleGroupMemberIndex.setStatus('current')
packetRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(37, 38, 41, 42, 43, 44, 45, 46, 97, 98, 99, 100, 103, 104, 114, 120))).clone(namedValues=NamedValues(("dstMacSwapStatic", 37), ("dstMacSwapDynamic", 38), ("dscpToCos", 41), ("promoteFirstEncapsulationVlan", 42), ("filterFirstEncapsulationVlan", 43), ("promoteSecondEncapsulationVlan", 44), ("filterSecondEncapsulationVlan", 45), ("bridgeStormDetect", 46), ("bridgeInsertOption82", 97), ("dhcpRelay", 98), ("bridgeInsertPPPoEVendorTag", 99), ("rateLimitDiscard", 100), ("colorAwareRateLimitDiscard", 103), ("aclAllow", 104), ("bridgeForbidOui", 114), ("aclDeny", 120)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packetRuleType.setStatus('current')
packetRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packetRuleValue.setStatus('current')
packetRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 4), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packetRuleRowStatus.setStatus('current')
packetRuleValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packetRuleValue2.setStatus('current')
packetRuleValue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packetRuleValue3.setStatus('current')
packetRuleValue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packetRuleValue4.setStatus('current')
packetRuleValue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packetRuleValue5.setStatus('current')
packetRuleGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 9), PacketRuleGroupIndex().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: packetRuleGroupIndex.setStatus('current')
packetRuleValue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packetRuleValue6.setStatus('current')
packetRuleValue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 6, 3, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packetRuleValue7.setStatus('current')
bridgePPPoETable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 7), )
if mibBuilder.loadTexts: bridgePPPoETable.setStatus('current')
bridgePPPoEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bridgePPPoEEntry.setStatus('current')
bridgePPPoEBrasMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePPPoEBrasMac.setStatus('current')
bridgePPPoELocalHostMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePPPoELocalHostMac.setStatus('current')
bridgePPPoEEIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 7, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePPPoEEIfIndex.setStatus('current')
bridgePPPoESessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePPPoESessionID.setStatus('current')
bridgePPPoESlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePPPoESlanId.setStatus('current')
bridgePPPoEVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePPPoEVlanId.setStatus('current')
bridgePPPoEEncapLLC = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vcmux", 1), ("llc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePPPoEEncapLLC.setStatus('current')
stpParam = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 7, 8))
stpParamName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 8, 1), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpParamName.setStatus('current')
stpParamRevision = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpParamRevision.setStatus('current')
stpParamBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 8, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4096, 61440)).clone(36864)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpParamBridgePriority.setStatus('current')
stpParamForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 8, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpParamForceVersion.setStatus('current')
stpParamFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 20)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpParamFwdDelay.setStatus('current')
stpParamHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 8, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpParamHelloTime.setStatus('current')
stpParamMigrateTime = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 8, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpParamMigrateTime.setStatus('current')
stpParamTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 8, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpParamTxHoldCount.setStatus('current')
stpParamMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 8, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 20)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpParamMaxAge.setStatus('current')
stpBindTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 9), )
if mibBuilder.loadTexts: stpBindTable.setStatus('current')
stpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "stpBindInstanceID"))
if mibBuilder.loadTexts: stpBindEntry.setStatus('current')
stpBindInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: stpBindInstanceID.setStatus('current')
stpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 9, 1, 2), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stpBindRowStatus.setStatus('current')
stpBindPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stpBindPortPriority.setStatus('current')
mstpInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 10), )
if mibBuilder.loadTexts: mstpInstanceTable.setStatus('current')
mstpInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 10, 1), ).setIndexNames((0, "ZHONE-COM-BRIDGE-REC-MIB", "stpBindInstanceID"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVlanId"))
if mibBuilder.loadTexts: mstpInstanceEntry.setStatus('current')
mstpInstanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 10, 1, 1), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstanceRowStatus.setStatus('current')
mstpInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 10, 1, 2), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstanceName.setStatus('current')
bridgeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11), )
if mibBuilder.loadTexts: bridgeStatsTable.setStatus('current')
bridgeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bridgeStatsEntry.setStatus('current')
bridgeStatsUcastRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsUcastRcvd.setStatus('current')
bridgeStatsMcastRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsMcastRcvd.setStatus('current')
bridgeStatsBcastRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBcastRcvd.setStatus('current')
bridgeStatsUcastSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsUcastSent.setStatus('current')
bridgeStatsMcastSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsMcastSent.setStatus('current')
bridgeStatsBcastSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBcastSent.setStatus('current')
bridgeStatsErrorSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsErrorSent.setStatus('current')
bridgeOnDemandStatsRulesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeOnDemandStatsRulesSupported.setStatus('current')
bridgeOnDemandStatsRulesRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeOnDemandStatsRulesRemaining.setStatus('current')
bridgeStatsBSDUcastBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBSDUcastBlocked.setStatus('current')
bridgeStatsBSDMcastBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBSDMcastBlocked.setStatus('current')
bridgeStatsBSDBcastBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBSDBcastBlocked.setStatus('current')
bridgeStatsBSDAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBSDAlarmCount.setStatus('current')
bridgeStatsBytesRcvdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBytesRcvdCount.setStatus('current')
bridgeStatsBytesSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBytesSentCount.setStatus('current')
bridgeStatsTicksLastCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTicksLastCleared.setStatus('current')
bridgeStatsTicksNow = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTicksNow.setStatus('current')
bridgeStatsTicksPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 11, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTicksPerSecond.setStatus('current')
bridgeCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 7, 12))
bridgeCmdOperation = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clrStats", 1), ("clrIgmpStats", 2), ("unblock", 3), ("flush", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeCmdOperation.setStatus('current')
bridgeCmdFilterMask = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 12, 2), Bits().clone(namedValues=NamedValues(("filterIfIndex", 0), ("filterVlan", 1), ("filterSlan", 2), ("filterSlot", 3), ("filterPort", 4), ("filterIpAddress", 5), ("filterMacAddress", 6), ("filterSecure", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeCmdFilterMask.setStatus('current')
bridgeCmdIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 12, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeCmdIfIndex.setStatus('current')
bridgeCmdVlanId = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeCmdVlanId.setStatus('current')
bridgeCmdSlanId = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeCmdSlanId.setStatus('current')
bridgeCmdSlot = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeCmdSlot.setStatus('current')
bridgeCmdPort = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 12, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeCmdPort.setStatus('current')
bridgeCmdIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 12, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeCmdIpAddress.setStatus('current')
bridgeCmdMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 12, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeCmdMacAddress.setStatus('current')
eapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13))
eapsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1), )
if mibBuilder.loadTexts: eapsConfigTable.setStatus('current')
eapsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1), ).setIndexNames((0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlan"))
if mibBuilder.loadTexts: eapsConfigEntry.setStatus('current')
eapsConfigPrimaryPortLineGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eapsConfigPrimaryPortLineGroup.setStatus('current')
eapsConfigSecondaryPortLineGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 2), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eapsConfigSecondaryPortLineGroup.setStatus('current')
eapsConfigControlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eapsConfigControlVlan.setStatus('current')
eapsConfigIsMasterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsConfigIsMasterNode.setStatus('current')
eapsConfigControlVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsConfigControlVlanPriority.setStatus('current')
eapsConfigDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 6), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsConfigDomainName.setStatus('current')
eapsConfigMsgTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 7), Integer32().clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsConfigMsgTxInterval.setStatus('current')
eapsConfigTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 8), Integer32().clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsConfigTimeout.setStatus('current')
eapsConfigMaxDroppedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 9), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsConfigMaxDroppedMessages.setStatus('current')
eapsConfigSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsConfigSnmpTrap.setStatus('current')
eapsConfigDomainEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsConfigDomainEnable.setStatus('current')
eapsConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 1, 1, 12), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsConfigRowStatus.setStatus('current')
eapsProtectedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 2), )
if mibBuilder.loadTexts: eapsProtectedVlanTable.setStatus('current')
eapsProtectedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 2, 1), ).setIndexNames((0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlan"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsProtectedVlanEntryIndex"))
if mibBuilder.loadTexts: eapsProtectedVlanEntry.setStatus('current')
eapsProtectedVlanEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eapsProtectedVlanEntryIndex.setStatus('current')
eapsProtectedVlanLowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsProtectedVlanLowerRange.setStatus('current')
eapsProtectedVlanUpperRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsProtectedVlanUpperRange.setStatus('current')
eapsProtectedVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 2, 1, 4), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eapsProtectedVlanRowStatus.setStatus('current')
eapsProtectedVlanDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 2, 1, 5), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsProtectedVlanDomainName.setStatus('current')
eapsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 3), )
if mibBuilder.loadTexts: eapsStatusTable.setStatus('current')
eapsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 3, 1), ).setIndexNames((0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlan"))
if mibBuilder.loadTexts: eapsStatusEntry.setStatus('current')
eapsPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 3, 1, 1), EapsState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsPrevState.setStatus('current')
eapsState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 3, 1, 2), EapsState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsState.setStatus('current')
eapsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 4), )
if mibBuilder.loadTexts: eapsStatsTable.setStatus('current')
eapsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 4, 1), ).setIndexNames((0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlan"))
if mibBuilder.loadTexts: eapsStatsEntry.setStatus('current')
eapsStatsTotCtrlMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapsStatsTotCtrlMsgSent.setStatus('current')
eapsStatsTotCtrlMsgRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapsStatsTotCtrlMsgRecvd.setStatus('current')
eapsTrapPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 5))
if mibBuilder.loadTexts: eapsTrapPrefix.setStatus('current')
eapsTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 5, 0))
if mibBuilder.loadTexts: eapsTraps.setStatus('current')
eapsStateChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 5, 0, 1)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlan"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigDomainName"))
if mibBuilder.loadTexts: eapsStateChange.setStatus('current')
eapsFailTimerExpFlagSet = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 5, 0, 2)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlan"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigDomainName"))
if mibBuilder.loadTexts: eapsFailTimerExpFlagSet.setStatus('current')
eapsFailTimerExpFlagClear = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 5, 0, 3)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlan"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigDomainName"))
if mibBuilder.loadTexts: eapsFailTimerExpFlagClear.setStatus('current')
eapsLinkDownRingComplete = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 5, 0, 4)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlan"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigDomainName"))
if mibBuilder.loadTexts: eapsLinkDownRingComplete.setStatus('current')
eapsTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6), )
if mibBuilder.loadTexts: eapsTopologyTable.setStatus('current')
eapsTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1), ).setIndexNames((0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsTopologyRing"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "eapsTopologyRowNumber"))
if mibBuilder.loadTexts: eapsTopologyEntry.setStatus('current')
eapsTopologyRing = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1))))
if mibBuilder.loadTexts: eapsTopologyRing.setStatus('current')
eapsTopologyRowNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47)))
if mibBuilder.loadTexts: eapsTopologyRowNumber.setStatus('current')
eapsTopologyDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1, 3), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsTopologyDomainName.setStatus('current')
eapsTopologyMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsTopologyMacAddr.setStatus('current')
eapsTopologyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsTopologyIpAddr.setStatus('current')
eapsTopologyType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("transit", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsTopologyType.setStatus('current')
eapsTopologyPrimaryLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1, 7), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsTopologyPrimaryLinkName.setStatus('current')
eapsTopologyPrimaryLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1, 8), EapsState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsTopologyPrimaryLinkState.setStatus('current')
eapsTopologySecondaryLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1, 9), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsTopologySecondaryLinkName.setStatus('current')
eapsTopologySecondaryLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 13, 6, 1, 10), EapsState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsTopologySecondaryLinkState.setStatus('current')
bridgeIgmpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14), )
if mibBuilder.loadTexts: bridgeIgmpStatsTable.setStatus('current')
bridgeIgmpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bridgeIgmpStatsEntry.setStatus('current')
genQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genQueryRx.setStatus('current')
genQueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genQueryTx.setStatus('current')
specQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specQueryRx.setStatus('current')
specQueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specQueryTx.setStatus('current')
v2ReportsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ReportsRx.setStatus('current')
v2ReportsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ReportsTx.setStatus('current')
leavesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leavesRx.setStatus('current')
leavesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leavesTx.setStatus('current')
unknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownRx.setStatus('current')
errorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorRx.setStatus('current')
actChans = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actChans.setStatus('current')
actHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actHosts.setStatus('current')
v3GenQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3GenQueryRx.setStatus('current')
v3GenQueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3GenQueryTx.setStatus('current')
v3SpecQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3SpecQueryRx.setStatus('current')
v3SpecQueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3SpecQueryTx.setStatus('current')
v3ReportsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ReportsRx.setStatus('current')
v3ReportsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 14, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ReportsTx.setStatus('current')
bridgeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 7, 15))
bridgeTrapPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 7, 15, 1))
if mibBuilder.loadTexts: bridgeTrapPrefix.setStatus('current')
bridgeTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 7, 15, 1, 0))
if mibBuilder.loadTexts: bridgeTraps.setStatus('current')
bridgeLoopDetection = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 7, 15, 1, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAlias"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeMacAddrString"))
if mibBuilder.loadTexts: bridgeLoopDetection.setStatus('current')
bridgeStormDetection = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 7, 15, 1, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAlias"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeMacAddrString"))
if mibBuilder.loadTexts: bridgeStormDetection.setStatus('current')
bridgeTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 7, 16))
bridgeMacAddrString = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 7, 16, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bridgeMacAddrString.setStatus('current')
bridgeIgmpTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 17), )
if mibBuilder.loadTexts: bridgeIgmpTable.setStatus('current')
bridgeIgmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "hostMac"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "mcastMac"))
if mibBuilder.loadTexts: bridgeIgmpEntry.setStatus('current')
slanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slanId.setStatus('current')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanId.setStatus('current')
mcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastMac.setStatus('current')
mcastIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 17, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastIP.setStatus('current')
hostMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 17, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMac.setStatus('current')
lastJoinTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastJoinTimer.setStatus('current')
staticBridgePathTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18), )
if mibBuilder.loadTexts: staticBridgePathTable.setStatus('current')
staticBridgePathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathAddressType"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVlanId"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathMacOrIpAddress"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagId"))
if mibBuilder.loadTexts: staticBridgePathEntry.setStatus('current')
staticBridgePathMacOrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 1), IpAddress())
if mibBuilder.loadTexts: staticBridgePathMacOrIpAddress.setStatus('current')
staticBridgePathAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7, 8, 9, 10, 13, 14, 15, 16, 17, 720901))).clone(namedValues=NamedValues(("macAddr", 1), ("ipAddr", 2), ("vlanIdAddr", 3), ("globalAddr", 4), ("intralinkAddr", 7), ("globalIntralinkAddr", 8), ("dhcpIpAddr", 9), ("dhcpMacAddr", 10), ("mvrAddr", 13), ("vlanParms", 14), ("secMvrAddr", 15), ("ipAddrV6", 16), ("dhcpIpAddrV6", 17), ("dhcpAllowOui", 720901))))
if mibBuilder.loadTexts: staticBridgePathAddressType.setStatus('current')
staticBridgePathMulticastAging = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgePathMulticastAging.setStatus('current')
staticBridgePathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 4), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgePathRowStatus.setStatus('current')
staticBridgePathFlapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("disable", 2), ("enable", 3), ("fast", 4))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgePathFlapControl.setStatus('current')
staticBridgePathUnicastAging = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgePathUnicastAging.setStatus('current')
staticBridgePathIgmpQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgePathIgmpQueryInterval.setStatus('current')
staticBridgePathFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 8), Bits().clone(namedValues=NamedValues(("igmpProcessJoinAndLeave", 0), ("igmpRespondToQuery", 1), ("igmpUseBridgeIpAddress", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgePathFlags.setStatus('current')
staticBridgePathIgmpCustomIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgePathIgmpCustomIpAddress.setStatus('current')
staticBridgePathLoopPrevention = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("blockAsym", 1), ("blockAll", 2), ("blockAsymAuto", 3), ("blockAllAuto", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticBridgePathLoopPrevention.setStatus('current')
staticBridgePathIgmpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 18, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticBridgePathIgmpDscp.setStatus('current')
bridgePathIfLookupTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 19), )
if mibBuilder.loadTexts: bridgePathIfLookupTable.setStatus('current')
bridgePathIfLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 19, 1), ).setIndexNames((0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgePathIfAddressType"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgePathIfMacOrIpAddress"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVlanId"), (0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagId"))
if mibBuilder.loadTexts: bridgePathIfLookupEntry.setStatus('current')
bridgePathIfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unicastMac", 1), ("multicastMac", 2), ("ipAddress", 3), ("dhcpMac", 4), ("dhcpIp", 5))))
if mibBuilder.loadTexts: bridgePathIfAddressType.setStatus('current')
bridgePathIfMacOrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 19, 1, 2), IpAddress())
if mibBuilder.loadTexts: bridgePathIfMacOrIpAddress.setStatus('current')
bridgePathIfLookupStaticOrDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticEntry", 1), ("dynamicEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePathIfLookupStaticOrDynamic.setStatus('current')
bridgePathIfLookupFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 19, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgePathIfLookupFlush.setStatus('current')
bridgePathAddressLookupTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 20), )
if mibBuilder.loadTexts: bridgePathAddressLookupTable.setStatus('current')
bridgePathAddressLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfAddressType"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgePathIfLookupStaticOrDynamic"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVlanId"), (0, "ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagId"))
if mibBuilder.loadTexts: bridgePathAddressLookupEntry.setStatus('current')
bridgePathAddressLookupStaticOrDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticEntry", 1), ("dynamicEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePathAddressLookupStaticOrDynamic.setStatus('current')
bridgePathAddressLookupFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 20, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgePathAddressLookupFlush.setStatus('current')
bridgeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 7, 21), )
if mibBuilder.loadTexts: bridgeStatusTable.setStatus('current')
bridgeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 7, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bridgeStatusEntry.setStatus('current')
bridgeStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 7, 21, 1, 1), BridgeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatusState.setStatus('current')
zhoneCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 9))
zhoneGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 9, 1))
zhoneBridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 23)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfMcastControlList"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfMaxVideoStreams"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfIsPPPoA"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfFloodUnknown"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfFloodMulticast"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfTableBasedFilter"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfDhcpLearn"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeUnicastAging"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeIgmpQueryInterval"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePPPoEBrasMac"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePPPoELocalHostMac"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePPPoEEIfIndex"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePPPoESessionID"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePPPoESlanId"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePPPoEVlanId"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePPPoEEncapLLC"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpParamName"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpParamRevision"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpParamBridgePriority"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpParamForceVersion"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpParamFwdDelay"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpParamHelloTime"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpParamMigrateTime"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpParamTxHoldCount"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpParamMaxAge"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpBindRowStatus"), ("ZHONE-COM-BRIDGE-REC-MIB", "stpBindPortPriority"), ("ZHONE-COM-BRIDGE-REC-MIB", "mstpInstanceRowStatus"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdOperation"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdFilterMask"), ("ZHONE-COM-BRIDGE-REC-MIB", "mstpInstanceName"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeFlags"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeIgmpCustomIpAddress"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfMvrVlan"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfVlanXlateFrom"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfSlanXlateFrom"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeMacAddrString"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfGponTrafficProfile"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfGponGemPortId"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeType"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathMulticastAging"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathRowStatus"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathFlapControl"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathUnicastAging"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathIgmpQueryInterval"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathFlags"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathIgmpCustomIpAddress"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathLoopPrevention"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgePathIgmpDscp"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePathIfLookupStaticOrDynamic"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePathIfLookupFlush"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfStagIncomingCOSOption"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfIncomingCOSOption"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfUnblock"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfOnDemandStatsEnabled"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeIfBridgeState"), ("ZHONE-COM-BRIDGE-REC-MIB", "staticBridgeIgmpDscp"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleValue6"), ("ZHONE-COM-BRIDGE-REC-MIB", "packetRuleValue7"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePathAddressLookupFlush"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgePathAddressLookupStaticOrDynamic"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatusState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneBridgeGroup = zhoneBridgeGroup.setStatus('current')
zhoneBridgeCmdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 76)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdOperation"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdFilterMask"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdIfIndex"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdVlanId"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdSlanId"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdSlot"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdPort"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdIpAddress"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeCmdMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneBridgeCmdGroup = zhoneBridgeCmdGroup.setStatus('current')
zhoneBridgeEapsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 77)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "eapsProtectedVlanEntryIndex"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsProtectedVlanLowerRange"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsProtectedVlanUpperRange"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsProtectedVlanRowStatus"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsProtectedVlanDomainName"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsPrevState"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsState"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsStatsTotCtrlMsgSent"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsStatsTotCtrlMsgRecvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneBridgeEapsGroup = zhoneBridgeEapsGroup.setStatus('current')
zhoneBridgeEapsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 78)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigPrimaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSecondaryPortLineGroup"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlan"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigIsMasterNode"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigControlVlanPriority"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigDomainName"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigMsgTxInterval"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigTimeout"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigMaxDroppedMessages"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigSnmpTrap"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigDomainEnable"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneBridgeEapsConfigGroup = zhoneBridgeEapsConfigGroup.setStatus('current')
zhoneBridgeEapsTopologyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 79)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "eapsTopologyDomainName"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsTopologyMacAddr"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsTopologyIpAddr"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsTopologyType"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsTopologyPrimaryLinkName"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsTopologyPrimaryLinkState"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsTopologySecondaryLinkName"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsTopologySecondaryLinkState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneBridgeEapsTopologyGroup = zhoneBridgeEapsTopologyGroup.setStatus('current')
zhoneBridgeNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 80)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "eapsStateChange"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsFailTimerExpFlagSet"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsFailTimerExpFlagClear"), ("ZHONE-COM-BRIDGE-REC-MIB", "eapsLinkDownRingComplete"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeLoopDetection"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStormDetection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneBridgeNotificationGroup = zhoneBridgeNotificationGroup.setStatus('current')
zhoneBridgeIgmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 81)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "slanId"), ("ZHONE-COM-BRIDGE-REC-MIB", "vlanId"), ("ZHONE-COM-BRIDGE-REC-MIB", "mcastMac"), ("ZHONE-COM-BRIDGE-REC-MIB", "mcastIP"), ("ZHONE-COM-BRIDGE-REC-MIB", "hostMac"), ("ZHONE-COM-BRIDGE-REC-MIB", "lastJoinTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneBridgeIgmpGroup = zhoneBridgeIgmpGroup.setStatus('current')
zhoneBridgeStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 82)).setObjects(("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsUcastRcvd"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsMcastRcvd"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsBcastRcvd"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsUcastSent"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsMcastSent"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsBcastSent"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsErrorSent"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeOnDemandStatsRulesSupported"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeOnDemandStatsRulesRemaining"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsBSDUcastBlocked"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsBSDMcastBlocked"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsBSDBcastBlocked"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsBSDAlarmCount"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsBytesRcvdCount"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsBytesSentCount"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsTicksLastCleared"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsTicksNow"), ("ZHONE-COM-BRIDGE-REC-MIB", "bridgeStatsTicksPerSecond"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneBridgeStatsGroup = zhoneBridgeStatsGroup.setStatus('current')
mibBuilder.exportSymbols("ZHONE-COM-BRIDGE-REC-MIB", stpParam=stpParam, eapsConfigMaxDroppedMessages=eapsConfigMaxDroppedMessages, stpParamMaxAge=stpParamMaxAge, v2ReportsTx=v2ReportsTx, bridgeOnDemandStatsRulesSupported=bridgeOnDemandStatsRulesSupported, bridgeIfLearnUnicast=bridgeIfLearnUnicast, bridgeIfVlanXlateFrom=bridgeIfVlanXlateFrom, eapsLinkDownRingComplete=eapsLinkDownRingComplete, packetRuleGroupMemberIndex=packetRuleGroupMemberIndex, stpBindPortPriority=stpBindPortPriority, bridgeCmdMacAddress=bridgeCmdMacAddress, eapsProtectedVlanLowerRange=eapsProtectedVlanLowerRange, leavesRx=leavesRx, staticBridgePathEntry=staticBridgePathEntry, bridgePathIfLookupEntry=bridgePathIfLookupEntry, packetRuleRowStatus=packetRuleRowStatus, bridgePathIfLookupFlush=bridgePathIfLookupFlush, eapsProtectedVlanEntry=eapsProtectedVlanEntry, bridgeCmdSlot=bridgeCmdSlot, eapsStatsTotCtrlMsgSent=eapsStatsTotCtrlMsgSent, bridgeIfVlanId=bridgeIfVlanId, bridgeIfLookupFlush=bridgeIfLookupFlush, eapsTopologyType=eapsTopologyType, bridgeOnDemandStatsRulesRemaining=bridgeOnDemandStatsRulesRemaining, staticBridgePathFlapControl=staticBridgePathFlapControl, mcastIP=mcastIP, bridgePathAddressLookupEntry=bridgePathAddressLookupEntry, stpParamMigrateTime=stpParamMigrateTime, bridgeIfOnDemandStatsEnabled=bridgeIfOnDemandStatsEnabled, eapsStateChange=eapsStateChange, mstpInstanceName=mstpInstanceName, packetRuleValue3=packetRuleValue3, bridgePathIfLookupStaticOrDynamic=bridgePathIfLookupStaticOrDynamic, bridgePathAddressLookupStaticOrDynamic=bridgePathAddressLookupStaticOrDynamic, eapsConfigPrimaryPortLineGroup=eapsConfigPrimaryPortLineGroup, staticBridgePathUnicastAging=staticBridgePathUnicastAging, bridgeIfVpi=bridgeIfVpi, genQueryRx=genQueryRx, packetRuleValue6=packetRuleValue6, bridgeIfMaxUnicast=bridgeIfMaxUnicast, bridgeIfOutgoingCOSOption=bridgeIfOutgoingCOSOption, eapsTopologyTable=eapsTopologyTable, bridgeType=bridgeType, bridgeGroup=bridgeGroup, bridgeIfStagId=bridgeIfStagId, bridgeCmdSlanId=bridgeCmdSlanId, bridgeAddressLookupTable=bridgeAddressLookupTable, bridgeIgmpTable=bridgeIgmpTable, bridgeIfStripAndInsert=bridgeIfStripAndInsert, NetworkAddress=NetworkAddress, bridgeCmdOperation=bridgeCmdOperation, staticBridgeIgmpDscp=staticBridgeIgmpDscp, staticBridgeTable=staticBridgeTable, v3SpecQueryRx=v3SpecQueryRx, eapsProtectedVlanRowStatus=eapsProtectedVlanRowStatus, bridgeIfStagStripAndInsert=bridgeIfStagStripAndInsert, bridgeIfIsPPPoA=bridgeIfIsPPPoA, bridgeCmd=bridgeCmd, eapsStatsTable=eapsStatsTable, BridgeState=BridgeState, bridgeStatsTicksNow=bridgeStatsTicksNow, packetRuleValue7=packetRuleValue7, eapsTopologySecondaryLinkName=eapsTopologySecondaryLinkName, specQueryTx=specQueryTx, staticBridgePathIgmpQueryInterval=staticBridgePathIgmpQueryInterval, bridgeIfCustomDHCP=bridgeIfCustomDHCP, bridgeIgmpStatsTable=bridgeIgmpStatsTable, bridgeIfRowStatus=bridgeIfRowStatus, specQueryRx=specQueryRx, eapsTopologyDomainName=eapsTopologyDomainName, eapsConfigDomainName=eapsConfigDomainName, eapsTopologyEntry=eapsTopologyEntry, zhoneBridgeNotificationGroup=zhoneBridgeNotificationGroup, zhoneBridgeStatsGroup=zhoneBridgeStatsGroup, eapsConfigControlVlanPriority=eapsConfigControlVlanPriority, actHosts=actHosts, bridgeCmdIpAddress=bridgeCmdIpAddress, leavesTx=leavesTx, stpParamName=stpParamName, EapsState=EapsState, bridgePathIfLookupTable=bridgePathIfLookupTable, PYSNMP_MODULE_ID=bridgeRecord, bridgeIfFloodMulticast=bridgeIfFloodMulticast, bridgeLoopDetection=bridgeLoopDetection, staticBridgeMulticastAging=staticBridgeMulticastAging, packetRuleValue2=packetRuleValue2, eapsProtectedVlanUpperRange=eapsProtectedVlanUpperRange, bridgeIfGponTrafficProfile=bridgeIfGponTrafficProfile, staticBridgeIgmpCustomIpAddress=staticBridgeIgmpCustomIpAddress, bridgeAddressLookupStaticOrDynamic=bridgeAddressLookupStaticOrDynamic, packetRuleTable=packetRuleTable, staticBridgePathMulticastAging=staticBridgePathMulticastAging, v3GenQueryRx=v3GenQueryRx, bridgeIfBridgeState=bridgeIfBridgeState, staticBridgePathAddressType=staticBridgePathAddressType, bridgeStatsBcastRcvd=bridgeStatsBcastRcvd, staticBridgePathTable=staticBridgePathTable, mstpInstanceEntry=mstpInstanceEntry, errorRx=errorRx, bridgeIfFloodUnknown=bridgeIfFloodUnknown, eapsTopologyRowNumber=eapsTopologyRowNumber, bridgeIfAddressType=bridgeIfAddressType, bridgeIfForwardToDefault=bridgeIfForwardToDefault, bridgeStatsBSDBcastBlocked=bridgeStatsBSDBcastBlocked, bridgePPPoEBrasMac=bridgePPPoEBrasMac, staticBridgeMacOrIpAddress=staticBridgeMacOrIpAddress, bridgeIfUnblock=bridgeIfUnblock, eapsStatusEntry=eapsStatusEntry, staticBridgeFlags=staticBridgeFlags, eapsTopologyMacAddr=eapsTopologyMacAddr, bridgeTraps=bridgeTraps, staticBridgePathRowStatus=staticBridgePathRowStatus, bridgeStatsErrorSent=bridgeStatsErrorSent, bridgeIfGponGemPortId=bridgeIfGponGemPortId, zhoneCompliances=zhoneCompliances, eapsPrevState=eapsPrevState, bridgeIfStagTPID=bridgeIfStagTPID, slanId=slanId, zhoneGroups=zhoneGroups, bridgeCmdVlanId=bridgeCmdVlanId, bridgePPPoEEIfIndex=bridgePPPoEEIfIndex, bridgeMacAddrString=bridgeMacAddrString, bridgeIgmpEntry=bridgeIgmpEntry, bridgeIfLookupTable=bridgeIfLookupTable, bridgeStatsBcastSent=bridgeStatsBcastSent, eapsConfigMsgTxInterval=eapsConfigMsgTxInterval, stpBindRowStatus=stpBindRowStatus, eapsConfigEntry=eapsConfigEntry, packetRuleValue5=packetRuleValue5, staticBridgePathIgmpDscp=staticBridgePathIgmpDscp, mstpInstanceTable=mstpInstanceTable, eapsConfigControlVlan=eapsConfigControlVlan, PacketRuleGroupIndex=PacketRuleGroupIndex, bridgePPPoELocalHostMac=bridgePPPoELocalHostMac, eapsConfigTimeout=eapsConfigTimeout, bridgePPPoESlanId=bridgePPPoESlanId, staticBridgePathLoopPrevention=staticBridgePathLoopPrevention, bridgeIfOutgoingCOSValue=bridgeIfOutgoingCOSValue, zhoneBridgeEapsGroup=zhoneBridgeEapsGroup, stpBindTable=stpBindTable, v3SpecQueryTx=v3SpecQueryTx, staticBridgeLoopPrevention=staticBridgeLoopPrevention, bridgeIfLookupStaticOrDynamic=bridgeIfLookupStaticOrDynamic, v3ReportsTx=v3ReportsTx, bridgeInterfaceEntry=bridgeInterfaceEntry, bridgeIfVlanIdCOS=bridgeIfVlanIdCOS, bridgePPPoEEntry=bridgePPPoEEntry, bridgeStatsTicksLastCleared=bridgeStatsTicksLastCleared, bridgePathAddressLookupTable=bridgePathAddressLookupTable, bridgeStatsBSDAlarmCount=bridgeStatsBSDAlarmCount, bridgeIfTableBasedFilter=bridgeIfTableBasedFilter, stpParamRevision=stpParamRevision, packetRuleGroupMemberNextIndex=packetRuleGroupMemberNextIndex, eapsTopologyRing=eapsTopologyRing, bridgeIfMacOrIpAddress=bridgeIfMacOrIpAddress, bridgeCmdIfIndex=bridgeCmdIfIndex, eapsConfigIsMasterNode=eapsConfigIsMasterNode, bridgeIfMvrVlan=bridgeIfMvrVlan, zhoneBridgeEapsConfigGroup=zhoneBridgeEapsConfigGroup, packetRuleValue=packetRuleValue, bridgeAddressLookupEntry=bridgeAddressLookupEntry, bridgeCmdPort=bridgeCmdPort, eapsGroup=eapsGroup, bridgeIfEgressPacketRuleGroupIndex=bridgeIfEgressPacketRuleGroupIndex, bridgeStatsMcastRcvd=bridgeStatsMcastRcvd, packetRuleGroup=packetRuleGroup, v3GenQueryTx=v3GenQueryTx, eapsProtectedVlanEntryIndex=eapsProtectedVlanEntryIndex, eapsFailTimerExpFlagClear=eapsFailTimerExpFlagClear, bridgePathIfAddressType=bridgePathIfAddressType, bridgeStatusEntry=bridgeStatusEntry, v3ReportsRx=v3ReportsRx, bridgeIfStagIncomingCOSOption=bridgeIfStagIncomingCOSOption, packetRuleGroupIndex=packetRuleGroupIndex, unknownRx=unknownRx, bridgeIfIngressPacketRuleGroupIndex=bridgeIfIngressPacketRuleGroupIndex, bridgeAddressLookupFlush=bridgeAddressLookupFlush, stpParamForceVersion=stpParamForceVersion, eapsTopologySecondaryLinkState=eapsTopologySecondaryLinkState, bridgePPPoEEncapLLC=bridgePPPoEEncapLLC, eapsState=eapsState, bridgeStatsTicksPerSecond=bridgeStatsTicksPerSecond, zhoneBridgeCmdGroup=zhoneBridgeCmdGroup, bridgeLowerIfIndex=bridgeLowerIfIndex, eapsStatsEntry=eapsStatsEntry, bridgeStatusState=bridgeStatusState, bridgeInterfaceTable=bridgeInterfaceTable, bridgeStatsBytesRcvdCount=bridgeStatsBytesRcvdCount, bridgeIfStagOutgoingCOSValue=bridgeIfStagOutgoingCOSValue, packetRuleValue4=packetRuleValue4, bridgePathAddressLookupFlush=bridgePathAddressLookupFlush, staticBridgeAddressType=staticBridgeAddressType, stpParamHelloTime=stpParamHelloTime, lastJoinTimer=lastJoinTimer, zhoneBridgeIgmpGroup=zhoneBridgeIgmpGroup, eapsConfigRowStatus=eapsConfigRowStatus, bridgeIfVci=bridgeIfVci, staticBridgePathIgmpCustomIpAddress=staticBridgePathIgmpCustomIpAddress, bridgeIfForwardToUnicast=bridgeIfForwardToUnicast, stpParamFwdDelay=stpParamFwdDelay, bridgeIfIncomingCOSOption=bridgeIfIncomingCOSOption, packetRuleEntry=packetRuleEntry, eapsTopologyPrimaryLinkName=eapsTopologyPrimaryLinkName, actChans=actChans, bridgeIfLearnIp=bridgeIfLearnIp, bridgeIgmpStatsEntry=bridgeIgmpStatsEntry, bridgeIfSlanXlateFrom=bridgeIfSlanXlateFrom, eapsConfigDomainEnable=eapsConfigDomainEnable, packetRuleGroupNextIndexEntry=packetRuleGroupNextIndexEntry, stpParamBridgePriority=stpParamBridgePriority, stpParamTxHoldCount=stpParamTxHoldCount, bridgeIfLookupEntry=bridgeIfLookupEntry, bridgeIfStagOutgoingCOSOption=bridgeIfStagOutgoingCOSOption, bridgeTrapPrefix=bridgeTrapPrefix, packetRuleGroupIndexNext=packetRuleGroupIndexNext, genQueryTx=genQueryTx, mcastMac=mcastMac, eapsConfigSecondaryPortLineGroup=eapsConfigSecondaryPortLineGroup, staticBridgePathFlags=staticBridgePathFlags, eapsTopologyIpAddr=eapsTopologyIpAddr, bridgeStatsUcastRcvd=bridgeStatsUcastRcvd, bridgePPPoETable=bridgePPPoETable, bridgeStatsEntry=bridgeStatsEntry, bridgeIfForwardToMulticast=bridgeIfForwardToMulticast, mstpInstanceRowStatus=mstpInstanceRowStatus, staticBridgeFlapControl=staticBridgeFlapControl, eapsConfigTable=eapsConfigTable, bridgeIfDhcpLearn=bridgeIfDhcpLearn, bridgeTrapObjects=bridgeTrapObjects, stpBindInstanceID=stpBindInstanceID, bridgeStatsUcastSent=bridgeStatsUcastSent, v2ReportsRx=v2ReportsRx, packetRuleType=packetRuleType, bridgeStatsBSDMcastBlocked=bridgeStatsBSDMcastBlocked, eapsProtectedVlanTable=eapsProtectedVlanTable, bridgeCmdFilterMask=bridgeCmdFilterMask, eapsTrapPrefix=eapsTrapPrefix, bridgePathIfMacOrIpAddress=bridgePathIfMacOrIpAddress, bridgeStatsBSDUcastBlocked=bridgeStatsBSDUcastBlocked, eapsStatusTable=eapsStatusTable, bridgeStatusTable=bridgeStatusTable, bridgeIfFilterBroadcast=bridgeIfFilterBroadcast, staticBridgeUnicastAging=staticBridgeUnicastAging, bridgePPPoEVlanId=bridgePPPoEVlanId, eapsProtectedVlanDomainName=eapsProtectedVlanDomainName, staticBridgePathMacOrIpAddress=staticBridgePathMacOrIpAddress, bridgeIfStagCOS=bridgeIfStagCOS, bridgeRecord=bridgeRecord, eapsFailTimerExpFlagSet=eapsFailTimerExpFlagSet, bridgeInterfaceGroup=bridgeInterfaceGroup, zhoneBridgeGroup=zhoneBridgeGroup, bridgeIfCustomARP=bridgeIfCustomARP, bridgePPPoESessionID=bridgePPPoESessionID, vlanId=vlanId)
mibBuilder.exportSymbols("ZHONE-COM-BRIDGE-REC-MIB", packetRuleGroupNextIndexTable=packetRuleGroupNextIndexTable, stpBindEntry=stpBindEntry, eapsTraps=eapsTraps, eapsTopologyPrimaryLinkState=eapsTopologyPrimaryLinkState, bridgeStatsBytesSentCount=bridgeStatsBytesSentCount, bridgeIfLearnMulticast=bridgeIfLearnMulticast, bridgeIfMcastControlList=bridgeIfMcastControlList, staticBridgeEntry=staticBridgeEntry, bridgeStatsTable=bridgeStatsTable, bridgeStatsMcastSent=bridgeStatsMcastSent, staticBridgeIgmpQueryInterval=staticBridgeIgmpQueryInterval, bridgeStormDetection=bridgeStormDetection, hostMac=hostMac, eapsConfigSnmpTrap=eapsConfigSnmpTrap, eapsStatsTotCtrlMsgRecvd=eapsStatsTotCtrlMsgRecvd, staticBridgeRowStatus=staticBridgeRowStatus, bridgeIfMaxVideoStreams=bridgeIfMaxVideoStreams, zhoneBridgeEapsTopologyGroup=zhoneBridgeEapsTopologyGroup)
