#
# PySNMP MIB module Nortel-Magellan-Passport-MpaNetworkLinkMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-MpaNetworkLinkMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:18:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
RowPointer, PassportCounter64, Integer32, DisplayString, RowStatus, StorageType, Counter32, Gauge32, InterfaceIndex, Unsigned32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "RowPointer", "PassportCounter64", "Integer32", "DisplayString", "RowStatus", "StorageType", "Counter32", "Gauge32", "InterfaceIndex", "Unsigned32")
Hex, HexString, Unsigned64, DigitString, AsciiString, Link, EnterpriseDateAndTime, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Hex", "HexString", "Unsigned64", "DigitString", "AsciiString", "Link", "EnterpriseDateAndTime", "NonReplicated")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, iso, Counter64, ObjectIdentity, Counter32, MibIdentifier, NotificationType, Gauge32, IpAddress, ModuleIdentity, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "iso", "Counter64", "ObjectIdentity", "Counter32", "MibIdentifier", "NotificationType", "Gauge32", "IpAddress", "ModuleIdentity", "Unsigned32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mpaNetworkLinkMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 119))
mpanl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123))
mpanlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 1), )
if mibBuilder.loadTexts: mpanlRowStatusTable.setStatus('mandatory')
mpanlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"))
if mibBuilder.loadTexts: mpanlRowStatusEntry.setStatus('mandatory')
mpanlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlRowStatus.setStatus('mandatory')
mpanlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlComponentName.setStatus('mandatory')
mpanlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlStorageType.setStatus('mandatory')
mpanlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mpanlIndex.setStatus('mandatory')
mpanlCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 10), )
if mibBuilder.loadTexts: mpanlCidDataTable.setStatus('mandatory')
mpanlCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"))
if mibBuilder.loadTexts: mpanlCidDataEntry.setStatus('mandatory')
mpanlCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlCustomerIdentifier.setStatus('mandatory')
mpanlProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 12), )
if mibBuilder.loadTexts: mpanlProvTable.setStatus('mandatory')
mpanlProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"))
if mibBuilder.loadTexts: mpanlProvEntry.setStatus('mandatory')
mpanlCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlCommentText.setStatus('mandatory')
mpanlEmissionPriorityQsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 13), )
if mibBuilder.loadTexts: mpanlEmissionPriorityQsTable.setStatus('mandatory')
mpanlEmissionPriorityQsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"))
if mibBuilder.loadTexts: mpanlEmissionPriorityQsEntry.setStatus('mandatory')
mpanlNumberOfEmissionQs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), )).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlNumberOfEmissionQs.setStatus('mandatory')
mpanlStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14), )
if mibBuilder.loadTexts: mpanlStateTable.setStatus('mandatory')
mpanlStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"))
if mibBuilder.loadTexts: mpanlStateEntry.setStatus('mandatory')
mpanlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlAdminState.setStatus('mandatory')
mpanlOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlOperationalState.setStatus('mandatory')
mpanlUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlUsageState.setStatus('mandatory')
mpanlAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlAvailabilityStatus.setStatus('mandatory')
mpanlProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlProceduralStatus.setStatus('mandatory')
mpanlControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlControlStatus.setStatus('mandatory')
mpanlAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlAlarmStatus.setStatus('mandatory')
mpanlStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlStandbyStatus.setStatus('mandatory')
mpanlUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlUnknownStatus.setStatus('mandatory')
mpanlStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 16), )
if mibBuilder.loadTexts: mpanlStatsTable.setStatus('mandatory')
mpanlStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"))
if mibBuilder.loadTexts: mpanlStatsEntry.setStatus('mandatory')
mpanlLastUnknownDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlLastUnknownDlci.setStatus('mandatory')
mpanlUnknownDlciFramesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlUnknownDlciFramesFromIf.setStatus('mandatory')
mpanlInvalidHeaderFramesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlInvalidHeaderFramesFromIf.setStatus('mandatory')
mpanlTrafficStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 17), )
if mibBuilder.loadTexts: mpanlTrafficStatsTable.setStatus('mandatory')
mpanlTrafficStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"))
if mibBuilder.loadTexts: mpanlTrafficStatsEntry.setStatus('mandatory')
mpanlFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 17, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFrmToIf.setStatus('mandatory')
mpanlOctetToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 17, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlOctetToIf.setStatus('mandatory')
mpanlFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 17, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFrmFromIf.setStatus('mandatory')
mpanlOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlOctetFromIf.setStatus('mandatory')
mpanlIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 23), )
if mibBuilder.loadTexts: mpanlIfEntryTable.setStatus('mandatory')
mpanlIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 23, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"))
if mibBuilder.loadTexts: mpanlIfEntryEntry.setStatus('mandatory')
mpanlIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlIfAdminStatus.setStatus('mandatory')
mpanlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 23, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlIfIndex.setStatus('mandatory')
mpanlOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 24), )
if mibBuilder.loadTexts: mpanlOperStatusTable.setStatus('mandatory')
mpanlOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 24, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"))
if mibBuilder.loadTexts: mpanlOperStatusEntry.setStatus('mandatory')
mpanlSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSnmpOperStatus.setStatus('mandatory')
mpanlOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 25), )
if mibBuilder.loadTexts: mpanlOperTable.setStatus('mandatory')
mpanlOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 25, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"))
if mibBuilder.loadTexts: mpanlOperEntry.setStatus('mandatory')
mpanlRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlRoundTripDelay.setStatus('mandatory')
mpanlFrmToIfByQueueTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 350), )
if mibBuilder.loadTexts: mpanlFrmToIfByQueueTable.setStatus('mandatory')
mpanlFrmToIfByQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 350, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFrmToIfByQueueIndex"))
if mibBuilder.loadTexts: mpanlFrmToIfByQueueEntry.setStatus('mandatory')
mpanlFrmToIfByQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 350, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mpanlFrmToIfByQueueIndex.setStatus('mandatory')
mpanlFrmToIfByQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 350, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFrmToIfByQueueValue.setStatus('mandatory')
mpanlOctetToIfByQueueTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 351), )
if mibBuilder.loadTexts: mpanlOctetToIfByQueueTable.setStatus('mandatory')
mpanlOctetToIfByQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 351, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlOctetToIfByQueueIndex"))
if mibBuilder.loadTexts: mpanlOctetToIfByQueueEntry.setStatus('mandatory')
mpanlOctetToIfByQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 351, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mpanlOctetToIfByQueueIndex.setStatus('mandatory')
mpanlOctetToIfByQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 351, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlOctetToIfByQueueValue.setStatus('mandatory')
mpanlDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2))
mpanlDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 1), )
if mibBuilder.loadTexts: mpanlDnaRowStatusTable.setStatus('mandatory')
mpanlDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDnaIndex"))
if mibBuilder.loadTexts: mpanlDnaRowStatusEntry.setStatus('mandatory')
mpanlDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDnaRowStatus.setStatus('mandatory')
mpanlDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDnaComponentName.setStatus('mandatory')
mpanlDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDnaStorageType.setStatus('mandatory')
mpanlDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlDnaIndex.setStatus('mandatory')
mpanlDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 11), )
if mibBuilder.loadTexts: mpanlDnaOutgoingOptionsTable.setStatus('mandatory')
mpanlDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDnaIndex"))
if mibBuilder.loadTexts: mpanlDnaOutgoingOptionsEntry.setStatus('mandatory')
mpanlDnaDefaultTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlDnaDefaultTransferPriority.setStatus('mandatory')
mpanlDnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 13), )
if mibBuilder.loadTexts: mpanlDnaCallOptionsTable.setStatus('mandatory')
mpanlDnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDnaIndex"))
if mibBuilder.loadTexts: mpanlDnaCallOptionsEntry.setStatus('mandatory')
mpanlDnaAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlDnaAccountClass.setStatus('mandatory')
mpanlDnaAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 13, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlDnaAccountCollection.setStatus('mandatory')
mpanlDnaServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 13, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlDnaServiceExchange.setStatus('mandatory')
mpanlDnaEgressAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlDnaEgressAccounting.setStatus('mandatory')
mpanlFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3))
mpanlFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 1), )
if mibBuilder.loadTexts: mpanlFramerRowStatusTable.setStatus('mandatory')
mpanlFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFramerIndex"))
if mibBuilder.loadTexts: mpanlFramerRowStatusEntry.setStatus('mandatory')
mpanlFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlFramerRowStatus.setStatus('mandatory')
mpanlFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerComponentName.setStatus('mandatory')
mpanlFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerStorageType.setStatus('mandatory')
mpanlFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlFramerIndex.setStatus('mandatory')
mpanlFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 10), )
if mibBuilder.loadTexts: mpanlFramerProvTable.setStatus('mandatory')
mpanlFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFramerIndex"))
if mibBuilder.loadTexts: mpanlFramerProvEntry.setStatus('mandatory')
mpanlFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlFramerInterfaceName.setStatus('mandatory')
mpanlFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 11), )
if mibBuilder.loadTexts: mpanlFramerLinkTable.setStatus('mandatory')
mpanlFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFramerIndex"))
if mibBuilder.loadTexts: mpanlFramerLinkEntry.setStatus('mandatory')
mpanlFramerFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlFramerFlagsBetweenFrames.setStatus('mandatory')
mpanlFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 12), )
if mibBuilder.loadTexts: mpanlFramerStateTable.setStatus('mandatory')
mpanlFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFramerIndex"))
if mibBuilder.loadTexts: mpanlFramerStateEntry.setStatus('mandatory')
mpanlFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerAdminState.setStatus('mandatory')
mpanlFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerOperationalState.setStatus('mandatory')
mpanlFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerUsageState.setStatus('mandatory')
mpanlFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13), )
if mibBuilder.loadTexts: mpanlFramerStatsTable.setStatus('mandatory')
mpanlFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFramerIndex"))
if mibBuilder.loadTexts: mpanlFramerStatsEntry.setStatus('mandatory')
mpanlFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerFrmToIf.setStatus('mandatory')
mpanlFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerFrmFromIf.setStatus('mandatory')
mpanlFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerOctetFromIf.setStatus('mandatory')
mpanlFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerAborts.setStatus('mandatory')
mpanlFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerCrcErrors.setStatus('mandatory')
mpanlFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerLrcErrors.setStatus('mandatory')
mpanlFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerNonOctetErrors.setStatus('mandatory')
mpanlFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerOverruns.setStatus('mandatory')
mpanlFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerUnderruns.setStatus('mandatory')
mpanlFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerLargeFrmErrors.setStatus('mandatory')
mpanlFramerFrmModeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerFrmModeErrors.setStatus('mandatory')
mpanlFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 14), )
if mibBuilder.loadTexts: mpanlFramerUtilTable.setStatus('mandatory')
mpanlFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFramerIndex"))
if mibBuilder.loadTexts: mpanlFramerUtilEntry.setStatus('mandatory')
mpanlFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerNormPrioLinkUtilToIf.setStatus('mandatory')
mpanlFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 3, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
mpanlPrefixDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 4))
mpanlPrefixDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 4, 1), )
if mibBuilder.loadTexts: mpanlPrefixDnaRowStatusTable.setStatus('mandatory')
mpanlPrefixDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlPrefixDnaNumberingPlanIndicatorIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlPrefixDnaDataNetworkAddressIndex"))
if mibBuilder.loadTexts: mpanlPrefixDnaRowStatusEntry.setStatus('mandatory')
mpanlPrefixDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlPrefixDnaRowStatus.setStatus('mandatory')
mpanlPrefixDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlPrefixDnaComponentName.setStatus('mandatory')
mpanlPrefixDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlPrefixDnaStorageType.setStatus('mandatory')
mpanlPrefixDnaNumberingPlanIndicatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))))
if mibBuilder.loadTexts: mpanlPrefixDnaNumberingPlanIndicatorIndex.setStatus('mandatory')
mpanlPrefixDnaDataNetworkAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 4, 1, 1, 11), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: mpanlPrefixDnaDataNetworkAddressIndex.setStatus('mandatory')
mpanlDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5))
mpanlDlciRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 1), )
if mibBuilder.loadTexts: mpanlDlciRowStatusTable.setStatus('mandatory')
mpanlDlciRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"))
if mibBuilder.loadTexts: mpanlDlciRowStatusEntry.setStatus('mandatory')
mpanlDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciRowStatus.setStatus('mandatory')
mpanlDlciComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciComponentName.setStatus('mandatory')
mpanlDlciStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciStorageType.setStatus('mandatory')
mpanlDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 1007)))
if mibBuilder.loadTexts: mpanlDlciIndex.setStatus('mandatory')
mpanlDlciStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10), )
if mibBuilder.loadTexts: mpanlDlciStateTable.setStatus('mandatory')
mpanlDlciStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"))
if mibBuilder.loadTexts: mpanlDlciStateEntry.setStatus('mandatory')
mpanlDlciAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciAdminState.setStatus('mandatory')
mpanlDlciOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciOperationalState.setStatus('mandatory')
mpanlDlciUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciUsageState.setStatus('mandatory')
mpanlDlciAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciAvailabilityStatus.setStatus('mandatory')
mpanlDlciProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciProceduralStatus.setStatus('mandatory')
mpanlDlciControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciControlStatus.setStatus('mandatory')
mpanlDlciAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciAlarmStatus.setStatus('mandatory')
mpanlDlciStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciStandbyStatus.setStatus('mandatory')
mpanlDlciUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciUnknownStatus.setStatus('mandatory')
mpanlDlciCalldTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 11), )
if mibBuilder.loadTexts: mpanlDlciCalldTable.setStatus('mandatory')
mpanlDlciCalldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"))
if mibBuilder.loadTexts: mpanlDlciCalldEntry.setStatus('mandatory')
mpanlDlciQ933CallState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 6, 9, 10, 11, 12, 19, 20))).clone(namedValues=NamedValues(("null", 0), ("callInitiated", 1), ("outgoingCallProceeding", 3), ("callPresent", 6), ("incomingCallProceeding", 9), ("active", 10), ("disconnectRequest", 11), ("disconnectIndication", 12), ("releaseRequest", 19), ("notApplicable", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciQ933CallState.setStatus('mandatory')
mpanlDlciQ933CallReference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciQ933CallReference.setStatus('mandatory')
mpanlDlciSpOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 12), )
if mibBuilder.loadTexts: mpanlDlciSpOpTable.setStatus('mandatory')
mpanlDlciSpOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"))
if mibBuilder.loadTexts: mpanlDlciSpOpEntry.setStatus('mandatory')
mpanlDlciMaximumFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciMaximumFrameSize.setStatus('mandatory')
mpanlDlciCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciCommittedBurstSize.setStatus('mandatory')
mpanlDlciExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciExcessBurstSize.setStatus('mandatory')
mpanlDlciAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciAccounting.setStatus('mandatory')
mpanlDlciEmissionPriorityToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciEmissionPriorityToIf.setStatus('mandatory')
mpanlDlciTransferPriToNwk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciTransferPriToNwk.setStatus('mandatory')
mpanlDlciTransferPriFromNwk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciTransferPriFromNwk.setStatus('mandatory')
mpanlDlciStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13), )
if mibBuilder.loadTexts: mpanlDlciStatsTable.setStatus('mandatory')
mpanlDlciStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"))
if mibBuilder.loadTexts: mpanlDlciStatsEntry.setStatus('mandatory')
mpanlDlciFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciFrmToIf.setStatus('mandatory')
mpanlDlciFecnFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciFecnFrmToIf.setStatus('mandatory')
mpanlDlciBecnFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciBecnFrmToIf.setStatus('mandatory')
mpanlDlciBciToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciBciToSubnet.setStatus('mandatory')
mpanlDlciDeFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDeFrmToIf.setStatus('mandatory')
mpanlDlciDiscCongestedToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscCongestedToIf.setStatus('mandatory')
mpanlDlciDiscDeCongestedToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscDeCongestedToIf.setStatus('mandatory')
mpanlDlciFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciFrmFromIf.setStatus('mandatory')
mpanlDlciFecnFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciFecnFrmFromIf.setStatus('mandatory')
mpanlDlciBecnFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciBecnFrmFromIf.setStatus('mandatory')
mpanlDlciFciFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciFciFromSubnet.setStatus('mandatory')
mpanlDlciBciFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciBciFromSubnet.setStatus('mandatory')
mpanlDlciDeFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDeFrmFromIf.setStatus('mandatory')
mpanlDlciExcessFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciExcessFrmFromIf.setStatus('mandatory')
mpanlDlciDiscExcessFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscExcessFromIf.setStatus('mandatory')
mpanlDlciDiscFrameAbit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscFrameAbit.setStatus('mandatory')
mpanlDlciDiscCongestedFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscCongestedFromIf.setStatus('mandatory')
mpanlDlciDiscDeCongestedFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscDeCongestedFromIf.setStatus('mandatory')
mpanlDlciErrorShortFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciErrorShortFrmFromIf.setStatus('mandatory')
mpanlDlciErrorLongFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciErrorLongFrmFromIf.setStatus('mandatory')
mpanlDlciBecnFrmSetByService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciBecnFrmSetByService.setStatus('mandatory')
mpanlDlciBytesToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciBytesToIf.setStatus('mandatory')
mpanlDlciDeBytesToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDeBytesToIf.setStatus('mandatory')
mpanlDlciDiscCongestedToIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscCongestedToIfBytes.setStatus('mandatory')
mpanlDlciDiscDeCongestedToIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscDeCongestedToIfBytes.setStatus('mandatory')
mpanlDlciBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciBytesFromIf.setStatus('mandatory')
mpanlDlciDeBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDeBytesFromIf.setStatus('mandatory')
mpanlDlciExcessBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciExcessBytesFromIf.setStatus('mandatory')
mpanlDlciDiscExcessFromIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscExcessFromIfBytes.setStatus('mandatory')
mpanlDlciDiscByteAbit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscByteAbit.setStatus('mandatory')
mpanlDlciDiscCongestedFromIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscCongestedFromIfBytes.setStatus('mandatory')
mpanlDlciDiscDeCongestedFromIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscDeCongestedFromIfBytes.setStatus('mandatory')
mpanlDlciErrorLongBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciErrorLongBytesFromIf.setStatus('mandatory')
mpanlDlciTransferPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciTransferPriorityToNetwork.setStatus('obsolete')
mpanlDlciTransferPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 13, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciTransferPriorityFromNetwork.setStatus('obsolete')
mpanlDlciIntTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14), )
if mibBuilder.loadTexts: mpanlDlciIntTable.setStatus('mandatory')
mpanlDlciIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"))
if mibBuilder.loadTexts: mpanlDlciIntEntry.setStatus('mandatory')
mpanlDlciStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 1), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciStartTime.setStatus('mandatory')
mpanlDlciTotalIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 2), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciTotalIngressBytes.setStatus('mandatory')
mpanlDlciTotalEgressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 3), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciTotalEgressBytes.setStatus('mandatory')
mpanlDlciEirIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 4), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciEirIngressBytes.setStatus('mandatory')
mpanlDlciEirEgressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 5), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciEirEgressBytes.setStatus('mandatory')
mpanlDlciDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 6), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscardedBytes.setStatus('mandatory')
mpanlDlciTotalIngressSegFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciTotalIngressSegFrm.setStatus('mandatory')
mpanlDlciTotalEgressSegFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciTotalEgressSegFrm.setStatus('mandatory')
mpanlDlciEirIngressSegFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciEirIngressSegFrm.setStatus('mandatory')
mpanlDlciEirEgressSegFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciEirEgressSegFrm.setStatus('mandatory')
mpanlDlciDiscardedSegFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciDiscardedSegFrm.setStatus('mandatory')
mpanlDlciCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciCallReferenceNumber.setStatus('mandatory')
mpanlDlciElapsedDifference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 14, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciElapsedDifference.setStatus('mandatory')
mpanlDlciAbitTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 15), )
if mibBuilder.loadTexts: mpanlDlciAbitTable.setStatus('mandatory')
mpanlDlciAbitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"))
if mibBuilder.loadTexts: mpanlDlciAbitEntry.setStatus('mandatory')
mpanlDlciABitStatusToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("notApplicable", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciABitStatusToIf.setStatus('mandatory')
mpanlDlciABitReasonToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 0), ("remoteUserSignaled", 1), ("remoteLmiError", 3), ("remoteLinkDown", 5), ("vcDown", 6))).clone('vcDown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciABitReasonToIf.setStatus('mandatory')
mpanlDlciABitStatusFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("notApplicable", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciABitStatusFromIf.setStatus('mandatory')
mpanlDlciABitReasonFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 0), ("remoteUserSignaled", 1), ("remoteLmiError", 3), ("remoteLinkDown", 5), ("vcDown", 6))).clone('vcDown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciABitReasonFromIf.setStatus('mandatory')
mpanlDlciLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLoopbackState.setStatus('mandatory')
mpanlDlciLb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2))
mpanlDlciLbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 1), )
if mibBuilder.loadTexts: mpanlDlciLbRowStatusTable.setStatus('mandatory')
mpanlDlciLbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciLbIndex"))
if mibBuilder.loadTexts: mpanlDlciLbRowStatusEntry.setStatus('mandatory')
mpanlDlciLbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbRowStatus.setStatus('mandatory')
mpanlDlciLbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbComponentName.setStatus('mandatory')
mpanlDlciLbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbStorageType.setStatus('mandatory')
mpanlDlciLbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlDlciLbIndex.setStatus('mandatory')
mpanlDlciLbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10), )
if mibBuilder.loadTexts: mpanlDlciLbStatsTable.setStatus('mandatory')
mpanlDlciLbStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciLbIndex"))
if mibBuilder.loadTexts: mpanlDlciLbStatsEntry.setStatus('mandatory')
mpanlDlciLbLocalTotalFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbLocalTotalFrm.setStatus('mandatory')
mpanlDlciLbLocalTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbLocalTotalBytes.setStatus('mandatory')
mpanlDlciLbLocalFecnFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbLocalFecnFrm.setStatus('mandatory')
mpanlDlciLbLocalBecnFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbLocalBecnFrm.setStatus('mandatory')
mpanlDlciLbLocalDeFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbLocalDeFrm.setStatus('mandatory')
mpanlDlciLbLocalDeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbLocalDeBytes.setStatus('mandatory')
mpanlDlciLbRemoteTotalFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbRemoteTotalFrm.setStatus('mandatory')
mpanlDlciLbRemoteTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbRemoteTotalBytes.setStatus('mandatory')
mpanlDlciLbRemoteFecnFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbRemoteFecnFrm.setStatus('mandatory')
mpanlDlciLbRemoteBecnFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbRemoteBecnFrm.setStatus('mandatory')
mpanlDlciLbRemoteDeFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbRemoteDeFrm.setStatus('mandatory')
mpanlDlciLbRemoteDeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 2, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLbRemoteDeBytes.setStatus('mandatory')
mpanlDlciVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3))
mpanlDlciVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 1), )
if mibBuilder.loadTexts: mpanlDlciVcRowStatusTable.setStatus('mandatory')
mpanlDlciVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciVcIndex"))
if mibBuilder.loadTexts: mpanlDlciVcRowStatusEntry.setStatus('mandatory')
mpanlDlciVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcRowStatus.setStatus('mandatory')
mpanlDlciVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcComponentName.setStatus('mandatory')
mpanlDlciVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcStorageType.setStatus('mandatory')
mpanlDlciVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlDlciVcIndex.setStatus('mandatory')
mpanlDlciVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10), )
if mibBuilder.loadTexts: mpanlDlciVcCadTable.setStatus('mandatory')
mpanlDlciVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciVcIndex"))
if mibBuilder.loadTexts: mpanlDlciVcCadEntry.setStatus('mandatory')
mpanlDlciVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1), ("spvc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcType.setStatus('mandatory')
mpanlDlciVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcState.setStatus('mandatory')
mpanlDlciVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcPreviousState.setStatus('mandatory')
mpanlDlciVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcDiagnosticCode.setStatus('mandatory')
mpanlDlciVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcPreviousDiagnosticCode.setStatus('mandatory')
mpanlDlciVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcCalledNpi.setStatus('mandatory')
mpanlDlciVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcCalledDna.setStatus('mandatory')
mpanlDlciVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcCalledLcn.setStatus('mandatory')
mpanlDlciVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcCallingNpi.setStatus('mandatory')
mpanlDlciVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcCallingDna.setStatus('mandatory')
mpanlDlciVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcCallingLcn.setStatus('mandatory')
mpanlDlciVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcAccountingEnabled.setStatus('mandatory')
mpanlDlciVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcFastSelectCall.setStatus('mandatory')
mpanlDlciVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcPathReliability.setStatus('mandatory')
mpanlDlciVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcAccountingEnd.setStatus('mandatory')
mpanlDlciVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcPriority.setStatus('mandatory')
mpanlDlciVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcSegmentSize.setStatus('mandatory')
mpanlDlciVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcMaxSubnetPktSize.setStatus('mandatory')
mpanlDlciVcRcosToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcRcosToNetwork.setStatus('mandatory')
mpanlDlciVcRcosFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcRcosFromNetwork.setStatus('mandatory')
mpanlDlciVcEmissionPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcEmissionPriorityToNetwork.setStatus('mandatory')
mpanlDlciVcEmissionPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcEmissionPriorityFromNetwork.setStatus('mandatory')
mpanlDlciVcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 10, 1, 32), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcDataPath.setStatus('mandatory')
mpanlDlciVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 11), )
if mibBuilder.loadTexts: mpanlDlciVcIntdTable.setStatus('mandatory')
mpanlDlciVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciVcIndex"))
if mibBuilder.loadTexts: mpanlDlciVcIntdEntry.setStatus('mandatory')
mpanlDlciVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcCallReferenceNumber.setStatus('mandatory')
mpanlDlciVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcElapsedTimeTillNow.setStatus('mandatory')
mpanlDlciVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcSegmentsRx.setStatus('mandatory')
mpanlDlciVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcSegmentsSent.setStatus('mandatory')
mpanlDlciVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcStartTime.setStatus('mandatory')
mpanlDlciVcFrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12), )
if mibBuilder.loadTexts: mpanlDlciVcFrdTable.setStatus('mandatory')
mpanlDlciVcFrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciVcIndex"))
if mibBuilder.loadTexts: mpanlDlciVcFrdEntry.setStatus('mandatory')
mpanlDlciVcFrmCongestedToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcFrmCongestedToSubnet.setStatus('mandatory')
mpanlDlciVcCannotForwardToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcCannotForwardToSubnet.setStatus('mandatory')
mpanlDlciVcNotDataXferToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcNotDataXferToSubnet.setStatus('mandatory')
mpanlDlciVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
mpanlDlciVcCombErrorsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcCombErrorsFromSubnet.setStatus('mandatory')
mpanlDlciVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcDuplicatesFromSubnet.setStatus('mandatory')
mpanlDlciVcNotDataXferFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcNotDataXferFromSubnet.setStatus('mandatory')
mpanlDlciVcFrmLossTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcFrmLossTimeouts.setStatus('mandatory')
mpanlDlciVcOoSeqByteCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcOoSeqByteCntExceeded.setStatus('mandatory')
mpanlDlciVcPeakOoSeqPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcPeakOoSeqPktCount.setStatus('mandatory')
mpanlDlciVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcPeakOoSeqFrmForwarded.setStatus('mandatory')
mpanlDlciVcSendSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcSendSequenceNumber.setStatus('mandatory')
mpanlDlciVcPktRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcPktRetryTimeouts.setStatus('mandatory')
mpanlDlciVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcPeakRetryQueueSize.setStatus('mandatory')
mpanlDlciVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcSubnetRecoveries.setStatus('mandatory')
mpanlDlciVcOoSeqPktCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcOoSeqPktCntExceeded.setStatus('mandatory')
mpanlDlciVcPeakOoSeqByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcPeakOoSeqByteCount.setStatus('mandatory')
mpanlDlciVcDmepTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 417), )
if mibBuilder.loadTexts: mpanlDlciVcDmepTable.setStatus('mandatory')
mpanlDlciVcDmepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 417, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciVcIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciVcDmepValue"))
if mibBuilder.loadTexts: mpanlDlciVcDmepEntry.setStatus('mandatory')
mpanlDlciVcDmepValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 3, 417, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciVcDmepValue.setStatus('mandatory')
mpanlDlciLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4))
mpanlDlciLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 1), )
if mibBuilder.loadTexts: mpanlDlciLCoRowStatusTable.setStatus('mandatory')
mpanlDlciLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciLCoIndex"))
if mibBuilder.loadTexts: mpanlDlciLCoRowStatusEntry.setStatus('mandatory')
mpanlDlciLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoRowStatus.setStatus('mandatory')
mpanlDlciLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoComponentName.setStatus('mandatory')
mpanlDlciLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoStorageType.setStatus('mandatory')
mpanlDlciLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlDlciLCoIndex.setStatus('mandatory')
mpanlDlciLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10), )
if mibBuilder.loadTexts: mpanlDlciLCoPathDataTable.setStatus('mandatory')
mpanlDlciLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciLCoIndex"))
if mibBuilder.loadTexts: mpanlDlciLCoPathDataEntry.setStatus('mandatory')
mpanlDlciLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoState.setStatus('mandatory')
mpanlDlciLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoEnd.setStatus('mandatory')
mpanlDlciLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoCostMetric.setStatus('mandatory')
mpanlDlciLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoDelayMetric.setStatus('mandatory')
mpanlDlciLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoRoundTripDelay.setStatus('mandatory')
mpanlDlciLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoSetupPriority.setStatus('mandatory')
mpanlDlciLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoHoldingPriority.setStatus('mandatory')
mpanlDlciLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoRequiredTxBandwidth.setStatus('mandatory')
mpanlDlciLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoRequiredRxBandwidth.setStatus('mandatory')
mpanlDlciLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoRequiredTrafficType.setStatus('mandatory')
mpanlDlciLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoPermittedTrunkTypes.setStatus('mandatory')
mpanlDlciLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoRequiredSecurity.setStatus('mandatory')
mpanlDlciLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoRequiredCustomerParameter.setStatus('mandatory')
mpanlDlciLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoEmissionPriority.setStatus('mandatory')
mpanlDlciLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoDiscardPriority.setStatus('mandatory')
mpanlDlciLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoRetryCount.setStatus('mandatory')
mpanlDlciLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoPathFailureCount.setStatus('mandatory')
mpanlDlciLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoReasonForNoRoute.setStatus('mandatory')
mpanlDlciLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoLastTearDownReason.setStatus('mandatory')
mpanlDlciLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoPathFailureAction.setStatus('mandatory')
mpanlDlciLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoBumpPreference.setStatus('mandatory')
mpanlDlciLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoOptimization.setStatus('mandatory')
mpanlDlciLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoPathUpDateTime.setStatus('mandatory')
mpanlDlciLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 11), )
if mibBuilder.loadTexts: mpanlDlciLCoStatsTable.setStatus('mandatory')
mpanlDlciLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciLCoIndex"))
if mibBuilder.loadTexts: mpanlDlciLCoStatsEntry.setStatus('mandatory')
mpanlDlciLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoPktsToNetwork.setStatus('mandatory')
mpanlDlciLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoBytesToNetwork.setStatus('mandatory')
mpanlDlciLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoPktsFromNetwork.setStatus('mandatory')
mpanlDlciLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoBytesFromNetwork.setStatus('mandatory')
mpanlDlciLCoCallDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 12), )
if mibBuilder.loadTexts: mpanlDlciLCoCallDataTable.setStatus('mandatory')
mpanlDlciLCoCallDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciLCoIndex"))
if mibBuilder.loadTexts: mpanlDlciLCoCallDataEntry.setStatus('mandatory')
mpanlDlciLCoCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 12, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoCallingNpi.setStatus('mandatory')
mpanlDlciLCoCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 12, 1, 28), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoCallingDna.setStatus('mandatory')
mpanlDlciLCoElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 12, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoElapsedTimeTillNow.setStatus('mandatory')
mpanlDlciLCoCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 12, 1, 31), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoCallReferenceNumber.setStatus('mandatory')
mpanlDlciLCoCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 12, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoCalledNpi.setStatus('mandatory')
mpanlDlciLCoCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 12, 1, 34), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoCalledDna.setStatus('mandatory')
mpanlDlciLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 401), )
if mibBuilder.loadTexts: mpanlDlciLCoPathTable.setStatus('mandatory')
mpanlDlciLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 401, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciLCoIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciLCoPathValue"))
if mibBuilder.loadTexts: mpanlDlciLCoPathEntry.setStatus('mandatory')
mpanlDlciLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 4, 401, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciLCoPathValue.setStatus('mandatory')
mpanlDlciJvc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5))
mpanlDlciJvcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 1), )
if mibBuilder.loadTexts: mpanlDlciJvcRowStatusTable.setStatus('mandatory')
mpanlDlciJvcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciJvcIndex"))
if mibBuilder.loadTexts: mpanlDlciJvcRowStatusEntry.setStatus('mandatory')
mpanlDlciJvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcRowStatus.setStatus('mandatory')
mpanlDlciJvcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcComponentName.setStatus('mandatory')
mpanlDlciJvcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcStorageType.setStatus('mandatory')
mpanlDlciJvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlDlciJvcIndex.setStatus('mandatory')
mpanlDlciJvcOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 10), )
if mibBuilder.loadTexts: mpanlDlciJvcOperTable.setStatus('mandatory')
mpanlDlciJvcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciJvcIndex"))
if mibBuilder.loadTexts: mpanlDlciJvcOperEntry.setStatus('mandatory')
mpanlDlciJvcCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("null", 0), ("callRequest", 1), ("callIndication", 2), ("callBlockPresent", 3), ("active", 4), ("discInitiated", 5), ("discPktPresent", 6), ("callDisconnected", 7), ("callTerminated", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcCurrentState.setStatus('mandatory')
mpanlDlciJvcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("null", 0), ("callRequest", 1), ("callIndication", 2), ("callBlockPresent", 3), ("active", 4), ("discInitiated", 5), ("discPktPresent", 6), ("callDisconnected", 7), ("callTerminated", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcPreviousState.setStatus('mandatory')
mpanlDlciJvcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcCallingNpi.setStatus('mandatory')
mpanlDlciJvcCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcCallingAddress.setStatus('mandatory')
mpanlDlciJvcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcCallingLcn.setStatus('mandatory')
mpanlDlciJvcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcCalledNpi.setStatus('mandatory')
mpanlDlciJvcCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcCalledAddress.setStatus('mandatory')
mpanlDlciJvcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcCalledLcn.setStatus('mandatory')
mpanlDlciJvcStatTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 11), )
if mibBuilder.loadTexts: mpanlDlciJvcStatTable.setStatus('mandatory')
mpanlDlciJvcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlDlciJvcIndex"))
if mibBuilder.loadTexts: mpanlDlciJvcStatEntry.setStatus('mandatory')
mpanlDlciJvcPacketsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcPacketsFromSubnet.setStatus('mandatory')
mpanlDlciJvcPacketsToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcPacketsToSubnet.setStatus('mandatory')
mpanlDlciJvcPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcPacketsDiscarded.setStatus('mandatory')
mpanlDlciJvcProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 5, 5, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlDlciJvcProtocolErrors.setStatus('mandatory')
mpanlSig = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6))
mpanlSigRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 1), )
if mibBuilder.loadTexts: mpanlSigRowStatusTable.setStatus('mandatory')
mpanlSigRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigIndex"))
if mibBuilder.loadTexts: mpanlSigRowStatusEntry.setStatus('mandatory')
mpanlSigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigRowStatus.setStatus('mandatory')
mpanlSigComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigComponentName.setStatus('mandatory')
mpanlSigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigStorageType.setStatus('mandatory')
mpanlSigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlSigIndex.setStatus('mandatory')
mpanlSigSysParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 13), )
if mibBuilder.loadTexts: mpanlSigSysParmsTable.setStatus('mandatory')
mpanlSigSysParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigIndex"))
if mibBuilder.loadTexts: mpanlSigSysParmsEntry.setStatus('mandatory')
mpanlSigCallSetupTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigCallSetupTimer.setStatus('mandatory')
mpanlSigDisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigDisconnectTimer.setStatus('mandatory')
mpanlSigReleaseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigReleaseTimer.setStatus('mandatory')
mpanlSigCallProceedingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigCallProceedingTimer.setStatus('mandatory')
mpanlSigNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("public", 2))).clone('private')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigNetworkType.setStatus('mandatory')
mpanlSigLapfSysTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 14), )
if mibBuilder.loadTexts: mpanlSigLapfSysTable.setStatus('mandatory')
mpanlSigLapfSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigIndex"))
if mibBuilder.loadTexts: mpanlSigLapfSysEntry.setStatus('mandatory')
mpanlSigWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigWindowSize.setStatus('mandatory')
mpanlSigRetransmitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigRetransmitLimit.setStatus('mandatory')
mpanlSigAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 14, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigAckTimer.setStatus('mandatory')
mpanlSigAckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigAckDelayTimer.setStatus('mandatory')
mpanlSigIdleProbeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 14, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535000)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigIdleProbeTimer.setStatus('mandatory')
mpanlSigSvcaccTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 15), )
if mibBuilder.loadTexts: mpanlSigSvcaccTable.setStatus('mandatory')
mpanlSigSvcaccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigIndex"))
if mibBuilder.loadTexts: mpanlSigSvcaccEntry.setStatus('mandatory')
mpanlSigDefaultAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlSigDefaultAccounting.setStatus('mandatory')
mpanlSigStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 16), )
if mibBuilder.loadTexts: mpanlSigStateTable.setStatus('mandatory')
mpanlSigStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigIndex"))
if mibBuilder.loadTexts: mpanlSigStateEntry.setStatus('mandatory')
mpanlSigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigAdminState.setStatus('mandatory')
mpanlSigOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigOperationalState.setStatus('mandatory')
mpanlSigUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigUsageState.setStatus('mandatory')
mpanlSigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17), )
if mibBuilder.loadTexts: mpanlSigStatsTable.setStatus('mandatory')
mpanlSigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigIndex"))
if mibBuilder.loadTexts: mpanlSigStatsEntry.setStatus('mandatory')
mpanlSigCurrentNumberOfSvcCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigCurrentNumberOfSvcCalls.setStatus('mandatory')
mpanlSigInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigInCalls.setStatus('mandatory')
mpanlSigInCallsRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigInCallsRefused.setStatus('mandatory')
mpanlSigOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigOutCalls.setStatus('mandatory')
mpanlSigOutCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigOutCallsFailed.setStatus('mandatory')
mpanlSigProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigProtocolErrors.setStatus('mandatory')
mpanlSigQualityOfServiceNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigQualityOfServiceNotAvailable.setStatus('mandatory')
mpanlSigSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigSetupTimeout.setStatus('mandatory')
mpanlSigLastCauseInStatusMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigLastCauseInStatusMsgReceived.setStatus('mandatory')
mpanlSigLastStateInStatusMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63))).clone(namedValues=NamedValues(("null", 0), ("callInitiated", 1), ("n2", 2), ("outgoingCallProceeding", 3), ("n4", 4), ("n5", 5), ("callPresent", 6), ("n7", 7), ("n8", 8), ("incomingCallProceeding", 9), ("active", 10), ("disconnectRequest", 11), ("disconnectIndication", 12), ("n13", 13), ("n14", 14), ("n15", 15), ("n16", 16), ("n17", 17), ("n18", 18), ("releaseRequest", 19), ("notApplicable", 20), ("n21", 21), ("n22", 22), ("n23", 23), ("n24", 24), ("n25", 25), ("n26", 26), ("n27", 27), ("n28", 28), ("n29", 29), ("n30", 30), ("n31", 31), ("n32", 32), ("n33", 33), ("n34", 34), ("n35", 35), ("n36", 36), ("n37", 37), ("n38", 38), ("n39", 39), ("n40", 40), ("n41", 41), ("n42", 42), ("n43", 43), ("n44", 44), ("n45", 45), ("n46", 46), ("n47", 47), ("n48", 48), ("n49", 49), ("n50", 50), ("n51", 51), ("n52", 52), ("n53", 53), ("n54", 54), ("n55", 55), ("n56", 56), ("n57", 57), ("n58", 58), ("n59", 59), ("n60", 60), ("n61", 61), ("n62", 62), ("n63", 63)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigLastStateInStatusMsgReceived.setStatus('mandatory')
mpanlSigLastDlciReceivedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(17, 1007), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigLastDlciReceivedStatus.setStatus('mandatory')
mpanlSigLastQ933StateReceivedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 6, 9, 10, 11, 12, 19, 20))).clone(namedValues=NamedValues(("null", 0), ("callInitiated", 1), ("outgoingCallProceeding", 3), ("callPresent", 6), ("incomingCallProceeding", 9), ("active", 10), ("disconnectRequest", 11), ("disconnectIndication", 12), ("releaseRequest", 19), ("notApplicable", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigLastQ933StateReceivedStatus.setStatus('mandatory')
mpanlSigLastTimeMsgBlockCongested = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 15), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigLastTimeMsgBlockCongested.setStatus('mandatory')
mpanlSigLastDlciWithMsgBlockCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 17, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 1007), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigLastDlciWithMsgBlockCongestion.setStatus('mandatory')
mpanlSigLapfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 18), )
if mibBuilder.loadTexts: mpanlSigLapfStatusTable.setStatus('mandatory')
mpanlSigLapfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 18, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigIndex"))
if mibBuilder.loadTexts: mpanlSigLapfStatusEntry.setStatus('mandatory')
mpanlSigCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7))).clone(namedValues=NamedValues(("disconnected", 1), ("linkSetup", 2), ("disconnectRequest", 4), ("informationTransfer", 5), ("waitingAck", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigCurrentState.setStatus('mandatory')
mpanlSigLastStateChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 6, 7, 8, 9, 10, 12, 13))).clone(namedValues=NamedValues(("notStarted", 1), ("abmeEntered", 3), ("abmeReset", 5), ("dmReceived", 6), ("dmSent", 7), ("discReceived", 8), ("discSent", 9), ("frmrReceived", 10), ("n200RetranTimeOut", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigLastStateChangeReason.setStatus('mandatory')
mpanlSigFrmrReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 18, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigFrmrReceive.setStatus('mandatory')
mpanlSigCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigCurrentQueueSize.setStatus('mandatory')
mpanlSigLapfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 19), )
if mibBuilder.loadTexts: mpanlSigLapfStatsTable.setStatus('mandatory')
mpanlSigLapfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 19, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigIndex"))
if mibBuilder.loadTexts: mpanlSigLapfStatsEntry.setStatus('mandatory')
mpanlSigStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 19, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigStateChange.setStatus('mandatory')
mpanlSigRemoteBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigRemoteBusy.setStatus('mandatory')
mpanlSigReceiveRejectFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigReceiveRejectFrame.setStatus('mandatory')
mpanlSigAckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigAckTimeout.setStatus('mandatory')
mpanlSigIFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigIFramesTransmitted.setStatus('mandatory')
mpanlSigIFramesTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigIFramesTxDiscarded.setStatus('mandatory')
mpanlSigIFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigIFramesReceived.setStatus('mandatory')
mpanlSigIFramesRcvdDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 6, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigIFramesRcvdDiscarded.setStatus('mandatory')
mpanlSigMpanl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7))
mpanlSigMpanlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 1), )
if mibBuilder.loadTexts: mpanlSigMpanlRowStatusTable.setStatus('mandatory')
mpanlSigMpanlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigMpanlIndex"))
if mibBuilder.loadTexts: mpanlSigMpanlRowStatusEntry.setStatus('mandatory')
mpanlSigMpanlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlRowStatus.setStatus('mandatory')
mpanlSigMpanlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlComponentName.setStatus('mandatory')
mpanlSigMpanlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlStorageType.setStatus('mandatory')
mpanlSigMpanlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlSigMpanlIndex.setStatus('mandatory')
mpanlSigMpanlStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 10), )
if mibBuilder.loadTexts: mpanlSigMpanlStateTable.setStatus('mandatory')
mpanlSigMpanlStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigMpanlIndex"))
if mibBuilder.loadTexts: mpanlSigMpanlStateEntry.setStatus('mandatory')
mpanlSigMpanlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlAdminState.setStatus('mandatory')
mpanlSigMpanlOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlOperationalState.setStatus('mandatory')
mpanlSigMpanlUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlUsageState.setStatus('mandatory')
mpanlSigMpanlProfileTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 11), )
if mibBuilder.loadTexts: mpanlSigMpanlProfileTable.setStatus('mandatory')
mpanlSigMpanlProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigMpanlIndex"))
if mibBuilder.loadTexts: mpanlSigMpanlProfileEntry.setStatus('mandatory')
mpanlSigMpanlDteCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlDteCustomerId.setStatus('mandatory')
mpanlSigMpanlDteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlDteNodeId.setStatus('mandatory')
mpanlSigMpanlDteComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 11, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlDteComponentName.setStatus('mandatory')
mpanlSigMpanlHighestDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(17, 1007), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlHighestDlci.setStatus('mandatory')
mpanlSigMpanlStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 12), )
if mibBuilder.loadTexts: mpanlSigMpanlStatsTable.setStatus('mandatory')
mpanlSigMpanlStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigMpanlIndex"))
if mibBuilder.loadTexts: mpanlSigMpanlStatsEntry.setStatus('mandatory')
mpanlSigMpanlProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlProtocolErrors.setStatus('mandatory')
mpanlSigMpanlSap0CommandsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlSap0CommandsRx.setStatus('mandatory')
mpanlSigMpanlSap0CommandsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlSap0CommandsTx.setStatus('mandatory')
mpanlSigMpanlSapXCommandsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlSapXCommandsRx.setStatus('mandatory')
mpanlSigMpanlSapXCommandsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlSapXCommandsTx.setStatus('mandatory')
mpanlSigMpanlLapfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 13), )
if mibBuilder.loadTexts: mpanlSigMpanlLapfStatusTable.setStatus('mandatory')
mpanlSigMpanlLapfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigMpanlIndex"))
if mibBuilder.loadTexts: mpanlSigMpanlLapfStatusEntry.setStatus('mandatory')
mpanlSigMpanlCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7))).clone(namedValues=NamedValues(("disconnected", 1), ("linkSetup", 2), ("disconnectRequest", 4), ("informationTransfer", 5), ("waitingAck", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlCurrentState.setStatus('mandatory')
mpanlSigMpanlLastStateChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 6, 7, 8, 9, 10, 12, 13))).clone(namedValues=NamedValues(("notStarted", 1), ("abmeEntered", 3), ("abmeReset", 5), ("dmReceived", 6), ("dmSent", 7), ("discReceived", 8), ("discSent", 9), ("frmrReceived", 10), ("n200RetranTimeOut", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlLastStateChangeReason.setStatus('mandatory')
mpanlSigMpanlFrmrReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 13, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlFrmrReceive.setStatus('mandatory')
mpanlSigMpanlCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlCurrentQueueSize.setStatus('mandatory')
mpanlSigMpanlLapfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 14), )
if mibBuilder.loadTexts: mpanlSigMpanlLapfStatsTable.setStatus('mandatory')
mpanlSigMpanlLapfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlSigMpanlIndex"))
if mibBuilder.loadTexts: mpanlSigMpanlLapfStatsEntry.setStatus('mandatory')
mpanlSigMpanlStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlStateChange.setStatus('mandatory')
mpanlSigMpanlRemoteBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlRemoteBusy.setStatus('mandatory')
mpanlSigMpanlReceiveRejectFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlReceiveRejectFrame.setStatus('mandatory')
mpanlSigMpanlAckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlAckTimeout.setStatus('mandatory')
mpanlSigMpanlIFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlIFramesTransmitted.setStatus('mandatory')
mpanlSigMpanlIFramesTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlIFramesTxDiscarded.setStatus('mandatory')
mpanlSigMpanlIFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlIFramesReceived.setStatus('mandatory')
mpanlSigMpanlIFramesRcvdDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 7, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlSigMpanlIFramesRcvdDiscarded.setStatus('mandatory')
mpanlLmi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8))
mpanlLmiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 1), )
if mibBuilder.loadTexts: mpanlLmiRowStatusTable.setStatus('mandatory')
mpanlLmiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlLmiIndex"))
if mibBuilder.loadTexts: mpanlLmiRowStatusEntry.setStatus('mandatory')
mpanlLmiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlLmiRowStatus.setStatus('mandatory')
mpanlLmiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlLmiComponentName.setStatus('mandatory')
mpanlLmiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlLmiStorageType.setStatus('mandatory')
mpanlLmiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlLmiIndex.setStatus('mandatory')
mpanlLmiParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 10), )
if mibBuilder.loadTexts: mpanlLmiParmsTable.setStatus('mandatory')
mpanlLmiParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlLmiIndex"))
if mibBuilder.loadTexts: mpanlLmiParmsEntry.setStatus('mandatory')
mpanlLmiProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("vendorForum", 1), ("ansi", 2), ("ccitt", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlLmiProcedures.setStatus('mandatory')
mpanlLmiStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 12), )
if mibBuilder.loadTexts: mpanlLmiStateTable.setStatus('mandatory')
mpanlLmiStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlLmiIndex"))
if mibBuilder.loadTexts: mpanlLmiStateEntry.setStatus('mandatory')
mpanlLmiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlLmiAdminState.setStatus('mandatory')
mpanlLmiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlLmiOperationalState.setStatus('mandatory')
mpanlLmiUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 8, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlLmiUsageState.setStatus('mandatory')
mpanlVoFr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18))
mpanlVoFrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 1), )
if mibBuilder.loadTexts: mpanlVoFrRowStatusTable.setStatus('mandatory')
mpanlVoFrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlVoFrIndex"))
if mibBuilder.loadTexts: mpanlVoFrRowStatusEntry.setStatus('mandatory')
mpanlVoFrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlVoFrRowStatus.setStatus('mandatory')
mpanlVoFrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlVoFrComponentName.setStatus('mandatory')
mpanlVoFrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlVoFrStorageType.setStatus('mandatory')
mpanlVoFrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlVoFrIndex.setStatus('mandatory')
mpanlVoFrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 10), )
if mibBuilder.loadTexts: mpanlVoFrOperTable.setStatus('mandatory')
mpanlVoFrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlVoFrIndex"))
if mibBuilder.loadTexts: mpanlVoFrOperEntry.setStatus('mandatory')
mpanlVoFrMaximumFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlVoFrMaximumFrameSize.setStatus('mandatory')
mpanlVoFrTransmitInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlVoFrTransmitInformationRate.setStatus('mandatory')
mpanlVoFrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 11), )
if mibBuilder.loadTexts: mpanlVoFrStatsTable.setStatus('mandatory')
mpanlVoFrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlVoFrIndex"))
if mibBuilder.loadTexts: mpanlVoFrStatsEntry.setStatus('mandatory')
mpanlVoFrFragmentedHighestPriorityFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlVoFrFragmentedHighestPriorityFrames.setStatus('mandatory')
mpanlVoFrLostFragmentsFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlVoFrLostFragmentsFromIf.setStatus('mandatory')
mpanlVoFrProtocolViolationsFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 18, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlVoFrProtocolViolationsFromIf.setStatus('mandatory')
mpanlFrMuxSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19))
mpanlFrMuxSetupRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 1), )
if mibBuilder.loadTexts: mpanlFrMuxSetupRowStatusTable.setStatus('mandatory')
mpanlFrMuxSetupRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFrMuxSetupIndex"))
if mibBuilder.loadTexts: mpanlFrMuxSetupRowStatusEntry.setStatus('mandatory')
mpanlFrMuxSetupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlFrMuxSetupRowStatus.setStatus('mandatory')
mpanlFrMuxSetupComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFrMuxSetupComponentName.setStatus('mandatory')
mpanlFrMuxSetupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFrMuxSetupStorageType.setStatus('mandatory')
mpanlFrMuxSetupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlFrMuxSetupIndex.setStatus('mandatory')
mpanlFrMuxSetupOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 11), )
if mibBuilder.loadTexts: mpanlFrMuxSetupOpTable.setStatus('mandatory')
mpanlFrMuxSetupOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFrMuxSetupIndex"))
if mibBuilder.loadTexts: mpanlFrMuxSetupOpEntry.setStatus('mandatory')
mpanlFrMuxSetupCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16000, 4294967295)).clone(16000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFrMuxSetupCommittedInformationRate.setStatus('mandatory')
mpanlFrMuxSetupDlciCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 11, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFrMuxSetupDlciCompName.setStatus('mandatory')
mpanlFrMuxSetupPvcSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 2))
mpanlFrMuxSetupPvcSetupRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 2, 1), )
if mibBuilder.loadTexts: mpanlFrMuxSetupPvcSetupRowStatusTable.setStatus('mandatory')
mpanlFrMuxSetupPvcSetupRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFrMuxSetupIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFrMuxSetupPvcSetupIndex"))
if mibBuilder.loadTexts: mpanlFrMuxSetupPvcSetupRowStatusEntry.setStatus('mandatory')
mpanlFrMuxSetupPvcSetupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFrMuxSetupPvcSetupRowStatus.setStatus('mandatory')
mpanlFrMuxSetupPvcSetupComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFrMuxSetupPvcSetupComponentName.setStatus('mandatory')
mpanlFrMuxSetupPvcSetupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlFrMuxSetupPvcSetupStorageType.setStatus('mandatory')
mpanlFrMuxSetupPvcSetupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlFrMuxSetupPvcSetupIndex.setStatus('mandatory')
mpanlFrMuxSetupPvcSetupProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 2, 10), )
if mibBuilder.loadTexts: mpanlFrMuxSetupPvcSetupProvTable.setStatus('mandatory')
mpanlFrMuxSetupPvcSetupProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFrMuxSetupIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlFrMuxSetupPvcSetupIndex"))
if mibBuilder.loadTexts: mpanlFrMuxSetupPvcSetupProvEntry.setStatus('mandatory')
mpanlFrMuxSetupPvcSetupDlciName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 19, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlFrMuxSetupPvcSetupDlciName.setStatus('mandatory')
mpanlIsdn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22))
mpanlIsdnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 1), )
if mibBuilder.loadTexts: mpanlIsdnRowStatusTable.setStatus('mandatory')
mpanlIsdnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIsdnIndex"))
if mibBuilder.loadTexts: mpanlIsdnRowStatusEntry.setStatus('mandatory')
mpanlIsdnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlIsdnRowStatus.setStatus('mandatory')
mpanlIsdnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlIsdnComponentName.setStatus('mandatory')
mpanlIsdnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlIsdnStorageType.setStatus('mandatory')
mpanlIsdnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mpanlIsdnIndex.setStatus('mandatory')
mpanlIsdnProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 11), )
if mibBuilder.loadTexts: mpanlIsdnProvTable.setStatus('mandatory')
mpanlIsdnProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIsdnIndex"))
if mibBuilder.loadTexts: mpanlIsdnProvEntry.setStatus('mandatory')
mpanlIsdnT320 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlIsdnT320.setStatus('mandatory')
mpanlIsdnAddressSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("isdnDna", 0), ("normalBehavior", 1))).clone('normalBehavior')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpanlIsdnAddressSignalling.setStatus('mandatory')
mpanlIsdnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 12), )
if mibBuilder.loadTexts: mpanlIsdnOperTable.setStatus('mandatory')
mpanlIsdnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIndex"), (0, "Nortel-Magellan-Passport-MpaNetworkLinkMIB", "mpanlIsdnIndex"))
if mibBuilder.loadTexts: mpanlIsdnOperEntry.setStatus('mandatory')
mpanlIsdnDataSigChan = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlIsdnDataSigChan.setStatus('mandatory')
mpanlIsdnBChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("busy", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlIsdnBChannelState.setStatus('mandatory')
mpanlIsdnLastUsedCgpn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 12, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlIsdnLastUsedCgpn.setStatus('mandatory')
mpanlIsdnBChanIntState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isdnInit", 0), ("waitAccEnable", 1), ("waitLnsResponse", 2), ("waitFramerData", 3), ("enabling", 4), ("waitAccRegAck", 5), ("up", 6), ("down", 7), ("releasing", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlIsdnBChanIntState.setStatus('mandatory')
mpanlIsdnActiveVirtualCircuitsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 123, 22, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpanlIsdnActiveVirtualCircuitsCount.setStatus('mandatory')
mpaNetworkLinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 119, 1))
mpaNetworkLinkGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 119, 1, 5))
mpaNetworkLinkGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 119, 1, 5, 2))
mpaNetworkLinkGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 119, 1, 5, 2, 2))
mpaNetworkLinkCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 119, 3))
mpaNetworkLinkCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 119, 3, 5))
mpaNetworkLinkCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 119, 3, 5, 2))
mpaNetworkLinkCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 119, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-MpaNetworkLinkMIB", mpanlVoFrRowStatusTable=mpanlVoFrRowStatusTable, mpanlSigStateEntry=mpanlSigStateEntry, mpanlDlciJvcPacketsFromSubnet=mpanlDlciJvcPacketsFromSubnet, mpanlSigMpanlDteNodeId=mpanlSigMpanlDteNodeId, mpanlAdminState=mpanlAdminState, mpanlSigMpanlAdminState=mpanlSigMpanlAdminState, mpanlDlciAvailabilityStatus=mpanlDlciAvailabilityStatus, mpanlProvEntry=mpanlProvEntry, mpanlDlciDeFrmFromIf=mpanlDlciDeFrmFromIf, mpanlDlciLCoCallDataEntry=mpanlDlciLCoCallDataEntry, mpanlVoFrComponentName=mpanlVoFrComponentName, mpanlVoFrIndex=mpanlVoFrIndex, mpanlFrmToIfByQueueIndex=mpanlFrmToIfByQueueIndex, mpanlSigMpanlIFramesReceived=mpanlSigMpanlIFramesReceived, mpanlDlciVcCombErrorsFromSubnet=mpanlDlciVcCombErrorsFromSubnet, mpanlSigOutCallsFailed=mpanlSigOutCallsFailed, mpanlFramerStateTable=mpanlFramerStateTable, mpanlDlciLCoEnd=mpanlDlciLCoEnd, mpanlUnknownDlciFramesFromIf=mpanlUnknownDlciFramesFromIf, mpanlDlciLbRemoteFecnFrm=mpanlDlciLbRemoteFecnFrm, mpanlDlciJvcRowStatus=mpanlDlciJvcRowStatus, mpanlDlciControlStatus=mpanlDlciControlStatus, mpanlSigWindowSize=mpanlSigWindowSize, mpanlSigCallProceedingTimer=mpanlSigCallProceedingTimer, mpanlSigMpanlStateChange=mpanlSigMpanlStateChange, mpanlLmiComponentName=mpanlLmiComponentName, mpanlDlciTransferPriorityToNetwork=mpanlDlciTransferPriorityToNetwork, mpanlVoFrTransmitInformationRate=mpanlVoFrTransmitInformationRate, mpanlFrmToIf=mpanlFrmToIf, mpanlSigMpanlDteCustomerId=mpanlSigMpanlDteCustomerId, mpanlProvTable=mpanlProvTable, mpanlLmiProcedures=mpanlLmiProcedures, mpanlDlciFrmFromIf=mpanlDlciFrmFromIf, mpanlDlciErrorShortFrmFromIf=mpanlDlciErrorShortFrmFromIf, mpanlDlciVc=mpanlDlciVc, mpanlVoFrProtocolViolationsFromIf=mpanlVoFrProtocolViolationsFromIf, mpanlDlciLCoCalledDna=mpanlDlciLCoCalledDna, mpanlDlciVcOoSeqPktCntExceeded=mpanlDlciVcOoSeqPktCntExceeded, mpanlDlciVcPeakOoSeqByteCount=mpanlDlciVcPeakOoSeqByteCount, mpanlFrMuxSetupPvcSetupDlciName=mpanlFrMuxSetupPvcSetupDlciName, mpanlSigStatsTable=mpanlSigStatsTable, mpanlPrefixDnaNumberingPlanIndicatorIndex=mpanlPrefixDnaNumberingPlanIndicatorIndex, mpanlDlciLbLocalTotalFrm=mpanlDlciLbLocalTotalFrm, mpanlDlciVcStorageType=mpanlDlciVcStorageType, mpanlFramerStatsEntry=mpanlFramerStatsEntry, mpanlFramerStatsTable=mpanlFramerStatsTable, mpanlDlciIndex=mpanlDlciIndex, mpanlSigRowStatusTable=mpanlSigRowStatusTable, mpanlLmiIndex=mpanlLmiIndex, mpanlDlciVcPreviousDiagnosticCode=mpanlDlciVcPreviousDiagnosticCode, mpanlControlStatus=mpanlControlStatus, mpanlIsdnStorageType=mpanlIsdnStorageType, mpanlIsdnBChannelState=mpanlIsdnBChannelState, mpanlSigMpanlSap0CommandsRx=mpanlSigMpanlSap0CommandsRx, mpanlSnmpOperStatus=mpanlSnmpOperStatus, mpanlFramerUtilEntry=mpanlFramerUtilEntry, mpanlDlciLbLocalDeBytes=mpanlDlciLbLocalDeBytes, mpanlFramerRowStatusTable=mpanlFramerRowStatusTable, mpanlDlci=mpanlDlci, mpanlNumberOfEmissionQs=mpanlNumberOfEmissionQs, mpanlDnaRowStatusTable=mpanlDnaRowStatusTable, mpanlDlciProceduralStatus=mpanlDlciProceduralStatus, mpanlDlciLCoPathUpDateTime=mpanlDlciLCoPathUpDateTime, mpanlFramerComponentName=mpanlFramerComponentName, mpanlDlciABitReasonFromIf=mpanlDlciABitReasonFromIf, mpanlDlciVcDmepTable=mpanlDlciVcDmepTable, mpanlFrMuxSetupDlciCompName=mpanlFrMuxSetupDlciCompName, mpanlDlciLCoPathFailureAction=mpanlDlciLCoPathFailureAction, mpanlFramerLrcErrors=mpanlFramerLrcErrors, mpanlDlciJvcStorageType=mpanlDlciJvcStorageType, mpanlSigMpanl=mpanlSigMpanl, mpanlDlciIntEntry=mpanlDlciIntEntry, mpanlDlciLCoPathDataTable=mpanlDlciLCoPathDataTable, mpanlSigIndex=mpanlSigIndex, mpanlDlciVcFrmCongestedToSubnet=mpanlDlciVcFrmCongestedToSubnet, mpanlOperStatusTable=mpanlOperStatusTable, mpanlFrMuxSetup=mpanlFrMuxSetup, mpanlStatsTable=mpanlStatsTable, mpanlFramerStorageType=mpanlFramerStorageType, mpanlDnaEgressAccounting=mpanlDnaEgressAccounting, mpanlDlciTransferPriorityFromNetwork=mpanlDlciTransferPriorityFromNetwork, mpanlDlciJvcCallingLcn=mpanlDlciJvcCallingLcn, mpanlRowStatusTable=mpanlRowStatusTable, mpanlFrMuxSetupRowStatusTable=mpanlFrMuxSetupRowStatusTable, mpanlDlciVcSendSequenceNumber=mpanlDlciVcSendSequenceNumber, mpanlSigMpanlAckTimeout=mpanlSigMpanlAckTimeout, mpanlDlciTotalEgressBytes=mpanlDlciTotalEgressBytes, mpanlDlciJvcComponentName=mpanlDlciJvcComponentName, mpanlSigMpanlFrmrReceive=mpanlSigMpanlFrmrReceive, mpanlDlciErrorLongFrmFromIf=mpanlDlciErrorLongFrmFromIf, mpanlSigSysParmsEntry=mpanlSigSysParmsEntry, mpanlDnaRowStatusEntry=mpanlDnaRowStatusEntry, mpanlDlciVcRowStatus=mpanlDlciVcRowStatus, mpanlSigMpanlRowStatusEntry=mpanlSigMpanlRowStatusEntry, mpanlSigMpanlStorageType=mpanlSigMpanlStorageType, mpanlFrmToIfByQueueValue=mpanlFrmToIfByQueueValue, mpanlDlciLoopbackState=mpanlDlciLoopbackState, mpanlEmissionPriorityQsTable=mpanlEmissionPriorityQsTable, mpanlDnaAccountCollection=mpanlDnaAccountCollection, mpanlDlciUnknownStatus=mpanlDlciUnknownStatus, mpanlDlciLCoRowStatusTable=mpanlDlciLCoRowStatusTable, mpanlCustomerIdentifier=mpanlCustomerIdentifier, mpanlSigProtocolErrors=mpanlSigProtocolErrors, mpanlSigOutCalls=mpanlSigOutCalls, mpanlDlciBciToSubnet=mpanlDlciBciToSubnet, mpaNetworkLinkCapabilitiesBE=mpaNetworkLinkCapabilitiesBE, mpanlIsdnRowStatusEntry=mpanlIsdnRowStatusEntry, mpanlStorageType=mpanlStorageType, mpanlSigAckTimer=mpanlSigAckTimer, mpanlDlciLCoBytesFromNetwork=mpanlDlciLCoBytesFromNetwork, mpanlDnaOutgoingOptionsEntry=mpanlDnaOutgoingOptionsEntry, mpanlSigDisconnectTimer=mpanlSigDisconnectTimer, mpanlSigCurrentQueueSize=mpanlSigCurrentQueueSize, mpanlDlciJvcStatEntry=mpanlDlciJvcStatEntry, mpanlFramerUtilTable=mpanlFramerUtilTable, mpanlIsdnIndex=mpanlIsdnIndex, mpanlFrMuxSetupPvcSetupComponentName=mpanlFrMuxSetupPvcSetupComponentName, mpanlIfEntryEntry=mpanlIfEntryEntry, mpanlLmiRowStatusTable=mpanlLmiRowStatusTable, mpanlFrMuxSetupPvcSetupProvEntry=mpanlFrMuxSetupPvcSetupProvEntry, mpanlSigMpanlIndex=mpanlSigMpanlIndex, mpanlUsageState=mpanlUsageState, mpanlLmiUsageState=mpanlLmiUsageState, mpanlDlciVcCannotForwardToSubnet=mpanlDlciVcCannotForwardToSubnet, mpanlDlciTotalIngressSegFrm=mpanlDlciTotalIngressSegFrm, mpanlSigOperationalState=mpanlSigOperationalState, mpanlFramerLinkEntry=mpanlFramerLinkEntry, mpanlDlciElapsedDifference=mpanlDlciElapsedDifference, mpanlDlciLCoComponentName=mpanlDlciLCoComponentName, mpanlDlciLbLocalFecnFrm=mpanlDlciLbLocalFecnFrm, mpanlFramerLargeFrmErrors=mpanlFramerLargeFrmErrors, mpanlAvailabilityStatus=mpanlAvailabilityStatus, mpanlDlciLCoPermittedTrunkTypes=mpanlDlciLCoPermittedTrunkTypes, mpanlSigStorageType=mpanlSigStorageType, mpanlDlciLCoOptimization=mpanlDlciLCoOptimization, mpanlSigRowStatusEntry=mpanlSigRowStatusEntry, mpanlOctetToIfByQueueIndex=mpanlOctetToIfByQueueIndex, mpanlDlciLCoEmissionPriority=mpanlDlciLCoEmissionPriority, mpanlDlciVcRcosFromNetwork=mpanlDlciVcRcosFromNetwork, mpanlSigLapfSysTable=mpanlSigLapfSysTable, mpanlDlciJvcCalledLcn=mpanlDlciJvcCalledLcn, mpanlDlciLCoIndex=mpanlDlciLCoIndex, mpanlDlciDiscardedBytes=mpanlDlciDiscardedBytes, mpanlSigComponentName=mpanlSigComponentName, mpanlInvalidHeaderFramesFromIf=mpanlInvalidHeaderFramesFromIf, mpanlPrefixDnaRowStatusEntry=mpanlPrefixDnaRowStatusEntry, mpanlLmiParmsTable=mpanlLmiParmsTable, mpanlSigLastStateInStatusMsgReceived=mpanlSigLastStateInStatusMsgReceived, mpanlDlciDiscDeCongestedFromIf=mpanlDlciDiscDeCongestedFromIf, mpanlDlciLCoPktsFromNetwork=mpanlDlciLCoPktsFromNetwork, mpanlSigUsageState=mpanlSigUsageState, mpanlDlciJvcPacketsDiscarded=mpanlDlciJvcPacketsDiscarded, mpanlIsdnAddressSignalling=mpanlIsdnAddressSignalling, mpanlDlciVcStartTime=mpanlDlciVcStartTime, mpaNetworkLinkCapabilities=mpaNetworkLinkCapabilities, mpanlFramerUnderruns=mpanlFramerUnderruns, mpanlRoundTripDelay=mpanlRoundTripDelay, mpanlDlciFrmToIf=mpanlDlciFrmToIf, mpanlDnaAccountClass=mpanlDnaAccountClass, mpanlDlciVcRcosToNetwork=mpanlDlciVcRcosToNetwork, mpanlDlciVcOutOfRangeFrmFromSubnet=mpanlDlciVcOutOfRangeFrmFromSubnet, mpanlDlciBytesFromIf=mpanlDlciBytesFromIf, mpanlSigMpanlRowStatus=mpanlSigMpanlRowStatus, mpanlSigIdleProbeTimer=mpanlSigIdleProbeTimer, mpanlFrMuxSetupPvcSetupRowStatusEntry=mpanlFrMuxSetupPvcSetupRowStatusEntry, mpanlDlciJvcOperEntry=mpanlDlciJvcOperEntry, mpanlDlciStateTable=mpanlDlciStateTable, mpanlDlciLCoRowStatus=mpanlDlciLCoRowStatus, mpanlSigMpanlCurrentState=mpanlSigMpanlCurrentState, mpanlFrMuxSetupPvcSetupIndex=mpanlFrMuxSetupPvcSetupIndex, mpanlDlciStateEntry=mpanlDlciStateEntry, mpanlDlciFciFromSubnet=mpanlDlciFciFromSubnet, mpanlDlciVcDiagnosticCode=mpanlDlciVcDiagnosticCode, mpanlFrmToIfByQueueEntry=mpanlFrmToIfByQueueEntry, mpanlDlciErrorLongBytesFromIf=mpanlDlciErrorLongBytesFromIf, mpanlIsdnComponentName=mpanlIsdnComponentName, mpanlSigQualityOfServiceNotAvailable=mpanlSigQualityOfServiceNotAvailable, mpanlIsdnLastUsedCgpn=mpanlIsdnLastUsedCgpn, mpanlDlciVcSegmentsRx=mpanlDlciVcSegmentsRx, mpanlDlciVcFrmLossTimeouts=mpanlDlciVcFrmLossTimeouts, mpanlDlciVcNotDataXferFromSubnet=mpanlDlciVcNotDataXferFromSubnet, mpanlSigMpanlSapXCommandsRx=mpanlSigMpanlSapXCommandsRx, mpanlDlciVcPreviousState=mpanlDlciVcPreviousState, mpanlDlciLCoBytesToNetwork=mpanlDlciLCoBytesToNetwork, mpanlDlciLCoPathEntry=mpanlDlciLCoPathEntry, mpanlDlciLbRowStatus=mpanlDlciLbRowStatus, mpanlDlciCommittedBurstSize=mpanlDlciCommittedBurstSize, mpanlSigMpanlSap0CommandsTx=mpanlSigMpanlSap0CommandsTx, mpanlDlciStartTime=mpanlDlciStartTime, mpanlTrafficStatsEntry=mpanlTrafficStatsEntry, mpanlIfAdminStatus=mpanlIfAdminStatus, mpanlDlciLCoState=mpanlDlciLCoState, mpanlFramerAborts=mpanlFramerAborts, mpanlSigReceiveRejectFrame=mpanlSigReceiveRejectFrame, mpanlFramerFrmModeErrors=mpanlFramerFrmModeErrors, mpanlDlciMaximumFrameSize=mpanlDlciMaximumFrameSize, mpaNetworkLinkGroup=mpaNetworkLinkGroup, mpanlDlciLbRowStatusTable=mpanlDlciLbRowStatusTable, mpanlDlciJvcCurrentState=mpanlDlciJvcCurrentState, mpanlSigMpanlLapfStatsTable=mpanlSigMpanlLapfStatsTable, mpanlStateEntry=mpanlStateEntry, mpanlDlciTransferPriToNwk=mpanlDlciTransferPriToNwk, mpanlDlciJvcProtocolErrors=mpanlDlciJvcProtocolErrors, mpanlDlciABitStatusToIf=mpanlDlciABitStatusToIf, mpanlVoFrStatsEntry=mpanlVoFrStatsEntry, mpaNetworkLinkCapabilitiesBE01=mpaNetworkLinkCapabilitiesBE01, mpanlOctetToIfByQueueEntry=mpanlOctetToIfByQueueEntry, mpanlDlciVcOoSeqByteCntExceeded=mpanlDlciVcOoSeqByteCntExceeded, mpanlDlciEmissionPriorityToIf=mpanlDlciEmissionPriorityToIf, mpanlDlciVcIndex=mpanlDlciVcIndex, mpanlPrefixDna=mpanlPrefixDna, mpanlDlciAbitTable=mpanlDlciAbitTable, mpanlDlciLbRemoteBecnFrm=mpanlDlciLbRemoteBecnFrm, mpanlDlciLCoRequiredTxBandwidth=mpanlDlciLCoRequiredTxBandwidth, mpanlDlciLCoHoldingPriority=mpanlDlciLCoHoldingPriority, mpanlDlciDeFrmToIf=mpanlDlciDeFrmToIf, mpanlSigLapfSysEntry=mpanlSigLapfSysEntry, mpanlLmiRowStatusEntry=mpanlLmiRowStatusEntry, mpanlDlciLbComponentName=mpanlDlciLbComponentName, mpanlFramerProvTable=mpanlFramerProvTable, mpanlDlciJvcCallingNpi=mpanlDlciJvcCallingNpi, mpanlDlciStatsTable=mpanlDlciStatsTable, mpanlDlciLCoCallDataTable=mpanlDlciLCoCallDataTable, mpanlVoFrOperTable=mpanlVoFrOperTable, mpanlDlciLCoPathValue=mpanlDlciLCoPathValue, mpanlDlciDiscFrameAbit=mpanlDlciDiscFrameAbit, mpanlSigSvcaccTable=mpanlSigSvcaccTable, mpanlDlciEirEgressBytes=mpanlDlciEirEgressBytes, mpanlDlciVcDataPath=mpanlDlciVcDataPath, mpanlSigAckDelayTimer=mpanlSigAckDelayTimer, mpanlDlciJvcCalledAddress=mpanlDlciJvcCalledAddress, mpanlOctetFromIf=mpanlOctetFromIf, mpanlSigLastDlciWithMsgBlockCongestion=mpanlSigLastDlciWithMsgBlockCongestion, mpanlDlciQ933CallState=mpanlDlciQ933CallState, mpanlCidDataEntry=mpanlCidDataEntry, mpanlDlciAlarmStatus=mpanlDlciAlarmStatus, mpanlDlciDiscCongestedFromIfBytes=mpanlDlciDiscCongestedFromIfBytes, mpanlDlciLCoStatsEntry=mpanlDlciLCoStatsEntry, mpanlDlciVcPeakOoSeqPktCount=mpanlDlciVcPeakOoSeqPktCount, mpanlDlciLCoElapsedTimeTillNow=mpanlDlciLCoElapsedTimeTillNow, mpanlFramerNormPrioLinkUtilFromIf=mpanlFramerNormPrioLinkUtilFromIf, mpanlDlciVcSegmentsSent=mpanlDlciVcSegmentsSent, mpanlDlciVcFrdTable=mpanlDlciVcFrdTable, mpanlSigLastTimeMsgBlockCongested=mpanlSigLastTimeMsgBlockCongested, mpanlOperEntry=mpanlOperEntry, mpanlPrefixDnaComponentName=mpanlPrefixDnaComponentName, mpanlDlciLCoCallingNpi=mpanlDlciLCoCallingNpi, mpanlFrMuxSetupPvcSetup=mpanlFrMuxSetupPvcSetup, mpanlDlciBciFromSubnet=mpanlDlciBciFromSubnet, mpanlSigMpanlProfileEntry=mpanlSigMpanlProfileEntry, mpanlDnaDefaultTransferPriority=mpanlDnaDefaultTransferPriority, mpanlDlciLCoPathDataEntry=mpanlDlciLCoPathDataEntry, mpanlDlciLCoBumpPreference=mpanlDlciLCoBumpPreference, mpanlDlciJvcCalledNpi=mpanlDlciJvcCalledNpi)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-MpaNetworkLinkMIB", mpanlDnaIndex=mpanlDnaIndex, mpanlDlciExcessBytesFromIf=mpanlDlciExcessBytesFromIf, mpanlDlciLbStorageType=mpanlDlciLbStorageType, mpanlDlciTotalEgressSegFrm=mpanlDlciTotalEgressSegFrm, mpanlFrMuxSetupCommittedInformationRate=mpanlFrMuxSetupCommittedInformationRate, mpanlFramerProvEntry=mpanlFramerProvEntry, mpanlDlciLCo=mpanlDlciLCo, mpanlDnaCallOptionsEntry=mpanlDnaCallOptionsEntry, mpanlSigMpanlStateTable=mpanlSigMpanlStateTable, mpanlFramer=mpanlFramer, mpanlDlciTransferPriFromNwk=mpanlDlciTransferPriFromNwk, mpanlSigLapfStatusEntry=mpanlSigLapfStatusEntry, mpanlDlciVcRowStatusEntry=mpanlDlciVcRowStatusEntry, mpanlSigInCalls=mpanlSigInCalls, mpanlIsdnProvEntry=mpanlIsdnProvEntry, mpanlFramerAdminState=mpanlFramerAdminState, mpanlFramerCrcErrors=mpanlFramerCrcErrors, mpanlDnaServiceExchange=mpanlDnaServiceExchange, mpanlFramerStateEntry=mpanlFramerStateEntry, mpanlDlciVcPathReliability=mpanlDlciVcPathReliability, mpanlDlciVcSubnetRecoveries=mpanlDlciVcSubnetRecoveries, mpanlSigIFramesRcvdDiscarded=mpanlSigIFramesRcvdDiscarded, mpanlSigInCallsRefused=mpanlSigInCallsRefused, mpaNetworkLinkCapabilitiesBE01A=mpaNetworkLinkCapabilitiesBE01A, mpanlLmiRowStatus=mpanlLmiRowStatus, mpanlSigMpanlProtocolErrors=mpanlSigMpanlProtocolErrors, mpanlDlciJvcPacketsToSubnet=mpanlDlciJvcPacketsToSubnet, mpanlRowStatus=mpanlRowStatus, mpanlSigLastQ933StateReceivedStatus=mpanlSigLastQ933StateReceivedStatus, mpanlSigMpanlLapfStatusEntry=mpanlSigMpanlLapfStatusEntry, mpanlDlciLbStatsTable=mpanlDlciLbStatsTable, mpaNetworkLinkGroupBE01A=mpaNetworkLinkGroupBE01A, mpanlFrMuxSetupPvcSetupStorageType=mpanlFrMuxSetupPvcSetupStorageType, mpanlDlciVcDmepEntry=mpanlDlciVcDmepEntry, mpanlIsdnRowStatus=mpanlIsdnRowStatus, mpanlFramerFlagsBetweenFrames=mpanlFramerFlagsBetweenFrames, mpanlDlciStatsEntry=mpanlDlciStatsEntry, mpanlSigMpanlProfileTable=mpanlSigMpanlProfileTable, mpanlDlciFecnFrmFromIf=mpanlDlciFecnFrmFromIf, mpanlRowStatusEntry=mpanlRowStatusEntry, mpanlFramerNonOctetErrors=mpanlFramerNonOctetErrors, mpanlVoFrRowStatusEntry=mpanlVoFrRowStatusEntry, mpanlDlciVcPriority=mpanlDlciVcPriority, mpanlDlciDiscardedSegFrm=mpanlDlciDiscardedSegFrm, mpanlFrMuxSetupIndex=mpanlFrMuxSetupIndex, mpanlSigLapfStatsTable=mpanlSigLapfStatsTable, mpanlDlciLCoCallingDna=mpanlDlciLCoCallingDna, mpaNetworkLinkGroupBE01=mpaNetworkLinkGroupBE01, mpanlSigIFramesTxDiscarded=mpanlSigIFramesTxDiscarded, mpanlSigLastDlciReceivedStatus=mpanlSigLastDlciReceivedStatus, mpanlSigCallSetupTimer=mpanlSigCallSetupTimer, mpanlSigMpanlComponentName=mpanlSigMpanlComponentName, mpanlDlciVcCadTable=mpanlDlciVcCadTable, mpanlOctetToIfByQueueValue=mpanlOctetToIfByQueueValue, mpanlIsdnOperTable=mpanlIsdnOperTable, mpanlDlciVcPeakOoSeqFrmForwarded=mpanlDlciVcPeakOoSeqFrmForwarded, mpanlDlciEirIngressBytes=mpanlDlciEirIngressBytes, mpanlDlciDiscCongestedToIf=mpanlDlciDiscCongestedToIf, mpanlDnaOutgoingOptionsTable=mpanlDnaOutgoingOptionsTable, mpanlDlciLbRowStatusEntry=mpanlDlciLbRowStatusEntry, mpanlDlciLCoPathTable=mpanlDlciLCoPathTable, mpanlDnaComponentName=mpanlDnaComponentName, mpanlVoFrOperEntry=mpanlVoFrOperEntry, mpanlFrMuxSetupOpEntry=mpanlFrMuxSetupOpEntry, mpanlDlciDiscDeCongestedToIfBytes=mpanlDlciDiscDeCongestedToIfBytes, mpanlSigSysParmsTable=mpanlSigSysParmsTable, mpanlDlciLCoSetupPriority=mpanlDlciLCoSetupPriority, mpanlDlciLCoCostMetric=mpanlDlciLCoCostMetric, mpanlDlciLCoDiscardPriority=mpanlDlciLCoDiscardPriority, mpanlLastUnknownDlci=mpanlLastUnknownDlci, mpanlDlciDiscCongestedToIfBytes=mpanlDlciDiscCongestedToIfBytes, mpanlDnaStorageType=mpanlDnaStorageType, mpanlSigIFramesTransmitted=mpanlSigIFramesTransmitted, mpanlAlarmStatus=mpanlAlarmStatus, mpanlDlciRowStatusTable=mpanlDlciRowStatusTable, mpanlFramerOverruns=mpanlFramerOverruns, mpanlDlciVcCalledDna=mpanlDlciVcCalledDna, mpanlUnknownStatus=mpanlUnknownStatus, mpanlFramerUsageState=mpanlFramerUsageState, mpanlDlciJvcPreviousState=mpanlDlciJvcPreviousState, mpanlDlciBecnFrmToIf=mpanlDlciBecnFrmToIf, mpanlFrMuxSetupOpTable=mpanlFrMuxSetupOpTable, mpanlDlciLbRemoteTotalBytes=mpanlDlciLbRemoteTotalBytes, mpanlDlciAbitEntry=mpanlDlciAbitEntry, mpanlFrMuxSetupRowStatusEntry=mpanlFrMuxSetupRowStatusEntry, mpanlDlciTotalIngressBytes=mpanlDlciTotalIngressBytes, mpanlDlciLCoRetryCount=mpanlDlciLCoRetryCount, mpanlOctetToIf=mpanlOctetToIf, mpanlDlciLCoRequiredRxBandwidth=mpanlDlciLCoRequiredRxBandwidth, mpanlDlciStorageType=mpanlDlciStorageType, mpanlSigLapfStatusTable=mpanlSigLapfStatusTable, mpanlLmi=mpanlLmi, mpanlOperTable=mpanlOperTable, mpanlDlciVcCallReferenceNumber=mpanlDlciVcCallReferenceNumber, mpanlVoFrRowStatus=mpanlVoFrRowStatus, mpanlSigMpanlLastStateChangeReason=mpanlSigMpanlLastStateChangeReason, mpanlDlciDeBytesFromIf=mpanlDlciDeBytesFromIf, mpanlDlciLCoCallReferenceNumber=mpanlDlciLCoCallReferenceNumber, mpanlSigNetworkType=mpanlSigNetworkType, mpanlCidDataTable=mpanlCidDataTable, mpanlSigMpanlIFramesRcvdDiscarded=mpanlSigMpanlIFramesRcvdDiscarded, mpanlDlciLbRemoteDeFrm=mpanlDlciLbRemoteDeFrm, mpanlIndex=mpanlIndex, mpanlFramerFrmToIf=mpanlFramerFrmToIf, mpanlSigMpanlReceiveRejectFrame=mpanlSigMpanlReceiveRejectFrame, mpanlDna=mpanlDna, mpanlDlciLbStatsEntry=mpanlDlciLbStatsEntry, mpanlSigMpanlOperationalState=mpanlSigMpanlOperationalState, mpanlDlciComponentName=mpanlDlciComponentName, mpanlDlciDiscDeCongestedFromIfBytes=mpanlDlciDiscDeCongestedFromIfBytes, mpanlFrMuxSetupStorageType=mpanlFrMuxSetupStorageType, mpanlDlciVcCalledNpi=mpanlDlciVcCalledNpi, mpanlIsdnBChanIntState=mpanlIsdnBChanIntState, mpanlDlciQ933CallReference=mpanlDlciQ933CallReference, mpanlDlciVcIntdEntry=mpanlDlciVcIntdEntry, mpanlFrMuxSetupPvcSetupRowStatus=mpanlFrMuxSetupPvcSetupRowStatus, mpanlDlciVcDmepValue=mpanlDlciVcDmepValue, mpanlLmiStorageType=mpanlLmiStorageType, mpanlFramerIndex=mpanlFramerIndex, mpanlDlciSpOpEntry=mpanlDlciSpOpEntry, mpanlOperationalState=mpanlOperationalState, mpanlSigRetransmitLimit=mpanlSigRetransmitLimit, mpanlLmiAdminState=mpanlLmiAdminState, mpanlDlciLbRemoteTotalFrm=mpanlDlciLbRemoteTotalFrm, mpanlDlciJvcOperTable=mpanlDlciJvcOperTable, mpanlIsdnProvTable=mpanlIsdnProvTable, mpanlDlciVcSegmentSize=mpanlDlciVcSegmentSize, mpanlDlciStandbyStatus=mpanlDlciStandbyStatus, mpanlOperStatusEntry=mpanlOperStatusEntry, mpanlDlciVcEmissionPriorityToNetwork=mpanlDlciVcEmissionPriorityToNetwork, mpanlVoFrStorageType=mpanlVoFrStorageType, mpanlTrafficStatsTable=mpanlTrafficStatsTable, mpanlSigLastStateChangeReason=mpanlSigLastStateChangeReason, mpanlDlciLCoRoundTripDelay=mpanlDlciLCoRoundTripDelay, mpanlDlciLbLocalBecnFrm=mpanlDlciLbLocalBecnFrm, mpanlFrMuxSetupRowStatus=mpanlFrMuxSetupRowStatus, mpanlDlciJvcStatTable=mpanlDlciJvcStatTable, mpanlDlciJvcRowStatusTable=mpanlDlciJvcRowStatusTable, mpaNetworkLinkGroupBE=mpaNetworkLinkGroupBE, mpanlDlciVcElapsedTimeTillNow=mpanlDlciVcElapsedTimeTillNow, mpanlEmissionPriorityQsEntry=mpanlEmissionPriorityQsEntry, mpanlDlciJvcRowStatusEntry=mpanlDlciJvcRowStatusEntry, mpanlPrefixDnaDataNetworkAddressIndex=mpanlPrefixDnaDataNetworkAddressIndex, mpanlDlciLCoRequiredTrafficType=mpanlDlciLCoRequiredTrafficType, mpanlVoFrStatsTable=mpanlVoFrStatsTable, mpanlDlciDiscDeCongestedToIf=mpanlDlciDiscDeCongestedToIf, mpanlDlciLCoRequiredCustomerParameter=mpanlDlciLCoRequiredCustomerParameter, mpanlDlciJvcIndex=mpanlDlciJvcIndex, mpanlPrefixDnaRowStatusTable=mpanlPrefixDnaRowStatusTable, mpanlDlciABitReasonToIf=mpanlDlciABitReasonToIf, mpanlIsdn=mpanlIsdn, mpanlFramerNormPrioLinkUtilToIf=mpanlFramerNormPrioLinkUtilToIf, mpanlVoFrFragmentedHighestPriorityFrames=mpanlVoFrFragmentedHighestPriorityFrames, mpanlSigRemoteBusy=mpanlSigRemoteBusy, mpanlDlciDiscByteAbit=mpanlDlciDiscByteAbit, mpanlDlciVcAccountingEnabled=mpanlDlciVcAccountingEnabled, mpanlDlciBytesToIf=mpanlDlciBytesToIf, mpanlSigMpanlRemoteBusy=mpanlSigMpanlRemoteBusy, mpanlLmiOperationalState=mpanlLmiOperationalState, mpanlFrMuxSetupComponentName=mpanlFrMuxSetupComponentName, mpanlSigCurrentNumberOfSvcCalls=mpanlSigCurrentNumberOfSvcCalls, mpanlIsdnRowStatusTable=mpanlIsdnRowStatusTable, mpanlDlciVcCadEntry=mpanlDlciVcCadEntry, mpanlSigStatsEntry=mpanlSigStatsEntry, mpanlSigAckTimeout=mpanlSigAckTimeout, mpanlFramerRowStatus=mpanlFramerRowStatus, mpanlDlciVcPeakRetryQueueSize=mpanlDlciVcPeakRetryQueueSize, mpanlSigMpanlLapfStatsEntry=mpanlSigMpanlLapfStatsEntry, mpanlSigMpanlIFramesTransmitted=mpanlSigMpanlIFramesTransmitted, mpanlDlciCalldEntry=mpanlDlciCalldEntry, mpanlDlciExcessFrmFromIf=mpanlDlciExcessFrmFromIf, mpanlDnaCallOptionsTable=mpanlDnaCallOptionsTable, mpanlDlciVcCalledLcn=mpanlDlciVcCalledLcn, mpanlDlciEirEgressSegFrm=mpanlDlciEirEgressSegFrm, mpanlDlciLbRemoteDeBytes=mpanlDlciLbRemoteDeBytes, mpanlDlciLCoReasonForNoRoute=mpanlDlciLCoReasonForNoRoute, mpanlStandbyStatus=mpanlStandbyStatus, mpanlSigSvcaccEntry=mpanlSigSvcaccEntry, mpanlVoFr=mpanlVoFr, mpanlSigAdminState=mpanlSigAdminState, mpanlSigMpanlStatsEntry=mpanlSigMpanlStatsEntry, mpanlDlciVcNotDataXferToSubnet=mpanlDlciVcNotDataXferToSubnet, mpanlIsdnActiveVirtualCircuitsCount=mpanlIsdnActiveVirtualCircuitsCount, mpanlSigRowStatus=mpanlSigRowStatus, mpanlStateTable=mpanlStateTable, mpanlSigSetupTimeout=mpanlSigSetupTimeout, mpanlSigMpanlCurrentQueueSize=mpanlSigMpanlCurrentQueueSize, mpanlFramerOctetFromIf=mpanlFramerOctetFromIf, mpanlSigMpanlIFramesTxDiscarded=mpanlSigMpanlIFramesTxDiscarded, mpanlDlciLCoPathFailureCount=mpanlDlciLCoPathFailureCount, mpanlDlciSpOpTable=mpanlDlciSpOpTable, mpanlDlciLCoLastTearDownReason=mpanlDlciLCoLastTearDownReason, mpanlStatsEntry=mpanlStatsEntry, mpanlProceduralStatus=mpanlProceduralStatus, mpanlIfEntryTable=mpanlIfEntryTable, mpanlDlciLbIndex=mpanlDlciLbIndex, mpanlDlciExcessBurstSize=mpanlDlciExcessBurstSize, mpanlDlciVcCallingLcn=mpanlDlciVcCallingLcn, mpanlLmiStateEntry=mpanlLmiStateEntry, mpanlDlciLbLocalTotalBytes=mpanlDlciLbLocalTotalBytes, mpanlSigCurrentState=mpanlSigCurrentState, mpanlSigStateChange=mpanlSigStateChange, mpanlDlciLb=mpanlDlciLb, mpanlDlciLCoDelayMetric=mpanlDlciLCoDelayMetric, mpanlSig=mpanlSig, mpanlLmiParmsEntry=mpanlLmiParmsEntry, mpanlSigMpanlLapfStatusTable=mpanlSigMpanlLapfStatusTable, mpanlFrmFromIf=mpanlFrmFromIf, mpanlDlciBecnFrmFromIf=mpanlDlciBecnFrmFromIf, mpanlSigMpanlRowStatusTable=mpanlSigMpanlRowStatusTable, mpanlSigDefaultAccounting=mpanlSigDefaultAccounting, mpanlDlciDiscCongestedFromIf=mpanlDlciDiscCongestedFromIf, mpanlDlciVcCallingNpi=mpanlDlciVcCallingNpi, mpanlComponentName=mpanlComponentName, mpanlDnaRowStatus=mpanlDnaRowStatus, mpanlDlciLCoStorageType=mpanlDlciLCoStorageType, mpanlDlciVcState=mpanlDlciVcState, mpanlFramerInterfaceName=mpanlFramerInterfaceName, mpanlSigMpanlDteComponentName=mpanlSigMpanlDteComponentName, mpaNetworkLinkMIB=mpaNetworkLinkMIB, mpanlSigStateTable=mpanlSigStateTable, mpanlDlciVcRowStatusTable=mpanlDlciVcRowStatusTable, mpanlVoFrLostFragmentsFromIf=mpanlVoFrLostFragmentsFromIf, mpanlDlciAdminState=mpanlDlciAdminState, mpanlFramerRowStatusEntry=mpanlFramerRowStatusEntry, mpanlDlciVcAccountingEnd=mpanlDlciVcAccountingEnd, mpanlDlciLCoCalledNpi=mpanlDlciLCoCalledNpi, mpanlFramerOperationalState=mpanlFramerOperationalState, mpanlIsdnOperEntry=mpanlIsdnOperEntry, mpanlSigIFramesReceived=mpanlSigIFramesReceived, mpanlIfIndex=mpanlIfIndex, mpanlDlciVcCallingDna=mpanlDlciVcCallingDna, mpanlSigLapfStatsEntry=mpanlSigLapfStatsEntry, mpanlSigReleaseTimer=mpanlSigReleaseTimer, mpanlSigMpanlStateEntry=mpanlSigMpanlStateEntry, mpanlCommentText=mpanlCommentText, mpanlDlciRowStatusEntry=mpanlDlciRowStatusEntry, mpanlDlciOperationalState=mpanlDlciOperationalState, mpanlDlciVcFrdEntry=mpanlDlciVcFrdEntry, mpanlPrefixDnaRowStatus=mpanlPrefixDnaRowStatus, mpanlDlciJvcCallingAddress=mpanlDlciJvcCallingAddress, mpanlDlciFecnFrmToIf=mpanlDlciFecnFrmToIf, mpanlIsdnT320=mpanlIsdnT320, mpanlDlciEirIngressSegFrm=mpanlDlciEirIngressSegFrm, mpanlOctetToIfByQueueTable=mpanlOctetToIfByQueueTable, mpanlDlciDeBytesToIf=mpanlDlciDeBytesToIf, mpanlDlciVcComponentName=mpanlDlciVcComponentName, mpanl=mpanl, mpanlDlciVcFastSelectCall=mpanlDlciVcFastSelectCall, mpanlIsdnDataSigChan=mpanlIsdnDataSigChan, mpanlDlciCalldTable=mpanlDlciCalldTable, mpanlSigMpanlStatsTable=mpanlSigMpanlStatsTable, mpanlFrmToIfByQueueTable=mpanlFrmToIfByQueueTable, mpanlSigMpanlHighestDlci=mpanlSigMpanlHighestDlci)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-MpaNetworkLinkMIB", mpanlLmiStateTable=mpanlLmiStateTable, mpanlDlciLCoRequiredSecurity=mpanlDlciLCoRequiredSecurity, mpanlVoFrMaximumFrameSize=mpanlVoFrMaximumFrameSize, mpanlDlciLCoRowStatusEntry=mpanlDlciLCoRowStatusEntry, mpanlFramerLinkTable=mpanlFramerLinkTable, mpanlDlciIntTable=mpanlDlciIntTable, mpanlDlciLCoPktsToNetwork=mpanlDlciLCoPktsToNetwork, mpanlDlciDiscExcessFromIf=mpanlDlciDiscExcessFromIf, mpanlDlciVcType=mpanlDlciVcType, mpanlDlciRowStatus=mpanlDlciRowStatus, mpanlDlciVcMaxSubnetPktSize=mpanlDlciVcMaxSubnetPktSize, mpanlSigMpanlUsageState=mpanlSigMpanlUsageState, mpanlDlciDiscExcessFromIfBytes=mpanlDlciDiscExcessFromIfBytes, mpanlFramerFrmFromIf=mpanlFramerFrmFromIf, mpanlDlciAccounting=mpanlDlciAccounting, mpanlDlciCallReferenceNumber=mpanlDlciCallReferenceNumber, mpanlDlciBecnFrmSetByService=mpanlDlciBecnFrmSetByService, mpanlDlciVcEmissionPriorityFromNetwork=mpanlDlciVcEmissionPriorityFromNetwork, mpanlDlciVcPktRetryTimeouts=mpanlDlciVcPktRetryTimeouts, mpanlSigFrmrReceive=mpanlSigFrmrReceive, mpanlPrefixDnaStorageType=mpanlPrefixDnaStorageType, mpanlFrMuxSetupPvcSetupProvTable=mpanlFrMuxSetupPvcSetupProvTable, mpanlDlciUsageState=mpanlDlciUsageState, mpanlFrMuxSetupPvcSetupRowStatusTable=mpanlFrMuxSetupPvcSetupRowStatusTable, mpanlDlciLCoStatsTable=mpanlDlciLCoStatsTable, mpanlSigMpanlSapXCommandsTx=mpanlSigMpanlSapXCommandsTx, mpanlDlciVcIntdTable=mpanlDlciVcIntdTable, mpanlDlciABitStatusFromIf=mpanlDlciABitStatusFromIf, mpanlDlciLbLocalDeFrm=mpanlDlciLbLocalDeFrm, mpanlDlciJvc=mpanlDlciJvc, mpanlSigLastCauseInStatusMsgReceived=mpanlSigLastCauseInStatusMsgReceived, mpanlDlciVcDuplicatesFromSubnet=mpanlDlciVcDuplicatesFromSubnet)
