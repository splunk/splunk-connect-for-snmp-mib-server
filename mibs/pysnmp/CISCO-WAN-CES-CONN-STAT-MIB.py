#
# PySNMP MIB module CISCO-WAN-CES-CONN-STAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-CES-CONN-STAT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:04:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cesmChan, = mibBuilder.importSymbols("BASIS-MIB", "cesmChan")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, iso, ModuleIdentity, IpAddress, Integer32, Counter32, NotificationType, ObjectIdentity, Unsigned32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "iso", "ModuleIdentity", "IpAddress", "Integer32", "Counter32", "NotificationType", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoWanCesConnStatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 43))
ciscoWanCesConnStatMIB.setRevisions(('2002-12-24 00:00',))
if mibBuilder.loadTexts: ciscoWanCesConnStatMIB.setLastUpdated('200212240000Z')
if mibBuilder.loadTexts: ciscoWanCesConnStatMIB.setOrganization('Cisco Systems, Inc.')
cesmChanCntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2))
cesmChanCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1), )
if mibBuilder.loadTexts: cesmChanCntGrpTable.setStatus('current')
cesmChanCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-CES-CONN-STAT-MIB", "cesCntChanNum"))
if mibBuilder.loadTexts: cesmChanCntGrpEntry.setStatus('current')
cesCntChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 2064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCntChanNum.setStatus('current')
cesChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfigured", 1), ("okay", 2), ("alarm", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanState.setStatus('current')
cesXmtATMState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("sendingAIS", 3), ("sendingFERF", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesXmtATMState.setStatus('current')
cesRcvATMState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receivingAIS", 3), ("receivingFERF", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRcvATMState.setStatus('current')
cesCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoss", 1), ("loss", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCellLossStatus.setStatus('current')
cesReassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesReassCells.setStatus('current')
cesGenCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesGenCells.setStatus('current')
cesHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesHdrErrors.setStatus('current')
cesPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPointerReframes.setStatus('current')
cesLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesLostCells.setStatus('current')
cesBufUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesBufUnderflows.setStatus('current')
cesBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesBufOverflows.setStatus('current')
cesIngrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesIngrDiscardedBytes.setStatus('current')
cesUflowInsCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesUflowInsCells.setStatus('current')
cesOflowDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesOflowDropBytes.setStatus('current')
cesCellSeqMismatchCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCellSeqMismatchCnt.setStatus('current')
counterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClrButton.setStatus('current')
cesChanSecUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanSecUptime.setStatus('current')
cesChanSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off-hook", 1), ("on-hook", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanSignalingStatus.setStatus('current')
cesChanStatusBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanStatusBitMap.setStatus('current')
cwcConnStatMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 43, 2))
cwcConnStatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 43, 2, 1))
cwcConnStatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 43, 2, 2))
cwcConnStatCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 43, 2, 2, 1)).setObjects(("CISCO-WAN-CES-CONN-STAT-MIB", "cwcConnGenStatsGroup"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cwcConnStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwcConnStatCompliance = cwcConnStatCompliance.setStatus('current')
cwcConnGenStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 43, 2, 1, 1)).setObjects(("CISCO-WAN-CES-CONN-STAT-MIB", "cesCntChanNum"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesChanState"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesXmtATMState"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesRcvATMState"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesCellLossStatus"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesReassCells"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesGenCells"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesHdrErrors"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesPointerReframes"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesLostCells"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesBufUnderflows"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesBufOverflows"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesIngrDiscardedBytes"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesUflowInsCells"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesOflowDropBytes"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesCellSeqMismatchCnt"), ("CISCO-WAN-CES-CONN-STAT-MIB", "counterClrButton"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesChanSecUptime"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesChanSignalingStatus"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesChanStatusBitMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwcConnGenStatsGroup = cwcConnGenStatsGroup.setStatus('current')
cwcConnStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 43, 2, 1, 2)).setObjects(("CISCO-WAN-CES-CONN-STAT-MIB", "cesPointerReframes"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesBufUnderflows"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesBufOverflows"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesIngrDiscardedBytes"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesUflowInsCells"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesOflowDropBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwcConnStatsGroup = cwcConnStatsGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-WAN-CES-CONN-STAT-MIB", cesRcvATMState=cesRcvATMState, cesXmtATMState=cesXmtATMState, cesCellLossStatus=cesCellLossStatus, cesChanSecUptime=cesChanSecUptime, cesmChanCntGrpEntry=cesmChanCntGrpEntry, cesChanState=cesChanState, cesCellSeqMismatchCnt=cesCellSeqMismatchCnt, cwcConnStatsGroup=cwcConnStatsGroup, cwcConnGenStatsGroup=cwcConnGenStatsGroup, cesChanSignalingStatus=cesChanSignalingStatus, cesChanStatusBitMap=cesChanStatusBitMap, cesGenCells=cesGenCells, cesHdrErrors=cesHdrErrors, cesUflowInsCells=cesUflowInsCells, cwcConnStatMIBConformance=cwcConnStatMIBConformance, cesmChanCntGrp=cesmChanCntGrp, cwcConnStatCompliance=cwcConnStatCompliance, cesBufUnderflows=cesBufUnderflows, PYSNMP_MODULE_ID=ciscoWanCesConnStatMIB, cwcConnStatMIBCompliances=cwcConnStatMIBCompliances, cwcConnStatMIBGroups=cwcConnStatMIBGroups, cesPointerReframes=cesPointerReframes, cesOflowDropBytes=cesOflowDropBytes, cesmChanCntGrpTable=cesmChanCntGrpTable, counterClrButton=counterClrButton, cesIngrDiscardedBytes=cesIngrDiscardedBytes, cesReassCells=cesReassCells, cesLostCells=cesLostCells, ciscoWanCesConnStatMIB=ciscoWanCesConnStatMIB, cesCntChanNum=cesCntChanNum, cesBufOverflows=cesBufOverflows)
