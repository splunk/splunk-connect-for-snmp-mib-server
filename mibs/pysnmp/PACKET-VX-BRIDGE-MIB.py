#
# PySNMP MIB module PACKET-VX-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACKET-VX-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:26:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
pvxObjects, lagCondNotifications, condObjectType, swMemberCondNotifications, eventNotifications, pvxSlaMsmtEvtNotifications, tcaDateAndTime, pvxL2IntfSubPortNumber, pvxL2IntfPortIdx, pvxSUniEvtNotifications, pvxL2IntfSlotIdx, tcaThreshold, tcaMontype, condReportType, condDescription, mstpEvtNotifications, pvxESrvcEvtNotifications, pvxL2IntfShelfIdx, condServiceAffecting, evtDescription, erpsCondNotifications, pvxERPSSrvcEvtNotifications, performance, mstpNotificationObjects, condCodeType, pvxERPSSrvcNNIEvtNotifications, pvxESrvcBWPrflEvtNotifications, trapSeqNum, pvxL2IntfPortTypeIdx, evtDateAndTime, tcaValue, evtCodeType, condDateAndTime, pvxL2IntfSwitchIdx, evtObjectType, pvxBridge, mstpCondNotifications, condSeverity = mibBuilder.importSymbols("BTI-7000-MIB", "pvxObjects", "lagCondNotifications", "condObjectType", "swMemberCondNotifications", "eventNotifications", "pvxSlaMsmtEvtNotifications", "tcaDateAndTime", "pvxL2IntfSubPortNumber", "pvxL2IntfPortIdx", "pvxSUniEvtNotifications", "pvxL2IntfSlotIdx", "tcaThreshold", "tcaMontype", "condReportType", "condDescription", "mstpEvtNotifications", "pvxESrvcEvtNotifications", "pvxL2IntfShelfIdx", "condServiceAffecting", "evtDescription", "erpsCondNotifications", "pvxERPSSrvcEvtNotifications", "performance", "mstpNotificationObjects", "condCodeType", "pvxERPSSrvcNNIEvtNotifications", "pvxESrvcBWPrflEvtNotifications", "trapSeqNum", "pvxL2IntfPortTypeIdx", "evtDateAndTime", "tcaValue", "evtCodeType", "condDateAndTime", "pvxL2IntfSwitchIdx", "evtObjectType", "pvxBridge", "mstpCondNotifications", "condSeverity")
btiModules, = mibBuilder.importSymbols("BTI-MIB", "btiModules")
PvxPortType, InitializeCmd, ProfileNameType, InetAddressType, CondReportType, PMIntervalType, MonitorPeriodType, AdminStatus, FixedX1000, OperStatus, CirTestResult, PMValidity, ProtocolActionType, SlaTestRole, MirrorConfigType, Unsigned64, FixedX100, PmTestCmdState, CondServiceAffecting, CondSeverity, CommandStateType, InetAddress, SwitchIdxType = mibBuilder.importSymbols("BTI-TC-MIB", "PvxPortType", "InitializeCmd", "ProfileNameType", "InetAddressType", "CondReportType", "PMIntervalType", "MonitorPeriodType", "AdminStatus", "FixedX1000", "OperStatus", "CirTestResult", "PMValidity", "ProtocolActionType", "SlaTestRole", "MirrorConfigType", "Unsigned64", "FixedX100", "PmTestCmdState", "CondServiceAffecting", "CondSeverity", "CommandStateType", "InetAddress", "SwitchIdxType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, NotificationType, MibIdentifier, ModuleIdentity, Gauge32, iso, Integer32, Bits, ObjectIdentity, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "NotificationType", "MibIdentifier", "ModuleIdentity", "Gauge32", "iso", "Integer32", "Bits", "ObjectIdentity", "Unsigned32", "Counter32")
RowStatus, MacAddress, DisplayString, TimeInterval, DateAndTime, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "DisplayString", "TimeInterval", "DateAndTime", "TruthValue", "TextualConvention")
packetVxBridgeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 18070, 1, 5))
packetVxBridgeMib.setRevisions(('2013-04-03 12:00', '2012-12-20 12:00', '2012-12-06 12:00', '2012-06-20 12:00', '2012-02-10 12:00', '2011-06-23 12:00', '2010-08-06 12:00', '2010-06-18 12:00', '2010-02-12 12:00', '2008-12-19 12:00', '2008-03-10 12:00',))
if mibBuilder.loadTexts: packetVxBridgeMib.setLastUpdated('201304031200Z')
if mibBuilder.loadTexts: packetVxBridgeMib.setOrganization('BTI Systems Inc.')
class PvxPhyPort(DisplayString):
    status = 'current'

class PvxPhyPortList(DisplayString):
    status = 'current'

class PvxL2PortList(DisplayString):
    status = 'current'

class PvxVLANPortList(DisplayString):
    status = 'current'

class PvxL2Port(DisplayString):
    status = 'current'

class PvxVlanId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PvxMSTPVlanList(TextualConvention, OctetString):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 128)

class PvxPCPDecodingList(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("priority7", 1), ("prioirty7-DE", 2), ("priority6", 3), ("priority6-DE", 4), ("priority5", 5), ("priority5-DE", 6), ("priority4", 7), ("priority4-DE", 8), ("priority3", 9), ("priority3-DE", 10), ("priority2", 11), ("priority2-DE", 12), ("priority1", 13), ("priority1-DE", 14), ("priority0", 15), ("priority0-DE", 16))

class PvxPolicyDropAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("drop", 1), ("doNotDrop", 2), ("notDefined", 3))

class PvxQoSColorMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("color-aware", 1), ("color-blind", 2))

class PvxQoSPmCounterMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("count-violate", 1), ("count-cnfrm", 2), ("count-cnfrmAndExceed", 3), ("count-violateAndExceec", 4), ("notUsed", 5))

class PvxCVidMapOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("programmed", 1), ("notProgrammed", 2))

class PvxEcfmTransmitStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ready", 1), ("notReady", 2), ("transmit", 3))

class PvxEcfmMepDefects(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("remoteMepDefect", 0), ("macStatusDefect", 1), ("remoteCCMDefect", 2), ("errorCCMDefect", 3), ("xConnCCMDefect", 4))

class PvxY1731MepDefects(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("remoteMepDefectCondition", 0), ("lossOfContinuity", 1), ("unexpectedPeriod", 2), ("unexpectedMep", 3), ("misMerge", 4), ("unexpectedMegLevel", 5), ("localLinkFailure", 6), ("internalHWFailure", 7), ("internalSWFailure", 8), ("aisCondition", 9), ("lckCondition", 10))

class PvxEcfmRemoteMepState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("rMepIdle", 1), ("rMepStart", 2), ("rMepFailed", 3), ("rMepOk", 4))

class PvxEcfmConfigErrors(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("cfmLeak", 0), ("conflictingVids", 1), ("excessiveLevels", 2), ("overlappedLevels", 3))

class PvxEcfmRelayActionFieldValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rlyHit", 1), ("rlyFdb", 2), ("rlyMpdb", 3))

class PvxEcfmIngressActionFieldValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ingOk", 1), ("ingDown", 2), ("ingBlocked", 3), ("ingVid", 4))

class PvxEcfmEgressActionFieldValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("egrOK", 1), ("egrDown", 2), ("egrBlocked", 3), ("egrVid", 4))

class PvxErpsVirtualLinkList(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 64)

class PvxESrvcBWPrflPMThresholdLevelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("min15CIR", 1), ("min15EIR", 2), ("day1CIR", 3), ("day1EIR", 4))

class PvxStackingPortCommState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noConnection", 1), ("connectionOk", 2))

pvxBridgeServices = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2))
pvxBridgeProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3))
pvxBridgeGVRP = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 5))
pvxEcfmService = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21))
cfmRMepStateChangeEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 36))
pvxVlanPortLastBpduOriginChangeEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 37))
pvxVlanPortAddDynamicVlanEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 38))
pvxVlanPortRemoveDynamicVlanEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 39))
pvxSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1), )
if mibBuilder.loadTexts: pvxSwitchTable.setStatus('current')
pvxSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchIdx"))
if mibBuilder.loadTexts: pvxSwitchEntry.setStatus('current')
pvxSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxSwitchIdx.setStatus('current')
pvxSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("q-bridge", 1), ("provider-bridge", 2))).clone('provider-bridge')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMode.setStatus('current')
pvxSwitchInnerEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchInnerEthType.setStatus('current')
pvxSwitchLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchLearning.setStatus('current')
pvxSwitchAgingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchAgingTimer.setStatus('current')
pvxSwitchTimeToAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchTimeToAge.setStatus('current')
pvxSwitchMasterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchMasterNode.setStatus('deprecated')
pvxSwitchForceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchForceSwitch.setStatus('deprecated')
pvxSwitchClearDynamicFDBEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchClearDynamicFDBEntries.setStatus('current')
pvxSwitchProtocolAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchProtocolAdminState.setStatus('current')
pvxSwitchTunnMacAddrProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 12), ProfileNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchTunnMacAddrProfile.setStatus('current')
pvxSwitchEvcMEGName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchEvcMEGName.setStatus('current')
pvxSwitchEvcMEGLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchEvcMEGLevel.setStatus('current')
pvxSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchName.setStatus('current')
pvxSwitchMIPAutoCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMIPAutoCreate.setStatus('current')
pvxSwitchMIPAutoCreateMEL = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMIPAutoCreateMEL.setStatus('current')
pvxSwitchStackingPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchStackingPrimary.setStatus('current')
pvxSwitchStackingTimeAsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchStackingTimeAsPrimary.setStatus('current')
pvxSwitchErpsVlanPropagate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("slow", 2))).clone('fast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchErpsVlanPropagate.setStatus('current')
pvxSwitchCfmDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchCfmDestinationAddress.setStatus('current')
pvxSwitchIntfBouncingTimerPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchIntfBouncingTimerPeriod.setStatus('current')
pvxSwitchCpuRLCos0PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos0PPS.setStatus('current')
pvxSwitchCpuRLCos1PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos1PPS.setStatus('current')
pvxSwitchCpuRLCos2PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos2PPS.setStatus('current')
pvxSwitchCpuRLCos3PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos3PPS.setStatus('current')
pvxSwitchCpuRLCos4PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos4PPS.setStatus('current')
pvxSwitchCpuRLCos5PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos5PPS.setStatus('current')
pvxSwitchCpuRLCos6PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos6PPS.setStatus('current')
pvxSwitchCpuRLCos7PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos7PPS.setStatus('current')
pvxSwitchCpuRLCos0DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos0DEPTH.setStatus('current')
pvxSwitchCpuRLCos1DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos1DEPTH.setStatus('current')
pvxSwitchCpuRLCos2DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos2DEPTH.setStatus('current')
pvxSwitchCpuRLCos3DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos3DEPTH.setStatus('current')
pvxSwitchCpuRLCos4DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos4DEPTH.setStatus('current')
pvxSwitchCpuRLCos5DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos5DEPTH.setStatus('current')
pvxSwitchCpuRLCos6DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos6DEPTH.setStatus('current')
pvxSwitchCpuRLCos7DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos7DEPTH.setStatus('current')
pvxSwitchCpuRLCos0BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos0BURST.setStatus('current')
pvxSwitchCpuRLCos1BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos1BURST.setStatus('current')
pvxSwitchCpuRLCos2BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos2BURST.setStatus('current')
pvxSwitchCpuRLCos3BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos3BURST.setStatus('current')
pvxSwitchCpuRLCos4BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos4BURST.setStatus('current')
pvxSwitchCpuRLCos5BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos5BURST.setStatus('current')
pvxSwitchCpuRLCos6BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos6BURST.setStatus('current')
pvxSwitchCpuRLCos7BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos7BURST.setStatus('current')
pvxSwitchMirrorFromCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 47), MirrorConfigType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMirrorFromCpu.setStatus('current')
pvxSwitchLldpTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchLldpTrapInterval.setStatus('current')
pvxSwitchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchRowStatus.setStatus('current')
pvxSwitchMemberTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2), )
if mibBuilder.loadTexts: pvxSwitchMemberTable.setStatus('current')
pvxSwitchMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchMemberIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchMemberInstIdx"))
if mibBuilder.loadTexts: pvxSwitchMemberEntry.setStatus('current')
pvxSwitchMemberIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxSwitchMemberIdx.setStatus('current')
pvxSwitchMemberInstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxSwitchMemberInstIdx.setStatus('current')
pvxSwitchMemberShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMemberShelfId.setStatus('current')
pvxSwitchMemberSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMemberSlotId.setStatus('current')
pvxSwitchMemberStackingState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("unstacked", 2), ("primary", 3), ("secondary", 4), ("notPresent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchMemberStackingState.setStatus('current')
pvxSwitchMemberStackingPortCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 9), PvxStackingPortCommState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchMemberStackingPortCommState.setStatus('current')
pvxSwitchMemberBackplaneCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 10), PvxStackingPortCommState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchMemberBackplaneCommState.setStatus('current')
pvxSwitchMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMemberRowStatus.setStatus('current')
pvxVLANTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4), )
if mibBuilder.loadTexts: pvxVLANTable.setStatus('current')
pvxVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxVLANSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVLANIdx"))
if mibBuilder.loadTexts: pvxVLANEntry.setStatus('current')
pvxVLANSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxVLANSwitchIdx.setStatus('current')
pvxVLANIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxVLANIdx.setStatus('current')
pvxVLANMemberPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 4), PvxL2PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANMemberPortList.setStatus('current')
pvxVLANUnTaggedPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 5), PvxL2PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANUnTaggedPortList.setStatus('current')
pvxVLANMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANMacLearning.setStatus('current')
pvxVLANAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANAdminState.setStatus('current')
pvxVLANMSTPId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANMSTPId.setStatus('current')
pvxVLANService = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVLANService.setStatus('current')
pvxVLANForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 10), PvxL2PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANForbiddenPortList.setStatus('current')
pvxVLANOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("reserved", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVLANOperStatus.setStatus('current')
pvxVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANRowStatus.setStatus('current')
pvxFDBTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5), )
if mibBuilder.loadTexts: pvxFDBTable.setStatus('current')
pvxFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFDBSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFDBVlanIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFDBMACAddrIdx"))
if mibBuilder.loadTexts: pvxFDBEntry.setStatus('current')
pvxFDBSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFDBSwitchIdx.setStatus('current')
pvxFDBVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxFDBVlanIdx.setStatus('current')
pvxFDBMACAddrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 3), MacAddress())
if mibBuilder.loadTexts: pvxFDBMACAddrIdx.setStatus('current')
pvxFDBPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 4), PvxL2Port()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxFDBPort.setStatus('current')
pvxFDBAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxFDBAddressType.setStatus('current')
pvxFDBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFDBRowStatus.setStatus('current')
pvxStaticUnicastTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6), )
if mibBuilder.loadTexts: pvxStaticUnicastTable.setStatus('current')
pvxStaticUnicastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxStaticUnicastSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticUnicastVlanIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticUnicastMACAddrIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticUnicastReceivePort"))
if mibBuilder.loadTexts: pvxStaticUnicastEntry.setStatus('current')
pvxStaticUnicastSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxStaticUnicastSwitchIdx.setStatus('current')
pvxStaticUnicastVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: pvxStaticUnicastVlanIdx.setStatus('current')
pvxStaticUnicastMACAddrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 3), MacAddress())
if mibBuilder.loadTexts: pvxStaticUnicastMACAddrIdx.setStatus('current')
pvxStaticUnicastReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 4), PvxL2Port())
if mibBuilder.loadTexts: pvxStaticUnicastReceivePort.setStatus('current')
pvxStaticUnicastIntfIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 5), PvxVLANPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticUnicastIntfIdList.setStatus('current')
pvxStaticUnicastAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5))).clone('permanent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticUnicastAddressType.setStatus('current')
pvxStaticUnicastRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticUnicastRowStatus.setStatus('current')
pvxMultiCastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7), )
if mibBuilder.loadTexts: pvxMultiCastGroupTable.setStatus('current')
pvxMultiCastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMCSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMCVlanIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMCMACAddrIdx"))
if mibBuilder.loadTexts: pvxMultiCastEntry.setStatus('current')
pvxMCSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMCSwitchIdx.setStatus('current')
pvxMCVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxMCVlanIdx.setStatus('current')
pvxMCMACAddrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1, 3), MacAddress())
if mibBuilder.loadTexts: pvxMCMACAddrIdx.setStatus('current')
pvxMCIntfIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1, 4), PvxVLANPortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMCIntfIdList.setStatus('current')
pvxMCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMCRowStatus.setStatus('current')
pvxStaticMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8), )
if mibBuilder.loadTexts: pvxStaticMulticastTable.setStatus('current')
pvxStaticMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxStaticMCSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticMCVlanIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticMCMACAddrIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticMCReceivePort"))
if mibBuilder.loadTexts: pvxStaticMulticastEntry.setStatus('current')
pvxStaticMCSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxStaticMCSwitchIdx.setStatus('current')
pvxStaticMCVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: pvxStaticMCVlanIdx.setStatus('current')
pvxStaticMCMACAddrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 3), MacAddress())
if mibBuilder.loadTexts: pvxStaticMCMACAddrIdx.setStatus('current')
pvxStaticMCReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 4), PvxL2Port())
if mibBuilder.loadTexts: pvxStaticMCReceivePort.setStatus('current')
pvxStaticMCStaticIntfIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 5), PvxVLANPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticMCStaticIntfIdList.setStatus('current')
pvxStaticMCForbiddenIntfIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 6), PvxVLANPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticMCForbiddenIntfIdList.setStatus('current')
pvxStaticMCAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5))).clone('permanent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticMCAddressType.setStatus('current')
pvxStaticMCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticMCRowStatus.setStatus('current')
pvxLagTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9), )
if mibBuilder.loadTexts: pvxLagTable.setStatus('current')
pvxLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxLagSwitchIdx"))
if mibBuilder.loadTexts: pvxLagEntry.setStatus('current')
pvxLagSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxLagSwitchIdx.setStatus('current')
pvxLagState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagState.setStatus('current')
pvxLagSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagSystemPriority.setStatus('current')
pvxLagSystemIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLagSystemIdentifier.setStatus('current')
pvxLagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagRowStatus.setStatus('current')
pvxLagGroupTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10), )
if mibBuilder.loadTexts: pvxLagGroupTable.setStatus('current')
pvxLagGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxLGSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLGIdx"))
if mibBuilder.loadTexts: pvxLagGroupEntry.setStatus('current')
pvxLGSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxLGSwitchIdx.setStatus('current')
pvxLGIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxLGIdx.setStatus('current')
pvxLGPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 3), PvxPhyPortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGPortList.setStatus('current')
pvxLGDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("srcmac", 1), ("dstmac", 2), ("srcdstmac", 3), ("srcip", 4), ("dstip", 5), ("srcdstip", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGDistribution.setStatus('current')
pvxLGMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGMacAddress.setStatus('current')
pvxLGPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGPortCount.setStatus('current')
pvxLGActivePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGActivePortCount.setStatus('current')
pvxLGMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGMtuSize.setStatus('current')
pvxLGAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGAdminStatus.setStatus('current')
pvxLGOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 11), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGOperStatus.setStatus('current')
pvxLGDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGDataRate.setStatus('current')
pvxLGMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGMaxLinks.setStatus('current')
pvxLGMinLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGMinLinks.setStatus('current')
pvxLGRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGRowStatus.setStatus('current')
pvxLagPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11), )
if mibBuilder.loadTexts: pvxLagPortTable.setStatus('current')
pvxLagPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxLagPortSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLagPortShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLagPortSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLagPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLagPortIdx"))
if mibBuilder.loadTexts: pvxLagPortEntry.setStatus('current')
pvxLagPortSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxLagPortSwitchIdx.setStatus('current')
pvxLagPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxLagPortShelfIdx.setStatus('current')
pvxLagPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxLagPortSlotIdx.setStatus('current')
pvxLagPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxLagPortTypeIdx.setStatus('current')
pvxLagPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxLagPortIdx.setStatus('current')
pvxLagPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortPriority.setStatus('current')
pvxLagPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("passive", 2), ("on", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortMode.setStatus('current')
pvxLagPortAggState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inbndl", 1), ("stdby", 2), ("down", 3), ("alone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLagPortAggState.setStatus('current')
pvxLagPortLcapId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortLcapId.setStatus('current')
pvxLagPortTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("long", 1), ("short", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortTimeout.setStatus('current')
pvxLagPortWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortWaitTime.setStatus('current')
pvxLagPortActAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLagPortActAdminState.setStatus('current')
pvxLagPortPrtnrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLagPortPrtnrAdminState.setStatus('current')
pvxLagPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortGroupId.setStatus('current')
pvxLagPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortRowStatus.setStatus('current')
pvxMSTPGenTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12), )
if mibBuilder.loadTexts: pvxMSTPGenTable.setStatus('current')
pvxMSTPGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"))
if mibBuilder.loadTexts: pvxMSTPGenEntry.setStatus('current')
pvxMSTPGenSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPGenSwitchIdx.setStatus('current')
pvxMSTPGenMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPGenMaxHops.setStatus('current')
pvxMSTPGenVersionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("nonStp", 2), ("dot1d", 3), ("dot1w", 4), ("dot1s", 5), ("dot1q", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenVersionSupported.setStatus('current')
pvxMSTPGenIdFmtSel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenIdFmtSel.setStatus('current')
pvxMSTPGenIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPGenIdName.setStatus('current')
pvxMSTPGenIdRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPGenIdRevisionLevel.setStatus('current')
pvxMSTPGenIdDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenIdDigest.setStatus('current')
pvxMSTPGenRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenRegionalRoot.setStatus('current')
pvxMSTPGenExternalRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenExternalRootCost.setStatus('current')
pvxMSTPGenCistPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPGenCistPriority.setStatus('current')
pvxMSTPGenBrdgId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenBrdgId.setStatus('current')
pvxMSTPGenCistRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenCistRoot.setStatus('current')
pvxMSTPGenCistRootPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenCistRootPriority.setStatus('current')
pvxMSTPGenCistRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenCistRootCost.setStatus('current')
pvxMSTPMapTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13), )
if mibBuilder.loadTexts: pvxMSTPMapTable.setStatus('current')
pvxMSTPMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPMapSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPMapIdx"))
if mibBuilder.loadTexts: pvxMSTPMapEntry.setStatus('current')
pvxMSTPMapSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPMapSwitchIdx.setStatus('current')
pvxMSTPMapIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxMSTPMapIdx.setStatus('current')
pvxMSTPMapVlanS1k = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 3), PvxMSTPVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPMapVlanS1k.setStatus('current')
pvxMSTPMapVlanS2k = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 4), PvxMSTPVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPMapVlanS2k.setStatus('current')
pvxMSTPMapVlanS3k = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 5), PvxMSTPVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPMapVlanS3k.setStatus('current')
pvxMSTPMapVlanS4k = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 6), PvxMSTPVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPMapVlanS4k.setStatus('current')
pvxMSTPMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPMapRowStatus.setStatus('current')
pvxMSTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14), )
if mibBuilder.loadTexts: pvxMSTPPortTable.setStatus('current')
pvxMSTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortIdx"))
if mibBuilder.loadTexts: pvxMSTPPortEntry.setStatus('current')
pvxMSTPPortSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPPortSwitchIdx.setStatus('current')
pvxMSTPPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxMSTPPortShelfIdx.setStatus('current')
pvxMSTPPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxMSTPPortSlotIdx.setStatus('current')
pvxMSTPPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxMSTPPortTypeIdx.setStatus('current')
pvxMSTPPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxMSTPPortIdx.setStatus('current')
pvxMSTPPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortDesignatedRoot.setStatus('current')
pvxMSTPPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortDesignatedBridge.setStatus('current')
pvxMSTPPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortDesignatedPort.setStatus('current')
pvxMSTPPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortPathCost.setStatus('current')
pvxMSTPPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortPriority.setStatus('current')
pvxMSTPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("discarding", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortState.setStatus('current')
pvxMSTPPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("nonSTP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortRole.setStatus('current')
pvxMSTPPortRegRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortRegRoot.setStatus('current')
pvxMSTPPortRegRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortRegRootCost.setStatus('current')
pvxMSTPPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortRestrictedRole.setStatus('current')
pvxMSTPPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortRestrictedTCN.setStatus('current')
pvxMSTPPortForcedPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortForcedPortState.setStatus('current')
pvxMSTPPortLoopGuardState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortLoopGuardState.setStatus('current')
pvxMSTPPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shared", 1), ("point-to-point", 2))).clone('point-to-point')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortLinkType.setStatus('current')
pvxMSTPXstTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15), )
if mibBuilder.loadTexts: pvxMSTPXstTable.setStatus('current')
pvxMSTPXstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstIdx"))
if mibBuilder.loadTexts: pvxMSTPXstEntry.setStatus('current')
pvxMSTPXstSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPXstSwitchIdx.setStatus('current')
pvxMSTPXstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: pvxMSTPXstIdx.setStatus('current')
pvxMSTPXstBrdgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPXstBrdgPriority.setStatus('current')
pvxMSTPXstBrdgId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstBrdgId.setStatus('current')
pvxMSTPXstBrdgRegRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstBrdgRegRoot.setStatus('current')
pvxMSTPXstBrdgRegRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstBrdgRegRootCost.setStatus('current')
pvxMSTPXstRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 7), PvxL2Port()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPort.setStatus('deprecated')
pvxMSTPXstRootPortSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPortSwitch.setStatus('current')
pvxMSTPXstRootPortShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPortShelf.setStatus('current')
pvxMSTPXstRootPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPortSlot.setStatus('current')
pvxMSTPXstRootPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 11), PvxPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPortType.setStatus('current')
pvxMSTPXstRootPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPortNum.setStatus('current')
pvxMSTPXstPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16), )
if mibBuilder.loadTexts: pvxMSTPXstPortTable.setStatus('current')
pvxMSTPXstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortInstIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortIdx"))
if mibBuilder.loadTexts: pvxMSTPXstPortEntry.setStatus('current')
pvxMSTPXstPortSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPXstPortSwitchIdx.setStatus('current')
pvxMSTPXstPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxMSTPXstPortShelfIdx.setStatus('current')
pvxMSTPXstPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxMSTPXstPortSlotIdx.setStatus('current')
pvxMSTPXstPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxMSTPXstPortTypeIdx.setStatus('current')
pvxMSTPXstPortInstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: pvxMSTPXstPortInstIdx.setStatus('current')
pvxMSTPXstPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: pvxMSTPXstPortIdx.setStatus('current')
pvxMSTPXstPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("discarding", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortState.setStatus('current')
pvxMSTPXstPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("nonSTP", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortRole.setStatus('current')
pvxMSTPXstPortDesigRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortDesigRoot.setStatus('current')
pvxMSTPXstPortDesigCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortDesigCost.setStatus('current')
pvxMSTPXstPortDesigBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortDesigBridge.setStatus('current')
pvxMSTPXstPortDesigPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortDesigPortId.setStatus('current')
pvxMSTPXstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPXstPortPriority.setStatus('current')
pvxMSTPXstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPXstPortPathCost.setStatus('current')
pvxMSTPXstPortForcedPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPXstPortForcedPortState.setStatus('current')
pvxNextFreeIndexTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 17), )
if mibBuilder.loadTexts: pvxNextFreeIndexTable.setStatus('current')
pvxNextFreeIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 17, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxNextFreeIndexTableIndex"), (0, "PACKET-VX-BRIDGE-MIB", "pvxNextFreeIndexSwitchIdx"))
if mibBuilder.loadTexts: pvxNextFreeIndexEntry.setStatus('current')
pvxNextFreeIndexTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 70, 84, 87, 93))).clone(namedValues=NamedValues(("none", 1), ("lagGroup", 70), ("switches", 84), ("flowclass", 87), ("vlan", 93))))
if mibBuilder.loadTexts: pvxNextFreeIndexTableIndex.setStatus('current')
pvxNextFreeIndexSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxNextFreeIndexSwitchIdx.setStatus('current')
pvxNextFreeIndexValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxNextFreeIndexValue.setStatus('current')
pvxUNITable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18), )
if mibBuilder.loadTexts: pvxUNITable.setStatus('current')
pvxUNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxUNISwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxUNIShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxUNISlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxUNIPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxUNIPortId"))
if mibBuilder.loadTexts: pvxUNIEntry.setStatus('current')
pvxUNISwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxUNISwitchId.setStatus('current')
pvxUNIShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxUNIShelfId.setStatus('current')
pvxUNISlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxUNISlotId.setStatus('current')
pvxUNIPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxUNIPortTypeId.setStatus('current')
pvxUNIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxUNIPortId.setStatus('current')
pvxUNISpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxUNISpeed.setStatus('current')
pvxUNIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxUNIMode.setStatus('current')
pvxUNIMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1522, 9600)).clone(1522)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxUNIMaxFrameSize.setStatus('current')
pvxUNICurrentFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1522, 9600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxUNICurrentFrameSize.setStatus('current')
pvxUNIServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unspecified", 1), ("private", 2), ("virtualSingle", 3), ("virtualMultiple", 4), ("virtualUntagged", 5))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxUNIServiceType.setStatus('current')
pvxUNINumServices = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxUNINumServices.setStatus('current')
pvxUNICPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxUNICPVid.setStatus('current')
pvxUNIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxUNIRowStatus.setStatus('current')
pvxNNITable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19), )
if mibBuilder.loadTexts: pvxNNITable.setStatus('current')
pvxNNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxNNISwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxNNIShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxNNISlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxNNIPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxNNIPortId"))
if mibBuilder.loadTexts: pvxNNIEntry.setStatus('current')
pvxNNISwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxNNISwitchId.setStatus('current')
pvxNNIShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxNNIShelfId.setStatus('current')
pvxNNISlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxNNISlotId.setStatus('current')
pvxNNIPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxNNIPortTypeId.setStatus('current')
pvxNNIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxNNIPortId.setStatus('current')
pvxNNISpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxNNISpeed.setStatus('current')
pvxNNIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxNNIMode.setStatus('current')
pvxNNIMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1526, 9600)).clone(9600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxNNIMaxFrameSize.setStatus('current')
pvxNNIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxNNIRowStatus.setStatus('current')
pvxVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20), )
if mibBuilder.loadTexts: pvxVlanPortTable.setStatus('current')
pvxVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxVlanPortSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanPortShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanPortSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanPortIdx"))
if mibBuilder.loadTexts: pvxVlanPortEntry.setStatus('current')
pvxVlanPortSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxVlanPortSwitchIdx.setStatus('current')
pvxVlanPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxVlanPortShelfIdx.setStatus('current')
pvxVlanPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxVlanPortSlotIdx.setStatus('current')
pvxVlanPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxVlanPortTypeIdx.setStatus('current')
pvxVlanPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxVlanPortIdx.setStatus('current')
pvxVlanPortGvrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVlanPortGvrpAdminState.setStatus('current')
pvxVlanPortRestrictedVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVlanPortRestrictedVlanState.setStatus('current')
pvxVlanPortEthPortAllowedFrametType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("admitAll", 1), ("admitOnlyVlanTagged", 2), ("admitOnlyUntaggedAndPriorityTagged", 3), ("admitDefault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanPortEthPortAllowedFrametType.setStatus('current')
pvxVlanPortIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanPortIngressFiltering.setStatus('deprecated')
pvxVlanPortGvrpFailedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanPortGvrpFailedRegistrations.setStatus('current')
pvxVlanPortLastBpduOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanPortLastBpduOrigin.setStatus('current')
pvxVlanPortLastBpduOriginChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 37, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortShelfIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSlotIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortIdx"))
if mibBuilder.loadTexts: pvxVlanPortLastBpduOriginChangeEvt.setStatus('current')
pvxVlanPortAddDynamicVlanEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 38, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortShelfIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSlotIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVLANIdx"))
if mibBuilder.loadTexts: pvxVlanPortAddDynamicVlanEvt.setStatus('current')
pvxVlanPortRemoveDynamicVlanEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 39, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortShelfIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSlotIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVLANIdx"))
if mibBuilder.loadTexts: pvxVlanPortRemoveDynamicVlanEvt.setStatus('current')
pvxVlanCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21), )
if mibBuilder.loadTexts: pvxVlanCurrentTable.setStatus('current')
pvxVlanCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxVlanCurrentSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanCurrentTimeMark"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanCurrentVlanIdx"))
if mibBuilder.loadTexts: pvxVlanCurrentEntry.setStatus('current')
pvxVlanCurrentSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxVlanCurrentSwitchIdx.setStatus('current')
pvxVlanCurrentTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1, 2), Unsigned32())
if mibBuilder.loadTexts: pvxVlanCurrentTimeMark.setStatus('current')
pvxVlanCurrentVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxVlanCurrentVlanIdx.setStatus('current')
pvxVlanCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("dynamicGVRP", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanCurrentStatus.setStatus('current')
pvxVlanCurrentCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanCurrentCreationTime.setStatus('current')
pvxDynamicVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 24), )
if mibBuilder.loadTexts: pvxDynamicVlanPortTable.setStatus('current')
pvxDynamicVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 24, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxDynamicVlanPortTimeMark"), (0, "PACKET-VX-BRIDGE-MIB", "pvxDynamicVlanPortVlanIdx"), (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSubPortNumber"))
if mibBuilder.loadTexts: pvxDynamicVlanPortEntry.setStatus('current')
pvxDynamicVlanPortTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pvxDynamicVlanPortTimeMark.setStatus('current')
pvxDynamicVlanPortVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxDynamicVlanPortVlanIdx.setStatus('current')
pvxDynamicVlanPortTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxDynamicVlanPortTagged.setStatus('current')
pvxStackingPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 25), )
if mibBuilder.loadTexts: pvxStackingPortTable.setStatus('current')
pvxStackingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 25, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"))
if mibBuilder.loadTexts: pvxStackingPortEntry.setStatus('current')
pvxStackingPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxStackingPortOperStatus.setStatus('current')
pvxStackingPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 25, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStackingPortRowStatus.setStatus('current')
pvxFlowTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12), )
if mibBuilder.loadTexts: pvxFlowTable.setStatus('current')
pvxFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFIdx"))
if mibBuilder.loadTexts: pvxFlowEntry.setStatus('current')
pvxFSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFSwitchIdx.setStatus('current')
pvxFIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxFIdx.setStatus('current')
pvxFClassificationIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFClassificationIdList.setStatus('current')
pvxFMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMeterId.setStatus('current')
pvxFCoSName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFCoSName.setStatus('current')
pvxFRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFRowStatus.setStatus('current')
pvxFlowClassificationTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13), )
if mibBuilder.loadTexts: pvxFlowClassificationTable.setStatus('current')
pvxFlowClassificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFloClSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFloClIdx"))
if mibBuilder.loadTexts: pvxFlowClassificationEntry.setStatus('current')
pvxFloClSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFloClSwitchIdx.setStatus('current')
pvxFloClIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: pvxFloClIdx.setStatus('current')
pvxFloClActionId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClActionId.setStatus('current')
pvxFloClMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClMeterId.setStatus('current')
pvxFloClStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClStatus.setStatus('current')
pvxFloClEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untyped", 1), ("ipAcl", 2), ("macAcl", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClEntryType.setStatus('current')
pvxFloClL2InterfaceRange = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClL2InterfaceRange.setStatus('current')
pvxFloClCVlanFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClCVlanFilter.setStatus('current')
pvxFloClSVlanFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClSVlanFilter.setStatus('current')
pvxFloClSourceIPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClSourceIPFilter.setStatus('current')
pvxFloClDestIPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClDestIPFilter.setStatus('current')
pvxFloClIPProtocolFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClIPProtocolFilter.setStatus('current')
pvxFloClEtherTypeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClEtherTypeFilter.setStatus('current')
pvxFloClSourceMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 14), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClSourceMacFilter.setStatus('current')
pvxFloClDestMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClDestMacFilter.setStatus('current')
pvxFloClSourceUDPorTCPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClSourceUDPorTCPFilter.setStatus('current')
pvxFloClDestUDPorTCPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 17), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClDestUDPorTCPFilter.setStatus('current')
pvxFloClRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClRowStatus.setStatus('current')
pvxFlowActionsTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14), )
if mibBuilder.loadTexts: pvxFlowActionsTable.setStatus('current')
pvxFlowActionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFloActSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFloActIdx"))
if mibBuilder.loadTexts: pvxFlowActionsEntry.setStatus('current')
pvxFloActSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFloActSwitchIdx.setStatus('current')
pvxFloActIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: pvxFloActIdx.setStatus('current')
pvxFloActChangePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActChangePriority.setStatus('current')
pvxFloActNewPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActNewPriority.setStatus('current')
pvxFloActPacketAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("drop", 2), ("redirect", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActPacketAction.setStatus('current')
pvxFloActRedirectToInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActRedirectToInterfaceIndex.setStatus('current')
pvxFloActMirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ingress", 2), ("egress", 3), ("both", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActMirrorType.setStatus('current')
pvxFloActMirrorToInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActMirrorToInterfaceIndex.setStatus('current')
pvxFloActSVlanValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActSVlanValue.setStatus('current')
pvxFloActCVlanValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActCVlanValue.setStatus('current')
pvxFloActSVlanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("replace", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActSVlanAction.setStatus('current')
pvxFloActCVlanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("replace", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActCVlanAction.setStatus('current')
pvxFloActGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotDrop", 1), ("drop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActGreenAction.setStatus('current')
pvxFloActGreenCNGAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doNotChange", 1), ("green", 2), ("yellow", 3), ("red", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActGreenCNGAction.setStatus('current')
pvxFloActRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotDrop", 1), ("drop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActRedAction.setStatus('current')
pvxFloActRedCNGAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doNotChange", 1), ("green", 2), ("yellow", 3), ("red", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActRedCNGAction.setStatus('current')
pvxFloActYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotDrop", 1), ("drop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActYellowAction.setStatus('current')
pvxFloActYellowCNGAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doNotChange", 1), ("green", 2), ("yellow", 3), ("red", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActYellowCNGAction.setStatus('current')
pvxFloActRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActRowStatus.setStatus('current')
pvxFlowMeterTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15), )
if mibBuilder.loadTexts: pvxFlowMeterTable.setStatus('current')
pvxFlowMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFMMeterIdx"))
if mibBuilder.loadTexts: pvxFlowMeterEntry.setStatus('current')
pvxFMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFMSwitchIdx.setStatus('current')
pvxFMMeterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxFMMeterIdx.setStatus('current')
pvxFMBWProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMBWProfileId.setStatus('current')
pvxFMMeterProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMMeterProfileId.setStatus('current')
pvxFMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMRowStatus.setStatus('current')
pvxFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16), )
if mibBuilder.loadTexts: pvxFlowStatsTable.setStatus('current')
pvxFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFSSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFSStatsIdx"))
if mibBuilder.loadTexts: pvxFlowStatsEntry.setStatus('current')
pvxFSSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFSSwitchIdx.setStatus('current')
pvxFSStatsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxFSStatsIdx.setStatus('current')
pvxFSFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFSFlowId.setStatus('current')
pvxFSInProfilePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFSInProfilePackets.setStatus('current')
pvxFSOutOfProfilePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFSOutOfProfilePackets.setStatus('current')
pvxFSCountOfClassifiedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFSCountOfClassifiedPackets.setStatus('current')
pvxFSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFSRowStatus.setStatus('current')
pvxPbCVidRegistrationTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17), )
if mibBuilder.loadTexts: pvxPbCVidRegistrationTable.setStatus('current')
pvxPbCVidRegistrationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxPCVRTCVlanIdFrom"))
if mibBuilder.loadTexts: pvxPbCVidRegistrationTableEntry.setStatus('current')
pvxPCVRTCVlanIdFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxPCVRTCVlanIdFrom.setStatus('current')
pvxPCVRTCVlanIdTo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCVRTCVlanIdTo.setStatus('current')
pvxPCVRTSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCVRTSVlanId.setStatus('current')
pvxPCVRTUntaggedPEP = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCVRTUntaggedPEP.setStatus('current')
pvxPCVRTUntaggedCEP = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCVRTUntaggedCEP.setStatus('current')
pvxPCVRTSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manualCreate", 1), ("autoCreate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxPCVRTSource.setStatus('current')
pvxPCVRTMapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 7), PvxCVidMapOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxPCVRTMapOperStatus.setStatus('current')
pvxPCVRTXlateOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 8), PvxCVidMapOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxPCVRTXlateOperStatus.setStatus('current')
pvxPCVRTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCVRTRowStatus.setStatus('current')
pvxEthServiceTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18), )
if mibBuilder.loadTexts: pvxEthServiceTable.setStatus('current')
pvxEthServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEthSrvcSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEthSrvcName"))
if mibBuilder.loadTexts: pvxEthServiceEntry.setStatus('current')
pvxEthSrvcSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEthSrvcSwitchIdx.setStatus('current')
pvxEthSrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxEthSrvcName.setStatus('current')
pvxEthSrvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("epline", 1), ("evpline", 2), ("eplan", 3), ("evplan", 4), ("erps", 5), ("igmp", 6), ("managementVLAN", 7), ("eptree", 8), ("evptree", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcType.setStatus('current')
pvxEthSrvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("testing", 3))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcState.setStatus('current')
pvxEthSrvcOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcOperState.setStatus('current')
pvxEthSrvcTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("providerBridge", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcTransportType.setStatus('current')
pvxEthSrvcSVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 7), PvxVlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcSVLAN.setStatus('current')
pvxEthSrvcSpanTreeInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcSpanTreeInstance.setStatus('current')
pvxEthSrvcMaxUNIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcMaxUNIs.setStatus('current')
pvxEthSrvcNumUNIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcNumUNIs.setStatus('current')
pvxEthSrvcPointedness = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pointToPoint", 1), ("multiPoint", 2), ("internal", 3), ("ring", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcPointedness.setStatus('current')
pvxEthSrvcFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600)).clone(1522)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcFrameSize.setStatus('current')
pvxEthSrvcCVidXlate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcCVidXlate.setStatus('current')
pvxEthSrvcMECciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("intervalInvalid", 1), ("interval300Hz", 2), ("interval10ms", 3), ("interval100ms", 4), ("interval1s", 5), ("interval10s", 6), ("interval1min", 7), ("interval10min", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcMECciInterval.setStatus('current')
pvxEthSrvcMECciEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcMECciEnable.setStatus('current')
pvxEthSrvcMEName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcMEName.setStatus('current')
pvxEthSrvcMaxNNIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcMaxNNIs.setStatus('current')
pvxEthSrvcNumNNIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcNumNNIs.setStatus('current')
pvxEthSrvcLockNNIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcLockNNIs.setStatus('current')
pvxEthSrvcExceedMaxUNI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcExceedMaxUNI.setStatus('current')
pvxEthSrvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcRowStatus.setStatus('current')
pvxServiceUNITable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19), )
if mibBuilder.loadTexts: pvxServiceUNITable.setStatus('current')
pvxServiceUNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIPortId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISrvcName"))
if mibBuilder.loadTexts: pvxServiceUNIEntry.setStatus('current')
pvxSrvcUNISwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSrvcUNISwitchId.setStatus('current')
pvxSrvcUNIShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSrvcUNIShelfId.setStatus('current')
pvxSrvcUNISlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSrvcUNISlotId.setStatus('current')
pvxSrvcUNIPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSrvcUNIPortTypeId.setStatus('current')
pvxSrvcUNIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxSrvcUNIPortId.setStatus('current')
pvxSrvcUNISrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxSrvcUNISrvcName.setStatus('current')
pvxSrvcUNINumCVids = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSrvcUNINumCVids.setStatus('current')
pvxSrvcUNIIngressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIIngressBW.setStatus('current')
pvxSrvcUNIIngressBWperCos = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIIngressBWperCos.setStatus('current')
pvxSrvcUNIEgressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIEgressBW.setStatus('current')
pvxSrvcUNIEgressBWperCos = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIEgressBWperCos.setStatus('current')
pvxSrvcUNIUserDefinedMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIUserDefinedMepId.setStatus('current')
pvxSrvcUNIForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("etree-leaf", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIForwarding.setStatus('current')
pvxSrvcUNIServiceMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIServiceMap.setStatus('current')
pvxSrvcUNIFilterSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIFilterSequence.setStatus('current')
pvxSrvcUNIEFPSDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIEFPSDEnabled.setStatus('current')
pvxSrvcUNIEFPSDLocalEFPSDState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSrvcUNIEFPSDLocalEFPSDState.setStatus('current')
pvxSrvcUNISlaMeasurementProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNISlaMeasurementProfile.setStatus('current')
pvxSrvcUNIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIRowStatus.setStatus('current')
pvxSvidXlateTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20), )
if mibBuilder.loadTexts: pvxSvidXlateTable.setStatus('current')
pvxSvidXlateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlateSwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlateShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlateSlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlatePortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlatePortId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlateInternalSVid"))
if mibBuilder.loadTexts: pvxSvidXlateEntry.setStatus('current')
pvxSvidXlateSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSvidXlateSwitchId.setStatus('current')
pvxSvidXlateShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSvidXlateShelfId.setStatus('current')
pvxSvidXlateSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSvidXlateSlotId.setStatus('current')
pvxSvidXlatePortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSvidXlatePortTypeId.setStatus('current')
pvxSvidXlatePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxSvidXlatePortId.setStatus('current')
pvxSvidXlateInternalSVid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 6), PvxVlanId())
if mibBuilder.loadTexts: pvxSvidXlateInternalSVid.setStatus('current')
pvxSvidXlateExternalSVid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 7), PvxVlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxSvidXlateExternalSVid.setStatus('current')
pvxMgmtVLANTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22), )
if mibBuilder.loadTexts: pvxMgmtVLANTable.setStatus('current')
pvxMgmtVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMgmtVLANSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMgmtVLANSrvcName"))
if mibBuilder.loadTexts: pvxMgmtVLANEntry.setStatus('current')
pvxMgmtVLANSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMgmtVLANSwitchIdx.setStatus('current')
pvxMgmtVLANSrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 2), DisplayString())
if mibBuilder.loadTexts: pvxMgmtVLANSrvcName.setStatus('current')
pvxMgmtVLANBWProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANBWProfileName.setStatus('current')
pvxMgmtVLANCVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANCVLANId.setStatus('current')
pvxMgmtVLANAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANAddressType.setStatus('current')
pvxMgmtVLANIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANIpAddress.setStatus('current')
pvxMgmtVLANNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANNetMask.setStatus('current')
pvxMgmtVLANDebugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANDebugMode.setStatus('current')
pvxMgmtVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANRowStatus.setStatus('current')
pvxServiceNNITable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23), )
if mibBuilder.loadTexts: pvxServiceNNITable.setStatus('current')
pvxServiceNNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNISwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNIShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNISlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNIPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNIPortId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNISrvcName"))
if mibBuilder.loadTexts: pvxServiceNNIEntry.setStatus('current')
pvxSrvcNNISwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSrvcNNISwitchId.setStatus('current')
pvxSrvcNNIShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSrvcNNIShelfId.setStatus('current')
pvxSrvcNNISlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSrvcNNISlotId.setStatus('current')
pvxSrvcNNIPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSrvcNNIPortTypeId.setStatus('current')
pvxSrvcNNIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxSrvcNNIPortId.setStatus('current')
pvxSrvcNNISrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxSrvcNNISrvcName.setStatus('current')
pvxSrvcNNIIngressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcNNIIngressBW.setStatus('current')
pvxSrvcNNIIngressBWperCos = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcNNIIngressBWperCos.setStatus('current')
pvxSrvcNNIEgressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcNNIEgressBW.setStatus('current')
pvxSrvcNNIEgressBWperCos = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcNNIEgressBWperCos.setStatus('current')
pvxSrvcNNIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcNNIRowStatus.setStatus('current')
pvxERPSServiceNNITable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24), )
if mibBuilder.loadTexts: pvxERPSServiceNNITable.setStatus('current')
pvxERPSServiceNNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNISwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNISlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIPortId"))
if mibBuilder.loadTexts: pvxERPSServiceNNIEntry.setStatus('current')
pvxERPSSrvcNNISwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxERPSSrvcNNISwitchId.setStatus('current')
pvxERPSSrvcNNIShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxERPSSrvcNNIShelfId.setStatus('current')
pvxERPSSrvcNNISlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxERPSSrvcNNISlotId.setStatus('current')
pvxERPSSrvcNNIPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxERPSSrvcNNIPortTypeId.setStatus('current')
pvxERPSSrvcNNIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxERPSSrvcNNIPortId.setStatus('current')
pvxERPSSrvcNNIRingProtectLink = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNIRingProtectLink.setStatus('current')
pvxERPSSrvcNNIProtectionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNIProtectionSwitch.setStatus('current')
pvxERPSSrvcNNIRingPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("unblocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNNIRingPortStatus.setStatus('current')
pvxERPSSrvcNNISrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNNISrvcName.setStatus('current')
pvxERPSSrvcNNIRingPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ringPort1", 1), ("ringPort2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNNIRingPortId.setStatus('current')
pvxERPSSrvcNNIMEName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNIMEName.setStatus('current')
pvxERPSSrvcNNIRemoteMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNIRemoteMepId.setStatus('current')
pvxERPSSrvcNNIECFMInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNNIECFMInfo.setStatus('current')
pvxERPSSrvcNNILocalMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNILocalMepId.setStatus('current')
pvxERPSSrvcNNINeighborPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNINeighborPort.setStatus('current')
pvxERPSSrvcNNINextNeighborPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNINextNeighborPort.setStatus('current')
pvxERPSSrvcNNIFlushRemoteMEP = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNIFlushRemoteMEP.setStatus('current')
pvxERPSSrvcNNICcmLinkDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNICcmLinkDetection.setStatus('current')
pvxERPSServiceTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25), )
if mibBuilder.loadTexts: pvxERPSServiceTable.setStatus('current')
pvxERPSServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"))
if mibBuilder.loadTexts: pvxERPSServiceEntry.setStatus('current')
pvxERPSSrvcSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxERPSSrvcSwitchIdx.setStatus('current')
pvxERPSSrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxERPSSrvcName.setStatus('current')
pvxERPSSrvcRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("non-revertive", 2))).clone('revertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcRevertMode.setStatus('current')
pvxERPSSrvcProtectionSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normalSwitch", 1), ("forceSwitch", 2), ("manualSwitch", 3), ("clear", 4))).clone('normalSwitch')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcProtectionSwitchMode.setStatus('current')
pvxERPSSrvcHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('deciseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcHoldTimer.setStatus('current')
pvxERPSSrvcWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(300, 300), ValueRangeConstraint(360, 360), ValueRangeConstraint(420, 420), ValueRangeConstraint(480, 480), ValueRangeConstraint(540, 540), ValueRangeConstraint(600, 600), ValueRangeConstraint(660, 660), ValueRangeConstraint(720, 720), ValueRangeConstraint(780, 780), ValueRangeConstraint(840, 840), ValueRangeConstraint(900, 900), )).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcWaitToRestoreTimer.setStatus('current')
pvxERPSSrvcGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(50)).setUnits('centiseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcGuardTimer.setStatus('current')
pvxERPSSrvcPeriodicTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 10)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcPeriodicTimer.setStatus('current')
pvxERPSSrvcPropagateTC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcPropagateTC.setStatus('current')
pvxERPSSrvcNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rplOwner", 1), ("nonRplOwner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNodeType.setStatus('current')
pvxERPSSrvcRingMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cfm", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcRingMonitoring.setStatus('current')
pvxERPSSrvcRingProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inter-connect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcRingProperty.setStatus('current')
pvxERPSSrvcRingSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disable", 1), ("idle", 2), ("protection", 3), ("manualswitch", 4), ("forcedswitch", 5), ("pending", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcRingSemState.setStatus('current')
pvxERPSSrvcRingNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcRingNodeStatus.setStatus('current')
pvxERPSSrvcNumRingPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNumRingPorts.setStatus('current')
pvxERPSSrvcSVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 16), PvxVlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcSVLAN.setStatus('current')
pvxERPSSrvcVirtualLink = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 17), PvxErpsVirtualLinkList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcVirtualLink.setStatus('current')
pvxERPSSrvcWaitToBlockTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 864000000)).clone(5500)).setUnits('miliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcWaitToBlockTimer.setStatus('current')
pvxERPSSrvcCompatibleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2))).clone('v2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcCompatibleVersion.setStatus('current')
pvxERPSSrvcMultipleFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("primary", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcMultipleFailure.setStatus('current')
pvxERPSSrvcSubRingWithoutVC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcSubRingWithoutVC.setStatus('current')
pvxERPSSrvcDownMegLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcDownMegLevel.setStatus('current')
pvxERPSSrvcUpMegLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcUpMegLevel.setStatus('current')
pvxERPSSrvcWTRRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcWTRRemaining.setStatus('current')
pvxBWProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1), )
if mibBuilder.loadTexts: pvxBWProfileTable.setStatus('current')
pvxBWProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxBWPIdx"))
if mibBuilder.loadTexts: pvxBWProfileEntry.setStatus('current')
pvxBWPIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: pvxBWPIdx.setStatus('current')
pvxBWPCir = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPCir.setStatus('current')
pvxBWPCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPCbs.setStatus('current')
pvxBWPEir = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPEir.setStatus('current')
pvxBWPEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPEbs.setStatus('current')
pvxBWPCoSQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPCoSQueue.setStatus('current')
pvxBWPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPRowStatus.setStatus('current')
pvxCoSProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2), )
if mibBuilder.loadTexts: pvxCoSProfileTable.setStatus('current')
pvxCoSProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxCPIdx"))
if mibBuilder.loadTexts: pvxCoSProfileEntry.setStatus('current')
pvxCPIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: pvxCPIdx.setStatus('current')
pvxCPMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxCPMaxBandwidth.setStatus('current')
pvxCPMinBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxCPMinBandwidth.setStatus('current')
pvxCPWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxCPWeight.setStatus('current')
pvxCPQueueAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sp", 1), ("rr", 2), ("wrr", 3), ("drr", 4), ("wrrsp", 5), ("drrsp", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxCPQueueAlgo.setStatus('current')
pvxCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxCPRowStatus.setStatus('current')
pvxCtrlFrmProfileTable = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 3))
pvxFlowMeterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4), )
if mibBuilder.loadTexts: pvxFlowMeterProfileTable.setStatus('current')
pvxFlowMeterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFMPIdx"))
if mibBuilder.loadTexts: pvxFlowMeterProfileEntry.setStatus('current')
pvxFMPIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: pvxFMPIdx.setStatus('current')
pvxFMPBWProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMPBWProfileId.setStatus('current')
pvxFMPColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMPColorAware.setStatus('current')
pvxFMPMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flow", 1), ("srTCM", 2), ("drTCM", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMPMeterType.setStatus('current')
pvxFMPStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 5), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMPStatsEnabled.setStatus('current')
pvxFMPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMPRowStatus.setStatus('current')
pvxTunnMacAddrProfileTable = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 5))
pvxSchedulerProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6), )
if mibBuilder.loadTexts: pvxSchedulerProfileTable.setStatus('current')
pvxSchedulerProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSchedProfName"))
if mibBuilder.loadTexts: pvxSchedulerProfileEntry.setStatus('current')
pvxSchedProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxSchedProfName.setStatus('current')
pvxSchedProfAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sp", 1), ("rr", 2), ("wrr", 3), ("drr", 4), ("sp-wrr", 5), ("sp-drr", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfAlgorithm.setStatus('current')
pvxSchedProfWeightQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ0.setStatus('current')
pvxSchedProfWeightQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ1.setStatus('current')
pvxSchedProfWeightQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ2.setStatus('current')
pvxSchedProfWeightQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ3.setStatus('current')
pvxSchedProfWeightQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ4.setStatus('current')
pvxSchedProfWeightQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ5.setStatus('current')
pvxSchedProfWeightQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ6.setStatus('current')
pvxSchedProfWeightQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ7.setStatus('current')
pvxSchedProfMinBwQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ0.setStatus('current')
pvxSchedProfMaxBwQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ0.setStatus('current')
pvxSchedProfMinBwQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ1.setStatus('current')
pvxSchedProfMaxBwQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ1.setStatus('current')
pvxSchedProfMinBwQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ2.setStatus('current')
pvxSchedProfMaxBwQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ2.setStatus('current')
pvxSchedProfMinBwQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ3.setStatus('current')
pvxSchedProfMaxBwQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ3.setStatus('current')
pvxSchedProfMinBwQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ4.setStatus('current')
pvxSchedProfMaxBwQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ4.setStatus('current')
pvxSchedProfMinBwQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ5.setStatus('current')
pvxSchedProfMaxBwQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ5.setStatus('current')
pvxSchedProfMinBwQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ6.setStatus('current')
pvxSchedProfMaxBwQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ6.setStatus('current')
pvxSchedProfMinBwQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 25), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ7.setStatus('current')
pvxSchedProfMaxBwQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ7.setStatus('current')
pvxSchedProfMTUQuanta = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("byte2k", 1), ("byte16k", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMTUQuanta.setStatus('current')
pvxSchedProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfRowStatus.setStatus('current')
pvxPriorityTCMapTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7), )
if mibBuilder.loadTexts: pvxPriorityTCMapTable.setStatus('current')
pvxPriorityTCMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxPriorityTCMapName"))
if mibBuilder.loadTexts: pvxPriorityTCMapEntry.setStatus('current')
pvxPriorityTCMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxPriorityTCMapName.setStatus('current')
pvxPriority7TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority7TrafficClass.setStatus('current')
pvxPriority6TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority6TrafficClass.setStatus('current')
pvxPriority5TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority5TrafficClass.setStatus('current')
pvxPriority4TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority4TrafficClass.setStatus('current')
pvxPriority3TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority3TrafficClass.setStatus('current')
pvxPriority2TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority2TrafficClass.setStatus('current')
pvxPriority1TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority1TrafficClass.setStatus('current')
pvxPriority0TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority0TrafficClass.setStatus('current')
pvxPriorityTCMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriorityTCMapRowStatus.setStatus('current')
pvxPCPEncDecProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8), )
if mibBuilder.loadTexts: pvxPCPEncDecProfileTable.setStatus('current')
pvxPCPEncDecProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxPCPEncDecProfileName"))
if mibBuilder.loadTexts: pvxPCPEncDecProfEntry.setStatus('current')
pvxPCPEncDecProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxPCPEncDecProfileName.setStatus('current')
pvxPCPEncDecSelectRow = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("row-8P0D", 1), ("row-7P1D", 2), ("row-6P2D", 3), ("row-5P3D", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncDecSelectRow.setStatus('current')
pvxPCPEncPriority7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority7.setStatus('current')
pvxPCPEncPriority7DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority7DE.setStatus('current')
pvxPCPEncPriority6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority6.setStatus('current')
pvxPCPEncPriority6DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority6DE.setStatus('current')
pvxPCPEncPriority5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority5.setStatus('current')
pvxPCPEncPriority5DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority5DE.setStatus('current')
pvxPCPEncPriority4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority4.setStatus('current')
pvxPCPEncPriority4DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority4DE.setStatus('current')
pvxPCPEncPriority3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority3.setStatus('current')
pvxPCPEncPriority3DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority3DE.setStatus('current')
pvxPCPEncPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority2.setStatus('current')
pvxPCPEncPriority2DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority2DE.setStatus('current')
pvxPCPEncPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority1.setStatus('current')
pvxPCPEncPriority1DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority1DE.setStatus('current')
pvxPCPEncPriority0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority0.setStatus('current')
pvxPCPEncPriority0DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority0DE.setStatus('current')
pvxPCPDecPriority7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 19), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority7.setStatus('current')
pvxPCPDecPriority6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 20), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority6.setStatus('current')
pvxPCPDecPriority5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 21), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority5.setStatus('current')
pvxPCPDecPriority4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 22), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority4.setStatus('current')
pvxPCPDecPriority3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 23), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority3.setStatus('current')
pvxPCPDecPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 24), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority2.setStatus('current')
pvxPCPDecPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 25), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority1.setStatus('current')
pvxPCPDecPriority0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 26), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority0.setStatus('current')
pvxPCPEncDecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncDecRowStatus.setStatus('current')
pvxDscpPHBProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9), )
if mibBuilder.loadTexts: pvxDscpPHBProfileTable.setStatus('current')
pvxDscpPHBProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxDscpPHBProfileName"))
if mibBuilder.loadTexts: pvxDscpPHBProfileEntry.setStatus('current')
pvxDscpPHBProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxDscpPHBProfileName.setStatus('current')
pvxDscpClassSelector7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector7.setStatus('current')
pvxDscpClassSelector6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector6.setStatus('current')
pvxDscpClassSelector5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector5.setStatus('current')
pvxDscpClassSelector4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector4.setStatus('current')
pvxDscpClassSelector3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector3.setStatus('current')
pvxDscpClassSelector2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector2.setStatus('current')
pvxDscpClassSelector1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector1.setStatus('current')
pvxDscpClassBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassBestEffort.setStatus('current')
pvxDscpAssuredFwd1y = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpAssuredFwd1y.setStatus('current')
pvxDscpAssuredFwd2y = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpAssuredFwd2y.setStatus('current')
pvxDscpAssuredFwd3y = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpAssuredFwd3y.setStatus('current')
pvxDscpAssuredFwd4y = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpAssuredFwd4y.setStatus('current')
pvxDscpExpeditedFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpExpeditedFwd.setStatus('current')
pvxDscpPHBProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpPHBProfileRowStatus.setStatus('current')
pvxBandwidthProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10), )
if mibBuilder.loadTexts: pvxBandwidthProfileTable.setStatus('current')
pvxBandwidthProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxBandwidthProfileName"))
if mibBuilder.loadTexts: pvxBandwidthProfileEntry.setStatus('current')
pvxBandwidthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxBandwidthProfileName.setStatus('current')
pvxBWCnfrmActionChangeDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWCnfrmActionChangeDscp.setStatus('current')
pvxBWCnfrmActionChangeTOSFrmPri = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("change", 1), ("doNotChange", 2), ("notUsed", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWCnfrmActionChangeTOSFrmPri.setStatus('current')
pvxBWExceedActionChangeDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWExceedActionChangeDscp.setStatus('current')
pvxBWMeterColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 13), PvxQoSColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterColorAware.setStatus('current')
pvxBWMeterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("srTCM", 1), ("trTCM", 2), ("notUsed", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterMode.setStatus('current')
pvxBWMeterCir = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterCir.setStatus('current')
pvxBWMeterCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterCbs.setStatus('current')
pvxBWMeterEir = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterEir.setStatus('current')
pvxBWMeterEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterEbs.setStatus('current')
pvxBWSetInternalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWSetInternalPriority.setStatus('current')
pvxBWExceedActionSetDEI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("doNotSet", 2), ("notUsed", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWExceedActionSetDEI.setStatus('current')
pvxBandwidthProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBandwidthProfileRowStatus.setStatus('current')
pvxClassMapProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11), )
if mibBuilder.loadTexts: pvxClassMapProfileTable.setStatus('current')
pvxClassMapProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxClassMapProfileName"))
if mibBuilder.loadTexts: pvxClassMapProfileEntry.setStatus('current')
pvxClassMapProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxClassMapProfileName.setStatus('current')
pvxClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress-Per-Cos", 1), ("egress-Per-Cos", 2), ("service-Map", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapType.setStatus('current')
pvxClassMapMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match-all", 1), ("match-any", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapMatchType.setStatus('current')
pvxClassMapCVlanFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapCVlanFilter.setStatus('current')
pvxClassMapSVlanFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxClassMapSVlanFilter.setStatus('deprecated')
pvxClassMapCVlanPriFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapCVlanPriFilter.setStatus('current')
pvxClassMapSVlanPriFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapSVlanPriFilter.setStatus('current')
pvxClassMapSrcIpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapSrcIpFilter.setStatus('current')
pvxClassMapSrcIpNetMaskFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapSrcIpNetMaskFilter.setStatus('current')
pvxClassMapDstIpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapDstIpFilter.setStatus('current')
pvxClassMapDstIpNetMaskFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapDstIpNetMaskFilter.setStatus('current')
pvxClassMapIpProtocolFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapIpProtocolFilter.setStatus('current')
pvxClassMapDscpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapDscpFilter.setStatus('current')
pvxClassMapL4SrcPortFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapL4SrcPortFilter.setStatus('current')
pvxClassMapL4DstPortFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapL4DstPortFilter.setStatus('current')
pvxClassMapTcpControlFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapTcpControlFilter.setStatus('current')
pvxClassMapSrcMACAddrFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 17), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapSrcMACAddrFilter.setStatus('current')
pvxClassMapDstMACAddrFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 18), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapDstMACAddrFilter.setStatus('current')
pvxClassMapEtherTypeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapEtherTypeFilter.setStatus('current')
pvxClassMapSrcMACMaskFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapSrcMACMaskFilter.setStatus('current')
pvxClassMapDstMACMaskFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapDstMACMaskFilter.setStatus('current')
pvxClassMapL4SrcPortEndFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ValueRangeConstraint(8191, 8191), ValueRangeConstraint(16383, 16383), ValueRangeConstraint(32767, 32767), ValueRangeConstraint(65535, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapL4SrcPortEndFilter.setStatus('current')
pvxClassMapL4DstPortEndFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ValueRangeConstraint(8191, 8191), ValueRangeConstraint(16383, 16383), ValueRangeConstraint(32767, 32767), ValueRangeConstraint(65535, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapL4DstPortEndFilter.setStatus('current')
pvxClassMapCVlanEndFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapCVlanEndFilter.setStatus('current')
pvxClassMapProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapProfileRowStatus.setStatus('current')
pvxPolicyMapProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12), )
if mibBuilder.loadTexts: pvxPolicyMapProfileTable.setStatus('current')
pvxPolicyMapProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxPolicyMapPolicyName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxPolicyMapClassMapName"))
if mibBuilder.loadTexts: pvxPolicyMapProfileEntry.setStatus('current')
pvxPolicyMapPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxPolicyMapPolicyName.setStatus('current')
pvxPolicyMapClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxPolicyMapClassMapName.setStatus('current')
pvxPolicyMapBWProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPolicyMapBWProfileName.setStatus('current')
pvxPolicyMapProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPolicyMapProfileRowStatus.setStatus('current')
pvxControlFrameProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13), )
if mibBuilder.loadTexts: pvxControlFrameProfileTable.setStatus('current')
pvxControlFrameProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxControlFrameProfileName"))
if mibBuilder.loadTexts: pvxControlFrameProfileEntry.setStatus('current')
pvxControlFrameProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 1), ProfileNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileName.setStatus('current')
pvxControlFrameProfileLacp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 2), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileLacp.setStatus('current')
pvxControlFrameProfileStp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 3), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileStp.setStatus('current')
pvxControlFrameProfileDot1x = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 4), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileDot1x.setStatus('current')
pvxControlFrameProfileGvrp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 5), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileGvrp.setStatus('current')
pvxControlFrameProfileGmrp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 6), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileGmrp.setStatus('current')
pvxControlFrameProfileLldp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 7), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileLldp.setStatus('current')
pvxControlFrameProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileRowStatus.setStatus('current')
pvxTunnelMacAddrProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14), )
if mibBuilder.loadTexts: pvxTunnelMacAddrProfileTable.setStatus('current')
pvxTunnelMacAddrProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxTMAPName"))
if mibBuilder.loadTexts: pvxTunnelMacAddrProfileEntry.setStatus('current')
pvxTMAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 1), ProfileNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPName.setStatus('current')
pvxTMAPDot1xTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPDot1xTunnMacAddr.setStatus('current')
pvxTMAPLacpTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPLacpTunnMacAddr.setStatus('current')
pvxTMAPStpTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPStpTunnMacAddr.setStatus('current')
pvxTMAPGvrpTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPGvrpTunnMacAddr.setStatus('current')
pvxTMAPGmrpTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPGmrpTunnMacAddr.setStatus('current')
pvxTMAPLldpTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPLldpTunnMacAddr.setStatus('current')
pvxTMAPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPRowStatus.setStatus('current')
pvxSLAMeasurementProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15), )
if mibBuilder.loadTexts: pvxSLAMeasurementProfileTable.setStatus('current')
pvxSLAMeasurementProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtProfileName"))
if mibBuilder.loadTexts: pvxSLAMeasurementProfileEntry.setStatus('current')
pvxSLAMsmtProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 1), ProfileNameType())
if mibBuilder.loadTexts: pvxSLAMsmtProfileName.setStatus('current')
pvxSLAMsmtThresholdFarEndLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 2), FixedX1000()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdFarEndLossRatio.setStatus('current')
pvxSLAMsmtThresholdNearEndLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 3), FixedX1000()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdNearEndLossRatio.setStatus('current')
pvxSLAMsmtThresholdDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayMaximum.setStatus('current')
pvxSLAMsmtThresholdDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayAverage.setStatus('current')
pvxSLAMsmtThresholdDelayVarMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayVarMaximum.setStatus('current')
pvxSLAMsmtThresholdDelayVarAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayVarAverage.setStatus('current')
pvxSLAMsmtMonitorPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 8), MonitorPeriodType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtMonitorPeriod.setStatus('current')
pvxSLAMsmtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtRowStatus.setStatus('current')
pvxMSTPCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32), )
if mibBuilder.loadTexts: pvxMSTPCrntPMTable.setStatus('current')
pvxMSTPCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPCrntPMXstIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxMSTPCrntPMEntry.setStatus('current')
pvxMSTPCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPCrntPMSwitchIdx.setStatus('current')
pvxMSTPCrntPMXstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxMSTPCrntPMXstIdx.setStatus('current')
pvxMSTPCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 3), PMIntervalType())
if mibBuilder.loadTexts: pvxMSTPCrntPMIntervalTypeIdx.setStatus('current')
pvxMSTPCrntPMRCCCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 4), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCValue.setStatus('current')
pvxMSTPCrntPMRCCCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCTimeStamp.setStatus('current')
pvxMSTPCrntPMRCCCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 6), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCValidity.setStatus('current')
pvxMSTPCrntPMRCCCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 7), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCInitialize.setStatus('current')
pvxMSTPCrntPMTCCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCValue.setStatus('current')
pvxMSTPCrntPMTCCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCTimeStamp.setStatus('current')
pvxMSTPCrntPMTCCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCValidity.setStatus('current')
pvxMSTPCrntPMTCCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 11), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCInitialize.setStatus('current')
pvxMSTPCrntPMNRBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCValue.setStatus('current')
pvxMSTPCrntPMNRBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCTimeStamp.setStatus('current')
pvxMSTPCrntPMNRBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCValidity.setStatus('current')
pvxMSTPCrntPMNRBCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCInitialize.setStatus('current')
pvxMSTPHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33), )
if mibBuilder.loadTexts: pvxMSTPHistPMTable.setStatus('current')
pvxMSTPHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPHistPMXstIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxMSTPHistPMEntry.setStatus('current')
pvxMSTPHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPHistPMSwitchIdx.setStatus('current')
pvxMSTPHistPMXstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxMSTPHistPMXstIdx.setStatus('current')
pvxMSTPHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 3), PMIntervalType())
if mibBuilder.loadTexts: pvxMSTPHistPMIntervalTypeIdx.setStatus('current')
pvxMSTPHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxMSTPHistPMIntervalIdx.setStatus('current')
pvxMSTPHistPMRCCCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 5), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCValue.setStatus('current')
pvxMSTPHistPMRCCCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCTimeStamp.setStatus('current')
pvxMSTPHistPMRCCCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCValidity.setStatus('current')
pvxMSTPHistPMRCCCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 8), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCInitialize.setStatus('current')
pvxMSTPHistPMTCCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 9), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMTCCValue.setStatus('current')
pvxMSTPHistPMTCCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMTCCTimeStamp.setStatus('current')
pvxMSTPHistPMTCCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMTCCValidity.setStatus('current')
pvxMSTPHistPMTCCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 12), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPHistPMTCCInitialize.setStatus('current')
pvxMSTPHistPMNRBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 13), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCValue.setStatus('current')
pvxMSTPHistPMNRBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCTimeStamp.setStatus('current')
pvxMSTPHistPMNRBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCValidity.setStatus('current')
pvxMSTPHistPMNRBCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 16), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCInitialize.setStatus('current')
pvxMSTPPortCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34), )
if mibBuilder.loadTexts: pvxMSTPPortCrntPMTable.setStatus('current')
pvxMSTPPortCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMXstIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMEntry.setStatus('current')
pvxMSTPPortCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMSwitchIdx.setStatus('current')
pvxMSTPPortCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMShelfIdx.setStatus('current')
pvxMSTPPortCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMSlotIdx.setStatus('current')
pvxMSTPPortCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxMSTPPortCrntPMTypeIdx.setStatus('current')
pvxMSTPPortCrntPMXstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMXstIdx.setStatus('current')
pvxMSTPPortCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMIdx.setStatus('current')
pvxMSTPPortCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 7), PMIntervalType())
if mibBuilder.loadTexts: pvxMSTPPortCrntPMIntervalTypeIdx.setStatus('current')
pvxMSTPPortCrntPMFWDTRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRValue.setStatus('current')
pvxMSTPPortCrntPMFWDTRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRTimeStamp.setStatus('current')
pvxMSTPPortCrntPMFWDTRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRValidity.setStatus('current')
pvxMSTPPortCrntPMFWDTRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 11), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRInitialize.setStatus('current')
pvxMSTPPortCrntPMPMCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCValue.setStatus('current')
pvxMSTPPortCrntPMPMCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCTimeStamp.setStatus('current')
pvxMSTPPortCrntPMPMCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCValidity.setStatus('current')
pvxMSTPPortCrntPMPMCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCInitialize.setStatus('current')
pvxMSTPPortCrntPMBPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXValue.setStatus('current')
pvxMSTPPortCrntPMBPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXTimeStamp.setStatus('current')
pvxMSTPPortCrntPMBPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXValidity.setStatus('current')
pvxMSTPPortCrntPMBPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXInitialize.setStatus('current')
pvxMSTPPortCrntPMBPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 20), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXValue.setStatus('current')
pvxMSTPPortCrntPMBPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXTimeStamp.setStatus('current')
pvxMSTPPortCrntPMBPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXValidity.setStatus('current')
pvxMSTPPortCrntPMBPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXInitialize.setStatus('current')
pvxMSTPPortCrntPMBPDUCFGRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 24), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXValue.setStatus('current')
pvxMSTPPortCrntPMBPDUCFGRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXTimeStamp.setStatus('current')
pvxMSTPPortCrntPMBPDUCFGRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXValidity.setStatus('current')
pvxMSTPPortCrntPMBPDUCFGRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXInitialize.setStatus('current')
pvxMSTPPortCrntPMBPDUCFGTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 28), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXValue.setStatus('current')
pvxMSTPPortCrntPMBPDUCFGTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXTimeStamp.setStatus('current')
pvxMSTPPortCrntPMBPDUCFGTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXValidity.setStatus('current')
pvxMSTPPortCrntPMBPDUCFGTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXInitialize.setStatus('current')
pvxMSTPPortCrntPMBPDUTCNRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 32), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXValue.setStatus('current')
pvxMSTPPortCrntPMBPDUTCNRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXTimeStamp.setStatus('current')
pvxMSTPPortCrntPMBPDUTCNRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXValidity.setStatus('current')
pvxMSTPPortCrntPMBPDUTCNRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXInitialize.setStatus('current')
pvxMSTPPortCrntPMBPDUTCNTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 36), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXValue.setStatus('current')
pvxMSTPPortCrntPMBPDUTCNTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXTimeStamp.setStatus('current')
pvxMSTPPortCrntPMBPDUTCNTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXValidity.setStatus('current')
pvxMSTPPortCrntPMBPDUTCNTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXInitialize.setStatus('current')
pvxMSTPPortCrntPMINVBPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 40), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXValue.setStatus('current')
pvxMSTPPortCrntPMINVBPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXTimeStamp.setStatus('current')
pvxMSTPPortCrntPMINVBPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXValidity.setStatus('current')
pvxMSTPPortCrntPMINVBPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXInitialize.setStatus('current')
pvxMSTPPortCrntPMINVBPDUCFGRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 44), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXValue.setStatus('current')
pvxMSTPPortCrntPMINVBPDUCFGRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXTimeStamp.setStatus('current')
pvxMSTPPortCrntPMINVBPDUCFGRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXValidity.setStatus('current')
pvxMSTPPortCrntPMINVBPDUCFGRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXInitialize.setStatus('current')
pvxMSTPPortCrntPMINVBPDUTCNRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 48), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXValue.setStatus('current')
pvxMSTPPortCrntPMINVBPDUTCNRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXTimeStamp.setStatus('current')
pvxMSTPPortCrntPMINVBPDUTCNRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXValidity.setStatus('current')
pvxMSTPPortCrntPMINVBPDUTCNRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXInitialize.setStatus('current')
pvxMSTPPortHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35), )
if mibBuilder.loadTexts: pvxMSTPPortHistPMTable.setStatus('current')
pvxMSTPPortHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMXstIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxMSTPPortHistPMEntry.setStatus('current')
pvxMSTPPortHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPPortHistPMSwitchIdx.setStatus('current')
pvxMSTPPortHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxMSTPPortHistPMShelfIdx.setStatus('current')
pvxMSTPPortHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxMSTPPortHistPMSlotIdx.setStatus('current')
pvxMSTPPortHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxMSTPPortHistPMTypeIdx.setStatus('current')
pvxMSTPPortHistPMXstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxMSTPPortHistPMXstIdx.setStatus('current')
pvxMSTPPortHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxMSTPPortHistPMIdx.setStatus('current')
pvxMSTPPortHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 7), PMIntervalType())
if mibBuilder.loadTexts: pvxMSTPPortHistPMIntervalTypeIdx.setStatus('current')
pvxMSTPPortHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxMSTPPortHistPMIntervalIdx.setStatus('current')
pvxMSTPPortHistPMFWDTRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 9), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRValue.setStatus('current')
pvxMSTPPortHistPMFWDTRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRTimeStamp.setStatus('current')
pvxMSTPPortHistPMFWDTRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRValidity.setStatus('current')
pvxMSTPPortHistPMFWDTRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 12), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRInitialize.setStatus('current')
pvxMSTPPortHistPMPMCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 13), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCValue.setStatus('current')
pvxMSTPPortHistPMPMCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCTimeStamp.setStatus('current')
pvxMSTPPortHistPMPMCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCValidity.setStatus('current')
pvxMSTPPortHistPMPMCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 16), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCInitialize.setStatus('current')
pvxMSTPPortHistPMBPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 17), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXValue.setStatus('current')
pvxMSTPPortHistPMBPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXTimeStamp.setStatus('current')
pvxMSTPPortHistPMBPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXValidity.setStatus('current')
pvxMSTPPortHistPMBPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 20), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXInitialize.setStatus('current')
pvxMSTPPortHistPMBPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 21), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXValue.setStatus('current')
pvxMSTPPortHistPMBPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXTimeStamp.setStatus('current')
pvxMSTPPortHistPMBPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXValidity.setStatus('current')
pvxMSTPPortHistPMBPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXInitialize.setStatus('current')
pvxMSTPPortHistPMBPDUCFGRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 25), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXValue.setStatus('current')
pvxMSTPPortHistPMBPDUCFGRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXTimeStamp.setStatus('current')
pvxMSTPPortHistPMBPDUCFGRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXValidity.setStatus('current')
pvxMSTPPortHistPMBPDUCFGRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 28), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXInitialize.setStatus('current')
pvxMSTPPortHistPMBPDUCFGTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 29), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXValue.setStatus('current')
pvxMSTPPortHistPMBPDUCFGTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXTimeStamp.setStatus('current')
pvxMSTPPortHistPMBPDUCFGTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 31), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXValidity.setStatus('current')
pvxMSTPPortHistPMBPDUCFGTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 32), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXInitialize.setStatus('current')
pvxMSTPPortHistPMBPDUTCNRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 33), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXValue.setStatus('current')
pvxMSTPPortHistPMBPDUTCNRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXTimeStamp.setStatus('current')
pvxMSTPPortHistPMBPDUTCNRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXValidity.setStatus('current')
pvxMSTPPortHistPMBPDUTCNRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 36), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXInitialize.setStatus('current')
pvxMSTPPortHistPMBPDUTCNTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 37), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXValue.setStatus('current')
pvxMSTPPortHistPMBPDUTCNTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXTimeStamp.setStatus('current')
pvxMSTPPortHistPMBPDUTCNTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXValidity.setStatus('current')
pvxMSTPPortHistPMBPDUTCNTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 40), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXInitialize.setStatus('current')
pvxMSTPPortHistPMINVBPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 41), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXValue.setStatus('current')
pvxMSTPPortHistPMINVBPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXTimeStamp.setStatus('current')
pvxMSTPPortHistPMINVBPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXValidity.setStatus('current')
pvxMSTPPortHistPMINVBPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 44), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXInitialize.setStatus('current')
pvxMSTPPortHistPMINVBPDUCFGRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 45), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXValue.setStatus('current')
pvxMSTPPortHistPMINVBPDUCFGRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXTimeStamp.setStatus('current')
pvxMSTPPortHistPMINVBPDUCFGRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXValidity.setStatus('current')
pvxMSTPPortHistPMINVBPDUCFGRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 48), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXInitialize.setStatus('current')
pvxMSTPPortHistPMINVBPDUTCNRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 49), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXValue.setStatus('current')
pvxMSTPPortHistPMINVBPDUTCNRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXTimeStamp.setStatus('current')
pvxMSTPPortHistPMINVBPDUTCNRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXValidity.setStatus('current')
pvxMSTPPortHistPMINVBPDUTCNRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 52), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXInitialize.setStatus('current')
pvxLAGPortCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36), )
if mibBuilder.loadTexts: pvxLAGPortCrntPMTable.setStatus('current')
pvxLAGPortCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxLAGPortCrntPMEntry.setStatus('current')
pvxLAGPortCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxLAGPortCrntPMSwitchIdx.setStatus('current')
pvxLAGPortCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxLAGPortCrntPMShelfIdx.setStatus('current')
pvxLAGPortCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxLAGPortCrntPMSlotIdx.setStatus('current')
pvxLAGPortCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxLAGPortCrntPMTypeIdx.setStatus('current')
pvxLAGPortCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxLAGPortCrntPMIdx.setStatus('current')
pvxLAGPortCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxLAGPortCrntPMIntervalTypeIdx.setStatus('current')
pvxLAGPortCrntPMLACPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 7), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXValue.setStatus('current')
pvxLAGPortCrntPMLACPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXTimeStamp.setStatus('current')
pvxLAGPortCrntPMLACPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXValidity.setStatus('current')
pvxLAGPortCrntPMLACPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 10), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXInitialize.setStatus('current')
pvxLAGPortCrntPMMRKPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXValue.setStatus('current')
pvxLAGPortCrntPMMRKPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXTimeStamp.setStatus('current')
pvxLAGPortCrntPMMRKPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXValidity.setStatus('current')
pvxLAGPortCrntPMMRKPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 14), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXInitialize.setStatus('current')
pvxLAGPortCrntPMMRKRSPPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 15), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXValue.setStatus('current')
pvxLAGPortCrntPMMRKRSPPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXTimeStamp.setStatus('current')
pvxLAGPortCrntPMMRKRSPPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXValidity.setStatus('current')
pvxLAGPortCrntPMMRKRSPPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 18), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXInitialize.setStatus('current')
pvxLAGPortCrntPMINVLACFRRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 19), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXValue.setStatus('current')
pvxLAGPortCrntPMINVLACFRRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXTimeStamp.setStatus('current')
pvxLAGPortCrntPMINVLACFRRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXValidity.setStatus('current')
pvxLAGPortCrntPMINVLACFRRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXInitialize.setStatus('current')
pvxLAGPortCrntPMLACPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 23), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXValue.setStatus('current')
pvxLAGPortCrntPMLACPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXTimeStamp.setStatus('current')
pvxLAGPortCrntPMLACPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXValidity.setStatus('current')
pvxLAGPortCrntPMLACPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXInitialize.setStatus('current')
pvxLAGPortCrntPMMRKPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 27), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXValue.setStatus('current')
pvxLAGPortCrntPMMRKPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXTimeStamp.setStatus('current')
pvxLAGPortCrntPMMRKPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXValidity.setStatus('current')
pvxLAGPortCrntPMMRKPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXInitialize.setStatus('current')
pvxLAGPortCrntPMMRKRSPPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 31), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXValue.setStatus('current')
pvxLAGPortCrntPMMRKRSPPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXTimeStamp.setStatus('current')
pvxLAGPortCrntPMMRKRSPPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXValidity.setStatus('current')
pvxLAGPortCrntPMMRKRSPPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 34), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXInitialize.setStatus('current')
pvxLAGPortHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37), )
if mibBuilder.loadTexts: pvxLAGPortHistPMTable.setStatus('current')
pvxLAGPortHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxLAGPortHistPMEntry.setStatus('current')
pvxLAGPortHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxLAGPortHistPMSwitchIdx.setStatus('current')
pvxLAGPortHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxLAGPortHistPMShelfIdx.setStatus('current')
pvxLAGPortHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxLAGPortHistPMSlotIdx.setStatus('current')
pvxLAGPortHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxLAGPortHistPMTypeIdx.setStatus('current')
pvxLAGPortHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxLAGPortHistPMIdx.setStatus('current')
pvxLAGPortHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxLAGPortHistPMIntervalTypeIdx.setStatus('current')
pvxLAGPortHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxLAGPortHistPMIntervalIdx.setStatus('current')
pvxLAGPortHistPMLACPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXValue.setStatus('current')
pvxLAGPortHistPMLACPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXTimeStamp.setStatus('current')
pvxLAGPortHistPMLACPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXValidity.setStatus('current')
pvxLAGPortHistPMLACPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 11), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXInitialize.setStatus('current')
pvxLAGPortHistPMMRKPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXValue.setStatus('current')
pvxLAGPortHistPMMRKPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXTimeStamp.setStatus('current')
pvxLAGPortHistPMMRKPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXValidity.setStatus('current')
pvxLAGPortHistPMMRKPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXInitialize.setStatus('current')
pvxLAGPortHistPMMRKRSPPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXValue.setStatus('current')
pvxLAGPortHistPMMRKRSPPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXTimeStamp.setStatus('current')
pvxLAGPortHistPMMRKRSPPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXValidity.setStatus('current')
pvxLAGPortHistPMMRKRSPPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXInitialize.setStatus('current')
pvxLAGPortHistPMINVLACFRRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 20), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXValue.setStatus('current')
pvxLAGPortHistPMINVLACFRRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXTimeStamp.setStatus('current')
pvxLAGPortHistPMINVLACFRRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXValidity.setStatus('current')
pvxLAGPortHistPMINVLACFRRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXInitialize.setStatus('current')
pvxLAGPortHistPMLACPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 24), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXValue.setStatus('current')
pvxLAGPortHistPMLACPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXTimeStamp.setStatus('current')
pvxLAGPortHistPMLACPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXValidity.setStatus('current')
pvxLAGPortHistPMLACPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXInitialize.setStatus('current')
pvxLAGPortHistPMMRKPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 28), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXValue.setStatus('current')
pvxLAGPortHistPMMRKPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXTimeStamp.setStatus('current')
pvxLAGPortHistPMMRKPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXValidity.setStatus('current')
pvxLAGPortHistPMMRKPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXInitialize.setStatus('current')
pvxLAGPortHistPMMRKRSPPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 32), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXValue.setStatus('current')
pvxLAGPortHistPMMRKRSPPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXTimeStamp.setStatus('current')
pvxLAGPortHistPMMRKRSPPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXValidity.setStatus('current')
pvxLAGPortHistPMMRKRSPPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXInitialize.setStatus('current')
pvxESrvcCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40), )
if mibBuilder.loadTexts: pvxESrvcCrntPMTable.setStatus('current')
pvxESrvcCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcCrntPMESrvcNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxESrvcCrntPMEntry.setStatus('current')
pvxESrvcCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxESrvcCrntPMSwitchIdx.setStatus('current')
pvxESrvcCrntPMESrvcNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcCrntPMESrvcNameIdx.setStatus('current')
pvxESrvcCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 3), PMIntervalType())
if mibBuilder.loadTexts: pvxESrvcCrntPMIntervalTypeIdx.setStatus('current')
pvxESrvcCrntPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcCrntPMUASValue.setStatus('current')
pvxESrvcCrntPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcCrntPMUASTimeStamp.setStatus('current')
pvxESrvcCrntPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 6), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcCrntPMUASValidity.setStatus('current')
pvxESrvcCrntPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 7), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcCrntPMUASInitialize.setStatus('current')
pvxESrvcHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41), )
if mibBuilder.loadTexts: pvxESrvcHistPMTable.setStatus('current')
pvxESrvcHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcHistPMESrvcNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxESrvcHistPMEntry.setStatus('current')
pvxESrvcHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxESrvcHistPMSwitchIdx.setStatus('current')
pvxESrvcHistPMESrvcNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcHistPMESrvcNameIdx.setStatus('current')
pvxESrvcHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 3), PMIntervalType())
if mibBuilder.loadTexts: pvxESrvcHistPMIntervalTypeIdx.setStatus('current')
pvxESrvcHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxESrvcHistPMIntervalIdx.setStatus('current')
pvxESrvcHistPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcHistPMUASValue.setStatus('current')
pvxESrvcHistPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcHistPMUASTimeStamp.setStatus('current')
pvxESrvcHistPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcHistPMUASValidity.setStatus('current')
pvxESrvcHistPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 8), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcHistPMUASInitialize.setStatus('current')
pvxESrvcBWPrflCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42), )
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMTable.setStatus('current')
pvxESrvcBWPrflCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMESrvcNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPlcyNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMClsMapNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMDirectionIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMEntry.setStatus('current')
pvxESrvcBWPrflCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMSwitchIdx.setStatus('current')
pvxESrvcBWPrflCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMShelfIdx.setStatus('current')
pvxESrvcBWPrflCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMSlotIdx.setStatus('current')
pvxESrvcBWPrflCrntPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMPortTypeIdx.setStatus('current')
pvxESrvcBWPrflCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMPortIdx.setStatus('current')
pvxESrvcBWPrflCrntPMESrvcNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMESrvcNameIdx.setStatus('current')
pvxESrvcBWPrflCrntPMPlcyNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMPlcyNameIdx.setStatus('current')
pvxESrvcBWPrflCrntPMClsMapNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMClsMapNameIdx.setStatus('current')
pvxESrvcBWPrflCrntPMDirectionIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMDirectionIdx.setStatus('current')
pvxESrvcBWPrflCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 10), PMIntervalType())
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMIntervalTypeIdx.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsTotalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalValue.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsTotalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalTimeStamp.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsTotalValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalValidity.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsTotalInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 14), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalInitialize.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsVltValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 15), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltValue.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsVltTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltTimeStamp.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsVltValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltValidity.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsVltInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 18), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltInitialize.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsCnfExcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 19), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcValue.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsCnfExcTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcTimeStamp.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsCnfExcValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcValidity.setStatus('current')
pvxESrvcBWPrflCrntPMOctetsCnfExcInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcInitialize.setStatus('current')
pvxESrvcBWPrflCrntPMBDWUtlzValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 23), FixedX100()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzValue.setStatus('current')
pvxESrvcBWPrflCrntPMBDWUtlzTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzTimeStamp.setStatus('current')
pvxESrvcBWPrflCrntPMBDWUtlzValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzValidity.setStatus('current')
pvxESrvcBWPrflCrntPMBDWUtlzInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzInitialize.setStatus('current')
pvxESrvcBWPrflHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43), )
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMTable.setStatus('current')
pvxESrvcBWPrflHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMESrvcNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMPlcyNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMClsMapNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMDirectionIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMEntry.setStatus('current')
pvxESrvcBWPrflHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMSwitchIdx.setStatus('current')
pvxESrvcBWPrflHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMShelfIdx.setStatus('current')
pvxESrvcBWPrflHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMSlotIdx.setStatus('current')
pvxESrvcBWPrflHistPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMPortTypeIdx.setStatus('current')
pvxESrvcBWPrflHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMPortIdx.setStatus('current')
pvxESrvcBWPrflHistPMESrvcNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMESrvcNameIdx.setStatus('current')
pvxESrvcBWPrflHistPMPlcyNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMPlcyNameIdx.setStatus('current')
pvxESrvcBWPrflHistPMClsMapNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMClsMapNameIdx.setStatus('current')
pvxESrvcBWPrflHistPMDirectionIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMDirectionIdx.setStatus('current')
pvxESrvcBWPrflHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 10), PMIntervalType())
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMIntervalTypeIdx.setStatus('current')
pvxESrvcBWPrflHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMIntervalIdx.setStatus('current')
pvxESrvcBWPrflHistPMOctetsTotalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalValue.setStatus('current')
pvxESrvcBWPrflHistPMOctetsTotalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalTimeStamp.setStatus('current')
pvxESrvcBWPrflHistPMOctetsTotalValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalValidity.setStatus('current')
pvxESrvcBWPrflHistPMOctetsTotalInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalInitialize.setStatus('current')
pvxESrvcBWPrflHistPMOctetsVltValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltValue.setStatus('current')
pvxESrvcBWPrflHistPMOctetsVltTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltTimeStamp.setStatus('current')
pvxESrvcBWPrflHistPMOctetsVltValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltValidity.setStatus('current')
pvxESrvcBWPrflHistPMOctetsVltInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltInitialize.setStatus('current')
pvxESrvcBWPrflHistPMOctetsCnfExcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 20), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcValue.setStatus('current')
pvxESrvcBWPrflHistPMOctetsCnfExcTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcTimeStamp.setStatus('current')
pvxESrvcBWPrflHistPMOctetsCnfExcValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcValidity.setStatus('current')
pvxESrvcBWPrflHistPMOctetsCnfExcInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcInitialize.setStatus('current')
pvxESrvcBWPrflHistPMBDWUtlzValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 24), FixedX100()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzValue.setStatus('current')
pvxESrvcBWPrflHistPMBDWUtlzTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzTimeStamp.setStatus('current')
pvxESrvcBWPrflHistPMBDWUtlzValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzValidity.setStatus('current')
pvxESrvcBWPrflHistPMBDWUtlzInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzInitialize.setStatus('current')
pvxESrvcBWPrflPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44), )
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdTable.setStatus('current')
pvxESrvcBWPrflPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdESrvcNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdPlcyNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdClsMapNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdDirectionIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdLevelTypeIdx"))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdEntry.setStatus('current')
pvxESrvcBWPrflPMThresholdSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdSwitchIdx.setStatus('current')
pvxESrvcBWPrflPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdShelfIdx.setStatus('current')
pvxESrvcBWPrflPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdSlotIdx.setStatus('current')
pvxESrvcBWPrflPMThresholdPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdPortTypeIdx.setStatus('current')
pvxESrvcBWPrflPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdPortIdx.setStatus('current')
pvxESrvcBWPrflPMThresholdESrvcNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdESrvcNameIdx.setStatus('current')
pvxESrvcBWPrflPMThresholdPlcyNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdPlcyNameIdx.setStatus('current')
pvxESrvcBWPrflPMThresholdClsMapNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdClsMapNameIdx.setStatus('current')
pvxESrvcBWPrflPMThresholdDirectionIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdDirectionIdx.setStatus('current')
pvxESrvcBWPrflPMThresholdLevelTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 10), PvxESrvcBWPrflPMThresholdLevelType())
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdLevelTypeIdx.setStatus('current')
pvxESrvcBWPrflPMThresholdBDWUtlzValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 11), FixedX100()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdBDWUtlzValue.setStatus('current')
pvxERPSPortCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45), )
if mibBuilder.loadTexts: pvxERPSPortCrntPMTable.setStatus('current')
pvxERPSPortCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxERPSPortCrntPMEntry.setStatus('current')
pvxERPSPortCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxERPSPortCrntPMSwitchIdx.setStatus('current')
pvxERPSPortCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxERPSPortCrntPMShelfIdx.setStatus('current')
pvxERPSPortCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxERPSPortCrntPMSlotIdx.setStatus('current')
pvxERPSPortCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxERPSPortCrntPMTypeIdx.setStatus('current')
pvxERPSPortCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxERPSPortCrntPMPortIdx.setStatus('current')
pvxERPSPortCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxERPSPortCrntPMIntervalTypeIdx.setStatus('current')
pvxERPSPortCrntPMPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 7), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxValue.setStatus('current')
pvxERPSPortCrntPMPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxTimeStamp.setStatus('current')
pvxERPSPortCrntPMPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxValidity.setStatus('current')
pvxERPSPortCrntPMPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 10), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxInitialize.setStatus('current')
pvxERPSPortCrntPMPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxValue.setStatus('current')
pvxERPSPortCrntPMPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxTimeStamp.setStatus('current')
pvxERPSPortCrntPMPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxValidity.setStatus('current')
pvxERPSPortCrntPMPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 14), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxInitialize.setStatus('current')
pvxERPSPortCrntPMPduDiscardValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 15), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardValue.setStatus('current')
pvxERPSPortCrntPMPduDiscardTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardTimeStamp.setStatus('current')
pvxERPSPortCrntPMPduDiscardValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardValidity.setStatus('current')
pvxERPSPortCrntPMPduDiscardInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 18), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardInitialize.setStatus('current')
pvxERPSPortCrntPMBlockedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 19), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedValue.setStatus('current')
pvxERPSPortCrntPMBlockedTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedTimeStamp.setStatus('current')
pvxERPSPortCrntPMBlockedValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedValidity.setStatus('current')
pvxERPSPortCrntPMBlockedInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedInitialize.setStatus('current')
pvxERPSPortCrntPMUnblockedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 23), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedValue.setStatus('current')
pvxERPSPortCrntPMUnblockedTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedTimeStamp.setStatus('current')
pvxERPSPortCrntPMUnblockedValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedValidity.setStatus('current')
pvxERPSPortCrntPMUnblockedInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedInitialize.setStatus('current')
pvxERPSPortCrntPMFailuresValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 27), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresValue.setStatus('current')
pvxERPSPortCrntPMFailuresTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresTimeStamp.setStatus('current')
pvxERPSPortCrntPMFailuresValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresValidity.setStatus('current')
pvxERPSPortCrntPMFailuresInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresInitialize.setStatus('current')
pvxERPSPortCrntPMRecoveriesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 31), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesValue.setStatus('current')
pvxERPSPortCrntPMRecoveriesTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesTimeStamp.setStatus('current')
pvxERPSPortCrntPMRecoveriesValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesValidity.setStatus('current')
pvxERPSPortCrntPMRecoveriesInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 34), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesInitialize.setStatus('current')
pvxERPSPortCrntPMNrPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 35), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxValue.setStatus('current')
pvxERPSPortCrntPMNrPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 36), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxTimeStamp.setStatus('current')
pvxERPSPortCrntPMNrPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 37), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxValidity.setStatus('current')
pvxERPSPortCrntPMNrPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 38), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxInitialize.setStatus('current')
pvxERPSPortCrntPMNrPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 39), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxValue.setStatus('current')
pvxERPSPortCrntPMNrPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxTimeStamp.setStatus('current')
pvxERPSPortCrntPMNrPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxValidity.setStatus('current')
pvxERPSPortCrntPMNrPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 42), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxInitialize.setStatus('current')
pvxERPSPortCrntPMNrrbPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 43), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxValue.setStatus('current')
pvxERPSPortCrntPMNrrbPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxTimeStamp.setStatus('current')
pvxERPSPortCrntPMNrrbPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxValidity.setStatus('current')
pvxERPSPortCrntPMNrrbPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 46), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxInitialize.setStatus('current')
pvxERPSPortCrntPMNrrbPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 47), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxValue.setStatus('current')
pvxERPSPortCrntPMNrrbPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 48), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxTimeStamp.setStatus('current')
pvxERPSPortCrntPMNrrbPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 49), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxValidity.setStatus('current')
pvxERPSPortCrntPMNrrbPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 50), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxInitialize.setStatus('current')
pvxERPSPortCrntPMSfPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 51), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxValue.setStatus('current')
pvxERPSPortCrntPMSfPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxTimeStamp.setStatus('current')
pvxERPSPortCrntPMSfPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxValidity.setStatus('current')
pvxERPSPortCrntPMSfPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 54), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxInitialize.setStatus('current')
pvxERPSPortCrntPMSfPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 55), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxValue.setStatus('current')
pvxERPSPortCrntPMSfPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxTimeStamp.setStatus('current')
pvxERPSPortCrntPMSfPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxValidity.setStatus('current')
pvxERPSPortCrntPMSfPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 58), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxInitialize.setStatus('current')
pvxERPSPortCrntPMFsPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 59), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxValue.setStatus('current')
pvxERPSPortCrntPMFsPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 60), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxTimeStamp.setStatus('current')
pvxERPSPortCrntPMFsPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 61), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxValidity.setStatus('current')
pvxERPSPortCrntPMFsPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 62), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxInitialize.setStatus('current')
pvxERPSPortCrntPMFsPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 63), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxValue.setStatus('current')
pvxERPSPortCrntPMFsPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxTimeStamp.setStatus('current')
pvxERPSPortCrntPMFsPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxValidity.setStatus('current')
pvxERPSPortCrntPMFsPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 66), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxInitialize.setStatus('current')
pvxERPSPortCrntPMMsPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 67), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxValue.setStatus('current')
pvxERPSPortCrntPMMsPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxTimeStamp.setStatus('current')
pvxERPSPortCrntPMMsPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxValidity.setStatus('current')
pvxERPSPortCrntPMMsPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 70), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxInitialize.setStatus('current')
pvxERPSPortCrntPMMsPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 71), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxValue.setStatus('current')
pvxERPSPortCrntPMMsPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 72), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxTimeStamp.setStatus('current')
pvxERPSPortCrntPMMsPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 73), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxValidity.setStatus('current')
pvxERPSPortCrntPMMsPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 74), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxInitialize.setStatus('current')
pvxERPSPortCrntPMEventPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 75), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxValue.setStatus('current')
pvxERPSPortCrntPMEventPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 76), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxTimeStamp.setStatus('current')
pvxERPSPortCrntPMEventPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 77), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxValidity.setStatus('current')
pvxERPSPortCrntPMEventPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxInitialize.setStatus('current')
pvxERPSPortCrntPMEventPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 79), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxValue.setStatus('current')
pvxERPSPortCrntPMEventPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 80), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxTimeStamp.setStatus('current')
pvxERPSPortCrntPMEventPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 81), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxValidity.setStatus('current')
pvxERPSPortCrntPMEventPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxInitialize.setStatus('current')
pvxERPSPortCrntPMVersionDiscardValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 83), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardValue.setStatus('current')
pvxERPSPortCrntPMVersionDiscardTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 84), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardTimeStamp.setStatus('current')
pvxERPSPortCrntPMVersionDiscardValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 85), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardValidity.setStatus('current')
pvxERPSPortCrntPMVersionDiscardInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardInitialize.setStatus('current')
pvxERPSPortHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46), )
if mibBuilder.loadTexts: pvxERPSPortHistPMTable.setStatus('current')
pvxERPSPortHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxERPSPortHistPMEntry.setStatus('current')
pvxERPSPortHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxERPSPortHistPMSwitchIdx.setStatus('current')
pvxERPSPortHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxERPSPortHistPMShelfIdx.setStatus('current')
pvxERPSPortHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxERPSPortHistPMSlotIdx.setStatus('current')
pvxERPSPortHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxERPSPortHistPMTypeIdx.setStatus('current')
pvxERPSPortHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxERPSPortHistPMPortIdx.setStatus('current')
pvxERPSPortHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxERPSPortHistPMIntervalTypeIdx.setStatus('current')
pvxERPSPortHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxERPSPortHistPMIntervalIdx.setStatus('current')
pvxERPSPortHistPMPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxValue.setStatus('current')
pvxERPSPortHistPMPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxTimeStamp.setStatus('current')
pvxERPSPortHistPMPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxValidity.setStatus('current')
pvxERPSPortHistPMPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 11), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxInitialize.setStatus('current')
pvxERPSPortHistPMPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxValue.setStatus('current')
pvxERPSPortHistPMPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxTimeStamp.setStatus('current')
pvxERPSPortHistPMPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxValidity.setStatus('current')
pvxERPSPortHistPMPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxInitialize.setStatus('current')
pvxERPSPortHistPMPduDiscardValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardValue.setStatus('current')
pvxERPSPortHistPMPduDiscardTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardTimeStamp.setStatus('current')
pvxERPSPortHistPMPduDiscardValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardValidity.setStatus('current')
pvxERPSPortHistPMPduDiscardInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardInitialize.setStatus('current')
pvxERPSPortHistPMBlockedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 20), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedValue.setStatus('current')
pvxERPSPortHistPMBlockedTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedTimeStamp.setStatus('current')
pvxERPSPortHistPMBlockedValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedValidity.setStatus('current')
pvxERPSPortHistPMBlockedInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedInitialize.setStatus('current')
pvxERPSPortHistPMUnblockedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 24), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedValue.setStatus('current')
pvxERPSPortHistPMUnblockedTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedTimeStamp.setStatus('current')
pvxERPSPortHistPMUnblockedValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedValidity.setStatus('current')
pvxERPSPortHistPMUnblockedInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedInitialize.setStatus('current')
pvxERPSPortHistPMFailuresValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 28), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresValue.setStatus('current')
pvxERPSPortHistPMFailuresTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresTimeStamp.setStatus('current')
pvxERPSPortHistPMFailuresValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresValidity.setStatus('current')
pvxERPSPortHistPMFailuresInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresInitialize.setStatus('current')
pvxERPSPortHistPMRecoveriesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 32), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesValue.setStatus('current')
pvxERPSPortHistPMRecoveriesTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesTimeStamp.setStatus('current')
pvxERPSPortHistPMRecoveriesValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesValidity.setStatus('current')
pvxERPSPortHistPMRecoveriesInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesInitialize.setStatus('current')
pvxERPSPortHistPMNrPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 36), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxValue.setStatus('current')
pvxERPSPortHistPMNrPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxTimeStamp.setStatus('current')
pvxERPSPortHistPMNrPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxValidity.setStatus('current')
pvxERPSPortHistPMNrPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxInitialize.setStatus('current')
pvxERPSPortHistPMNrPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 40), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxValue.setStatus('current')
pvxERPSPortHistPMNrPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxTimeStamp.setStatus('current')
pvxERPSPortHistPMNrPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxValidity.setStatus('current')
pvxERPSPortHistPMNrPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxInitialize.setStatus('current')
pvxERPSPortHistPMNrrbPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 44), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxValue.setStatus('current')
pvxERPSPortHistPMNrrbPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxTimeStamp.setStatus('current')
pvxERPSPortHistPMNrrbPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxValidity.setStatus('current')
pvxERPSPortHistPMNrrbPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxInitialize.setStatus('current')
pvxERPSPortHistPMNrrbPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 48), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxValue.setStatus('current')
pvxERPSPortHistPMNrrbPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxTimeStamp.setStatus('current')
pvxERPSPortHistPMNrrbPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxValidity.setStatus('current')
pvxERPSPortHistPMNrrbPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxInitialize.setStatus('current')
pvxERPSPortHistPMSfPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 52), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxValue.setStatus('current')
pvxERPSPortHistPMSfPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxTimeStamp.setStatus('current')
pvxERPSPortHistPMSfPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxValidity.setStatus('current')
pvxERPSPortHistPMSfPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 55), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxInitialize.setStatus('current')
pvxERPSPortHistPMSfPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 56), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxValue.setStatus('current')
pvxERPSPortHistPMSfPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxTimeStamp.setStatus('current')
pvxERPSPortHistPMSfPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 58), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxValidity.setStatus('current')
pvxERPSPortHistPMSfPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 59), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxInitialize.setStatus('current')
pvxERPSPortHistPMFsPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 60), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxValue.setStatus('current')
pvxERPSPortHistPMFsPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxTimeStamp.setStatus('current')
pvxERPSPortHistPMFsPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxValidity.setStatus('current')
pvxERPSPortHistPMFsPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 63), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxInitialize.setStatus('current')
pvxERPSPortHistPMFsPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 64), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxValue.setStatus('current')
pvxERPSPortHistPMFsPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxTimeStamp.setStatus('current')
pvxERPSPortHistPMFsPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxValidity.setStatus('current')
pvxERPSPortHistPMFsPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 67), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxInitialize.setStatus('current')
pvxERPSPortHistPMMsPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 68), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxValue.setStatus('current')
pvxERPSPortHistPMMsPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 69), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxTimeStamp.setStatus('current')
pvxERPSPortHistPMMsPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 70), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxValidity.setStatus('current')
pvxERPSPortHistPMMsPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 71), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxInitialize.setStatus('current')
pvxERPSPortHistPMMsPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 72), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxValue.setStatus('current')
pvxERPSPortHistPMMsPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 73), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxTimeStamp.setStatus('current')
pvxERPSPortHistPMMsPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 74), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxValidity.setStatus('current')
pvxERPSPortHistPMMsPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxInitialize.setStatus('current')
pvxERPSPortHistPMEventPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 76), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxValue.setStatus('current')
pvxERPSPortHistPMEventPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 77), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxTimeStamp.setStatus('current')
pvxERPSPortHistPMEventPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 78), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxValidity.setStatus('current')
pvxERPSPortHistPMEventPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxInitialize.setStatus('current')
pvxERPSPortHistPMEventPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 80), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxValue.setStatus('current')
pvxERPSPortHistPMEventPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 81), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxTimeStamp.setStatus('current')
pvxERPSPortHistPMEventPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 82), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxValidity.setStatus('current')
pvxERPSPortHistPMEventPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxInitialize.setStatus('current')
pvxERPSPortHistPMVersionDiscardValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 84), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardValue.setStatus('current')
pvxERPSPortHistPMVersionDiscardTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 85), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardTimeStamp.setStatus('current')
pvxERPSPortHistPMVersionDiscardValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 86), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardValidity.setStatus('current')
pvxERPSPortHistPMVersionDiscardInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardInitialize.setStatus('current')
pvxEServiceSlaCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47), )
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMTable.setStatus('current')
pvxEServiceSlaCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMESName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMRMepId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMEntry.setStatus('current')
pvxEServiceSlaCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMSwitchIdx.setStatus('current')
pvxEServiceSlaCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMShelfIdx.setStatus('current')
pvxEServiceSlaCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMSlotIdx.setStatus('current')
pvxEServiceSlaCrntPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMPortTypeIdx.setStatus('current')
pvxEServiceSlaCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMPortIdx.setStatus('current')
pvxEServiceSlaCrntPMESName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 6), DisplayString())
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMESName.setStatus('current')
pvxEServiceSlaCrntPMRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMRMepId.setStatus('current')
pvxEServiceSlaCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 8), PMIntervalType())
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMIntervalTypeIdx.setStatus('current')
pvxEServiceSlaCrntPMNearEndFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 9), FixedX1000()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLoss.setStatus('current')
pvxEServiceSlaCrntPMNearEndFrameLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLossTimeStamp.setStatus('current')
pvxEServiceSlaCrntPMNearEndFrameLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLossValidity.setStatus('current')
pvxEServiceSlaCrntPMNearEndFrameLossInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 12), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLossInitialize.setStatus('current')
pvxEServiceSlaCrntPMFarEndFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 13), FixedX1000()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLoss.setStatus('current')
pvxEServiceSlaCrntPMFarEndFrameLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLossTimeStamp.setStatus('current')
pvxEServiceSlaCrntPMFarEndFrameLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLossValidity.setStatus('current')
pvxEServiceSlaCrntPMFarEndFrameLossInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 16), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLossInitialize.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimum.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayMinimumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimumTimeStamp.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayMinimumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimumValidity.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayMinimumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 21), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimumInitialize.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximum.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayMaximumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximumTimeStamp.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayMaximumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximumValidity.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayMaximumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximumInitialize.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverage.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayAverageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverageTimeStamp.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayAverageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 28), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverageValidity.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayAverageInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 29), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverageInitialize.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimum.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationMinimumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimumTimeStamp.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationMinimumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimumValidity.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationMinimumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 33), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimumInitialize.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximum.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationMaximumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximumTimeStamp.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationMaximumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximumValidity.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationMaximumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 37), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximumInitialize.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverage.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationAverageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverageTimeStamp.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationAverageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 40), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverageValidity.setStatus('current')
pvxEServiceSlaCrntPM2WayDelayVariationAverageInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 41), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverageInitialize.setStatus('current')
pvxEServiceSlaHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48), )
if mibBuilder.loadTexts: pvxEServiceSlaHistPMTable.setStatus('current')
pvxEServiceSlaHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMESName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMRMepId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMEntry.setStatus('current')
pvxEServiceSlaHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMSwitchIdx.setStatus('current')
pvxEServiceSlaHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMShelfIdx.setStatus('current')
pvxEServiceSlaHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMSlotIdx.setStatus('current')
pvxEServiceSlaHistPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxEServiceSlaHistPMPortTypeIdx.setStatus('current')
pvxEServiceSlaHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMPortIdx.setStatus('current')
pvxEServiceSlaHistPMESName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 6), DisplayString())
if mibBuilder.loadTexts: pvxEServiceSlaHistPMESName.setStatus('current')
pvxEServiceSlaHistPMRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMRMepId.setStatus('current')
pvxEServiceSlaHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 8), PMIntervalType())
if mibBuilder.loadTexts: pvxEServiceSlaHistPMIntervalTypeIdx.setStatus('current')
pvxEServiceSlaHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMIntervalIdx.setStatus('current')
pvxEServiceSlaHistPMNearEndFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 10), FixedX1000()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLoss.setStatus('current')
pvxEServiceSlaHistPMNearEndFrameLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLossTimeStamp.setStatus('current')
pvxEServiceSlaHistPMNearEndFrameLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLossValidity.setStatus('current')
pvxEServiceSlaHistPMNearEndFrameLossInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 13), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLossInitialize.setStatus('current')
pvxEServiceSlaHistPMFarEndFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 14), FixedX1000()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLoss.setStatus('current')
pvxEServiceSlaHistPMFarEndFrameLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLossTimeStamp.setStatus('current')
pvxEServiceSlaHistPMFarEndFrameLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLossValidity.setStatus('current')
pvxEServiceSlaHistPMFarEndFrameLossInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 17), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLossInitialize.setStatus('current')
pvxEServiceSlaHistPM2WayDelayMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimum.setStatus('current')
pvxEServiceSlaHistPM2WayDelayMinimumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimumTimeStamp.setStatus('current')
pvxEServiceSlaHistPM2WayDelayMinimumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimumValidity.setStatus('current')
pvxEServiceSlaHistPM2WayDelayMinimumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 21), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimumInitialize.setStatus('current')
pvxEServiceSlaHistPM2WayDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximum.setStatus('current')
pvxEServiceSlaHistPM2WayDelayMaximumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximumTimeStamp.setStatus('current')
pvxEServiceSlaHistPM2WayDelayMaximumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximumValidity.setStatus('current')
pvxEServiceSlaHistPM2WayDelayMaximumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximumInitialize.setStatus('current')
pvxEServiceSlaHistPM2WayDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverage.setStatus('current')
pvxEServiceSlaHistPM2WayDelayAverageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverageTimeStamp.setStatus('current')
pvxEServiceSlaHistPM2WayDelayAverageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 28), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverageValidity.setStatus('current')
pvxEServiceSlaHistPM2WayDelayAverageInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 29), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverageInitialize.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimum.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationMinimumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimumTimeStamp.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationMinimumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimumValidity.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationMinimumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 33), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimumInitialize.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximum.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationMaximumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximumTimeStamp.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationMaximumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximumValidity.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationMaximumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 37), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximumInitialize.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverage.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationAverageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverageTimeStamp.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationAverageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 40), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverageValidity.setStatus('current')
pvxEServiceSlaHistPM2WayDelayVariationAverageInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 41), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverageInitialize.setStatus('current')
mstpGlobalErrType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memfail", 1), ("bufffail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mstpGlobalErrType.setStatus('current')
mstpGeneralEvtType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mstpGeneralEvtType.setStatus('current')
mstpProtocolMigrationType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sendstp", 1), ("sendrstp", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mstpProtocolMigrationType.setStatus('current')
mstpPacketErrType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("protocolIdErr", 1), ("invalidBpdu", 2), ("configLengthErr", 3), ("tcnLengthErr", 4), ("rstpLengthErr", 5), ("maxAgeErr", 6), ("fwdDelayErr", 7), ("helloTimeErr", 8), ("mstpLengthErr", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mstpPacketErrType.setStatus('current')
mstpPacketErrValue = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mstpPacketErrValue.setStatus('current')
resourceUnavailableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 22, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "mstpGlobalErrType"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: resourceUnavailableCond.setStatus('current')
resourceUnavailableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 22, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "mstpGlobalErrType"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: resourceUnavailableClear.setStatus('current')
switchMemberStkPortDownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 30, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxSwitchMemberIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: switchMemberStkPortDownCond.setStatus('current')
switchMemberStkPortDownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 30, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxSwitchMemberIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: switchMemberStkPortDownClear.setStatus('current')
mstpProtocolGeneralEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "mstpGeneralEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpProtocolGeneralEvt.setStatus('current')
mstpNewRootEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgRegRoot"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpNewRootEvt.setStatus('current')
mstpTopologyChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 3)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpTopologyChangeEvt.setStatus('current')
mstpProtocolMigrationEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 4)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenVersionSupported"), ("PACKET-VX-BRIDGE-MIB", "mstpProtocolMigrationType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpProtocolMigrationEvt.setStatus('current')
mstpInvalidPacketRcvdEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 5)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "mstpPacketErrType"), ("PACKET-VX-BRIDGE-MIB", "mstpPacketErrValue"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpInvalidPacketRcvdEvt.setStatus('current')
mstpRegionConfigChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 6)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenIdFmtSel"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenIdName"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenIdRevisionLevel"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenIdDigest"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpRegionConfigChangeEvt.setStatus('current')
mstpRoleChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 7)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPPortRole"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpRoleChangeEvt.setStatus('current')
lagLinkDownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 23, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxLGSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxLGIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: lagLinkDownCond.setStatus('current')
lagLinkDownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 23, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxLGSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxLGIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: lagLinkDownClear.setStatus('current')
pvxESrvcBWPrflBDWUtlzTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 26, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMShelfIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMSlotIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPortTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPortIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMESrvcNameIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPlcyNameIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMClsMapNameIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMDirectionIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMIntervalTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMBDWUtlzValue"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdLevelTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdBDWUtlzValue"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxESrvcBWPrflBDWUtlzTcaEvt.setStatus('current')
pvxSlaMeasurementTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 30, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMShelfIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMSlotIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMPortTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMPortIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMESName"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMRMepId"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMIntervalTypeIdx"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxSlaMeasurementTcaEvt.setStatus('current')
pvxESrvcOperStateChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 27, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxEthSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEthSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxEthSrvcOperState"), ("PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDefects"), ("PACKET-VX-BRIDGE-MIB", "pvxEcfmMepY1731DefectConditions"), ("PACKET-VX-BRIDGE-MIB", "pvxEthSrvcExceedMaxUNI"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxESrvcOperStateChangeEvt.setStatus('current')
pvxERPSSrvcNNIProtectionSwitchChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 28, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNISwitchId"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIShelfId"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNISlotId"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIPortTypeId"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIPortId"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNISrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcProtectionSwitchMode"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIProtectionSwitch"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIRingPortStatus"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcNNIProtectionSwitchChangeEvent.setStatus('current')
pvxERPSSrvcRingSemStateChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 29, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcRingSemStateChangeEvent.setStatus('current')
pvxERPSSrvcConfigFailEvent = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 29, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcConfigFailEvent.setStatus('current')
pvxERPSSrvcTimerStartEvent = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 29, 0, 3)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcTimerStartEvent.setStatus('current')
pvxERPSSrvcVersionMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcCompatibleVersion"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcVersionMismatchCond.setStatus('current')
pvxERPSSrvcVersionMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcCompatibleVersion"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcVersionMismatchClear.setStatus('current')
pvxERPSSrvcFOPProvisionMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29, 0, 3)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcFOPProvisionMismatchCond.setStatus('current')
pvxERPSSrvcFOPProvisionMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29, 0, 4)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcFOPProvisionMismatchClear.setStatus('current')
pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 32, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISwitchId"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIShelfId"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISlotId"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIPortTypeId"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIPortId"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIEFPSDLocalEFPSDState"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent.setStatus('current')
pvxMepListTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1), )
if mibBuilder.loadTexts: pvxMepListTable.setStatus('current')
pvxMepListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMepListSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMepListESrvcVlanId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMepListIdentifier"))
if mibBuilder.loadTexts: pvxMepListEntry.setStatus('current')
pvxMepListSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMepListSwitchIdx.setStatus('current')
pvxMepListESrvcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxMepListESrvcVlanId.setStatus('current')
pvxMepListIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxMepListIdentifier.setStatus('current')
pvxMepLocalRemoteFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localMEP", 1), ("remoteMEP", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMepLocalRemoteFlag.setStatus('current')
pvxMepSequenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMepSequenceId.setStatus('current')
pvxMepListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMepListRowStatus.setStatus('current')
pvxEcfmMepTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2), )
if mibBuilder.loadTexts: pvxEcfmMepTable.setStatus('current')
pvxEcfmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepSlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepPortId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepESrvcName"))
if mibBuilder.loadTexts: pvxEcfmMepEntry.setStatus('current')
pvxEcfmMepSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEcfmMepSwitchIdx.setStatus('current')
pvxEcfmMepShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxEcfmMepShelfId.setStatus('current')
pvxEcfmMepSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxEcfmMepSlotId.setStatus('current')
pvxEcfmMepPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxEcfmMepPortTypeId.setStatus('current')
pvxEcfmMepPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxEcfmMepPortId.setStatus('current')
pvxEcfmMepESrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxEcfmMepESrvcName.setStatus('current')
pvxEcfmMepIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepIdentifier.setStatus('current')
pvxEcfmMepDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepDirection.setStatus('current')
pvxEcfmMepActive = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepActive.setStatus('current')
pvxEcfmMepAutoGenerateFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepAutoGenerateFlag.setStatus('current')
pvxEcfmMepMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepMacAddress.setStatus('current')
pvxEcfmMepFlushRMepDb = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepFlushRMepDb.setStatus('current')
pvxEcfmMepOutOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepOutOfService.setStatus('current')
pvxEcfmMepY1731DefectConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 14), PvxY1731MepDefects()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepY1731DefectConditions.setStatus('current')
pvxEcfmMepDefects = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 15), PvxEcfmMepDefects()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDefects.setStatus('current')
pvxEcfmMepCcmSequenceErr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepCcmSequenceErr.setStatus('current')
pvxEcfmMepSentCcms = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepSentCcms.setStatus('current')
pvxEcfmMepTransmitLtmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 18), PvxEcfmTransmitStatus().clone('transmit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmStatus.setStatus('current')
pvxEcfmMepTransmitLtmTargetMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmTargetMepId.setStatus('current')
pvxEcfmMepTransmitLtmTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmTtl.setStatus('current')
pvxEcfmMepTransmitLtmResultOK = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmResultOK.setStatus('current')
pvxEcfmMepTransmitLtmSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmSeqNumber.setStatus('current')
pvxEcfmMepTransmitLbmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 23), PvxEcfmTransmitStatus().clone('ready')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmStatus.setStatus('current')
pvxEcfmMepTransmitLbmDestMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmDestMepId.setStatus('current')
pvxEcfmMepTransmitLbmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmCount.setStatus('current')
pvxEcfmMepTransmitLbmResultOK = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmResultOK.setStatus('current')
pvxEcfmMepY1731LbmCurrentTransId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepY1731LbmCurrentTransId.setStatus('current')
pvxEcfmMepLbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepLbrIn.setStatus('current')
pvxEcfmMepLbrInOutOfOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepLbrInOutOfOrder.setStatus('current')
pvxEcfmMepLbrBadMsdu = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepLbrBadMsdu.setStatus('current')
pvxEcfmMepLbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepLbrOut.setStatus('current')
pvxEcfmMepUnexpLtrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepUnexpLtrIn.setStatus('current')
pvxEcfmMepErrCcmRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepErrCcmRMepId.setStatus('current')
pvxEcfmMepXconnRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepXconnRMepId.setStatus('current')
cfmRMepStateChangeV2Evt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 36, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDbRMepState"), ("PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDefects"))
if mibBuilder.loadTexts: cfmRMepStateChangeV2Evt.setStatus('current')
pvxEcfmMepDbTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3), )
if mibBuilder.loadTexts: pvxEcfmMepDbTable.setStatus('current')
pvxEcfmMepDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDbSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDbVlanId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDbLocalMepId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDbRemoteMepId"))
if mibBuilder.loadTexts: pvxEcfmMepDbEntry.setStatus('current')
pvxEcfmMepDbSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEcfmMepDbSwitchIdx.setStatus('current')
pvxEcfmMepDbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxEcfmMepDbVlanId.setStatus('current')
pvxEcfmMepDbLocalMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxEcfmMepDbLocalMepId.setStatus('current')
pvxEcfmMepDbRemoteMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxEcfmMepDbRemoteMepId.setStatus('current')
pvxEcfmMepDbRMepState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 5), PvxEcfmRemoteMepState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepState.setStatus('current')
pvxEcfmMepDbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbMacAddress.setStatus('current')
pvxEcfmMepDbRMepSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepSwitchName.setStatus('current')
pvxEcfmMepDbRMepPortInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepPortInfo.setStatus('current')
pvxEcfmMepDbRMepRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepRDI.setStatus('current')
pvxEcfmMepDbRMepCcmDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepCcmDefect.setStatus('current')
pvxEcfmMepDbRMepPortStatusDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepPortStatusDefect.setStatus('current')
pvxEcfmMepDbRMepIntfStatusDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepIntfStatusDefect.setStatus('current')
pvxEcfmMipTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4), )
if mibBuilder.loadTexts: pvxEcfmMipTable.setStatus('current')
pvxEcfmMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipSlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipPortId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipMegLevel"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipESrvcVlanId"))
if mibBuilder.loadTexts: pvxEcfmMipEntry.setStatus('current')
pvxEcfmMipSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEcfmMipSwitchIdx.setStatus('current')
pvxEcfmMipShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxEcfmMipShelfId.setStatus('current')
pvxEcfmMipSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxEcfmMipSlotId.setStatus('current')
pvxEcfmMipPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxEcfmMipPortTypeId.setStatus('current')
pvxEcfmMipPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxEcfmMipPortId.setStatus('current')
pvxEcfmMipMegLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: pvxEcfmMipMegLevel.setStatus('current')
pvxEcfmMipESrvcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxEcfmMipESrvcVlanId.setStatus('current')
pvxEcfmMipESrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMipESrvcName.setStatus('current')
pvxEcfmMipActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEcfmMipActiveState.setStatus('current')
pvxEcfmMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEcfmMipRowStatus.setStatus('current')
pvxY1731LbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6), )
if mibBuilder.loadTexts: pvxY1731LbStatsTable.setStatus('current')
pvxY1731LbStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxY1731LbStatsSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxY1731LbStatsESrvcName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxY1731LbStatsIdentifier"), (0, "PACKET-VX-BRIDGE-MIB", "pvxY1731LbmTransId"))
if mibBuilder.loadTexts: pvxY1731LbStatsEntry.setStatus('current')
pvxY1731LbStatsSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxY1731LbStatsSwitchIdx.setStatus('current')
pvxY1731LbStatsESrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxY1731LbStatsESrvcName.setStatus('current')
pvxY1731LbStatsIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxY1731LbStatsIdentifier.setStatus('current')
pvxY1731LbmTransId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: pvxY1731LbmTransId.setStatus('current')
pvxY1731LbStatsLbmOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsLbmOut.setStatus('current')
pvxY1731LbStatsLbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsLbrIn.setStatus('current')
pvxY1731LbStatsLbrTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsLbrTimeAverage.setStatus('current')
pvxY1731LbStatsLbrTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsLbrTimeMin.setStatus('current')
pvxY1731LbStatsLbrTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsLbrTimeMax.setStatus('current')
pvxY1731LbStatsTotalResponders = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsTotalResponders.setStatus('current')
pvxY1731LbStatsAvgLbrsPerResponder = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsAvgLbrsPerResponder.setStatus('current')
pvxEcfmLtrTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7), )
if mibBuilder.loadTexts: pvxEcfmLtrTable.setStatus('current')
pvxEcfmLtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmLtrSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmLtrVlanId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmLtrMepIdentifier"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmLtrSeqNumber"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmLtrReceiveOrder"))
if mibBuilder.loadTexts: pvxEcfmLtrEntry.setStatus('current')
pvxEcfmLtrSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEcfmLtrSwitchIdx.setStatus('current')
pvxEcfmLtrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxEcfmLtrVlanId.setStatus('current')
pvxEcfmLtrMepIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxEcfmLtrMepIdentifier.setStatus('current')
pvxEcfmLtrSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: pvxEcfmLtrSeqNumber.setStatus('current')
pvxEcfmLtrReceiveOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: pvxEcfmLtrReceiveOrder.setStatus('current')
pvxEcfmLtrTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrTtl.setStatus('current')
pvxEcfmLtrForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrForwarded.setStatus('current')
pvxEcfmLtrTerminalMep = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrTerminalMep.setStatus('current')
pvxEcfmLtrRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 9), PvxEcfmRelayActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrRelayAction.setStatus('current')
pvxEcfmLtrSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrSwitchName.setStatus('current')
pvxEcfmLtrIngressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 11), PvxEcfmIngressActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrIngressAction.setStatus('current')
pvxEcfmLtrIngressMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrIngressMac.setStatus('current')
pvxEcfmLtrIngressPortInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrIngressPortInfo.setStatus('current')
pvxEcfmLtrEgressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 14), PvxEcfmEgressActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrEgressAction.setStatus('current')
pvxEcfmLtrEgressMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrEgressMac.setStatus('current')
pvxEcfmLtrEgressPortInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrEgressPortInfo.setStatus('current')
pvxSLAThroughputTestTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8), )
if mibBuilder.loadTexts: pvxSLAThroughputTestTable.setStatus('current')
pvxSLAThroughputTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestESName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestRMepId"))
if mibBuilder.loadTexts: pvxSLAThroughputTestEntry.setStatus('current')
pvxSLAThroughputTestSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSLAThroughputTestSwitchIdx.setStatus('current')
pvxSLAThroughputTestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSLAThroughputTestShelfIdx.setStatus('current')
pvxSLAThroughputTestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSLAThroughputTestSlotIdx.setStatus('current')
pvxSLAThroughputTestPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSLAThroughputTestPortTypeIdx.setStatus('current')
pvxSLAThroughputTestPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxSLAThroughputTestPortIdx.setStatus('current')
pvxSLAThroughputTestESName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 6), DisplayString())
if mibBuilder.loadTexts: pvxSLAThroughputTestESName.setStatus('current')
pvxSLAThroughputTestRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxSLAThroughputTestRMepId.setStatus('current')
pvxSLAThroughputTestRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 8), SlaTestRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestRole.setStatus('current')
pvxSLAThroughputTestInitiatorCmdState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 9), CommandStateType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestInitiatorCmdState.setStatus('current')
pvxSLAThroughputTestResponderOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("testInProgress", 2), ("rmepNotReady", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestResponderOpState.setStatus('current')
pvxSLAThroughputTestFrameSize1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize1.setStatus('current')
pvxSLAThroughputTestFrameSize2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize2.setStatus('current')
pvxSLAThroughputTestFrameSize3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize3.setStatus('current')
pvxSLAThroughputTestFrameSize4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize4.setStatus('current')
pvxSLAThroughputTestFrameSize5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize5.setStatus('current')
pvxSLAThroughputTestFrameSize6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize6.setStatus('current')
pvxSLAThroughputTestSrvcPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 17), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestSrvcPolicyName.setStatus('current')
pvxSLAThroughputTestClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 18), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestClassMapName.setStatus('current')
pvxSLAThroughputTestBwProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 19), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestBwProfileName.setStatus('current')
pvxSLAThroughputTestSVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestSVlanPriority.setStatus('current')
pvxSLAThroughputTestCirRateTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 21), CirTestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestCirRateTestResult.setStatus('current')
pvxSLAThroughputTestFrameSize1FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize1FarEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize1NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize1NearEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize2FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize2FarEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize2NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize2NearEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize3FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize3FarEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize3NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize3NearEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize4FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize4FarEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize4NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize4NearEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize5FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize5FarEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize5NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize5NearEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize6FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize6FarEndThroughput.setStatus('current')
pvxSLAThroughputTestFrameSize6NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize6NearEndThroughput.setStatus('current')
pvxSLAThroughputTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestRowStatus.setStatus('current')
pvxSLAMsmtInitiatorDBTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9), )
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBTable.setStatus('current')
pvxSLAMsmtInitiatorDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBESName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBRMepId"))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBEntry.setStatus('current')
pvxSLAMsmtInitiatorDBSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBSwitchIdx.setStatus('current')
pvxSLAMsmtInitiatorDBShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBShelfIdx.setStatus('current')
pvxSLAMsmtInitiatorDBSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBSlotIdx.setStatus('current')
pvxSLAMsmtInitiatorDBPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBPortTypeIdx.setStatus('current')
pvxSLAMsmtInitiatorDBPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBPortIdx.setStatus('current')
pvxSLAMsmtInitiatorDBESName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 6), DisplayString())
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBESName.setStatus('current')
pvxSLAMsmtInitiatorDBRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBRMepId.setStatus('current')
pvxSLAMsmtInitiatorDBCmdState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 8), PmTestCmdState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBCmdState.setStatus('current')
pvxSLAMsmtInitiatorDBDelayMsmtSVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBDelayMsmtSVlanPriority.setStatus('current')
pvxSLAMsmtInitiatorDBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBRowStatus.setStatus('current')
pvxSLAMsmtResponderDBTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10), )
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBTable.setStatus('current')
pvxSLAMsmtResponderDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBESName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBRMepId"))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBEntry.setStatus('current')
pvxSLAMsmtResponderDBSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBSwitchIdx.setStatus('current')
pvxSLAMsmtResponderDBShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBShelfIdx.setStatus('current')
pvxSLAMsmtResponderDBSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBSlotIdx.setStatus('current')
pvxSLAMsmtResponderDBPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBPortTypeIdx.setStatus('current')
pvxSLAMsmtResponderDBPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBPortIdx.setStatus('current')
pvxSLAMsmtResponderDBESName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 6), DisplayString())
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBESName.setStatus('current')
pvxSLAMsmtResponderDBRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBRMepId.setStatus('current')
pvxSLAMsmtResponderDBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBRowStatus.setStatus('current')
pvxSwitchCpuRLMonTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26), )
if mibBuilder.loadTexts: pvxSwitchCpuRLMonTable.setStatus('current')
pvxSwitchCpuRLMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchCpuRLMonSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchCpuRLMonShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchCpuRLMonSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchCpuRLMonCosIdx"))
if mibBuilder.loadTexts: pvxSwitchCpuRLMonEntry.setStatus('current')
pvxSwitchCpuRLMonSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSwitchCpuRLMonSwitchIdx.setStatus('current')
pvxSwitchCpuRLMonShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSwitchCpuRLMonShelfIdx.setStatus('current')
pvxSwitchCpuRLMonSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSwitchCpuRLMonSlotIdx.setStatus('current')
pvxSwitchCpuRLMonCosIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosIdx.setStatus('current')
pvxSwitchCpuRLMonCosCurrDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosCurrDepth.setStatus('current')
pvxSwitchCpuRLMonCosReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosReceived.setStatus('current')
pvxSwitchCpuRLMonCosDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosDiscards.setStatus('current')
pvxSwitchCpuRLMonCosMinDepth60Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosMinDepth60Sec.setStatus('current')
pvxSwitchCpuRLMonCosMaxDepth60Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosMaxDepth60Sec.setStatus('current')
pvxSwitchCpuRLMonCosReceived60Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosReceived60Sec.setStatus('current')
pvxSwitchCpuRLMonCosDiscards60Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosDiscards60Sec.setStatus('current')
pvxSwitchCpuRLMonCosDiscardsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosDiscardsTotal.setStatus('current')
pvxSwitchCpuRLMonCosReceivedRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosReceivedRateLimit.setStatus('current')
pvxSwitchCpuRLMonCosMaxAllowedDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosMaxAllowedDepth.setStatus('current')
pvxSwitchCpuRLMonCosHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosHighWatermark.setStatus('current')
pvxSwitchCpuRLMonCosHighWatermark60Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosHighWatermark60Sec.setStatus('current')
pvxSwitchCpuRLMonCosHighestWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosHighestWatermark.setStatus('current')
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxSrvcUNISrvcName=pvxSrvcUNISrvcName, pvxPriority6TrafficClass=pvxPriority6TrafficClass, pvxPCPEncDecSelectRow=pvxPCPEncDecSelectRow, pvxEServiceSlaCrntPM2WayDelayMaximum=pvxEServiceSlaCrntPM2WayDelayMaximum, pvxMSTPXstPortEntry=pvxMSTPXstPortEntry, pvxESrvcBWPrflCrntPMBDWUtlzInitialize=pvxESrvcBWPrflCrntPMBDWUtlzInitialize, pvxSLAMsmtResponderDBSlotIdx=pvxSLAMsmtResponderDBSlotIdx, pvxEServiceSlaCrntPM2WayDelayVariationAverageInitialize=pvxEServiceSlaCrntPM2WayDelayVariationAverageInitialize, pvxControlFrameProfileEntry=pvxControlFrameProfileEntry, pvxEServiceSlaCrntPM2WayDelayVariationMinimum=pvxEServiceSlaCrntPM2WayDelayVariationMinimum, pvxEcfmMepPortTypeId=pvxEcfmMepPortTypeId, pvxERPSPortHistPMSfPduTxTimeStamp=pvxERPSPortHistPMSfPduTxTimeStamp, pvxLagRowStatus=pvxLagRowStatus, pvxMepListRowStatus=pvxMepListRowStatus, pvxMSTPPortHistPMINVBPDURXInitialize=pvxMSTPPortHistPMINVBPDURXInitialize, pvxLAGPortCrntPMLACPDUTXTimeStamp=pvxLAGPortCrntPMLACPDUTXTimeStamp, pvxMSTPCrntPMNRBCTimeStamp=pvxMSTPCrntPMNRBCTimeStamp, pvxMSTPPortShelfIdx=pvxMSTPPortShelfIdx, pvxERPSPortHistPMEventPduTxValue=pvxERPSPortHistPMEventPduTxValue, pvxFDBTable=pvxFDBTable, pvxLagPortAggState=pvxLagPortAggState, pvxMSTPPortIdx=pvxMSTPPortIdx, pvxLGMinLinks=pvxLGMinLinks, pvxSLAThroughputTestInitiatorCmdState=pvxSLAThroughputTestInitiatorCmdState, pvxESrvcBWPrflPMThresholdSlotIdx=pvxESrvcBWPrflPMThresholdSlotIdx, pvxDynamicVlanPortVlanIdx=pvxDynamicVlanPortVlanIdx, pvxERPSPortHistPMNrrbPduRxTimeStamp=pvxERPSPortHistPMNrrbPduRxTimeStamp, pvxSwitchMemberInstIdx=pvxSwitchMemberInstIdx, pvxMSTPPortHistPMINVBPDURXValue=pvxMSTPPortHistPMINVBPDURXValue, pvxClassMapCVlanPriFilter=pvxClassMapCVlanPriFilter, pvxESrvcBWPrflHistPMOctetsVltInitialize=pvxESrvcBWPrflHistPMOctetsVltInitialize, pvxSwitchCpuRLCos6DEPTH=pvxSwitchCpuRLCos6DEPTH, pvxSLAMsmtInitiatorDBRowStatus=pvxSLAMsmtInitiatorDBRowStatus, pvxEcfmMepTransmitLtmTargetMepId=pvxEcfmMepTransmitLtmTargetMepId, pvxMSTPGenBrdgId=pvxMSTPGenBrdgId, pvxERPSSrvcNNIProtectionSwitchChangeEvent=pvxERPSSrvcNNIProtectionSwitchChangeEvent, pvxDscpClassSelector7=pvxDscpClassSelector7, pvxMSTPGenEntry=pvxMSTPGenEntry, pvxEcfmMepSlotId=pvxEcfmMepSlotId, pvxVLANRowStatus=pvxVLANRowStatus, pvxSLAMsmtResponderDBESName=pvxSLAMsmtResponderDBESName, pvxEthSrvcExceedMaxUNI=pvxEthSrvcExceedMaxUNI, pvxMSTPPortCrntPMINVBPDUCFGRXInitialize=pvxMSTPPortCrntPMINVBPDUCFGRXInitialize, pvxERPSPortCrntPMVersionDiscardTimeStamp=pvxERPSPortCrntPMVersionDiscardTimeStamp, pvxBWPCoSQueue=pvxBWPCoSQueue, pvxFloActChangePriority=pvxFloActChangePriority, pvxEcfmMepDbMacAddress=pvxEcfmMepDbMacAddress, pvxMSTPPortHistPMINVBPDURXTimeStamp=pvxMSTPPortHistPMINVBPDURXTimeStamp, pvxSLAThroughputTestEntry=pvxSLAThroughputTestEntry, pvxESrvcBWPrflHistPMOctetsTotalValidity=pvxESrvcBWPrflHistPMOctetsTotalValidity, pvxESrvcBWPrflPMThresholdPortIdx=pvxESrvcBWPrflPMThresholdPortIdx, pvxSLAThroughputTestFrameSize2=pvxSLAThroughputTestFrameSize2, pvxEcfmLtrTerminalMep=pvxEcfmLtrTerminalMep, pvxEServiceSlaCrntPM2WayDelayMaximumTimeStamp=pvxEServiceSlaCrntPM2WayDelayMaximumTimeStamp, pvxEcfmLtrRelayAction=pvxEcfmLtrRelayAction, pvxERPSSrvcSubRingWithoutVC=pvxERPSSrvcSubRingWithoutVC, pvxSwitchCpuRLCos3PPS=pvxSwitchCpuRLCos3PPS, pvxFloActSVlanValue=pvxFloActSVlanValue, pvxMSTPHistPMTCCValue=pvxMSTPHistPMTCCValue, pvxUNICurrentFrameSize=pvxUNICurrentFrameSize, pvxESrvcCrntPMEntry=pvxESrvcCrntPMEntry, pvxMSTPPortHistPMBPDUCFGRXValue=pvxMSTPPortHistPMBPDUCFGRXValue, pvxCtrlFrmProfileTable=pvxCtrlFrmProfileTable, pvxNNIPortTypeId=pvxNNIPortTypeId, pvxSrvcUNIFilterSequence=pvxSrvcUNIFilterSequence, pvxSwitchMemberBackplaneCommState=pvxSwitchMemberBackplaneCommState, pvxERPSPortCrntPMPduTxValue=pvxERPSPortCrntPMPduTxValue, pvxTMAPGmrpTunnMacAddr=pvxTMAPGmrpTunnMacAddr, pvxERPSPortCrntPMPduDiscardValidity=pvxERPSPortCrntPMPduDiscardValidity, pvxSchedProfWeightQ2=pvxSchedProfWeightQ2, pvxMSTPPortHistPMPMCTimeStamp=pvxMSTPPortHistPMPMCTimeStamp, pvxERPSPortHistPMNrrbPduRxInitialize=pvxERPSPortHistPMNrrbPduRxInitialize, pvxEcfmLtrEgressPortInfo=pvxEcfmLtrEgressPortInfo, pvxVlanPortLastBpduOriginChangeEvt=pvxVlanPortLastBpduOriginChangeEvt, pvxEcfmMepLbrIn=pvxEcfmMepLbrIn, pvxMSTPGenIdName=pvxMSTPGenIdName, pvxSwitchCpuRLCos5BURST=pvxSwitchCpuRLCos5BURST, pvxEServiceSlaHistPM2WayDelayVariationMinimumTimeStamp=pvxEServiceSlaHistPM2WayDelayVariationMinimumTimeStamp, pvxMSTPPortHistPMIntervalTypeIdx=pvxMSTPPortHistPMIntervalTypeIdx, pvxMSTPXstPortPriority=pvxMSTPXstPortPriority, PvxPhyPortList=PvxPhyPortList, pvxESrvcBWPrflHistPMPortTypeIdx=pvxESrvcBWPrflHistPMPortTypeIdx, pvxERPSPortHistPMFailuresInitialize=pvxERPSPortHistPMFailuresInitialize, pvxEServiceSlaCrntPMNearEndFrameLoss=pvxEServiceSlaCrntPMNearEndFrameLoss, pvxESrvcCrntPMUASValue=pvxESrvcCrntPMUASValue, pvxEcfmMepDbRMepPortStatusDefect=pvxEcfmMepDbRMepPortStatusDefect, pvxERPSPortHistPMMsPduRxInitialize=pvxERPSPortHistPMMsPduRxInitialize, pvxStaticMulticastTable=pvxStaticMulticastTable, pvxEthSrvcMaxUNIs=pvxEthSrvcMaxUNIs, pvxClassMapProfileName=pvxClassMapProfileName, PvxL2Port=PvxL2Port, pvxEcfmMepDbEntry=pvxEcfmMepDbEntry, pvxERPSSrvcNumRingPorts=pvxERPSSrvcNumRingPorts, pvxERPSPortCrntPMEventPduTxTimeStamp=pvxERPSPortCrntPMEventPduTxTimeStamp, pvxUNICPVid=pvxUNICPVid, pvxEcfmMipRowStatus=pvxEcfmMipRowStatus, pvxEServiceSlaCrntPMShelfIdx=pvxEServiceSlaCrntPMShelfIdx, pvxClassMapSrcMACAddrFilter=pvxClassMapSrcMACAddrFilter, pvxERPSPortHistPMEventPduRxValidity=pvxERPSPortHistPMEventPduRxValidity, pvxERPSPortCrntPMRecoveriesValidity=pvxERPSPortCrntPMRecoveriesValidity, pvxMSTPPortCrntPMShelfIdx=pvxMSTPPortCrntPMShelfIdx, pvxERPSPortHistPMNrrbPduTxTimeStamp=pvxERPSPortHistPMNrrbPduTxTimeStamp, pvxERPSPortHistPMMsPduRxValue=pvxERPSPortHistPMMsPduRxValue, pvxControlFrameProfileDot1x=pvxControlFrameProfileDot1x, pvxSwitchCpuRLMonCosMaxDepth60Sec=pvxSwitchCpuRLMonCosMaxDepth60Sec, pvxSrvcUNIForwarding=pvxSrvcUNIForwarding, pvxEthSrvcMECciEnable=pvxEthSrvcMECciEnable, pvxESrvcBWPrflCrntPMBDWUtlzTimeStamp=pvxESrvcBWPrflCrntPMBDWUtlzTimeStamp, pvxLAGPortHistPMLACPDUTXValidity=pvxLAGPortHistPMLACPDUTXValidity, pvxNNIShelfId=pvxNNIShelfId, pvxSLAMsmtInitiatorDBRMepId=pvxSLAMsmtInitiatorDBRMepId, pvxTMAPRowStatus=pvxTMAPRowStatus, pvxEcfmMepFlushRMepDb=pvxEcfmMepFlushRMepDb, pvxFMRowStatus=pvxFMRowStatus, pvxMSTPPortRegRoot=pvxMSTPPortRegRoot, pvxLAGPortHistPMMRKRSPPDURXValue=pvxLAGPortHistPMMRKRSPPDURXValue, pvxEServiceSlaCrntPM2WayDelayMaximumValidity=pvxEServiceSlaCrntPM2WayDelayMaximumValidity, pvxMSTPXstEntry=pvxMSTPXstEntry, pvxMSTPPortHistPMBPDUCFGTXTimeStamp=pvxMSTPPortHistPMBPDUCFGTXTimeStamp, pvxESrvcBWPrflCrntPMIntervalTypeIdx=pvxESrvcBWPrflCrntPMIntervalTypeIdx, pvxSchedProfWeightQ3=pvxSchedProfWeightQ3, pvxEcfmLtrIngressAction=pvxEcfmLtrIngressAction, pvxPCPEncPriority0=pvxPCPEncPriority0, pvxERPSSrvcPeriodicTimer=pvxERPSSrvcPeriodicTimer, pvxDscpAssuredFwd1y=pvxDscpAssuredFwd1y, pvxMSTPPortCrntPMINVBPDUCFGRXTimeStamp=pvxMSTPPortCrntPMINVBPDUCFGRXTimeStamp, pvxSwitchCpuRLCos7BURST=pvxSwitchCpuRLCos7BURST, pvxBandwidthProfileRowStatus=pvxBandwidthProfileRowStatus, pvxSrvcUNIPortTypeId=pvxSrvcUNIPortTypeId, pvxEServiceSlaHistPMSlotIdx=pvxEServiceSlaHistPMSlotIdx, pvxSchedProfWeightQ6=pvxSchedProfWeightQ6, pvxSchedProfMaxBwQ0=pvxSchedProfMaxBwQ0, pvxERPSPortCrntPMFailuresTimeStamp=pvxERPSPortCrntPMFailuresTimeStamp, pvxEthSrvcTransportType=pvxEthSrvcTransportType, pvxMSTPHistPMNRBCValue=pvxMSTPHistPMNRBCValue, pvxERPSPortHistPMNrrbPduTxInitialize=pvxERPSPortHistPMNrrbPduTxInitialize, pvxMepListTable=pvxMepListTable, pvxFMPRowStatus=pvxFMPRowStatus, pvxPCPEncPriority4=pvxPCPEncPriority4, pvxPCPEncPriority7DE=pvxPCPEncPriority7DE, pvxMSTPXstSwitchIdx=pvxMSTPXstSwitchIdx, pvxSLAThroughputTestSrvcPolicyName=pvxSLAThroughputTestSrvcPolicyName, pvxMgmtVLANCVLANId=pvxMgmtVLANCVLANId, pvxEcfmMepShelfId=pvxEcfmMepShelfId, pvxEcfmMepDirection=pvxEcfmMepDirection, pvxERPSPortCrntPMSfPduRxValue=pvxERPSPortCrntPMSfPduRxValue, pvxMSTPPortHistPMIntervalIdx=pvxMSTPPortHistPMIntervalIdx, pvxNNIPortId=pvxNNIPortId, pvxERPSPortHistPMPortIdx=pvxERPSPortHistPMPortIdx, pvxSLAThroughputTestPortIdx=pvxSLAThroughputTestPortIdx, pvxNNIMode=pvxNNIMode, pvxLagPortTimeout=pvxLagPortTimeout, pvxERPSSrvcVersionMismatchCond=pvxERPSSrvcVersionMismatchCond, pvxCPMinBandwidth=pvxCPMinBandwidth, pvxSrvcUNIIngressBW=pvxSrvcUNIIngressBW, pvxNextFreeIndexEntry=pvxNextFreeIndexEntry, pvxCPWeight=pvxCPWeight, pvxClassMapSVlanPriFilter=pvxClassMapSVlanPriFilter, pvxMSTPPortCrntPMBPDUCFGRXValue=pvxMSTPPortCrntPMBPDUCFGRXValue, pvxFlowStatsTable=pvxFlowStatsTable, pvxERPSPortHistPMPduDiscardValue=pvxERPSPortHistPMPduDiscardValue, lagLinkDownCond=lagLinkDownCond, pvxEServiceSlaHistPMFarEndFrameLoss=pvxEServiceSlaHistPMFarEndFrameLoss, pvxPCPEncDecRowStatus=pvxPCPEncDecRowStatus, pvxESrvcBWPrflHistPMClsMapNameIdx=pvxESrvcBWPrflHistPMClsMapNameIdx, pvxLagPortGroupId=pvxLagPortGroupId, pvxLAGPortHistPMLACPDURXValidity=pvxLAGPortHistPMLACPDURXValidity, pvxERPSPortHistPMSfPduTxValue=pvxERPSPortHistPMSfPduTxValue, pvxSwitchCpuRLMonCosReceived=pvxSwitchCpuRLMonCosReceived, pvxERPSPortHistPMFsPduRxTimeStamp=pvxERPSPortHistPMFsPduRxTimeStamp, pvxEServiceSlaHistPMESName=pvxEServiceSlaHistPMESName, pvxVlanPortShelfIdx=pvxVlanPortShelfIdx, pvxPriority7TrafficClass=pvxPriority7TrafficClass, pvxVlanPortTable=pvxVlanPortTable, pvxVLANUnTaggedPortList=pvxVLANUnTaggedPortList, pvxSwitchCpuRLMonCosIdx=pvxSwitchCpuRLMonCosIdx, pvxESrvcCrntPMIntervalTypeIdx=pvxESrvcCrntPMIntervalTypeIdx, lagLinkDownClear=lagLinkDownClear, pvxSwitchCpuRLCos1DEPTH=pvxSwitchCpuRLCos1DEPTH, PvxEcfmConfigErrors=PvxEcfmConfigErrors, pvxEcfmMepTransmitLbmResultOK=pvxEcfmMepTransmitLbmResultOK, pvxFloClStatus=pvxFloClStatus, pvxEServiceSlaHistPM2WayDelayVariationMaximum=pvxEServiceSlaHistPM2WayDelayVariationMaximum, pvxLagPortShelfIdx=pvxLagPortShelfIdx, pvxLagSystemIdentifier=pvxLagSystemIdentifier, pvxSwitchCpuRLCos3BURST=pvxSwitchCpuRLCos3BURST, pvxMSTPCrntPMTCCTimeStamp=pvxMSTPCrntPMTCCTimeStamp, pvxERPSPortCrntPMSfPduRxValidity=pvxERPSPortCrntPMSfPduRxValidity, pvxESrvcBWPrflCrntPMOctetsTotalTimeStamp=pvxESrvcBWPrflCrntPMOctetsTotalTimeStamp, pvxMSTPHistPMNRBCInitialize=pvxMSTPHistPMNRBCInitialize, pvxMgmtVLANIpAddress=pvxMgmtVLANIpAddress, pvxLGDataRate=pvxLGDataRate, pvxLGPortList=pvxLGPortList, pvxFlowMeterEntry=pvxFlowMeterEntry, pvxSLAMsmtResponderDBPortIdx=pvxSLAMsmtResponderDBPortIdx, pvxEServiceSlaHistPM2WayDelayMinimumValidity=pvxEServiceSlaHistPM2WayDelayMinimumValidity, pvxSwitchCpuRLCos0DEPTH=pvxSwitchCpuRLCos0DEPTH, pvxBWMeterMode=pvxBWMeterMode, PvxESrvcBWPrflPMThresholdLevelType=PvxESrvcBWPrflPMThresholdLevelType, pvxERPSPortCrntPMPduDiscardTimeStamp=pvxERPSPortCrntPMPduDiscardTimeStamp, pvxPCPEncPriority1DE=pvxPCPEncPriority1DE, pvxSwitchStackingTimeAsPrimary=pvxSwitchStackingTimeAsPrimary, pvxMSTPPortHistPMBPDUTCNTXValue=pvxMSTPPortHistPMBPDUTCNTXValue, pvxSwitchCpuRLMonCosDiscards60Sec=pvxSwitchCpuRLMonCosDiscards60Sec, mstpPacketErrValue=mstpPacketErrValue, pvxMSTPPortHistPMBPDUCFGTXValidity=pvxMSTPPortHistPMBPDUCFGTXValidity, pvxMSTPMapTable=pvxMSTPMapTable, pvxSLAMeasurementProfileEntry=pvxSLAMeasurementProfileEntry, pvxPCPDecPriority3=pvxPCPDecPriority3, pvxERPSPortCrntPMNrrbPduRxTimeStamp=pvxERPSPortCrntPMNrrbPduRxTimeStamp, pvxEServiceSlaCrntPM2WayDelayVariationMinimumTimeStamp=pvxEServiceSlaCrntPM2WayDelayVariationMinimumTimeStamp, pvxESrvcBWPrflPMThresholdLevelTypeIdx=pvxESrvcBWPrflPMThresholdLevelTypeIdx, pvxERPSPortHistPMPduTxTimeStamp=pvxERPSPortHistPMPduTxTimeStamp, pvxDscpPHBProfileName=pvxDscpPHBProfileName, pvxSLAThroughputTestFrameSize2FarEndThroughput=pvxSLAThroughputTestFrameSize2FarEndThroughput, pvxMSTPHistPMRCCCInitialize=pvxMSTPHistPMRCCCInitialize, pvxSwitchCpuRLCos1PPS=pvxSwitchCpuRLCos1PPS, pvxFloActYellowAction=pvxFloActYellowAction, pvxEcfmMepTransmitLbmStatus=pvxEcfmMepTransmitLbmStatus, pvxSLAMsmtProfileName=pvxSLAMsmtProfileName, pvxLagPortPriority=pvxLagPortPriority, pvxESrvcBWPrflHistPMPlcyNameIdx=pvxESrvcBWPrflHistPMPlcyNameIdx, pvxERPSSrvcWaitToRestoreTimer=pvxERPSSrvcWaitToRestoreTimer, pvxStaticMulticastEntry=pvxStaticMulticastEntry, pvxMSTPPortCrntPMBPDUTCNRXInitialize=pvxMSTPPortCrntPMBPDUTCNRXInitialize, pvxEcfmMipActiveState=pvxEcfmMipActiveState, pvxMSTPPortHistPMBPDURXValue=pvxMSTPPortHistPMBPDURXValue, pvxERPSPortCrntPMMsPduTxValue=pvxERPSPortCrntPMMsPduTxValue, pvxLAGPortCrntPMIdx=pvxLAGPortCrntPMIdx, pvxStaticUnicastEntry=pvxStaticUnicastEntry, pvxEcfmMepTransmitLtmResultOK=pvxEcfmMepTransmitLtmResultOK, pvxMSTPPortCrntPMIntervalTypeIdx=pvxMSTPPortCrntPMIntervalTypeIdx, pvxClassMapSrcIpNetMaskFilter=pvxClassMapSrcIpNetMaskFilter, pvxSwitchTimeToAge=pvxSwitchTimeToAge, pvxERPSPortHistPMSfPduRxTimeStamp=pvxERPSPortHistPMSfPduRxTimeStamp, pvxFSSwitchIdx=pvxFSSwitchIdx, pvxLAGPortCrntPMMRKPDUTXTimeStamp=pvxLAGPortCrntPMMRKPDUTXTimeStamp, pvxBWExceedActionSetDEI=pvxBWExceedActionSetDEI, pvxMSTPPortCrntPMBPDURXValidity=pvxMSTPPortCrntPMBPDURXValidity, pvxERPSPortHistPMIntervalTypeIdx=pvxERPSPortHistPMIntervalTypeIdx, pvxFlowActionsEntry=pvxFlowActionsEntry, pvxSLAMsmtResponderDBEntry=pvxSLAMsmtResponderDBEntry, pvxSwitchMemberIdx=pvxSwitchMemberIdx, pvxMSTPXstPortSwitchIdx=pvxMSTPXstPortSwitchIdx, pvxSwitchCpuRLMonCosHighWatermark=pvxSwitchCpuRLMonCosHighWatermark, pvxVlanPortEthPortAllowedFrametType=pvxVlanPortEthPortAllowedFrametType, pvxEServiceSlaCrntPMTable=pvxEServiceSlaCrntPMTable, pvxMepListESrvcVlanId=pvxMepListESrvcVlanId, pvxESrvcBWPrflHistPMIntervalTypeIdx=pvxESrvcBWPrflHistPMIntervalTypeIdx, pvxSwitchEvcMEGName=pvxSwitchEvcMEGName, pvxLGSwitchIdx=pvxLGSwitchIdx, pvxERPSPortCrntPMSwitchIdx=pvxERPSPortCrntPMSwitchIdx, pvxESrvcBWPrflCrntPMOctetsTotalInitialize=pvxESrvcBWPrflCrntPMOctetsTotalInitialize, pvxFloClCVlanFilter=pvxFloClCVlanFilter)
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxStaticMCSwitchIdx=pvxStaticMCSwitchIdx, pvxMgmtVLANSwitchIdx=pvxMgmtVLANSwitchIdx, pvxERPSPortHistPMNrrbPduTxValue=pvxERPSPortHistPMNrrbPduTxValue, cfmRMepStateChangeEvtNotifications=cfmRMepStateChangeEvtNotifications, pvxLGActivePortCount=pvxLGActivePortCount, pvxSwitchCpuRLCos5DEPTH=pvxSwitchCpuRLCos5DEPTH, pvxUNIEntry=pvxUNIEntry, pvxSwitchMIPAutoCreateMEL=pvxSwitchMIPAutoCreateMEL, mstpProtocolGeneralEvt=mstpProtocolGeneralEvt, pvxStackingPortRowStatus=pvxStackingPortRowStatus, pvxStaticMCAddressType=pvxStaticMCAddressType, pvxMSTPGenCistRoot=pvxMSTPGenCistRoot, pvxERPSSrvcNNIMEName=pvxERPSSrvcNNIMEName, pvxY1731LbmTransId=pvxY1731LbmTransId, pvxFloActCVlanValue=pvxFloActCVlanValue, pvxERPSPortCrntPMMsPduTxInitialize=pvxERPSPortCrntPMMsPduTxInitialize, pvxEcfmMepDbSwitchIdx=pvxEcfmMepDbSwitchIdx, pvxMSTPGenCistRootCost=pvxMSTPGenCistRootCost, pvxMSTPPortHistPMPMCValidity=pvxMSTPPortHistPMPMCValidity, pvxESrvcBWPrflHistPMDirectionIdx=pvxESrvcBWPrflHistPMDirectionIdx, pvxERPSPortCrntPMPduTxTimeStamp=pvxERPSPortCrntPMPduTxTimeStamp, mstpProtocolMigrationEvt=mstpProtocolMigrationEvt, pvxEServiceSlaCrntPM2WayDelayVariationAverageTimeStamp=pvxEServiceSlaCrntPM2WayDelayVariationAverageTimeStamp, pvxLAGPortCrntPMMRKRSPPDURXTimeStamp=pvxLAGPortCrntPMMRKRSPPDURXTimeStamp, pvxERPSPortCrntPMBlockedValue=pvxERPSPortCrntPMBlockedValue, pvxPolicyMapProfileTable=pvxPolicyMapProfileTable, pvxFSwitchIdx=pvxFSwitchIdx, pvxEServiceSlaCrntPMRMepId=pvxEServiceSlaCrntPMRMepId, pvxVlanPortGvrpAdminState=pvxVlanPortGvrpAdminState, pvxFSOutOfProfilePackets=pvxFSOutOfProfilePackets, pvxMSTPPortHistPMBPDUTCNTXValidity=pvxMSTPPortHistPMBPDUTCNTXValidity, pvxERPSPortCrntPMVersionDiscardValidity=pvxERPSPortCrntPMVersionDiscardValidity, pvxMSTPXstPortRole=pvxMSTPXstPortRole, pvxEServiceSlaHistPMNearEndFrameLossValidity=pvxEServiceSlaHistPMNearEndFrameLossValidity, pvxPriority2TrafficClass=pvxPriority2TrafficClass, pvxNNIRowStatus=pvxNNIRowStatus, pvxPriorityTCMapName=pvxPriorityTCMapName, pvxSLAMsmtResponderDBPortTypeIdx=pvxSLAMsmtResponderDBPortTypeIdx, pvxMSTPPortCrntPMINVBPDUCFGRXValue=pvxMSTPPortCrntPMINVBPDUCFGRXValue, pvxControlFrameProfileLacp=pvxControlFrameProfileLacp, pvxStaticMCRowStatus=pvxStaticMCRowStatus, pvxERPSPortHistPMPduTxValidity=pvxERPSPortHistPMPduTxValidity, pvxFloActMirrorToInterfaceIndex=pvxFloActMirrorToInterfaceIndex, pvxERPSPortHistPMEventPduRxInitialize=pvxERPSPortHistPMEventPduRxInitialize, pvxERPSSrvcRingSemState=pvxERPSSrvcRingSemState, pvxESrvcBWPrflCrntPMOctetsVltValue=pvxESrvcBWPrflCrntPMOctetsVltValue, pvxERPSPortHistPMEntry=pvxERPSPortHistPMEntry, pvxERPSSrvcNNIShelfId=pvxERPSSrvcNNIShelfId, pvxEServiceSlaCrntPMFarEndFrameLossValidity=pvxEServiceSlaCrntPMFarEndFrameLossValidity, pvxSvidXlateTable=pvxSvidXlateTable, pvxLagState=pvxLagState, pvxEServiceSlaHistPM2WayDelayAverage=pvxEServiceSlaHistPM2WayDelayAverage, pvxESrvcHistPMSwitchIdx=pvxESrvcHistPMSwitchIdx, pvxVlanCurrentVlanIdx=pvxVlanCurrentVlanIdx, PvxPhyPort=PvxPhyPort, pvxSwitchStackingPrimary=pvxSwitchStackingPrimary, pvxERPSPortHistPMMsPduTxValidity=pvxERPSPortHistPMMsPduTxValidity, pvxEServiceSlaCrntPMSwitchIdx=pvxEServiceSlaCrntPMSwitchIdx, pvxSvidXlatePortId=pvxSvidXlatePortId, pvxMSTPXstPortTypeIdx=pvxMSTPXstPortTypeIdx, pvxSvidXlateInternalSVid=pvxSvidXlateInternalSVid, pvxY1731LbStatsAvgLbrsPerResponder=pvxY1731LbStatsAvgLbrsPerResponder, pvxESrvcCrntPMTable=pvxESrvcCrntPMTable, pvxClassMapDstMACMaskFilter=pvxClassMapDstMACMaskFilter, pvxClassMapType=pvxClassMapType, pvxMSTPPortCrntPMXstIdx=pvxMSTPPortCrntPMXstIdx, pvxBWSetInternalPriority=pvxBWSetInternalPriority, pvxSwitchCpuRLCos7PPS=pvxSwitchCpuRLCos7PPS, pvxMSTPPortCrntPMBPDUCFGTXTimeStamp=pvxMSTPPortCrntPMBPDUCFGTXTimeStamp, pvxLAGPortCrntPMMRKRSPPDUTXInitialize=pvxLAGPortCrntPMMRKRSPPDUTXInitialize, pvxEcfmMipPortTypeId=pvxEcfmMipPortTypeId, pvxMSTPPortDesignatedPort=pvxMSTPPortDesignatedPort, pvxMSTPXstPortIdx=pvxMSTPXstPortIdx, pvxFloClSourceMacFilter=pvxFloClSourceMacFilter, pvxSLAMsmtResponderDBRowStatus=pvxSLAMsmtResponderDBRowStatus, pvxBWMeterCbs=pvxBWMeterCbs, pvxSwitchCpuRLMonCosCurrDepth=pvxSwitchCpuRLMonCosCurrDepth, pvxMSTPPortHistPMBPDUTCNRXValue=pvxMSTPPortHistPMBPDUTCNRXValue, pvxSLAThroughputTestFrameSize5NearEndThroughput=pvxSLAThroughputTestFrameSize5NearEndThroughput, pvxLAGPortHistPMLACPDURXInitialize=pvxLAGPortHistPMLACPDURXInitialize, pvxPCPEncDecProfileTable=pvxPCPEncDecProfileTable, pvxEcfmMepDbRMepState=pvxEcfmMepDbRMepState, pvxESrvcBWPrflHistPMOctetsVltValue=pvxESrvcBWPrflHistPMOctetsVltValue, pvxSLAThroughputTestRowStatus=pvxSLAThroughputTestRowStatus, pvxTMAPDot1xTunnMacAddr=pvxTMAPDot1xTunnMacAddr, pvxESrvcBWPrflHistPMOctetsTotalValue=pvxESrvcBWPrflHistPMOctetsTotalValue, pvxEServiceSlaCrntPMNearEndFrameLossValidity=pvxEServiceSlaCrntPMNearEndFrameLossValidity, pvxEcfmMepAutoGenerateFlag=pvxEcfmMepAutoGenerateFlag, pvxNNIMaxFrameSize=pvxNNIMaxFrameSize, pvxMSTPPortCrntPMBPDUCFGTXValue=pvxMSTPPortCrntPMBPDUCFGTXValue, pvxLAGPortHistPMEntry=pvxLAGPortHistPMEntry, pvxMSTPPortCrntPMFWDTRTimeStamp=pvxMSTPPortCrntPMFWDTRTimeStamp, pvxSwitchCpuRLMonCosHighWatermark60Sec=pvxSwitchCpuRLMonCosHighWatermark60Sec, pvxMCMACAddrIdx=pvxMCMACAddrIdx, pvxMSTPPortHistPMBPDUTXTimeStamp=pvxMSTPPortHistPMBPDUTXTimeStamp, pvxSLAThroughputTestCirRateTestResult=pvxSLAThroughputTestCirRateTestResult, pvxERPSPortCrntPMNrPduTxValidity=pvxERPSPortCrntPMNrPduTxValidity, pvxEcfmMepDbRMepSwitchName=pvxEcfmMepDbRMepSwitchName, pvxSwitchIntfBouncingTimerPeriod=pvxSwitchIntfBouncingTimerPeriod, pvxEcfmLtrIngressPortInfo=pvxEcfmLtrIngressPortInfo, pvxMSTPPortHistPMBPDUTXValidity=pvxMSTPPortHistPMBPDUTXValidity, pvxMepListSwitchIdx=pvxMepListSwitchIdx, pvxPriority4TrafficClass=pvxPriority4TrafficClass, pvxCPQueueAlgo=pvxCPQueueAlgo, pvxERPSPortHistPMPduRxInitialize=pvxERPSPortHistPMPduRxInitialize, pvxERPSPortHistPMRecoveriesTimeStamp=pvxERPSPortHistPMRecoveriesTimeStamp, pvxEcfmLtrTtl=pvxEcfmLtrTtl, pvxServiceUNIEntry=pvxServiceUNIEntry, pvxERPSSrvcSVLAN=pvxERPSSrvcSVLAN, pvxEcfmMipESrvcName=pvxEcfmMipESrvcName, pvxERPSPortHistPMMsPduTxInitialize=pvxERPSPortHistPMMsPduTxInitialize, PvxVLANPortList=PvxVLANPortList, pvxEcfmLtrEgressAction=pvxEcfmLtrEgressAction, pvxPCVRTMapOperStatus=pvxPCVRTMapOperStatus, pvxEcfmMipPortId=pvxEcfmMipPortId, pvxEServiceSlaHistPM2WayDelayAverageTimeStamp=pvxEServiceSlaHistPM2WayDelayAverageTimeStamp, pvxLAGPortCrntPMEntry=pvxLAGPortCrntPMEntry, pvxDscpExpeditedFwd=pvxDscpExpeditedFwd, pvxLAGPortCrntPMINVLACFRRXValue=pvxLAGPortCrntPMINVLACFRRXValue, pvxERPSPortCrntPMMsPduRxValidity=pvxERPSPortCrntPMMsPduRxValidity, pvxMSTPPortCrntPMBPDUTXInitialize=pvxMSTPPortCrntPMBPDUTXInitialize, pvxERPSServiceEntry=pvxERPSServiceEntry, pvxTMAPGvrpTunnMacAddr=pvxTMAPGvrpTunnMacAddr, pvxEServiceSlaCrntPMNearEndFrameLossInitialize=pvxEServiceSlaCrntPMNearEndFrameLossInitialize, pvxESrvcBWPrflPMThresholdClsMapNameIdx=pvxESrvcBWPrflPMThresholdClsMapNameIdx, pvxERPSPortCrntPMFsPduTxValue=pvxERPSPortCrntPMFsPduTxValue, pvxSvidXlateSwitchId=pvxSvidXlateSwitchId, pvxEcfmLtrVlanId=pvxEcfmLtrVlanId, pvxMSTPPortLinkType=pvxMSTPPortLinkType, pvxEcfmMepTransmitLtmTtl=pvxEcfmMepTransmitLtmTtl, pvxERPSSrvcNNIProtectionSwitch=pvxERPSSrvcNNIProtectionSwitch, pvxMSTPPortCrntPMINVBPDUTCNRXValidity=pvxMSTPPortCrntPMINVBPDUTCNRXValidity, pvxEServiceSlaHistPM2WayDelayMaximumTimeStamp=pvxEServiceSlaHistPM2WayDelayMaximumTimeStamp, PvxEcfmRemoteMepState=PvxEcfmRemoteMepState, pvxClassMapSrcIpFilter=pvxClassMapSrcIpFilter, pvxSrvcNNISwitchId=pvxSrvcNNISwitchId, pvxEthSrvcMaxNNIs=pvxEthSrvcMaxNNIs, pvxMSTPMapVlanS4k=pvxMSTPMapVlanS4k, pvxLagPortActAdminState=pvxLagPortActAdminState, pvxSrvcUNINumCVids=pvxSrvcUNINumCVids, pvxMSTPCrntPMXstIdx=pvxMSTPCrntPMXstIdx, pvxDscpClassSelector5=pvxDscpClassSelector5, pvxMSTPCrntPMTCCValidity=pvxMSTPCrntPMTCCValidity, pvxStaticMCVlanIdx=pvxStaticMCVlanIdx, pvxSwitchCpuRLMonCosMinDepth60Sec=pvxSwitchCpuRLMonCosMinDepth60Sec, pvxFCoSName=pvxFCoSName, pvxSvidXlateExternalSVid=pvxSvidXlateExternalSVid, pvxSLAThroughputTestBwProfileName=pvxSLAThroughputTestBwProfileName, pvxSrvcUNISwitchId=pvxSrvcUNISwitchId, pvxERPSSrvcName=pvxERPSSrvcName, pvxERPSPortCrntPMRecoveriesInitialize=pvxERPSPortCrntPMRecoveriesInitialize, pvxSwitchMode=pvxSwitchMode, pvxVLANSwitchIdx=pvxVLANSwitchIdx, pvxEServiceSlaHistPM2WayDelayMinimumTimeStamp=pvxEServiceSlaHistPM2WayDelayMinimumTimeStamp, PvxMSTPVlanList=PvxMSTPVlanList, pvxLAGPortHistPMMRKPDUTXTimeStamp=pvxLAGPortHistPMMRKPDUTXTimeStamp, pvxPCPDecPriority5=pvxPCPDecPriority5, pvxSchedProfMTUQuanta=pvxSchedProfMTUQuanta, pvxERPSPortHistPMPduDiscardTimeStamp=pvxERPSPortHistPMPduDiscardTimeStamp, pvxMSTPPortHistPMIdx=pvxMSTPPortHistPMIdx, pvxLGDistribution=pvxLGDistribution, pvxSchedProfWeightQ0=pvxSchedProfWeightQ0, pvxSwitchProtocolAdminState=pvxSwitchProtocolAdminState, pvxERPSPortCrntPMPduDiscardInitialize=pvxERPSPortCrntPMPduDiscardInitialize, pvxEServiceSlaCrntPM2WayDelayVariationMaximumValidity=pvxEServiceSlaCrntPM2WayDelayVariationMaximumValidity, pvxSchedProfWeightQ4=pvxSchedProfWeightQ4, pvxEServiceSlaCrntPM2WayDelayVariationMinimumInitialize=pvxEServiceSlaCrntPM2WayDelayVariationMinimumInitialize, pvxMSTPPortCrntPMTypeIdx=pvxMSTPPortCrntPMTypeIdx, mstpRoleChangeEvt=mstpRoleChangeEvt, pvxERPSPortHistPMVersionDiscardValue=pvxERPSPortHistPMVersionDiscardValue, pvxSchedProfWeightQ5=pvxSchedProfWeightQ5, pvxClassMapSVlanFilter=pvxClassMapSVlanFilter, PvxPCPDecodingList=PvxPCPDecodingList, PvxL2PortList=PvxL2PortList, pvxMSTPXstRootPortSlot=pvxMSTPXstRootPortSlot, pvxPCPDecPriority4=pvxPCPDecPriority4, pvxMSTPPortCrntPMEntry=pvxMSTPPortCrntPMEntry, pvxESrvcCrntPMUASValidity=pvxESrvcCrntPMUASValidity, pvxMSTPCrntPMTCCInitialize=pvxMSTPCrntPMTCCInitialize, pvxSLAThroughputTestSVlanPriority=pvxSLAThroughputTestSVlanPriority, pvxERPSPortHistPMNrPduTxInitialize=pvxERPSPortHistPMNrPduTxInitialize, pvxMSTPHistPMIntervalIdx=pvxMSTPHistPMIntervalIdx, pvxERPSPortHistPMUnblockedTimeStamp=pvxERPSPortHistPMUnblockedTimeStamp, pvxLagPortIdx=pvxLagPortIdx, pvxPriority5TrafficClass=pvxPriority5TrafficClass, pvxClassMapMatchType=pvxClassMapMatchType, pvxNextFreeIndexSwitchIdx=pvxNextFreeIndexSwitchIdx, pvxEthSrvcName=pvxEthSrvcName, pvxServiceNNITable=pvxServiceNNITable, pvxESrvcHistPMUASValue=pvxESrvcHistPMUASValue, pvxEServiceSlaHistPMIntervalTypeIdx=pvxEServiceSlaHistPMIntervalTypeIdx, pvxESrvcCrntPMUASTimeStamp=pvxESrvcCrntPMUASTimeStamp, pvxLGAdminStatus=pvxLGAdminStatus, pvxSLAThroughputTestRMepId=pvxSLAThroughputTestRMepId, pvxMSTPHistPMRCCCTimeStamp=pvxMSTPHistPMRCCCTimeStamp, pvxERPSPortCrntPMTypeIdx=pvxERPSPortCrntPMTypeIdx, pvxMSTPPortCrntPMINVBPDUTCNRXValue=pvxMSTPPortCrntPMINVBPDUTCNRXValue, pvxTMAPLldpTunnMacAddr=pvxTMAPLldpTunnMacAddr, pvxSwitchCpuRLCos0BURST=pvxSwitchCpuRLCos0BURST, pvxTunnelMacAddrProfileEntry=pvxTunnelMacAddrProfileEntry, PvxQoSPmCounterMode=PvxQoSPmCounterMode, pvxERPSPortHistPMVersionDiscardInitialize=pvxERPSPortHistPMVersionDiscardInitialize, pvxSLAThroughputTestFrameSize4NearEndThroughput=pvxSLAThroughputTestFrameSize4NearEndThroughput, pvxESrvcCrntPMESrvcNameIdx=pvxESrvcCrntPMESrvcNameIdx, pvxLAGPortCrntPMINVLACFRRXValidity=pvxLAGPortCrntPMINVLACFRRXValidity, pvxSrvcUNIRowStatus=pvxSrvcUNIRowStatus, pvxFlowMeterProfileTable=pvxFlowMeterProfileTable, pvxERPSSrvcNNIFlushRemoteMEP=pvxERPSSrvcNNIFlushRemoteMEP, pvxEthSrvcState=pvxEthSrvcState, pvxFSCountOfClassifiedPackets=pvxFSCountOfClassifiedPackets, pvxERPSSrvcWaitToBlockTimer=pvxERPSSrvcWaitToBlockTimer, pvxEServiceSlaHistPMNearEndFrameLoss=pvxEServiceSlaHistPMNearEndFrameLoss, pvxVlanCurrentTimeMark=pvxVlanCurrentTimeMark, pvxESrvcBWPrflPMThresholdPortTypeIdx=pvxESrvcBWPrflPMThresholdPortTypeIdx, pvxFMPBWProfileId=pvxFMPBWProfileId, pvxERPSSrvcVirtualLink=pvxERPSSrvcVirtualLink, pvxLagPortSlotIdx=pvxLagPortSlotIdx, pvxLAGPortCrntPMLACPDUTXValue=pvxLAGPortCrntPMLACPDUTXValue, pvxVlanCurrentSwitchIdx=pvxVlanCurrentSwitchIdx, pvxSwitchForceSwitch=pvxSwitchForceSwitch, pvxPCPEncPriority3DE=pvxPCPEncPriority3DE, pvxERPSPortCrntPMNrPduTxValue=pvxERPSPortCrntPMNrPduTxValue, pvxLAGPortHistPMMRKPDURXValue=pvxLAGPortHistPMMRKPDURXValue, pvxY1731LbStatsLbrIn=pvxY1731LbStatsLbrIn, pvxPCPEncPriority6DE=pvxPCPEncPriority6DE, pvxMSTPCrntPMSwitchIdx=pvxMSTPCrntPMSwitchIdx, pvxEServiceSlaCrntPM2WayDelayVariationMaximum=pvxEServiceSlaCrntPM2WayDelayVariationMaximum, pvxEcfmService=pvxEcfmService, pvxERPSPortCrntPMTable=pvxERPSPortCrntPMTable, pvxFloActGreenCNGAction=pvxFloActGreenCNGAction, pvxVlanCurrentEntry=pvxVlanCurrentEntry, pvxEServiceSlaCrntPMFarEndFrameLossInitialize=pvxEServiceSlaCrntPMFarEndFrameLossInitialize, pvxLAGPortHistPMMRKPDURXInitialize=pvxLAGPortHistPMMRKPDURXInitialize, pvxESrvcBWPrflCrntPMOctetsCnfExcInitialize=pvxESrvcBWPrflCrntPMOctetsCnfExcInitialize, pvxEcfmMepDbRMepPortInfo=pvxEcfmMepDbRMepPortInfo, pvxLagGroupTable=pvxLagGroupTable, pvxSchedProfMinBwQ7=pvxSchedProfMinBwQ7, pvxEcfmMepDbTable=pvxEcfmMepDbTable, pvxEServiceSlaHistPM2WayDelayVariationAverageTimeStamp=pvxEServiceSlaHistPM2WayDelayVariationAverageTimeStamp, pvxMSTPPortHistPMBPDUTXValue=pvxMSTPPortHistPMBPDUTXValue, pvxERPSSrvcConfigFailEvent=pvxERPSSrvcConfigFailEvent, pvxSrvcUNIUserDefinedMepId=pvxSrvcUNIUserDefinedMepId, pvxESrvcBWPrflCrntPMOctetsVltTimeStamp=pvxESrvcBWPrflCrntPMOctetsVltTimeStamp, pvxBWPEbs=pvxBWPEbs, pvxMSTPPortCrntPMBPDURXValue=pvxMSTPPortCrntPMBPDURXValue, pvxControlFrameProfileGvrp=pvxControlFrameProfileGvrp, pvxMSTPPortHistPMBPDURXValidity=pvxMSTPPortHistPMBPDURXValidity, pvxNNITable=pvxNNITable, pvxControlFrameProfileGmrp=pvxControlFrameProfileGmrp, pvxEServiceSlaCrntPM2WayDelayMaximumInitialize=pvxEServiceSlaCrntPM2WayDelayMaximumInitialize, pvxVlanPortAddDynamicVlanEvtNotifications=pvxVlanPortAddDynamicVlanEvtNotifications, pvxFloActRowStatus=pvxFloActRowStatus, pvxClassMapDstIpNetMaskFilter=pvxClassMapDstIpNetMaskFilter, pvxEServiceSlaHistPMShelfIdx=pvxEServiceSlaHistPMShelfIdx)
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxESrvcBWPrflHistPMBDWUtlzValidity=pvxESrvcBWPrflHistPMBDWUtlzValidity, pvxEcfmMepY1731DefectConditions=pvxEcfmMepY1731DefectConditions, pvxSLAMsmtThresholdDelayVarAverage=pvxSLAMsmtThresholdDelayVarAverage, pvxERPSPortCrntPMSfPduTxValue=pvxERPSPortCrntPMSfPduTxValue, pvxERPSSrvcRingProperty=pvxERPSSrvcRingProperty, pvxCPMaxBandwidth=pvxCPMaxBandwidth, pvxERPSSrvcNNISrvcName=pvxERPSSrvcNNISrvcName, pvxMSTPXstPortPathCost=pvxMSTPXstPortPathCost, pvxERPSSrvcNNIRingPortId=pvxERPSSrvcNNIRingPortId, pvxESrvcBWPrflCrntPMTable=pvxESrvcBWPrflCrntPMTable, pvxMSTPPortHistPMBPDUTXInitialize=pvxMSTPPortHistPMBPDUTXInitialize, pvxVLANTable=pvxVLANTable, pvxSchedProfAlgorithm=pvxSchedProfAlgorithm, PvxEcfmTransmitStatus=PvxEcfmTransmitStatus, pvxEcfmMepLbrInOutOfOrder=pvxEcfmMepLbrInOutOfOrder, pvxEcfmMepIdentifier=pvxEcfmMepIdentifier, pvxERPSPortCrntPMIntervalTypeIdx=pvxERPSPortCrntPMIntervalTypeIdx, pvxMSTPPortRole=pvxMSTPPortRole, pvxMSTPXstBrdgPriority=pvxMSTPXstBrdgPriority, pvxLagPortTable=pvxLagPortTable, pvxMSTPPortHistPMBPDUTCNTXInitialize=pvxMSTPPortHistPMBPDUTCNTXInitialize, pvxESrvcCrntPMUASInitialize=pvxESrvcCrntPMUASInitialize, pvxESrvcBWPrflCrntPMOctetsTotalValue=pvxESrvcBWPrflCrntPMOctetsTotalValue, pvxBridgeProfiles=pvxBridgeProfiles, pvxSrvcUNIEFPSDEnabled=pvxSrvcUNIEFPSDEnabled, pvxSLAThroughputTestFrameSize5FarEndThroughput=pvxSLAThroughputTestFrameSize5FarEndThroughput, pvxLagPortRowStatus=pvxLagPortRowStatus, pvxEcfmMepDbVlanId=pvxEcfmMepDbVlanId, pvxMgmtVLANDebugMode=pvxMgmtVLANDebugMode, pvxPCPEncPriority2DE=pvxPCPEncPriority2DE, mstpRegionConfigChangeEvt=mstpRegionConfigChangeEvt, pvxSchedProfMaxBwQ3=pvxSchedProfMaxBwQ3, pvxFSRowStatus=pvxFSRowStatus, pvxESrvcBWPrflHistPMShelfIdx=pvxESrvcBWPrflHistPMShelfIdx, pvxSchedulerProfileTable=pvxSchedulerProfileTable, pvxFloActSwitchIdx=pvxFloActSwitchIdx, pvxERPSPortCrntPMEventPduRxValue=pvxERPSPortCrntPMEventPduRxValue, pvxERPSPortHistPMNrPduRxValidity=pvxERPSPortHistPMNrPduRxValidity, pvxERPSSrvcFOPProvisionMismatchCond=pvxERPSSrvcFOPProvisionMismatchCond, pvxLAGPortHistPMTable=pvxLAGPortHistPMTable, pvxESrvcBWPrflPMThresholdShelfIdx=pvxESrvcBWPrflPMThresholdShelfIdx, pvxERPSPortHistPMFsPduRxValue=pvxERPSPortHistPMFsPduRxValue, pvxFlowStatsEntry=pvxFlowStatsEntry, pvxMSTPPortHistPMBPDURXInitialize=pvxMSTPPortHistPMBPDURXInitialize, pvxSwitchCpuRLCos5PPS=pvxSwitchCpuRLCos5PPS, pvxMSTPHistPMRCCCValue=pvxMSTPHistPMRCCCValue, pvxEthSrvcLockNNIs=pvxEthSrvcLockNNIs, pvxEcfmMepUnexpLtrIn=pvxEcfmMepUnexpLtrIn, pvxFMPMeterType=pvxFMPMeterType, pvxMSTPPortCrntPMINVBPDUTCNRXTimeStamp=pvxMSTPPortCrntPMINVBPDUTCNRXTimeStamp, pvxEthSrvcPointedness=pvxEthSrvcPointedness, pvxBWMeterCir=pvxBWMeterCir, pvxVlanPortRemoveDynamicVlanEvtNotifications=pvxVlanPortRemoveDynamicVlanEvtNotifications, pvxFMMeterProfileId=pvxFMMeterProfileId, pvxSchedProfRowStatus=pvxSchedProfRowStatus, pvxMSTPPortCrntPMBPDURXTimeStamp=pvxMSTPPortCrntPMBPDURXTimeStamp, pvxSchedProfMinBwQ3=pvxSchedProfMinBwQ3, pvxDscpClassSelector2=pvxDscpClassSelector2, pvxFMeterId=pvxFMeterId, pvxBWMeterEir=pvxBWMeterEir, pvxMSTPPortCrntPMSwitchIdx=pvxMSTPPortCrntPMSwitchIdx, PvxQoSColorMode=PvxQoSColorMode, pvxVlanPortIngressFiltering=pvxVlanPortIngressFiltering, pvxSLAMsmtResponderDBRMepId=pvxSLAMsmtResponderDBRMepId, pvxControlFrameProfileTable=pvxControlFrameProfileTable, pvxMSTPHistPMSwitchIdx=pvxMSTPHistPMSwitchIdx, pvxSwitchCpuRLMonCosDiscards=pvxSwitchCpuRLMonCosDiscards, pvxPriority0TrafficClass=pvxPriority0TrafficClass, pvxEServiceSlaCrntPM2WayDelayMinimum=pvxEServiceSlaCrntPM2WayDelayMinimum, pvxMSTPXstPortState=pvxMSTPXstPortState, pvxEthSrvcSwitchIdx=pvxEthSrvcSwitchIdx, pvxSwitchMemberStackingState=pvxSwitchMemberStackingState, pvxStaticUnicastReceivePort=pvxStaticUnicastReceivePort, pvxVLANEntry=pvxVLANEntry, pvxEcfmMipSwitchIdx=pvxEcfmMipSwitchIdx, pvxY1731LbStatsLbmOut=pvxY1731LbStatsLbmOut, pvxLAGPortHistPMLACPDUTXValue=pvxLAGPortHistPMLACPDUTXValue, pvxUNISwitchId=pvxUNISwitchId, pvxMSTPPortHistPMFWDTRValue=pvxMSTPPortHistPMFWDTRValue, pvxMSTPPortRestrictedTCN=pvxMSTPPortRestrictedTCN, pvxEcfmMepCcmSequenceErr=pvxEcfmMepCcmSequenceErr, pvxMSTPMapRowStatus=pvxMSTPMapRowStatus, pvxFlowTable=pvxFlowTable, pvxPCPEncPriority1=pvxPCPEncPriority1, pvxVlanCurrentStatus=pvxVlanCurrentStatus, pvxSLAMeasurementProfileTable=pvxSLAMeasurementProfileTable, pvxEcfmMepDbRemoteMepId=pvxEcfmMepDbRemoteMepId, pvxEServiceSlaCrntPM2WayDelayAverageValidity=pvxEServiceSlaCrntPM2WayDelayAverageValidity, pvxERPSPortHistPMFailuresTimeStamp=pvxERPSPortHistPMFailuresTimeStamp, pvxLAGPortCrntPMMRKPDUTXValidity=pvxLAGPortCrntPMMRKPDUTXValidity, pvxVLANOperStatus=pvxVLANOperStatus, pvxERPSPortCrntPMFsPduTxInitialize=pvxERPSPortCrntPMFsPduTxInitialize, pvxSLAMsmtInitiatorDBPortIdx=pvxSLAMsmtInitiatorDBPortIdx, pvxESrvcBWPrflHistPMEntry=pvxESrvcBWPrflHistPMEntry, pvxFMMeterIdx=pvxFMMeterIdx, pvxERPSSrvcUpMegLevel=pvxERPSSrvcUpMegLevel, pvxEcfmLtrEntry=pvxEcfmLtrEntry, pvxEServiceSlaHistPMIntervalIdx=pvxEServiceSlaHistPMIntervalIdx, pvxERPSPortCrntPMNrrbPduRxValidity=pvxERPSPortCrntPMNrrbPduRxValidity, pvxSwitchCpuRLMonCosMaxAllowedDepth=pvxSwitchCpuRLMonCosMaxAllowedDepth, pvxMSTPCrntPMRCCCValidity=pvxMSTPCrntPMRCCCValidity, pvxLAGPortCrntPMShelfIdx=pvxLAGPortCrntPMShelfIdx, pvxERPSSrvcMultipleFailure=pvxERPSSrvcMultipleFailure, pvxSwitchCpuRLMonSwitchIdx=pvxSwitchCpuRLMonSwitchIdx, pvxMSTPCrntPMRCCCInitialize=pvxMSTPCrntPMRCCCInitialize, pvxEServiceSlaCrntPM2WayDelayMinimumValidity=pvxEServiceSlaCrntPM2WayDelayMinimumValidity, pvxERPSPortCrntPMPortIdx=pvxERPSPortCrntPMPortIdx, pvxMSTPPortCrntPMINVBPDUTCNRXInitialize=pvxMSTPPortCrntPMINVBPDUTCNRXInitialize, pvxPCVRTUntaggedPEP=pvxPCVRTUntaggedPEP, pvxEServiceSlaCrntPMIntervalTypeIdx=pvxEServiceSlaCrntPMIntervalTypeIdx, pvxERPSPortCrntPMFsPduRxInitialize=pvxERPSPortCrntPMFsPduRxInitialize, pvxMgmtVLANEntry=pvxMgmtVLANEntry, pvxPbCVidRegistrationTable=pvxPbCVidRegistrationTable, pvxFloActSVlanAction=pvxFloActSVlanAction, pvxESrvcBWPrflCrntPMClsMapNameIdx=pvxESrvcBWPrflCrntPMClsMapNameIdx, pvxBWMeterEbs=pvxBWMeterEbs, pvxVlanCurrentCreationTime=pvxVlanCurrentCreationTime, pvxMSTPPortHistPMINVBPDUTCNRXValidity=pvxMSTPPortHistPMINVBPDUTCNRXValidity, pvxEcfmMepMacAddress=pvxEcfmMepMacAddress, pvxSchedProfWeightQ1=pvxSchedProfWeightQ1, pvxEServiceSlaHistPM2WayDelayMinimumInitialize=pvxEServiceSlaHistPM2WayDelayMinimumInitialize, pvxSwitchCpuRLCos0PPS=pvxSwitchCpuRLCos0PPS, pvxVlanPortGvrpFailedRegistrations=pvxVlanPortGvrpFailedRegistrations, pvxFloActGreenAction=pvxFloActGreenAction, pvxLAGPortCrntPMMRKPDUTXValue=pvxLAGPortCrntPMMRKPDUTXValue, pvxEcfmMipShelfId=pvxEcfmMipShelfId, pvxMSTPCrntPMTCCValue=pvxMSTPCrntPMTCCValue, pvxMSTPGenIdFmtSel=pvxMSTPGenIdFmtSel, pvxEServiceSlaHistPMPortTypeIdx=pvxEServiceSlaHistPMPortTypeIdx, pvxSwitchCpuRLCos4DEPTH=pvxSwitchCpuRLCos4DEPTH, pvxBWProfileTable=pvxBWProfileTable, pvxMSTPPortHistPMTable=pvxMSTPPortHistPMTable, pvxMSTPXstPortInstIdx=pvxMSTPXstPortInstIdx, pvxLAGPortCrntPMMRKPDURXValue=pvxLAGPortCrntPMMRKPDURXValue, pvxMultiCastGroupTable=pvxMultiCastGroupTable, pvxMSTPPortCrntPMINVBPDURXInitialize=pvxMSTPPortCrntPMINVBPDURXInitialize, pvxFDBPort=pvxFDBPort, pvxMSTPMapEntry=pvxMSTPMapEntry, pvxMSTPCrntPMRCCCValue=pvxMSTPCrntPMRCCCValue, pvxEServiceSlaHistPM2WayDelayVariationMinimumValidity=pvxEServiceSlaHistPM2WayDelayVariationMinimumValidity, pvxSwitchCpuRLMonEntry=pvxSwitchCpuRLMonEntry, pvxERPSPortHistPMSfPduRxValidity=pvxERPSPortHistPMSfPduRxValidity, pvxESrvcBWPrflHistPMSwitchIdx=pvxESrvcBWPrflHistPMSwitchIdx, pvxNextFreeIndexTableIndex=pvxNextFreeIndexTableIndex, pvxMSTPPortCrntPMINVBPDURXTimeStamp=pvxMSTPPortCrntPMINVBPDURXTimeStamp, pvxClassMapL4DstPortFilter=pvxClassMapL4DstPortFilter, pvxLAGPortHistPMMRKRSPPDUTXValue=pvxLAGPortHistPMMRKRSPPDUTXValue, pvxERPSPortCrntPMSfPduTxTimeStamp=pvxERPSPortCrntPMSfPduTxTimeStamp, pvxMSTPXstBrdgId=pvxMSTPXstBrdgId, pvxLagPortTypeIdx=pvxLagPortTypeIdx, pvxSrvcNNISrvcName=pvxSrvcNNISrvcName, pvxDscpAssuredFwd3y=pvxDscpAssuredFwd3y, pvxPolicyMapBWProfileName=pvxPolicyMapBWProfileName, mstpNewRootEvt=mstpNewRootEvt, pvxERPSPortCrntPMFailuresValidity=pvxERPSPortCrntPMFailuresValidity, pvxLAGPortCrntPMTypeIdx=pvxLAGPortCrntPMTypeIdx, pvxERPSPortCrntPMBlockedTimeStamp=pvxERPSPortCrntPMBlockedTimeStamp, pvxMSTPGenRegionalRoot=pvxMSTPGenRegionalRoot, pvxERPSPortCrntPMNrPduTxTimeStamp=pvxERPSPortCrntPMNrPduTxTimeStamp, pvxEcfmMepTransmitLtmSeqNumber=pvxEcfmMepTransmitLtmSeqNumber, pvxLagPortMode=pvxLagPortMode, pvxMSTPPortHistPMINVBPDUTCNRXInitialize=pvxMSTPPortHistPMINVBPDUTCNRXInitialize, pvxMSTPGenIdRevisionLevel=pvxMSTPGenIdRevisionLevel, pvxBandwidthProfileEntry=pvxBandwidthProfileEntry, pvxERPSPortCrntPMFsPduTxTimeStamp=pvxERPSPortCrntPMFsPduTxTimeStamp, pvxFDBVlanIdx=pvxFDBVlanIdx, resourceUnavailableCond=resourceUnavailableCond, pvxY1731LbStatsSwitchIdx=pvxY1731LbStatsSwitchIdx, pvxEcfmMepPortId=pvxEcfmMepPortId, pvxBWPRowStatus=pvxBWPRowStatus, pvxERPSSrvcRevertMode=pvxERPSSrvcRevertMode, pvxMepLocalRemoteFlag=pvxMepLocalRemoteFlag, pvxStackingPortTable=pvxStackingPortTable, pvxLAGPortCrntPMLACPDUTXInitialize=pvxLAGPortCrntPMLACPDUTXInitialize, pvxERPSPortCrntPMNrrbPduRxValue=pvxERPSPortCrntPMNrrbPduRxValue, pvxERPSPortCrntPMFsPduRxValidity=pvxERPSPortCrntPMFsPduRxValidity, pvxERPSPortHistPMRecoveriesValue=pvxERPSPortHistPMRecoveriesValue, pvxEcfmMepErrCcmRMepId=pvxEcfmMepErrCcmRMepId, pvxSrvcUNISlaMeasurementProfile=pvxSrvcUNISlaMeasurementProfile, pvxLagTable=pvxLagTable, pvxFlowEntry=pvxFlowEntry, pvxMSTPPortHistPMBPDUTCNTXTimeStamp=pvxMSTPPortHistPMBPDUTCNTXTimeStamp, pvxMSTPCrntPMEntry=pvxMSTPCrntPMEntry, pvxSwitchMemberTable=pvxSwitchMemberTable, pvxSLAThroughputTestFrameSize3=pvxSLAThroughputTestFrameSize3, pvxSLAMsmtInitiatorDBTable=pvxSLAMsmtInitiatorDBTable, pvxPriorityTCMapTable=pvxPriorityTCMapTable, pvxLGMacAddress=pvxLGMacAddress, pvxESrvcBWPrflHistPMESrvcNameIdx=pvxESrvcBWPrflHistPMESrvcNameIdx, pvxPolicyMapClassMapName=pvxPolicyMapClassMapName, PvxErpsVirtualLinkList=PvxErpsVirtualLinkList, pvxERPSPortCrntPMUnblockedTimeStamp=pvxERPSPortCrntPMUnblockedTimeStamp, pvxMSTPHistPMNRBCValidity=pvxMSTPHistPMNRBCValidity, pvxESrvcBWPrflHistPMBDWUtlzValue=pvxESrvcBWPrflHistPMBDWUtlzValue, pvxDscpClassSelector6=pvxDscpClassSelector6, pvxSchedProfMaxBwQ7=pvxSchedProfMaxBwQ7, pvxSrvcNNIPortId=pvxSrvcNNIPortId, pvxMSTPPortHistPMINVBPDUTCNRXValue=pvxMSTPPortHistPMINVBPDUTCNRXValue, pvxESrvcBWPrflCrntPMOctetsCnfExcTimeStamp=pvxESrvcBWPrflCrntPMOctetsCnfExcTimeStamp, pvxMSTPPortCrntPMBPDUTCNTXInitialize=pvxMSTPPortCrntPMBPDUTCNTXInitialize, pvxLAGPortCrntPMLACPDURXValidity=pvxLAGPortCrntPMLACPDURXValidity, pvxSwitchCpuRLMonCosReceivedRateLimit=pvxSwitchCpuRLMonCosReceivedRateLimit, pvxEcfmMepDbRMepIntfStatusDefect=pvxEcfmMepDbRMepIntfStatusDefect, pvxMSTPGenIdDigest=pvxMSTPGenIdDigest, pvxMSTPPortEntry=pvxMSTPPortEntry, pvxESrvcBWPrflPMThresholdESrvcNameIdx=pvxESrvcBWPrflPMThresholdESrvcNameIdx, pvxServiceUNITable=pvxServiceUNITable, pvxSLAMsmtResponderDBShelfIdx=pvxSLAMsmtResponderDBShelfIdx, pvxMSTPCrntPMIntervalTypeIdx=pvxMSTPCrntPMIntervalTypeIdx, pvxSwitchCpuRLMonCosReceived60Sec=pvxSwitchCpuRLMonCosReceived60Sec, pvxERPSSrvcNNIPortId=pvxERPSSrvcNNIPortId, pvxSLAMsmtThresholdDelayVarMaximum=pvxSLAMsmtThresholdDelayVarMaximum, pvxSLAThroughputTestESName=pvxSLAThroughputTestESName, pvxEcfmMepLbrOut=pvxEcfmMepLbrOut, pvxFloClRowStatus=pvxFloClRowStatus, pvxClassMapCVlanEndFilter=pvxClassMapCVlanEndFilter, pvxPCVRTSVlanId=pvxPCVRTSVlanId, pvxDscpAssuredFwd2y=pvxDscpAssuredFwd2y, pvxSchedProfMinBwQ2=pvxSchedProfMinBwQ2, pvxEcfmLtrSwitchIdx=pvxEcfmLtrSwitchIdx, pvxERPSPortCrntPMPduRxValue=pvxERPSPortCrntPMPduRxValue, pvxMSTPPortHistPMSlotIdx=pvxMSTPPortHistPMSlotIdx, pvxESrvcHistPMTable=pvxESrvcHistPMTable, pvxERPSSrvcRingNodeStatus=pvxERPSSrvcRingNodeStatus, pvxERPSPortCrntPMSfPduRxInitialize=pvxERPSPortCrntPMSfPduRxInitialize, pvxSLAThroughputTestFrameSize4=pvxSLAThroughputTestFrameSize4, pvxFMPStatsEnabled=pvxFMPStatsEnabled, pvxMSTPXstIdx=pvxMSTPXstIdx, pvxEcfmLtrTable=pvxEcfmLtrTable, pvxEcfmLtrEgressMac=pvxEcfmLtrEgressMac, pvxY1731LbStatsIdentifier=pvxY1731LbStatsIdentifier, pvxSwitchMemberShelfId=pvxSwitchMemberShelfId, pvxNextFreeIndexValue=pvxNextFreeIndexValue, pvxUNISpeed=pvxUNISpeed, pvxMSTPPortHistPMXstIdx=pvxMSTPPortHistPMXstIdx, pvxERPSPortCrntPMUnblockedInitialize=pvxERPSPortCrntPMUnblockedInitialize, pvxERPSPortHistPMFsPduTxValue=pvxERPSPortHistPMFsPduTxValue, pvxSchedProfMinBwQ4=pvxSchedProfMinBwQ4, pvxPCPEncDecProfEntry=pvxPCPEncDecProfEntry, pvxEServiceSlaHistPM2WayDelayVariationMaximumValidity=pvxEServiceSlaHistPM2WayDelayVariationMaximumValidity, pvxERPSSrvcRingSemStateChangeEvent=pvxERPSSrvcRingSemStateChangeEvent, pvxMSTPPortHistPMShelfIdx=pvxMSTPPortHistPMShelfIdx, pvxMSTPHistPMRCCCValidity=pvxMSTPHistPMRCCCValidity, pvxVlanPortAddDynamicVlanEvt=pvxVlanPortAddDynamicVlanEvt, pvxLagSystemPriority=pvxLagSystemPriority, pvxERPSPortHistPMNrrbPduRxValidity=pvxERPSPortHistPMNrrbPduRxValidity, pvxMSTPPortDesignatedRoot=pvxMSTPPortDesignatedRoot, pvxMSTPPortHistPMBPDURXTimeStamp=pvxMSTPPortHistPMBPDURXTimeStamp, pvxMSTPXstPortDesigBridge=pvxMSTPXstPortDesigBridge, pvxSwitchCpuRLMonSlotIdx=pvxSwitchCpuRLMonSlotIdx, pvxSvidXlateSlotId=pvxSvidXlateSlotId, pvxLGMaxLinks=pvxLGMaxLinks, pvxSLAThroughputTestFrameSize1FarEndThroughput=pvxSLAThroughputTestFrameSize1FarEndThroughput, pvxEServiceSlaHistPM2WayDelayVariationMinimum=pvxEServiceSlaHistPM2WayDelayVariationMinimum)
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxESrvcHistPMEntry=pvxESrvcHistPMEntry, pvxEcfmMepTransmitLbmDestMepId=pvxEcfmMepTransmitLbmDestMepId, pvxMSTPGenMaxHops=pvxMSTPGenMaxHops, pvxERPSPortCrntPMSfPduTxValidity=pvxERPSPortCrntPMSfPduTxValidity, pvxERPSPortCrntPMRecoveriesTimeStamp=pvxERPSPortCrntPMRecoveriesTimeStamp, pvxEServiceSlaHistPM2WayDelayMaximum=pvxEServiceSlaHistPM2WayDelayMaximum, pvxSwitchLldpTrapInterval=pvxSwitchLldpTrapInterval, pvxFloActNewPriority=pvxFloActNewPriority, pvxSwitchClearDynamicFDBEntries=pvxSwitchClearDynamicFDBEntries, pvxDscpAssuredFwd4y=pvxDscpAssuredFwd4y, pvxPCPEncPriority2=pvxPCPEncPriority2, pvxESrvcBWPrflCrntPMPortTypeIdx=pvxESrvcBWPrflCrntPMPortTypeIdx, pvxLAGPortHistPMMRKPDURXValidity=pvxLAGPortHistPMMRKPDURXValidity, pvxERPSSrvcNNIECFMInfo=pvxERPSSrvcNNIECFMInfo, pvxMSTPPortPriority=pvxMSTPPortPriority, pvxSLAThroughputTestTable=pvxSLAThroughputTestTable, PvxStackingPortCommState=PvxStackingPortCommState, pvxSrvcUNIIngressBWperCos=pvxSrvcUNIIngressBWperCos, pvxERPSPortHistPMSfPduTxInitialize=pvxERPSPortHistPMSfPduTxInitialize, pvxERPSSrvcHoldTimer=pvxERPSSrvcHoldTimer, pvxUNIServiceType=pvxUNIServiceType, pvxFloClActionId=pvxFloClActionId, pvxSrvcNNIEgressBW=pvxSrvcNNIEgressBW, pvxSrvcNNIPortTypeId=pvxSrvcNNIPortTypeId, pvxMSTPPortHistPMBPDUTCNRXInitialize=pvxMSTPPortHistPMBPDUTCNRXInitialize, pvxERPSPortHistPMPduRxValidity=pvxERPSPortHistPMPduRxValidity, pvxClassMapL4SrcPortFilter=pvxClassMapL4SrcPortFilter, pvxMgmtVLANSrvcName=pvxMgmtVLANSrvcName, pvxDscpClassSelector1=pvxDscpClassSelector1, pvxERPSPortCrntPMNrrbPduTxInitialize=pvxERPSPortCrntPMNrrbPduTxInitialize, pvxEcfmMipEntry=pvxEcfmMipEntry, pvxEServiceSlaCrntPM2WayDelayAverageTimeStamp=pvxEServiceSlaCrntPM2WayDelayAverageTimeStamp, pvxSLAThroughputTestRole=pvxSLAThroughputTestRole, pvxMSTPPortCrntPMINVBPDUCFGRXValidity=pvxMSTPPortCrntPMINVBPDUCFGRXValidity, pvxMSTPXstRootPortType=pvxMSTPXstRootPortType, pvxCPRowStatus=pvxCPRowStatus, pvxClassMapCVlanFilter=pvxClassMapCVlanFilter, pvxMSTPPortCrntPMBPDUTXValue=pvxMSTPPortCrntPMBPDUTXValue, pvxEServiceSlaHistPMNearEndFrameLossInitialize=pvxEServiceSlaHistPMNearEndFrameLossInitialize, pvxERPSPortCrntPMEventPduRxTimeStamp=pvxERPSPortCrntPMEventPduRxTimeStamp, pvxERPSPortHistPMNrPduTxValidity=pvxERPSPortHistPMNrPduTxValidity, pvxNNISlotId=pvxNNISlotId, pvxEcfmMepDbRMepCcmDefect=pvxEcfmMepDbRMepCcmDefect, pvxSwitchEvcMEGLevel=pvxSwitchEvcMEGLevel, pvxFloClL2InterfaceRange=pvxFloClL2InterfaceRange, pvxTunnelMacAddrProfileTable=pvxTunnelMacAddrProfileTable, pvxEServiceSlaCrntPM2WayDelayAverage=pvxEServiceSlaCrntPM2WayDelayAverage, pvxLAGPortHistPMINVLACFRRXInitialize=pvxLAGPortHistPMINVLACFRRXInitialize, pvxSLAThroughputTestSwitchIdx=pvxSLAThroughputTestSwitchIdx, pvxSLAThroughputTestFrameSize6FarEndThroughput=pvxSLAThroughputTestFrameSize6FarEndThroughput, pvxClassMapIpProtocolFilter=pvxClassMapIpProtocolFilter, pvxERPSSrvcSwitchIdx=pvxERPSSrvcSwitchIdx, pvxSchedProfMinBwQ6=pvxSchedProfMinBwQ6, pvxSchedProfName=pvxSchedProfName, pvxSLAMsmtMonitorPeriod=pvxSLAMsmtMonitorPeriod, pvxSwitchCpuRLCos6PPS=pvxSwitchCpuRLCos6PPS, pvxEcfmMepTable=pvxEcfmMepTable, pvxMSTPMapVlanS1k=pvxMSTPMapVlanS1k, pvxERPSSrvcNNISwitchId=pvxERPSSrvcNNISwitchId, pvxESrvcBWPrflPMThresholdDirectionIdx=pvxESrvcBWPrflPMThresholdDirectionIdx, pvxSwitchTable=pvxSwitchTable, pvxMSTPXstPortShelfIdx=pvxMSTPXstPortShelfIdx, pvxClassMapEtherTypeFilter=pvxClassMapEtherTypeFilter, pvxEServiceSlaHistPMFarEndFrameLossValidity=pvxEServiceSlaHistPMFarEndFrameLossValidity, pvxMSTPXstBrdgRegRoot=pvxMSTPXstBrdgRegRoot, pvxBWPEir=pvxBWPEir, pvxERPSPortHistPMPduTxInitialize=pvxERPSPortHistPMPduTxInitialize, pvxUNIMaxFrameSize=pvxUNIMaxFrameSize, pvxMSTPPortHistPMBPDUCFGTXInitialize=pvxMSTPPortHistPMBPDUCFGTXInitialize, pvxTunnMacAddrProfileTable=pvxTunnMacAddrProfileTable, pvxERPSPortHistPMPduRxTimeStamp=pvxERPSPortHistPMPduRxTimeStamp, pvxVLANMemberPortList=pvxVLANMemberPortList, pvxFSInProfilePackets=pvxFSInProfilePackets, pvxSwitchMasterNode=pvxSwitchMasterNode, pvxBandwidthProfileName=pvxBandwidthProfileName, pvxVLANIdx=pvxVLANIdx, pvxESrvcBWPrflCrntPMSwitchIdx=pvxESrvcBWPrflCrntPMSwitchIdx, pvxMSTPHistPMIntervalTypeIdx=pvxMSTPHistPMIntervalTypeIdx, pvxStaticUnicastTable=pvxStaticUnicastTable, pvxSwitchCpuRLMonShelfIdx=pvxSwitchCpuRLMonShelfIdx, pvxPbCVidRegistrationTableEntry=pvxPbCVidRegistrationTableEntry, pvxMSTPPortHistPMTypeIdx=pvxMSTPPortHistPMTypeIdx, pvxFloClSVlanFilter=pvxFloClSVlanFilter, pvxSlaMeasurementTcaEvt=pvxSlaMeasurementTcaEvt, pvxVlanPortTypeIdx=pvxVlanPortTypeIdx, pvxLAGPortHistPMMRKRSPPDURXInitialize=pvxLAGPortHistPMMRKRSPPDURXInitialize, pvxLAGPortCrntPMINVLACFRRXTimeStamp=pvxLAGPortCrntPMINVLACFRRXTimeStamp, pvxVlanPortLastBpduOrigin=pvxVlanPortLastBpduOrigin, pvxEServiceSlaHistPM2WayDelayVariationAverageValidity=pvxEServiceSlaHistPM2WayDelayVariationAverageValidity, pvxERPSPortCrntPMMsPduTxValidity=pvxERPSPortCrntPMMsPduTxValidity, pvxERPSPortCrntPMBlockedValidity=pvxERPSPortCrntPMBlockedValidity, pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent=pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent, pvxVlanPortRemoveDynamicVlanEvt=pvxVlanPortRemoveDynamicVlanEvt, pvxERPSPortHistPMSwitchIdx=pvxERPSPortHistPMSwitchIdx, pvxDscpPHBProfileTable=pvxDscpPHBProfileTable, pvxStaticMCStaticIntfIdList=pvxStaticMCStaticIntfIdList, pvxLAGPortCrntPMSlotIdx=pvxLAGPortCrntPMSlotIdx, pvxSwitchErpsVlanPropagate=pvxSwitchErpsVlanPropagate, pvxLGRowStatus=pvxLGRowStatus, pvxEthSrvcRowStatus=pvxEthSrvcRowStatus, pvxMSTPXstPortSlotIdx=pvxMSTPXstPortSlotIdx, pvxSwitchCpuRLMonCosHighestWatermark=pvxSwitchCpuRLMonCosHighestWatermark, pvxERPSServiceTable=pvxERPSServiceTable, pvxESrvcBWPrflCrntPMSlotIdx=pvxESrvcBWPrflCrntPMSlotIdx, pvxESrvcCrntPMSwitchIdx=pvxESrvcCrntPMSwitchIdx, pvxFloActRedCNGAction=pvxFloActRedCNGAction, pvxERPSPortCrntPMNrrbPduTxTimeStamp=pvxERPSPortCrntPMNrrbPduTxTimeStamp, pvxSwitchCpuRLCos4BURST=pvxSwitchCpuRLCos4BURST, pvxEServiceSlaCrntPM2WayDelayMinimumInitialize=pvxEServiceSlaCrntPM2WayDelayMinimumInitialize, pvxERPSPortHistPMEventPduRxTimeStamp=pvxERPSPortHistPMEventPduRxTimeStamp, pvxMSTPPortCrntPMBPDURXInitialize=pvxMSTPPortCrntPMBPDURXInitialize, pvxFloActRedirectToInterfaceIndex=pvxFloActRedirectToInterfaceIndex, pvxFloClSourceIPFilter=pvxFloClSourceIPFilter, pvxERPSSrvcNodeType=pvxERPSSrvcNodeType, pvxFMPColorAware=pvxFMPColorAware, pvxERPSSrvcFOPProvisionMismatchClear=pvxERPSSrvcFOPProvisionMismatchClear, pvxSLAThroughputTestFrameSize6=pvxSLAThroughputTestFrameSize6, pvxDynamicVlanPortTimeMark=pvxDynamicVlanPortTimeMark, pvxESrvcBWPrflHistPMOctetsVltTimeStamp=pvxESrvcBWPrflHistPMOctetsVltTimeStamp, pvxMSTPPortHistPMPMCInitialize=pvxMSTPPortHistPMPMCInitialize, pvxMSTPPortCrntPMINVBPDURXValidity=pvxMSTPPortCrntPMINVBPDURXValidity, pvxStaticUnicastSwitchIdx=pvxStaticUnicastSwitchIdx, pvxERPSSrvcGuardTimer=pvxERPSSrvcGuardTimer, pvxSchedulerProfileEntry=pvxSchedulerProfileEntry, pvxERPSPortCrntPMPduRxValidity=pvxERPSPortCrntPMPduRxValidity, cfmRMepStateChangeV2Evt=cfmRMepStateChangeV2Evt, pvxFloClDestMacFilter=pvxFloClDestMacFilter, pvxERPSPortHistPMSfPduTxValidity=pvxERPSPortHistPMSfPduTxValidity, pvxSLAMsmtInitiatorDBESName=pvxSLAMsmtInitiatorDBESName, pvxERPSPortHistPMNrrbPduRxValue=pvxERPSPortHistPMNrrbPduRxValue, pvxLagPortWaitTime=pvxLagPortWaitTime, pvxESrvcBWPrflCrntPMPortIdx=pvxESrvcBWPrflCrntPMPortIdx, pvxERPSPortHistPMRecoveriesInitialize=pvxERPSPortHistPMRecoveriesInitialize, pvxMgmtVLANBWProfileName=pvxMgmtVLANBWProfileName, pvxEcfmMepXconnRMepId=pvxEcfmMepXconnRMepId, pvxSwitchMirrorFromCpu=pvxSwitchMirrorFromCpu, pvxERPSPortCrntPMMsPduRxInitialize=pvxERPSPortCrntPMMsPduRxInitialize, pvxSwitchMemberEntry=pvxSwitchMemberEntry, pvxMSTPCrntPMNRBCInitialize=pvxMSTPCrntPMNRBCInitialize, pvxESrvcOperStateChangeEvt=pvxESrvcOperStateChangeEvt, pvxESrvcBWPrflCrntPMOctetsVltValidity=pvxESrvcBWPrflCrntPMOctetsVltValidity, pvxLAGPortCrntPMINVLACFRRXInitialize=pvxLAGPortCrntPMINVLACFRRXInitialize, pvxERPSSrvcNNINeighborPort=pvxERPSSrvcNNINeighborPort, pvxERPSPortCrntPMSfPduTxInitialize=pvxERPSPortCrntPMSfPduTxInitialize, pvxEthServiceEntry=pvxEthServiceEntry, pvxERPSPortHistPMShelfIdx=pvxERPSPortHistPMShelfIdx, pvxBWExceedActionChangeDscp=pvxBWExceedActionChangeDscp, pvxMSTPHistPMEntry=pvxMSTPHistPMEntry, pvxClassMapTcpControlFilter=pvxClassMapTcpControlFilter, pvxFloActRedAction=pvxFloActRedAction, pvxEServiceSlaCrntPM2WayDelayVariationMaximumTimeStamp=pvxEServiceSlaCrntPM2WayDelayVariationMaximumTimeStamp, pvxSwitchCpuRLCos7DEPTH=pvxSwitchCpuRLCos7DEPTH, pvxSLAMsmtRowStatus=pvxSLAMsmtRowStatus, pvxERPSPortHistPMSfPduRxInitialize=pvxERPSPortHistPMSfPduRxInitialize, pvxEServiceSlaCrntPM2WayDelayVariationAverage=pvxEServiceSlaCrntPM2WayDelayVariationAverage, pvxLAGPortCrntPMMRKRSPPDUTXValidity=pvxLAGPortCrntPMMRKRSPPDUTXValidity, pvxStaticMCMACAddrIdx=pvxStaticMCMACAddrIdx, pvxSwitchCpuRLCos1BURST=pvxSwitchCpuRLCos1BURST, pvxSwitchRowStatus=pvxSwitchRowStatus, pvxY1731LbStatsLbrTimeMin=pvxY1731LbStatsLbrTimeMin, pvxEServiceSlaHistPMEntry=pvxEServiceSlaHistPMEntry, pvxSLAMsmtInitiatorDBCmdState=pvxSLAMsmtInitiatorDBCmdState, pvxMSTPCrntPMNRBCValue=pvxMSTPCrntPMNRBCValue, pvxClassMapProfileRowStatus=pvxClassMapProfileRowStatus, pvxERPSPortHistPMNrPduTxValue=pvxERPSPortHistPMNrPduTxValue, pvxLagGroupEntry=pvxLagGroupEntry, pvxStaticMCReceivePort=pvxStaticMCReceivePort, pvxLAGPortHistPMMRKRSPPDURXValidity=pvxLAGPortHistPMMRKRSPPDURXValidity, pvxERPSPortHistPMFsPduRxInitialize=pvxERPSPortHistPMFsPduRxInitialize, pvxERPSPortHistPMPduTxValue=pvxERPSPortHistPMPduTxValue, pvxEServiceSlaHistPMSwitchIdx=pvxEServiceSlaHistPMSwitchIdx, pvxEcfmMipTable=pvxEcfmMipTable, pvxLGIdx=pvxLGIdx, pvxUNIPortTypeId=pvxUNIPortTypeId, pvxSwitchCpuRLCos6BURST=pvxSwitchCpuRLCos6BURST, pvxERPSSrvcTimerStartEvent=pvxERPSSrvcTimerStartEvent, pvxFlowMeterTable=pvxFlowMeterTable, pvxLAGPortHistPMSwitchIdx=pvxLAGPortHistPMSwitchIdx, pvxMSTPHistPMXstIdx=pvxMSTPHistPMXstIdx, pvxMCRowStatus=pvxMCRowStatus, pvxEServiceSlaHistPM2WayDelayAverageValidity=pvxEServiceSlaHistPM2WayDelayAverageValidity, pvxSrvcNNIIngressBWperCos=pvxSrvcNNIIngressBWperCos, pvxLAGPortCrntPMLACPDUTXValidity=pvxLAGPortCrntPMLACPDUTXValidity, pvxEServiceSlaHistPM2WayDelayAverageInitialize=pvxEServiceSlaHistPM2WayDelayAverageInitialize, pvxSwitchMemberStackingPortCommState=pvxSwitchMemberStackingPortCommState, pvxEcfmMepDbLocalMepId=pvxEcfmMepDbLocalMepId, pvxVlanPortEntry=pvxVlanPortEntry, pvxERPSPortHistPMEventPduRxValue=pvxERPSPortHistPMEventPduRxValue, pvxFDBEntry=pvxFDBEntry, pvxFDBAddressType=pvxFDBAddressType, pvxERPSPortCrntPMEventPduRxInitialize=pvxERPSPortCrntPMEventPduRxInitialize, switchMemberStkPortDownCond=switchMemberStkPortDownCond, pvxLagSwitchIdx=pvxLagSwitchIdx, pvxMSTPPortHistPMBPDUCFGRXValidity=pvxMSTPPortHistPMBPDUCFGRXValidity, pvxFlowActionsTable=pvxFlowActionsTable, PvxEcfmRelayActionFieldValue=PvxEcfmRelayActionFieldValue, pvxMultiCastEntry=pvxMultiCastEntry, pvxMSTPMapVlanS3k=pvxMSTPMapVlanS3k, pvxMSTPPortHistPMINVBPDUCFGRXValidity=pvxMSTPPortHistPMINVBPDUCFGRXValidity, pvxERPSPortHistPMNrrbPduTxValidity=pvxERPSPortHistPMNrrbPduTxValidity, pvxLAGPortHistPMINVLACFRRXValidity=pvxLAGPortHistPMINVLACFRRXValidity, pvxNNISwitchId=pvxNNISwitchId, pvxSrvcNNIShelfId=pvxSrvcNNIShelfId, pvxEcfmMepDefects=pvxEcfmMepDefects, pvxMepListIdentifier=pvxMepListIdentifier, pvxPCPEncPriority5DE=pvxPCPEncPriority5DE, pvxSwitchCpuRLMonTable=pvxSwitchCpuRLMonTable, pvxMSTPPortCrntPMBPDUTCNTXValidity=pvxMSTPPortCrntPMBPDUTCNTXValidity, pvxMSTPHistPMTable=pvxMSTPHistPMTable, pvxERPSPortHistPMEventPduTxTimeStamp=pvxERPSPortHistPMEventPduTxTimeStamp, pvxSLAThroughputTestFrameSize2NearEndThroughput=pvxSLAThroughputTestFrameSize2NearEndThroughput, pvxMSTPPortCrntPMBPDUCFGTXValidity=pvxMSTPPortCrntPMBPDUCFGTXValidity, pvxPCPEncDecProfileName=pvxPCPEncDecProfileName, pvxEServiceSlaCrntPM2WayDelayVariationAverageValidity=pvxEServiceSlaCrntPM2WayDelayVariationAverageValidity, pvxVLANService=pvxVLANService, pvxLAGPortCrntPMLACPDURXInitialize=pvxLAGPortCrntPMLACPDURXInitialize, pvxBWCnfrmActionChangeTOSFrmPri=pvxBWCnfrmActionChangeTOSFrmPri, pvxBWCnfrmActionChangeDscp=pvxBWCnfrmActionChangeDscp, pvxSLAMsmtResponderDBSwitchIdx=pvxSLAMsmtResponderDBSwitchIdx, pvxSrvcUNIEgressBWperCos=pvxSrvcUNIEgressBWperCos, pvxERPSSrvcNNISlotId=pvxERPSSrvcNNISlotId, pvxERPSSrvcNNINextNeighborPort=pvxERPSSrvcNNINextNeighborPort, pvxVlanPortLastBpduOriginChangeEvtNotifications=pvxVlanPortLastBpduOriginChangeEvtNotifications, pvxSwitchCpuRLCos2DEPTH=pvxSwitchCpuRLCos2DEPTH, pvxMSTPPortHistPMINVBPDUTCNRXTimeStamp=pvxMSTPPortHistPMINVBPDUTCNRXTimeStamp, pvxFloClSourceUDPorTCPFilter=pvxFloClSourceUDPorTCPFilter, pvxSwitchMemberRowStatus=pvxSwitchMemberRowStatus, pvxEServiceSlaHistPM2WayDelayMinimum=pvxEServiceSlaHistPM2WayDelayMinimum, pvxCPIdx=pvxCPIdx, pvxEthSrvcNumUNIs=pvxEthSrvcNumUNIs, pvxMSTPPortCrntPMBPDUTCNTXValue=pvxMSTPPortCrntPMBPDUTCNTXValue, pvxERPSPortCrntPMMsPduTxTimeStamp=pvxERPSPortCrntPMMsPduTxTimeStamp, pvxFloClEtherTypeFilter=pvxFloClEtherTypeFilter, pvxSLAThroughputTestShelfIdx=pvxSLAThroughputTestShelfIdx, pvxFMSwitchIdx=pvxFMSwitchIdx, pvxESrvcBWPrflCrntPMDirectionIdx=pvxESrvcBWPrflCrntPMDirectionIdx, pvxERPSPortHistPMNrPduRxTimeStamp=pvxERPSPortHistPMNrPduRxTimeStamp, pvxEServiceSlaCrntPMPortTypeIdx=pvxEServiceSlaCrntPMPortTypeIdx, pvxFSStatsIdx=pvxFSStatsIdx, pvxPCVRTSource=pvxPCVRTSource, pvxMgmtVLANAddressType=pvxMgmtVLANAddressType, PvxEcfmIngressActionFieldValue=PvxEcfmIngressActionFieldValue, pvxESrvcBWPrflHistPMOctetsVltValidity=pvxESrvcBWPrflHistPMOctetsVltValidity, pvxMSTPPortHistPMFWDTRValidity=pvxMSTPPortHistPMFWDTRValidity, pvxLagPortPrtnrAdminState=pvxLagPortPrtnrAdminState, switchMemberStkPortDownClear=switchMemberStkPortDownClear, pvxPCVRTCVlanIdTo=pvxPCVRTCVlanIdTo, pvxMSTPPortCrntPMBPDUTXValidity=pvxMSTPPortCrntPMBPDUTXValidity, PvxVlanId=PvxVlanId, pvxSchedProfMinBwQ0=pvxSchedProfMinBwQ0, pvxEcfmLtrForwarded=pvxEcfmLtrForwarded, pvxSvidXlatePortTypeId=pvxSvidXlatePortTypeId, pvxLAGPortHistPMMRKRSPPDUTXTimeStamp=pvxLAGPortHistPMMRKRSPPDUTXTimeStamp, pvxCoSProfileEntry=pvxCoSProfileEntry)
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxControlFrameProfileRowStatus=pvxControlFrameProfileRowStatus, pvxSLAMsmtThresholdFarEndLossRatio=pvxSLAMsmtThresholdFarEndLossRatio, pvxVlanPortRestrictedVlanState=pvxVlanPortRestrictedVlanState, pvxY1731LbStatsTable=pvxY1731LbStatsTable, pvxEServiceSlaCrntPMFarEndFrameLossTimeStamp=pvxEServiceSlaCrntPMFarEndFrameLossTimeStamp, pvxERPSPortCrntPMNrPduRxValue=pvxERPSPortCrntPMNrPduRxValue, pvxEcfmMipSlotId=pvxEcfmMipSlotId, pvxSrvcNNIEgressBWperCos=pvxSrvcNNIEgressBWperCos, pvxEcfmMepLbrBadMsdu=pvxEcfmMepLbrBadMsdu, pvxPolicyMapPolicyName=pvxPolicyMapPolicyName, pvxVlanPortSlotIdx=pvxVlanPortSlotIdx, pvxMSTPPortRegRootCost=pvxMSTPPortRegRootCost, pvxMSTPPortCrntPMBPDUTCNRXValidity=pvxMSTPPortCrntPMBPDUTCNRXValidity, pvxERPSPortCrntPMFailuresValue=pvxERPSPortCrntPMFailuresValue, pvxEcfmLtrIngressMac=pvxEcfmLtrIngressMac, pvxERPSPortCrntPMNrPduRxTimeStamp=pvxERPSPortCrntPMNrPduRxTimeStamp, pvxMSTPPortCrntPMBPDUTCNRXValue=pvxMSTPPortCrntPMBPDUTCNRXValue, pvxERPSPortCrntPMUnblockedValidity=pvxERPSPortCrntPMUnblockedValidity, pvxSLAThroughputTestClassMapName=pvxSLAThroughputTestClassMapName, pvxMSTPPortCrntPMBPDUTCNRXTimeStamp=pvxMSTPPortCrntPMBPDUTCNRXTimeStamp, pvxMgmtVLANRowStatus=pvxMgmtVLANRowStatus, pvxBWPCbs=pvxBWPCbs, pvxMSTPGenExternalRootCost=pvxMSTPGenExternalRootCost, pvxERPSPortHistPMNrPduRxInitialize=pvxERPSPortHistPMNrPduRxInitialize, pvxERPSServiceNNITable=pvxERPSServiceNNITable, pvxPCVRTRowStatus=pvxPCVRTRowStatus, pvxMSTPPortHistPMEntry=pvxMSTPPortHistPMEntry, pvxESrvcBWPrflHistPMIntervalIdx=pvxESrvcBWPrflHistPMIntervalIdx, pvxSchedProfMaxBwQ4=pvxSchedProfMaxBwQ4, pvxFClassificationIdList=pvxFClassificationIdList, pvxLAGPortCrntPMIntervalTypeIdx=pvxLAGPortCrntPMIntervalTypeIdx, pvxESrvcBWPrflHistPMOctetsTotalTimeStamp=pvxESrvcBWPrflHistPMOctetsTotalTimeStamp, pvxLAGPortCrntPMMRKRSPPDUTXValue=pvxLAGPortCrntPMMRKRSPPDUTXValue, pvxEthSrvcCVidXlate=pvxEthSrvcCVidXlate, pvxERPSPortCrntPMVersionDiscardValue=pvxERPSPortCrntPMVersionDiscardValue, pvxSwitchMIPAutoCreate=pvxSwitchMIPAutoCreate, pvxStaticUnicastIntfIdList=pvxStaticUnicastIntfIdList, pvxERPSSrvcRingMonitoring=pvxERPSSrvcRingMonitoring, pvxSLAMsmtThresholdDelayMaximum=pvxSLAMsmtThresholdDelayMaximum, pvxEServiceSlaHistPMRMepId=pvxEServiceSlaHistPMRMepId, pvxLGMtuSize=pvxLGMtuSize, pvxEServiceSlaHistPM2WayDelayVariationMinimumInitialize=pvxEServiceSlaHistPM2WayDelayVariationMinimumInitialize, pvxFloActPacketAction=pvxFloActPacketAction, pvxERPSSrvcVersionMismatchClear=pvxERPSSrvcVersionMismatchClear, pvxERPSPortCrntPMRecoveriesValue=pvxERPSPortCrntPMRecoveriesValue, pvxNNISpeed=pvxNNISpeed, pvxEcfmMepTransmitLtmStatus=pvxEcfmMepTransmitLtmStatus, pvxMSTPPortHistPMBPDUCFGRXTimeStamp=pvxMSTPPortHistPMBPDUCFGRXTimeStamp, pvxEcfmMepDbRMepRDI=pvxEcfmMepDbRMepRDI, pvxSLAThroughputTestFrameSize4FarEndThroughput=pvxSLAThroughputTestFrameSize4FarEndThroughput, pvxLAGPortHistPMINVLACFRRXTimeStamp=pvxLAGPortHistPMINVLACFRRXTimeStamp, pvxFloClDestIPFilter=pvxFloClDestIPFilter, pvxSwitchEntry=pvxSwitchEntry, pvxClassMapProfileTable=pvxClassMapProfileTable, pvxFDBRowStatus=pvxFDBRowStatus, pvxLAGPortCrntPMMRKPDUTXInitialize=pvxLAGPortCrntPMMRKPDUTXInitialize, pvxSchedProfMinBwQ5=pvxSchedProfMinBwQ5, pvxERPSSrvcNNIRingProtectLink=pvxERPSSrvcNNIRingProtectLink, pvxMSTPPortHistPMFWDTRTimeStamp=pvxMSTPPortHistPMFWDTRTimeStamp, pvxERPSSrvcNNICcmLinkDetection=pvxERPSSrvcNNICcmLinkDetection, pvxMSTPPortCrntPMPMCValue=pvxMSTPPortCrntPMPMCValue, pvxFIdx=pvxFIdx, pvxESrvcBWPrflCrntPMPlcyNameIdx=pvxESrvcBWPrflCrntPMPlcyNameIdx, pvxPCPDecPriority6=pvxPCPDecPriority6, pvxMSTPMapIdx=pvxMSTPMapIdx, pvxEthSrvcMEName=pvxEthSrvcMEName, PvxEcfmMepDefects=PvxEcfmMepDefects, PvxPolicyDropAction=PvxPolicyDropAction, pvxDscpClassSelector4=pvxDscpClassSelector4, pvxERPSPortCrntPMEntry=pvxERPSPortCrntPMEntry, pvxEServiceSlaHistPMTable=pvxEServiceSlaHistPMTable, pvxPriorityTCMapEntry=pvxPriorityTCMapEntry, pvxSwitchCfmDestinationAddress=pvxSwitchCfmDestinationAddress, pvxMSTPPortCrntPMFWDTRInitialize=pvxMSTPPortCrntPMFWDTRInitialize, pvxVLANForbiddenPortList=pvxVLANForbiddenPortList, pvxSwitchIdx=pvxSwitchIdx, pvxFloClDestUDPorTCPFilter=pvxFloClDestUDPorTCPFilter, pvxFlowClassificationEntry=pvxFlowClassificationEntry, pvxUNIPortId=pvxUNIPortId, pvxEServiceSlaHistPM2WayDelayMaximumValidity=pvxEServiceSlaHistPM2WayDelayMaximumValidity, pvxESrvcBWPrflHistPMSlotIdx=pvxESrvcBWPrflHistPMSlotIdx, pvxFloClIdx=pvxFloClIdx, pvxERPSPortHistPMBlockedValue=pvxERPSPortHistPMBlockedValue, pvxESrvcBWPrflCrntPMBDWUtlzValidity=pvxESrvcBWPrflCrntPMBDWUtlzValidity, pvxLAGPortHistPMMRKPDUTXValue=pvxLAGPortHistPMMRKPDUTXValue, pvxERPSPortHistPMIntervalIdx=pvxERPSPortHistPMIntervalIdx, pvxERPSPortCrntPMPduRxTimeStamp=pvxERPSPortCrntPMPduRxTimeStamp, PYSNMP_MODULE_ID=packetVxBridgeMib, pvxEcfmMipMegLevel=pvxEcfmMipMegLevel, pvxERPSSrvcNNIRingPortStatus=pvxERPSSrvcNNIRingPortStatus, pvxClassMapDstMACAddrFilter=pvxClassMapDstMACAddrFilter, pvxSLAThroughputTestFrameSize6NearEndThroughput=pvxSLAThroughputTestFrameSize6NearEndThroughput, pvxERPSPortHistPMFsPduRxValidity=pvxERPSPortHistPMFsPduRxValidity, pvxY1731LbStatsLbrTimeMax=pvxY1731LbStatsLbrTimeMax, pvxSwitchCpuRLCos3DEPTH=pvxSwitchCpuRLCos3DEPTH, pvxMSTPPortCrntPMBPDUTXTimeStamp=pvxMSTPPortCrntPMBPDUTXTimeStamp, pvxEServiceSlaCrntPM2WayDelayVariationMaximumInitialize=pvxEServiceSlaCrntPM2WayDelayVariationMaximumInitialize, pvxVlanPortIdx=pvxVlanPortIdx, pvxEcfmMepTransmitLbmCount=pvxEcfmMepTransmitLbmCount, pvxFloActMirrorType=pvxFloActMirrorType, pvxServiceNNIEntry=pvxServiceNNIEntry, pvxEthSrvcFrameSize=pvxEthSrvcFrameSize, pvxDscpClassBestEffort=pvxDscpClassBestEffort, pvxERPSPortCrntPMShelfIdx=pvxERPSPortCrntPMShelfIdx, pvxMSTPPortCrntPMINVBPDURXValue=pvxMSTPPortCrntPMINVBPDURXValue, pvxLAGPortHistPMMRKRSPPDURXTimeStamp=pvxLAGPortHistPMMRKRSPPDURXTimeStamp, pvxERPSPortHistPMMsPduRxTimeStamp=pvxERPSPortHistPMMsPduRxTimeStamp, pvxUNIRowStatus=pvxUNIRowStatus, pvxSLAThroughputTestFrameSize5=pvxSLAThroughputTestFrameSize5, pvxMSTPXstPortDesigPortId=pvxMSTPXstPortDesigPortId, pvxLAGPortHistPMMRKRSPPDUTXInitialize=pvxLAGPortHistPMMRKRSPPDUTXInitialize, pvxERPSPortHistPMUnblockedInitialize=pvxERPSPortHistPMUnblockedInitialize, pvxDscpPHBProfileRowStatus=pvxDscpPHBProfileRowStatus, pvxLAGPortCrntPMTable=pvxLAGPortCrntPMTable, pvxEcfmMipESrvcVlanId=pvxEcfmMipESrvcVlanId, pvxSchedProfMaxBwQ2=pvxSchedProfMaxBwQ2, pvxERPSPortCrntPMMsPduRxTimeStamp=pvxERPSPortCrntPMMsPduRxTimeStamp, pvxMSTPPortHistPMINVBPDUCFGRXInitialize=pvxMSTPPortHistPMINVBPDUCFGRXInitialize, pvxERPSPortHistPMFailuresValidity=pvxERPSPortHistPMFailuresValidity, pvxSLAMsmtResponderDBTable=pvxSLAMsmtResponderDBTable, pvxMSTPPortCrntPMBPDUCFGTXInitialize=pvxMSTPPortCrntPMBPDUCFGTXInitialize, pvxLAGPortHistPMMRKPDUTXInitialize=pvxLAGPortHistPMMRKPDUTXInitialize, pvxEthSrvcMECciInterval=pvxEthSrvcMECciInterval, pvxEthServiceTable=pvxEthServiceTable, pvxMSTPPortState=pvxMSTPPortState, pvxMSTPPortCrntPMIdx=pvxMSTPPortCrntPMIdx, pvxSrvcNNIRowStatus=pvxSrvcNNIRowStatus, pvxEServiceSlaHistPM2WayDelayVariationAverageInitialize=pvxEServiceSlaHistPM2WayDelayVariationAverageInitialize, pvxPriorityTCMapRowStatus=pvxPriorityTCMapRowStatus, pvxClassMapDstIpFilter=pvxClassMapDstIpFilter, pvxEServiceSlaHistPMNearEndFrameLossTimeStamp=pvxEServiceSlaHistPMNearEndFrameLossTimeStamp, pvxERPSPortHistPMUnblockedValidity=pvxERPSPortHistPMUnblockedValidity, pvxSLAMsmtInitiatorDBDelayMsmtSVlanPriority=pvxSLAMsmtInitiatorDBDelayMsmtSVlanPriority, pvxSwitchCpuRLMonCosDiscardsTotal=pvxSwitchCpuRLMonCosDiscardsTotal, pvxFMBWProfileId=pvxFMBWProfileId, pvxMSTPGenCistPriority=pvxMSTPGenCistPriority, pvxTMAPName=pvxTMAPName, mstpTopologyChangeEvt=mstpTopologyChangeEvt, pvxERPSPortHistPMBlockedTimeStamp=pvxERPSPortHistPMBlockedTimeStamp, pvxERPSPortCrntPMSlotIdx=pvxERPSPortCrntPMSlotIdx, pvxERPSPortHistPMVersionDiscardValidity=pvxERPSPortHistPMVersionDiscardValidity, pvxClassMapL4SrcPortEndFilter=pvxClassMapL4SrcPortEndFilter, pvxERPSPortCrntPMEventPduRxValidity=pvxERPSPortCrntPMEventPduRxValidity, pvxEServiceSlaHistPM2WayDelayVariationMaximumInitialize=pvxEServiceSlaHistPM2WayDelayVariationMaximumInitialize, pvxMSTPHistPMTCCInitialize=pvxMSTPHistPMTCCInitialize, pvxLAGPortHistPMMRKPDUTXValidity=pvxLAGPortHistPMMRKPDUTXValidity, pvxMSTPPortCrntPMFWDTRValue=pvxMSTPPortCrntPMFWDTRValue, pvxMSTPPortCrntPMPMCTimeStamp=pvxMSTPPortCrntPMPMCTimeStamp, pvxMCSwitchIdx=pvxMCSwitchIdx, pvxMSTPHistPMNRBCTimeStamp=pvxMSTPHistPMNRBCTimeStamp, pvxESrvcHistPMUASValidity=pvxESrvcHistPMUASValidity, pvxEServiceSlaHistPM2WayDelayVariationAverage=pvxEServiceSlaHistPM2WayDelayVariationAverage, pvxESrvcBWPrflHistPMBDWUtlzTimeStamp=pvxESrvcBWPrflHistPMBDWUtlzTimeStamp, pvxPolicyMapProfileRowStatus=pvxPolicyMapProfileRowStatus, pvxSchedProfMinBwQ1=pvxSchedProfMinBwQ1, pvxMSTPPortCrntPMBPDUCFGRXInitialize=pvxMSTPPortCrntPMBPDUCFGRXInitialize, pvxESrvcBWPrflHistPMOctetsCnfExcInitialize=pvxESrvcBWPrflHistPMOctetsCnfExcInitialize, pvxERPSPortCrntPMFsPduTxValidity=pvxERPSPortCrntPMFsPduTxValidity, pvxSrvcNNIIngressBW=pvxSrvcNNIIngressBW, pvxDynamicVlanPortTagged=pvxDynamicVlanPortTagged, pvxLAGPortHistPMINVLACFRRXValue=pvxLAGPortHistPMINVLACFRRXValue, pvxMgmtVLANTable=pvxMgmtVLANTable, pvxSrvcNNISlotId=pvxSrvcNNISlotId, pvxClassMapProfileEntry=pvxClassMapProfileEntry, pvxMSTPXstPortDesigRoot=pvxMSTPXstPortDesigRoot, pvxLAGPortHistPMIntervalTypeIdx=pvxLAGPortHistPMIntervalTypeIdx, pvxPCPEncPriority0DE=pvxPCPEncPriority0DE, pvxERPSPortCrntPMEventPduTxInitialize=pvxERPSPortCrntPMEventPduTxInitialize, pvxSwitchMemberSlotId=pvxSwitchMemberSlotId, pvxMSTPPortCrntPMTable=pvxMSTPPortCrntPMTable, pvxERPSPortCrntPMSfPduRxTimeStamp=pvxERPSPortCrntPMSfPduRxTimeStamp, pvxPCPDecPriority0=pvxPCPDecPriority0, pvxERPSPortHistPMUnblockedValue=pvxERPSPortHistPMUnblockedValue, pvxLagPortEntry=pvxLagPortEntry, pvxMSTPCrntPMTable=pvxMSTPCrntPMTable, pvxPCPEncPriority6=pvxPCPEncPriority6, pvxUNIShelfId=pvxUNIShelfId, pvxSchedProfWeightQ7=pvxSchedProfWeightQ7, pvxPCPEncPriority4DE=pvxPCPEncPriority4DE, pvxERPSPortHistPMMsPduTxTimeStamp=pvxERPSPortHistPMMsPduTxTimeStamp, pvxLAGPortCrntPMMRKPDURXValidity=pvxLAGPortCrntPMMRKPDURXValidity, pvxERPSPortHistPMBlockedValidity=pvxERPSPortHistPMBlockedValidity, pvxESrvcBWPrflPMThresholdSwitchIdx=pvxESrvcBWPrflPMThresholdSwitchIdx, pvxFloActYellowCNGAction=pvxFloActYellowCNGAction, PvxEcfmEgressActionFieldValue=PvxEcfmEgressActionFieldValue, pvxSwitchInnerEthType=pvxSwitchInnerEthType, pvxESrvcBWPrflCrntPMOctetsCnfExcValidity=pvxESrvcBWPrflCrntPMOctetsCnfExcValidity, pvxMSTPMapVlanS2k=pvxMSTPMapVlanS2k, pvxSwitchCpuRLCos2BURST=pvxSwitchCpuRLCos2BURST, pvxMSTPPortHistPMINVBPDUCFGRXValue=pvxMSTPPortHistPMINVBPDUCFGRXValue, pvxERPSPortHistPMPduDiscardValidity=pvxERPSPortHistPMPduDiscardValidity, pvxESrvcBWPrflHistPMTable=pvxESrvcBWPrflHistPMTable, pvxSLAMsmtInitiatorDBShelfIdx=pvxSLAMsmtInitiatorDBShelfIdx, pvxMepListEntry=pvxMepListEntry, pvxFloActCVlanAction=pvxFloActCVlanAction, pvxLAGPortHistPMMRKRSPPDUTXValidity=pvxLAGPortHistPMMRKRSPPDUTXValidity, pvxESrvcBWPrflCrntPMBDWUtlzValue=pvxESrvcBWPrflCrntPMBDWUtlzValue, pvxEcfmLtrSeqNumber=pvxEcfmLtrSeqNumber, pvxERPSSrvcNNILocalMepId=pvxERPSSrvcNNILocalMepId, pvxMSTPXstBrdgRegRootCost=pvxMSTPXstBrdgRegRootCost, pvxLAGPortHistPMTypeIdx=pvxLAGPortHistPMTypeIdx, pvxMSTPPortHistPMFWDTRInitialize=pvxMSTPPortHistPMFWDTRInitialize, pvxSwitchAgingTimer=pvxSwitchAgingTimer, pvxPCVRTUntaggedCEP=pvxPCVRTUntaggedCEP, pvxVlanCurrentTable=pvxVlanCurrentTable, pvxERPSPortCrntPMNrPduRxInitialize=pvxERPSPortCrntPMNrPduRxInitialize, pvxPriority3TrafficClass=pvxPriority3TrafficClass, pvxStaticUnicastAddressType=pvxStaticUnicastAddressType, pvxERPSPortHistPMMsPduRxValidity=pvxERPSPortHistPMMsPduRxValidity, pvxMCIntfIdList=pvxMCIntfIdList, pvxMSTPPortCrntPMFWDTRValidity=pvxMSTPPortCrntPMFWDTRValidity, pvxERPSPortCrntPMVersionDiscardInitialize=pvxERPSPortCrntPMVersionDiscardInitialize, pvxERPSPortHistPMFsPduTxTimeStamp=pvxERPSPortHistPMFsPduTxTimeStamp, pvxNextFreeIndexTable=pvxNextFreeIndexTable, pvxESrvcBWPrflHistPMOctetsCnfExcValidity=pvxESrvcBWPrflHistPMOctetsCnfExcValidity, pvxMSTPPortTable=pvxMSTPPortTable, pvxERPSPortHistPMVersionDiscardTimeStamp=pvxERPSPortHistPMVersionDiscardTimeStamp, pvxESrvcBWPrflBDWUtlzTcaEvt=pvxESrvcBWPrflBDWUtlzTcaEvt, pvxPCPEncPriority3=pvxPCPEncPriority3, pvxEServiceSlaCrntPMPortIdx=pvxEServiceSlaCrntPMPortIdx, pvxERPSPortHistPMTable=pvxERPSPortHistPMTable, pvxESrvcHistPMUASTimeStamp=pvxESrvcHistPMUASTimeStamp, pvxSLAMsmtThresholdDelayAverage=pvxSLAMsmtThresholdDelayAverage, pvxPCPDecPriority2=pvxPCPDecPriority2, pvxEcfmLtrSwitchName=pvxEcfmLtrSwitchName, pvxSwitchTunnMacAddrProfile=pvxSwitchTunnMacAddrProfile, pvxERPSPortCrntPMPduRxInitialize=pvxERPSPortCrntPMPduRxInitialize, pvxERPSPortHistPMFailuresValue=pvxERPSPortHistPMFailuresValue, pvxLAGPortHistPMShelfIdx=pvxLAGPortHistPMShelfIdx, pvxERPSPortCrntPMMsPduRxValue=pvxERPSPortCrntPMMsPduRxValue, pvxSwitchName=pvxSwitchName, pvxSLAThroughputTestFrameSize3NearEndThroughput=pvxSLAThroughputTestFrameSize3NearEndThroughput, pvxESrvcHistPMIntervalIdx=pvxESrvcHistPMIntervalIdx, pvxBWProfileEntry=pvxBWProfileEntry, pvxEcfmMepSwitchIdx=pvxEcfmMepSwitchIdx, pvxERPSPortCrntPMBlockedInitialize=pvxERPSPortCrntPMBlockedInitialize, pvxERPSSrvcWTRRemaining=pvxERPSSrvcWTRRemaining, pvxERPSPortCrntPMFsPduRxValue=pvxERPSPortCrntPMFsPduRxValue, pvxERPSPortCrntPMEventPduTxValidity=pvxERPSPortCrntPMEventPduTxValidity, pvxSLAMsmtThresholdNearEndLossRatio=pvxSLAMsmtThresholdNearEndLossRatio, pvxMCVlanIdx=pvxMCVlanIdx, pvxClassMapL4DstPortEndFilter=pvxClassMapL4DstPortEndFilter, pvxLAGPortCrntPMSwitchIdx=pvxLAGPortCrntPMSwitchIdx, pvxMSTPXstPortTable=pvxMSTPXstPortTable, pvxEcfmMepY1731LbmCurrentTransId=pvxEcfmMepY1731LbmCurrentTransId, pvxLAGPortCrntPMMRKRSPPDURXValidity=pvxLAGPortCrntPMMRKRSPPDURXValidity, pvxESrvcBWPrflPMThresholdEntry=pvxESrvcBWPrflPMThresholdEntry, resourceUnavailableClear=resourceUnavailableClear, pvxESrvcBWPrflCrntPMOctetsTotalValidity=pvxESrvcBWPrflCrntPMOctetsTotalValidity, pvxY1731LbStatsESrvcName=pvxY1731LbStatsESrvcName, pvxDynamicVlanPortTable=pvxDynamicVlanPortTable, pvxControlFrameProfileName=pvxControlFrameProfileName, pvxMSTPPortHistPMPMCValue=pvxMSTPPortHistPMPMCValue, pvxEServiceSlaCrntPMEntry=pvxEServiceSlaCrntPMEntry)
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxESrvcBWPrflPMThresholdBDWUtlzValue=pvxESrvcBWPrflPMThresholdBDWUtlzValue, pvxMSTPHistPMTCCValidity=pvxMSTPHistPMTCCValidity, pvxBWMeterColorAware=pvxBWMeterColorAware, pvxERPSPortCrntPMEventPduTxValue=pvxERPSPortCrntPMEventPduTxValue, pvxERPSPortHistPMBlockedInitialize=pvxERPSPortHistPMBlockedInitialize, pvxLGOperStatus=pvxLGOperStatus, pvxERPSSrvcPropagateTC=pvxERPSSrvcPropagateTC, pvxERPSPortHistPMSfPduRxValue=pvxERPSPortHistPMSfPduRxValue, pvxFloClEntryType=pvxFloClEntryType, pvxSrvcUNISlotId=pvxSrvcUNISlotId, pvxControlFrameProfileLldp=pvxControlFrameProfileLldp, pvxPCPDecPriority7=pvxPCPDecPriority7, pvxEServiceSlaCrntPM2WayDelayVariationMinimumValidity=pvxEServiceSlaCrntPM2WayDelayVariationMinimumValidity, pvxSrvcUNIShelfId=pvxSrvcUNIShelfId, pvxMSTPPortDesignatedBridge=pvxMSTPPortDesignatedBridge, pvxFloActIdx=pvxFloActIdx, pvxEServiceSlaCrntPMSlotIdx=pvxEServiceSlaCrntPMSlotIdx, pvxMSTPHistPMTCCTimeStamp=pvxMSTPHistPMTCCTimeStamp, pvxFDBMACAddrIdx=pvxFDBMACAddrIdx, pvxERPSSrvcCompatibleVersion=pvxERPSSrvcCompatibleVersion, pvxERPSPortHistPMNrPduRxValue=pvxERPSPortHistPMNrPduRxValue, pvxMSTPPortPathCost=pvxMSTPPortPathCost, pvxStaticUnicastRowStatus=pvxStaticUnicastRowStatus, pvxClassMapSrcMACMaskFilter=pvxClassMapSrcMACMaskFilter, pvxERPSPortHistPMSlotIdx=pvxERPSPortHistPMSlotIdx, pvxERPSPortHistPMFsPduTxValidity=pvxERPSPortHistPMFsPduTxValidity, pvxLagPortSwitchIdx=pvxLagPortSwitchIdx, pvxMSTPXstTable=pvxMSTPXstTable, pvxEcfmMepActive=pvxEcfmMepActive, pvxERPSPortCrntPMNrrbPduTxValidity=pvxERPSPortCrntPMNrrbPduTxValidity, pvxERPSSrvcProtectionSwitchMode=pvxERPSSrvcProtectionSwitchMode, pvxERPSPortCrntPMPduDiscardValue=pvxERPSPortCrntPMPduDiscardValue, pvxSrvcUNIEgressBW=pvxSrvcUNIEgressBW, pvxPolicyMapProfileEntry=pvxPolicyMapProfileEntry, pvxMSTPPortCrntPMSlotIdx=pvxMSTPPortCrntPMSlotIdx, pvxLAGPortHistPMSlotIdx=pvxLAGPortHistPMSlotIdx, pvxVLANAdminState=pvxVLANAdminState, pvxMSTPPortCrntPMPMCValidity=pvxMSTPPortCrntPMPMCValidity, pvxERPSPortHistPMFsPduTxInitialize=pvxERPSPortHistPMFsPduTxInitialize, pvxERPSPortHistPMEventPduTxInitialize=pvxERPSPortHistPMEventPduTxInitialize, pvxMSTPPortHistPMBPDUTCNRXValidity=pvxMSTPPortHistPMBPDUTCNRXValidity, pvxSchedProfMaxBwQ1=pvxSchedProfMaxBwQ1, pvxFMPIdx=pvxFMPIdx, pvxSLAThroughputTestResponderOpState=pvxSLAThroughputTestResponderOpState, pvxSLAThroughputTestFrameSize1=pvxSLAThroughputTestFrameSize1, pvxPCVRTXlateOperStatus=pvxPCVRTXlateOperStatus, pvxSchedProfMaxBwQ6=pvxSchedProfMaxBwQ6, pvxMSTPPortSwitchIdx=pvxMSTPPortSwitchIdx, pvxUNIMode=pvxUNIMode, pvxERPSSrvcNNIPortTypeId=pvxERPSSrvcNNIPortTypeId, pvxESrvcBWPrflCrntPMOctetsVltInitialize=pvxESrvcBWPrflCrntPMOctetsVltInitialize, pvxESrvcBWPrflPMThresholdTable=pvxESrvcBWPrflPMThresholdTable, pvxVLANMSTPId=pvxVLANMSTPId, pvxUNISlotId=pvxUNISlotId, pvxDscpPHBProfileEntry=pvxDscpPHBProfileEntry, pvxERPSPortCrntPMUnblockedValue=pvxERPSPortCrntPMUnblockedValue, pvxMSTPPortRestrictedRole=pvxMSTPPortRestrictedRole, pvxMSTPPortHistPMINVBPDUCFGRXTimeStamp=pvxMSTPPortHistPMINVBPDUCFGRXTimeStamp, pvxSLAThroughputTestSlotIdx=pvxSLAThroughputTestSlotIdx, pvxPriority1TrafficClass=pvxPriority1TrafficClass, pvxESrvcBWPrflCrntPMOctetsCnfExcValue=pvxESrvcBWPrflCrntPMOctetsCnfExcValue, pvxESrvcBWPrflHistPMOctetsCnfExcTimeStamp=pvxESrvcBWPrflHistPMOctetsCnfExcTimeStamp, pvxERPSPortHistPMRecoveriesValidity=pvxERPSPortHistPMRecoveriesValidity, pvxEthSrvcOperState=pvxEthSrvcOperState, pvxSLAThroughputTestFrameSize3FarEndThroughput=pvxSLAThroughputTestFrameSize3FarEndThroughput, pvxMSTPPortTypeIdx=pvxMSTPPortTypeIdx, pvxBWPCir=pvxBWPCir, pvxY1731LbStatsTotalResponders=pvxY1731LbStatsTotalResponders, pvxERPSSrvcDownMegLevel=pvxERPSSrvcDownMegLevel, pvxTMAPStpTunnMacAddr=pvxTMAPStpTunnMacAddr, mstpInvalidPacketRcvdEvt=mstpInvalidPacketRcvdEvt, pvxLAGPortHistPMIdx=pvxLAGPortHistPMIdx, pvxMSTPGenCistRootPriority=pvxMSTPGenCistRootPriority, pvxEServiceSlaHistPMFarEndFrameLossTimeStamp=pvxEServiceSlaHistPMFarEndFrameLossTimeStamp, packetVxBridgeMib=packetVxBridgeMib, pvxLAGPortHistPMMRKPDURXTimeStamp=pvxLAGPortHistPMMRKPDURXTimeStamp, pvxMSTPPortCrntPMPMCInitialize=pvxMSTPPortCrntPMPMCInitialize, pvxEcfmLtrReceiveOrder=pvxEcfmLtrReceiveOrder, pvxERPSSrvcNNIRemoteMepId=pvxERPSSrvcNNIRemoteMepId, pvxMSTPXstPortDesigCost=pvxMSTPXstPortDesigCost, pvxSrvcUNIPortId=pvxSrvcUNIPortId, pvxMSTPCrntPMRCCCTimeStamp=pvxMSTPCrntPMRCCCTimeStamp, pvxUNITable=pvxUNITable, pvxFSFlowId=pvxFSFlowId, pvxERPSPortHistPMMsPduTxValue=pvxERPSPortHistPMMsPduTxValue, pvxLAGPortCrntPMMRKPDURXInitialize=pvxLAGPortCrntPMMRKPDURXInitialize, pvxERPSPortCrntPMNrPduRxValidity=pvxERPSPortCrntPMNrPduRxValidity, pvxERPSPortCrntPMFailuresInitialize=pvxERPSPortCrntPMFailuresInitialize, pvxERPSPortCrntPMPduTxValidity=pvxERPSPortCrntPMPduTxValidity, pvxEthSrvcType=pvxEthSrvcType, pvxEcfmMepOutOfService=pvxEcfmMepOutOfService, pvxSvidXlateShelfId=pvxSvidXlateShelfId, pvxMSTPPortHistPMBPDUCFGTXValue=pvxMSTPPortHistPMBPDUCFGTXValue, pvxFDBSwitchIdx=pvxFDBSwitchIdx, pvxEServiceSlaCrntPMNearEndFrameLossTimeStamp=pvxEServiceSlaCrntPMNearEndFrameLossTimeStamp, pvxERPSServiceNNIEntry=pvxERPSServiceNNIEntry, pvxLAGPortCrntPMMRKRSPPDUTXTimeStamp=pvxLAGPortCrntPMMRKRSPPDUTXTimeStamp, pvxBridgeGVRP=pvxBridgeGVRP, pvxERPSPortCrntPMNrPduTxInitialize=pvxERPSPortCrntPMNrPduTxInitialize, pvxSwitchCpuRLCos2PPS=pvxSwitchCpuRLCos2PPS, pvxClassMapDscpFilter=pvxClassMapDscpFilter, pvxERPSPortHistPMPduDiscardInitialize=pvxERPSPortHistPMPduDiscardInitialize, pvxMSTPPortHistPMINVBPDURXValidity=pvxMSTPPortHistPMINVBPDURXValidity, pvxMSTPXstRootPortShelf=pvxMSTPXstRootPortShelf, pvxVLANMacLearning=pvxVLANMacLearning, pvxStackingPortOperStatus=pvxStackingPortOperStatus, pvxMSTPXstRootPortNum=pvxMSTPXstRootPortNum, pvxSLAMsmtInitiatorDBSwitchIdx=pvxSLAMsmtInitiatorDBSwitchIdx, pvxSrvcUNIEFPSDLocalEFPSDState=pvxSrvcUNIEFPSDLocalEFPSDState, pvxESrvcBWPrflHistPMPortIdx=pvxESrvcBWPrflHistPMPortIdx, pvxMepSequenceId=pvxMepSequenceId, pvxERPSPortCrntPMFsPduRxTimeStamp=pvxERPSPortCrntPMFsPduRxTimeStamp, pvxESrvcBWPrflCrntPMShelfIdx=pvxESrvcBWPrflCrntPMShelfIdx, pvxBandwidthProfileTable=pvxBandwidthProfileTable, pvxMSTPGenTable=pvxMSTPGenTable, pvxUNINumServices=pvxUNINumServices, pvxERPSPortCrntPMNrrbPduTxValue=pvxERPSPortCrntPMNrrbPduTxValue, pvxFloClMeterId=pvxFloClMeterId, pvxSchedProfMaxBwQ5=pvxSchedProfMaxBwQ5, pvxLAGPortCrntPMMRKRSPPDURXValue=pvxLAGPortCrntPMMRKRSPPDURXValue, pvxESrvcHistPMESrvcNameIdx=pvxESrvcHistPMESrvcNameIdx, pvxEServiceSlaHistPMFarEndFrameLossInitialize=pvxEServiceSlaHistPMFarEndFrameLossInitialize, pvxMSTPPortLoopGuardState=pvxMSTPPortLoopGuardState, pvxERPSPortCrntPMNrrbPduRxInitialize=pvxERPSPortCrntPMNrrbPduRxInitialize, mstpGeneralEvtType=mstpGeneralEvtType, pvxLAGPortHistPMLACPDUTXInitialize=pvxLAGPortHistPMLACPDUTXInitialize, pvxStaticUnicastMACAddrIdx=pvxStaticUnicastMACAddrIdx, pvxERPSPortCrntPMPduTxInitialize=pvxERPSPortCrntPMPduTxInitialize, pvxPCPEncPriority5=pvxPCPEncPriority5, pvxBWPIdx=pvxBWPIdx, pvxMSTPPortSlotIdx=pvxMSTPPortSlotIdx, pvxMSTPCrntPMNRBCValidity=pvxMSTPCrntPMNRBCValidity, pvxY1731LbStatsEntry=pvxY1731LbStatsEntry, pvxLGPortCount=pvxLGPortCount, pvxEcfmMepEntry=pvxEcfmMepEntry, pvxEcfmLtrMepIdentifier=pvxEcfmLtrMepIdentifier, pvxESrvcBWPrflCrntPMEntry=pvxESrvcBWPrflCrntPMEntry, pvxDscpClassSelector3=pvxDscpClassSelector3, pvxMSTPPortHistPMBPDUTCNRXTimeStamp=pvxMSTPPortHistPMBPDUTCNRXTimeStamp, pvxEcfmMepSentCcms=pvxEcfmMepSentCcms, PvxCVidMapOperStatus=PvxCVidMapOperStatus, mstpProtocolMigrationType=mstpProtocolMigrationType, pvxEthSrvcSpanTreeInstance=pvxEthSrvcSpanTreeInstance, pvxEthSrvcNumNNIs=pvxEthSrvcNumNNIs, pvxESrvcBWPrflCrntPMESrvcNameIdx=pvxESrvcBWPrflCrntPMESrvcNameIdx, pvxLAGPortCrntPMLACPDURXTimeStamp=pvxLAGPortCrntPMLACPDURXTimeStamp, pvxMSTPPortHistPMSwitchIdx=pvxMSTPPortHistPMSwitchIdx, pvxMSTPXstPortForcedPortState=pvxMSTPXstPortForcedPortState, pvxVlanPortSwitchIdx=pvxVlanPortSwitchIdx, pvxMSTPXstRootPortSwitch=pvxMSTPXstRootPortSwitch, pvxFloClIPProtocolFilter=pvxFloClIPProtocolFilter, pvxEcfmMepESrvcName=pvxEcfmMepESrvcName, pvxSLAThroughputTestFrameSize1NearEndThroughput=pvxSLAThroughputTestFrameSize1NearEndThroughput, pvxEServiceSlaHistPM2WayDelayMaximumInitialize=pvxEServiceSlaHistPM2WayDelayMaximumInitialize, pvxLAGPortHistPMLACPDURXTimeStamp=pvxLAGPortHistPMLACPDURXTimeStamp, pvxESrvcBWPrflPMThresholdPlcyNameIdx=pvxESrvcBWPrflPMThresholdPlcyNameIdx, pvxEServiceSlaCrntPMESName=pvxEServiceSlaCrntPMESName, pvxEthSrvcSVLAN=pvxEthSrvcSVLAN, pvxMSTPPortCrntPMBPDUCFGRXTimeStamp=pvxMSTPPortCrntPMBPDUCFGRXTimeStamp, pvxStackingPortEntry=pvxStackingPortEntry, mstpPacketErrType=mstpPacketErrType, pvxMSTPXstRootPort=pvxMSTPXstRootPort, pvxSLAThroughputTestPortTypeIdx=pvxSLAThroughputTestPortTypeIdx, pvxLagPortLcapId=pvxLagPortLcapId, pvxMSTPMapSwitchIdx=pvxMSTPMapSwitchIdx, pvxEServiceSlaCrntPM2WayDelayMinimumTimeStamp=pvxEServiceSlaCrntPM2WayDelayMinimumTimeStamp, pvxMSTPGenVersionSupported=pvxMSTPGenVersionSupported, pvxSLAMsmtInitiatorDBSlotIdx=pvxSLAMsmtInitiatorDBSlotIdx, pvxEServiceSlaHistPMPortIdx=pvxEServiceSlaHistPMPortIdx, pvxDynamicVlanPortEntry=pvxDynamicVlanPortEntry, pvxMSTPPortCrntPMBPDUCFGRXValidity=pvxMSTPPortCrntPMBPDUCFGRXValidity, pvxEServiceSlaHistPM2WayDelayVariationMaximumTimeStamp=pvxEServiceSlaHistPM2WayDelayVariationMaximumTimeStamp, pvxERPSPortHistPMPduRxValue=pvxERPSPortHistPMPduRxValue, pvxSwitchLearning=pvxSwitchLearning, pvxLagEntry=pvxLagEntry, pvxSvidXlateEntry=pvxSvidXlateEntry, pvxLAGPortCrntPMMRKRSPPDURXInitialize=pvxLAGPortCrntPMMRKRSPPDURXInitialize, pvxESrvcHistPMIntervalTypeIdx=pvxESrvcHistPMIntervalTypeIdx, pvxMSTPPortHistPMBPDUCFGRXInitialize=pvxMSTPPortHistPMBPDUCFGRXInitialize, pvxFlowMeterProfileEntry=pvxFlowMeterProfileEntry, pvxERPSPortHistPMNrPduTxTimeStamp=pvxERPSPortHistPMNrPduTxTimeStamp, pvxPCPDecPriority1=pvxPCPDecPriority1, pvxTMAPLacpTunnMacAddr=pvxTMAPLacpTunnMacAddr, pvxESrvcBWPrflHistPMOctetsCnfExcValue=pvxESrvcBWPrflHistPMOctetsCnfExcValue, pvxSrvcUNIServiceMap=pvxSrvcUNIServiceMap, pvxESrvcBWPrflHistPMOctetsTotalInitialize=pvxESrvcBWPrflHistPMOctetsTotalInitialize, pvxPCVRTCVlanIdFrom=pvxPCVRTCVlanIdFrom, pvxPCPEncPriority7=pvxPCPEncPriority7, pvxY1731LbStatsLbrTimeAverage=pvxY1731LbStatsLbrTimeAverage, mstpGlobalErrType=mstpGlobalErrType, pvxControlFrameProfileStp=pvxControlFrameProfileStp, pvxMSTPGenSwitchIdx=pvxMSTPGenSwitchIdx, PvxY1731MepDefects=PvxY1731MepDefects, pvxLAGPortHistPMLACPDUTXTimeStamp=pvxLAGPortHistPMLACPDUTXTimeStamp, pvxEServiceSlaCrntPM2WayDelayAverageInitialize=pvxEServiceSlaCrntPM2WayDelayAverageInitialize, pvxMgmtVLANNetMask=pvxMgmtVLANNetMask, pvxStaticMCForbiddenIntfIdList=pvxStaticMCForbiddenIntfIdList, pvxMSTPPortForcedPortState=pvxMSTPPortForcedPortState, pvxNNIEntry=pvxNNIEntry, pvxLAGPortHistPMLACPDURXValue=pvxLAGPortHistPMLACPDURXValue, pvxSLAMsmtInitiatorDBPortTypeIdx=pvxSLAMsmtInitiatorDBPortTypeIdx, pvxEServiceSlaCrntPMFarEndFrameLoss=pvxEServiceSlaCrntPMFarEndFrameLoss, pvxSLAMsmtInitiatorDBEntry=pvxSLAMsmtInitiatorDBEntry, pvxCoSProfileTable=pvxCoSProfileTable, pvxERPSPortHistPMEventPduTxValidity=pvxERPSPortHistPMEventPduTxValidity, pvxFloClSwitchIdx=pvxFloClSwitchIdx, pvxFlowClassificationTable=pvxFlowClassificationTable, pvxSwitchCpuRLCos4PPS=pvxSwitchCpuRLCos4PPS, pvxBridgeServices=pvxBridgeServices, pvxESrvcHistPMUASInitialize=pvxESrvcHistPMUASInitialize, pvxLAGPortCrntPMLACPDURXValue=pvxLAGPortCrntPMLACPDURXValue, pvxLAGPortCrntPMMRKPDURXTimeStamp=pvxLAGPortCrntPMMRKPDURXTimeStamp, pvxESrvcBWPrflHistPMBDWUtlzInitialize=pvxESrvcBWPrflHistPMBDWUtlzInitialize, pvxMSTPPortCrntPMBPDUTCNTXTimeStamp=pvxMSTPPortCrntPMBPDUTCNTXTimeStamp, pvxStaticUnicastVlanIdx=pvxStaticUnicastVlanIdx, pvxFRowStatus=pvxFRowStatus, pvxERPSPortHistPMTypeIdx=pvxERPSPortHistPMTypeIdx, pvxLAGPortHistPMIntervalIdx=pvxLAGPortHistPMIntervalIdx)
