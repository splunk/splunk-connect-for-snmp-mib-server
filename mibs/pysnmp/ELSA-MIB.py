#
# PySNMP MIB module ELSA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELSA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:45:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Gauge32, NotificationType, iso, IpAddress, Unsigned32, enterprises, Counter64, TimeTicks, MibIdentifier, Integer32, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Gauge32", "NotificationType", "iso", "IpAddress", "Unsigned32", "enterprises", "Counter64", "TimeTicks", "MibIdentifier", "Integer32", "Counter32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
elsa = MibIdentifier((1, 3, 6, 1, 4, 1, 2356))
isdn_Systems = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400)).setLabel("isdn-Systems")
isdn_Router = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1)).setLabel("isdn-Router")
lancom_2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000)).setLabel("lancom-2000")
sta = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1))
set = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2))
fir = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3))
oth = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 4))
staConne = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConne.setStatus('mandatory')
staCurre = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCurre.setStatus('mandatory')
staOpera = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOpera.setStatus('mandatory')
staWanst = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4))
staWanstBytetrans = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1), )
if mibBuilder.loadTexts: staWanstBytetrans.setStatus('mandatory')
staWanstBytetransCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1), ).setIndexNames((0, "ELSA-MIB", "staWanstBytetransIfc"))
if mibBuilder.loadTexts: staWanstBytetransCols.setStatus('mandatory')
staWanstBytetransIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstBytetransIfc.setStatus('mandatory')
staWanstBytetransCrx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstBytetransCrx.setStatus('mandatory')
staWanstBytetransRxb = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstBytetransRxb.setStatus('mandatory')
staWanstBytetransTxb = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstBytetransTxb.setStatus('mandatory')
staWanstBytetransCtx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstBytetransCtx.setStatus('mandatory')
staWanstPackettra = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2), )
if mibBuilder.loadTexts: staWanstPackettra.setStatus('mandatory')
staWanstPackettraCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1), ).setIndexNames((0, "ELSA-MIB", "staWanstPackettraIfc"))
if mibBuilder.loadTexts: staWanstPackettraCols.setStatus('mandatory')
staWanstPackettraIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraIfc.setStatus('mandatory')
staWanstPackettraRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraRx.setStatus('mandatory')
staWanstPackettraTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraTxt.setStatus('mandatory')
staWanstPackettraTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraTxn.setStatus('mandatory')
staWanstPackettraTxr = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraTxr.setStatus('mandatory')
staWanstPackettraTxu = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraTxu.setStatus('mandatory')
staWanstErrorstat = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3), )
if mibBuilder.loadTexts: staWanstErrorstat.setStatus('mandatory')
staWanstErrorstatCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1), ).setIndexNames((0, "ELSA-MIB", "staWanstErrorstatIfc"))
if mibBuilder.loadTexts: staWanstErrorstatCols.setStatus('mandatory')
staWanstErrorstatIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatIfc.setStatus('mandatory')
staWanstErrorstatRxl1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatRxl1.setStatus('mandatory')
staWanstErrorstatRxl2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatRxl2.setStatus('mandatory')
staWanstErrorstatRxl3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatRxl3.setStatus('mandatory')
staWanstErrorstatStac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatStac.setStatus('mandatory')
staWanstErrorstatTxer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatTxer.setStatus('mandatory')
staWanstWantxdisc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstWantxdisc.setStatus('mandatory')
staWanstWanheappa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstWanheappa.setStatus('mandatory')
staWanstWanqueuep = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstWanqueuep.setStatus('mandatory')
staWanstWanqueuee = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstWanqueuee.setStatus('mandatory')
staWanstThroughpu = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8), )
if mibBuilder.loadTexts: staWanstThroughpu.setStatus('mandatory')
staWanstThroughpuCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1), ).setIndexNames((0, "ELSA-MIB", "staWanstThroughpuIfc"))
if mibBuilder.loadTexts: staWanstThroughpuCols.setStatus('mandatory')
staWanstThroughpuIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstThroughpuIfc.setStatus('mandatory')
staWanstThroughpuRxsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstThroughpuRxsc.setStatus('mandatory')
staWanstThroughpuTxsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstThroughpuTxsc.setStatus('mandatory')
staWanstThroughpuRxsa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstThroughpuRxsa.setStatus('mandatory')
staWanstThroughpuTxsa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstThroughpuTxsa.setStatus('mandatory')
staWanstDeleteval = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staWanstDeleteval.setStatus('mandatory')
staLanst = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5))
staLanstLanrxpack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxpack.setStatus('mandatory')
staLanstLantxpack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxpack.setStatus('mandatory')
staLanstLanrxerro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxerro.setStatus('mandatory')
staLanstLanrxcrce = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxcrce.setStatus('mandatory')
staLanstLanrxalig = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxalig.setStatus('mandatory')
staLanstLantxerro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxerro.setStatus('mandatory')
staLanstLanstacke = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanstacke.setStatus('mandatory')
staLanstLannicerr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLannicerr.setStatus('mandatory')
staLanstLanheappa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanheappa.setStatus('mandatory')
staLanstLanqueuep = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanqueuep.setStatus('mandatory')
staLanstLanqueuee = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanqueuee.setStatus('mandatory')
staLanstLancollis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLancollis.setStatus('mandatory')
staLanstLanrxbyte = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxbyte.setStatus('mandatory')
staLanstLantxbyte = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxbyte.setStatus('mandatory')
staLanstLanrxbroa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxbroa.setStatus('mandatory')
staLanstLanrxmult = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxmult.setStatus('mandatory')
staLanstLanrxunic = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxunic.setStatus('mandatory')
staLanstLantxbroa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxbroa.setStatus('mandatory')
staLanstLantxmult = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxmult.setStatus('mandatory')
staLanstLantxunic = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxunic.setStatus('mandatory')
staLanstDeleteval = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staLanstDeleteval.setStatus('mandatory')
staPppst = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6))
staPppstPpp = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1), )
if mibBuilder.loadTexts: staPppstPpp.setStatus('mandatory')
staPppstPppCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstPppIfc"))
if mibBuilder.loadTexts: staPppstPppCols.setStatus('mandatory')
staPppstPppIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppIfc.setStatus('mandatory')
staPppstPppPha = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dead", 1), ("establish", 2), ("terminate", 3), ("authenticate", 4), ("callback", 5), ("network", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppPha.setStatus('mandatory')
staPppstPppLcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("startng", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stoppng", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppLcp.setStatus('mandatory')
staPppstPppIpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("startng", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stoppng", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppIpc.setStatus('mandatory')
staPppstPppIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("startng", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stoppng", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppIpx.setStatus('mandatory')
staPppstPppCcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("startng", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stoppng", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppCcp.setStatus('mandatory')
staPppstPppBac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("startng", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stoppng", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppBac.setStatus('mandatory')
staPppstLcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2))
staPppstLcpRxerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxerrors.setStatus('mandatory')
staPppstLcpRxdiscarded = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxdiscarded.setStatus('mandatory')
staPppstLcpRxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxconfigrequ.setStatus('mandatory')
staPppstLcpRxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxconfigack.setStatus('mandatory')
staPppstLcpRxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxconfignak.setStatus('mandatory')
staPppstLcpRxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxconfigreje.setStatus('mandatory')
staPppstLcpRxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxterminater.setStatus('mandatory')
staPppstLcpRxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxterminatea.setStatus('mandatory')
staPppstLcpRxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxcodereject.setStatus('mandatory')
staPppstLcpRxprotocolre = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxprotocolre.setStatus('mandatory')
staPppstLcpRxechoreques = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxechoreques.setStatus('mandatory')
staPppstLcpRxechoreply = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxechoreply.setStatus('mandatory')
staPppstLcpRxdiscardreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxdiscardreq.setStatus('mandatory')
staPppstLcpTxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxconfigrequ.setStatus('mandatory')
staPppstLcpTxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxconfigack.setStatus('mandatory')
staPppstLcpTxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxconfignak.setStatus('mandatory')
staPppstLcpTxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxconfigreje.setStatus('mandatory')
staPppstLcpTxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxterminater.setStatus('mandatory')
staPppstLcpTxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxterminatea.setStatus('mandatory')
staPppstLcpTxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxcodereject.setStatus('mandatory')
staPppstLcpTxprotocolre = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxprotocolre.setStatus('mandatory')
staPppstLcpTxechoreques = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxechoreques.setStatus('mandatory')
staPppstLcpTxechoreply = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxechoreply.setStatus('mandatory')
staPppstLcpTxdiscardreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxdiscardreq.setStatus('mandatory')
staPppstLcpDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 25), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstLcpDeletevalues.setStatus('mandatory')
staPppstPap = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3))
staPppstPapRxdis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapRxdis.setStatus('mandatory')
staPppstPapRxreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapRxreq.setStatus('mandatory')
staPppstPapRxsuc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapRxsuc.setStatus('mandatory')
staPppstPapRxfai = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapRxfai.setStatus('mandatory')
staPppstPapTxret = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapTxret.setStatus('mandatory')
staPppstPapTxreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapTxreq.setStatus('mandatory')
staPppstPapTxsuc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapTxsuc.setStatus('mandatory')
staPppstPapTxfai = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapTxfai.setStatus('mandatory')
staPppstPapDelet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstPapDelet.setStatus('mandatory')
staPppstCha = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4))
staPppstChaRxdis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaRxdis.setStatus('mandatory')
staPppstChaRxcha = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaRxcha.setStatus('mandatory')
staPppstChaRxres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaRxres.setStatus('mandatory')
staPppstChaRxsuc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaRxsuc.setStatus('mandatory')
staPppstChaRxfai = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaRxfai.setStatus('mandatory')
staPppstChaTxret = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaTxret.setStatus('mandatory')
staPppstChaTxcha = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaTxcha.setStatus('mandatory')
staPppstChaTxres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaTxres.setStatus('mandatory')
staPppstChaTxsuc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaTxsuc.setStatus('mandatory')
staPppstChaTxfai = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaTxfai.setStatus('mandatory')
staPppstChaDelet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstChaDelet.setStatus('mandatory')
staPppstCbc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7))
staPppstCbcRxdis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcRxdis.setStatus('mandatory')
staPppstCbcRxreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcRxreq.setStatus('mandatory')
staPppstCbcRxres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcRxres.setStatus('mandatory')
staPppstCbcRxack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcRxack.setStatus('mandatory')
staPppstCbcTxreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcTxreq.setStatus('mandatory')
staPppstCbcTxres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcTxres.setStatus('mandatory')
staPppstCbcTxack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcTxack.setStatus('mandatory')
staPppstCbcDelet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstCbcDelet.setStatus('mandatory')
staPppstIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5))
staPppstIpxRxdiscarded = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxdiscarded.setStatus('mandatory')
staPppstIpxRxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxconfigrequ.setStatus('mandatory')
staPppstIpxRxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxconfigack.setStatus('mandatory')
staPppstIpxRxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxconfignak.setStatus('mandatory')
staPppstIpxRxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxconfigreje.setStatus('mandatory')
staPppstIpxRxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxterminater.setStatus('mandatory')
staPppstIpxRxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxterminatea.setStatus('mandatory')
staPppstIpxRxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxcodereject.setStatus('mandatory')
staPppstIpxTxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxconfigrequ.setStatus('mandatory')
staPppstIpxTxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxconfigack.setStatus('mandatory')
staPppstIpxTxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxconfignak.setStatus('mandatory')
staPppstIpxTxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxconfigreje.setStatus('mandatory')
staPppstIpxTxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxterminater.setStatus('mandatory')
staPppstIpxTxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxterminatea.setStatus('mandatory')
staPppstIpxTxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxcodereject.setStatus('mandatory')
staPppstIpxDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 16), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstIpxDeletevalues.setStatus('mandatory')
staPppstIpc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6))
staPppstIpcRxdiscarded = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxdiscarded.setStatus('mandatory')
staPppstIpcRxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxconfigrequ.setStatus('mandatory')
staPppstIpcRxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxconfigack.setStatus('mandatory')
staPppstIpcRxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxconfignak.setStatus('mandatory')
staPppstIpcRxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxconfigreje.setStatus('mandatory')
staPppstIpcRxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxterminater.setStatus('mandatory')
staPppstIpcRxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxterminatea.setStatus('mandatory')
staPppstIpcRxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxcodereject.setStatus('mandatory')
staPppstIpcTxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxconfigrequ.setStatus('mandatory')
staPppstIpcTxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxconfigack.setStatus('mandatory')
staPppstIpcTxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxconfignak.setStatus('mandatory')
staPppstIpcTxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxconfigreje.setStatus('mandatory')
staPppstIpcTxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxterminater.setStatus('mandatory')
staPppstIpcTxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxterminatea.setStatus('mandatory')
staPppstIpcTxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxcodereject.setStatus('mandatory')
staPppstIpcDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 16), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstIpcDeletevalues.setStatus('mandatory')
staPppstCcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10))
staPppstCcpRxdiscarded = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxdiscarded.setStatus('mandatory')
staPppstCcpRxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxconfigrequ.setStatus('mandatory')
staPppstCcpRxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxconfigack.setStatus('mandatory')
staPppstCcpRxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxconfignak.setStatus('mandatory')
staPppstCcpRxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxconfigreje.setStatus('mandatory')
staPppstCcpRxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxterminater.setStatus('mandatory')
staPppstCcpRxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxterminatea.setStatus('mandatory')
staPppstCcpRxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxcodereject.setStatus('mandatory')
staPppstCcpRxresetreque = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxresetreque.setStatus('mandatory')
staPppstCcpRxresetack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxresetack.setStatus('mandatory')
staPppstCcpTxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxconfigrequ.setStatus('mandatory')
staPppstCcpTxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxconfigack.setStatus('mandatory')
staPppstCcpTxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxconfignak.setStatus('mandatory')
staPppstCcpTxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxconfigreje.setStatus('mandatory')
staPppstCcpTxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxterminater.setStatus('mandatory')
staPppstCcpTxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxterminatea.setStatus('mandatory')
staPppstCcpTxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxcodereject.setStatus('mandatory')
staPppstCcpTxresetreque = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxresetreque.setStatus('mandatory')
staPppstCcpTxresetack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxresetack.setStatus('mandatory')
staPppstCcpCompressione = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpCompressione.setStatus('mandatory')
staPppstCcpDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 21), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstCcpDeletevalues.setStatus('mandatory')
staPppstMls = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11))
staPppstMlsBundlec = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsBundlec.setStatus('mandatory')
staPppstMlsRxseqlo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxseqlo.setStatus('mandatory')
staPppstMlsRxseqre = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxseqre.setStatus('mandatory')
staPppstMlsRxmrrue = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxmrrue.setStatus('mandatory')
staPppstMlsRxheade = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxheade.setStatus('mandatory')
staPppstMlsRxdisca = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxdisca.setStatus('mandatory')
staPppstMlsRxfrags = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxfrags.setStatus('mandatory')
staPppstMlsRxfragm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxfragm.setStatus('mandatory')
staPppstMlsRxfrage = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxfrage.setStatus('mandatory')
staPppstMlsRxnotfr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxnotfr.setStatus('mandatory')
staPppstMlsDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstMlsDeletev.setStatus('mandatory')
staPppstBac = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12))
staPppstBacRxerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxerrors.setStatus('mandatory')
staPppstBacRxdiscarded = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxdiscarded.setStatus('mandatory')
staPppstBacRxcallrequest = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxcallrequest.setStatus('mandatory')
staPppstBacRxcallrespons = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxcallrespons.setStatus('mandatory')
staPppstBacRxcallbackreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxcallbackreq.setStatus('mandatory')
staPppstBacRxcallbackres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxcallbackres.setStatus('mandatory')
staPppstBacRxlinkdropreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxlinkdropreq.setStatus('mandatory')
staPppstBacRxlinkdropres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxlinkdropres.setStatus('mandatory')
staPppstBacRxstatusindic = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxstatusindic.setStatus('mandatory')
staPppstBacRxstatusreson = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxstatusreson.setStatus('mandatory')
staPppstBacTxcallrequest = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxcallrequest.setStatus('mandatory')
staPppstBacTxcallrespons = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxcallrespons.setStatus('mandatory')
staPppstBacTxcallbackreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxcallbackreq.setStatus('mandatory')
staPppstBacTxcallbackres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxcallbackres.setStatus('mandatory')
staPppstBacTxlinkdropreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxlinkdropreq.setStatus('mandatory')
staPppstBacTxlinkdropres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxlinkdropres.setStatus('mandatory')
staPppstBacTxstatusindic = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxstatusindic.setStatus('mandatory')
staPppstBacTxstatusreson = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxstatusreson.setStatus('mandatory')
staPppstBacDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 19), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstBacDeletevalues.setStatus('mandatory')
staPppstRxo = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8))
staPppstRxoLcp = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1), )
if mibBuilder.loadTexts: staPppstRxoLcp.setStatus('mandatory')
staPppstRxoLcpCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstRxoLcpIfc"))
if mibBuilder.loadTexts: staPppstRxoLcpCols.setStatus('mandatory')
staPppstRxoLcpIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpIfc.setStatus('mandatory')
staPppstRxoLcpMru = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpMru.setStatus('mandatory')
staPppstRxoLcpAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpAcc.setStatus('mandatory')
staPppstRxoLcpAut = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 4))).clone(namedValues=NamedValues(("none", 0), ("chap", 8), ("pap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpAut.setStatus('mandatory')
staPppstRxoLcpMag = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpMag.setStatus('mandatory')
staPppstRxoLcpPfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpPfc.setStatus('mandatory')
staPppstRxoLcpAcf = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpAcf.setStatus('mandatory')
staPppstRxoLcpCal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("none", 255), ("lcp", 1), ("lcp", 2), ("lcp", 3), ("lcp", 4), ("lcp", 5), ("cbcp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpCal.setStatus('mandatory')
staPppstRxoIpx = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2), )
if mibBuilder.loadTexts: staPppstRxoIpx.setStatus('mandatory')
staPppstRxoIpxCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstRxoIpxIfc"))
if mibBuilder.loadTexts: staPppstRxoIpxCols.setStatus('mandatory')
staPppstRxoIpxIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpxIfc.setStatus('mandatory')
staPppstRxoIpxNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpxNet.setStatus('mandatory')
staPppstRxoIpxNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpxNod.setStatus('mandatory')
staPppstRxoIpxRou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("none", 0), ("rip-sap", 2), ("nlsp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpxRou.setStatus('mandatory')
staPppstRxoIpc = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3), )
if mibBuilder.loadTexts: staPppstRxoIpc.setStatus('mandatory')
staPppstRxoIpcCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstRxoIpcIfc"))
if mibBuilder.loadTexts: staPppstRxoIpcCols.setStatus('mandatory')
staPppstRxoIpcIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpcIfc.setStatus('mandatory')
staPppstRxoIpcIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpcIpa.setStatus('mandatory')
staPppstRxoIpcDns = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpcDns.setStatus('mandatory')
staPppstRxoIpcNbn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpcNbn.setStatus('mandatory')
staPppstTxo = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9))
staPppstTxoLcp = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1), )
if mibBuilder.loadTexts: staPppstTxoLcp.setStatus('mandatory')
staPppstTxoLcpCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstTxoLcpIfc"))
if mibBuilder.loadTexts: staPppstTxoLcpCols.setStatus('mandatory')
staPppstTxoLcpIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpIfc.setStatus('mandatory')
staPppstTxoLcpMru = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpMru.setStatus('mandatory')
staPppstTxoLcpAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpAcc.setStatus('mandatory')
staPppstTxoLcpAut = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 4))).clone(namedValues=NamedValues(("none", 0), ("chap", 8), ("pap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpAut.setStatus('mandatory')
staPppstTxoLcpMag = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpMag.setStatus('mandatory')
staPppstTxoLcpPfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpPfc.setStatus('mandatory')
staPppstTxoLcpAcf = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpAcf.setStatus('mandatory')
staPppstTxoLcpCal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("none", 255), ("lcp", 1), ("lcp", 2), ("lcp", 3), ("lcp", 4), ("lcp", 5), ("cbcp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpCal.setStatus('mandatory')
staPppstTxoIpx = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2), )
if mibBuilder.loadTexts: staPppstTxoIpx.setStatus('mandatory')
staPppstTxoIpxCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstTxoIpxIfc"))
if mibBuilder.loadTexts: staPppstTxoIpxCols.setStatus('mandatory')
staPppstTxoIpxIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpxIfc.setStatus('mandatory')
staPppstTxoIpxNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpxNet.setStatus('mandatory')
staPppstTxoIpxNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpxNod.setStatus('mandatory')
staPppstTxoIpxRou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("none", 0), ("rip-sap", 2), ("nlsp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpxRou.setStatus('mandatory')
staPppstTxoIpc = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3), )
if mibBuilder.loadTexts: staPppstTxoIpc.setStatus('mandatory')
staPppstTxoIpcCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstTxoIpcIfc"))
if mibBuilder.loadTexts: staPppstTxoIpcCols.setStatus('mandatory')
staPppstTxoIpcIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpcIfc.setStatus('mandatory')
staPppstTxoIpcIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpcIpa.setStatus('mandatory')
staPppstTxoIpcDns = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpcDns.setStatus('mandatory')
staPppstTxoIpcNbn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpcNbn.setStatus('mandatory')
staPppstDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstDel.setStatus('mandatory')
staBridg = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7))
staBridgBrglanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrglanr.setStatus('mandatory')
staBridgBrglant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrglant.setStatus('mandatory')
staBridgBrglanf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrglanf.setStatus('mandatory')
staBridgBrglanb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrglanb.setStatus('mandatory')
staBridgBrglanm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrglanm.setStatus('mandatory')
staBridgBrgwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgwanr.setStatus('mandatory')
staBridgBrgwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgwant.setStatus('mandatory')
staBridgBrgwanf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgwanf.setStatus('mandatory')
staBridgBrgwanb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgwanb.setStatus('mandatory')
staBridgBrgwanm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgwanm.setStatus('mandatory')
staBridgBrgaddr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgaddr.setStatus('mandatory')
staBridgTablebr = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 12), )
if mibBuilder.loadTexts: staBridgTablebr.setStatus('mandatory')
staBridgTablebrCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 12, 1), ).setIndexNames((0, "ELSA-MIB", "staBridgTablebrNod"))
if mibBuilder.loadTexts: staBridgTablebrCols.setStatus('mandatory')
staBridgTablebrNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgTablebrNod.setStatus('mandatory')
staBridgTablebrLas = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgTablebrLas.setStatus('mandatory')
staBridgTablebrFor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgTablebrFor.setStatus('mandatory')
staBridgEstabli = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 13), )
if mibBuilder.loadTexts: staBridgEstabli.setStatus('mandatory')
staBridgEstabliCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 13, 1), ).setIndexNames((0, "ELSA-MIB", "staBridgEstabliTim"))
if mibBuilder.loadTexts: staBridgEstabliCols.setStatus('mandatory')
staBridgEstabliTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgEstabliTim.setStatus('mandatory')
staBridgEstabliDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgEstabliDes.setStatus('mandatory')
staBridgEstabliSou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgEstabliSou.setStatus('mandatory')
staBridgDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 14), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staBridgDeletev.setStatus('mandatory')
staIpxst = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8))
staIpxstMac = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1))
staIpxstMacIpxlanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxlanrx.setStatus('mandatory')
staIpxstMacIpxlanrxb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxlanrxb.setStatus('mandatory')
staIpxstMacIpxlanrxm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxlanrxm.setStatus('mandatory')
staIpxstMacIpxlanrxu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxlanrxu.setStatus('mandatory')
staIpxstMacIpxlantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxlantx.setStatus('mandatory')
staIpxstMacIpxwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxwanrx.setStatus('mandatory')
staIpxstMacIpxwanrxb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxwanrxb.setStatus('mandatory')
staIpxstMacIpxwanrxm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxwanrxm.setStatus('mandatory')
staIpxstMacIpxwanrxu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxwanrxu.setStatus('mandatory')
staIpxstMacIpxwantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxwantx.setStatus('mandatory')
staIpxstMacDeleteval = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstMacDeleteval.setStatus('mandatory')
staIpxstWat = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2))
staIpxstWatIpxwatchdoglanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatIpxwatchdoglanr.setStatus('mandatory')
staIpxstWatIpxwatchdoglant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatIpxwatchdoglant.setStatus('mandatory')
staIpxstWatIpxwatchdogwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatIpxwatchdogwanr.setStatus('mandatory')
staIpxstWatIpxwatchdogwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatIpxwatchdogwant.setStatus('mandatory')
staIpxstWatSpxwatchdoglanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatSpxwatchdoglanr.setStatus('mandatory')
staIpxstWatSpxwatchdoglant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatSpxwatchdoglant.setStatus('mandatory')
staIpxstWatSpxwatchdogwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatSpxwatchdogwanr.setStatus('mandatory')
staIpxstWatSpxwatchdogwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatSpxwatchdogwant.setStatus('mandatory')
staIpxstWatDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstWatDeletevalues.setStatus('mandatory')
staIpxstPro = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3))
staIpxstProPropagatelanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelanr.setStatus('mandatory')
staIpxstProPropagatelanf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelanf.setStatus('mandatory')
staIpxstProPropagatelant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelant.setStatus('mandatory')
staIpxstProPropagatelans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelans.setStatus('mandatory')
staIpxstProPropagatelanh = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelanh.setStatus('mandatory')
staIpxstProPropagatelanb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelanb.setStatus('mandatory')
staIpxstProPropagatelanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelanc.setStatus('mandatory')
staIpxstProPropagatewanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatewanr.setStatus('mandatory')
staIpxstProPropagatewanf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatewanf.setStatus('mandatory')
staIpxstProPropagatewant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatewant.setStatus('mandatory')
staIpxstProPropagatewans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatewans.setStatus('mandatory')
staIpxstProDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstProDeletevalues.setStatus('mandatory')
staIpxstRip = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4))
staIpxstRipRiplanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRiplanr.setStatus('mandatory')
staIpxstRipRiplane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRiplane.setStatus('mandatory')
staIpxstRipRiplant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRiplant.setStatus('mandatory')
staIpxstRipRipwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRipwanr.setStatus('mandatory')
staIpxstRipRipwane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRipwane.setStatus('mandatory')
staIpxstRipRipwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRipwant.setStatus('mandatory')
staIpxstRipTableri = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7), )
if mibBuilder.loadTexts: staIpxstRipTableri.setStatus('mandatory')
staIpxstRipTableriCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1), ).setIndexNames((0, "ELSA-MIB", "staIpxstRipTableriNet"))
if mibBuilder.loadTexts: staIpxstRipTableriCols.setStatus('mandatory')
staIpxstRipTableriNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriNet.setStatus('mandatory')
staIpxstRipTableriHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriHop.setStatus('mandatory')
staIpxstRipTableriTic = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriTic.setStatus('mandatory')
staIpxstRipTableriNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriNod.setStatus('mandatory')
staIpxstRipTableriTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriTim.setStatus('mandatory')
staIpxstRipTableriFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 128, 64, 32, 16, 8))).clone(namedValues=NamedValues(("local", 2), ("remote", 1), ("direct", 128), ("new", 64), ("down", 32), ("loop", 16), ("spare", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriFla.setStatus('mandatory')
staIpxstRipDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstRipDeletev.setStatus('mandatory')
staIpxstSap = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5))
staIpxstSapSaplanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSaplanr.setStatus('mandatory')
staIpxstSapSaplane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSaplane.setStatus('mandatory')
staIpxstSapSaplant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSaplant.setStatus('mandatory')
staIpxstSapSapwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSapwanr.setStatus('mandatory')
staIpxstSapSapwane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSapwane.setStatus('mandatory')
staIpxstSapSapwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSapwant.setStatus('mandatory')
staIpxstSapTablesa = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7), )
if mibBuilder.loadTexts: staIpxstSapTablesa.setStatus('mandatory')
staIpxstSapTablesaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1), ).setIndexNames((0, "ELSA-MIB", "staIpxstSapTablesaTyp"))
if mibBuilder.loadTexts: staIpxstSapTablesaCols.setStatus('mandatory')
staIpxstSapTablesaTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaTyp.setStatus('mandatory')
staIpxstSapTablesaSer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaSer.setStatus('mandatory')
staIpxstSapTablesaNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaNet.setStatus('mandatory')
staIpxstSapTablesaNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaNod.setStatus('mandatory')
staIpxstSapTablesaSoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaSoc.setStatus('mandatory')
staIpxstSapTablesaHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaHop.setStatus('mandatory')
staIpxstSapTablesaTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaTim.setStatus('mandatory')
staIpxstSapTablesaFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 128, 64, 32, 16, 8))).clone(namedValues=NamedValues(("local", 2), ("remote", 1), ("direct", 128), ("new", 64), ("down", 32), ("loop", 16), ("spare", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaFla.setStatus('mandatory')
staIpxstSapDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstSapDeletev.setStatus('mandatory')
staIpxstIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6))
staIpxstIpxIpxrlanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlanr.setStatus('mandatory')
staIpxstIpxIpxrlant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlant.setStatus('mandatory')
staIpxstIpxIpxrlanh = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlanh.setStatus('mandatory')
staIpxstIpxIpxrlans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlans.setStatus('mandatory')
staIpxstIpxIpxrlann = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlann.setStatus('mandatory')
staIpxstIpxIpxrlanb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlanb.setStatus('mandatory')
staIpxstIpxIpxrlanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlanc.setStatus('mandatory')
staIpxstIpxIpxrland = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrland.setStatus('mandatory')
staIpxstIpxIpxrwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwanr.setStatus('mandatory')
staIpxstIpxIpxrwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwant.setStatus('mandatory')
staIpxstIpxIpxrwanh = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwanh.setStatus('mandatory')
staIpxstIpxIpxrwans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwans.setStatus('mandatory')
staIpxstIpxIpxrwann = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwann.setStatus('mandatory')
staIpxstIpxIpxrwanb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwanb.setStatus('mandatory')
staIpxstIpxIpxrwand = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwand.setStatus('mandatory')
staIpxstIpxIpxrinte = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrinte.setStatus('mandatory')
staIpxstIpxNetworks = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17), )
if mibBuilder.loadTexts: staIpxstIpxNetworks.setStatus('mandatory')
staIpxstIpxNetworksCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1), ).setIndexNames((0, "ELSA-MIB", "staIpxstIpxNetworksRem"))
if mibBuilder.loadTexts: staIpxstIpxNetworksCols.setStatus('mandatory')
staIpxstIpxNetworksRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksRem.setStatus('mandatory')
staIpxstIpxNetworksNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksNet.setStatus('mandatory')
staIpxstIpxNetworksBin = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("auto", 15), ("auto", 0), ("ii", 1), ("dot802-3", 2), ("dot802-2", 4), ("snap", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksBin.setStatus('mandatory')
staIpxstIpxNetworksPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("filter", 0), ("route", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksPro.setStatus('mandatory')
staIpxstIpxNetworksBac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksBac.setStatus('mandatory')
staIpxstIpxNetworksTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksTim.setStatus('mandatory')
staIpxstIpxNetworksNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksNod.setStatus('mandatory')
staIpxstIpxEstablis = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18), )
if mibBuilder.loadTexts: staIpxstIpxEstablis.setStatus('mandatory')
staIpxstIpxEstablisCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1), ).setIndexNames((0, "ELSA-MIB", "staIpxstIpxEstablisTime"))
if mibBuilder.loadTexts: staIpxstIpxEstablisCols.setStatus('mandatory')
staIpxstIpxEstablisTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisTime.setStatus('mandatory')
staIpxstIpxEstablisDestnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisDestnet.setStatus('mandatory')
staIpxstIpxEstablisDestnode = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisDestnode.setStatus('mandatory')
staIpxstIpxEstablisDestsock = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisDestsock.setStatus('mandatory')
staIpxstIpxEstablisSourcene = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisSourcene.setStatus('mandatory')
staIpxstIpxEstablisSourceno = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisSourceno.setStatus('mandatory')
staIpxstIpxEstablisSourceso = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisSourceso.setStatus('mandatory')
staIpxstIpxDeleteva = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 19), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstIpxDeleteva.setStatus('mandatory')
staIpxstDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstDel.setStatus('mandatory')
staTcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9))
staTcpipArp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1))
staTcpipArpArplanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArplanr.setStatus('mandatory')
staTcpipArpArplant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArplant.setStatus('mandatory')
staTcpipArpArplane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArplane.setStatus('mandatory')
staTcpipArpArpwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArpwanr.setStatus('mandatory')
staTcpipArpArpwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArpwant.setStatus('mandatory')
staTcpipArpArpwane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArpwane.setStatus('mandatory')
staTcpipArpTablear = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7), )
if mibBuilder.loadTexts: staTcpipArpTablear.setStatus('mandatory')
staTcpipArpTablearCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7, 1), ).setIndexNames((0, "ELSA-MIB", "staTcpipArpTablearIpa"))
if mibBuilder.loadTexts: staTcpipArpTablearCols.setStatus('mandatory')
staTcpipArpTablearIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpTablearIpa.setStatus('mandatory')
staTcpipArpTablearNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpTablearNod.setStatus('mandatory')
staTcpipArpTablearLas = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpTablearLas.setStatus('mandatory')
staTcpipArpTablearCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("local", 2), ("remote", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpTablearCon.setStatus('mandatory')
staTcpipArpDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipArpDeletev.setStatus('mandatory')
staTcpipIps = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2))
staTcpipIpsIplanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanrx.setStatus('mandatory')
staTcpipIpsIplantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplantx.setStatus('mandatory')
staTcpipIpsIplanchecksumerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanchecksumerrors.setStatus('mandatory')
staTcpipIpsIplanserviceerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanserviceerrors.setStatus('mandatory')
staTcpipIpsIplanfragmentationer = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanfragmentationer.setStatus('mandatory')
staTcpipIpsIplanfragmentations = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanfragmentations.setStatus('mandatory')
staTcpipIpsIplanfragmentationsf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanfragmentationsf.setStatus('mandatory')
staTcpipIpsIpwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanrx.setStatus('mandatory')
staTcpipIpsIpwantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwantx.setStatus('mandatory')
staTcpipIpsIpwanchecksumerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanchecksumerrors.setStatus('mandatory')
staTcpipIpsIpwanserviceerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanserviceerrors.setStatus('mandatory')
staTcpipIpsIpwanfragmentationer = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanfragmentationer.setStatus('mandatory')
staTcpipIpsIpwanfragmentations = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanfragmentations.setStatus('mandatory')
staTcpipIpsIpwanfragmentationsf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanfragmentationsf.setStatus('mandatory')
staTcpipIpsIpwanrxdisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanrxdisconnect.setStatus('mandatory')
staTcpipIpsDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipIpsDeletevalues.setStatus('mandatory')
staTcpipIcm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3))
staTcpipIcmIcmplanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmplanr.setStatus('mandatory')
staTcpipIcmIcmplant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmplant.setStatus('mandatory')
staTcpipIcmIcmplanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmplanc.setStatus('mandatory')
staTcpipIcmIcmplans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmplans.setStatus('mandatory')
staTcpipIcmIcmpwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmpwanr.setStatus('mandatory')
staTcpipIcmIcmpwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmpwant.setStatus('mandatory')
staTcpipIcmIcmpwanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmpwanc.setStatus('mandatory')
staTcpipIcmIcmpwans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmpwans.setStatus('mandatory')
staTcpipIcmDeleteva = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipIcmDeleteva.setStatus('mandatory')
staTcpipTft = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4))
staTcpipTftTftplanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrx.setStatus('mandatory')
staTcpipTftTftplanrxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxr.setStatus('mandatory')
staTcpipTftTftplanrxw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxw.setStatus('mandatory')
staTcpipTftTftplanrxd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxd.setStatus('mandatory')
staTcpipTftTftplanrxa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxa.setStatus('mandatory')
staTcpipTftTftplanrxo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxo.setStatus('mandatory')
staTcpipTftTftplanrxe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxe.setStatus('mandatory')
staTcpipTftTftplanrxb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxb.setStatus('mandatory')
staTcpipTftTftplantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantx.setStatus('mandatory')
staTcpipTftTftplantxd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantxd.setStatus('mandatory')
staTcpipTftTftplantxa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantxa.setStatus('mandatory')
staTcpipTftTftplantxo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantxo.setStatus('mandatory')
staTcpipTftTftplantxe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantxe.setStatus('mandatory')
staTcpipTftTftplantxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantxr.setStatus('mandatory')
staTcpipTftTftplancon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplancon.setStatus('mandatory')
staTcpipTftTftpwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrx.setStatus('mandatory')
staTcpipTftTftpwanrxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxr.setStatus('mandatory')
staTcpipTftTftpwanrxw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxw.setStatus('mandatory')
staTcpipTftTftpwanrxd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxd.setStatus('mandatory')
staTcpipTftTftpwanrxa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxa.setStatus('mandatory')
staTcpipTftTftpwanrxo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxo.setStatus('mandatory')
staTcpipTftTftpwanrxe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxe.setStatus('mandatory')
staTcpipTftTftpwanrxb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxb.setStatus('mandatory')
staTcpipTftTftpwantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantx.setStatus('mandatory')
staTcpipTftTftpwantxd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantxd.setStatus('mandatory')
staTcpipTftTftpwantxa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantxa.setStatus('mandatory')
staTcpipTftTftpwantxo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantxo.setStatus('mandatory')
staTcpipTftTftpwantxe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantxe.setStatus('mandatory')
staTcpipTftTftpwantxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantxr.setStatus('mandatory')
staTcpipTftTftpwancon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwancon.setStatus('mandatory')
staTcpipTftDeletevalu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 31), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipTftDeletevalu.setStatus('mandatory')
staTcpipTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5))
staTcpipTcpTcplanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplanrx.setStatus('mandatory')
staTcpipTcpTcplantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplantx.setStatus('mandatory')
staTcpipTcpTcplantxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplantxr.setStatus('mandatory')
staTcpipTcpTcplanche = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplanche.setStatus('mandatory')
staTcpipTcpTcplanser = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplanser.setStatus('mandatory')
staTcpipTcpTcplancon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplancon.setStatus('mandatory')
staTcpipTcpTcpwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwanrx.setStatus('mandatory')
staTcpipTcpTcpwantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwantx.setStatus('mandatory')
staTcpipTcpTcpwantxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwantxr.setStatus('mandatory')
staTcpipTcpTcpwanche = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwanche.setStatus('mandatory')
staTcpipTcpTcpwanser = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwanser.setStatus('mandatory')
staTcpipTcpTcpwancon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwancon.setStatus('mandatory')
staTcpipTcpDeleteval = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipTcpDeleteval.setStatus('mandatory')
staTcpipDhc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6))
staTcpipDhcDhcplanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcplanrx.setStatus('mandatory')
staTcpipDhcDhcplantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcplantx.setStatus('mandatory')
staTcpipDhcDhcpwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcpwanrx.setStatus('mandatory')
staTcpipDhcDhcpdisca = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcpdisca.setStatus('mandatory')
staTcpipDhcDhcprxdis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcprxdis.setStatus('mandatory')
staTcpipDhcDhcprxreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcprxreq.setStatus('mandatory')
staTcpipDhcDhcprxdec = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcprxdec.setStatus('mandatory')
staTcpipDhcDhcprxinf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcprxinf.setStatus('mandatory')
staTcpipDhcDhcprxrel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcprxrel.setStatus('mandatory')
staTcpipDhcDhcptxoff = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcptxoff.setStatus('mandatory')
staTcpipDhcDhcptxack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcptxack.setStatus('mandatory')
staTcpipDhcDhcptxnak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcptxnak.setStatus('mandatory')
staTcpipDhcDchpserve = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDchpserve.setStatus('mandatory')
staTcpipDhcDhcpassig = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcpassig.setStatus('mandatory')
staTcpipDhcDhcpmacco = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcpmacco.setStatus('mandatory')
staTcpipDhcTabledhcp = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16), )
if mibBuilder.loadTexts: staTcpipDhcTabledhcp.setStatus('mandatory')
staTcpipDhcTabledhcpCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1), ).setIndexNames((0, "ELSA-MIB", "staTcpipDhcTabledhcpIpa"))
if mibBuilder.loadTexts: staTcpipDhcTabledhcpCols.setStatus('mandatory')
staTcpipDhcTabledhcpIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcTabledhcpIpa.setStatus('mandatory')
staTcpipDhcTabledhcpNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcTabledhcpNod.setStatus('mandatory')
staTcpipDhcTabledhcpTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcTabledhcpTim.setStatus('mandatory')
staTcpipDhcTabledhcpHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcTabledhcpHos.setStatus('mandatory')
staTcpipDhcTabledhcpTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 16, 4, 8, 32, 2048))).clone(namedValues=NamedValues(("new", 1), ("new", 2), ("dyn", 16), ("unkn", 4), ("stat", 8), ("bootp", 32), ("relay", 2048)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcTabledhcpTyp.setStatus('mandatory')
staTcpipDhcServerfla = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcServerfla.setStatus('mandatory')
staTcpipDhcDeleteval = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 18), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipDhcDeleteval.setStatus('mandatory')
staTcpipDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipDel.setStatus('mandatory')
staTcpipNet = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8))
staTcpipNetLanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetLanr.setStatus('mandatory')
staTcpipNetLant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetLant.setStatus('mandatory')
staTcpipNetWanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetWanr.setStatus('mandatory')
staTcpipNetWant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetWant.setStatus('mandatory')
staTcpipNetRegi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRegi.setStatus('mandatory')
staTcpipNetConf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetConf.setStatus('mandatory')
staTcpipNetRele = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRele.setStatus('mandatory')
staTcpipNetRefr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRefr.setStatus('mandatory')
staTcpipNetTime = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetTime.setStatus('mandatory')
staTcpipNetHost = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetHost.setStatus('mandatory')
staTcpipNetGrou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetGrou.setStatus('mandatory')
staTcpipNetBnod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetBnod.setStatus('mandatory')
staTcpipNetPnod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetPnod.setStatus('mandatory')
staTcpipNetMnod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetMnod.setStatus('mandatory')
staTcpipNetWnod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetWnod.setStatus('mandatory')
staTcpipNetRemo = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16), )
if mibBuilder.loadTexts: staTcpipNetRemo.setStatus('mandatory')
staTcpipNetRemoCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16, 1), ).setIndexNames((0, "ELSA-MIB", "staTcpipNetRemoNam"))
if mibBuilder.loadTexts: staTcpipNetRemoCols.setStatus('mandatory')
staTcpipNetRemoNam = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRemoNam.setStatus('mandatory')
staTcpipNetRemoTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("workstation", 1), ("router", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRemoTyp.setStatus('mandatory')
staTcpipNetRemoBac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRemoBac.setStatus('mandatory')
staTcpipNetRemoTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRemoTim.setStatus('mandatory')
staTcpipNetDele = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTcpipNetDele.setStatus('mandatory')
staTcpipDns = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9))
staTcpipDnsLanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsLanr.setStatus('mandatory')
staTcpipDnsLant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsLant.setStatus('mandatory')
staTcpipDnsWanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsWanr.setStatus('mandatory')
staTcpipDnsWant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsWant.setStatus('mandatory')
staTcpipDnsForw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsForw.setStatus('mandatory')
staTcpipDnsErro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsErro.setStatus('mandatory')
staTcpipDnsDnsa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsDnsa.setStatus('mandatory')
staTcpipDnsDhcp = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsDhcp.setStatus('mandatory')
staTcpipDnsNetb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsNetb.setStatus('mandatory')
staTcpipDnsFilt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsFilt.setStatus('mandatory')
staTcpipDnsHitl = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11), )
if mibBuilder.loadTexts: staTcpipDnsHitl.setStatus('mandatory')
staTcpipDnsHitlCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11, 1), ).setIndexNames((0, "ELSA-MIB", "staTcpipDnsHitlDom"))
if mibBuilder.loadTexts: staTcpipDnsHitlCols.setStatus('mandatory')
staTcpipDnsHitlDom = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsHitlDom.setStatus('mandatory')
staTcpipDnsHitlReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsHitlReq.setStatus('mandatory')
staTcpipDnsHitlTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsHitlTim.setStatus('mandatory')
staTcpipDnsHitlIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsHitlIpa.setStatus('mandatory')
staTcpipDnsDele = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipDnsDele.setStatus('mandatory')
staTcpipHtt = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10))
staTcpipHttHttpac = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipHttHttpac.setStatus('mandatory')
staTcpipHttHttpno = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipHttHttpno.setStatus('mandatory')
staTcpipHttHttpau = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipHttHttpau.setStatus('mandatory')
staTcpipHttHttppr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipHttHttppr.setStatus('mandatory')
staTcpipHttDelete = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTcpipHttDelete.setStatus('mandatory')
staIprou = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10))
staIprouIprlanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlanrx.setStatus('mandatory')
staIprouIprlantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlantx.setStatus('mandatory')
staIprouIprlanlo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlanlo.setStatus('mandatory')
staIprouIprlanne = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlanne.setStatus('mandatory')
staIprouIprlanro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlanro.setStatus('mandatory')
staIprouIprlantt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlantt.setStatus('mandatory')
staIprouIprlanfi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlanfi.setStatus('mandatory')
staIprouIprlandi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlandi.setStatus('mandatory')
staIprouIprwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwanrx.setStatus('mandatory')
staIprouIprwantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwantx.setStatus('mandatory')
staIprouIprwanne = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwanne.setStatus('mandatory')
staIprouIprwantt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwantt.setStatus('mandatory')
staIprouIprwanfi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwanfi.setStatus('mandatory')
staIprouIprwandi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwandi.setStatus('mandatory')
staIprouIprwanty = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwanty.setStatus('mandatory')
staIprouIprarper = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprarper.setStatus('mandatory')
staIprouEstablis = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17), )
if mibBuilder.loadTexts: staIprouEstablis.setStatus('mandatory')
staIprouEstablisCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1), ).setIndexNames((0, "ELSA-MIB", "staIprouEstablisTim"))
if mibBuilder.loadTexts: staIprouEstablisCols.setStatus('mandatory')
staIprouEstablisTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisTim.setStatus('mandatory')
staIprouEstablisDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisDes.setStatus('mandatory')
staIprouEstablisSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisSrc.setStatus('mandatory')
staIprouEstablisPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 2, 3, 8, 62))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17), ("igmp", 2), ("ggt", 3), ("egp", 8), ("cftp", 62)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisPro.setStatus('mandatory')
staIprouEstablisDpo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisDpo.setStatus('mandatory')
staIprouEstablisSpo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisSpo.setStatus('mandatory')
staConfi = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11))
staConfiLanactiv = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiLanactiv.setStatus('mandatory')
staConfiLantotal = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiLantotal.setStatus('mandatory')
staConfiWanactiv = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiWanactiv.setStatus('mandatory')
staConfiWantotal = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiWantotal.setStatus('mandatory')
staConfiOutbanda = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiOutbanda.setStatus('mandatory')
staConfiOutbandt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiOutbandt.setStatus('mandatory')
staConfiOutbandb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiOutbandb.setStatus('mandatory')
staConfiLoginerr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiLoginerr.setStatus('mandatory')
staConfiLoginloc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiLoginloc.setStatus('mandatory')
staConfiLoginrej = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiLoginrej.setStatus('mandatory')
staConfiDeleteva = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staConfiDeleteva.setStatus('mandatory')
staQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12))
staQueueLanheap = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueLanheap.setStatus('mandatory')
staQueueLanqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueLanqueu.setStatus('mandatory')
staQueueWanheap = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueWanheap.setStatus('mandatory')
staQueueWanqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueWanqueu.setStatus('mandatory')
staQueueBridgei = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueBridgei.setStatus('mandatory')
staQueueBridgee = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueBridgee.setStatus('mandatory')
staQueueArpquer = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueArpquer.setStatus('mandatory')
staQueueArpqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueArpqueu.setStatus('mandatory')
staQueueIpqueue = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpqueue.setStatus('mandatory')
staQueueIpurgen = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpurgen.setStatus('mandatory')
staQueueIcmpque = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIcmpque.setStatus('mandatory')
staQueueTcpqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueTcpqueu.setStatus('mandatory')
staQueueTftpser = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueTftpser.setStatus('mandatory')
staQueueSnmpque = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueSnmpque.setStatus('mandatory')
staQueueIpxqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpxqueu.setStatus('mandatory')
staQueueRipquer = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueRipquer.setStatus('mandatory')
staQueueSapqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueSapqueu.setStatus('mandatory')
staQueueIpxwatc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpxwatc.setStatus('mandatory')
staQueueSpxwatc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueSpxwatc.setStatus('mandatory')
staQueueIpxrout = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpxrout.setStatus('mandatory')
staQueueProthea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueProthea.setStatus('mandatory')
staQueueIprqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIprqueu.setStatus('mandatory')
staQueueDhcpser = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueDhcpser.setStatus('mandatory')
staQueueDhcpcli = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueDhcpcli.setStatus('mandatory')
staQueueIprripq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIprripq.setStatus('mandatory')
staQueueDnstxqu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueDnstxqu.setStatus('mandatory')
staQueueDnsrxqu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueDnsrxqu.setStatus('mandatory')
staQueueIpmasqt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpmasqt.setStatus('mandatory')
staQueueIpmasqr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpmasqr.setStatus('mandatory')
staConns = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13), )
if mibBuilder.loadTexts: staConns.setStatus('mandatory')
staConnsCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1), ).setIndexNames((0, "ELSA-MIB", "staConnsIfc"))
if mibBuilder.loadTexts: staConnsCols.setStatus('mandatory')
staConnsIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsIfc.setStatus('mandatory')
staConnsConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsConn.setStatus('mandatory')
staConnsActi = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsActi.setStatus('mandatory')
staConnsPass = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsPass.setStatus('mandatory')
staConnsErro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsErro.setStatus('mandatory')
staConnsCont = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsCont.setStatus('mandatory')
staConnsChar = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsChar.setStatus('mandatory')
staInfoc = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14), )
if mibBuilder.loadTexts: staInfoc.setStatus('mandatory')
staInfocCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1), ).setIndexNames((0, "ELSA-MIB", "staInfocIfc"))
if mibBuilder.loadTexts: staInfocCols.setStatus('mandatory')
staInfocIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocIfc.setStatus('mandatory')
staInfocSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocSta.setStatus('mandatory')
staInfocMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 9))).clone(namedValues=NamedValues(("unknown", 0), ("active", 4), ("passive", 5), ("callback", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocMod.setStatus('mandatory')
staInfocDia = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocDia.setStatus('mandatory')
staInfocDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocDev.setStatus('mandatory')
staInfocB1d = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocB1d.setStatus('mandatory')
staInfocB2d = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocB2d.setStatus('mandatory')
staLayer = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15), )
if mibBuilder.loadTexts: staLayer.setStatus('mandatory')
staLayerCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1), ).setIndexNames((0, "ELSA-MIB", "staLayerIfc"))
if mibBuilder.loadTexts: staLayerCols.setStatus('mandatory')
staLayerIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerIfc.setStatus('mandatory')
staLayerWanl = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerWanl.setStatus('mandatory')
staLayerEnca = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255))).clone(namedValues=NamedValues(("ether", 0), ("trans", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerEnca.setStatus('mandatory')
staLayerLay3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 0, 255))).clone(namedValues=NamedValues(("ppp", 4), ("appp", 5), ("scppp", 6), ("scappp", 7), ("sctrans", 8), ("elsa", 0), ("trans", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerLay3.setStatus('mandatory')
staLayerLay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 5, 0, 1))).clone(namedValues=NamedValues(("sscop", 6), ("pppoe", 5), ("x75lapb", 0), ("trans", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerLay2.setStatus('mandatory')
staLayerL2op = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 2))).clone(namedValues=NamedValues(("none", 255), ("compr", 0), ("bundle", 1), ("bnd-and-cmpr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerL2op.setStatus('mandatory')
staLayerLay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 0, 1, 3, 67, 131, 5))).clone(namedValues=NamedValues(("aal-5", 2), ("eth-10", 4), ("hdlc64k", 0), ("hdlc56k", 1), ("v110-9k6", 3), ("v110-19k2", 67), ("v110-38k4", 131), ("modem", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerLay1.setStatus('mandatory')
staLayerL1pa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("none", 0), ("v21-300", 1), ("v23-600", 2), ("v23-1200", 3), ("v22-1200", 4), ("v22bis-2400", 5), ("v32qam-4800", 6), ("v32qam-9600", 7), ("v32bis-7200", 8), ("v32tcm-9600", 9), ("v32bis-12000", 10), ("v32bis-14400", 11), ("v34-2400", 12), ("v34-4800", 13), ("v34-7200", 14), ("v34-9600", 15), ("v34-12000", 16), ("v34-14400", 17), ("v34-16800", 18), ("v34-19200", 19), ("v34-21600", 20), ("v34-24000", 21), ("v34-26400", 22), ("v34-28800", 23), ("v34-31200", 24), ("v34-33600", 25), ("v90-28000", 26), ("v90-29333", 27), ("v90-30667", 28), ("v90-32000", 29), ("v90-33333", 30), ("v90-34667", 31), ("v90-36000", 32), ("v90-37333", 33), ("v90-38667", 34), ("v90-40000", 35), ("v90-41333", 36), ("v90-42667", 37), ("v90-44000", 38), ("v90-45333", 39), ("v90-46667", 40), ("v90-48000", 41), ("v90-49333", 42), ("v90-50667", 43), ("v90-52000", 44), ("v90-53333", 45), ("v90-54667", 46), ("v90-56000", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerL1pa.setStatus('mandatory')
staCalli = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16), )
if mibBuilder.loadTexts: staCalli.setStatus('mandatory')
staCalliCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1), ).setIndexNames((0, "ELSA-MIB", "staCalliSys"))
if mibBuilder.loadTexts: staCalliCols.setStatus('mandatory')
staCalliSys = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliSys.setStatus('mandatory')
staCalliIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliIfc.setStatus('mandatory')
staCalliCli = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliCli.setStatus('mandatory')
staCalliDia = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliDia.setStatus('mandatory')
staCalliCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 3, 67, 131, 5, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 255), ("hdlc64k", 0), ("hdlc56k", 1), ("v110-9k6", 3), ("v110-19k2", 67), ("v110-38k4", 131), ("modem", 5), ("a-3-1khz", 13), ("speech", 14), ("fax-g2-3", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliCap.setStatus('mandatory')
staCalliBch = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliBch.setStatus('mandatory')
staRemot = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17), )
if mibBuilder.loadTexts: staRemot.setStatus('mandatory')
staRemotCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1), ).setIndexNames((0, "ELSA-MIB", "staRemotConns"))
if mibBuilder.loadTexts: staRemotCols.setStatus('mandatory')
staRemotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotConns.setStatus('mandatory')
staRemotRemot = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotRemot.setStatus('mandatory')
staRemotMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 9))).clone(namedValues=NamedValues(("unknown", 0), ("active", 4), ("passive", 5), ("callback", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotMode.setStatus('mandatory')
staRemotIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotIfc.setStatus('mandatory')
staRemotConnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotConnt.setStatus('mandatory')
staRemotCharg = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotCharg.setStatus('mandatory')
staS0bus = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23))
staS0busDin = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1), )
if mibBuilder.loadTexts: staS0busDin.setStatus('mandatory')
staS0busDinCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1), ).setIndexNames((0, "ELSA-MIB", "staS0busDinCha"))
if mibBuilder.loadTexts: staS0busDinCols.setStatus('mandatory')
staS0busDinCha = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busDinCha.setStatus('mandatory')
staS0busDinPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 255))).clone(namedValues=NamedValues(("dss1", 1), ("tr1-6", 2), ("p2p-dss1", 4), ("auto", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busDinPro.setStatus('mandatory')
staS0busDinLay = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busDinLay.setStatus('mandatory')
staS0busDinTei = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busDinTei.setStatus('mandatory')
staS0busDinS0a = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busDinS0a.setStatus('mandatory')
staS0busD2s = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3), )
if mibBuilder.loadTexts: staS0busD2s.setStatus('mandatory')
staS0busD2sCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3, 1), ).setIndexNames((0, "ELSA-MIB", "staS0busD2sCha"))
if mibBuilder.loadTexts: staS0busD2sCols.setStatus('mandatory')
staS0busD2sCha = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-1", 2), ("s0-2", 3), ("s0-2", 4), ("s0-3", 5), ("s0-3", 6), ("s0-4", 7), ("s0-4", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busD2sCha.setStatus('mandatory')
staS0busD2sTei = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128))).clone(namedValues=NamedValues(("none", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busD2sTei.setStatus('mandatory')
staS0busD2sL2a = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busD2sL2a.setStatus('mandatory')
staS0busD2sCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busD2sCon.setStatus('mandatory')
staChann = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19), )
if mibBuilder.loadTexts: staChann.setStatus('mandatory')
staChannCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1), ).setIndexNames((0, "ELSA-MIB", "staChannChan"))
if mibBuilder.loadTexts: staChannCols.setStatus('mandatory')
staChannChan = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("s0-1-err", 1), ("s0-1-b1", 2), ("s0-1-b2", 3), ("ab-err", 4), ("ab-1", 5), ("ab-2", 6), ("ab-3", 7), ("ab-4", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannChan.setStatus('mandatory')
staChannPlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannPlci.setStatus('mandatory')
staChannBus = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannBus.setStatus('mandatory')
staChannState = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannState.setStatus('mandatory')
staChannApp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("none", 0), ("router", 1), ("capi", 2), ("a-b", 3), ("time-module", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannApp.setStatus('mandatory')
staChannMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unk", 0), ("act", 1), ("pas", 2), ("perm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannMode.setStatus('mandatory')
staChannCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staChannCause.setStatus('mandatory')
staChannNumbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannNumbe.setStatus('mandatory')
staChannSubad = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannSubad.setStatus('mandatory')
staChannCharg = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannCharg.setStatus('mandatory')
staChannConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannConns.setStatus('mandatory')
staChannConnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannConnt.setStatus('mandatory')
staChannExtra = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannExtra.setStatus('mandatory')
staChannIsdnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannIsdnd.setStatus('mandatory')
staTimes = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21))
staTimesCur = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesCur.setStatus('mandatory')
staTimesSou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 0))).clone(namedValues=NamedValues(("manual", 1), ("isdn", 2), ("lan", 3), ("ram", 4), ("lanconfig", 8), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesSou.setStatus('mandatory')
staTimesSet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesSet.setStatus('mandatory')
staTimesIsd = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4))
staTimesIsdConne = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesIsdConne.setStatus('mandatory')
staTimesIsdInfor = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesIsdInfor.setStatus('mandatory')
staTimesIsdInfoe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesIsdInfoe.setStatus('mandatory')
staTimesIsdUnits = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesIsdUnits.setStatus('mandatory')
staTimesIsdDelet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTimesIsdDelet.setStatus('mandatory')
staLcrst = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22))
staLcrstTot = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstTot.setStatus('mandatory')
staLcrstFou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstFou.setStatus('mandatory')
staLcrstNot = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstNot.setStatus('mandatory')
staLcrstMis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstMis.setStatus('mandatory')
staLcrstPro = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 6), )
if mibBuilder.loadTexts: staLcrstPro.setStatus('mandatory')
staLcrstProCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 6, 1), ).setIndexNames((0, "ELSA-MIB", "staLcrstProPro"))
if mibBuilder.loadTexts: staLcrstProCols.setStatus('mandatory')
staLcrstProPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstProPro.setStatus('mandatory')
staLcrstProFai = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstProFai.setStatus('mandatory')
staLcrstProSuc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstProSuc.setStatus('mandatory')
staLcrstDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staLcrstDel.setStatus('mandatory')
staCharg = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24))
staChargSpareda = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargSpareda.setStatus('mandatory')
staChargSpareun = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargSpareun.setStatus('mandatory')
staChargRouteru = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargRouteru.setStatus('mandatory')
staChargTotalun = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTotalun.setStatus('mandatory')
staChargSparemi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargSparemi.setStatus('mandatory')
staChargRouterm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargRouterm.setStatus('mandatory')
staChargTablebu = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5), )
if mibBuilder.loadTexts: staChargTablebu.setStatus('mandatory')
staChargTablebuCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5, 1), ).setIndexNames((0, "ELSA-MIB", "staChargTablebuIfc"))
if mibBuilder.loadTexts: staChargTablebuCols.setStatus('mandatory')
staChargTablebuIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("router", 1), ("lancapi", 2), ("ab-1", 3), ("ab-2", 4), ("ab-3", 5), ("ab-4", 6), ("time-modul", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTablebuIfc.setStatus('mandatory')
staChargTablebuBud = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTablebuBud.setStatus('mandatory')
staChargTablebuSpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTablebuSpa.setStatus('mandatory')
staChargTablebuTot = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTablebuTot.setStatus('mandatory')
staChargTimetab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2), )
if mibBuilder.loadTexts: staChargTimetab.setStatus('mandatory')
staChargTimetabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1), ).setIndexNames((0, "ELSA-MIB", "staChargTimetabIfc"))
if mibBuilder.loadTexts: staChargTimetabCols.setStatus('mandatory')
staChargTimetabIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("router", 1), ("lancapi", 2), ("ab-1", 3), ("ab-2", 4), ("ab-3", 5), ("ab-4", 6), ("time-Modul", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTimetabIfc.setStatus('mandatory')
staChargTimetabBudgetmi = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTimetabBudgetmi.setStatus('mandatory')
staChargTimetabSparemin = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTimetabSparemin.setStatus('mandatory')
staChargTimetabMinutesa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTimetabMinutesa.setStatus('mandatory')
staChargTimetabMinutesp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTimetabMinutesp.setStatus('mandatory')
staChargDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 3), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staChargDeletev.setStatus('mandatory')
staDelet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 20), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staDelet.setStatus('mandatory')
staDhcpc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32))
staDhcpcState = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("idle", 0), ("init-reboot", 1), ("rebooting", 2), ("init", 3), ("selecting", 4), ("request", 5), ("wait-arp-request", 6), ("bound", 7), ("renewing", 8), ("rebinding", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcState.setStatus('mandatory')
staDhcpcLeaseti = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcLeaseti.setStatus('mandatory')
staDhcpcYouripa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcYouripa.setStatus('mandatory')
staDhcpcYouripn = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcYouripn.setStatus('mandatory')
staDhcpcGateway = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcGateway.setStatus('mandatory')
staDhcpcServeri = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcServeri.setStatus('mandatory')
staDhcpcSecurit = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcSecurit.setStatus('mandatory')
staDhcpcTimeoff = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTimeoff.setStatus('mandatory')
staDhcpcTimeser = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTimeser.setStatus('mandatory')
staDhcpcTableti = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 10), )
if mibBuilder.loadTexts: staDhcpcTableti.setStatus('mandatory')
staDhcpcTabletiCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 10, 1), ).setIndexNames((0, "ELSA-MIB", "staDhcpcTabletiIpa"))
if mibBuilder.loadTexts: staDhcpcTabletiCols.setStatus('mandatory')
staDhcpcTabletiIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTabletiIpa.setStatus('mandatory')
staDhcpcTablero = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 11), )
if mibBuilder.loadTexts: staDhcpcTablero.setStatus('mandatory')
staDhcpcTableroCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 11, 1), ).setIndexNames((0, "ELSA-MIB", "staDhcpcTableroIpa"))
if mibBuilder.loadTexts: staDhcpcTableroCols.setStatus('mandatory')
staDhcpcTableroIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTableroIpa.setStatus('mandatory')
staDhcpcTablena = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 12), )
if mibBuilder.loadTexts: staDhcpcTablena.setStatus('mandatory')
staDhcpcTablenaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 12, 1), ).setIndexNames((0, "ELSA-MIB", "staDhcpcTablenaIpa"))
if mibBuilder.loadTexts: staDhcpcTablenaCols.setStatus('mandatory')
staDhcpcTablenaIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTablenaIpa.setStatus('mandatory')
staDhcpcTabledo = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 13), )
if mibBuilder.loadTexts: staDhcpcTabledo.setStatus('mandatory')
staDhcpcTabledoCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 13, 1), ).setIndexNames((0, "ELSA-MIB", "staDhcpcTabledoIpa"))
if mibBuilder.loadTexts: staDhcpcTabledoCols.setStatus('mandatory')
staDhcpcTabledoIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTabledoIpa.setStatus('mandatory')
staDhcpcTablelo = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 14), )
if mibBuilder.loadTexts: staDhcpcTablelo.setStatus('mandatory')
staDhcpcTableloCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 14, 1), ).setIndexNames((0, "ELSA-MIB", "staDhcpcTableloIpa"))
if mibBuilder.loadTexts: staDhcpcTableloCols.setStatus('mandatory')
staDhcpcTableloIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTableloIpa.setStatus('mandatory')
staDhcpcConfigu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcConfigu.setStatus('mandatory')
setName = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setName.setStatus('mandatory')
setWanm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2))
setWanmInte = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14), )
if mibBuilder.loadTexts: setWanmInte.setStatus('mandatory')
setWanmInteCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmInteIfc"))
if mibBuilder.loadTexts: setWanmInteCols.setStatus('mandatory')
setWanmInteIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setWanmInteIfc.setStatus('mandatory')
setWanmInteProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 255))).clone(namedValues=NamedValues(("dss1", 1), ("ltr6", 2), ("p2p-dss1", 4), ("auto", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteProt.setStatus('mandatory')
setWanmInteLlmo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteLlmo.setStatus('mandatory')
setWanmInteLlbc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("b1", 1), ("b2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteLlbc.setStatus('mandatory')
setWanmInteDial = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteDial.setStatus('mandatory')
setWanmInteMaxi = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("zero", 2), ("one", 1), ("two", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteMaxi.setStatus('mandatory')
setWanmInteMaxo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("zero", 2), ("one", 1), ("two", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteMaxo.setStatus('mandatory')
setWanmRout = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11), )
if mibBuilder.loadTexts: setWanmRout.setStatus('mandatory')
setWanmRoutCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmRoutIfc"))
if mibBuilder.loadTexts: setWanmRoutCols.setStatus('mandatory')
setWanmRoutIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setWanmRoutIfc.setStatus('mandatory')
setWanmRoutMsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRoutMsn.setStatus('mandatory')
setWanmRoutYc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRoutYc.setStatus('mandatory')
setWanmRoutCli = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRoutCli.setStatus('mandatory')
setWanmName = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2), )
if mibBuilder.loadTexts: setWanmName.setStatus('mandatory')
setWanmNameCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmNameDev"))
if mibBuilder.loadTexts: setWanmNameCols.setStatus('mandatory')
setWanmNameDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameDev.setStatus('mandatory')
setWanmNameDia = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameDia.setStatus('mandatory')
setWanmNameB1d = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameB1d.setStatus('mandatory')
setWanmNameB2d = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameB2d.setStatus('mandatory')
setWanmNameWan = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameWan.setStatus('mandatory')
setWanmNameCal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 5, 9, 2))).clone(namedValues=NamedValues(("off", 0), ("auto", 1), ("name", 5), ("elsa", 9), ("looser", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameCal.setStatus('mandatory')
setWanmRoun = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 3), )
if mibBuilder.loadTexts: setWanmRoun.setStatus('mandatory')
setWanmRounCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmRounDev"))
if mibBuilder.loadTexts: setWanmRounCols.setStatus('mandatory')
setWanmRounDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRounDev.setStatus('mandatory')
setWanmRounRou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRounRou.setStatus('mandatory')
setWanmRounHea = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("last", 0), ("first", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRounHea.setStatus('mandatory')
setWanmLaye = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4), )
if mibBuilder.loadTexts: setWanmLaye.setStatus('mandatory')
setWanmLayeCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmLayeWanl"))
if mibBuilder.loadTexts: setWanmLayeCols.setStatus('mandatory')
setWanmLayeWanl = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeWanl.setStatus('mandatory')
setWanmLayeEnca = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255))).clone(namedValues=NamedValues(("ether", 0), ("trans", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeEnca.setStatus('mandatory')
setWanmLayeLay3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 0, 255))).clone(namedValues=NamedValues(("ppp", 4), ("appp", 5), ("scppp", 6), ("scappp", 7), ("sctrans", 8), ("elsa", 0), ("trans", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeLay3.setStatus('mandatory')
setWanmLayeLay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x75lapb", 0), ("trans", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeLay2.setStatus('mandatory')
setWanmLayeL2op = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 2))).clone(namedValues=NamedValues(("none", 255), ("compr", 0), ("bundle", 1), ("bnd-and-cmpr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeL2op.setStatus('mandatory')
setWanmLayeLay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 67, 131))).clone(namedValues=NamedValues(("hdlc64k", 0), ("hdlc56k", 1), ("v110-9k6", 3), ("v110-19k2", 67), ("v110-38k4", 131)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeLay1.setStatus('mandatory')
setWanmPppl = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5), )
if mibBuilder.loadTexts: setWanmPppl.setStatus('mandatory')
setWanmPpplCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmPpplDev"))
if mibBuilder.loadTexts: setWanmPpplCols.setStatus('mandatory')
setWanmPpplDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplDev.setStatus('mandatory')
setWanmPpplAut = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 4))).clone(namedValues=NamedValues(("none", 0), ("chap", 8), ("pap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplAut.setStatus('mandatory')
setWanmPpplKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplKey.setStatus('mandatory')
setWanmPpplTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplTim.setStatus('mandatory')
setWanmPpplTry = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplTry.setStatus('mandatory')
setWanmPpplCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplCon.setStatus('mandatory')
setWanmPpplFai = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplFai.setStatus('mandatory')
setWanmPpplTer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplTer.setStatus('mandatory')
setWanmPpplUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplUse.setStatus('mandatory')
setWanmNumb = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 6), )
if mibBuilder.loadTexts: setWanmNumb.setStatus('mandatory')
setWanmNumbCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmNumbDia"))
if mibBuilder.loadTexts: setWanmNumbCols.setStatus('mandatory')
setWanmNumbDia = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 6, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNumbDia.setStatus('mandatory')
setWanmNumbDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNumbDev.setStatus('mandatory')
setWanmScri = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 8), )
if mibBuilder.loadTexts: setWanmScri.setStatus('mandatory')
setWanmScriCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 8, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmScriDev"))
if mibBuilder.loadTexts: setWanmScriCols.setStatus('mandatory')
setWanmScriDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 8, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmScriDev.setStatus('mandatory')
setWanmScriScr = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmScriScr.setStatus('mandatory')
setWanmProt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("name", 1), ("number", 2), ("noname", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmProt.setStatus('mandatory')
setWanmCbat = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmCbat.setStatus('mandatory')
setWanmManu = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 13))
setWanmManuCon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 13, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: setWanmManuCon.setStatus('mandatory')
setWanmManuDis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 13, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: setWanmManuDis.setStatus('mandatory')
setWanmDial = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: setWanmDial.setStatus('mandatory')
setAcco = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18))
setAccoOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAccoOpe.setStatus('mandatory')
setAccoSav = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAccoSav.setStatus('mandatory')
setAccoSor = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("time", 0), ("data", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAccoSor.setStatus('mandatory')
setAccoCur = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4), )
if mibBuilder.loadTexts: setAccoCur.setStatus('mandatory')
setAccoCurCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1), ).setIndexNames((0, "ELSA-MIB", "setAccoCurUsern"))
if mibBuilder.loadTexts: setAccoCurCols.setStatus('mandatory')
setAccoCurUsern = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurUsern.setStatus('mandatory')
setAccoCurMacad = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurMacad.setStatus('mandatory')
setAccoCurRemot = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurRemot.setStatus('mandatory')
setAccoCurConnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("dial-up", 1), ("leased-line", 2), ("dsl-line", 4), ("lancapi", 5), ("ab-ports", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurConnt.setStatus('mandatory')
setAccoCurRxkby = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurRxkby.setStatus('mandatory')
setAccoCurTxkby = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurTxkby.setStatus('mandatory')
setAccoCurTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurTotal.setStatus('mandatory')
setAccoCurConne = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurConne.setStatus('mandatory')
setAccoAcc = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5), )
if mibBuilder.loadTexts: setAccoAcc.setStatus('mandatory')
setAccoAccCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setAccoAccUsern"))
if mibBuilder.loadTexts: setAccoAccCols.setStatus('mandatory')
setAccoAccUsern = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccUsern.setStatus('mandatory')
setAccoAccMacad = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccMacad.setStatus('mandatory')
setAccoAccRemot = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccRemot.setStatus('mandatory')
setAccoAccConnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("dial-up", 1), ("leased-line", 2), ("dsl-line", 4), ("lancapi", 5), ("ab-ports", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccConnt.setStatus('mandatory')
setAccoAccRxkby = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccRxkby.setStatus('mandatory')
setAccoAccTxkby = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccTxkby.setStatus('mandatory')
setAccoAccTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccTotal.setStatus('mandatory')
setAccoAccConne = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccConne.setStatus('mandatory')
setAccoDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: setAccoDel.setStatus('mandatory')
setChar = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3))
setCharDaysper = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCharDaysper.setStatus('mandatory')
setCharBudgetu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCharBudgetu.setStatus('mandatory')
setCharSpareun = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharSpareun.setStatus('mandatory')
setCharRouteru = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharRouteru.setStatus('mandatory')
setCharTotalun = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTotalun.setStatus('mandatory')
setCharTablebu = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5), )
if mibBuilder.loadTexts: setCharTablebu.setStatus('mandatory')
setCharTablebuCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setCharTablebuIfc"))
if mibBuilder.loadTexts: setCharTablebuCols.setStatus('mandatory')
setCharTablebuIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("router", 1), ("lancapi", 2), ("ab-1", 3), ("ab-2", 4), ("ab-3", 5), ("ab-4", 6), ("time-Modul", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTablebuIfc.setStatus('mandatory')
setCharTablebuBud = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTablebuBud.setStatus('mandatory')
setCharTablebuSpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTablebuSpa.setStatus('mandatory')
setCharTablebuTot = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTablebuTot.setStatus('mandatory')
setCharTimetab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7), )
if mibBuilder.loadTexts: setCharTimetab.setStatus('mandatory')
setCharTimetabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1), ).setIndexNames((0, "ELSA-MIB", "setCharTimetabIfc"))
if mibBuilder.loadTexts: setCharTimetabCols.setStatus('mandatory')
setCharTimetabIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("router", 1), ("lancapi", 2), ("ab-1", 3), ("ab-2", 4), ("ab-3", 5), ("ab-4", 6), ("time-Modul", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTimetabIfc.setStatus('mandatory')
setCharTimetabBudgetmi = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTimetabBudgetmi.setStatus('mandatory')
setCharTimetabSparemin = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTimetabSparemin.setStatus('mandatory')
setCharTimetabMinutesa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTimetabMinutesa.setStatus('mandatory')
setCharTimetabMinutesp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTimetabMinutesp.setStatus('mandatory')
setCharMinutes = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCharMinutes.setStatus('mandatory')
setCharSparemi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharSparemi.setStatus('mandatory')
setCharRouterm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharRouterm.setStatus('mandatory')
setLanm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 4))
setLanmCon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 33, 35))).clone(namedValues=NamedValues(("ten-bt", 32), ("ten-b2", 33), ("auto", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLanmCon.setStatus('mandatory')
setLanmNod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setLanmNod.setStatus('mandatory')
setLanmSpa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLanmSpa.setStatus('mandatory')
setBrid = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5))
setBridOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridOpe.setStatus('mandatory')
setBridRem = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridRem.setStatus('mandatory')
setBridTab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 3), )
if mibBuilder.loadTexts: setBridTab.setStatus('mandatory')
setBridTabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setBridTabNod"))
if mibBuilder.loadTexts: setBridTabCols.setStatus('mandatory')
setBridTabNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setBridTabNod.setStatus('mandatory')
setBridTabLas = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setBridTabLas.setStatus('mandatory')
setBridTabFor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setBridTabFor.setStatus('mandatory')
setBridAgi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridAgi.setStatus('mandatory')
setBridLan = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5))
setBridLanBro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("semi", 2), ("positive", 1), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanBro.setStatus('mandatory')
setBridLanMul = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("semi", 2), ("positive", 1), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanMul.setStatus('mandatory')
setBridLanDes = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 3))
setBridLanDesFilterty = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 0))).clone(namedValues=NamedValues(("positive", 4), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanDesFilterty.setStatus('mandatory')
setBridLanDesFilterta = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 3, 2), )
if mibBuilder.loadTexts: setBridLanDesFilterta.setStatus('mandatory')
setBridLanDesFiltertaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 3, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setBridLanDesFiltertaDes"))
if mibBuilder.loadTexts: setBridLanDesFiltertaCols.setStatus('mandatory')
setBridLanDesFiltertaDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 3, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanDesFiltertaDes.setStatus('mandatory')
setBridLanSrc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 4))
setBridLanSrcFilterty = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 0))).clone(namedValues=NamedValues(("positive", 8), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanSrcFilterty.setStatus('mandatory')
setBridLanSrcFilterta = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 4, 2), )
if mibBuilder.loadTexts: setBridLanSrcFilterta.setStatus('mandatory')
setBridLanSrcFiltertaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 4, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setBridLanSrcFiltertaSrc"))
if mibBuilder.loadTexts: setBridLanSrcFiltertaCols.setStatus('mandatory')
setBridLanSrcFiltertaSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanSrcFiltertaSrc.setStatus('mandatory')
setBridWan = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6))
setBridWanBro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("semi", 2), ("positive", 1), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanBro.setStatus('mandatory')
setBridWanMul = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("semi", 2), ("positive", 1), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanMul.setStatus('mandatory')
setBridWanDes = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 3))
setBridWanDesFilterty = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("positive", 1), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanDesFilterty.setStatus('mandatory')
setBridWanDesFilterta = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 3, 2), )
if mibBuilder.loadTexts: setBridWanDesFilterta.setStatus('mandatory')
setBridWanDesFiltertaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 3, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setBridWanDesFiltertaDes"))
if mibBuilder.loadTexts: setBridWanDesFiltertaCols.setStatus('mandatory')
setBridWanDesFiltertaDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 3, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanDesFiltertaDes.setStatus('mandatory')
setBridWanSrc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 4))
setBridWanSrcFilterty = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 0))).clone(namedValues=NamedValues(("positive", 2), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanSrcFilterty.setStatus('mandatory')
setBridWanSrcFilterta = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 4, 2), )
if mibBuilder.loadTexts: setBridWanSrcFilterta.setStatus('mandatory')
setBridWanSrcFiltertaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 4, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setBridWanSrcFiltertaDes"))
if mibBuilder.loadTexts: setBridWanSrcFiltertaCols.setStatus('mandatory')
setBridWanSrcFiltertaDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanSrcFiltertaDes.setStatus('mandatory')
setIpxm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6))
setIpxmOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmOpe.setStatus('mandatory')
setIpxmIpx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmIpx.setStatus('mandatory')
setIpxmLan = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3))
setIpxmLanNetw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanNetw.setStatus('mandatory')
setIpxmLanBind = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("auto", 0), ("ii", 1), ("dot802-3", 2), ("dot802-2", 4), ("snap", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanBind.setStatus('mandatory')
setIpxmLanSpxw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 0, 1))).clone(namedValues=NamedValues(("filter", 3), ("spoof", 0), ("route", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanSpxw.setStatus('mandatory')
setIpxmLanIpxw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("spoof", 0), ("route", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanIpxw.setStatus('mandatory')
setIpxmLanNetb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 1))).clone(namedValues=NamedValues(("spoof", 0), ("route", 3), ("filter", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanNetb.setStatus('mandatory')
setIpxmLanSock = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 6), )
if mibBuilder.loadTexts: setIpxmLanSock.setStatus('mandatory')
setIpxmLanSockCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmLanSockSta"))
if mibBuilder.loadTexts: setIpxmLanSockCols.setStatus('mandatory')
setIpxmLanSockSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 6, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanSockSta.setStatus('mandatory')
setIpxmLanSockEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanSockEnd.setStatus('mandatory')
setIpxmLanLocr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanLocr.setStatus('mandatory')
setIpxmLanRips = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanRips.setStatus('mandatory')
setIpxmLanLoop = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanLoop.setStatus('mandatory')
setIpxmWan = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4))
setIpxmWanRou = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1), )
if mibBuilder.loadTexts: setIpxmWanRou.setStatus('mandatory')
setIpxmWanRouCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmWanRouRem"))
if mibBuilder.loadTexts: setIpxmWanRouCols.setStatus('mandatory')
setIpxmWanRouRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanRouRem.setStatus('mandatory')
setIpxmWanRouNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanRouNet.setStatus('mandatory')
setIpxmWanRouBin = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("ii", 1), ("dot802-3", 2), ("dot802-2", 4), ("snap", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanRouBin.setStatus('mandatory')
setIpxmWanRouPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("filter", 0), ("route", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanRouPro.setStatus('mandatory')
setIpxmWanRouBac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanRouBac.setStatus('mandatory')
setIpxmWanSoc = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 2), )
if mibBuilder.loadTexts: setIpxmWanSoc.setStatus('mandatory')
setIpxmWanSocCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmWanSocSta"))
if mibBuilder.loadTexts: setIpxmWanSocCols.setStatus('mandatory')
setIpxmWanSocSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanSocSta.setStatus('mandatory')
setIpxmWanSocEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanSocEnd.setStatus('mandatory')
setIpxmRip = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5))
setIpxmRipTabl = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1), )
if mibBuilder.loadTexts: setIpxmRipTabl.setStatus('mandatory')
setIpxmRipTablCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmRipTablNet"))
if mibBuilder.loadTexts: setIpxmRipTablCols.setStatus('mandatory')
setIpxmRipTablNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablNet.setStatus('mandatory')
setIpxmRipTablHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablHop.setStatus('mandatory')
setIpxmRipTablTic = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablTic.setStatus('mandatory')
setIpxmRipTablNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablNod.setStatus('mandatory')
setIpxmRipTablTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablTim.setStatus('mandatory')
setIpxmRipTablFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 128, 64, 32, 16, 8))).clone(namedValues=NamedValues(("local", 2), ("remote", 1), ("direct", 128), ("new", 64), ("down", 32), ("loop", 16), ("spare", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablFla.setStatus('mandatory')
setIpxmRipLanf = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 2), )
if mibBuilder.loadTexts: setIpxmRipLanf.setStatus('mandatory')
setIpxmRipLanfCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmRipLanfSta"))
if mibBuilder.loadTexts: setIpxmRipLanfCols.setStatus('mandatory')
setIpxmRipLanfSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipLanfSta.setStatus('mandatory')
setIpxmRipLanfEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipLanfEnd.setStatus('mandatory')
setIpxmRipWanf = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 3), )
if mibBuilder.loadTexts: setIpxmRipWanf.setStatus('mandatory')
setIpxmRipWanfCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmRipWanfSta"))
if mibBuilder.loadTexts: setIpxmRipWanfCols.setStatus('mandatory')
setIpxmRipWanfSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipWanfSta.setStatus('mandatory')
setIpxmRipWanfEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipWanfEnd.setStatus('mandatory')
setIpxmRipRout = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipRout.setStatus('mandatory')
setIpxmRipAgin = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipAgin.setStatus('mandatory')
setIpxmRipSpoo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("trig", 1), ("time", 2), ("pback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipSpoo.setStatus('mandatory')
setIpxmRipWanu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipWanu.setStatus('mandatory')
setIpxmSap = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6))
setIpxmSapTabl = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1), )
if mibBuilder.loadTexts: setIpxmSapTabl.setStatus('mandatory')
setIpxmSapTablCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmSapTablTyp"))
if mibBuilder.loadTexts: setIpxmSapTablCols.setStatus('mandatory')
setIpxmSapTablTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablTyp.setStatus('mandatory')
setIpxmSapTablSer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablSer.setStatus('mandatory')
setIpxmSapTablNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablNet.setStatus('mandatory')
setIpxmSapTablNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablNod.setStatus('mandatory')
setIpxmSapTablSoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablSoc.setStatus('mandatory')
setIpxmSapTablHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablHop.setStatus('mandatory')
setIpxmSapTablTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablTim.setStatus('mandatory')
setIpxmSapTablFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 128, 64, 32, 16, 8))).clone(namedValues=NamedValues(("local", 2), ("remote", 1), ("direct", 128), ("new", 64), ("down", 32), ("loop", 16), ("spare", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablFla.setStatus('mandatory')
setIpxmSapLanf = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 2), )
if mibBuilder.loadTexts: setIpxmSapLanf.setStatus('mandatory')
setIpxmSapLanfCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmSapLanfSta"))
if mibBuilder.loadTexts: setIpxmSapLanfCols.setStatus('mandatory')
setIpxmSapLanfSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapLanfSta.setStatus('mandatory')
setIpxmSapLanfEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapLanfEnd.setStatus('mandatory')
setIpxmSapWanf = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 3), )
if mibBuilder.loadTexts: setIpxmSapWanf.setStatus('mandatory')
setIpxmSapWanfCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmSapWanfSta"))
if mibBuilder.loadTexts: setIpxmSapWanfCols.setStatus('mandatory')
setIpxmSapWanfSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapWanfSta.setStatus('mandatory')
setIpxmSapWanfEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapWanfEnd.setStatus('mandatory')
setIpxmSapServ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapServ.setStatus('mandatory')
setIpxmSapAgin = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapAgin.setStatus('mandatory')
setIpxmSapSpoo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("trig", 1), ("time", 2), ("pback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapSpoo.setStatus('mandatory')
setIpxmSapWanu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapWanu.setStatus('mandatory')
setTcpi = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7))
setTcpiOperating = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiOperating.setStatus('mandatory')
setTcpiIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiIpaddress.setStatus('mandatory')
setTcpiIpnetmask = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiIpnetmask.setStatus('mandatory')
setTcpiIntraneta = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiIntraneta.setStatus('mandatory')
setTcpiIntranetm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiIntranetm.setStatus('mandatory')
setTcpiAccesslis = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 6), )
if mibBuilder.loadTexts: setTcpiAccesslis.setStatus('mandatory')
setTcpiAccesslisCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setTcpiAccesslisIpa"))
if mibBuilder.loadTexts: setTcpiAccesslisCols.setStatus('mandatory')
setTcpiAccesslisIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiAccesslisIpa.setStatus('mandatory')
setTcpiAccesslisIpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiAccesslisIpn.setStatus('mandatory')
setTcpiDnsdefaul = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiDnsdefaul.setStatus('mandatory')
setTcpiDnsbackup = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiDnsbackup.setStatus('mandatory')
setTcpiNbnsdefau = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiNbnsdefau.setStatus('mandatory')
setTcpiNbnsbacku = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiNbnsbacku.setStatus('mandatory')
setTcpiTablearp = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16), )
if mibBuilder.loadTexts: setTcpiTablearp.setStatus('mandatory')
setTcpiTablearpCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16, 1), ).setIndexNames((0, "ELSA-MIB", "setTcpiTablearpIpa"))
if mibBuilder.loadTexts: setTcpiTablearpCols.setStatus('mandatory')
setTcpiTablearpIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTcpiTablearpIpa.setStatus('mandatory')
setTcpiTablearpNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTcpiTablearpNod.setStatus('mandatory')
setTcpiTablearpLas = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTcpiTablearpLas.setStatus('mandatory')
setTcpiTablearpCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("local", 2), ("remote", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTcpiTablearpCon.setStatus('mandatory')
setTcpiArpagingm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiArpagingm.setStatus('mandatory')
setTcpiTcpagingm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiTcpagingm.setStatus('mandatory')
setTcpiTcpmaxcon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiTcpmaxcon.setStatus('mandatory')
setIpro = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8))
setIproOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproOpe.setStatus('mandatory')
setIproIpr = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2), )
if mibBuilder.loadTexts: setIproIpr.setStatus('mandatory')
setIproIprCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setIproIprIpa"))
if mibBuilder.loadTexts: setIproIprCols.setStatus('mandatory')
setIproIprIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproIprIpa.setStatus('mandatory')
setIproIprIpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproIprIpn.setStatus('mandatory')
setIproIprRou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproIprRou.setStatus('mandatory')
setIproIprDis = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproIprDis.setStatus('mandatory')
setIproIprMas = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproIprMas.setStatus('mandatory')
setIproDef = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13), )
if mibBuilder.loadTexts: setIproDef.setStatus('mandatory')
setIproDefCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1), ).setIndexNames((0, "ELSA-MIB", "setIproDefInd"))
if mibBuilder.loadTexts: setIproDefCols.setStatus('mandatory')
setIproDefInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproDefInd.setStatus('mandatory')
setIproDefDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproDefDay.setStatus('mandatory')
setIproDefSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproDefSta.setStatus('mandatory')
setIproDefSto = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproDefSto.setStatus('mandatory')
setIproDefDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproDefDev.setStatus('mandatory')
setIproUsa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproUsa.setStatus('mandatory')
setIproPro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproPro.setStatus('mandatory')
setIproLoc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproLoc.setStatus('mandatory')
setIproRou = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 7))
setIproRouRou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("type-of-service", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproRouRou.setStatus('mandatory')
setIproRouIcm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("reliable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproRouIcm.setStatus('mandatory')
setIproRip = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8))
setIproRipRip = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("rip-1", 1), ("r1-comp", 2), ("rip-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproRipRip.setStatus('mandatory')
setIproRipR1m = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("class", 0), ("address", 1), ("cl-and-addr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproRipR1m.setStatus('mandatory')
setIproRipTab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3), )
if mibBuilder.loadTexts: setIproRipTab.setStatus('mandatory')
setIproRipTabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setIproRipTabIpa"))
if mibBuilder.loadTexts: setIproRipTabCols.setStatus('mandatory')
setIproRipTabIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproRipTabIpa.setStatus('mandatory')
setIproRipTabIpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproRipTabIpn.setStatus('mandatory')
setIproRipTabTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproRipTabTim.setStatus('mandatory')
setIproRipTabDis = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproRipTabDis.setStatus('mandatory')
setIproRipTabRou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproRipTabRou.setStatus('mandatory')
setIproMas = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9))
setIproMasTcpagings = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasTcpagings.setStatus('mandatory')
setIproMasUdpagings = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasUdpagings.setStatus('mandatory')
setIproMasIcmpaging = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasIcmpaging.setStatus('mandatory')
setIproMasServiceta = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 4), )
if mibBuilder.loadTexts: setIproMasServiceta.setStatus('mandatory')
setIproMasServicetaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 4, 1), ).setIndexNames((0, "ELSA-MIB", "setIproMasServicetaDpo"))
if mibBuilder.loadTexts: setIproMasServicetaCols.setStatus('mandatory')
setIproMasServicetaDpo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasServicetaDpo.setStatus('mandatory')
setIproMasServicetaInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasServicetaInt.setStatus('mandatory')
setIproMasTablemasq = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5), )
if mibBuilder.loadTexts: setIproMasTablemasq.setStatus('mandatory')
setIproMasTablemasqCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setIproMasTablemasqInt"))
if mibBuilder.loadTexts: setIproMasTablemasqCols.setStatus('mandatory')
setIproMasTablemasqInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproMasTablemasqInt.setStatus('mandatory')
setIproMasTablemasqSpo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproMasTablemasqSpo.setStatus('mandatory')
setIproMasTablemasqPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("icmp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproMasTablemasqPro.setStatus('mandatory')
setIproMasTablemasqTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproMasTablemasqTim.setStatus('mandatory')
setIproMasFragments = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("filter", 0), ("route", 1), ("reassemble", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasFragments.setStatus('mandatory')
setIproMasFragmenta = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasFragmenta.setStatus('mandatory')
setIproFir = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10))
setIproFirObj = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 1), )
if mibBuilder.loadTexts: setIproFirObj.setStatus('mandatory')
setIproFirObjCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setIproFirObjNam"))
if mibBuilder.loadTexts: setIproFirObjCols.setStatus('mandatory')
setIproFirObjNam = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirObjNam.setStatus('mandatory')
setIproFirObjDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirObjDes.setStatus('mandatory')
setIproFirRul = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2), )
if mibBuilder.loadTexts: setIproFirRul.setStatus('mandatory')
setIproFirRulCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setIproFirRulNam"))
if mibBuilder.loadTexts: setIproFirRulCols.setStatus('mandatory')
setIproFirRulNam = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirRulNam.setStatus('mandatory')
setIproFirRulPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirRulPro.setStatus('mandatory')
setIproFirRulSou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirRulSou.setStatus('mandatory')
setIproFirRulDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirRulDes.setStatus('mandatory')
setIproFirRulAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 1024, 1))).clone(namedValues=NamedValues(("always-filt", 256), ("connect-filt", 512), ("internet-filt", 1024), ("accept", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirRulAct.setStatus('mandatory')
setIproFirFil = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3), )
if mibBuilder.loadTexts: setIproFirFil.setStatus('mandatory')
setIproFirFilCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setIproFirFilIdx"))
if mibBuilder.loadTexts: setIproFirFilCols.setStatus('mandatory')
setIproFirFilIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilIdx.setStatus('mandatory')
setIproFirFilProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilProt.setStatus('mandatory')
setIproFirFilSrca = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilSrca.setStatus('mandatory')
setIproFirFilSrcn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilSrcn.setStatus('mandatory')
setIproFirFilSst = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilSst.setStatus('mandatory')
setIproFirFilSend = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilSend.setStatus('mandatory')
setIproFirFilDsta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilDsta.setStatus('mandatory')
setIproFirFilDstn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilDstn.setStatus('mandatory')
setIproFirFilDst = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilDst.setStatus('mandatory')
setIproFirFilDend = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilDend.setStatus('mandatory')
setIproFirFilActi = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 1024, 1))).clone(namedValues=NamedValues(("always-filt", 256), ("connect-filt", 512), ("internet-filt", 1024), ("accept", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilActi.setStatus('mandatory')
setSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9))
setSnmpSen = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSnmpSen.setStatus('mandatory')
setSnmpIpt = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 2), )
if mibBuilder.loadTexts: setSnmpIpt.setStatus('mandatory')
setSnmpIptCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setSnmpIptTra"))
if mibBuilder.loadTexts: setSnmpIptCols.setStatus('mandatory')
setSnmpIptTra = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSnmpIptTra.setStatus('mandatory')
setSnmpAdm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSnmpAdm.setStatus('mandatory')
setSnmpLoc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSnmpLoc.setStatus('mandatory')
setSnmpPas = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSnmpPas.setStatus('mandatory')
setSnmpReg = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: setSnmpReg.setStatus('mandatory')
setSnmpDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: setSnmpDel.setStatus('mandatory')
setSnmpMon = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7), )
if mibBuilder.loadTexts: setSnmpMon.setStatus('mandatory')
setSnmpMonCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1), ).setIndexNames((0, "ELSA-MIB", "setSnmpMonIpa"))
if mibBuilder.loadTexts: setSnmpMonCols.setStatus('mandatory')
setSnmpMonIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSnmpMonIpa.setStatus('mandatory')
setSnmpMonPor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSnmpMonPor.setStatus('mandatory')
setSnmpMonMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSnmpMonMac.setStatus('mandatory')
setSnmpMonTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSnmpMonTim.setStatus('mandatory')
setSnmpMonDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSnmpMonDev.setStatus('mandatory')
setDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10))
setDhcpOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 16))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("auto", 2), ("relay", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpOpe.setStatus('mandatory')
setDhcpSta = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpSta.setStatus('mandatory')
setDhcpEnd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpEnd.setStatus('mandatory')
setDhcpNet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpNet.setStatus('mandatory')
setDhcpBro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpBro.setStatus('mandatory')
setDhcpGat = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpGat.setStatus('mandatory')
setDhcpMax = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpMax.setStatus('mandatory')
setDhcpDef = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpDef.setStatus('mandatory')
setDhcpTab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8), )
if mibBuilder.loadTexts: setDhcpTab.setStatus('mandatory')
setDhcpTabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1), ).setIndexNames((0, "ELSA-MIB", "setDhcpTabIpa"))
if mibBuilder.loadTexts: setDhcpTabCols.setStatus('mandatory')
setDhcpTabIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDhcpTabIpa.setStatus('mandatory')
setDhcpTabNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDhcpTabNod.setStatus('mandatory')
setDhcpTabTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDhcpTabTim.setStatus('mandatory')
setDhcpTabHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDhcpTabHos.setStatus('mandatory')
setDhcpTabTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 16, 4, 8, 32, 2048))).clone(namedValues=NamedValues(("new", 1), ("new", 2), ("dyn", 16), ("unkn", 4), ("stat", 8), ("bootp", 32), ("relay", 2048)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDhcpTabTyp.setStatus('mandatory')
setDhcpHos = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9), )
if mibBuilder.loadTexts: setDhcpHos.setStatus('mandatory')
setDhcpHosCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9, 1), ).setIndexNames((0, "ELSA-MIB", "setDhcpHosNod"))
if mibBuilder.loadTexts: setDhcpHosCols.setStatus('mandatory')
setDhcpHosNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpHosNod.setStatus('mandatory')
setDhcpHosIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpHosIpa.setStatus('mandatory')
setDhcpHosHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpHosHos.setStatus('mandatory')
setDhcpHosIma = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpHosIma.setStatus('mandatory')
setDhcpAli = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 10), )
if mibBuilder.loadTexts: setDhcpAli.setStatus('mandatory')
setDhcpAliCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 10, 1), ).setIndexNames((0, "ELSA-MIB", "setDhcpAliImagea"))
if mibBuilder.loadTexts: setDhcpAliCols.setStatus('mandatory')
setDhcpAliImagea = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 10, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpAliImagea.setStatus('mandatory')
setDhcpAliImages = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpAliImages.setStatus('mandatory')
setDhcpAliImagef = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpAliImagef.setStatus('mandatory')
setDhcpMas = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpMas.setStatus('mandatory')
setDhcpRep = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpRep.setStatus('mandatory')
setDhcpRel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpRel.setStatus('mandatory')
setDnsm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17))
setDnsmOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmOpe.setStatus('mandatory')
setDnsmDom = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmDom.setStatus('mandatory')
setDnsmDhc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmDhc.setStatus('mandatory')
setDnsmNet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmNet.setStatus('mandatory')
setDnsmDns = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 5), )
if mibBuilder.loadTexts: setDnsmDns.setStatus('mandatory')
setDnsmDnsCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setDnsmDnsHos"))
if mibBuilder.loadTexts: setDnsmDnsCols.setStatus('mandatory')
setDnsmDnsHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmDnsHos.setStatus('mandatory')
setDnsmDnsIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmDnsIpa.setStatus('mandatory')
setDnsmFil = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6), )
if mibBuilder.loadTexts: setDnsmFil.setStatus('mandatory')
setDnsmFilCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setDnsmFilIdx"))
if mibBuilder.loadTexts: setDnsmFilCols.setStatus('mandatory')
setDnsmFilIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmFilIdx.setStatus('mandatory')
setDnsmFilDom = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmFilDom.setStatus('mandatory')
setDnsmFilIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmFilIpa.setStatus('mandatory')
setDnsmFilNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmFilNet.setStatus('mandatory')
setDnsmDyn = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 8), )
if mibBuilder.loadTexts: setDnsmDyn.setStatus('mandatory')
setDnsmDynCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 8, 1), ).setIndexNames((0, "ELSA-MIB", "setDnsmDynHos"))
if mibBuilder.loadTexts: setDnsmDynCols.setStatus('mandatory')
setDnsmDynHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDnsmDynHos.setStatus('mandatory')
setDnsmDynIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDnsmDynIpa.setStatus('mandatory')
setDnsmDynTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDnsmDynTim.setStatus('mandatory')
setDnsmLea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmLea.setStatus('mandatory')
setHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 21))
setHttpDoc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 21, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setHttpDoc.setStatus('mandatory')
setSysl = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22))
setSyslOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslOpe.setStatus('mandatory')
setSyslTab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2), )
if mibBuilder.loadTexts: setSyslTab.setStatus('mandatory')
setSyslTabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setSyslTabIdx"))
if mibBuilder.loadTexts: setSyslTabCols.setStatus('mandatory')
setSyslTabIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslTabIdx.setStatus('mandatory')
setSyslTabIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslTabIpa.setStatus('mandatory')
setSyslTabSou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslTabSou.setStatus('mandatory')
setSyslTabLev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslTabLev.setStatus('mandatory')
setSyslFac = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 3), )
if mibBuilder.loadTexts: setSyslFac.setStatus('mandatory')
setSyslFacCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setSyslFacSou"))
if mibBuilder.loadTexts: setSyslFacCols.setStatus('mandatory')
setSyslFacSou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("system", 1), ("login", 2), ("systemtime", 4), ("console-login", 8), ("connections", 16), ("accounting", 32), ("administration", 64), ("router", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSyslFacSou.setStatus('mandatory')
setSyslFacFac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("kern", 0), ("user", 1), ("mail", 2), ("daemon", 3), ("auth", 4), ("syslog", 5), ("lpr", 6), ("news", 7), ("uucp", 8), ("cron", 9), ("authpriv", 10), ("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslFacFac.setStatus('mandatory')
setSyslPor = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslPor.setStatus('mandatory')
setNetb = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16))
setNetbOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbOpe.setStatus('mandatory')
setNetbSco = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbSco.setStatus('mandatory')
setNetbNtd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbNtd.setStatus('mandatory')
setNetbRem = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 4), )
if mibBuilder.loadTexts: setNetbRem.setStatus('mandatory')
setNetbRemCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 4, 1), ).setIndexNames((0, "ELSA-MIB", "setNetbRemNam"))
if mibBuilder.loadTexts: setNetbRemCols.setStatus('mandatory')
setNetbRemNam = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbRemNam.setStatus('mandatory')
setNetbRemTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("workstation", 1), ("router", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbRemTyp.setStatus('mandatory')
setNetbGro = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5), )
if mibBuilder.loadTexts: setNetbGro.setStatus('mandatory')
setNetbGroCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setNetbGroGro"))
if mibBuilder.loadTexts: setNetbGroCols.setStatus('mandatory')
setNetbGroGro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroGro.setStatus('mandatory')
setNetbGroTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroTyp.setStatus('mandatory')
setNetbGroIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroIpa.setStatus('mandatory')
setNetbGroRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroRem.setStatus('mandatory')
setNetbGroTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroTim.setStatus('mandatory')
setNetbGroFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroFla.setStatus('mandatory')
setNetbHos = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6), )
if mibBuilder.loadTexts: setNetbHos.setStatus('mandatory')
setNetbHosCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setNetbHosNam"))
if mibBuilder.loadTexts: setNetbHosCols.setStatus('mandatory')
setNetbHosNam = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosNam.setStatus('mandatory')
setNetbHosTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosTyp.setStatus('mandatory')
setNetbHosIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosIpa.setStatus('mandatory')
setNetbHosRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosRem.setStatus('mandatory')
setNetbHosTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosTim.setStatus('mandatory')
setNetbHosFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosFla.setStatus('mandatory')
setNetbSer = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7), )
if mibBuilder.loadTexts: setNetbSer.setStatus('mandatory')
setNetbSerCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1), ).setIndexNames((0, "ELSA-MIB", "setNetbSerHos"))
if mibBuilder.loadTexts: setNetbSerCols.setStatus('mandatory')
setNetbSerHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerHos.setStatus('mandatory')
setNetbSerGro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerGro.setStatus('mandatory')
setNetbSerUpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerUpd.setStatus('mandatory')
setNetbSerIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerIpa.setStatus('mandatory')
setNetbSerOsv = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerOsv.setStatus('mandatory')
setNetbSerSmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerSmb.setStatus('mandatory')
setNetbSerSer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerSer.setStatus('mandatory')
setNetbSerRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerRem.setStatus('mandatory')
setNetbSerTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerTim.setStatus('mandatory')
setNetbSerFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerFla.setStatus('mandatory')
setNetbWat = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("spoof", 1), ("route", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbWat.setStatus('mandatory')
setNetbUpd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pback", 0), ("trig", 1), ("time", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbUpd.setStatus('mandatory')
setNetbWan = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbWan.setStatus('mandatory')
setConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11))
setConfLanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 0))).clone(namedValues=NamedValues(("on", 1), ("read", 4), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfLanc.setStatus('mandatory')
setConfWanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 8, 0))).clone(namedValues=NamedValues(("on", 2), ("read", 8), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfWanc.setStatus('mandatory')
setConfPass = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfPass.setStatus('mandatory')
setConfMaxi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfMaxi.setStatus('mandatory')
setConfConf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfConf.setStatus('mandatory')
setConfLogi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfLogi.setStatus('mandatory')
setConfLock = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfLock.setStatus('mandatory')
setConfFarc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfFarc.setStatus('mandatory')
setConfLang = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("english", 1), ("deutsch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfLang.setStatus('mandatory')
setAbmo = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12))
setAbmoPor = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1), )
if mibBuilder.loadTexts: setAbmoPor.setStatus('mandatory')
setAbmoPorCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setAbmoPorPort"))
if mibBuilder.loadTexts: setAbmoPorCols.setStatus('mandatory')
setAbmoPorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ab-1", 1), ("ab-2", 2), ("ab-3", 3), ("ab-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAbmoPorPort.setStatus('mandatory')
setAbmoPorDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("phone", 1), ("fax", 2), ("modem", 3), ("answ-mach", 4), ("combi", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorDevice.setStatus('mandatory')
setAbmoPorEazmsns = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorEazmsns.setStatus('mandatory')
setAbmoPorCapab = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 2, 4))).clone(namedValues=NamedValues(("speech", 1), ("a-3-1khz", 8), ("modem", 2), ("fax-g2-3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorCapab.setStatus('mandatory')
setAbmoPorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorMode.setStatus('mandatory')
setAbmoPorClip = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorClip.setStatus('mandatory')
setAbmoPorAutodialf = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorAutodialf.setStatus('mandatory')
setAbmoPorAutodialn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorAutodialn.setStatus('mandatory')
setAbmoPub = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6), )
if mibBuilder.loadTexts: setAbmoPub.setStatus('mandatory')
setAbmoPubCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setAbmoPubPor"))
if mibBuilder.loadTexts: setAbmoPubCols.setStatus('mandatory')
setAbmoPubPor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ab-1", 1), ("ab-2", 2), ("ab-3", 3), ("ab-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAbmoPubPor.setStatus('mandatory')
setAbmoPubOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("private", 1), ("public", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPubOff.setStatus('mandatory')
setAbmoPubFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("private", 1), ("public", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPubFla.setStatus('mandatory')
setAbmoPubExc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPubExc.setStatus('mandatory')
setAbmoCla = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7), )
if mibBuilder.loadTexts: setAbmoCla.setStatus('mandatory')
setAbmoClaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7, 1), ).setIndexNames((0, "ELSA-MIB", "setAbmoClaPort"))
if mibBuilder.loadTexts: setAbmoClaCols.setStatus('mandatory')
setAbmoClaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ab-1", 1), ("ab-2", 2), ("ab-3", 3), ("ab-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAbmoClaPort.setStatus('mandatory')
setAbmoClaClassofservice = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoClaClassofservice.setStatus('mandatory')
setAbmoClaBlockednumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoClaBlockednumber1.setStatus('mandatory')
setAbmoClaBlockednumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoClaBlockednumber2.setStatus('mandatory')
setAbmoPri = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 8), )
if mibBuilder.loadTexts: setAbmoPri.setStatus('mandatory')
setAbmoPriCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 8, 1), ).setIndexNames((0, "ELSA-MIB", "setAbmoPriPor"))
if mibBuilder.loadTexts: setAbmoPriCols.setStatus('mandatory')
setAbmoPriPor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ab-1", 1), ("ab-2", 2), ("ab-3", 3), ("ab-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAbmoPriPor.setStatus('mandatory')
setAbmoPriPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("p1", 0), ("p2", 1), ("p3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPriPri.setStatus('mandatory')
setAbmoRin = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("single", 1), ("paired", 2), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoRin.setStatus('mandatory')
setAbmoCou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(43, 32, 41, 357, 49, 45, 34, 33, 44, 30, 39, 353, 81, 352, 47, 31, 351, 46, 358, 90, 1))).clone(namedValues=NamedValues(("austria", 43), ("belgium", 32), ("switzerland", 41), ("cyprus", 357), ("germany", 49), ("denmark", 45), ("spain", 34), ("france", 33), ("great-britain", 44), ("greece", 30), ("italy", 39), ("ireland", 353), ("japan", 81), ("luxembourg", 352), ("norway", 47), ("netherlands", 31), ("portugal", 351), ("sweden", 46), ("finland", 358), ("turkey", 90), ("united-states-of-america", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoCou.setStatus('mandatory')
setLanc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13))
setLancAcces = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 1), )
if mibBuilder.loadTexts: setLancAcces.setStatus('mandatory')
setLancAccesCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setLancAccesIpa"))
if mibBuilder.loadTexts: setLancAccesCols.setStatus('mandatory')
setLancAccesIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancAccesIpa.setStatus('mandatory')
setLancAccesIpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancAccesIpn.setStatus('mandatory')
setLancUdppo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancUdppo.setStatus('mandatory')
setLancInter = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6), )
if mibBuilder.loadTexts: setLancInter.setStatus('mandatory')
setLancInterCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setLancInterIfc"))
if mibBuilder.loadTexts: setLancInterCols.setStatus('mandatory')
setLancInterIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setLancInterIfc.setStatus('mandatory')
setLancInterOpe = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("dial-only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancInterOpe.setStatus('mandatory')
setLancInterEaz = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancInterEaz.setStatus('mandatory')
setLancInterFor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancInterFor.setStatus('mandatory')
setLancPrior = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 7), )
if mibBuilder.loadTexts: setLancPrior.setStatus('mandatory')
setLancPriorCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 7, 1), ).setIndexNames((0, "ELSA-MIB", "setLancPriorIfc"))
if mibBuilder.loadTexts: setLancPriorCols.setStatus('mandatory')
setLancPriorIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setLancPriorIfc.setStatus('mandatory')
setLancPriorPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("p1", 0), ("p2", 1), ("p3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancPriorPri.setStatus('mandatory')
setLancOpera = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("dial-only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancOpera.setStatus('mandatory')
setLancEazms = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancEazms.setStatus('mandatory')
setLancPrioo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("p1", 0), ("p2", 1), ("p3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancPrioo.setStatus('mandatory')
setLcrm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15))
setLcrmRou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmRou.setStatus('mandatory')
setLcrmLan = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmLan.setStatus('mandatory')
setLcrmAbp = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmAbp.setStatus('mandatory')
setLcrmTim = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4), )
if mibBuilder.loadTexts: setLcrmTim.setStatus('mandatory')
setLcrmTimCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1), ).setIndexNames((0, "ELSA-MIB", "setLcrmTimInd"))
if mibBuilder.loadTexts: setLcrmTimCols.setStatus('mandatory')
setLcrmTimInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimInd.setStatus('mandatory')
setLcrmTimPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimPre.setStatus('mandatory')
setLcrmTimDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimDay.setStatus('mandatory')
setLcrmTimSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimSta.setStatus('mandatory')
setLcrmTimSto = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimSto.setStatus('mandatory')
setLcrmTimNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimNum.setStatus('mandatory')
setLcrmTimFal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimFal.setStatus('mandatory')
setLcrmCel = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 5), )
if mibBuilder.loadTexts: setLcrmCel.setStatus('mandatory')
setLcrmCelCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setLcrmCelInd"))
if mibBuilder.loadTexts: setLcrmCelCols.setStatus('mandatory')
setLcrmCelInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setLcrmCelInd.setStatus('mandatory')
setLcrmCelDat = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmCelDat.setStatus('mandatory')
setTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14))
setTimeOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTimeOpe.setStatus('mandatory')
setTimeCur = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTimeCur.setStatus('mandatory')
setTimeTim = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTimeTim.setStatus('mandatory')
setTimeCal = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTimeCal.setStatus('mandatory')
setTimeUtc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTimeUtc.setStatus('mandatory')
firVer = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1), )
if mibBuilder.loadTexts: firVer.setStatus('mandatory')
firVerCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1, 1), ).setIndexNames((0, "ELSA-MIB", "firVerIfc"))
if mibBuilder.loadTexts: firVerCols.setStatus('mandatory')
firVerIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ifc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firVerIfc.setStatus('mandatory')
firVerMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firVerMod.setStatus('mandatory')
firVerVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firVerVer.setStatus('mandatory')
firVerSer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firVerSer.setStatus('mandatory')
firTab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2), )
if mibBuilder.loadTexts: firTab.setStatus('mandatory')
firTabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1), ).setIndexNames((0, "ELSA-MIB", "firTabPos"))
if mibBuilder.loadTexts: firTabCols.setStatus('mandatory')
firTabPos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firTabPos.setStatus('mandatory')
firTabSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 5, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 0), ("minimal-active", 5), ("minimal-inactive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firTabSta.setStatus('mandatory')
firTabVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firTabVer.setStatus('mandatory')
firTabDat = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firTabDat.setStatus('mandatory')
firTabSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firTabSiz.setStatus('mandatory')
firTabInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firTabInd.setStatus('mandatory')
firMod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("immediate", 0), ("login", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firMod.setStatus('mandatory')
firTim = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firTim.setStatus('mandatory')
othMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 4, 1))
othManCon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 4, 1, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: othManCon.setStatus('mandatory')
othManDis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 4, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: othManDis.setStatus('mandatory')
othBoo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 4, 2), Integer32())
if mibBuilder.loadTexts: othBoo.setStatus('mandatory')
mibBuilder.exportSymbols("ELSA-MIB", staTcpipDhcDeleteval=staTcpipDhcDeleteval, othMan=othMan, staBridgTablebr=staBridgTablebr, staWanstBytetransCrx=staWanstBytetransCrx, staBridgEstabliDes=staBridgEstabliDes, staPppstPapTxreq=staPppstPapTxreq, setDhcpGat=setDhcpGat, staIprouIprwantt=staIprouIprwantt, staTimesIsd=staTimesIsd, setSnmpMon=setSnmpMon, setLanmCon=setLanmCon, setIpxmRipSpoo=setIpxmRipSpoo, staIpxstIpxEstablisDestnode=staIpxstIpxEstablisDestnode, staIpxstRipRiplanr=staIpxstRipRiplanr, setIpro=setIpro, setWanmRounDev=setWanmRounDev, setIpxmLanNetb=setIpxmLanNetb, staIpxstWatIpxwatchdoglanr=staIpxstWatIpxwatchdoglanr, staLcrst=staLcrst, setWanmLayeLay1=setWanmLayeLay1, staIpxstWatIpxwatchdogwanr=staIpxstWatIpxwatchdogwanr, staIpxstDel=staIpxstDel, staPppstIpxTxconfignak=staPppstIpxTxconfignak, setLcrmCelInd=setLcrmCelInd, setDnsmFil=setDnsmFil, setNetbUpd=setNetbUpd, setTimeTim=setTimeTim, elsa=elsa, staPppstIpcDeletevalues=staPppstIpcDeletevalues, setNetbHos=setNetbHos, setIpxmWanSocSta=setIpxmWanSocSta, staDhcpcTableloCols=staDhcpcTableloCols, staPppstTxoLcpPfc=staPppstTxoLcpPfc, setDhcpRep=setDhcpRep, staPppstIpcTxcodereject=staPppstIpcTxcodereject, staIpxstProPropagatelans=staIpxstProPropagatelans, staPppstBacRxcallbackreq=staPppstBacRxcallbackreq, setAccoCurConne=setAccoCurConne, setWanmRoutCli=setWanmRoutCli, staTcpipTcpTcpwancon=staTcpipTcpTcpwancon, setConf=setConf, setWanmPpplUse=setWanmPpplUse, staBridgBrglanb=staBridgBrglanb, staDhcpcYouripn=staDhcpcYouripn, staLayerIfc=staLayerIfc, setDhcpSta=setDhcpSta, setLcrmTimInd=setLcrmTimInd, setAbmoPorPort=setAbmoPorPort, staChargTablebuTot=staChargTablebuTot, staLcrstProFai=staLcrstProFai, staCalliCap=staCalliCap, staWanstThroughpuTxsa=staWanstThroughpuTxsa, setIpxmRipTablTic=setIpxmRipTablTic, staIpxstIpxIpxrlanh=staIpxstIpxIpxrlanh, sta=sta, firTabSiz=firTabSiz, firTabCols=firTabCols, staIpxstProPropagatelanf=staIpxstProPropagatelanf, setTimeOpe=setTimeOpe, setNetbHosIpa=setNetbHosIpa, setAbmoPorCapab=setAbmoPorCapab, setAccoSor=setAccoSor, setAccoDel=setAccoDel, setBridTabLas=setBridTabLas, staBridgBrgaddr=staBridgBrgaddr, staIpxstIpxNetworksPro=staIpxstIpxNetworksPro, staPppstBacRxstatusreson=staPppstBacRxstatusreson, staPppstMlsRxdisca=staPppstMlsRxdisca, staTcpipIpsIplanserviceerrors=staTcpipIpsIplanserviceerrors, setIpxmRipWanf=setIpxmRipWanf, setIpxmWanRouCols=setIpxmWanRouCols, setNetbSer=setNetbSer, setTcpiAccesslis=setTcpiAccesslis, setTcpiNbnsbacku=setTcpiNbnsbacku, setBridLanDesFilterta=setBridLanDesFilterta, staPppstChaRxres=staPppstChaRxres, staPppstCcpTxterminatea=staPppstCcpTxterminatea, setIpxmSapWanfCols=setIpxmSapWanfCols, staQueueBridgei=staQueueBridgei, setWanmNameWan=setWanmNameWan, setWanmRounHea=setWanmRounHea, staPppstBacTxcallrespons=staPppstBacTxcallrespons, staIprouIprwanty=staIprouIprwanty, setAbmoPorDevice=setAbmoPorDevice, setIpxmSap=setIpxmSap, setConfLock=setConfLock, staIpxstRipTableriTic=staIpxstRipTableriTic, setIpxmWanRouRem=setIpxmWanRouRem, staChannCause=staChannCause, setIproDefDay=setIproDefDay, staIprouEstablisPro=staIprouEstablisPro, setBridLanDesFiltertaCols=setBridLanDesFiltertaCols, setIproFirFil=setIproFirFil, staTcpipTcpTcplanrx=staTcpipTcpTcplanrx, setBridWanSrc=setBridWanSrc, staQueueDnsrxqu=staQueueDnsrxqu, staLanstLanrxmult=staLanstLanrxmult, staLanstLanrxbroa=staLanstLanrxbroa, staTcpipDhcDhcpmacco=staTcpipDhcDhcpmacco, staCharg=staCharg, staTcpipNetRemoTim=staTcpipNetRemoTim, firVerVer=firVerVer, setLcrmRou=setLcrmRou, staPppstRxoIpcIpa=staPppstRxoIpcIpa, staPppstChaRxdis=staPppstChaRxdis, setIpxmLanLocr=setIpxmLanLocr, setAbmoPub=setAbmoPub, setDhcpRel=setDhcpRel, setAbmo=setAbmo, staPppstIpxRxterminatea=staPppstIpxRxterminatea, staTcpipTftTftplanrxa=staTcpipTftTftplanrxa, staTcpipDhcDhcprxreq=staTcpipDhcDhcprxreq, staTcpipDnsHitlTim=staTcpipDnsHitlTim, staTcpipDnsFilt=staTcpipDnsFilt, staIpxstMac=staIpxstMac, staPppstRxo=staPppstRxo, setIproMasServicetaInt=setIproMasServicetaInt, setTcpiTcpmaxcon=setTcpiTcpmaxcon, setWanmRoutMsn=setWanmRoutMsn, staPppstCcpTxcodereject=staPppstCcpTxcodereject, setTimeCur=setTimeCur, setLancInterCols=setLancInterCols, setNetbGroIpa=setNetbGroIpa, setIpxmWanRouBac=setIpxmWanRouBac, setNetb=setNetb, setAbmoCla=setAbmoCla, setWanmInteProt=setWanmInteProt, staConfiWanactiv=staConfiWanactiv, staIpxstProPropagatelant=staIpxstProPropagatelant, setBridTabFor=setBridTabFor, staLcrstProSuc=staLcrstProSuc, setIproRipR1m=setIproRipR1m, staTcpipIcmIcmplanr=staTcpipIcmIcmplanr, staTcpipNetWnod=staTcpipNetWnod, staTcpipNetWant=staTcpipNetWant, setCharTimetab=setCharTimetab, setLancPriorPri=setLancPriorPri, setWanmManuCon=setWanmManuCon, setWanm=setWanm, staChannCols=staChannCols, staTcpipTftTftplanrxe=staTcpipTftTftplanrxe, setIproFirRulNam=setIproFirRulNam, staTcpipDnsNetb=staTcpipDnsNetb, setIproDefSto=setIproDefSto, setSnmpDel=setSnmpDel, setAccoCurTxkby=setAccoCurTxkby, staTimesSou=staTimesSou, staQueueArpquer=staQueueArpquer, staTcpipNetWanr=staTcpipNetWanr, staCalliIfc=staCalliIfc, staIpxstSapTablesaHop=staIpxstSapTablesaHop, setWanmLayeLay3=setWanmLayeLay3, staTcpipTftTftpwanrxe=staTcpipTftTftpwanrxe, setBridLanBro=setBridLanBro, setSyslFac=setSyslFac, staIpxstIpxIpxrwanh=staIpxstIpxIpxrwanh, staIpxstWatSpxwatchdogwant=staIpxstWatSpxwatchdogwant, setHttpDoc=setHttpDoc, staPppstLcpDeletevalues=staPppstLcpDeletevalues, staTcpipDhcTabledhcpHos=staTcpipDhcTabledhcpHos, setBrid=setBrid, setWanmInteMaxo=setWanmInteMaxo, setIproFirFilDstn=setIproFirFilDstn, staPppstBacTxcallbackreq=staPppstBacTxcallbackreq, firVerMod=firVerMod, setSyslPor=setSyslPor, staTcpipIpsIpwanserviceerrors=staTcpipIpsIpwanserviceerrors, staQueueIpxrout=staQueueIpxrout, setWanmPpplCols=setWanmPpplCols, staDhcpcTableloIpa=staDhcpcTableloIpa, setLancAcces=setLancAcces, setAccoAccRxkby=setAccoAccRxkby, setIproFirRulAct=setIproFirRulAct, setBridWanBro=setBridWanBro, setIproRouRou=setIproRouRou, staPppstBacTxcallbackres=staPppstBacTxcallbackres, staPppstTxoLcpIfc=staPppstTxoLcpIfc, othBoo=othBoo, staS0busDinTei=staS0busDinTei, staTcpipTftTftpwanrxb=staTcpipTftTftpwanrxb, staDhcpcTablenaCols=staDhcpcTablenaCols, staTcpipTftTftplanrxd=staTcpipTftTftplanrxd, staLanstLanrxalig=staLanstLanrxalig, setLcrmAbp=setLcrmAbp, firTab=firTab, staConfiDeleteva=staConfiDeleteva, staLayerEnca=staLayerEnca, staIpxstSapDeletev=staIpxstSapDeletev, setLancInterOpe=setLancInterOpe, setDnsmDynIpa=setDnsmDynIpa, setLanmNod=setLanmNod, staPppstCbcTxres=staPppstCbcTxres, setTcpiIpaddress=setTcpiIpaddress, setIproFirFilSrca=setIproFirFilSrca, staTcpipTftTftpwantxr=staTcpipTftTftpwantxr, staTcpipTcp=staTcpipTcp, setIpxmLanSockCols=setIpxmLanSockCols, setDhcpTabHos=setDhcpTabHos, staWanstBytetransCtx=staWanstBytetransCtx, staWanstPackettraTxt=staWanstPackettraTxt, staTcpipArpTablearCon=staTcpipArpTablearCon, setBridLanDesFiltertaDes=setBridLanDesFiltertaDes, setDhcpTabTim=setDhcpTabTim, staPppstLcpTxechoreply=staPppstLcpTxechoreply, staChargTimetab=staChargTimetab, staLanstLanrxbyte=staLanstLanrxbyte, staPppstLcpRxechoreques=staPppstLcpRxechoreques, staIprouIprlanrx=staIprouIprlanrx, setBridWanDes=setBridWanDes, staIpxstIpxDeleteva=staIpxstIpxDeleteva, staPppstPppBac=staPppstPppBac, setChar=setChar, setSnmpLoc=setSnmpLoc, staTcpipIpsDeletevalues=staTcpipIpsDeletevalues, staConnsConn=staConnsConn, staLanstLanqueuee=staLanstLanqueuee, staIpxstWatSpxwatchdoglant=staIpxstWatSpxwatchdoglant, staTcpipDhcTabledhcpTim=staTcpipDhcTabledhcpTim, setWanmInteLlbc=setWanmInteLlbc, staBridgEstabliSou=staBridgEstabliSou, setIproFirRulCols=setIproFirRulCols, staPppstLcpRxcodereject=staPppstLcpRxcodereject, staPppstPapTxsuc=staPppstPapTxsuc, setBridLanMul=setBridLanMul, staDhcpcTabledoCols=staDhcpcTabledoCols, setIpxmSapWanf=setIpxmSapWanf, staTcpipIps=staTcpipIps, staTcpipDnsLanr=staTcpipDnsLanr, setIproRipTab=setIproRipTab, setIproFirRulSou=setIproFirRulSou, setBridWanDesFiltertaCols=setBridWanDesFiltertaCols, staQueueIpurgen=staQueueIpurgen, setLcrmTim=setLcrmTim, setSnmpAdm=setSnmpAdm, staIpxstMacIpxwanrxm=staIpxstMacIpxwanrxm, setWanmName=setWanmName, staTcpipTftTftpwantxe=staTcpipTftTftpwantxe, staPppstRxoLcpCal=staPppstRxoLcpCal, staTcpipTftTftplanrxw=staTcpipTftTftplanrxw, lancom_2000=lancom_2000, staTcpipIcmIcmpwans=staTcpipIcmIcmpwans, setHttp=setHttp, isdn_Systems=isdn_Systems, staS0busDinPro=staS0busDinPro, staPppstIpx=staPppstIpx, staDhcpcTablelo=staDhcpcTablelo, staIprouIprlanne=staIprouIprlanne, staPppstTxoLcpAcf=staPppstTxoLcpAcf, staPppstPppCols=staPppstPppCols, isdn_Router=isdn_Router, staBridgBrgwanr=staBridgBrgwanr, setSnmp=setSnmp, staConfiLantotal=staConfiLantotal, staIpxstWatIpxwatchdoglant=staIpxstWatIpxwatchdoglant)
mibBuilder.exportSymbols("ELSA-MIB", staTcpipIpsIpwanfragmentationer=staTcpipIpsIpwanfragmentationer, staWanstBytetrans=staWanstBytetrans, staTcpipTftTftplantxo=staTcpipTftTftplantxo, setIproLoc=setIproLoc, staPppstLcpRxconfignak=staPppstLcpRxconfignak, staTcpipDhcDhcptxnak=staTcpipDhcDhcptxnak, setNetbSerFla=setNetbSerFla, firTabVer=firTabVer, setTimeUtc=setTimeUtc, setSyslTabSou=setSyslTabSou, setAbmoPorClip=setAbmoPorClip, setDnsmDom=setDnsmDom, setIproRou=setIproRou, staS0busDinLay=staS0busDinLay, firVerIfc=firVerIfc, staIpxstIpxEstablisSourceso=staIpxstIpxEstablisSourceso, staPppstRxoLcpCols=staPppstRxoLcpCols, staConfiWantotal=staConfiWantotal, staPppstBacRxdiscarded=staPppstBacRxdiscarded, staPppstPapRxfai=staPppstPapRxfai, staPppstMlsRxfragm=staPppstMlsRxfragm, setAccoAccCols=setAccoAccCols, staPppstMlsRxfrage=staPppstMlsRxfrage, staPppstLcpTxterminatea=staPppstLcpTxterminatea, staLanstLantxmult=staLanstLantxmult, staQueueWanqueu=staQueueWanqueu, setWanmNameB2d=setWanmNameB2d, staBridgTablebrCols=staBridgTablebrCols, staTcpipArpDeletev=staTcpipArpDeletev, setDhcpHosIma=setDhcpHosIma, setSnmpMonIpa=setSnmpMonIpa, staPppstLcpRxconfigrequ=staPppstLcpRxconfigrequ, staIpxstProDeletevalues=staIpxstProDeletevalues, setAbmoClaClassofservice=setAbmoClaClassofservice, staPppstRxoLcpAut=staPppstRxoLcpAut, staIpxstRipRipwanr=staIpxstRipRipwanr, staQueueBridgee=staQueueBridgee, staIprouIprlandi=staIprouIprlandi, staPppstCcpRxdiscarded=staPppstCcpRxdiscarded, staPppstCcpTxresetack=staPppstCcpTxresetack, setAbmoClaPort=setAbmoClaPort, setDnsmFilIpa=setDnsmFilIpa, staQueueLanheap=staQueueLanheap, staIpxstMacIpxwanrxu=staIpxstMacIpxwanrxu, setBridLanDes=setBridLanDes, setSnmpMonTim=setSnmpMonTim, staChannConnt=staChannConnt, setLcrmCel=setLcrmCel, staPppstIpcRxconfignak=staPppstIpcRxconfignak, othManCon=othManCon, setIpxmSapSpoo=setIpxmSapSpoo, staTcpipDhcDhcprxdec=staTcpipDhcDhcprxdec, staConnsChar=staConnsChar, staPppstRxoIpcNbn=staPppstRxoIpcNbn, setIproMasIcmpaging=setIproMasIcmpaging, staPppstChaTxsuc=staPppstChaTxsuc, staDhcpcTablenaIpa=staDhcpcTablenaIpa, setSysl=setSysl, firVer=firVer, staTcpipIcmIcmplant=staTcpipIcmIcmplant, setIproFirObj=setIproFirObj, staIprouIprlantt=staIprouIprlantt, staTcpipDhcDhcpdisca=staTcpipDhcDhcpdisca, staRemotCols=staRemotCols, staWanstPackettraCols=staWanstPackettraCols, staPppstTxoIpcNbn=staPppstTxoIpcNbn, staLanst=staLanst, staDelet=staDelet, setSnmpPas=setSnmpPas, staPppstTxoIpxIfc=staPppstTxoIpxIfc, staTcpipTftTftplantxr=staTcpipTftTftplantxr, setAbmoPorMode=setAbmoPorMode, staWanstThroughpuRxsa=staWanstThroughpuRxsa, setIproIpr=setIproIpr, staIpxstIpxIpxrwanb=staIpxstIpxIpxrwanb, staBridgEstabliCols=staBridgEstabliCols, setAbmoPriPri=setAbmoPriPri, staTcpipIpsIplantx=staTcpipIpsIplantx, staChargTotalun=staChargTotalun, staTcpipNetRemoTyp=staTcpipNetRemoTyp, setIproRipRip=setIproRipRip, setTcpiArpagingm=setTcpiArpagingm, setIpxmSapAgin=setIpxmSapAgin, setName=setName, staQueueIprripq=staQueueIprripq, staPppstChaTxcha=staPppstChaTxcha, setLancPriorIfc=setLancPriorIfc, setIproRipTabIpa=setIproRipTabIpa, setLcrmTimPre=setLcrmTimPre, setTcpiTablearpCols=setTcpiTablearpCols, firVerCols=firVerCols, staTcpipDhcDchpserve=staTcpipDhcDchpserve, setIproRipTabCols=setIproRipTabCols, setIpxmSapTablTim=setIpxmSapTablTim, setNetbGroFla=setNetbGroFla, staTcpipArpArpwant=staTcpipArpArpwant, setAccoAccConne=setAccoAccConne, setIproOpe=setIproOpe, staDhcpcTableroCols=staDhcpcTableroCols, staTcpipHttHttppr=staTcpipHttHttppr, staIpxstMacIpxlanrxb=staIpxstMacIpxlanrxb, staChargSpareun=staChargSpareun, setBridLanDesFilterty=setBridLanDesFilterty, setAccoCurRemot=setAccoCurRemot, staPppstBacRxstatusindic=staPppstBacRxstatusindic, setNetbGroGro=setNetbGroGro, staPppstIpxRxdiscarded=staPppstIpxRxdiscarded, staTcpipDhcDhcprxrel=staTcpipDhcDhcprxrel, staTcpipTftTftpwantx=staTcpipTftTftpwantx, staIpxstSapSaplant=staIpxstSapSaplant, setAccoAccConnt=setAccoAccConnt, setDnsmDynHos=setDnsmDynHos, setTcpiDnsbackup=setTcpiDnsbackup, staDhcpcTableti=staDhcpcTableti, staIpxst=staIpxst, staCalliSys=staCalliSys, setIproIprCols=setIproIprCols, setBridLanSrc=setBridLanSrc, setDhcpAliImages=setDhcpAliImages, staWanstErrorstatRxl1=staWanstErrorstatRxl1, staIpxstIpxEstablisTime=staIpxstIpxEstablisTime, staPppstLcpRxterminater=staPppstLcpRxterminater, staTcpipTftTftpwanrxd=staTcpipTftTftpwanrxd, setIproDefSta=setIproDefSta, setIproFirFilIdx=setIproFirFilIdx, staPppstLcpTxechoreques=staPppstLcpTxechoreques, staIprouEstablis=staIprouEstablis, staPppstCbcRxres=staPppstCbcRxres, setNetbGroTyp=setNetbGroTyp, setDnsmFilIdx=setDnsmFilIdx, setSyslTabIpa=setSyslTabIpa, setAcco=setAcco, staPppstCbcTxreq=staPppstCbcTxreq, setBridRem=setBridRem, staPppstTxoIpcDns=staPppstTxoIpcDns, staPppstCcpRxconfigrequ=staPppstCcpRxconfigrequ, staWanstPackettraRx=staWanstPackettraRx, setWanmRounCols=setWanmRounCols, setCharTablebu=setCharTablebu, staIpxstSapSapwanr=staIpxstSapSapwanr, staTcpipTftTftplanrxr=staTcpipTftTftplanrxr, setSnmpReg=setSnmpReg, staPppstRxoIpxIfc=staPppstRxoIpxIfc, staTcpipIcmIcmpwanc=staTcpipIcmIcmpwanc, staIpxstSapSapwane=staIpxstSapSapwane, setIproFirObjDes=setIproFirObjDes, staPppstRxoIpc=staPppstRxoIpc, setDhcpHosIpa=setDhcpHosIpa, staIpxstSapTablesaTyp=staIpxstSapTablesaTyp, setAccoAccRemot=setAccoAccRemot, setIproFirFilDst=setIproFirFilDst, staConnsCont=staConnsCont, staPppstLcpRxconfigreje=staPppstLcpRxconfigreje, staIpxstProPropagatelanh=staIpxstProPropagatelanh, staS0busD2sCon=staS0busD2sCon, staLanstLanrxunic=staLanstLanrxunic, setNetbRemTyp=setNetbRemTyp, staPppstLcpTxdiscardreq=staPppstLcpTxdiscardreq, staPppstRxoIpcIfc=staPppstRxoIpcIfc, staQueueArpqueu=staQueueArpqueu, setBridWanDesFilterty=setBridWanDesFilterty, setTcpiDnsdefaul=setTcpiDnsdefaul, staChannMode=staChannMode, staIpxstIpxIpxrlans=staIpxstIpxIpxrlans, staDhcpcGateway=staDhcpcGateway, staTcpipNetRele=staTcpipNetRele, setWanmInteDial=setWanmInteDial, staIpxstIpxIpxrlanr=staIpxstIpxIpxrlanr, setCharTablebuIfc=setCharTablebuIfc, setIproMasTcpagings=setIproMasTcpagings, staTimesSet=staTimesSet, staChargTimetabCols=staChargTimetabCols, staChannBus=staChannBus, staQueueDnstxqu=staQueueDnstxqu, setLancInterIfc=setLancInterIfc, setWanmCbat=setWanmCbat, setAccoSav=setAccoSav, staLanstLantxbyte=staLanstLantxbyte, setAccoCurMacad=setAccoCurMacad, staTcpipIcmIcmpwant=staTcpipIcmIcmpwant, staTcpipArpTablearLas=staTcpipArpTablearLas, setDhcpAliCols=setDhcpAliCols, staIpxstWat=staIpxstWat, staConnsActi=staConnsActi, setBridLan=setBridLan, staIpxstSapTablesaCols=staIpxstSapTablesaCols, staLayer=staLayer, setSyslOpe=setSyslOpe, staTcpipTftTftpwanrxo=staTcpipTftTftpwanrxo, staIprouIprlanlo=staIprouIprlanlo, setIpxmSapTabl=setIpxmSapTabl, setIproFirFilCols=setIproFirFilCols, staDhcpcTabledo=staDhcpcTabledo, setSnmpMonDev=setSnmpMonDev, staTcpipDnsLant=staTcpipDnsLant, staTimesIsdInfor=staTimesIsdInfor, setIproMasTablemasqCols=setIproMasTablemasqCols, setNetbSerHos=setNetbSerHos, staIprouIprlanro=staIprouIprlanro, staPppstIpcRxcodereject=staPppstIpcRxcodereject, setNetbSerGro=setNetbSerGro, setLancPrioo=setLancPrioo, staPppstIpxRxterminater=staPppstIpxRxterminater, staWanstPackettraTxr=staWanstPackettraTxr, staQueueRipquer=staQueueRipquer, setIpxmSapTablNet=setIpxmSapTablNet, setIproMas=setIproMas, setBridWanSrcFiltertaDes=setBridWanSrcFiltertaDes, setAbmoPubOff=setAbmoPubOff, staQueueTftpser=staQueueTftpser, setWanmNumbDia=setWanmNumbDia, staPppstLcpRxterminatea=staPppstLcpRxterminatea, staDhcpcState=staDhcpcState, staBridgBrgwanb=staBridgBrgwanb, staPppstPppLcp=staPppstPppLcp, staIpxstPro=staIpxstPro, staTcpipNetRegi=staTcpipNetRegi, staChargTimetabMinutesa=staChargTimetabMinutesa, staRemotConnt=staRemotConnt, staPppstCcpRxterminatea=staPppstCcpRxterminatea, setWanmPpplFai=setWanmPpplFai, staPppstCcpRxterminater=staPppstCcpRxterminater, setIpxmLanNetw=setIpxmLanNetw, staIpxstIpxIpxrlann=staIpxstIpxIpxrlann, set=set, setLancInterFor=setLancInterFor, staPppstBacTxlinkdropreq=staPppstBacTxlinkdropreq, staPppstLcpTxconfignak=staPppstLcpTxconfignak, staIpxstRipTableriCols=staIpxstRipTableriCols, staTcpipDnsDnsa=staTcpipDnsDnsa, staTcpipDhcTabledhcpIpa=staTcpipDhcTabledhcpIpa, setAccoAccTxkby=setAccoAccTxkby, staIpxstSapSapwant=staIpxstSapSapwant, staIprouIprlanfi=staIprouIprlanfi, staDhcpcTimeser=staDhcpcTimeser, staChannSubad=staChannSubad, staTcpipTcpTcplantxr=staTcpipTcpTcplantxr, staLayerL1pa=staLayerL1pa, setCharSparemi=setCharSparemi, staTcpipHttHttpac=staTcpipHttHttpac, setWanmRoutYc=setWanmRoutYc, staPppstIpxRxconfigreje=staPppstIpxRxconfigreje, setNetbOpe=setNetbOpe, staLayerCols=staLayerCols, staPppstRxoIpx=staPppstRxoIpx, setIproMasFragmenta=setIproMasFragmenta, staTcpipDnsHitlDom=staTcpipDnsHitlDom, staTcpipTftTftplantxd=staTcpipTftTftplantxd, staInfocMod=staInfocMod, staIpxstProPropagatewans=staIpxstProPropagatewans, staPppstCha=staPppstCha, staIpxstIpxEstablisSourceno=staIpxstIpxEstablisSourceno, staBridg=staBridg, staTcpipNetHost=staTcpipNetHost)
mibBuilder.exportSymbols("ELSA-MIB", staChargTimetabMinutesp=staChargTimetabMinutesp, staTcpipNetRefr=staTcpipNetRefr, staTcpipIcmDeleteva=staTcpipIcmDeleteva, setIpxmLanRips=setIpxmLanRips, staChargTablebuBud=staChargTablebuBud, staConfiOutbanda=staConfiOutbanda, staChannApp=staChannApp, staTcpipIpsIpwanfragmentations=staTcpipIpsIpwanfragmentations, staPppstCbc=staPppstCbc, staChargTimetabSparemin=staChargTimetabSparemin, staTcpipIpsIplanfragmentationsf=staTcpipIpsIplanfragmentationsf, setWanmInteCols=setWanmInteCols, staWanst=staWanst, setIproMasTablemasqPro=setIproMasTablemasqPro, setBridWanMul=setBridWanMul, setAccoCurConnt=setAccoCurConnt, setIpxmSapServ=setIpxmSapServ, setLancPrior=setLancPrior, staPppstCcpRxconfigreje=staPppstCcpRxconfigreje, staRemotConns=staRemotConns, staIpxstSapSaplanr=staIpxstSapSaplanr, staConns=staConns, staIpxstRipTableriNod=staIpxstRipTableriNod, staPppstPapTxret=staPppstPapTxret, setIproRipTabIpn=setIproRipTabIpn, staPppstCcpDeletevalues=staPppstCcpDeletevalues, staS0busD2sCha=staS0busD2sCha, setDhcpMas=setDhcpMas, staIpxstRipRiplant=staIpxstRipRiplant, staQueueIpxqueu=staQueueIpxqueu, staS0busDinCha=staS0busDinCha, staLayerLay3=staLayerLay3, staInfocDia=staInfocDia, staChannNumbe=staChannNumbe, setIproFirFilActi=setIproFirFilActi, staTimesIsdConne=staTimesIsdConne, staPppstMlsBundlec=staPppstMlsBundlec, staPppstRxoLcpMru=staPppstRxoLcpMru, staTcpipTcpTcplancon=staTcpipTcpTcplancon, staQueueSpxwatc=staQueueSpxwatc, staPppstRxoLcpMag=staPppstRxoLcpMag, staTcpipNetRemo=staTcpipNetRemo, staLanstLanrxpack=staLanstLanrxpack, staLcrstPro=staLcrstPro, setCharTablebuCols=setCharTablebuCols, staIpxstSapTablesaSoc=staIpxstSapTablesaSoc, staBridgBrgwant=staBridgBrgwant, staLanstLanqueuep=staLanstLanqueuep, staChargRouterm=staChargRouterm, staPppstIpxTxconfigrequ=staPppstIpxTxconfigrequ, staPppstLcpTxconfigack=staPppstLcpTxconfigack, setDnsmLea=setDnsmLea, setSnmpIptTra=setSnmpIptTra, setBridTabCols=setBridTabCols, staConfiOutbandb=staConfiOutbandb, setIproFirFilSrcn=setIproFirFilSrcn, staIpxstIpxIpxrlant=staIpxstIpxIpxrlant, setIpxmSapWanu=setIpxmSapWanu, staIpxstProPropagatewant=staIpxstProPropagatewant, setIpxmRipTablNod=setIpxmRipTablNod, staPppstLcpRxechoreply=staPppstLcpRxechoreply, staPppstTxoIpcIfc=staPppstTxoIpcIfc, staTcpipArpTablearNod=staTcpipArpTablearNod, staTcpipDhcTabledhcpTyp=staTcpipDhcTabledhcpTyp, staPppstIpcTxterminatea=staPppstIpcTxterminatea, staWanstPackettraTxu=staWanstPackettraTxu, staIpxstIpxEstablisSourcene=staIpxstIpxEstablisSourcene, staPppstRxoIpxRou=staPppstRxoIpxRou, staPppstLcpTxconfigreje=staPppstLcpTxconfigreje, setWanmManuDis=setWanmManuDis, setAbmoPriCols=setAbmoPriCols, setDnsmFilNet=setDnsmFilNet, setWanmNameB1d=setWanmNameB1d, setBridAgi=setBridAgi, staPppstLcpTxterminater=staPppstLcpTxterminater, setCharDaysper=setCharDaysper, setLcrmTimFal=setLcrmTimFal, setSnmpIpt=setSnmpIpt, staPppstCbcTxack=staPppstCbcTxack, staPppstTxoLcp=staPppstTxoLcp, setNetbHosRem=setNetbHosRem, setIproMasServicetaDpo=setIproMasServicetaDpo, staIpxstSapTablesaNod=staIpxstSapTablesaNod, staIpxstIpxNetworksNod=staIpxstIpxNetworksNod, staIpxstRip=staIpxstRip, staWanstThroughpuTxsc=staWanstThroughpuTxsc, staS0busDinS0a=staS0busDinS0a, staPppstTxo=staPppstTxo, staTcpip=staTcpip, staPppstLcpRxdiscardreq=staPppstLcpRxdiscardreq, staTcpipTftTftpwanrxr=staTcpipTftTftpwanrxr, firTabPos=firTabPos, setDnsm=setDnsm, staPppstCcpRxresetreque=staPppstCcpRxresetreque, staRemot=staRemot, setWanmLayeEnca=setWanmLayeEnca, staLanstLancollis=staLanstLancollis, setIpxmLanLoop=setIpxmLanLoop, staIpxstMacIpxlantx=staIpxstMacIpxlantx, staDhcpcSecurit=staDhcpcSecurit, staTcpipTcpTcpwanser=staTcpipTcpTcpwanser, staTcpipIpsIplanrx=staTcpipIpsIplanrx, setWanmPpplDev=setWanmPpplDev, staCalli=staCalli, staTcpipDnsHitlReq=staTcpipDnsHitlReq, staIpxstIpxNetworksBin=staIpxstIpxNetworksBin, setDhcpAliImagea=setDhcpAliImagea, staWanstThroughpuCols=staWanstThroughpuCols, staTcpipNetTime=staTcpipNetTime, setDnsmDhc=setDnsmDhc, staPppstIpcRxconfigrequ=staPppstIpcRxconfigrequ, staQueueSnmpque=staQueueSnmpque, staPppstTxoIpxCols=staPppstTxoIpxCols, staIprou=staIprou, staTcpipNetPnod=staTcpipNetPnod, staIprouIprarper=staIprouIprarper, staPppstChaTxfai=staPppstChaTxfai, staPppstBacTxstatusreson=staPppstBacTxstatusreson, staTcpipIcmIcmpwanr=staTcpipIcmIcmpwanr, setWanmLayeL2op=setWanmLayeL2op, staPppstCcpCompressione=staPppstCcpCompressione, staPppstIpxRxconfigrequ=staPppstIpxRxconfigrequ, staWanstErrorstatCols=staWanstErrorstatCols, setDnsmDynTim=setDnsmDynTim, staTcpipNetRemoCols=staTcpipNetRemoCols, setTcpiTablearpCon=setTcpiTablearpCon, staPppstMlsRxmrrue=staPppstMlsRxmrrue, setIpxm=setIpxm, setWanmNameDev=setWanmNameDev, setLcrmTimSta=setLcrmTimSta, staIpxstIpxEstablis=staIpxstIpxEstablis, staIprouEstablisSrc=staIprouEstablisSrc, setDhcpTabCols=setDhcpTabCols, setCharRouteru=setCharRouteru, staQueueProthea=staQueueProthea, setBridLanSrcFilterta=setBridLanSrcFilterta, setWanmRout=setWanmRout, staBridgTablebrLas=staBridgTablebrLas, staBridgBrglant=staBridgBrglant, staS0bus=staS0bus, setLancAccesIpa=setLancAccesIpa, staTcpipTcpTcpwanche=staTcpipTcpTcpwanche, setIpxmRipTablHop=setIpxmRipTablHop, setWanmInteIfc=setWanmInteIfc, setIpxmRipWanu=setIpxmRipWanu, setIproIprDis=setIproIprDis, setIproIprMas=setIproIprMas, setNetbSerTim=setNetbSerTim, staPppstRxoIpcCols=staPppstRxoIpcCols, setDhcpOpe=setDhcpOpe, setIpxmRipRout=setIpxmRipRout, setCharBudgetu=setCharBudgetu, staTcpipDnsWanr=staTcpipDnsWanr, staBridgDeletev=staBridgDeletev, staWanstWanheappa=staWanstWanheappa, setCharTablebuSpa=setCharTablebuSpa, setIpxmRipLanfSta=setIpxmRipLanfSta, setLcrmTimSto=setLcrmTimSto, staWanstPackettraIfc=staWanstPackettraIfc, staTcpipIpsIplanchecksumerrors=staTcpipIpsIplanchecksumerrors, staPppstIpc=staPppstIpc, setCharTimetabMinutesa=setCharTimetabMinutesa, staChargTimetabIfc=staChargTimetabIfc, setSyslFacFac=setSyslFacFac, staTcpipDnsErro=staTcpipDnsErro, setSyslTab=setSyslTab, setTcpiAccesslisIpn=setTcpiAccesslisIpn, staTcpipArpArpwanr=staTcpipArpArpwanr, setSyslTabIdx=setSyslTabIdx, staInfocB2d=staInfocB2d, fir=fir, staTcpipNetBnod=staTcpipNetBnod, setAccoAccUsern=setAccoAccUsern, staIpxstIpxNetworksRem=staIpxstIpxNetworksRem, staCalliCols=staCalliCols, staDhcpc=staDhcpc, staPppstTxoIpc=staPppstTxoIpc, setIpxmSapTablSer=setIpxmSapTablSer, setDhcp=setDhcp, setDnsmOpe=setDnsmOpe, staPppstIpxTxconfigack=staPppstIpxTxconfigack, setIproFirFilDsta=setIproFirFilDsta, setConfMaxi=setConfMaxi, staRemotMode=staRemotMode, staIpxstSapTablesa=staIpxstSapTablesa, staTcpipIpsIpwantx=staTcpipIpsIpwantx, staWanstBytetransCols=staWanstBytetransCols, staPppstLcpRxdiscarded=staPppstLcpRxdiscarded, staConne=staConne, staPppstPppPha=staPppstPppPha, staWanstPackettra=staWanstPackettra, staIpxstIpxNetworks=staIpxstIpxNetworks, staTcpipNetLant=staTcpipNetLant, staIpxstRipRiplane=staIpxstRipRiplane, setIpxmRipLanfEnd=setIpxmRipLanfEnd, staInfocCols=staInfocCols, staIpxstMacIpxlanrxu=staIpxstMacIpxlanrxu, staDhcpcYouripa=staDhcpcYouripa, staIprouEstablisTim=staIprouEstablisTim, staTcpipNetConf=staTcpipNetConf, setIproIprIpn=setIproIprIpn, staQueueSapqueu=staQueueSapqueu, staInfocDev=staInfocDev, staIpxstWatIpxwatchdogwant=staIpxstWatIpxwatchdogwant, setConfLogi=setConfLogi, staLcrstNot=staLcrstNot, staPppstIpcTxterminater=staPppstIpcTxterminater, setLcrmLan=setLcrmLan, setNetbGroRem=setNetbGroRem, oth=oth, setWanmPpplTry=setWanmPpplTry, setLanmSpa=setLanmSpa, setIproFirFilSst=setIproFirFilSst, setAbmoCou=setAbmoCou, staPppstPppIpx=staPppstPppIpx, setBridWanSrcFiltertaCols=setBridWanSrcFiltertaCols, setIpxmLanSpxw=setIpxmLanSpxw, setLcrm=setLcrm, staConfiLanactiv=staConfiLanactiv, staWanstErrorstatIfc=staWanstErrorstatIfc, setAccoCur=setAccoCur, staPppstCbcRxdis=staPppstCbcRxdis, setLancOpera=setLancOpera, staPppstRxoIpxNet=staPppstRxoIpxNet, setTcpiNbnsdefau=setTcpiNbnsdefau, setWanmDial=setWanmDial, staTcpipDnsWant=staTcpipDnsWant, staTcpipIpsIpwanchecksumerrors=staTcpipIpsIpwanchecksumerrors, setDnsmDnsHos=setDnsmDnsHos, staTcpipTcpTcpwantx=staTcpipTcpTcpwantx, setWanmNumb=setWanmNumb, staPppstIpxDeletevalues=staPppstIpxDeletevalues, setIpxmWanSoc=setIpxmWanSoc, setWanmRoun=setWanmRoun, staPppstCcpTxresetreque=staPppstCcpTxresetreque, setAccoAcc=setAccoAcc, setNetbHosCols=setNetbHosCols, setIpxmSapLanfEnd=setIpxmSapLanfEnd, staTcpipTcpTcpwantxr=staTcpipTcpTcpwantxr, setNetbSerIpa=setNetbSerIpa, setNetbSerRem=setNetbSerRem, staTcpipIpsIplanfragmentations=staTcpipIpsIplanfragmentations, staPppstRxoLcp=staPppstRxoLcp, staBridgBrglanr=staBridgBrglanr, staTcpipNetRemoNam=staTcpipNetRemoNam, staIpxstRipTableriFla=staIpxstRipTableriFla, staS0busD2sCols=staS0busD2sCols, staOpera=staOpera, setTcpiOperating=setTcpiOperating, staTcpipDnsHitlCols=staTcpipDnsHitlCols, staPppstCcpTxconfigreje=staPppstCcpTxconfigreje, staTcpipArpTablearIpa=staTcpipArpTablearIpa, setIpxmLanSock=setIpxmLanSock, staPppstBacTxlinkdropres=staPppstBacTxlinkdropres)
mibBuilder.exportSymbols("ELSA-MIB", setDhcpEnd=setDhcpEnd, setTime=setTime, setWanmScriScr=setWanmScriScr, setNetbNtd=setNetbNtd, setBridTab=setBridTab, staBridgBrgwanm=staBridgBrgwanm, setLanm=setLanm, staPppstIpcRxterminater=staPppstIpcRxterminater, staPppstPppIfc=staPppstPppIfc, setIproRipTabTim=setIproRipTabTim, staLcrstProCols=staLcrstProCols, staLanstLanstacke=staLanstLanstacke, setLancAccesIpn=setLancAccesIpn, setBridWanDesFiltertaDes=setBridWanDesFiltertaDes, staPppstChaDelet=staPppstChaDelet, firTabDat=firTabDat, setAbmoPriPor=setAbmoPriPor, setIproIprIpa=setIproIprIpa, setCharTablebuTot=setCharTablebuTot, staDhcpcTabletiIpa=staDhcpcTabletiIpa, setWanmScriDev=setWanmScriDev, setAccoCurCols=setAccoCurCols, staChannConns=staChannConns, setIpxmOpe=setIpxmOpe, staLayerLay1=staLayerLay1, setIproUsa=setIproUsa, setLancUdppo=setLancUdppo, firMod=firMod, staLanstLantxpack=staLanstLantxpack, staLanstLantxerro=staLanstLantxerro, staDhcpcTablero=staDhcpcTablero, staIpxstIpxEstablisDestsock=staIpxstIpxEstablisDestsock, staTcpipDnsForw=staTcpipDnsForw, setIpxmRipTablNet=setIpxmRipTablNet, firTim=firTim, staChannIsdnd=staChannIsdnd, setLancInterEaz=setLancInterEaz, staPppstPap=staPppstPap, staTcpipArpArplanr=staTcpipArpArplanr, setNetbSco=setNetbSco, setWanmLaye=setWanmLaye, staQueueWanheap=staQueueWanheap, setDnsmDnsIpa=setDnsmDnsIpa, setAbmoPubPor=setAbmoPubPor, staPppstPpp=staPppstPpp, setAbmoClaBlockednumber1=setAbmoClaBlockednumber1, staBridgTablebrNod=staBridgTablebrNod, staPppstPppIpc=staPppstPppIpc, staLcrstMis=staLcrstMis, staPppstIpxTxterminatea=staPppstIpxTxterminatea, setDnsmDynCols=setDnsmDynCols, setIpxmRipTablFla=setIpxmRipTablFla, staPppstBacTxstatusindic=staPppstBacTxstatusindic, othManDis=othManDis, setLcrmTimDay=setLcrmTimDay, staPppstMlsRxheade=staPppstMlsRxheade, staIpxstProPropagatelanb=staIpxstProPropagatelanb, setBridWanSrcFilterta=setBridWanSrcFilterta, staChannPlci=staChannPlci, staTcpipTftTftplantxa=staTcpipTftTftplantxa, setDnsmDyn=setDnsmDyn, staPppstMlsRxseqlo=staPppstMlsRxseqlo, staPppstMlsRxnotfr=staPppstMlsRxnotfr, staQueueIpmasqt=staQueueIpmasqt, staChargSparemi=staChargSparemi, staWanstThroughpu=staWanstThroughpu, setIpxmWanSocCols=setIpxmWanSocCols, staWanstThroughpuIfc=staWanstThroughpuIfc, staPppstBacRxcallrequest=staPppstBacRxcallrequest, setSyslTabLev=setSyslTabLev, staIprouEstablisDes=staIprouEstablisDes, setTcpiTablearpIpa=setTcpiTablearpIpa, setIproFirFilDend=setIproFirFilDend, staTcpipNetRemoBac=staTcpipNetRemoBac, staPppstCcpRxconfigack=staPppstCcpRxconfigack, staQueueIpxwatc=staQueueIpxwatc, staWanstDeleteval=staWanstDeleteval, staChannState=staChannState, setTimeCal=setTimeCal, staIpxstIpx=staIpxstIpx, staQueueTcpqueu=staQueueTcpqueu, staIpxstSapTablesaSer=staIpxstSapTablesaSer, staIprouIprwanfi=staIprouIprwanfi, setIproFirRulPro=setIproFirRulPro, setBridWanDesFilterta=setBridWanDesFilterta, setSnmpMonMac=setSnmpMonMac, staTcpipArpArplane=staTcpipArpArplane, setLancPriorCols=setLancPriorCols, staTcpipNetDele=staTcpipNetDele, setTcpiIntranetm=setTcpiIntranetm, setAbmoPubFla=setAbmoPubFla, setAccoOpe=setAccoOpe, setSyslTabCols=setSyslTabCols, setWanmPpplTer=setWanmPpplTer, staCalliDia=staCalliDia, setDhcpMax=setDhcpMax, staPppstTxoIpx=staPppstTxoIpx, setIpxmLanSockEnd=setIpxmLanSockEnd, staChargTablebuIfc=staChargTablebuIfc, setDnsmNet=setDnsmNet, staWanstBytetransIfc=staWanstBytetransIfc, setBridTabNod=setBridTabNod, staWanstErrorstatTxer=staWanstErrorstatTxer, staPppstIpxTxcodereject=staPppstIpxTxcodereject, staPppstCbcDelet=staPppstCbcDelet, setBridWan=setBridWan, setIpxmRipLanfCols=setIpxmRipLanfCols, staLcrstDel=staLcrstDel, staPppstChaRxfai=staPppstChaRxfai, setIproMasTablemasqInt=setIproMasTablemasqInt, staIprouIprwantx=staIprouIprwantx, setIpxmSapTablSoc=setIpxmSapTablSoc, setAbmoPorEazmsns=setAbmoPorEazmsns, staTcpipTcpTcpwanrx=staTcpipTcpTcpwanrx, setWanmScri=setWanmScri, setIproMasTablemasqSpo=setIproMasTablemasqSpo, firVerSer=firVerSer, setBridLanSrcFiltertaSrc=setBridLanSrcFiltertaSrc, setAccoCurRxkby=setAccoCurRxkby, setNetbHosFla=setNetbHosFla, staDhcpcTableroIpa=staDhcpcTableroIpa, setTcpiTablearpNod=setTcpiTablearpNod, setIproRip=setIproRip, setCharTotalun=setCharTotalun, staIpxstIpxIpxrinte=staIpxstIpxIpxrinte, staPppstRxoLcpPfc=staPppstRxoLcpPfc, setWanmLayeWanl=setWanmLayeWanl, staIprouIprwanne=staIprouIprwanne, staDhcpcLeaseti=staDhcpcLeaseti, staLcrstProPro=staLcrstProPro, setIpxmWanRouBin=setIpxmWanRouBin, staS0busD2s=staS0busD2s, staTcpipHtt=staTcpipHtt, staLcrstTot=staLcrstTot, setDhcpDef=setDhcpDef, staWanstErrorstat=staWanstErrorstat, staIpxstMacIpxlanrxm=staIpxstMacIpxlanrxm, staIpxstRipTableri=staIpxstRipTableri, setBridWanSrcFilterty=setBridWanSrcFilterty, staPppstTxoLcpMag=staPppstTxoLcpMag, staChargRouteru=staChargRouteru, setLanc=setLanc, staTcpipIcm=staTcpipIcm, setDhcpAli=setDhcpAli, staLanstLannicerr=staLanstLannicerr, setIpxmRip=setIpxmRip, staInfoc=staInfoc, staTcpipTftTftplancon=staTcpipTftTftplancon, staPppstLcpRxprotocolre=staPppstLcpRxprotocolre, staTcpipDnsDele=staTcpipDnsDele, setIpxmLanSockSta=setIpxmLanSockSta, staPppstCcpRxconfignak=staPppstCcpRxconfignak, staLanstLantxbroa=staLanstLantxbroa, staCurre=staCurre, staTcpipArpArplant=staTcpipArpArplant, staIprouEstablisSpo=staIprouEstablisSpo, staS0busDinCols=staS0busDinCols, setWanmInte=setWanmInte, staPppstDel=staPppstDel, staTcpipDhcDhcptxoff=staTcpipDhcDhcptxoff, setNetbSerSer=setNetbSerSer, staPppstTxoIpcCols=staPppstTxoIpcCols, setIpxmSapLanf=setIpxmSapLanf, staPppstPapRxreq=staPppstPapRxreq, staLanstLanrxcrce=staLanstLanrxcrce, staPppstRxoLcpAcc=staPppstRxoLcpAcc, staWanstThroughpuRxsc=staWanstThroughpuRxsc, staPppstTxoIpxRou=staPppstTxoIpxRou, staPppstLcp=staPppstLcp, staTcpipIcmIcmplanc=staTcpipIcmIcmplanc, setConfConf=setConfConf, setSyslFacCols=setSyslFacCols, firTabInd=firTabInd, staTcpipDnsHitlIpa=staTcpipDnsHitlIpa, staChargDeletev=staChargDeletev, staPppstIpcRxconfigack=staPppstIpcRxconfigack, staPppstPppCcp=staPppstPppCcp, staIpxstIpxNetworksCols=staIpxstIpxNetworksCols, staPppstIpxRxcodereject=staPppstIpxRxcodereject, setIproMasServiceta=setIproMasServiceta, staPppstCbcRxack=staPppstCbcRxack, staPppstIpcTxconfignak=staPppstIpcTxconfignak, staPppstIpcTxconfigreje=staPppstIpcTxconfigreje, setAccoCurTotal=setAccoCurTotal, staIpxstIpxIpxrlanb=staIpxstIpxIpxrlanb, staIpxstRipTableriTim=staIpxstRipTableriTim, setDhcpHosHos=setDhcpHosHos, staIpxstIpxIpxrwand=staIpxstIpxIpxrwand, staTcpipTftTftplanrxo=staTcpipTftTftplanrxo, staChannCharg=staChannCharg, staPppstMlsRxseqre=staPppstMlsRxseqre, setNetbSerUpd=setNetbSerUpd, staIpxstRipDeletev=staIpxstRipDeletev, staTcpipNetGrou=staTcpipNetGrou, staBridgEstabliTim=staBridgEstabliTim, staPppstTxoLcpAut=staPppstTxoLcpAut, staPppstCcpRxresetack=staPppstCcpRxresetack, staPppstLcpRxconfigack=staPppstLcpRxconfigack, staIpxstWatSpxwatchdoglanr=staIpxstWatSpxwatchdoglanr, setSyslFacSou=setSyslFacSou, staIpxstIpxIpxrwann=staIpxstIpxIpxrwann, staPppstIpcRxdiscarded=staPppstIpcRxdiscarded, setSnmpIptCols=setSnmpIptCols, setIpxmRipWanfSta=setIpxmRipWanfSta, setIproMasUdpagings=setIproMasUdpagings, staTcpipDhcTabledhcpCols=staTcpipDhcTabledhcpCols, staPppstTxoLcpMru=staPppstTxoLcpMru, staPppstIpcRxconfigreje=staPppstIpcRxconfigreje, staPppstBacRxerrors=staPppstBacRxerrors, staPppstTxoIpcIpa=staPppstTxoIpcIpa, setIproFirRul=setIproFirRul, staIpxstProPropagatelanc=staIpxstProPropagatelanc, setWanmPpplCon=setWanmPpplCon, staPppstRxoIpxCols=staPppstRxoIpxCols, staIpxstIpxNetworksTim=staIpxstIpxNetworksTim, staPppstLcpTxconfigrequ=staPppstLcpTxconfigrequ, setIpxmSapWanfSta=setIpxmSapWanfSta, setWanmPpplKey=setWanmPpplKey, staPppstChaTxret=staPppstChaTxret, staDhcpcTabledoIpa=staDhcpcTabledoIpa, setIproFirFilProt=setIproFirFilProt, staPppstCcpRxcodereject=staPppstCcpRxcodereject, staPppstTxoLcpCols=staPppstTxoLcpCols, staLanstDeleteval=staLanstDeleteval, setIproDefCols=setIproDefCols, staPppstChaRxsuc=staPppstChaRxsuc, staTcpipArpArpwane=staTcpipArpArpwane, setWanmNameDia=setWanmNameDia, staTcpipDhc=staTcpipDhc, setConfLang=setConfLang, staWanstErrorstatRxl2=staWanstErrorstatRxl2, staBridgEstabli=staBridgEstabli, setBridLanSrcFiltertaCols=setBridLanSrcFiltertaCols, setNetbWat=setNetbWat, setIpxmRipWanfEnd=setIpxmRipWanfEnd, staTcpipTftTftpwantxd=staTcpipTftTftpwantxd, staWanstWanqueuee=staWanstWanqueuee, setWanmRoutCols=setWanmRoutCols, staIpxstIpxIpxrwant=staIpxstIpxIpxrwant, staTcpipTcpTcplanser=staTcpipTcpTcplanser, staBridgBrglanm=staBridgBrglanm, setLancAccesCols=setLancAccesCols, staConfi=staConfi, staPppstBacRxcallrespons=staPppstBacRxcallrespons, setWanmRounRou=setWanmRounRou, staIpxstSapTablesaFla=staIpxstSapTablesaFla, staTcpipDhcDhcprxdis=staTcpipDhcDhcprxdis, setIproRouIcm=setIproRouIcm, setIpxmRipWanfCols=setIpxmRipWanfCols, staTcpipDhcDhcpassig=staTcpipDhcDhcpassig, staTcpipNetMnod=staTcpipNetMnod, staPppstCcp=staPppstCcp, staQueueIpmasqr=staQueueIpmasqr, staTimesIsdDelet=staTimesIsdDelet)
mibBuilder.exportSymbols("ELSA-MIB", staChargTablebu=staChargTablebu, staConnsIfc=staConnsIfc, staPppstMlsDeletev=staPppstMlsDeletev, setTcpiAccesslisIpa=setTcpiAccesslisIpa, setSnmpSen=setSnmpSen, staLcrstFou=staLcrstFou, staPppstBacDeletevalues=staPppstBacDeletevalues, staTcpipIpsIpwanfragmentationsf=staTcpipIpsIpwanfragmentationsf, setAbmoPri=setAbmoPri, staWanstErrorstatStac=staWanstErrorstatStac, staIpxstIpxEstablisDestnet=staIpxstIpxEstablisDestnet, staPppstTxoIpxNet=staPppstTxoIpxNet, staRemotRemot=staRemotRemot, setIpxmSapTablCols=setIpxmSapTablCols, setNetbGro=setNetbGro, staIpxstRipTableriNet=staIpxstRipTableriNet, setIproFirFilSend=setIproFirFilSend, setWanmLayeCols=setWanmLayeCols, setIproFirObjCols=setIproFirObjCols, setAbmoPubCols=setAbmoPubCols, staChargTablebuSpa=staChargTablebuSpa, setLancInter=setLancInter, setAccoAccTotal=setAccoAccTotal, staIprouIprwandi=staIprouIprwandi, setWanmPpplTim=setWanmPpplTim, setTcpi=setTcpi, setTcpiTcpagingm=setTcpiTcpagingm, setWanmInteMaxi=setWanmInteMaxi, staIpxstMacIpxlanrx=staIpxstMacIpxlanrx, staWanstErrorstatRxl3=staWanstErrorstatRxl3, staConfiOutbandt=staConfiOutbandt, setIpxmSapLanfSta=setIpxmSapLanfSta, setConfWanc=setConfWanc, staIpxstIpxIpxrland=staIpxstIpxIpxrland, staIpxstIpxNetworksNet=staIpxstIpxNetworksNet, staTcpipNet=staTcpipNet, staPppst=staPppst, staInfocSta=staInfocSta, setIpxmSapLanfCols=setIpxmSapLanfCols, setNetbHosTim=setNetbHosTim, staDhcpcTimeoff=staDhcpcTimeoff, staIpxstWatDeletevalues=staIpxstWatDeletevalues, staIprouIprlantx=staIprouIprlantx, staPppstIpcTxconfigrequ=staPppstIpcTxconfigrequ, staConnsCols=staConnsCols, staTcpipDhcDhcplantx=staTcpipDhcDhcplantx, staQueueLanqueu=staQueueLanqueu, staTimes=staTimes, setDhcpHosNod=setDhcpHosNod, setIpxmRipAgin=setIpxmRipAgin, setDnsmFilDom=setDnsmFilDom, staPppstBacRxlinkdropreq=staPppstBacRxlinkdropreq, setDhcpHosCols=setDhcpHosCols, setLcrmTimNum=setLcrmTimNum, setCharTimetabSparemin=setCharTimetabSparemin, setWanmNumbDev=setWanmNumbDev, setAbmoPorAutodialf=setAbmoPorAutodialf, staConfiLoginerr=staConfiLoginerr, setIpxmWan=setIpxmWan, setIpxmWanRouPro=setIpxmWanRouPro, staTcpipIpsIplanfragmentationer=staTcpipIpsIplanfragmentationer, staPppstRxoIpcDns=staPppstRxoIpcDns, staLayerWanl=staLayerWanl, staIpxstSapSaplane=staIpxstSapSaplane, staPppstPapRxsuc=staPppstPapRxsuc, setBridLanSrcFilterty=setBridLanSrcFilterty, staTcpipTftTftplanrxb=staTcpipTftTftplanrxb, staTcpipDhcServerfla=staTcpipDhcServerfla, staIpxstProPropagatelanr=staIpxstProPropagatelanr, setLcrmCelDat=setLcrmCelDat, staTcpipIcmIcmplans=staTcpipIcmIcmplans, setCharTimetabCols=setCharTimetabCols, setIproMasFragments=setIproMasFragments, setNetbSerSmb=setNetbSerSmb, setWanmLayeLay2=setWanmLayeLay2, setIpxmSapTablNod=setIpxmSapTablNod, staPppstBacRxcallbackres=staPppstBacRxcallbackres, staPppstChaTxres=staPppstChaTxres, staIpxstRipRipwane=staIpxstRipRipwane, staIpxstMacIpxwanrx=staIpxstMacIpxwanrx, staQueueIcmpque=staQueueIcmpque, staTcpipIpsIpwanrxdisconnect=staTcpipIpsIpwanrxdisconnect, setTcpiTablearp=setTcpiTablearp, staIpxstIpxNetworksBac=staIpxstIpxNetworksBac, staLayerL2op=staLayerL2op, staTcpipHttHttpau=staTcpipHttHttpau, staChannExtra=staChannExtra, staTcpipDel=staTcpipDel, staPppstLcpRxerrors=staPppstLcpRxerrors, staTcpipArpTablear=staTcpipArpTablear, staInfocIfc=staInfocIfc, setIproMasServicetaCols=setIproMasServicetaCols, setIproDefDev=setIproDefDev, staLanstLanheappa=staLanstLanheappa, staS0busDin=staS0busDin, setBridOpe=setBridOpe, staTimesIsdUnits=staTimesIsdUnits, setIproDefInd=setIproDefInd, setNetbRem=setNetbRem, setNetbSerOsv=setNetbSerOsv, staInfocB1d=staInfocB1d, staTcpipTftTftplanrx=staTcpipTftTftplanrx, setCharRouterm=setCharRouterm, staTcpipIpsIpwanrx=staTcpipIpsIpwanrx, staPppstIpcTxconfigack=staPppstIpcTxconfigack, staIpxstMacIpxwanrxb=staIpxstMacIpxwanrxb, setWanmInteLlmo=setWanmInteLlmo, setAbmoClaBlockednumber2=setAbmoClaBlockednumber2, staPppstLcpTxprotocolre=staPppstLcpTxprotocolre, staConfiLoginrej=staConfiLoginrej, setCharTimetabMinutesp=setCharTimetabMinutesp, setCharMinutes=setCharMinutes, setDnsmDns=setDnsmDns, staPppstLcpTxcodereject=staPppstLcpTxcodereject, setAccoAccMacad=setAccoAccMacad, staTcpipArpTablearCols=staTcpipArpTablearCols, setIproMasTablemasqTim=setIproMasTablemasqTim, staRemotCharg=staRemotCharg, setWanmScriCols=setWanmScriCols, staTcpipHttHttpno=staTcpipHttHttpno, setAbmoPor=setAbmoPor, staPppstCcpTxconfignak=staPppstCcpTxconfignak, staTcpipTftTftpwanrxa=staTcpipTftTftpwanrxa, setLancEazms=setLancEazms, staIpxstMacIpxwantx=staIpxstMacIpxwantx, staS0busD2sTei=staS0busD2sTei, setDhcpTabNod=setDhcpTabNod, staPppstCcpTxconfigrequ=staPppstCcpTxconfigrequ, staConnsPass=staConnsPass, setConfFarc=setConfFarc, setNetbGroTim=setNetbGroTim, staWanstBytetransRxb=staWanstBytetransRxb, staTcpipTcpTcplantx=staTcpipTcpTcplantx, setNetbRemCols=setNetbRemCols, staPppstBac=staPppstBac, setSnmpMonCols=setSnmpMonCols, staChargTimetabBudgetmi=staChargTimetabBudgetmi, setDhcpNet=setDhcpNet, staPppstTxoLcpAcc=staPppstTxoLcpAcc, staChargSpareda=staChargSpareda, setAbmoPubExc=setAbmoPubExc, setWanmRoutIfc=setWanmRoutIfc, setWanmNumbCols=setWanmNumbCols, setTcpiIpnetmask=setTcpiIpnetmask, setIproFirRulDes=setIproFirRulDes, staCalliBch=staCalliBch, staWanstBytetransTxb=staWanstBytetransTxb, staWanstWanqueuep=staWanstWanqueuep, staIpxstMacDeleteval=staIpxstMacDeleteval, staPppstCbcRxreq=staPppstCbcRxreq, setWanmManu=setWanmManu, staTcpipTftTftplantxe=staTcpipTftTftplantxe, staPppstPapTxfai=staPppstPapTxfai, staPppstBacTxcallrequest=staPppstBacTxcallrequest, staChann=staChann, staTcpipDhcDhcpwanrx=staTcpipDhcDhcpwanrx, staTcpipDns=staTcpipDns, staQueueDhcpcli=staQueueDhcpcli, staIpxstSapTablesaNet=staIpxstSapTablesaNet, setIproRipTabDis=setIproRipTabDis, staConfiLoginloc=staConfiLoginloc, staIpxstIpxIpxrwanr=staIpxstIpxIpxrwanr, setIpxmWanRou=setIpxmWanRou, staLayerLay2=staLayerLay2, staIpxstIpxIpxrwans=staIpxstIpxIpxrwans, setIproFir=setIproFir, staChannChan=staChannChan, staTcpipDnsDhcp=staTcpipDnsDhcp, staIpxstProPropagatewanr=staIpxstProPropagatewanr, setDhcpHos=setDhcpHos, staTcpipDhcTabledhcp=staTcpipDhcTabledhcp, setWanmNameCal=setWanmNameCal, setIpxmLanIpxw=setIpxmLanIpxw, staBridgBrglanf=staBridgBrglanf, staConnsErro=staConnsErro, setIproRipTabRou=setIproRipTabRou, setIpxmSapWanfEnd=setIpxmSapWanfEnd, setIpxmWanSocEnd=setIpxmWanSocEnd, setAbmoClaCols=setAbmoClaCols, staTcpipTftTftpwanrxw=staTcpipTftTftpwanrxw, setDhcpAliImagef=setDhcpAliImagef, staBridgBrgwanf=staBridgBrgwanf, staPppstChaRxcha=staPppstChaRxcha, setWanmNameCols=setWanmNameCols, setDhcpBro=setDhcpBro, staTimesIsdInfoe=staTimesIsdInfoe, setAccoCurUsern=setAccoCurUsern, staTcpipHttDelete=staTcpipHttDelete, staQueue=staQueue, setSnmpMonPor=setSnmpMonPor, setDnsmDnsCols=setDnsmDnsCols, setIpxmRipTabl=setIpxmRipTabl, setIpxmLanBind=setIpxmLanBind, setLcrmCelCols=setLcrmCelCols, staPppstIpxTxconfigreje=staPppstIpxTxconfigreje, staPppstIpxRxconfignak=staPppstIpxRxconfignak, setTcpiAccesslisCols=setTcpiAccesslisCols, setWanmPpplAut=setWanmPpplAut, setIproMasTablemasq=setIproMasTablemasq, staIpxstSap=staIpxstSap, setAbmoPorCols=setAbmoPorCols, staPppstIpxRxconfigack=staPppstIpxRxconfigack, staPppstCcpTxterminater=staPppstCcpTxterminater, setIproPro=setIproPro, setIpxmSapTablFla=setIpxmSapTablFla, setIproFirObjNam=setIproFirObjNam, staPppstTxoIpxNod=staPppstTxoIpxNod, staChargTablebuCols=staChargTablebuCols, setIpxmWanRouNet=setIpxmWanRouNet, setCharTablebuBud=setCharTablebuBud, staIpxstIpxEstablisCols=staIpxstIpxEstablisCols, setNetbSerCols=setNetbSerCols, staTcpipTcpTcplanche=staTcpipTcpTcplanche, staTcpipTft=staTcpipTft, staTcpipDhcDhcplanrx=staTcpipDhcDhcplanrx, staPppstRxoLcpIfc=staPppstRxoLcpIfc, setDhcpTabTyp=setDhcpTabTyp, setIproDef=setIproDef, setAbmoRin=setAbmoRin, staTcpipDnsHitl=staTcpipDnsHitl, staTcpipNetLanr=staTcpipNetLanr, staIprouIprwanrx=staIprouIprwanrx, setNetbHosNam=setNetbHosNam, setTcpiIntraneta=setTcpiIntraneta, staTcpipArp=staTcpipArp, staTcpipTftDeletevalu=staTcpipTftDeletevalu, staIprouEstablisCols=staIprouEstablisCols, setCharTimetabBudgetmi=setCharTimetabBudgetmi, staQueueDhcpser=staQueueDhcpser, staPppstMls=staPppstMls, staPppstRxoIpxNod=staPppstRxoIpxNod, staPppstRxoLcpAcf=staPppstRxoLcpAcf, staQueueIpqueue=staQueueIpqueue, staWanstPackettraTxn=staWanstPackettraTxn, staDhcpcServeri=staDhcpcServeri, setNetbWan=setNetbWan, setIpxmSapTablHop=setIpxmSapTablHop, staTcpipTftTftpwancon=staTcpipTftTftpwancon, staTcpipDhcDhcprxinf=staTcpipDhcDhcprxinf, setNetbHosTyp=setNetbHosTyp, setConfLanc=setConfLanc, firTabSta=firTabSta, setConfPass=setConfPass, staPppstCcpTxconfigack=staPppstCcpTxconfigack, staLanstLantxunic=staLanstLantxunic, staPppstPapDelet=staPppstPapDelet, staTcpipTftTftplantx=staTcpipTftTftplantx, setIpxmIpx=setIpxmIpx, staTimesCur=staTimesCur, setIpxmRipTablTim=setIpxmRipTablTim, staIpxstIpxIpxrlanc=staIpxstIpxIpxrlanc, staIpxstProPropagatewanf=staIpxstProPropagatewanf, setIpxmRipTablCols=setIpxmRipTablCols, setNetbGroCols=setNetbGroCols)
mibBuilder.exportSymbols("ELSA-MIB", setCharSpareun=setCharSpareun, staIpxstRipTableriHop=staIpxstRipTableriHop, staPppstIpcRxterminatea=staPppstIpcRxterminatea, setWanmProt=setWanmProt, setIpxmLan=setIpxmLan, staTcpipDhcTabledhcpNod=staTcpipDhcTabledhcpNod, staPppstIpxTxterminater=staPppstIpxTxterminater, staIpxstSapTablesaTim=staIpxstSapTablesaTim, setIproIprRou=setIproIprRou, staTcpipTcpDeleteval=staTcpipTcpDeleteval, setDhcpTabIpa=setDhcpTabIpa, staDhcpcTabletiCols=staDhcpcTabletiCols, staTcpipDhcDhcptxack=staTcpipDhcDhcptxack, staIpxstRipRipwant=staIpxstRipRipwant, setWanmPppl=setWanmPppl, setDhcpTab=setDhcpTab, staTcpipTftTftpwanrx=staTcpipTftTftpwanrx, setTcpiTablearpLas=setTcpiTablearpLas, setIpxmRipLanf=setIpxmRipLanf, staS0busD2sL2a=staS0busD2sL2a, setDnsmFilCols=setDnsmFilCols, staPppstBacRxlinkdropres=staPppstBacRxlinkdropres, staBridgTablebrFor=staBridgTablebrFor, staPppstMlsRxfrags=staPppstMlsRxfrags, staRemotIfc=staRemotIfc, staLanstLanrxerro=staLanstLanrxerro, staQueueIprqueu=staQueueIprqueu, staPppstPapRxdis=staPppstPapRxdis, staTcpipTftTftpwantxa=staTcpipTftTftpwantxa, staCalliCli=staCalliCli, setCharTimetabIfc=setCharTimetabIfc, setNetbRemNam=setNetbRemNam, setLcrmTimCols=setLcrmTimCols, staTcpipTftTftpwantxo=staTcpipTftTftpwantxo, setIpxmSapTablTyp=setIpxmSapTablTyp, staIprouEstablisDpo=staIprouEstablisDpo, staDhcpcTablena=staDhcpcTablena, setAbmoPorAutodialn=setAbmoPorAutodialn, staDhcpcConfigu=staDhcpcConfigu, staIpxstWatSpxwatchdogwanr=staIpxstWatSpxwatchdogwanr, staPppstTxoLcpCal=staPppstTxoLcpCal, staWanstWantxdisc=staWanstWantxdisc)
