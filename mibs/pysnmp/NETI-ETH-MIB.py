#
# PySNMP MIB module NETI-ETH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETI-ETH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:09:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
Dsti, = mibBuilder.importSymbols("NETI-CHMGR-MIB", "Dsti")
netiGeneric, = mibBuilder.importSymbols("NETI-COMMON-MIB", "netiGeneric")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, NotificationType, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, IpAddress, TimeTicks, ModuleIdentity, Integer32, Counter64, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "IpAddress", "TimeTicks", "ModuleIdentity", "Integer32", "Counter64", "Unsigned32", "ObjectIdentity")
RowStatus, RowPointer, DisplayString, TruthValue, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "RowPointer", "DisplayString", "TruthValue", "TimeStamp", "TextualConvention")
netiEthMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2928, 2, 2))
netiEthMIB.setRevisions(('2014-03-20 10:00', '2013-02-28 10:00', '2012-09-12 10:00', '2012-01-27 15:00', '2011-10-26 09:00', '2011-09-05 11:00', '2010-10-20 16:00', '2009-07-08 12:00',))
if mibBuilder.loadTexts: netiEthMIB.setLastUpdated('201403201000Z')
if mibBuilder.loadTexts: netiEthMIB.setOrganization('Net Insight AB')
class TrafficClass(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class VLANSet(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(512, 512)
    fixedLength = 512

class AdvertisedSpeed(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("auto", 0), ("b10", 1), ("b100", 2), ("b1000", 3), ("b10g", 4))

class AdvertisedDuplex(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("auto", 0), ("fullDuplex", 1), ("halfDuplex", 2))

class AdvertisedFlowControl(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("auto", 0), ("pause", 1), ("asmDir", 2))

class BridgeIdentifier(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class EthInterfaceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("auto", 0), ("unknown", 1), ("bETS", 2), ("b100baseTX", 3), ("b1000baseSX", 4), ("b1000baseLX", 5), ("b1000baseT", 6), ("bETSGroup", 7), ("b10GbaseSR", 8), ("b10GbaseLR", 9), ("b10GbaseLRM", 10), ("b10GbaseER", 11), ("b10GbaseZR", 12))

class PortIdentifier(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'

class FrameProcess(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notSupported", 0), ("drop", 1), ("forward", 2))

class InterfaceIndexList(TextualConvention, OctetString):
    status = 'current'
    displayHint = '4d,'

class IfgProtectionStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unavailable", 1), ("unprotected", 2), ("standbyProtected", 3), ("hitlessCapable", 4), ("hitlessProtected", 5))

ethObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1))
ethDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1))
ethFwdFuncGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2))
ethInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3))
ethStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4))
ethDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: ethDeviceTable.setStatus('current')
ethDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"))
if mibBuilder.loadTexts: ethDeviceEntry.setStatus('current')
ethDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ethDevIndex.setStatus('current')
ethDevRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDevRowStatus.setStatus('current')
ethDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevName.setStatus('current')
ethDevContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevContainerName.setStatus('current')
ethDevProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevProductName.setStatus('current')
ethDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("absent", 2), ("mismatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevStatus.setStatus('current')
ethDevCapJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 7), Bits().clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapJumboFrames.setStatus('current')
ethDevCapMaxAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapMaxAgingTime.setStatus('current')
ethDevCapMACMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 9), Bits().clone(namedValues=NamedValues(("auto", 0), ("mac", 1), ("nomac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapMACMode.setStatus('current')
ethDevCapSpanningTree = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 10), Bits().clone(namedValues=NamedValues(("auto", 0), ("forward", 1), ("drop", 2), ("process", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapSpanningTree.setStatus('current')
ethDevCapVLANMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 11), Bits().clone(namedValues=NamedValues(("transparent", 0), ("customer", 1), ("provider", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapVLANMode.setStatus('current')
ethDevCapAdvertisedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 12), AdvertisedDuplex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapAdvertisedDuplex.setStatus('current')
ethDevCapAdvertisedFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 13), AdvertisedFlowControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapAdvertisedFlowControl.setStatus('current')
ethDevCapAcceptableFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 14), Bits().clone(namedValues=NamedValues(("all", 0), ("vlanTagged", 1), ("untagged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapAcceptableFrameType.setStatus('current')
ethDevCapDefaultEthernetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapDefaultEthernetPriority.setStatus('current')
ethDevCapLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 16), Bits().clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapLearning.setStatus('current')
ethDevCapTransmittedFrameTypeETS = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 17), Bits().clone(namedValues=NamedValues(("vlanTagged", 1), ("untagged", 2), ("legacy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapTransmittedFrameTypeETS.setStatus('current')
ethDevCapTransmittedFrameTypeDot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 18), Bits().clone(namedValues=NamedValues(("vlanTagged", 1), ("untagged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapTransmittedFrameTypeDot3.setStatus('current')
ethDevCapMaxMaxQueueOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapMaxMaxQueueOctets.setStatus('current')
ethDevCapMaxMaxQueueFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapMaxMaxQueueFrames.setStatus('deprecated')
ethDevCapMaxTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 21), TrafficClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapMaxTrafficClass.setStatus('current')
ethDevEtsNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevEtsNextIndex.setStatus('current')
ethDevFwdFuncNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevFwdFuncNextIndex.setStatus('current')
ethDevCapPerformanceMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapPerformanceMonitoring.setStatus('current')
ethDevCapConfigurableFaultMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapConfigurableFaultMgmt.setStatus('current')
ethDevIfgFirstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevIfgFirstIndex.setStatus('current')
ethDevIfgNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevIfgNextIndex.setStatus('current')
ethDevCapDropPrecedenceLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapDropPrecedenceLevels.setStatus('current')
ethDevCapDropProbabilityFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 29), Bits().clone(namedValues=NamedValues(("taildrop", 0), ("wred", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevCapDropProbabilityFunctions.setStatus('current')
ethDevFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 1, 1, 1, 30), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDevFailure.setStatus('current')
ethFwdFuncLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdFuncLastChange.setStatus('current')
ethFwdFuncTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: ethFwdFuncTable.setStatus('current')
ethFwdFuncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethFwdIndex"))
if mibBuilder.loadTexts: ethFwdFuncEntry.setStatus('current')
ethFwdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ethFwdIndex.setStatus('current')
ethFwdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethFwdRowStatus.setStatus('current')
ethFwdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdName.setStatus('current')
ethFwdCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethFwdCustomerId.setStatus('current')
ethFwdPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 5), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethFwdPurpose.setStatus('current')
ethFwdJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdJumboFrames.setStatus('current')
ethFwdMACMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mac", 2), ("nomac", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMACMode.setStatus('current')
ethFwdCurrentMACMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("mac", 2), ("nomac", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdCurrentMACMode.setStatus('current')
ethFwdSpanningTree = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("forward", 2), ("drop", 3), ("process", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdSpanningTree.setStatus('current')
ethFwdVLANMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transparent", 1), ("customer", 2), ("provider", 3))).clone('transparent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdVLANMode.setStatus('current')
ethFwdAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 11), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdAgingTime.setStatus('current')
ethFwdFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdFailure.setStatus('current')
ethFwdLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdLastChange.setStatus('current')
ethFwdPropagateFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdPropagateFaults.setStatus('current')
ethFwdReservedAddr0180C2000002 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 15), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C2000002.setStatus('current')
ethFwdReservedAddr0180C2000003 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 16), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C2000003.setStatus('current')
ethFwdReservedAddr0180C2000004 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 17), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C2000004.setStatus('current')
ethFwdReservedAddr0180C2000005 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 18), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C2000005.setStatus('current')
ethFwdReservedAddr0180C2000006 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 19), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C2000006.setStatus('current')
ethFwdReservedAddr0180C2000007 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 20), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C2000007.setStatus('current')
ethFwdReservedAddr0180C2000008 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 21), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C2000008.setStatus('current')
ethFwdReservedAddr0180C2000009 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 22), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C2000009.setStatus('current')
ethFwdReservedAddr0180C200000A = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 23), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C200000A.setStatus('current')
ethFwdReservedAddr0180C200000B = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 24), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C200000B.setStatus('current')
ethFwdReservedAddr0180C200000C = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 25), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C200000C.setStatus('current')
ethFwdReservedAddr0180C200000D = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 26), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C200000D.setStatus('current')
ethFwdReservedAddr0180C200000E = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 27), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C200000E.setStatus('current')
ethFwdReservedAddr0180C200000F = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 28), FrameProcess().clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdReservedAddr0180C200000F.setStatus('current')
ethFwdCurrentStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("forward", 2), ("drop", 3), ("process", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdCurrentStpMode.setStatus('current')
ethFwdMrpAddr0180C2000020 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 30), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C2000020.setStatus('current')
ethFwdMrpAddr0180C2000021 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 31), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C2000021.setStatus('current')
ethFwdMrpAddr0180C2000022 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 32), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C2000022.setStatus('current')
ethFwdMrpAddr0180C2000023 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 33), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C2000023.setStatus('current')
ethFwdMrpAddr0180C2000024 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 34), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C2000024.setStatus('current')
ethFwdMrpAddr0180C2000025 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 35), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C2000025.setStatus('current')
ethFwdMrpAddr0180C2000026 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 36), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C2000026.setStatus('current')
ethFwdMrpAddr0180C2000027 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 37), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C2000027.setStatus('current')
ethFwdMrpAddr0180C2000028 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 38), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C2000028.setStatus('current')
ethFwdMrpAddr0180C2000029 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 39), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C2000029.setStatus('current')
ethFwdMrpAddr0180C200002A = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 40), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C200002A.setStatus('current')
ethFwdMrpAddr0180C200002B = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 41), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C200002B.setStatus('current')
ethFwdMrpAddr0180C200002C = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 42), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C200002C.setStatus('current')
ethFwdMrpAddr0180C200002D = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 43), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C200002D.setStatus('current')
ethFwdMrpAddr0180C200002E = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 44), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C200002E.setStatus('current')
ethFwdMrpAddr0180C200002F = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 2, 1, 45), FrameProcess().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdMrpAddr0180C200002F.setStatus('current')
ethFwdDiffservTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: ethFwdDiffservTable.setStatus('current')
ethFwdDiffservEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethFwdIndex"), (0, "NETI-ETH-MIB", "ethFwdDiffservIndex"))
if mibBuilder.loadTexts: ethFwdDiffservEntry.setStatus('current')
ethFwdDiffservIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: ethFwdDiffservIndex.setStatus('current')
ethFwdDiffservFlowGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdDiffservFlowGroup.setStatus('current')
ethFwdRstpTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4), )
if mibBuilder.loadTexts: ethFwdRstpTable.setStatus('current')
ethFwdRstpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethFwdIndex"))
if mibBuilder.loadTexts: ethFwdRstpEntry.setStatus('current')
ethFwdRstpBridgeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 1), BridgeIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdRstpBridgeIdentifier.setStatus('current')
ethFwdRstpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdRstpPriority.setStatus('current')
ethFwdRstpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 3), Timeout()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdRstpTimeSinceTopologyChange.setStatus('current')
ethFwdRstpTopologyChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdRstpTopologyChangeCount.setStatus('current')
ethFwdRstpTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdRstpTopologyChange.setStatus('current')
ethFwdRstpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 6), BridgeIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdRstpDesignatedRoot.setStatus('current')
ethFwdRstpRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdRstpRootPathCost.setStatus('current')
ethFwdRstpRootPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdRstpRootPortName.setStatus('current')
ethFwdRstpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 9), Timeout()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdRstpMaxAge.setStatus('current')
ethFwdRstpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 10), Timeout()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdRstpHelloTime.setStatus('current')
ethFwdRstpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 11), Timeout()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethFwdRstpForwardDelay.setStatus('current')
ethFwdRstpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 12), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdRstpBridgeMaxAge.setStatus('current')
ethFwdRstpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 200)).clone(200)).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdRstpBridgeHelloTime.setStatus('current')
ethFwdRstpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdRstpBridgeForwardDelay.setStatus('current')
ethFwdRstpTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdRstpTxHoldCount.setStatus('current')
ethFwdRstpForceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethFwdRstpForceVersion.setStatus('current')
ethIfGroupLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfGroupLastChange.setStatus('current')
ethIfTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: ethIfTable.setStatus('current')
ethIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"))
if mibBuilder.loadTexts: ethIfEntry.setStatus('current')
ethIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ethIfIndex.setStatus('current')
ethIfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfIfIndex.setStatus('current')
ethIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfName.setStatus('current')
ethIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 4), EthInterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfType.setStatus('current')
ethIfCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfCustomerId.setStatus('current')
ethIfPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 6), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfPurpose.setStatus('current')
ethIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfAdminStatus.setStatus('current')
ethIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 9))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("dormant", 5), ("notPresent", 6), ("partial", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfOperStatus.setStatus('current')
ethIfFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfFailure.setStatus('current')
ethIfForwardingFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfForwardingFunction.setStatus('current')
ethIfAcceptableFrameTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("vlanTagged", 2), ("untagged", 3))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfAcceptableFrameTypes.setStatus('current')
ethIfTransmittedFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("vlanTagged", 2), ("untagged", 3), ("legacy", 4))).clone('vlanTagged')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfTransmittedFrameType.setStatus('current')
ethIfDefaultVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfDefaultVLAN.setStatus('current')
ethIfDefaultEthernetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfDefaultEthernetPriority.setStatus('current')
ethIfPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("diffserv", 2))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfPriorityMode.setStatus('current')
ethIfDefaultTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 16), TrafficClass()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfDefaultTrafficClass.setStatus('current')
ethIfFlowGroupMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8).clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfFlowGroupMap.setStatus('current')
ethIfLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfLearning.setStatus('current')
ethIfInSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfInSpeed.setStatus('current')
ethIfInHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfInHighSpeed.setStatus('current')
ethIfOutSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfOutSpeed.setStatus('current')
ethIfOutHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfOutHighSpeed.setStatus('current')
ethIfVLANNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfVLANNextIndex.setStatus('current')
ethIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfLastChange.setStatus('current')
ethIfSrcPmReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 25), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfSrcPmReference.setStatus('current')
ethIfSnkPmReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 26), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfSnkPmReference.setStatus('current')
ethIfSrcDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 27), Unsigned32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSrcDegThreshold.setStatus('current')
ethIfSnkDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 28), Unsigned32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSnkDegThreshold.setStatus('current')
ethIfSrcDegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSrcDegPeriod.setStatus('current')
ethIfSnkDegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSnkDegPeriod.setStatus('current')
ethIfSrcReducedBitRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSrcReducedBitRateThreshold.setStatus('current')
ethIfSnkReducedBitRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSnkReducedBitRateThreshold.setStatus('current')
ethIfSrcReducedBitRateHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSrcReducedBitRateHighThreshold.setStatus('current')
ethIfSnkReducedBitRateHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSnkReducedBitRateHighThreshold.setStatus('current')
ethIfSrcReducedBitRateAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 35), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSrcReducedBitRateAIS.setStatus('current')
ethIfSnkReducedBitRateAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 36), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSnkReducedBitRateAIS.setStatus('current')
ethIfSnkDegAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 37), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSnkDegAIS.setStatus('current')
ethIfSrcMinorReducedBitRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSrcMinorReducedBitRateThreshold.setStatus('current')
ethIfSnkMinorReducedBitRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSnkMinorReducedBitRateThreshold.setStatus('current')
ethIfSrcMinorReducedBitRateHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSrcMinorReducedBitRateHighThreshold.setStatus('current')
ethIfSnkMinorReducedBitRateHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 41), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfSnkMinorReducedBitRateHighThreshold.setStatus('current')
ethIfSrcFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 42), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfSrcFailure.setStatus('current')
ethIfSnkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 43), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfSnkFailure.setStatus('current')
ethIfInterfaceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfInterfaceGroup.setStatus('current')
ethIfMaxMaxQueueFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfMaxMaxQueueFrames.setStatus('current')
ethIfDefaultDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfDefaultDropPrecedence.setStatus('current')
ethIfDropPrecedenceMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 2, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8).clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfDropPrecedenceMap.setStatus('current')
ethIfQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 3), )
if mibBuilder.loadTexts: ethIfQueueTable.setStatus('current')
ethIfQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 3, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"), (0, "NETI-ETH-MIB", "ethIfQueueTrafficClass"))
if mibBuilder.loadTexts: ethIfQueueEntry.setStatus('current')
ethIfQueueTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 3, 1, 1), TrafficClass())
if mibBuilder.loadTexts: ethIfQueueTrafficClass.setStatus('current')
ethIfQueueMaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfQueueMaxOctets.setStatus('current')
ethIfQueueMaxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfQueueMaxFrames.setStatus('current')
ethIfVLANSetsTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 4), )
if mibBuilder.loadTexts: ethIfVLANSetsTable.setStatus('current')
ethIfVLANSetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 4, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"), (0, "NETI-ETH-MIB", "ethIfVLANSetIndex"))
if mibBuilder.loadTexts: ethIfVLANSetsEntry.setStatus('current')
ethIfVLANSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ethIfVLANSetIndex.setStatus('current')
ethIfVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIfVLANRowStatus.setStatus('current')
ethIfVLANSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 4, 1, 3), VLANSet().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIfVLANSet.setStatus('current')
ethIfVLANCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIfVLANCustomerId.setStatus('current')
ethIfVLANPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 4, 1, 5), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIfVLANPurpose.setStatus('current')
ethDot3Table = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5), )
if mibBuilder.loadTexts: ethDot3Table.setStatus('current')
ethDot3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"))
if mibBuilder.loadTexts: ethDot3Entry.setStatus('current')
ethDot3AutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDot3AutoNegotiate.setStatus('current')
ethDot3AdvertisedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 2), AdvertisedSpeed().clone(namedValues=NamedValues(("auto", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDot3AdvertisedSpeed.setStatus('current')
ethDot3AdvertisedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 3), AdvertisedDuplex().clone(namedValues=NamedValues(("auto", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDot3AdvertisedDuplex.setStatus('current')
ethDot3AdvertisedFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 4), AdvertisedFlowControl().clone(namedValues=NamedValues(("auto", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDot3AdvertisedFlowControl.setStatus('current')
ethDot3ActiveSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ValueRangeConstraint(1000, 1000), ValueRangeConstraint(10000, 10000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDot3ActiveSpeed.setStatus('current')
ethDot3ActiveDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDot3ActiveDuplex.setStatus('current')
ethDot3ActiveFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("receive", 2), ("transmit", 3), ("none", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDot3ActiveFlowControl.setStatus('current')
ethDot3ForceVLANTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 8), VLANSet().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDot3ForceVLANTagged.setStatus('current')
ethDot3ForceVLANUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 9), VLANSet().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDot3ForceVLANUntagged.setStatus('current')
ethDot3SupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 10), AdvertisedSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDot3SupportedSpeeds.setStatus('current')
ethDot3ResetToDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDot3ResetToDefaults.setStatus('current')
ethDot3AutoNegotiateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDot3AutoNegotiateStatus.setStatus('current')
ethDot3AutoNegotiateAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDot3AutoNegotiateAllowed.setStatus('current')
ethDot3AutoNegotiateMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDot3AutoNegotiateMandatory.setStatus('current')
ethDot3SupportedIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 15), Bits().clone(namedValues=NamedValues(("b100baseTX", 3), ("b1000baseSX", 4), ("b1000baseLX", 5), ("b1000baseT", 6), ("b10GbaseSR", 8), ("b10GbaseLR", 9), ("b10GbaseLRM", 10), ("b10GbaseER", 11), ("b10GbaseZR", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDot3SupportedIfType.setStatus('current')
ethDot3SelectedIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 5, 1, 16), EthInterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDot3SelectedIfType.setStatus('current')
ethEtsTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 6), )
if mibBuilder.loadTexts: ethEtsTable.setStatus('current')
ethEtsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 6, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"))
if mibBuilder.loadTexts: ethEtsEntry.setStatus('current')
ethEtsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethEtsRowStatus.setStatus('current')
ethEtsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2), ("unspecified", 3))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethEtsMode.setStatus('current')
ethEtsLocalDsti = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 6, 1, 3), Dsti()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethEtsLocalDsti.setStatus('current')
ethEtsODescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethEtsODescription.setStatus('current')
ethEtsOConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethEtsOConnection.setStatus('current')
ethEtsSnkExpectChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethEtsSnkExpectChannel.setStatus('current')
ethEtsTConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 7), )
if mibBuilder.loadTexts: ethEtsTConnectionTable.setStatus('current')
ethEtsTConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 7, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"), (0, "NETI-ETH-MIB", "ethEtsTConnectionIndex"))
if mibBuilder.loadTexts: ethEtsTConnectionEntry.setStatus('current')
ethEtsTConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ethEtsTConnectionIndex.setStatus('current')
ethEtsTConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 7, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethEtsTConnectionRowStatus.setStatus('current')
ethEtsTConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethEtsTConnection.setStatus('current')
ethEtsIndexLookupTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 8), )
if mibBuilder.loadTexts: ethEtsIndexLookupTable.setStatus('current')
ethEtsIndexLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 8, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethEtsLocalDsti"))
if mibBuilder.loadTexts: ethEtsIndexLookupEntry.setStatus('current')
ethEtsIndexLookupDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethEtsIndexLookupDevIndex.setStatus('current')
ethEtsIndexLookupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethEtsIndexLookupIfIndex.setStatus('current')
ethIfRstpTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9), )
if mibBuilder.loadTexts: ethIfRstpTable.setStatus('current')
ethIfRstpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"))
if mibBuilder.loadTexts: ethIfRstpEntry.setStatus('current')
ethIfRstpPortIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 1), PortIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfRstpPortIdentifier.setStatus('current')
ethIfRstpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfRstpPriority.setStatus('current')
ethIfRstpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfRstpState.setStatus('current')
ethIfRstpTopologyChangeAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfRstpTopologyChangeAcknowledge.setStatus('current')
ethIfRstpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfRstpPathCost.setStatus('current')
ethIfRstpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 6), BridgeIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfRstpDesignatedRoot.setStatus('current')
ethIfRstpDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfRstpDesignatedCost.setStatus('current')
ethIfRstpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 8), BridgeIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfRstpDesignatedBridge.setStatus('current')
ethIfRstpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 9), PortIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfRstpDesignatedPort.setStatus('current')
ethIfRstpAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("true", 1), ("false", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfRstpAdminEdgePort.setStatus('current')
ethIfRstpOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfRstpOperEdgePort.setStatus('current')
ethIfRstpAdminPointToPointMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("true", 1), ("false", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfRstpAdminPointToPointMAC.setStatus('current')
ethIfRstpOperPointToPointMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfRstpOperPointToPointMAC.setStatus('current')
ethIfRstpCurrentPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfRstpCurrentPathCost.setStatus('current')
ethIfgTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10), )
if mibBuilder.loadTexts: ethIfgTable.setStatus('current')
ethIfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"))
if mibBuilder.loadTexts: ethIfgEntry.setStatus('current')
ethIfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIfgRowStatus.setStatus('current')
ethIfgMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 2), InterfaceIndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfgMembers.setStatus('current')
ethIfgDifferentialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfgDifferentialDelay.setStatus('current')
ethIfgDifferentialDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfgDifferentialDelayValid.setStatus('current')
ethIfgAheadInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfgAheadInterface.setStatus('current')
ethIfgHitlessProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIfgHitlessProtection.setStatus('current')
ethIfgProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 7), IfgProtectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfgProtectionStatus.setStatus('current')
ethIfgExpectedProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 8), IfgProtectionStatus().clone('unavailable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIfgExpectedProtectionStatus.setStatus('current')
ethIfgForceHit = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIfgForceHit.setStatus('current')
ethIfgActiveInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIfgActiveInterface.setStatus('current')
ethIfgExpectChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 10, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIfgExpectChannel.setStatus('current')
ethIfQDropThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 11), )
if mibBuilder.loadTexts: ethIfQDropThresholdTable.setStatus('current')
ethIfQDropThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 11, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"), (0, "NETI-ETH-MIB", "ethIfQueueTrafficClass"), (0, "NETI-ETH-MIB", "ethIfQDropThresDropPrecedence"))
if mibBuilder.loadTexts: ethIfQDropThresholdEntry.setStatus('current')
ethIfQDropThresDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfQDropThresDropPrecedence.setStatus('current')
ethIfQDropThresMaxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfQDropThresMaxFrames.setStatus('current')
ethIfQDropThresCurrentMaxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfQDropThresCurrentMaxFrames.setStatus('current')
ethIfQDropThresDropProbabilityFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("taildrop", 0), ("wred", 1))).clone('taildrop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfQDropThresDropProbabilityFunction.setStatus('current')
ethStatDcap1Table = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: ethStatDcap1Table.setStatus('current')
ethStatDcap1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"))
if mibBuilder.loadTexts: ethStatDcap1Entry.setStatus('current')
ethStatDcap1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethStatDcap1Reset.setStatus('current')
ethStatDcap1TxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1TxOctets.setStatus('current')
ethStatDcap1TxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1TxPackets.setStatus('current')
ethStatDcap1TxDiscardOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1TxDiscardOctets.setStatus('current')
ethStatDcap1TxDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1TxDiscardPackets.setStatus('current')
ethStatDcap1TxBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1TxBitrate.setStatus('current')
ethStatDcap1TxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1TxLoad.setStatus('current')
ethStatDcap1RxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1RxOctets.setStatus('current')
ethStatDcap1RxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1RxPackets.setStatus('current')
ethStatDcap1RxDiscardOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1RxDiscardOctets.setStatus('current')
ethStatDcap1RxDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1RxDiscardPackets.setStatus('current')
ethStatDcap1RxErrorCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1RxErrorCRC.setStatus('current')
ethStatDcap1RxBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1RxBitrate.setStatus('current')
ethStatDcap1RxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatDcap1RxLoad.setStatus('current')
ethIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 2), )
if mibBuilder.loadTexts: ethIfStatTable.setStatus('current')
ethIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 2, 1), ).setIndexNames((0, "NETI-ETH-MIB", "ethDevIndex"), (0, "NETI-ETH-MIB", "ethIfIndex"))
if mibBuilder.loadTexts: ethIfStatEntry.setStatus('current')
ethIfStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIfStatReset.setStatus('current')
ethIfStatTxBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfStatTxBitrate.setStatus('current')
ethIfStatTxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfStatTxLoad.setStatus('current')
ethIfStatRxBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfStatRxBitrate.setStatus('current')
ethIfStatRxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 2, 1, 4, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfStatRxLoad.setStatus('current')
mibBuilder.exportSymbols("NETI-ETH-MIB", ethDot3AdvertisedSpeed=ethDot3AdvertisedSpeed, ethDevCapMaxMaxQueueFrames=ethDevCapMaxMaxQueueFrames, ethIfQDropThresCurrentMaxFrames=ethIfQDropThresCurrentMaxFrames, ethIfDefaultDropPrecedence=ethIfDefaultDropPrecedence, ethDevRowStatus=ethDevRowStatus, ethFwdDiffservIndex=ethFwdDiffservIndex, ethIfStatEntry=ethIfStatEntry, ethFwdRstpRootPortName=ethFwdRstpRootPortName, ethFwdCurrentStpMode=ethFwdCurrentStpMode, ethEtsIndexLookupTable=ethEtsIndexLookupTable, ethFwdRstpBridgeIdentifier=ethFwdRstpBridgeIdentifier, ethIfQueueMaxFrames=ethIfQueueMaxFrames, ethIfgDifferentialDelay=ethIfgDifferentialDelay, ethFwdFuncGroup=ethFwdFuncGroup, ethDevIndex=ethDevIndex, ethFwdRstpForceVersion=ethFwdRstpForceVersion, ethIfEntry=ethIfEntry, ethIfCustomerId=ethIfCustomerId, ethIfVLANSetsEntry=ethIfVLANSetsEntry, ethStatDcap1RxLoad=ethStatDcap1RxLoad, ethStatDcap1TxBitrate=ethStatDcap1TxBitrate, ethFwdReservedAddr0180C200000A=ethFwdReservedAddr0180C200000A, ethFwdCustomerId=ethFwdCustomerId, ethEtsMode=ethEtsMode, ethIfInHighSpeed=ethIfInHighSpeed, ethIfSnkFailure=ethIfSnkFailure, ethFwdPurpose=ethFwdPurpose, ethDevCapMaxMaxQueueOctets=ethDevCapMaxMaxQueueOctets, ethIfIfIndex=ethIfIfIndex, ethDevIfgFirstIndex=ethDevIfgFirstIndex, ethEtsIndexLookupDevIndex=ethEtsIndexLookupDevIndex, ethIfQDropThresDropPrecedence=ethIfQDropThresDropPrecedence, ethIfRstpPortIdentifier=ethIfRstpPortIdentifier, ethFwdFuncLastChange=ethFwdFuncLastChange, ethDevCapTransmittedFrameTypeDot3=ethDevCapTransmittedFrameTypeDot3, ethIfRstpTable=ethIfRstpTable, ethFwdPropagateFaults=ethFwdPropagateFaults, ethEtsSnkExpectChannel=ethEtsSnkExpectChannel, ethStatDcap1TxLoad=ethStatDcap1TxLoad, ethIfSnkReducedBitRateAIS=ethIfSnkReducedBitRateAIS, ethIfMaxMaxQueueFrames=ethIfMaxMaxQueueFrames, ethIfSnkReducedBitRateThreshold=ethIfSnkReducedBitRateThreshold, ethIfRstpTopologyChangeAcknowledge=ethIfRstpTopologyChangeAcknowledge, EthInterfaceType=EthInterfaceType, ethDevFailure=ethDevFailure, ethDot3Table=ethDot3Table, ethDevCapMaxTrafficClass=ethDevCapMaxTrafficClass, ethIfgEntry=ethIfgEntry, ethIfRstpEntry=ethIfRstpEntry, ethDevCapDropPrecedenceLevels=ethDevCapDropPrecedenceLevels, ethStatDcap1TxDiscardOctets=ethStatDcap1TxDiscardOctets, ethFwdMrpAddr0180C2000028=ethFwdMrpAddr0180C2000028, ethIfgMembers=ethIfgMembers, ethEtsRowStatus=ethEtsRowStatus, ethIfVLANRowStatus=ethIfVLANRowStatus, ethInterfaceGroup=ethInterfaceGroup, ethFwdFailure=ethFwdFailure, ethIfQDropThresDropProbabilityFunction=ethIfQDropThresDropProbabilityFunction, ethIfVLANSetsTable=ethIfVLANSetsTable, ethIfLearning=ethIfLearning, ethDevCapMACMode=ethDevCapMACMode, ethDevIfgNextIndex=ethDevIfgNextIndex, ethFwdReservedAddr0180C200000D=ethFwdReservedAddr0180C200000D, ethIfRstpOperPointToPointMAC=ethIfRstpOperPointToPointMAC, ethFwdVLANMode=ethFwdVLANMode, VLANSet=VLANSet, ethFwdMrpAddr0180C2000022=ethFwdMrpAddr0180C2000022, ethIfSrcReducedBitRateThreshold=ethIfSrcReducedBitRateThreshold, PYSNMP_MODULE_ID=netiEthMIB, ethFwdMACMode=ethFwdMACMode, ethIfForwardingFunction=ethIfForwardingFunction, ethDot3SupportedSpeeds=ethDot3SupportedSpeeds, ethIfRstpDesignatedCost=ethIfRstpDesignatedCost, ethStatDcap1Entry=ethStatDcap1Entry, ethFwdRstpTopologyChangeCount=ethFwdRstpTopologyChangeCount, ethIfOutHighSpeed=ethIfOutHighSpeed, ethFwdCurrentMACMode=ethFwdCurrentMACMode, ethIfSnkDegThreshold=ethIfSnkDegThreshold, ethFwdReservedAddr0180C2000004=ethFwdReservedAddr0180C2000004, ethIfGroupLastChange=ethIfGroupLastChange, ethEtsTConnectionTable=ethEtsTConnectionTable, ethEtsODescription=ethEtsODescription, ethFwdIndex=ethFwdIndex, Timeout=Timeout, ethIfInSpeed=ethIfInSpeed, ethIfVLANSet=ethIfVLANSet, ethIfRstpDesignatedRoot=ethIfRstpDesignatedRoot, ethIfRstpDesignatedPort=ethIfRstpDesignatedPort, ethIfPriorityMode=ethIfPriorityMode, ethIfOperStatus=ethIfOperStatus, ethEtsIndexLookupIfIndex=ethEtsIndexLookupIfIndex, ethIfAdminStatus=ethIfAdminStatus, ethFwdReservedAddr0180C2000003=ethFwdReservedAddr0180C2000003, ethFwdMrpAddr0180C2000027=ethFwdMrpAddr0180C2000027, ethFwdAgingTime=ethFwdAgingTime, ethIfgExpectChannel=ethIfgExpectChannel, ethFwdDiffservTable=ethFwdDiffservTable, ethFwdMrpAddr0180C2000023=ethFwdMrpAddr0180C2000023, ethIfSrcDegThreshold=ethIfSrcDegThreshold, ethFwdRstpHelloTime=ethFwdRstpHelloTime, BridgeIdentifier=BridgeIdentifier, ethDot3SupportedIfType=ethDot3SupportedIfType, ethDot3AutoNegotiateStatus=ethDot3AutoNegotiateStatus, ethFwdRstpTable=ethFwdRstpTable, ethFwdRstpPriority=ethFwdRstpPriority, PortIdentifier=PortIdentifier, ethDeviceTable=ethDeviceTable, ethFwdRstpBridgeForwardDelay=ethFwdRstpBridgeForwardDelay, ethDot3ActiveSpeed=ethDot3ActiveSpeed, ethDevCapAdvertisedDuplex=ethDevCapAdvertisedDuplex, ethIfSnkMinorReducedBitRateHighThreshold=ethIfSnkMinorReducedBitRateHighThreshold, ethIfQueueEntry=ethIfQueueEntry, ethDot3AutoNegotiateMandatory=ethDot3AutoNegotiateMandatory, ethFwdMrpAddr0180C200002C=ethFwdMrpAddr0180C200002C, ethIfgForceHit=ethIfgForceHit, AdvertisedSpeed=AdvertisedSpeed, ethFwdMrpAddr0180C200002F=ethFwdMrpAddr0180C200002F, ethDot3AutoNegotiateAllowed=ethDot3AutoNegotiateAllowed, ethDevCapTransmittedFrameTypeETS=ethDevCapTransmittedFrameTypeETS, ethFwdMrpAddr0180C2000029=ethFwdMrpAddr0180C2000029, ethFwdMrpAddr0180C2000025=ethFwdMrpAddr0180C2000025, ethDevCapDropProbabilityFunctions=ethDevCapDropProbabilityFunctions, ethFwdMrpAddr0180C2000024=ethFwdMrpAddr0180C2000024, ethIfAcceptableFrameTypes=ethIfAcceptableFrameTypes, ethIfSrcMinorReducedBitRateThreshold=ethIfSrcMinorReducedBitRateThreshold, ethIfStatTxBitrate=ethIfStatTxBitrate, ethFwdReservedAddr0180C200000F=ethFwdReservedAddr0180C200000F, ethIfVLANCustomerId=ethIfVLANCustomerId, ethDevCapDefaultEthernetPriority=ethDevCapDefaultEthernetPriority, ethFwdReservedAddr0180C2000002=ethFwdReservedAddr0180C2000002, ethIfSnkDegPeriod=ethIfSnkDegPeriod, ethDevCapPerformanceMonitoring=ethDevCapPerformanceMonitoring, ethStatisticsGroup=ethStatisticsGroup, ethDevEtsNextIndex=ethDevEtsNextIndex, ethIfDefaultTrafficClass=ethIfDefaultTrafficClass, IfgProtectionStatus=IfgProtectionStatus, ethEtsTConnectionEntry=ethEtsTConnectionEntry, ethFwdRstpRootPathCost=ethFwdRstpRootPathCost, ethDot3ResetToDefaults=ethDot3ResetToDefaults, ethStatDcap1RxDiscardOctets=ethStatDcap1RxDiscardOctets, ethDot3ForceVLANUntagged=ethDot3ForceVLANUntagged, ethIfVLANNextIndex=ethIfVLANNextIndex, ethFwdReservedAddr0180C2000008=ethFwdReservedAddr0180C2000008, ethFwdRstpMaxAge=ethFwdRstpMaxAge, ethStatDcap1RxOctets=ethStatDcap1RxOctets, ethIfDropPrecedenceMap=ethIfDropPrecedenceMap, ethStatDcap1TxOctets=ethStatDcap1TxOctets, ethIfInterfaceGroup=ethIfInterfaceGroup, ethIfStatReset=ethIfStatReset, ethDot3AdvertisedFlowControl=ethDot3AdvertisedFlowControl, ethFwdName=ethFwdName, ethFwdRowStatus=ethFwdRowStatus, ethFwdMrpAddr0180C200002A=ethFwdMrpAddr0180C200002A, ethIfgRowStatus=ethIfgRowStatus, ethStatDcap1Table=ethStatDcap1Table, ethIfRstpAdminPointToPointMAC=ethIfRstpAdminPointToPointMAC, ethEtsEntry=ethEtsEntry, ethIfPurpose=ethIfPurpose, ethDeviceGroup=ethDeviceGroup, ethDeviceEntry=ethDeviceEntry, ethDevStatus=ethDevStatus, ethObjects=ethObjects, ethDevCapConfigurableFaultMgmt=ethDevCapConfigurableFaultMgmt, ethIfSrcMinorReducedBitRateHighThreshold=ethIfSrcMinorReducedBitRateHighThreshold, ethEtsTable=ethEtsTable, ethIfRstpCurrentPathCost=ethIfRstpCurrentPathCost, ethFwdRstpBridgeHelloTime=ethFwdRstpBridgeHelloTime, ethDot3Entry=ethDot3Entry, ethStatDcap1RxBitrate=ethStatDcap1RxBitrate, ethIfRstpPathCost=ethIfRstpPathCost, FrameProcess=FrameProcess, ethIfSnkDegAIS=ethIfSnkDegAIS, ethIfQDropThresholdTable=ethIfQDropThresholdTable, ethIfVLANPurpose=ethIfVLANPurpose, ethStatDcap1Reset=ethStatDcap1Reset, ethDot3AdvertisedDuplex=ethDot3AdvertisedDuplex, ethDevCapAdvertisedFlowControl=ethDevCapAdvertisedFlowControl, ethFwdFuncTable=ethFwdFuncTable, ethIfStatTable=ethIfStatTable, AdvertisedDuplex=AdvertisedDuplex, ethFwdSpanningTree=ethFwdSpanningTree, ethEtsOConnection=ethEtsOConnection, ethDevCapLearning=ethDevCapLearning, ethDevCapSpanningTree=ethDevCapSpanningTree, ethEtsTConnectionRowStatus=ethEtsTConnectionRowStatus, ethEtsTConnection=ethEtsTConnection, ethDevCapJumboFrames=ethDevCapJumboFrames, ethIfStatTxLoad=ethIfStatTxLoad, ethIfFlowGroupMap=ethIfFlowGroupMap, ethIfSrcFailure=ethIfSrcFailure, ethIfType=ethIfType, ethFwdDiffservEntry=ethFwdDiffservEntry, ethIfgDifferentialDelayValid=ethIfgDifferentialDelayValid, ethFwdLastChange=ethFwdLastChange, ethDevCapMaxAgingTime=ethDevCapMaxAgingTime, ethFwdRstpDesignatedRoot=ethFwdRstpDesignatedRoot, ethFwdRstpForwardDelay=ethFwdRstpForwardDelay, ethDot3ForceVLANTagged=ethDot3ForceVLANTagged, ethFwdMrpAddr0180C200002D=ethFwdMrpAddr0180C200002D, ethIfSrcPmReference=ethIfSrcPmReference, ethIfSnkReducedBitRateHighThreshold=ethIfSnkReducedBitRateHighThreshold, ethIfgTable=ethIfgTable, ethFwdRstpBridgeMaxAge=ethFwdRstpBridgeMaxAge, ethIfQueueTrafficClass=ethIfQueueTrafficClass, ethIfRstpAdminEdgePort=ethIfRstpAdminEdgePort, ethEtsIndexLookupEntry=ethEtsIndexLookupEntry, ethIfIndex=ethIfIndex, ethIfSnkPmReference=ethIfSnkPmReference, ethDevContainerName=ethDevContainerName, ethFwdFuncEntry=ethFwdFuncEntry, ethDevProductName=ethDevProductName, ethIfTable=ethIfTable, ethIfStatRxBitrate=ethIfStatRxBitrate, ethFwdReservedAddr0180C2000006=ethFwdReservedAddr0180C2000006, ethIfLastChange=ethIfLastChange, ethIfRstpDesignatedBridge=ethIfRstpDesignatedBridge, ethIfRstpState=ethIfRstpState, ethIfQDropThresMaxFrames=ethIfQDropThresMaxFrames, ethDevCapVLANMode=ethDevCapVLANMode, ethIfSrcReducedBitRateHighThreshold=ethIfSrcReducedBitRateHighThreshold, ethEtsLocalDsti=ethEtsLocalDsti, netiEthMIB=netiEthMIB, ethIfDefaultEthernetPriority=ethIfDefaultEthernetPriority, ethStatDcap1RxPackets=ethStatDcap1RxPackets, ethStatDcap1RxErrorCRC=ethStatDcap1RxErrorCRC, ethDevFwdFuncNextIndex=ethDevFwdFuncNextIndex, ethIfStatRxLoad=ethIfStatRxLoad, ethFwdRstpEntry=ethFwdRstpEntry, ethDevName=ethDevName, ethFwdReservedAddr0180C200000B=ethFwdReservedAddr0180C200000B, ethIfTransmittedFrameType=ethIfTransmittedFrameType, ethIfSnkMinorReducedBitRateThreshold=ethIfSnkMinorReducedBitRateThreshold, ethIfQDropThresholdEntry=ethIfQDropThresholdEntry, ethIfFailure=ethIfFailure, ethFwdMrpAddr0180C2000020=ethFwdMrpAddr0180C2000020, ethDot3AutoNegotiate=ethDot3AutoNegotiate, ethFwdRstpTxHoldCount=ethFwdRstpTxHoldCount, ethFwdRstpTopologyChange=ethFwdRstpTopologyChange, TrafficClass=TrafficClass, ethIfgHitlessProtection=ethIfgHitlessProtection, ethIfSrcDegPeriod=ethIfSrcDegPeriod, ethIfgProtectionStatus=ethIfgProtectionStatus, ethFwdMrpAddr0180C2000026=ethFwdMrpAddr0180C2000026, ethFwdReservedAddr0180C2000009=ethFwdReservedAddr0180C2000009, ethIfgAheadInterface=ethIfgAheadInterface, ethIfQueueTable=ethIfQueueTable, ethFwdReservedAddr0180C2000005=ethFwdReservedAddr0180C2000005, ethIfDefaultVLAN=ethIfDefaultVLAN, ethFwdReservedAddr0180C200000C=ethFwdReservedAddr0180C200000C, ethFwdMrpAddr0180C2000021=ethFwdMrpAddr0180C2000021, ethFwdDiffservFlowGroup=ethFwdDiffservFlowGroup, ethIfSrcReducedBitRateAIS=ethIfSrcReducedBitRateAIS, ethStatDcap1TxPackets=ethStatDcap1TxPackets, ethIfgActiveInterface=ethIfgActiveInterface)
mibBuilder.exportSymbols("NETI-ETH-MIB", ethFwdReservedAddr0180C2000007=ethFwdReservedAddr0180C2000007, InterfaceIndexList=InterfaceIndexList, ethFwdMrpAddr0180C200002B=ethFwdMrpAddr0180C200002B, ethDot3ActiveFlowControl=ethDot3ActiveFlowControl, ethIfRstpPriority=ethIfRstpPriority, ethDevCapAcceptableFrameType=ethDevCapAcceptableFrameType, ethIfgExpectedProtectionStatus=ethIfgExpectedProtectionStatus, ethFwdReservedAddr0180C200000E=ethFwdReservedAddr0180C200000E, ethStatDcap1RxDiscardPackets=ethStatDcap1RxDiscardPackets, ethFwdMrpAddr0180C200002E=ethFwdMrpAddr0180C200002E, ethIfName=ethIfName, ethEtsTConnectionIndex=ethEtsTConnectionIndex, ethDot3ActiveDuplex=ethDot3ActiveDuplex, ethFwdJumboFrames=ethFwdJumboFrames, ethFwdRstpTimeSinceTopologyChange=ethFwdRstpTimeSinceTopologyChange, AdvertisedFlowControl=AdvertisedFlowControl, ethDot3SelectedIfType=ethDot3SelectedIfType, ethStatDcap1TxDiscardPackets=ethStatDcap1TxDiscardPackets, ethIfRstpOperEdgePort=ethIfRstpOperEdgePort, ethIfVLANSetIndex=ethIfVLANSetIndex, ethIfOutSpeed=ethIfOutSpeed, ethIfQueueMaxOctets=ethIfQueueMaxOctets)
