#
# PySNMP MIB module SAMSUNG-DIAGNOSTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SAMSUNG-DIAGNOSTICS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:52:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
samsungCommonMIB, = mibBuilder.importSymbols("SAMSUNG-COMMON-MIB", "samsungCommonMIB")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Gauge32, IpAddress, NotificationType, TimeTicks, iso, Counter32, Integer32, Unsigned32, ModuleIdentity, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "IpAddress", "NotificationType", "TimeTicks", "iso", "Counter32", "Integer32", "Unsigned32", "ModuleIdentity", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
scmDiagnostics = ModuleIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64))
if mibBuilder.loadTexts: scmDiagnostics.setLastUpdated('0408240000Z')
if mibBuilder.loadTexts: scmDiagnostics.setOrganization('Samsung Corporation - Samsung Common Management Interface (SCMI) Working Group')
scmDiagnosticsDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1))
scmDiagnosticsDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2), )
if mibBuilder.loadTexts: scmDiagnosticsDeviceTable.setStatus('current')
scmDiagnosticsDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1), ).setIndexNames((0, "SAMSUNG-DIAGNOSTICS-MIB", "scmDiagnosticsDeviceIndex"))
if mibBuilder.loadTexts: scmDiagnosticsDeviceEntry.setStatus('current')
scmDiagnosticsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceIndex.setStatus('current')
scmDiagnosticsDeviceItem = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceItem.setStatus('current')
scmDiagnosticsDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 21, 22, 23, 24, 25, 26, 41, 42, 43))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("cover", 3), ("geeralPrinter", 4), ("mediaPath", 5), ("marker", 6), ("markerSupplies", 7), ("markerColorant", 8), ("fax", 21), ("scanner", 22), ("network", 23), ("usb", 24), ("parallel", 25), ("finisher", 26), ("motor", 41), ("smps", 42), ("memory", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceType.setStatus('current')
scmDiagnosticsDeviceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceDescr.setStatus('current')
scmDiagnosticsDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceID.setStatus('current')
scmDiagnosticsDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("warning", 3), ("testing", 4), ("down", 5), ("printing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceStatus.setStatus('current')
scmDiagnosticsDeviceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceErrors.setStatus('current')
scmDiagnosticsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmDiagnosticsRequest.setStatus('current')
scmGenBaseDeviceImageFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 999), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmGenBaseDeviceImageFileName.setStatus('current')
mibBuilder.exportSymbols("SAMSUNG-DIAGNOSTICS-MIB", PYSNMP_MODULE_ID=scmDiagnostics, scmDiagnosticsDeviceItem=scmDiagnosticsDeviceItem, scmDiagnosticsDeviceEntry=scmDiagnosticsDeviceEntry, scmDiagnosticsDeviceStatus=scmDiagnosticsDeviceStatus, scmGenBaseDeviceImageFileName=scmGenBaseDeviceImageFileName, scmDiagnosticsDeviceDescr=scmDiagnosticsDeviceDescr, scmDiagnosticsDeviceTable=scmDiagnosticsDeviceTable, scmDiagnosticsDeviceID=scmDiagnosticsDeviceID, scmDiagnosticsDeviceErrors=scmDiagnosticsDeviceErrors, scmDiagnosticsRequest=scmDiagnosticsRequest, scmDiagnosticsDeviceIndex=scmDiagnosticsDeviceIndex, scmDiagnosticsDevice=scmDiagnosticsDevice, scmDiagnosticsDeviceType=scmDiagnosticsDeviceType, scmDiagnostics=scmDiagnostics)
