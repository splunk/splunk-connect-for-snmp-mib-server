#
# PySNMP MIB module NRC-MultiGate (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NRC-MultiGate
# Produced by pysmi-0.3.4 at Mon Apr 29 20:14:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, TimeTicks, Bits, Counter32, NotificationType, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, experimental, Unsigned32, ModuleIdentity, ObjectIdentity, mgmt = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "TimeTicks", "Bits", "Counter32", "NotificationType", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "experimental", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "mgmt")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mib_2 = MibIdentifier((1, 3, 6, 1, 2, 1)).setLabel("mib-2")
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
nrc = MibIdentifier((1, 3, 6, 1, 4, 1, 315))
hub1 = MibIdentifier((1, 3, 6, 1, 4, 1, 315, 1))
snmpDot3RptrMgt = MibIdentifier((1, 3, 6, 1, 3, 29))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 2, 1, 17))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

hub1AutoPartition = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1AutoPartition.setStatus('mandatory')
hub1ReconnectOnTransmission = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1ReconnectOnTransmission.setStatus('mandatory')
hub1IncludeOutOfWinColl = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1IncludeOutOfWinColl.setStatus('mandatory')
hub1LoopbackPartition = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1LoopbackPartition.setStatus('mandatory')
hub1CollisionLimit = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(31, 63))).clone(namedValues=NamedValues(("low", 31), ("high", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1CollisionLimit.setStatus('mandatory')
hub1CarrierRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5))).clone(namedValues=NamedValues(("short", 3), ("long", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1CarrierRecoverTime.setStatus('mandatory')
hub1EventCounterFlags = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1EventCounterFlags.setStatus('mandatory')
hub1EventRecordFlags = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1EventRecordFlags.setStatus('mandatory')
hub1BridgingMode = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridging", 1), ("bypass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1BridgingMode.setStatus('mandatory')
hub1ProtocolFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("filter", 2), ("pass", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1ProtocolFilterMode.setStatus('mandatory')
hub1FilterProtocols = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1FilterProtocols.setStatus('mandatory')
hub1ConsoleBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1ConsoleBaudRate.setStatus('mandatory')
hub1Reset = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1Reset.setStatus('mandatory')
hub1SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1SoftwareVersion.setStatus('mandatory')
hub1PortTable = MibTable((1, 3, 6, 1, 4, 1, 315, 1, 15), )
if mibBuilder.loadTexts: hub1PortTable.setStatus('mandatory')
hub1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 315, 1, 15, 1), ).setIndexNames((0, "NRC-MultiGate", "hub1PortIndex"))
if mibBuilder.loadTexts: hub1PortEntry.setStatus('mandatory')
hub1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortIndex.setStatus('mandatory')
hub1PortForceReconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("force-reconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1PortForceReconnect.setStatus('mandatory')
hub1PortPartitionReason = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-partitioned", 1), ("other", 2), ("consecutive-collision-limit", 3), ("excessive-len-of-collision-limit", 4), ("data-loopback-failure", 5), ("process-forced-reconnection", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortPartitionReason.setStatus('mandatory')
hub1PortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortLinkState.setStatus('mandatory')
hub1PortLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1PortLinkEnable.setStatus('mandatory')
hub1PortPolarityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("reversed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortPolarityStatus.setStatus('mandatory')
hub1PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1PortName.setStatus('mandatory')
hub1PortEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortEventCount.setStatus('mandatory')
hub1PortRecordValue = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortRecordValue.setStatus('mandatory')
hub1PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("twistedPair-10BaseT", 2), ("thinNet-10Base2", 3), ("fiber-FOIRL", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortType.setStatus('mandatory')
hub1IFTable = MibTable((1, 3, 6, 1, 4, 1, 315, 1, 16), )
if mibBuilder.loadTexts: hub1IFTable.setStatus('mandatory')
hub1IFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 315, 1, 16, 1), ).setIndexNames((0, "NRC-MultiGate", "hub1IFIndex"))
if mibBuilder.loadTexts: hub1IFEntry.setStatus('mandatory')
hub1IFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFIndex.setStatus('mandatory')
hub1IFInAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInAlignmentErrors.setStatus('mandatory')
hub1IFInCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInCrcErrors.setStatus('mandatory')
hub1IFInCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInCollisions.setStatus('mandatory')
hub1IFInMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInMtuExceededDiscards.setStatus('mandatory')
hub1IFInShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInShortErrors.setStatus('mandatory')
hub1IFInOverrunDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInOverrunDiscards.setStatus('mandatory')
hub1IFOutUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutUnderruns.setStatus('mandatory')
hub1IFOutLostCts = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutLostCts.setStatus('mandatory')
hub1IFOutLostCrs = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutLostCrs.setStatus('mandatory')
hub1IFOutMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutMtuExceededDiscards.setStatus('mandatory')
hub1IFOutCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutCollisions.setStatus('mandatory')
hub1IFChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(90, 90)).setFixedLength(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFChannelUtilization.setStatus('mandatory')
hub1LastFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1LastFailureReason.setStatus('mandatory')
rptrBasicPackage = MibIdentifier((1, 3, 6, 1, 3, 29, 1))
rptrMonitorPackage = MibIdentifier((1, 3, 6, 1, 3, 29, 2))
rptrAddrTrackPackage = MibIdentifier((1, 3, 6, 1, 3, 29, 3))
rptrRptrInfo = MibIdentifier((1, 3, 6, 1, 3, 29, 1, 1))
rptrGroupInfo = MibIdentifier((1, 3, 6, 1, 3, 29, 1, 2))
rptrPortInfo = MibIdentifier((1, 3, 6, 1, 3, 29, 1, 3))
rptrMonitorRptrInfo = MibIdentifier((1, 3, 6, 1, 3, 29, 2, 1))
rptrMonitorGroupInfo = MibIdentifier((1, 3, 6, 1, 3, 29, 2, 2))
rptrMonitorPortInfo = MibIdentifier((1, 3, 6, 1, 3, 29, 2, 3))
rptrAddrTrackRptrInfo = MibIdentifier((1, 3, 6, 1, 3, 29, 3, 1))
rptrAddrTrackGroupInfo = MibIdentifier((1, 3, 6, 1, 3, 29, 3, 2))
rptrAddrTrackPortInfo = MibIdentifier((1, 3, 6, 1, 3, 29, 3, 3))
rptrGroupCapacity = MibScalar((1, 3, 6, 1, 3, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupCapacity.setStatus('mandatory')
rptrOperStatus = MibScalar((1, 3, 6, 1, 3, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("rptrFailure", 3), ("groupFailure", 4), ("portFailure", 5), ("generalFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrOperStatus.setStatus('mandatory')
rptrHealthText = MibScalar((1, 3, 6, 1, 3, 29, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrHealthText.setStatus('mandatory')
rptrReset = MibScalar((1, 3, 6, 1, 3, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrReset.setStatus('mandatory')
rptrNonDisruptTest = MibScalar((1, 3, 6, 1, 3, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSelfTest", 1), ("selfTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrNonDisruptTest.setStatus('mandatory')
rptrTotalPartitionedPorts = MibScalar((1, 3, 6, 1, 3, 29, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrTotalPartitionedPorts.setStatus('mandatory')
rptrGroupTable = MibTable((1, 3, 6, 1, 3, 29, 1, 2, 1), )
if mibBuilder.loadTexts: rptrGroupTable.setStatus('mandatory')
rptrGroupEntry = MibTableRow((1, 3, 6, 1, 3, 29, 1, 2, 1, 1), ).setIndexNames((0, "NRC-MultiGate", "rptrGroupIndex"))
if mibBuilder.loadTexts: rptrGroupEntry.setStatus('mandatory')
rptrGroupIndex = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupIndex.setStatus('mandatory')
rptrGroupDescr = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupDescr.setStatus('mandatory')
rptrGroupObjectID = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 2, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupObjectID.setStatus('mandatory')
rptrGroupOperStatus = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("operational", 2), ("malfunctioning", 3), ("notPresent", 4), ("underTest", 5), ("resetInProgress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupOperStatus.setStatus('mandatory')
rptrGroupLastOperStatusChange = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupLastOperStatusChange.setStatus('mandatory')
rptrGroupPortCapacity = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortCapacity.setStatus('mandatory')
rptrPortTable = MibTable((1, 3, 6, 1, 3, 29, 1, 3, 1), )
if mibBuilder.loadTexts: rptrPortTable.setStatus('mandatory')
rptrPortEntry = MibTableRow((1, 3, 6, 1, 3, 29, 1, 3, 1, 1), ).setIndexNames((0, "NRC-MultiGate", "rptrPortGroupIndex"), (0, "NRC-MultiGate", "rptrPortIndex"))
if mibBuilder.loadTexts: rptrPortEntry.setStatus('mandatory')
rptrPortGroupIndex = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGroupIndex.setStatus('mandatory')
rptrPortIndex = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortIndex.setStatus('mandatory')
rptrPortAdminStatus = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAdminStatus.setStatus('mandatory')
rptrPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAutoPartitioned", 1), ("autoPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAutoPartitionState.setStatus('mandatory')
rptrPortOperStatus = MibTableColumn((1, 3, 6, 1, 3, 29, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("notOperational", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortOperStatus.setStatus('mandatory')
dot1dBase = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 1))
dot1dTp = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 4))
dot1dBaseBridgeAddress = MibScalar((1, 3, 6, 1, 2, 1, 17, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBaseBridgeAddress.setStatus('mandatory')
dot1dBaseNumPorts = MibScalar((1, 3, 6, 1, 2, 1, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBaseNumPorts.setStatus('mandatory')
dot1dBaseType = MibScalar((1, 3, 6, 1, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBaseType.setStatus('mandatory')
dot1dBasePortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 1, 4), )
if mibBuilder.loadTexts: dot1dBasePortTable.setStatus('mandatory')
dot1dBasePortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 1, 4, 1), ).setIndexNames((0, "NRC-MultiGate", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dBasePortEntry.setStatus('mandatory')
dot1dBasePort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePort.setStatus('mandatory')
dot1dBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortIfIndex.setStatus('mandatory')
dot1dBasePortCircuit = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortCircuit.setStatus('mandatory')
dot1dBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortDelayExceededDiscards.setStatus('mandatory')
dot1dBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortMtuExceededDiscards.setStatus('mandatory')
dot1dTpLearnedEntryDiscards = MibScalar((1, 3, 6, 1, 2, 1, 17, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpLearnedEntryDiscards.setStatus('mandatory')
dot1dTpAgingTime = MibScalar((1, 3, 6, 1, 2, 1, 17, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dTpAgingTime.setStatus('mandatory')
dot1dTpFdbTable = MibTable((1, 3, 6, 1, 2, 1, 17, 4, 3), )
if mibBuilder.loadTexts: dot1dTpFdbTable.setStatus('mandatory')
dot1dTpFdbEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 4, 3, 1), ).setIndexNames((0, "NRC-MultiGate", "dot1dTpFdbAddress"))
if mibBuilder.loadTexts: dot1dTpFdbEntry.setStatus('mandatory')
dot1dTpFdbAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpFdbAddress.setStatus('mandatory')
dot1dTpFdbPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpFdbPort.setStatus('mandatory')
dot1dTpFdbStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpFdbStatus.setStatus('mandatory')
dot1dTpPortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 4, 4), )
if mibBuilder.loadTexts: dot1dTpPortTable.setStatus('mandatory')
dot1dTpPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 4, 4, 1), ).setIndexNames((0, "NRC-MultiGate", "dot1dTpPort"))
if mibBuilder.loadTexts: dot1dTpPortEntry.setStatus('mandatory')
dot1dTpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPort.setStatus('mandatory')
dot1dTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortMaxInfo.setStatus('mandatory')
dot1dTpPortInFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortInFrames.setStatus('mandatory')
dot1dTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortOutFrames.setStatus('mandatory')
dot1dTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortInDiscards.setStatus('mandatory')
mibBuilder.exportSymbols("NRC-MultiGate", dot1dBasePort=dot1dBasePort, rptrMonitorGroupInfo=rptrMonitorGroupInfo, rptrTotalPartitionedPorts=rptrTotalPartitionedPorts, hub1IFInCrcErrors=hub1IFInCrcErrors, rptrNonDisruptTest=rptrNonDisruptTest, hub1IFEntry=hub1IFEntry, hub1ProtocolFilterMode=hub1ProtocolFilterMode, dot1dTpAgingTime=dot1dTpAgingTime, rptrGroupDescr=rptrGroupDescr, hub1IFInMtuExceededDiscards=hub1IFInMtuExceededDiscards, hub1IFTable=hub1IFTable, enterprises=enterprises, MacAddress=MacAddress, hub1SoftwareVersion=hub1SoftwareVersion, dot1dTpFdbTable=dot1dTpFdbTable, hub1PortPolarityStatus=hub1PortPolarityStatus, rptrPortInfo=rptrPortInfo, dot1dTp=dot1dTp, hub1PortName=hub1PortName, rptrGroupPortCapacity=rptrGroupPortCapacity, hub1PortPartitionReason=hub1PortPartitionReason, dot1dTpFdbStatus=dot1dTpFdbStatus, hub1EventRecordFlags=hub1EventRecordFlags, dot1dBaseType=dot1dBaseType, hub1AutoPartition=hub1AutoPartition, rptrAddrTrackPortInfo=rptrAddrTrackPortInfo, hub1PortTable=hub1PortTable, dot1dTpPortInDiscards=dot1dTpPortInDiscards, rptrRptrInfo=rptrRptrInfo, hub1IFOutUnderruns=hub1IFOutUnderruns, dot1dBasePortDelayExceededDiscards=dot1dBasePortDelayExceededDiscards, hub1PortType=hub1PortType, rptrMonitorRptrInfo=rptrMonitorRptrInfo, rptrReset=rptrReset, rptrPortAutoPartitionState=rptrPortAutoPartitionState, dot1dTpFdbEntry=dot1dTpFdbEntry, Timeout=Timeout, hub1PortIndex=hub1PortIndex, mib_2=mib_2, hub1ConsoleBaudRate=hub1ConsoleBaudRate, hub1CarrierRecoverTime=hub1CarrierRecoverTime, rptrGroupLastOperStatusChange=rptrGroupLastOperStatusChange, rptrPortGroupIndex=rptrPortGroupIndex, dot1dBasePortMtuExceededDiscards=dot1dBasePortMtuExceededDiscards, hub1IFInCollisions=hub1IFInCollisions, hub1IFOutMtuExceededDiscards=hub1IFOutMtuExceededDiscards, hub1IFOutLostCts=hub1IFOutLostCts, hub1PortEntry=hub1PortEntry, dot1dBasePortEntry=dot1dBasePortEntry, dot1dBasePortIfIndex=dot1dBasePortIfIndex, dot1dTpPortInFrames=dot1dTpPortInFrames, dot1dBaseBridgeAddress=dot1dBaseBridgeAddress, hub1IFInOverrunDiscards=hub1IFInOverrunDiscards, hub1IFIndex=hub1IFIndex, dot1dTpPort=dot1dTpPort, hub1PortForceReconnect=hub1PortForceReconnect, dot1dTpPortOutFrames=dot1dTpPortOutFrames, hub1LastFailureReason=hub1LastFailureReason, rptrAddrTrackPackage=rptrAddrTrackPackage, hub1IFOutCollisions=hub1IFOutCollisions, rptrAddrTrackGroupInfo=rptrAddrTrackGroupInfo, nrc=nrc, dot1dTpPortEntry=dot1dTpPortEntry, hub1IFInShortErrors=hub1IFInShortErrors, rptrPortEntry=rptrPortEntry, rptrMonitorPackage=rptrMonitorPackage, dot1dTpFdbAddress=dot1dTpFdbAddress, hub1IFChannelUtilization=hub1IFChannelUtilization, hub1IFInAlignmentErrors=hub1IFInAlignmentErrors, hub1PortRecordValue=hub1PortRecordValue, rptrPortIndex=rptrPortIndex, rptrPortOperStatus=rptrPortOperStatus, hub1=hub1, snmpDot3RptrMgt=snmpDot3RptrMgt, hub1LoopbackPartition=hub1LoopbackPartition, hub1PortLinkState=hub1PortLinkState, rptrGroupInfo=rptrGroupInfo, rptrAddrTrackRptrInfo=rptrAddrTrackRptrInfo, rptrGroupCapacity=rptrGroupCapacity, dot1dBase=dot1dBase, rptrGroupOperStatus=rptrGroupOperStatus, hub1IncludeOutOfWinColl=hub1IncludeOutOfWinColl, dot1dTpPortTable=dot1dTpPortTable, rptrHealthText=rptrHealthText, BridgeId=BridgeId, dot1dBasePortCircuit=dot1dBasePortCircuit, dot1dBasePortTable=dot1dBasePortTable, rptrPortAdminStatus=rptrPortAdminStatus, rptrBasicPackage=rptrBasicPackage, hub1PortEventCount=hub1PortEventCount, rptrMonitorPortInfo=rptrMonitorPortInfo, rptrGroupIndex=rptrGroupIndex, hub1PortLinkEnable=hub1PortLinkEnable, hub1IFOutLostCrs=hub1IFOutLostCrs, rptrGroupEntry=rptrGroupEntry, hub1FilterProtocols=hub1FilterProtocols, dot1dBaseNumPorts=dot1dBaseNumPorts, hub1EventCounterFlags=hub1EventCounterFlags, rptrPortTable=rptrPortTable, hub1ReconnectOnTransmission=hub1ReconnectOnTransmission, hub1Reset=hub1Reset, dot1dTpFdbPort=dot1dTpFdbPort, rptrGroupTable=rptrGroupTable, dot1dTpLearnedEntryDiscards=dot1dTpLearnedEntryDiscards, dot1dBridge=dot1dBridge, hub1BridgingMode=hub1BridgingMode, dot1dTpPortMaxInfo=dot1dTpPortMaxInfo, rptrOperStatus=rptrOperStatus, hub1CollisionLimit=hub1CollisionLimit, rptrGroupObjectID=rptrGroupObjectID)
