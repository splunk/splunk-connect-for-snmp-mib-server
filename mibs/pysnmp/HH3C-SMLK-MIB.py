#
# PySNMP MIB module HH3C-SMLK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-SMLK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, Unsigned32, Counter64, iso, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Integer32, NotificationType, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "Unsigned32", "Counter64", "iso", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Integer32", "NotificationType", "Bits", "ModuleIdentity")
TextualConvention, RowStatus, DateAndTime, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DateAndTime", "DisplayString", "MacAddress")
hh3cSmlk = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 147))
hh3cSmlk.setRevisions(('2014-07-23 15:03',))
if mibBuilder.loadTexts: hh3cSmlk.setLastUpdated('201407231503Z')
if mibBuilder.loadTexts: hh3cSmlk.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cSmlkObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1))
hh3cSmlkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1), )
if mibBuilder.loadTexts: hh3cSmlkGroupTable.setStatus('current')
hh3cSmlkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1, 1), ).setIndexNames((0, "HH3C-SMLK-MIB", "hh3cSmlkGroupID"))
if mibBuilder.loadTexts: hh3cSmlkGroupEntry.setStatus('current')
hh3cSmlkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cSmlkGroupID.setStatus('current')
hh3cSmlkDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSmlkDeviceID.setStatus('current')
hh3cSmlkPreemptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("role", 2), ("speed", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSmlkPreemptionMode.setStatus('current')
hh3cSmlkSpeedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSmlkSpeedThreshold.setStatus('current')
hh3cSmlkPreemptionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSmlkPreemptionDelay.setStatus('current')
hh3cSmlkControlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSmlkControlVlanID.setStatus('current')
hh3cSmlkInstanceListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSmlkInstanceListLow.setStatus('current')
hh3cSmlkInstanceListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSmlkInstanceListHigh.setStatus('current')
hh3cSmlkGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSmlkGroupRowStatus.setStatus('current')
hh3cSmlkPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 2), )
if mibBuilder.loadTexts: hh3cSmlkPortTable.setStatus('current')
hh3cSmlkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 2, 1), ).setIndexNames((0, "HH3C-SMLK-MIB", "hh3cSmlkGroupID"), (0, "HH3C-SMLK-MIB", "hh3cSmlkPortIfIndex"))
if mibBuilder.loadTexts: hh3cSmlkPortEntry.setStatus('current')
hh3cSmlkPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cSmlkPortIfIndex.setStatus('current')
hh3cSmlkPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSmlkPortRole.setStatus('current')
hh3cSmlkPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSmlkPortStatus.setStatus('current')
hh3cSmlkFlushCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSmlkFlushCount.setStatus('current')
hh3cSmlkLastFlushTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSmlkLastFlushTime.setStatus('current')
hh3cSmlkPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSmlkPortRowStatus.setStatus('current')
hh3cSmlkFlushEnableTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 3), )
if mibBuilder.loadTexts: hh3cSmlkFlushEnableTable.setStatus('current')
hh3cSmlkFlushEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 3, 1), ).setIndexNames((0, "HH3C-SMLK-MIB", "hh3cSmlkIfIndex"))
if mibBuilder.loadTexts: hh3cSmlkFlushEnableEntry.setStatus('current')
hh3cSmlkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hh3cSmlkIfIndex.setStatus('current')
hh3cSmlkControlVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSmlkControlVlanListLow.setStatus('current')
hh3cSmlkControlVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 147, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSmlkControlVlanListHigh.setStatus('current')
hh3cSmlkTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 147, 2))
hh3cSmlkTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 147, 2, 0))
hh3cSmlkGroupLinkActive = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 147, 2, 0, 1)).setObjects(("HH3C-SMLK-MIB", "hh3cSmlkGroupID"), ("HH3C-SMLK-MIB", "hh3cSmlkPortIfIndex"))
if mibBuilder.loadTexts: hh3cSmlkGroupLinkActive.setStatus('current')
mibBuilder.exportSymbols("HH3C-SMLK-MIB", hh3cSmlkPortIfIndex=hh3cSmlkPortIfIndex, hh3cSmlkLastFlushTime=hh3cSmlkLastFlushTime, hh3cSmlkControlVlanListLow=hh3cSmlkControlVlanListLow, hh3cSmlkPreemptionMode=hh3cSmlkPreemptionMode, hh3cSmlkPreemptionDelay=hh3cSmlkPreemptionDelay, PYSNMP_MODULE_ID=hh3cSmlk, hh3cSmlkGroupLinkActive=hh3cSmlkGroupLinkActive, hh3cSmlkGroupEntry=hh3cSmlkGroupEntry, hh3cSmlkInstanceListHigh=hh3cSmlkInstanceListHigh, hh3cSmlkDeviceID=hh3cSmlkDeviceID, hh3cSmlkTrap=hh3cSmlkTrap, hh3cSmlkIfIndex=hh3cSmlkIfIndex, hh3cSmlkPortEntry=hh3cSmlkPortEntry, hh3cSmlkGroupID=hh3cSmlkGroupID, hh3cSmlkFlushEnableEntry=hh3cSmlkFlushEnableEntry, hh3cSmlkPortRole=hh3cSmlkPortRole, hh3cSmlkPortStatus=hh3cSmlkPortStatus, hh3cSmlkGroupRowStatus=hh3cSmlkGroupRowStatus, hh3cSmlkObject=hh3cSmlkObject, hh3cSmlkFlushCount=hh3cSmlkFlushCount, hh3cSmlkControlVlanListHigh=hh3cSmlkControlVlanListHigh, hh3cSmlkFlushEnableTable=hh3cSmlkFlushEnableTable, hh3cSmlkGroupTable=hh3cSmlkGroupTable, hh3cSmlk=hh3cSmlk, hh3cSmlkControlVlanID=hh3cSmlkControlVlanID, hh3cSmlkTrapPrefix=hh3cSmlkTrapPrefix, hh3cSmlkPortRowStatus=hh3cSmlkPortRowStatus, hh3cSmlkInstanceListLow=hh3cSmlkInstanceListLow, hh3cSmlkPortTable=hh3cSmlkPortTable, hh3cSmlkSpeedThreshold=hh3cSmlkSpeedThreshold)
