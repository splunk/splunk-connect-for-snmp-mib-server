#
# PySNMP MIB module ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ecExperimental, = mibBuilder.importSymbols("ESSENTIAL-COMMUNICATIONS-GLOBAL-REG", "ecExperimental")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, MibIdentifier, Unsigned32, IpAddress, TimeTicks, Integer32, Counter32, ModuleIdentity, NotificationType, ObjectIdentity, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "MibIdentifier", "Unsigned32", "IpAddress", "TimeTicks", "Integer32", "Counter32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
essentialCommunications = MibIdentifier((1, 3, 6, 1, 4, 1, 2159))
ecRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1))
ecProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3))
ecExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 6))
hippiSwitchMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 6, 1))
hippiSwitchMIBv103 = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1))
switchObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1))
switchDescription = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDescription.setStatus('mandatory')
switchNumOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumOfPorts.setStatus('mandatory')
sccDescription = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccDescription.setStatus('mandatory')
sccDateTime = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccDateTime.setStatus('mandatory')
sccAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccAdminStatus.setStatus('mandatory')
sccOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("reseting", 2), ("busy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccOperStatus.setStatus('mandatory')
backPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7), )
if mibBuilder.loadTexts: backPlaneTable.setStatus('mandatory')
backPlaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1), ).setIndexNames((0, "ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", "backPlaneIndex"))
if mibBuilder.loadTexts: backPlaneEntry.setStatus('mandatory')
backPlaneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 1), Gauge32())
if mibBuilder.loadTexts: backPlaneIndex.setStatus('mandatory')
backPlaneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneNumber.setStatus('mandatory')
backPlaneCard = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("parallel", 2), ("serial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneCard.setStatus('mandatory')
mICPowerUpInitError = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICPowerUpInitError.setStatus('mandatory')
mICHippiParityBurstError = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICHippiParityBurstError.setStatus('mandatory')
mICLinkReady = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICLinkReady.setStatus('mandatory')
mICSourceInterconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceInterconnect.setStatus('mandatory')
mICSourceRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceRequest.setStatus('mandatory')
mICSourceConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceConnect.setStatus('mandatory')
mICSourceLastConnectAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceLastConnectAttempt.setStatus('mandatory')
mICDestinationInterconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICDestinationInterconnect.setStatus('mandatory')
mICDestinationRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICDestinationRequest.setStatus('mandatory')
mICDestinationConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICDestinationConnect.setStatus('mandatory')
mICByteCounterOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICByteCounterOverflow.setStatus('mandatory')
mICNumberOfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICNumberOfBytes.setStatus('mandatory')
mICNumberOfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICNumberOfPackets.setStatus('mandatory')
mICConnectsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICConnectsSuccessful.setStatus('mandatory')
sourceRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: sourceRouteTable.setStatus('mandatory')
sourceRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", "srcIndex"))
if mibBuilder.loadTexts: sourceRouteEntry.setStatus('mandatory')
srcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 8, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcIndex.setStatus('mandatory')
srcRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcRoute.setStatus('mandatory')
srcWriteRow = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srcWriteRow.setStatus('mandatory')
destRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 10), )
if mibBuilder.loadTexts: destRouteTable.setStatus('mandatory')
destRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 10, 1), ).setIndexNames((0, "ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", "destIndex"))
if mibBuilder.loadTexts: destRouteEntry.setStatus('mandatory')
destIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 10, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destIndex.setStatus('mandatory')
destRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destRoute.setStatus('mandatory')
destWriteRow = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destWriteRow.setStatus('mandatory')
huntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 12), )
if mibBuilder.loadTexts: huntGroupTable.setStatus('mandatory')
huntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 12, 1), ).setIndexNames((0, "ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", "hg"))
if mibBuilder.loadTexts: huntGroupEntry.setStatus('mandatory')
hg = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 12, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hg.setStatus('mandatory')
hgOutPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgOutPortList.setStatus('mandatory')
hgLWriteRow = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgLWriteRow.setStatus('mandatory')
huntGroupOrderTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 14), )
if mibBuilder.loadTexts: huntGroupOrderTable.setStatus('mandatory')
huntGroupOrderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 14, 1), ).setIndexNames((0, "ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", "hg"))
if mibBuilder.loadTexts: huntGroupOrderEntry.setStatus('mandatory')
hgOrderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 14, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgOrderIndex.setStatus('mandatory')
hgOrderList = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgOrderList.setStatus('mandatory')
hgOWriteRow = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgOWriteRow.setStatus('mandatory')
hgSaveRestore = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("restore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgSaveRestore.setStatus('mandatory')
routesSaveRestore = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("restore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routesSaveRestore.setStatus('mandatory')
mibBuilder.exportSymbols("ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", switchObjs=switchObjs, hgOrderIndex=hgOrderIndex, mICByteCounterOverflow=mICByteCounterOverflow, sourceRouteEntry=sourceRouteEntry, ecRoot=ecRoot, hgLWriteRow=hgLWriteRow, srcRoute=srcRoute, mICDestinationConnect=mICDestinationConnect, sccOperStatus=sccOperStatus, hgSaveRestore=hgSaveRestore, mICPowerUpInitError=mICPowerUpInitError, huntGroupOrderTable=huntGroupOrderTable, backPlaneEntry=backPlaneEntry, sccDateTime=sccDateTime, mICHippiParityBurstError=mICHippiParityBurstError, hgOutPortList=hgOutPortList, srcIndex=srcIndex, essentialCommunications=essentialCommunications, switchNumOfPorts=switchNumOfPorts, mICDestinationInterconnect=mICDestinationInterconnect, mICNumberOfBytes=mICNumberOfBytes, destRoute=destRoute, mICLinkReady=mICLinkReady, hippiSwitchMIB=hippiSwitchMIB, hippiSwitchMIBv103=hippiSwitchMIBv103, huntGroupTable=huntGroupTable, mICConnectsSuccessful=mICConnectsSuccessful, ecExperimental=ecExperimental, switchDescription=switchDescription, backPlaneTable=backPlaneTable, sccAdminStatus=sccAdminStatus, mICDestinationRequest=mICDestinationRequest, destRouteEntry=destRouteEntry, huntGroupEntry=huntGroupEntry, mICSourceRequest=mICSourceRequest, mICSourceLastConnectAttempt=mICSourceLastConnectAttempt, destIndex=destIndex, mICNumberOfPackets=mICNumberOfPackets, ecProducts=ecProducts, srcWriteRow=srcWriteRow, backPlaneNumber=backPlaneNumber, hgOrderList=hgOrderList, destRouteTable=destRouteTable, backPlaneIndex=backPlaneIndex, mICSourceConnect=mICSourceConnect, sourceRouteTable=sourceRouteTable, destWriteRow=destWriteRow, sccDescription=sccDescription, huntGroupOrderEntry=huntGroupOrderEntry, routesSaveRestore=routesSaveRestore, hg=hg, hgOWriteRow=hgOWriteRow, mICSourceInterconnect=mICSourceInterconnect, backPlaneCard=backPlaneCard)
