#
# PySNMP MIB module NSTACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSTACK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Bits, IpAddress, NotificationType, MibIdentifier, iso, enterprises, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Counter64, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "IpAddress", "NotificationType", "MibIdentifier", "iso", "enterprises", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Counter64", "ModuleIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class PortsBitmap(OctetString):
    pass

nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
nbSwitchG1 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1))
nbSwitchG1Il = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50))
nbsStackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 4))
nbsStackSlotCapacity = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotCapacity.setStatus('mandatory')
nbsStackSlotsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotsTableSize.setStatus('mandatory')
nbsStackPortsCapacity = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackPortsCapacity.setStatus('mandatory')
nbsStackSlotPortsCapacity = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotPortsCapacity.setStatus('mandatory')
nbsStackSlotTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5), )
if mibBuilder.loadTexts: nbsStackSlotTable.setStatus('mandatory')
nbsStackSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1), ).setIndexNames((0, "NSTACK-MIB", "nbsStackSlotIndex"))
if mibBuilder.loadTexts: nbsStackSlotEntry.setStatus('mandatory')
nbsStackSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotIndex.setStatus('mandatory')
nbsStackSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("empty", 1), ("unknown", 2), ("standAlone", 3), ("universal", 4), ("eth20Ports10or100TP", 5), ("eth40Ports10TP", 6), ("eth10Ports100FO", 7), ("eth16Ports10or100TP", 8), ("eth4Ports1000FO", 9), ("agentSlot", 10), ("routingEngine", 11), ("eth8Ports10or100TP", 12), ("eth2Ports100FOMM", 13), ("eth2Ports100FOSM", 14), ("eth1Ports1000FOMM", 15), ("eth1Ports1000FOSM", 16), ("eth2Ports1000FOMM", 17), ("eth2Ports1000FOSM", 18), ("stackableSlotNoLink", 19), ("stackableSlotNH2025", 20), ("stackableSlotReserve1", 21), ("stackableSlotReserve2", 22), ("eth2Ports100FO", 23), ("eth2Ports1000FO", 24), ("eth4Ports100FOMM", 25), ("eth4Ports100FOSM", 26), ("eth4Ports100FO", 27), ("eth4Ports10or100TP", 28), ("eth4Ports100MTRJ", 29), ("eth8Ports100MTRJ", 30), ("eth4Ports100VF", 31), ("eth8Ports100VF", 32), ("ethGigaBitService", 33), ("eth4Ports100LC", 34), ("eth8Ports100LC", 35), ("eth2Ports10FL", 36), ("eth4Ports10FL", 37), ("eth1Port100or1000TP", 38), ("eth1Port1000FORED", 39), ("eth4Ports100TPand2Ports100FO", 40), ("eth4Ports100TPand1Port100FO", 41), ("eth0Ports100TPand2Ports100FO", 42), ("eth4Ports100TPand0Ports100FO", 43), ("eth1Ports1000MTRJ", 44), ("eth1StackPorts100or1000TP", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotType.setStatus('mandatory')
nbsStackSlotMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotMgmtStatus.setStatus('mandatory')
nbsStackSlotPortsMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotPortsMaxNumber.setStatus('mandatory')
nbsStackSlotPortsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotPortsNumber.setStatus('mandatory')
nbsStackSlotFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotFirstPort.setStatus('mandatory')
nbsStackSlotOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("switchedOff", 1), ("enabled", 2), ("disabled", 3), ("changing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotOperStatus.setStatus('mandatory')
nbsStackSlotAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsStackSlotAdminStatus.setStatus('mandatory')
nbsStackSlotRedundantPSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotRedundantPSMode.setStatus('mandatory')
nbsStackSlotUplinkModulesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplinkModulesNumber.setStatus('mandatory')
nbsStackSlotReset = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsStackSlotReset.setStatus('mandatory')
nbsStackSlotIp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotIp.setStatus('mandatory')
nbsStackSlotHwVers = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotHwVers.setStatus('mandatory')
nbsStackSlotSwVers = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSwVers.setStatus('mandatory')
nbsStackSlotUplTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6), )
if mibBuilder.loadTexts: nbsStackSlotUplTable.setStatus('mandatory')
nbsStackSlotUplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1), ).setIndexNames((0, "NSTACK-MIB", "nbsStackSlotNumber"), (0, "NSTACK-MIB", "nbsStackSlotUplNumber"))
if mibBuilder.loadTexts: nbsStackSlotUplEntry.setStatus('mandatory')
nbsStackSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotNumber.setStatus('mandatory')
nbsStackSlotUplNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplNumber.setStatus('mandatory')
nbsStackSlotUplType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("uplAbsent", 1), ("uplUnknown", 2), ("upl1GigaMM", 3), ("upl1GigaSM", 4), ("upl2GigaMM", 5), ("upl2GigaSM", 6), ("upl1FO", 7), ("upl1TP", 8), ("upl2FOMM", 9), ("upl2FOSM", 10), ("upl4FOMM", 11), ("upl4FOSM", 12), ("upl8TP", 13), ("upl1ATM", 14), ("upl1FDDI", 15), ("uplStackModuleNoLink", 16), ("uplStackModuleNH2025", 17), ("uplStackModuleReserve1", 18), ("uplStackModuleReserve2", 19), ("upl4TP", 20), ("upl2FO", 21), ("upl2Giga", 22), ("upl4FO", 23), ("upl4MTRJ", 24), ("upl8MTRJ", 25), ("upl4VF", 26), ("upl8VF", 27), ("upl4LC", 28), ("upl8LC", 29), ("upl2FL", 30), ("upl4FL", 31), ("upl1GigaTP", 32), ("upl1GER", 33), ("upl4TP2FO", 34), ("upl4TP1FO", 35), ("upl0TP2FO", 36), ("upl4TP0FO", 37), ("upl1GigaMTRJ", 38), ("upl1GigaStackTP", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplType.setStatus('mandatory')
nbsStackSlotUplSwVers = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplSwVers.setStatus('mandatory')
nbsStackSlotUplHwVers = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplHwVers.setStatus('mandatory')
nbsStackSlotUplNPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplNPorts.setStatus('mandatory')
nbsStackSlotUplFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplFirstPort.setStatus('mandatory')
nbsStackSlotUplPortsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 8), PortsBitmap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplPortsMask.setStatus('mandatory')
nbsStackSlotUplStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplStatus.setStatus('mandatory')
nbsStackSlotUplHwDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplHwDescr.setStatus('mandatory')
nbsStackSlotUplSwDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplSwDescr.setStatus('mandatory')
nbsStackSpecSlotTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7), )
if mibBuilder.loadTexts: nbsStackSpecSlotTable.setStatus('mandatory')
nbsStackSpecSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1), ).setIndexNames((0, "NSTACK-MIB", "nbsStackSlotSpecNumber"), (0, "NSTACK-MIB", "nbsStackSlotSpecUplNumber"))
if mibBuilder.loadTexts: nbsStackSpecSlotEntry.setStatus('mandatory')
nbsStackSlotSpecNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecNumber.setStatus('mandatory')
nbsStackSlotSpecUplNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecUplNumber.setStatus('mandatory')
nbsStackSlotSpecUplRedundantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("specialRedundant", 2), ("autoRedundant", 3), ("manualLeftRedundant", 4), ("manualRightRedundant", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsStackSlotSpecUplRedundantMode.setStatus('mandatory')
nbsStackSlotSpecUplLeftLinkLed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecUplLeftLinkLed.setStatus('mandatory')
nbsStackSlotSpecUplLeftActivityLed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecUplLeftActivityLed.setStatus('mandatory')
nbsStackSlotSpecUplRightLinkLed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecUplRightLinkLed.setStatus('mandatory')
nbsStackSlotSpecUplRightActivityLed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecUplRightActivityLed.setStatus('mandatory')
mibBuilder.exportSymbols("NSTACK-MIB", nbsStackSlotMgmtStatus=nbsStackSlotMgmtStatus, nbsStackSlotUplHwDescr=nbsStackSlotUplHwDescr, nbsStackSlotSpecUplLeftActivityLed=nbsStackSlotSpecUplLeftActivityLed, nbsStackSlotUplStatus=nbsStackSlotUplStatus, nbsStackSlotEntry=nbsStackSlotEntry, nbase=nbase, nbsStackSlotOperStatus=nbsStackSlotOperStatus, nbsStackSlotSpecUplNumber=nbsStackSlotSpecUplNumber, nbsStackSlotPortsNumber=nbsStackSlotPortsNumber, nbsStackSpecSlotTable=nbsStackSpecSlotTable, nbsStackSlotSpecUplRightActivityLed=nbsStackSlotSpecUplRightActivityLed, nbsStackSlotAdminStatus=nbsStackSlotAdminStatus, nbsStackSlotUplEntry=nbsStackSlotUplEntry, nbsStackSlotSpecNumber=nbsStackSlotSpecNumber, nbsStackPortsCapacity=nbsStackPortsCapacity, nbsStackSlotFirstPort=nbsStackSlotFirstPort, nbsStackSlotUplSwDescr=nbsStackSlotUplSwDescr, nbsStackSlotSpecUplRedundantMode=nbsStackSlotSpecUplRedundantMode, PortsBitmap=PortsBitmap, nbsStackSlotPortsCapacity=nbsStackSlotPortsCapacity, nbSwitchG1Il=nbSwitchG1Il, nbsStackSlotIp=nbsStackSlotIp, nbsStackSlotUplNumber=nbsStackSlotUplNumber, nbsStackSpecSlotEntry=nbsStackSpecSlotEntry, nbsStackSlotTable=nbsStackSlotTable, nbsStackSlotUplHwVers=nbsStackSlotUplHwVers, nbsStackSlotSpecUplRightLinkLed=nbsStackSlotSpecUplRightLinkLed, nbsStackSlotPortsMaxNumber=nbsStackSlotPortsMaxNumber, nbsStackSlotSpecUplLeftLinkLed=nbsStackSlotSpecUplLeftLinkLed, nbsStackSlotsTableSize=nbsStackSlotsTableSize, nbsStackSlotSwVers=nbsStackSlotSwVers, nbsStackSlotUplinkModulesNumber=nbsStackSlotUplinkModulesNumber, nbsStackSlotUplNPorts=nbsStackSlotUplNPorts, nbsStackSlotUplTable=nbsStackSlotUplTable, nbsStackInfo=nbsStackInfo, nbsStackSlotHwVers=nbsStackSlotHwVers, nbsStackSlotReset=nbsStackSlotReset, nbsStackSlotCapacity=nbsStackSlotCapacity, nbsStackSlotRedundantPSMode=nbsStackSlotRedundantPSMode, nbsStackSlotNumber=nbsStackSlotNumber, nbsStackSlotType=nbsStackSlotType, nbsStackSlotUplPortsMask=nbsStackSlotUplPortsMask, nbsStackSlotUplFirstPort=nbsStackSlotUplFirstPort, nbsStackSlotUplType=nbsStackSlotUplType, nbSwitchG1=nbSwitchG1, nbsStackSlotIndex=nbsStackSlotIndex, nbsStackSlotUplSwVers=nbsStackSlotUplSwVers)
