#
# PySNMP MIB module OMNI-gx2RSW1000B-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2RSW1000B-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
gx2Rsw1000b, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Rsw1000b")
trapNetworkElemModelNumber, trapNetworkElemAlarmStatus, trapNetworkElemSerialNum, trapText, trapChangedValueInteger, trapIdentifier, trapNETrapLastTrapTimeStamp, trapNetworkElemAdminState, trapChangedObjectId, trapChangedValueDisplayString, trapNetworkElemAvailStatus, trapPerceivedSeverity, trapNetworkElemOperState = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber", "trapNetworkElemAlarmStatus", "trapNetworkElemSerialNum", "trapText", "trapChangedValueInteger", "trapIdentifier", "trapNETrapLastTrapTimeStamp", "trapNetworkElemAdminState", "trapChangedObjectId", "trapChangedValueDisplayString", "trapNetworkElemAvailStatus", "trapPerceivedSeverity", "trapNetworkElemOperState")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibIdentifier, NotificationType, ModuleIdentity, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, Counter64, ObjectIdentity, Unsigned32, TimeTicks, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "NotificationType", "ModuleIdentity", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "Counter64", "ObjectIdentity", "Unsigned32", "TimeTicks", "Gauge32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2Rsw1000bDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 1))
gx2Rsw1000bAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2), )
if mibBuilder.loadTexts: gx2Rsw1000bAnalogTable.setStatus('mandatory')
gx2Rsw1000bAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1), ).setIndexNames((0, "OMNI-gx2RSW1000B-MIB", "gx2Rsw1000bAnalogTableIndex"))
if mibBuilder.loadTexts: gx2Rsw1000bAnalogEntry.setStatus('mandatory')
gx2Rsw1000bDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3), )
if mibBuilder.loadTexts: gx2Rsw1000bDigitalTable.setStatus('mandatory')
gx2Rsw1000bDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2), ).setIndexNames((0, "OMNI-gx2RSW1000B-MIB", "gx2Rsw1000bDigitalTableIndex"))
if mibBuilder.loadTexts: gx2Rsw1000bDigitalEntry.setStatus('mandatory')
gx2Rsw1000bStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4), )
if mibBuilder.loadTexts: gx2Rsw1000bStatusTable.setStatus('mandatory')
gx2Rsw1000bStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3), ).setIndexNames((0, "OMNI-gx2RSW1000B-MIB", "gx2Rsw1000bStatusTableIndex"))
if mibBuilder.loadTexts: gx2Rsw1000bStatusEntry.setStatus('mandatory')
gx2Rsw1000bFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5), )
if mibBuilder.loadTexts: gx2Rsw1000bFactoryTable.setStatus('mandatory')
gx2Rsw1000bFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4), ).setIndexNames((0, "OMNI-gx2RSW1000B-MIB", "gx2Rsw1000bFactoryTableIndex"))
if mibBuilder.loadTexts: gx2Rsw1000bFactoryEntry.setStatus('mandatory')
gx2Rsw1000bHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 6), )
if mibBuilder.loadTexts: gx2Rsw1000bHoldTimeTable.setStatus('mandatory')
gx2Rsw1000bHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 6, 5), ).setIndexNames((0, "OMNI-gx2RSW1000B-MIB", "rxgx2Rsw1000bHoldTimeTableIndex"), (0, "OMNI-gx2RSW1000B-MIB", "rxgx2Rsw1000bHoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2Rsw1000bHoldTimeEntry.setStatus('mandatory')
gx2Rsw1000bAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rsw1000bAnalogTableIndex.setStatus('mandatory')
rsw1000blabelPriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelPriRFInputLvl.setStatus('optional')
rsw1000buomPriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000buomPriRFInputLvl.setStatus('optional')
rsw1000bmajorHighPriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorHighPriRFInputLvl.setStatus('obsolete')
rsw1000bmajorLowPriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorLowPriRFInputLvl.setStatus('obsolete')
rsw1000bminorHighPriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorHighPriRFInputLvl.setStatus('obsolete')
rsw1000bminorLowPriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorLowPriRFInputLvl.setStatus('obsolete')
rsw1000bcurrentValuePriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bcurrentValuePriRFInputLvl.setStatus('mandatory')
rsw1000bstateFlagPriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateFlagPriRFInputLvl.setStatus('mandatory')
rsw1000bminValuePriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminValuePriRFInputLvl.setStatus('mandatory')
rsw1000bmaxValuePriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmaxValuePriRFInputLvl.setStatus('mandatory')
rsw1000balarmStatePriRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000balarmStatePriRFInputLvl.setStatus('mandatory')
rsw1000blabelSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelSecRFInputLvl.setStatus('optional')
rsw1000buomSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000buomSecRFInputLvl.setStatus('optional')
rsw1000bmajorHighSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorHighSecRFInputLvl.setStatus('obsolete')
rsw1000bmajorLowSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorLowSecRFInputLvl.setStatus('obsolete')
rsw1000bminorHighSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorHighSecRFInputLvl.setStatus('obsolete')
rsw1000bminorLowSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorLowSecRFInputLvl.setStatus('obsolete')
rsw1000bcurrentValueSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bcurrentValueSecRFInputLvl.setStatus('mandatory')
rsw1000bstateFlagSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateFlagSecRFInputLvl.setStatus('mandatory')
rsw1000bminValueSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminValueSecRFInputLvl.setStatus('mandatory')
rsw1000bmaxValueSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmaxValueSecRFInputLvl.setStatus('mandatory')
rsw1000balarmStateSecRFInputLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000balarmStateSecRFInputLvl.setStatus('mandatory')
rsw1000blabelPriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelPriRFThreshold.setStatus('optional')
rsw1000buomPriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000buomPriRFThreshold.setStatus('optional')
rsw1000bmajorHighPriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorHighPriRFThreshold.setStatus('obsolete')
rsw1000bmajorLowPriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorLowPriRFThreshold.setStatus('obsolete')
rsw1000bminorHighPriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorHighPriRFThreshold.setStatus('obsolete')
rsw1000bminorLowPriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorLowPriRFThreshold.setStatus('obsolete')
rsw1000bcurrentValuePriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 30), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw1000bcurrentValuePriRFThreshold.setStatus('mandatory')
rsw1000bstateFlagPriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateFlagPriRFThreshold.setStatus('mandatory')
rsw1000bminValuePriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminValuePriRFThreshold.setStatus('mandatory')
rsw1000bmaxValuePriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmaxValuePriRFThreshold.setStatus('mandatory')
rsw1000balarmStatePriRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000balarmStatePriRFThreshold.setStatus('mandatory')
rsw1000blabelSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelSecRFThreshold.setStatus('optional')
rsw1000buomSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000buomSecRFThreshold.setStatus('optional')
rsw1000bmajorHighSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorHighSecRFThreshold.setStatus('obsolete')
rsw1000bmajorLowSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorLowSecRFThreshold.setStatus('obsolete')
rsw1000bminorHighSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorHighSecRFThreshold.setStatus('obsolete')
rsw1000bminorLowSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorLowSecRFThreshold.setStatus('obsolete')
rsw1000bcurrentValueSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 41), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw1000bcurrentValueSecRFThreshold.setStatus('mandatory')
rsw1000bstateFlagSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateFlagSecRFThreshold.setStatus('mandatory')
rsw1000bminValueSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminValueSecRFThreshold.setStatus('mandatory')
rsw1000bmaxValueSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmaxValueSecRFThreshold.setStatus('mandatory')
rsw1000balarmStateSecRFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000balarmStateSecRFThreshold.setStatus('mandatory')
rsw1000blabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelModTemp.setStatus('optional')
rsw1000buomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000buomModTemp.setStatus('optional')
rsw1000bmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorHighModTemp.setStatus('mandatory')
rsw1000bmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorLowModTemp.setStatus('mandatory')
rsw1000bminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorHighModTemp.setStatus('mandatory')
rsw1000bminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorLowModTemp.setStatus('mandatory')
rsw1000bcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bcurrentValueModTemp.setStatus('mandatory')
rsw1000bstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateFlagModTemp.setStatus('mandatory')
rsw1000bminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminValueModTemp.setStatus('mandatory')
rsw1000bmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmaxValueModTemp.setStatus('mandatory')
rsw1000balarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000balarmStateModTemp.setStatus('mandatory')
rsw1000blabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelFanCurrent.setStatus('optional')
rsw1000buomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000buomFanCurrent.setStatus('optional')
rsw1000bmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorHighFanCurrent.setStatus('mandatory')
rsw1000bmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmajorLowFanCurrent.setStatus('mandatory')
rsw1000bminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorHighFanCurrent.setStatus('obsolete')
rsw1000bminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminorLowFanCurrent.setStatus('obsolete')
rsw1000bcurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bcurrentValueFanCurrent.setStatus('mandatory')
rsw1000bstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateFlagFanCurrent.setStatus('mandatory')
rsw1000bminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bminValueFanCurrent.setStatus('mandatory')
rsw1000bmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bmaxValueFanCurrent.setStatus('mandatory')
rsw1000balarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000balarmStateFanCurrent.setStatus('mandatory')
gx2Rsw1000bDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rsw1000bDigitalTableIndex.setStatus('mandatory')
rsw1000blabelSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelSwitchControl.setStatus('optional')
rsw1000benumSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000benumSwitchControl.setStatus('optional')
rsw1000bvalueSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw1000bvalueSwitchControl.setStatus('mandatory')
rsw1000bstateflagSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagSwitchControl.setStatus('mandatory')
rsw1000blabelSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelSwitchMode.setStatus('optional')
rsw1000benumSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000benumSwitchMode.setStatus('optional')
rsw1000bvalueSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw1000bvalueSwitchMode.setStatus('mandatory')
rsw1000bstateflagSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagSwitchMode.setStatus('mandatory')
rsw1000blabelRevertEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelRevertEnable.setStatus('optional')
rsw1000benumRevertEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000benumRevertEnable.setStatus('optional')
rsw1000bvalueRevertEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw1000bvalueRevertEnable.setStatus('mandatory')
rsw1000bstateflagRevertEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagRevertEnable.setStatus('mandatory')
rsw1000blabelRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelRevertTime.setStatus('optional')
rsw1000benumRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000benumRevertTime.setStatus('optional')
rsw1000bvalueRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tensec", 1), ("sixtysec", 2), ("sixhundredsec", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw1000bvalueRevertTime.setStatus('mandatory')
rsw1000bstateflagRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagRevertTime.setStatus('mandatory')
rsw1000blabelSensorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelSensorMode.setStatus('optional')
rsw1000benumSensorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000benumSensorMode.setStatus('optional')
rsw1000bvalueSensorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw1000bvalueSensorMode.setStatus('mandatory')
rsw1000bstateflagSensorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagSensorMode.setStatus('mandatory')
rsw1000blabelSwitchMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelSwitchMonitor.setStatus('optional')
rsw1000benumSwitchMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000benumSwitchMonitor.setStatus('optional')
rsw1000bvalueSwitchMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bvalueSwitchMonitor.setStatus('mandatory')
rsw1000bstateflagSwitchMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagSwitchMonitor.setStatus('mandatory')
rsw1000blabelPriStatusSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelPriStatusSig.setStatus('optional')
rsw1000benumPriStatusSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000benumPriStatusSig.setStatus('optional')
rsw1000bvaluePriStatusSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("short", 1), ("valid", 2), ("invalid", 3), ("open", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bvaluePriStatusSig.setStatus('mandatory')
rsw1000bstateflagPriStatusSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagPriStatusSig.setStatus('mandatory')
rsw1000blabelSecStatusSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelSecStatusSig.setStatus('optional')
rsw1000benumSecStatusSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000benumSecStatusSig.setStatus('optional')
rsw1000bvalueSecStatusSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("short", 1), ("valid", 2), ("invalid", 3), ("open", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bvalueSecStatusSig.setStatus('mandatory')
rsw1000bstateflagSecStatusSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagSecStatusSig.setStatus('mandatory')
rsw1000blabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelFactoryDefault.setStatus('optional')
rsw1000benumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000benumFactoryDefault.setStatus('optional')
rsw1000bvalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw1000bvalueFactoryDefault.setStatus('mandatory')
rsw1000bstateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 3, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagFactoryDefault.setStatus('mandatory')
gx2Rsw1000bStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rsw1000bStatusTableIndex.setStatus('mandatory')
rsw1000blabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelBoot.setStatus('optional')
rsw1000bvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bvalueBoot.setStatus('mandatory')
rsw1000bstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagBoot.setStatus('mandatory')
rsw1000blabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelFlash.setStatus('optional')
rsw1000bvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bvalueFlash.setStatus('mandatory')
rsw1000bstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagFlash.setStatus('mandatory')
rsw1000blabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelFactoryDataCRC.setStatus('optional')
rsw1000bvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bvalueFactoryDataCRC.setStatus('mandatory')
rsw1000bstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagFactoryDataCRC.setStatus('mandatory')
rsw1000blabelRFDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelRFDataCRC.setStatus('optional')
rsw1000bvalueRFDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bvalueRFDataCRC.setStatus('mandatory')
rsw1000bstateflagRFDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagRFDataCRC.setStatus('mandatory')
rsw1000blabelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelAlarmDataCRC.setStatus('optional')
rsw1000bvalueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bvalueAlarmDataCRC.setStatus('mandatory')
rsw1000bstateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagAlarmDataCRC.setStatus('mandatory')
rsw1000blabelRFSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelRFSignalStatus.setStatus('optional')
rsw1000bvalueRFSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bvalueRFSignalStatus.setStatus('mandatory')
rsw1000bstateflagRFSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagRFSignalStatus.setStatus('mandatory')
rsw1000blabelPriActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000blabelPriActiveStatus.setStatus('optional')
rsw1000bvaluePriActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bvaluePriActiveStatus.setStatus('mandatory')
rsw1000bstateflagPriActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bstateflagPriActiveStatus.setStatus('mandatory')
gx2Rsw1000bFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rsw1000bFactoryTableIndex.setStatus('mandatory')
rsw1000bbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bbootControlByte.setStatus('mandatory')
rsw1000bbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bbootStatusByte.setStatus('mandatory')
rsw1000bbank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bbank0CRC.setStatus('mandatory')
rsw1000bbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bbank1CRC.setStatus('mandatory')
rsw1000bprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bprgEEPROMByte.setStatus('mandatory')
rsw1000bfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bfactoryCRC.setStatus('mandatory')
rsw1000bcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("rf", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bcalculateCRC.setStatus('mandatory')
rsw1000bhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bhourMeter.setStatus('mandatory')
rsw1000bflashPrgCnt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bflashPrgCnt0.setStatus('mandatory')
rsw1000bflashPrgCnt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bflashPrgCnt1.setStatus('mandatory')
rsw1000bflashBank0Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bflashBank0Rev.setStatus('mandatory')
rsw1000bflashBank1Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bflashBank1Rev.setStatus('mandatory')
rsw1000bSubagentRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 5, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw1000bSubagentRev.setStatus('mandatory')
rxgx2Rsw1000bHoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Rsw1000bHoldTimeTableIndex.setStatus('mandatory')
rxgx2Rsw1000bHoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Rsw1000bHoldTimeSpecIndex.setStatus('mandatory')
rxgx2Rsw1000bHoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxgx2Rsw1000bHoldTimeData.setStatus('mandatory')
trapRSW1000bConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bRFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bInputSwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bSecondaryInputActiveAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRSW1000bCalibrationDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 18) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2RSW1000B-MIB", rsw1000bvaluePriActiveStatus=rsw1000bvaluePriActiveStatus, rsw1000balarmStateSecRFThreshold=rsw1000balarmStateSecRFThreshold, rsw1000blabelBoot=rsw1000blabelBoot, rsw1000bmaxValueSecRFThreshold=rsw1000bmaxValueSecRFThreshold, rsw1000bstateFlagModTemp=rsw1000bstateFlagModTemp, rsw1000bflashBank1Rev=rsw1000bflashBank1Rev, rsw1000bmaxValueFanCurrent=rsw1000bmaxValueFanCurrent, rsw1000bstateflagSwitchMonitor=rsw1000bstateflagSwitchMonitor, gx2Rsw1000bFactoryEntry=gx2Rsw1000bFactoryEntry, rsw1000bcurrentValuePriRFInputLvl=rsw1000bcurrentValuePriRFInputLvl, rsw1000bvalueFactoryDataCRC=rsw1000bvalueFactoryDataCRC, rsw1000bstateflagSensorMode=rsw1000bstateflagSensorMode, rsw1000blabelPriActiveStatus=rsw1000blabelPriActiveStatus, rsw1000bflashPrgCnt1=rsw1000bflashPrgCnt1, rsw1000bflashBank0Rev=rsw1000bflashBank0Rev, trapRSW1000bConfigChangeDisplayString=trapRSW1000bConfigChangeDisplayString, rsw1000blabelRevertTime=rsw1000blabelRevertTime, gx2Rsw1000bStatusEntry=gx2Rsw1000bStatusEntry, rsw1000bbootControlByte=rsw1000bbootControlByte, rsw1000bmajorHighSecRFInputLvl=rsw1000bmajorHighSecRFInputLvl, rsw1000blabelSecRFInputLvl=rsw1000blabelSecRFInputLvl, rsw1000bstateflagFactoryDefault=rsw1000bstateflagFactoryDefault, trapRSW1000bResetFactoryDefaultAlarm=trapRSW1000bResetFactoryDefaultAlarm, rsw1000bstateflagRevertEnable=rsw1000bstateflagRevertEnable, rsw1000bstateflagPriActiveStatus=rsw1000bstateflagPriActiveStatus, Float=Float, rsw1000bstateflagPriStatusSig=rsw1000bstateflagPriStatusSig, rsw1000blabelSecRFThreshold=rsw1000blabelSecRFThreshold, rsw1000bvalueRFDataCRC=rsw1000bvalueRFDataCRC, rsw1000bminorHighPriRFInputLvl=rsw1000bminorHighPriRFInputLvl, rsw1000blabelSecStatusSig=rsw1000blabelSecStatusSig, rsw1000bminorLowPriRFThreshold=rsw1000bminorLowPriRFThreshold, rsw1000bminValueFanCurrent=rsw1000bminValueFanCurrent, rsw1000bminorHighPriRFThreshold=rsw1000bminorHighPriRFThreshold, rsw1000balarmStateModTemp=rsw1000balarmStateModTemp, rsw1000benumRevertEnable=rsw1000benumRevertEnable, rsw1000blabelRFDataCRC=rsw1000blabelRFDataCRC, rsw1000blabelPriRFInputLvl=rsw1000blabelPriRFInputLvl, rsw1000blabelRFSignalStatus=rsw1000blabelRFSignalStatus, rsw1000bbank1CRC=rsw1000bbank1CRC, rsw1000bvaluePriStatusSig=rsw1000bvaluePriStatusSig, rsw1000bmajorLowSecRFInputLvl=rsw1000bmajorLowSecRFInputLvl, gx2Rsw1000bDigitalTable=gx2Rsw1000bDigitalTable, rxgx2Rsw1000bHoldTimeSpecIndex=rxgx2Rsw1000bHoldTimeSpecIndex, rsw1000bstateflagFactoryDataCRC=rsw1000bstateflagFactoryDataCRC, rsw1000bstateflagSecStatusSig=rsw1000bstateflagSecStatusSig, rsw1000bcurrentValueSecRFInputLvl=rsw1000bcurrentValueSecRFInputLvl, rsw1000bvalueBoot=rsw1000bvalueBoot, rsw1000bminValueModTemp=rsw1000bminValueModTemp, rsw1000blabelFlash=rsw1000blabelFlash, rsw1000bminorHighSecRFThreshold=rsw1000bminorHighSecRFThreshold, rsw1000bminorLowModTemp=rsw1000bminorLowModTemp, rsw1000benumPriStatusSig=rsw1000benumPriStatusSig, rsw1000bmajorHighModTemp=rsw1000bmajorHighModTemp, rsw1000bstateflagRFDataCRC=rsw1000bstateflagRFDataCRC, gx2Rsw1000bStatusTable=gx2Rsw1000bStatusTable, rsw1000buomPriRFThreshold=rsw1000buomPriRFThreshold, rsw1000bprgEEPROMByte=rsw1000bprgEEPROMByte, rsw1000bminValuePriRFInputLvl=rsw1000bminValuePriRFInputLvl, rsw1000bminorHighModTemp=rsw1000bminorHighModTemp, rsw1000blabelSwitchMode=rsw1000blabelSwitchMode, rsw1000bminorLowPriRFInputLvl=rsw1000bminorLowPriRFInputLvl, rsw1000bstateflagFlash=rsw1000bstateflagFlash, gx2Rsw1000bFactoryTableIndex=gx2Rsw1000bFactoryTableIndex, rsw1000blabelFanCurrent=rsw1000blabelFanCurrent, gx2Rsw1000bDescriptor=gx2Rsw1000bDescriptor, trapRSW1000bFactoryDataCRCAlarm=trapRSW1000bFactoryDataCRCAlarm, rsw1000bmaxValueSecRFInputLvl=rsw1000bmaxValueSecRFInputLvl, rsw1000bstateFlagPriRFThreshold=rsw1000bstateFlagPriRFThreshold, trapRSW1000bFlashAlarm=trapRSW1000bFlashAlarm, rsw1000bstateflagBoot=rsw1000bstateflagBoot, rsw1000blabelRevertEnable=rsw1000blabelRevertEnable, gx2Rsw1000bDigitalEntry=gx2Rsw1000bDigitalEntry, rsw1000buomModTemp=rsw1000buomModTemp, rsw1000bminorHighFanCurrent=rsw1000bminorHighFanCurrent, rsw1000benumSwitchControl=rsw1000benumSwitchControl, trapRSW1000bAlarmDataCRCAlarm=trapRSW1000bAlarmDataCRCAlarm, rsw1000benumSensorMode=rsw1000benumSensorMode, rsw1000bmajorLowFanCurrent=rsw1000bmajorLowFanCurrent, rsw1000bminorHighSecRFInputLvl=rsw1000bminorHighSecRFInputLvl, rsw1000bvalueSecStatusSig=rsw1000bvalueSecStatusSig, rsw1000bminorLowSecRFInputLvl=rsw1000bminorLowSecRFInputLvl, rsw1000bvalueSwitchControl=rsw1000bvalueSwitchControl, rsw1000bhourMeter=rsw1000bhourMeter, rsw1000bvalueRFSignalStatus=rsw1000bvalueRFSignalStatus, rsw1000bmajorHighFanCurrent=rsw1000bmajorHighFanCurrent, rsw1000bmajorLowModTemp=rsw1000bmajorLowModTemp, rsw1000balarmStateFanCurrent=rsw1000balarmStateFanCurrent, trapRSW1000bConfigChangeInteger=trapRSW1000bConfigChangeInteger, rsw1000bminValueSecRFInputLvl=rsw1000bminValueSecRFInputLvl, rsw1000bstateflagRFSignalStatus=rsw1000bstateflagRFSignalStatus, gx2Rsw1000bDigitalTableIndex=gx2Rsw1000bDigitalTableIndex, rsw1000bbootStatusByte=rsw1000bbootStatusByte, gx2Rsw1000bAnalogTable=gx2Rsw1000bAnalogTable, rsw1000bmajorHighPriRFInputLvl=rsw1000bmajorHighPriRFInputLvl, gx2Rsw1000bFactoryTable=gx2Rsw1000bFactoryTable, rsw1000bcurrentValueSecRFThreshold=rsw1000bcurrentValueSecRFThreshold, rsw1000benumRevertTime=rsw1000benumRevertTime, rsw1000bstateFlagPriRFInputLvl=rsw1000bstateFlagPriRFInputLvl, rsw1000buomFanCurrent=rsw1000buomFanCurrent, gx2Rsw1000bAnalogTableIndex=gx2Rsw1000bAnalogTableIndex, rsw1000bmaxValuePriRFInputLvl=rsw1000bmaxValuePriRFInputLvl, rsw1000bcurrentValuePriRFThreshold=rsw1000bcurrentValuePriRFThreshold, rsw1000bstateFlagFanCurrent=rsw1000bstateFlagFanCurrent, trapRSW1000bCalibrationDataCRCAlarm=trapRSW1000bCalibrationDataCRCAlarm, rsw1000blabelSensorMode=rsw1000blabelSensorMode, rsw1000bcalculateCRC=rsw1000bcalculateCRC, gx2Rsw1000bHoldTimeTable=gx2Rsw1000bHoldTimeTable, rsw1000balarmStateSecRFInputLvl=rsw1000balarmStateSecRFInputLvl, rsw1000bminorLowFanCurrent=rsw1000bminorLowFanCurrent, rsw1000bminValuePriRFThreshold=rsw1000bminValuePriRFThreshold, rsw1000benumSwitchMode=rsw1000benumSwitchMode, rsw1000bmaxValueModTemp=rsw1000bmaxValueModTemp, rsw1000bvalueSwitchMode=rsw1000bvalueSwitchMode, rsw1000blabelFactoryDefault=rsw1000blabelFactoryDefault, rsw1000buomPriRFInputLvl=rsw1000buomPriRFInputLvl, trapRSW1000bFanCurrentAlarm=trapRSW1000bFanCurrentAlarm, rsw1000bmajorHighSecRFThreshold=rsw1000bmajorHighSecRFThreshold, rsw1000bmajorLowPriRFThreshold=rsw1000bmajorLowPriRFThreshold, rsw1000bmajorLowSecRFThreshold=rsw1000bmajorLowSecRFThreshold, rsw1000bvalueRevertEnable=rsw1000bvalueRevertEnable, trapRSW1000bModuleTempAlarm=trapRSW1000bModuleTempAlarm, gx2Rsw1000bHoldTimeEntry=gx2Rsw1000bHoldTimeEntry, rsw1000bstateFlagSecRFThreshold=rsw1000bstateFlagSecRFThreshold, rsw1000bbank0CRC=rsw1000bbank0CRC, rsw1000bcurrentValueModTemp=rsw1000bcurrentValueModTemp, trapRSW1000bRFInputAlarm=trapRSW1000bRFInputAlarm, gx2Rsw1000bAnalogEntry=gx2Rsw1000bAnalogEntry, rsw1000benumSecStatusSig=rsw1000benumSecStatusSig, rsw1000buomSecRFThreshold=rsw1000buomSecRFThreshold, rsw1000buomSecRFInputLvl=rsw1000buomSecRFInputLvl, rsw1000bcurrentValueFanCurrent=rsw1000bcurrentValueFanCurrent, rsw1000blabelPriStatusSig=rsw1000blabelPriStatusSig, rsw1000benumFactoryDefault=rsw1000benumFactoryDefault, rsw1000bmajorHighPriRFThreshold=rsw1000bmajorHighPriRFThreshold, rsw1000bstateflagSwitchMode=rsw1000bstateflagSwitchMode, rsw1000blabelFactoryDataCRC=rsw1000blabelFactoryDataCRC, rsw1000blabelSwitchControl=rsw1000blabelSwitchControl, rsw1000bfactoryCRC=rsw1000bfactoryCRC, rxgx2Rsw1000bHoldTimeTableIndex=rxgx2Rsw1000bHoldTimeTableIndex, trapRSW1000bBankBootAlarm=trapRSW1000bBankBootAlarm, rsw1000blabelAlarmDataCRC=rsw1000blabelAlarmDataCRC, rsw1000bmajorLowPriRFInputLvl=rsw1000bmajorLowPriRFInputLvl, rsw1000bstateflagAlarmDataCRC=rsw1000bstateflagAlarmDataCRC, trapRSW1000bInputSwitchedAlarm=trapRSW1000bInputSwitchedAlarm, rsw1000bminorLowSecRFThreshold=rsw1000bminorLowSecRFThreshold, rsw1000benumSwitchMonitor=rsw1000benumSwitchMonitor, gx2Rsw1000bStatusTableIndex=gx2Rsw1000bStatusTableIndex, rsw1000bvalueFlash=rsw1000bvalueFlash, rsw1000blabelPriRFThreshold=rsw1000blabelPriRFThreshold, rsw1000bstateflagRevertTime=rsw1000bstateflagRevertTime, rsw1000bminValueSecRFThreshold=rsw1000bminValueSecRFThreshold, rsw1000bvalueRevertTime=rsw1000bvalueRevertTime, rsw1000balarmStatePriRFThreshold=rsw1000balarmStatePriRFThreshold, trapRSW1000bSecondaryInputActiveAlarm=trapRSW1000bSecondaryInputActiveAlarm, rsw1000bSubagentRev=rsw1000bSubagentRev, rsw1000bstateflagSwitchControl=rsw1000bstateflagSwitchControl, rsw1000blabelSwitchMonitor=rsw1000blabelSwitchMonitor, rsw1000bvalueSwitchMonitor=rsw1000bvalueSwitchMonitor, rsw1000bvalueAlarmDataCRC=rsw1000bvalueAlarmDataCRC, rsw1000bvalueSensorMode=rsw1000bvalueSensorMode, rsw1000bmaxValuePriRFThreshold=rsw1000bmaxValuePriRFThreshold, rsw1000bstateFlagSecRFInputLvl=rsw1000bstateFlagSecRFInputLvl, rsw1000bvalueFactoryDefault=rsw1000bvalueFactoryDefault, rsw1000blabelModTemp=rsw1000blabelModTemp, rsw1000bflashPrgCnt0=rsw1000bflashPrgCnt0, rxgx2Rsw1000bHoldTimeData=rxgx2Rsw1000bHoldTimeData, rsw1000balarmStatePriRFInputLvl=rsw1000balarmStatePriRFInputLvl)
