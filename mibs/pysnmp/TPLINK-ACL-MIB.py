#
# PySNMP MIB module TPLINK-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:16:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibIdentifier, Bits, Counter32, ObjectIdentity, Unsigned32, IpAddress, ModuleIdentity, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Bits", "Counter32", "ObjectIdentity", "Unsigned32", "IpAddress", "ModuleIdentity", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
TPRowStatus, = mibBuilder.importSymbols("TPLINK-TC-MIB", "TPRowStatus")
tplinkAclMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 26))
tplinkAclMIB.setRevisions(('2012-12-13 09:30',))
if mibBuilder.loadTexts: tplinkAclMIB.setLastUpdated('201212130930Z')
if mibBuilder.loadTexts: tplinkAclMIB.setOrganization('TPLINK')
tplinkAclMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1))
tplinkAclNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 26, 2))
tpPolicyConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2))
tpPolicyBindConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3))
tpAclBindConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4))
tpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1), )
if mibBuilder.loadTexts: tpPolicyTable.setStatus('current')
tpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1, 1), ).setIndexNames((0, "TPLINK-ACL-MIB", "tpPolicyName"), (0, "TPLINK-ACL-MIB", "tpAclId"))
if mibBuilder.loadTexts: tpPolicyEntry.setStatus('current')
tpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpPolicyName.setStatus('current')
tpAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpAclId.setStatus('current')
tpMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMirrorPort.setStatus('current')
tpConditionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpConditionRate.setStatus('current')
tpIfExceedOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("drop", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpIfExceedOperation.setStatus('current')
tpRedirectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpRedirectPort.setStatus('current')
tpQosRemarkDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63))).clone(namedValues=NamedValues(("dscp64-noLimit", 64), ("dscp0-be-000000", 0), ("dscp1", 1), ("dscp2", 2), ("dscp3", 3), ("dscp4", 4), ("dscp5", 5), ("dscp6", 6), ("dscp7", 7), ("dscp8-cs1-001000", 8), ("dscp9", 9), ("dscp10-af11-001010", 10), ("dscp11", 11), ("dscp12-af12-001100", 12), ("dscp13", 13), ("dscp14-af13-001110", 14), ("dscp15", 15), ("dscp16-cs2-010000", 16), ("dscp17", 17), ("dscp18-af21-010010", 18), ("dscp19", 19), ("dscp20-af22-010100", 20), ("dscp21", 21), ("dscp22-af23-010110", 22), ("dscp23", 23), ("dscp24-cs3-011000", 24), ("dscp25", 25), ("dscp26-af31-011010", 26), ("dscp27", 27), ("dscp28-af32-011100", 28), ("dscp29", 29), ("dscp30-af33-011110", 30), ("dscp31", 31), ("dscp32-cs4-100000", 32), ("dscp33", 33), ("dscp34-af41-100010", 34), ("dscp35", 35), ("dscp36-af42-100100", 36), ("dscp37", 37), ("dscp38-af43-100110", 38), ("dscp39", 39), ("dscp40-cs5-101000", 40), ("dscp41", 41), ("dscp42", 42), ("dscp43", 43), ("dscp44", 44), ("dscp45", 45), ("dscp46-ef-101110", 46), ("dscp47", 47), ("dscp48-cs6-110000", 48), ("dscp49", 49), ("dscp50", 50), ("dscp51", 51), ("dscp52", 52), ("dscp53", 53), ("dscp54", 54), ("dscp55", 55), ("dscp56-cs7-111000", 56), ("dscp57", 57), ("dscp58", 58), ("dscp59", 59), ("dscp60", 60), ("dscp61", 61), ("dscp62", 62), ("dscp63", 63)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpQosRemarkDSCP.setStatus('current')
tpQosRemarkLocalPri = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("default", 0), ("tc0", 1), ("tc1", 2), ("tc2", 3), ("tc3", 4), ("tc4", 5), ("tc5", 6), ("tc6", 7), ("tc7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpQosRemarkLocalPri.setStatus('current')
tpPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 2, 1, 1, 9), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpPolicyStatus.setStatus('current')
tpPolicyBindPortTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3, 1), )
if mibBuilder.loadTexts: tpPolicyBindPortTable.setStatus('current')
tpPolicyBindPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3, 1, 1), ).setIndexNames((0, "TPLINK-ACL-MIB", "tpBindPortPolicyName"), (0, "TPLINK-ACL-MIB", "tpPolicyPort"))
if mibBuilder.loadTexts: tpPolicyBindPortEntry.setStatus('current')
tpBindPortPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpBindPortPolicyName.setStatus('current')
tpPolicyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpPolicyPort.setStatus('current')
tpPolicyBindPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3, 1, 1, 3), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpPolicyBindPortStatus.setStatus('current')
tpPolicyBindVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3, 2), )
if mibBuilder.loadTexts: tpPolicyBindVlanTable.setStatus('current')
tpPolicyBindVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3, 2, 1), ).setIndexNames((0, "TPLINK-ACL-MIB", "tpBindVlanPolicyName"), (0, "TPLINK-ACL-MIB", "tpPolicyVlan"))
if mibBuilder.loadTexts: tpPolicyBindVlanEntry.setStatus('current')
tpBindVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpBindVlanPolicyName.setStatus('current')
tpPolicyVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpPolicyVlan.setStatus('current')
tpPolicyBindVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 3, 2, 1, 3), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpPolicyBindVlanStatus.setStatus('current')
tpAclBindPortTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4, 1), )
if mibBuilder.loadTexts: tpAclBindPortTable.setStatus('current')
tpAclBindPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4, 1, 1), ).setIndexNames((0, "TPLINK-ACL-MIB", "tpBindPortAclId"), (0, "TPLINK-ACL-MIB", "tpAclPort"))
if mibBuilder.loadTexts: tpAclBindPortEntry.setStatus('current')
tpBindPortAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpBindPortAclId.setStatus('current')
tpAclPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpAclPort.setStatus('current')
tpAclBindPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4, 1, 1, 3), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpAclBindPortStatus.setStatus('current')
tpAclBindVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4, 2), )
if mibBuilder.loadTexts: tpAclBindVlanTable.setStatus('current')
tpAclBindVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4, 2, 1), ).setIndexNames((0, "TPLINK-ACL-MIB", "tpBindVlanAclId"), (0, "TPLINK-ACL-MIB", "tpAclVlan"))
if mibBuilder.loadTexts: tpAclBindVlanEntry.setStatus('current')
tpBindVlanAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpBindVlanAclId.setStatus('current')
tpAclVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpAclVlan.setStatus('current')
tpAclBindVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 26, 1, 4, 2, 1, 3), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpAclBindVlanStatus.setStatus('current')
mibBuilder.exportSymbols("TPLINK-ACL-MIB", tpAclBindVlanTable=tpAclBindVlanTable, tpPolicyStatus=tpPolicyStatus, tpAclId=tpAclId, PYSNMP_MODULE_ID=tplinkAclMIB, tpQosRemarkDSCP=tpQosRemarkDSCP, tpPolicyName=tpPolicyName, tpPolicyVlan=tpPolicyVlan, tpAclBindVlanEntry=tpAclBindVlanEntry, tpPolicyPort=tpPolicyPort, tpAclBindVlanStatus=tpAclBindVlanStatus, tpAclBindPortStatus=tpAclBindPortStatus, tpPolicyBindVlanTable=tpPolicyBindVlanTable, tpPolicyTable=tpPolicyTable, tpPolicyBindPortEntry=tpPolicyBindPortEntry, tpPolicyBindConfigure=tpPolicyBindConfigure, tpBindVlanPolicyName=tpBindVlanPolicyName, tpAclPort=tpAclPort, tpBindVlanAclId=tpBindVlanAclId, tpPolicyEntry=tpPolicyEntry, tplinkAclMIB=tplinkAclMIB, tpAclBindConfigure=tpAclBindConfigure, tpAclBindPortTable=tpAclBindPortTable, tpBindPortAclId=tpBindPortAclId, tpConditionRate=tpConditionRate, tplinkAclMIBObjects=tplinkAclMIBObjects, tpPolicyBindPortTable=tpPolicyBindPortTable, tpPolicyBindVlanStatus=tpPolicyBindVlanStatus, tpPolicyBindVlanEntry=tpPolicyBindVlanEntry, tpAclVlan=tpAclVlan, tpIfExceedOperation=tpIfExceedOperation, tplinkAclNotifications=tplinkAclNotifications, tpRedirectPort=tpRedirectPort, tpBindPortPolicyName=tpBindPortPolicyName, tpMirrorPort=tpMirrorPort, tpQosRemarkLocalPri=tpQosRemarkLocalPri, tpPolicyBindPortStatus=tpPolicyBindPortStatus, tpAclBindPortEntry=tpAclBindPortEntry, tpPolicyConfigure=tpPolicyConfigure)
