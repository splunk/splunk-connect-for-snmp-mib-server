#
# PySNMP MIB module LMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, NotificationType, transmission, IpAddress, ObjectIdentity, Bits, TimeTicks, Counter64, Gauge32, ModuleIdentity, Unsigned32, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "transmission", "IpAddress", "ObjectIdentity", "Bits", "TimeTicks", "Counter64", "Gauge32", "ModuleIdentity", "Unsigned32", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TruthValue, RowStatus, TimeStamp, TextualConvention, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TimeStamp", "TextualConvention", "DisplayString", "StorageType")
teLinkIncomingIfId, TeLinkEncodingType, teLinkRemoteIpAddr = mibBuilder.importSymbols("TE-LINK-STD-MIB", "teLinkIncomingIfId", "TeLinkEncodingType", "teLinkRemoteIpAddr")
lmpMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 227))
lmpMIB.setRevisions(('2006-08-14 00:00', '2006-01-11 00:00',))
if mibBuilder.loadTexts: lmpMIB.setLastUpdated('200608140000Z')
if mibBuilder.loadTexts: lmpMIB.setOrganization('Common Control and Measurement Protocols (CCAMP) Working Group')
class LmpInterval(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class LmpRetransmitInterval(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class LmpNodeId(TextualConvention, OctetString):
    reference = 'Section 1.1 of Link Management Protocol, RFC 4204.'
    status = 'current'
    displayHint = '1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

lmpNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 227, 0))
lmpObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 227, 1))
lmpConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 227, 2))
lmpAdminStatus = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpAdminStatus.setStatus('current')
lmpOperStatus = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpOperStatus.setStatus('current')
lmpNbrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 227, 1, 3), )
if mibBuilder.loadTexts: lmpNbrTable.setStatus('current')
lmpNbrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1), ).setIndexNames((0, "LMP-MIB", "lmpNbrNodeId"))
if mibBuilder.loadTexts: lmpNbrEntry.setStatus('current')
lmpNbrNodeId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 1), LmpNodeId())
if mibBuilder.loadTexts: lmpNbrNodeId.setStatus('current')
lmpNbrRetransmitInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 2), LmpRetransmitInterval().clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpNbrRetransmitInterval.setStatus('current')
lmpNbrRetryLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 3), Unsigned32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpNbrRetryLimit.setStatus('current')
lmpNbrRetransmitDelta = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 4), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpNbrRetransmitDelta.setStatus('current')
lmpNbrAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpNbrAdminStatus.setStatus('current')
lmpNbrOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpNbrOperStatus.setStatus('current')
lmpNbrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpNbrRowStatus.setStatus('current')
lmpNbrStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpNbrStorageType.setStatus('current')
lmpCcHelloIntervalDefault = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 4), LmpInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpCcHelloIntervalDefault.setStatus('current')
lmpCcHelloIntervalDefaultMin = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 5), LmpInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpCcHelloIntervalDefaultMin.setStatus('current')
lmpCcHelloIntervalDefaultMax = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 6), LmpInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpCcHelloIntervalDefaultMax.setStatus('current')
lmpCcHelloDeadIntervalDefault = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 7), LmpInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpCcHelloDeadIntervalDefault.setStatus('current')
lmpCcHelloDeadIntervalDefaultMin = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 8), LmpInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpCcHelloDeadIntervalDefaultMin.setStatus('current')
lmpCcHelloDeadIntervalDefaultMax = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 9), LmpInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpCcHelloDeadIntervalDefaultMax.setStatus('current')
lmpControlChannelTable = MibTable((1, 3, 6, 1, 2, 1, 10, 227, 1, 10), )
if mibBuilder.loadTexts: lmpControlChannelTable.setStatus('current')
lmpControlChannelEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1), ).setIndexNames((0, "LMP-MIB", "lmpCcId"))
if mibBuilder.loadTexts: lmpControlChannelEntry.setStatus('current')
lmpCcId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: lmpCcId.setStatus('current')
lmpCcUnderlyingIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcUnderlyingIfIndex.setStatus('current')
lmpCcIsIf = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcIsIf.setStatus('current')
lmpCcNbrNodeId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 4), LmpNodeId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcNbrNodeId.setStatus('current')
lmpCcRemoteId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcRemoteId.setStatus('current')
lmpCcRemoteAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcRemoteAddressType.setStatus('current')
lmpCcRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcRemoteIpAddr.setStatus('current')
lmpCcSetupRole = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcSetupRole.setStatus('current')
lmpCcAuthentication = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcAuthentication.setStatus('current')
lmpCcHelloInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 10), LmpInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcHelloInterval.setStatus('current')
lmpCcHelloIntervalMin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 11), LmpInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcHelloIntervalMin.setStatus('current')
lmpCcHelloIntervalMax = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 12), LmpInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcHelloIntervalMax.setStatus('current')
lmpCcHelloIntervalNegotiated = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 13), LmpInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcHelloIntervalNegotiated.setStatus('current')
lmpCcHelloDeadInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 14), LmpInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcHelloDeadInterval.setStatus('current')
lmpCcHelloDeadIntervalMin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 15), LmpInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcHelloDeadIntervalMin.setStatus('current')
lmpCcHelloDeadIntervalMax = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 16), LmpInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcHelloDeadIntervalMax.setStatus('current')
lmpCcHelloDeadIntervalNegotiated = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 17), LmpInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcHelloDeadIntervalNegotiated.setStatus('current')
lmpCcLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcLastChange.setStatus('current')
lmpCcAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcAdminStatus.setStatus('current')
lmpCcOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("configSnd", 3), ("configRcv", 4), ("active", 5), ("goingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcOperStatus.setStatus('current')
lmpCcRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcRowStatus.setStatus('current')
lmpCcStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 22), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpCcStorageType.setStatus('current')
lmpControlChannelPerfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 227, 1, 11), )
if mibBuilder.loadTexts: lmpControlChannelPerfTable.setStatus('current')
lmpControlChannelPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1), ).setIndexNames((0, "LMP-MIB", "lmpCcId"))
if mibBuilder.loadTexts: lmpControlChannelPerfEntry.setStatus('current')
lmpCcInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcInOctets.setStatus('current')
lmpCcInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcInDiscards.setStatus('current')
lmpCcInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcInErrors.setStatus('current')
lmpCcOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcOutOctets.setStatus('current')
lmpCcOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcOutDiscards.setStatus('current')
lmpCcOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcOutErrors.setStatus('current')
lmpCcConfigReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcConfigReceived.setStatus('current')
lmpCcConfigSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcConfigSent.setStatus('current')
lmpCcConfigRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcConfigRetransmit.setStatus('current')
lmpCcConfigAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcConfigAckReceived.setStatus('current')
lmpCcConfigAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcConfigAckSent.setStatus('current')
lmpCcConfigNackReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcConfigNackReceived.setStatus('current')
lmpCcConfigNackSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcConfigNackSent.setStatus('current')
lmpCcHelloReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcHelloReceived.setStatus('current')
lmpCcHelloSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcHelloSent.setStatus('current')
lmpCcBeginVerifyReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcBeginVerifyReceived.setStatus('current')
lmpCcBeginVerifySent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcBeginVerifySent.setStatus('current')
lmpCcBeginVerifyRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcBeginVerifyRetransmit.setStatus('current')
lmpCcBeginVerifyAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcBeginVerifyAckReceived.setStatus('current')
lmpCcBeginVerifyAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcBeginVerifyAckSent.setStatus('current')
lmpCcBeginVerifyNackReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcBeginVerifyNackReceived.setStatus('current')
lmpCcBeginVerifyNackSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcBeginVerifyNackSent.setStatus('current')
lmpCcEndVerifyReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcEndVerifyReceived.setStatus('current')
lmpCcEndVerifySent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcEndVerifySent.setStatus('current')
lmpCcEndVerifyRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcEndVerifyRetransmit.setStatus('current')
lmpCcEndVerifyAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcEndVerifyAckReceived.setStatus('current')
lmpCcEndVerifyAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcEndVerifyAckSent.setStatus('current')
lmpCcTestStatusSuccessReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcTestStatusSuccessReceived.setStatus('current')
lmpCcTestStatusSuccessSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcTestStatusSuccessSent.setStatus('current')
lmpCcTestStatusSuccessRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcTestStatusSuccessRetransmit.setStatus('current')
lmpCcTestStatusFailureReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcTestStatusFailureReceived.setStatus('current')
lmpCcTestStatusFailureSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcTestStatusFailureSent.setStatus('current')
lmpCcTestStatusFailureRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcTestStatusFailureRetransmit.setStatus('current')
lmpCcTestStatusAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcTestStatusAckReceived.setStatus('current')
lmpCcTestStatusAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcTestStatusAckSent.setStatus('current')
lmpCcLinkSummaryReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcLinkSummaryReceived.setStatus('current')
lmpCcLinkSummarySent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcLinkSummarySent.setStatus('current')
lmpCcLinkSummaryRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcLinkSummaryRetransmit.setStatus('current')
lmpCcLinkSummaryAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcLinkSummaryAckReceived.setStatus('current')
lmpCcLinkSummaryAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcLinkSummaryAckSent.setStatus('current')
lmpCcLinkSummaryNackReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcLinkSummaryNackReceived.setStatus('current')
lmpCcLinkSummaryNackSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcLinkSummaryNackSent.setStatus('current')
lmpCcChannelStatusReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcChannelStatusReceived.setStatus('current')
lmpCcChannelStatusSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcChannelStatusSent.setStatus('current')
lmpCcChannelStatusRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcChannelStatusRetransmit.setStatus('current')
lmpCcChannelStatusAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcChannelStatusAckReceived.setStatus('current')
lmpCcChannelStatusAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcChannelStatusAckSent.setStatus('current')
lmpCcChannelStatusReqReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcChannelStatusReqReceived.setStatus('current')
lmpCcChannelStatusReqSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcChannelStatusReqSent.setStatus('current')
lmpCcChannelStatusReqRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcChannelStatusReqRetransmit.setStatus('current')
lmpCcChannelStatusRspReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcChannelStatusRspReceived.setStatus('current')
lmpCcChannelStatusRspSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcChannelStatusRspSent.setStatus('current')
lmpCcCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 53), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpCcCounterDiscontinuityTime.setStatus('current')
lmpTeLinkTable = MibTable((1, 3, 6, 1, 2, 1, 10, 227, 1, 12), )
if mibBuilder.loadTexts: lmpTeLinkTable.setStatus('current')
lmpTeLinkEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lmpTeLinkEntry.setStatus('current')
lmpTeLinkNbrRemoteNodeId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 1), LmpNodeId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpTeLinkNbrRemoteNodeId.setStatus('current')
lmpTeLinkVerification = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpTeLinkVerification.setStatus('current')
lmpTeLinkFaultManagement = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpTeLinkFaultManagement.setStatus('current')
lmpTeLinkDwdm = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpTeLinkDwdm.setStatus('current')
lmpTeLinkOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("init", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeLinkOperStatus.setStatus('current')
lmpTeLinkRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpTeLinkRowStatus.setStatus('current')
lmpTeLinkStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpTeLinkStorageType.setStatus('current')
lmpGlobalLinkVerificationInterval = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 13), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpGlobalLinkVerificationInterval.setStatus('current')
lmpLinkVerificationTable = MibTable((1, 3, 6, 1, 2, 1, 10, 227, 1, 14), )
if mibBuilder.loadTexts: lmpLinkVerificationTable.setStatus('current')
lmpLinkVerificationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lmpLinkVerificationEntry.setStatus('current')
lmpLinkVerifyInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 1), LmpInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpLinkVerifyInterval.setStatus('current')
lmpLinkVerifyDeadInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 2), LmpInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpLinkVerifyDeadInterval.setStatus('current')
lmpLinkVerifyTransportMechanism = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 3), Bits().clone(namedValues=NamedValues(("payload", 0), ("dccSectionOverheadBytes", 1), ("dccLineOverheadBytes", 2), ("j0Trace", 3), ("j1Trace", 4), ("j2Trace", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpLinkVerifyTransportMechanism.setStatus('current')
lmpLinkVerifyAllLinks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpLinkVerifyAllLinks.setStatus('current')
lmpLinkVerifyTransmissionRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 5), Unsigned32()).setUnits('bytes per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpLinkVerifyTransmissionRate.setStatus('current')
lmpLinkVerifyWavelength = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 6), Unsigned32()).setUnits('nanometers').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpLinkVerifyWavelength.setStatus('current')
lmpLinkVerifyRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpLinkVerifyRowStatus.setStatus('current')
lmpLinkVerifyStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpLinkVerifyStorageType.setStatus('current')
lmpTeLinkPerfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 227, 1, 15), )
if mibBuilder.loadTexts: lmpTeLinkPerfTable.setStatus('current')
lmpTeLinkPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lmpTeLinkPerfEntry.setStatus('current')
lmpTeInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeInOctets.setStatus('current')
lmpTeOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeOutOctets.setStatus('current')
lmpTeBeginVerifyReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeBeginVerifyReceived.setStatus('current')
lmpTeBeginVerifySent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeBeginVerifySent.setStatus('current')
lmpTeBeginVerifyRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeBeginVerifyRetransmit.setStatus('current')
lmpTeBeginVerifyAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeBeginVerifyAckReceived.setStatus('current')
lmpTeBeginVerifyAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeBeginVerifyAckSent.setStatus('current')
lmpTeBeginVerifyNackReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeBeginVerifyNackReceived.setStatus('current')
lmpTeBeginVerifyNackSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeBeginVerifyNackSent.setStatus('current')
lmpTeEndVerifyReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeEndVerifyReceived.setStatus('current')
lmpTeEndVerifySent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeEndVerifySent.setStatus('current')
lmpTeEndVerifyRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeEndVerifyRetransmit.setStatus('current')
lmpTeEndVerifyAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeEndVerifyAckReceived.setStatus('current')
lmpTeEndVerifyAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeEndVerifyAckSent.setStatus('current')
lmpTeTestStatusSuccessReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeTestStatusSuccessReceived.setStatus('current')
lmpTeTestStatusSuccessSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeTestStatusSuccessSent.setStatus('current')
lmpTeTestStatusSuccessRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeTestStatusSuccessRetransmit.setStatus('current')
lmpTeTestStatusFailureReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeTestStatusFailureReceived.setStatus('current')
lmpTeTestStatusFailureSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeTestStatusFailureSent.setStatus('current')
lmpTeTestStatusFailureRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeTestStatusFailureRetransmit.setStatus('current')
lmpTeTestStatusAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeTestStatusAckReceived.setStatus('current')
lmpTeTestStatusAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeTestStatusAckSent.setStatus('current')
lmpTeLinkSummaryReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeLinkSummaryReceived.setStatus('current')
lmpTeLinkSummarySent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeLinkSummarySent.setStatus('current')
lmpTeLinkSummaryRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeLinkSummaryRetransmit.setStatus('current')
lmpTeLinkSummaryAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeLinkSummaryAckReceived.setStatus('current')
lmpTeLinkSummaryAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeLinkSummaryAckSent.setStatus('current')
lmpTeLinkSummaryNackReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeLinkSummaryNackReceived.setStatus('current')
lmpTeLinkSummaryNackSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeLinkSummaryNackSent.setStatus('current')
lmpTeChannelStatusReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeChannelStatusReceived.setStatus('current')
lmpTeChannelStatusSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeChannelStatusSent.setStatus('current')
lmpTeChannelStatusRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeChannelStatusRetransmit.setStatus('current')
lmpTeChannelStatusAckReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeChannelStatusAckReceived.setStatus('current')
lmpTeChannelStatusAckSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeChannelStatusAckSent.setStatus('current')
lmpTeChannelStatusReqReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeChannelStatusReqReceived.setStatus('current')
lmpTeChannelStatusReqSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeChannelStatusReqSent.setStatus('current')
lmpTeChannelStatusReqRetransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeChannelStatusReqRetransmit.setStatus('current')
lmpTeChannelStatusRspReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeChannelStatusRspReceived.setStatus('current')
lmpTeChannelStatusRspSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeChannelStatusRspSent.setStatus('current')
lmpTeCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 40), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpTeCounterDiscontinuityTime.setStatus('current')
lmpDataLinkTable = MibTable((1, 3, 6, 1, 2, 1, 10, 227, 1, 16), )
if mibBuilder.loadTexts: lmpDataLinkTable.setStatus('current')
lmpDataLinkEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lmpDataLinkEntry.setStatus('current')
lmpDataLinkType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("componentLink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpDataLinkType.setStatus('current')
lmpDataLinkAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpDataLinkAddressType.setStatus('current')
lmpDataLinkIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpDataLinkIpAddr.setStatus('current')
lmpDataLinkRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpDataLinkRemoteIpAddress.setStatus('current')
lmpDataLinkRemoteIfId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpDataLinkRemoteIfId.setStatus('current')
lmpDataLinkEncodingType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 6), TeLinkEncodingType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpDataLinkEncodingType.setStatus('current')
lmpDataLinkActiveOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("upAlloc", 1), ("upFree", 2), ("down", 3), ("testing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpDataLinkActiveOperStatus.setStatus('current')
lmpDataLinkPassiveOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("upAlloc", 1), ("upFree", 2), ("down", 3), ("psvTst", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpDataLinkPassiveOperStatus.setStatus('current')
lmpDataLinkRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpDataLinkRowStatus.setStatus('current')
lmpDataLinkStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 10), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmpDataLinkStorageType.setStatus('current')
lmpDataLinkPerfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 227, 1, 17), )
if mibBuilder.loadTexts: lmpDataLinkPerfTable.setStatus('current')
lmpDataLinkPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lmpDataLinkPerfEntry.setStatus('current')
lmpDataLinkTestReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpDataLinkTestReceived.setStatus('current')
lmpDataLinkTestSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpDataLinkTestSent.setStatus('current')
lmpDataLinkActiveTestSuccess = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpDataLinkActiveTestSuccess.setStatus('current')
lmpDataLinkActiveTestFailure = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpDataLinkActiveTestFailure.setStatus('current')
lmpDataLinkPassiveTestSuccess = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpDataLinkPassiveTestSuccess.setStatus('current')
lmpDataLinkPassiveTestFailure = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpDataLinkPassiveTestFailure.setStatus('current')
lmpDataLinkDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmpDataLinkDiscontinuityTime.setStatus('current')
lmpNotificationMaxRate = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpNotificationMaxRate.setStatus('current')
lmpLinkPropertyNotificationsEnabled = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpLinkPropertyNotificationsEnabled.setStatus('current')
lmpUnprotectedNotificationsEnabled = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpUnprotectedNotificationsEnabled.setStatus('current')
lmpCcUpDownNotificationsEnabled = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpCcUpDownNotificationsEnabled.setStatus('current')
lmpTeLinkNotificationsEnabled = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpTeLinkNotificationsEnabled.setStatus('current')
lmpDataLinkNotificationsEnabled = MibScalar((1, 3, 6, 1, 2, 1, 10, 227, 1, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmpDataLinkNotificationsEnabled.setStatus('current')
lmpTeLinkPropertyMismatch = NotificationType((1, 3, 6, 1, 2, 1, 10, 227, 0, 1)).setObjects(("TE-LINK-STD-MIB", "teLinkRemoteIpAddr"), ("TE-LINK-STD-MIB", "teLinkIncomingIfId"))
if mibBuilder.loadTexts: lmpTeLinkPropertyMismatch.setStatus('current')
lmpDataLinkPropertyMismatch = NotificationType((1, 3, 6, 1, 2, 1, 10, 227, 0, 2)).setObjects(("LMP-MIB", "lmpDataLinkType"), ("LMP-MIB", "lmpDataLinkRemoteIfId"))
if mibBuilder.loadTexts: lmpDataLinkPropertyMismatch.setStatus('current')
lmpUnprotected = NotificationType((1, 3, 6, 1, 2, 1, 10, 227, 0, 3)).setObjects(("LMP-MIB", "lmpCcNbrNodeId"))
if mibBuilder.loadTexts: lmpUnprotected.setStatus('current')
lmpControlChannelUp = NotificationType((1, 3, 6, 1, 2, 1, 10, 227, 0, 4)).setObjects(("LMP-MIB", "lmpCcAdminStatus"), ("LMP-MIB", "lmpCcOperStatus"))
if mibBuilder.loadTexts: lmpControlChannelUp.setStatus('current')
lmpControlChannelDown = NotificationType((1, 3, 6, 1, 2, 1, 10, 227, 0, 5)).setObjects(("LMP-MIB", "lmpCcAdminStatus"), ("LMP-MIB", "lmpCcOperStatus"))
if mibBuilder.loadTexts: lmpControlChannelDown.setStatus('current')
lmpTeLinkDegraded = NotificationType((1, 3, 6, 1, 2, 1, 10, 227, 0, 6)).setObjects(("LMP-MIB", "lmpTeLinkOperStatus"))
if mibBuilder.loadTexts: lmpTeLinkDegraded.setStatus('current')
lmpTeLinkNotDegraded = NotificationType((1, 3, 6, 1, 2, 1, 10, 227, 0, 7)).setObjects(("LMP-MIB", "lmpTeLinkOperStatus"))
if mibBuilder.loadTexts: lmpTeLinkNotDegraded.setStatus('current')
lmpDataLinkVerificationFailure = NotificationType((1, 3, 6, 1, 2, 1, 10, 227, 0, 8)).setObjects(("LMP-MIB", "lmpDataLinkActiveOperStatus"), ("LMP-MIB", "lmpDataLinkPassiveOperStatus"))
if mibBuilder.loadTexts: lmpDataLinkVerificationFailure.setStatus('current')
lmpCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 227, 2, 1))
lmpGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 227, 2, 2))
lmpModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 227, 2, 1, 1)).setObjects(("LMP-MIB", "lmpNodeGroup"), ("LMP-MIB", "lmpControlChannelGroup"), ("LMP-MIB", "lmpLinkPropertyCorrelationGroup"), ("LMP-MIB", "lmpPerfGroup"), ("LMP-MIB", "lmpTeLinkGroup"), ("LMP-MIB", "lmpDataLinkGroup"), ("LMP-MIB", "lmpCcIsNotInterfaceGroup"), ("LMP-MIB", "lmpCcIsInterfaceGroup"), ("LMP-MIB", "lmpLinkVerificationGroup"), ("LMP-MIB", "lmpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpModuleFullCompliance = lmpModuleFullCompliance.setStatus('current')
lmpModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 227, 2, 1, 2)).setObjects(("LMP-MIB", "lmpNodeGroup"), ("LMP-MIB", "lmpControlChannelGroup"), ("LMP-MIB", "lmpLinkPropertyCorrelationGroup"), ("LMP-MIB", "lmpPerfGroup"), ("LMP-MIB", "lmpTeLinkGroup"), ("LMP-MIB", "lmpDataLinkGroup"), ("LMP-MIB", "lmpCcIsNotInterfaceGroup"), ("LMP-MIB", "lmpCcIsInterfaceGroup"), ("LMP-MIB", "lmpLinkVerificationGroup"), ("LMP-MIB", "lmpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpModuleReadOnlyCompliance = lmpModuleReadOnlyCompliance.setStatus('current')
lmpNodeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 1)).setObjects(("LMP-MIB", "lmpAdminStatus"), ("LMP-MIB", "lmpOperStatus"), ("LMP-MIB", "lmpNbrAdminStatus"), ("LMP-MIB", "lmpNbrOperStatus"), ("LMP-MIB", "lmpNbrRowStatus"), ("LMP-MIB", "lmpNbrStorageType"), ("LMP-MIB", "lmpUnprotectedNotificationsEnabled"), ("LMP-MIB", "lmpNotificationMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpNodeGroup = lmpNodeGroup.setStatus('current')
lmpControlChannelGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 2)).setObjects(("LMP-MIB", "lmpNbrRetransmitInterval"), ("LMP-MIB", "lmpNbrRetryLimit"), ("LMP-MIB", "lmpNbrRetransmitDelta"), ("LMP-MIB", "lmpNbrAdminStatus"), ("LMP-MIB", "lmpNbrOperStatus"), ("LMP-MIB", "lmpNbrRowStatus"), ("LMP-MIB", "lmpNbrStorageType"), ("LMP-MIB", "lmpCcHelloIntervalDefault"), ("LMP-MIB", "lmpCcHelloIntervalDefaultMin"), ("LMP-MIB", "lmpCcHelloIntervalDefaultMax"), ("LMP-MIB", "lmpCcHelloDeadIntervalDefault"), ("LMP-MIB", "lmpCcHelloDeadIntervalDefaultMin"), ("LMP-MIB", "lmpCcHelloDeadIntervalDefaultMax"), ("LMP-MIB", "lmpCcNbrNodeId"), ("LMP-MIB", "lmpCcRemoteId"), ("LMP-MIB", "lmpCcRemoteAddressType"), ("LMP-MIB", "lmpCcRemoteIpAddr"), ("LMP-MIB", "lmpCcSetupRole"), ("LMP-MIB", "lmpCcAuthentication"), ("LMP-MIB", "lmpCcHelloInterval"), ("LMP-MIB", "lmpCcHelloIntervalMin"), ("LMP-MIB", "lmpCcHelloIntervalMax"), ("LMP-MIB", "lmpCcHelloIntervalNegotiated"), ("LMP-MIB", "lmpCcHelloDeadInterval"), ("LMP-MIB", "lmpCcHelloDeadIntervalMin"), ("LMP-MIB", "lmpCcHelloDeadIntervalMax"), ("LMP-MIB", "lmpCcHelloDeadIntervalNegotiated"), ("LMP-MIB", "lmpCcOperStatus"), ("LMP-MIB", "lmpCcRowStatus"), ("LMP-MIB", "lmpCcStorageType"), ("LMP-MIB", "lmpCcUpDownNotificationsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpControlChannelGroup = lmpControlChannelGroup.setStatus('current')
lmpCcIsInterfaceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 3)).setObjects(("LMP-MIB", "lmpCcIsIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpCcIsInterfaceGroup = lmpCcIsInterfaceGroup.setStatus('current')
lmpCcIsNotInterfaceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 4)).setObjects(("LMP-MIB", "lmpCcUnderlyingIfIndex"), ("LMP-MIB", "lmpCcIsIf"), ("LMP-MIB", "lmpCcLastChange"), ("LMP-MIB", "lmpCcAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpCcIsNotInterfaceGroup = lmpCcIsNotInterfaceGroup.setStatus('current')
lmpLinkPropertyCorrelationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 5)).setObjects(("LMP-MIB", "lmpLinkPropertyNotificationsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpLinkPropertyCorrelationGroup = lmpLinkPropertyCorrelationGroup.setStatus('current')
lmpLinkVerificationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 6)).setObjects(("LMP-MIB", "lmpGlobalLinkVerificationInterval"), ("LMP-MIB", "lmpLinkVerifyInterval"), ("LMP-MIB", "lmpLinkVerifyDeadInterval"), ("LMP-MIB", "lmpLinkVerifyTransportMechanism"), ("LMP-MIB", "lmpLinkVerifyAllLinks"), ("LMP-MIB", "lmpLinkVerifyTransmissionRate"), ("LMP-MIB", "lmpLinkVerifyWavelength"), ("LMP-MIB", "lmpLinkVerifyRowStatus"), ("LMP-MIB", "lmpLinkVerifyStorageType"), ("LMP-MIB", "lmpDataLinkNotificationsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpLinkVerificationGroup = lmpLinkVerificationGroup.setStatus('current')
lmpPerfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 7)).setObjects(("LMP-MIB", "lmpCcInOctets"), ("LMP-MIB", "lmpCcInDiscards"), ("LMP-MIB", "lmpCcInErrors"), ("LMP-MIB", "lmpCcOutOctets"), ("LMP-MIB", "lmpCcOutDiscards"), ("LMP-MIB", "lmpCcOutErrors"), ("LMP-MIB", "lmpCcConfigReceived"), ("LMP-MIB", "lmpCcConfigSent"), ("LMP-MIB", "lmpCcConfigRetransmit"), ("LMP-MIB", "lmpCcConfigAckReceived"), ("LMP-MIB", "lmpCcConfigAckSent"), ("LMP-MIB", "lmpCcConfigNackSent"), ("LMP-MIB", "lmpCcConfigNackReceived"), ("LMP-MIB", "lmpCcHelloReceived"), ("LMP-MIB", "lmpCcHelloSent"), ("LMP-MIB", "lmpCcBeginVerifyReceived"), ("LMP-MIB", "lmpCcBeginVerifySent"), ("LMP-MIB", "lmpCcBeginVerifyRetransmit"), ("LMP-MIB", "lmpCcBeginVerifyAckReceived"), ("LMP-MIB", "lmpCcBeginVerifyAckSent"), ("LMP-MIB", "lmpCcBeginVerifyNackReceived"), ("LMP-MIB", "lmpCcBeginVerifyNackSent"), ("LMP-MIB", "lmpCcEndVerifyReceived"), ("LMP-MIB", "lmpCcEndVerifySent"), ("LMP-MIB", "lmpCcEndVerifyRetransmit"), ("LMP-MIB", "lmpCcEndVerifyAckReceived"), ("LMP-MIB", "lmpCcEndVerifyAckSent"), ("LMP-MIB", "lmpCcTestStatusSuccessReceived"), ("LMP-MIB", "lmpCcTestStatusSuccessSent"), ("LMP-MIB", "lmpCcTestStatusSuccessRetransmit"), ("LMP-MIB", "lmpCcTestStatusFailureReceived"), ("LMP-MIB", "lmpCcTestStatusFailureSent"), ("LMP-MIB", "lmpCcTestStatusFailureRetransmit"), ("LMP-MIB", "lmpCcTestStatusAckReceived"), ("LMP-MIB", "lmpCcTestStatusAckSent"), ("LMP-MIB", "lmpCcLinkSummaryReceived"), ("LMP-MIB", "lmpCcLinkSummarySent"), ("LMP-MIB", "lmpCcLinkSummaryRetransmit"), ("LMP-MIB", "lmpCcLinkSummaryAckReceived"), ("LMP-MIB", "lmpCcLinkSummaryAckSent"), ("LMP-MIB", "lmpCcLinkSummaryNackReceived"), ("LMP-MIB", "lmpCcLinkSummaryNackSent"), ("LMP-MIB", "lmpCcChannelStatusReceived"), ("LMP-MIB", "lmpCcChannelStatusSent"), ("LMP-MIB", "lmpCcChannelStatusRetransmit"), ("LMP-MIB", "lmpCcChannelStatusAckReceived"), ("LMP-MIB", "lmpCcChannelStatusAckSent"), ("LMP-MIB", "lmpCcChannelStatusReqReceived"), ("LMP-MIB", "lmpCcChannelStatusReqSent"), ("LMP-MIB", "lmpCcChannelStatusReqRetransmit"), ("LMP-MIB", "lmpCcChannelStatusRspReceived"), ("LMP-MIB", "lmpCcChannelStatusRspSent"), ("LMP-MIB", "lmpCcCounterDiscontinuityTime"), ("LMP-MIB", "lmpTeInOctets"), ("LMP-MIB", "lmpTeOutOctets"), ("LMP-MIB", "lmpTeBeginVerifyReceived"), ("LMP-MIB", "lmpTeBeginVerifySent"), ("LMP-MIB", "lmpTeBeginVerifyRetransmit"), ("LMP-MIB", "lmpTeBeginVerifyAckReceived"), ("LMP-MIB", "lmpTeBeginVerifyAckSent"), ("LMP-MIB", "lmpTeBeginVerifyNackReceived"), ("LMP-MIB", "lmpTeBeginVerifyNackSent"), ("LMP-MIB", "lmpTeEndVerifyReceived"), ("LMP-MIB", "lmpTeEndVerifySent"), ("LMP-MIB", "lmpTeEndVerifyRetransmit"), ("LMP-MIB", "lmpTeEndVerifyAckReceived"), ("LMP-MIB", "lmpTeEndVerifyAckSent"), ("LMP-MIB", "lmpTeTestStatusSuccessReceived"), ("LMP-MIB", "lmpTeTestStatusSuccessSent"), ("LMP-MIB", "lmpTeTestStatusSuccessRetransmit"), ("LMP-MIB", "lmpTeTestStatusFailureReceived"), ("LMP-MIB", "lmpTeTestStatusFailureSent"), ("LMP-MIB", "lmpTeTestStatusFailureRetransmit"), ("LMP-MIB", "lmpTeTestStatusAckReceived"), ("LMP-MIB", "lmpTeTestStatusAckSent"), ("LMP-MIB", "lmpTeLinkSummaryReceived"), ("LMP-MIB", "lmpTeLinkSummarySent"), ("LMP-MIB", "lmpTeLinkSummaryRetransmit"), ("LMP-MIB", "lmpTeLinkSummaryAckReceived"), ("LMP-MIB", "lmpTeLinkSummaryAckSent"), ("LMP-MIB", "lmpTeLinkSummaryNackReceived"), ("LMP-MIB", "lmpTeLinkSummaryNackSent"), ("LMP-MIB", "lmpTeChannelStatusReceived"), ("LMP-MIB", "lmpTeChannelStatusSent"), ("LMP-MIB", "lmpTeChannelStatusRetransmit"), ("LMP-MIB", "lmpTeChannelStatusAckReceived"), ("LMP-MIB", "lmpTeChannelStatusAckSent"), ("LMP-MIB", "lmpTeChannelStatusReqReceived"), ("LMP-MIB", "lmpTeChannelStatusReqSent"), ("LMP-MIB", "lmpTeChannelStatusReqRetransmit"), ("LMP-MIB", "lmpTeChannelStatusRspSent"), ("LMP-MIB", "lmpTeChannelStatusRspReceived"), ("LMP-MIB", "lmpTeCounterDiscontinuityTime"), ("LMP-MIB", "lmpDataLinkTestReceived"), ("LMP-MIB", "lmpDataLinkTestSent"), ("LMP-MIB", "lmpDataLinkActiveTestSuccess"), ("LMP-MIB", "lmpDataLinkActiveTestFailure"), ("LMP-MIB", "lmpDataLinkPassiveTestSuccess"), ("LMP-MIB", "lmpDataLinkPassiveTestFailure"), ("LMP-MIB", "lmpDataLinkDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpPerfGroup = lmpPerfGroup.setStatus('current')
lmpTeLinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 8)).setObjects(("LMP-MIB", "lmpTeLinkNbrRemoteNodeId"), ("LMP-MIB", "lmpTeLinkVerification"), ("LMP-MIB", "lmpTeLinkFaultManagement"), ("LMP-MIB", "lmpTeLinkDwdm"), ("LMP-MIB", "lmpTeLinkOperStatus"), ("LMP-MIB", "lmpTeLinkRowStatus"), ("LMP-MIB", "lmpTeLinkStorageType"), ("LMP-MIB", "lmpTeLinkNotificationsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpTeLinkGroup = lmpTeLinkGroup.setStatus('current')
lmpDataLinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 9)).setObjects(("LMP-MIB", "lmpDataLinkType"), ("LMP-MIB", "lmpDataLinkAddressType"), ("LMP-MIB", "lmpDataLinkIpAddr"), ("LMP-MIB", "lmpDataLinkRemoteIpAddress"), ("LMP-MIB", "lmpDataLinkRemoteIfId"), ("LMP-MIB", "lmpDataLinkEncodingType"), ("LMP-MIB", "lmpDataLinkActiveOperStatus"), ("LMP-MIB", "lmpDataLinkPassiveOperStatus"), ("LMP-MIB", "lmpDataLinkRowStatus"), ("LMP-MIB", "lmpDataLinkStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpDataLinkGroup = lmpDataLinkGroup.setStatus('current')
lmpNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 10)).setObjects(("LMP-MIB", "lmpTeLinkPropertyMismatch"), ("LMP-MIB", "lmpDataLinkPropertyMismatch"), ("LMP-MIB", "lmpUnprotected"), ("LMP-MIB", "lmpControlChannelUp"), ("LMP-MIB", "lmpControlChannelDown"), ("LMP-MIB", "lmpTeLinkDegraded"), ("LMP-MIB", "lmpTeLinkNotDegraded"), ("LMP-MIB", "lmpDataLinkVerificationFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lmpNotificationGroup = lmpNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("LMP-MIB", lmpCcBeginVerifyReceived=lmpCcBeginVerifyReceived, lmpCcTestStatusSuccessRetransmit=lmpCcTestStatusSuccessRetransmit, lmpTeLinkSummarySent=lmpTeLinkSummarySent, lmpLinkVerifyStorageType=lmpLinkVerifyStorageType, lmpCcBeginVerifySent=lmpCcBeginVerifySent, lmpCcLinkSummaryAckSent=lmpCcLinkSummaryAckSent, lmpTeLinkVerification=lmpTeLinkVerification, lmpNotificationMaxRate=lmpNotificationMaxRate, lmpCcChannelStatusRspSent=lmpCcChannelStatusRspSent, lmpTeTestStatusSuccessSent=lmpTeTestStatusSuccessSent, lmpCcChannelStatusReqReceived=lmpCcChannelStatusReqReceived, lmpDataLinkAddressType=lmpDataLinkAddressType, lmpCcRowStatus=lmpCcRowStatus, lmpNotifications=lmpNotifications, lmpDataLinkTestReceived=lmpDataLinkTestReceived, lmpCcChannelStatusAckSent=lmpCcChannelStatusAckSent, lmpCcTestStatusSuccessReceived=lmpCcTestStatusSuccessReceived, lmpControlChannelGroup=lmpControlChannelGroup, lmpNbrEntry=lmpNbrEntry, lmpDataLinkActiveOperStatus=lmpDataLinkActiveOperStatus, lmpCcOperStatus=lmpCcOperStatus, lmpTeEndVerifyAckSent=lmpTeEndVerifyAckSent, lmpDataLinkRowStatus=lmpDataLinkRowStatus, lmpCcUnderlyingIfIndex=lmpCcUnderlyingIfIndex, lmpCcTestStatusAckReceived=lmpCcTestStatusAckReceived, lmpLinkVerifyTransportMechanism=lmpLinkVerifyTransportMechanism, lmpDataLinkEntry=lmpDataLinkEntry, lmpNodeGroup=lmpNodeGroup, lmpCcChannelStatusReqSent=lmpCcChannelStatusReqSent, lmpTeLinkSummaryAckReceived=lmpTeLinkSummaryAckReceived, lmpCcChannelStatusRetransmit=lmpCcChannelStatusRetransmit, lmpCcTestStatusFailureSent=lmpCcTestStatusFailureSent, lmpDataLinkActiveTestSuccess=lmpDataLinkActiveTestSuccess, lmpCcRemoteIpAddr=lmpCcRemoteIpAddr, lmpDataLinkRemoteIfId=lmpDataLinkRemoteIfId, lmpCcTestStatusFailureRetransmit=lmpCcTestStatusFailureRetransmit, lmpOperStatus=lmpOperStatus, lmpTeLinkOperStatus=lmpTeLinkOperStatus, lmpCcEndVerifySent=lmpCcEndVerifySent, lmpCcChannelStatusRspReceived=lmpCcChannelStatusRspReceived, lmpTeLinkSummaryReceived=lmpTeLinkSummaryReceived, lmpCcConfigSent=lmpCcConfigSent, lmpTeLinkRowStatus=lmpTeLinkRowStatus, lmpTeCounterDiscontinuityTime=lmpTeCounterDiscontinuityTime, lmpCcTestStatusAckSent=lmpCcTestStatusAckSent, lmpDataLinkTable=lmpDataLinkTable, lmpCcChannelStatusAckReceived=lmpCcChannelStatusAckReceived, lmpDataLinkGroup=lmpDataLinkGroup, lmpTeChannelStatusRetransmit=lmpTeChannelStatusRetransmit, lmpCcBeginVerifyAckReceived=lmpCcBeginVerifyAckReceived, lmpCcBeginVerifyAckSent=lmpCcBeginVerifyAckSent, lmpTeLinkDwdm=lmpTeLinkDwdm, lmpLinkVerifyInterval=lmpLinkVerifyInterval, lmpDataLinkPassiveTestFailure=lmpDataLinkPassiveTestFailure, lmpNbrRetransmitDelta=lmpNbrRetransmitDelta, lmpCcChannelStatusSent=lmpCcChannelStatusSent, lmpDataLinkVerificationFailure=lmpDataLinkVerificationFailure, lmpTeEndVerifyRetransmit=lmpTeEndVerifyRetransmit, lmpTeLinkPropertyMismatch=lmpTeLinkPropertyMismatch, lmpCompliances=lmpCompliances, lmpDataLinkDiscontinuityTime=lmpDataLinkDiscontinuityTime, lmpCcHelloDeadIntervalDefault=lmpCcHelloDeadIntervalDefault, lmpCcId=lmpCcId, lmpUnprotected=lmpUnprotected, lmpTeTestStatusAckSent=lmpTeTestStatusAckSent, lmpCcHelloDeadInterval=lmpCcHelloDeadInterval, lmpObjects=lmpObjects, lmpCcHelloIntervalNegotiated=lmpCcHelloIntervalNegotiated, lmpTeLinkNotificationsEnabled=lmpTeLinkNotificationsEnabled, lmpLinkPropertyNotificationsEnabled=lmpLinkPropertyNotificationsEnabled, lmpCcIsNotInterfaceGroup=lmpCcIsNotInterfaceGroup, lmpTeChannelStatusReqSent=lmpTeChannelStatusReqSent, lmpMIB=lmpMIB, lmpLinkVerifyWavelength=lmpLinkVerifyWavelength, lmpCcConfigRetransmit=lmpCcConfigRetransmit, lmpCcConfigAckSent=lmpCcConfigAckSent, lmpControlChannelUp=lmpControlChannelUp, lmpTeTestStatusSuccessRetransmit=lmpTeTestStatusSuccessRetransmit, lmpTeBeginVerifySent=lmpTeBeginVerifySent, lmpControlChannelPerfEntry=lmpControlChannelPerfEntry, lmpCcChannelStatusReceived=lmpCcChannelStatusReceived, lmpTeLinkStorageType=lmpTeLinkStorageType, lmpTeChannelStatusRspReceived=lmpTeChannelStatusRspReceived, lmpTeOutOctets=lmpTeOutOctets, lmpTeBeginVerifyAckReceived=lmpTeBeginVerifyAckReceived, lmpControlChannelTable=lmpControlChannelTable, lmpDataLinkPerfTable=lmpDataLinkPerfTable, lmpNotificationGroup=lmpNotificationGroup, lmpCcHelloReceived=lmpCcHelloReceived, lmpUnprotectedNotificationsEnabled=lmpUnprotectedNotificationsEnabled, lmpTeChannelStatusAckSent=lmpTeChannelStatusAckSent, lmpTeEndVerifyAckReceived=lmpTeEndVerifyAckReceived, lmpCcHelloDeadIntervalDefaultMin=lmpCcHelloDeadIntervalDefaultMin, lmpTeChannelStatusAckReceived=lmpTeChannelStatusAckReceived, lmpNbrRetransmitInterval=lmpNbrRetransmitInterval, lmpCcOutErrors=lmpCcOutErrors, lmpPerfGroup=lmpPerfGroup, lmpCcConfigReceived=lmpCcConfigReceived, lmpCcRemoteAddressType=lmpCcRemoteAddressType, lmpTeBeginVerifyNackReceived=lmpTeBeginVerifyNackReceived, lmpTeChannelStatusSent=lmpTeChannelStatusSent, lmpCcConfigNackReceived=lmpCcConfigNackReceived, lmpLinkVerifyTransmissionRate=lmpLinkVerifyTransmissionRate, lmpTeTestStatusFailureReceived=lmpTeTestStatusFailureReceived, lmpTeBeginVerifyRetransmit=lmpTeBeginVerifyRetransmit, lmpCcHelloDeadIntervalMin=lmpCcHelloDeadIntervalMin, lmpControlChannelEntry=lmpControlChannelEntry, lmpTeTestStatusFailureSent=lmpTeTestStatusFailureSent, lmpCcConfigNackSent=lmpCcConfigNackSent, lmpLinkVerificationEntry=lmpLinkVerificationEntry, lmpCcHelloInterval=lmpCcHelloInterval, lmpTeLinkTable=lmpTeLinkTable, lmpConformance=lmpConformance, lmpCcHelloIntervalDefaultMax=lmpCcHelloIntervalDefaultMax, lmpNbrOperStatus=lmpNbrOperStatus, lmpCcConfigAckReceived=lmpCcConfigAckReceived, lmpCcSetupRole=lmpCcSetupRole, LmpNodeId=LmpNodeId, lmpCcLinkSummarySent=lmpCcLinkSummarySent, lmpTeLinkPerfEntry=lmpTeLinkPerfEntry, LmpInterval=LmpInterval, lmpTeBeginVerifyNackSent=lmpTeBeginVerifyNackSent, lmpCcEndVerifyRetransmit=lmpCcEndVerifyRetransmit, lmpCcTestStatusSuccessSent=lmpCcTestStatusSuccessSent, lmpCcHelloDeadIntervalDefaultMax=lmpCcHelloDeadIntervalDefaultMax, lmpNbrNodeId=lmpNbrNodeId, lmpTeTestStatusSuccessReceived=lmpTeTestStatusSuccessReceived, lmpLinkVerificationTable=lmpLinkVerificationTable, lmpControlChannelDown=lmpControlChannelDown, lmpNbrTable=lmpNbrTable, lmpDataLinkTestSent=lmpDataLinkTestSent, lmpCcOutOctets=lmpCcOutOctets, lmpTeChannelStatusReqRetransmit=lmpTeChannelStatusReqRetransmit, lmpDataLinkPassiveTestSuccess=lmpDataLinkPassiveTestSuccess, lmpGroups=lmpGroups, lmpTeChannelStatusReqReceived=lmpTeChannelStatusReqReceived, lmpCcTestStatusFailureReceived=lmpCcTestStatusFailureReceived, lmpCcLinkSummaryRetransmit=lmpCcLinkSummaryRetransmit, lmpTeBeginVerifyReceived=lmpTeBeginVerifyReceived, lmpTeLinkSummaryAckSent=lmpTeLinkSummaryAckSent, lmpTeChannelStatusRspSent=lmpTeChannelStatusRspSent, lmpCcHelloIntervalDefault=lmpCcHelloIntervalDefault, lmpCcNbrNodeId=lmpCcNbrNodeId, lmpCcInOctets=lmpCcInOctets, lmpCcHelloSent=lmpCcHelloSent, lmpTeLinkNotDegraded=lmpTeLinkNotDegraded, lmpCcAuthentication=lmpCcAuthentication, lmpTeEndVerifyReceived=lmpTeEndVerifyReceived, lmpCcLastChange=lmpCcLastChange, lmpCcAdminStatus=lmpCcAdminStatus, lmpTeLinkPerfTable=lmpTeLinkPerfTable, PYSNMP_MODULE_ID=lmpMIB, LmpRetransmitInterval=LmpRetransmitInterval, lmpTeLinkDegraded=lmpTeLinkDegraded, lmpCcStorageType=lmpCcStorageType, lmpCcEndVerifyAckReceived=lmpCcEndVerifyAckReceived, lmpTeLinkFaultManagement=lmpTeLinkFaultManagement, lmpCcUpDownNotificationsEnabled=lmpCcUpDownNotificationsEnabled, lmpCcEndVerifyReceived=lmpCcEndVerifyReceived, lmpCcBeginVerifyNackSent=lmpCcBeginVerifyNackSent, lmpDataLinkEncodingType=lmpDataLinkEncodingType, lmpNbrRowStatus=lmpNbrRowStatus, lmpTeBeginVerifyAckSent=lmpTeBeginVerifyAckSent, lmpTeLinkEntry=lmpTeLinkEntry, lmpCcChannelStatusReqRetransmit=lmpCcChannelStatusReqRetransmit, lmpModuleFullCompliance=lmpModuleFullCompliance, lmpCcLinkSummaryAckReceived=lmpCcLinkSummaryAckReceived, lmpDataLinkRemoteIpAddress=lmpDataLinkRemoteIpAddress, lmpCcHelloIntervalMax=lmpCcHelloIntervalMax, lmpCcOutDiscards=lmpCcOutDiscards, lmpAdminStatus=lmpAdminStatus, lmpTeLinkSummaryNackSent=lmpTeLinkSummaryNackSent, lmpNbrAdminStatus=lmpNbrAdminStatus, lmpDataLinkPropertyMismatch=lmpDataLinkPropertyMismatch, lmpCcCounterDiscontinuityTime=lmpCcCounterDiscontinuityTime, lmpTeLinkSummaryNackReceived=lmpTeLinkSummaryNackReceived, lmpTeChannelStatusReceived=lmpTeChannelStatusReceived, lmpDataLinkType=lmpDataLinkType, lmpCcInDiscards=lmpCcInDiscards, lmpCcIsInterfaceGroup=lmpCcIsInterfaceGroup, lmpLinkPropertyCorrelationGroup=lmpLinkPropertyCorrelationGroup, lmpTeLinkGroup=lmpTeLinkGroup, lmpCcLinkSummaryNackSent=lmpCcLinkSummaryNackSent, lmpCcLinkSummaryNackReceived=lmpCcLinkSummaryNackReceived, lmpCcIsIf=lmpCcIsIf, lmpTeLinkNbrRemoteNodeId=lmpTeLinkNbrRemoteNodeId, lmpLinkVerifyAllLinks=lmpLinkVerifyAllLinks, lmpCcBeginVerifyNackReceived=lmpCcBeginVerifyNackReceived, lmpCcHelloIntervalDefaultMin=lmpCcHelloIntervalDefaultMin, lmpNbrRetryLimit=lmpNbrRetryLimit, lmpModuleReadOnlyCompliance=lmpModuleReadOnlyCompliance, lmpCcEndVerifyAckSent=lmpCcEndVerifyAckSent, lmpDataLinkStorageType=lmpDataLinkStorageType, lmpDataLinkIpAddr=lmpDataLinkIpAddr, lmpLinkVerificationGroup=lmpLinkVerificationGroup, lmpCcLinkSummaryReceived=lmpCcLinkSummaryReceived, lmpLinkVerifyRowStatus=lmpLinkVerifyRowStatus, lmpCcRemoteId=lmpCcRemoteId, lmpLinkVerifyDeadInterval=lmpLinkVerifyDeadInterval, lmpDataLinkPerfEntry=lmpDataLinkPerfEntry, lmpCcBeginVerifyRetransmit=lmpCcBeginVerifyRetransmit, lmpTeTestStatusFailureRetransmit=lmpTeTestStatusFailureRetransmit, lmpCcHelloDeadIntervalMax=lmpCcHelloDeadIntervalMax, lmpTeEndVerifySent=lmpTeEndVerifySent, lmpCcHelloIntervalMin=lmpCcHelloIntervalMin, lmpTeLinkSummaryRetransmit=lmpTeLinkSummaryRetransmit, lmpGlobalLinkVerificationInterval=lmpGlobalLinkVerificationInterval, lmpNbrStorageType=lmpNbrStorageType, lmpDataLinkActiveTestFailure=lmpDataLinkActiveTestFailure, lmpTeTestStatusAckReceived=lmpTeTestStatusAckReceived, lmpDataLinkNotificationsEnabled=lmpDataLinkNotificationsEnabled, lmpDataLinkPassiveOperStatus=lmpDataLinkPassiveOperStatus, lmpCcHelloDeadIntervalNegotiated=lmpCcHelloDeadIntervalNegotiated, lmpControlChannelPerfTable=lmpControlChannelPerfTable, lmpTeInOctets=lmpTeInOctets, lmpCcInErrors=lmpCcInErrors)
