#
# PySNMP MIB module Wellfleet-FTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-FTP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Unsigned32, Integer32, ModuleIdentity, IpAddress, MibIdentifier, Counter32, Bits, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Unsigned32", "Integer32", "ModuleIdentity", "IpAddress", "MibIdentifier", "Counter32", "Bits", "iso", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfFtpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfFtpGroup")
wfFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1))
wfFtpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpDelete.setStatus('mandatory')
wfFtpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpDisable.setStatus('mandatory')
wfFtpDefaultVolume = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 65, 100, 101, 200, 201, 300, 301, 400, 401, 500, 501, 600, 601, 700, 701, 800, 801, 900, 901, 1000, 1001, 1100, 1101, 1200, 1201, 1300, 1301, 1400, 1401))).clone(namedValues=NamedValues(("volume1", 1), ("volume2", 2), ("volume3", 3), ("volume4", 4), ("volume5", 5), ("volume6", 6), ("volume7", 7), ("volume8", 8), ("volume9", 9), ("volume10", 10), ("volume11", 11), ("volume12", 12), ("volume13", 13), ("volume14", 14), ("volumea", 65), ("volume1a", 100), ("volume1b", 101), ("volume2a", 200), ("volume2b", 201), ("volume3a", 300), ("volume3b", 301), ("volume4a", 400), ("volume4b", 401), ("volume5a", 500), ("volume5b", 501), ("volume6a", 600), ("volume6b", 601), ("volume7a", 700), ("volume7b", 701), ("volume8a", 800), ("volume8b", 801), ("volume9a", 900), ("volume9b", 901), ("volume10a", 1000), ("volume10b", 1001), ("volume11a", 1100), ("volume11b", 1101), ("volume12a", 1200), ("volume12b", 1201), ("volume13a", 1300), ("volume13b", 1301), ("volume14a", 1400), ("volume14b", 1401))).clone('volume2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpDefaultVolume.setStatus('mandatory')
wfFtpLoginRetries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 4), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpLoginRetries.setStatus('mandatory')
wfFtpIdleTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 5), Integer32().clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpIdleTimeOut.setStatus('mandatory')
wfFtpMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 6), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpMaxSessions.setStatus('mandatory')
wfFtpType = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2))).clone('binary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpType.setStatus('mandatory')
wfFtpCtrlIpTos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("lowdelay", 2))).clone('lowdelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpCtrlIpTos.setStatus('obsolete')
wfFtpDataIpTos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("highthroughput", 2))).clone('highthroughput')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpDataIpTos.setStatus('obsolete')
wfFtpTcpWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 64000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpTcpWindowSize.setStatus('mandatory')
wfFtpLogins = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpLogins.setStatus('mandatory')
wfFtpManagerLoginFails = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpManagerLoginFails.setStatus('mandatory')
wfFtpOtherLoginFails = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpOtherLoginFails.setStatus('mandatory')
wfFtpXfers = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpXfers.setStatus('mandatory')
wfFtpInFiles = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpInFiles.setStatus('mandatory')
wfFtpOutFiles = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpOutFiles.setStatus('mandatory')
wfFtpInErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpInErrs.setStatus('mandatory')
wfFtpOutErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpOutErrs.setStatus('mandatory')
wfFtpAborts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpAborts.setStatus('mandatory')
wfFtpInXferRate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpInXferRate.setStatus('mandatory')
wfFtpOutXferRate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpOutXferRate.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-FTP-MIB", wfFtpOutErrs=wfFtpOutErrs, wfFtpDelete=wfFtpDelete, wfFtpOtherLoginFails=wfFtpOtherLoginFails, wfFtpInErrs=wfFtpInErrs, wfFtpXfers=wfFtpXfers, wfFtpIdleTimeOut=wfFtpIdleTimeOut, wfFtpDisable=wfFtpDisable, wfFtpMaxSessions=wfFtpMaxSessions, wfFtpAborts=wfFtpAborts, wfFtpOutXferRate=wfFtpOutXferRate, wfFtpDataIpTos=wfFtpDataIpTos, wfFtpLoginRetries=wfFtpLoginRetries, wfFtpDefaultVolume=wfFtpDefaultVolume, wfFtpInFiles=wfFtpInFiles, wfFtp=wfFtp, wfFtpCtrlIpTos=wfFtpCtrlIpTos, wfFtpTcpWindowSize=wfFtpTcpWindowSize, wfFtpOutFiles=wfFtpOutFiles, wfFtpType=wfFtpType, wfFtpInXferRate=wfFtpInXferRate, wfFtpManagerLoginFails=wfFtpManagerLoginFails, wfFtpLogins=wfFtpLogins)
