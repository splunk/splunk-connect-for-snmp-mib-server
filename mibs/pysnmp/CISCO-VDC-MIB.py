#
# PySNMP MIB module CISCO-VDC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VDC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:01:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Cisco2KVlanList, = mibBuilder.importSymbols("CISCO-TC", "Cisco2KVlanList")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, iso, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Counter64, Gauge32, ModuleIdentity, Unsigned32, Bits, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Counter64", "Gauge32", "ModuleIdentity", "Unsigned32", "Bits", "NotificationType", "MibIdentifier")
DateAndTime, StorageType, DisplayString, TextualConvention, RowStatus, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "StorageType", "DisplayString", "TextualConvention", "RowStatus", "MacAddress", "TruthValue")
ciscoVdcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 774))
ciscoVdcMIB.setRevisions(('2016-11-03 00:00', '2016-01-19 00:00', '2013-09-24 00:00', '2013-07-02 00:00', '2013-06-08 00:00', '2011-05-19 00:00',))
if mibBuilder.loadTexts: ciscoVdcMIB.setLastUpdated('201611030000Z')
if mibBuilder.loadTexts: ciscoVdcMIB.setOrganization('Cisco Systems, Inc.')
ciscoVdcMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 0))
ciscoVdcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 1))
ciscoVdcMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 2))
ciscoVdcGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 2))
ciscoVdcExt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3))
ciscoVdcResource = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4))
ciscoVdcInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5))
class CiscoVdcHaPolicy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("reload", 0), ("restart", 1), ("bringDown", 2), ("switchOver", 3))

class CiscoVdcPercentOrMinusOne(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )
ciscoVdcMaxNumberVdcAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcMaxNumberVdcAllowed.setStatus('current')
ciscoVdcCombinedHostnameEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcCombinedHostnameEnabled.setStatus('current')
ciscoVdcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1), )
if mibBuilder.loadTexts: ciscoVdcTable.setStatus('current')
ciscoVdcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"))
if mibBuilder.loadTexts: ciscoVdcEntry.setStatus('current')
ciscoVdcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: ciscoVdcId.setStatus('current')
ciscoVdcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcName.setStatus('current')
ciscoVdcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("active", 1), ("suspended", 2), ("nonconfigured", 3), ("configured", 4), ("creating", 5), ("deleting", 6), ("failed", 7), ("pending", 8), ("updating", 9), ("restarting", 10), ("suspending", 11), ("resuming", 12), ("failing", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcState.setStatus('current')
ciscoVdcFcoeCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disallowed", 1), ("allowed", 2), ("installed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcFcoeCapable.setStatus('current')
ciscoVdcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcMac.setStatus('current')
ciscoVdcSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcSwitchId.setStatus('current')
ciscoVdcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcRowStatus.setStatus('current')
ciscoVdcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 8), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcStorageType.setStatus('current')
ciscoVdcExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1), )
if mibBuilder.loadTexts: ciscoVdcExtTable.setStatus('current')
ciscoVdcExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"))
if mibBuilder.loadTexts: ciscoVdcExtEntry.setStatus('current')
ciscoVdcSingleSupHaPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 1), CiscoVdcHaPolicy().clone('restart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcSingleSupHaPolicy.setStatus('current')
ciscoVdcDualSupHaPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 2), CiscoVdcHaPolicy().clone('switchOver')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcDualSupHaPolicy.setStatus('current')
ciscoVdcBootOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcBootOrder.setStatus('current')
ciscoVdcTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcTimeCreated.setStatus('current')
ciscoVdcReloadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcReloadCount.setStatus('current')
ciscoVdcRestartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcRestartCount.setStatus('current')
ciscoVdcRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcRestartTime.setStatus('current')
ciscoVdcRestartReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcRestartReason.setStatus('current')
ciscoVdcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("admin", 1), ("ethernet", 2), ("storage", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcType.setStatus('current')
ciscoVdcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("suspended", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcAdminStatus.setStatus('current')
ciscoVdcFromUnallocatedIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("allocate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcFromUnallocatedIntf.setStatus('current')
ciscoVdcFeatureSetList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 12), Bits().clone(namedValues=NamedValues(("fcoe", 0), ("fabricPath", 1), ("fex", 2), ("mpls", 3), ("ethernet", 4), ("virtualization", 5), ("fabric", 6), ("fcoeNpv", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcFeatureSetList.setStatus('current')
ciscoVdcResourceTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 13), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcResourceTemplate.setStatus('current')
ciscoVdcModuleCapList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 14), Bits().clone(namedValues=NamedValues(("m1", 0), ("f1", 1), ("m1xl", 2), ("f2", 3), ("m2xl", 4), ("fc", 5), ("f2e", 6), ("f3", 7), ("m3", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcModuleCapList.setStatus('current')
ciscoVdcCpuPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcCpuPriority.setStatus('current')
ciscoVdcCpuSharePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 16), CiscoVdcPercentOrMinusOne()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcCpuSharePercent.setStatus('current')
ciscoVdcGlobalResUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1), )
if mibBuilder.loadTexts: ciscoVdcGlobalResUsageTable.setStatus('current')
ciscoVdcGlobalResUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcGlobalResID"))
if mibBuilder.loadTexts: ciscoVdcGlobalResUsageEntry.setStatus('current')
ciscoVdcGlobalResID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ciscoVdcGlobalResID.setStatus('current')
ciscoVdcGlobalResName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResName.setStatus('current')
ciscoVdcGlobalResUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResUsed.setStatus('current')
ciscoVdcGlobalResUnused = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResUnused.setStatus('current')
ciscoVdcGlobalResFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResFree.setStatus('current')
ciscoVdcGlobalResAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResAvail.setStatus('current')
ciscoVdcGlobalResTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResTotal.setStatus('current')
ciscoVdcResUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2), )
if mibBuilder.loadTexts: ciscoVdcResUsageTable.setStatus('current')
ciscoVdcResUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"), (0, "CISCO-VDC-MIB", "ciscoVdcResID"))
if mibBuilder.loadTexts: ciscoVdcResUsageEntry.setStatus('current')
ciscoVdcResID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ciscoVdcResID.setStatus('current')
ciscoVdcResMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcResMin.setStatus('current')
ciscoVdcResMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcResMax.setStatus('current')
ciscoVdcResUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcResUsed.setStatus('current')
ciscoVdcResUnused = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcResUnused.setStatus('current')
ciscoVdcResAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcResAvail.setStatus('current')
ciscoVdcResTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3), )
if mibBuilder.loadTexts: ciscoVdcResTemplateTable.setStatus('current')
ciscoVdcResTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcResTemplateName"), (0, "CISCO-VDC-MIB", "ciscoVdcResTemplateResID"))
if mibBuilder.loadTexts: ciscoVdcResTemplateEntry.setStatus('current')
ciscoVdcResTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: ciscoVdcResTemplateName.setStatus('current')
ciscoVdcResTemplateResID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ciscoVdcResTemplateResID.setStatus('current')
ciscoVdcResTemplateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcResTemplateMin.setStatus('current')
ciscoVdcResTemplateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcResTemplateMax.setStatus('current')
ciscoVdcResTemplateStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcResTemplateStorageType.setStatus('current')
ciscoVdcResTemplateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcResTemplateStatus.setStatus('current')
ciscoVdcIfMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 1), )
if mibBuilder.loadTexts: ciscoVdcIfMembershipTable.setStatus('current')
ciscoVdcIfMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"), (0, "CISCO-VDC-MIB", "ciscoVdcIfMembershipifIndex"))
if mibBuilder.loadTexts: ciscoVdcIfMembershipEntry.setStatus('current')
ciscoVdcIfMembershipifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ciscoVdcIfMembershipifIndex.setStatus('current')
ciscoVdcIfMembershipStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 1, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcIfMembershipStorageType.setStatus('current')
ciscoVdcIfMembershipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcIfMembershipStatus.setStatus('current')
ciscoVdcFCoEVlansTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 2), )
if mibBuilder.loadTexts: ciscoVdcFCoEVlansTable.setStatus('current')
ciscoVdcFCoEVlansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"))
if mibBuilder.loadTexts: ciscoVdcFCoEVlansEntry.setStatus('current')
ciscoVdcFCoEVlansFirst2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 2, 1, 1), Cisco2KVlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcFCoEVlansFirst2K.setStatus('current')
ciscoVdcFCoEVlansSecond2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 2, 1, 2), Cisco2KVlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcFCoEVlansSecond2K.setStatus('current')
ciscoVdcFCoEVlansFromVdc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcFCoEVlansFromVdc.setStatus('current')
ciscoVdcSharedInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 3), )
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceTable.setStatus('current')
ciscoVdcSharedInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"), (0, "CISCO-VDC-MIB", "ciscoVdcSharedInterfaceifIndex"))
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceEntry.setStatus('current')
ciscoVdcSharedInterfaceifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceifIndex.setStatus('current')
ciscoVdcSharedInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 3, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceStorageType.setStatus('current')
ciscoVdcSharedInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceRowStatus.setStatus('current')
ciscoVdcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 1))
ciscoVdcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2))
ciscoVdcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 1, 1)).setObjects(("CISCO-VDC-MIB", "ciscoVdcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcMIBCompliance = ciscoVdcMIBCompliance.setStatus('deprecated')
ciscoVdcMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 1, 2)).setObjects(("CISCO-VDC-MIB", "ciscoVdcGroup"), ("CISCO-VDC-MIB", "ciscoVdcExtGroup"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResUsageGroup"), ("CISCO-VDC-MIB", "ciscoVdcResUsageGroup"), ("CISCO-VDC-MIB", "ciscoVdcResTemplateGroup"), ("CISCO-VDC-MIB", "ciscoVdcGlobalGroup"), ("CISCO-VDC-MIB", "ciscoVdcIfMembershipGroup"), ("CISCO-VDC-MIB", "ciscoVdcFCoEVlansGroup"), ("CISCO-VDC-MIB", "ciscoVdcSharedInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcMIBCompliance1 = ciscoVdcMIBCompliance1.setStatus('current')
ciscoVdcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 1)).setObjects(("CISCO-VDC-MIB", "ciscoVdcName"), ("CISCO-VDC-MIB", "ciscoVdcState"), ("CISCO-VDC-MIB", "ciscoVdcFcoeCapable"), ("CISCO-VDC-MIB", "ciscoVdcMac"), ("CISCO-VDC-MIB", "ciscoVdcSwitchId"), ("CISCO-VDC-MIB", "ciscoVdcRowStatus"), ("CISCO-VDC-MIB", "ciscoVdcStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcGroup = ciscoVdcGroup.setStatus('current')
ciscoVdcExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 2)).setObjects(("CISCO-VDC-MIB", "ciscoVdcSingleSupHaPolicy"), ("CISCO-VDC-MIB", "ciscoVdcDualSupHaPolicy"), ("CISCO-VDC-MIB", "ciscoVdcBootOrder"), ("CISCO-VDC-MIB", "ciscoVdcTimeCreated"), ("CISCO-VDC-MIB", "ciscoVdcReloadCount"), ("CISCO-VDC-MIB", "ciscoVdcRestartCount"), ("CISCO-VDC-MIB", "ciscoVdcRestartTime"), ("CISCO-VDC-MIB", "ciscoVdcRestartReason"), ("CISCO-VDC-MIB", "ciscoVdcType"), ("CISCO-VDC-MIB", "ciscoVdcAdminStatus"), ("CISCO-VDC-MIB", "ciscoVdcFromUnallocatedIntf"), ("CISCO-VDC-MIB", "ciscoVdcFeatureSetList"), ("CISCO-VDC-MIB", "ciscoVdcResourceTemplate"), ("CISCO-VDC-MIB", "ciscoVdcModuleCapList"), ("CISCO-VDC-MIB", "ciscoVdcCpuPriority"), ("CISCO-VDC-MIB", "ciscoVdcCpuSharePercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcExtGroup = ciscoVdcExtGroup.setStatus('current')
ciscoVdcGlobalResUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 3)).setObjects(("CISCO-VDC-MIB", "ciscoVdcGlobalResName"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResUsed"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResUnused"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResFree"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResAvail"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcGlobalResUsageGroup = ciscoVdcGlobalResUsageGroup.setStatus('current')
ciscoVdcResUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 4)).setObjects(("CISCO-VDC-MIB", "ciscoVdcResMin"), ("CISCO-VDC-MIB", "ciscoVdcResMax"), ("CISCO-VDC-MIB", "ciscoVdcResUsed"), ("CISCO-VDC-MIB", "ciscoVdcResUnused"), ("CISCO-VDC-MIB", "ciscoVdcResAvail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcResUsageGroup = ciscoVdcResUsageGroup.setStatus('current')
ciscoVdcResTemplateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 5)).setObjects(("CISCO-VDC-MIB", "ciscoVdcResTemplateMin"), ("CISCO-VDC-MIB", "ciscoVdcResTemplateMax"), ("CISCO-VDC-MIB", "ciscoVdcResTemplateStatus"), ("CISCO-VDC-MIB", "ciscoVdcResTemplateStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcResTemplateGroup = ciscoVdcResTemplateGroup.setStatus('current')
ciscoVdcGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 6)).setObjects(("CISCO-VDC-MIB", "ciscoVdcMaxNumberVdcAllowed"), ("CISCO-VDC-MIB", "ciscoVdcCombinedHostnameEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcGlobalGroup = ciscoVdcGlobalGroup.setStatus('current')
ciscoVdcIfMembershipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 7)).setObjects(("CISCO-VDC-MIB", "ciscoVdcIfMembershipStatus"), ("CISCO-VDC-MIB", "ciscoVdcIfMembershipStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcIfMembershipGroup = ciscoVdcIfMembershipGroup.setStatus('current')
ciscoVdcFCoEVlansGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 8)).setObjects(("CISCO-VDC-MIB", "ciscoVdcFCoEVlansFirst2K"), ("CISCO-VDC-MIB", "ciscoVdcFCoEVlansSecond2K"), ("CISCO-VDC-MIB", "ciscoVdcFCoEVlansFromVdc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcFCoEVlansGroup = ciscoVdcFCoEVlansGroup.setStatus('current')
ciscoVdcSharedInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 9)).setObjects(("CISCO-VDC-MIB", "ciscoVdcSharedInterfaceRowStatus"), ("CISCO-VDC-MIB", "ciscoVdcSharedInterfaceStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcSharedInterfaceGroup = ciscoVdcSharedInterfaceGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-VDC-MIB", ciscoVdcId=ciscoVdcId, ciscoVdcModuleCapList=ciscoVdcModuleCapList, ciscoVdcEntry=ciscoVdcEntry, ciscoVdcFCoEVlansGroup=ciscoVdcFCoEVlansGroup, ciscoVdcBootOrder=ciscoVdcBootOrder, ciscoVdcResTemplateGroup=ciscoVdcResTemplateGroup, ciscoVdcFCoEVlansEntry=ciscoVdcFCoEVlansEntry, ciscoVdcExtGroup=ciscoVdcExtGroup, ciscoVdcSharedInterfaceStorageType=ciscoVdcSharedInterfaceStorageType, ciscoVdcRestartTime=ciscoVdcRestartTime, ciscoVdcResUsageTable=ciscoVdcResUsageTable, ciscoVdcMIBCompliances=ciscoVdcMIBCompliances, ciscoVdcFeatureSetList=ciscoVdcFeatureSetList, ciscoVdcResTemplateResID=ciscoVdcResTemplateResID, ciscoVdcGlobalResAvail=ciscoVdcGlobalResAvail, ciscoVdcTable=ciscoVdcTable, ciscoVdcReloadCount=ciscoVdcReloadCount, ciscoVdcMIBCompliance1=ciscoVdcMIBCompliance1, CiscoVdcHaPolicy=CiscoVdcHaPolicy, ciscoVdcIfMembershipifIndex=ciscoVdcIfMembershipifIndex, ciscoVdcGlobal=ciscoVdcGlobal, ciscoVdcResTemplateEntry=ciscoVdcResTemplateEntry, ciscoVdcResUnused=ciscoVdcResUnused, ciscoVdcResTemplateName=ciscoVdcResTemplateName, ciscoVdcIfMembershipTable=ciscoVdcIfMembershipTable, ciscoVdcResTemplateMax=ciscoVdcResTemplateMax, ciscoVdcGlobalResUnused=ciscoVdcGlobalResUnused, ciscoVdcRowStatus=ciscoVdcRowStatus, PYSNMP_MODULE_ID=ciscoVdcMIB, ciscoVdcCpuPriority=ciscoVdcCpuPriority, ciscoVdcMIBNotifs=ciscoVdcMIBNotifs, ciscoVdcCombinedHostnameEnabled=ciscoVdcCombinedHostnameEnabled, ciscoVdcMIB=ciscoVdcMIB, ciscoVdcResourceTemplate=ciscoVdcResourceTemplate, ciscoVdcMIBGroups=ciscoVdcMIBGroups, ciscoVdcSharedInterfaceGroup=ciscoVdcSharedInterfaceGroup, ciscoVdcTimeCreated=ciscoVdcTimeCreated, ciscoVdcType=ciscoVdcType, ciscoVdcGlobalResFree=ciscoVdcGlobalResFree, ciscoVdcFCoEVlansTable=ciscoVdcFCoEVlansTable, ciscoVdcResTemplateStatus=ciscoVdcResTemplateStatus, ciscoVdcMIBObjects=ciscoVdcMIBObjects, ciscoVdcGlobalResID=ciscoVdcGlobalResID, CiscoVdcPercentOrMinusOne=CiscoVdcPercentOrMinusOne, ciscoVdcCpuSharePercent=ciscoVdcCpuSharePercent, ciscoVdcResUsed=ciscoVdcResUsed, ciscoVdcExtEntry=ciscoVdcExtEntry, ciscoVdcMIBConform=ciscoVdcMIBConform, ciscoVdcDualSupHaPolicy=ciscoVdcDualSupHaPolicy, ciscoVdcSwitchId=ciscoVdcSwitchId, ciscoVdcResTemplateTable=ciscoVdcResTemplateTable, ciscoVdcGlobalResUsageTable=ciscoVdcGlobalResUsageTable, ciscoVdcFCoEVlansSecond2K=ciscoVdcFCoEVlansSecond2K, ciscoVdcGlobalResName=ciscoVdcGlobalResName, ciscoVdcStorageType=ciscoVdcStorageType, ciscoVdcSingleSupHaPolicy=ciscoVdcSingleSupHaPolicy, ciscoVdcSharedInterfaceRowStatus=ciscoVdcSharedInterfaceRowStatus, ciscoVdcSharedInterfaceTable=ciscoVdcSharedInterfaceTable, ciscoVdcResID=ciscoVdcResID, ciscoVdcResource=ciscoVdcResource, ciscoVdcResUsageGroup=ciscoVdcResUsageGroup, ciscoVdcMac=ciscoVdcMac, ciscoVdcFCoEVlansFirst2K=ciscoVdcFCoEVlansFirst2K, ciscoVdcSharedInterfaceifIndex=ciscoVdcSharedInterfaceifIndex, ciscoVdcRestartReason=ciscoVdcRestartReason, ciscoVdcExt=ciscoVdcExt, ciscoVdcFCoEVlansFromVdc=ciscoVdcFCoEVlansFromVdc, ciscoVdcGroup=ciscoVdcGroup, ciscoVdcState=ciscoVdcState, ciscoVdcIfMembershipEntry=ciscoVdcIfMembershipEntry, ciscoVdcIfMembershipStorageType=ciscoVdcIfMembershipStorageType, ciscoVdcResMin=ciscoVdcResMin, ciscoVdcSharedInterfaceEntry=ciscoVdcSharedInterfaceEntry, ciscoVdcIfMembershipGroup=ciscoVdcIfMembershipGroup, ciscoVdcResTemplateMin=ciscoVdcResTemplateMin, ciscoVdcResAvail=ciscoVdcResAvail, ciscoVdcIfMembershipStatus=ciscoVdcIfMembershipStatus, ciscoVdcGlobalGroup=ciscoVdcGlobalGroup, ciscoVdcMIBCompliance=ciscoVdcMIBCompliance, ciscoVdcMaxNumberVdcAllowed=ciscoVdcMaxNumberVdcAllowed, ciscoVdcAdminStatus=ciscoVdcAdminStatus, ciscoVdcFcoeCapable=ciscoVdcFcoeCapable, ciscoVdcGlobalResUsed=ciscoVdcGlobalResUsed, ciscoVdcInterface=ciscoVdcInterface, ciscoVdcGlobalResTotal=ciscoVdcGlobalResTotal, ciscoVdcResUsageEntry=ciscoVdcResUsageEntry, ciscoVdcGlobalResUsageGroup=ciscoVdcGlobalResUsageGroup, ciscoVdcGlobalResUsageEntry=ciscoVdcGlobalResUsageEntry, ciscoVdcExtTable=ciscoVdcExtTable, ciscoVdcResTemplateStorageType=ciscoVdcResTemplateStorageType, ciscoVdcResMax=ciscoVdcResMax, ciscoVdcName=ciscoVdcName, ciscoVdcRestartCount=ciscoVdcRestartCount, ciscoVdcFromUnallocatedIntf=ciscoVdcFromUnallocatedIntf)
