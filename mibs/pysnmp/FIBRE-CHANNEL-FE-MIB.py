#
# PySNMP MIB module FIBRE-CHANNEL-FE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FIBRE-CHANNEL-FE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:59:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, Unsigned32, mib_2, TimeTicks, Bits, Counter64, Counter32, Integer32, IpAddress, Gauge32, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "Unsigned32", "mib-2", "TimeTicks", "Bits", "Counter64", "Counter32", "Integer32", "IpAddress", "Gauge32", "ObjectIdentity", "NotificationType")
TextualConvention, TimeStamp, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue", "DisplayString")
fcFeMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 75))
fcFeMIB.setRevisions(('2000-05-18 00:00',))
if mibBuilder.loadTexts: fcFeMIB.setLastUpdated('200005180000Z')
if mibBuilder.loadTexts: fcFeMIB.setOrganization('IETF IPFC Working Group')
fcFeMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 75, 1))
fcFeConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 75, 1, 1))
fcFeStatus = MibIdentifier((1, 3, 6, 1, 2, 1, 75, 1, 2))
fcFeError = MibIdentifier((1, 3, 6, 1, 2, 1, 75, 1, 3))
fcFeAccounting = MibIdentifier((1, 3, 6, 1, 2, 1, 75, 1, 4))
fcFeCapabilities = MibIdentifier((1, 3, 6, 1, 2, 1, 75, 1, 5))
class MilliSeconds(TextualConvention, Unsigned32):
    status = 'current'

class MicroSeconds(TextualConvention, Unsigned32):
    status = 'current'

class FcNameId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class FcAddressId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class FcRxDataFieldSize(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(128, 2112)

class FcBbCredit(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 32767)

class FcphVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class FcStackedConnMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("transparent", 2), ("lockedDown", 3))

class FcCosCap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("classF", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4), ("class5", 5), ("class6", 6))

class FcFeModuleCapacity(TextualConvention, Unsigned32):
    status = 'current'

class FcFeFxPortCapacity(TextualConvention, Unsigned32):
    status = 'current'

class FcFeModuleIndex(TextualConvention, Unsigned32):
    status = 'current'

class FcFeFxPortIndex(TextualConvention, Unsigned32):
    status = 'current'

class FcFeNxPortIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 126)

class FcBbCreditModel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("regular", 1), ("alternate", 2))

fcFeFabricName = MibScalar((1, 3, 6, 1, 2, 1, 75, 1, 1, 1), FcNameId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFeFabricName.setStatus('current')
fcFeElementName = MibScalar((1, 3, 6, 1, 2, 1, 75, 1, 1, 2), FcNameId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFeElementName.setStatus('current')
fcFeModuleCapacity = MibScalar((1, 3, 6, 1, 2, 1, 75, 1, 1, 3), FcFeModuleCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleCapacity.setStatus('current')
fcFeModuleTable = MibTable((1, 3, 6, 1, 2, 1, 75, 1, 1, 4), )
if mibBuilder.loadTexts: fcFeModuleTable.setStatus('current')
fcFeModuleEntry = MibTableRow((1, 3, 6, 1, 2, 1, 75, 1, 1, 4, 1), ).setIndexNames((0, "FIBRE-CHANNEL-FE-MIB", "fcFeModuleIndex"))
if mibBuilder.loadTexts: fcFeModuleEntry.setStatus('current')
fcFeModuleIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 4, 1, 1), FcFeModuleIndex())
if mibBuilder.loadTexts: fcFeModuleIndex.setStatus('current')
fcFeModuleDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleDescr.setStatus('current')
fcFeModuleObjectID = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleObjectID.setStatus('current')
fcFeModuleOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleOperStatus.setStatus('current')
fcFeModuleLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleLastChange.setStatus('current')
fcFeModuleFxPortCapacity = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 4, 1, 6), FcFeFxPortCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleFxPortCapacity.setStatus('current')
fcFeModuleName = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 4, 1, 7), FcNameId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFeModuleName.setStatus('current')
fcFxPortTable = MibTable((1, 3, 6, 1, 2, 1, 75, 1, 1, 5), )
if mibBuilder.loadTexts: fcFxPortTable.setStatus('current')
fcFxPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1), ).setIndexNames((0, "FIBRE-CHANNEL-FE-MIB", "fcFeModuleIndex"), (0, "FIBRE-CHANNEL-FE-MIB", "fcFxPortIndex"))
if mibBuilder.loadTexts: fcFxPortEntry.setStatus('current')
fcFxPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 1), FcFeFxPortIndex())
if mibBuilder.loadTexts: fcFxPortIndex.setStatus('current')
fcFxPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 2), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortName.setStatus('current')
fcFxPortFcphVersionHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 3), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortFcphVersionHigh.setStatus('current')
fcFxPortFcphVersionLow = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 4), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortFcphVersionLow.setStatus('current')
fcFxPortBbCredit = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 5), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortBbCredit.setStatus('current')
fcFxPortRxBufSize = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 6), FcRxDataFieldSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortRxBufSize.setStatus('current')
fcFxPortRatov = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 7), MilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortRatov.setStatus('current')
fcFxPortEdtov = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 8), MilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortEdtov.setStatus('current')
fcFxPortCosSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 9), FcCosCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCosSupported.setStatus('current')
fcFxPortIntermixSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortIntermixSupported.setStatus('current')
fcFxPortStackedConnMode = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 11), FcStackedConnMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortStackedConnMode.setStatus('current')
fcFxPortClass2SeqDeliv = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortClass2SeqDeliv.setStatus('current')
fcFxPortClass3SeqDeliv = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortClass3SeqDeliv.setStatus('current')
fcFxPortHoldTime = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 1, 5, 1, 14), MicroSeconds()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortHoldTime.setStatus('current')
fcFxPortStatusTable = MibTable((1, 3, 6, 1, 2, 1, 75, 1, 2, 1), )
if mibBuilder.loadTexts: fcFxPortStatusTable.setStatus('current')
fcFxPortStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 75, 1, 2, 1, 1), )
fcFxPortEntry.registerAugmentions(("FIBRE-CHANNEL-FE-MIB", "fcFxPortStatusEntry"))
fcFxPortStatusEntry.setIndexNames(*fcFxPortEntry.getIndexNames())
if mibBuilder.loadTexts: fcFxPortStatusEntry.setStatus('current')
fcFxPortID = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 1, 1, 1), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortID.setStatus('current')
fcFxPortBbCreditAvailable = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 1, 1, 2), Gauge32()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortBbCreditAvailable.setStatus('current')
fcFxPortOperMode = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("fPort", 2), ("flPort", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortOperMode.setStatus('current')
fcFxPortAdminMode = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("fPort", 2), ("flPort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFxPortAdminMode.setStatus('current')
fcFxPortPhysTable = MibTable((1, 3, 6, 1, 2, 1, 75, 1, 2, 2), )
if mibBuilder.loadTexts: fcFxPortPhysTable.setStatus('current')
fcFxPortPhysEntry = MibTableRow((1, 3, 6, 1, 2, 1, 75, 1, 2, 2, 1), )
fcFxPortEntry.registerAugmentions(("FIBRE-CHANNEL-FE-MIB", "fcFxPortPhysEntry"))
fcFxPortPhysEntry.setIndexNames(*fcFxPortEntry.getIndexNames())
if mibBuilder.loadTexts: fcFxPortPhysEntry.setStatus('current')
fcFxPortPhysAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFxPortPhysAdminStatus.setStatus('current')
fcFxPortPhysOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("linkFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortPhysOperStatus.setStatus('current')
fcFxPortPhysLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortPhysLastChange.setStatus('current')
fcFxPortPhysRttov = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 2, 1, 4), MilliSeconds()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFxPortPhysRttov.setStatus('current')
fcFxLoginTable = MibTable((1, 3, 6, 1, 2, 1, 75, 1, 2, 3), )
if mibBuilder.loadTexts: fcFxLoginTable.setStatus('current')
fcFxLoginEntry = MibTableRow((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1), ).setIndexNames((0, "FIBRE-CHANNEL-FE-MIB", "fcFeModuleIndex"), (0, "FIBRE-CHANNEL-FE-MIB", "fcFxPortIndex"), (0, "FIBRE-CHANNEL-FE-MIB", "fcFxPortNxLoginIndex"))
if mibBuilder.loadTexts: fcFxLoginEntry.setStatus('current')
fcFxPortNxLoginIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 1), FcFeNxPortIndex())
if mibBuilder.loadTexts: fcFxPortNxLoginIndex.setStatus('current')
fcFxPortFcphVersionAgreed = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 2), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortFcphVersionAgreed.setStatus('current')
fcFxPortNxPortBbCredit = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 3), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortNxPortBbCredit.setStatus('current')
fcFxPortNxPortRxDataFieldSize = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 4), FcRxDataFieldSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortNxPortRxDataFieldSize.setStatus('current')
fcFxPortCosSuppAgreed = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 5), FcCosCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCosSuppAgreed.setStatus('current')
fcFxPortIntermixSuppAgreed = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortIntermixSuppAgreed.setStatus('current')
fcFxPortStackedConnModeAgreed = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 7), FcStackedConnMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortStackedConnModeAgreed.setStatus('current')
fcFxPortClass2SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortClass2SeqDelivAgreed.setStatus('current')
fcFxPortClass3SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortClass3SeqDelivAgreed.setStatus('current')
fcFxPortNxPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 10), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortNxPortName.setStatus('current')
fcFxPortConnectedNxPort = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 11), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortConnectedNxPort.setStatus('current')
fcFxPortBbCreditModel = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 2, 3, 1, 12), FcBbCreditModel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFxPortBbCreditModel.setStatus('current')
fcFxPortErrorTable = MibTable((1, 3, 6, 1, 2, 1, 75, 1, 3, 1), )
if mibBuilder.loadTexts: fcFxPortErrorTable.setStatus('current')
fcFxPortErrorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1), )
fcFxPortEntry.registerAugmentions(("FIBRE-CHANNEL-FE-MIB", "fcFxPortErrorEntry"))
fcFxPortErrorEntry.setIndexNames(*fcFxPortEntry.getIndexNames())
if mibBuilder.loadTexts: fcFxPortErrorEntry.setStatus('current')
fcFxPortLinkFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortLinkFailures.setStatus('current')
fcFxPortSyncLosses = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortSyncLosses.setStatus('current')
fcFxPortSigLosses = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortSigLosses.setStatus('current')
fcFxPortPrimSeqProtoErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortPrimSeqProtoErrors.setStatus('current')
fcFxPortInvalidTxWords = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortInvalidTxWords.setStatus('current')
fcFxPortInvalidCrcs = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortInvalidCrcs.setStatus('current')
fcFxPortDelimiterErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortDelimiterErrors.setStatus('current')
fcFxPortAddressIdErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortAddressIdErrors.setStatus('current')
fcFxPortLinkResetIns = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortLinkResetIns.setStatus('current')
fcFxPortLinkResetOuts = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortLinkResetOuts.setStatus('current')
fcFxPortOlsIns = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortOlsIns.setStatus('current')
fcFxPortOlsOuts = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortOlsOuts.setStatus('current')
fcFxPortC1AccountingTable = MibTable((1, 3, 6, 1, 2, 1, 75, 1, 4, 1), )
if mibBuilder.loadTexts: fcFxPortC1AccountingTable.setStatus('current')
fcFxPortC1AccountingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1), )
fcFxPortEntry.registerAugmentions(("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1AccountingEntry"))
fcFxPortC1AccountingEntry.setIndexNames(*fcFxPortEntry.getIndexNames())
if mibBuilder.loadTexts: fcFxPortC1AccountingEntry.setStatus('current')
fcFxPortC1InFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1InFrames.setStatus('current')
fcFxPortC1OutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1OutFrames.setStatus('current')
fcFxPortC1InOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1InOctets.setStatus('current')
fcFxPortC1OutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1OutOctets.setStatus('current')
fcFxPortC1Discards = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1Discards.setStatus('current')
fcFxPortC1FbsyFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1FbsyFrames.setStatus('current')
fcFxPortC1FrjtFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1FrjtFrames.setStatus('current')
fcFxPortC1InConnections = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1InConnections.setStatus('current')
fcFxPortC1OutConnections = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1OutConnections.setStatus('current')
fcFxPortC1ConnTime = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 1, 1, 10), MilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1ConnTime.setStatus('current')
fcFxPortC2AccountingTable = MibTable((1, 3, 6, 1, 2, 1, 75, 1, 4, 2), )
if mibBuilder.loadTexts: fcFxPortC2AccountingTable.setStatus('current')
fcFxPortC2AccountingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 75, 1, 4, 2, 1), )
fcFxPortEntry.registerAugmentions(("FIBRE-CHANNEL-FE-MIB", "fcFxPortC2AccountingEntry"))
fcFxPortC2AccountingEntry.setIndexNames(*fcFxPortEntry.getIndexNames())
if mibBuilder.loadTexts: fcFxPortC2AccountingEntry.setStatus('current')
fcFxPortC2InFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2InFrames.setStatus('current')
fcFxPortC2OutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2OutFrames.setStatus('current')
fcFxPortC2InOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2InOctets.setStatus('current')
fcFxPortC2OutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2OutOctets.setStatus('current')
fcFxPortC2Discards = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2Discards.setStatus('current')
fcFxPortC2FbsyFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2FbsyFrames.setStatus('current')
fcFxPortC2FrjtFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2FrjtFrames.setStatus('current')
fcFxPortC3AccountingTable = MibTable((1, 3, 6, 1, 2, 1, 75, 1, 4, 3), )
if mibBuilder.loadTexts: fcFxPortC3AccountingTable.setStatus('current')
fcFxPortC3AccountingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 75, 1, 4, 3, 1), )
fcFxPortEntry.registerAugmentions(("FIBRE-CHANNEL-FE-MIB", "fcFxPortC3AccountingEntry"))
fcFxPortC3AccountingEntry.setIndexNames(*fcFxPortEntry.getIndexNames())
if mibBuilder.loadTexts: fcFxPortC3AccountingEntry.setStatus('current')
fcFxPortC3InFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3InFrames.setStatus('current')
fcFxPortC3OutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3OutFrames.setStatus('current')
fcFxPortC3InOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3InOctets.setStatus('current')
fcFxPortC3OutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3OutOctets.setStatus('current')
fcFxPortC3Discards = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3Discards.setStatus('current')
fcFxPortCapTable = MibTable((1, 3, 6, 1, 2, 1, 75, 1, 5, 1), )
if mibBuilder.loadTexts: fcFxPortCapTable.setStatus('current')
fcFxPortCapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1), )
fcFxPortEntry.registerAugmentions(("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapEntry"))
fcFxPortCapEntry.setIndexNames(*fcFxPortEntry.getIndexNames())
if mibBuilder.loadTexts: fcFxPortCapEntry.setStatus('current')
fcFxPortCapFcphVersionHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 1), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapFcphVersionHigh.setStatus('current')
fcFxPortCapFcphVersionLow = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 2), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapFcphVersionLow.setStatus('current')
fcFxPortCapBbCreditMax = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 3), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapBbCreditMax.setStatus('current')
fcFxPortCapBbCreditMin = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 4), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapBbCreditMin.setStatus('current')
fcFxPortCapRxDataFieldSizeMax = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 5), FcRxDataFieldSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapRxDataFieldSizeMax.setStatus('current')
fcFxPortCapRxDataFieldSizeMin = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 6), FcRxDataFieldSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapRxDataFieldSizeMin.setStatus('current')
fcFxPortCapCos = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 7), FcCosCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapCos.setStatus('current')
fcFxPortCapIntermix = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapIntermix.setStatus('current')
fcFxPortCapStackedConnMode = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 9), FcStackedConnMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapStackedConnMode.setStatus('current')
fcFxPortCapClass2SeqDeliv = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapClass2SeqDeliv.setStatus('current')
fcFxPortCapClass3SeqDeliv = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapClass3SeqDeliv.setStatus('current')
fcFxPortCapHoldTimeMax = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 12), MicroSeconds()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapHoldTimeMax.setStatus('current')
fcFxPortCapHoldTimeMin = MibTableColumn((1, 3, 6, 1, 2, 1, 75, 1, 5, 1, 1, 13), MicroSeconds()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapHoldTimeMin.setStatus('current')
fcFeMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 75, 2))
fcFeMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 75, 2, 1))
fcFeMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 75, 2, 2))
fcFeMIBMinimumCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 75, 2, 1, 1)).setObjects(("FIBRE-CHANNEL-FE-MIB", "fcFeConfigGroup"), ("FIBRE-CHANNEL-FE-MIB", "fcFeStatusGroup"), ("FIBRE-CHANNEL-FE-MIB", "fcFeErrorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeMIBMinimumCompliance = fcFeMIBMinimumCompliance.setStatus('current')
fcFeMIBFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 75, 2, 1, 2)).setObjects(("FIBRE-CHANNEL-FE-MIB", "fcFeConfigGroup"), ("FIBRE-CHANNEL-FE-MIB", "fcFeStatusGroup"), ("FIBRE-CHANNEL-FE-MIB", "fcFeErrorGroup"), ("FIBRE-CHANNEL-FE-MIB", "fcFeCapabilitiesGroup"), ("FIBRE-CHANNEL-FE-MIB", "fcFeClass1AccountingGroup"), ("FIBRE-CHANNEL-FE-MIB", "fcFeClass2AccountingGroup"), ("FIBRE-CHANNEL-FE-MIB", "fcFeClass3AccountingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeMIBFullCompliance = fcFeMIBFullCompliance.setStatus('current')
fcFeConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 75, 2, 2, 1)).setObjects(("FIBRE-CHANNEL-FE-MIB", "fcFeFabricName"), ("FIBRE-CHANNEL-FE-MIB", "fcFeElementName"), ("FIBRE-CHANNEL-FE-MIB", "fcFeModuleCapacity"), ("FIBRE-CHANNEL-FE-MIB", "fcFeModuleDescr"), ("FIBRE-CHANNEL-FE-MIB", "fcFeModuleObjectID"), ("FIBRE-CHANNEL-FE-MIB", "fcFeModuleOperStatus"), ("FIBRE-CHANNEL-FE-MIB", "fcFeModuleLastChange"), ("FIBRE-CHANNEL-FE-MIB", "fcFeModuleFxPortCapacity"), ("FIBRE-CHANNEL-FE-MIB", "fcFeModuleName"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortName"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortFcphVersionHigh"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortFcphVersionLow"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortBbCredit"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortRxBufSize"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortRatov"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortEdtov"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCosSupported"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortIntermixSupported"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortStackedConnMode"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortClass2SeqDeliv"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortClass3SeqDeliv"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeConfigGroup = fcFeConfigGroup.setStatus('current')
fcFeStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 75, 2, 2, 2)).setObjects(("FIBRE-CHANNEL-FE-MIB", "fcFxPortID"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortBbCreditAvailable"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortOperMode"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortAdminMode"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortPhysAdminStatus"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortPhysOperStatus"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortPhysLastChange"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortPhysRttov"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortFcphVersionAgreed"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortNxPortBbCredit"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortNxPortRxDataFieldSize"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCosSuppAgreed"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortIntermixSuppAgreed"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortStackedConnModeAgreed"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortClass2SeqDelivAgreed"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortClass3SeqDelivAgreed"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortNxPortName"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortConnectedNxPort"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortBbCreditModel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeStatusGroup = fcFeStatusGroup.setStatus('current')
fcFeErrorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 75, 2, 2, 3)).setObjects(("FIBRE-CHANNEL-FE-MIB", "fcFxPortLinkFailures"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortSyncLosses"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortSigLosses"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortPrimSeqProtoErrors"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortInvalidTxWords"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortInvalidCrcs"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortDelimiterErrors"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortAddressIdErrors"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortLinkResetIns"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortLinkResetOuts"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortOlsIns"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortOlsOuts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeErrorGroup = fcFeErrorGroup.setStatus('current')
fcFeClass1AccountingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 75, 2, 2, 4)).setObjects(("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1InFrames"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1OutFrames"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1InOctets"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1OutOctets"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1Discards"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1FbsyFrames"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1FrjtFrames"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1InConnections"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1OutConnections"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC1ConnTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeClass1AccountingGroup = fcFeClass1AccountingGroup.setStatus('current')
fcFeClass2AccountingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 75, 2, 2, 5)).setObjects(("FIBRE-CHANNEL-FE-MIB", "fcFxPortC2InFrames"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC2OutFrames"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC2InOctets"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC2OutOctets"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC2Discards"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC2FbsyFrames"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC2FrjtFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeClass2AccountingGroup = fcFeClass2AccountingGroup.setStatus('current')
fcFeClass3AccountingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 75, 2, 2, 6)).setObjects(("FIBRE-CHANNEL-FE-MIB", "fcFxPortC3InFrames"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC3OutFrames"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC3InOctets"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC3OutOctets"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortC3Discards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeClass3AccountingGroup = fcFeClass3AccountingGroup.setStatus('current')
fcFeCapabilitiesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 75, 2, 2, 7)).setObjects(("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapFcphVersionHigh"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapFcphVersionLow"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapBbCreditMax"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapBbCreditMin"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapRxDataFieldSizeMax"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapRxDataFieldSizeMin"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapCos"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapIntermix"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapStackedConnMode"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapClass2SeqDeliv"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapClass3SeqDeliv"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapHoldTimeMax"), ("FIBRE-CHANNEL-FE-MIB", "fcFxPortCapHoldTimeMin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeCapabilitiesGroup = fcFeCapabilitiesGroup.setStatus('current')
mibBuilder.exportSymbols("FIBRE-CHANNEL-FE-MIB", fcFxPortFcphVersionAgreed=fcFxPortFcphVersionAgreed, FcNameId=FcNameId, fcFxPortDelimiterErrors=fcFxPortDelimiterErrors, fcFxPortClass3SeqDeliv=fcFxPortClass3SeqDeliv, fcFeStatusGroup=fcFeStatusGroup, FcBbCreditModel=FcBbCreditModel, fcFxPortIntermixSupported=fcFxPortIntermixSupported, fcFxPortCapBbCreditMin=fcFxPortCapBbCreditMin, fcFxPortPhysOperStatus=fcFxPortPhysOperStatus, fcFeConfigGroup=fcFeConfigGroup, fcFxPortC1OutOctets=fcFxPortC1OutOctets, fcFeMIBObjects=fcFeMIBObjects, FcRxDataFieldSize=FcRxDataFieldSize, fcFxPortStackedConnMode=fcFxPortStackedConnMode, fcFxPortOlsOuts=fcFxPortOlsOuts, fcFeMIBMinimumCompliance=fcFeMIBMinimumCompliance, fcFxPortStatusTable=fcFxPortStatusTable, fcFxPortPhysAdminStatus=fcFxPortPhysAdminStatus, fcFxPortC1AccountingEntry=fcFxPortC1AccountingEntry, fcFxPortStackedConnModeAgreed=fcFxPortStackedConnModeAgreed, fcFxPortCapFcphVersionLow=fcFxPortCapFcphVersionLow, fcFxPortRxBufSize=fcFxPortRxBufSize, fcFxPortC1FbsyFrames=fcFxPortC1FbsyFrames, fcFxPortC1Discards=fcFxPortC1Discards, fcFxPortID=fcFxPortID, fcFxPortFcphVersionHigh=fcFxPortFcphVersionHigh, fcFxPortC1InOctets=fcFxPortC1InOctets, fcFxPortHoldTime=fcFxPortHoldTime, fcFxPortCapTable=fcFxPortCapTable, fcFxPortC3InFrames=fcFxPortC3InFrames, fcFxPortErrorEntry=fcFxPortErrorEntry, fcFxPortIntermixSuppAgreed=fcFxPortIntermixSuppAgreed, fcFeModuleTable=fcFeModuleTable, fcFeModuleFxPortCapacity=fcFeModuleFxPortCapacity, fcFeClass2AccountingGroup=fcFeClass2AccountingGroup, fcFeClass3AccountingGroup=fcFeClass3AccountingGroup, fcFxPortC3AccountingTable=fcFxPortC3AccountingTable, fcFxPortCapHoldTimeMin=fcFxPortCapHoldTimeMin, fcFxPortC2InFrames=fcFxPortC2InFrames, fcFxPortCosSupported=fcFxPortCosSupported, fcFxPortC2AccountingTable=fcFxPortC2AccountingTable, fcFxPortPhysLastChange=fcFxPortPhysLastChange, MicroSeconds=MicroSeconds, fcFeModuleDescr=fcFeModuleDescr, fcFeMIBCompliances=fcFeMIBCompliances, fcFxPortInvalidCrcs=fcFxPortInvalidCrcs, fcFeClass1AccountingGroup=fcFeClass1AccountingGroup, fcFxPortAdminMode=fcFxPortAdminMode, FcFeNxPortIndex=FcFeNxPortIndex, fcFxPortStatusEntry=fcFxPortStatusEntry, fcFxPortCapClass2SeqDeliv=fcFxPortCapClass2SeqDeliv, fcFxPortPhysRttov=fcFxPortPhysRttov, fcFxPortOperMode=fcFxPortOperMode, fcFxPortC3Discards=fcFxPortC3Discards, fcFxPortNxLoginIndex=fcFxPortNxLoginIndex, fcFxPortCapCos=fcFxPortCapCos, fcFxPortC1ConnTime=fcFxPortC1ConnTime, fcFeModuleOperStatus=fcFeModuleOperStatus, fcFxPortAddressIdErrors=fcFxPortAddressIdErrors, fcFeModuleName=fcFeModuleName, fcFxPortSyncLosses=fcFxPortSyncLosses, fcFxPortBbCredit=fcFxPortBbCredit, fcFxPortPrimSeqProtoErrors=fcFxPortPrimSeqProtoErrors, fcFxPortNxPortBbCredit=fcFxPortNxPortBbCredit, fcFxPortC2InOctets=fcFxPortC2InOctets, fcFxPortSigLosses=fcFxPortSigLosses, fcFeModuleObjectID=fcFeModuleObjectID, fcFxPortEntry=fcFxPortEntry, fcFxPortCapIntermix=fcFxPortCapIntermix, fcFxPortErrorTable=fcFxPortErrorTable, fcFeModuleIndex=fcFeModuleIndex, MilliSeconds=MilliSeconds, fcFxPortCapHoldTimeMax=fcFxPortCapHoldTimeMax, fcFeMIBGroups=fcFeMIBGroups, fcFxPortC2FbsyFrames=fcFxPortC2FbsyFrames, fcFxPortC2AccountingEntry=fcFxPortC2AccountingEntry, fcFeElementName=fcFeElementName, fcFxPortLinkResetOuts=fcFxPortLinkResetOuts, fcFeMIBFullCompliance=fcFeMIBFullCompliance, fcFxPortName=fcFxPortName, fcFxPortNxPortRxDataFieldSize=fcFxPortNxPortRxDataFieldSize, fcFxPortC1InConnections=fcFxPortC1InConnections, fcFxPortC2OutFrames=fcFxPortC2OutFrames, fcFxPortClass3SeqDelivAgreed=fcFxPortClass3SeqDelivAgreed, fcFxPortRatov=fcFxPortRatov, fcFeStatus=fcFeStatus, fcFeConfig=fcFeConfig, fcFeModuleCapacity=fcFeModuleCapacity, fcFxPortTable=fcFxPortTable, fcFxPortC1OutFrames=fcFxPortC1OutFrames, fcFxPortC1InFrames=fcFxPortC1InFrames, fcFeCapabilitiesGroup=fcFeCapabilitiesGroup, fcFxPortC3InOctets=fcFxPortC3InOctets, fcFxPortCapRxDataFieldSizeMax=fcFxPortCapRxDataFieldSizeMax, fcFxPortC2OutOctets=fcFxPortC2OutOctets, fcFeError=fcFeError, fcFeCapabilities=fcFeCapabilities, fcFeModuleEntry=fcFeModuleEntry, FcAddressId=FcAddressId, fcFeMIBConformance=fcFeMIBConformance, fcFeErrorGroup=fcFeErrorGroup, fcFxPortNxPortName=fcFxPortNxPortName, FcCosCap=FcCosCap, fcFxPortPhysTable=fcFxPortPhysTable, fcFxPortFcphVersionLow=fcFxPortFcphVersionLow, PYSNMP_MODULE_ID=fcFeMIB, fcFxPortC2FrjtFrames=fcFxPortC2FrjtFrames, FcFeFxPortCapacity=FcFeFxPortCapacity, fcFxPortPhysEntry=fcFxPortPhysEntry, FcFeFxPortIndex=FcFeFxPortIndex, fcFxPortConnectedNxPort=fcFxPortConnectedNxPort, fcFeModuleLastChange=fcFeModuleLastChange, fcFxPortC1OutConnections=fcFxPortC1OutConnections, fcFxPortCapStackedConnMode=fcFxPortCapStackedConnMode, fcFxPortLinkFailures=fcFxPortLinkFailures, fcFxPortBbCreditModel=fcFxPortBbCreditModel, FcBbCredit=FcBbCredit, fcFxPortClass2SeqDeliv=fcFxPortClass2SeqDeliv, fcFxPortCapBbCreditMax=fcFxPortCapBbCreditMax, fcFxPortC3OutOctets=fcFxPortC3OutOctets, fcFxPortC1FrjtFrames=fcFxPortC1FrjtFrames, fcFxPortC1AccountingTable=fcFxPortC1AccountingTable, fcFxPortClass2SeqDelivAgreed=fcFxPortClass2SeqDelivAgreed, fcFxPortC3OutFrames=fcFxPortC3OutFrames, fcFxPortCapRxDataFieldSizeMin=fcFxPortCapRxDataFieldSizeMin, fcFeAccounting=fcFeAccounting, fcFxPortEdtov=fcFxPortEdtov, FcFeModuleIndex=FcFeModuleIndex, fcFxPortC3AccountingEntry=fcFxPortC3AccountingEntry, fcFxPortCapFcphVersionHigh=fcFxPortCapFcphVersionHigh, fcFxPortC2Discards=fcFxPortC2Discards, fcFxPortIndex=fcFxPortIndex, fcFeFabricName=fcFeFabricName, FcphVersion=FcphVersion, fcFxPortInvalidTxWords=fcFxPortInvalidTxWords, fcFxPortOlsIns=fcFxPortOlsIns, fcFxPortCosSuppAgreed=fcFxPortCosSuppAgreed, fcFxPortCapClass3SeqDeliv=fcFxPortCapClass3SeqDeliv, FcFeModuleCapacity=FcFeModuleCapacity, FcStackedConnMode=FcStackedConnMode, fcFeMIB=fcFeMIB, fcFxPortLinkResetIns=fcFxPortLinkResetIns, fcFxLoginEntry=fcFxLoginEntry, fcFxPortCapEntry=fcFxPortCapEntry, fcFxPortBbCreditAvailable=fcFxPortBbCreditAvailable, fcFxLoginTable=fcFxLoginTable)
