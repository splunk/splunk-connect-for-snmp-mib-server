#
# PySNMP MIB module RIVERSTONE-MPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RIVERSTONE-MPLS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:49:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
mplsXCOperStatus, mplsXCEntry = mibBuilder.importSymbols("MPLS-LSR-MIB", "mplsXCOperStatus", "mplsXCEntry")
riverstoneMibs, = mibBuilder.importSymbols("RIVERSTONE-SMI-MIB", "riverstoneMibs")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Counter32, ModuleIdentity, Integer32, Counter64, iso, Gauge32, ObjectIdentity, NotificationType, TimeTicks, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Counter32", "ModuleIdentity", "Integer32", "Counter64", "iso", "Gauge32", "ObjectIdentity", "NotificationType", "TimeTicks", "Unsigned32", "Bits")
RowPointer, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "TruthValue", "DisplayString", "TextualConvention")
rsMPLSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 39))
if mibBuilder.loadTexts: rsMPLSMIB.setLastUpdated('200205240000Z')
if mibBuilder.loadTexts: rsMPLSMIB.setOrganization('Riverstone Networks, Inc.')
rsMPLSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 39, 1))
rsMPLSNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 39, 2))
rsMPLSNotificationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 39, 2, 1))
rsMPLSNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 39, 2, 2))
rsMPLSNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 39, 2, 2, 0))
rsMPLSXCExtTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 39, 1, 1), )
if mibBuilder.loadTexts: rsMPLSXCExtTable.setStatus('current')
rsMPLSXCExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 39, 1, 1, 1), )
mplsXCEntry.registerAugmentions(("RIVERSTONE-MPLS-MIB", "rsMPLSXCExtEntry"))
rsMPLSXCExtEntry.setIndexNames(*mplsXCEntry.getIndexNames())
if mibBuilder.loadTexts: rsMPLSXCExtEntry.setStatus('current')
rsMPLSXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 39, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("nonIngress", 3), ("primaryNoSecondary", 4), ("primary", 5), ("secondary", 6), ("detour", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMPLSXCType.setStatus('current')
rsMPLSXCExtendedOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 39, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7), ("rerouted", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMPLSXCExtendedOperStatus.setStatus('current')
rsMPLSXCDetourXC = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 39, 1, 1, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMPLSXCDetourXC.setStatus('current')
rsMPLSXCSecondaryXC = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 39, 1, 1, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMPLSXCSecondaryXC.setStatus('current')
rsMPLSEnableNotifications = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 39, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMPLSEnableNotifications.setStatus('current')
rsMPLSPrimaryPathFailOver = NotificationType((1, 3, 6, 1, 4, 1, 5567, 2, 39, 2, 2, 0, 1)).setObjects(("RIVERSTONE-MPLS-MIB", "rsMPLSXCExtendedOperStatus"), ("RIVERSTONE-MPLS-MIB", "rsMPLSXCExtendedOperStatus"))
if mibBuilder.loadTexts: rsMPLSPrimaryPathFailOver.setStatus('current')
rsMPLSPrimaryPathTakeOver = NotificationType((1, 3, 6, 1, 4, 1, 5567, 2, 39, 2, 2, 0, 2)).setObjects(("RIVERSTONE-MPLS-MIB", "rsMPLSXCExtendedOperStatus"))
if mibBuilder.loadTexts: rsMPLSPrimaryPathTakeOver.setStatus('current')
rsMPLSStartedDetourUse = NotificationType((1, 3, 6, 1, 4, 1, 5567, 2, 39, 2, 2, 0, 3)).setObjects(("RIVERSTONE-MPLS-MIB", "rsMPLSXCExtendedOperStatus"), ("RIVERSTONE-MPLS-MIB", "rsMPLSXCExtendedOperStatus"))
if mibBuilder.loadTexts: rsMPLSStartedDetourUse.setStatus('current')
rsMPLSEndedDetourUse = NotificationType((1, 3, 6, 1, 4, 1, 5567, 2, 39, 2, 2, 0, 4)).setObjects(("RIVERSTONE-MPLS-MIB", "rsMPLSXCExtendedOperStatus"))
if mibBuilder.loadTexts: rsMPLSEndedDetourUse.setStatus('current')
rsMPLSLSPPreempted = NotificationType((1, 3, 6, 1, 4, 1, 5567, 2, 39, 2, 2, 0, 5)).setObjects(("RIVERSTONE-MPLS-MIB", "rsMPLSXCExtendedOperStatus"), ("RIVERSTONE-MPLS-MIB", "rsMPLSXCExtendedOperStatus"))
if mibBuilder.loadTexts: rsMPLSLSPPreempted.setStatus('current')
rsMPLSConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 39, 3))
rsMPLSCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 39, 3, 1))
rsMPLSGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 39, 3, 2))
rsMPLSCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5567, 2, 39, 3, 1, 1)).setObjects(("RIVERSTONE-MPLS-MIB", "rsMPLSLSRExtensionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsMPLSCompliance = rsMPLSCompliance.setStatus('current')
rsMPLSLSRExtensionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 39, 3, 2, 1)).setObjects(("RIVERSTONE-MPLS-MIB", "rsMPLSXCExtendedOperStatus"), ("RIVERSTONE-MPLS-MIB", "rsMPLSXCDetourXC"), ("RIVERSTONE-MPLS-MIB", "rsMPLSXCSecondaryXC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsMPLSLSRExtensionGroup = rsMPLSLSRExtensionGroup.setStatus('current')
rsMPLSNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5567, 2, 39, 3, 2, 2)).setObjects(("RIVERSTONE-MPLS-MIB", "rsMPLSPrimaryPathFailOver"), ("RIVERSTONE-MPLS-MIB", "rsMPLSPrimaryPathTakeOver"), ("RIVERSTONE-MPLS-MIB", "rsMPLSStartedDetourUse"), ("RIVERSTONE-MPLS-MIB", "rsMPLSEndedDetourUse"), ("RIVERSTONE-MPLS-MIB", "rsMPLSLSPPreempted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsMPLSNotificationGroup = rsMPLSNotificationGroup.setStatus('current')
rsMPLSNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 39, 3, 2, 3)).setObjects(("RIVERSTONE-MPLS-MIB", "rsMPLSEnableNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsMPLSNotificationControlGroup = rsMPLSNotificationControlGroup.setStatus('current')
mibBuilder.exportSymbols("RIVERSTONE-MPLS-MIB", rsMPLSPrimaryPathTakeOver=rsMPLSPrimaryPathTakeOver, rsMPLSNotificationGroup=rsMPLSNotificationGroup, rsMPLSXCType=rsMPLSXCType, rsMPLSXCDetourXC=rsMPLSXCDetourXC, rsMPLSNotifications=rsMPLSNotifications, rsMPLSGroups=rsMPLSGroups, rsMPLSNotifyPrefix=rsMPLSNotifyPrefix, PYSNMP_MODULE_ID=rsMPLSMIB, rsMPLSNotificationControl=rsMPLSNotificationControl, rsMPLSXCSecondaryXC=rsMPLSXCSecondaryXC, rsMPLSMIB=rsMPLSMIB, rsMPLSCompliance=rsMPLSCompliance, rsMPLSEndedDetourUse=rsMPLSEndedDetourUse, rsMPLSPrimaryPathFailOver=rsMPLSPrimaryPathFailOver, rsMPLSLSPPreempted=rsMPLSLSPPreempted, rsMPLSXCExtendedOperStatus=rsMPLSXCExtendedOperStatus, rsMPLSNotification=rsMPLSNotification, rsMPLSLSRExtensionGroup=rsMPLSLSRExtensionGroup, rsMPLSStartedDetourUse=rsMPLSStartedDetourUse, rsMPLSConformance=rsMPLSConformance, rsMPLSEnableNotifications=rsMPLSEnableNotifications, rsMPLSXCExtEntry=rsMPLSXCExtEntry, rsMPLSObjects=rsMPLSObjects, rsMPLSCompliances=rsMPLSCompliances, rsMPLSXCExtTable=rsMPLSXCExtTable, rsMPLSNotificationControlGroup=rsMPLSNotificationControlGroup)
