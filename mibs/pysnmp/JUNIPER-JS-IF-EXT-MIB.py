#
# PySNMP MIB module JUNIPER-JS-IF-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-JS-IF-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:48:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
jnxJsIf, = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsIf")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, TimeTicks, ModuleIdentity, Counter32, IpAddress, MibIdentifier, ObjectIdentity, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "ModuleIdentity", "Counter32", "IpAddress", "MibIdentifier", "ObjectIdentity", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Gauge32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxJsIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1))
jnxJsIfMIB.setRevisions(('2007-05-09 00:00',))
if mibBuilder.loadTexts: jnxJsIfMIB.setLastUpdated('200705090000Z')
if mibBuilder.loadTexts: jnxJsIfMIB.setOrganization('Juniper Networks, Inc.')
jnxJsIfExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1))
jnxJsIfMonTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxJsIfMonTable.setStatus('current')
jnxJsIfMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxJsIfMonEntry.setStatus('current')
jnxJsIfMonInIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInIcmp.setStatus('current')
jnxJsIfMonInSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInSelf.setStatus('current')
jnxJsIfMonInVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInVpn.setStatus('current')
jnxJsIfMonInPolicyPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInPolicyPermit.setStatus('current')
jnxJsIfMonOutPolicyPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonOutPolicyPermit.setStatus('current')
jnxJsIfMonConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonConn.setStatus('current')
jnxJsIfMonInMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInMcast.setStatus('current')
jnxJsIfMonOutMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonOutMcast.setStatus('current')
jnxJsIfMonPolicyDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonPolicyDeny.setStatus('current')
jnxJsIfMonNoGateParent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoGateParent.setStatus('current')
jnxJsIfMonTcpProxyDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonTcpProxyDrop.setStatus('current')
jnxJsIfMonNoDip = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoDip.setStatus('current')
jnxJsIfMonNoNspTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoNspTunnel.setStatus('current')
jnxJsIfMonNoNatCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoNatCon.setStatus('current')
jnxJsIfMonInvalidZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInvalidZone.setStatus('current')
jnxJsIfMonIpClsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonIpClsFail.setStatus('current')
jnxJsIfMonAuthDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonAuthDrop.setStatus('current')
jnxJsIfMonMultiUserAuthDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonMultiUserAuthDrop.setStatus('current')
jnxJsIfMonLoopMultiDipDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonLoopMultiDipDrop.setStatus('current')
jnxJsIfMonAddrSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonAddrSpoof.setStatus('current')
jnxJsIfMonLpDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonLpDrop.setStatus('current')
jnxJsIfMonNullZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNullZone.setStatus('current')
jnxJsIfMonNoGate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoGate.setStatus('current')
jnxJsIfMonNoMinorSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoMinorSess.setStatus('current')
jnxJsIfMonNvecErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNvecErr.setStatus('current')
jnxJsIfMonTcpSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonTcpSeq.setStatus('current')
jnxJsIfMonIllegalPak = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonIllegalPak.setStatus('current')
jnxJsIfMonNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoRoute.setStatus('current')
jnxJsIfMonAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonAuthFail.setStatus('current')
jnxJsIfMonSaInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonSaInactive.setStatus('current')
jnxJsIfMonNoSa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoSa.setStatus('current')
jnxJsIfMonSelfPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonSelfPktDrop.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-JS-IF-EXT-MIB", jnxJsIfMonIpClsFail=jnxJsIfMonIpClsFail, jnxJsIfMonNoDip=jnxJsIfMonNoDip, jnxJsIfMonLoopMultiDipDrop=jnxJsIfMonLoopMultiDipDrop, jnxJsIfMonOutMcast=jnxJsIfMonOutMcast, jnxJsIfMonNullZone=jnxJsIfMonNullZone, jnxJsIfMonNoMinorSess=jnxJsIfMonNoMinorSess, jnxJsIfMonInIcmp=jnxJsIfMonInIcmp, jnxJsIfMonConn=jnxJsIfMonConn, jnxJsIfMonNoGate=jnxJsIfMonNoGate, jnxJsIfMonPolicyDeny=jnxJsIfMonPolicyDeny, jnxJsIfMonTable=jnxJsIfMonTable, jnxJsIfMIB=jnxJsIfMIB, jnxJsIfExtension=jnxJsIfExtension, jnxJsIfMonIllegalPak=jnxJsIfMonIllegalPak, jnxJsIfMonSaInactive=jnxJsIfMonSaInactive, jnxJsIfMonNoSa=jnxJsIfMonNoSa, jnxJsIfMonTcpProxyDrop=jnxJsIfMonTcpProxyDrop, jnxJsIfMonNoGateParent=jnxJsIfMonNoGateParent, jnxJsIfMonInSelf=jnxJsIfMonInSelf, jnxJsIfMonNoNatCon=jnxJsIfMonNoNatCon, jnxJsIfMonOutPolicyPermit=jnxJsIfMonOutPolicyPermit, jnxJsIfMonNoNspTunnel=jnxJsIfMonNoNspTunnel, jnxJsIfMonInvalidZone=jnxJsIfMonInvalidZone, jnxJsIfMonSelfPktDrop=jnxJsIfMonSelfPktDrop, jnxJsIfMonEntry=jnxJsIfMonEntry, PYSNMP_MODULE_ID=jnxJsIfMIB, jnxJsIfMonNoRoute=jnxJsIfMonNoRoute, jnxJsIfMonLpDrop=jnxJsIfMonLpDrop, jnxJsIfMonAuthDrop=jnxJsIfMonAuthDrop, jnxJsIfMonMultiUserAuthDrop=jnxJsIfMonMultiUserAuthDrop, jnxJsIfMonTcpSeq=jnxJsIfMonTcpSeq, jnxJsIfMonInPolicyPermit=jnxJsIfMonInPolicyPermit, jnxJsIfMonInMcast=jnxJsIfMonInMcast, jnxJsIfMonAuthFail=jnxJsIfMonAuthFail, jnxJsIfMonInVpn=jnxJsIfMonInVpn, jnxJsIfMonNvecErr=jnxJsIfMonNvecErr, jnxJsIfMonAddrSpoof=jnxJsIfMonAddrSpoof)
