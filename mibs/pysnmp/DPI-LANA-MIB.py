#
# PySNMP MIB module DPI-LANA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DPI-LANA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:39:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, ObjectIdentity, Unsigned32, enterprises, TimeTicks, Integer32, NotificationType, Bits, Gauge32, Counter64, ModuleIdentity, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "ObjectIdentity", "Unsigned32", "enterprises", "TimeTicks", "Integer32", "NotificationType", "Bits", "Gauge32", "Counter64", "ModuleIdentity", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dpi = MibIdentifier((1, 3, 6, 1, 4, 1, 901))
dpiProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 901, 1))
dpiLANA = MibIdentifier((1, 3, 6, 1, 4, 1, 901, 1, 2))
lanaInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 901, 1, 2, 2))
lanaMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 901, 1, 2, 3))
lanaNest = MibIdentifier((1, 3, 6, 1, 4, 1, 901, 1, 2, 4))
lanaRs232PortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("b1200", 0), ("b2400", 1), ("b4800", 2), ("b9600", 3), ("b19200", 4), ("b38400", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaRs232PortSpeed.setStatus('mandatory')
lanaRs232AsyncPortBits = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8))).clone(namedValues=NamedValues(("five", 5), ("six", 6), ("seven", 7), ("eight", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaRs232AsyncPortBits.setStatus('mandatory')
lanaRs232AsyncPortStopBits = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("one-and-half", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaRs232AsyncPortStopBits.setStatus('mandatory')
lanaRs232AsyncPortParity = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaRs232AsyncPortParity.setStatus('mandatory')
lanaSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaSubnetMask.setStatus('mandatory')
lanaDefGatewayIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaDefGatewayIpAddr.setStatus('mandatory')
lanaForwBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaForwBroadcast.setStatus('mandatory')
lanaReset = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("one", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaReset.setStatus('mandatory')
lanaFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("one", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaFactoryDefault.setStatus('mandatory')
lanaUpdateUnit = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("one", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaUpdateUnit.setStatus('mandatory')
lanaSWMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanaSWMajorVer.setStatus('mandatory')
lanaSWMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanaSWMinorVer.setStatus('mandatory')
lanaSWRevision = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanaSWRevision.setStatus('mandatory')
lanaIPAddrTableTotal = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanaIPAddrTableTotal.setStatus('mandatory')
lanaIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 2), )
if mibBuilder.loadTexts: lanaIPAddrTable.setStatus('mandatory')
lanaIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 2, 1), ).setIndexNames((0, "DPI-LANA-MIB", "lanaIPAddrIndex"))
if mibBuilder.loadTexts: lanaIPAddrEntry.setStatus('mandatory')
lanaIPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanaIPAddrIndex.setStatus('mandatory')
lanaIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaIPAddr.setStatus('mandatory')
lanaIPAddrTableClear = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaIPAddrTableClear.setStatus('mandatory')
mibBuilder.exportSymbols("DPI-LANA-MIB", dpiLANA=dpiLANA, lanaIPAddrEntry=lanaIPAddrEntry, lanaIPAddrTableTotal=lanaIPAddrTableTotal, lanaRs232AsyncPortStopBits=lanaRs232AsyncPortStopBits, lanaIPAddr=lanaIPAddr, lanaIPAddrIndex=lanaIPAddrIndex, lanaFactoryDefault=lanaFactoryDefault, dpi=dpi, lanaRs232AsyncPortParity=lanaRs232AsyncPortParity, dpiProducts=dpiProducts, lanaSubnetMask=lanaSubnetMask, lanaDefGatewayIpAddr=lanaDefGatewayIpAddr, lanaForwBroadcast=lanaForwBroadcast, lanaInterface=lanaInterface, lanaSWMinorVer=lanaSWMinorVer, lanaSWRevision=lanaSWRevision, lanaUpdateUnit=lanaUpdateUnit, lanaRs232PortSpeed=lanaRs232PortSpeed, lanaSWMajorVer=lanaSWMajorVer, lanaIPAddrTableClear=lanaIPAddrTableClear, lanaReset=lanaReset, lanaNest=lanaNest, lanaRs232AsyncPortBits=lanaRs232AsyncPortBits, lanaIPAddrTable=lanaIPAddrTable, lanaMgmt=lanaMgmt)
