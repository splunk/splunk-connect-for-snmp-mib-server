#
# PySNMP MIB module RAD-DS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAD-DS1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:35:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ifAlias, = mibBuilder.importSymbols("IF-MIB", "ifAlias")
PerfCurrentCount, PerfTotalCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfTotalCount", "PerfIntervalCount")
diverseIfWanGen, alarmSeverity, alarmState = mibBuilder.importSymbols("RAD-MIB", "diverseIfWanGen", "alarmSeverity", "alarmState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, Counter64, ObjectIdentity, Unsigned32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, TimeTicks, iso, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "Counter64", "ObjectIdentity", "Unsigned32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "iso", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ds1Interface = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4))
prtDS1Events = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0))
prtDs1PerfHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1))
dsx1XCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2), )
if mibBuilder.loadTexts: dsx1XCurrentTable.setStatus('current')
dsx1XCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1), ).setIndexNames((0, "RAD-DS1-MIB", "dsx1CurrentIndex"))
if mibBuilder.loadTexts: dsx1XCurrentEntry.setStatus('current')
dsx1CurrentLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOS.setStatus('current')
dsx1CurrentLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOF.setStatus('current')
dsx1CurrentLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOC.setStatus('current')
dsx1CurrentAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentAIS.setStatus('current')
dsx1CurrentRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentRAI.setStatus('current')
dsx1CurrentLOMF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOMF.setStatus('current')
dsx1CurrentFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentFEBE.setStatus('current')
dsx1CurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentStatus.setStatus('current')
dsx1CurrentBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentBPV.setStatus('current')
dsx1CurrentLOCRCMF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOCRCMF.setStatus('current')
dsx1CurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOFC.setStatus('current')
dsx1CurrentCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentCRCErrors.setStatus('current')
dsx1XIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3), )
if mibBuilder.loadTexts: dsx1XIntervalTable.setStatus('current')
dsx1XIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1), ).setIndexNames((0, "RAD-DS1-MIB", "dsx1IntervalIndex"), (0, "RAD-DS1-MIB", "dsx1IntervalNumber"))
if mibBuilder.loadTexts: dsx1XIntervalEntry.setStatus('current')
dsx1IntervalLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOS.setStatus('current')
dsx1IntervalLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOF.setStatus('current')
dsx1IntervalLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOC.setStatus('current')
dsx1IntervalAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalAIS.setStatus('current')
dsx1IntervalRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalRAI.setStatus('current')
dsx1IntervalLOMF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOMF.setStatus('current')
dsx1IntervalFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalFEBE.setStatus('current')
dsx1IntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalStatus.setStatus('current')
dsx1IntervalBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalBPV.setStatus('current')
dsx1IntervalLOCRCMF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOCRCMF.setStatus('current')
dsx1IntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOFC.setStatus('current')
dsx1XTotalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4), )
if mibBuilder.loadTexts: dsx1XTotalTable.setStatus('current')
dsx1XTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1), ).setIndexNames((0, "RAD-DS1-MIB", "dsx1TotalIndex"))
if mibBuilder.loadTexts: dsx1XTotalEntry.setStatus('current')
dsx1TotalLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalLOS.setStatus('current')
dsx1TotalBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalBPV.setStatus('current')
dsx1TotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalLOFC.setStatus('current')
dsx1DataStreamStatTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5), )
if mibBuilder.loadTexts: dsx1DataStreamStatTable.setStatus('current')
dsx1DataStreamStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1), ).setIndexNames((0, "RAD-DS1-MIB", "dsx1DataStreamStatIfIndex"), (0, "RAD-DS1-MIB", "dsx1DataStreamStatIndex"))
if mibBuilder.loadTexts: dsx1DataStreamStatEntry.setStatus('current')
dsx1DataStreamStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: dsx1DataStreamStatIfIndex.setStatus('current')
dsx1DataStreamStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: dsx1DataStreamStatIndex.setStatus('current')
dsx1DataStreamStatValid = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatValid.setStatus('current')
dsx1DataStreamStatInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatInFrames.setStatus('current')
dsx1DataStreamStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatInBytes.setStatus('current')
dsx1DataStreamStatInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatInDiscards.setStatus('current')
dsx1DataStreamStatInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatInErrors.setStatus('current')
dsx1DataStreamStatOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatOutFrames.setStatus('current')
dsx1DataStreamStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatOutBytes.setStatus('current')
dsx1DataStreamStatOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatOutDiscards.setStatus('current')
dsx1XConfigTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2), )
if mibBuilder.loadTexts: dsx1XConfigTable.setStatus('current')
dsx1XConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1), ).setIndexNames((0, "RAD-DS1-MIB", "dsx1LineIndex"))
if mibBuilder.loadTexts: dsx1XConfigEntry.setStatus('current')
dsx1IdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1IdleCode.setStatus('current')
dsx1LineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csu", 1), ("dsu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineMode.setStatus('current')
dsx1dBTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("neg75dB", 2), ("neg15dB", 3), ("neg225dB", 4), ("zerodB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1dBTxGain.setStatus('current')
dsx1RxSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("neg10dB", 2), ("neg32dB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1RxSensitivity.setStatus('current')
dsx1RestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sec1", 2), ("sec10", 3), ("immediate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1RestoreTime.setStatus('current')
dsx1TcFirstSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TcFirstSignal.setStatus('current')
dsx1TcSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TcSignal.setStatus('current')
dsx1TcPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TcPattern.setStatus('current')
dsx1Scramble = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("notActive", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1Scramble.setStatus('current')
dsx1LineAdaptiveTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineAdaptiveTimingMode.setStatus('current')
dsx1TxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3), ("adaptive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TxClockSource.setStatus('current')
dsx1AisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1AisEnable.setStatus('current')
dsx1TsEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TsEchoCancel.setStatus('current')
dsx1EchoCancelerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notExist", 2), ("exist", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1EchoCancelerModule.setStatus('current')
dsx1PortFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("uni", 2), ("ces", 3), ("ima", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1PortFunction.setStatus('current')
dsx1PortMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("r56", 2), ("r64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1PortMultiplier.setStatus('current')
dsx1LeasedLine = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LeasedLine.setStatus('current')
dsx1CsuLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("local", 2), ("transparent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1CsuLoop.setStatus('current')
dsx1ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ClockSource.setStatus('current')
dsx1OosSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("space", 2), ("mark", 3), ("spaceMark", 4), ("markSpace", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1OosSignal.setStatus('current')
ds1LocalMultiframeAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 1)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1LocalMultiframeAlarmTrap.setStatus('current')
ds1RemoteMultiframeAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 2)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1RemoteMultiframeAlarmTrap.setStatus('current')
ds1LinkFrameSlipTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 3)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1LinkFrameSlipTrap.setStatus('current')
ds1BpvErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 4)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1BpvErrorTrap.setStatus('current')
ds1ExcessiveBpvTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 5)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveBpvTrap.setStatus('current')
ds1Crc4ErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 6)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1Crc4ErrorTrap.setStatus('current')
ds1ExcessiveErrorRatioTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 7)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveErrorRatioTrap.setStatus('current')
ds1RemoteSyncLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 8)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1RemoteSyncLossTrap.setStatus('current')
ds1LocalSyncLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 9)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1LocalSyncLossTrap.setStatus('current')
ds1AisSyncLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 10)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1AisSyncLossTrap.setStatus('current')
ds1AisTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 11)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1AisTrap.setStatus('current')
ds1NetworkRemoteLoopTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 12)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1NetworkRemoteLoopTrap.setStatus('current')
ds1RemoteLoopTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 13)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1RemoteLoopTrap.setStatus('current')
ds1LocalLoopTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 14)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1LocalLoopTrap.setStatus('current')
ds1ExcessiveFrameSlipTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 15)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveFrameSlipTrap.setStatus('current')
ds1ExcessiveCrc4ErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 16)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveCrc4ErrorTrap.setStatus('current')
ds1ExcessiveLocalMfAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 17)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveLocalMfAlarmTrap.setStatus('current')
ds1ExcessiveRemoteMfAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 18)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveRemoteMfAlarmTrap.setStatus('current')
ds1ExcessiveRemoteSyncLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 19)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveRemoteSyncLossTrap.setStatus('current')
ds1ExcessiveLocalSyncLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 20)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveLocalSyncLossTrap.setStatus('current')
mibBuilder.exportSymbols("RAD-DS1-MIB", dsx1CurrentLOF=dsx1CurrentLOF, dsx1RestoreTime=dsx1RestoreTime, ds1ExcessiveCrc4ErrorTrap=ds1ExcessiveCrc4ErrorTrap, dsx1CurrentFEBE=dsx1CurrentFEBE, dsx1XTotalTable=dsx1XTotalTable, dsx1TcPattern=dsx1TcPattern, dsx1DataStreamStatOutDiscards=dsx1DataStreamStatOutDiscards, ds1Crc4ErrorTrap=ds1Crc4ErrorTrap, dsx1CurrentLOFC=dsx1CurrentLOFC, dsx1DataStreamStatIndex=dsx1DataStreamStatIndex, dsx1CsuLoop=dsx1CsuLoop, dsx1ClockSource=dsx1ClockSource, ds1BpvErrorTrap=ds1BpvErrorTrap, ds1ExcessiveRemoteSyncLossTrap=ds1ExcessiveRemoteSyncLossTrap, dsx1CurrentLOS=dsx1CurrentLOS, dsx1EchoCancelerModule=dsx1EchoCancelerModule, dsx1IntervalLOS=dsx1IntervalLOS, dsx1DataStreamStatOutBytes=dsx1DataStreamStatOutBytes, dsx1DataStreamStatIfIndex=dsx1DataStreamStatIfIndex, dsx1DataStreamStatValid=dsx1DataStreamStatValid, dsx1CurrentRAI=dsx1CurrentRAI, dsx1IntervalLOC=dsx1IntervalLOC, dsx1TxClockSource=dsx1TxClockSource, dsx1IntervalLOMF=dsx1IntervalLOMF, dsx1CurrentAIS=dsx1CurrentAIS, dsx1LineAdaptiveTimingMode=dsx1LineAdaptiveTimingMode, dsx1DataStreamStatOutFrames=dsx1DataStreamStatOutFrames, dsx1CurrentLOCRCMF=dsx1CurrentLOCRCMF, dsx1CurrentLOC=dsx1CurrentLOC, ds1LinkFrameSlipTrap=ds1LinkFrameSlipTrap, dsx1OosSignal=dsx1OosSignal, ds1Interface=ds1Interface, ds1RemoteSyncLossTrap=ds1RemoteSyncLossTrap, dsx1TsEchoCancel=dsx1TsEchoCancel, dsx1CurrentLOMF=dsx1CurrentLOMF, dsx1IntervalLOCRCMF=dsx1IntervalLOCRCMF, dsx1XIntervalTable=dsx1XIntervalTable, dsx1RxSensitivity=dsx1RxSensitivity, dsx1TotalLOFC=dsx1TotalLOFC, ds1ExcessiveRemoteMfAlarmTrap=ds1ExcessiveRemoteMfAlarmTrap, dsx1dBTxGain=dsx1dBTxGain, ds1LocalLoopTrap=ds1LocalLoopTrap, dsx1XConfigEntry=dsx1XConfigEntry, dsx1DataStreamStatTable=dsx1DataStreamStatTable, dsx1IntervalBPV=dsx1IntervalBPV, dsx1IntervalFEBE=dsx1IntervalFEBE, dsx1TcSignal=dsx1TcSignal, dsx1DataStreamStatInFrames=dsx1DataStreamStatInFrames, dsx1CurrentStatus=dsx1CurrentStatus, ds1NetworkRemoteLoopTrap=ds1NetworkRemoteLoopTrap, dsx1DataStreamStatInDiscards=dsx1DataStreamStatInDiscards, dsx1PortFunction=dsx1PortFunction, dsx1DataStreamStatEntry=dsx1DataStreamStatEntry, ds1ExcessiveLocalSyncLossTrap=ds1ExcessiveLocalSyncLossTrap, dsx1XTotalEntry=dsx1XTotalEntry, dsx1XIntervalEntry=dsx1XIntervalEntry, dsx1XConfigTable=dsx1XConfigTable, dsx1IntervalRAI=dsx1IntervalRAI, dsx1IntervalLOFC=dsx1IntervalLOFC, dsx1IntervalAIS=dsx1IntervalAIS, dsx1XCurrentEntry=dsx1XCurrentEntry, dsx1LineMode=dsx1LineMode, dsx1DataStreamStatInBytes=dsx1DataStreamStatInBytes, dsx1IntervalStatus=dsx1IntervalStatus, dsx1TotalLOS=dsx1TotalLOS, ds1ExcessiveFrameSlipTrap=ds1ExcessiveFrameSlipTrap, dsx1CurrentBPV=dsx1CurrentBPV, ds1AisSyncLossTrap=ds1AisSyncLossTrap, dsx1AisEnable=dsx1AisEnable, ds1LocalSyncLossTrap=ds1LocalSyncLossTrap, dsx1PortMultiplier=dsx1PortMultiplier, dsx1IntervalLOF=dsx1IntervalLOF, ds1ExcessiveLocalMfAlarmTrap=ds1ExcessiveLocalMfAlarmTrap, ds1ExcessiveBpvTrap=ds1ExcessiveBpvTrap, prtDS1Events=prtDS1Events, ds1RemoteMultiframeAlarmTrap=ds1RemoteMultiframeAlarmTrap, dsx1Scramble=dsx1Scramble, ds1ExcessiveErrorRatioTrap=ds1ExcessiveErrorRatioTrap, ds1AisTrap=ds1AisTrap, ds1LocalMultiframeAlarmTrap=ds1LocalMultiframeAlarmTrap, dsx1LeasedLine=dsx1LeasedLine, dsx1XCurrentTable=dsx1XCurrentTable, ds1RemoteLoopTrap=ds1RemoteLoopTrap, dsx1IdleCode=dsx1IdleCode, dsx1CurrentCRCErrors=dsx1CurrentCRCErrors, prtDs1PerfHistory=prtDs1PerfHistory, dsx1DataStreamStatInErrors=dsx1DataStreamStatInErrors, dsx1TcFirstSignal=dsx1TcFirstSignal, dsx1TotalBPV=dsx1TotalBPV)
