#
# PySNMP MIB module NTWS-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTWS-TRAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:16:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NtwsApTransition, NtwsCryptoType, NtwsRadioType, NtwsApWasOperational, NtwsRadioMode, NtwsAccessType, NtwsApFailDetail, NtwsApConnectSecurityType, NtwsRadioChannelWidth, NtwsApFingerprint, NtwsRadioNum, NtwsRadioConfigState, NtwsApNum, NtwsChannelChangeType, NtwsApPortOrDapNum, NtwsApSerialNum, NtwsPowerLevel, NtwsApAttachType, NtwsRadioPowerChangeType, NtwsApServiceAvailability, NtwsRadioMimoState = mibBuilder.importSymbols("NTWS-AP-TC", "NtwsApTransition", "NtwsCryptoType", "NtwsRadioType", "NtwsApWasOperational", "NtwsRadioMode", "NtwsAccessType", "NtwsApFailDetail", "NtwsApConnectSecurityType", "NtwsRadioChannelWidth", "NtwsApFingerprint", "NtwsRadioNum", "NtwsRadioConfigState", "NtwsApNum", "NtwsChannelChangeType", "NtwsApPortOrDapNum", "NtwsApSerialNum", "NtwsPowerLevel", "NtwsApAttachType", "NtwsRadioPowerChangeType", "NtwsApServiceAvailability", "NtwsRadioMimoState")
NtwsClientAccessMode, NtwsClientDot1xState, NtwsClientAuthenProtocolType, NtwsUserAccessType, NtwsClientSessionState = mibBuilder.importSymbols("NTWS-CLIENT-SESSION-TC", "NtwsClientAccessMode", "NtwsClientDot1xState", "NtwsClientAuthenProtocolType", "NtwsUserAccessType", "NtwsClientSessionState")
NtwsRFDetectClassificationReason, = mibBuilder.importSymbols("NTWS-RF-DETECT-TC", "NtwsRFDetectClassificationReason")
ntwsTraps, ntwsMibs, ntwsTemporary = mibBuilder.importSymbols("NTWS-ROOT-MIB", "ntwsTraps", "ntwsMibs", "ntwsTemporary")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, TimeTicks, Integer32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "TimeTicks", "Integer32", "IpAddress", "iso")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
ntwsTrapMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 1))
ntwsTrapMib.setRevisions(('2008-05-15 02:15', '2008-05-07 02:12', '2008-04-22 02:02', '2008-04-10 02:01', '2008-04-08 01:58', '2008-02-18 01:57', '2007-12-03 01:53', '2007-11-15 01:52', '2007-11-01 01:45', '2007-10-01 01:41', '2007-08-31 01:40', '2007-08-31 01:30', '2007-08-24 01:22', '2007-07-06 01:10', '2007-06-05 01:07', '2007-05-17 01:06', '2007-05-04 01:03', '2007-04-19 01:00', '2007-03-27 00:54', '2007-02-15 00:53', '2007-01-09 00:52', '2007-01-09 00:51', '2007-01-09 00:50', '2006-09-28 00:45', '2006-08-08 00:42', '2006-07-31 00:40', '2006-07-28 00:32', '2006-07-23 00:29', '2006-07-12 00:28', '2006-07-07 00:26', '2006-07-07 00:25', '2006-07-06 00:23', '2006-04-19 00:22', '2006-04-19 00:21', '2005-01-01 00:00',))
if mibBuilder.loadTexts: ntwsTrapMib.setLastUpdated('200805150215Z')
if mibBuilder.loadTexts: ntwsTrapMib.setOrganization('Nortel Networks')
ntwsTrapsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0))
class NtwsAssociationFailureType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("load-balance", 2), ("quiet-period", 3), ("dot1x", 4), ("no-prev-assoc", 5), ("glare", 6), ("cipher-rejected", 7), ("cipher-mismatch", 8), ("wep-not-configured", 9), ("bad-assoc-request", 10), ("out-of-memory", 11), ("tkip-cm-active", 12), ("roam-in-progress", 13))

class NtwsAuthenticationFailureType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("other", 1), ("user-glob-mismatch", 2), ("user-does-not-exist", 3), ("invalid-password", 4), ("server-timeout", 5), ("signature-failed", 6), ("local-certificate-error", 7), ("all-servers-down", 8), ("authentication-type-mismatch", 9), ("server-rejected", 10), ("fallthru-auth-misconfig", 11), ("no-lastresort-auth", 12), ("exceeded-max-attempts", 13), ("password-expired", 14))

class NtwsAuthorizationFailureType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 1), ("user-param", 2), ("location-policy", 3), ("vlan-tunnel-failure", 4), ("ssid-mismatch", 5), ("acl-mismatch", 6), ("timeofday-mismatch", 7), ("crypto-type-mismatch", 8), ("mobility-profile-mismatch", 9), ("start-date-mismatch", 10), ("end-date-mismatch", 11), ("svr-type-mismatch", 12), ("ssid-defaults", 13), ("qos-profile-mismatch", 14), ("simultaneous-logins", 15))

class NtwsDot1xFailureType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("quiet-period", 2), ("administrative-kill", 3), ("bad-rsnie", 4), ("timeout", 5), ("max-sessions-exceeded", 6), ("fourway-hs-failure", 7), ("user-glob-mismatch", 8), ("bonded-auth-failure", 9), ("reauth-disabled", 10), ("gkhs-failure", 11), ("force-unauth-configured", 12), ("cert-not-installed", 13))

class NtwsRFDetectDoSType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("probe-flood", 1), ("auth-flood", 2), ("null-data-flood", 3), ("mgmt-6-flood", 4), ("mgmt-7-flood", 5), ("mgmt-d-flood", 6), ("mgmt-e-flood", 7), ("mgmt-f-flood", 8), ("fakeap-ssid", 9), ("fakeap-bssid", 10), ("bcast-deauth", 11), ("null-probe-resp", 12), ("disassoc-spoof", 13), ("deauth-spoof", 14), ("decrypt-err", 15), ("weak-wep-iv", 16), ("wireless-bridge", 17), ("netstumbler", 18), ("wellenreiter", 19), ("adhoc-client-frame", 20), ("associate-pkt-flood", 21), ("re-associate-pkt-flood", 22), ("de-associate-pkt-flood", 23), ("bssid-spoof", 24))

class NtwsClientIpAddrChangeReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("client-connected", 1), ("other", 2), ("dhcp-to-static", 3))

class NtwsBlacklistingCause(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("bl-configured", 1), ("bl-associate-pkt-flood", 2), ("bl-re-associate-pkt-flood", 3), ("bl-de-associate-pkt-flood", 4))

class NtwsUserAttributeList(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 2048)

class NtwsSessionDisconnectType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("admin-disconnect", 2), ("dyn-auth-disconnect", 3))

class NtwsConfigSaveInitiatorType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("cli-console", 2), ("cli-remote", 3), ("https", 4), ("snmp-set", 5))

class NtwsMichaelMICFailureCause(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("detected-by-ap", 1), ("detected-by-client", 2))

class NtwsClientAuthorizationReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("new-client", 2), ("re-auth", 3), ("roam", 4))

class NtwsApMgrChangeReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("failover", 2), ("load-balancing", 3))

class NtwsClientClearedReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("normal", 2), ("backup-failure", 3))

class NtwsMobilityDomainResiliencyStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("resilient", 2), ("degraded", 3))

class NtwsClusterFailureReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("validation-error", 2))

ntwsDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsDeviceId.setStatus('current')
ntwsMobilityDomainIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsMobilityDomainIp.setStatus('current')
ntwsAPMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 3), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsAPMACAddress.setStatus('current')
ntwsClientMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientMACAddress.setStatus('current')
ntwsRFDetectXmtrMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectXmtrMacAddr.setStatus('current')
ntwsPortNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 22))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsPortNum.setStatus('current')
ntwsAPRadioNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 7), NtwsRadioNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsAPRadioNum.setStatus('current')
ntwsRadioRssi = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioRssi.setStatus('obsolete')
ntwsRadioBSSID = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioBSSID.setStatus('current')
ntwsUserName = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsUserName.setStatus('current')
ntwsClientAuthServerIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAuthServerIp.setStatus('current')
ntwsClientSessionState = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 12), NtwsClientSessionState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientSessionState.setStatus('current')
ntwsDAPNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsDAPNum.setStatus('current')
ntwsClientIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 14), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientIp.setStatus('current')
ntwsClientSessionId = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientSessionId.setStatus('current')
ntwsClientAuthenProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 16), NtwsClientAuthenProtocolType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAuthenProtocolType.setStatus('current')
ntwsClientVLANName = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientVLANName.setStatus('current')
ntwsClientSessionStartTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 18), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientSessionStartTime.setStatus('obsolete')
ntwsClientFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientFailureCause.setStatus('current')
ntwsClientRoamedFromPortNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRoamedFromPortNum.setStatus('current')
ntwsClientRoamedFromRadioNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 21), NtwsRadioNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRoamedFromRadioNum.setStatus('current')
ntwsClientRoamedFromDAPNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRoamedFromDAPNum.setStatus('current')
ntwsUserParams = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsUserParams.setStatus('current')
ntwsClientLocationPolicyIndex = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientLocationPolicyIndex.setStatus('current')
ntwsClientAssociationFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 25), NtwsAssociationFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAssociationFailureCause.setStatus('current')
ntwsClientAuthenticationFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 26), NtwsAuthenticationFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAuthenticationFailureCause.setStatus('current')
ntwsClientAuthorizationFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 27), NtwsAuthorizationFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAuthorizationFailureCause.setStatus('current')
ntwsClientFailureCauseDescription = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientFailureCauseDescription.setStatus('current')
ntwsClientRoamedFromWsIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 29), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRoamedFromWsIp.setStatus('current')
ntwsClientRoamedFromAccessType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 30), NtwsAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRoamedFromAccessType.setStatus('current')
ntwsClientAccessType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 31), NtwsAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAccessType.setStatus('current')
ntwsRadioMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 32), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioMACAddress.setStatus('current')
ntwsRadioPowerChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 33), NtwsRadioPowerChangeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioPowerChangeReason.setStatus('current')
ntwsNewChannelNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsNewChannelNum.setStatus('current')
ntwsOldChannelNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsOldChannelNum.setStatus('current')
ntwsChannelChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 36), NtwsChannelChangeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsChannelChangeReason.setStatus('current')
ntwsRFDetectListenerListInfo = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 571))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectListenerListInfo.setStatus('current')
ntwsRadioSSID = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioSSID.setStatus('current')
ntwsNewPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 39), NtwsPowerLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsNewPowerLevel.setStatus('current')
ntwsOldPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 40), NtwsPowerLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsOldPowerLevel.setStatus('current')
ntwsRadioPowerChangeDescription = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioPowerChangeDescription.setStatus('current')
ntwsCounterMeasurePerformerListInfo = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsCounterMeasurePerformerListInfo.setStatus('obsolete')
ntwsClientDot1xState = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 43), NtwsClientDot1xState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientDot1xState.setStatus('current')
ntwsClientDot1xFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 44), NtwsDot1xFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientDot1xFailureCause.setStatus('current')
ntwsAPAccessType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 45), NtwsAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsAPAccessType.setStatus('obsolete')
ntwsUserAccessType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 46), NtwsUserAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsUserAccessType.setStatus('current')
ntwsClientSessionElapsedTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 47), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientSessionElapsedTime.setStatus('obsolete')
ntwsLocalId = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsLocalId.setStatus('current')
ntwsRFDetectDoSType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 49), NtwsRFDetectDoSType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectDoSType.setStatus('current')
ntwsSourceWsIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 50), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsSourceWsIp.setStatus('current')
ntwsClientVLANid = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientVLANid.setStatus('current')
ntwsClientVLANtag = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientVLANtag.setStatus('current')
ntwsDeviceModel = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 53), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsDeviceModel.setStatus('current')
ntwsDeviceSerNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 54), NtwsApSerialNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsDeviceSerNum.setStatus('current')
ntwsRsaPubKeyFingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 55), NtwsApFingerprint()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRsaPubKeyFingerPrint.setStatus('current')
ntwsDAPconnectWarningType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-configured-fingerprint-connect", 1), ("secure-handshake-failure", 2), ("not-configured-fingerprint-required", 3), ("fingerprint-mismatch", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsDAPconnectWarningType.setStatus('current')
ntwsClientMACAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 57), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientMACAddress2.setStatus('current')
ntwsApAttachType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 58), NtwsApAttachType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApAttachType.setStatus('current')
ntwsApPortOrDapNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 59), NtwsApPortOrDapNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApPortOrDapNum.setStatus('obsolete')
ntwsApName = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 60), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApName.setStatus('current')
ntwsApTransition = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 61), NtwsApTransition()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApTransition.setStatus('current')
ntwsApFailDetail = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 62), NtwsApFailDetail()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApFailDetail.setStatus('current')
ntwsRadioType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 63), NtwsRadioType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioType.setStatus('current')
ntwsRadioConfigState = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 64), NtwsRadioConfigState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioConfigState.setStatus('current')
ntwsApConnectSecurityType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 65), NtwsApConnectSecurityType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApConnectSecurityType.setStatus('current')
ntwsApServiceAvailability = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 66), NtwsApServiceAvailability()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApServiceAvailability.setStatus('current')
ntwsApWasOperational = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 67), NtwsApWasOperational()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApWasOperational.setStatus('current')
ntwsClientTimeSinceLastRoam = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 68), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientTimeSinceLastRoam.setStatus('current')
ntwsClientIpAddrChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 69), NtwsClientIpAddrChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientIpAddrChangeReason.setStatus('current')
ntwsRFDetectRogueAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 70), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectRogueAPMacAddr.setStatus('current')
ntwsBlacklistingRemainingTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 71), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsBlacklistingRemainingTime.setStatus('current')
ntwsBlacklistingCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 72), NtwsBlacklistingCause()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsBlacklistingCause.setStatus('current')
ntwsNumLicensedActiveAPs = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 73), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsNumLicensedActiveAPs.setStatus('current')
ntwsClientDynAuthorClientIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 74), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientDynAuthorClientIp.setStatus('current')
ntwsChangedUserParamOldValues = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 75), NtwsUserAttributeList()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsChangedUserParamOldValues.setStatus('current')
ntwsChangedUserParamNewValues = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 76), NtwsUserAttributeList()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsChangedUserParamNewValues.setStatus('current')
ntwsClientDisconnectSource = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 77), NtwsSessionDisconnectType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientDisconnectSource.setStatus('current')
ntwsClientDisconnectDescription = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientDisconnectDescription.setStatus('current')
ntwsMobilityDomainSecondarySeedIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 79), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsMobilityDomainSecondarySeedIp.setStatus('current')
ntwsMobilityDomainPrimarySeedIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 80), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsMobilityDomainPrimarySeedIp.setStatus('current')
ntwsRFDetectClassificationReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 81), NtwsRFDetectClassificationReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectClassificationReason.setStatus('current')
ntwsConfigSaveFileName = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsConfigSaveFileName.setStatus('current')
ntwsConfigSaveInitiatorType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 83), NtwsConfigSaveInitiatorType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsConfigSaveInitiatorType.setStatus('current')
ntwsConfigSaveInitiatorIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 84), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsConfigSaveInitiatorIp.setStatus('current')
ntwsConfigSaveInitiatorDetails = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsConfigSaveInitiatorDetails.setStatus('current')
ntwsConfigSaveGeneration = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 86), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsConfigSaveGeneration.setStatus('current')
ntwsApNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 87), NtwsApNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApNum.setStatus('current')
ntwsRadioMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 88), NtwsRadioMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioMode.setStatus('current')
ntwsMichaelMICFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 89), NtwsMichaelMICFailureCause()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsMichaelMICFailureCause.setStatus('current')
ntwsClientAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 90), NtwsClientAccessMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAccessMode.setStatus('current')
ntwsClientAuthorizationReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 91), NtwsClientAuthorizationReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAuthorizationReason.setStatus('current')
ntwsPhysPortNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 92), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsPhysPortNum.setStatus('current')
ntwsApMgrOldIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 93), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApMgrOldIp.setStatus('current')
ntwsApMgrNewIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 94), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApMgrNewIp.setStatus('current')
ntwsApMgrChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 95), NtwsApMgrChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApMgrChangeReason.setStatus('current')
ntwsClientClearedReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 96), NtwsClientClearedReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientClearedReason.setStatus('current')
ntwsMobilityDomainResiliencyStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 97), NtwsMobilityDomainResiliencyStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsMobilityDomainResiliencyStatus.setStatus('current')
ntwsClientSessionElapsedSeconds = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 98), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientSessionElapsedSeconds.setStatus('current')
ntwsRadioChannelWidth = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 99), NtwsRadioChannelWidth()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioChannelWidth.setStatus('current')
ntwsRadioMimoState = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 100), NtwsRadioMimoState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioMimoState.setStatus('current')
ntwsClientRadioType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 101), NtwsRadioType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRadioType.setStatus('current')
ntwsRFDetectXmtrRadioType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 102), NtwsRadioType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectXmtrRadioType.setStatus('current')
ntwsRFDetectXmtrCryptoType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 103), NtwsCryptoType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectXmtrCryptoType.setStatus('current')
ntwsClusterFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 104), NtwsClusterFailureReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClusterFailureReason.setStatus('current')
ntwsClusterFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 105), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClusterFailureDescription.setStatus('current')
ntwsDeviceFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 1)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceId"))
if mibBuilder.loadTexts: ntwsDeviceFailTrap.setStatus('current')
ntwsDeviceOkayTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 2)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceId"))
if mibBuilder.loadTexts: ntwsDeviceOkayTrap.setStatus('current')
ntwsPoEFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 3)).setObjects(("NTWS-TRAP-MIB", "ntwsPortNum"))
if mibBuilder.loadTexts: ntwsPoEFailTrap.setStatus('current')
ntwsApTimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 4)).setObjects(("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPMACAddress"), ("NTWS-TRAP-MIB", "ntwsAPAccessType"), ("NTWS-TRAP-MIB", "ntwsDAPNum"))
if mibBuilder.loadTexts: ntwsApTimeoutTrap.setStatus('obsolete')
ntwsAPBootTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 5)).setObjects(("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPMACAddress"), ("NTWS-TRAP-MIB", "ntwsAPAccessType"), ("NTWS-TRAP-MIB", "ntwsDAPNum"))
if mibBuilder.loadTexts: ntwsAPBootTrap.setStatus('obsolete')
ntwsMobilityDomainJoinTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 6)).setObjects(("NTWS-TRAP-MIB", "ntwsMobilityDomainIp"))
if mibBuilder.loadTexts: ntwsMobilityDomainJoinTrap.setStatus('current')
ntwsMobilityDomainTimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 7)).setObjects(("NTWS-TRAP-MIB", "ntwsMobilityDomainIp"))
if mibBuilder.loadTexts: ntwsMobilityDomainTimeoutTrap.setStatus('current')
ntwsMpMichaelMICFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 8)).setObjects(("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"))
if mibBuilder.loadTexts: ntwsMpMichaelMICFailure.setStatus('obsolete')
ntwsRFDetectRogueAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 9)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectRogueAPTrap.setStatus('obsolete')
ntwsRFDetectAdhocUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 10)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectAdhocUserTrap.setStatus('current')
ntwsRFDetectRogueDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 11)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectRogueDisappearTrap.setStatus('obsolete')
ntwsClientAuthenticationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 12)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientAuthenticationFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientFailureCauseDescription"))
if mibBuilder.loadTexts: ntwsClientAuthenticationFailureTrap.setStatus('current')
ntwsClientAuthorizationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 13)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientLocationPolicyIndex"), ("NTWS-TRAP-MIB", "ntwsUserParams"), ("NTWS-TRAP-MIB", "ntwsClientAuthorizationFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientFailureCauseDescription"))
if mibBuilder.loadTexts: ntwsClientAuthorizationFailureTrap.setStatus('current')
ntwsClientAssociationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 14)).setObjects(("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientAssociationFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientFailureCauseDescription"))
if mibBuilder.loadTexts: ntwsClientAssociationFailureTrap.setStatus('current')
ntwsClientAuthorizationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 15)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientSessionStartTime"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsRadioRssi"))
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap.setStatus('obsolete')
ntwsClientDeAssociationTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 16)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"))
if mibBuilder.loadTexts: ntwsClientDeAssociationTrap.setStatus('current')
ntwsClientRoamingTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 17)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientRoamedFromAccessType"), ("NTWS-TRAP-MIB", "ntwsClientRoamedFromPortNum"), ("NTWS-TRAP-MIB", "ntwsClientRoamedFromRadioNum"), ("NTWS-TRAP-MIB", "ntwsClientRoamedFromDAPNum"), ("NTWS-TRAP-MIB", "ntwsClientRoamedFromWsIp"), ("NTWS-TRAP-MIB", "ntwsClientTimeSinceLastRoam"))
if mibBuilder.loadTexts: ntwsClientRoamingTrap.setStatus('current')
ntwsAutoTuneRadioPowerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 18)).setObjects(("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsNewPowerLevel"), ("NTWS-TRAP-MIB", "ntwsOldPowerLevel"), ("NTWS-TRAP-MIB", "ntwsRadioPowerChangeReason"), ("NTWS-TRAP-MIB", "ntwsRadioPowerChangeDescription"))
if mibBuilder.loadTexts: ntwsAutoTuneRadioPowerChangeTrap.setStatus('current')
ntwsAutoTuneRadioChannelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 19)).setObjects(("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsNewChannelNum"), ("NTWS-TRAP-MIB", "ntwsOldChannelNum"), ("NTWS-TRAP-MIB", "ntwsChannelChangeReason"))
if mibBuilder.loadTexts: ntwsAutoTuneRadioChannelChangeTrap.setStatus('current')
ntwsCounterMeasureStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 20)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"))
if mibBuilder.loadTexts: ntwsCounterMeasureStartTrap.setStatus('current')
ntwsCounterMeasureStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 21)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"))
if mibBuilder.loadTexts: ntwsCounterMeasureStopTrap.setStatus('current')
ntwsClientDot1xFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 22)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientDot1xState"), ("NTWS-TRAP-MIB", "ntwsClientDot1xFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientFailureCauseDescription"))
if mibBuilder.loadTexts: ntwsClientDot1xFailureTrap.setStatus('current')
ntwsClientClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 23)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientSessionElapsedTime"), ("NTWS-TRAP-MIB", "ntwsLocalId"))
if mibBuilder.loadTexts: ntwsClientClearedTrap.setStatus('obsolete')
ntwsClientAuthorizationSuccessTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 24)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientSessionStartTime"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsUserAccessType"), ("NTWS-TRAP-MIB", "ntwsLocalId"))
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap2.setStatus('obsolete')
ntwsRFDetectSpoofedMacAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 25)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectSpoofedMacAPTrap.setStatus('obsolete')
ntwsRFDetectSpoofedSsidAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 26)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectSpoofedSsidAPTrap.setStatus('obsolete')
ntwsRFDetectDoSTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 27)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectDoSType"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectDoSTrap.setStatus('current')
ntwsRFDetectClientViaRogueWiredAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 28)).setObjects(("NTWS-TRAP-MIB", "ntwsSourceWsIp"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsClientVLANid"), ("NTWS-TRAP-MIB", "ntwsClientVLANtag"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectClientViaRogueWiredAPTrap.setStatus('obsolete')
ntwsRFDetectInterferingRogueAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 29)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectInterferingRogueAPTrap.setStatus('obsolete')
ntwsRFDetectInterferingRogueDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 30)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectInterferingRogueDisappearTrap.setStatus('obsolete')
ntwsRFDetectUnAuthorizedSsidTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 31)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectUnAuthorizedSsidTrap.setStatus('obsolete')
ntwsRFDetectUnAuthorizedOuiTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 32)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectUnAuthorizedOuiTrap.setStatus('obsolete')
ntwsRFDetectUnAuthorizedAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 33)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectUnAuthorizedAPTrap.setStatus('obsolete')
ntwsDAPConnectWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 34)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceModel"), ("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsRsaPubKeyFingerPrint"), ("NTWS-TRAP-MIB", "ntwsDAPconnectWarningType"))
if mibBuilder.loadTexts: ntwsDAPConnectWarningTrap.setStatus('obsolete')
ntwsRFDetectDoSPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 35)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectDoSType"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"))
if mibBuilder.loadTexts: ntwsRFDetectDoSPortTrap.setStatus('current')
ntwsMpMichaelMICFailure2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 36)).setObjects(("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress2"))
if mibBuilder.loadTexts: ntwsMpMichaelMICFailure2.setStatus('obsolete')
ntwsApNonOperStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 37)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsAPMACAddress"), ("NTWS-TRAP-MIB", "ntwsApAttachType"), ("NTWS-TRAP-MIB", "ntwsApPortOrDapNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsApTransition"), ("NTWS-TRAP-MIB", "ntwsApFailDetail"), ("NTWS-TRAP-MIB", "ntwsApWasOperational"))
if mibBuilder.loadTexts: ntwsApNonOperStatusTrap.setStatus('obsolete')
ntwsApOperRadioStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 38)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsApAttachType"), ("NTWS-TRAP-MIB", "ntwsApPortOrDapNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsRadioType"), ("NTWS-TRAP-MIB", "ntwsRadioConfigState"), ("NTWS-TRAP-MIB", "ntwsApConnectSecurityType"), ("NTWS-TRAP-MIB", "ntwsApServiceAvailability"))
if mibBuilder.loadTexts: ntwsApOperRadioStatusTrap.setStatus('obsolete')
ntwsClientIpAddrChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 39)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsUserAccessType"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsClientIpAddrChangeReason"))
if mibBuilder.loadTexts: ntwsClientIpAddrChangeTrap.setStatus('current')
ntwsClientAssociationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 40)).setObjects(("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"))
if mibBuilder.loadTexts: ntwsClientAssociationSuccessTrap.setStatus('current')
ntwsClientAuthenticationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 41)).setObjects(("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"))
if mibBuilder.loadTexts: ntwsClientAuthenticationSuccessTrap.setStatus('current')
ntwsClientDeAuthenticationTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 42)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"))
if mibBuilder.loadTexts: ntwsClientDeAuthenticationTrap.setStatus('current')
ntwsRFDetectBlacklistedTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 43)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsBlacklistingRemainingTime"), ("NTWS-TRAP-MIB", "ntwsBlacklistingCause"))
if mibBuilder.loadTexts: ntwsRFDetectBlacklistedTrap.setStatus('current')
ntwsRFDetectClientViaRogueWiredAPTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 44)).setObjects(("NTWS-TRAP-MIB", "ntwsSourceWsIp"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsClientVLANid"), ("NTWS-TRAP-MIB", "ntwsClientVLANtag"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectRogueAPMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectClientViaRogueWiredAPTrap2.setStatus('obsolete')
ntwsRFDetectAdhocUserDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 45)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectAdhocUserDisappearTrap.setStatus('current')
ntwsApRejectLicenseExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 46)).setObjects(("NTWS-TRAP-MIB", "ntwsNumLicensedActiveAPs"))
if mibBuilder.loadTexts: ntwsApRejectLicenseExceededTrap.setStatus('current')
ntwsClientDynAuthorChangeSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 47)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientDynAuthorClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsUserAccessType"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsChangedUserParamOldValues"), ("NTWS-TRAP-MIB", "ntwsChangedUserParamNewValues"))
if mibBuilder.loadTexts: ntwsClientDynAuthorChangeSuccessTrap.setStatus('current')
ntwsClientDynAuthorChangeFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 48)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientDynAuthorClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsUserParams"), ("NTWS-TRAP-MIB", "ntwsClientAuthorizationFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientFailureCauseDescription"))
if mibBuilder.loadTexts: ntwsClientDynAuthorChangeFailureTrap.setStatus('current')
ntwsClientDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 49)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsClientDisconnectSource"), ("NTWS-TRAP-MIB", "ntwsClientDisconnectDescription"))
if mibBuilder.loadTexts: ntwsClientDisconnectTrap.setStatus('current')
ntwsMobilityDomainFailOverTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 50)).setObjects(("NTWS-TRAP-MIB", "ntwsMobilityDomainSecondarySeedIp"))
if mibBuilder.loadTexts: ntwsMobilityDomainFailOverTrap.setStatus('current')
ntwsMobilityDomainFailBackTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 51)).setObjects(("NTWS-TRAP-MIB", "ntwsMobilityDomainPrimarySeedIp"))
if mibBuilder.loadTexts: ntwsMobilityDomainFailBackTrap.setStatus('current')
ntwsRFDetectRogueDeviceTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 52)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectClassificationReason"))
if mibBuilder.loadTexts: ntwsRFDetectRogueDeviceTrap.setStatus('obsolete')
ntwsRFDetectRogueDeviceDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 53)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectRogueDeviceDisappearTrap.setStatus('current')
ntwsRFDetectSuspectDeviceTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 54)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectClassificationReason"))
if mibBuilder.loadTexts: ntwsRFDetectSuspectDeviceTrap.setStatus('obsolete')
ntwsRFDetectSuspectDeviceDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 55)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectSuspectDeviceDisappearTrap.setStatus('current')
ntwsRFDetectClientViaRogueWiredAPTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 56)).setObjects(("NTWS-TRAP-MIB", "ntwsSourceWsIp"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsClientVLANid"), ("NTWS-TRAP-MIB", "ntwsClientVLANtag"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectRogueAPMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectClassificationReason"))
if mibBuilder.loadTexts: ntwsRFDetectClientViaRogueWiredAPTrap3.setStatus('current')
ntwsRFDetectClassificationChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 57))
if mibBuilder.loadTexts: ntwsRFDetectClassificationChangeTrap.setStatus('current')
ntwsConfigurationSavedTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 58)).setObjects(("NTWS-TRAP-MIB", "ntwsConfigSaveFileName"), ("NTWS-TRAP-MIB", "ntwsConfigSaveInitiatorType"), ("NTWS-TRAP-MIB", "ntwsConfigSaveInitiatorIp"), ("NTWS-TRAP-MIB", "ntwsConfigSaveInitiatorDetails"), ("NTWS-TRAP-MIB", "ntwsConfigSaveGeneration"))
if mibBuilder.loadTexts: ntwsConfigurationSavedTrap.setStatus('current')
ntwsApNonOperStatusTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 59)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsAPMACAddress"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsApTransition"), ("NTWS-TRAP-MIB", "ntwsApFailDetail"), ("NTWS-TRAP-MIB", "ntwsApWasOperational"))
if mibBuilder.loadTexts: ntwsApNonOperStatusTrap2.setStatus('current')
ntwsApOperRadioStatusTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 60)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsRadioType"), ("NTWS-TRAP-MIB", "ntwsRadioMode"), ("NTWS-TRAP-MIB", "ntwsRadioConfigState"), ("NTWS-TRAP-MIB", "ntwsApConnectSecurityType"), ("NTWS-TRAP-MIB", "ntwsApServiceAvailability"))
if mibBuilder.loadTexts: ntwsApOperRadioStatusTrap2.setStatus('obsolete')
ntwsMichaelMICFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 61)).setObjects(("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsMichaelMICFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress2"))
if mibBuilder.loadTexts: ntwsMichaelMICFailure.setStatus('current')
ntwsClientAuthorizationSuccessTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 62)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessMode"), ("NTWS-TRAP-MIB", "ntwsPhysPortNum"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsUserAccessType"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsClientAuthorizationReason"))
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap3.setStatus('obsolete')
ntwsApManagerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 63)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsAPMACAddress"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsApMgrOldIp"), ("NTWS-TRAP-MIB", "ntwsApMgrNewIp"), ("NTWS-TRAP-MIB", "ntwsApMgrChangeReason"))
if mibBuilder.loadTexts: ntwsApManagerChangeTrap.setStatus('current')
ntwsClientClearedTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 64)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAccessMode"), ("NTWS-TRAP-MIB", "ntwsPhysPortNum"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientSessionElapsedSeconds"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsClientClearedReason"))
if mibBuilder.loadTexts: ntwsClientClearedTrap2.setStatus('current')
ntwsMobilityDomainResiliencyStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 65)).setObjects(("NTWS-TRAP-MIB", "ntwsMobilityDomainResiliencyStatus"))
if mibBuilder.loadTexts: ntwsMobilityDomainResiliencyStatusTrap.setStatus('current')
ntwsApOperRadioStatusTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 66)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsRadioType"), ("NTWS-TRAP-MIB", "ntwsRadioMode"), ("NTWS-TRAP-MIB", "ntwsRadioConfigState"), ("NTWS-TRAP-MIB", "ntwsRadioChannelWidth"), ("NTWS-TRAP-MIB", "ntwsRadioMimoState"), ("NTWS-TRAP-MIB", "ntwsApConnectSecurityType"), ("NTWS-TRAP-MIB", "ntwsApServiceAvailability"))
if mibBuilder.loadTexts: ntwsApOperRadioStatusTrap3.setStatus('current')
ntwsClientAuthorizationSuccessTrap4 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 67)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessMode"), ("NTWS-TRAP-MIB", "ntwsPhysPortNum"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientRadioType"), ("NTWS-TRAP-MIB", "ntwsUserAccessType"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsClientAuthorizationReason"))
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap4.setStatus('current')
ntwsRFDetectRogueDeviceTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 68)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrRadioType"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrCryptoType"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectClassificationReason"))
if mibBuilder.loadTexts: ntwsRFDetectRogueDeviceTrap2.setStatus('current')
ntwsRFDetectSuspectDeviceTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 69)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrRadioType"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrCryptoType"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectClassificationReason"))
if mibBuilder.loadTexts: ntwsRFDetectSuspectDeviceTrap2.setStatus('current')
ntwsClusterFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 70)).setObjects(("NTWS-TRAP-MIB", "ntwsClusterFailureReason"), ("NTWS-TRAP-MIB", "ntwsClusterFailureDescription"))
if mibBuilder.loadTexts: ntwsClusterFailureTrap.setStatus('current')
mibBuilder.exportSymbols("NTWS-TRAP-MIB", ntwsRFDetectClassificationReason=ntwsRFDetectClassificationReason, ntwsRadioBSSID=ntwsRadioBSSID, ntwsRFDetectUnAuthorizedSsidTrap=ntwsRFDetectUnAuthorizedSsidTrap, NtwsAssociationFailureType=NtwsAssociationFailureType, ntwsRFDetectUnAuthorizedAPTrap=ntwsRFDetectUnAuthorizedAPTrap, ntwsBlacklistingRemainingTime=ntwsBlacklistingRemainingTime, ntwsRFDetectRogueDisappearTrap=ntwsRFDetectRogueDisappearTrap, NtwsAuthorizationFailureType=NtwsAuthorizationFailureType, ntwsClusterFailureTrap=ntwsClusterFailureTrap, ntwsClientRoamingTrap=ntwsClientRoamingTrap, ntwsClientAuthorizationFailureCause=ntwsClientAuthorizationFailureCause, ntwsApNonOperStatusTrap=ntwsApNonOperStatusTrap, PYSNMP_MODULE_ID=ntwsTrapMib, ntwsRFDetectSuspectDeviceTrap2=ntwsRFDetectSuspectDeviceTrap2, ntwsRFDetectRogueDeviceTrap2=ntwsRFDetectRogueDeviceTrap2, ntwsClientDeAuthenticationTrap=ntwsClientDeAuthenticationTrap, ntwsOldPowerLevel=ntwsOldPowerLevel, ntwsRFDetectDoSTrap=ntwsRFDetectDoSTrap, ntwsRFDetectDoSPortTrap=ntwsRFDetectDoSPortTrap, ntwsUserParams=ntwsUserParams, ntwsNumLicensedActiveAPs=ntwsNumLicensedActiveAPs, ntwsClientAuthenticationFailureTrap=ntwsClientAuthenticationFailureTrap, ntwsMobilityDomainResiliencyStatusTrap=ntwsMobilityDomainResiliencyStatusTrap, ntwsClientAssociationFailureCause=ntwsClientAssociationFailureCause, ntwsDeviceModel=ntwsDeviceModel, ntwsApNonOperStatusTrap2=ntwsApNonOperStatusTrap2, ntwsClientAuthorizationSuccessTrap=ntwsClientAuthorizationSuccessTrap, ntwsClientDot1xFailureCause=ntwsClientDot1xFailureCause, ntwsClientMACAddress2=ntwsClientMACAddress2, ntwsClientVLANid=ntwsClientVLANid, ntwsRFDetectUnAuthorizedOuiTrap=ntwsRFDetectUnAuthorizedOuiTrap, ntwsMobilityDomainResiliencyStatus=ntwsMobilityDomainResiliencyStatus, ntwsChangedUserParamOldValues=ntwsChangedUserParamOldValues, ntwsClientRoamedFromAccessType=ntwsClientRoamedFromAccessType, ntwsNewChannelNum=ntwsNewChannelNum, ntwsAPMACAddress=ntwsAPMACAddress, ntwsClientAuthenProtocolType=ntwsClientAuthenProtocolType, ntwsLocalId=ntwsLocalId, ntwsClusterFailureReason=ntwsClusterFailureReason, ntwsChangedUserParamNewValues=ntwsChangedUserParamNewValues, ntwsClientAssociationFailureTrap=ntwsClientAssociationFailureTrap, ntwsDeviceOkayTrap=ntwsDeviceOkayTrap, ntwsClientAssociationSuccessTrap=ntwsClientAssociationSuccessTrap, ntwsCounterMeasurePerformerListInfo=ntwsCounterMeasurePerformerListInfo, ntwsTrapMib=ntwsTrapMib, ntwsClientIpAddrChangeTrap=ntwsClientIpAddrChangeTrap, ntwsRFDetectXmtrMacAddr=ntwsRFDetectXmtrMacAddr, ntwsMobilityDomainTimeoutTrap=ntwsMobilityDomainTimeoutTrap, ntwsAPRadioNum=ntwsAPRadioNum, ntwsClientDynAuthorClientIp=ntwsClientDynAuthorClientIp, ntwsPhysPortNum=ntwsPhysPortNum, ntwsAutoTuneRadioPowerChangeTrap=ntwsAutoTuneRadioPowerChangeTrap, ntwsClientSessionStartTime=ntwsClientSessionStartTime, ntwsRFDetectClientViaRogueWiredAPTrap=ntwsRFDetectClientViaRogueWiredAPTrap, NtwsSessionDisconnectType=NtwsSessionDisconnectType, ntwsMpMichaelMICFailure2=ntwsMpMichaelMICFailure2, NtwsClientClearedReason=NtwsClientClearedReason, ntwsAutoTuneRadioChannelChangeTrap=ntwsAutoTuneRadioChannelChangeTrap, ntwsClientClearedTrap2=ntwsClientClearedTrap2, NtwsUserAttributeList=NtwsUserAttributeList, ntwsApPortOrDapNum=ntwsApPortOrDapNum, ntwsClientAccessMode=ntwsClientAccessMode, NtwsRFDetectDoSType=NtwsRFDetectDoSType, ntwsDeviceId=ntwsDeviceId, NtwsClusterFailureReason=NtwsClusterFailureReason, ntwsChannelChangeReason=ntwsChannelChangeReason, ntwsApFailDetail=ntwsApFailDetail, ntwsRFDetectRogueAPTrap=ntwsRFDetectRogueAPTrap, ntwsClientVLANtag=ntwsClientVLANtag, ntwsRFDetectListenerListInfo=ntwsRFDetectListenerListInfo, ntwsRadioType=ntwsRadioType, ntwsClientAuthenticationFailureCause=ntwsClientAuthenticationFailureCause, ntwsRFDetectInterferingRogueAPTrap=ntwsRFDetectInterferingRogueAPTrap, ntwsClientRoamedFromRadioNum=ntwsClientRoamedFromRadioNum, ntwsRadioRssi=ntwsRadioRssi, ntwsApName=ntwsApName, ntwsRFDetectXmtrRadioType=ntwsRFDetectXmtrRadioType, ntwsClientDynAuthorChangeSuccessTrap=ntwsClientDynAuthorChangeSuccessTrap, ntwsConfigurationSavedTrap=ntwsConfigurationSavedTrap, ntwsClientIp=ntwsClientIp, NtwsMichaelMICFailureCause=NtwsMichaelMICFailureCause, ntwsUserAccessType=ntwsUserAccessType, ntwsClusterFailureDescription=ntwsClusterFailureDescription, ntwsClientDisconnectSource=ntwsClientDisconnectSource, ntwsClientDynAuthorChangeFailureTrap=ntwsClientDynAuthorChangeFailureTrap, ntwsApTransition=ntwsApTransition, ntwsRadioMode=ntwsRadioMode, ntwsClientAuthorizationReason=ntwsClientAuthorizationReason, ntwsRadioMACAddress=ntwsRadioMACAddress, ntwsClientAuthorizationFailureTrap=ntwsClientAuthorizationFailureTrap, ntwsClientFailureCause=ntwsClientFailureCause, ntwsApAttachType=ntwsApAttachType, ntwsMichaelMICFailure=ntwsMichaelMICFailure, ntwsClientAuthorizationSuccessTrap4=ntwsClientAuthorizationSuccessTrap4, ntwsClientRoamedFromDAPNum=ntwsClientRoamedFromDAPNum, ntwsMobilityDomainJoinTrap=ntwsMobilityDomainJoinTrap, ntwsApOperRadioStatusTrap2=ntwsApOperRadioStatusTrap2, ntwsMpMichaelMICFailure=ntwsMpMichaelMICFailure, ntwsApMgrNewIp=ntwsApMgrNewIp, ntwsApOperRadioStatusTrap3=ntwsApOperRadioStatusTrap3, NtwsConfigSaveInitiatorType=NtwsConfigSaveInitiatorType, ntwsClientSessionState=ntwsClientSessionState, ntwsRFDetectXmtrCryptoType=ntwsRFDetectXmtrCryptoType, NtwsDot1xFailureType=NtwsDot1xFailureType, ntwsAPAccessType=ntwsAPAccessType, ntwsConfigSaveInitiatorIp=ntwsConfigSaveInitiatorIp, ntwsClientSessionElapsedTime=ntwsClientSessionElapsedTime, ntwsDAPconnectWarningType=ntwsDAPconnectWarningType, ntwsClientSessionElapsedSeconds=ntwsClientSessionElapsedSeconds, ntwsRFDetectClientViaRogueWiredAPTrap3=ntwsRFDetectClientViaRogueWiredAPTrap3, ntwsMobilityDomainFailBackTrap=ntwsMobilityDomainFailBackTrap, ntwsRadioChannelWidth=ntwsRadioChannelWidth, ntwsClientAuthenticationSuccessTrap=ntwsClientAuthenticationSuccessTrap, ntwsRFDetectSuspectDeviceDisappearTrap=ntwsRFDetectSuspectDeviceDisappearTrap, NtwsMobilityDomainResiliencyStatus=NtwsMobilityDomainResiliencyStatus, NtwsApMgrChangeReason=NtwsApMgrChangeReason, ntwsClientIpAddrChangeReason=ntwsClientIpAddrChangeReason, ntwsRFDetectClassificationChangeTrap=ntwsRFDetectClassificationChangeTrap, ntwsClientFailureCauseDescription=ntwsClientFailureCauseDescription, ntwsAPBootTrap=ntwsAPBootTrap, ntwsRadioSSID=ntwsRadioSSID, ntwsApMgrOldIp=ntwsApMgrOldIp, ntwsApWasOperational=ntwsApWasOperational, ntwsClientVLANName=ntwsClientVLANName, ntwsPoEFailTrap=ntwsPoEFailTrap, ntwsClientDot1xState=ntwsClientDot1xState, ntwsMobilityDomainPrimarySeedIp=ntwsMobilityDomainPrimarySeedIp, ntwsSourceWsIp=ntwsSourceWsIp, ntwsCounterMeasureStopTrap=ntwsCounterMeasureStopTrap, ntwsConfigSaveFileName=ntwsConfigSaveFileName, ntwsConfigSaveInitiatorDetails=ntwsConfigSaveInitiatorDetails, ntwsClientTimeSinceLastRoam=ntwsClientTimeSinceLastRoam, ntwsMichaelMICFailureCause=ntwsMichaelMICFailureCause, ntwsClientDeAssociationTrap=ntwsClientDeAssociationTrap, ntwsClientClearedTrap=ntwsClientClearedTrap, ntwsApConnectSecurityType=ntwsApConnectSecurityType, ntwsApMgrChangeReason=ntwsApMgrChangeReason, ntwsRadioMimoState=ntwsRadioMimoState, ntwsMobilityDomainIp=ntwsMobilityDomainIp, NtwsBlacklistingCause=NtwsBlacklistingCause, ntwsRsaPubKeyFingerPrint=ntwsRsaPubKeyFingerPrint, ntwsRFDetectRogueAPMacAddr=ntwsRFDetectRogueAPMacAddr, ntwsClientRoamedFromPortNum=ntwsClientRoamedFromPortNum, ntwsApManagerChangeTrap=ntwsApManagerChangeTrap, ntwsRadioPowerChangeDescription=ntwsRadioPowerChangeDescription, ntwsClientLocationPolicyIndex=ntwsClientLocationPolicyIndex, ntwsClientClearedReason=ntwsClientClearedReason, ntwsApNum=ntwsApNum, ntwsApOperRadioStatusTrap=ntwsApOperRadioStatusTrap, ntwsClientAccessType=ntwsClientAccessType, ntwsRFDetectInterferingRogueDisappearTrap=ntwsRFDetectInterferingRogueDisappearTrap, ntwsConfigSaveInitiatorType=ntwsConfigSaveInitiatorType, NtwsClientIpAddrChangeReason=NtwsClientIpAddrChangeReason, ntwsRFDetectSpoofedMacAPTrap=ntwsRFDetectSpoofedMacAPTrap, ntwsRFDetectBlacklistedTrap=ntwsRFDetectBlacklistedTrap, ntwsRFDetectDoSType=ntwsRFDetectDoSType, ntwsClientAuthorizationSuccessTrap2=ntwsClientAuthorizationSuccessTrap2, ntwsDAPConnectWarningTrap=ntwsDAPConnectWarningTrap, ntwsUserName=ntwsUserName, NtwsAuthenticationFailureType=NtwsAuthenticationFailureType, NtwsClientAuthorizationReason=NtwsClientAuthorizationReason, ntwsRFDetectClientViaRogueWiredAPTrap2=ntwsRFDetectClientViaRogueWiredAPTrap2, ntwsClientDisconnectTrap=ntwsClientDisconnectTrap, ntwsNewPowerLevel=ntwsNewPowerLevel, ntwsClientDot1xFailureTrap=ntwsClientDot1xFailureTrap, ntwsMobilityDomainFailOverTrap=ntwsMobilityDomainFailOverTrap, ntwsClientAuthorizationSuccessTrap3=ntwsClientAuthorizationSuccessTrap3, ntwsClientMACAddress=ntwsClientMACAddress, ntwsMobilityDomainSecondarySeedIp=ntwsMobilityDomainSecondarySeedIp, ntwsRFDetectSuspectDeviceTrap=ntwsRFDetectSuspectDeviceTrap, ntwsOldChannelNum=ntwsOldChannelNum, ntwsDeviceFailTrap=ntwsDeviceFailTrap, ntwsPortNum=ntwsPortNum, ntwsDAPNum=ntwsDAPNum, ntwsClientRadioType=ntwsClientRadioType, ntwsCounterMeasureStartTrap=ntwsCounterMeasureStartTrap, ntwsClientSessionId=ntwsClientSessionId, ntwsApTimeoutTrap=ntwsApTimeoutTrap, ntwsRFDetectAdhocUserDisappearTrap=ntwsRFDetectAdhocUserDisappearTrap, ntwsRFDetectRogueDeviceTrap=ntwsRFDetectRogueDeviceTrap, ntwsApServiceAvailability=ntwsApServiceAvailability, ntwsClientDisconnectDescription=ntwsClientDisconnectDescription, ntwsRFDetectAdhocUserTrap=ntwsRFDetectAdhocUserTrap, ntwsDeviceSerNum=ntwsDeviceSerNum, ntwsConfigSaveGeneration=ntwsConfigSaveGeneration, ntwsRadioPowerChangeReason=ntwsRadioPowerChangeReason, ntwsClientRoamedFromWsIp=ntwsClientRoamedFromWsIp, ntwsApRejectLicenseExceededTrap=ntwsApRejectLicenseExceededTrap, ntwsClientAuthServerIp=ntwsClientAuthServerIp, ntwsRFDetectRogueDeviceDisappearTrap=ntwsRFDetectRogueDeviceDisappearTrap, ntwsRFDetectSpoofedSsidAPTrap=ntwsRFDetectSpoofedSsidAPTrap, ntwsRadioConfigState=ntwsRadioConfigState, ntwsTrapsV2=ntwsTrapsV2, ntwsBlacklistingCause=ntwsBlacklistingCause)
