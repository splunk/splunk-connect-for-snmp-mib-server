#
# PySNMP MIB module HPNSAASR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSAASR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:30:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, ModuleIdentity, Integer32, Counter64, ObjectIdentity, iso, Unsigned32, Counter32, IpAddress, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "ModuleIdentity", "Integer32", "Counter64", "ObjectIdentity", "iso", "Unsigned32", "Counter32", "IpAddress", "MibIdentifier", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaASR = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 25))
hpnsaASRMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 1))
hpnsaASRParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2))
hpnsaASRMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRMibRevMajor.setStatus('mandatory')
hpnsaASRMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRMibRevMinor.setStatus('mandatory')
hpnsaASRMaxConsecutiveASR = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaASRMaxConsecutiveASR.setStatus('mandatory')
hpnsaASRCurrentConsecutiveASR = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRCurrentConsecutiveASR.setStatus('mandatory')
hpnsaASRTimeOutInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaASRTimeOutInterval.setStatus('mandatory')
hpnsaASRKickInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRKickInterval.setStatus('mandatory')
hpnsaASRTimeoutAction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRTimeoutAction.setStatus('mandatory')
mibBuilder.exportSymbols("HPNSAASR-MIB", hpnsaASRParms=hpnsaASRParms, hpnsaASRMibRevMinor=hpnsaASRMibRevMinor, hpnsaASRTimeOutInterval=hpnsaASRTimeOutInterval, hpnsaASRKickInterval=hpnsaASRKickInterval, hpnsaASRMaxConsecutiveASR=hpnsaASRMaxConsecutiveASR, hpnsaASRTimeoutAction=hpnsaASRTimeoutAction, hp=hp, hpnsaASRCurrentConsecutiveASR=hpnsaASRCurrentConsecutiveASR, nm=nm, hpnsaASRMibRev=hpnsaASRMibRev, hpnsaASRMibRevMajor=hpnsaASRMibRevMajor, hpnsa=hpnsa, hpnsaASR=hpnsaASR)
