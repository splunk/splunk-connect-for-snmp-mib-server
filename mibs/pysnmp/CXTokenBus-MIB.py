#
# PySNMP MIB module CXTokenBus-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXTokenBus-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
cxTokenBus, Alias, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "cxTokenBus", "Alias", "SapIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, MibIdentifier, iso, Counter64, ObjectIdentity, NotificationType, IpAddress, Counter32, ModuleIdentity, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "MibIdentifier", "iso", "Counter64", "ObjectIdentity", "NotificationType", "IpAddress", "Counter32", "ModuleIdentity", "Bits", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tbSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1), )
if mibBuilder.loadTexts: tbSapTable.setStatus('mandatory')
tbSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1), ).setIndexNames((0, "CXTokenBus-MIB", "tbSapNumber"))
if mibBuilder.loadTexts: tbSapEntry.setStatus('mandatory')
tbSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSapNumber.setStatus('mandatory')
tbSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbSapRowStatus.setStatus('mandatory')
tbSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbSapAlias.setStatus('mandatory')
tbSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 4), Alias().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbSapCompanionAlias.setStatus('mandatory')
tbSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("upper", 2))).clone('upper')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbSapType.setStatus('mandatory')
tbSapStatGathering = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbSapStatGathering.setStatus('mandatory')
tbSapStatRxUnitDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSapStatRxUnitDataFrames.setStatus('mandatory')
tbSapStatRxUnitDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSapStatRxUnitDataOctets.setStatus('mandatory')
tbSapStatRxDataAckFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSapStatRxDataAckFrames.setStatus('mandatory')
tbSapStatRxDataAckOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSapStatRxDataAckOctets.setStatus('mandatory')
tbSapStatTxUnitDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSapStatTxUnitDataFrames.setStatus('mandatory')
tbSapStatTxUnitDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSapStatTxUnitDataOctets.setStatus('mandatory')
tbSapStatTxDataAckFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSapStatTxDataAckFrames.setStatus('mandatory')
tbSapStatTxDataAckOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSapStatTxDataAckOctets.setStatus('mandatory')
tbDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2))
tbDevPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 1), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbDevPollingInterval.setStatus('mandatory')
tbRxFrameDescriptors = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 2), Integer32().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbRxFrameDescriptors.setStatus('mandatory')
tbRxBufferDescriptors = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 3), Integer32().clone(320)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbRxBufferDescriptors.setStatus('mandatory')
tbTxFrameDescriptors = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 4), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbTxFrameDescriptors.setStatus('mandatory')
tbTxBufferDescriptors = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 5), Integer32().clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbTxBufferDescriptors.setStatus('mandatory')
tbMaxFrameSizeClass6 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbMaxFrameSizeClass6.setStatus('mandatory')
tbMaxFrameSizeClass4 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbMaxFrameSizeClass4.setStatus('mandatory')
tbMaxFrameSizeClass2 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbMaxFrameSizeClass2.setStatus('mandatory')
tbMaxFrameSizeClass0 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbMaxFrameSizeClass0.setStatus('mandatory')
tbHiPriorityTokenHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbHiPriorityTokenHoldTime.setStatus('mandatory')
tbTargetRotationTimeClass4 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbTargetRotationTimeClass4.setStatus('mandatory')
tbTargetRotationTimeClass2 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(384)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbTargetRotationTimeClass2.setStatus('mandatory')
tbTargetRotationTimeClass0 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(288)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbTargetRotationTimeClass0.setStatus('mandatory')
tbTargetRotationForMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(288)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbTargetRotationForMaintenance.setStatus('mandatory')
tbMaxInterSolicitCount = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 255)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbMaxInterSolicitCount.setStatus('mandatory')
tbNonRwrMaxRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbNonRwrMaxRetryLimit.setStatus('mandatory')
tbRwrMaxRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbRwrMaxRetryLimit.setStatus('mandatory')
tbSlotTime = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbSlotTime.setStatus('mandatory')
tbTxNonRwrFailures = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbTxNonRwrFailures.setStatus('mandatory')
tbTxRwrFailures = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbTxRwrFailures.setStatus('mandatory')
tbUnexpectedFrame6s = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbUnexpectedFrame6s.setStatus('mandatory')
tbUnexpectedFrame10s = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbUnexpectedFrame10s.setStatus('mandatory')
tbNbUnderruns = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbUnderruns.setStatus('mandatory')
tbRxRetryRwrFrames = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbRxRetryRwrFrames.setStatus('mandatory')
tbRxNullLsduRwrFrames = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbRxNullLsduRwrFrames.setStatus('mandatory')
tbNbPassedTokens = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbPassedTokens.setStatus('mandatory')
tbNbHeardTokens = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbHeardTokens.setStatus('mandatory')
tbNbNoSuccessor8Passes = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbNoSuccessor8Passes.setStatus('mandatory')
tbNbWhoFollowsFrames = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbWhoFollowsFrames.setStatus('mandatory')
tbNbTokenPassFailures = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbTokenPassFailures.setStatus('mandatory')
tbRxPeriodNonSilences = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbRxPeriodNonSilences.setStatus('mandatory')
tbRxBadCrcFrames = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbRxBadCrcFrames.setStatus('mandatory')
tbRxEBitSetFrames = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbRxEBitSetFrames.setStatus('mandatory')
tbRxFrameFragments = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbRxFrameFragments.setStatus('mandatory')
tbRxFrameTooLongs = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbRxFrameTooLongs.setStatus('mandatory')
tbNbNoFdBdErrors = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbNoFdBdErrors.setStatus('mandatory')
tbNbOverruns = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 9, 2, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbOverruns.setStatus('mandatory')
mibBuilder.exportSymbols("CXTokenBus-MIB", tbNbHeardTokens=tbNbHeardTokens, tbUnexpectedFrame6s=tbUnexpectedFrame6s, tbNbTokenPassFailures=tbNbTokenPassFailures, tbRxFrameTooLongs=tbRxFrameTooLongs, tbRxRetryRwrFrames=tbRxRetryRwrFrames, tbSapRowStatus=tbSapRowStatus, tbMaxFrameSizeClass4=tbMaxFrameSizeClass4, tbRxFrameDescriptors=tbRxFrameDescriptors, tbMaxFrameSizeClass0=tbMaxFrameSizeClass0, tbSapStatRxUnitDataOctets=tbSapStatRxUnitDataOctets, tbTxRwrFailures=tbTxRwrFailures, tbTargetRotationTimeClass4=tbTargetRotationTimeClass4, tbNbNoSuccessor8Passes=tbNbNoSuccessor8Passes, tbSapStatRxUnitDataFrames=tbSapStatRxUnitDataFrames, tbTargetRotationForMaintenance=tbTargetRotationForMaintenance, tbTargetRotationTimeClass2=tbTargetRotationTimeClass2, tbNbUnderruns=tbNbUnderruns, tbRxBadCrcFrames=tbRxBadCrcFrames, tbRxNullLsduRwrFrames=tbRxNullLsduRwrFrames, tbTxNonRwrFailures=tbTxNonRwrFailures, tbTxBufferDescriptors=tbTxBufferDescriptors, tbSapAlias=tbSapAlias, tbSapStatGathering=tbSapStatGathering, tbSapStatTxUnitDataFrames=tbSapStatTxUnitDataFrames, tbRxBufferDescriptors=tbRxBufferDescriptors, tbSapTable=tbSapTable, tbDevPollingInterval=tbDevPollingInterval, tbRxFrameFragments=tbRxFrameFragments, tbSapEntry=tbSapEntry, tbTxFrameDescriptors=tbTxFrameDescriptors, tbNbOverruns=tbNbOverruns, tbSapStatTxDataAckOctets=tbSapStatTxDataAckOctets, tbRxPeriodNonSilences=tbRxPeriodNonSilences, tbTargetRotationTimeClass0=tbTargetRotationTimeClass0, tbRwrMaxRetryLimit=tbRwrMaxRetryLimit, tbMaxFrameSizeClass6=tbMaxFrameSizeClass6, tbMaxInterSolicitCount=tbMaxInterSolicitCount, tbSapNumber=tbSapNumber, tbDevice=tbDevice, tbSapCompanionAlias=tbSapCompanionAlias, tbMaxFrameSizeClass2=tbMaxFrameSizeClass2, tbNonRwrMaxRetryLimit=tbNonRwrMaxRetryLimit, tbNbWhoFollowsFrames=tbNbWhoFollowsFrames, tbSlotTime=tbSlotTime, tbRxEBitSetFrames=tbRxEBitSetFrames, tbSapStatRxDataAckFrames=tbSapStatRxDataAckFrames, tbNbNoFdBdErrors=tbNbNoFdBdErrors, tbNbPassedTokens=tbNbPassedTokens, tbHiPriorityTokenHoldTime=tbHiPriorityTokenHoldTime, tbSapStatTxUnitDataOctets=tbSapStatTxUnitDataOctets, tbUnexpectedFrame10s=tbUnexpectedFrame10s, tbSapStatTxDataAckFrames=tbSapStatTxDataAckFrames, tbSapType=tbSapType, tbSapStatRxDataAckOctets=tbSapStatRxDataAckOctets)
