#
# PySNMP MIB module SNR-ERD-3s (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SNR-ERD-3s
# Produced by pysmi-0.3.4 at Mon Apr 29 21:00:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ObjectIdentity, Bits, enterprises, Counter64, Gauge32, MibIdentifier, NotificationType, Opaque, iso, Integer32, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "Bits", "enterprises", "Counter64", "Gauge32", "MibIdentifier", "NotificationType", "Opaque", "iso", "Integer32", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
snr = ModuleIdentity((1, 3, 6, 1, 4, 1, 40418))
snr.setRevisions(('2015-04-29 12:00',))
if mibBuilder.loadTexts: snr.setLastUpdated('201504291200Z')
if mibBuilder.loadTexts: snr.setOrganization('NAG ')
snr_erd = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 2)).setLabel("snr-erd")
snr_erd_3s = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 2, 4)).setLabel("snr-erd-3s")
ipAddressEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 2, 4, 1))
resetsSet = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 2, 4, 2))
sensesSet1 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 2, 4, 3))
sensesSet2 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4))
commS = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 2, 4, 5))
upsMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 2, 4, 6))
temperatureSensorsOut = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2))
erd3sTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0))
class Float(TextualConvention, Opaque):
    status = 'current'
    subtypeSpec = Opaque.subtypeSpec + ValueSizeConstraint(7, 7)
    fixedLength = 7

temperatureSensorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 0))
if mibBuilder.loadTexts: temperatureSensorAlarm.setStatus('current')
temperatureSensorRelease = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 1))
if mibBuilder.loadTexts: temperatureSensorRelease.setStatus('current')
signal1Contact8Alarm = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 2))
if mibBuilder.loadTexts: signal1Contact8Alarm.setStatus('current')
signal1Contact8Ok = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 3))
if mibBuilder.loadTexts: signal1Contact8Ok.setStatus('current')
signal2Contact9Alarm = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 4))
if mibBuilder.loadTexts: signal2Contact9Alarm.setStatus('current')
signal2Contact9Ok = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 5))
if mibBuilder.loadTexts: signal2Contact9Ok.setStatus('current')
voltageSignal1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 6))
if mibBuilder.loadTexts: voltageSignal1Alarm.setStatus('current')
voltageSignal1Ok = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 7))
if mibBuilder.loadTexts: voltageSignal1Ok.setStatus('current')
voltageSignal2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 8))
if mibBuilder.loadTexts: voltageSignal2Alarm.setStatus('current')
voltageSignal2Ok = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 9))
if mibBuilder.loadTexts: voltageSignal2Ok.setStatus('current')
anySensorSignal1contact5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 10))
if mibBuilder.loadTexts: anySensorSignal1contact5Alarm.setStatus('current')
anySensorSignal1contact5Ok = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 11))
if mibBuilder.loadTexts: anySensorSignal1contact5Ok.setStatus('current')
anySensorSignal2contact6Alarm = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 12))
if mibBuilder.loadTexts: anySensorSignal2contact6Alarm.setStatus('current')
anySensorSignal2contact6Ok = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 13))
if mibBuilder.loadTexts: anySensorSignal2contact6Ok.setStatus('current')
anySensorSignal3contact7Alarm = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 14))
if mibBuilder.loadTexts: anySensorSignal3contact7Alarm.setStatus('current')
anySensorSignal3contact7Ok = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 15))
if mibBuilder.loadTexts: anySensorSignal3contact7Ok.setStatus('current')
voltageAlarm = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 16))
if mibBuilder.loadTexts: voltageAlarm.setStatus('current')
voltageOk = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 17))
if mibBuilder.loadTexts: voltageOk.setStatus('current')
remoteControlContact11On = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 18))
if mibBuilder.loadTexts: remoteControlContact11On.setStatus('current')
remoteControlContact11Off = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 19))
if mibBuilder.loadTexts: remoteControlContact11Off.setStatus('current')
resetedSmartContact10 = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 20))
if mibBuilder.loadTexts: resetedSmartContact10.setStatus('current')
temperatureSensorOutAlarm = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 23))
if mibBuilder.loadTexts: temperatureSensorOutAlarm.setStatus('current')
temperatureSensorOutRelease = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 24))
if mibBuilder.loadTexts: temperatureSensorOutRelease.setStatus('current')
temperatureSensorOutFail = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 25))
if mibBuilder.loadTexts: temperatureSensorOutFail.setStatus('current')
temperatureSensorOutOk = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 26))
if mibBuilder.loadTexts: temperatureSensorOutOk.setStatus('current')
upsUtilityFail = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 30))
if mibBuilder.loadTexts: upsUtilityFail.setStatus('current')
upsUtilityOk = NotificationType((1, 3, 6, 1, 4, 1, 40418, 2, 4, 0, 31))
if mibBuilder.loadTexts: upsUtilityOk.setStatus('current')
erd3sTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 40418, 2, 4, 99)).setObjects(("SNR-ERD-3s", "temperatureSensorAlarm"), ("SNR-ERD-3s", "temperatureSensorRelease"), ("SNR-ERD-3s", "signal1Contact8Alarm"), ("SNR-ERD-3s", "signal1Contact8Ok"), ("SNR-ERD-3s", "signal2Contact9Alarm"), ("SNR-ERD-3s", "signal2Contact9Ok"), ("SNR-ERD-3s", "voltageSignal1Alarm"), ("SNR-ERD-3s", "voltageSignal1Ok"), ("SNR-ERD-3s", "voltageSignal2Alarm"), ("SNR-ERD-3s", "voltageSignal2Ok"), ("SNR-ERD-3s", "anySensorSignal1contact5Alarm"), ("SNR-ERD-3s", "anySensorSignal1contact5Ok"), ("SNR-ERD-3s", "anySensorSignal2contact6Alarm"), ("SNR-ERD-3s", "anySensorSignal2contact6Ok"), ("SNR-ERD-3s", "anySensorSignal3contact7Alarm"), ("SNR-ERD-3s", "anySensorSignal3contact7Ok"), ("SNR-ERD-3s", "voltageAlarm"), ("SNR-ERD-3s", "voltageOk"), ("SNR-ERD-3s", "remoteControlContact11On"), ("SNR-ERD-3s", "remoteControlContact11Off"), ("SNR-ERD-3s", "resetedSmartContact10"), ("SNR-ERD-3s", "temperatureSensorOutAlarm"), ("SNR-ERD-3s", "temperatureSensorOutRelease"), ("SNR-ERD-3s", "temperatureSensorOutFail"), ("SNR-ERD-3s", "temperatureSensorOutOk"), ("SNR-ERD-3s", "upsUtilityFail"), ("SNR-ERD-3s", "upsUtilityOk"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    erd3sTrapGroup = erd3sTrapGroup.setStatus('current')
ipAddress = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
ipGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayAddress.setStatus('current')
ipMonitoringDevice = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMonitoringDevice.setStatus('current')
ipForTrap = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForTrap.setStatus('current')
resetSmartContact10 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("reset", 1), ("bypass", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetSmartContact10.setStatus('current')
numberOfResetPositives = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("resetPositives", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfResetPositives.setStatus('current')
remoteControlContact11 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 2, 1, 0, 6, 5))).clone(namedValues=NamedValues(("termostatSetON", 3), ("switch", 4), ("manualSetON", 2), ("manOFF", 1), ("manON", 0), ("autoOFF", 6), ("autoON", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteControlContact11.setStatus('current')
monitorAlarmSignal1Contact8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 0))).clone(namedValues=NamedValues(("sensorOn", 3), ("doorIsClose", 1), ("doorIsOpen", 2), ("sensorOff", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorAlarmSignal1Contact8.setStatus('current')
monitorAlarmSignal2Contact9 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 0))).clone(namedValues=NamedValues(("sensorOn", 3), ("doorIsClose", 1), ("doorIsOpen", 2), ("sensorOff", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorAlarmSignal2Contact9.setStatus('current')
numberOfAlarmPositives = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("resetPositives", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfAlarmPositives.setStatus('current')
monitorAnySensorSignal1contact5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 0))).clone(namedValues=NamedValues(("sensorOn", 3), ("sensorIs0", 1), ("sensorIs1", 2), ("sensorOff", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorAnySensorSignal1contact5.setStatus('current')
monitorAnySensorSignal2contact6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 0))).clone(namedValues=NamedValues(("sensorOn", 3), ("sensorIs0", 1), ("sensorIs1", 2), ("sensorOff", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorAnySensorSignal2contact6.setStatus('current')
monitorAnySensorSignal3contact7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 0))).clone(namedValues=NamedValues(("sensorOn", 3), ("sensorIs0", 1), ("sensorIs1", 2), ("sensorOff", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorAnySensorSignal3contact7.setStatus('current')
monitorVoltageSignal1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1, 0))).clone(namedValues=NamedValues(("sensorOn", 3), ("voltageIsYes", 2), ("voltageIsNo", 1), ("sensorOff", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorVoltageSignal1.setStatus('current')
monitorVoltageSignal2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1, 0))).clone(namedValues=NamedValues(("sensorOn", 3), ("voltageIsYes", 2), ("voltageIsNo", 1), ("sensorOff", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorVoltageSignal2.setStatus('current')
temperatureSensor = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor.setStatus('current')
temperatureSensorOutSerial1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorOutSerial1.setStatus('current')
temperatureSensorOut1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorOut1.setStatus('current')
temperatureSensorOutSerial2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorOutSerial2.setStatus('current')
temperatureSensorOut2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorOut2.setStatus('current')
temperatureSensorOutSerial3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorOutSerial3.setStatus('current')
temperatureSensorOut3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorOut3.setStatus('current')
temperatureSensorOutSerial4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorOutSerial4.setStatus('current')
temperatureSensorOut4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorOut4.setStatus('current')
temperatureSensorOutSerial5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorOutSerial5.setStatus('current')
temperatureSensorOut5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorOut5.setStatus('current')
voltageSensorContact12 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorContact12.setStatus('current')
sysVoltageAlarm = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysVoltageAlarm.setStatus('current')
communityString = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityString.setStatus('current')
trapMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("once", 1), ("cyclically", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapMode.setStatus('current')
alarmSense1Name = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSense1Name.setStatus('current')
alarmSense2Name = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSense2Name.setStatus('current')
userSense1Name = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSense1Name.setStatus('current')
userSense2Name = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSense2Name.setStatus('current')
userSense3Name = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSense3Name.setStatus('current')
dataType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("integer", 0), ("float", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataType.setStatus('current')
batteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 6, 1), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryVoltage.setStatus('current')
upsTemperature = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 6, 2), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTemperature.setStatus('current')
inputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 6, 3), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltage.setStatus('current')
outputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 6, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputVoltage.setStatus('current')
upsLoading = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsLoading.setStatus('current')
upsStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 2, 4, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("unknown", 2), ("utilityFail", 1), ("utilityOk", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsStatus.setStatus('current')
mibBuilder.exportSymbols("SNR-ERD-3s", PYSNMP_MODULE_ID=snr, anySensorSignal3contact7Ok=anySensorSignal3contact7Ok, userSense3Name=userSense3Name, alarmSense1Name=alarmSense1Name, ipForTrap=ipForTrap, resetSmartContact10=resetSmartContact10, monitorAnySensorSignal3contact7=monitorAnySensorSignal3contact7, Float=Float, voltageSignal2Ok=voltageSignal2Ok, voltageOk=voltageOk, monitorAnySensorSignal1contact5=monitorAnySensorSignal1contact5, anySensorSignal3contact7Alarm=anySensorSignal3contact7Alarm, ipGatewayAddress=ipGatewayAddress, voltageAlarm=voltageAlarm, sensesSet1=sensesSet1, erd3sTrapGroup=erd3sTrapGroup, temperatureSensorOutRelease=temperatureSensorOutRelease, upsUtilityOk=upsUtilityOk, remoteControlContact11=remoteControlContact11, temperatureSensorRelease=temperatureSensorRelease, inputVoltage=inputVoltage, temperatureSensorsOut=temperatureSensorsOut, anySensorSignal1contact5Alarm=anySensorSignal1contact5Alarm, voltageSignal1Ok=voltageSignal1Ok, commS=commS, userSense1Name=userSense1Name, voltageSignal2Alarm=voltageSignal2Alarm, upsUtilityFail=upsUtilityFail, outputVoltage=outputVoltage, monitorAlarmSignal2Contact9=monitorAlarmSignal2Contact9, remoteControlContact11Off=remoteControlContact11Off, voltageSensorContact12=voltageSensorContact12, signal2Contact9Alarm=signal2Contact9Alarm, userSense2Name=userSense2Name, snr=snr, temperatureSensorOutSerial3=temperatureSensorOutSerial3, upsMonitoring=upsMonitoring, anySensorSignal2contact6Ok=anySensorSignal2contact6Ok, monitorAlarmSignal1Contact8=monitorAlarmSignal1Contact8, numberOfAlarmPositives=numberOfAlarmPositives, resetedSmartContact10=resetedSmartContact10, temperatureSensorOut5=temperatureSensorOut5, temperatureSensorAlarm=temperatureSensorAlarm, anySensorSignal1contact5Ok=anySensorSignal1contact5Ok, alarmSense2Name=alarmSense2Name, ipAddress=ipAddress, temperatureSensorOutSerial1=temperatureSensorOutSerial1, remoteControlContact11On=remoteControlContact11On, dataType=dataType, voltageSignal1Alarm=voltageSignal1Alarm, snr_erd=snr_erd, monitorVoltageSignal1=monitorVoltageSignal1, temperatureSensorOut2=temperatureSensorOut2, anySensorSignal2contact6Alarm=anySensorSignal2contact6Alarm, sensesSet2=sensesSet2, numberOfResetPositives=numberOfResetPositives, signal1Contact8Ok=signal1Contact8Ok, resetsSet=resetsSet, temperatureSensorOut1=temperatureSensorOut1, monitorAnySensorSignal2contact6=monitorAnySensorSignal2contact6, communityString=communityString, signal1Contact8Alarm=signal1Contact8Alarm, temperatureSensorOutSerial5=temperatureSensorOutSerial5, temperatureSensorOutAlarm=temperatureSensorOutAlarm, temperatureSensor=temperatureSensor, temperatureSensorOutOk=temperatureSensorOutOk, trapMode=trapMode, upsStatus=upsStatus, erd3sTraps=erd3sTraps, upsLoading=upsLoading, signal2Contact9Ok=signal2Contact9Ok, temperatureSensorOut4=temperatureSensorOut4, temperatureSensorOutSerial4=temperatureSensorOutSerial4, upsTemperature=upsTemperature, monitorVoltageSignal2=monitorVoltageSignal2, ipMonitoringDevice=ipMonitoringDevice, temperatureSensorOutFail=temperatureSensorOutFail, sysVoltageAlarm=sysVoltageAlarm, snr_erd_3s=snr_erd_3s, ipAddressEntry=ipAddressEntry, temperatureSensorOutSerial2=temperatureSensorOutSerial2, batteryVoltage=batteryVoltage, temperatureSensorOut3=temperatureSensorOut3)
