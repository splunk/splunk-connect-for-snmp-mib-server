#
# PySNMP MIB module WINS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WINS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:29:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
software, microsoft = mibBuilder.importSymbols("MSFT-MIB", "software", "microsoft")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, ObjectIdentity, enterprises, Gauge32, TimeTicks, Unsigned32, iso, Counter32, Counter64, Bits, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "ObjectIdentity", "enterprises", "Gauge32", "TimeTicks", "Unsigned32", "iso", "Counter32", "Counter64", "Bits", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wins = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 2))
par = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 2, 1))
pull = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 2, 2))
push = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 2, 3))
datafiles = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 2, 4))
cmd = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 2, 5))
parWinsStartTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parWinsStartTime.setStatus('mandatory')
parLastPScvTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parLastPScvTime.setStatus('mandatory')
parLastATScvTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parLastATScvTime.setStatus('mandatory')
parLastTombScvTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parLastTombScvTime.setStatus('mandatory')
parLastVerifyScvTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parLastVerifyScvTime.setStatus('mandatory')
parLastPRplTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parLastPRplTime.setStatus('mandatory')
parLastATRplTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parLastATRplTime.setStatus('mandatory')
parLastNTRplTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parLastNTRplTime.setStatus('mandatory')
parLastACTRplTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parLastACTRplTime.setStatus('mandatory')
parLastInitDbTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parLastInitDbTime.setStatus('mandatory')
parLastCounterResetTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parLastCounterResetTime.setStatus('mandatory')
parWinsTotalNoOfReg = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parWinsTotalNoOfReg.setStatus('mandatory')
parWinsTotalNoOfQueries = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parWinsTotalNoOfQueries.setStatus('mandatory')
parWinsTotalNoOfRel = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parWinsTotalNoOfRel.setStatus('mandatory')
parWinsTotalNoOfSuccRel = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parWinsTotalNoOfSuccRel.setStatus('mandatory')
parWinsTotalNoOfFailRel = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parWinsTotalNoOfFailRel.setStatus('mandatory')
parWinsTotalNoOfSuccQueries = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parWinsTotalNoOfSuccQueries.setStatus('mandatory')
parWinsTotalNoOfFailQueries = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parWinsTotalNoOfFailQueries.setStatus('mandatory')
parRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parRefreshInterval.setStatus('mandatory')
parTombstoneInterval = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTombstoneInterval.setStatus('mandatory')
parTombstoneTimeout = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTombstoneTimeout.setStatus('mandatory')
parVerifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parVerifyInterval.setStatus('mandatory')
parVersCounterStartValLowWord = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parVersCounterStartValLowWord.setStatus('mandatory')
parVersCounterStartValHighWord = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parVersCounterStartValHighWord.setStatus('mandatory')
parRplOnlyWCnfPnrs = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parRplOnlyWCnfPnrs.setStatus('mandatory')
parStaticDataInit = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parStaticDataInit.setStatus('mandatory')
parLogFlag = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parLogFlag.setStatus('mandatory')
parLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parLogFileName.setStatus('mandatory')
parBackupDirPath = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parBackupDirPath.setStatus('mandatory')
parDoBackupOnTerm = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parDoBackupOnTerm.setStatus('mandatory')
parMigrateOn = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parMigrateOn.setStatus('mandatory')
dfDatafilesTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 2, 4, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfDatafilesTable.setStatus('mandatory')
dfDatafileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 2, 4, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "WINS-MIB", "dfDatafileIndex"))
if mibBuilder.loadTexts: dfDatafileEntry.setStatus('mandatory')
dfDatafileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: dfDatafileIndex.setStatus('mandatory')
dfDatafileName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfDatafileName.setStatus('mandatory')
pullInitTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pullInitTime.setStatus('mandatory')
pullCommRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pullCommRetryCount.setStatus('mandatory')
pullPnrTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pullPnrTable.setStatus('mandatory')
pPullPnrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 3, 1), ).setMaxAccess("readwrite").setIndexNames((0, "WINS-MIB", "pullPnrAdd"))
if mibBuilder.loadTexts: pPullPnrEntry.setStatus('mandatory')
pullPnrAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pullPnrAdd.setStatus('mandatory')
pullPnrSpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pullPnrSpTime.setStatus('mandatory')
pullPnrTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pullPnrTimeInterval.setStatus('mandatory')
pullPnrMemberPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pullPnrMemberPrec.setStatus('mandatory')
pullPnrNoOfSuccRpls = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pullPnrNoOfSuccRpls.setStatus('mandatory')
pullPnrNoOfCommFails = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pullPnrNoOfCommFails.setStatus('mandatory')
pullPnrVersNoLowWord = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pullPnrVersNoLowWord.setStatus('mandatory')
pullPnrVersNoHighWord = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pullPnrVersNoHighWord.setStatus('mandatory')
pushInitTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pushInitTime.setStatus('mandatory')
pushRplOnAddChg = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pushRplOnAddChg.setStatus('mandatory')
pushPnrTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 2, 3, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pushPnrTable.setStatus('mandatory')
pushPnrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 2, 3, 3, 1), ).setMaxAccess("readwrite").setIndexNames((0, "WINS-MIB", "pushPnrAdd"))
if mibBuilder.loadTexts: pushPnrEntry.setStatus('mandatory')
pushPnrAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 3, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pushPnrAdd.setStatus('mandatory')
pushPnrUpdateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pushPnrUpdateCount.setStatus('mandatory')
cmdPullTrigger = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdPullTrigger.setStatus('mandatory')
cmdPushTrigger = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdPushTrigger.setStatus('mandatory')
cmdDeleteWins = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdDeleteWins.setStatus('mandatory')
cmdDoScavenging = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdDoScavenging.setStatus('mandatory')
cmdDoStaticInit = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdDoStaticInit.setStatus('mandatory')
cmdNoOfWrkThds = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdNoOfWrkThds.setStatus('mandatory')
cmdPriorityClass = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdPriorityClass.setStatus('mandatory')
cmdResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdResetCounters.setStatus('mandatory')
cmdDeleteDbRecs = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdDeleteDbRecs.setStatus('mandatory')
cmdDRPopulateTable = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdDRPopulateTable.setStatus('mandatory')
cmdDRDataRecordsTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 11), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdDRDataRecordsTable.setStatus('mandatory')
cmdDRRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 11, 1), ).setMaxAccess("readwrite").setIndexNames((0, "WINS-MIB", "cmdDRRecordName"))
if mibBuilder.loadTexts: cmdDRRecordEntry.setStatus('mandatory')
cmdDRRecordName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdDRRecordName.setStatus('mandatory')
cmdDRRecordAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdDRRecordAddress.setStatus('mandatory')
cmdDRRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unique", 0), ("normalgroup", 1), ("specialgroup", 2), ("multihomed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdDRRecordType.setStatus('mandatory')
cmdDRRecordPersistenceType = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dynamic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdDRRecordPersistenceType.setStatus('mandatory')
cmdDRRecordState = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("active", 0), ("released", 1), ("tombstone", 2), ("deleted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdDRRecordState.setStatus('mandatory')
cmdWinsVersNoLowWord = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdWinsVersNoLowWord.setStatus('mandatory')
cmdWinsVersNoHighWord = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 2, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdWinsVersNoHighWord.setStatus('mandatory')
mibBuilder.exportSymbols("WINS-MIB", parWinsStartTime=parWinsStartTime, pullPnrAdd=pullPnrAdd, cmdDoScavenging=cmdDoScavenging, parRefreshInterval=parRefreshInterval, pullCommRetryCount=pullCommRetryCount, parLastTombScvTime=parLastTombScvTime, cmdDRRecordAddress=cmdDRRecordAddress, cmdDRPopulateTable=cmdDRPopulateTable, cmdDeleteWins=cmdDeleteWins, parLastCounterResetTime=parLastCounterResetTime, parLastPRplTime=parLastPRplTime, parTombstoneInterval=parTombstoneInterval, cmdPriorityClass=cmdPriorityClass, par=par, parVerifyInterval=parVerifyInterval, cmdDRRecordName=cmdDRRecordName, parLastATScvTime=parLastATScvTime, dfDatafileEntry=dfDatafileEntry, cmdDRRecordEntry=cmdDRRecordEntry, pushRplOnAddChg=pushRplOnAddChg, cmdDRDataRecordsTable=cmdDRDataRecordsTable, pushPnrTable=pushPnrTable, parWinsTotalNoOfFailRel=parWinsTotalNoOfFailRel, parLastPScvTime=parLastPScvTime, parMigrateOn=parMigrateOn, cmdDRRecordType=cmdDRRecordType, pullPnrTable=pullPnrTable, parWinsTotalNoOfQueries=parWinsTotalNoOfQueries, cmdDeleteDbRecs=cmdDeleteDbRecs, parWinsTotalNoOfFailQueries=parWinsTotalNoOfFailQueries, parStaticDataInit=parStaticDataInit, pullPnrSpTime=pullPnrSpTime, parLogFileName=parLogFileName, parLogFlag=parLogFlag, cmdNoOfWrkThds=cmdNoOfWrkThds, wins=wins, parLastATRplTime=parLastATRplTime, parDoBackupOnTerm=parDoBackupOnTerm, pushPnrAdd=pushPnrAdd, parVersCounterStartValLowWord=parVersCounterStartValLowWord, parRplOnlyWCnfPnrs=parRplOnlyWCnfPnrs, parWinsTotalNoOfSuccQueries=parWinsTotalNoOfSuccQueries, pushPnrEntry=pushPnrEntry, parVersCounterStartValHighWord=parVersCounterStartValHighWord, parWinsTotalNoOfSuccRel=parWinsTotalNoOfSuccRel, cmdDRRecordState=cmdDRRecordState, pullPnrNoOfCommFails=pullPnrNoOfCommFails, parWinsTotalNoOfRel=parWinsTotalNoOfRel, pull=pull, parTombstoneTimeout=parTombstoneTimeout, parLastVerifyScvTime=parLastVerifyScvTime, pullPnrVersNoLowWord=pullPnrVersNoLowWord, parLastACTRplTime=parLastACTRplTime, cmdDoStaticInit=cmdDoStaticInit, cmdWinsVersNoHighWord=cmdWinsVersNoHighWord, pushPnrUpdateCount=pushPnrUpdateCount, pPullPnrEntry=pPullPnrEntry, cmdResetCounters=cmdResetCounters, cmdDRRecordPersistenceType=cmdDRRecordPersistenceType, cmdPullTrigger=cmdPullTrigger, dfDatafileName=dfDatafileName, parWinsTotalNoOfReg=parWinsTotalNoOfReg, cmd=cmd, dfDatafileIndex=dfDatafileIndex, parLastNTRplTime=parLastNTRplTime, cmdPushTrigger=cmdPushTrigger, cmdWinsVersNoLowWord=cmdWinsVersNoLowWord, dfDatafilesTable=dfDatafilesTable, pullPnrTimeInterval=pullPnrTimeInterval, parLastInitDbTime=parLastInitDbTime, pullPnrVersNoHighWord=pullPnrVersNoHighWord, datafiles=datafiles, pushInitTime=pushInitTime, parBackupDirPath=parBackupDirPath, push=push, pullPnrMemberPrec=pullPnrMemberPrec, pullInitTime=pullInitTime, pullPnrNoOfSuccRpls=pullPnrNoOfSuccRpls)
