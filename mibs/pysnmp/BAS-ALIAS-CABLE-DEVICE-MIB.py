#
# PySNMP MIB module BAS-ALIAS-CABLE-DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-ALIAS-CABLE-DEVICE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
BasChassisId, BasLogicalPortId, BasInterfaceId, BasSlotId, basAliasDocsCd = mibBuilder.importSymbols("BAS-MIB", "BasChassisId", "BasLogicalPortId", "BasInterfaceId", "BasSlotId", "basAliasDocsCd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Gauge32, TimeTicks, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Bits, NotificationType, Counter64, IpAddress, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "TimeTicks", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Bits", "NotificationType", "Counter64", "IpAddress", "Counter32", "Integer32")
RowStatus, TextualConvention, DateAndTime, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DateAndTime", "TruthValue", "DisplayString")
basAliasDocsCdMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1))
if mibBuilder.loadTexts: basAliasDocsCdMib.setLastUpdated('9810081200Z')
if mibBuilder.loadTexts: basAliasDocsCdMib.setOrganization('Broadband Access Systems')
class InterfaceIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

basDocsDevMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1))
basDocsDevBase = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1))
basDocsDevBaseTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1), )
if mibBuilder.loadTexts: basDocsDevBaseTable.setStatus('current')
basDocsDevBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevLPort"))
if mibBuilder.loadTexts: basDocsDevBaseEntry.setStatus('current')
basDocsDevRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cm", 1), ("cmtsActive", 2), ("cmtsBackup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevRole.setStatus('current')
basDocsDevDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevDateTime.setStatus('current')
basDocsDevResetNow = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevResetNow.setStatus('current')
basDocsDevSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevSerialNumber.setStatus('current')
basDocsDevSTPControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stEnabled", 1), ("noStFilterBpdu", 2), ("noStPassBpdu", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevSTPControl.setStatus('current')
basDocsDevChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 6), BasChassisId())
if mibBuilder.loadTexts: basDocsDevChassis.setStatus('current')
basDocsDevSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 7), BasSlotId())
if mibBuilder.loadTexts: basDocsDevSlot.setStatus('current')
basDocsDevIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 8), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevIf.setStatus('current')
basDocsDevLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 9), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevLPort.setStatus('current')
basDocsDevNmAccessTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2), )
if mibBuilder.loadTexts: basDocsDevNmAccessTable.setStatus('current')
basDocsDevNmAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevNmAccessChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevNmAccessSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevNmAccessIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevNmAccessLPort"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevNmAccessIndex"))
if mibBuilder.loadTexts: basDocsDevNmAccessEntry.setStatus('current')
basDocsDevNmAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basDocsDevNmAccessIndex.setStatus('current')
basDocsDevNmAccessIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 2), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessIp.setStatus('current')
basDocsDevNmAccessIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 3), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessIpMask.setStatus('current')
basDocsDevNmAccessCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 4), DisplayString().clone('public')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessCommunity.setStatus('current')
basDocsDevNmAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("read", 2), ("readWrite", 3), ("roWithTraps", 4), ("rwWithTraps", 5), ("trapsOnly", 6))).clone('read')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessControl.setStatus('current')
basDocsDevNmAccessInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessInterfaces.setStatus('current')
basDocsDevNmAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessStatus.setStatus('current')
basDocsDevNmAccessChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 8), BasChassisId())
if mibBuilder.loadTexts: basDocsDevNmAccessChassis.setStatus('current')
basDocsDevNmAccessSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 9), BasSlotId())
if mibBuilder.loadTexts: basDocsDevNmAccessSlot.setStatus('current')
basDocsDevNmAccessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 10), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevNmAccessIf.setStatus('current')
basDocsDevNmAccessLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 11), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevNmAccessLPort.setStatus('current')
basDocsDevSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3))
basDocsDevSwTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1), )
if mibBuilder.loadTexts: basDocsDevSwTable.setStatus('current')
basDocsDevSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevSwChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevSwSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevSwIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevSwLPort"))
if mibBuilder.loadTexts: basDocsDevSwEntry.setStatus('current')
basDocsDevSwServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevSwServer.setStatus('current')
basDocsDevSwFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevSwFilename.setStatus('current')
basDocsDevSwAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("upgradeFromMgt", 1), ("allowProvisioningUpgrade", 2), ("ignoreProvisioningUpgrade", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevSwAdminStatus.setStatus('current')
basDocsDevSwOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inProgress", 1), ("completeFromProvisioning", 2), ("completeFromMgt", 3), ("failed", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevSwOperStatus.setStatus('current')
basDocsDevSwChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 5), BasChassisId())
if mibBuilder.loadTexts: basDocsDevSwChassis.setStatus('current')
basDocsDevSwSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 6), BasSlotId())
if mibBuilder.loadTexts: basDocsDevSwSlot.setStatus('current')
basDocsDevSwIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 7), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevSwIf.setStatus('current')
basDocsDevSwLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 8), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevSwLPort.setStatus('current')
basDocsDevServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4))
basDocsDevServerTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1), )
if mibBuilder.loadTexts: basDocsDevServerTable.setStatus('current')
basDocsDevServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevServerChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevServerSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevServerIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevServerLPort"))
if mibBuilder.loadTexts: basDocsDevServerEntry.setStatus('current')
basDocsDevServerBootState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("operational", 1), ("disabled", 2), ("waitingForDhcpOffer", 3), ("waitingForDhcpResponse", 4), ("waitingForTimeServer", 5), ("waitingForTftp", 6), ("refusedByCmts", 7), ("forwardingDenied", 8), ("other", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevServerBootState.setStatus('current')
basDocsDevServerDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevServerDhcp.setStatus('current')
basDocsDevServerTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevServerTime.setStatus('current')
basDocsDevServerTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevServerTftp.setStatus('current')
basDocsDevServerConfigFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevServerConfigFile.setStatus('current')
basDocsDevServerChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 6), BasChassisId())
if mibBuilder.loadTexts: basDocsDevServerChassis.setStatus('current')
basDocsDevServerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 7), BasSlotId())
if mibBuilder.loadTexts: basDocsDevServerSlot.setStatus('current')
basDocsDevServerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 8), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevServerIf.setStatus('current')
basDocsDevServerLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 9), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevServerLPort.setStatus('current')
basDocsDevEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5))
basDocsDevEvTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1), )
if mibBuilder.loadTexts: basDocsDevEvTable.setStatus('current')
basDocsDevEvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvLPort"))
if mibBuilder.loadTexts: basDocsDevEvEntry.setStatus('current')
basDocsDevEvControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetLog", 1), ("useDefaultReporting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvControl.setStatus('current')
basDocsDevEvSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvSyslog.setStatus('current')
basDocsDevEvThrottleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unconstrained", 1), ("maintainBelowThreshold", 2), ("stopAtThreshold", 3), ("inhibited", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvThrottleAdminStatus.setStatus('current')
basDocsDevEvThrottleInhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvThrottleInhibited.setStatus('current')
basDocsDevEvThrottleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvThrottleThreshold.setStatus('current')
basDocsDevEvThrottleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvThrottleInterval.setStatus('current')
basDocsDevEvChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 7), BasChassisId())
if mibBuilder.loadTexts: basDocsDevEvChassis.setStatus('current')
basDocsDevEvSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 8), BasSlotId())
if mibBuilder.loadTexts: basDocsDevEvSlot.setStatus('current')
basDocsDevEvIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 9), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevEvIf.setStatus('current')
basDocsDevEvLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 10), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevEvLPort.setStatus('current')
basDocsDevEvControlTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7), )
if mibBuilder.loadTexts: basDocsDevEvControlTable.setStatus('current')
basDocsDevEvControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvControlChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvControlSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvControlIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvControlLPort"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvPriority"))
if mibBuilder.loadTexts: basDocsDevEvControlEntry.setStatus('current')
basDocsDevEvPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("information", 7), ("debug", 8))))
if mibBuilder.loadTexts: basDocsDevEvPriority.setStatus('current')
basDocsDevEvReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 2), Bits().clone(namedValues=NamedValues(("local", 0), ("traps", 1), ("syslog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvReporting.setStatus('current')
basDocsDevEvControlChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 3), BasChassisId())
if mibBuilder.loadTexts: basDocsDevEvControlChassis.setStatus('current')
basDocsDevEvControlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 4), BasSlotId())
if mibBuilder.loadTexts: basDocsDevEvControlSlot.setStatus('current')
basDocsDevEvControlIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 5), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevEvControlIf.setStatus('current')
basDocsDevEvControlLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 6), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevEvControlLPort.setStatus('current')
basDocsDevEventTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8), )
if mibBuilder.loadTexts: basDocsDevEventTable.setStatus('current')
basDocsDevEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvEventChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvEventSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvEventIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvEventLPort"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvIndex"))
if mibBuilder.loadTexts: basDocsDevEventEntry.setStatus('current')
basDocsDevEvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basDocsDevEvIndex.setStatus('current')
basDocsDevEvFirstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvFirstTime.setStatus('current')
basDocsDevEvLastTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvLastTime.setStatus('current')
basDocsDevEvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvCount.setStatus('current')
basDocsDevEvLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("information", 7), ("debug", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvLevel.setStatus('current')
basDocsDevEvId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvId.setStatus('current')
basDocsDevEvText = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvText.setStatus('current')
basDocsDevEvEventChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 8), BasChassisId())
if mibBuilder.loadTexts: basDocsDevEvEventChassis.setStatus('current')
basDocsDevEvEventSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 9), BasSlotId())
if mibBuilder.loadTexts: basDocsDevEvEventSlot.setStatus('current')
basDocsDevEvEventIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 10), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevEvEventIf.setStatus('current')
basDocsDevEvEventLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 11), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevEvEventLPort.setStatus('current')
basDocsDevFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6))
basDocsDevFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1), )
if mibBuilder.loadTexts: basDocsDevFilterTable.setStatus('current')
basDocsDevFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLPort"))
if mibBuilder.loadTexts: basDocsDevFilterEntry.setStatus('current')
basDocsDevFilterLLCDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevFilterLLCDefault.setStatus('current')
basDocsDevFilterChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1, 2), BasChassisId())
if mibBuilder.loadTexts: basDocsDevFilterChassis.setStatus('current')
basDocsDevFilterSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1, 3), BasSlotId())
if mibBuilder.loadTexts: basDocsDevFilterSlot.setStatus('current')
basDocsDevFilterIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1, 4), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevFilterIf.setStatus('current')
basDocsDevFilterLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1, 5), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevFilterLPort.setStatus('current')
basDocsDevFilterLLCTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2), )
if mibBuilder.loadTexts: basDocsDevFilterLLCTable.setStatus('current')
basDocsDevFilterLLCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLLCChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLLCSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLLCIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLLCLPort"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLLCIndex"))
if mibBuilder.loadTexts: basDocsDevFilterLLCEntry.setStatus('current')
basDocsDevFilterLLCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basDocsDevFilterLLCIndex.setStatus('current')
basDocsDevFilterLLCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterLLCStatus.setStatus('current')
basDocsDevFilterLLCIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterLLCIfIndex.setStatus('current')
basDocsDevFilterLLCProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethertype", 1), ("dsap", 2))).clone('ethertype')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterLLCProtocolType.setStatus('current')
basDocsDevFilterLLCProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterLLCProtocol.setStatus('current')
basDocsDevFilterLLCMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevFilterLLCMatches.setStatus('current')
basDocsDevFilterLLCChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 7), BasChassisId())
if mibBuilder.loadTexts: basDocsDevFilterLLCChassis.setStatus('current')
basDocsDevFilterLLCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 8), BasSlotId())
if mibBuilder.loadTexts: basDocsDevFilterLLCSlot.setStatus('current')
basDocsDevFilterLLCIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 9), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevFilterLLCIf.setStatus('current')
basDocsDevFilterLLCLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 10), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevFilterLLCLPort.setStatus('current')
basDocsDevFilterIpDefTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3), )
if mibBuilder.loadTexts: basDocsDevFilterIpDefTable.setStatus('current')
basDocsDevFilterIpDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpDefChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpDefSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpDefIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpDefLPort"))
if mibBuilder.loadTexts: basDocsDevFilterIpDefEntry.setStatus('current')
basDocsDevFilterIpDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevFilterIpDefault.setStatus('current')
basDocsDevFilterIpDefChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1, 2), BasChassisId())
if mibBuilder.loadTexts: basDocsDevFilterIpDefChassis.setStatus('current')
basDocsDevFilterIpDefSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1, 3), BasSlotId())
if mibBuilder.loadTexts: basDocsDevFilterIpDefSlot.setStatus('current')
basDocsDevFilterIpDefIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1, 4), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevFilterIpDefIf.setStatus('current')
basDocsDevFilterIpDefLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1, 5), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevFilterIpDefLPort.setStatus('current')
basDocsDevFilterIpTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4), )
if mibBuilder.loadTexts: basDocsDevFilterIpTable.setStatus('current')
basDocsDevFilterIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpLPort"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpIndex"))
if mibBuilder.loadTexts: basDocsDevFilterIpEntry.setStatus('current')
basDocsDevFilterIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basDocsDevFilterIpIndex.setStatus('current')
basDocsDevFilterIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpStatus.setStatus('current')
basDocsDevFilterIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpControl.setStatus('current')
basDocsDevFilterIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpIfIndex.setStatus('current')
basDocsDevFilterIpDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3))).clone('inbound')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpDirection.setStatus('current')
basDocsDevFilterIpBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpBroadcast.setStatus('current')
basDocsDevFilterIpSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpSaddr.setStatus('current')
basDocsDevFilterIpSmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpSmask.setStatus('current')
basDocsDevFilterIpDaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpDaddr.setStatus('current')
basDocsDevFilterIpDmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 10), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpDmask.setStatus('current')
basDocsDevFilterIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 256))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17), ("any", 256))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpProtocol.setStatus('current')
basDocsDevFilterIpSourcePortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpSourcePortLow.setStatus('current')
basDocsDevFilterIpSourcePortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpSourcePortHigh.setStatus('current')
basDocsDevFilterIpDestPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpDestPortLow.setStatus('current')
basDocsDevFilterIpDestPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpDestPortHigh.setStatus('current')
basDocsDevFilterIpMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevFilterIpMatches.setStatus('current')
basDocsDevFilterIpChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 17), BasChassisId())
if mibBuilder.loadTexts: basDocsDevFilterIpChassis.setStatus('current')
basDocsDevFilterIpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 18), BasSlotId())
if mibBuilder.loadTexts: basDocsDevFilterIpSlot.setStatus('current')
basDocsDevFilterIpIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 19), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevFilterIpIf.setStatus('current')
basDocsDevFilterIpLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 20), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevFilterIpLPort.setStatus('current')
mibBuilder.exportSymbols("BAS-ALIAS-CABLE-DEVICE-MIB", basDocsDevFilterIpDefTable=basDocsDevFilterIpDefTable, basDocsDevFilterSlot=basDocsDevFilterSlot, basDocsDevFilterIpTable=basDocsDevFilterIpTable, basDocsDevFilterLLCTable=basDocsDevFilterLLCTable, basDocsDevEvIf=basDocsDevEvIf, basDocsDevEvControlEntry=basDocsDevEvControlEntry, basDocsDevFilterIpDefLPort=basDocsDevFilterIpDefLPort, basDocsDevSwIf=basDocsDevSwIf, basDocsDevFilterIpDestPortHigh=basDocsDevFilterIpDestPortHigh, basDocsDevEvEventIf=basDocsDevEvEventIf, basDocsDevFilterLLCStatus=basDocsDevFilterLLCStatus, basDocsDevFilterIpEntry=basDocsDevFilterIpEntry, basDocsDevFilterIpSlot=basDocsDevFilterIpSlot, basDocsDevEvIndex=basDocsDevEvIndex, basDocsDevServerTable=basDocsDevServerTable, basDocsDevServerDhcp=basDocsDevServerDhcp, basDocsDevFilterLLCEntry=basDocsDevFilterLLCEntry, basDocsDevServerLPort=basDocsDevServerLPort, basDocsDevEvSlot=basDocsDevEvSlot, basDocsDevFilterLLCSlot=basDocsDevFilterLLCSlot, basDocsDevFilterIpControl=basDocsDevFilterIpControl, basDocsDevFilterIpDaddr=basDocsDevFilterIpDaddr, basDocsDevFilterIpIfIndex=basDocsDevFilterIpIfIndex, basDocsDevSlot=basDocsDevSlot, basDocsDevNmAccessSlot=basDocsDevNmAccessSlot, basDocsDevEvPriority=basDocsDevEvPriority, basDocsDevBaseEntry=basDocsDevBaseEntry, basDocsDevEvId=basDocsDevEvId, basDocsDevNmAccessCommunity=basDocsDevNmAccessCommunity, basDocsDevRole=basDocsDevRole, basDocsDevSwServer=basDocsDevSwServer, PYSNMP_MODULE_ID=basAliasDocsCdMib, basDocsDevEventEntry=basDocsDevEventEntry, basDocsDevFilterIpLPort=basDocsDevFilterIpLPort, basDocsDevServerBootState=basDocsDevServerBootState, basDocsDevEvThrottleInhibited=basDocsDevEvThrottleInhibited, basDocsDevFilterChassis=basDocsDevFilterChassis, basDocsDevEvCount=basDocsDevEvCount, basDocsDevEvent=basDocsDevEvent, basDocsDevFilterLLCIfIndex=basDocsDevFilterLLCIfIndex, basDocsDevFilterLLCChassis=basDocsDevFilterLLCChassis, basDocsDevEvEventChassis=basDocsDevEvEventChassis, basDocsDevNmAccessStatus=basDocsDevNmAccessStatus, basDocsDevMIBObjects=basDocsDevMIBObjects, InterfaceIndexOrZero=InterfaceIndexOrZero, basDocsDevChassis=basDocsDevChassis, basDocsDevFilterLPort=basDocsDevFilterLPort, basDocsDevSerialNumber=basDocsDevSerialNumber, basDocsDevNmAccessLPort=basDocsDevNmAccessLPort, basDocsDevSwChassis=basDocsDevSwChassis, basDocsDevFilterIpDefEntry=basDocsDevFilterIpDefEntry, basDocsDevNmAccessIpMask=basDocsDevNmAccessIpMask, basDocsDevEvControl=basDocsDevEvControl, basDocsDevEvControlIf=basDocsDevEvControlIf, basDocsDevFilterIpSourcePortHigh=basDocsDevFilterIpSourcePortHigh, basDocsDevDateTime=basDocsDevDateTime, basDocsDevSwOperStatus=basDocsDevSwOperStatus, basDocsDevFilterIpChassis=basDocsDevFilterIpChassis, basDocsDevFilterEntry=basDocsDevFilterEntry, basDocsDevEvTable=basDocsDevEvTable, basDocsDevFilterIpDefIf=basDocsDevFilterIpDefIf, basDocsDevFilterIpIf=basDocsDevFilterIpIf, basDocsDevServer=basDocsDevServer, basDocsDevFilterIpDefChassis=basDocsDevFilterIpDefChassis, basDocsDevFilterIpBroadcast=basDocsDevFilterIpBroadcast, basDocsDevFilterIpProtocol=basDocsDevFilterIpProtocol, basDocsDevNmAccessTable=basDocsDevNmAccessTable, basDocsDevFilterIpIndex=basDocsDevFilterIpIndex, basDocsDevFilterIpStatus=basDocsDevFilterIpStatus, basDocsDevEvLPort=basDocsDevEvLPort, basDocsDevServerChassis=basDocsDevServerChassis, basDocsDevSwAdminStatus=basDocsDevSwAdminStatus, basDocsDevBase=basDocsDevBase, basDocsDevFilterLLCMatches=basDocsDevFilterLLCMatches, basDocsDevFilterIpDefault=basDocsDevFilterIpDefault, basDocsDevServerIf=basDocsDevServerIf, basDocsDevEventTable=basDocsDevEventTable, basDocsDevSTPControl=basDocsDevSTPControl, basDocsDevServerTftp=basDocsDevServerTftp, basDocsDevFilterLLCIndex=basDocsDevFilterLLCIndex, basDocsDevEvControlLPort=basDocsDevEvControlLPort, basDocsDevEvThrottleThreshold=basDocsDevEvThrottleThreshold, basDocsDevBaseTable=basDocsDevBaseTable, basDocsDevIf=basDocsDevIf, basDocsDevSwTable=basDocsDevSwTable, basDocsDevSwSlot=basDocsDevSwSlot, basDocsDevEvLevel=basDocsDevEvLevel, basDocsDevFilterLLCIf=basDocsDevFilterLLCIf, basDocsDevEvFirstTime=basDocsDevEvFirstTime, basDocsDevLPort=basDocsDevLPort, basDocsDevEvEventSlot=basDocsDevEvEventSlot, basDocsDevFilterIpDestPortLow=basDocsDevFilterIpDestPortLow, basDocsDevNmAccessControl=basDocsDevNmAccessControl, basDocsDevNmAccessIp=basDocsDevNmAccessIp, basDocsDevNmAccessInterfaces=basDocsDevNmAccessInterfaces, basDocsDevFilterLLCLPort=basDocsDevFilterLLCLPort, basDocsDevEvText=basDocsDevEvText, basDocsDevFilterIpSourcePortLow=basDocsDevFilterIpSourcePortLow, basDocsDevNmAccessIndex=basDocsDevNmAccessIndex, basDocsDevResetNow=basDocsDevResetNow, basDocsDevEvEventLPort=basDocsDevEvEventLPort, basDocsDevSoftware=basDocsDevSoftware, basDocsDevEvControlSlot=basDocsDevEvControlSlot, basDocsDevEvEntry=basDocsDevEvEntry, basDocsDevFilterIpMatches=basDocsDevFilterIpMatches, basDocsDevServerSlot=basDocsDevServerSlot, basDocsDevFilterIpSaddr=basDocsDevFilterIpSaddr, basDocsDevEvThrottleAdminStatus=basDocsDevEvThrottleAdminStatus, basDocsDevFilter=basDocsDevFilter, basDocsDevSwEntry=basDocsDevSwEntry, basDocsDevSwFilename=basDocsDevSwFilename, basDocsDevFilterLLCProtocolType=basDocsDevFilterLLCProtocolType, basDocsDevNmAccessChassis=basDocsDevNmAccessChassis, basDocsDevFilterLLCProtocol=basDocsDevFilterLLCProtocol, basDocsDevFilterIpDmask=basDocsDevFilterIpDmask, basDocsDevNmAccessEntry=basDocsDevNmAccessEntry, basDocsDevServerEntry=basDocsDevServerEntry, basDocsDevFilterIpSmask=basDocsDevFilterIpSmask, basDocsDevEvControlChassis=basDocsDevEvControlChassis, basDocsDevSwLPort=basDocsDevSwLPort, basDocsDevNmAccessIf=basDocsDevNmAccessIf, basDocsDevEvChassis=basDocsDevEvChassis, basDocsDevFilterTable=basDocsDevFilterTable, basDocsDevFilterLLCDefault=basDocsDevFilterLLCDefault, basDocsDevEvLastTime=basDocsDevEvLastTime, basDocsDevFilterIf=basDocsDevFilterIf, basDocsDevEvThrottleInterval=basDocsDevEvThrottleInterval, basDocsDevFilterIpDefSlot=basDocsDevFilterIpDefSlot, basDocsDevFilterIpDirection=basDocsDevFilterIpDirection, basAliasDocsCdMib=basAliasDocsCdMib, basDocsDevServerTime=basDocsDevServerTime, basDocsDevServerConfigFile=basDocsDevServerConfigFile, basDocsDevEvReporting=basDocsDevEvReporting, basDocsDevEvControlTable=basDocsDevEvControlTable, basDocsDevEvSyslog=basDocsDevEvSyslog)
