#
# PySNMP MIB module ASCEND-MIBX25-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBX25-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:12:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, ModuleIdentity, Gauge32, ObjectIdentity, Counter32, iso, Integer32, NotificationType, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Counter32", "iso", "Integer32", "NotificationType", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibx25Profile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 140))
mibx25ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 140, 1), )
if mibBuilder.loadTexts: mibx25ProfileTable.setStatus('mandatory')
mibx25ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1), ).setIndexNames((0, "ASCEND-MIBX25-MIB", "x25Profile-X25Name"))
if mibBuilder.loadTexts: mibx25ProfileEntry.setStatus('mandatory')
x25Profile_X25Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 1), DisplayString()).setLabel("x25Profile-X25Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: x25Profile_X25Name.setStatus('mandatory')
x25Profile_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("x25Profile-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_Active.setStatus('mandatory')
x25Profile_Kludge = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("x25Profile-Kludge").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_Kludge.setStatus('mandatory')
x25Profile_NailedUpGroup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 4), Integer32()).setLabel("x25Profile-NailedUpGroup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_NailedUpGroup.setStatus('mandatory')
x25Profile_NailedMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("ft1", 2), ("ft1Mpp", 3), ("bri", 4), ("ft1Bo", 5), ("dChan", 6), ("aodi", 7), ("megamax", 8)))).setLabel("x25Profile-NailedMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_NailedMode.setStatus('mandatory')
x25Profile_CalledNumberType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 6), Integer32()).setLabel("x25Profile-CalledNumberType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_CalledNumberType.setStatus('mandatory')
x25Profile_SwitchedCallType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 255, 263))).clone(namedValues=NamedValues(("voice", 1), ("n-56kRestricted", 2), ("n-64kClear", 3), ("n-64kRestricted", 4), ("n-56kClear", 5), ("n-384kRestricted", 6), ("n-384kClear", 7), ("n-1536kClear", 8), ("n-1536kRestricted", 9), ("n-128kClear", 10), ("n-192kClear", 11), ("n-256kClear", 12), ("n-320kClear", 13), ("dws384Clear", 14), ("n-448Clear", 15), ("n-512Clear", 16), ("n-576Clear", 17), ("n-640Clear", 18), ("n-704Clear", 19), ("n-768Clear", 20), ("n-832Clear", 21), ("n-896Clear", 22), ("n-960Clear", 23), ("n-1024Clear", 24), ("n-1088Clear", 25), ("n-1152Clear", 26), ("n-1216Clear", 27), ("n-1280Clear", 28), ("n-1344Clear", 29), ("n-1408Clear", 30), ("n-1472Clear", 31), ("n-1600Clear", 32), ("n-1664Clear", 33), ("n-1728Clear", 34), ("n-1792Clear", 35), ("n-1856Clear", 36), ("n-1920Clear", 37), ("x30RestrictedBearer", 39), ("v110ClearBearer", 40), ("n-64kX30Restricted", 41), ("n-56kV110Clear", 42), ("modem", 43), ("atmodem", 44), ("n-2456kV110", 46), ("n-4856kV110", 47), ("n-9656kV110", 48), ("n-19256kV110", 49), ("n-38456kV110", 50), ("n-2456krV110", 51), ("n-4856krV110", 52), ("n-9656krV110", 53), ("n-19256krV110", 54), ("n-38456krV110", 55), ("n-2464kV110", 56), ("n-4864kV110", 57), ("n-9664kV110", 58), ("n-19264kV110", 59), ("n-38464kV110", 60), ("n-2464krV110", 61), ("n-4864krV110", 62), ("n-9664krV110", 63), ("n-19264krV110", 64), ("n-38464krV110", 65), ("v32", 66), ("phs64k", 67), ("voiceOverIp", 68), ("atmSvc", 70), ("frameRelaySvc", 71), ("vpnTunnel", 72), ("wormarq", 73), ("n-14456kV110", 74), ("n-28856kV110", 75), ("n-14456krV110", 76), ("n-28856krV110", 77), ("n-14464kV110", 78), ("n-28864kV110", 79), ("n-14464krV110", 80), ("n-28864krV110", 81), ("modem31khzAudio", 82), ("x25Svc", 83), ("n-144kClear", 255), ("iptoip", 263)))).setLabel("x25Profile-SwitchedCallType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_SwitchedCallType.setStatus('mandatory')
x25Profile_PhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 8), DisplayString()).setLabel("x25Profile-PhoneNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_PhoneNumber.setStatus('mandatory')
x25Profile_BillingNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 9), DisplayString()).setLabel("x25Profile-BillingNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_BillingNumber.setStatus('mandatory')
x25Profile_TransitNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 10), DisplayString()).setLabel("x25Profile-TransitNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_TransitNumber.setStatus('mandatory')
x25Profile_CallByCallId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 11), Integer32()).setLabel("x25Profile-CallByCallId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_CallByCallId.setStatus('mandatory')
x25Profile_oT1Val = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 12), Integer32()).setLabel("x25Profile-oT1Val").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oT1Val.setStatus('mandatory')
x25Profile_oT2Val = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 13), Integer32()).setLabel("x25Profile-oT2Val").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oT2Val.setStatus('mandatory')
x25Profile_oN2Val = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 14), Integer32()).setLabel("x25Profile-oN2Val").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oN2Val.setStatus('mandatory')
x25Profile_KVal = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 15), Integer32()).setLabel("x25Profile-KVal").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_KVal.setStatus('mandatory')
x25Profile_IdleVal = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 45), Integer32()).setLabel("x25Profile-IdleVal").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_IdleVal.setStatus('mandatory')
x25Profile_oPktWindow = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 16), Integer32()).setLabel("x25Profile-oPktWindow").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oPktWindow.setStatus('mandatory')
x25Profile_Maxwinsize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 46), Integer32()).setLabel("x25Profile-Maxwinsize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_Maxwinsize.setStatus('mandatory')
x25Profile_Defwinsize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 47), Integer32()).setLabel("x25Profile-Defwinsize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_Defwinsize.setStatus('mandatory')
x25Profile_oPktSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 17), Integer32()).setLabel("x25Profile-oPktSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oPktSize.setStatus('mandatory')
x25Profile_oMinPktSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("n-6", 7), ("n-7", 8), ("n-8", 9), ("n-9", 10), ("n-10", 11), ("n-11", 12), ("n-12", 13)))).setLabel("x25Profile-oMinPktSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oMinPktSize.setStatus('mandatory')
x25Profile_Defpktsize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("n-6", 7), ("n-7", 8), ("n-8", 9), ("n-9", 10), ("n-10", 11), ("n-11", 12), ("n-12", 13)))).setLabel("x25Profile-Defpktsize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_Defpktsize.setStatus('mandatory')
x25Profile_oMaxPktSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("n-6", 7), ("n-7", 8), ("n-8", 9), ("n-9", 10), ("n-10", 11), ("n-11", 12), ("n-12", 13)))).setLabel("x25Profile-oMaxPktSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oMaxPktSize.setStatus('mandatory')
x25Profile_LowestPVC = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 20), Integer32()).setLabel("x25Profile-LowestPVC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_LowestPVC.setStatus('mandatory')
x25Profile_HighestPVC = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 21), Integer32()).setLabel("x25Profile-HighestPVC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_HighestPVC.setStatus('mandatory')
x25Profile_LowestSVC = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 22), Integer32()).setLabel("x25Profile-LowestSVC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_LowestSVC.setStatus('mandatory')
x25Profile_HighestSVC = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 23), Integer32()).setLabel("x25Profile-HighestSVC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_HighestSVC.setStatus('mandatory')
x25Profile_ClearDiag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("x25Profile-ClearDiag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_ClearDiag.setStatus('mandatory')
x25Profile_ResetDiag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("x25Profile-ResetDiag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_ResetDiag.setStatus('mandatory')
x25Profile_RestartDiag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("x25Profile-RestartDiag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_RestartDiag.setStatus('mandatory')
x25Profile_Pktdiag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("x25Profile-Pktdiag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_Pktdiag.setStatus('mandatory')
x25Profile_PktOptions = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("npws", 2), ("afna", 3), ("npwsAfna", 4)))).setLabel("x25Profile-PktOptions").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_PktOptions.setStatus('mandatory')
x25Profile_PktT20 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 28), Integer32()).setLabel("x25Profile-PktT20").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_PktT20.setStatus('mandatory')
x25Profile_PktR20 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 29), Integer32()).setLabel("x25Profile-PktR20").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_PktR20.setStatus('mandatory')
x25Profile_PktT21 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 30), Integer32()).setLabel("x25Profile-PktT21").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_PktT21.setStatus('mandatory')
x25Profile_PktT22 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 31), Integer32()).setLabel("x25Profile-PktT22").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_PktT22.setStatus('mandatory')
x25Profile_PktR22 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 32), Integer32()).setLabel("x25Profile-PktR22").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_PktR22.setStatus('mandatory')
x25Profile_PktT23 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 33), Integer32()).setLabel("x25Profile-PktT23").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_PktT23.setStatus('mandatory')
x25Profile_PktR23 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 34), Integer32()).setLabel("x25Profile-PktR23").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_PktR23.setStatus('mandatory')
x25Profile_X25SrcAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 50), DisplayString()).setLabel("x25Profile-X25SrcAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_X25SrcAddress.setStatus('mandatory')
x25Profile_DteFlag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setLabel("x25Profile-DteFlag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_DteFlag.setStatus('mandatory')
x25Profile_NetType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccitt", 1), ("ddn", 2)))).setLabel("x25Profile-NetType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_NetType.setStatus('mandatory')
x25Profile_oDiscMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setLabel("x25Profile-oDiscMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oDiscMode.setStatus('mandatory')
x25Profile_oSeqNumbers = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("extended", 2)))).setLabel("x25Profile-oSeqNumbers").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oSeqNumbers.setStatus('mandatory')
x25Profile_ReverseChargeAcceptance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("x25Profile-ReverseChargeAcceptance").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_ReverseChargeAcceptance.setStatus('mandatory')
x25Profile_ClosedUserGroups = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("noiob", 2), ("noioe", 3), ("prefb", 4), ("prefe", 5), ("oab", 6), ("oae", 7)))).setLabel("x25Profile-ClosedUserGroups").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_ClosedUserGroups.setStatus('mandatory')
x25Profile_oVceTimerVal = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 41), Integer32()).setLabel("x25Profile-oVceTimerVal").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oVceTimerVal.setStatus('mandatory')
x25Profile_oX25DTeiValue = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 42), Integer32()).setLabel("x25Profile-oX25DTeiValue").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oX25DTeiValue.setStatus('mandatory')
x25Profile_oPriNumberValue = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 43), DisplayString()).setLabel("x25Profile-oPriNumberValue").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_oPriNumberValue.setStatus('mandatory')
x25Profile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 140, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("x25Profile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Profile_Action_o.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-MIBX25-MIB", x25Profile_LowestPVC=x25Profile_LowestPVC, x25Profile_PktT21=x25Profile_PktT21, DisplayString=DisplayString, mibx25ProfileEntry=mibx25ProfileEntry, x25Profile_ClosedUserGroups=x25Profile_ClosedUserGroups, x25Profile_DteFlag=x25Profile_DteFlag, x25Profile_PktR22=x25Profile_PktR22, x25Profile_SwitchedCallType=x25Profile_SwitchedCallType, mibx25ProfileTable=mibx25ProfileTable, x25Profile_Action_o=x25Profile_Action_o, x25Profile_NailedMode=x25Profile_NailedMode, x25Profile_X25SrcAddress=x25Profile_X25SrcAddress, x25Profile_BillingNumber=x25Profile_BillingNumber, x25Profile_Defpktsize=x25Profile_Defpktsize, x25Profile_PktT20=x25Profile_PktT20, x25Profile_oMaxPktSize=x25Profile_oMaxPktSize, x25Profile_RestartDiag=x25Profile_RestartDiag, x25Profile_LowestSVC=x25Profile_LowestSVC, x25Profile_NailedUpGroup=x25Profile_NailedUpGroup, x25Profile_Defwinsize=x25Profile_Defwinsize, x25Profile_oPktSize=x25Profile_oPktSize, x25Profile_HighestSVC=x25Profile_HighestSVC, x25Profile_ClearDiag=x25Profile_ClearDiag, x25Profile_PktOptions=x25Profile_PktOptions, x25Profile_ReverseChargeAcceptance=x25Profile_ReverseChargeAcceptance, x25Profile_oVceTimerVal=x25Profile_oVceTimerVal, x25Profile_TransitNumber=x25Profile_TransitNumber, x25Profile_CalledNumberType=x25Profile_CalledNumberType, x25Profile_CallByCallId=x25Profile_CallByCallId, x25Profile_NetType=x25Profile_NetType, x25Profile_oDiscMode=x25Profile_oDiscMode, x25Profile_IdleVal=x25Profile_IdleVal, x25Profile_X25Name=x25Profile_X25Name, x25Profile_PktR23=x25Profile_PktR23, x25Profile_oN2Val=x25Profile_oN2Val, x25Profile_PktT23=x25Profile_PktT23, x25Profile_oT2Val=x25Profile_oT2Val, x25Profile_PhoneNumber=x25Profile_PhoneNumber, x25Profile_PktT22=x25Profile_PktT22, x25Profile_oSeqNumbers=x25Profile_oSeqNumbers, x25Profile_Pktdiag=x25Profile_Pktdiag, x25Profile_Active=x25Profile_Active, x25Profile_Kludge=x25Profile_Kludge, x25Profile_KVal=x25Profile_KVal, mibx25Profile=mibx25Profile, x25Profile_ResetDiag=x25Profile_ResetDiag, x25Profile_PktR20=x25Profile_PktR20, x25Profile_oX25DTeiValue=x25Profile_oX25DTeiValue, x25Profile_oMinPktSize=x25Profile_oMinPktSize, x25Profile_oPriNumberValue=x25Profile_oPriNumberValue, x25Profile_oPktWindow=x25Profile_oPktWindow, x25Profile_Maxwinsize=x25Profile_Maxwinsize, x25Profile_HighestPVC=x25Profile_HighestPVC, x25Profile_oT1Val=x25Profile_oT1Val)
