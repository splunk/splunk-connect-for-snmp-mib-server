#
# PySNMP MIB module CPQIDA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQIDA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Unsigned32, MibIdentifier, ObjectIdentity, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, NotificationType, Gauge32, NotificationType, Counter32, IpAddress, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "ObjectIdentity", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "NotificationType", "Gauge32", "NotificationType", "Counter32", "IpAddress", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqDriveArray = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3))
cpqDaMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 1))
cpqDaComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2))
cpqDaTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 3))
cpqDaInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 1))
cpqDaCntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 2))
cpqDaLogDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 3))
cpqDaSpareDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 4))
cpqDaPhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 5))
cpqDaPhyDrvThr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 6))
cpqDaCntlrPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 7))
cpqDaLogDrvPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 8))
cpqDaTapeDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 9))
cpqDaTapeCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 10))
cpqDaTapeLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 11))
cpqDaOsNetWare3x = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1))
cpqDaOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4))
cpqDaMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaMibRevMajor.setStatus('mandatory')
cpqDaMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaMibRevMinor.setStatus('mandatory')
cpqDaMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaMibCondition.setStatus('mandatory')
cpqDaNw3xDriverName = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xDriverName.setStatus('deprecated')
cpqDaNw3xDriverVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xDriverVer.setStatus('deprecated')
cpqDaNw3xPollType = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("polled", 2), ("demand", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xPollType.setStatus('deprecated')
cpqDaNw3xPollTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xPollTime.setStatus('deprecated')
cpqDaNw3xDriverStatTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5), )
if mibBuilder.loadTexts: cpqDaNw3xDriverStatTable.setStatus('deprecated')
cpqDaNw3xDriverStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaNw3xCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaNw3xLogDrvIndex"))
if mibBuilder.loadTexts: cpqDaNw3xDriverStatEntry.setStatus('deprecated')
cpqDaNw3xCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xCntlrIndex.setStatus('deprecated')
cpqDaNw3xLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xLogDrvIndex.setStatus('deprecated')
cpqDaNw3xTotalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xTotalReads.setStatus('deprecated')
cpqDaNw3xTotalWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xTotalWrites.setStatus('deprecated')
cpqDaNw3xCorrReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xCorrReads.setStatus('deprecated')
cpqDaNw3xCorrWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xCorrWrites.setStatus('deprecated')
cpqDaNw3xFatalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xFatalReads.setStatus('deprecated')
cpqDaNw3xFatalWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xFatalWrites.setStatus('deprecated')
cpqDaNw3xVolMapTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 6), )
if mibBuilder.loadTexts: cpqDaNw3xVolMapTable.setStatus('deprecated')
cpqDaNw3xVolMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 6, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaNw3xVolCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaNw3xVolLogDrvIndex"))
if mibBuilder.loadTexts: cpqDaNw3xVolMapEntry.setStatus('deprecated')
cpqDaNw3xVolCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xVolCntlrIndex.setStatus('deprecated')
cpqDaNw3xVolLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xVolLogDrvIndex.setStatus('deprecated')
cpqDaNw3xVolMap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaNw3xVolMap.setStatus('deprecated')
cpqDaOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqDaOsCommonPollFreq.setStatus('mandatory')
cpqDaOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqDaOsCommonModuleTable.setStatus('deprecated')
cpqDaOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqDaOsCommonModuleEntry.setStatus('deprecated')
cpqDaOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaOsCommonModuleIndex.setStatus('deprecated')
cpqDaOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaOsCommonModuleName.setStatus('deprecated')
cpqDaOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaOsCommonModuleVersion.setStatus('deprecated')
cpqDaOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaOsCommonModuleDate.setStatus('deprecated')
cpqDaOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaOsCommonModulePurpose.setStatus('deprecated')
cpqDaOsCommonCollectionReset = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("resetSupported", 2), ("resetNotSupported", 3), ("doReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqDaOsCommonCollectionReset.setStatus('optional')
cpqDaCntlrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1), )
if mibBuilder.loadTexts: cpqDaCntlrTable.setStatus('mandatory')
cpqDaCntlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaCntlrIndex"))
if mibBuilder.loadTexts: cpqDaCntlrEntry.setStatus('mandatory')
cpqDaCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrIndex.setStatus('mandatory')
cpqDaCntlrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69))).clone(namedValues=NamedValues(("other", 1), ("ida", 2), ("idaExpansion", 3), ("ida-2", 4), ("smart", 5), ("smart-2e", 6), ("smart-2p", 7), ("smart-2sl", 8), ("smart-3100es", 9), ("smart-3200", 10), ("smart-2dh", 11), ("smart-221", 12), ("sa-4250es", 13), ("sa-4200", 14), ("sa-integrated", 15), ("sa-431", 16), ("sa-5300", 17), ("raidLc2", 18), ("sa-5i", 19), ("sa-532", 20), ("sa-5312", 21), ("sa-641", 22), ("sa-642", 23), ("sa-6400", 24), ("sa-6400em", 25), ("sa-6i", 26), ("sa-generic", 27), ("sa-p600", 29), ("sa-p400", 30), ("sa-e200", 31), ("sa-e200i", 32), ("sa-p400i", 33), ("sa-p800", 34), ("sa-e500", 35), ("sa-p700m", 36), ("sa-p212", 37), ("sa-p410", 38), ("sa-p410i", 39), ("sa-p411", 40), ("sa-b110i", 41), ("sa-p712m", 42), ("sa-p711m", 43), ("sa-p812", 44), ("sw-1210m", 45), ("sa-p220i", 46), ("sa-p222", 47), ("sa-p420", 48), ("sa-p420i", 49), ("sa-p421", 50), ("sa-b320i", 51), ("sa-p822", 52), ("sa-p721m", 53), ("sa-b120i", 54), ("hps-1224", 55), ("hps-1228", 56), ("hps-1228m", 57), ("sa-p822se", 58), ("hps-1224e", 59), ("hps-1228e", 60), ("hps-1228em", 61), ("sa-p230i", 62), ("sa-p430i", 63), ("sa-p430", 64), ("sa-p431", 65), ("sa-p731m", 66), ("sa-p830i", 67), ("sa-p830", 68), ("sa-p831", 69)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrModel.setStatus('mandatory')
cpqDaCntlrFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrFWRev.setStatus('mandatory')
cpqDaCntlrStndIntr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("secondary", 3), ("disabled", 4), ("unavailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrStndIntr.setStatus('mandatory')
cpqDaCntlrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrSlot.setStatus('mandatory')
cpqDaCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrCondition.setStatus('mandatory')
cpqDaCntlrProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrProductRev.setStatus('mandatory')
cpqDaCntlrPartnerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPartnerSlot.setStatus('mandatory')
cpqDaCntlrCurrentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notDuplexed", 2), ("active", 3), ("backup", 4), ("asymActiveActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrCurrentRole.setStatus('mandatory')
cpqDaCntlrBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("generalFailure", 3), ("cableProblem", 4), ("poweredOff", 5), ("cacheModuleMissing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrBoardStatus.setStatus('mandatory')
cpqDaCntlrPartnerBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("generalFailure", 3), ("cableProblem", 4), ("poweredOff", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPartnerBoardStatus.setStatus('mandatory')
cpqDaCntlrBoardCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrBoardCondition.setStatus('mandatory')
cpqDaCntlrPartnerBoardCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPartnerBoardCondition.setStatus('mandatory')
cpqDaCntlrDriveOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("owner", 2), ("notOwner", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrDriveOwnership.setStatus('mandatory')
cpqDaCntlrSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrSerialNumber.setStatus('mandatory')
cpqDaCntlrRedundancyType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("driverDuplexing", 3), ("fwActiveStandby", 4), ("fwPrimarySecondary", 5), ("fwActiveActive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrRedundancyType.setStatus('mandatory')
cpqDaCntlrRedundancyError = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("noFailure", 2), ("noRedundantController", 3), ("differentHardware", 4), ("noLink", 5), ("differentFirmware", 6), ("differentCache", 7), ("otherCacheFailure", 8), ("noDrives", 9), ("otherNoDrives", 10), ("unsupportedDrives", 11), ("expandInProgress", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrRedundancyError.setStatus('mandatory')
cpqDaCntlrAccessModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notPresent", 3), ("badSignature", 4), ("badChecksum", 5), ("fullyFunctional", 6), ("upgradeFirmware", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrAccessModuleStatus.setStatus('mandatory')
cpqDaCntlrDaughterBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notPresent", 3), ("scsiBoardPresent", 4), ("fibreBoardPresent", 5), ("arrayExpansionModulePresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrDaughterBoardType.setStatus('mandatory')
cpqDaCntlrHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrHwLocation.setStatus('mandatory')
cpqDaCntlrNumberOfBuses = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrNumberOfBuses.setStatus('mandatory')
cpqDaCntlrBlinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqDaCntlrBlinkTime.setStatus('mandatory')
cpqDaCntlrRebuildPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrRebuildPriority.setStatus('mandatory')
cpqDaCntlrExpandPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrExpandPriority.setStatus('mandatory')
cpqDaCntlrNumberOfInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrNumberOfInternalPorts.setStatus('mandatory')
cpqDaCntlrNumberOfExternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrNumberOfExternalPorts.setStatus('mandatory')
cpqDaCntlrDriveWriteCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrDriveWriteCacheState.setStatus('mandatory')
cpqDaCntlrPartnerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPartnerSerialNumber.setStatus('mandatory')
cpqDaCntlrOptionRomRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrOptionRomRev.setStatus('mandatory')
cpqDaCntlrHbaFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrHbaFWRev.setStatus('mandatory')
cpqDaCntlrHBAModeOptionRomRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrHBAModeOptionRomRev.setStatus('mandatory')
cpqDaCntlrCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrCurrentTemp.setStatus('mandatory')
cpqDaCntlrLastLockupCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrLastLockupCode.setStatus('mandatory')
cpqDaCntlrEncryptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notEnabled", 2), ("enabledLocalKeyMode", 3), ("enabledRemoteKeyManagerMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrEncryptionStatus.setStatus('mandatory')
cpqDaCntlrASICEncptSelfTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("selfTestsPass", 2), ("selfTestsFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrASICEncptSelfTestStatus.setStatus('mandatory')
cpqDaCntlrEncryptCspNvramStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("detectionFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrEncryptCspNvramStatus.setStatus('mandatory')
cpqDaCntlrEncryptCryptoOfficerPwdSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("false", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrEncryptCryptoOfficerPwdSetStatus.setStatus('mandatory')
cpqDaCntlrEncryptCntlrPwdSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("false", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrEncryptCntlrPwdSetStatus.setStatus('mandatory')
cpqDaCntlrEncryptCntlrPwdAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("passwordMissing", 2), ("passwordActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrEncryptCntlrPwdAvailStatus.setStatus('mandatory')
cpqDaCntlrUnencryptedLogDrvCreationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("false", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrUnencryptedLogDrvCreationPolicy.setStatus('mandatory')
cpqDaCntlrEncryptedLogDrvCreationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("false", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrEncryptedLogDrvCreationPolicy.setStatus('mandatory')
cpqDaCntlrEncryptFWLockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("false", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrEncryptFWLockStatus.setStatus('mandatory')
cpqDaAccelTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2), )
if mibBuilder.loadTexts: cpqDaAccelTable.setStatus('mandatory')
cpqDaAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaAccelCntlrIndex"))
if mibBuilder.loadTexts: cpqDaAccelEntry.setStatus('mandatory')
cpqDaAccelCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelCntlrIndex.setStatus('mandatory')
cpqDaAccelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("enabled", 3), ("tmpDisabled", 4), ("permDisabled", 5), ("cacheModFlashMemNotAttached", 6), ("cacheModDegradedFailsafeSpeed", 7), ("cacheModCriticalFailure", 8), ("cacheReadCacheNotMapped", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelStatus.setStatus('mandatory')
cpqDaAccelMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelMemory.setStatus('mandatory')
cpqDaAccelBadData = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("possible", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelBadData.setStatus('mandatory')
cpqDaAccelErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("badConfig", 3), ("lowBattery", 4), ("disableCmd", 5), ("noResources", 6), ("notConnected", 7), ("badMirrorData", 8), ("readErr", 9), ("writeErr", 10), ("configCmd", 11), ("expandInProgress", 12), ("snapshotInProgress", 13), ("redundantLowBattery", 14), ("redundantSizeMismatch", 15), ("redundantCacheFailure", 16), ("excessiveEccErrors", 17), ("adgEnablerMissing", 18), ("postEccErrors", 19), ("batteryHotRemoved", 20), ("capacitorChargeLow", 21), ("notEnoughBatteries", 22), ("cacheModuleNotSupported", 23), ("batteryNotSupported", 24), ("noCapacitorAttached", 25), ("capBasedBackupFailed", 26), ("capBasedRestoreFailed", 27), ("capBasedModuleHWFailure", 28), ("capacitorFailedToCharge", 29), ("capacitorBasedHWMemBeingErased", 30), ("incompatibleCacheModule", 31), ("fbcmChargerCircuitFailure", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelErrCode.setStatus('mandatory')
cpqDaAccelBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("recharging", 3), ("failed", 4), ("degraded", 5), ("notPresent", 6), ("capacitorFailed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelBattery.setStatus('mandatory')
cpqDaAccelReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelReadErrs.setStatus('mandatory')
cpqDaAccelWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelWriteErrs.setStatus('mandatory')
cpqDaAccelCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelCondition.setStatus('mandatory')
cpqDaAccelReadMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelReadMemory.setStatus('mandatory')
cpqDaAccelSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelSerialNumber.setStatus('mandatory')
cpqDaAccelTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelTotalMemory.setStatus('mandatory')
cpqDaAccelReadCachePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelReadCachePercent.setStatus('mandatory')
cpqDaAccelWriteCachePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelWriteCachePercent.setStatus('mandatory')
cpqDaAccelFailedBatteries = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelFailedBatteries.setStatus('mandatory')
cpqDaAccelBackupPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("battery", 2), ("capacitor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelBackupPowerSource.setStatus('mandatory')
cpqDaAccelBoardCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelBoardCurrentTemp.setStatus('mandatory')
cpqDaAccelCapacitorCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelCapacitorCurrentTemp.setStatus('mandatory')
cpqDaAccelMemoryDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelMemoryDataWidth.setStatus('mandatory')
cpqDaAccelMemoryTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaAccelMemoryTransferRate.setStatus('mandatory')
cpqDaManagedCableTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3), )
if mibBuilder.loadTexts: cpqDaManagedCableTable.setStatus('mandatory')
cpqDaManagedCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaManagedCableCntlrIndex"))
if mibBuilder.loadTexts: cpqDaManagedCableEntry.setStatus('mandatory')
cpqDaManagedCableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaManagedCableIndex.setStatus('mandatory')
cpqDaManagedCableCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaManagedCableCntlrIndex.setStatus('mandatory')
cpqDaManagedCableHostConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaManagedCableHostConnector.setStatus('mandatory')
cpqDaManagedCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("nonFatalFault", 3), ("fatalFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaManagedCableStatus.setStatus('mandatory')
cpqDaManagedCableFaultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("linkFault", 3), ("noComWithCableMgmtInterface", 4), ("cannotConfigureCable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaManagedCableFaultCode.setStatus('mandatory')
cpqDaManagedCableVendorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaManagedCableVendorRevision.setStatus('mandatory')
cpqDaManagedCableVendorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaManagedCableVendorSerialNumber.setStatus('mandatory')
cpqDaManagedCableVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaManagedCableVendorPartNumber.setStatus('mandatory')
cpqDaManagedCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaManagedCableLength.setStatus('mandatory')
cpqDaLogDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1), )
if mibBuilder.loadTexts: cpqDaLogDrvTable.setStatus('mandatory')
cpqDaLogDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaLogDrvIndex"))
if mibBuilder.loadTexts: cpqDaLogDrvEntry.setStatus('mandatory')
cpqDaLogDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCntlrIndex.setStatus('mandatory')
cpqDaLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvIndex.setStatus('mandatory')
cpqDaLogDrvFaultTol = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("mirroring", 3), ("dataGuard", 4), ("distribDataGuard", 5), ("advancedDataGuard", 7), ("raid50", 8), ("raid60", 9), ("raid1Adm", 10), ("raid10Adm", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvFaultTol.setStatus('mandatory')
cpqDaLogDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("unconfigured", 4), ("recovering", 5), ("readyForRebuild", 6), ("rebuilding", 7), ("wrongDrive", 8), ("badConnect", 9), ("overheating", 10), ("shutdown", 11), ("expanding", 12), ("notAvailable", 13), ("queuedForExpansion", 14), ("multipathAccessDegraded", 15), ("erasing", 16), ("predictiveSpareRebuildReady", 17), ("rapidParityInitInProgress", 18), ("rapidParityInitPending", 19), ("noAccessEncryptedNoCntlrKey", 20), ("unencryptedToEncryptedInProgress", 21), ("newLogDrvKeyRekeyInProgress", 22), ("noAccessEncryptedCntlrEncryptnNotEnbld", 23), ("unencryptedToEncryptedNotStarted", 24), ("newLogDrvKeyRekeyRequestReceived", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvStatus.setStatus('mandatory')
cpqDaLogDrvAutoRel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqDaLogDrvAutoRel.setStatus('mandatory')
cpqDaLogDrvRebuildBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvRebuildBlks.setStatus('deprecated')
cpqDaLogDrvHasAccel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unavailable", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvHasAccel.setStatus('mandatory')
cpqDaLogDrvAvailSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvAvailSpares.setStatus('deprecated')
cpqDaLogDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvSize.setStatus('mandatory')
cpqDaLogDrvPhyDrvIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPhyDrvIDs.setStatus('deprecated')
cpqDaLogDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCondition.setStatus('mandatory')
cpqDaLogDrvPercentRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPercentRebuild.setStatus('mandatory')
cpqDaLogDrvStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvStripeSize.setStatus('mandatory')
cpqDaLogDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvOsName.setStatus('mandatory')
cpqDaLogDrvBlinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqDaLogDrvBlinkTime.setStatus('mandatory')
cpqDaLogDrvSpareReplaceMap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvSpareReplaceMap.setStatus('deprecated')
cpqDaLogDrvRebuildingPhyDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvRebuildingPhyDrv.setStatus('mandatory')
cpqDaLogDrvMultipathAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notConfigured", 3), ("pathRedundant", 4), ("noRedundantPath", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvMultipathAccess.setStatus('mandatory')
cpqDaLogDrvNmbrOfParityGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvNmbrOfParityGroups.setStatus('mandatory')
cpqDaLogDrvSplitMirrorBackupLogDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("isNotBackupLogicalDrive", 2), ("isBackupLogicalDrive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvSplitMirrorBackupLogDrv.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelAssocType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("nonMember", 2), ("logicalDriveMember", 3), ("cacheVolumeMember", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelAssocType.setStatus('mandatory')
cpqDaLogDrvCacheVolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolIndex.setStatus('mandatory')
cpqDaLogDrvRPIPercentComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvRPIPercentComplete.setStatus('mandatory')
cpqDaLogDrvSSDSmartPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("updateDriver", 2), ("ssdSmartPathDisabled", 3), ("ssdSmartPathEnabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvSSDSmartPathStatus.setStatus('mandatory')
cpqDaLogDrvEncryptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("encrypted", 2), ("notEncrypted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvEncryptionStatus.setStatus('mandatory')
cpqDaLogDrvPhyDrvExtAttachTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2), )
if mibBuilder.loadTexts: cpqDaLogDrvPhyDrvExtAttachTable.setStatus('mandatory')
cpqDaLogDrvPhyDrvExtAttachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvPhyDrvAttachExtIndex"))
if mibBuilder.loadTexts: cpqDaLogDrvPhyDrvExtAttachEntry.setStatus('mandatory')
cpqDaLogDrvPhyDrvAttachExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPhyDrvAttachExtIndex.setStatus('mandatory')
cpqDaLogDrvCntlrExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCntlrExtended.setStatus('mandatory')
cpqDaLogDrvLogDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvLogDrvExtended.setStatus('mandatory')
cpqDaLogDrvPhyDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPhyDrvExtended.setStatus('mandatory')
cpqDaLogDrvSprRplcExtAttachTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3), )
if mibBuilder.loadTexts: cpqDaLogDrvSprRplcExtAttachTable.setStatus('mandatory')
cpqDaLogDrvSprRplcExtAttachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvSprRplcAttachExtIndex"))
if mibBuilder.loadTexts: cpqDaLogDrvSprRplcExtAttachEntry.setStatus('mandatory')
cpqDaLogDrvSprRplcAttachExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvSprRplcAttachExtIndex.setStatus('mandatory')
cpqDaLogDrvSprRplcCntlrExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvSprRplcCntlrExtended.setStatus('mandatory')
cpqDaLogDrvSprRplcLogDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvSprRplcLogDrvExtended.setStatus('mandatory')
cpqDaLogDrvSprRplcReplacedPhysDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvSprRplcReplacedPhysDrvExtended.setStatus('mandatory')
cpqDaLogDrvSprRplcSparePhysDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvSprRplcSparePhysDrvExtended.setStatus('mandatory')
cpqDaLogDrvAvalSprExtAttachTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4), )
if mibBuilder.loadTexts: cpqDaLogDrvAvalSprExtAttachTable.setStatus('mandatory')
cpqDaLogDrvAvalSprExtAttachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvAvailSprAttachExtIndex"))
if mibBuilder.loadTexts: cpqDaLogDrvAvalSprExtAttachEntry.setStatus('mandatory')
cpqDaLogDrvAvailSprAttachExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvAvailSprAttachExtIndex.setStatus('mandatory')
cpqDaLogDrvAvailSprCntlrExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvAvailSprCntlrExtended.setStatus('mandatory')
cpqDaLogDrvAvailSprLogDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvAvailSprLogDrvExtended.setStatus('mandatory')
cpqDaLogDrvAvailSprAvailableSpareExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvAvailSprAvailableSpareExtended.setStatus('mandatory')
cpqDaLogDrvCacheVolumeAccelTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5), )
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolumeAccelTable.setStatus('mandatory')
cpqDaLogDrvCacheVolumeAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvCacheVolAccelCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaLogDrvCacheVolAccelLogDrvIndex"))
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolumeAccelEntry.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelCntlrIndex.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelLogDrvIndex.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelCachingAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("multiSegment", 2), ("singleSegment", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelCachingAlgorithm.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("cacheVolOffline", 4), ("logDriveOffline", 5), ("neverConfigured", 6), ("flushing", 7), ("configuring", 8), ("cacheConfigurationFailed", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelCacheState.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("readOnly", 2), ("writeThrough", 3), ("writeBackSafe", 4), ("writeBackUnsafe", 5), ("writeThroughNoLoad", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelWritePolicy.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadHitsH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadHitsH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadHits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadHits.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoadH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoadH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoad.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadMissLoadingH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadMissLoadingH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadMissLoading = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadMissLoading.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadMissSkipH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadMissSkipH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadMissSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadMissSkip.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelReadCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelReadCacheHitRate.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteHitsH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteHitsH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteHits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteHits.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoadH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoadH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoad.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteMissLoadingH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteMissLoadingH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteMissLoading = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteMissLoading.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteMissSkipH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteMissSkipH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteMissSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteMissSkip.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelWriteCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelWriteCacheHitRate.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelLoadFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelLoadFailures.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelCacheLineSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelCacheLineSize.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadMissLockedH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadMissLockedH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadMissLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadMissLocked.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteMissLockedH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteMissLockedH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteMissLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteMissLocked.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadMissTotalH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadMissTotalH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfReadMissTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfReadMissTotal.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteMissTotalH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteMissTotalH.setStatus('mandatory')
cpqDaLogDrvCacheVolAccelNoOfWriteMissTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvCacheVolAccelNoOfWriteMissTotal.setStatus('mandatory')
cpqDaSpareTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1), )
if mibBuilder.loadTexts: cpqDaSpareTable.setStatus('mandatory')
cpqDaSpareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaSpareCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaSparePhyDrvIndex"))
if mibBuilder.loadTexts: cpqDaSpareEntry.setStatus('mandatory')
cpqDaSpareCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSpareCntlrIndex.setStatus('mandatory')
cpqDaSparePhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSparePhyDrvIndex.setStatus('mandatory')
cpqDaSpareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("failed", 3), ("inactive", 4), ("building", 5), ("active", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSpareStatus.setStatus('mandatory')
cpqDaSpareReplacedDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSpareReplacedDrv.setStatus('mandatory')
cpqDaSpareRebuildBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSpareRebuildBlks.setStatus('deprecated')
cpqDaSpareCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSpareCondition.setStatus('mandatory')
cpqDaSpareBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSpareBusNumber.setStatus('mandatory')
cpqDaSpareBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSpareBay.setStatus('mandatory')
cpqDaSpareReplacedDrvBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSpareReplacedDrvBusNumber.setStatus('mandatory')
cpqDaSpareReplacedDrvBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSpareReplacedDrvBay.setStatus('mandatory')
cpqDaSparePercentRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSparePercentRebuild.setStatus('mandatory')
cpqDaSpareLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaSpareLocationString.setStatus('mandatory')
cpqDaPhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1), )
if mibBuilder.loadTexts: cpqDaPhyDrvTable.setStatus('mandatory')
cpqDaPhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvIndex"))
if mibBuilder.loadTexts: cpqDaPhyDrvEntry.setStatus('mandatory')
cpqDaPhyDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvCntlrIndex.setStatus('mandatory')
cpqDaPhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvIndex.setStatus('mandatory')
cpqDaPhyDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvModel.setStatus('mandatory')
cpqDaPhyDrvFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvFWRev.setStatus('mandatory')
cpqDaPhyDrvBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvBay.setStatus('mandatory')
cpqDaPhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("predictiveFailure", 4), ("erasing", 5), ("eraseDone", 6), ("eraseQueued", 7), ("ssdWearOut", 8), ("notAuthenticated", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvStatus.setStatus('mandatory')
cpqDaPhyDrvFactReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvFactReallocs.setStatus('mandatory')
cpqDaPhyDrvUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvUsedReallocs.setStatus('mandatory')
cpqDaPhyDrvRefHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvRefHours.setStatus('mandatory')
cpqDaPhyDrvHReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHReads.setStatus('mandatory')
cpqDaPhyDrvReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvReads.setStatus('mandatory')
cpqDaPhyDrvHWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHWrites.setStatus('mandatory')
cpqDaPhyDrvWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvWrites.setStatus('mandatory')
cpqDaPhyDrvHSeeks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHSeeks.setStatus('mandatory')
cpqDaPhyDrvSeeks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSeeks.setStatus('mandatory')
cpqDaPhyDrvHardReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHardReadErrs.setStatus('mandatory')
cpqDaPhyDrvRecvReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvRecvReadErrs.setStatus('mandatory')
cpqDaPhyDrvHardWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHardWriteErrs.setStatus('mandatory')
cpqDaPhyDrvRecvWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvRecvWriteErrs.setStatus('mandatory')
cpqDaPhyDrvHSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHSeekErrs.setStatus('mandatory')
cpqDaPhyDrvSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSeekErrs.setStatus('mandatory')
cpqDaPhyDrvSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSpinupTime.setStatus('mandatory')
cpqDaPhyDrvFunctTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvFunctTest1.setStatus('deprecated')
cpqDaPhyDrvFunctTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvFunctTest2.setStatus('deprecated')
cpqDaPhyDrvFunctTest3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvFunctTest3.setStatus('deprecated')
cpqDaPhyDrvDrqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvDrqTimeouts.setStatus('mandatory')
cpqDaPhyDrvOtherTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvOtherTimeouts.setStatus('mandatory')
cpqDaPhyDrvSpinupRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSpinupRetries.setStatus('mandatory')
cpqDaPhyDrvBadRecvReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvBadRecvReads.setStatus('mandatory')
cpqDaPhyDrvBadRecvWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvBadRecvWrites.setStatus('mandatory')
cpqDaPhyDrvFormatErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvFormatErrs.setStatus('mandatory')
cpqDaPhyDrvPostErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPostErrs.setStatus('mandatory')
cpqDaPhyDrvNotReadyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvNotReadyErrs.setStatus('mandatory')
cpqDaPhyDrvReallocAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvReallocAborts.setStatus('mandatory')
cpqDaPhyDrvThreshPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThreshPassed.setStatus('mandatory')
cpqDaPhyDrvHasMonInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHasMonInfo.setStatus('mandatory')
cpqDaPhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvCondition.setStatus('mandatory')
cpqDaPhyDrvHotPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHotPlugs.setStatus('mandatory')
cpqDaPhyDrvMediaErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvMediaErrs.setStatus('mandatory')
cpqDaPhyDrvHardwareErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHardwareErrs.setStatus('mandatory')
cpqDaPhyDrvAbortedCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvAbortedCmds.setStatus('mandatory')
cpqDaPhyDrvSpinUpErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSpinUpErrs.setStatus('mandatory')
cpqDaPhyDrvBadTargetErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvBadTargetErrs.setStatus('mandatory')
cpqDaPhyDrvLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3), ("proLiant", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvLocation.setStatus('deprecated')
cpqDaPhyDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSize.setStatus('mandatory')
cpqDaPhyDrvBusFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvBusFaults.setStatus('mandatory')
cpqDaPhyDrvIrqDeglitches = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvIrqDeglitches.setStatus('mandatory')
cpqDaPhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHotPlug.setStatus('mandatory')
cpqDaPhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPlacement.setStatus('mandatory')
cpqDaPhyDrvBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvBusNumber.setStatus('mandatory')
cpqDaPhyDrvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSerialNum.setStatus('mandatory')
cpqDaPhyDrvPreFailMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notAvailable", 2), ("available", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPreFailMonitoring.setStatus('mandatory')
cpqDaPhyDrvCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvCurrentWidth.setStatus('mandatory')
cpqDaPhyDrvCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6), ("ultra320", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvCurrentSpeed.setStatus('mandatory')
cpqDaPhyDrvFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvFailureCode.setStatus('mandatory')
cpqDaPhyDrvBlinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 56), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqDaPhyDrvBlinkTime.setStatus('mandatory')
cpqDaPhyDrvSmartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("replaceDrive", 3), ("replaceDriveSSDWearOut", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSmartStatus.setStatus('mandatory')
cpqDaPhyDrvConfigurationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("configured", 2), ("notConfigured", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvConfigurationStatus.setStatus('mandatory')
cpqDaPhyDrvRotationalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("rpm7200", 2), ("rpm10K", 3), ("rpm15K", 4), ("rpmSsd", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvRotationalSpeed.setStatus('mandatory')
cpqDaPhyDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("parallelScsi", 2), ("sata", 3), ("sas", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvType.setStatus('mandatory')
cpqDaPhyDrvSataVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sataOne", 2), ("sataTwo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSataVersion.setStatus('mandatory')
cpqDaPhyDrvHostConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvHostConnector.setStatus('mandatory')
cpqDaPhyDrvBoxOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvBoxOnConnector.setStatus('mandatory')
cpqDaPhyDrvLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvLocationString.setStatus('mandatory')
cpqDaPhyDrvNegotiatedLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("rate-1-5", 2), ("rate-3-0", 3), ("rate-6-0", 4), ("rate-12-0", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvNegotiatedLinkRate.setStatus('mandatory')
cpqDaPhyDrvNcqSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("noControllerSupport", 2), ("noDriveSupport", 3), ("ncqDisabled", 4), ("ncqEnabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvNcqSupport.setStatus('mandatory')
cpqDaPhyDrvPhyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPhyCount.setStatus('mandatory')
cpqDaPhyDrvMultipathAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notConfigured", 3), ("pathRedundant", 4), ("noRedundantPath", 5), ("driveFailed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvMultipathAccess.setStatus('mandatory')
cpqDaPhyDrvMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rotatingPlatters", 2), ("solidState", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvMediaType.setStatus('mandatory')
cpqDaPhyDrvCurrentTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvCurrentTemperature.setStatus('mandatory')
cpqDaPhyDrvTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvTemperatureThreshold.setStatus('mandatory')
cpqDaPhyDrvMaximumTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvMaximumTemperature.setStatus('mandatory')
cpqDaPhyDrvSSDWearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fiftySixDayThreshold", 3), ("fivePercentThreshold", 4), ("twoPercentThreshold", 5), ("ssdWearOut", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSSDWearStatus.setStatus('mandatory')
cpqDaPhyDrvPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPowerOnHours.setStatus('mandatory')
cpqDaPhyDrvSSDPercntEndrnceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSSDPercntEndrnceUsed.setStatus('mandatory')
cpqDaPhyDrvSSDEstTimeRemainingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSSDEstTimeRemainingHours.setStatus('mandatory')
cpqDaPhyDrvAuthenticationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("authenticationFailed", 3), ("authenticationPassed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvAuthenticationStatus.setStatus('mandatory')
cpqDaPhyDrvSmartCarrierAppFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSmartCarrierAppFWRev.setStatus('mandatory')
cpqDaPhyDrvSmartCarrierBootldrFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSmartCarrierBootldrFWRev.setStatus('mandatory')
cpqDaPhyDrvEncryptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("encrypted", 2), ("notEncrypted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvEncryptionStatus.setStatus('mandatory')
cpqDaPhyDrvErrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2), )
if mibBuilder.loadTexts: cpqDaPhyDrvErrTable.setStatus('mandatory')
cpqDaPhyDrvErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaPhyDrvErrCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvErrIDIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvErrIndex"))
if mibBuilder.loadTexts: cpqDaPhyDrvErrEntry.setStatus('mandatory')
cpqDaPhyDrvErrCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvErrCntlrIndex.setStatus('mandatory')
cpqDaPhyDrvErrIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvErrIDIndex.setStatus('mandatory')
cpqDaPhyDrvErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvErrIndex.setStatus('mandatory')
cpqDaPhyDrvErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("noError", 2), ("scsiError", 3), ("camError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvErrType.setStatus('mandatory')
cpqDaPhyDrvScsiOp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvScsiOp.setStatus('mandatory')
cpqDaPhyDrvScsiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvScsiStatus.setStatus('mandatory')
cpqDaPhyDrvCamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvCamStatus.setStatus('mandatory')
cpqDaPhyDrvSenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSenseKey.setStatus('mandatory')
cpqDaPhyDrvQualifier = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvQualifier.setStatus('mandatory')
cpqDaPhyDrvSenseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvSenseCode.setStatus('mandatory')
cpqDaPhyDrvBlockValid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvBlockValid.setStatus('mandatory')
cpqDaPhyDrvBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvBlock.setStatus('mandatory')
cpqDaPhyDrvTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvTime.setStatus('mandatory')
cpqDaPhyDrvUserDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvUserDesc.setStatus('deprecated')
cpqDaPhyDrvErrDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("driveFailure", 1), ("commFailure", 2), ("driveIOError", 3), ("scsiCommError", 4), ("compaqUpgradeRequired", 5), ("driveWriteProtected", 6), ("invalidRequest", 7), ("scsiMessageError", 8), ("controllerFailure", 9), ("internExternConflict", 10), ("internalDriveFailure", 11), ("scsiErrorOutOfRange", 12), ("camErrorOutOfRange", 13), ("errorTypeOutOfRange", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvErrDesc.setStatus('mandatory')
cpqDaPhyDrvPathTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3), )
if mibBuilder.loadTexts: cpqDaPhyDrvPathTable.setStatus('mandatory')
cpqDaPhyDrvPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaPhyDrvPathCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvPathDrvIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvPathIndex"))
if mibBuilder.loadTexts: cpqDaPhyDrvPathEntry.setStatus('mandatory')
cpqDaPhyDrvPathCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPathCntlrIndex.setStatus('mandatory')
cpqDaPhyDrvPathDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPathDrvIndex.setStatus('mandatory')
cpqDaPhyDrvPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPathIndex.setStatus('mandatory')
cpqDaPhyDrvPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("linkDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPathStatus.setStatus('mandatory')
cpqDaPhyDrvPathCurrentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("alternate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPathCurrentRole.setStatus('mandatory')
cpqDaPhyDrvPathHostConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPathHostConnector.setStatus('mandatory')
cpqDaPhyDrvPathBoxOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPathBoxOnConnector.setStatus('mandatory')
cpqDaPhyDrvPathLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvPathLocationString.setStatus('mandatory')
cpqDaPhyDrvThrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1), )
if mibBuilder.loadTexts: cpqDaPhyDrvThrTable.setStatus('mandatory')
cpqDaPhyDrvThrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaPhyDrvThrCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvThrIndex"))
if mibBuilder.loadTexts: cpqDaPhyDrvThrEntry.setStatus('mandatory')
cpqDaPhyDrvThrCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrCntlrIndex.setStatus('mandatory')
cpqDaPhyDrvThrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrIndex.setStatus('mandatory')
cpqDaPhyDrvThrUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrUsedReallocs.setStatus('mandatory')
cpqDaPhyDrvThrRefHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrRefHours.setStatus('mandatory')
cpqDaPhyDrvThrHardReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrHardReadErrs.setStatus('mandatory')
cpqDaPhyDrvThrRecvReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrRecvReadErrs.setStatus('mandatory')
cpqDaPhyDrvThrHardWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrHardWriteErrs.setStatus('mandatory')
cpqDaPhyDrvThrRecvWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrRecvWriteErrs.setStatus('mandatory')
cpqDaPhyDrvThrHSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrHSeekErrs.setStatus('mandatory')
cpqDaPhyDrvThrSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrSeekErrs.setStatus('mandatory')
cpqDaPhyDrvThrSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrSpinupTime.setStatus('mandatory')
cpqDaPhyDrvThrFunctTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrFunctTest1.setStatus('deprecated')
cpqDaPhyDrvThrFunctTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrFunctTest2.setStatus('deprecated')
cpqDaPhyDrvThrFunctTest3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrFunctTest3.setStatus('deprecated')
cpqDaPhyDrvThrDrqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrDrqTimeouts.setStatus('mandatory')
cpqDaPhyDrvThrOtherTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrOtherTimeouts.setStatus('mandatory')
cpqDaPhyDrvThrSpinupRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrSpinupRetries.setStatus('mandatory')
cpqDaPhyDrvThrBadRecvReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrBadRecvReads.setStatus('mandatory')
cpqDaPhyDrvThrBadRecvWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrBadRecvWrites.setStatus('mandatory')
cpqDaPhyDrvThrFormatErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrFormatErrs.setStatus('mandatory')
cpqDaPhyDrvThrPostErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrPostErrs.setStatus('mandatory')
cpqDaPhyDrvThrNotReadyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrNotReadyErrs.setStatus('mandatory')
cpqDaPhyDrvThrReallocAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrReallocAborts.setStatus('mandatory')
cpqDaPhyDrvThrHotPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrHotPlugs.setStatus('mandatory')
cpqDaPhyDrvThrMediaErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrMediaErrs.setStatus('mandatory')
cpqDaPhyDrvThrHardwareErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrHardwareErrs.setStatus('mandatory')
cpqDaPhyDrvThrAbortedCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrAbortedCmds.setStatus('mandatory')
cpqDaPhyDrvThrSpinUpErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrSpinUpErrs.setStatus('mandatory')
cpqDaPhyDrvThrBadTargetErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrBadTargetErrs.setStatus('mandatory')
cpqDaPhyDrvThrViUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4294967295))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 4294967295)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrViUsedReallocs.setStatus('mandatory')
cpqDaPhyDrvThrViSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4294967295))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 4294967295)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrViSpinupTime.setStatus('mandatory')
cpqDaPhyDrvThrViFunctTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4294967295))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 4294967295)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrViFunctTest1.setStatus('mandatory')
cpqDaPhyDrvThrViFunctTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4294967295))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 4294967295)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrViFunctTest2.setStatus('mandatory')
cpqDaPhyDrvThrViFunctTest3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4294967295))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 4294967295)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrViFunctTest3.setStatus('mandatory')
cpqDaPhyDrvThrBusFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrBusFaults.setStatus('mandatory')
cpqDaPhyDrvThrIrqDeglitches = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaPhyDrvThrIrqDeglitches.setStatus('mandatory')
cpqDaCntlrPerfTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1), )
if mibBuilder.loadTexts: cpqDaCntlrPerfTable.setStatus('mandatory')
cpqDaCntlrPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaCntlrPerfCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaCntlrPerfInstance"))
if mibBuilder.loadTexts: cpqDaCntlrPerfEntry.setStatus('mandatory')
cpqDaCntlrPerfCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPerfCntlrIndex.setStatus('mandatory')
cpqDaCntlrPerfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPerfInstance.setStatus('mandatory')
cpqDaCntlrPerfSampleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPerfSampleInterval.setStatus('mandatory')
cpqDaCntlrPerfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPerfVersion.setStatus('mandatory')
cpqDaCntlrPerfCpuPercentBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPerfCpuPercentBusy.setStatus('mandatory')
cpqDaCntlrPerfCommandCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPerfCommandCount.setStatus('mandatory')
cpqDaCntlrPerfAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaCntlrPerfAvgLatency.setStatus('mandatory')
cpqDaLogDrvPerfTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1), )
if mibBuilder.loadTexts: cpqDaLogDrvPerfTable.setStatus('mandatory')
cpqDaLogDrvPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvPerfCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaLogDrvPerfIndex"), (0, "CPQIDA-MIB", "cpqDaLogDrvPerfInstance"))
if mibBuilder.loadTexts: cpqDaLogDrvPerfEntry.setStatus('mandatory')
cpqDaLogDrvPerfCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfCntlrIndex.setStatus('mandatory')
cpqDaLogDrvPerfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfIndex.setStatus('mandatory')
cpqDaLogDrvPerfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfInstance.setStatus('mandatory')
cpqDaLogDrvPerfSampleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfSampleInterval.setStatus('mandatory')
cpqDaLogDrvPerfAvgQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfAvgQueueDepth.setStatus('mandatory')
cpqDaLogDrvPerfReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfReads.setStatus('mandatory')
cpqDaLogDrvPerfWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfWrites.setStatus('mandatory')
cpqDaLogDrvPerfTotalIO = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfTotalIO.setStatus('mandatory')
cpqDaLogDrvPerfCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfCacheHits.setStatus('mandatory')
cpqDaLogDrvPerfCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfCacheMisses.setStatus('mandatory')
cpqDaLogDrvPerfReadAheadSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfReadAheadSectors.setStatus('mandatory')
cpqDaLogDrvPerfSectorsRead = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfSectorsRead.setStatus('mandatory')
cpqDaLogDrvPerfSectorsWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaLogDrvPerfSectorsWritten.setStatus('mandatory')
cpqDaTapeDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1), )
if mibBuilder.loadTexts: cpqDaTapeDrvTable.setStatus('mandatory')
cpqDaTapeDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), (0, "CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), (0, "CPQIDA-MIB", "cpqDaTapeDrvLunIndex"))
if mibBuilder.loadTexts: cpqDaTapeDrvEntry.setStatus('mandatory')
cpqDaTapeDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvCntlrIndex.setStatus('mandatory')
cpqDaTapeDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvBusIndex.setStatus('mandatory')
cpqDaTapeDrvScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvScsiIdIndex.setStatus('mandatory')
cpqDaTapeDrvLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvLunIndex.setStatus('mandatory')
cpqDaTapeDrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvName.setStatus('mandatory')
cpqDaTapeDrvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvSerialNumber.setStatus('mandatory')
cpqDaTapeDrvFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvFwRev.setStatus('mandatory')
cpqDaTapeDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("offline", 5), ("missingWasOk", 6), ("missingWasOffline", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvStatus.setStatus('mandatory')
cpqDaTapeDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvCondition.setStatus('mandatory')
cpqDaTapeDrvFwSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvFwSubtype.setStatus('mandatory')
cpqDaTapeDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("cpqDat4-16", 2), ("cpqDatAuto", 3), ("cpqDat2-8", 4), ("cpqDlt10-20", 5), ("cpqDlt20-40", 6), ("cpqDlt15-30", 7), ("cpqDlt35-70", 8), ("cpqDat4-8", 9), ("cpqSlr4-8", 10), ("cpqDat12-24", 11), ("cpqDatAuto12-24", 12), ("cpqAit35", 14), ("cpqAit50", 15), ("cpqDat20-40", 16), ("cpqDlt40-80", 17), ("cpqDatAuto20-40", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvType.setStatus('mandatory')
cpqDaTapeDrvCleanReq = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvCleanReq.setStatus('mandatory')
cpqDaTapeDrvCleanTapeRepl = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvCleanTapeRepl.setStatus('mandatory')
cpqDaTapeDrvCleanTapeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvCleanTapeCount.setStatus('mandatory')
cpqDaTapeDrvLibraryDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvLibraryDrive.setStatus('mandatory')
cpqDaTapeDrvMagSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvMagSize.setStatus('mandatory')
cpqDaTapeDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvHotPlug.setStatus('mandatory')
cpqDaTapeDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvPlacement.setStatus('mandatory')
cpqDaTapeDrvCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvCurrentWidth.setStatus('mandatory')
cpqDaTapeDrvCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvCurrentSpeed.setStatus('mandatory')
cpqDaTapeDrvProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("parallelScsi", 2), ("sata", 3), ("sas", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvProtocol.setStatus('mandatory')
cpqDaTapeDrvNegotiatedLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rate-1-5", 2), ("rate-3-0", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeDrvNegotiatedLinkRate.setStatus('mandatory')
cpqDaTapeCountersTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1), )
if mibBuilder.loadTexts: cpqDaTapeCountersTable.setStatus('mandatory')
cpqDaTapeCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaTapeCountersCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaTapeCountersBusIndex"), (0, "CPQIDA-MIB", "cpqDaTapeCountersScsiIdIndex"), (0, "CPQIDA-MIB", "cpqDaTapeCountersLunIndex"))
if mibBuilder.loadTexts: cpqDaTapeCountersEntry.setStatus('mandatory')
cpqDaTapeCountersCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeCountersCntlrIndex.setStatus('mandatory')
cpqDaTapeCountersBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeCountersBusIndex.setStatus('mandatory')
cpqDaTapeCountersScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeCountersScsiIdIndex.setStatus('mandatory')
cpqDaTapeCountersLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeCountersLunIndex.setStatus('mandatory')
cpqDaTapeCountersReWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeCountersReWrites.setStatus('mandatory')
cpqDaTapeCountersReReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeCountersReReads.setStatus('mandatory')
cpqDaTapeCountersTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeCountersTotalErrors.setStatus('mandatory')
cpqDaTapeCountersTotalUncorrectable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeCountersTotalUncorrectable.setStatus('mandatory')
cpqDaTapeCountersTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeCountersTotalBytes.setStatus('mandatory')
cpqDaTapeLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1), )
if mibBuilder.loadTexts: cpqDaTapeLibraryTable.setStatus('mandatory')
cpqDaTapeLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), (0, "CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), (0, "CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"))
if mibBuilder.loadTexts: cpqDaTapeLibraryEntry.setStatus('mandatory')
cpqDaTapeLibraryCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryCntlrIndex.setStatus('mandatory')
cpqDaTapeLibraryScsiBus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryScsiBus.setStatus('mandatory')
cpqDaTapeLibraryScsiTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryScsiTarget.setStatus('mandatory')
cpqDaTapeLibraryScsiLun = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryScsiLun.setStatus('mandatory')
cpqDaTapeLibrarySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibrarySerialNumber.setStatus('mandatory')
cpqDaTapeLibraryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryModel.setStatus('mandatory')
cpqDaTapeLibraryFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryFWRev.setStatus('mandatory')
cpqDaTapeLibraryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("offline", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryStatus.setStatus('mandatory')
cpqDaTapeLibraryDoorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("closed", 3), ("open", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryDoorStatus.setStatus('mandatory')
cpqDaTapeLibraryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryCondition.setStatus('mandatory')
cpqDaTapeLibraryOverallCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryOverallCondition.setStatus('mandatory')
cpqDaTapeLibraryLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryLastError.setStatus('deprecated')
cpqDaTapeLibraryStatHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryStatHours.setStatus('mandatory')
cpqDaTapeLibraryStatMoves = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryStatMoves.setStatus('mandatory')
cpqDaTapeLibraryDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryDriveList.setStatus('deprecated')
cpqDaTapeLibraryCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryCurrentWidth.setStatus('mandatory')
cpqDaTapeLibraryCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryCurrentSpeed.setStatus('mandatory')
cpqDaTapeLibraryDriveList2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryDriveList2.setStatus('mandatory')
cpqDaTapeLibraryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("parallelScsi", 2), ("sata", 3), ("sas", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryProtocol.setStatus('mandatory')
cpqDaTapeLibraryNegotiatedLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rate-1-5", 2), ("rate-3-0", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTapeLibraryNegotiatedLinkRate.setStatus('mandatory')
cpqDaTrapPkts = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTrapPkts.setStatus('deprecated')
cpqDaTrapLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTrapLogMaxSize.setStatus('deprecated')
cpqDaTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 3, 3), )
if mibBuilder.loadTexts: cpqDaTrapLogTable.setStatus('deprecated')
cpqDaTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 3, 3, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaTrapLogIndex"))
if mibBuilder.loadTexts: cpqDaTrapLogEntry.setStatus('deprecated')
cpqDaTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTrapLogIndex.setStatus('deprecated')
cpqDaTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 3001, 3002, 3003, 3004, 3005, 3006, 3007))).clone(namedValues=NamedValues(("cpqDaLogDrvStatusChange", 1), ("cpqDaSpareStatusChange", 2), ("cpqDaPhyDrvStatusChange", 3), ("cpqDaPhyDrvThreshExceededTrap", 4), ("cpqDaAccelStatusChange", 5), ("cpqDaAccelBadDataTrap", 6), ("cpqDaAccelBatteryFailed", 7), ("cpqDa2LogDrvStatusChange", 3001), ("cpqDa2SpareStatusChange", 3002), ("cpqDa2PhyDrvStatusChange", 3003), ("cpqDa2PhyDrvThreshExceededTrap", 3004), ("cpqDa2AccelStatusChange", 3005), ("cpqDa2AccelBadDataTrap", 3006), ("cpqDa2AccelBatteryFailed", 3007)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTrapType.setStatus('deprecated')
cpqDaTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqDaTrapTime.setStatus('deprecated')
cpqDaLogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,1)).setObjects(("CPQIDA-MIB", "cpqDaLogDrvStatus"))
cpqDaSpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,2)).setObjects(("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"))
cpqDaPhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,3)).setObjects(("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"))
cpqDaPhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,4)).setObjects(("CPQIDA-MIB", "cpqDaPhyDrvThreshPassed"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"))
cpqDaAccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,5)).setObjects(("CPQIDA-MIB", "cpqDaAccelStatus"))
cpqDaAccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,6)).setObjects(("CPQIDA-MIB", "cpqDaAccelBadData"))
cpqDaAccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,7)).setObjects(("CPQIDA-MIB", "cpqDaAccelBattery"))
cpqDa2LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3001)).setObjects(("CPQIDA-MIB", "cpqDaLogDrvStatus"))
cpqDa2SpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3002)).setObjects(("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"))
cpqDa2PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3003)).setObjects(("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"))
cpqDa2PhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3004)).setObjects(("CPQIDA-MIB", "cpqDaPhyDrvThreshPassed"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"))
cpqDa2AccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3005)).setObjects(("CPQIDA-MIB", "cpqDaAccelStatus"))
cpqDa2AccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3006)).setObjects(("CPQIDA-MIB", "cpqDaAccelBadData"))
cpqDa2AccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3007)).setObjects(("CPQIDA-MIB", "cpqDaAccelBattery"))
cpqDa3LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaLogDrvStatus"))
cpqDa3SpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"))
cpqDa3PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"))
cpqDa3PhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvThreshPassed"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"))
cpqDa3AccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaAccelStatus"))
cpqDa3AccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaAccelBadData"))
cpqDa3AccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaAccelBattery"))
cpqDaCntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrBoardStatus"))
cpqDaCntlrActive = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrPartnerSlot"))
cpqDa4SpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareCntlrIndex"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"), ("CPQIDA-MIB", "cpqDaSpareBay"))
cpqDa4PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"))
cpqDa4PhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"))
cpqDaTapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3020)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"), ("CPQIDA-MIB", "cpqDaTapeLibraryStatus"))
cpqDaTapeLibraryDoorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3021)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"), ("CPQIDA-MIB", "cpqDaTapeLibraryDoorStatus"))
cpqDaTapeDriveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3022)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvStatus"))
cpqDaTapeDriveCleaningRequired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3023)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"))
cpqDaTapeDriveCleanTapeReplace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3024)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"))
cpqDa5AccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3025)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"), ("CPQIDA-MIB", "cpqDaAccelStatus"), ("CPQIDA-MIB", "cpqDaAccelErrCode"))
cpqDa5AccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3026)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"))
cpqDa5AccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3027)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"))
cpqDa5CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3028)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrBoardStatus"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaCntlrSerialNumber"), ("CPQIDA-MIB", "cpqDaCntlrFWRev"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"))
cpqDa5PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3029)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"), ("CPQIDA-MIB", "cpqDaPhyDrvFailureCode"))
cpqDa5PhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3030)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"))
cpqDa2TapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3031)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"), ("CPQIDA-MIB", "cpqDaTapeLibraryModel"), ("CPQIDA-MIB", "cpqDaTapeLibraryFWRev"), ("CPQIDA-MIB", "cpqDaTapeLibrarySerialNumber"), ("CPQIDA-MIB", "cpqDaTapeLibraryStatus"))
cpqDa2TapeDriveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3032)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvName"), ("CPQIDA-MIB", "cpqDaTapeDrvFwRev"), ("CPQIDA-MIB", "cpqDaTapeDrvSerialNumber"), ("CPQIDA-MIB", "cpqDaTapeDrvStatus"))
cpqDa6CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3033)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaCntlrIndex"), ("CPQIDA-MIB", "cpqDaCntlrBoardStatus"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaCntlrSerialNumber"), ("CPQIDA-MIB", "cpqDaCntlrFWRev"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"))
cpqDa6LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3034)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaLogDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaLogDrvIndex"), ("CPQIDA-MIB", "cpqDaLogDrvStatus"))
cpqDa6SpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3035)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaSpareCntlrIndex"), ("CPQIDA-MIB", "cpqDaSparePhyDrvIndex"), ("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"), ("CPQIDA-MIB", "cpqDaSpareBay"))
cpqDa6PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3036)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"), ("CPQIDA-MIB", "cpqDaPhyDrvFailureCode"), ("CPQIDA-MIB", "cpqDaPhyDrvStatus"))
cpqDa6PhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3037)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"))
cpqDa6AccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3038)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelCntlrIndex"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"), ("CPQIDA-MIB", "cpqDaAccelStatus"), ("CPQIDA-MIB", "cpqDaAccelErrCode"))
cpqDa6AccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3039)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelCntlrIndex"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"))
cpqDa6AccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3040)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelCntlrIndex"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"))
cpqDa6TapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3041)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"), ("CPQIDA-MIB", "cpqDaTapeLibraryModel"), ("CPQIDA-MIB", "cpqDaTapeLibraryFWRev"), ("CPQIDA-MIB", "cpqDaTapeLibrarySerialNumber"), ("CPQIDA-MIB", "cpqDaTapeLibraryStatus"))
cpqDa6TapeLibraryDoorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3042)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"), ("CPQIDA-MIB", "cpqDaTapeLibraryModel"), ("CPQIDA-MIB", "cpqDaTapeLibraryFWRev"), ("CPQIDA-MIB", "cpqDaTapeLibrarySerialNumber"), ("CPQIDA-MIB", "cpqDaTapeLibraryDoorStatus"))
cpqDa6TapeDriveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3043)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvName"), ("CPQIDA-MIB", "cpqDaTapeDrvFwRev"), ("CPQIDA-MIB", "cpqDaTapeDrvSerialNumber"), ("CPQIDA-MIB", "cpqDaTapeDrvStatus"))
cpqDa6TapeDriveCleaningRequired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3044)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvName"), ("CPQIDA-MIB", "cpqDaTapeDrvFwRev"), ("CPQIDA-MIB", "cpqDaTapeDrvSerialNumber"))
cpqDa6TapeDriveCleanTapeReplace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3045)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvName"), ("CPQIDA-MIB", "cpqDaTapeDrvFwRev"), ("CPQIDA-MIB", "cpqDaTapeDrvSerialNumber"))
cpqDa7PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3046)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvLocationString"), ("CPQIDA-MIB", "cpqDaPhyDrvType"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"), ("CPQIDA-MIB", "cpqDaPhyDrvFailureCode"), ("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"))
cpqDa7SpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3047)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaSpareCntlrIndex"), ("CPQIDA-MIB", "cpqDaSparePhyDrvIndex"), ("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareLocationString"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"))
cpqDaCntlrPartnerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3048)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaCntlrIndex"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaCntlrSerialNumber"), ("CPQIDA-MIB", "cpqDaCntlrPartnerSerialNumber"), ("CPQIDA-MIB", "cpqDaCntlrPartnerBoardStatus"))
cpqDaPhyDrvSSDWearStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3049)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvLocationString"), ("CPQIDA-MIB", "cpqDaPhyDrvType"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"), ("CPQIDA-MIB", "cpqDaPhyDrvSSDWearStatus"))
mibBuilder.exportSymbols("CPQIDA-MIB", cpqDaTapeDrvType=cpqDaTapeDrvType, cpqDaPhyDrvBadRecvWrites=cpqDaPhyDrvBadRecvWrites, cpqDaLogDrvCacheVolAccelNoOfWriteMissLoadingH=cpqDaLogDrvCacheVolAccelNoOfWriteMissLoadingH, cpqDaLogDrvCacheVolAccelCachingAlgorithm=cpqDaLogDrvCacheVolAccelCachingAlgorithm, cpqDaPhyDrvHardWriteErrs=cpqDaPhyDrvHardWriteErrs, cpqDaPhyDrvThrAbortedCmds=cpqDaPhyDrvThrAbortedCmds, cpqDaTapeCountersLunIndex=cpqDaTapeCountersLunIndex, cpqDaPhyDrvSenseCode=cpqDaPhyDrvSenseCode, cpqDaLogDrvCacheVolAccelNoOfReadMissSkipH=cpqDaLogDrvCacheVolAccelNoOfReadMissSkipH, cpqDaManagedCableCntlrIndex=cpqDaManagedCableCntlrIndex, cpqDaLogDrvPerfIndex=cpqDaLogDrvPerfIndex, cpqDaSpareBay=cpqDaSpareBay, cpqDaCntlrNumberOfExternalPorts=cpqDaCntlrNumberOfExternalPorts, cpqDaAccelReadCachePercent=cpqDaAccelReadCachePercent, cpqDaTapeDriveCleaningRequired=cpqDaTapeDriveCleaningRequired, cpqDaCntlrNumberOfBuses=cpqDaCntlrNumberOfBuses, cpqDaSpareDrv=cpqDaSpareDrv, cpqDa6TapeDriveStatusChange=cpqDa6TapeDriveStatusChange, cpqDaCntlrModel=cpqDaCntlrModel, cpqDa6TapeDriveCleaningRequired=cpqDa6TapeDriveCleaningRequired, cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoad=cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoad, cpqDaTapeDrvSerialNumber=cpqDaTapeDrvSerialNumber, cpqDaPhyDrvErrIndex=cpqDaPhyDrvErrIndex, cpqDa2PhyDrvStatusChange=cpqDa2PhyDrvStatusChange, cpqDaSparePhyDrvIndex=cpqDaSparePhyDrvIndex, cpqDaPhyDrvThrFunctTest1=cpqDaPhyDrvThrFunctTest1, cpqDaLogDrvAvailSpares=cpqDaLogDrvAvailSpares, cpqDaTapeDrvCurrentWidth=cpqDaTapeDrvCurrentWidth, cpqDaAccelBackupPowerSource=cpqDaAccelBackupPowerSource, cpqDaPhyDrvThrHotPlugs=cpqDaPhyDrvThrHotPlugs, cpqDaLogDrvCacheVolAccelNoOfReadMissTotalH=cpqDaLogDrvCacheVolAccelNoOfReadMissTotalH, cpqDaCntlrExpandPriority=cpqDaCntlrExpandPriority, cpqDaOsCommonCollectionReset=cpqDaOsCommonCollectionReset, cpqDaCntlrEntry=cpqDaCntlrEntry, cpqDaPhyDrvCamStatus=cpqDaPhyDrvCamStatus, cpqDaSpareTable=cpqDaSpareTable, cpqDaTapeDrvCleanTapeCount=cpqDaTapeDrvCleanTapeCount, cpqDaAccelErrCode=cpqDaAccelErrCode, cpqDaSpareReplacedDrvBay=cpqDaSpareReplacedDrvBay, cpqDaLogDrvSprRplcExtAttachTable=cpqDaLogDrvSprRplcExtAttachTable, cpqDaTapeLibraryStatusChange=cpqDaTapeLibraryStatusChange, cpqDaLogDrvSSDSmartPathStatus=cpqDaLogDrvSSDSmartPathStatus, cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoadH=cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoadH, cpqDaPhyDrvThrPostErrs=cpqDaPhyDrvThrPostErrs, cpqDaTapeLibraryFWRev=cpqDaTapeLibraryFWRev, cpqDaCntlrHBAModeOptionRomRev=cpqDaCntlrHBAModeOptionRomRev, cpqDaManagedCableStatus=cpqDaManagedCableStatus, cpqDaNw3xVolMapTable=cpqDaNw3xVolMapTable, cpqDaTapeDrvCondition=cpqDaTapeDrvCondition, cpqDaPhyDrvFactReallocs=cpqDaPhyDrvFactReallocs, cpqDaPhyDrvHotPlug=cpqDaPhyDrvHotPlug, cpqDaLogDrvAvailSprAttachExtIndex=cpqDaLogDrvAvailSprAttachExtIndex, cpqDaLogDrvPerfTable=cpqDaLogDrvPerfTable, cpqDaLogDrvTable=cpqDaLogDrvTable, cpqDaTapeCountersCntlrIndex=cpqDaTapeCountersCntlrIndex, cpqDaPhyDrvCondition=cpqDaPhyDrvCondition, cpqDaPhyDrvThrUsedReallocs=cpqDaPhyDrvThrUsedReallocs, cpqDaPhyDrvCntlrIndex=cpqDaPhyDrvCntlrIndex, cpqDaTapeCounters=cpqDaTapeCounters, cpqDaAccelReadErrs=cpqDaAccelReadErrs, cpqDaAccelWriteErrs=cpqDaAccelWriteErrs, cpqDa6TapeLibraryDoorStatusChange=cpqDa6TapeLibraryDoorStatusChange, cpqDaLogDrvCacheVolAccelNoOfReadMissLockedH=cpqDaLogDrvCacheVolAccelNoOfReadMissLockedH, cpqDaTrapLogMaxSize=cpqDaTrapLogMaxSize, cpqDaTapeDrvFwRev=cpqDaTapeDrvFwRev, cpqDaLogDrvCacheVolAccelWritePolicy=cpqDaLogDrvCacheVolAccelWritePolicy, cpqDa4PhyDrvThreshPassedTrap=cpqDa4PhyDrvThreshPassedTrap, cpqDaPhyDrvFormatErrs=cpqDaPhyDrvFormatErrs, cpqDaPhyDrvSSDWearStatus=cpqDaPhyDrvSSDWearStatus, cpqDaPhyDrvBay=cpqDaPhyDrvBay, cpqDaPhyDrvStatusChange=cpqDaPhyDrvStatusChange, cpqDaTapeDriveCleanTapeReplace=cpqDaTapeDriveCleanTapeReplace, cpqDaTapeCountersTotalUncorrectable=cpqDaTapeCountersTotalUncorrectable, cpqDa3PhyDrvStatusChange=cpqDa3PhyDrvStatusChange, cpqDaManagedCableIndex=cpqDaManagedCableIndex, cpqDaLogDrvCacheVolAccelReadCacheHitRate=cpqDaLogDrvCacheVolAccelReadCacheHitRate, cpqDa3AccelBadDataTrap=cpqDa3AccelBadDataTrap, cpqDaPhyDrvSerialNum=cpqDaPhyDrvSerialNum, cpqDaTrap=cpqDaTrap, cpqDaCntlrHwLocation=cpqDaCntlrHwLocation, cpqDaNw3xPollType=cpqDaNw3xPollType, cpqDa3AccelBatteryFailed=cpqDa3AccelBatteryFailed, cpqDaPhyDrvPhyCount=cpqDaPhyDrvPhyCount, cpqDaPhyDrvStatus=cpqDaPhyDrvStatus, cpqDaPhyDrvErrTable=cpqDaPhyDrvErrTable, cpqDaLogDrvCacheVolAccelNoOfReadMissLocked=cpqDaLogDrvCacheVolAccelNoOfReadMissLocked, cpqDaTapeDrvFwSubtype=cpqDaTapeDrvFwSubtype, cpqDaTapeLibrarySerialNumber=cpqDaTapeLibrarySerialNumber, cpqDaPhyDrvBusNumber=cpqDaPhyDrvBusNumber, cpqDaPhyDrvThrReallocAborts=cpqDaPhyDrvThrReallocAborts, cpqDaSpareReplacedDrv=cpqDaSpareReplacedDrv, cpqDaPhyDrvThrOtherTimeouts=cpqDaPhyDrvThrOtherTimeouts, cpqDa5AccelBatteryFailed=cpqDa5AccelBatteryFailed, cpqDaPhyDrvSSDPercntEndrnceUsed=cpqDaPhyDrvSSDPercntEndrnceUsed, cpqDaLogDrvPerfTotalIO=cpqDaLogDrvPerfTotalIO, cpqDaNw3xVolMapEntry=cpqDaNw3xVolMapEntry, cpqDaTrapType=cpqDaTrapType, cpqDaManagedCableLength=cpqDaManagedCableLength, cpqDaLogDrvCacheVolAccelNoOfReadMissTotal=cpqDaLogDrvCacheVolAccelNoOfReadMissTotal, cpqDaPhyDrvHardwareErrs=cpqDaPhyDrvHardwareErrs, cpqDaCntlrStndIntr=cpqDaCntlrStndIntr, cpqDaPhyDrvThrFunctTest2=cpqDaPhyDrvThrFunctTest2, cpqDaPhyDrvFunctTest1=cpqDaPhyDrvFunctTest1, cpqDaLogDrvPhyDrvExtended=cpqDaLogDrvPhyDrvExtended, cpqDaAccelSerialNumber=cpqDaAccelSerialNumber, cpqDaTapeLibraryNegotiatedLinkRate=cpqDaTapeLibraryNegotiatedLinkRate, cpqDaLogDrvRebuildBlks=cpqDaLogDrvRebuildBlks, cpqDaNw3xVolMap=cpqDaNw3xVolMap, cpqDaTapeLibraryDoorStatusChange=cpqDaTapeLibraryDoorStatusChange, cpqDaPhyDrvTable=cpqDaPhyDrvTable, cpqDaTapeCountersScsiIdIndex=cpqDaTapeCountersScsiIdIndex, cpqDaPhyDrvAbortedCmds=cpqDaPhyDrvAbortedCmds, cpqDaPhyDrvThrSpinupTime=cpqDaPhyDrvThrSpinupTime, cpqDaLogDrvCacheVolAccelNoOfWriteMissTotal=cpqDaLogDrvCacheVolAccelNoOfWriteMissTotal, cpqDaPhyDrvHReads=cpqDaPhyDrvHReads, cpqDa6AccelBatteryFailed=cpqDa6AccelBatteryFailed, cpqDaAccelFailedBatteries=cpqDaAccelFailedBatteries, cpqDaTapeLibraryOverallCondition=cpqDaTapeLibraryOverallCondition, cpqDaTrapLogIndex=cpqDaTrapLogIndex, cpqDaPhyDrvBlock=cpqDaPhyDrvBlock, cpqDaLogDrvCacheVolAccelLoadFailures=cpqDaLogDrvCacheVolAccelLoadFailures, cpqDaCntlrPartnerSerialNumber=cpqDaCntlrPartnerSerialNumber, cpqDaManagedCableVendorRevision=cpqDaManagedCableVendorRevision, cpqDa5PhyDrvStatusChange=cpqDa5PhyDrvStatusChange, cpqDaLogDrvPerf=cpqDaLogDrvPerf, cpqDaLogDrvSprRplcAttachExtIndex=cpqDaLogDrvSprRplcAttachExtIndex, cpqDaLogDrvEntry=cpqDaLogDrvEntry, cpqDaTapeLibraryStatus=cpqDaTapeLibraryStatus, cpqDaLogDrvCacheVolAccelNoOfReadHits=cpqDaLogDrvCacheVolAccelNoOfReadHits, cpqDaPhyDrvPathDrvIndex=cpqDaPhyDrvPathDrvIndex, cpqDaTapeDrv=cpqDaTapeDrv, cpqDaLogDrvHasAccel=cpqDaLogDrvHasAccel, cpqDaSpareLocationString=cpqDaSpareLocationString, cpqDaCntlrIndex=cpqDaCntlrIndex, cpqDaTapeDrvName=cpqDaTapeDrvName, cpqDaTapeLibraryEntry=cpqDaTapeLibraryEntry, cpqDaCntlrPerfCpuPercentBusy=cpqDaCntlrPerfCpuPercentBusy, cpqDaTapeDrvCntlrIndex=cpqDaTapeDrvCntlrIndex, cpqDaLogDrvPhyDrvIDs=cpqDaLogDrvPhyDrvIDs, cpqDaPhyDrvHotPlugs=cpqDaPhyDrvHotPlugs, cpqDaTapeDrvCleanTapeRepl=cpqDaTapeDrvCleanTapeRepl, cpqDaNw3xTotalReads=cpqDaNw3xTotalReads, cpqDaNw3xVolCntlrIndex=cpqDaNw3xVolCntlrIndex, cpqDaAccelStatus=cpqDaAccelStatus, cpqDaCntlrPerfInstance=cpqDaCntlrPerfInstance, cpqDaPhyDrvThrRefHours=cpqDaPhyDrvThrRefHours, cpqDaNw3xCntlrIndex=cpqDaNw3xCntlrIndex, cpqDaLogDrvPerfCacheMisses=cpqDaLogDrvPerfCacheMisses, cpqDaPhyDrvErrType=cpqDaPhyDrvErrType, cpqDaLogDrvPerfReadAheadSectors=cpqDaLogDrvPerfReadAheadSectors, cpqDaPhyDrvScsiStatus=cpqDaPhyDrvScsiStatus, cpqDa2LogDrvStatusChange=cpqDa2LogDrvStatusChange, cpqDaCntlrPartnerBoardStatus=cpqDaCntlrPartnerBoardStatus, cpqDaLogDrvSprRplcLogDrvExtended=cpqDaLogDrvSprRplcLogDrvExtended, cpqDaLogDrvPhyDrvAttachExtIndex=cpqDaLogDrvPhyDrvAttachExtIndex, cpqDaMibRevMinor=cpqDaMibRevMinor, cpqDaTapeDrvCurrentSpeed=cpqDaTapeDrvCurrentSpeed, cpqDaTrapPkts=cpqDaTrapPkts, cpqDaPhyDrvCurrentTemperature=cpqDaPhyDrvCurrentTemperature, cpqDaPhyDrvPathBoxOnConnector=cpqDaPhyDrvPathBoxOnConnector, cpqDaTapeLibraryScsiBus=cpqDaTapeLibraryScsiBus, cpqDaPhyDrvBadRecvReads=cpqDaPhyDrvBadRecvReads, cpqDaPhyDrvUserDesc=cpqDaPhyDrvUserDesc, cpqDaOsCommonModulePurpose=cpqDaOsCommonModulePurpose, cpqDaPhyDrvPathIndex=cpqDaPhyDrvPathIndex, cpqDaPhyDrvErrCntlrIndex=cpqDaPhyDrvErrCntlrIndex, cpqDaCntlrEncryptCspNvramStatus=cpqDaCntlrEncryptCspNvramStatus, cpqDa2TapeLibraryStatusChange=cpqDa2TapeLibraryStatusChange, cpqDaPhyDrvQualifier=cpqDaPhyDrvQualifier, cpqDaTrapLogTable=cpqDaTrapLogTable, cpqDaLogDrv=cpqDaLogDrv, cpqDaPhyDrvPostErrs=cpqDaPhyDrvPostErrs, cpqDaLogDrvSprRplcExtAttachEntry=cpqDaLogDrvSprRplcExtAttachEntry, cpqDaNw3xCorrReads=cpqDaNw3xCorrReads, cpqDaLogDrvCacheVolAccelAssocType=cpqDaLogDrvCacheVolAccelAssocType, cpqDa2AccelStatusChange=cpqDa2AccelStatusChange, cpqDaSpareBusNumber=cpqDaSpareBusNumber, cpqDaPhyDrvSmartStatus=cpqDaPhyDrvSmartStatus, cpqDaPhyDrvThrEntry=cpqDaPhyDrvThrEntry, cpqDaCntlrPerfEntry=cpqDaCntlrPerfEntry, cpqDaMibRev=cpqDaMibRev, cpqDaLogDrvCntlrIndex=cpqDaLogDrvCntlrIndex, cpqDa6TapeDriveCleanTapeReplace=cpqDa6TapeDriveCleanTapeReplace, cpqDaLogDrvCacheVolAccelNoOfWriteMissTotalH=cpqDaLogDrvCacheVolAccelNoOfWriteMissTotalH, cpqDaPhyDrvPathCurrentRole=cpqDaPhyDrvPathCurrentRole, cpqDaOsCommonModuleTable=cpqDaOsCommonModuleTable, cpqDaLogDrvAvailSprAvailableSpareExtended=cpqDaLogDrvAvailSprAvailableSpareExtended, cpqDaPhyDrv=cpqDaPhyDrv, cpqDa6AccelStatusChange=cpqDa6AccelStatusChange, cpqDaLogDrvNmbrOfParityGroups=cpqDaLogDrvNmbrOfParityGroups, cpqDa3SpareStatusChange=cpqDa3SpareStatusChange, cpqDaLogDrvAvailSprCntlrExtended=cpqDaLogDrvAvailSprCntlrExtended, cpqDa7PhyDrvStatusChange=cpqDa7PhyDrvStatusChange, cpqDaLogDrvSprRplcSparePhysDrvExtended=cpqDaLogDrvSprRplcSparePhysDrvExtended, cpqDaLogDrvCacheVolAccelCntlrIndex=cpqDaLogDrvCacheVolAccelCntlrIndex, cpqDaTapeCountersTable=cpqDaTapeCountersTable, cpqDaSpareCondition=cpqDaSpareCondition, cpqDaSpareReplacedDrvBusNumber=cpqDaSpareReplacedDrvBusNumber, cpqDaPhyDrvMediaType=cpqDaPhyDrvMediaType, cpqDaPhyDrvNotReadyErrs=cpqDaPhyDrvNotReadyErrs, cpqDaLogDrvCacheVolAccelCacheState=cpqDaLogDrvCacheVolAccelCacheState, cpqDaLogDrvPerfSectorsRead=cpqDaLogDrvPerfSectorsRead, cpqDaTapeCountersReReads=cpqDaTapeCountersReReads, cpqDaCntlrEncryptCryptoOfficerPwdSetStatus=cpqDaCntlrEncryptCryptoOfficerPwdSetStatus, cpqDaPhyDrvConfigurationStatus=cpqDaPhyDrvConfigurationStatus, cpqDaCntlrEncryptCntlrPwdAvailStatus=cpqDaCntlrEncryptCntlrPwdAvailStatus, cpqDaPhyDrvScsiOp=cpqDaPhyDrvScsiOp, cpqDaSpareStatusChange=cpqDaSpareStatusChange, cpqDaAccelMemory=cpqDaAccelMemory, cpqDaManagedCableHostConnector=cpqDaManagedCableHostConnector, cpqDaCntlrPerfAvgLatency=cpqDaCntlrPerfAvgLatency, cpqDaAccelBatteryFailed=cpqDaAccelBatteryFailed, cpqDa6SpareStatusChange=cpqDa6SpareStatusChange, cpqDaLogDrvCacheVolAccelNoOfReadHitsH=cpqDaLogDrvCacheVolAccelNoOfReadHitsH, cpqDaComponent=cpqDaComponent, cpqDaAccelBadDataTrap=cpqDaAccelBadDataTrap, cpqDaPhyDrvThrFormatErrs=cpqDaPhyDrvThrFormatErrs, cpqDaTapeCountersReWrites=cpqDaTapeCountersReWrites, cpqDaNw3xDriverStatTable=cpqDaNw3xDriverStatTable, cpqDaNw3xLogDrvIndex=cpqDaNw3xLogDrvIndex, cpqDaTapeLibraryProtocol=cpqDaTapeLibraryProtocol, cpqDaTapeDrvLibraryDrive=cpqDaTapeDrvLibraryDrive, cpqDaPhyDrvThrHSeekErrs=cpqDaPhyDrvThrHSeekErrs, cpqDaPhyDrvRotationalSpeed=cpqDaPhyDrvRotationalSpeed, cpqDaInterface=cpqDaInterface, cpqDaLogDrvMultipathAccess=cpqDaLogDrvMultipathAccess, cpqDaLogDrvCacheVolAccelNoOfReadMissLoadingH=cpqDaLogDrvCacheVolAccelNoOfReadMissLoadingH, cpqDaPhyDrvHostConnector=cpqDaPhyDrvHostConnector, cpqDaLogDrvSplitMirrorBackupLogDrv=cpqDaLogDrvSplitMirrorBackupLogDrv, cpqDaLogDrvCacheVolAccelNoOfWriteMissLocked=cpqDaLogDrvCacheVolAccelNoOfWriteMissLocked, cpqDaTapeDrvProtocol=cpqDaTapeDrvProtocol, cpqDaCntlrPartnerStatusChange=cpqDaCntlrPartnerStatusChange, cpqDaPhyDrvBlockValid=cpqDaPhyDrvBlockValid, cpqDaAccelReadMemory=cpqDaAccelReadMemory, cpqDaPhyDrvOtherTimeouts=cpqDaPhyDrvOtherTimeouts, cpqDaNw3xFatalReads=cpqDaNw3xFatalReads, cpqDaPhyDrvThreshPassedTrap=cpqDaPhyDrvThreshPassedTrap, cpqDaPhyDrvLocation=cpqDaPhyDrvLocation, cpqDaLogDrvAvalSprExtAttachEntry=cpqDaLogDrvAvalSprExtAttachEntry, cpqDaLogDrvStatusChange=cpqDaLogDrvStatusChange, cpqDaLogDrvPerfWrites=cpqDaLogDrvPerfWrites, cpqDaPhyDrvType=cpqDaPhyDrvType, cpqDaLogDrvPerfInstance=cpqDaLogDrvPerfInstance, cpqDaPhyDrvSSDWearStatusChange=cpqDaPhyDrvSSDWearStatusChange, cpqDaTrapLogEntry=cpqDaTrapLogEntry, cpqDaNw3xTotalWrites=cpqDaNw3xTotalWrites, cpqDaTapeDrvStatus=cpqDaTapeDrvStatus, cpqDaLogDrvCacheVolAccelCacheLineSize=cpqDaLogDrvCacheVolAccelCacheLineSize, cpqDaLogDrvPerfCntlrIndex=cpqDaLogDrvPerfCntlrIndex, cpqDaPhyDrvThrIndex=cpqDaPhyDrvThrIndex, cpqDaTapeDrvEntry=cpqDaTapeDrvEntry, cpqDaCntlrBlinkTime=cpqDaCntlrBlinkTime, cpqDaPhyDrvErrDesc=cpqDaPhyDrvErrDesc, cpqDa5CntlrStatusChange=cpqDa5CntlrStatusChange)
mibBuilder.exportSymbols("CPQIDA-MIB", cpqDaCntlrSlot=cpqDaCntlrSlot, cpqDaCntlrLastLockupCode=cpqDaCntlrLastLockupCode, cpqDaLogDrvAutoRel=cpqDaLogDrvAutoRel, cpqDaPhyDrvThrBadRecvReads=cpqDaPhyDrvThrBadRecvReads, cpqDaNw3xDriverVer=cpqDaNw3xDriverVer, cpqDaCntlrPerfTable=cpqDaCntlrPerfTable, cpqDaTapeLibraryStatHours=cpqDaTapeLibraryStatHours, cpqDa6CntlrStatusChange=cpqDa6CntlrStatusChange, cpqDaLogDrvCacheVolumeAccelTable=cpqDaLogDrvCacheVolumeAccelTable, cpqDaPhyDrvFunctTest3=cpqDaPhyDrvFunctTest3, cpqDaPhyDrvEncryptionStatus=cpqDaPhyDrvEncryptionStatus, cpqDaPhyDrvDrqTimeouts=cpqDaPhyDrvDrqTimeouts, cpqDaTapeLibraryModel=cpqDaTapeLibraryModel, cpqDaManagedCableEntry=cpqDaManagedCableEntry, cpqDaPhyDrvThrDrqTimeouts=cpqDaPhyDrvThrDrqTimeouts, cpqDaPhyDrvSeeks=cpqDaPhyDrvSeeks, cpqDaCntlrPartnerSlot=cpqDaCntlrPartnerSlot, cpqDa3AccelStatusChange=cpqDa3AccelStatusChange, cpqDa5PhyDrvThreshPassedTrap=cpqDa5PhyDrvThreshPassedTrap, cpqDaTapeLibraryTable=cpqDaTapeLibraryTable, cpqDaTapeLibraryDriveList2=cpqDaTapeLibraryDriveList2, cpqDaOsCommonModuleEntry=cpqDaOsCommonModuleEntry, cpqDaPhyDrvRefHours=cpqDaPhyDrvRefHours, cpqDaLogDrvEncryptionStatus=cpqDaLogDrvEncryptionStatus, cpqDaPhyDrvHSeekErrs=cpqDaPhyDrvHSeekErrs, cpqDaAccelTotalMemory=cpqDaAccelTotalMemory, cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoadH=cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoadH, cpqDaCntlrPerfCommandCount=cpqDaCntlrPerfCommandCount, cpqDaPhyDrvAuthenticationStatus=cpqDaPhyDrvAuthenticationStatus, cpqDaPhyDrvFWRev=cpqDaPhyDrvFWRev, cpqDaLogDrvBlinkTime=cpqDaLogDrvBlinkTime, cpqDaPhyDrvThrViSpinupTime=cpqDaPhyDrvThrViSpinupTime, cpqDaSpareCntlrIndex=cpqDaSpareCntlrIndex, cpqDaPhyDrvBusFaults=cpqDaPhyDrvBusFaults, cpqDaCntlrRebuildPriority=cpqDaCntlrRebuildPriority, cpqDaLogDrvCondition=cpqDaLogDrvCondition, cpqDaLogDrvStatus=cpqDaLogDrvStatus, cpqDaManagedCableVendorPartNumber=cpqDaManagedCableVendorPartNumber, cpqDaPhyDrvNegotiatedLinkRate=cpqDaPhyDrvNegotiatedLinkRate, cpqDaLogDrvPhyDrvExtAttachTable=cpqDaLogDrvPhyDrvExtAttachTable, cpqDaPhyDrvSeekErrs=cpqDaPhyDrvSeekErrs, cpqDaAccelMemoryDataWidth=cpqDaAccelMemoryDataWidth, cpqDaLogDrvPhyDrvExtAttachEntry=cpqDaLogDrvPhyDrvExtAttachEntry, cpqDa5AccelBadDataTrap=cpqDa5AccelBadDataTrap, cpqDaLogDrvFaultTol=cpqDaLogDrvFaultTol, cpqDaPhyDrvIndex=cpqDaPhyDrvIndex, cpqDaPhyDrvThrSeekErrs=cpqDaPhyDrvThrSeekErrs, cpqDa2AccelBatteryFailed=cpqDa2AccelBatteryFailed, cpqDaCntlrFWRev=cpqDaCntlrFWRev, cpqDaPhyDrvWrites=cpqDaPhyDrvWrites, cpqDaLogDrvCacheVolAccelWriteCacheHitRate=cpqDaLogDrvCacheVolAccelWriteCacheHitRate, cpqDaCntlrAccessModuleStatus=cpqDaCntlrAccessModuleStatus, cpqDaNw3xDriverStatEntry=cpqDaNw3xDriverStatEntry, cpqDaTapeLibraryDriveList=cpqDaTapeLibraryDriveList, cpqDa2TapeDriveStatusChange=cpqDa2TapeDriveStatusChange, cpqDaTapeCountersTotalErrors=cpqDaTapeCountersTotalErrors, cpqDaTapeDrvNegotiatedLinkRate=cpqDaTapeDrvNegotiatedLinkRate, cpqDaLogDrvCacheVolAccelNoOfWriteMissSkip=cpqDaLogDrvCacheVolAccelNoOfWriteMissSkip, cpqDaOsNetWare3x=cpqDaOsNetWare3x, cpqDaPhyDrvThrViFunctTest3=cpqDaPhyDrvThrViFunctTest3, cpqDaPhyDrvThrHardWriteErrs=cpqDaPhyDrvThrHardWriteErrs, cpqDaNw3xCorrWrites=cpqDaNw3xCorrWrites, cpqDaPhyDrvThrViUsedReallocs=cpqDaPhyDrvThrViUsedReallocs, cpqDaLogDrvPerfSectorsWritten=cpqDaLogDrvPerfSectorsWritten, cpqDaTapeDrvScsiIdIndex=cpqDaTapeDrvScsiIdIndex, cpqDa6TapeLibraryStatusChange=cpqDa6TapeLibraryStatusChange, cpqDaLogDrvCacheVolAccelNoOfWriteMissSkipH=cpqDaLogDrvCacheVolAccelNoOfWriteMissSkipH, cpqDaPhyDrvThrMediaErrs=cpqDaPhyDrvThrMediaErrs, cpqDaPhyDrvNcqSupport=cpqDaPhyDrvNcqSupport, cpqDaTapeLibraryCntlrIndex=cpqDaTapeLibraryCntlrIndex, cpqDaPhyDrvPathTable=cpqDaPhyDrvPathTable, cpqDaPhyDrvHardReadErrs=cpqDaPhyDrvHardReadErrs, cpqDaTapeLibraryScsiTarget=cpqDaTapeLibraryScsiTarget, cpqDaTapeDrvPlacement=cpqDaTapeDrvPlacement, cpqDa2PhyDrvThreshPassedTrap=cpqDa2PhyDrvThreshPassedTrap, cpqDaCntlrStatusChange=cpqDaCntlrStatusChange, cpqDaTapeLibraryStatMoves=cpqDaTapeLibraryStatMoves, cpqDaPhyDrvTime=cpqDaPhyDrvTime, cpqDaTapeDrvCleanReq=cpqDaTapeDrvCleanReq, cpqDaPhyDrvThrSpinUpErrs=cpqDaPhyDrvThrSpinUpErrs, cpqDaLogDrvAvailSprLogDrvExtended=cpqDaLogDrvAvailSprLogDrvExtended, cpqDaPhyDrvSSDEstTimeRemainingHours=cpqDaPhyDrvSSDEstTimeRemainingHours, cpqDaCntlrEncryptionStatus=cpqDaCntlrEncryptionStatus, cpqDaLogDrvPercentRebuild=cpqDaLogDrvPercentRebuild, cpqDaPhyDrvThrRecvReadErrs=cpqDaPhyDrvThrRecvReadErrs, cpqDaPhyDrvThrIrqDeglitches=cpqDaPhyDrvThrIrqDeglitches, cpqDaPhyDrvUsedReallocs=cpqDaPhyDrvUsedReallocs, cpqDaCntlrRedundancyError=cpqDaCntlrRedundancyError, cpqDaPhyDrvModel=cpqDaPhyDrvModel, cpqDaCntlrUnencryptedLogDrvCreationPolicy=cpqDaCntlrUnencryptedLogDrvCreationPolicy, cpqDaPhyDrvPathStatus=cpqDaPhyDrvPathStatus, cpqDaAccelBattery=cpqDaAccelBattery, cpqDaPhyDrvThrViFunctTest2=cpqDaPhyDrvThrViFunctTest2, cpqDaCntlrCurrentTemp=cpqDaCntlrCurrentTemp, cpqDaLogDrvPerfSampleInterval=cpqDaLogDrvPerfSampleInterval, cpqDa6PhyDrvStatusChange=cpqDa6PhyDrvStatusChange, cpqDaPhyDrvThrNotReadyErrs=cpqDaPhyDrvThrNotReadyErrs, cpqDaLogDrvRPIPercentComplete=cpqDaLogDrvRPIPercentComplete, cpqDaTapeDrvHotPlug=cpqDaTapeDrvHotPlug, cpqDaOsCommonModuleVersion=cpqDaOsCommonModuleVersion, cpqDaLogDrvCacheVolAccelLogDrvIndex=cpqDaLogDrvCacheVolAccelLogDrvIndex, cpqDaPhyDrvPathCntlrIndex=cpqDaPhyDrvPathCntlrIndex, cpqDaManagedCableFaultCode=cpqDaManagedCableFaultCode, cpqDaCntlrPerfSampleInterval=cpqDaCntlrPerfSampleInterval, cpqDaPhyDrvReads=cpqDaPhyDrvReads, cpqDaCntlrCondition=cpqDaCntlrCondition, cpqDaLogDrvCacheVolumeAccelEntry=cpqDaLogDrvCacheVolumeAccelEntry, cpqDaPhyDrvThrRecvWriteErrs=cpqDaPhyDrvThrRecvWriteErrs, cpqDaTapeCountersTotalBytes=cpqDaTapeCountersTotalBytes, cpqDa3PhyDrvThreshPassedTrap=cpqDa3PhyDrvThreshPassedTrap, cpqDa4SpareStatusChange=cpqDa4SpareStatusChange, cpqDaCntlrDaughterBoardType=cpqDaCntlrDaughterBoardType, cpqDaAccelStatusChange=cpqDaAccelStatusChange, cpqDaPhyDrvFunctTest2=cpqDaPhyDrvFunctTest2, cpqDaPhyDrvCurrentWidth=cpqDaPhyDrvCurrentWidth, cpqDa2AccelBadDataTrap=cpqDa2AccelBadDataTrap, cpqDaPhyDrvHSeeks=cpqDaPhyDrvHSeeks, cpqDaPhyDrvLocationString=cpqDaPhyDrvLocationString, cpqDaCntlrSerialNumber=cpqDaCntlrSerialNumber, cpqDaManagedCableTable=cpqDaManagedCableTable, cpqDaPhyDrvIrqDeglitches=cpqDaPhyDrvIrqDeglitches, cpqDaAccelBadData=cpqDaAccelBadData, cpqDa5AccelStatusChange=cpqDa5AccelStatusChange, cpqDaPhyDrvSmartCarrierAppFWRev=cpqDaPhyDrvSmartCarrierAppFWRev, cpqDa6AccelBadDataTrap=cpqDa6AccelBadDataTrap, cpqDaLogDrvCntlrExtended=cpqDaLogDrvCntlrExtended, cpqDaCntlrEncryptedLogDrvCreationPolicy=cpqDaCntlrEncryptedLogDrvCreationPolicy, cpqDaPhyDrvCurrentSpeed=cpqDaPhyDrvCurrentSpeed, cpqDaCntlrTable=cpqDaCntlrTable, cpqDaTapeDrvMagSize=cpqDaTapeDrvMagSize, cpqDaCntlrDriveWriteCacheState=cpqDaCntlrDriveWriteCacheState, cpqDaPhyDrvThrSpinupRetries=cpqDaPhyDrvThrSpinupRetries, cpqDaPhyDrvSmartCarrierBootldrFWRev=cpqDaPhyDrvSmartCarrierBootldrFWRev, cpqDaAccelEntry=cpqDaAccelEntry, cpqDaTapeDrvBusIndex=cpqDaTapeDrvBusIndex, cpqDaPhyDrvThrBadRecvWrites=cpqDaPhyDrvThrBadRecvWrites, cpqDaPhyDrvRecvReadErrs=cpqDaPhyDrvRecvReadErrs, cpqDaCntlrHbaFWRev=cpqDaCntlrHbaFWRev, cpqDaAccelWriteCachePercent=cpqDaAccelWriteCachePercent, cpqDaPhyDrvThreshPassed=cpqDaPhyDrvThreshPassed, cpqDaAccelCondition=cpqDaAccelCondition, cpqDaPhyDrvSpinUpErrs=cpqDaPhyDrvSpinUpErrs, cpqDaTapeCountersEntry=cpqDaTapeCountersEntry, cpqDaPhyDrvSenseKey=cpqDaPhyDrvSenseKey, cpqDaCntlrOptionRomRev=cpqDaCntlrOptionRomRev, cpqDaAccelBoardCurrentTemp=cpqDaAccelBoardCurrentTemp, cpqDaSpareEntry=cpqDaSpareEntry, cpqDaPhyDrvThrHardReadErrs=cpqDaPhyDrvThrHardReadErrs, cpqDaManagedCableVendorSerialNumber=cpqDaManagedCableVendorSerialNumber, cpqDaTapeLibraryCurrentSpeed=cpqDaTapeLibraryCurrentSpeed, cpqDaSparePercentRebuild=cpqDaSparePercentRebuild, cpqDriveArray=cpqDriveArray, cpqDaTapeLibrary=cpqDaTapeLibrary, cpqDaLogDrvSpareReplaceMap=cpqDaLogDrvSpareReplaceMap, cpqDaLogDrvCacheVolIndex=cpqDaLogDrvCacheVolIndex, cpqDaPhyDrvEntry=cpqDaPhyDrvEntry, cpqDaTrapTime=cpqDaTrapTime, cpqDa3LogDrvStatusChange=cpqDa3LogDrvStatusChange, cpqDaPhyDrvThrHardwareErrs=cpqDaPhyDrvThrHardwareErrs, cpqDaLogDrvPerfEntry=cpqDaLogDrvPerfEntry, cpqDaAccelCntlrIndex=cpqDaAccelCntlrIndex, cpqDaPhyDrvPathEntry=cpqDaPhyDrvPathEntry, cpqDaPhyDrvPathLocationString=cpqDaPhyDrvPathLocationString, cpqDaAccelCapacitorCurrentTemp=cpqDaAccelCapacitorCurrentTemp, cpqDaTapeLibraryCurrentWidth=cpqDaTapeLibraryCurrentWidth, cpqDaLogDrvPerfReads=cpqDaLogDrvPerfReads, cpqDaTapeCountersBusIndex=cpqDaTapeCountersBusIndex, cpqDaCntlr=cpqDaCntlr, cpqDaLogDrvCacheVolAccelNoOfReadMissLoading=cpqDaLogDrvCacheVolAccelNoOfReadMissLoading, cpqDa6LogDrvStatusChange=cpqDa6LogDrvStatusChange, cpqDaOsCommonModuleIndex=cpqDaOsCommonModuleIndex, cpqDa7SpareStatusChange=cpqDa7SpareStatusChange, cpqDaPhyDrvPreFailMonitoring=cpqDaPhyDrvPreFailMonitoring, cpqDa2SpareStatusChange=cpqDa2SpareStatusChange, cpqDaCntlrASICEncptSelfTestStatus=cpqDaCntlrASICEncptSelfTestStatus, cpqDaTapeDriveStatusChange=cpqDaTapeDriveStatusChange, cpqDaNw3xVolLogDrvIndex=cpqDaNw3xVolLogDrvIndex, cpqDaPhyDrvFailureCode=cpqDaPhyDrvFailureCode, cpqDaTapeDrvTable=cpqDaTapeDrvTable, cpqDaPhyDrvErrIDIndex=cpqDaPhyDrvErrIDIndex, cpqDaPhyDrvBadTargetErrs=cpqDaPhyDrvBadTargetErrs, cpqDaCntlrBoardCondition=cpqDaCntlrBoardCondition, cpqDaCntlrBoardStatus=cpqDaCntlrBoardStatus, cpqDaPhyDrvThrBusFaults=cpqDaPhyDrvThrBusFaults, cpqDaAccelMemoryTransferRate=cpqDaAccelMemoryTransferRate, cpqDaLogDrvSprRplcCntlrExtended=cpqDaLogDrvSprRplcCntlrExtended, cpqDaTapeLibraryCondition=cpqDaTapeLibraryCondition, cpqDaPhyDrvBoxOnConnector=cpqDaPhyDrvBoxOnConnector, cpqDaLogDrvCacheVolAccelNoOfWriteHits=cpqDaLogDrvCacheVolAccelNoOfWriteHits, cpqDaNw3xPollTime=cpqDaNw3xPollTime, cpqDaPhyDrvThr=cpqDaPhyDrvThr, cpqDaNw3xFatalWrites=cpqDaNw3xFatalWrites, cpqDaOsCommonModuleName=cpqDaOsCommonModuleName, cpqDaCntlrEncryptFWLockStatus=cpqDaCntlrEncryptFWLockStatus, cpqDaCntlrPerfCntlrIndex=cpqDaCntlrPerfCntlrIndex, cpqDaLogDrvRebuildingPhyDrv=cpqDaLogDrvRebuildingPhyDrv, cpqDaLogDrvCacheVolAccelNoOfReadMissSkip=cpqDaLogDrvCacheVolAccelNoOfReadMissSkip, cpqDaTapeLibraryLastError=cpqDaTapeLibraryLastError, cpqDaPhyDrvBlinkTime=cpqDaPhyDrvBlinkTime, cpqDaPhyDrvHWrites=cpqDaPhyDrvHWrites, cpqDaSpareStatus=cpqDaSpareStatus, cpqDaCntlrCurrentRole=cpqDaCntlrCurrentRole, cpqDaAccelTable=cpqDaAccelTable, cpqDaPhyDrvPlacement=cpqDaPhyDrvPlacement, cpqDaPhyDrvMultipathAccess=cpqDaPhyDrvMultipathAccess, cpqDaPhyDrvThrCntlrIndex=cpqDaPhyDrvThrCntlrIndex, cpqDaPhyDrvSpinupTime=cpqDaPhyDrvSpinupTime, cpqDaMibRevMajor=cpqDaMibRevMajor, cpqDaPhyDrvMaximumTemperature=cpqDaPhyDrvMaximumTemperature, cpqDaLogDrvOsName=cpqDaLogDrvOsName, cpqDaSpareRebuildBlks=cpqDaSpareRebuildBlks, cpqDaMibCondition=cpqDaMibCondition, cpqDa4PhyDrvStatusChange=cpqDa4PhyDrvStatusChange, cpqDaPhyDrvSataVersion=cpqDaPhyDrvSataVersion, cpqDaLogDrvAvalSprExtAttachTable=cpqDaLogDrvAvalSprExtAttachTable, cpqDaLogDrvCacheVolAccelNoOfWriteMissLockedH=cpqDaLogDrvCacheVolAccelNoOfWriteMissLockedH, cpqDaPhyDrvPathHostConnector=cpqDaPhyDrvPathHostConnector, cpqDaTapeLibraryDoorStatus=cpqDaTapeLibraryDoorStatus, cpqDaCntlrRedundancyType=cpqDaCntlrRedundancyType, cpqDaPhyDrvRecvWriteErrs=cpqDaPhyDrvRecvWriteErrs, cpqDaLogDrvPerfCacheHits=cpqDaLogDrvPerfCacheHits, cpqDa6PhyDrvThreshPassedTrap=cpqDa6PhyDrvThreshPassedTrap, cpqDaPhyDrvErrEntry=cpqDaPhyDrvErrEntry, cpqDaOsCommonPollFreq=cpqDaOsCommonPollFreq, cpqDaPhyDrvSize=cpqDaPhyDrvSize, cpqDaPhyDrvTemperatureThreshold=cpqDaPhyDrvTemperatureThreshold, cpqDaCntlrPerfVersion=cpqDaCntlrPerfVersion, cpqDaTapeLibraryScsiLun=cpqDaTapeLibraryScsiLun, cpqDaCntlrNumberOfInternalPorts=cpqDaCntlrNumberOfInternalPorts, cpqDaCntlrEncryptCntlrPwdSetStatus=cpqDaCntlrEncryptCntlrPwdSetStatus, cpqDaLogDrvSprRplcReplacedPhysDrvExtended=cpqDaLogDrvSprRplcReplacedPhysDrvExtended, cpqDaPhyDrvThrTable=cpqDaPhyDrvThrTable, cpqDaLogDrvSize=cpqDaLogDrvSize, cpqDaLogDrvCacheVolAccelNoOfWriteHitsH=cpqDaLogDrvCacheVolAccelNoOfWriteHitsH, cpqDaCntlrActive=cpqDaCntlrActive, cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoad=cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoad, cpqDaPhyDrvMediaErrs=cpqDaPhyDrvMediaErrs, cpqDaCntlrDriveOwnership=cpqDaCntlrDriveOwnership, cpqDaPhyDrvReallocAborts=cpqDaPhyDrvReallocAborts, cpqDaPhyDrvThrFunctTest3=cpqDaPhyDrvThrFunctTest3, cpqDaCntlrPartnerBoardCondition=cpqDaCntlrPartnerBoardCondition, cpqDaOsCommonModuleDate=cpqDaOsCommonModuleDate, cpqDaLogDrvLogDrvExtended=cpqDaLogDrvLogDrvExtended, cpqDaCntlrProductRev=cpqDaCntlrProductRev, cpqDaNw3xDriverName=cpqDaNw3xDriverName, cpqDaPhyDrvThrViFunctTest1=cpqDaPhyDrvThrViFunctTest1, cpqDaTapeDrvLunIndex=cpqDaTapeDrvLunIndex, cpqDaPhyDrvSpinupRetries=cpqDaPhyDrvSpinupRetries, cpqDaPhyDrvHasMonInfo=cpqDaPhyDrvHasMonInfo, cpqDaLogDrvIndex=cpqDaLogDrvIndex, cpqDaCntlrPerf=cpqDaCntlrPerf, cpqDaLogDrvPerfAvgQueueDepth=cpqDaLogDrvPerfAvgQueueDepth, cpqDaOsCommon=cpqDaOsCommon, cpqDaPhyDrvPowerOnHours=cpqDaPhyDrvPowerOnHours)
mibBuilder.exportSymbols("CPQIDA-MIB", cpqDaLogDrvCacheVolAccelNoOfWriteMissLoading=cpqDaLogDrvCacheVolAccelNoOfWriteMissLoading, cpqDaPhyDrvThrBadTargetErrs=cpqDaPhyDrvThrBadTargetErrs, cpqDaLogDrvStripeSize=cpqDaLogDrvStripeSize)
