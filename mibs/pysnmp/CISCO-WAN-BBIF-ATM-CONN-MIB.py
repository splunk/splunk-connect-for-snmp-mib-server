#
# PySNMP MIB module CISCO-WAN-BBIF-ATM-CONN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-BBIF-ATM-CONN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:03:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
bbChanStateGrp, bbChanCnfGrp = mibBuilder.importSymbols("BASIS-MIB", "bbChanStateGrp", "bbChanCnfGrp")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, ModuleIdentity, Bits, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, iso, IpAddress, Counter32, NotificationType, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "Bits", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "iso", "IpAddress", "Counter32", "NotificationType", "Counter64", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoWanBbifAtmConnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 35))
ciscoWanBbifAtmConnMIB.setRevisions(('2002-09-09 00:00',))
if mibBuilder.loadTexts: ciscoWanBbifAtmConnMIB.setLastUpdated('200209090000Z')
if mibBuilder.loadTexts: ciscoWanBbifAtmConnMIB.setOrganization('Cisco Systems, Inc.')
class IfNsapAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

bbChanCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1), )
if mibBuilder.loadTexts: bbChanCnfGrpTable.setStatus('current')
bbChanCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanCnfNum"))
if mibBuilder.loadTexts: bbChanCnfGrpEntry.setStatus('current')
bbChanCnfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanCnfNum.setStatus('current')
bbChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("modify", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRowStatus.setStatus('current')
bbChanConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanConnType.setStatus('current')
bbChanServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("abr", 3), ("ubr", 4), ("vbr-rt", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanServiceType.setStatus('current')
bbChanConnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanConnDesc.setStatus('current')
bbChanSvcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("svc", 1), ("pvc", 2), ("spvc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanSvcFlag.setStatus('current')
bbChanSvcConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanSvcConnId.setStatus('current')
bbChanIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanIfNum.setStatus('current')
bbChanVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanVpi.setStatus('current')
bbChanVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanVci.setStatus('current')
bbChanUpcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcEnable.setStatus('current')
bbChanUpcPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 1412832))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcPCR.setStatus('current')
bbChanUpcCDVT = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcCDVT.setStatus('current')
bbChanUpcSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412832))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcSCR.setStatus('current')
bbChanUpcMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcMBS.setStatus('current')
bbChanGcra1Action = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("tagCells", 2), ("tagAndDiscard", 3), ("discardAllNonComformCells", 4))).clone('discardAllNonComformCells')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanGcra1Action.setStatus('current')
bbChanGcra2Action = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("tagCells", 2), ("tagAndDiscard", 3), ("discardAllNonComformCells", 4))).clone('discardAllNonComformCells')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanGcra2Action.setStatus('current')
bbChanUpcSCRPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clp0", 1), ("clp0and1", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcSCRPolicing.setStatus('current')
bbChanEfciThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 491520)).clone(196608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanEfciThreshold.setStatus('current')
bbChanDiscardOption = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clpHysteresis", 1), ("frameDiscard", 2))).clone('clpHysteresis')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanDiscardOption.setStatus('current')
bbChanFrmDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 491520))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanFrmDiscardThreshold.setStatus('current')
bbChanClpHiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 491520)).clone(196608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanClpHiThreshold.setStatus('current')
bbChanClpLoThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 491520)).clone(131072)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanClpLoThreshold.setStatus('current')
bbChanCongstUpdateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dontUpdate", 1), ("setCiBit", 2), ("setEfciBit", 3), ("clearEfciBit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanCongstUpdateCode.setStatus('current')
bbChanMaxCellMemThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000)).clone(262144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanMaxCellMemThreshold.setStatus('current')
bbChanIngrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanIngrPercentUtil.setStatus('current')
bbChanEgrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanEgrPercentUtil.setStatus('current')
bbChanEgrSrvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412832))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanEgrSrvRate.setStatus('current')
bbChanOvrSubOvrRide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanOvrSubOvrRide.setStatus('current')
bbChanLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanLocalVpi.setStatus('current')
bbChanLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanLocalVci.setStatus('current')
bbChanLocalNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 32), IfNsapAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanLocalNsapAddr.setStatus('current')
bbChanRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRemoteVpi.setStatus('current')
bbChanRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRemoteVci.setStatus('current')
bbChanRemoteNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 35), IfNsapAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRemoteNsapAddr.setStatus('current')
bbChanMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanMaster.setStatus('current')
bbChanRtePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRtePriority.setStatus('current')
bbChanMaxCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanMaxCost.setStatus('current')
bbChanRestrictTrkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRestriction", 1), ("terrestrialTrunk", 2), ("satelliteTrunk", 3))).clone('noRestriction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRestrictTrkType.setStatus('current')
bbChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testcon", 1), ("testdelay", 2), ("notest", 3))).clone('notest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanTestType.setStatus('current')
bbChanTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notinprogress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanTestState.setStatus('current')
bbChanTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanTestResult.setStatus('current')
bbChanTestTypeCPESide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testconseg", 1), ("notest", 2))).clone('notest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanTestTypeCPESide.setStatus('current')
bbChanTestStateCPESide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notinprogress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanTestStateCPESide.setStatus('current')
bbConnVpcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbConnVpcFlag.setStatus('current')
bbConnServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("ubr", 4), ("abrstd", 6), ("vbrrt", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbConnServiceType.setStatus('current')
bbConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbConnPCR.setStatus('current')
bbConnSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbConnSCR.setStatus('current')
bbConnPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbConnPercentUtil.setStatus('current')
bbRemoteConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbRemoteConnPCR.setStatus('current')
bbRemoteConnSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbRemoteConnSCR.setStatus('current')
bbRemoteConnPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbRemoteConnPercentUtil.setStatus('current')
bbChanUpcMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412832))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcMCR.setStatus('current')
bbChanNumNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanNumNextAvailable.setStatus('current')
bbChanVpIdNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanVpIdNextAvailable.setStatus('current')
bbChanStateGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1), )
if mibBuilder.loadTexts: bbChanStateGrpTable.setStatus('current')
bbChanStateGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanStateNum"))
if mibBuilder.loadTexts: bbChanStateGrpEntry.setStatus('current')
bbChanStateNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanStateNum.setStatus('current')
bbChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notconfigured", 1), ("normal", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanState.setStatus('current')
bbChanEgrXmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("sendingAis", 3), ("sendingFerf", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanEgrXmtState.setStatus('current')
bbChanIngrRcvState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receivingAis", 3), ("receivingFerf", 4), ("alarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanIngrRcvState.setStatus('current')
cwbAtmConnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 35, 2))
cwbAtmConnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 35, 2, 1))
cwbAtmConnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 35, 2, 2))
cwbAtmConnCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 35, 2, 2, 1)).setObjects(("CISCO-WAN-BBIF-ATM-CONN-MIB", "cwbAtmConnGroup"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "cwbAtmConnStateGroup"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "cwbAtmConnGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbAtmConnCompliance = cwbAtmConnCompliance.setStatus('current')
cwbAtmConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 35, 2, 1, 1)).setObjects(("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanCnfNum"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanRowStatus"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanConnType"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanServiceType"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanConnDesc"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanSvcFlag"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanSvcConnId"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanIfNum"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanVpi"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanVci"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanUpcEnable"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanUpcPCR"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanUpcCDVT"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanUpcSCR"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanUpcMBS"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanGcra1Action"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanGcra2Action"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanUpcSCRPolicing"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanEfciThreshold"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanDiscardOption"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanFrmDiscardThreshold"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanClpHiThreshold"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanClpLoThreshold"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanCongstUpdateCode"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanMaxCellMemThreshold"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanIngrPercentUtil"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanEgrPercentUtil"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanEgrSrvRate"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanOvrSubOvrRide"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanLocalVpi"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanLocalVci"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanLocalNsapAddr"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanRemoteVpi"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanRemoteVci"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanRemoteNsapAddr"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanMaster"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanRtePriority"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanMaxCost"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanRestrictTrkType"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanTestType"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanTestState"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanTestResult"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanTestTypeCPESide"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanTestStateCPESide"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbConnVpcFlag"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbConnServiceType"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbConnPCR"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbConnSCR"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbConnPercentUtil"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbRemoteConnPCR"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbRemoteConnSCR"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbRemoteConnPercentUtil"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanUpcMCR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbAtmConnGroup = cwbAtmConnGroup.setStatus('current')
cwbAtmConnStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 35, 2, 1, 2)).setObjects(("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanStateNum"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanState"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanEgrXmtState"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanIngrRcvState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbAtmConnStateGroup = cwbAtmConnStateGroup.setStatus('current')
cwbAtmConnGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 35, 2, 1, 3)).setObjects(("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanNumNextAvailable"), ("CISCO-WAN-BBIF-ATM-CONN-MIB", "bbChanVpIdNextAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbAtmConnGeneralGroup = cwbAtmConnGeneralGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-WAN-BBIF-ATM-CONN-MIB", bbChanTestType=bbChanTestType, bbChanUpcMCR=bbChanUpcMCR, bbChanLocalVci=bbChanLocalVci, bbChanClpHiThreshold=bbChanClpHiThreshold, cwbAtmConnMIBCompliances=cwbAtmConnMIBCompliances, bbChanEgrXmtState=bbChanEgrXmtState, bbChanTestResult=bbChanTestResult, bbChanStateNum=bbChanStateNum, bbConnSCR=bbConnSCR, bbConnPCR=bbConnPCR, bbChanCongstUpdateCode=bbChanCongstUpdateCode, bbChanVpi=bbChanVpi, bbChanUpcEnable=bbChanUpcEnable, bbChanGcra1Action=bbChanGcra1Action, bbChanGcra2Action=bbChanGcra2Action, bbConnPercentUtil=bbConnPercentUtil, IfNsapAddress=IfNsapAddress, bbChanVpIdNextAvailable=bbChanVpIdNextAvailable, bbChanStateGrpTable=bbChanStateGrpTable, bbChanState=bbChanState, cwbAtmConnStateGroup=cwbAtmConnStateGroup, bbChanCnfGrpEntry=bbChanCnfGrpEntry, bbChanStateGrpEntry=bbChanStateGrpEntry, bbChanMaster=bbChanMaster, bbChanEgrSrvRate=bbChanEgrSrvRate, bbChanIfNum=bbChanIfNum, cwbAtmConnGeneralGroup=cwbAtmConnGeneralGroup, bbRemoteConnSCR=bbRemoteConnSCR, cwbAtmConnMIBGroups=cwbAtmConnMIBGroups, bbChanUpcPCR=bbChanUpcPCR, ciscoWanBbifAtmConnMIB=ciscoWanBbifAtmConnMIB, bbChanUpcMBS=bbChanUpcMBS, bbChanEfciThreshold=bbChanEfciThreshold, bbChanRtePriority=bbChanRtePriority, bbChanDiscardOption=bbChanDiscardOption, bbChanServiceType=bbChanServiceType, bbChanMaxCellMemThreshold=bbChanMaxCellMemThreshold, bbChanRemoteNsapAddr=bbChanRemoteNsapAddr, bbChanTestState=bbChanTestState, bbChanRestrictTrkType=bbChanRestrictTrkType, bbChanIngrPercentUtil=bbChanIngrPercentUtil, cwbAtmConnGroup=cwbAtmConnGroup, bbChanConnType=bbChanConnType, bbChanRemoteVci=bbChanRemoteVci, bbChanTestStateCPESide=bbChanTestStateCPESide, bbChanLocalNsapAddr=bbChanLocalNsapAddr, bbRemoteConnPercentUtil=bbRemoteConnPercentUtil, bbChanVci=bbChanVci, bbChanUpcCDVT=bbChanUpcCDVT, bbChanSvcConnId=bbChanSvcConnId, bbChanUpcSCR=bbChanUpcSCR, bbChanConnDesc=bbChanConnDesc, bbChanRemoteVpi=bbChanRemoteVpi, bbChanMaxCost=bbChanMaxCost, bbRemoteConnPCR=bbRemoteConnPCR, bbChanRowStatus=bbChanRowStatus, bbChanFrmDiscardThreshold=bbChanFrmDiscardThreshold, PYSNMP_MODULE_ID=ciscoWanBbifAtmConnMIB, bbChanTestTypeCPESide=bbChanTestTypeCPESide, cwbAtmConnCompliance=cwbAtmConnCompliance, cwbAtmConnMIBConformance=cwbAtmConnMIBConformance, bbChanCnfNum=bbChanCnfNum, bbChanSvcFlag=bbChanSvcFlag, bbChanUpcSCRPolicing=bbChanUpcSCRPolicing, bbConnServiceType=bbConnServiceType, bbChanIngrRcvState=bbChanIngrRcvState, bbChanLocalVpi=bbChanLocalVpi, bbConnVpcFlag=bbConnVpcFlag, bbChanEgrPercentUtil=bbChanEgrPercentUtil, bbChanCnfGrpTable=bbChanCnfGrpTable, bbChanNumNextAvailable=bbChanNumNextAvailable, bbChanOvrSubOvrRide=bbChanOvrSubOvrRide, bbChanClpLoThreshold=bbChanClpLoThreshold)
