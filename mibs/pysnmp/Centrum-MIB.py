#
# PySNMP MIB module Centrum-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Centrum-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:18:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, iso, Integer32, TimeTicks, ObjectIdentity, MibIdentifier, enterprises, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, Gauge32, Counter64, Unsigned32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Integer32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "enterprises", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "Gauge32", "Counter64", "Unsigned32", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
centrum = MibIdentifier((1, 3, 6, 1, 4, 1, 327))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1))
centrumRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1))
port = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 1))
path = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 2))
crip = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 3))
ipx = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 4))
brg = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 5))
admin = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 6))
crat = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 7))
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1), ).setIndexNames((0, "Centrum-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
portId = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65))).clone(namedValues=NamedValues(("msEthernet", 1), ("s1Ethernet", 2), ("s1Sync", 3), ("s1Async1", 4), ("s1Async2", 5), ("s1Async3", 6), ("s1Async4", 7), ("s1Async5", 8), ("s1Async6", 9), ("s1Async7", 10), ("s1Async8", 11), ("s2Ethernet", 12), ("s2Sync", 13), ("s2Async1", 14), ("s2Async2", 15), ("s2Async3", 16), ("s2Async4", 17), ("s2Async5", 18), ("s2Async6", 19), ("s2Async7", 20), ("s2Async8", 21), ("msTokenRing", 22), ("port1", 30), ("port2", 31), ("port3", 32), ("port4", 33), ("port5", 34), ("port6", 35), ("port7", 36), ("port8", 37), ("s1Br1B1", 50), ("s1Br1B2", 51), ("s1Br2B1", 52), ("s1Br2B2", 53), ("s1Br3B1", 54), ("s1Br3B2", 55), ("s1Br4B1", 56), ("s1Br4B2", 57), ("s2Br1B1", 58), ("s2Br1B2", 59), ("s2Br2B1", 60), ("s2Br2B2", 61), ("s2Br3B1", 62), ("s2Br3B2", 63), ("s2Br4B1", 64), ("s2Br4B2", 65)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portId.setStatus('mandatory')
portSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSlot.setStatus('mandatory')
portScriptIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portScriptIdx.setStatus('mandatory')
portBaudrate = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(24, 48, 96, 192, 384, 560, 576, 1152))).clone(namedValues=NamedValues(("baud-2400", 24), ("baud-4800", 48), ("baud-9600", 96), ("baud-19200", 192), ("baud-38400", 384), ("baud-56000", 560), ("baud-57600", 576), ("baud-115200", 1152)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaudrate.setStatus('mandatory')
portParity = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("odd", 1), ("even", 2), ("zero", 3), ("one", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portParity.setStatus('mandatory')
portStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bit-1", 1), ("bit-15", 2), ("bits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStopBits.setStatus('mandatory')
portDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8))).clone(namedValues=NamedValues(("bits-5", 5), ("bits-6", 6), ("bits-7", 7), ("bits-8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDataBits.setStatus('mandatory')
portCCSP = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCCSP.setStatus('mandatory')
portPPPProbeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPProbeInterval.setStatus('mandatory')
portPPPMaxRcvPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPMaxRcvPacketLength.setStatus('mandatory')
portPPPAsyncCtrlChar = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPAsyncCtrlChar.setStatus('mandatory')
portPPPProtCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPProtCompress.setStatus('mandatory')
portPPPACCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPACCompress.setStatus('mandatory')
portCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCRCErrors.setStatus('mandatory')
portOversizes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOversizes.setStatus('mandatory')
portUndersizes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUndersizes.setStatus('mandatory')
portCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCollisions.setStatus('mandatory')
portInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInPackets.setStatus('mandatory')
portOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutPackets.setStatus('mandatory')
portInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInBytes.setStatus('mandatory')
portOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutBytes.setStatus('mandatory')
portResetPortCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portResetPortCounters.setStatus('mandatory')
portAsyncParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAsyncParityErrors.setStatus('mandatory')
portAsyncCharFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAsyncCharFrameErrors.setStatus('mandatory')
portAsyncOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAsyncOverrunErrors.setStatus('mandatory')
portAsyncPktCksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAsyncPktCksumErrors.setStatus('mandatory')
portCTSState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCTSState.setStatus('mandatory')
portDCDState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDCDState.setStatus('mandatory')
portRIState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRIState.setStatus('mandatory')
portSyncFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSyncFcsErrors.setStatus('mandatory')
portSyncMemoryErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSyncMemoryErrors.setStatus('mandatory')
portSyncOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSyncOverrunErrors.setStatus('mandatory')
portSyncUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSyncUnderrunErrors.setStatus('mandatory')
portIPCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIPCPState.setStatus('mandatory')
portIPXCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIPXCPState.setStatus('mandatory')
portBNCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBNCPState.setStatus('mandatory')
portDriverState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("reset", 2), ("init", 3), ("open", 4), ("online", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDriverState.setStatus('mandatory')
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16))).clone(namedValues=NamedValues(("megabyte-4", 4), ("megabyte-16", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeed.setStatus('mandatory')
portTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTotalErrors.setStatus('mandatory')
portTransmitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTransmitDiscards.setStatus('mandatory')
portReceiveCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portReceiveCongestions.setStatus('mandatory')
portUnknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUnknownProtocols.setStatus('mandatory')
portAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("auto", 1), ("arap1-0", 2), ("router", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAccessType.setStatus('mandatory')
portDialHangUp = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDialHangUp.setStatus('mandatory')
portPortDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPortDisabled.setStatus('mandatory')
portArapCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v42bis", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portArapCompress.setStatus('mandatory')
portInterFace = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("async", 1), ("sync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInterFace.setStatus('mandatory')
portLEDLink = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDLink.setStatus('mandatory')
portLEDActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("light", 1), ("medium", 2), ("heavy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDActivity.setStatus('mandatory')
portLEDFault = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDFault.setStatus('mandatory')
portLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dial", 0), ("permanent", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLinkType.setStatus('mandatory')
portSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("att5ess", 1), ("dms100", 2), ("ni1", 3), ("ins64", 4), ("vn3", 5), ("net3", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSwitchType.setStatus('mandatory')
portSPID_1 = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setLabel("portSPID-1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSPID_1.setStatus('mandatory')
portSPID_2 = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setLabel("portSPID-2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSPID_2.setStatus('mandatory')
portDirectoryNo_1 = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setLabel("portDirectoryNo-1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDirectoryNo_1.setStatus('mandatory')
portDirectoryNo_2 = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setLabel("portDirectoryNo-2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDirectoryNo_2.setStatus('mandatory')
portLocalDialNo_1 = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setLabel("portLocalDialNo-1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLocalDialNo_1.setStatus('mandatory')
portLocalDialNo_2 = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setLabel("portLocalDialNo-2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLocalDialNo_2.setStatus('mandatory')
portLocalSubaddress_1 = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setLabel("portLocalSubaddress-1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLocalSubaddress_1.setStatus('mandatory')
portLocalSubaddress_2 = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setLabel("portLocalSubaddress-2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLocalSubaddress_2.setStatus('mandatory')
portProtocolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("v-120", 4), ("raw", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portProtocolMode.setStatus('mandatory')
portPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPortReset.setStatus('mandatory')
portIncomingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIncomingCalls.setStatus('mandatory')
portOutgoingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutgoingCalls.setStatus('mandatory')
portRemoteDialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRemoteDialNo.setStatus('mandatory')
portRemoteSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRemoteSubaddress.setStatus('mandatory')
portISDNInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portISDNInterfaceType.setStatus('mandatory')
portPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPathName.setStatus('mandatory')
portILCCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portILCCPState.setStatus('mandatory')
portCurISDNBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b-1", 1), ("b-2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCurISDNBChannel.setStatus('mandatory')
portLoginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("dial-in", 2), ("dial-out", 3), ("disabled", 4), ("router", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLoginStatus.setStatus('mandatory')
portLastConnectBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-used", 1), ("b-1", 2), ("b-2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastConnectBChannel.setStatus('mandatory')
portISDNPhyLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deactivated", 1), ("activated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portISDNPhyLineStatus.setStatus('mandatory')
portTEIState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("assigned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTEIState.setStatus('mandatory')
portLayer3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 2, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uninitialized", 1), ("initialized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLayer3Status.setStatus('mandatory')
portResetAllCounters = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portResetAllCounters.setStatus('mandatory')
portSourceRouteTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 4), )
if mibBuilder.loadTexts: portSourceRouteTable.setStatus('mandatory')
portSourceRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 4, 1), ).setIndexNames((0, "Centrum-MIB", "portSRMacAddress"))
if mibBuilder.loadTexts: portSourceRouteEntry.setStatus('mandatory')
portSRMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSRMacAddress.setStatus('mandatory')
portSRState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("empty", 0), ("pending", 1), ("new", 2), ("old", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSRState.setStatus('mandatory')
portSRTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSRTimeToLive.setStatus('mandatory')
portSRLargestFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSRLargestFrame.setStatus('mandatory')
portSRDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forward", 0), ("backword", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSRDirection.setStatus('mandatory')
portSRRouteDescrpt = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSRRouteDescrpt.setStatus('mandatory')
portAllLoginStatus = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAllLoginStatus.setStatus('mandatory')
portTokenRingSpeed = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16))).clone(namedValues=NamedValues(("megabyte-4", 4), ("megabyte-16", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTokenRingSpeed.setStatus('mandatory')
portAllLEDStatus = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAllLEDStatus.setStatus('mandatory')
prpaNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaNumber.setStatus('mandatory')
prpaTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2), )
if mibBuilder.loadTexts: prpaTable.setStatus('mandatory')
prpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1), ).setIndexNames((0, "Centrum-MIB", "prpaIndex"))
if mibBuilder.loadTexts: prpaEntry.setStatus('mandatory')
prpaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIndex.setStatus('mandatory')
prpaName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaName.setStatus('mandatory')
prpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaType.setStatus('mandatory')
prpaPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaPortIdx.setStatus('mandatory')
prpaAutoHangUp = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prpaAutoHangUp.setStatus('mandatory')
prpaInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaInPackets.setStatus('mandatory')
prpaOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaOutPackets.setStatus('mandatory')
prpaInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaInBytes.setStatus('mandatory')
prpaOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaOutBytes.setStatus('mandatory')
prpaResetPrpaCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prpaResetPrpaCounters.setStatus('mandatory')
prpaLoginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unused", 0), ("dial-in", 1), ("dial-out", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginStatus.setStatus('mandatory')
prpaLoginUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginUserName.setStatus('mandatory')
prpaLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginTime.setStatus('mandatory')
prpaLoginDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginDuration.setStatus('mandatory')
prpaLoginAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginAttempts.setStatus('mandatory')
prpaLoginInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginInPackets.setStatus('mandatory')
prpaLoginOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginOutPackets.setStatus('mandatory')
prpaLoginInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginInBytes.setStatus('mandatory')
prpaLoginOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginOutBytes.setStatus('mandatory')
prpaLoginParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginParityErrors.setStatus('mandatory')
prpaLoginFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginFrameErrors.setStatus('mandatory')
prpaLoginOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginOverrunErrors.setStatus('mandatory')
prpaLoginCksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoginCksumErrors.setStatus('mandatory')
prpaFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prpaFilterAction.setStatus('mandatory')
prpaFilterMap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prpaFilterMap.setStatus('mandatory')
prpaLoggerMap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prpaLoggerMap.setStatus('mandatory')
prpaFilterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaFilterCount.setStatus('mandatory')
prpaLoggerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLoggerCount.setStatus('mandatory')
prpaDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaDiscardedPackets.setStatus('mandatory')
prpaForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaForwardedPackets.setStatus('mandatory')
prpaReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaReceivedPackets.setStatus('mandatory')
prpaSmartFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prpaSmartFiltering.setStatus('mandatory')
prpaCurrentMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaCurrentMacAddr.setStatus('mandatory')
prpaIpEthernetII = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIpEthernetII.setStatus('mandatory')
prpaIpSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIpSnap.setStatus('mandatory')
prpaRemotePcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaRemotePcIpAddress.setStatus('mandatory')
prpaIpxEn2WithNetBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIpxEn2WithNetBIOS.setStatus('mandatory')
prpaIpx8023WithNetBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIpx8023WithNetBIOS.setStatus('mandatory')
prpaIpx8022WithNetBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIpx8022WithNetBIOS.setStatus('mandatory')
prpaIpxSnapWithNetBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIpxSnapWithNetBIOS.setStatus('mandatory')
prpaXNS = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaXNS.setStatus('mandatory')
prpaVinesEthernetII = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaVinesEthernetII.setStatus('mandatory')
prpaVinesSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaVinesSnap.setStatus('mandatory')
prpaNetBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaNetBIOS.setStatus('mandatory')
prpaDECNet = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaDECNet.setStatus('mandatory')
prpaUnknowEthernetII = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaUnknowEthernetII.setStatus('mandatory')
prpaUnknownSap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaUnknownSap.setStatus('mandatory')
prpaUnknownSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaUnknownSnap.setStatus('mandatory')
prpaMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaMulticastAddress.setStatus('mandatory')
prpaXNSSap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaXNSSap.setStatus('mandatory')
prpaXNSSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaXNSSnap.setStatus('mandatory')
prpaVinesSap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaVinesSap.setStatus('mandatory')
prpaIpxEn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIpxEn2.setStatus('mandatory')
prpaIpx8023 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIpx8023.setStatus('mandatory')
prpaIpx8022 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIpx8022.setStatus('mandatory')
prpaIpxSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIpxSnap.setStatus('mandatory')
prpaPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaPortList.setStatus('mandatory')
prpaSpoofState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("connect", 2), ("spoofing", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaSpoofState.setStatus('mandatory')
prpaCCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaCCPState.setStatus('mandatory')
prpaIPCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIPCPState.setStatus('mandatory')
prpaIPXCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaIPXCPState.setStatus('mandatory')
prpaBNCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaBNCPState.setStatus('mandatory')
prpaARAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaARAPState.setStatus('mandatory')
prpaLinkUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prpaLinkUtil.setStatus('mandatory')
plocalNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalNumber.setStatus('mandatory')
plocalTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4), )
if mibBuilder.loadTexts: plocalTable.setStatus('mandatory')
plocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1), ).setIndexNames((0, "Centrum-MIB", "plocalIndex"))
if mibBuilder.loadTexts: plocalEntry.setStatus('mandatory')
plocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalIndex.setStatus('mandatory')
plocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalName.setStatus('mandatory')
plocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalType.setStatus('mandatory')
plocalPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalPortIdx.setStatus('mandatory')
plocalInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalInPackets.setStatus('mandatory')
plocalOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalOutPackets.setStatus('mandatory')
plocalInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalInBytes.setStatus('mandatory')
plocalOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalOutBytes.setStatus('mandatory')
plocalResetPlocalCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plocalResetPlocalCounters.setStatus('mandatory')
plocalFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plocalFilterAction.setStatus('mandatory')
plocalFilterMap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plocalFilterMap.setStatus('mandatory')
plocalLoggerMap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plocalLoggerMap.setStatus('mandatory')
plocalFilterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalFilterCount.setStatus('mandatory')
plocalLoggerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalLoggerCount.setStatus('mandatory')
plocalDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalDiscardedPackets.setStatus('mandatory')
plocalForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalForwardedPackets.setStatus('mandatory')
plocalReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plocalReceivedPackets.setStatus('mandatory')
prmtNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtNumber.setStatus('mandatory')
prmtTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6), )
if mibBuilder.loadTexts: prmtTable.setStatus('mandatory')
prmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1), ).setIndexNames((0, "Centrum-MIB", "prmtIndex"))
if mibBuilder.loadTexts: prmtEntry.setStatus('mandatory')
prmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtIndex.setStatus('mandatory')
prmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtName.setStatus('mandatory')
prmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtType.setStatus('mandatory')
prmtInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtInitiator.setStatus('mandatory')
prmtCongestThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtCongestThreshold.setStatus('mandatory')
prmtScheduleType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("daily", 2), ("weekly", 3), ("monthly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtScheduleType1.setStatus('mandatory')
prmtDaysScheduled1 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtDaysScheduled1.setStatus('mandatory')
prmtStartTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtStartTime1.setStatus('mandatory')
prmtHowLong1 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtHowLong1.setStatus('mandatory')
prmtScheduleType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("daily", 2), ("weekly", 3), ("monthly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtScheduleType2.setStatus('mandatory')
prmtDaysScheduled2 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtDaysScheduled2.setStatus('mandatory')
prmtStartTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtStartTime2.setStatus('mandatory')
prmtHowLong2 = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtHowLong2.setStatus('mandatory')
prmtInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtInPackets.setStatus('mandatory')
prmtOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtOutPackets.setStatus('mandatory')
prmtInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtInBytes.setStatus('mandatory')
prmtOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtOutBytes.setStatus('mandatory')
prmtResetPrmtCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtResetPrmtCounters.setStatus('mandatory')
prmtFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtFilterAction.setStatus('mandatory')
prmtFilterMap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtFilterMap.setStatus('mandatory')
prmtLoggerMap = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtLoggerMap.setStatus('mandatory')
prmtFilterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtFilterCount.setStatus('mandatory')
prmtLoggerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtLoggerCount.setStatus('mandatory')
prmtDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtDiscardedPackets.setStatus('mandatory')
prmtForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtForwardedPackets.setStatus('mandatory')
prmtReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtReceivedPackets.setStatus('mandatory')
prmtSmartFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtSmartFiltering.setStatus('mandatory')
prmtOutCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtOutCongestions.setStatus('mandatory')
prmtRmtRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtRmtRouterName.setStatus('mandatory')
prmtTypeSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("permanent-only", 1), ("permanent-with-backup", 2), ("on-demand-only", 3), ("schedule-only", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtTypeSelection.setStatus('mandatory')
prmtAsyncPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtAsyncPortNo.setStatus('mandatory')
prmtISDNPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtISDNPortNo.setStatus('mandatory')
prmtISDNReqBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("br-56000", 1), ("br-64000", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtISDNReqBaudRate.setStatus('mandatory')
prmtSpoofState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("connect", 2), ("spoofing", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtSpoofState.setStatus('mandatory')
prmtCCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtCCPState.setStatus('mandatory')
prmtIPCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtIPCPState.setStatus('mandatory')
prmtIPXCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtIPXCPState.setStatus('mandatory')
prmtBNCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtBNCPState.setStatus('mandatory')
prmtLinkUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtLinkUtil.setStatus('mandatory')
prmtPMPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtPMPortList.setStatus('mandatory')
prmtBUPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtBUPortList.setStatus('mandatory')
prmtODPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtODPortList.setStatus('mandatory')
prmtSCPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 6, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtSCPortList.setStatus('mandatory')
prmtPortTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 7), )
if mibBuilder.loadTexts: prmtPortTable.setStatus('mandatory')
prmtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 7, 1), ).setIndexNames((0, "Centrum-MIB", "prmtPortPrmtIdx"), (0, "Centrum-MIB", "prmtPortPortIdx"))
if mibBuilder.loadTexts: prmtPortEntry.setStatus('mandatory')
prmtPortPrmtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtPortPrmtIdx.setStatus('mandatory')
prmtPortPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtPortPortIdx.setStatus('mandatory')
prmtPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("on-demand", 2), ("permanent", 3), ("backup", 4), ("scheduled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtPortType.setStatus('mandatory')
prmtPortPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtPortPhoneNumber.setStatus('mandatory')
prmtPortDirectoryNo = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtPortDirectoryNo.setStatus('mandatory')
pathResetAllCounters = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathResetAllCounters.setStatus('mandatory')
prmtPhoneTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 9), )
if mibBuilder.loadTexts: prmtPhoneTable.setStatus('mandatory')
prmtPhoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 9, 1), ).setIndexNames((0, "Centrum-MIB", "prmtPhonePrmtIdx"), (0, "Centrum-MIB", "prmtPhoneIdx"))
if mibBuilder.loadTexts: prmtPhoneEntry.setStatus('mandatory')
prmtPhonePrmtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtPhonePrmtIdx.setStatus('mandatory')
prmtPhoneIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prmtPhoneIdx.setStatus('mandatory')
prmtPhoneType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalid", 1), ("on-demand-isdn", 2), ("on-demand-async", 3), ("backup-isdn", 4), ("backup-async", 5), ("scheduled-isdn", 6), ("scheduled-async", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtPhoneType.setStatus('mandatory')
prmtPhonePhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtPhonePhoneNumber.setStatus('mandatory')
prmtPhoneDirectoryNo = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 2, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prmtPhoneDirectoryNo.setStatus('mandatory')
ipRpa = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1))
ipRt = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2))
ipRpaNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRpaNumber.setStatus('mandatory')
ipRpaTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 2), )
if mibBuilder.loadTexts: ipRpaTable.setStatus('mandatory')
ipRpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 2, 1), ).setIndexNames((0, "Centrum-MIB", "ipRpaIndex"))
if mibBuilder.loadTexts: ipRpaEntry.setStatus('mandatory')
ipRpaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRpaIndex.setStatus('mandatory')
ipRpaCurrentClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRpaCurrentClientIpAddress.setStatus('mandatory')
ipRpaConfigClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRpaConfigClientIpAddress.setStatus('mandatory')
ipRpaTcpHdrCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRpaTcpHdrCompress.setStatus('mandatory')
ipRpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRpaType.setStatus('mandatory')
ipRpaBootpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRpaBootpEnabled.setStatus('mandatory')
ipRpaRarpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRpaRarpEnabled.setStatus('mandatory')
ipRpaBootpOrRarpRequired = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRpaBootpOrRarpRequired.setStatus('mandatory')
ipRpaBootpInPackets = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRpaBootpInPackets.setStatus('mandatory')
ipRpaBootpOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRpaBootpOutPackets.setStatus('mandatory')
ipRpaRarpInPackets = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRpaRarpInPackets.setStatus('mandatory')
ipRpaRarpOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRpaRarpOutPackets.setStatus('mandatory')
ipRpaResetAllRasCounters = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRpaResetAllRasCounters.setStatus('mandatory')
ipRpaPRPAIpHdrCompress = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRpaPRPAIpHdrCompress.setStatus('mandatory')
ipSRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSRouteNumber.setStatus('mandatory')
ipSRouteTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: ipSRouteTable.setStatus('mandatory')
ipSRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "Centrum-MIB", "ipSRouteIndex"))
if mibBuilder.loadTexts: ipSRouteEntry.setStatus('mandatory')
ipSRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSRouteIndex.setStatus('mandatory')
ipSRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSRouteName.setStatus('mandatory')
ipSRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSRouteType.setStatus('mandatory')
ipSRoutePathType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSRoutePathType.setStatus('mandatory')
ipSRoutePathIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSRoutePathIdx.setStatus('mandatory')
ipSRouteDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSRouteDestIpAddress.setStatus('mandatory')
ipSRouteNextRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSRouteNextRouter.setStatus('mandatory')
ipSRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSRouteHopCount.setStatus('mandatory')
ipPLocalNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPLocalNumber.setStatus('mandatory')
ipPLocalTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 4), )
if mibBuilder.loadTexts: ipPLocalTable.setStatus('mandatory')
ipPLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 4, 1), ).setIndexNames((0, "Centrum-MIB", "ipPLocalIndex"))
if mibBuilder.loadTexts: ipPLocalEntry.setStatus('mandatory')
ipPLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPLocalIndex.setStatus('mandatory')
ipPLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPLocalIpAddress.setStatus('mandatory')
ipPLocalNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPLocalNetMask.setStatus('mandatory')
ipPLocalBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("zero-based", 0), ("one-based", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPLocalBcastAddr.setStatus('mandatory')
ipPRmtNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPRmtNumber.setStatus('mandatory')
ipPRmtTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 6), )
if mibBuilder.loadTexts: ipPRmtTable.setStatus('mandatory')
ipPRmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 6, 1), ).setIndexNames((0, "Centrum-MIB", "ipPRmtIndex"))
if mibBuilder.loadTexts: ipPRmtEntry.setStatus('mandatory')
ipPRmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPRmtIndex.setStatus('mandatory')
ipPRmtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPRmtIpAddress.setStatus('mandatory')
ipPRmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPRmtNetMask.setStatus('mandatory')
ipPRmtBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("zero-based", 0), ("one-based", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPRmtBcastAddr.setStatus('mandatory')
ipPRmtRipUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("trigger-update", 2), ("periodic-update", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPRmtRipUpdate.setStatus('mandatory')
ipPRmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPRmtType.setStatus('mandatory')
ipPRmtTcpHdrCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPRmtTcpHdrCompress.setStatus('mandatory')
ipRtUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtUpdateTime.setStatus('mandatory')
ipRtRipEnabled = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtRipEnabled.setStatus('mandatory')
ipRtEnabled = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtEnabled.setStatus('mandatory')
ipRtDefaultTTL = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtDefaultTTL.setStatus('mandatory')
ipRtPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtPoisonReverse.setStatus('mandatory')
ipRtResetAllCounters = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtResetAllCounters.setStatus('mandatory')
ipRtInPackets = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtInPackets.setStatus('mandatory')
ipRtOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtOutPackets.setStatus('mandatory')
ipRtDefaultRouterAddress = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtDefaultRouterAddress.setStatus('mandatory')
ipRtDefaultRouterPathType = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtDefaultRouterPathType.setStatus('mandatory')
ipRtDefaultRouterPathIdx = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtDefaultRouterPathIdx.setStatus('mandatory')
ipRtDiscardNBBcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 3, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtDiscardNBBcastPkts.setStatus('mandatory')
ipxRpa = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 1))
ipxRt = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2))
ipxRpaNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRpaNetNumber.setStatus('mandatory')
ipxRpaNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRpaNumber.setStatus('mandatory')
ipxRpaTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 1, 3), )
if mibBuilder.loadTexts: ipxRpaTable.setStatus('mandatory')
ipxRpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 1, 3, 1), ).setIndexNames((0, "Centrum-MIB", "ipxRpaIndex"))
if mibBuilder.loadTexts: ipxRpaEntry.setStatus('mandatory')
ipxRpaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRpaIndex.setStatus('mandatory')
ipxRpaCurrHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRpaCurrHostAddr.setStatus('mandatory')
ipxSRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSRouteNumber.setStatus('mandatory')
ipxSRouteTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: ipxSRouteTable.setStatus('mandatory')
ipxSRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "Centrum-MIB", "ipxSRouteIndex"))
if mibBuilder.loadTexts: ipxSRouteEntry.setStatus('mandatory')
ipxSRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSRouteIndex.setStatus('mandatory')
ipxSRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSRouteName.setStatus('mandatory')
ipxSRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSRouteType.setStatus('mandatory')
ipxSRoutePathType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSRoutePathType.setStatus('mandatory')
ipxSRoutePathIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSRoutePathIdx.setStatus('mandatory')
ipxSRouteDestNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSRouteDestNetNumber.setStatus('mandatory')
ipxSRouteNextHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSRouteNextHostAddress.setStatus('mandatory')
ipxSRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSRouteHopCount.setStatus('mandatory')
ipxPLocalNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPLocalNumber.setStatus('mandatory')
ipxPLocalTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: ipxPLocalTable.setStatus('mandatory')
ipxPLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "Centrum-MIB", "ipxPLocalIndex"))
if mibBuilder.loadTexts: ipxPLocalEntry.setStatus('mandatory')
ipxPLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPLocalIndex.setStatus('mandatory')
ipxPLocalNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPLocalNetNumber.setStatus('mandatory')
ipxPLocalDataLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ieee8023", 1), ("ethernet", 2), ("snap", 3), ("ieee8022", 4), ("autolearn", 5), ("trsnap", 6), ("trsap", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPLocalDataLinkType.setStatus('mandatory')
ipxPRmtNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPRmtNumber.setStatus('mandatory')
ipxPRmtTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 6), )
if mibBuilder.loadTexts: ipxPRmtTable.setStatus('mandatory')
ipxPRmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 6, 1), ).setIndexNames((0, "Centrum-MIB", "ipxPRmtIndex"))
if mibBuilder.loadTexts: ipxPRmtEntry.setStatus('mandatory')
ipxPRmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPRmtIndex.setStatus('mandatory')
ipxPRmtNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPRmtNetNumber.setStatus('mandatory')
ipxPRmtNripUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("trigger-update", 2), ("periodic-update", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPRmtNripUpdate.setStatus('mandatory')
ipxPRmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPRmtType.setStatus('mandatory')
ipxRtUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRtUpdateTime.setStatus('mandatory')
ipxRtEnabled = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRtEnabled.setStatus('mandatory')
ipxRtRipEnabled = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRtRipEnabled.setStatus('mandatory')
ipxRtResetAllCounters = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRtResetAllCounters.setStatus('mandatory')
ipxRtInPackets = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtInPackets.setStatus('mandatory')
ipxRtOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtOutPackets.setStatus('mandatory')
ipxRtRipNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtRipNumber.setStatus('mandatory')
ipxRtRipTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 15), )
if mibBuilder.loadTexts: ipxRtRipTable.setStatus('mandatory')
ipxRtRipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 15, 1), ).setIndexNames((0, "Centrum-MIB", "ipxRtRipDestNetNumber"))
if mibBuilder.loadTexts: ipxRtRipEntry.setStatus('mandatory')
ipxRtRipDestNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtRipDestNetNumber.setStatus('mandatory')
ipxRtRipPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("proxy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtRipPathType.setStatus('mandatory')
ipxRtRipPathIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtRipPathIdx.setStatus('mandatory')
ipxRtRipNextHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtRipNextHostAddress.setStatus('mandatory')
ipxRtRipHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtRipHopCount.setStatus('mandatory')
ipxRtRipTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtRipTicks.setStatus('mandatory')
ipxRtRipRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permanent", 1), ("dynamic", 2), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtRipRouteType.setStatus('mandatory')
ipxRtSapNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtSapNumber.setStatus('mandatory')
ipxRtSapTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 17), )
if mibBuilder.loadTexts: ipxRtSapTable.setStatus('mandatory')
ipxRtSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 17, 1), ).setIndexNames((0, "Centrum-MIB", "ipxRtSapIndex"))
if mibBuilder.loadTexts: ipxRtSapEntry.setStatus('mandatory')
ipxRtSapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtSapIndex.setStatus('mandatory')
ipxRtSapServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtSapServiceName.setStatus('mandatory')
ipxRtSapServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtSapServiceType.setStatus('mandatory')
ipxRtSapServerNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 17, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtSapServerNetNumber.setStatus('mandatory')
ipxRtSapServerHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 17, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRtSapServerHostAddress.setStatus('mandatory')
ipxSpoofingTime = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSpoofingTime.setStatus('mandatory')
ipxRtDoNBPropagation = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 4, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRtDoNBPropagation.setStatus('mandatory')
brgFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgFilterNumber.setStatus('mandatory')
brgFilterTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2), )
if mibBuilder.loadTexts: brgFilterTable.setStatus('mandatory')
brgFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1), ).setIndexNames((0, "Centrum-MIB", "brgFilterIndex"))
if mibBuilder.loadTexts: brgFilterEntry.setStatus('mandatory')
brgFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgFilterIndex.setStatus('mandatory')
brgFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterName.setStatus('mandatory')
brgFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterType.setStatus('mandatory')
brgFilterMask1Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask1Offset.setStatus('mandatory')
brgFilterMask1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask1Value.setStatus('mandatory')
brgFilterMask1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("equal", 2), ("or", 3), ("and", 4), ("not", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask1Type.setStatus('mandatory')
brgFilterMask1Size = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byte", 1), ("half-word", 2), ("word", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask1Size.setStatus('mandatory')
brgFilterMask2Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask2Offset.setStatus('mandatory')
brgFilterMask2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask2Value.setStatus('mandatory')
brgFilterMask2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("equal", 2), ("or", 3), ("and", 4), ("not", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask2Type.setStatus('mandatory')
brgFilterMask2Size = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byte", 1), ("half-word", 2), ("word", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask2Size.setStatus('mandatory')
brgFilterMask3Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask3Offset.setStatus('mandatory')
brgFilterMask3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask3Value.setStatus('mandatory')
brgFilterMask3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("equal", 2), ("or", 3), ("and", 4), ("not", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask3Type.setStatus('mandatory')
brgFilterMask3Size = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byte", 1), ("half-word", 2), ("word", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask3Size.setStatus('mandatory')
brgFilterMask4Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask4Offset.setStatus('mandatory')
brgFilterMask4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask4Value.setStatus('mandatory')
brgFilterMask4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("equal", 2), ("or", 3), ("and", 4), ("not", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask4Type.setStatus('mandatory')
brgFilterMask4Size = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byte", 1), ("half-word", 2), ("word", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterMask4Size.setStatus('mandatory')
brgFilterSkipRii = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgFilterSkipRii.setStatus('mandatory')
brgLoggerNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgLoggerNumber.setStatus('mandatory')
brgLoggerTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4), )
if mibBuilder.loadTexts: brgLoggerTable.setStatus('mandatory')
brgLoggerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1), ).setIndexNames((0, "Centrum-MIB", "brgLoggerIndex"))
if mibBuilder.loadTexts: brgLoggerEntry.setStatus('mandatory')
brgLoggerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgLoggerIndex.setStatus('mandatory')
brgLoggerName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerName.setStatus('mandatory')
brgLoggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerType.setStatus('mandatory')
brgLoggerMask1Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask1Offset.setStatus('mandatory')
brgLoggerMask1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask1Value.setStatus('mandatory')
brgLoggerMask1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("equal", 2), ("or", 3), ("and", 4), ("not", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask1Type.setStatus('mandatory')
brgLoggerMask1Size = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byte", 1), ("half-word", 2), ("word", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask1Size.setStatus('mandatory')
brgLoggerMask2Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask2Offset.setStatus('mandatory')
brgLoggerMask2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask2Value.setStatus('mandatory')
brgLoggerMask2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("equal", 2), ("or", 3), ("and", 4), ("not", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask2Type.setStatus('mandatory')
brgLoggerMask2Size = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byte", 1), ("half-word", 2), ("word", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask2Size.setStatus('mandatory')
brgLoggerMask3Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask3Offset.setStatus('mandatory')
brgLoggerMask3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask3Value.setStatus('mandatory')
brgLoggerMask3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("equal", 2), ("or", 3), ("and", 4), ("not", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask3Type.setStatus('mandatory')
brgLoggerMask3Size = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byte", 1), ("half-word", 2), ("word", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask3Size.setStatus('mandatory')
brgLoggerMask4Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask4Offset.setStatus('mandatory')
brgLoggerMask4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask4Value.setStatus('mandatory')
brgLoggerMask4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("equal", 2), ("or", 3), ("and", 4), ("not", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask4Type.setStatus('mandatory')
brgLoggerMask4Size = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byte", 1), ("half-word", 2), ("word", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerMask4Size.setStatus('mandatory')
brgLoggerSkipRii = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLoggerSkipRii.setStatus('mandatory')
brgPLocalNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPLocalNumber.setStatus('mandatory')
brgPLocalTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6), )
if mibBuilder.loadTexts: brgPLocalTable.setStatus('mandatory')
brgPLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6, 1), ).setIndexNames((0, "Centrum-MIB", "brgPLocalIndex"))
if mibBuilder.loadTexts: brgPLocalEntry.setStatus('mandatory')
brgPLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPLocalIndex.setStatus('mandatory')
brgPLocalEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgPLocalEnabled.setStatus('mandatory')
brgStpPLocalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgStpPLocalPriority.setStatus('mandatory')
brgStpPLocalCost = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgStpPLocalCost.setStatus('mandatory')
brgStpPLocalDesigRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgStpPLocalDesigRoot.setStatus('mandatory')
brgStpPLocalDesigCost = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgStpPLocalDesigCost.setStatus('mandatory')
brgStpPLocalDesigBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgStpPLocalDesigBridge.setStatus('mandatory')
brgStpPLocalDesigPath = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgStpPLocalDesigPath.setStatus('mandatory')
brgStpPLocalPathState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("listening", 1), ("blocking", 2), ("learning", 3), ("forwarding", 4), ("disabled", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgStpPLocalPathState.setStatus('mandatory')
brgPRmtNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPRmtNumber.setStatus('mandatory')
brgPRmtTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8), )
if mibBuilder.loadTexts: brgPRmtTable.setStatus('mandatory')
brgPRmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8, 1), ).setIndexNames((0, "Centrum-MIB", "brgPRmtIndex"))
if mibBuilder.loadTexts: brgPRmtEntry.setStatus('mandatory')
brgPRmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPRmtIndex.setStatus('mandatory')
brgPRmtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgPRmtEnabled.setStatus('mandatory')
brgStpPRmtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgStpPRmtPriority.setStatus('mandatory')
brgStpPRmtCost = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgStpPRmtCost.setStatus('mandatory')
brgStpPRmtDesigRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgStpPRmtDesigRoot.setStatus('mandatory')
brgStpPRmtDesigCost = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgStpPRmtDesigCost.setStatus('mandatory')
brgStpPRmtDesigBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgStpPRmtDesigBridge.setStatus('mandatory')
brgStpPRmtDesigPath = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgStpPRmtDesigPath.setStatus('mandatory')
brgStpPRmtPathState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("listening", 1), ("blocking", 2), ("learning", 3), ("forwarding", 4), ("disabled", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgStpPRmtPathState.setStatus('mandatory')
brgMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 9))
brgSpanningTreeProtocol = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgSpanningTreeProtocol.setStatus('mandatory')
brgResetAllCounters = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgResetAllCounters.setStatus('mandatory')
brgAutoFtrEnabled = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgAutoFtrEnabled.setStatus('mandatory')
brgPRPASmartFiltering = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgPRPASmartFiltering.setStatus('mandatory')
brgPRPAFilterAction = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgPRPAFilterAction.setStatus('mandatory')
brgPRPAFilterMap = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgPRPAFilterMap.setStatus('mandatory')
brgPRPALoggerMap = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgPRPALoggerMap.setStatus('mandatory')
brgMacHdrComp = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgMacHdrComp.setStatus('mandatory')
brgLearnedTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 10), )
if mibBuilder.loadTexts: brgLearnedTable.setStatus('mandatory')
brgLearnedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 10, 1), ).setIndexNames((0, "Centrum-MIB", "brgLearnedAddress"))
if mibBuilder.loadTexts: brgLearnedEntry.setStatus('mandatory')
brgLearnedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgLearnedAddress.setStatus('mandatory')
brgLearnedPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("permanent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgLearnedPathType.setStatus('mandatory')
brgLearnedPathIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgLearnedPathIdx.setStatus('mandatory')
brgLearnedAge = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("young", 1), ("middle", 2), ("old", 3), ("permanent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgLearnedAge.setStatus('mandatory')
brgTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 11))
brgLocalRingNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgLocalRingNumber.setStatus('mandatory')
brgProxyRingNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgProxyRingNumber.setStatus('mandatory')
brgBridgeNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 5, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brgBridgeNumber.setStatus('mandatory')
adminUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminUserNumber.setStatus('mandatory')
adminUserTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 2), )
if mibBuilder.loadTexts: adminUserTable.setStatus('mandatory')
adminUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 2, 1), ).setIndexNames((0, "Centrum-MIB", "adminUserIndex"))
if mibBuilder.loadTexts: adminUserEntry.setStatus('mandatory')
adminUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminUserIndex.setStatus('mandatory')
adminUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminUserName.setStatus('mandatory')
adminUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("user", 2), ("admin", 3), ("su", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminUserType.setStatus('mandatory')
adminUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminUserPassword.setStatus('mandatory')
adminUserCallBackPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminUserCallBackPhone.setStatus('mandatory')
adminEncryptUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEncryptUserPassword.setStatus('mandatory')
adminEncryptCallBackPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEncryptCallBackPhone.setStatus('mandatory')
adminCommNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminCommNumber.setStatus('mandatory')
adminCommTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 4), )
if mibBuilder.loadTexts: adminCommTable.setStatus('mandatory')
adminCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 4, 1), ).setIndexNames((0, "Centrum-MIB", "adminCommIndex"))
if mibBuilder.loadTexts: adminCommEntry.setStatus('mandatory')
adminCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminCommIndex.setStatus('mandatory')
adminCommName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminCommName.setStatus('mandatory')
adminCommType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("readOnly", 2), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminCommType.setStatus('mandatory')
adminCommMgrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminCommMgrIpAddress.setStatus('mandatory')
adminCommMgrIpxNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminCommMgrIpxNetNumber.setStatus('mandatory')
adminCommMgrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminCommMgrMacAddress.setStatus('mandatory')
adminScriptNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminScriptNumber.setStatus('mandatory')
adminScriptTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 6), )
if mibBuilder.loadTexts: adminScriptTable.setStatus('mandatory')
adminScriptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 6, 1), ).setIndexNames((0, "Centrum-MIB", "adminScriptIndex"))
if mibBuilder.loadTexts: adminScriptEntry.setStatus('mandatory')
adminScriptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminScriptIndex.setStatus('mandatory')
adminScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminScriptName.setStatus('mandatory')
adminScriptType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("built-in", 2), ("user-defined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminScriptType.setStatus('mandatory')
adminScript = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 527))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminScript.setStatus('mandatory')
adminRpaLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogNumber.setStatus('mandatory')
adminRpaLogTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8), )
if mibBuilder.loadTexts: adminRpaLogTable.setStatus('mandatory')
adminRpaLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1), ).setIndexNames((0, "Centrum-MIB", "adminRpaLogIndex"))
if mibBuilder.loadTexts: adminRpaLogEntry.setStatus('mandatory')
adminRpaLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogIndex.setStatus('mandatory')
adminRpaLogUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogUserName.setStatus('mandatory')
adminRpaLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogTime.setStatus('mandatory')
adminRpaLogDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogDuration.setStatus('mandatory')
adminRpaLogAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogAttempts.setStatus('mandatory')
adminRpaLogInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogInPackets.setStatus('mandatory')
adminRpaLogOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogOutPackets.setStatus('mandatory')
adminRpaLogInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogInBytes.setStatus('mandatory')
adminRpaLogOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogOutBytes.setStatus('mandatory')
adminRpaLogParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogParityErrors.setStatus('mandatory')
adminRpaLogFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogFrameErrors.setStatus('mandatory')
adminRpaLogOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogOverrunErrors.setStatus('mandatory')
adminRpaLogCksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogCksumErrors.setStatus('mandatory')
adminRpaLogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogDate.setStatus('mandatory')
adminRpaLogPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogPortName.setStatus('mandatory')
adminRpaLogPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 8, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminRpaLogPathName.setStatus('mandatory')
adminMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9))
adminSysDescr = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminSysDescr.setStatus('mandatory')
adminNodeName = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNodeName.setStatus('mandatory')
adminNodePassword = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminNodePassword.setStatus('mandatory')
adminDate = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminDate.setStatus('mandatory')
adminTime = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTime.setStatus('mandatory')
adminGreeting = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminGreeting.setStatus('mandatory')
adminPrompt = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPrompt.setStatus('mandatory')
adminSNMPGetFrom = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("current-value", 1), ("config-value", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSNMPGetFrom.setStatus('mandatory')
adminDoIntegrity = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("integrity-check-OK", 1), ("integrity-check-failed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminDoIntegrity.setStatus('mandatory')
adminDoFileload = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fileload-OK", 1), ("fileload-failed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminDoFileload.setStatus('mandatory')
adminLoadfileName = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminLoadfileName.setStatus('mandatory')
adminLastTrap = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminLastTrap.setStatus('mandatory')
adminResetAllUserCounters = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminResetAllUserCounters.setStatus('mandatory')
adminEraseConfig = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEraseConfig.setStatus('mandatory')
adminUIMsgLevel = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("panic-level", 1), ("error-level", 2), ("warning-level", 3), ("status-level", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminUIMsgLevel.setStatus('mandatory')
adminSNMPMsgLevel = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("error-level", 2), ("warning-level", 3), ("status-level", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSNMPMsgLevel.setStatus('mandatory')
adminLoginOption = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("nologin", 2), ("nopassword", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminLoginOption.setStatus('mandatory')
adminReboot = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminReboot.setStatus('mandatory')
adminMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminMajorVersion.setStatus('mandatory')
adminMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminMinorVersion.setStatus('mandatory')
adminMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminMIBVersion.setStatus('mandatory')
adminTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTimeZone.setStatus('mandatory')
adminSecurityServerType = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("internal", 1), ("ab-nameserver", 2), ("dce-server", 3), ("ace-server", 4), ("nw-bindery", 5), ("nw-nds", 6), ("generic", 7), ("nt", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminSecurityServerType.setStatus('mandatory')
adminSecPassword = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminSecPassword.setStatus('mandatory')
adminScrtyClntIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminScrtyClntIpAddr.setStatus('mandatory')
adminSecondScrtyClntIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminSecondScrtyClntIpAddr.setStatus('mandatory')
adminUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminUdpPort.setStatus('mandatory')
adminTelnetAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTelnetAdminPort.setStatus('mandatory')
adminTelnetDialOutAuth = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTelnetDialOutAuth.setStatus('mandatory')
adminDialOutEnabled = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminDialOutEnabled.setStatus('mandatory')
adminEncryptNodePassword = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEncryptNodePassword.setStatus('mandatory')
adminEncryptSecurityServerType = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEncryptSecurityServerType.setStatus('mandatory')
adminEncryptSecPassword = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEncryptSecPassword.setStatus('mandatory')
adminEncryptScrtyClntIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEncryptScrtyClntIpAddr.setStatus('mandatory')
adminEncryptSecondScrtyClntIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEncryptSecondScrtyClntIpAddr.setStatus('mandatory')
adminEncryptUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEncryptUdpPort.setStatus('mandatory')
adminEPromSize = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminEPromSize.setStatus('mandatory')
adminNVRamSize = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminNVRamSize.setStatus('mandatory')
adminFlashRomSize = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminFlashRomSize.setStatus('mandatory')
adminLocalDRamSize = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminLocalDRamSize.setStatus('mandatory')
adminSharedDRamSize = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminSharedDRamSize.setStatus('mandatory')
adminHWRev = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminHWRev.setStatus('mandatory')
adminEncryptSuperUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminEncryptSuperUserPassword.setStatus('mandatory')
adminNewGreeting = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNewGreeting.setStatus('mandatory')
adminTFTPServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 46), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTFTPServerIpAddr.setStatus('mandatory')
adminSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save-OK", 1), ("save-failed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSaveConfig.setStatus('mandatory')
adminMaintenanceVersion = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminMaintenanceVersion.setStatus('mandatory')
adminCheckConsoleModem = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminCheckConsoleModem.setStatus('mandatory')
adminConsoleImageDownload = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminConsoleImageDownload.setStatus('mandatory')
adminConsoleConfigUpload = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminConsoleConfigUpload.setStatus('mandatory')
adminConsoleConfigDownload = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminConsoleConfigDownload.setStatus('mandatory')
adminRasIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRasIdleTime.setStatus('mandatory')
adminRouterIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRouterIdleTime.setStatus('mandatory')
adminRasSpoofTime = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRasSpoofTime.setStatus('mandatory')
adminRouterSpoofTime = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRouterSpoofTime.setStatus('mandatory')
adminLnkUtilHighThld = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminLnkUtilHighThld.setStatus('mandatory')
adminLnkUtilLowThld = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminLnkUtilLowThld.setStatus('mandatory')
adminCallerIdCheck = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminCallerIdCheck.setStatus('mandatory')
adminISDNRequiredBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("br-56000", 1), ("br-64000", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminISDNRequiredBaudrate.setStatus('mandatory')
adminRouterCCPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRouterCCPEnabled.setStatus('mandatory')
adminSuggestFlag = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSuggestFlag.setStatus('mandatory')
adminEEVersionNo = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 9, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminEEVersionNo.setStatus('mandatory')
adminMdSetupNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminMdSetupNumber.setStatus('mandatory')
adminMdSetupTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11), )
if mibBuilder.loadTexts: adminMdSetupTable.setStatus('mandatory')
adminMdSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11, 1), ).setIndexNames((0, "Centrum-MIB", "adminMdSetupIndex"))
if mibBuilder.loadTexts: adminMdSetupEntry.setStatus('mandatory')
adminMdSetupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminMdSetupIndex.setStatus('mandatory')
adminMdSetupType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("built-in", 2), ("user-defined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminMdSetupType.setStatus('mandatory')
adminMdSetupName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminMdSetupName.setStatus('mandatory')
adminMdSetupATCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminMdSetupATCmd.setStatus('mandatory')
adminMdSetupARAP1_0ATCmd = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setLabel("adminMdSetupARAP1-0ATCmd").setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminMdSetupARAP1_0ATCmd.setStatus('mandatory')
adminMdSetupIncomingCall = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("ring", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminMdSetupIncomingCall.setStatus('mandatory')
adminMdSetupConnIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connect", 1), ("dcd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminMdSetupConnIndication.setStatus('mandatory')
adminMdSetupCallTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminMdSetupCallTimeOut.setStatus('mandatory')
adminMdSetupCallDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 11, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminMdSetupCallDelay.setStatus('mandatory')
adminCallerIDNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminCallerIDNumber.setStatus('mandatory')
adminCallerIDTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 13), )
if mibBuilder.loadTexts: adminCallerIDTable.setStatus('mandatory')
adminCallerIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 13, 1), ).setIndexNames((0, "Centrum-MIB", "adminCallerIDIndex"))
if mibBuilder.loadTexts: adminCallerIDEntry.setStatus('mandatory')
adminCallerIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminCallerIDIndex.setStatus('mandatory')
adminCallerIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminCallerIDName.setStatus('mandatory')
adminCallerIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminCallerIDType.setStatus('mandatory')
adminCallerIDComment = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 6, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminCallerIDComment.setStatus('mandatory')
atRpa = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 1))
atRt = MibIdentifier((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2))
atRpaNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRpaNumber.setStatus('mandatory')
atRpaTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 1, 2), )
if mibBuilder.loadTexts: atRpaTable.setStatus('mandatory')
atRpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 1, 2, 1), ).setIndexNames((0, "Centrum-MIB", "atRpaIndex"))
if mibBuilder.loadTexts: atRpaEntry.setStatus('mandatory')
atRpaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRpaIndex.setStatus('mandatory')
atRpaNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRpaNetworkAddress.setStatus('mandatory')
atRpaState = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRpaState.setStatus('mandatory')
atRpaDialInZone = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atRpaDialInZone.setStatus('mandatory')
atRpaMaxConnTime = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atRpaMaxConnTime.setStatus('mandatory')
atRpaNoNbpMulticast = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atRpaNoNbpMulticast.setStatus('mandatory')
atPLocalNumber = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPLocalNumber.setStatus('mandatory')
atPLocalTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 2), )
if mibBuilder.loadTexts: atPLocalTable.setStatus('mandatory')
atPLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 2, 1), ).setIndexNames((0, "Centrum-MIB", "atPLocalIndex"))
if mibBuilder.loadTexts: atPLocalEntry.setStatus('mandatory')
atPLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPLocalIndex.setStatus('mandatory')
atPLocalNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPLocalNetAddress.setStatus('mandatory')
atPLocalNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPLocalNetStart.setStatus('mandatory')
atPLocalNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPLocalNetEnd.setStatus('mandatory')
atPLocalDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPLocalDefaultRouter.setStatus('mandatory')
atPLocalLocalZone = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPLocalLocalZone.setStatus('mandatory')
atAarpTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 3), )
if mibBuilder.loadTexts: atAarpTable.setStatus('mandatory')
atAarpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 3, 1), ).setIndexNames((0, "Centrum-MIB", "atAarpIfIndex"), (0, "Centrum-MIB", "atAarpNetAddress"))
if mibBuilder.loadTexts: atAarpEntry.setStatus('mandatory')
atAarpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAarpIfIndex.setStatus('mandatory')
atAarpPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAarpPhysAddress.setStatus('mandatory')
atAarpNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAarpNetAddress.setStatus('mandatory')
atBestRouterCacheTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 4), )
if mibBuilder.loadTexts: atBestRouterCacheTable.setStatus('mandatory')
atBestRouterCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 4, 1), ).setIndexNames((0, "Centrum-MIB", "atBestRouterCacheIfIndex"), (0, "Centrum-MIB", "atBestRouterCacheNetAddress"))
if mibBuilder.loadTexts: atBestRouterCacheEntry.setStatus('mandatory')
atBestRouterCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBestRouterCacheIfIndex.setStatus('mandatory')
atBestRouterCachePhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBestRouterCachePhysAddress.setStatus('mandatory')
atBestRouterCacheNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBestRouterCacheNetAddress.setStatus('mandatory')
atRtProtocolEnabled = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atRtProtocolEnabled.setStatus('mandatory')
atRtInPackets = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRtInPackets.setStatus('mandatory')
atRtOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRtOutPackets.setStatus('mandatory')
atRtResetAllCounters = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atRtResetAllCounters.setStatus('mandatory')
atRtZoneFilterAction = MibScalar((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atRtZoneFilterAction.setStatus('mandatory')
atZoneFilterTable = MibTable((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 10), )
if mibBuilder.loadTexts: atZoneFilterTable.setStatus('mandatory')
atZoneFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 10, 1), ).setIndexNames((0, "Centrum-MIB", "atZoneFilterIndex"))
if mibBuilder.loadTexts: atZoneFilterEntry.setStatus('mandatory')
atZoneFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atZoneFilterIndex.setStatus('mandatory')
atZoneFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atZoneFilterName.setStatus('mandatory')
atZoneFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 327, 1, 1, 7, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atZoneFilterType.setStatus('mandatory')
userLogInTrap = NotificationType((1, 3, 6, 1, 4, 1, 327) + (0,16)).setObjects(("Centrum-MIB", "adminLastTrap"))
userLogOutTrap = NotificationType((1, 3, 6, 1, 4, 1, 327) + (0,17)).setObjects(("Centrum-MIB", "adminLastTrap"))
userSessionTimeOutTrap = NotificationType((1, 3, 6, 1, 4, 1, 327) + (0,18)).setObjects(("Centrum-MIB", "adminLastTrap"))
mibBuilder.exportSymbols("Centrum-MIB", ipPRmtTcpHdrCompress=ipPRmtTcpHdrCompress, atZoneFilterEntry=atZoneFilterEntry, ipRpaBootpEnabled=ipRpaBootpEnabled, brgFilterIndex=brgFilterIndex, portUnknownProtocols=portUnknownProtocols, prpaLoginInBytes=prpaLoginInBytes, prpaIPXCPState=prpaIPXCPState, brgFilterMask3Value=brgFilterMask3Value, brgLearnedAddress=brgLearnedAddress, adminMdSetupCallTimeOut=adminMdSetupCallTimeOut, brgFilterMask1Offset=brgFilterMask1Offset, adminUdpPort=adminUdpPort, ipxRtDoNBPropagation=ipxRtDoNBPropagation, adminCallerIDTable=adminCallerIDTable, portLoginStatus=portLoginStatus, prmtISDNReqBaudRate=prmtISDNReqBaudRate, brgProxyRingNumber=brgProxyRingNumber, brgAutoFtrEnabled=brgAutoFtrEnabled, adminNodeName=adminNodeName, adminHWRev=adminHWRev, atRtZoneFilterAction=atRtZoneFilterAction, brgLoggerMask2Type=brgLoggerMask2Type, brgStpPRmtDesigCost=brgStpPRmtDesigCost, portTable=portTable, atRtOutPackets=atRtOutPackets, adminISDNRequiredBaudrate=adminISDNRequiredBaudrate, brgLocalRingNumber=brgLocalRingNumber, ipxRtSapEntry=ipxRtSapEntry, ipPRmtIndex=ipPRmtIndex, ipPLocalNetMask=ipPLocalNetMask, ipxSRoutePathIdx=ipxSRoutePathIdx, portResetAllCounters=portResetAllCounters, portAsyncCharFrameErrors=portAsyncCharFrameErrors, prmtSpoofState=prmtSpoofState, ipSRouteDestIpAddress=ipSRouteDestIpAddress, brgPRmtEntry=brgPRmtEntry, brgSpanningTreeProtocol=brgSpanningTreeProtocol, adminCommType=adminCommType, adminUserName=adminUserName, atZoneFilterTable=atZoneFilterTable, portPPPACCompress=portPPPACCompress, ipxRt=ipxRt, adminEraseConfig=adminEraseConfig, prpaNetBIOS=prpaNetBIOS, brgFilterMask3Size=brgFilterMask3Size, prmtIPXCPState=prmtIPXCPState, prpaUnknowEthernetII=prpaUnknowEthernetII, portSlot=portSlot, atPLocalNetStart=atPLocalNetStart, prmtPhoneDirectoryNo=prmtPhoneDirectoryNo, adminRpaLogAttempts=adminRpaLogAttempts, ipxRtRipNumber=ipxRtRipNumber, prmtPortPrmtIdx=prmtPortPrmtIdx, prmtPhonePrmtIdx=prmtPhonePrmtIdx, adminEncryptCallBackPhone=adminEncryptCallBackPhone, portProtocolMode=portProtocolMode, plocalNumber=plocalNumber, brgLoggerIndex=brgLoggerIndex, portSRLargestFrame=portSRLargestFrame, prpaARAPState=prpaARAPState, adminLnkUtilHighThld=adminLnkUtilHighThld, atAarpTable=atAarpTable, plocalReceivedPackets=plocalReceivedPackets, brgLoggerMask4Type=brgLoggerMask4Type, portSpeed=portSpeed, portSourceRouteEntry=portSourceRouteEntry, ipRtResetAllCounters=ipRtResetAllCounters, portPPPMaxRcvPacketLength=portPPPMaxRcvPacketLength, brgResetAllCounters=brgResetAllCounters, adminCommTable=adminCommTable, ipxSRouteDestNetNumber=ipxSRouteDestNetNumber, prmtInPackets=prmtInPackets, ipxSRoutePathType=ipxSRoutePathType, adminRpaLogInPackets=adminRpaLogInPackets, prpaLoggerMap=prpaLoggerMap, adminMdSetupTable=adminMdSetupTable, prpaIpxEn2WithNetBIOS=prpaIpxEn2WithNetBIOS, adminCallerIDIndex=adminCallerIDIndex, portAsyncOverrunErrors=portAsyncOverrunErrors, adminNodePassword=adminNodePassword, ipxRtSapTable=ipxRtSapTable, portDialHangUp=portDialHangUp, ipxSRouteType=ipxSRouteType, ipxPLocalDataLinkType=ipxPLocalDataLinkType, userLogOutTrap=userLogOutTrap, plocalLoggerMap=plocalLoggerMap, ipxSRouteHopCount=ipxSRouteHopCount, adminRpaLogOutBytes=adminRpaLogOutBytes, prmtEntry=prmtEntry, prmtPortTable=prmtPortTable, brgFilterName=brgFilterName, adminConsoleConfigUpload=adminConsoleConfigUpload, prmtLinkUtil=prmtLinkUtil, ipPRmtTable=ipPRmtTable, prpaLoginFrameErrors=prpaLoginFrameErrors, brgPLocalEntry=brgPLocalEntry, portIPXCPState=portIPXCPState, ipxPRmtEntry=ipxPRmtEntry, prpaIpxSnapWithNetBIOS=prpaIpxSnapWithNetBIOS, prpaLoggerCount=prpaLoggerCount, prmtForwardedPackets=prmtForwardedPackets, adminEncryptSecondScrtyClntIpAddr=adminEncryptSecondScrtyClntIpAddr, prpaCurrentMacAddr=prpaCurrentMacAddr, prpaAutoHangUp=prpaAutoHangUp, ipSRouteNumber=ipSRouteNumber, ipxRtUpdateTime=ipxRtUpdateTime, prmtDiscardedPackets=prmtDiscardedPackets, prpaIndex=prpaIndex, portDataBits=portDataBits, ipxRtRipHopCount=ipxRtRipHopCount, adminRpaLogCksumErrors=adminRpaLogCksumErrors, portPPPProtCompress=portPPPProtCompress, atZoneFilterType=atZoneFilterType, adminRpaLogDate=adminRpaLogDate, ipxRtSapServerHostAddress=ipxRtSapServerHostAddress, atPLocalEntry=atPLocalEntry, ipPLocalNumber=ipPLocalNumber, ipRtEnabled=ipRtEnabled, adminScript=adminScript, portIncomingCalls=portIncomingCalls, prmtAsyncPortNo=prmtAsyncPortNo, portIndex=portIndex, prpaCCPState=prpaCCPState, brgFilterMask4Type=brgFilterMask4Type, ipRpaBootpOrRarpRequired=ipRpaBootpOrRarpRequired, prpaIpEthernetII=prpaIpEthernetII, portUndersizes=portUndersizes, portArapCompress=portArapCompress, portPortDisabled=portPortDisabled, atBestRouterCacheTable=atBestRouterCacheTable, brgStpPRmtDesigRoot=brgStpPRmtDesigRoot, ipxRtSapServiceType=ipxRtSapServiceType, adminMdSetupCallDelay=adminMdSetupCallDelay, prmtInBytes=prmtInBytes, plocalType=plocalType, plocalTable=plocalTable, brgPRmtNumber=brgPRmtNumber, prmtPortPortIdx=prmtPortPortIdx, ipPRmtBcastAddr=ipPRmtBcastAddr, ipRpaNumber=ipRpaNumber, brgPLocalNumber=brgPLocalNumber, prpaLoginOverrunErrors=prpaLoginOverrunErrors, prmtHowLong1=prmtHowLong1, prpaLoginAttempts=prpaLoginAttempts, ipxRpa=ipxRpa, ipRtUpdateTime=ipRtUpdateTime, adminSecPassword=adminSecPassword, prmtScheduleType2=prmtScheduleType2, ipRpaRarpInPackets=ipRpaRarpInPackets, ipxRpaCurrHostAddr=ipxRpaCurrHostAddr, ipxRtOutPackets=ipxRtOutPackets, atPLocalIndex=atPLocalIndex, ipRtDefaultRouterPathIdx=ipRtDefaultRouterPathIdx, brgLoggerMask4Value=brgLoggerMask4Value, adminMaintenanceVersion=adminMaintenanceVersion, prpaPortIdx=prpaPortIdx, ipxRtSapIndex=ipxRtSapIndex, adminRpaLogParityErrors=adminRpaLogParityErrors, portAsyncPktCksumErrors=portAsyncPktCksumErrors, portLastConnectBChannel=portLastConnectBChannel, prpaUnknownSnap=prpaUnknownSnap, portSRDirection=portSRDirection, ipxRpaNumber=ipxRpaNumber, ipxPLocalIndex=ipxPLocalIndex, userLogInTrap=userLogInTrap, adminLnkUtilLowThld=adminLnkUtilLowThld, ipPLocalTable=ipPLocalTable, atBestRouterCacheEntry=atBestRouterCacheEntry, portRemoteSubaddress=portRemoteSubaddress, adminMdSetupIncomingCall=adminMdSetupIncomingCall, prmtScheduleType1=prmtScheduleType1, brgStpPRmtDesigPath=brgStpPRmtDesigPath, adminConsoleConfigDownload=adminConsoleConfigDownload, adminRpaLogIndex=adminRpaLogIndex, adminLocalDRamSize=adminLocalDRamSize, portBaudrate=portBaudrate, brgLoggerMask1Value=brgLoggerMask1Value, adminRouterSpoofTime=adminRouterSpoofTime, portStopBits=portStopBits, ipPLocalEntry=ipPLocalEntry, brgLoggerEntry=brgLoggerEntry, admin=admin, adminCommMgrMacAddress=adminCommMgrMacAddress, adminScriptIndex=adminScriptIndex, adminSecondScrtyClntIpAddr=adminSecondScrtyClntIpAddr, prmtPortDirectoryNo=prmtPortDirectoryNo, brgStpPLocalPriority=brgStpPLocalPriority, adminCheckConsoleModem=adminCheckConsoleModem, prpaLoginOutPackets=prpaLoginOutPackets, brgStpPLocalDesigRoot=brgStpPLocalDesigRoot, adminCallerIDType=adminCallerIDType, adminMdSetupEntry=adminMdSetupEntry, prpaLoginUserName=prpaLoginUserName, prmtDaysScheduled2=prmtDaysScheduled2, portAllLEDStatus=portAllLEDStatus, portDriverState=portDriverState, pathResetAllCounters=pathResetAllCounters, portCCSP=portCCSP, adminEncryptScrtyClntIpAddr=adminEncryptScrtyClntIpAddr, adminScriptName=adminScriptName, prmtNumber=prmtNumber, ipSRouteTable=ipSRouteTable, plocalFilterMap=plocalFilterMap, ipxRpaIndex=ipxRpaIndex, adminTFTPServerIpAddr=adminTFTPServerIpAddr, brgLoggerType=brgLoggerType, prpaIPCPState=prpaIPCPState, brgStpPRmtPriority=brgStpPRmtPriority, brgStpPLocalCost=brgStpPLocalCost, atPLocalNetAddress=atPLocalNetAddress, adminTime=adminTime, brgFilterEntry=brgFilterEntry, brgFilterMask3Offset=brgFilterMask3Offset, adminMIBVersion=adminMIBVersion, adminMdSetupATCmd=adminMdSetupATCmd, prpaIpxEn2=prpaIpxEn2, portEntry=portEntry, prmtPortType=prmtPortType, prmtHowLong2=prmtHowLong2, ipRt=ipRt, brgLoggerTable=brgLoggerTable, brgTokenRing=brgTokenRing, portLinkType=portLinkType, prmtCongestThreshold=prmtCongestThreshold, brgMacHdrComp=brgMacHdrComp, portId=portId, brgFilterMask4Size=brgFilterMask4Size, prpaPortList=prpaPortList, adminResetAllUserCounters=adminResetAllUserCounters, adminSNMPMsgLevel=adminSNMPMsgLevel, prmtIndex=prmtIndex, brgLearnedPathIdx=brgLearnedPathIdx, ipxRtRipRouteType=ipxRtRipRouteType, brgLoggerMask1Type=brgLoggerMask1Type, portParity=portParity, prmtBUPortList=prmtBUPortList, brgLoggerMask4Size=brgLoggerMask4Size, adminUIMsgLevel=adminUIMsgLevel, adminMdSetupType=adminMdSetupType, ipSRouteIndex=ipSRouteIndex, ipPRmtEntry=ipPRmtEntry, prmtFilterMap=prmtFilterMap, ipRpaConfigClientIpAddress=ipRpaConfigClientIpAddress, adminNVRamSize=adminNVRamSize, adminPrompt=adminPrompt, portISDNPhyLineStatus=portISDNPhyLineStatus, brgStpPRmtPathState=brgStpPRmtPathState, brgBridgeNumber=brgBridgeNumber, portTransmitDiscards=portTransmitDiscards, prpaInPackets=prpaInPackets, prmtPhonePhoneNumber=prmtPhonePhoneNumber, crat=crat, atRpaTable=atRpaTable, ipRtDefaultRouterPathType=ipRtDefaultRouterPathType)
mibBuilder.exportSymbols("Centrum-MIB", adminMdSetupName=adminMdSetupName, atBestRouterCacheNetAddress=atBestRouterCacheNetAddress, ipRpaType=ipRpaType, portBNCPState=portBNCPState, prmtTable=prmtTable, brgLoggerName=brgLoggerName, ipRpaTcpHdrCompress=ipRpaTcpHdrCompress, prmtInitiator=prmtInitiator, plocalForwardedPackets=plocalForwardedPackets, adminEPromSize=adminEPromSize, brgFilterMask1Value=brgFilterMask1Value, brgFilterSkipRii=brgFilterSkipRii, portLocalSubaddress_2=portLocalSubaddress_2, brgLoggerMask3Size=brgLoggerMask3Size, portOutBytes=portOutBytes, brgPRmtTable=brgPRmtTable, userSessionTimeOutTrap=userSessionTimeOutTrap, portRIState=portRIState, adminEEVersionNo=adminEEVersionNo, brgStpPLocalPathState=brgStpPLocalPathState, prmtBNCPState=prmtBNCPState, ipxPRmtNripUpdate=ipxPRmtNripUpdate, ipxPRmtNumber=ipxPRmtNumber, portDCDState=portDCDState, prpaIpx8023=prpaIpx8023, portInPackets=portInPackets, prpaRemotePcIpAddress=prpaRemotePcIpAddress, adminUserIndex=adminUserIndex, brgMisc=brgMisc, adminRpaLogDuration=adminRpaLogDuration, portOutPackets=portOutPackets, brgLoggerMask1Size=brgLoggerMask1Size, ipxSRouteNumber=ipxSRouteNumber, ipRtOutPackets=ipRtOutPackets, ipRpaIndex=ipRpaIndex, prmtStartTime1=prmtStartTime1, atPLocalTable=atPLocalTable, prpaSpoofState=prpaSpoofState, prmtDaysScheduled1=prmtDaysScheduled1, plocalLoggerCount=plocalLoggerCount, prmtFilterCount=prmtFilterCount, portSyncUnderrunErrors=portSyncUnderrunErrors, brgPRPASmartFiltering=brgPRPASmartFiltering, adminScrtyClntIpAddr=adminScrtyClntIpAddr, adminEncryptUdpPort=adminEncryptUdpPort, portSyncFcsErrors=portSyncFcsErrors, prpaLoginDuration=prpaLoginDuration, ipxPLocalNetNumber=ipxPLocalNetNumber, brgLoggerSkipRii=brgLoggerSkipRii, portInterFace=portInterFace, adminUserTable=adminUserTable, atZoneFilterName=atZoneFilterName, prmtStartTime2=prmtStartTime2, atRpaIndex=atRpaIndex, brgLoggerMask2Offset=brgLoggerMask2Offset, brgLearnedTable=brgLearnedTable, adminEncryptUserPassword=adminEncryptUserPassword, ipPRmtNumber=ipPRmtNumber, brgPRmtEnabled=brgPRmtEnabled, adminMinorVersion=adminMinorVersion, prpaLoginCksumErrors=prpaLoginCksumErrors, ipxRpaNetNumber=ipxRpaNetNumber, adminTelnetDialOutAuth=adminTelnetDialOutAuth, adminSysDescr=adminSysDescr, prmtIPCPState=prmtIPCPState, ipxRtRipNextHostAddress=ipxRtRipNextHostAddress, brgPLocalEnabled=brgPLocalEnabled, brgFilterMask1Size=brgFilterMask1Size, prmtPhoneTable=prmtPhoneTable, prmtPMPortList=prmtPMPortList, ipRpaCurrentClientIpAddress=ipRpaCurrentClientIpAddress, atRpaMaxConnTime=atRpaMaxConnTime, adminCommName=adminCommName, portScriptIdx=portScriptIdx, brgStpPLocalDesigPath=brgStpPLocalDesigPath, adminCommNumber=adminCommNumber, plocalEntry=plocalEntry, ipPLocalBcastAddr=ipPLocalBcastAddr, prmtPhoneIdx=prmtPhoneIdx, prpaLoginTime=prpaLoginTime, plocalInPackets=plocalInPackets, ipRpaBootpOutPackets=ipRpaBootpOutPackets, prmtLoggerMap=prmtLoggerMap, ipxRtRipPathType=ipxRtRipPathType, ipx=ipx, adminMdSetupConnIndication=adminMdSetupConnIndication, prpaIpx8022=prpaIpx8022, adminMdSetupNumber=adminMdSetupNumber, prmtPhoneEntry=prmtPhoneEntry, adminUserCallBackPhone=adminUserCallBackPhone, plocalOutPackets=plocalOutPackets, atRt=atRt, atRtProtocolEnabled=atRtProtocolEnabled, plocalPortIdx=plocalPortIdx, ipxRtInPackets=ipxRtInPackets, portCurISDNBChannel=portCurISDNBChannel, adminUserType=adminUserType, adminDialOutEnabled=adminDialOutEnabled, adminFlashRomSize=adminFlashRomSize, adminRasIdleTime=adminRasIdleTime, adminMdSetupARAP1_0ATCmd=adminMdSetupARAP1_0ATCmd, ipxRpaEntry=ipxRpaEntry, brgLoggerMask2Value=brgLoggerMask2Value, atPLocalLocalZone=atPLocalLocalZone, prpaFilterCount=prpaFilterCount, prmtPhoneType=prmtPhoneType, portLEDFault=portLEDFault, portRemoteDialNo=portRemoteDialNo, prpaLinkUtil=prpaLinkUtil, ipRtRipEnabled=ipRtRipEnabled, adminCallerIDEntry=adminCallerIDEntry, atBestRouterCachePhysAddress=atBestRouterCachePhysAddress, ipxSRouteName=ipxSRouteName, prpaIpx8023WithNetBIOS=prpaIpx8023WithNetBIOS, adminRpaLogInBytes=adminRpaLogInBytes, adminMajorVersion=adminMajorVersion, ipSRouteEntry=ipSRouteEntry, ipxSRouteIndex=ipxSRouteIndex, ipxPRmtTable=ipxPRmtTable, portSPID_2=portSPID_2, prmtCCPState=prmtCCPState, prmtFilterAction=prmtFilterAction, portSourceRouteTable=portSourceRouteTable, adminEncryptNodePassword=adminEncryptNodePassword, prpaEntry=prpaEntry, portResetPortCounters=portResetPortCounters, atPLocalNumber=atPLocalNumber, portSRMacAddress=portSRMacAddress, ipSRouteNextRouter=ipSRouteNextRouter, prpaReceivedPackets=prpaReceivedPackets, plocalDiscardedPackets=plocalDiscardedPackets, brgLoggerMask2Size=brgLoggerMask2Size, ipxRtResetAllCounters=ipxRtResetAllCounters, ipPLocalIndex=ipPLocalIndex, adminRpaLogTime=adminRpaLogTime, prpaXNSSap=prpaXNSSap, portIPCPState=portIPCPState, atAarpEntry=atAarpEntry, prpaInBytes=prpaInBytes, adminEncryptSecurityServerType=adminEncryptSecurityServerType, brgStpPRmtCost=brgStpPRmtCost, ipRtPoisonReverse=ipRtPoisonReverse, adminCallerIDName=adminCallerIDName, portSyncMemoryErrors=portSyncMemoryErrors, ipPRmtIpAddress=ipPRmtIpAddress, ipxRtRipDestNetNumber=ipxRtRipDestNetNumber, brgLoggerMask4Offset=brgLoggerMask4Offset, portNumber=portNumber, brgFilterMask2Type=brgFilterMask2Type, adminScriptNumber=adminScriptNumber, adminUserEntry=adminUserEntry, portLEDLink=portLEDLink, atAarpPhysAddress=atAarpPhysAddress, atRpa=atRpa, ipRpa=ipRpa, portInBytes=portInBytes, brgStpPLocalDesigBridge=brgStpPLocalDesigBridge, brgFilterNumber=brgFilterNumber, prpaOutPackets=prpaOutPackets, brgPRPAFilterAction=brgPRPAFilterAction, adminScriptEntry=adminScriptEntry, portLocalDialNo_2=portLocalDialNo_2, ipxPRmtNetNumber=ipxPRmtNetNumber, brgFilterMask2Offset=brgFilterMask2Offset, prpaType=prpaType, portPPPProbeInterval=portPPPProbeInterval, plocalResetPlocalCounters=plocalResetPlocalCounters, brgStpPLocalDesigCost=brgStpPLocalDesigCost, portTokenRingSpeed=portTokenRingSpeed, portISDNInterfaceType=portISDNInterfaceType, portSRTimeToLive=portSRTimeToLive, adminReboot=adminReboot, prmtISDNPortNo=prmtISDNPortNo, crip=crip, adminLoginOption=adminLoginOption, portDirectoryNo_1=portDirectoryNo_1, prmtPortPhoneNumber=prmtPortPhoneNumber, prpaLoginOutBytes=prpaLoginOutBytes, adminRpaLogPathName=adminRpaLogPathName, portLayer3Status=portLayer3Status, adminRpaLogPortName=adminRpaLogPortName, ipSRouteHopCount=ipSRouteHopCount, prpaLoginInPackets=prpaLoginInPackets, plocalOutBytes=plocalOutBytes, prmtOutCongestions=prmtOutCongestions, atRpaState=atRpaState, portTEIState=portTEIState, portAsyncParityErrors=portAsyncParityErrors, brg=brg, ipxRtSapNumber=ipxRtSapNumber, portLEDActivity=portLEDActivity, portOversizes=portOversizes, mibDoc=mibDoc, ipRpaRarpOutPackets=ipRpaRarpOutPackets, ipRtDiscardNBBcastPkts=ipRtDiscardNBBcastPkts, adminRpaLogOverrunErrors=adminRpaLogOverrunErrors, adminCallerIDNumber=adminCallerIDNumber, brgStpPRmtDesigBridge=brgStpPRmtDesigBridge, prpaResetPrpaCounters=prpaResetPrpaCounters, prpaMulticastAddress=prpaMulticastAddress, adminCommMgrIpAddress=adminCommMgrIpAddress, portCollisions=portCollisions, atRpaNoNbpMulticast=atRpaNoNbpMulticast, prpaBNCPState=prpaBNCPState, portPPPAsyncCtrlChar=portPPPAsyncCtrlChar, prmtType=prmtType, portDirectoryNo_2=portDirectoryNo_2, portLocalSubaddress_1=portLocalSubaddress_1, prmtSCPortList=prmtSCPortList, ipSRouteName=ipSRouteName, adminNewGreeting=adminNewGreeting, ipxRtSapServiceName=ipxRtSapServiceName, brgLoggerMask1Offset=brgLoggerMask1Offset, portPathName=portPathName, adminRpaLogEntry=adminRpaLogEntry, ipPRmtNetMask=ipPRmtNetMask, adminGreeting=adminGreeting, atZoneFilterIndex=atZoneFilterIndex, portCRCErrors=portCRCErrors, prpaVinesEthernetII=prpaVinesEthernetII, path=path, portReceiveCongestions=portReceiveCongestions, plocalFilterCount=plocalFilterCount, prmtTypeSelection=prmtTypeSelection, atPLocalNetEnd=atPLocalNetEnd, prmtLoggerCount=prmtLoggerCount, atPLocalDefaultRouter=atPLocalDefaultRouter, portAllLoginStatus=portAllLoginStatus, atRpaDialInZone=atRpaDialInZone, portCTSState=portCTSState, brgFilterMask2Value=brgFilterMask2Value, adminDoFileload=adminDoFileload, adminRouterIdleTime=adminRouterIdleTime, portOutgoingCalls=portOutgoingCalls, brgFilterMask2Size=brgFilterMask2Size, prmtReceivedPackets=prmtReceivedPackets, prmtODPortList=prmtODPortList, ipxRtRipEnabled=ipxRtRipEnabled, atRtInPackets=atRtInPackets, prmtPortEntry=prmtPortEntry, adminCallerIDComment=adminCallerIDComment, ipxPRmtIndex=ipxPRmtIndex, ipSRoutePathType=ipSRoutePathType, atRtResetAllCounters=atRtResetAllCounters, adminRpaLogFrameErrors=adminRpaLogFrameErrors, prpaTable=prpaTable, adminSNMPGetFrom=adminSNMPGetFrom, adminCallerIdCheck=adminCallerIdCheck, atAarpIfIndex=atAarpIfIndex, prpaXNS=prpaXNS, ipRpaTable=ipRpaTable, ipRpaBootpInPackets=ipRpaBootpInPackets, prpaIpSnap=prpaIpSnap, adminTelnetAdminPort=adminTelnetAdminPort)
mibBuilder.exportSymbols("Centrum-MIB", ipRtDefaultRouterAddress=ipRtDefaultRouterAddress, adminCommMgrIpxNetNumber=adminCommMgrIpxNetNumber, ipRtDefaultTTL=ipRtDefaultTTL, portTotalErrors=portTotalErrors, brgLearnedAge=brgLearnedAge, brgLearnedEntry=brgLearnedEntry, brgPRmtIndex=brgPRmtIndex, adminCommIndex=adminCommIndex, prpaDiscardedPackets=prpaDiscardedPackets, brgFilterType=brgFilterType, adminScriptTable=adminScriptTable, plocalName=plocalName, ipxRtRipTicks=ipxRtRipTicks, brgPLocalIndex=brgPLocalIndex, ipxSRouteTable=ipxSRouteTable, centrum=centrum, adminDate=adminDate, adminSuggestFlag=adminSuggestFlag, prpaLoginParityErrors=prpaLoginParityErrors, ipRtInPackets=ipRtInPackets, atRpaEntry=atRpaEntry, adminConsoleImageDownload=adminConsoleImageDownload, brgLoggerMask3Offset=brgLoggerMask3Offset, prpaLoginStatus=prpaLoginStatus, portILCCPState=portILCCPState, prpaVinesSnap=prpaVinesSnap, atRpaNumber=atRpaNumber, prpaIpx8022WithNetBIOS=prpaIpx8022WithNetBIOS, ipxSpoofingTime=ipxSpoofingTime, prpaOutBytes=prpaOutBytes, brgFilterMask1Type=brgFilterMask1Type, adminScriptType=adminScriptType, prpaFilterAction=prpaFilterAction, prpaDECNet=prpaDECNet, ipxPLocalEntry=ipxPLocalEntry, adminRpaLogUserName=adminRpaLogUserName, ipSRouteType=ipSRouteType, ipxRtEnabled=ipxRtEnabled, prmtOutBytes=prmtOutBytes, portAccessType=portAccessType, prpaFilterMap=prpaFilterMap, ipxRtRipTable=ipxRtRipTable, adminRouterCCPEnabled=adminRouterCCPEnabled, ipxRtRipEntry=ipxRtRipEntry, prpaNumber=prpaNumber, brgPRPALoggerMap=brgPRPALoggerMap, adminSaveConfig=adminSaveConfig, ipxRtSapServerNetNumber=ipxRtSapServerNetNumber, adminMdSetupIndex=adminMdSetupIndex, atRpaNetworkAddress=atRpaNetworkAddress, atAarpNetAddress=atAarpNetAddress, adminUserNumber=adminUserNumber, plocalIndex=plocalIndex, prmtOutPackets=prmtOutPackets, adminDoIntegrity=adminDoIntegrity, adminLastTrap=adminLastTrap, centrumRemote=centrumRemote, ipPLocalIpAddress=ipPLocalIpAddress, ipRpaResetAllRasCounters=ipRpaResetAllRasCounters, adminMisc=adminMisc, prmtResetPrmtCounters=prmtResetPrmtCounters, portSPID_1=portSPID_1, prmtSmartFiltering=prmtSmartFiltering, ipRpaEntry=ipRpaEntry, brgFilterMask3Type=brgFilterMask3Type, adminEncryptSecPassword=adminEncryptSecPassword, ipPRmtType=ipPRmtType, brgLoggerMask3Type=brgLoggerMask3Type, prpaIpxSnap=prpaIpxSnap, prpaName=prpaName, brgLoggerNumber=brgLoggerNumber, adminCommEntry=adminCommEntry, adminTimeZone=adminTimeZone, ipxPLocalNumber=ipxPLocalNumber, prpaXNSSnap=prpaXNSSnap, adminSharedDRamSize=adminSharedDRamSize, adminRpaLogTable=adminRpaLogTable, prmtRmtRouterName=prmtRmtRouterName, ipxPLocalTable=ipxPLocalTable, adminRasSpoofTime=adminRasSpoofTime, portSyncOverrunErrors=portSyncOverrunErrors, portSwitchType=portSwitchType, portSRState=portSRState, ipxSRouteNextHostAddress=ipxSRouteNextHostAddress, adminLoadfileName=adminLoadfileName, prmtName=prmtName, brgPLocalTable=brgPLocalTable, prpaSmartFiltering=prpaSmartFiltering, ipxRpaTable=ipxRpaTable, ipPRmtRipUpdate=ipPRmtRipUpdate, brgPRPAFilterMap=brgPRPAFilterMap, portPortReset=portPortReset, adminEncryptSuperUserPassword=adminEncryptSuperUserPassword, atBestRouterCacheIfIndex=atBestRouterCacheIfIndex, adminRpaLogNumber=adminRpaLogNumber, ipRpaPRPAIpHdrCompress=ipRpaPRPAIpHdrCompress, brgFilterMask4Offset=brgFilterMask4Offset, plocalFilterAction=plocalFilterAction, portLocalDialNo_1=portLocalDialNo_1, brgFilterMask4Value=brgFilterMask4Value, ipxRtRipPathIdx=ipxRtRipPathIdx, adminSecurityServerType=adminSecurityServerType, ipxPRmtType=ipxPRmtType, prpaForwardedPackets=prpaForwardedPackets, adminRpaLogOutPackets=adminRpaLogOutPackets, ipxSRouteEntry=ipxSRouteEntry, adminUserPassword=adminUserPassword, portSRRouteDescrpt=portSRRouteDescrpt, prpaVinesSap=prpaVinesSap, brgLoggerMask3Value=brgLoggerMask3Value, plocalInBytes=plocalInBytes, port=port, brgLearnedPathType=brgLearnedPathType, ipSRoutePathIdx=ipSRoutePathIdx, brgFilterTable=brgFilterTable, prpaUnknownSap=prpaUnknownSap, ipRpaRarpEnabled=ipRpaRarpEnabled)
