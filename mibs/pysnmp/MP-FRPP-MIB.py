#
# PySNMP MIB module MP-FRPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MP-FRPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:03:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Gauge32, ModuleIdentity, ObjectIdentity, iso, mgmt, TimeTicks, MibIdentifier, NotificationType, IpAddress, Counter32, NotificationType, Counter64, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "ModuleIdentity", "ObjectIdentity", "iso", "mgmt", "TimeTicks", "MibIdentifier", "NotificationType", "IpAddress", "Counter32", "NotificationType", "Counter64", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
class NetPrefix(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(13, 13)
    fixedLength = 13

class DisplayString(OctetString):
    pass

class DateAndTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), )
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PhysAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
nec = MibIdentifier((1, 3, 6, 1, 4, 1, 119))
necProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1))
datax = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3))
mmpf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13))
mmn9110 = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13, 1))
mmn9120 = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13, 2))
nec_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2)).setLabel("nec-mib")
necProductDepend = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3))
datax_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3)).setLabel("datax-mib")
mmpf_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13)).setLabel("mmpf-mib")
mpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 1))
mpIfCard = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 2))
mpEtherPort = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 3))
mpVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 4))
mpBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 5))
mpDbAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 6))
mpEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 7))
mpUiSession = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 8))
mpFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 9))
mpDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 10))
mpIp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 11))
mpRip = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 12))
mpSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 13))
mpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 14))
mpCli = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 15))
mpAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 16))
mpLis = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 17))
mpDns = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 18))
mpLec = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 19))
mpMpc = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 20))
mpStp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 21))
mpLlc = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 22))
mpOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 23))
mpObsCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 101))
mpCardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 102))
mpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 103))
mpPvoice = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 104))
mpAtmCallCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110))
mpCes = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 111))
mpIpsw = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 112))
mpInsCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 113))
mpFfr = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 114))
mpIpswAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 115))
mpPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 120))
mpPos = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 121))
mpFrpp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123))
mpFrppTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 1))
mpFrppTrapInfoMccid = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppTrapInfoMccid.setStatus('mandatory')
mpFrppTrapInfoDlci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppTrapInfoDlci.setStatus('mandatory')
mpFrppMccCfgTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2), )
if mibBuilder.loadTexts: mpFrppMccCfgTable.setStatus('mandatory')
mpFrppMccCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1), ).setIndexNames((0, "MP-FRPP-MIB", "mpFrppMccCfgIfIndex"))
if mibBuilder.loadTexts: mpFrppMccCfgEntry.setStatus('mandatory')
mpFrppMccCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccCfgIfIndex.setStatus('mandatory')
mpFrppMccCfgL2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccCfgL2Status.setStatus('mandatory')
mpFrppMccCfgLmiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ansi", 1), ("itu", 2), ("noLmi", 3))).clone('ansi')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppMccCfgLmiProtocol.setStatus('mandatory')
mpFrppMccCfgUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppMccCfgUniType.setStatus('mandatory')
mpFrppMccCfgMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppMccCfgMonitoredEvents.setStatus('mandatory')
mpFrppMccCfgErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppMccCfgErrorThreshold.setStatus('mandatory')
mpFrppMccCfgFullEnqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppMccCfgFullEnqInterval.setStatus('mandatory')
mpFrppMccCfgLmiProcedure = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2))).clone('uniDirectional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppMccCfgLmiProcedure.setStatus('mandatory')
mpFrppMccCfgNetPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppMccCfgNetPollInterval.setStatus('mandatory')
mpFrppMccCfgUsrPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppMccCfgUsrPollInterval.setStatus('mandatory')
mpFrppMccCfgAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppMccCfgAsync.setStatus('mandatory')
mpFrppMccCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppMccCfgRowStatus.setStatus('mandatory')
mpFrppMccCfgErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("normal", 1), ("parameterNotEnough", 2), ("badValue", 3), ("badIndexValue", 4), ("correlationError", 5), ("memoryAllocateFailure", 6), ("mbufHuntFailure", 7), ("relationalConfigExist", 8), ("lowLayerConfigNotRegistered", 9), ("mappingDataAlreadyExist", 10), ("ipAddressNotDeleted", 11), ("mccIdHuntFailure", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccCfgErrInfo.setStatus('mandatory')
mpFrppFrppCfgTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3), )
if mibBuilder.loadTexts: mpFrppFrppCfgTable.setStatus('mandatory')
mpFrppFrppCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1), ).setIndexNames((0, "MP-FRPP-MIB", "mpFrppFrppCfgIfIndex"), (0, "MP-FRPP-MIB", "mpFrppFrppCfgMccidIndex"), (0, "MP-FRPP-MIB", "mpFrppFrppCfgDlciIndex"))
if mibBuilder.loadTexts: mpFrppFrppCfgEntry.setStatus('mandatory')
mpFrppFrppCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppCfgIfIndex.setStatus('mandatory')
mpFrppFrppCfgMccidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppCfgMccidIndex.setStatus('mandatory')
mpFrppFrppCfgDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppCfgDlciIndex.setStatus('mandatory')
mpFrppFrppCfgFrppName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgFrppName.setStatus('mandatory')
mpFrppFrppCfgIpadd = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppCfgIpadd.setStatus('mandatory')
mpFrppFrppCfgSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppCfgSubnet.setStatus('mandatory')
mpFrppFrppCfgMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1280, 9180)).clone(9180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgMtuSize.setStatus('mandatory')
mpFrppFrppCfgInterWorkType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipoverfr", 1), ("macoverfr", 2))).clone('ipoverfr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgInterWorkType.setStatus('mandatory')
mpFrppFrppCfgCrtpSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("support", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgCrtpSupport.setStatus('mandatory')
mpFrppFrppCfgCrtpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgCrtpLimit.setStatus('mandatory')
mpFrppFrppCfgCrtpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("through", 1), ("discard", 2))).clone('through')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgCrtpMode.setStatus('mandatory')
mpFrppFrppCfgCrtpAging = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgCrtpAging.setStatus('mandatory')
mpFrppFrppCfgCtcpSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("support", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgCtcpSupport.setStatus('mandatory')
mpFrppFrppCfgCtcpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgCtcpLimit.setStatus('mandatory')
mpFrppFrppCfgCtcpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("through", 1), ("discard", 2))).clone('through')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgCtcpMode.setStatus('mandatory')
mpFrppFrppCfgCtcpAging = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgCtcpAging.setStatus('mandatory')
mpFrppFrppCfgHwSticFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgHwSticFlag.setStatus('mandatory')
mpFrppDlciCfgMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciCfgMtuSize.setStatus('mandatory')
mpFrppDlciCfgBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgBecn.setStatus('mandatory')
mpFrppDlciCfgEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nec", 1), ("cisco", 2))).clone('nec')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgEncap.setStatus('mandatory')
mpFrppDlciCfgDe = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgDe.setStatus('mandatory')
mpFrppDlciCfgPln = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciCfgPln.setStatus('mandatory')
mpFrppDlciCfgFragSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgFragSize.setStatus('mandatory')
mpFrppDlciCfgMir = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgMir.setStatus('mandatory')
mpFrppDlciCfgPerInc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgPerInc.setStatus('mandatory')
mpFrppDlciCfgPerDec = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgPerDec.setStatus('mandatory')
mpFrppDlciCfgMincir = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgMincir.setStatus('mandatory')
mpFrppDlciCfgCir = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgCir.setStatus('mandatory')
mpFrppDlciCfgSnapFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgSnapFlg.setStatus('mandatory')
mpFrppDlciQueueLenH = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciQueueLenH.setStatus('mandatory')
mpFrppDlciQueueLenU = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciQueueLenU.setStatus('mandatory')
mpFrppDlciQueueLenL = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciQueueLenL.setStatus('mandatory')
mpFrppDlciQueueLenN = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciQueueLenN.setStatus('mandatory')
mpFrppDlciQueueByteH = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciQueueByteH.setStatus('mandatory')
mpFrppDlciQueueByteU = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciQueueByteU.setStatus('mandatory')
mpFrppDlciQueueByteL = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciQueueByteL.setStatus('mandatory')
mpFrppDlciQueueByteN = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciQueueByteN.setStatus('mandatory')
mpFrppDlciIpQosClassAf3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("normal", 3), ("low", 4))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciIpQosClassAf3.setStatus('mandatory')
mpFrppDlciIpQosClassAf2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("normal", 3), ("low", 4))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciIpQosClassAf2.setStatus('mandatory')
mpFrppDlciIpQosClassAf1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("normal", 3), ("low", 4))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciIpQosClassAf1.setStatus('mandatory')
mpFrppDlciIpQosClassBe = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("normal", 3), ("low", 4))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciIpQosClassBe.setStatus('mandatory')
mpFrppDlciIpQosClassEf3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("normal", 3), ("low", 4))).clone('urgent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciIpQosClassEf3.setStatus('mandatory')
mpFrppDlciIpQosClassEf2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("normal", 3), ("low", 4))).clone('urgent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciIpQosClassEf2.setStatus('mandatory')
mpFrppDlciIpQosClassEf1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("normal", 3), ("low", 4))).clone('urgent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciIpQosClassEf1.setStatus('mandatory')
mpFrppDlciIpQosClassAf4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("normal", 3), ("low", 4))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciIpQosClassAf4.setStatus('mandatory')
mpFrppDlciCfgInarpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("passive", 2))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgInarpMode.setStatus('mandatory')
mpFrppDlciCfgTrapFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 1), ("up", 2), ("down", 3), ("up-down", 4))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppDlciCfgTrapFilter.setStatus('mandatory')
mpFrppFrppCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 48), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppFrppCfgRowStatus.setStatus('mandatory')
mpFrppFrppCfgErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 3, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("normal", 1), ("parameterNotEnough", 2), ("badValue", 3), ("badIndexValue", 4), ("correlationError", 5), ("memoryAllocateFailure", 6), ("mbufHuntFailure", 7), ("relationalConfigExist", 8), ("lowLayerConfigNotRegistered", 9), ("mappingDataAlreadyExist", 10), ("ipAddressNotDeleted", 11), ("mccIdHuntFailure", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppCfgErrInfo.setStatus('mandatory')
mpFrppInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4), )
if mibBuilder.loadTexts: mpFrppInfoTable.setStatus('mandatory')
mpFrppInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4, 1), ).setIndexNames((0, "MP-FRPP-MIB", "mpFrppInfoIndex"))
if mibBuilder.loadTexts: mpFrppInfoEntry.setStatus('mandatory')
mpFrppInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppInfoIndex.setStatus('mandatory')
mpFrppInfoFrppAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpFrppInfoFrppAdminStatus.setStatus('mandatory')
mpFrppInfoFrppOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppInfoFrppOperStatus.setStatus('mandatory')
mpFrppInfoFrppLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppInfoFrppLastChange.setStatus('mandatory')
mpFrppInfoDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppInfoDlci.setStatus('mandatory')
mpFrppInfoDlciAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppInfoDlciAdminStatus.setStatus('mandatory')
mpFrppInfoDlciOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppInfoDlciOperStatus.setStatus('mandatory')
mpFrppInfoDlciLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppInfoDlciLastChange.setStatus('mandatory')
mpFrppInfoDlciOperDownEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("dlcidown", 2), ("lmierror", 3), ("lmiStatusInactiveReceived", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppInfoDlciOperDownEvent.setStatus('mandatory')
mpFrppMccIdStatTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5), )
if mibBuilder.loadTexts: mpFrppMccIdStatTable.setStatus('mandatory')
mpFrppMccIdStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1), ).setIndexNames((0, "MP-FRPP-MIB", "mpFrppMccIdStatIfIndex"))
if mibBuilder.loadTexts: mpFrppMccIdStatEntry.setStatus('mandatory')
mpFrppMccIdStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdStatIfIndex.setStatus('mandatory')
mpFrppMccIdRcvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvOctets.setStatus('mandatory')
mpFrppMccIdRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvFrames.setStatus('mandatory')
mpFrppMccIdRcvFrameMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvFrameMinSize.setStatus('mandatory')
mpFrppMccIdRcvFrameMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvFrameMaxSize.setStatus('mandatory')
mpFrppMccIdRcvDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvDiscardFrames.setStatus('mandatory')
mpFrppMccIdRcvFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvFecnFrames.setStatus('mandatory')
mpFrppMccIdRcvBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvBecnFrames.setStatus('mandatory')
mpFrppMccIdRcvDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvDeFrames.setStatus('mandatory')
mpFrppMccIdRcvInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvInvalidFrames.setStatus('mandatory')
mpFrppMccIdRcvLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvLongFrames.setStatus('mandatory')
mpFrppMccIdRcvShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvShortFrames.setStatus('mandatory')
mpFrppMccIdXmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdXmtOctets.setStatus('mandatory')
mpFrppMccIdXmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdXmtFrames.setStatus('mandatory')
mpFrppMccIdXmtFrameMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdXmtFrameMinSize.setStatus('mandatory')
mpFrppMccIdXmtFrameMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdXmtFrameMaxSize.setStatus('mandatory')
mpFrppMccIdXmtDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdXmtDiscardFrames.setStatus('mandatory')
mpFrppMccIdXmtFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdXmtFecnFrames.setStatus('mandatory')
mpFrppMccIdXmtBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdXmtBecnFrames.setStatus('mandatory')
mpFrppMccIdXmtDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdXmtDeFrames.setStatus('mandatory')
mpFrppMccIdRcvCllmFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvCllmFrames.setStatus('mandatory')
mpFrppMccIdLmiStatTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6), )
if mibBuilder.loadTexts: mpFrppMccIdLmiStatTable.setStatus('mandatory')
mpFrppMccIdLmiStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1), ).setIndexNames((0, "MP-FRPP-MIB", "mpFrppMccIdLmiStatIfIndex"))
if mibBuilder.loadTexts: mpFrppMccIdLmiStatEntry.setStatus('mandatory')
mpFrppMccIdLmiStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdLmiStatIfIndex.setStatus('mandatory')
mpFrppMccIdRcvLmiStatEnqs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvLmiStatEnqs.setStatus('mandatory')
mpFrppMccIdXmtLmiStatEnqs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdXmtLmiStatEnqs.setStatus('mandatory')
mpFrppMccIdRcvLmiStats = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvLmiStats.setStatus('mandatory')
mpFrppMccIdXmtLmiStats = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdXmtLmiStats.setStatus('mandatory')
mpFrppMccIdUsrLmiLinkRelErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdUsrLmiLinkRelErrs.setStatus('mandatory')
mpFrppMccIdUsrLmiT391Tos = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdUsrLmiT391Tos.setStatus('mandatory')
mpFrppMccIdUsrLmiSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdUsrLmiSeqErrs.setStatus('mandatory')
mpFrppMccIdUsrLmiProtErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdUsrLmiProtErrs.setStatus('mandatory')
mpFrppMccIdUsrLmiChInacts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdUsrLmiChInacts.setStatus('mandatory')
mpFrppMccIdNetLmiLinkRelErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdNetLmiLinkRelErrs.setStatus('mandatory')
mpFrppMccIdNetLmiT392Tos = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdNetLmiT392Tos.setStatus('mandatory')
mpFrppMccIdNetLmiSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdNetLmiSeqErrs.setStatus('mandatory')
mpFrppMccIdNetLmiErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdNetLmiErrs.setStatus('mandatory')
mpFrppMccIdNetChInacts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdNetChInacts.setStatus('mandatory')
mpFrppMccIdRcvAsyncFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppMccIdRcvAsyncFrms.setStatus('mandatory')
mpFrppFrppStatTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7), )
if mibBuilder.loadTexts: mpFrppFrppStatTable.setStatus('mandatory')
mpFrppFrppStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1), ).setIndexNames((0, "MP-FRPP-MIB", "mpFrppFrppStatIndex"))
if mibBuilder.loadTexts: mpFrppFrppStatEntry.setStatus('mandatory')
mpFrppFrppStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatIndex.setStatus('mandatory')
mpFrppFrppStatRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatRcvFrames.setStatus('mandatory')
mpFrppFrppStatXmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatXmtFrames.setStatus('mandatory')
mpFrppFrppStatRcvDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatRcvDiscardFrames.setStatus('mandatory')
mpFrppFrppStatXmtDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatXmtDiscardFrames.setStatus('mandatory')
mpFrppFrppStatRcvEncapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatRcvEncapErrors.setStatus('mandatory')
mpFrppFrppStatXmtEncapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatXmtEncapErrors.setStatus('mandatory')
mpFrppFrppStatRcvArpTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatRcvArpTransErrors.setStatus('mandatory')
mpFrppFrppStatXmtArpTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatXmtArpTransErrors.setStatus('mandatory')
mpFrppFrppStatReassembleErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatReassembleErrors.setStatus('mandatory')
mpFrppFrppStatPriorityQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatPriorityQueues.setStatus('mandatory')
mpFrppFrppStatPriorityBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppFrppStatPriorityBytes.setStatus('mandatory')
mpFrppDlcStatTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8), )
if mibBuilder.loadTexts: mpFrppDlcStatTable.setStatus('mandatory')
mpFrppDlcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1), ).setIndexNames((0, "MP-FRPP-MIB", "mpFrppDlciStatIfIndex"))
if mibBuilder.loadTexts: mpFrppDlcStatEntry.setStatus('mandatory')
mpFrppDlciStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatIfIndex.setStatus('mandatory')
mpFrppDlciStatRcvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvOctets.setStatus('mandatory')
mpFrppDlciStatRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvFrames.setStatus('mandatory')
mpFrppDlciStatRcvFrameMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvFrameMinSize.setStatus('mandatory')
mpFrppDlciStatRcvFrameMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvFrameMaxSize.setStatus('mandatory')
mpFrppDlciStatRcvFECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvFECNFrames.setStatus('mandatory')
mpFrppDlciStatRcvBECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvBECNFrames.setStatus('mandatory')
mpFrppDlciStatRcvDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvDEFrames.setStatus('mandatory')
mpFrppDlciStatRcvTaggedDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvTaggedDEFrames.setStatus('mandatory')
mpFrppDlciStatXmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtOctets.setStatus('mandatory')
mpFrppDlciStatXmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtFrames.setStatus('mandatory')
mpFrppDlciStatXmtFrameMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtFrameMinSize.setStatus('mandatory')
mpFrppDlciStatXmtFrameMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtFrameMaxSize.setStatus('mandatory')
mpFrppDlciStatXmtDEDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtDEDiscardFrames.setStatus('mandatory')
mpFrppDlciStatXmtFECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtFECNFrames.setStatus('mandatory')
mpFrppDlciStatXmtBECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtBECNFrames.setStatus('mandatory')
mpFrppDlciStatXmtDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtDEFrames.setStatus('mandatory')
mpFrppDlciStatXmtTaggedDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtTaggedDEFrames.setStatus('mandatory')
mpFrppDlciStatRcvInArpReqFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvInArpReqFrms.setStatus('mandatory')
mpFrppDlciStatXmtInArpReqFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtInArpReqFrms.setStatus('mandatory')
mpFrppDlciStatRcvInArpRlyFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvInArpRlyFrms.setStatus('mandatory')
mpFrppDlciStatXmtInArpRlyFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtInArpRlyFrms.setStatus('mandatory')
mpFrppDlciStatFNUnrecognizHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatFNUnrecognizHeaders.setStatus('mandatory')
mpFrppDlciStatNFUnrecognizHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatNFUnrecognizHeaders.setStatus('mandatory')
mpFrppDlciStatFNArpTranslationErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatFNArpTranslationErrs.setStatus('mandatory')
mpFrppDlciStatNFArpTranslationErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatNFArpTranslationErrs.setStatus('mandatory')
mpFrppDlciStatXmtVQFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtVQFrms.setStatus('mandatory')
mpFrppDlciStatXmtUQFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtUQFrms.setStatus('mandatory')
mpFrppDlciStatXmtXceedUQLenFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtXceedUQLenFrms.setStatus('mandatory')
mpFrppDlciStatXmtXceedUQByteFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtXceedUQByteFrms.setStatus('mandatory')
mpFrppDlciStatXmtHQFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtHQFrms.setStatus('mandatory')
mpFrppDlciStatXmtXceedHQLenFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtXceedHQLenFrms.setStatus('mandatory')
mpFrppDlciStatXmtXceedHQByteFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtXceedHQByteFrms.setStatus('mandatory')
mpFrppDlciStatXmtNQFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtNQFrms.setStatus('mandatory')
mpFrppDlciStatXmtXceedNQLenFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtXceedNQLenFrms.setStatus('mandatory')
mpFrppDlciStatXmtXceedNQByteFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtXceedNQByteFrms.setStatus('mandatory')
mpFrppDlciStatXmtLQFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtLQFrms.setStatus('mandatory')
mpFrppDlciStatXmtXceedLQLenFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtXceedLQLenFrms.setStatus('mandatory')
mpFrppDlciStatXmtXceedLQByteFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtXceedLQByteFrms.setStatus('mandatory')
mpFrppDlciStatRcvNPBDe0Frms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvNPBDe0Frms.setStatus('mandatory')
mpFrppDlciStatRcvNPBDe1Frms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvNPBDe1Frms.setStatus('mandatory')
mpFrppDlciStatRcvNPBDiscardFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatRcvNPBDiscardFrms.setStatus('mandatory')
mpFrppDlciStatXmtNPBFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtNPBFrms.setStatus('mandatory')
mpFrppDlciStatXmtNPBDiscardFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 8, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciStatXmtNPBDiscardFrms.setStatus('mandatory')
mpFrppDlciWkStatTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9), )
if mibBuilder.loadTexts: mpFrppDlciWkStatTable.setStatus('mandatory')
mpFrppDlciWkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1), ).setIndexNames((0, "MP-FRPP-MIB", "mpFrppDlciWkStatIfIndex"))
if mibBuilder.loadTexts: mpFrppDlciWkStatEntry.setStatus('mandatory')
mpFrppDlciWkStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatIfIndex.setStatus('mandatory')
mpFrppDlciWkStatFNEncapNones = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapNones.setStatus('mandatory')
mpFrppDlciWkStatFNEncapBridgeds = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapBridgeds.setStatus('mandatory')
mpFrppDlciWkStatFNEncapBridgedFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapBridgedFCSs.setStatus('mandatory')
mpFrppDlciWkStatFNEncapBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapBPDUs.setStatus('mandatory')
mpFrppDlciWkStatFNEncapRoutedIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapRoutedIPs.setStatus('mandatory')
mpFrppDlciWkStatFNEncapRoutedIPSNAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapRoutedIPSNAPs.setStatus('mandatory')
mpFrppDlciWkStatFNEncapVOIP0s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapVOIP0s.setStatus('mandatory')
mpFrppDlciWkStatFNEncapVOIP1s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapVOIP1s.setStatus('mandatory')
mpFrppDlciWkStatFNEncapVOIP2s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapVOIP2s.setStatus('mandatory')
mpFrppDlciWkStatFNEncapVOIP3s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapVOIP3s.setStatus('mandatory')
mpFrppDlciWkStatFNEncapVOIP4s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapVOIP4s.setStatus('mandatory')
mpFrppDlciWkStatFNEncapVOIP5s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapVOIP5s.setStatus('mandatory')
mpFrppDlciWkStatFNEncapVOIP6s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapVOIP6s.setStatus('mandatory')
mpFrppDlciWkStatFNEncapVOIP7s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapVOIP7s.setStatus('mandatory')
mpFrppDlciWkStatFNEncapVOIP8s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapVOIP8s.setStatus('mandatory')
mpFrppDlciWkStatFNEncapVOIP9s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFNEncapVOIP9s.setStatus('mandatory')
mpFrppDlciWkStatNFEncapNones = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapNones.setStatus('mandatory')
mpFrppDlciWkStatNFEncapBridgeds = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapBridgeds.setStatus('mandatory')
mpFrppDlciWkStatNFEncapBridgedFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapBridgedFCSs.setStatus('mandatory')
mpFrppDlciWkStatNFEncapBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapBPDUs.setStatus('mandatory')
mpFrppDlciWkStatNFEncapRoutedIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapRoutedIPs.setStatus('mandatory')
mpFrppDlciWkStatNFEncapRoutedIPSNAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapRoutedIPSNAPs.setStatus('mandatory')
mpFrppDlciWkStatNFEncapVOIP0s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapVOIP0s.setStatus('mandatory')
mpFrppDlciWkStatNFEncapVOIP1s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapVOIP1s.setStatus('mandatory')
mpFrppDlciWkStatNFEncapVOIP2s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapVOIP2s.setStatus('mandatory')
mpFrppDlciWkStatNFEncapVOIP3s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapVOIP3s.setStatus('mandatory')
mpFrppDlciWkStatNFEncapVOIP4s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapVOIP4s.setStatus('mandatory')
mpFrppDlciWkStatNFEncapVOIP5s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapVOIP5s.setStatus('mandatory')
mpFrppDlciWkStatNFEncapVOIP6s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapVOIP6s.setStatus('mandatory')
mpFrppDlciWkStatNFEncapVOIP7s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapVOIP7s.setStatus('mandatory')
mpFrppDlciWkStatNFEncapVOIP8s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapVOIP8s.setStatus('mandatory')
mpFrppDlciWkStatNFEncapVOIP9s = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatNFEncapVOIP9s.setStatus('mandatory')
mpFrppDlciWkStatRcvFragFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatRcvFragFrms.setStatus('mandatory')
mpFrppDlciWkStatRasmCompleteds = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatRasmCompleteds.setStatus('mandatory')
mpFrppDlciWkStatFragSequenceErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFragSequenceErrs.setStatus('mandatory')
mpFrppDlciWkStatFragBitErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFragBitErrs.setStatus('mandatory')
mpFrppDlciWkStatRasmFrmSizeErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatRasmFrmSizeErrs.setStatus('mandatory')
mpFrppDlciWkStatInvalidFragFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatInvalidFragFrms.setStatus('mandatory')
mpFrppDlciWkStatFragBufhuntNgs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFragBufhuntNgs.setStatus('mandatory')
mpFrppDlciWkStatFragSndNgs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatFragSndNgs.setStatus('mandatory')
mpFrppDlciWkStatXmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatXmtFrames.setStatus('mandatory')
mpFrppDlciWkStatXmtDiscardFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 123, 9, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFrppDlciWkStatXmtDiscardFrms.setStatus('mandatory')
mibBuilder.exportSymbols("MP-FRPP-MIB", mpLlc=mpLlc, mpFrppInfoFrppLastChange=mpFrppInfoFrppLastChange, dod=dod, mpFrppMccIdXmtFrames=mpFrppMccIdXmtFrames, mpFrppMccIdRcvCllmFrames=mpFrppMccIdRcvCllmFrames, mmpf=mmpf, mpFrppDlciStatXmtTaggedDEFrames=mpFrppDlciStatXmtTaggedDEFrames, mpDhcp=mpDhcp, mpFrppFrppStatPriorityBytes=mpFrppFrppStatPriorityBytes, mpFrppFrppCfgFrppName=mpFrppFrppCfgFrppName, mpFrppFrppCfgInterWorkType=mpFrppFrppCfgInterWorkType, mpFrppDlciWkStatRasmFrmSizeErrs=mpFrppDlciWkStatRasmFrmSizeErrs, mpFrppDlciStatXmtXceedNQLenFrms=mpFrppDlciStatXmtXceedNQLenFrms, mpFrppDlciCfgBecn=mpFrppDlciCfgBecn, mpFrppDlciWkStatNFEncapNones=mpFrppDlciWkStatNFEncapNones, mpFrppFrppCfgIpadd=mpFrppFrppCfgIpadd, mpFrppMccCfgIfIndex=mpFrppMccCfgIfIndex, mpFrppMccIdUsrLmiSeqErrs=mpFrppMccIdUsrLmiSeqErrs, mpFrppDlciWkStatNFEncapVOIP3s=mpFrppDlciWkStatNFEncapVOIP3s, mpFrppDlciWkStatNFEncapVOIP7s=mpFrppDlciWkStatNFEncapVOIP7s, mpFrppDlciStatXmtFrameMaxSize=mpFrppDlciStatXmtFrameMaxSize, mpFrppDlciStatXmtNPBDiscardFrms=mpFrppDlciStatXmtNPBDiscardFrms, mpFrppDlciIpQosClassAf3=mpFrppDlciIpQosClassAf3, enterprises=enterprises, mpDbAccess=mpDbAccess, mpObsCtl=mpObsCtl, mpFrppMccIdXmtBecnFrames=mpFrppMccIdXmtBecnFrames, mpFrppDlciStatXmtLQFrms=mpFrppDlciStatXmtLQFrms, mpFrppFrppStatRcvFrames=mpFrppFrppStatRcvFrames, mpFrppDlciStatXmtInArpReqFrms=mpFrppDlciStatXmtInArpReqFrms, mpFrppDlciStatRcvNPBDe0Frms=mpFrppDlciStatRcvNPBDe0Frms, mpFrppDlciWkStatTable=mpFrppDlciWkStatTable, mpFrppFrppCfgCtcpMode=mpFrppFrppCfgCtcpMode, mpFrppDlciWkStatFNEncapVOIP5s=mpFrppDlciWkStatFNEncapVOIP5s, mpFrppMccIdLmiStatIfIndex=mpFrppMccIdLmiStatIfIndex, mpFrppDlciWkStatInvalidFragFrms=mpFrppDlciWkStatInvalidFragFrms, mpFrppFrppCfgCrtpAging=mpFrppFrppCfgCrtpAging, mpFrppMccCfgMonitoredEvents=mpFrppMccCfgMonitoredEvents, mpFrppDlciWkStatFragSndNgs=mpFrppDlciWkStatFragSndNgs, mpFrppDlciQueueLenN=mpFrppDlciQueueLenN, mpFrppFrppCfgCtcpAging=mpFrppFrppCfgCtcpAging, mpFrppFrppCfgEntry=mpFrppFrppCfgEntry, mpFrppMccIdRcvFrames=mpFrppMccIdRcvFrames, mpFrppDlciStatXmtInArpRlyFrms=mpFrppDlciStatXmtInArpRlyFrms, mpFrppFrppStatPriorityQueues=mpFrppFrppStatPriorityQueues, mpVlan=mpVlan, mpFrppMccCfgAsync=mpFrppMccCfgAsync, mpIpswAtm=mpIpswAtm, mpFrppDlciWkStatNFEncapVOIP8s=mpFrppDlciWkStatNFEncapVOIP8s, mpFrppMccIdRcvFrameMinSize=mpFrppMccIdRcvFrameMinSize, mpFrppDlciWkStatNFEncapBPDUs=mpFrppDlciWkStatNFEncapBPDUs, mpFrppDlciQueueByteU=mpFrppDlciQueueByteU, mpFrppMccCfgRowStatus=mpFrppMccCfgRowStatus, mpInsCtl=mpInsCtl, mpFrppInfoDlciLastChange=mpFrppInfoDlciLastChange, mpFrppMccIdStatIfIndex=mpFrppMccIdStatIfIndex, mpFrppMccIdNetChInacts=mpFrppMccIdNetChInacts, mmn9120=mmn9120, mpFrppDlcStatTable=mpFrppDlcStatTable, mpDns=mpDns, mpFrppDlciStatXmtFrames=mpFrppDlciStatXmtFrames, mpFrppDlciWkStatNFEncapRoutedIPSNAPs=mpFrppDlciWkStatNFEncapRoutedIPSNAPs, mpFrppDlciCfgInarpMode=mpFrppDlciCfgInarpMode, mpFrppDlciQueueLenL=mpFrppDlciQueueLenL, mpFrppMccCfgUniType=mpFrppMccCfgUniType, mpFrppDlciCfgCir=mpFrppDlciCfgCir, mpFrppInfoDlciOperStatus=mpFrppInfoDlciOperStatus, mpFrppMccIdUsrLmiT391Tos=mpFrppMccIdUsrLmiT391Tos, mpFrppDlciWkStatFNEncapVOIP4s=mpFrppDlciWkStatFNEncapVOIP4s, mpFrppDlciWkStatFNEncapVOIP3s=mpFrppDlciWkStatFNEncapVOIP3s, mpFrppDlciWkStatFragBitErrs=mpFrppDlciWkStatFragBitErrs, mpFrppDlciWkStatFNEncapVOIP1s=mpFrppDlciWkStatFNEncapVOIP1s, mpEventLog=mpEventLog, mpFrppDlciCfgPln=mpFrppDlciCfgPln, mpFrppMccCfgEntry=mpFrppMccCfgEntry, mpStp=mpStp, mpFrppDlciStatXmtXceedHQLenFrms=mpFrppDlciStatXmtXceedHQLenFrms, mpFrppDlciQueueByteN=mpFrppDlciQueueByteN, mpFrppMccIdRcvLmiStats=mpFrppMccIdRcvLmiStats, mpStats=mpStats, mpFrppDlciStatXmtOctets=mpFrppDlciStatXmtOctets, necProductDepend=necProductDepend, mpFrppDlciWkStatNFEncapBridgedFCSs=mpFrppDlciWkStatNFEncapBridgedFCSs, mpFrppDlciWkStatRasmCompleteds=mpFrppDlciWkStatRasmCompleteds, mpFrppInfoTable=mpFrppInfoTable, mmn9110=mmn9110, mpFrppMccCfgLmiProcedure=mpFrppMccCfgLmiProcedure, mpFrppDlciWkStatNFEncapVOIP4s=mpFrppDlciWkStatNFEncapVOIP4s, mpFrppMccIdXmtDeFrames=mpFrppMccIdXmtDeFrames, mpFrppDlciStatFNArpTranslationErrs=mpFrppDlciStatFNArpTranslationErrs, mpFrppDlciIpQosClassAf4=mpFrppDlciIpQosClassAf4, mpFrppDlciWkStatNFEncapVOIP9s=mpFrppDlciWkStatNFEncapVOIP9s, mpFrppMccIdRcvLmiStatEnqs=mpFrppMccIdRcvLmiStatEnqs, mpFrppMccIdRcvLongFrames=mpFrppMccIdRcvLongFrames, mpFrppMccIdUsrLmiLinkRelErrs=mpFrppMccIdUsrLmiLinkRelErrs, datax=datax, mpFrppFrppCfgCtcpLimit=mpFrppFrppCfgCtcpLimit, mpFrppDlciCfgSnapFlg=mpFrppDlciCfgSnapFlg, mpLec=mpLec, mpFrppDlciWkStatFNEncapVOIP9s=mpFrppDlciWkStatFNEncapVOIP9s, mpFrppDlciStatRcvOctets=mpFrppDlciStatRcvOctets, mpFrppDlciStatFNUnrecognizHeaders=mpFrppDlciStatFNUnrecognizHeaders, mpFrppDlciWkStatFNEncapVOIP7s=mpFrppDlciWkStatFNEncapVOIP7s, mpFrppDlciStatXmtHQFrms=mpFrppDlciStatXmtHQFrms, mpFrppDlciStatXmtXceedHQByteFrms=mpFrppDlciStatXmtXceedHQByteFrms, mpMpc=mpMpc, mpAtm=mpAtm, mpFrppDlciStatRcvNPBDe1Frms=mpFrppDlciStatRcvNPBDe1Frms, datax_mib=datax_mib, mpFrppDlciIpQosClassBe=mpFrppDlciIpQosClassBe, mpFrppDlciStatNFArpTranslationErrs=mpFrppDlciStatNFArpTranslationErrs, mpFrppMccIdNetLmiErrs=mpFrppMccIdNetLmiErrs, mpFrppFrppCfgHwSticFlag=mpFrppFrppCfgHwSticFlag, mpFrppMccIdNetLmiLinkRelErrs=mpFrppMccIdNetLmiLinkRelErrs, mpFrppDlciStatXmtNPBFrms=mpFrppDlciStatXmtNPBFrms, mpFrppMccIdXmtOctets=mpFrppMccIdXmtOctets, mpFrppFrppStatRcvDiscardFrames=mpFrppFrppStatRcvDiscardFrames, MacAddress=MacAddress, mpFrppDlciStatXmtDEDiscardFrames=mpFrppDlciStatXmtDEDiscardFrames, mpFrppDlciStatXmtVQFrms=mpFrppDlciStatXmtVQFrms, mpInterface=mpInterface, mpLis=mpLis, mpFrppFrppCfgDlciIndex=mpFrppFrppCfgDlciIndex, mpFrppDlciIpQosClassEf1=mpFrppDlciIpQosClassEf1, mpFrppDlciStatXmtDEFrames=mpFrppDlciStatXmtDEFrames, mpFrppDlciStatXmtUQFrms=mpFrppDlciStatXmtUQFrms, mpFrppDlciStatNFUnrecognizHeaders=mpFrppDlciStatNFUnrecognizHeaders, mpFrppDlciQueueByteL=mpFrppDlciQueueByteL, mpPos=mpPos, nec_mib=nec_mib, mpFrppMccIdUsrLmiProtErrs=mpFrppMccIdUsrLmiProtErrs, mpFrppFrppCfgCrtpSupport=mpFrppFrppCfgCrtpSupport, mpFrppDlciStatRcvDEFrames=mpFrppDlciStatRcvDEFrames, mpFrppDlciWkStatNFEncapVOIP6s=mpFrppDlciWkStatNFEncapVOIP6s, mpFrppMccCfgL2Status=mpFrppMccCfgL2Status, mpFfr=mpFfr, mpIpsw=mpIpsw, mpFrppMccCfgLmiProtocol=mpFrppMccCfgLmiProtocol, mpFrppDlciIpQosClassAf1=mpFrppDlciIpQosClassAf1, mpFrppMccIdRcvFrameMaxSize=mpFrppMccIdRcvFrameMaxSize, mpFrppDlciWkStatIfIndex=mpFrppDlciWkStatIfIndex, nec=nec, mpFrppMccIdRcvInvalidFrames=mpFrppMccIdRcvInvalidFrames, mpFrppMccIdStatTable=mpFrppMccIdStatTable, mpFrppMccIdXmtFrameMinSize=mpFrppMccIdXmtFrameMinSize, mpFrppFrppCfgRowStatus=mpFrppFrppCfgRowStatus, mpFrppFrppStatXmtFrames=mpFrppFrppStatXmtFrames, mpFrppFrppCfgIfIndex=mpFrppFrppCfgIfIndex, mpFrppInfoDlci=mpFrppInfoDlci, mpFtp=mpFtp, mpFrppDlciWkStatFNEncapBridgedFCSs=mpFrppDlciWkStatFNEncapBridgedFCSs, mpRip=mpRip, mpFrppDlciStatRcvInArpRlyFrms=mpFrppDlciStatRcvInArpRlyFrms, mpFrppDlciWkStatEntry=mpFrppDlciWkStatEntry, DisplayString=DisplayString, mpFrppMccCfgTable=mpFrppMccCfgTable, PhysAddress=PhysAddress, mpFrppDlciCfgMincir=mpFrppDlciCfgMincir, mpOspf=mpOspf, mpFrpp=mpFrpp, mpFrppMccIdLmiStatTable=mpFrppMccIdLmiStatTable, mpFrppMccIdXmtLmiStatEnqs=mpFrppMccIdXmtLmiStatEnqs, mpCli=mpCli, mpFrppFrppStatReassembleErrors=mpFrppFrppStatReassembleErrors, mpFrppDlciIpQosClassEf3=mpFrppDlciIpQosClassEf3, mpFrppDlciStatIfIndex=mpFrppDlciStatIfIndex, DateAndTime=DateAndTime, mpFrppFrppCfgMccidIndex=mpFrppFrppCfgMccidIndex, mpFrppFrppStatRcvEncapErrors=mpFrppFrppStatRcvEncapErrors, mpFrppDlciWkStatFNEncapVOIP8s=mpFrppDlciWkStatFNEncapVOIP8s, mpEtherPort=mpEtherPort, mpFrppMccCfgNetPollInterval=mpFrppMccCfgNetPollInterval, mpFrppDlciWkStatFragBufhuntNgs=mpFrppDlciWkStatFragBufhuntNgs, mpFrppMccCfgErrorThreshold=mpFrppMccCfgErrorThreshold, mpFrppFrppStatEntry=mpFrppFrppStatEntry, mpFrppDlciWkStatNFEncapVOIP1s=mpFrppDlciWkStatNFEncapVOIP1s, mpFrppMccCfgErrInfo=mpFrppMccCfgErrInfo, mpFrppMccIdNetLmiSeqErrs=mpFrppMccIdNetLmiSeqErrs, mpAtmCallCtl=mpAtmCallCtl, mpFrppDlcStatEntry=mpFrppDlcStatEntry, mpPvoice=mpPvoice, mpFrppDlciWkStatFragSequenceErrs=mpFrppDlciWkStatFragSequenceErrs, mpFrppDlciWkStatXmtFrames=mpFrppDlciWkStatXmtFrames, mpFrppDlciCfgMtuSize=mpFrppDlciCfgMtuSize, mpUiSession=mpUiSession, mpFrppMccCfgFullEnqInterval=mpFrppMccCfgFullEnqInterval, mpFrppFrppStatXmtEncapErrors=mpFrppFrppStatXmtEncapErrors, mpIp=mpIp, mpFrppFrppCfgTable=mpFrppFrppCfgTable, mpBridge=mpBridge, mpFrppFrppCfgCrtpMode=mpFrppFrppCfgCrtpMode, mpFrppDlciQueueByteH=mpFrppDlciQueueByteH, mpFrppDlciStatRcvFECNFrames=mpFrppDlciStatRcvFECNFrames, mpFrppInfoIndex=mpFrppInfoIndex, mpFrppDlciStatRcvFrameMinSize=mpFrppDlciStatRcvFrameMinSize, mpFrppMccIdXmtFecnFrames=mpFrppMccIdXmtFecnFrames, mpFrppDlciStatXmtFECNFrames=mpFrppDlciStatXmtFECNFrames, mpFrppDlciStatXmtXceedUQLenFrms=mpFrppDlciStatXmtXceedUQLenFrms, mpFrppMccIdRcvOctets=mpFrppMccIdRcvOctets, mpFrppDlciQueueLenH=mpFrppDlciQueueLenH, mpFrppMccIdRcvShortFrames=mpFrppMccIdRcvShortFrames, mpFrppDlciStatXmtXceedLQLenFrms=mpFrppDlciStatXmtXceedLQLenFrms, mpPpp=mpPpp, mpFrppDlciCfgMir=mpFrppDlciCfgMir, mpFrppDlciIpQosClassEf2=mpFrppDlciIpQosClassEf2, mpFrppMccIdRcvAsyncFrms=mpFrppMccIdRcvAsyncFrms, mpFrppMccIdRcvDiscardFrames=mpFrppMccIdRcvDiscardFrames, mpFrppDlciStatXmtXceedUQByteFrms=mpFrppDlciStatXmtXceedUQByteFrms, mpFrppFrppCfgCrtpLimit=mpFrppFrppCfgCrtpLimit, mpFrppDlciStatXmtNQFrms=mpFrppDlciStatXmtNQFrms, mpFrppInfoFrppOperStatus=mpFrppInfoFrppOperStatus, mpFrppInfoDlciOperDownEvent=mpFrppInfoDlciOperDownEvent, mpFrppInfoDlciAdminStatus=mpFrppInfoDlciAdminStatus, mpFrppMccIdRcvDeFrames=mpFrppMccIdRcvDeFrames, mpFrppDlciCfgFragSize=mpFrppDlciCfgFragSize, mpFrppDlciStatRcvNPBDiscardFrms=mpFrppDlciStatRcvNPBDiscardFrms, mpFrppDlciWkStatFNEncapBPDUs=mpFrppDlciWkStatFNEncapBPDUs, mpFrppMccIdXmtLmiStats=mpFrppMccIdXmtLmiStats, mpSystem=mpSystem, mpFrppMccIdXmtFrameMaxSize=mpFrppMccIdXmtFrameMaxSize, mpFrppDlciWkStatFNEncapVOIP0s=mpFrppDlciWkStatFNEncapVOIP0s, mpFrppDlciWkStatFNEncapVOIP6s=mpFrppDlciWkStatFNEncapVOIP6s, mpFrppInfoEntry=mpFrppInfoEntry, mpFrppTrapInfo=mpFrppTrapInfo, private=private, mpFrppFrppCfgCtcpSupport=mpFrppFrppCfgCtcpSupport, mpFrppFrppCfgMtuSize=mpFrppFrppCfgMtuSize, mpFrppDlciStatXmtFrameMinSize=mpFrppDlciStatXmtFrameMinSize, mpFrppFrppStatRcvArpTransErrors=mpFrppFrppStatRcvArpTransErrors, mpFrppDlciWkStatFNEncapRoutedIPSNAPs=mpFrppDlciWkStatFNEncapRoutedIPSNAPs, mpFrppDlciIpQosClassAf2=mpFrppDlciIpQosClassAf2, mpFrppMccIdXmtDiscardFrames=mpFrppMccIdXmtDiscardFrames, mpFrppDlciWkStatFNEncapVOIP2s=mpFrppDlciWkStatFNEncapVOIP2s, mpFrppDlciWkStatNFEncapVOIP5s=mpFrppDlciWkStatNFEncapVOIP5s, mpFrppTrapInfoMccid=mpFrppTrapInfoMccid, mpFrppDlciWkStatNFEncapVOIP2s=mpFrppDlciWkStatNFEncapVOIP2s, mpFrppMccIdStatEntry=mpFrppMccIdStatEntry, mpSnmp=mpSnmp, mpFrppDlciCfgTrapFilter=mpFrppDlciCfgTrapFilter, mpFrppDlciCfgDe=mpFrppDlciCfgDe, mpFrppFrppStatXmtDiscardFrames=mpFrppFrppStatXmtDiscardFrames, mpFrppFrppCfgSubnet=mpFrppFrppCfgSubnet, org=org, mpFrppFrppCfgErrInfo=mpFrppFrppCfgErrInfo, mpFrppInfoFrppAdminStatus=mpFrppInfoFrppAdminStatus, mpFrppDlciCfgEncap=mpFrppDlciCfgEncap, mpFrppDlciStatRcvFrames=mpFrppDlciStatRcvFrames, mpFrppDlciWkStatNFEncapBridgeds=mpFrppDlciWkStatNFEncapBridgeds, mpFrppDlciWkStatNFEncapVOIP0s=mpFrppDlciWkStatNFEncapVOIP0s, mpFrppDlciStatRcvInArpReqFrms=mpFrppDlciStatRcvInArpReqFrms, internet=internet, mpFrppDlciWkStatXmtDiscardFrms=mpFrppDlciWkStatXmtDiscardFrms, mpFrppDlciCfgPerInc=mpFrppDlciCfgPerInc, mpFrppDlciWkStatFNEncapRoutedIPs=mpFrppDlciWkStatFNEncapRoutedIPs)
mibBuilder.exportSymbols("MP-FRPP-MIB", mpFrppDlciStatRcvFrameMaxSize=mpFrppDlciStatRcvFrameMaxSize, mpFrppDlciWkStatFNEncapBridgeds=mpFrppDlciWkStatFNEncapBridgeds, mpFrppMccCfgUsrPollInterval=mpFrppMccCfgUsrPollInterval, necProduct=necProduct, mmpf_mib=mmpf_mib, mpFrppDlciStatXmtXceedNQByteFrms=mpFrppDlciStatXmtXceedNQByteFrms, mpCardInfo=mpCardInfo, mpFrppDlciQueueLenU=mpFrppDlciQueueLenU, mpFrppMccIdRcvFecnFrames=mpFrppMccIdRcvFecnFrames, mpFrppDlciStatRcvBECNFrames=mpFrppDlciStatRcvBECNFrames, mpFrppDlciWkStatFNEncapNones=mpFrppDlciWkStatFNEncapNones, mpFrppFrppStatXmtArpTransErrors=mpFrppFrppStatXmtArpTransErrors, mpFrppDlciWkStatRcvFragFrms=mpFrppDlciWkStatRcvFragFrms, mpFrppDlciCfgPerDec=mpFrppDlciCfgPerDec, mpFrppTrapInfoDlci=mpFrppTrapInfoDlci, mpCes=mpCes, mpFrppMccIdRcvBecnFrames=mpFrppMccIdRcvBecnFrames, mpFrppDlciWkStatNFEncapRoutedIPs=mpFrppDlciWkStatNFEncapRoutedIPs, mpFrppDlciStatXmtXceedLQByteFrms=mpFrppDlciStatXmtXceedLQByteFrms, mpFrppFrppStatTable=mpFrppFrppStatTable, mpFrppMccIdUsrLmiChInacts=mpFrppMccIdUsrLmiChInacts, mpFrppDlciStatXmtBECNFrames=mpFrppDlciStatXmtBECNFrames, NetPrefix=NetPrefix, mpFrppDlciStatRcvTaggedDEFrames=mpFrppDlciStatRcvTaggedDEFrames, mpFrppMccIdLmiStatEntry=mpFrppMccIdLmiStatEntry, mpIfCard=mpIfCard, mpFrppMccIdNetLmiT392Tos=mpFrppMccIdNetLmiT392Tos, mpFrppFrppStatIndex=mpFrppFrppStatIndex)
