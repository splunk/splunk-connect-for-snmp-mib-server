#
# PySNMP MIB module LMS-TRAP-FORWARDING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LMS-TRAP-FORWARDING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Integer32, NotificationType, IpAddress, ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Counter32, MibIdentifier, Gauge32, Bits, TimeTicks, enterprises, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "NotificationType", "IpAddress", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Counter32", "MibIdentifier", "Gauge32", "Bits", "TimeTicks", "enterprises", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lotus = MibIdentifier((1, 3, 6, 1, 4, 1, 334))
notes = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 1))
lcs = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 2))
softswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3))
common_mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 1)).setLabel("common-mibs")
lms = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2))
lmsTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 3))
lmsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 2))
class TimeInterval(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

eventFwdTableModificationStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("no-access", 2), ("read-only", 3), ("read-modify", 4), ("read-create", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventFwdTableModificationStatus.setStatus('mandatory')
nextFwdEntryIndex = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextFwdEntryIndex.setStatus('mandatory')
trapWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 3), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapWindowTime.setStatus('mandatory')
maxTrapsPerWindow = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxTrapsPerWindow.setStatus('mandatory')
numDroppedMaxPerWindowTraps = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDroppedMaxPerWindowTraps.setStatus('mandatory')
lmsEventFwdTable = MibTable((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6), )
if mibBuilder.loadTexts: lmsEventFwdTable.setStatus('mandatory')
lmsEventFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1), ).setIndexNames((0, "LMS-TRAP-FORWARDING-MIB", "fwdEntryIndex"))
if mibBuilder.loadTexts: lmsEventFwdEntry.setStatus('mandatory')
fwdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwdEntryIndex.setStatus('mandatory')
rowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rowStatus.setStatus('mandatory')
destinationNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationNetAddr.setStatus('mandatory')
destinationCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationCommunity.setStatus('mandatory')
destinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationPort.setStatus('mandatory')
forwardingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardingEnabled.setStatus('mandatory')
forwardingFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardingFilterName.setStatus('mandatory')
lastTrapSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTrapSequenceNumber.setStatus('mandatory')
lastTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTrapTime.setStatus('mandatory')
numDroppedDisabledTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 2, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDroppedDisabledTraps.setStatus('mandatory')
lmsEvComponentType = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("global", 1), ("switch", 2), ("core", 3), ("mta", 4), ("mta-group", 5), ("queue", 6), ("mea", 7), ("other", 8))))
if mibBuilder.loadTexts: lmsEvComponentType.setStatus('mandatory')
lmsEvComponentDN = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 3, 2), DisplayString())
if mibBuilder.loadTexts: lmsEvComponentDN.setStatus('mandatory')
lmsEvDbId = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 3, 3), Integer32())
if mibBuilder.loadTexts: lmsEvDbId.setStatus('mandatory')
lmsEvOID = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 3, 4), Integer32())
if mibBuilder.loadTexts: lmsEvOID.setStatus('mandatory')
numLmsEvSequences = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 3, 5), Counter32())
if mibBuilder.loadTexts: numLmsEvSequences.setStatus('mandatory')
lmsEvSeverity = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 3, 6), Integer32())
if mibBuilder.loadTexts: lmsEvSeverity.setStatus('mandatory')
lmsEvSupportingText = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 3, 7), DisplayString())
if mibBuilder.loadTexts: lmsEvSupportingText.setStatus('mandatory')
lmsCritical = NotificationType((1, 3, 6, 1, 4, 1, 334, 3, 2) + (0,1)).setObjects(("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentType"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentDN"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvDbId"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvOID"), ("LMS-TRAP-FORWARDING-MIB", "numLmsEvSequences"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSeverity"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSupportingText"))
lmsMajor = NotificationType((1, 3, 6, 1, 4, 1, 334, 3, 2) + (0,2)).setObjects(("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentType"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentDN"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvDbId"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvOID"), ("LMS-TRAP-FORWARDING-MIB", "numLmsEvSequences"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSeverity"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSupportingText"))
lmsMinor = NotificationType((1, 3, 6, 1, 4, 1, 334, 3, 2) + (0,3)).setObjects(("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentType"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentDN"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvDbId"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvOID"), ("LMS-TRAP-FORWARDING-MIB", "numLmsEvSequences"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSeverity"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSupportingText"))
lmsWarning = NotificationType((1, 3, 6, 1, 4, 1, 334, 3, 2) + (0,4)).setObjects(("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentType"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentDN"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvDbId"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvOID"), ("LMS-TRAP-FORWARDING-MIB", "numLmsEvSequences"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSeverity"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSupportingText"))
lmsCleared = NotificationType((1, 3, 6, 1, 4, 1, 334, 3, 2) + (0,5)).setObjects(("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentType"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentDN"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvDbId"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvOID"), ("LMS-TRAP-FORWARDING-MIB", "numLmsEvSequences"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSeverity"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSupportingText"))
lmsInformational = NotificationType((1, 3, 6, 1, 4, 1, 334, 3, 2) + (0,6)).setObjects(("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentType"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvComponentDN"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvDbId"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvOID"), ("LMS-TRAP-FORWARDING-MIB", "numLmsEvSequences"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSeverity"), ("LMS-TRAP-FORWARDING-MIB", "lmsEvSupportingText"))
mibBuilder.exportSymbols("LMS-TRAP-FORWARDING-MIB", eventFwdTableModificationStatus=eventFwdTableModificationStatus, nextFwdEntryIndex=nextFwdEntryIndex, softswitch=softswitch, lmsEvSeverity=lmsEvSeverity, lmsTrapData=lmsTrapData, numDroppedDisabledTraps=numDroppedDisabledTraps, lotus=lotus, TimeInterval=TimeInterval, rowStatus=rowStatus, trapWindowTime=trapWindowTime, maxTrapsPerWindow=maxTrapsPerWindow, lmsWarning=lmsWarning, lmsMinor=lmsMinor, numDroppedMaxPerWindowTraps=numDroppedMaxPerWindowTraps, forwardingEnabled=forwardingEnabled, lastTrapSequenceNumber=lastTrapSequenceNumber, lastTrapTime=lastTrapTime, lmsEvOID=lmsEvOID, lmsInformational=lmsInformational, forwardingFilterName=forwardingFilterName, lmsCritical=lmsCritical, destinationPort=destinationPort, fwdEntryIndex=fwdEntryIndex, destinationNetAddr=destinationNetAddr, lmsEvDbId=lmsEvDbId, lms=lms, lmsEvSupportingText=lmsEvSupportingText, lmsEventFwdTable=lmsEventFwdTable, destinationCommunity=destinationCommunity, lcs=lcs, numLmsEvSequences=numLmsEvSequences, lmsMajor=lmsMajor, lmsCleared=lmsCleared, lmsTrap=lmsTrap, lmsEvComponentType=lmsEvComponentType, lmsEventFwdEntry=lmsEventFwdEntry, notes=notes, common_mibs=common_mibs, lmsEvComponentDN=lmsEvComponentDN)
