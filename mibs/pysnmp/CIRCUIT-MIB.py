#
# PySNMP MIB module CIRCUIT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIRCUIT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:32:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
coriolisMibs, circuit = mibBuilder.importSymbols("CORIOLIS-MIB", "coriolisMibs", "circuit")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, iso, Bits, Counter64, Integer32, NotificationType, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, TimeTicks, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "iso", "Bits", "Counter64", "Integer32", "NotificationType", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "TimeTicks", "ModuleIdentity", "Unsigned32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
circuitMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5812, 6, 1))
if mibBuilder.loadTexts: circuitMIB.setLastUpdated('0010300000Z')
if mibBuilder.loadTexts: circuitMIB.setOrganization('Coriolis Networks')
circuitLoadBalanceInterval = MibScalar((1, 3, 6, 1, 4, 1, 5812, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitLoadBalanceInterval.setStatus('current')
circuitLoadBalanceNumPerInterval = MibScalar((1, 3, 6, 1, 4, 1, 5812, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitLoadBalanceNumPerInterval.setStatus('current')
circuitOldIpAddrToSwap = MibScalar((1, 3, 6, 1, 4, 1, 5812, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitOldIpAddrToSwap.setStatus('current')
circuitNewIpAddrToSwap = MibScalar((1, 3, 6, 1, 4, 1, 5812, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitNewIpAddrToSwap.setStatus('current')
circuitEventInterval = MibScalar((1, 3, 6, 1, 4, 1, 5812, 6, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitEventInterval.setStatus('current')
circuitEventNumPerInterval = MibScalar((1, 3, 6, 1, 4, 1, 5812, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitEventNumPerInterval.setStatus('current')
circuitTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 6, 8), )
if mibBuilder.loadTexts: circuitTable.setStatus('current')
circuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1), ).setIndexNames((0, "CIRCUIT-MIB", "circuitSrcIpAddr"), (0, "CIRCUIT-MIB", "circuitSrcInterfaceNum"), (0, "CIRCUIT-MIB", "circuitSrcConnectionID"))
if mibBuilder.loadTexts: circuitEntry.setStatus('current')
circuitSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSrcIpAddr.setStatus('current')
circuitSrcInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSrcInterfaceNum.setStatus('current')
circuitSrcConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSrcConnectionID.setStatus('current')
circuitSrcDescString = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSrcDescString.setStatus('current')
circuitDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitDestIpAddr.setStatus('current')
circuitDestInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitDestInterfaceNum.setStatus('current')
circuitDestConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitDestConnectionID.setStatus('current')
circuitDestDescString = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitDestDescString.setStatus('current')
circuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitName.setStatus('current')
circuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitID.setStatus('current')
circuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitRowStatus.setStatus('current')
circuitReasonText = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitReasonText.setStatus('current')
circuitFailLocIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitFailLocIpAddr.setStatus('current')
circuitFailLocSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitFailLocSlot1.setStatus('current')
circuitFailLocPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitFailLocPort1.setStatus('current')
circuitFailLocInterfaceNum1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitFailLocInterfaceNum1.setStatus('current')
circuitFailLocConnectionID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitFailLocConnectionID1.setStatus('current')
circuitFailLocSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitFailLocSlot2.setStatus('current')
circuitFailLocPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitFailLocPort2.setStatus('current')
circuitFailLocInterfaceNum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitFailLocInterfaceNum2.setStatus('current')
circuitFailLocConnectionID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitFailLocConnectionID2.setStatus('current')
circuitEndPoint1Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("frameRelay", 2), ("atm", 3), ("vt", 4), ("axData", 5), ("axTdm", 6), ("isl", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitEndPoint1Protocol.setStatus('current')
circuitFwdTDType = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("frameRelay", 2), ("tdm", 3), ("atm-cbr", 4), ("atm-vbr-rt", 5), ("atm-vbr-nrt", 6), ("atm-vbr-ubr", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitFwdTDType.setStatus('current')
circuitFwdTDParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitFwdTDParam1.setStatus('current')
circuitFwdTDParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitFwdTDParam2.setStatus('current')
circuitFwdTDParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitFwdTDParam3.setStatus('current')
circuitFwdTDParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitFwdTDParam4.setStatus('current')
circuitEndPoint2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("frameRelay", 2), ("atm", 3), ("vt", 4), ("axData", 5), ("axTdm", 6), ("isl", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitEndPoint2Protocol.setStatus('current')
circuitBwdTDType = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("frameRelay", 2), ("tdm", 3), ("atm-cbr", 4), ("atm-vbr-rt", 5), ("atm-vbr-nrt", 6), ("atm-vbr-ubr", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBwdTDType.setStatus('current')
circuitBwdTDParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBwdTDParam1.setStatus('current')
circuitBwdTDParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBwdTDParam2.setStatus('current')
circuitBwdTDParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBwdTDParam3.setStatus('current')
circuitBwdTDParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBwdTDParam4.setStatus('current')
circuitClassOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitClassOfService.setStatus('current')
circuitAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledButNotUsed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitAdminState.setStatus('current')
circuitOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitOperState.setStatus('current')
circuitTimeSinceStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitTimeSinceStatusChange.setStatus('current')
circuitSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSetupPriority.setStatus('current')
circuitHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitHoldPriority.setStatus('current')
circuitIsRedundancyReqd = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitIsRedundancyReqd.setStatus('current')
circuitPreferredEP1OptSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPreferredEP1OptSlot.setStatus('current')
circuitPreferredEP1OptPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPreferredEP1OptPort.setStatus('current')
circuitPreferredEP1OptVport = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPreferredEP1OptVport.setStatus('current')
circuitPreferredEP2OptSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPreferredEP2OptSlot.setStatus('current')
circuitPreferredEP2OptPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPreferredEP2OptPort.setStatus('current')
circuitPreferredEP2OptVport = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPreferredEP2OptVport.setStatus('current')
circuitUseAlternateRing = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitUseAlternateRing.setStatus('current')
circuitInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInFrames.setStatus('current')
circuitInDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInDEFrames.setStatus('current')
circuitInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInOctets.setStatus('current')
circuitInDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInDEOctets.setStatus('current')
circuitInCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInCLP0Cells.setStatus('current')
circuitInCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInCLP1Cells.setStatus('current')
circuitInFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInFramesDiscard.setStatus('current')
circuitInDEFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInDEFramesDiscard.setStatus('current')
circuitInOctetsDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInOctetsDiscard.setStatus('current')
circuitInDEOctetsDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInDEOctetsDiscard.setStatus('current')
circuitInCLP0CellsDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInCLP0CellsDiscard.setStatus('current')
circuitInCLP1CellsDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInCLP1CellsDiscard.setStatus('current')
circuitInFramesTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInFramesTagged.setStatus('current')
circuitInOctetsTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInOctetsTagged.setStatus('current')
circuitInCLP0CellsTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitInCLP0CellsTagged.setStatus('current')
circuitOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitOutFrames.setStatus('current')
circuitOutDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitOutDEFrames.setStatus('current')
circuitOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitOutOctets.setStatus('current')
circuitOutDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitOutDEOctets.setStatus('current')
circuitOutCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitOutCLP0Cells.setStatus('current')
circuitOutCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 6, 8, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitOutCLP1Cells.setStatus('current')
circuitInactive = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,24)).setObjects(("CIRCUIT-MIB", "circuitReasonText"))
circuitActive = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,25)).setObjects(("CIRCUIT-MIB", "circuitReasonText"))
circuitLoadBalancing = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,26)).setObjects(("CIRCUIT-MIB", "circuitReasonText"))
mibBuilder.exportSymbols("CIRCUIT-MIB", circuitPreferredEP2OptPort=circuitPreferredEP2OptPort, circuitFailLocSlot1=circuitFailLocSlot1, circuitBwdTDType=circuitBwdTDType, circuitEndPoint1Protocol=circuitEndPoint1Protocol, circuitEndPoint2Protocol=circuitEndPoint2Protocol, circuitPreferredEP1OptVport=circuitPreferredEP1OptVport, circuitBwdTDParam4=circuitBwdTDParam4, circuitInFrames=circuitInFrames, circuitInCLP0CellsTagged=circuitInCLP0CellsTagged, PYSNMP_MODULE_ID=circuitMIB, circuitFailLocSlot2=circuitFailLocSlot2, circuitInDEOctetsDiscard=circuitInDEOctetsDiscard, circuitInOctetsTagged=circuitInOctetsTagged, circuitInCLP0Cells=circuitInCLP0Cells, circuitFailLocInterfaceNum2=circuitFailLocInterfaceNum2, circuitPreferredEP2OptSlot=circuitPreferredEP2OptSlot, circuitLoadBalanceNumPerInterval=circuitLoadBalanceNumPerInterval, circuitInOctetsDiscard=circuitInOctetsDiscard, circuitEventNumPerInterval=circuitEventNumPerInterval, circuitOperState=circuitOperState, circuitMIB=circuitMIB, circuitSetupPriority=circuitSetupPriority, circuitFwdTDParam4=circuitFwdTDParam4, circuitTable=circuitTable, circuitFwdTDParam1=circuitFwdTDParam1, circuitEventInterval=circuitEventInterval, circuitID=circuitID, circuitTimeSinceStatusChange=circuitTimeSinceStatusChange, circuitInFramesDiscard=circuitInFramesDiscard, circuitClassOfService=circuitClassOfService, circuitDestDescString=circuitDestDescString, circuitBwdTDParam3=circuitBwdTDParam3, circuitInDEFrames=circuitInDEFrames, circuitInCLP0CellsDiscard=circuitInCLP0CellsDiscard, circuitDestIpAddr=circuitDestIpAddr, circuitHoldPriority=circuitHoldPriority, circuitSrcInterfaceNum=circuitSrcInterfaceNum, circuitOutCLP0Cells=circuitOutCLP0Cells, circuitOutFrames=circuitOutFrames, circuitOutCLP1Cells=circuitOutCLP1Cells, circuitSrcIpAddr=circuitSrcIpAddr, circuitInDEFramesDiscard=circuitInDEFramesDiscard, circuitInFramesTagged=circuitInFramesTagged, circuitEntry=circuitEntry, circuitFwdTDParam3=circuitFwdTDParam3, circuitUseAlternateRing=circuitUseAlternateRing, circuitInOctets=circuitInOctets, circuitReasonText=circuitReasonText, circuitIsRedundancyReqd=circuitIsRedundancyReqd, circuitFailLocConnectionID1=circuitFailLocConnectionID1, circuitSrcDescString=circuitSrcDescString, circuitOldIpAddrToSwap=circuitOldIpAddrToSwap, circuitInCLP1CellsDiscard=circuitInCLP1CellsDiscard, circuitBwdTDParam1=circuitBwdTDParam1, circuitLoadBalanceInterval=circuitLoadBalanceInterval, circuitOutOctets=circuitOutOctets, circuitFailLocPort2=circuitFailLocPort2, circuitDestInterfaceNum=circuitDestInterfaceNum, circuitInactive=circuitInactive, circuitNewIpAddrToSwap=circuitNewIpAddrToSwap, circuitFailLocPort1=circuitFailLocPort1, circuitFailLocInterfaceNum1=circuitFailLocInterfaceNum1, circuitFwdTDParam2=circuitFwdTDParam2, circuitPreferredEP1OptSlot=circuitPreferredEP1OptSlot, circuitInCLP1Cells=circuitInCLP1Cells, circuitActive=circuitActive, circuitSrcConnectionID=circuitSrcConnectionID, circuitDestConnectionID=circuitDestConnectionID, circuitPreferredEP2OptVport=circuitPreferredEP2OptVport, circuitFailLocConnectionID2=circuitFailLocConnectionID2, circuitFailLocIpAddr=circuitFailLocIpAddr, circuitBwdTDParam2=circuitBwdTDParam2, circuitOutDEFrames=circuitOutDEFrames, circuitPreferredEP1OptPort=circuitPreferredEP1OptPort, circuitFwdTDType=circuitFwdTDType, circuitName=circuitName, circuitAdminState=circuitAdminState, circuitInDEOctets=circuitInDEOctets, circuitLoadBalancing=circuitLoadBalancing, circuitOutDEOctets=circuitOutDEOctets, circuitRowStatus=circuitRowStatus)
