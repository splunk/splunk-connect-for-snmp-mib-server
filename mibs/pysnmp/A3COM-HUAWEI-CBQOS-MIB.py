#
# PySNMP MIB module A3COM-HUAWEI-CBQOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-CBQOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:49:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
hwQoS, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "hwQoS")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, TimeTicks, Integer32, ModuleIdentity, NotificationType, Gauge32, Bits, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "Integer32", "ModuleIdentity", "NotificationType", "Gauge32", "Bits", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "IpAddress", "iso")
TextualConvention, RowStatus, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "MacAddress")
hwCBQoSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1))
if mibBuilder.loadTexts: hwCBQoSMIB.setLastUpdated('200404100000Z')
if mibBuilder.loadTexts: hwCBQoSMIB.setOrganization('Huawei Technologies co.,Ltd.')
class MatchRuleType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 25))
    namedValues = NamedValues(("typeAny", 1), ("typeAcl", 2), ("typeRtpPort", 3), ("typeProtocol", 4), ("typeIpPrec", 5), ("typeDscp", 6), ("typeVlan8021p", 7), ("typeMplsExp", 8), ("typeSourceMac", 9), ("typeDestinationMac", 10), ("typeClassifier", 11), ("typeInboundInterface", 12), ("typeMacGroup", 13), ("typeMatchDe", 16), ("typeMatchClp", 17), ("typeOutboundInterface", 25))

class CarAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("pass", 1), ("discard", 2), ("remarkIpPrec", 3), ("remarkDscp", 4), ("remarkMplsExp", 5), ("remark", 6))

class RemarkType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("typeIpPrec", 1), ("typeDscp", 2), ("typeMplsExp", 3), ("typeVlan8021p", 4), ("typeAtmClp", 5), ("typeFrDe", 6))

class WredType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("typeIpPrecbased", 1), ("typeDscpbased", 2))

class QueueType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ef", 1), ("af", 2), ("wfq", 3))

class QueueBandwidthUnit(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))
    namedValues = NamedValues(("unitUnavailable", -1), ("unitAbsolute", 1), ("unitPercent", 2), ("unitRemainPercent", 3))

class LrCirUnit(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("absoluteUnitBps", 1), ("percentUnit", 2))

class DirectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

hwCBQoSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1))
hwCBQoSClassifierObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1))
hwCBQoSClassifierIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierIndexNext.setStatus('current')
hwCBQoSClassifierCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2), )
if mibBuilder.loadTexts: hwCBQoSClassifierCfgInfoTable.setStatus('current')
hwCBQoSClassifierCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSClassifierIndex"))
if mibBuilder.loadTexts: hwCBQoSClassifierCfgInfoEntry.setStatus('current')
hwCBQoSClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSClassifierIndex.setStatus('current')
hwCBQoSClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierName.setStatus('current')
hwCBQoSClassifierRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierRuleCount.setStatus('current')
hwCBQoSClassifierOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("and", 1), ("or", 2))).clone('and')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierOperator.setStatus('current')
hwCBQoSClassifierLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("unavailable", -1), ("l2", 1), ("l3", 2), ("both", 3))).clone('l3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierLayer.setStatus('current')
hwCBQoSClassifierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierRowStatus.setStatus('current')
hwCBQoSMatchRuleCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3), )
if mibBuilder.loadTexts: hwCBQoSMatchRuleCfgInfoTable.setStatus('current')
hwCBQoSMatchRuleCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSClassifierIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSMatchRuleIndex"))
if mibBuilder.loadTexts: hwCBQoSMatchRuleCfgInfoEntry.setStatus('current')
hwCBQoSMatchRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSMatchRuleIndex.setStatus('current')
hwCBQoSMatchRuleIfNot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match", 1), ("match-Not", 2))).clone('match')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleIfNot.setStatus('current')
hwCBQoSMatchRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 3), MatchRuleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleType.setStatus('current')
hwCBQoSMatchRuleStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleStringValue.setStatus('current')
hwCBQoSMatchRuleIntValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleIntValue1.setStatus('current')
hwCBQoSMatchRuleIntValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleIntValue2.setStatus('current')
hwCBQoSMatchRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleRowStatus.setStatus('current')
hwCBQoSBehaviorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2))
hwCBQoSBehaviorIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSBehaviorIndexNext.setStatus('current')
hwCBQoSBehaviorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hwCBQoSBehaviorCfgInfoTable.setStatus('current')
hwCBQoSBehaviorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSBehaviorCfgInfoEntry.setStatus('current')
hwCBQoSBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSBehaviorIndex.setStatus('current')
hwCBQoSBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSBehaviorName.setStatus('current')
hwCBQoSBehaviorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSBehaviorRowStatus.setStatus('current')
hwCBQoSCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3), )
if mibBuilder.loadTexts: hwCBQoSCarCfgInfoTable.setStatus('current')
hwCBQoSCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSCarCfgInfoEntry.setStatus('current')
hwCBQoSCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarCir.setStatus('current')
hwCBQoSCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 19375000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarCbs.setStatus('current')
hwCBQoSCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 19375000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarEbs.setStatus('current')
hwCBQoSCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(100, 10000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarPir.setStatus('current')
hwCBQoSCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(64, 4000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarPbs.setStatus('current')
hwCBQoSCarGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 6), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarGreenAction.setStatus('current')
hwCBQoSCarGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarGreenRemarkValue.setStatus('current')
hwCBQoSCarYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unavailable", -1), ("pass", 1), ("discard", 2), ("remarkIpPrec", 3), ("remarkDscp", 4), ("remarkMplsExp", 5), ("remark", 6))).clone('remark')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarYellowAction.setStatus('current')
hwCBQoSCarRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 9), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarRedAction.setStatus('current')
hwCBQoSCarRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarRedRemarkValue.setStatus('current')
hwCBQoSCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarRowStatus.setStatus('current')
hwCBQoSGtsCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4), )
if mibBuilder.loadTexts: hwCBQoSGtsCfgInfoTable.setStatus('current')
hwCBQoSGtsCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSGtsCfgInfoEntry.setStatus('current')
hwCBQoSGtsCir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsCir.setStatus('current')
hwCBQoSGtsCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15000, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsCbs.setStatus('current')
hwCBQoSGtsEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsEbs.setStatus('current')
hwCBQoSGtsQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsQueueLength.setStatus('current')
hwCBQoSGtsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsRowStatus.setStatus('current')
hwCBQoSRemarkCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 5), )
if mibBuilder.loadTexts: hwCBQoSRemarkCfgInfoTable.setStatus('current')
hwCBQoSRemarkCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSRemarkType"))
if mibBuilder.loadTexts: hwCBQoSRemarkCfgInfoEntry.setStatus('current')
hwCBQoSRemarkType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 5, 1, 1), RemarkType())
if mibBuilder.loadTexts: hwCBQoSRemarkType.setStatus('current')
hwCBQoSRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRemarkValue.setStatus('current')
hwCBQoSRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRemarkRowStatus.setStatus('current')
hwCBQoSQueueCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6), )
if mibBuilder.loadTexts: hwCBQoSQueueCfgInfoTable.setStatus('current')
hwCBQoSQueueCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSQueueCfgInfoEntry.setStatus('current')
hwCBQoSQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 1), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueType.setStatus('current')
hwCBQoSQueueDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("typeUnavailable", -1), ("typeTailDrop", 1), ("typeWred", 2))).clone('typeTailDrop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueDropType.setStatus('current')
hwCBQoSQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 512), )).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueLength.setStatus('current')
hwCBQoSQueueBandwidthUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 4), QueueBandwidthUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueBandwidthUnit.setStatus('current')
hwCBQoSQueueBandwidthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueBandwidthValue.setStatus('current')
hwCBQoSQueueCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(32, 2000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueCbs.setStatus('current')
hwCBQoSQueueQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("unavailable", -1), ("a16", 16), ("a32", 32), ("a64", 64), ("a128", 128), ("a256", 256), ("a512", 512), ("a1024", 1024), ("a2048", 2048), ("a4096", 4096))).clone('a256')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueQueueNumber.setStatus('current')
hwCBQoSQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueRowStatus.setStatus('current')
hwCBQoSQueueCbsRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(25, 500), )).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueCbsRatio.setStatus('current')
hwCBQoSWredCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 7), )
if mibBuilder.loadTexts: hwCBQoSWredCfgInfoTable.setStatus('current')
hwCBQoSWredCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSWredCfgInfoEntry.setStatus('current')
hwCBQoSWredType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 7, 1, 1), WredType().clone('typeIpPrecbased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredType.setStatus('current')
hwCBQoSWredWeightConst = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredWeightConst.setStatus('current')
hwCBQoSWredClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8), )
if mibBuilder.loadTexts: hwCBQoSWredClassCfgInfoTable.setStatus('current')
hwCBQoSWredClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSWredClassCfgInfoEntry.setStatus('current')
hwCBQoSWredClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hwCBQoSWredClassValue.setStatus('current')
hwCBQoSWredClassLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredClassLowLimit.setStatus('current')
hwCBQoSWredClassHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredClassHighLimit.setStatus('current')
hwCBQoSWredClassDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredClassDiscardProb.setStatus('current')
hwCBQoSPolicyRouteCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 9), )
if mibBuilder.loadTexts: hwCBQoSPolicyRouteCfgInfoTable.setStatus('current')
hwCBQoSPolicyRouteCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 9, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSPolicyRouteCfgInfoEntry.setStatus('current')
hwCBQoSPolicyRouteNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 9, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyRouteNexthop.setStatus('current')
hwCBQoSPolicyRouteBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backup", 1), ("notbackup", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyRouteBackup.setStatus('current')
hwCBQoSPolicyRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyRouteRowStatus.setStatus('current')
hwCBQoSNatCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10), )
if mibBuilder.loadTexts: hwCBQoSNatCfgInfoTable.setStatus('current')
hwCBQoSNatCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSNatCfgInfoEntry.setStatus('current')
hwCBQoSNatMainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatMainNumber.setStatus('current')
hwCBQoSNatBackupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatBackupNumber.setStatus('current')
hwCBQoSNatServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatServiceClass.setStatus('current')
hwCBQoSNatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatRowStatus.setStatus('current')
hwCBQoSFirewallCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 11), )
if mibBuilder.loadTexts: hwCBQoSFirewallCfgInfoTable.setStatus('current')
hwCBQoSFirewallCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 11, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSFirewallCfgInfoEntry.setStatus('current')
hwCBQoSFirewallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFirewallAction.setStatus('current')
hwCBQoSFirewallRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFirewallRowStatus.setStatus('current')
hwCBQoSSamplingCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 12), )
if mibBuilder.loadTexts: hwCBQoSSamplingCfgInfoTable.setStatus('current')
hwCBQoSSamplingCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 12, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSSamplingCfgInfoEntry.setStatus('current')
hwCBQoSSamplingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSamplingNum.setStatus('current')
hwCBQoSSamplingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSamplingRowStatus.setStatus('current')
hwCBQoSLrCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13), )
if mibBuilder.loadTexts: hwCBQoSLrCfgInfoTable.setStatus('current')
hwCBQoSLrCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSLrCfgInfoEntry.setStatus('current')
hwCBQoSLrUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1, 1), LrCirUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrUnit.setStatus('current')
hwCBQoSLrCir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrCir.setStatus('current')
hwCBQoSLrCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 1000000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrCbs.setStatus('current')
hwCBQoSLrEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrEbs.setStatus('current')
hwCBQoSLrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrRowStatus.setStatus('current')
hwCBQoSNestPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 14), )
if mibBuilder.loadTexts: hwCBQoSNestPolicyCfgInfoTable.setStatus('current')
hwCBQoSNestPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 14, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSNestPolicyCfgInfoEntry.setStatus('current')
hwCBQoSNestPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNestPolicyName.setStatus('current')
hwCBQoSNestPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNestPolicyRowStatus.setStatus('current')
hwCBQoSPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3))
hwCBQoSPolicyIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyIndexNext.setStatus('current')
hwCBQoSPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2), )
if mibBuilder.loadTexts: hwCBQoSPolicyCfgInfoTable.setStatus('current')
hwCBQoSPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyIndex"))
if mibBuilder.loadTexts: hwCBQoSPolicyCfgInfoEntry.setStatus('current')
hwCBQoSPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSPolicyIndex.setStatus('current')
hwCBQoSPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyName.setStatus('current')
hwCBQoSPolicyClassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassCount.setStatus('current')
hwCBQoSPolicyConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unavailable", -1), ("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyConfigMode.setStatus('current')
hwCBQoSPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyRowStatus.setStatus('current')
hwCBQoSPolicyClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3), )
if mibBuilder.loadTexts: hwCBQoSPolicyClassCfgInfoTable.setStatus('current')
hwCBQoSPolicyClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSPolicyClassCfgInfoEntry.setStatus('current')
hwCBQoSPolicyClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSPolicyClassIndex.setStatus('current')
hwCBQoSPolicyClassClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassClassifierIndex.setStatus('current')
hwCBQoSPolicyClassClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassClassifierName.setStatus('current')
hwCBQoSPolicyClassBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassBehaviorIndex.setStatus('current')
hwCBQoSPolicyClassBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassBehaviorName.setStatus('current')
hwCBQoSPolicyClassPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16383), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassPrecedence.setStatus('current')
hwCBQoSPolicyClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassRowStatus.setStatus('current')
hwCBQoSApplyPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4))
hwCBQoSIfApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1), )
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyTable.setStatus('current')
hwCBQoSIfApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyEntry.setStatus('current')
hwCBQoSIfApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyIfIndex.setStatus('current')
hwCBQoSIfApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1, 2), DirectionType())
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyDirection.setStatus('current')
hwCBQoSIfApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyName.setStatus('current')
hwCBQoSIfApplyPolicyEnableDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unavailable", -1), ("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyEnableDynamic.setStatus('current')
hwCBQoSIfApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyRowStatus.setStatus('current')
hwCBQoSAtmPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyTable.setStatus('current')
hwCBQoSAtmPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyEntry.setStatus('current')
hwCBQoSAtmPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyIfIndex.setStatus('current')
hwCBQoSAtmPvcApplyPolicyVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyVPI.setStatus('current')
hwCBQoSAtmPvcApplyPolicyVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyVCI.setStatus('current')
hwCBQoSAtmPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 4), DirectionType())
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyDirection.setStatus('current')
hwCBQoSAtmPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyName.setStatus('current')
hwCBQoSAtmPvcApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyRowStatus.setStatus('current')
hwCBQoSIfVlanApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3), )
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyTable.setStatus('current')
hwCBQoSIfVlanApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyEntry.setStatus('current')
hwCBQoSIfVlanApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyIfIndex.setStatus('current')
hwCBQoSIfVlanApplyPolicyVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyVlanid.setStatus('current')
hwCBQoSIfVlanApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1, 3), DirectionType())
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyDirection.setStatus('current')
hwCBQoSIfVlanApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyName.setStatus('current')
hwCBQoSIfVlanApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyRowStatus.setStatus('current')
hwCBQoSFrClassApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4), )
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyTable.setStatus('current')
hwCBQoSFrClassApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyFrClassName"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyEntry.setStatus('current')
hwCBQoSFrClassApplyPolicyFrClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyFrClassName.setStatus('current')
hwCBQoSFrClassApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4, 1, 2), DirectionType())
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyDirection.setStatus('current')
hwCBQoSFrClassApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyName.setStatus('current')
hwCBQoSFrClassApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyRowStatus.setStatus('current')
hwCBQoSFrPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5), )
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyTable.setStatus('current')
hwCBQoSFrPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyEntry.setStatus('current')
hwCBQoSFrPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyIfIndex.setStatus('current')
hwCBQoSFrPvcApplyPolicyDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyDlciNum.setStatus('current')
hwCBQoSFrPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5, 1, 3), DirectionType())
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyDirection.setStatus('current')
hwCBQoSFrPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyName.setStatus('current')
hwCBQoSApplyPolicyStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5))
hwCBQoSIfStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1))
hwCBQoSIfCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1), )
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoTable.setStatus('current')
hwCBQoSIfCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"))
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoEntry.setStatus('current')
hwCBQoSIfCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqQueueSize.setStatus('current')
hwCBQoSIfCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqDiscard.setStatus('current')
hwCBQoSIfCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqEfQueueSize.setStatus('current')
hwCBQoSIfCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqAfQueueSize.setStatus('current')
hwCBQoSIfCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeQueueSize.setStatus('current')
hwCBQoSIfCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeActiveQueueNum.setStatus('current')
hwCBQoSIfCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeMaxActiveQueueNum.setStatus('current')
hwCBQoSIfCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeTotalQueueNum.setStatus('current')
hwCBQoSIfCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqAfAllocatedQueueNum.setStatus('current')
hwCBQoSIfClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoTable.setStatus('current')
hwCBQoSIfClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoEntry.setStatus('current')
hwCBQoSIfClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfClassMatchedPackets.setStatus('current')
hwCBQoSIfClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfClassMatchedBytes.setStatus('current')
hwCBQoSIfClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfClassAverageRate.setStatus('current')
hwCBQoSIfCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3), )
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoTable.setStatus('current')
hwCBQoSIfCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoEntry.setStatus('current')
hwCBQoSIfCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPackets.setStatus('current')
hwCBQoSIfCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenBytes.setStatus('current')
hwCBQoSIfCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedPackets.setStatus('current')
hwCBQoSIfCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedBytes.setStatus('current')
hwCBQoSIfGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4), )
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoTable.setStatus('current')
hwCBQoSIfGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoEntry.setStatus('current')
hwCBQoSIfGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsPassedPackets.setStatus('current')
hwCBQoSIfGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsPassedBytes.setStatus('current')
hwCBQoSIfGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDiscardedPackets.setStatus('current')
hwCBQoSIfGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDiscardedBytes.setStatus('current')
hwCBQoSIfGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDelayedPackets.setStatus('current')
hwCBQoSIfGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDelayedBytes.setStatus('current')
hwCBQoSIfGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsQueueSize.setStatus('current')
hwCBQoSIfRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 5), )
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoTable.setStatus('current')
hwCBQoSIfRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoEntry.setStatus('current')
hwCBQoSIfRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfRemarkedPackets.setStatus('current')
hwCBQoSIfQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6), )
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoTable.setStatus('current')
hwCBQoSIfQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoEntry.setStatus('current')
hwCBQoSIfQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedPackets.setStatus('current')
hwCBQoSIfQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedBytes.setStatus('current')
hwCBQoSIfQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedPackets.setStatus('current')
hwCBQoSIfQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedBytes.setStatus('current')
hwCBQoSIfQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedPackets.setStatus('current')
hwCBQoSIfQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedBytes.setStatus('current')
hwCBQoSIfWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 7), )
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoTable.setStatus('current')
hwCBQoSIfWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoEntry.setStatus('current')
hwCBQoSIfWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfWredRandomDiscardedPackets.setStatus('current')
hwCBQoSIfWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfWredTailDiscardedPackets.setStatus('current')
hwCBQoSIfLrRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8), )
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoTable.setStatus('current')
hwCBQoSIfLrRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoEntry.setStatus('current')
hwCBQoSIfLrPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrPassedPackets.setStatus('current')
hwCBQoSIfLrPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrPassedBytes.setStatus('current')
hwCBQoSIfLrDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDiscardedPackets.setStatus('current')
hwCBQoSIfLrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDiscardedBytes.setStatus('current')
hwCBQoSIfLrDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDelayedPackets.setStatus('current')
hwCBQoSIfLrDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDelayedBytes.setStatus('current')
hwCBQoSIfLrQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrQueueSize.setStatus('current')
hwCBQoSAtmPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2))
hwCBQoSAtmPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoTable.setStatus('current')
hwCBQoSAtmPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoEntry.setStatus('current')
hwCBQoSAtmPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqQueueSize.setStatus('current')
hwCBQoSAtmPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqDiscard.setStatus('current')
hwCBQoSAtmPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqEfQueueSize.setStatus('current')
hwCBQoSAtmPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqAfQueueSize.setStatus('current')
hwCBQoSAtmPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeQueueSize.setStatus('current')
hwCBQoSAtmPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeActiveQueueNum.setStatus('current')
hwCBQoSAtmPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeMaxActiveQueueNum.setStatus('current')
hwCBQoSAtmPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeTotalQueueNum.setStatus('current')
hwCBQoSAtmPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqAfAllocatedQueueNum.setStatus('current')
hwCBQoSAtmPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 2), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoTable.setStatus('current')
hwCBQoSAtmPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoEntry.setStatus('current')
hwCBQoSAtmPvcClassMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchPackets.setStatus('current')
hwCBQoSAtmPvcClassMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchBytes.setStatus('current')
hwCBQoSAtmPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassAverageRate.setStatus('current')
hwCBQoSAtmPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoTable.setStatus('current')
hwCBQoSAtmPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoEntry.setStatus('current')
hwCBQoSAtmPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformPackets.setStatus('current')
hwCBQoSAtmPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformBytes.setStatus('current')
hwCBQoSAtmPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedPackets.setStatus('current')
hwCBQoSAtmPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedBytes.setStatus('current')
hwCBQoSAtmPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoTable.setStatus('current')
hwCBQoSAtmPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoEntry.setStatus('current')
hwCBQoSAtmPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsPassedPackets.setStatus('current')
hwCBQoSAtmPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsPassedBytes.setStatus('current')
hwCBQoSAtmPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDiscardedPackets.setStatus('current')
hwCBQoSAtmPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDiscardedBytes.setStatus('current')
hwCBQoSAtmPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDelayedPackets.setStatus('current')
hwCBQoSAtmPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDelayedBytes.setStatus('current')
hwCBQoSAtmPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsQueueSize.setStatus('current')
hwCBQoSAtmPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 5), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoTable.setStatus('current')
hwCBQoSAtmPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoEntry.setStatus('current')
hwCBQoSAtmPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkedPackets.setStatus('current')
hwCBQoSAtmPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoTable.setStatus('current')
hwCBQoSAtmPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoEntry.setStatus('current')
hwCBQoSAtmPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedPackets.setStatus('current')
hwCBQoSAtmPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedBytes.setStatus('current')
hwCBQoSAtmPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedPackets.setStatus('current')
hwCBQoSAtmPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedBytes.setStatus('current')
hwCBQoSAtmPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedPackets.setStatus('current')
hwCBQoSAtmPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedBytes.setStatus('current')
hwCBQoSAtmPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 7), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoTable.setStatus('current')
hwCBQoSAtmPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoEntry.setStatus('current')
hwCBQoSAtmPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRandomDiscardedPackets.setStatus('current')
hwCBQoSAtmPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredTailDiscardedPackets.setStatus('current')
hwCBQoSAtmPvcLrRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoTable.setStatus('current')
hwCBQoSAtmPvcLrRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoEntry.setStatus('current')
hwCBQoSAtmPvcLrPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrPassedPackets.setStatus('current')
hwCBQoSAtmPvcLrPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrPassedBytes.setStatus('current')
hwCBQoSAtmPvcLrDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDiscardedPackets.setStatus('current')
hwCBQoSAtmPvcLrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDiscardedBytes.setStatus('current')
hwCBQoSAtmPvcLrDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDelayedPackets.setStatus('current')
hwCBQoSAtmPvcLrDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDelayedBytes.setStatus('current')
hwCBQoSAtmPvcLrQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrQueueSize.setStatus('current')
hwCBQoSFrPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3))
hwCBQoSFrPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1), )
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoTable.setStatus('current')
hwCBQoSFrPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"))
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoEntry.setStatus('current')
hwCBQoSFrPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqQueueSize.setStatus('current')
hwCBQoSFrPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqDiscard.setStatus('current')
hwCBQoSFrPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqEfQueueSize.setStatus('current')
hwCBQoSFrPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqAfQueueSize.setStatus('current')
hwCBQoSFrPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeQueueSize.setStatus('current')
hwCBQoSFrPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeActiveQueueNum.setStatus('current')
hwCBQoSFrPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeMaxActiveQueueNum.setStatus('current')
hwCBQoSFrPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeTotalQueueNum.setStatus('current')
hwCBQoSFrPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqAfAllocatedQueueNum.setStatus('current')
hwCBQoSFrPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 2), )
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoTable.setStatus('current')
hwCBQoSFrPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoEntry.setStatus('current')
hwCBQoSFrPvcClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchedPackets.setStatus('current')
hwCBQoSFrPvcClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchedBytes.setStatus('current')
hwCBQoSFrPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcClassAverageRate.setStatus('current')
hwCBQoSFrPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3), )
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoTable.setStatus('current')
hwCBQoSFrPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoEntry.setStatus('current')
hwCBQoSFrPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformPackets.setStatus('current')
hwCBQoSFrPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformBytes.setStatus('current')
hwCBQoSFrPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedPackets.setStatus('current')
hwCBQoSFrPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedBytes.setStatus('current')
hwCBQoSFrPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4), )
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoTable.setStatus('current')
hwCBQoSFrPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoEntry.setStatus('current')
hwCBQoSFrPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsPassedPackets.setStatus('current')
hwCBQoSFrPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsPassedBytes.setStatus('current')
hwCBQoSFrPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDiscardedPackets.setStatus('current')
hwCBQoSFrPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDiscardedBytes.setStatus('current')
hwCBQoSFrPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDelayedPackets.setStatus('current')
hwCBQoSFrPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDelayedBytes.setStatus('current')
hwCBQoSFrPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsQueueSize.setStatus('current')
hwCBQoSFrPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 5), )
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoTable.setStatus('current')
hwCBQoSFrPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoEntry.setStatus('current')
hwCBQoSFrPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkedPackets.setStatus('current')
hwCBQoSFrPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6), )
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoTable.setStatus('current')
hwCBQoSFrPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoEntry.setStatus('current')
hwCBQoSFrPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedPackets.setStatus('current')
hwCBQoSFrPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedBytes.setStatus('current')
hwCBQoSFrPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedPackets.setStatus('current')
hwCBQoSFrPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedBytes.setStatus('current')
hwCBQoSFrPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedPackets.setStatus('current')
hwCBQoSFrPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedBytes.setStatus('current')
hwCBQoSFrPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 7), )
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoTable.setStatus('current')
hwCBQoSFrPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoEntry.setStatus('current')
hwCBQoSFrPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRandomDiscardedPackets.setStatus('current')
hwCBQoSFrPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcWredTailDiscardedPackets.setStatus('current')
hwCBQoSFrPvcLrRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8), )
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoTable.setStatus('current')
hwCBQoSFrPvcLrRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoEntry.setStatus('current')
hwCBQoSFrPvcLrPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrPassedPackets.setStatus('current')
hwCBQoSFrPvcLrPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrPassedBytes.setStatus('current')
hwCBQoSFrPvcLrDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDiscardedPackets.setStatus('current')
hwCBQoSFrPvcLrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDiscardedBytes.setStatus('current')
hwCBQoSFrPvcLrDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDelayedPackets.setStatus('current')
hwCBQoSFrPvcLrDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDelayedBytes.setStatus('current')
hwCBQoSFrPvcLrQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrQueueSize.setStatus('current')
hwCBQoSIfVlanStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 4))
hwCBQoSIfVlanClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 4, 1), )
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoTable.setStatus('current')
hwCBQoSIfVlanClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 4, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoEntry.setStatus('current')
hwCBQoSIfVlanClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchedPackets.setStatus('current')
mibBuilder.exportSymbols("A3COM-HUAWEI-CBQOS-MIB", hwCBQoSQueueBandwidthUnit=hwCBQoSQueueBandwidthUnit, hwCBQoSFrPvcLrDelayedPackets=hwCBQoSFrPvcLrDelayedPackets, hwCBQoSSamplingNum=hwCBQoSSamplingNum, hwCBQoSMIB=hwCBQoSMIB, hwCBQoSBehaviorIndexNext=hwCBQoSBehaviorIndexNext, hwCBQoSIfCbqDiscard=hwCBQoSIfCbqDiscard, hwCBQoSFrPvcClassMatchedBytes=hwCBQoSFrPvcClassMatchedBytes, hwCBQoSGtsRowStatus=hwCBQoSGtsRowStatus, hwCBQoSAtmPvcLrDelayedPackets=hwCBQoSAtmPvcLrDelayedPackets, hwCBQoSIfQueueMatchedBytes=hwCBQoSIfQueueMatchedBytes, hwCBQoSAtmPvcApplyPolicyDirection=hwCBQoSAtmPvcApplyPolicyDirection, hwCBQoSIfCbqAfQueueSize=hwCBQoSIfCbqAfQueueSize, hwCBQoSAtmPvcGtsDiscardedBytes=hwCBQoSAtmPvcGtsDiscardedBytes, hwCBQoSIfGtsDelayedBytes=hwCBQoSIfGtsDelayedBytes, hwCBQoSCarCbs=hwCBQoSCarCbs, hwCBQoSIfVlanApplyPolicyDirection=hwCBQoSIfVlanApplyPolicyDirection, hwCBQoSFrPvcGtsQueueSize=hwCBQoSFrPvcGtsQueueSize, hwCBQoSClassifierObjects=hwCBQoSClassifierObjects, hwCBQoSWredClassCfgInfoTable=hwCBQoSWredClassCfgInfoTable, hwCBQoSIfGtsDiscardedBytes=hwCBQoSIfGtsDiscardedBytes, hwCBQoSPolicyClassCfgInfoEntry=hwCBQoSPolicyClassCfgInfoEntry, hwCBQoSFrPvcGtsPassedPackets=hwCBQoSFrPvcGtsPassedPackets, hwCBQoSIfCbqQueueSize=hwCBQoSIfCbqQueueSize, hwCBQoSFrPvcWredRunInfoTable=hwCBQoSFrPvcWredRunInfoTable, hwCBQoSIfRemarkRunInfoEntry=hwCBQoSIfRemarkRunInfoEntry, hwCBQoSAtmPvcCbqDiscard=hwCBQoSAtmPvcCbqDiscard, hwCBQoSFrClassApplyPolicyDirection=hwCBQoSFrClassApplyPolicyDirection, hwCBQoSCarCfgInfoTable=hwCBQoSCarCfgInfoTable, hwCBQoSFrPvcWredRunInfoEntry=hwCBQoSFrPvcWredRunInfoEntry, hwCBQoSIfQueueRunInfoEntry=hwCBQoSIfQueueRunInfoEntry, hwCBQoSIfVlanApplyPolicyIfIndex=hwCBQoSIfVlanApplyPolicyIfIndex, hwCBQoSAtmPvcClassAverageRate=hwCBQoSAtmPvcClassAverageRate, hwCBQoSFrPvcGtsRunInfoTable=hwCBQoSFrPvcGtsRunInfoTable, hwCBQoSFrPvcQueueEnqueuedBytes=hwCBQoSFrPvcQueueEnqueuedBytes, PYSNMP_MODULE_ID=hwCBQoSMIB, hwCBQoSSamplingCfgInfoEntry=hwCBQoSSamplingCfgInfoEntry, hwCBQoSAtmPvcRemarkRunInfoEntry=hwCBQoSAtmPvcRemarkRunInfoEntry, hwCBQoSAtmPvcQueueMatchedBytes=hwCBQoSAtmPvcQueueMatchedBytes, hwCBQoSApplyPolicyStaticsObjects=hwCBQoSApplyPolicyStaticsObjects, hwCBQoSAtmPvcLrRunInfoEntry=hwCBQoSAtmPvcLrRunInfoEntry, QueueType=QueueType, hwCBQoSMatchRuleIfNot=hwCBQoSMatchRuleIfNot, hwCBQoSMatchRuleStringValue=hwCBQoSMatchRuleStringValue, hwCBQoSGtsCir=hwCBQoSGtsCir, hwCBQoSIfGtsRunInfoTable=hwCBQoSIfGtsRunInfoTable, hwCBQoSFrPvcWredTailDiscardedPackets=hwCBQoSFrPvcWredTailDiscardedPackets, hwCBQoSIfGtsQueueSize=hwCBQoSIfGtsQueueSize, hwCBQoSCarRedRemarkValue=hwCBQoSCarRedRemarkValue, hwCBQoSFrPvcRemarkRunInfoEntry=hwCBQoSFrPvcRemarkRunInfoEntry, hwCBQoSFrPvcCbqDiscard=hwCBQoSFrPvcCbqDiscard, hwCBQoSFrPvcApplyPolicyDlciNum=hwCBQoSFrPvcApplyPolicyDlciNum, hwCBQoSAtmPvcQueueMatchedPackets=hwCBQoSAtmPvcQueueMatchedPackets, hwCBQoSFrPvcApplyPolicyTable=hwCBQoSFrPvcApplyPolicyTable, hwCBQoSIfApplyPolicyRowStatus=hwCBQoSIfApplyPolicyRowStatus, hwCBQoSCarCfgInfoEntry=hwCBQoSCarCfgInfoEntry, hwCBQoSPolicyClassBehaviorName=hwCBQoSPolicyClassBehaviorName, hwCBQoSFrPvcClassMatchRunInfoTable=hwCBQoSFrPvcClassMatchRunInfoTable, hwCBQoSBehaviorCfgInfoTable=hwCBQoSBehaviorCfgInfoTable, hwCBQoSAtmPvcClassMatchRunInfoEntry=hwCBQoSAtmPvcClassMatchRunInfoEntry, hwCBQoSAtmPvcQueueRunInfoEntry=hwCBQoSAtmPvcQueueRunInfoEntry, hwCBQoSFrPvcCbqBeQueueSize=hwCBQoSFrPvcCbqBeQueueSize, hwCBQoSIfClassMatchedBytes=hwCBQoSIfClassMatchedBytes, hwCBQoSIfCbqAfAllocatedQueueNum=hwCBQoSIfCbqAfAllocatedQueueNum, hwCBQoSIfApplyPolicyDirection=hwCBQoSIfApplyPolicyDirection, hwCBQoSLrUnit=hwCBQoSLrUnit, hwCBQoSIfVlanStaticsObjects=hwCBQoSIfVlanStaticsObjects, hwCBQoSIfLrDiscardedBytes=hwCBQoSIfLrDiscardedBytes, hwCBQoSIfClassMatchRunInfoTable=hwCBQoSIfClassMatchRunInfoTable, hwCBQoSIfApplyPolicyTable=hwCBQoSIfApplyPolicyTable, hwCBQoSApplyPolicyObjects=hwCBQoSApplyPolicyObjects, hwCBQoSSamplingRowStatus=hwCBQoSSamplingRowStatus, hwCBQoSFrPvcGtsRunInfoEntry=hwCBQoSFrPvcGtsRunInfoEntry, hwCBQoSRemarkRowStatus=hwCBQoSRemarkRowStatus, hwCBQoSBehaviorObjects=hwCBQoSBehaviorObjects, hwCBQoSAtmPvcWredRunInfoTable=hwCBQoSAtmPvcWredRunInfoTable, hwCBQoSAtmPvcCarRunInfoEntry=hwCBQoSAtmPvcCarRunInfoEntry, hwCBQoSFrPvcGtsDiscardedBytes=hwCBQoSFrPvcGtsDiscardedBytes, hwCBQoSFrClassApplyPolicyRowStatus=hwCBQoSFrClassApplyPolicyRowStatus, hwCBQoSFrPvcQueueMatchedPackets=hwCBQoSFrPvcQueueMatchedPackets, hwCBQoSAtmPvcCbqBeQueueSize=hwCBQoSAtmPvcCbqBeQueueSize, hwCBQoSAtmPvcCarConformBytes=hwCBQoSAtmPvcCarConformBytes, hwCBQoSLrCbs=hwCBQoSLrCbs, hwCBQoSRemarkType=hwCBQoSRemarkType, hwCBQoSAtmPvcLrRunInfoTable=hwCBQoSAtmPvcLrRunInfoTable, hwCBQoSFrPvcCbqEfQueueSize=hwCBQoSFrPvcCbqEfQueueSize, hwCBQoSFrPvcLrRunInfoTable=hwCBQoSFrPvcLrRunInfoTable, hwCBQoSIfGtsDiscardedPackets=hwCBQoSIfGtsDiscardedPackets, hwCBQoSCarEbs=hwCBQoSCarEbs, hwCBQoSAtmPvcQueueDiscardedPackets=hwCBQoSAtmPvcQueueDiscardedPackets, hwCBQoSAtmPvcGtsQueueSize=hwCBQoSAtmPvcGtsQueueSize, hwCBQoSQueueCbs=hwCBQoSQueueCbs, hwCBQoSClassifierName=hwCBQoSClassifierName, hwCBQoSPolicyName=hwCBQoSPolicyName, hwCBQoSIfApplyPolicyName=hwCBQoSIfApplyPolicyName, hwCBQoSIfCbqEfQueueSize=hwCBQoSIfCbqEfQueueSize, hwCBQoSQueueLength=hwCBQoSQueueLength, hwCBQoSClassifierIndexNext=hwCBQoSClassifierIndexNext, hwCBQoSAtmPvcCarConformPackets=hwCBQoSAtmPvcCarConformPackets, hwCBQoSAtmPvcLrPassedBytes=hwCBQoSAtmPvcLrPassedBytes, hwCBQoSNestPolicyCfgInfoTable=hwCBQoSNestPolicyCfgInfoTable, hwCBQoSPolicyRouteCfgInfoTable=hwCBQoSPolicyRouteCfgInfoTable, hwCBQoSIfQueueEnqueuedBytes=hwCBQoSIfQueueEnqueuedBytes, hwCBQoSIfRemarkRunInfoTable=hwCBQoSIfRemarkRunInfoTable, hwCBQoSMatchRuleIndex=hwCBQoSMatchRuleIndex, hwCBQoSIfRemarkedPackets=hwCBQoSIfRemarkedPackets, hwCBQoSFrPvcQueueRunInfoTable=hwCBQoSFrPvcQueueRunInfoTable, hwCBQoSClassifierIndex=hwCBQoSClassifierIndex, hwCBQoSFrPvcGtsPassedBytes=hwCBQoSFrPvcGtsPassedBytes, hwCBQoSFirewallRowStatus=hwCBQoSFirewallRowStatus, hwCBQoSIfLrQueueSize=hwCBQoSIfLrQueueSize, hwCBQoSIfApplyPolicyEntry=hwCBQoSIfApplyPolicyEntry, hwCBQoSAtmPvcCbqQueueSize=hwCBQoSAtmPvcCbqQueueSize, hwCBQoSIfLrPassedBytes=hwCBQoSIfLrPassedBytes, hwCBQoSWredCfgInfoTable=hwCBQoSWredCfgInfoTable, hwCBQoSFrPvcQueueEnqueuedPackets=hwCBQoSFrPvcQueueEnqueuedPackets, hwCBQoSIfCbqBeMaxActiveQueueNum=hwCBQoSIfCbqBeMaxActiveQueueNum, hwCBQoSAtmPvcCarExceedPackets=hwCBQoSAtmPvcCarExceedPackets, hwCBQoSAtmPvcApplyPolicyIfIndex=hwCBQoSAtmPvcApplyPolicyIfIndex, hwCBQoSLrCir=hwCBQoSLrCir, hwCBQoSIfVlanClassMatchRunInfoEntry=hwCBQoSIfVlanClassMatchRunInfoEntry, hwCBQoSAtmPvcClassMatchRunInfoTable=hwCBQoSAtmPvcClassMatchRunInfoTable, hwCBQoSIfVlanApplyPolicyName=hwCBQoSIfVlanApplyPolicyName, hwCBQoSAtmPvcWredTailDiscardedPackets=hwCBQoSAtmPvcWredTailDiscardedPackets, hwCBQoSPolicyClassCfgInfoTable=hwCBQoSPolicyClassCfgInfoTable, hwCBQoSIfGtsDelayedPackets=hwCBQoSIfGtsDelayedPackets, MatchRuleType=MatchRuleType, hwCBQoSGtsQueueLength=hwCBQoSGtsQueueLength, hwCBQoSPolicyRouteNexthop=hwCBQoSPolicyRouteNexthop, hwCBQoSFrPvcGtsDelayedBytes=hwCBQoSFrPvcGtsDelayedBytes, hwCBQoSFrPvcGtsDelayedPackets=hwCBQoSFrPvcGtsDelayedPackets, hwCBQoSPolicyRouteCfgInfoEntry=hwCBQoSPolicyRouteCfgInfoEntry, hwCBQoSIfWredRunInfoEntry=hwCBQoSIfWredRunInfoEntry, hwCBQoSFrPvcLrPassedBytes=hwCBQoSFrPvcLrPassedBytes, hwCBQoSPolicyIndexNext=hwCBQoSPolicyIndexNext, hwCBQoSAtmPvcCbqEfQueueSize=hwCBQoSAtmPvcCbqEfQueueSize, hwCBQoSAtmPvcStaticsObjects=hwCBQoSAtmPvcStaticsObjects, hwCBQoSQueueCfgInfoEntry=hwCBQoSQueueCfgInfoEntry, hwCBQoSMatchRuleCfgInfoEntry=hwCBQoSMatchRuleCfgInfoEntry, hwCBQoSIfLrRunInfoTable=hwCBQoSIfLrRunInfoTable, hwCBQoSAtmPvcCarRunInfoTable=hwCBQoSAtmPvcCarRunInfoTable, hwCBQoSAtmPvcLrDiscardedPackets=hwCBQoSAtmPvcLrDiscardedPackets, hwCBQoSIfWredRandomDiscardedPackets=hwCBQoSIfWredRandomDiscardedPackets, hwCBQoSAtmPvcLrQueueSize=hwCBQoSAtmPvcLrQueueSize, hwCBQoSIfQueueEnqueuedPackets=hwCBQoSIfQueueEnqueuedPackets, hwCBQoSQueueQueueNumber=hwCBQoSQueueQueueNumber, hwCBQoSAtmPvcRemarkedPackets=hwCBQoSAtmPvcRemarkedPackets, hwCBQoSMatchRuleRowStatus=hwCBQoSMatchRuleRowStatus, hwCBQoSIfLrPassedPackets=hwCBQoSIfLrPassedPackets, hwCBQoSAtmPvcCbqRunInfoEntry=hwCBQoSAtmPvcCbqRunInfoEntry, hwCBQoSFrPvcLrDelayedBytes=hwCBQoSFrPvcLrDelayedBytes, hwCBQoSCarRowStatus=hwCBQoSCarRowStatus, hwCBQoSAtmPvcGtsDiscardedPackets=hwCBQoSAtmPvcGtsDiscardedPackets, hwCBQoSPolicyClassRowStatus=hwCBQoSPolicyClassRowStatus, hwCBQoSAtmPvcApplyPolicyTable=hwCBQoSAtmPvcApplyPolicyTable, hwCBQoSAtmPvcApplyPolicyVCI=hwCBQoSAtmPvcApplyPolicyVCI, hwCBQoSIfCarGreenBytes=hwCBQoSIfCarGreenBytes, hwCBQoSGtsEbs=hwCBQoSGtsEbs, hwCBQoSFrPvcQueueRunInfoEntry=hwCBQoSFrPvcQueueRunInfoEntry, hwCBQoSAtmPvcLrPassedPackets=hwCBQoSAtmPvcLrPassedPackets, hwCBQoSAtmPvcQueueEnqueuedPackets=hwCBQoSAtmPvcQueueEnqueuedPackets, DirectionType=DirectionType, hwCBQoSMatchRuleType=hwCBQoSMatchRuleType, hwCBQoSQueueRowStatus=hwCBQoSQueueRowStatus, hwCBQoSIfVlanApplyPolicyRowStatus=hwCBQoSIfVlanApplyPolicyRowStatus, hwCBQoSMatchRuleCfgInfoTable=hwCBQoSMatchRuleCfgInfoTable, hwCBQoSIfGtsPassedPackets=hwCBQoSIfGtsPassedPackets, hwCBQoSAtmPvcRemarkRunInfoTable=hwCBQoSAtmPvcRemarkRunInfoTable, hwCBQoSCarGreenRemarkValue=hwCBQoSCarGreenRemarkValue, hwCBQoSFirewallCfgInfoTable=hwCBQoSFirewallCfgInfoTable, hwCBQoSIfGtsRunInfoEntry=hwCBQoSIfGtsRunInfoEntry, hwCBQoSFrPvcCbqRunInfoEntry=hwCBQoSFrPvcCbqRunInfoEntry, hwCBQoSFrPvcCarConformBytes=hwCBQoSFrPvcCarConformBytes, hwCBQoSFrPvcWredRandomDiscardedPackets=hwCBQoSFrPvcWredRandomDiscardedPackets, hwCBQoSPolicyRouteBackup=hwCBQoSPolicyRouteBackup, hwCBQoSLrRowStatus=hwCBQoSLrRowStatus, hwCBQoSFrPvcQueueMatchedBytes=hwCBQoSFrPvcQueueMatchedBytes, hwCBQoSFrPvcCbqAfAllocatedQueueNum=hwCBQoSFrPvcCbqAfAllocatedQueueNum, RemarkType=RemarkType, hwCBQoSIfQueueMatchedPackets=hwCBQoSIfQueueMatchedPackets, hwCBQoSAtmPvcLrDelayedBytes=hwCBQoSAtmPvcLrDelayedBytes, hwCBQoSIfCarRunInfoEntry=hwCBQoSIfCarRunInfoEntry, hwCBQoSClassifierOperator=hwCBQoSClassifierOperator, hwCBQoSFrPvcClassMatchedPackets=hwCBQoSFrPvcClassMatchedPackets, hwCBQoSFrPvcRemarkRunInfoTable=hwCBQoSFrPvcRemarkRunInfoTable, hwCBQoSAtmPvcCbqBeMaxActiveQueueNum=hwCBQoSAtmPvcCbqBeMaxActiveQueueNum, hwCBQoSAtmPvcQueueRunInfoTable=hwCBQoSAtmPvcQueueRunInfoTable, hwCBQoSFrPvcCarExceedBytes=hwCBQoSFrPvcCarExceedBytes, hwCBQoSQueueCfgInfoTable=hwCBQoSQueueCfgInfoTable, hwCBQoSIfLrDelayedBytes=hwCBQoSIfLrDelayedBytes, QueueBandwidthUnit=QueueBandwidthUnit, hwCBQoSIfCbqBeTotalQueueNum=hwCBQoSIfCbqBeTotalQueueNum, hwCBQoSAtmPvcGtsDelayedBytes=hwCBQoSAtmPvcGtsDelayedBytes, hwCBQoSFrPvcClassAverageRate=hwCBQoSFrPvcClassAverageRate, CarAction=CarAction, hwCBQoSFrPvcCbqBeMaxActiveQueueNum=hwCBQoSFrPvcCbqBeMaxActiveQueueNum, hwCBQoSClassifierLayer=hwCBQoSClassifierLayer, hwCBQoSMatchRuleIntValue2=hwCBQoSMatchRuleIntValue2, hwCBQoSIfWredRunInfoTable=hwCBQoSIfWredRunInfoTable, hwCBQoSAtmPvcCarExceedBytes=hwCBQoSAtmPvcCarExceedBytes, hwCBQoSClassifierRowStatus=hwCBQoSClassifierRowStatus, hwCBQoSWredClassCfgInfoEntry=hwCBQoSWredClassCfgInfoEntry, hwCBQoSIfQueueDiscardedBytes=hwCBQoSIfQueueDiscardedBytes, hwCBQoSIfVlanClassMatchRunInfoTable=hwCBQoSIfVlanClassMatchRunInfoTable, hwCBQoSNatMainNumber=hwCBQoSNatMainNumber, hwCBQoSFrPvcCbqQueueSize=hwCBQoSFrPvcCbqQueueSize, hwCBQoSIfWredTailDiscardedPackets=hwCBQoSIfWredTailDiscardedPackets, hwCBQoSIfCbqBeActiveQueueNum=hwCBQoSIfCbqBeActiveQueueNum, hwCBQoSAtmPvcApplyPolicyName=hwCBQoSAtmPvcApplyPolicyName, hwCBQoSRemarkValue=hwCBQoSRemarkValue, hwCBQoSGtsCfgInfoTable=hwCBQoSGtsCfgInfoTable, hwCBQoSMatchRuleIntValue1=hwCBQoSMatchRuleIntValue1, hwCBQoSAtmPvcCbqBeActiveQueueNum=hwCBQoSAtmPvcCbqBeActiveQueueNum, hwCBQoSAtmPvcLrDiscardedBytes=hwCBQoSAtmPvcLrDiscardedBytes, hwCBQoSAtmPvcWredRandomDiscardedPackets=hwCBQoSAtmPvcWredRandomDiscardedPackets, hwCBQoSWredWeightConst=hwCBQoSWredWeightConst, hwCBQoSFrPvcApplyPolicyDirection=hwCBQoSFrPvcApplyPolicyDirection, hwCBQoSFrPvcCbqBeTotalQueueNum=hwCBQoSFrPvcCbqBeTotalQueueNum, hwCBQoSFrPvcCbqBeActiveQueueNum=hwCBQoSFrPvcCbqBeActiveQueueNum, hwCBQoSAtmPvcApplyPolicyEntry=hwCBQoSAtmPvcApplyPolicyEntry, hwCBQoSRemarkCfgInfoTable=hwCBQoSRemarkCfgInfoTable, hwCBQoSFrPvcCbqAfQueueSize=hwCBQoSFrPvcCbqAfQueueSize, hwCBQoSFrPvcCarRunInfoTable=hwCBQoSFrPvcCarRunInfoTable, hwCBQoSIfCarRedPackets=hwCBQoSIfCarRedPackets, hwCBQoSAtmPvcCbqAfAllocatedQueueNum=hwCBQoSAtmPvcCbqAfAllocatedQueueNum, hwCBQoSPolicyClassBehaviorIndex=hwCBQoSPolicyClassBehaviorIndex, hwCBQoSAtmPvcWredRunInfoEntry=hwCBQoSAtmPvcWredRunInfoEntry, hwCBQoSIfApplyPolicyEnableDynamic=hwCBQoSIfApplyPolicyEnableDynamic, LrCirUnit=LrCirUnit, hwCBQoSClassifierCfgInfoEntry=hwCBQoSClassifierCfgInfoEntry, hwCBQoSLrEbs=hwCBQoSLrEbs, hwCBQoSBehaviorIndex=hwCBQoSBehaviorIndex, hwCBQoSIfStaticsObjects=hwCBQoSIfStaticsObjects, hwCBQoSWredClassLowLimit=hwCBQoSWredClassLowLimit, hwCBQoSCarRedAction=hwCBQoSCarRedAction, hwCBQoSCarCir=hwCBQoSCarCir, hwCBQoSCarPbs=hwCBQoSCarPbs, hwCBQoSAtmPvcQueueEnqueuedBytes=hwCBQoSAtmPvcQueueEnqueuedBytes, hwCBQoSIfQueueDiscardedPackets=hwCBQoSIfQueueDiscardedPackets, hwCBQoSRemarkCfgInfoEntry=hwCBQoSRemarkCfgInfoEntry, hwCBQoSIfCarGreenPackets=hwCBQoSIfCarGreenPackets, hwCBQoSFrPvcRemarkedPackets=hwCBQoSFrPvcRemarkedPackets, hwCBQoSGtsCfgInfoEntry=hwCBQoSGtsCfgInfoEntry, hwCBQoSIfVlanClassMatchedPackets=hwCBQoSIfVlanClassMatchedPackets, hwCBQoSNestPolicyName=hwCBQoSNestPolicyName, hwCBQoSIfVlanApplyPolicyTable=hwCBQoSIfVlanApplyPolicyTable, hwCBQoSIfVlanApplyPolicyEntry=hwCBQoSIfVlanApplyPolicyEntry, hwCBQoSNatRowStatus=hwCBQoSNatRowStatus, hwCBQoSPolicyObjects=hwCBQoSPolicyObjects, hwCBQoSFrPvcQueueDiscardedBytes=hwCBQoSFrPvcQueueDiscardedBytes, hwCBQoSPolicyIndex=hwCBQoSPolicyIndex, hwCBQoSFrClassApplyPolicyTable=hwCBQoSFrClassApplyPolicyTable, WredType=WredType, hwCBQoSAtmPvcClassMatchPackets=hwCBQoSAtmPvcClassMatchPackets, hwCBQoSFrPvcLrDiscardedPackets=hwCBQoSFrPvcLrDiscardedPackets)
mibBuilder.exportSymbols("A3COM-HUAWEI-CBQOS-MIB", hwCBQoSNestPolicyRowStatus=hwCBQoSNestPolicyRowStatus, hwCBQoSCarPir=hwCBQoSCarPir, hwCBQoSQueueCbsRatio=hwCBQoSQueueCbsRatio, hwCBQoSIfCbqRunInfoTable=hwCBQoSIfCbqRunInfoTable, hwCBQoSGtsCbs=hwCBQoSGtsCbs, hwCBQoSWredClassDiscardProb=hwCBQoSWredClassDiscardProb, hwCBQoSQueueBandwidthValue=hwCBQoSQueueBandwidthValue, hwCBQoSFrPvcCarExceedPackets=hwCBQoSFrPvcCarExceedPackets, hwCBQoSPolicyConfigMode=hwCBQoSPolicyConfigMode, hwCBQoSIfCarRunInfoTable=hwCBQoSIfCarRunInfoTable, hwCBQoSPolicyRowStatus=hwCBQoSPolicyRowStatus, hwCBQoSClassifierRuleCount=hwCBQoSClassifierRuleCount, hwCBQoSQueueDropType=hwCBQoSQueueDropType, hwCBQoSPolicyCfgInfoTable=hwCBQoSPolicyCfgInfoTable, hwCBQoSPolicyRouteRowStatus=hwCBQoSPolicyRouteRowStatus, hwCBQoSFrPvcApplyPolicyName=hwCBQoSFrPvcApplyPolicyName, hwCBQoSFirewallAction=hwCBQoSFirewallAction, hwCBQoSFrPvcClassMatchRunInfoEntry=hwCBQoSFrPvcClassMatchRunInfoEntry, hwCBQoSIfClassMatchRunInfoEntry=hwCBQoSIfClassMatchRunInfoEntry, hwCBQoSIfCbqRunInfoEntry=hwCBQoSIfCbqRunInfoEntry, hwCBQoSIfClassMatchedPackets=hwCBQoSIfClassMatchedPackets, hwCBQoSIfLrDiscardedPackets=hwCBQoSIfLrDiscardedPackets, hwCBQoSFirewallCfgInfoEntry=hwCBQoSFirewallCfgInfoEntry, hwCBQoSBehaviorName=hwCBQoSBehaviorName, hwCBQoSFrPvcStaticsObjects=hwCBQoSFrPvcStaticsObjects, hwCBQoSPolicyClassCount=hwCBQoSPolicyClassCount, hwCBQoSNatServiceClass=hwCBQoSNatServiceClass, hwCBQoSFrClassApplyPolicyName=hwCBQoSFrClassApplyPolicyName, hwCBQoSAtmPvcClassMatchBytes=hwCBQoSAtmPvcClassMatchBytes, hwCBQoSIfQueueRunInfoTable=hwCBQoSIfQueueRunInfoTable, hwCBQoSPolicyClassClassifierName=hwCBQoSPolicyClassClassifierName, hwCBQoSPolicyCfgInfoEntry=hwCBQoSPolicyCfgInfoEntry, hwCBQoSFrPvcLrQueueSize=hwCBQoSFrPvcLrQueueSize, hwCBQoSLrCfgInfoTable=hwCBQoSLrCfgInfoTable, hwCBQoSAtmPvcGtsRunInfoEntry=hwCBQoSAtmPvcGtsRunInfoEntry, hwCBQoSFrPvcCbqRunInfoTable=hwCBQoSFrPvcCbqRunInfoTable, hwCBQoSAtmPvcCbqBeTotalQueueNum=hwCBQoSAtmPvcCbqBeTotalQueueNum, hwCBQoSNatCfgInfoEntry=hwCBQoSNatCfgInfoEntry, hwCBQoSSamplingCfgInfoTable=hwCBQoSSamplingCfgInfoTable, hwCBQoSAtmPvcApplyPolicyVPI=hwCBQoSAtmPvcApplyPolicyVPI, hwCBQoSIfClassAverageRate=hwCBQoSIfClassAverageRate, hwCBQoSClassifierCfgInfoTable=hwCBQoSClassifierCfgInfoTable, hwCBQoSNestPolicyCfgInfoEntry=hwCBQoSNestPolicyCfgInfoEntry, hwCBQoSIfVlanApplyPolicyVlanid=hwCBQoSIfVlanApplyPolicyVlanid, hwCBQoSFrPvcApplyPolicyEntry=hwCBQoSFrPvcApplyPolicyEntry, hwCBQoSAtmPvcGtsPassedPackets=hwCBQoSAtmPvcGtsPassedPackets, hwCBQoSNatCfgInfoTable=hwCBQoSNatCfgInfoTable, hwCBQoSAtmPvcCbqRunInfoTable=hwCBQoSAtmPvcCbqRunInfoTable, hwCBQoSFrPvcLrRunInfoEntry=hwCBQoSFrPvcLrRunInfoEntry, hwCBQoSFrPvcCarRunInfoEntry=hwCBQoSFrPvcCarRunInfoEntry, hwCBQoSFrPvcLrPassedPackets=hwCBQoSFrPvcLrPassedPackets, hwCBQoSFrPvcQueueDiscardedPackets=hwCBQoSFrPvcQueueDiscardedPackets, hwCBQoSAtmPvcQueueDiscardedBytes=hwCBQoSAtmPvcQueueDiscardedBytes, hwCBQoSWredType=hwCBQoSWredType, hwCBQoSIfGtsPassedBytes=hwCBQoSIfGtsPassedBytes, hwCBQoSFrPvcApplyPolicyIfIndex=hwCBQoSFrPvcApplyPolicyIfIndex, hwCBQoSCarYellowAction=hwCBQoSCarYellowAction, hwCBQoSWredClassValue=hwCBQoSWredClassValue, hwCBQoSBehaviorCfgInfoEntry=hwCBQoSBehaviorCfgInfoEntry, hwCBQoSIfApplyPolicyIfIndex=hwCBQoSIfApplyPolicyIfIndex, hwCBQoSFrPvcGtsDiscardedPackets=hwCBQoSFrPvcGtsDiscardedPackets, hwCBQoSIfCbqBeQueueSize=hwCBQoSIfCbqBeQueueSize, hwCBQoSIfLrRunInfoEntry=hwCBQoSIfLrRunInfoEntry, hwCBQoSFrPvcCarConformPackets=hwCBQoSFrPvcCarConformPackets, hwCBQoSWredClassHighLimit=hwCBQoSWredClassHighLimit, hwCBQoSIfCarRedBytes=hwCBQoSIfCarRedBytes, hwCBQoSIfLrDelayedPackets=hwCBQoSIfLrDelayedPackets, hwCBQoSQueueType=hwCBQoSQueueType, hwCBQoSObjects=hwCBQoSObjects, hwCBQoSPolicyClassPrecedence=hwCBQoSPolicyClassPrecedence, hwCBQoSPolicyClassIndex=hwCBQoSPolicyClassIndex, hwCBQoSPolicyClassClassifierIndex=hwCBQoSPolicyClassClassifierIndex, hwCBQoSAtmPvcGtsPassedBytes=hwCBQoSAtmPvcGtsPassedBytes, hwCBQoSFrClassApplyPolicyFrClassName=hwCBQoSFrClassApplyPolicyFrClassName, hwCBQoSBehaviorRowStatus=hwCBQoSBehaviorRowStatus, hwCBQoSLrCfgInfoEntry=hwCBQoSLrCfgInfoEntry, hwCBQoSCarGreenAction=hwCBQoSCarGreenAction, hwCBQoSWredCfgInfoEntry=hwCBQoSWredCfgInfoEntry, hwCBQoSNatBackupNumber=hwCBQoSNatBackupNumber, hwCBQoSFrClassApplyPolicyEntry=hwCBQoSFrClassApplyPolicyEntry, hwCBQoSAtmPvcCbqAfQueueSize=hwCBQoSAtmPvcCbqAfQueueSize, hwCBQoSAtmPvcGtsRunInfoTable=hwCBQoSAtmPvcGtsRunInfoTable, hwCBQoSAtmPvcApplyPolicyRowStatus=hwCBQoSAtmPvcApplyPolicyRowStatus, hwCBQoSFrPvcLrDiscardedBytes=hwCBQoSFrPvcLrDiscardedBytes, hwCBQoSAtmPvcGtsDelayedPackets=hwCBQoSAtmPvcGtsDelayedPackets)
