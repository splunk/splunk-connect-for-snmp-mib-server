#
# PySNMP MIB module BIANCA-BRICK-IPSEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-IPSEC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Counter64, ObjectIdentity, Unsigned32, NotificationType, Gauge32, MibIdentifier, iso, ModuleIdentity, Bits, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Counter64", "ObjectIdentity", "Unsigned32", "NotificationType", "Gauge32", "MibIdentifier", "iso", "ModuleIdentity", "Bits", "Integer32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
class DisplayString(OctetString):
    pass

class HexValue(Integer32):
    pass

ipsec = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26))
ipsecGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26, 1))
ipsecGlobPeerIndex = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobPeerIndex.setStatus('mandatory')
ipsecGlobDefaultAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pre-sh-key", 1), ("dss-sig", 2), ("rsa-sig", 3), ("rsa-enc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultAuthMethod.setStatus('mandatory')
ipsecGlobDefaultCertificate = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultCertificate.setStatus('mandatory')
ipsecGlobDefaultLocalId = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultLocalId.setStatus('mandatory')
ipsecGlobDefaultIpsecProposal = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultIpsecProposal.setStatus('mandatory')
ipsecGlobDefaultIkeProposal = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultIkeProposal.setStatus('mandatory')
ipsecGlobDefaultIpsecLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultIpsecLifeTime.setStatus('mandatory')
ipsecGlobDefaultIkeLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultIkeLifeTime.setStatus('mandatory')
ipsecGlobDefaultIkeGroup = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultIkeGroup.setStatus('mandatory')
ipsecGlobMaxSysLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg", 1), ("alert", 2), ("crit", 3), ("err", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobMaxSysLogLevel.setStatus('mandatory')
ipsecGlobDefaultGranularity = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("coarse", 2), ("ip", 3), ("proto", 4), ("port", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultGranularity.setStatus('mandatory')
ipsecGlobDefaultPh1Mode = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("id-protect", 1), ("aggressive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultPh1Mode.setStatus('mandatory')
ipsecGlobDefaultPfsGroup = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobDefaultPfsGroup.setStatus('mandatory')
ipsecGlobIkePort = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobIkePort.setStatus('mandatory')
ipsecGlobMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobMaxRetries.setStatus('mandatory')
ipsecGlobRetryTimeout0milli = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobRetryTimeout0milli.setStatus('mandatory')
ipsecGlobRetryTimeoutMaxsec = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobRetryTimeoutMaxsec.setStatus('mandatory')
ipsecGlobMaxNegotiationTimeoutsec = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobMaxNegotiationTimeoutsec.setStatus('mandatory')
ipsecGlobMaxIkeSas = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobMaxIkeSas.setStatus('mandatory')
ipsecGlobAntiCloggingLength = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobAntiCloggingLength.setStatus('mandatory')
ipsecGlobAntiCloggingHash = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("md5", 3), ("sha1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobAntiCloggingHash.setStatus('mandatory')
ipsecGlobLocalSecretPeriodsec = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobLocalSecretPeriodsec.setStatus('mandatory')
ipsecGlobIgnoreCrPayloads = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobIgnoreCrPayloads.setStatus('mandatory')
ipsecGlobNoCrPayloads = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobNoCrPayloads.setStatus('mandatory')
ipsecGlobNoKeyHashPayloads = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobNoKeyHashPayloads.setStatus('mandatory')
ipsecGlobNoCrls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobNoCrls.setStatus('mandatory')
ipsecGlobSendFullCertChains = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobSendFullCertChains.setStatus('mandatory')
ipsecGlobTrustIcmpMsg = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobTrustIcmpMsg.setStatus('mandatory')
ipsecGlobSpiSize = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobSpiSize.setStatus('mandatory')
ipsecGlobZeroIsakmpCookies = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobZeroIsakmpCookies.setStatus('mandatory')
ipsecGlobMaxKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobMaxKeyLength.setStatus('mandatory')
ipsecGlobNoInitialContact = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobNoInitialContact.setStatus('mandatory')
ipsecGlobalsContinued = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26, 11))
ipsecGlobContPreIpsecRules = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobContPreIpsecRules.setStatus('mandatory')
ipsecGlobContDefaultRule = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecGlobContDefaultRule.setStatus('mandatory')
ipsecPublicKeyTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 2), )
if mibBuilder.loadTexts: ipsecPublicKeyTable.setStatus('mandatory')
ipsecPubKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-IPSEC-MIB", "ipsecPubKeyAlgorithm"), (0, "BIANCA-BRICK-IPSEC-MIB", "ipsecPubKeyKeyLength"))
if mibBuilder.loadTexts: ipsecPubKeyEntry.setStatus('mandatory')
ipsecPubKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecPubKeyIndex.setStatus('mandatory')
ipsecPubKeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPubKeyDescription.setStatus('mandatory')
ipsecPubKeyAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("rsa", 2), ("dsa", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecPubKeyAlgorithm.setStatus('mandatory')
ipsecPubKeyKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecPubKeyKeyLength.setStatus('mandatory')
ipsecSaTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 3), )
if mibBuilder.loadTexts: ipsecSaTable.setStatus('mandatory')
ipsecSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1), ).setIndexNames((0, "BIANCA-BRICK-IPSEC-MIB", "ipsecSaIndex"))
if mibBuilder.loadTexts: ipsecSaEntry.setStatus('mandatory')
ipsecSaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIndex.setStatus('mandatory')
ipsecSaState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alive", 1), ("expired", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecSaState.setStatus('mandatory')
ipsecSaCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("ike", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaCreator.setStatus('mandatory')
ipsecSaDir = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaDir.setStatus('mandatory')
ipsecSaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaMode.setStatus('mandatory')
ipsecSaSecProto = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50, 51, 108))).clone(namedValues=NamedValues(("esp", 50), ("ah", 51), ("ipcomp", 108)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaSecProto.setStatus('mandatory')
ipsecSaLocalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaLocalIp.setStatus('mandatory')
ipsecSaPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaPeerIp.setStatus('mandatory')
ipsecSaSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaSrcAddress.setStatus('mandatory')
ipsecSaSrcMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaSrcMaskLen.setStatus('mandatory')
ipsecSaSrcRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaSrcRange.setStatus('mandatory')
ipsecSaDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaDstAddress.setStatus('mandatory')
ipsecSaDstMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaDstMaskLen.setStatus('mandatory')
ipsecSaDstRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaDstRange.setStatus('mandatory')
ipsecSaSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 17), HexValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaSpi.setStatus('mandatory')
ipsecSaAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6))).clone(namedValues=NamedValues(("none", 2), ("md5-96", 4), ("sha1-96", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAuthAlg.setStatus('mandatory')
ipsecSaEncAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("des-cbc", 2), ("des3-cbc", 3), ("blowfish-cbc", 4), ("cast128-cbc", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEncAlg.setStatus('mandatory')
ipsecSaAuthKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAuthKeyLen.setStatus('mandatory')
ipsecSaEncKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEncKeyLen.setStatus('mandatory')
ipsecSaLifeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaLifeSeconds.setStatus('mandatory')
ipsecSaLifeKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaLifeKBytes.setStatus('mandatory')
ipsecSaProto = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint())).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("ggp", 3), ("ipip", 4), ("st", 5), ("tcp", 6), ("cbt", 7), ("egp", 8), ("igp", 9), ("bbn", 10), ("nvp", 11), ("pup", 12), ("argus", 13), ("emcon", 14), ("xnet", 15), ("chaos", 16), ("udp", 17), ("mux", 18), ("dcn", 19), ("hmp", 20), ("prm", 21), ("xns", 22), ("trunk1", 23), ("trunk2", 24), ("leaf1", 25), ("leaf2", 26), ("rdp", 27), ("irtp", 28), ("isotp4", 29), ("netblt", 30), ("mfe", 31), ("merit", 32), ("sep", 33), ("pc3", 34), ("idpr", 35), ("xtp", 36), ("ddp", 37), ("idprc", 38), ("tp", 39), ("il", 40), ("ipv6", 41), ("sdrp", 42), ("ipv6route", 43), ("ipv6frag", 44), ("idrp", 45), ("rsvp", 46), ("gre", 47), ("mhrp", 48), ("bna", 49), ("esp", 50), ("ah", 51), ("inlsp", 52), ("swipe", 53), ("narp", 54), ("mobile", 55), ("tlsp", 56), ("skip", 57), ("ipv6icmp", 58), ("ipv6nonxt", 59), ("ipv6opts", 60), ("ipproto-61", 61), ("cftp", 62), ("local", 63), ("sat", 64), ("kryptolan", 65), ("rvd", 66), ("ippc", 67), ("distfs", 68), ("satmon", 69), ("visa", 70), ("ipcv", 71), ("cpnx", 72), ("cphb", 73), ("wsn", 74), ("pvp", 75), ("brsatmon", 76), ("sunnd", 77), ("wbmon", 78), ("wbexpak", 79), ("isoip", 80), ("vmtp", 81), ("securevmtp", 82), ("vines", 83), ("ttp", 84), ("nsfnet", 85), ("dgp", 86), ("tcf", 87), ("eigrp", 88), ("ospfigp", 89), ("sprite", 90), ("larp", 91), ("mtp", 92), ("ax25", 93), ("ipwip", 94), ("micp", 95), ("scc", 96), ("etherip", 97), ("encap", 98), ("encrypt", 99), ("gmtp", 100), ("ifmp", 101), ("pnni", 102), ("pim", 103), ("aris", 104), ("scps", 105), ("qnx", 106), ("an", 107), ("ippcp", 108), ("snp", 109), ("compaq", 110), ("ipxip", 111), ("vrrp", 112), ("pgm", 113), ("hop0", 114), ("l2tp", 115), ("ipproto-116", 116), ("ipproto-117", 117), ("ipproto-118", 118), ("ipproto-119", 119), ("ipproto-120", 120), ("ipproto-121", 121), ("ipproto-122", 122), ("ipproto-123", 123), ("ipproto-124", 124), ("ipproto-125", 125), ("ipproto-126", 126), ("ipproto-127", 127), ("ipproto-128", 128), ("ipproto-129", 129), ("ipproto-130", 130), ("ipproto-131", 131), ("ipproto-132", 132), ("ipproto-133", 133), ("ipproto-134", 134), ("ipproto-135", 135), ("ipproto-136", 136), ("ipproto-137", 137), ("ipproto-138", 138), ("ipproto-139", 139), ("ipproto-140", 140), ("ipproto-141", 141), ("ipproto-142", 142), ("ipproto-143", 143), ("ipproto-144", 144), ("ipproto-145", 145), ("ipproto-146", 146), ("ipproto-147", 147), ("ipproto-148", 148), ("ipproto-149", 149), ("ipproto-150", 150), ("ipproto-151", 151), ("ipproto-152", 152), ("ipproto-153", 153), ("ipproto-154", 154), ("ipproto-155", 155), ("ipproto-156", 156), ("ipproto-157", 157), ("ipproto-158", 158), ("ipproto-159", 159), ("ipproto-160", 160), ("ipproto-161", 161), ("ipproto-162", 162), ("ipproto-163", 163), ("ipproto-164", 164), ("ipproto-165", 165), ("ipproto-166", 166), ("ipproto-167", 167), ("ipproto-168", 168), ("ipproto-169", 169), ("ipproto-170", 170), ("ipproto-171", 171), ("ipproto-172", 172), ("ipproto-173", 173), ("ipproto-174", 174), ("ipproto-175", 175), ("ipproto-176", 176), ("ipproto-177", 177), ("ipproto-178", 178), ("ipproto-179", 179), ("ipproto-180", 180), ("ipproto-181", 181), ("ipproto-182", 182), ("ipproto-183", 183), ("ipproto-184", 184), ("ipproto-185", 185), ("ipproto-186", 186), ("ipproto-187", 187), ("ipproto-188", 188), ("ipproto-189", 189), ("ipproto-190", 190), ("ipproto-191", 191), ("ipproto-192", 192), ("ipproto-193", 193), ("ipproto-194", 194), ("ipproto-195", 195), ("ipproto-196", 196), ("ipproto-197", 197), ("ipproto-198", 198), ("ipproto-199", 199), ("ipproto-200", 200), ("ipproto-201", 201), ("ipproto-202", 202), ("ipproto-203", 203), ("ipproto-204", 204), ("ipproto-205", 205), ("ipproto-206", 206), ("ipproto-207", 207), ("ipproto-208", 208), ("ipproto-209", 209), ("ipproto-210", 210), ("ipproto-211", 211), ("ipproto-212", 212), ("ipproto-213", 213), ("ipproto-214", 214), ("ipproto-215", 215), ("ipproto-216", 216), ("ipproto-217", 217), ("ipproto-218", 218), ("ipproto-219", 219), ("ipproto-220", 220), ("ipproto-221", 221), ("ipproto-222", 222), ("ipproto-223", 223), ("ipproto-224", 224), ("ipproto-225", 225), ("ipproto-226", 226), ("ipproto-227", 227), ("ipproto-228", 228), ("ipproto-229", 229), ("ipproto-230", 230), ("ipproto-231", 231), ("ipproto-232", 232), ("ipproto-233", 233), ("ipproto-234", 234), ("ipproto-235", 235), ("ipproto-236", 236), ("ipproto-237", 237), ("ipproto-238", 238), ("ipproto-239", 239), ("ipproto-240", 240), ("ipproto-241", 241), ("ipproto-242", 242), ("ipproto-243", 243), ("ipproto-244", 244), ("ipproto-245", 245), ("ipproto-246", 246), ("ipproto-247", 247), ("ipproto-248", 248), ("ipproto-249", 249), ("ipproto-250", 250), ("ipproto-251", 251), ("ipproto-252", 252), ("ipproto-253", 253), ("ipproto-254", 254), ("dont-verify", 255)) + NamedValues())).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaProto.setStatus('mandatory')
ipsecSaSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaSrcPort.setStatus('mandatory')
ipsecSaDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaDstPort.setStatus('mandatory')
ipsecSaSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaSeconds.setStatus('mandatory')
ipsecSaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaBytes.setStatus('mandatory')
ipsecSaPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaPackets.setStatus('mandatory')
ipsecSaReplayErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaReplayErrors.setStatus('mandatory')
ipsecSaRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaRecvErrors.setStatus('mandatory')
ipsecSaDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaDecryptErrors.setStatus('mandatory')
ikeSaTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 4), )
if mibBuilder.loadTexts: ikeSaTable.setStatus('mandatory')
ikeSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1), ).setIndexNames((0, "BIANCA-BRICK-IPSEC-MIB", "ikeSaIndex"))
if mibBuilder.loadTexts: ikeSaEntry.setStatus('mandatory')
ikeSaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaIndex.setStatus('mandatory')
ikeSaState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("negotiating", 1), ("established", 2), ("waiting-for-remove", 3), ("delete", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeSaState.setStatus('mandatory')
ikeSaXchType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 256))).clone(namedValues=NamedValues(("base", 1), ("id-protect", 2), ("authentication-only", 3), ("aggressive", 4), ("info", 5), ("quick", 32), ("new-group", 33), ("any", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaXchType.setStatus('mandatory')
ikeSaAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pre-sh-key", 1), ("dss-sig", 2), ("rsa-sig", 3), ("rsa-enc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaAuthMethod.setStatus('mandatory')
ikeSaAlgs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaAlgs.setStatus('mandatory')
ikeSaRole = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initiator", 1), ("responder", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaRole.setStatus('mandatory')
ikeSaLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaLocalId.setStatus('mandatory')
ikeSaRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaRemoteId.setStatus('mandatory')
ikeSaRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaRemoteIp.setStatus('mandatory')
ikeSaCookieI = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaCookieI.setStatus('mandatory')
ikeSaCookieR = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaCookieR.setStatus('mandatory')
ikeSaTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaTimes.setStatus('mandatory')
ikeSaNumCerts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaNumCerts.setStatus('mandatory')
ikeSaNumNegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaNumNegotiations.setStatus('mandatory')
ikeSaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaBytes.setStatus('mandatory')
ikeSaMajVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaMajVersion.setStatus('mandatory')
ikeSaMinVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeSaMinVersion.setStatus('mandatory')
ipsecPeerTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 5), )
if mibBuilder.loadTexts: ipsecPeerTable.setStatus('mandatory')
ipsecPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1), ).setIndexNames((0, "BIANCA-BRICK-IPSEC-MIB", "ipsecPeerTrafficList"))
if mibBuilder.loadTexts: ipsecPeerEntry.setStatus('mandatory')
ipsecPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecPeerIndex.setStatus('mandatory')
ipsecPeerNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerNextIndex.setStatus('mandatory')
ipsecPeerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerDescription.setStatus('mandatory')
ipsecPeerPeerIds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerPeerIds.setStatus('mandatory')
ipsecPeerPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerPeerAddress.setStatus('mandatory')
ipsecPeerLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerLocalId.setStatus('mandatory')
ipsecPeerLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerLocalAddress.setStatus('mandatory')
ipsecPeerLocalCert = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerLocalCert.setStatus('mandatory')
ipsecPeerIkeProposals = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerIkeProposals.setStatus('mandatory')
ipsecPeerTrafficList = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerTrafficList.setStatus('mandatory')
ipsecPeerAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 14, 15))).clone(namedValues=NamedValues(("pre-sh-key", 1), ("dss-sig", 2), ("rsa-sig", 3), ("rsa-enc", 4), ("default", 14), ("delete", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerAuthMethod.setStatus('mandatory')
ipsecPeerPreSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerPreSharedKey.setStatus('mandatory')
ipsecPeerIkeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerIkeGroup.setStatus('mandatory')
ipsecPeerPfsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerPfsGroup.setStatus('mandatory')
ipsecPeerPh1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("id-protect", 1), ("aggressive", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerPh1Mode.setStatus('mandatory')
ipsecPeerIkeLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerIkeLifeTime.setStatus('mandatory')
ipsecPeerIpsecLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerIpsecLifeTime.setStatus('mandatory')
ipsecPeerKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerKeepAlive.setStatus('mandatory')
ipsecPeerGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("coarse", 2), ("ip", 3), ("proto", 4), ("port", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerGranularity.setStatus('mandatory')
ipsecPeerDontVerifyPad = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerDontVerifyPad.setStatus('mandatory')
ipsecPeerDefaultIpsecProposals = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerDefaultIpsecProposals.setStatus('mandatory')
ipsecPeerPreSharedKeyData = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 5, 1, 63), OctetString())
if mibBuilder.loadTexts: ipsecPeerPreSharedKeyData.setStatus('mandatory')
ikeProposalTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 6), )
if mibBuilder.loadTexts: ikeProposalTable.setStatus('mandatory')
ikeProposalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 6, 1), ).setIndexNames((0, "BIANCA-BRICK-IPSEC-MIB", "ikePropEncAlg"))
if mibBuilder.loadTexts: ikeProposalEntry.setStatus('mandatory')
ikePropIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikePropIndex.setStatus('mandatory')
ikePropNextChoice = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikePropNextChoice.setStatus('mandatory')
ikePropDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikePropDescription.setStatus('mandatory')
ikePropEncAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("des-cbc", 2), ("des3-cbc", 3), ("blowfish-cbc", 4), ("cast128-cbc", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikePropEncAlg.setStatus('mandatory')
ikePropHashAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delete", 1), ("none", 2), ("md5", 3), ("sha1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikePropHashAlg.setStatus('mandatory')
ipsecTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 7), )
if mibBuilder.loadTexts: ipsecTrafficTable.setStatus('mandatory')
ipsecTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1), ).setIndexNames((0, "BIANCA-BRICK-IPSEC-MIB", "ipsecTrProto"))
if mibBuilder.loadTexts: ipsecTrafficEntry.setStatus('mandatory')
ipsecTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTrIndex.setStatus('mandatory')
ipsecTrNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrNextIndex.setStatus('mandatory')
ipsecTrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrDescription.setStatus('mandatory')
ipsecTrLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrLocalAddress.setStatus('mandatory')
ipsecTrLocalMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrLocalMaskLen.setStatus('mandatory')
ipsecTrLocalRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrLocalRange.setStatus('mandatory')
ipsecTrRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrRemoteAddress.setStatus('mandatory')
ipsecTrRemoteMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrRemoteMaskLen.setStatus('mandatory')
ipsecTrRemoteRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrRemoteRange.setStatus('mandatory')
ipsecTrProto = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint())).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("ggp", 3), ("ipip", 4), ("st", 5), ("tcp", 6), ("cbt", 7), ("egp", 8), ("igp", 9), ("bbn", 10), ("nvp", 11), ("pup", 12), ("argus", 13), ("emcon", 14), ("xnet", 15), ("chaos", 16), ("udp", 17), ("mux", 18), ("dcn", 19), ("hmp", 20), ("prm", 21), ("xns", 22), ("trunk1", 23), ("trunk2", 24), ("leaf1", 25), ("leaf2", 26), ("rdp", 27), ("irtp", 28), ("isotp4", 29), ("netblt", 30), ("mfe", 31), ("merit", 32), ("sep", 33), ("pc3", 34), ("idpr", 35), ("xtp", 36), ("ddp", 37), ("idprc", 38), ("tp", 39), ("il", 40), ("ipv6", 41), ("sdrp", 42), ("ipv6route", 43), ("ipv6frag", 44), ("idrp", 45), ("rsvp", 46), ("gre", 47), ("mhrp", 48), ("bna", 49), ("esp", 50), ("ah", 51), ("inlsp", 52), ("swipe", 53), ("narp", 54), ("mobile", 55), ("tlsp", 56), ("skip", 57), ("ipv6icmp", 58), ("ipv6nonxt", 59), ("ipv6opts", 60), ("ipproto-61", 61), ("cftp", 62), ("local", 63), ("sat", 64), ("kryptolan", 65), ("rvd", 66), ("ippc", 67), ("distfs", 68), ("satmon", 69), ("visa", 70), ("ipcv", 71), ("cpnx", 72), ("cphb", 73), ("wsn", 74), ("pvp", 75), ("brsatmon", 76), ("sunnd", 77), ("wbmon", 78), ("wbexpak", 79), ("isoip", 80), ("vmtp", 81), ("securevmtp", 82), ("vines", 83), ("ttp", 84), ("nsfnet", 85), ("dgp", 86), ("tcf", 87), ("eigrp", 88), ("ospfigp", 89), ("sprite", 90), ("larp", 91), ("mtp", 92), ("ax25", 93), ("ipwip", 94), ("micp", 95), ("scc", 96), ("etherip", 97), ("encap", 98), ("encrypt", 99), ("gmtp", 100), ("ifmp", 101), ("pnni", 102), ("pim", 103), ("aris", 104), ("scps", 105), ("qnx", 106), ("an", 107), ("ippcp", 108), ("snp", 109), ("compaq", 110), ("ipxip", 111), ("vrrp", 112), ("pgm", 113), ("hop0", 114), ("l2tp", 115), ("ipproto-116", 116), ("ipproto-117", 117), ("ipproto-118", 118), ("ipproto-119", 119), ("ipproto-120", 120), ("ipproto-121", 121), ("ipproto-122", 122), ("ipproto-123", 123), ("ipproto-124", 124), ("ipproto-125", 125), ("ipproto-126", 126), ("ipproto-127", 127), ("ipproto-128", 128), ("ipproto-129", 129), ("ipproto-130", 130), ("ipproto-131", 131), ("ipproto-132", 132), ("ipproto-133", 133), ("ipproto-134", 134), ("ipproto-135", 135), ("ipproto-136", 136), ("ipproto-137", 137), ("ipproto-138", 138), ("ipproto-139", 139), ("ipproto-140", 140), ("ipproto-141", 141), ("ipproto-142", 142), ("ipproto-143", 143), ("ipproto-144", 144), ("ipproto-145", 145), ("ipproto-146", 146), ("ipproto-147", 147), ("ipproto-148", 148), ("ipproto-149", 149), ("ipproto-150", 150), ("ipproto-151", 151), ("ipproto-152", 152), ("ipproto-153", 153), ("ipproto-154", 154), ("ipproto-155", 155), ("ipproto-156", 156), ("ipproto-157", 157), ("ipproto-158", 158), ("ipproto-159", 159), ("ipproto-160", 160), ("ipproto-161", 161), ("ipproto-162", 162), ("ipproto-163", 163), ("ipproto-164", 164), ("ipproto-165", 165), ("ipproto-166", 166), ("ipproto-167", 167), ("ipproto-168", 168), ("ipproto-169", 169), ("ipproto-170", 170), ("ipproto-171", 171), ("ipproto-172", 172), ("ipproto-173", 173), ("ipproto-174", 174), ("ipproto-175", 175), ("ipproto-176", 176), ("ipproto-177", 177), ("ipproto-178", 178), ("ipproto-179", 179), ("ipproto-180", 180), ("ipproto-181", 181), ("ipproto-182", 182), ("ipproto-183", 183), ("ipproto-184", 184), ("ipproto-185", 185), ("ipproto-186", 186), ("ipproto-187", 187), ("ipproto-188", 188), ("ipproto-189", 189), ("ipproto-190", 190), ("ipproto-191", 191), ("ipproto-192", 192), ("ipproto-193", 193), ("ipproto-194", 194), ("ipproto-195", 195), ("ipproto-196", 196), ("ipproto-197", 197), ("ipproto-198", 198), ("ipproto-199", 199), ("ipproto-200", 200), ("ipproto-201", 201), ("ipproto-202", 202), ("ipproto-203", 203), ("ipproto-204", 204), ("ipproto-205", 205), ("ipproto-206", 206), ("ipproto-207", 207), ("ipproto-208", 208), ("ipproto-209", 209), ("ipproto-210", 210), ("ipproto-211", 211), ("ipproto-212", 212), ("ipproto-213", 213), ("ipproto-214", 214), ("ipproto-215", 215), ("ipproto-216", 216), ("ipproto-217", 217), ("ipproto-218", 218), ("ipproto-219", 219), ("ipproto-220", 220), ("ipproto-221", 221), ("ipproto-222", 222), ("ipproto-223", 223), ("ipproto-224", 224), ("ipproto-225", 225), ("ipproto-226", 226), ("ipproto-227", 227), ("ipproto-228", 228), ("ipproto-229", 229), ("ipproto-230", 230), ("ipproto-231", 231), ("ipproto-232", 232), ("ipproto-233", 233), ("ipproto-234", 234), ("ipproto-235", 235), ("ipproto-236", 236), ("ipproto-237", 237), ("ipproto-238", 238), ("ipproto-239", 239), ("ipproto-240", 240), ("ipproto-241", 241), ("ipproto-242", 242), ("ipproto-243", 243), ("ipproto-244", 244), ("ipproto-245", 245), ("ipproto-246", 246), ("ipproto-247", 247), ("ipproto-248", 248), ("ipproto-249", 249), ("ipproto-250", 250), ("ipproto-251", 251), ("ipproto-252", 252), ("ipproto-253", 253), ("ipproto-254", 254), ("dont-verify", 255)) + NamedValues())).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrProto.setStatus('mandatory')
ipsecTrLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrLocalPort.setStatus('mandatory')
ipsecTrRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrRemotePort.setStatus('mandatory')
ipsecTrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("delete", 1), ("always-plain", 2), ("pass", 3), ("protect", 4), ("drop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrAction.setStatus('mandatory')
ipsecTrProposal = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrProposal.setStatus('mandatory')
ipsecTrForceTunnelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrForceTunnelMode.setStatus('mandatory')
ipsecTrLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrLifeTime.setStatus('mandatory')
ipsecTrGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("coarse", 2), ("ip", 3), ("proto", 4), ("port", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrGranularity.setStatus('mandatory')
ipsecTrKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrKeepAlive.setStatus('mandatory')
ipsecProposalTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 8), )
if mibBuilder.loadTexts: ipsecProposalTable.setStatus('mandatory')
ipsecProposalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1), ).setIndexNames((0, "BIANCA-BRICK-IPSEC-MIB", "ipsecPropProto"))
if mibBuilder.loadTexts: ipsecProposalEntry.setStatus('mandatory')
ipsecPropIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecPropIndex.setStatus('mandatory')
ipsecPropNext = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropNext.setStatus('mandatory')
ipsecPropBoolOp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("delete", 1), ("or", 2), ("and", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropBoolOp.setStatus('mandatory')
ipsecPropDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropDescription.setStatus('mandatory')
ipsecPropProto = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("esp", 1), ("ah", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropProto.setStatus('mandatory')
ipsecPropEncAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("des-cbc", 2), ("des3-cbc", 3), ("blowfish-cbc", 4), ("cast128-cbc", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropEncAlg.setStatus('mandatory')
ipsecPropAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6))).clone(namedValues=NamedValues(("none", 2), ("md5-96", 4), ("sha1-96", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropAuthAlg.setStatus('mandatory')
ipsecPropLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropLifeTime.setStatus('mandatory')
ipsecPropInSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 11), HexValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropInSpi.setStatus('mandatory')
ipsecPropOutSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 12), HexValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropOutSpi.setStatus('mandatory')
ipsecPropEncKeyIn = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropEncKeyIn.setStatus('mandatory')
ipsecPropEncKeyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropEncKeyOut.setStatus('mandatory')
ipsecPropAuthKeyIn = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropAuthKeyIn.setStatus('mandatory')
ipsecPropAuthKeyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPropAuthKeyOut.setStatus('mandatory')
ipsecPropEncKeyDataIn = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 33), OctetString())
if mibBuilder.loadTexts: ipsecPropEncKeyDataIn.setStatus('mandatory')
ipsecPropEncKeyDataOut = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 34), OctetString())
if mibBuilder.loadTexts: ipsecPropEncKeyDataOut.setStatus('mandatory')
ipsecPropAuthKeyDataIn = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 35), OctetString())
if mibBuilder.loadTexts: ipsecPropAuthKeyDataIn.setStatus('mandatory')
ipsecPropAuthKeyDataOut = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 8, 1, 36), OctetString())
if mibBuilder.loadTexts: ipsecPropAuthKeyDataOut.setStatus('mandatory')
ipsecLifeTimeTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 9), )
if mibBuilder.loadTexts: ipsecLifeTimeTable.setStatus('mandatory')
ipsecLifeTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 9, 1), ).setIndexNames((0, "BIANCA-BRICK-IPSEC-MIB", "ipsecLifeType"))
if mibBuilder.loadTexts: ipsecLifeTimeEntry.setStatus('mandatory')
ipsecLifeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecLifeIndex.setStatus('mandatory')
ipsecLifeType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("generic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLifeType.setStatus('mandatory')
ipsecLifeSoftKb = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLifeSoftKb.setStatus('mandatory')
ipsecLifeSoftSec = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLifeSoftSec.setStatus('mandatory')
ipsecLifeHardKb = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLifeHardKb.setStatus('mandatory')
ipsecLifeHardSec = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLifeHardSec.setStatus('mandatory')
ipsecStats = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26, 10))
ipsecStatsCurrentIkeSas = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsCurrentIkeSas.setStatus('mandatory')
ipsecStatsCurrentIpsecSas = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsCurrentIpsecSas.setStatus('mandatory')
ipsecStatsIp = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsIp.setStatus('mandatory')
ipsecStatsNonIp = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsNonIp.setStatus('mandatory')
ipsecStatsAh = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsAh.setStatus('mandatory')
ipsecStatsEsp = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsEsp.setStatus('mandatory')
ipsecStatsDrop = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsDrop.setStatus('mandatory')
ipsecStatsPass = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsPass.setStatus('mandatory')
ipsecStatsTrig = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsTrig.setStatus('mandatory')
ipsecStatsFragPkt = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsFragPkt.setStatus('mandatory')
ipsecStatsFragBytes = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsFragBytes.setStatus('mandatory')
ipsecStatsFragNonfirst = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecStatsFragNonfirst.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-IPSEC-MIB", ipsecSaSrcAddress=ipsecSaSrcAddress, ipsecPubKeyDescription=ipsecPubKeyDescription, ipsecLifeSoftKb=ipsecLifeSoftKb, ipsecSaDir=ipsecSaDir, ipsecPeerPeerAddress=ipsecPeerPeerAddress, ipsecPropEncKeyDataIn=ipsecPropEncKeyDataIn, ipsecSaRecvErrors=ipsecSaRecvErrors, ikeSaState=ikeSaState, internet=internet, ipsecSaEncKeyLen=ipsecSaEncKeyLen, ipsecGlobNoCrPayloads=ipsecGlobNoCrPayloads, ikeSaRemoteId=ikeSaRemoteId, ipsecTrNextIndex=ipsecTrNextIndex, ipsecPubKeyAlgorithm=ipsecPubKeyAlgorithm, ipsecGlobDefaultLocalId=ipsecGlobDefaultLocalId, ipsecSaProto=ipsecSaProto, ipsecTrLifeTime=ipsecTrLifeTime, ipsecPubKeyEntry=ipsecPubKeyEntry, ipsecSaReplayErrors=ipsecSaReplayErrors, ipsecSaLocalIp=ipsecSaLocalIp, ikeSaNumNegotiations=ikeSaNumNegotiations, ipsecSaLifeSeconds=ipsecSaLifeSeconds, ipsecSaMode=ipsecSaMode, ikeProposalEntry=ikeProposalEntry, ikeSaAuthMethod=ikeSaAuthMethod, ipsecPeerIkeGroup=ipsecPeerIkeGroup, ipsecGlobContDefaultRule=ipsecGlobContDefaultRule, ipsecTrRemoteAddress=ipsecTrRemoteAddress, bintec=bintec, ipsecLifeType=ipsecLifeType, HexValue=HexValue, ipsecSaSpi=ipsecSaSpi, ipsecPeerPeerIds=ipsecPeerPeerIds, ipsecSaTable=ipsecSaTable, ipsecPeerTrafficList=ipsecPeerTrafficList, ipsecTrDescription=ipsecTrDescription, ipsecTrForceTunnelMode=ipsecTrForceTunnelMode, ipsecStats=ipsecStats, ipsecLifeTimeEntry=ipsecLifeTimeEntry, org=org, ipsecStatsIp=ipsecStatsIp, ikeSaBytes=ikeSaBytes, ipsecPubKeyKeyLength=ipsecPubKeyKeyLength, ipsecStatsTrig=ipsecStatsTrig, ipsecPropProto=ipsecPropProto, ikeSaXchType=ikeSaXchType, ipsecTrGranularity=ipsecTrGranularity, ipsecStatsCurrentIkeSas=ipsecStatsCurrentIkeSas, ipsecGlobMaxKeyLength=ipsecGlobMaxKeyLength, dod=dod, ipsecPropNext=ipsecPropNext, ipsecSaDstMaskLen=ipsecSaDstMaskLen, ipsecSaAuthAlg=ipsecSaAuthAlg, ikeSaIndex=ikeSaIndex, ikeSaMajVersion=ikeSaMajVersion, ikePropHashAlg=ikePropHashAlg, ikeProposalTable=ikeProposalTable, ipsecSaSrcPort=ipsecSaSrcPort, ipsecGlobDefaultCertificate=ipsecGlobDefaultCertificate, ipsecGlobals=ipsecGlobals, ipsecPropEncAlg=ipsecPropEncAlg, ipsecSaSrcMaskLen=ipsecSaSrcMaskLen, ipsecGlobMaxSysLogLevel=ipsecGlobMaxSysLogLevel, ipsecGlobAntiCloggingHash=ipsecGlobAntiCloggingHash, ipsecTrLocalMaskLen=ipsecTrLocalMaskLen, ipsec=ipsec, ipsecSaIndex=ipsecSaIndex, ipsecPropLifeTime=ipsecPropLifeTime, ipsecPeerDescription=ipsecPeerDescription, ipsecTrLocalPort=ipsecTrLocalPort, ipsecSaState=ipsecSaState, ipsecGlobMaxRetries=ipsecGlobMaxRetries, ipsecTrafficTable=ipsecTrafficTable, ikeSaTable=ikeSaTable, ipsecGlobSpiSize=ipsecGlobSpiSize, ipsecPeerPreSharedKey=ipsecPeerPreSharedKey, ipsecTrafficEntry=ipsecTrafficEntry, ipsecPeerAuthMethod=ipsecPeerAuthMethod, ikeSaAlgs=ikeSaAlgs, ikeSaEntry=ikeSaEntry, ipsecStatsFragNonfirst=ipsecStatsFragNonfirst, ipsecLifeIndex=ipsecLifeIndex, ipsecGlobSendFullCertChains=ipsecGlobSendFullCertChains, ipsecPropAuthKeyDataOut=ipsecPropAuthKeyDataOut, ikePropDescription=ikePropDescription, ipsecGlobRetryTimeout0milli=ipsecGlobRetryTimeout0milli, ipsecGlobLocalSecretPeriodsec=ipsecGlobLocalSecretPeriodsec, ipsecPropAuthKeyIn=ipsecPropAuthKeyIn, ipsecGlobContPreIpsecRules=ipsecGlobContPreIpsecRules, ipsecPeerIkeProposals=ipsecPeerIkeProposals, ipsecPropIndex=ipsecPropIndex, ipsecPeerIpsecLifeTime=ipsecPeerIpsecLifeTime, ipsecPropDescription=ipsecPropDescription, ipsecGlobDefaultIpsecLifeTime=ipsecGlobDefaultIpsecLifeTime, ipsecPubKeyIndex=ipsecPubKeyIndex, ipsecPropEncKeyOut=ipsecPropEncKeyOut, ipsecPeerIkeLifeTime=ipsecPeerIkeLifeTime, ikeSaRemoteIp=ikeSaRemoteIp, ipsecPeerGranularity=ipsecPeerGranularity, ipsecTrProposal=ipsecTrProposal, ipsecGlobDefaultPh1Mode=ipsecGlobDefaultPh1Mode, enterprises=enterprises, ipsecProposalTable=ipsecProposalTable, ipsecGlobPeerIndex=ipsecGlobPeerIndex, ikePropIndex=ikePropIndex, bibo=bibo, ipsecTrLocalAddress=ipsecTrLocalAddress, ipsecSaEntry=ipsecSaEntry, ipsecGlobalsContinued=ipsecGlobalsContinued, ipsecSaDstAddress=ipsecSaDstAddress, ipsecPropEncKeyIn=ipsecPropEncKeyIn, ipsecSaAuthKeyLen=ipsecSaAuthKeyLen, ipsecSaSecProto=ipsecSaSecProto, ikeSaRole=ikeSaRole, ipsecPeerIndex=ipsecPeerIndex, ipsecTrRemoteMaskLen=ipsecTrRemoteMaskLen, ipsecGlobMaxIkeSas=ipsecGlobMaxIkeSas, ipsecGlobMaxNegotiationTimeoutsec=ipsecGlobMaxNegotiationTimeoutsec, ipsecGlobNoKeyHashPayloads=ipsecGlobNoKeyHashPayloads, ipsecPeerPh1Mode=ipsecPeerPh1Mode, ipsecStatsNonIp=ipsecStatsNonIp, ipsecGlobIkePort=ipsecGlobIkePort, ipsecSaDecryptErrors=ipsecSaDecryptErrors, ipsecPeerDontVerifyPad=ipsecPeerDontVerifyPad, ikeSaLocalId=ikeSaLocalId, ipsecPeerLocalCert=ipsecPeerLocalCert, ipsecGlobDefaultIkeProposal=ipsecGlobDefaultIkeProposal, ikeSaTimes=ikeSaTimes, ipsecProposalEntry=ipsecProposalEntry, ipsecPropOutSpi=ipsecPropOutSpi, ipsecPropInSpi=ipsecPropInSpi, ipsecLifeSoftSec=ipsecLifeSoftSec, ikeSaCookieI=ikeSaCookieI, ikeSaCookieR=ikeSaCookieR, ipsecGlobNoCrls=ipsecGlobNoCrls, ipsecTrKeepAlive=ipsecTrKeepAlive, ipsecPeerNextIndex=ipsecPeerNextIndex, ipsecSaLifeKBytes=ipsecSaLifeKBytes, ipsecGlobTrustIcmpMsg=ipsecGlobTrustIcmpMsg, ikePropEncAlg=ikePropEncAlg, ipsecGlobDefaultIkeGroup=ipsecGlobDefaultIkeGroup, ipsecSaCreator=ipsecSaCreator, ipsecSaDstRange=ipsecSaDstRange, ipsecLifeTimeTable=ipsecLifeTimeTable, ipsecStatsPass=ipsecStatsPass, ipsecStatsFragBytes=ipsecStatsFragBytes, ipsecGlobAntiCloggingLength=ipsecGlobAntiCloggingLength, ipsecPeerEntry=ipsecPeerEntry, ipsecGlobDefaultPfsGroup=ipsecGlobDefaultPfsGroup, DisplayString=DisplayString, ikeSaMinVersion=ikeSaMinVersion, ipsecTrLocalRange=ipsecTrLocalRange, ipsecStatsEsp=ipsecStatsEsp, ipsecSaDstPort=ipsecSaDstPort, ipsecGlobZeroIsakmpCookies=ipsecGlobZeroIsakmpCookies, ipsecPeerLocalAddress=ipsecPeerLocalAddress, ipsecGlobDefaultGranularity=ipsecGlobDefaultGranularity, ipsecSaSrcRange=ipsecSaSrcRange, ipsecTrRemotePort=ipsecTrRemotePort, ipsecLifeHardKb=ipsecLifeHardKb, ikePropNextChoice=ikePropNextChoice, ipsecTrAction=ipsecTrAction, ipsecPeerPreSharedKeyData=ipsecPeerPreSharedKeyData, ipsecPropAuthKeyDataIn=ipsecPropAuthKeyDataIn, ipsecPeerDefaultIpsecProposals=ipsecPeerDefaultIpsecProposals, ipsecPeerTable=ipsecPeerTable, ipsecPropAuthKeyOut=ipsecPropAuthKeyOut, ipsecGlobDefaultIkeLifeTime=ipsecGlobDefaultIkeLifeTime, ikeSaNumCerts=ikeSaNumCerts, ipsecLifeHardSec=ipsecLifeHardSec, ipsecSaPackets=ipsecSaPackets, ipsecPeerLocalId=ipsecPeerLocalId, ipsecPeerKeepAlive=ipsecPeerKeepAlive, ipsecSaBytes=ipsecSaBytes, ipsecPropBoolOp=ipsecPropBoolOp, ipsecSaSeconds=ipsecSaSeconds, ipsecSaPeerIp=ipsecSaPeerIp, ipsecPeerPfsGroup=ipsecPeerPfsGroup, private=private, ipsecPropAuthAlg=ipsecPropAuthAlg, ipsecGlobDefaultAuthMethod=ipsecGlobDefaultAuthMethod, ipsecSaEncAlg=ipsecSaEncAlg, ipsecGlobNoInitialContact=ipsecGlobNoInitialContact, ipsecTrRemoteRange=ipsecTrRemoteRange, ipsecPropEncKeyDataOut=ipsecPropEncKeyDataOut, ipsecGlobIgnoreCrPayloads=ipsecGlobIgnoreCrPayloads, ipsecStatsFragPkt=ipsecStatsFragPkt, ipsecGlobDefaultIpsecProposal=ipsecGlobDefaultIpsecProposal, ipsecTrIndex=ipsecTrIndex, ipsecPublicKeyTable=ipsecPublicKeyTable, ipsecGlobRetryTimeoutMaxsec=ipsecGlobRetryTimeoutMaxsec, ipsecStatsCurrentIpsecSas=ipsecStatsCurrentIpsecSas, ipsecStatsDrop=ipsecStatsDrop, ipsecTrProto=ipsecTrProto, ipsecStatsAh=ipsecStatsAh)
