#
# PySNMP MIB module VPLS-BGP-DRAFT-01-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VPLS-BGP-DRAFT-01-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:28:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
jnxExperiment, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxExperiment")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
transmission, ObjectIdentity, Unsigned32, MibIdentifier, IpAddress, Integer32, ModuleIdentity, TimeTicks, Gauge32, iso, NotificationType, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "transmission", "ObjectIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32", "iso", "NotificationType", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention, RowStatus, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "StorageType")
jnxVplsPwBindIndex, jnxVplsConfigIndex = mibBuilder.importSymbols("VPLS-GENERIC-DRAFT-01-MIB", "jnxVplsPwBindIndex", "jnxVplsConfigIndex")
jnxVplsBgpDraft01MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 10))
jnxVplsBgpDraft01MIB.setRevisions(('2006-12-06 12:00',))
if mibBuilder.loadTexts: jnxVplsBgpDraft01MIB.setLastUpdated('200612061200Z')
if mibBuilder.loadTexts: jnxVplsBgpDraft01MIB.setOrganization('Layer 2 Virtual Private Networks (L2VPN) Working Group')
jnxVplsBgpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1))
jnxVplsBgpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 10, 2))
jnxVplsBgpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 1), )
if mibBuilder.loadTexts: jnxVplsBgpConfigTable.setStatus('current')
jnxVplsBgpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 1, 1), ).setIndexNames((0, "VPLS-GENERIC-DRAFT-01-MIB", "jnxVplsConfigIndex"))
if mibBuilder.loadTexts: jnxVplsBgpConfigEntry.setStatus('current')
jnxVplsBgpConfigVERangeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpConfigVERangeSize.setStatus('current')
jnxVplsBgpVETable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2), )
if mibBuilder.loadTexts: jnxVplsBgpVETable.setStatus('current')
jnxVplsBgpVEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1), ).setIndexNames((0, "VPLS-GENERIC-DRAFT-01-MIB", "jnxVplsConfigIndex"), (0, "VPLS-BGP-DRAFT-01-MIB", "jnxVplsBgpVEId"))
if mibBuilder.loadTexts: jnxVplsBgpVEEntry.setStatus('current')
jnxVplsBgpVEId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxVplsBgpVEId.setStatus('current')
jnxVplsBgpVEName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpVEName.setStatus('current')
jnxVplsBgpVEPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpVEPreference.setStatus('current')
jnxVplsBgpVERowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpVERowStatus.setStatus('current')
jnxVplsBgpVEStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1, 6), StorageType().clone('volatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpVEStorageType.setStatus('current')
jnxVplsBgpPwBindTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 3), )
if mibBuilder.loadTexts: jnxVplsBgpPwBindTable.setStatus('current')
jnxVplsBgpPwBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 3, 1), ).setIndexNames((0, "VPLS-GENERIC-DRAFT-01-MIB", "jnxVplsConfigIndex"), (0, "VPLS-GENERIC-DRAFT-01-MIB", "jnxVplsPwBindIndex"))
if mibBuilder.loadTexts: jnxVplsBgpPwBindEntry.setStatus('current')
jnxVplsBgpPwBindLocalVEId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpPwBindLocalVEId.setStatus('current')
jnxVplsBgpPwBindRemoteVEId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpPwBindRemoteVEId.setStatus('current')
mibBuilder.exportSymbols("VPLS-BGP-DRAFT-01-MIB", jnxVplsBgpObjects=jnxVplsBgpObjects, jnxVplsBgpPwBindEntry=jnxVplsBgpPwBindEntry, jnxVplsBgpConfigTable=jnxVplsBgpConfigTable, jnxVplsBgpVEName=jnxVplsBgpVEName, jnxVplsBgpVERowStatus=jnxVplsBgpVERowStatus, jnxVplsBgpVEPreference=jnxVplsBgpVEPreference, jnxVplsBgpConformance=jnxVplsBgpConformance, PYSNMP_MODULE_ID=jnxVplsBgpDraft01MIB, jnxVplsBgpVETable=jnxVplsBgpVETable, jnxVplsBgpPwBindTable=jnxVplsBgpPwBindTable, jnxVplsBgpVEStorageType=jnxVplsBgpVEStorageType, jnxVplsBgpPwBindLocalVEId=jnxVplsBgpPwBindLocalVEId, jnxVplsBgpDraft01MIB=jnxVplsBgpDraft01MIB, jnxVplsBgpConfigVERangeSize=jnxVplsBgpConfigVERangeSize, jnxVplsBgpPwBindRemoteVEId=jnxVplsBgpPwBindRemoteVEId, jnxVplsBgpConfigEntry=jnxVplsBgpConfigEntry, jnxVplsBgpVEId=jnxVplsBgpVEId, jnxVplsBgpVEEntry=jnxVplsBgpVEEntry)
