#
# PySNMP MIB module HPN-ICF-QOS-PROFILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-QOS-PROFILE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:28:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Integer32, Bits, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Counter64, Counter32, TimeTicks, Gauge32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "Bits", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Counter64", "Counter32", "TimeTicks", "Gauge32", "ObjectIdentity", "iso")
TruthValue, MacAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "RowStatus", "DisplayString")
hpnicfQosProfile = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17))
if mibBuilder.loadTexts: hpnicfQosProfile.setLastUpdated('200407060000Z')
if mibBuilder.loadTexts: hpnicfQosProfile.setOrganization('')
class HpnicfQoSDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invalid", 0), ("input", 1), ("ouput", 2))

hpnicfQoSProfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1))
hpnicfQoSProf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 1))
hpnicfQoSProfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfQoSProfTable.setStatus('current')
hpnicfQoSProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfIndex"))
if mibBuilder.loadTexts: hpnicfQoSProfEntry.setStatus('current')
hpnicfQoSProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpnicfQoSProfIndex.setStatus('current')
hpnicfQoSProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSProfName.setStatus('current')
hpnicfQoSProfActionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSProfActionNumber.setStatus('current')
hpnicfQoSProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSProfRowStatus.setStatus('current')
hpnicfQoSAction = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2))
hpnicfQoSTrafficLimitTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfQoSTrafficLimitTable.setStatus('current')
hpnicfQoSTrafficLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtProfIndex"), (0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtActionIndex"))
if mibBuilder.loadTexts: hpnicfQoSTrafficLimitEntry.setStatus('current')
hpnicfQoSTrafLmtProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpnicfQoSTrafLmtProfIndex.setStatus('current')
hpnicfQoSTrafLmtActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpnicfQoSTrafLmtActionIndex.setStatus('current')
hpnicfQoSTrafLmtDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 3), HpnicfQoSDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtDirection.setStatus('current')
hpnicfQoSTrafLmtUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtUserAclNum.setStatus('current')
hpnicfQoSTrafLmtUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtUserAclRule.setStatus('current')
hpnicfQoSTrafLmtIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtIpAclNum.setStatus('current')
hpnicfQoSTrafLmtIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtIpAclRule.setStatus('current')
hpnicfQoSTrafLmtLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtLinkAclNum.setStatus('current')
hpnicfQoSTrafLmtLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtLinkAclRule.setStatus('current')
hpnicfQoSTrafLmtTargetRateMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtTargetRateMbps.setStatus('current')
hpnicfQoSTrafLmtTargetRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtTargetRateKbps.setStatus('current')
hpnicfQoSTrafLmtPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 8388608), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtPeakRate.setStatus('current')
hpnicfQoSTrafLmtCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34120000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtCIR.setStatus('current')
hpnicfQoSTrafLmtCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtCBS.setStatus('current')
hpnicfQoSTrafLmtEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 268435455))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtEBS.setStatus('current')
hpnicfQoSTrafLmtPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34120000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtPIR.setStatus('current')
hpnicfQoSTrafLmtConformLocalPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtConformLocalPre.setStatus('current')
hpnicfQoSTrafLmtConformActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("remark-cos", 1), ("remark-drop-priority", 2), ("remark-cos-drop-priority", 3), ("remark-policed-service", 4), ("remark-dscp", 5))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtConformActionType.setStatus('current')
hpnicfQoSTrafLmtExceedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("forward", 1), ("drop", 2), ("remarkdscp", 3), ("exceed-cos", 4))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtExceedActionType.setStatus('current')
hpnicfQoSTrafLmtExceedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtExceedDscp.setStatus('current')
hpnicfQoSTrafLmtExceedCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtExceedCos.setStatus('current')
hpnicfQoSTrafLmtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtRowStatus.setStatus('current')
hpnicfQoSTrafLmtConformCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtConformCos.setStatus('current')
hpnicfQoSTrafLmtConformDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafLmtConformDscp.setStatus('current')
hpnicfQoSTrafficPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfQoSTrafficPriorityTable.setStatus('current')
hpnicfQoSTrafficPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioProfIndex"), (0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioActionIndex"))
if mibBuilder.loadTexts: hpnicfQoSTrafficPriorityEntry.setStatus('current')
hpnicfQoSTrafPrioProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpnicfQoSTrafPrioProfIndex.setStatus('current')
hpnicfQoSTrafPrioActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpnicfQoSTrafPrioActionIndex.setStatus('current')
hpnicfQoSTrafPrioDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 3), HpnicfQoSDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioDirection.setStatus('current')
hpnicfQoSTrafPrioUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioUserAclNum.setStatus('current')
hpnicfQoSTrafPrioUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioUserAclRule.setStatus('current')
hpnicfQoSTrafPrioIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioIpAclNum.setStatus('current')
hpnicfQoSTrafPrioIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioIpAclRule.setStatus('current')
hpnicfQoSTrafPrioLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioLinkAclNum.setStatus('current')
hpnicfQoSTrafPrioLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioLinkAclRule.setStatus('current')
hpnicfQoSTrafPrioDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioDscp.setStatus('current')
hpnicfQoSTrafPrioIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioIpPre.setStatus('current')
hpnicfQoSTrafPrioIpPreFromCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 12), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioIpPreFromCos.setStatus('current')
hpnicfQoSTrafPrioCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioCos.setStatus('current')
hpnicfQoSTrafPrioCosFromIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 14), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioCosFromIpPre.setStatus('current')
hpnicfQoSTrafPrioLocalPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioLocalPre.setStatus('current')
hpnicfQoSTrafPrioPolicedServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("trust-dscp", 2), ("new-dscp", 3), ("untrusted", 4))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioPolicedServiceType.setStatus('current')
hpnicfQoSTrafPrioPolicedServiceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioPolicedServiceDscp.setStatus('current')
hpnicfQoSTrafPrioPolicedServiceExp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioPolicedServiceExp.setStatus('current')
hpnicfQoSTrafPrioPolicedServiceCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioPolicedServiceCos.setStatus('current')
hpnicfQoSTrafPrioPolicedServiceLoaclPre = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioPolicedServiceLoaclPre.setStatus('current')
hpnicfQoSTrafPrioPolicedServiceDropPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioPolicedServiceDropPriority.setStatus('current')
hpnicfQoSTrafPrioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 2, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafPrioRowStatus.setStatus('current')
hpnicfQoSTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3), )
if mibBuilder.loadTexts: hpnicfQoSTrafficFilterTable.setStatus('current')
hpnicfQoSTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafFilterProfIndex"), (0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafFilterActionIndex"))
if mibBuilder.loadTexts: hpnicfQoSTrafficFilterEntry.setStatus('current')
hpnicfQoSTrafFilterProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpnicfQoSTrafFilterProfIndex.setStatus('current')
hpnicfQoSTrafFilterActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpnicfQoSTrafFilterActionIndex.setStatus('current')
hpnicfQoSTrafFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1, 3), HpnicfQoSDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafFilterDirection.setStatus('current')
hpnicfQoSTrafFilterUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafFilterUserAclNum.setStatus('current')
hpnicfQoSTrafFilterUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafFilterUserAclRule.setStatus('current')
hpnicfQoSTrafFilterIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafFilterIpAclNum.setStatus('current')
hpnicfQoSTrafFilterIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafFilterIpAclRule.setStatus('current')
hpnicfQoSTrafFilterLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafFilterLinkAclNum.setStatus('current')
hpnicfQoSTrafFilterLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafFilterLinkAclRule.setStatus('current')
hpnicfQoSTrafFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 2, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSTrafFilterRowStatus.setStatus('current')
hpnicfQoSProfPortMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3))
hpnicfQoSProfPortMappingTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 1), )
if mibBuilder.loadTexts: hpnicfQoSProfPortMappingTable.setStatus('current')
hpnicfQoSProfPortMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 1, 1), ).setIndexNames((0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfPortMappingIfIndex"), (0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfPortMappingProfIndex"))
if mibBuilder.loadTexts: hpnicfQoSProfPortMappingEntry.setStatus('current')
hpnicfQoSProfPortMappingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfQoSProfPortMappingIfIndex.setStatus('current')
hpnicfQoSProfPortMappingProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpnicfQoSProfPortMappingProfIndex.setStatus('current')
hpnicfQoSProfPortMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSProfPortMappingRowStatus.setStatus('current')
hpnicfQoSProfPortMappingModeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 2), )
if mibBuilder.loadTexts: hpnicfQoSProfPortMappingModeTable.setStatus('current')
hpnicfQoSProfPortMappingModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 2, 1), ).setIndexNames((0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfPortMappingModeIfIndex"))
if mibBuilder.loadTexts: hpnicfQoSProfPortMappingModeEntry.setStatus('current')
hpnicfQoSProfPortMappingModeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfQoSProfPortMappingModeIfIndex.setStatus('current')
hpnicfQoSProfPortMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user-based", 1), ("port-based", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQoSProfPortMappingMode.setStatus('current')
hpnicfQoSProfDynPortMappingTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 3), )
if mibBuilder.loadTexts: hpnicfQoSProfDynPortMappingTable.setStatus('current')
hpnicfQoSProfDynPortMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 3, 1), ).setIndexNames((0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfDynPortMappingIfIndex"), (0, "HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfDynPortMappingUserSrcMAC"))
if mibBuilder.loadTexts: hpnicfQoSProfDynPortMappingEntry.setStatus('current')
hpnicfQoSProfDynPortMappingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfQoSProfDynPortMappingIfIndex.setStatus('current')
hpnicfQoSProfDynPortMappingUserSrcMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpnicfQoSProfDynPortMappingUserSrcMAC.setStatus('current')
hpnicfQoSProfDynPortMappingUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSProfDynPortMappingUserName.setStatus('current')
hpnicfQoSProfDynPortMappingUserIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSProfDynPortMappingUserIPAddr.setStatus('current')
hpnicfQoSProfDynPortMappingUserVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSProfDynPortMappingUserVLANID.setStatus('current')
hpnicfQoSProfDynPortMappingUserProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 1, 3, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSProfDynPortMappingUserProfName.setStatus('current')
hpnicfQoSProfPortMappingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 2))
hpnicfQoSProfPortMappingError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 2, 1))
if mibBuilder.loadTexts: hpnicfQoSProfPortMappingError.setStatus('current')
hpnicfQoSProfMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 3))
hpnicfQoSProfMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 3, 1))
hpnicfQoSProfMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 3, 1, 1)).setObjects(("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfGroup"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSActionGroup"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfPortMappingGroup"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfPortMappingTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfQoSProfMibCompliance = hpnicfQoSProfMibCompliance.setStatus('current')
hpnicfQoSProfMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 3, 2))
hpnicfQoSProfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 3, 2, 1)).setObjects(("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfName"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfActionNumber"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfQoSProfGroup = hpnicfQoSProfGroup.setStatus('current')
hpnicfQoSActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 3, 2, 2)).setObjects(("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtDirection"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtUserAclNum"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtUserAclRule"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtIpAclNum"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtIpAclRule"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtLinkAclNum"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtLinkAclRule"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtTargetRateMbps"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtTargetRateKbps"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtPeakRate"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtCIR"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtCBS"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtEBS"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtPIR"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtConformLocalPre"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtConformActionType"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtExceedActionType"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtExceedDscp"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtExceedCos"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtRowStatus"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtConformCos"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafLmtConformDscp"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioDirection"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioUserAclNum"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioUserAclRule"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioIpAclNum"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioIpAclRule"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioLinkAclNum"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioLinkAclRule"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioDscp"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioIpPre"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioIpPreFromCos"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioCos"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioCosFromIpPre"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioLocalPre"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioPolicedServiceType"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioPolicedServiceDscp"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioPolicedServiceExp"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioPolicedServiceCos"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioPolicedServiceLoaclPre"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioPolicedServiceDropPriority"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafPrioRowStatus"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafFilterDirection"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafFilterUserAclNum"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafFilterUserAclRule"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafFilterIpAclNum"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafFilterIpAclRule"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafFilterLinkAclNum"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafFilterLinkAclRule"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSTrafFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfQoSActionGroup = hpnicfQoSActionGroup.setStatus('current')
hpnicfQoSProfPortMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 3, 2, 3)).setObjects(("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfPortMappingRowStatus"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfPortMappingMode"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfDynPortMappingUserName"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfDynPortMappingUserIPAddr"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfDynPortMappingUserVLANID"), ("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfDynPortMappingUserProfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfQoSProfPortMappingGroup = hpnicfQoSProfPortMappingGroup.setStatus('current')
hpnicfQoSProfPortMappingTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 17, 3, 2, 4)).setObjects(("HPN-ICF-QOS-PROFILE-MIB", "hpnicfQoSProfPortMappingError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfQoSProfPortMappingTrapsGroup = hpnicfQoSProfPortMappingTrapsGroup.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-QOS-PROFILE-MIB", hpnicfQoSTrafficPriorityTable=hpnicfQoSTrafficPriorityTable, hpnicfQoSTrafLmtEBS=hpnicfQoSTrafLmtEBS, hpnicfQoSProfPortMappingMode=hpnicfQoSProfPortMappingMode, hpnicfQoSProfDynPortMappingIfIndex=hpnicfQoSProfDynPortMappingIfIndex, hpnicfQoSTrafPrioCosFromIpPre=hpnicfQoSTrafPrioCosFromIpPre, hpnicfQoSTrafFilterProfIndex=hpnicfQoSTrafFilterProfIndex, hpnicfQoSTrafLmtActionIndex=hpnicfQoSTrafLmtActionIndex, hpnicfQoSTrafPrioIpAclNum=hpnicfQoSTrafPrioIpAclNum, hpnicfQoSTrafPrioPolicedServiceDscp=hpnicfQoSTrafPrioPolicedServiceDscp, hpnicfQoSProfPortMappingGroup=hpnicfQoSProfPortMappingGroup, hpnicfQoSTrafPrioActionIndex=hpnicfQoSTrafPrioActionIndex, hpnicfQoSTrafFilterUserAclNum=hpnicfQoSTrafFilterUserAclNum, hpnicfQoSProfTable=hpnicfQoSProfTable, hpnicfQoSProfPortMappingIfIndex=hpnicfQoSProfPortMappingIfIndex, hpnicfQoSProfPortMapping=hpnicfQoSProfPortMapping, hpnicfQoSTrafLmtConformLocalPre=hpnicfQoSTrafLmtConformLocalPre, hpnicfQoSTrafFilterDirection=hpnicfQoSTrafFilterDirection, hpnicfQoSTrafPrioPolicedServiceDropPriority=hpnicfQoSTrafPrioPolicedServiceDropPriority, hpnicfQoSProfPortMappingTrapsGroup=hpnicfQoSProfPortMappingTrapsGroup, PYSNMP_MODULE_ID=hpnicfQosProfile, hpnicfQoSProfIndex=hpnicfQoSProfIndex, hpnicfQoSTrafPrioIpPre=hpnicfQoSTrafPrioIpPre, hpnicfQoSTrafPrioUserAclNum=hpnicfQoSTrafPrioUserAclNum, hpnicfQoSTrafficLimitTable=hpnicfQoSTrafficLimitTable, hpnicfQoSTrafLmtLinkAclNum=hpnicfQoSTrafLmtLinkAclNum, hpnicfQoSProfMibConformance=hpnicfQoSProfMibConformance, hpnicfQoSTrafLmtExceedDscp=hpnicfQoSTrafLmtExceedDscp, hpnicfQoSTrafLmtIpAclNum=hpnicfQoSTrafLmtIpAclNum, hpnicfQoSTrafLmtExceedActionType=hpnicfQoSTrafLmtExceedActionType, hpnicfQoSTrafficFilterEntry=hpnicfQoSTrafficFilterEntry, hpnicfQoSTrafFilterIpAclNum=hpnicfQoSTrafFilterIpAclNum, HpnicfQoSDirection=HpnicfQoSDirection, hpnicfQoSTrafLmtConformCos=hpnicfQoSTrafLmtConformCos, hpnicfQoSTrafLmtTargetRateKbps=hpnicfQoSTrafLmtTargetRateKbps, hpnicfQoSProfActionNumber=hpnicfQoSProfActionNumber, hpnicfQoSTrafPrioRowStatus=hpnicfQoSTrafPrioRowStatus, hpnicfQoSProfPortMappingModeIfIndex=hpnicfQoSProfPortMappingModeIfIndex, hpnicfQoSTrafLmtUserAclNum=hpnicfQoSTrafLmtUserAclNum, hpnicfQoSProfPortMappingProfIndex=hpnicfQoSProfPortMappingProfIndex, hpnicfQoSTrafficPriorityEntry=hpnicfQoSTrafficPriorityEntry, hpnicfQoSTrafFilterUserAclRule=hpnicfQoSTrafFilterUserAclRule, hpnicfQoSAction=hpnicfQoSAction, hpnicfQosProfile=hpnicfQosProfile, hpnicfQoSTrafficFilterTable=hpnicfQoSTrafficFilterTable, hpnicfQoSProfPortMappingTable=hpnicfQoSProfPortMappingTable, hpnicfQoSProfName=hpnicfQoSProfName, hpnicfQoSTrafLmtRowStatus=hpnicfQoSTrafLmtRowStatus, hpnicfQoSTrafPrioPolicedServiceCos=hpnicfQoSTrafPrioPolicedServiceCos, hpnicfQoSTrafFilterActionIndex=hpnicfQoSTrafFilterActionIndex, hpnicfQoSTrafPrioLinkAclNum=hpnicfQoSTrafPrioLinkAclNum, hpnicfQoSTrafPrioDscp=hpnicfQoSTrafPrioDscp, hpnicfQoSTrafficLimitEntry=hpnicfQoSTrafficLimitEntry, hpnicfQoSTrafPrioIpAclRule=hpnicfQoSTrafPrioIpAclRule, hpnicfQoSProfDynPortMappingTable=hpnicfQoSProfDynPortMappingTable, hpnicfQoSTrafPrioPolicedServiceExp=hpnicfQoSTrafPrioPolicedServiceExp, hpnicfQoSProfPortMappingEntry=hpnicfQoSProfPortMappingEntry, hpnicfQoSTrafLmtProfIndex=hpnicfQoSTrafLmtProfIndex, hpnicfQoSProfMibCompliances=hpnicfQoSProfMibCompliances, hpnicfQoSTrafPrioPolicedServiceLoaclPre=hpnicfQoSTrafPrioPolicedServiceLoaclPre, hpnicfQoSProfPortMappingModeTable=hpnicfQoSProfPortMappingModeTable, hpnicfQoSProfDynPortMappingUserIPAddr=hpnicfQoSProfDynPortMappingUserIPAddr, hpnicfQoSTrafLmtDirection=hpnicfQoSTrafLmtDirection, hpnicfQoSTrafPrioDirection=hpnicfQoSTrafPrioDirection, hpnicfQoSProfObjects=hpnicfQoSProfObjects, hpnicfQoSTrafPrioProfIndex=hpnicfQoSTrafPrioProfIndex, hpnicfQoSTrafLmtPIR=hpnicfQoSTrafLmtPIR, hpnicfQoSTrafLmtCBS=hpnicfQoSTrafLmtCBS, hpnicfQoSTrafLmtExceedCos=hpnicfQoSTrafLmtExceedCos, hpnicfQoSTrafFilterLinkAclNum=hpnicfQoSTrafFilterLinkAclNum, hpnicfQoSTrafPrioLinkAclRule=hpnicfQoSTrafPrioLinkAclRule, hpnicfQoSProfPortMappingRowStatus=hpnicfQoSProfPortMappingRowStatus, hpnicfQoSProfDynPortMappingEntry=hpnicfQoSProfDynPortMappingEntry, hpnicfQoSTrafFilterIpAclRule=hpnicfQoSTrafFilterIpAclRule, hpnicfQoSProf=hpnicfQoSProf, hpnicfQoSTrafFilterLinkAclRule=hpnicfQoSTrafFilterLinkAclRule, hpnicfQoSProfDynPortMappingUserVLANID=hpnicfQoSProfDynPortMappingUserVLANID, hpnicfQoSProfMibGroups=hpnicfQoSProfMibGroups, hpnicfQoSTrafLmtUserAclRule=hpnicfQoSTrafLmtUserAclRule, hpnicfQoSProfDynPortMappingUserSrcMAC=hpnicfQoSProfDynPortMappingUserSrcMAC, hpnicfQoSProfDynPortMappingUserName=hpnicfQoSProfDynPortMappingUserName, hpnicfQoSProfDynPortMappingUserProfName=hpnicfQoSProfDynPortMappingUserProfName, hpnicfQoSActionGroup=hpnicfQoSActionGroup, hpnicfQoSTrafPrioIpPreFromCos=hpnicfQoSTrafPrioIpPreFromCos, hpnicfQoSTrafPrioUserAclRule=hpnicfQoSTrafPrioUserAclRule, hpnicfQoSTrafLmtPeakRate=hpnicfQoSTrafLmtPeakRate, hpnicfQoSProfRowStatus=hpnicfQoSProfRowStatus, hpnicfQoSProfPortMappingError=hpnicfQoSProfPortMappingError, hpnicfQoSProfEntry=hpnicfQoSProfEntry, hpnicfQoSTrafLmtCIR=hpnicfQoSTrafLmtCIR, hpnicfQoSProfPortMappingModeEntry=hpnicfQoSProfPortMappingModeEntry, hpnicfQoSProfMibCompliance=hpnicfQoSProfMibCompliance, hpnicfQoSTrafPrioCos=hpnicfQoSTrafPrioCos, hpnicfQoSTrafFilterRowStatus=hpnicfQoSTrafFilterRowStatus, hpnicfQoSTrafLmtIpAclRule=hpnicfQoSTrafLmtIpAclRule, hpnicfQoSTrafLmtLinkAclRule=hpnicfQoSTrafLmtLinkAclRule, hpnicfQoSTrafLmtConformActionType=hpnicfQoSTrafLmtConformActionType, hpnicfQoSTrafLmtTargetRateMbps=hpnicfQoSTrafLmtTargetRateMbps, hpnicfQoSTrafLmtConformDscp=hpnicfQoSTrafLmtConformDscp, hpnicfQoSTrafPrioPolicedServiceType=hpnicfQoSTrafPrioPolicedServiceType, hpnicfQoSProfGroup=hpnicfQoSProfGroup, hpnicfQoSProfPortMappingTraps=hpnicfQoSProfPortMappingTraps, hpnicfQoSTrafPrioLocalPre=hpnicfQoSTrafPrioLocalPre)
