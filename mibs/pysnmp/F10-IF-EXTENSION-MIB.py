#
# PySNMP MIB module F10-IF-EXTENSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-IF-EXTENSION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:57:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, iso, Bits, Integer32, MibIdentifier, Gauge32, Unsigned32, NotificationType, IpAddress, ModuleIdentity, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Bits", "Integer32", "MibIdentifier", "Gauge32", "Unsigned32", "NotificationType", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
DisplayString, TruthValue, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "TimeStamp")
f10IfExtensionMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 11))
f10IfExtensionMib.setRevisions(('2014-08-12 12:00', '2012-03-06 12:00', '2010-08-11 12:00', '2010-08-10 12:00',))
if mibBuilder.loadTexts: f10IfExtensionMib.setLastUpdated('201203061200Z')
if mibBuilder.loadTexts: f10IfExtensionMib.setOrganization('Dell Inc')
f10IfExtensionMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1))
f10IfExtensionParams = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1))
f10IfExtensionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2))
f10IfTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1), )
if mibBuilder.loadTexts: f10IfTable.setStatus('current')
f10IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: f10IfEntry.setStatus('current')
f10IfIpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(594, 9252))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f10IfIpMtu.setStatus('current')
f10IfDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f10IfDuplexMode.setStatus('current')
f10IfQueueingStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfQueueingStrategy.setStatus('current')
f10IfRxFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f10IfRxFlowCtrl.setStatus('current')
f10IfTxFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f10IfTxFlowCtrl.setStatus('current')
f10IfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 241))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f10IfDescr.setStatus('current')
f10IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f10IfAdminStatus.setStatus('current')
f10IfRateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 299))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f10IfRateInterval.setStatus('current')
f10IfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000))).clone(namedValues=NamedValues(("auto", 1), ("tenMbps", 10), ("hundredMbps", 100), ("thousandMbps", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f10IfSpeed.setStatus('current')
f10IfPortListBitPos = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfPortListBitPos.setStatus('current')
f10IfStaticsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1), )
if mibBuilder.loadTexts: f10IfStaticsTable.setStatus('current')
f10IfStaticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: f10IfStaticsEntry.setStatus('current')
f10IfInVlanPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfInVlanPkts.setStatus('current')
f10IfIn64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfIn64BytePkts.setStatus('current')
f10ifIn65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10ifIn65To127BytePkts.setStatus('current')
f10IfIn128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfIn128To255BytePkts.setStatus('current')
f10IfIn256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfIn256To511BytePkts.setStatus('current')
f10IfIn512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfIn512To1023BytePkts.setStatus('current')
f10IfInOver1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfInOver1023BytePkts.setStatus('current')
f10IfInThrottles = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfInThrottles.setStatus('current')
f10IfInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfInRunts.setStatus('current')
f10IfInGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfInGiants.setStatus('current')
f10IfInCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfInCRC.setStatus('current')
f10IfInOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfInOverruns.setStatus('current')
f10IfOutVlanPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOutVlanPkts.setStatus('current')
f10IfOutUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOutUnderruns.setStatus('current')
f10IfOutUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOutUnicasts.setStatus('current')
f10IfOutCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOutCollisions.setStatus('current')
f10IfOutWredDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOutWredDrops.setStatus('current')
f10IfOut64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOut64BytePkts.setStatus('current')
f10IfOut65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOut65To127BytePkts.setStatus('current')
f10IfOut128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOut128To255BytePkts.setStatus('current')
f10IfOut256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOut256To511BytePkts.setStatus('current')
f10IfOut512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOut512To1023BytePkts.setStatus('current')
f10IfOutOver1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOutOver1023BytePkts.setStatus('current')
f10IfOutThrottles = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOutThrottles.setStatus('current')
f10IfLastDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfLastDiscontinuityTime.setStatus('current')
f10IfInCentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfInCentRate.setStatus('current')
f10IfOutCentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 11, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IfOutCentRate.setStatus('current')
f10IfExtensionMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 11, 2))
f10IfExtensionMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 11, 2, 1))
f10IfExtensionMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 11, 2, 2))
f10IfExtensionMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 11, 2, 1, 1)).setObjects(("F10-IF-EXTENSION-MIB", "f10IfParamsGroup"), ("F10-IF-EXTENSION-MIB", "f10IfStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10IfExtensionMibCompliance = f10IfExtensionMibCompliance.setStatus('current')
f10IfParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 11, 2, 2, 1)).setObjects(("F10-IF-EXTENSION-MIB", "f10IfIpMtu"), ("F10-IF-EXTENSION-MIB", "f10IfDuplexMode"), ("F10-IF-EXTENSION-MIB", "f10IfQueueingStrategy"), ("F10-IF-EXTENSION-MIB", "f10IfRxFlowCtrl"), ("F10-IF-EXTENSION-MIB", "f10IfTxFlowCtrl"), ("F10-IF-EXTENSION-MIB", "f10IfDescr"), ("F10-IF-EXTENSION-MIB", "f10IfAdminStatus"), ("F10-IF-EXTENSION-MIB", "f10IfRateInterval"), ("F10-IF-EXTENSION-MIB", "f10IfSpeed"), ("F10-IF-EXTENSION-MIB", "f10IfPortListBitPos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10IfParamsGroup = f10IfParamsGroup.setStatus('current')
f10IfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 11, 2, 2, 2)).setObjects(("F10-IF-EXTENSION-MIB", "f10IfInVlanPkts"), ("F10-IF-EXTENSION-MIB", "f10IfIn64BytePkts"), ("F10-IF-EXTENSION-MIB", "f10ifIn65To127BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfIn128To255BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfIn256To511BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfIn512To1023BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfInOver1023BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfInThrottles"), ("F10-IF-EXTENSION-MIB", "f10IfInRunts"), ("F10-IF-EXTENSION-MIB", "f10IfInGiants"), ("F10-IF-EXTENSION-MIB", "f10IfInCRC"), ("F10-IF-EXTENSION-MIB", "f10IfInOverruns"), ("F10-IF-EXTENSION-MIB", "f10IfOutVlanPkts"), ("F10-IF-EXTENSION-MIB", "f10IfOutUnderruns"), ("F10-IF-EXTENSION-MIB", "f10IfOutUnicasts"), ("F10-IF-EXTENSION-MIB", "f10IfOutCollisions"), ("F10-IF-EXTENSION-MIB", "f10IfOutWredDrops"), ("F10-IF-EXTENSION-MIB", "f10IfOut64BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfOut65To127BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfOut128To255BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfOut256To511BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfOut512To1023BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfOutOver1023BytePkts"), ("F10-IF-EXTENSION-MIB", "f10IfOutThrottles"), ("F10-IF-EXTENSION-MIB", "f10IfLastDiscontinuityTime"), ("F10-IF-EXTENSION-MIB", "f10IfInCentRate"), ("F10-IF-EXTENSION-MIB", "f10IfOutCentRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10IfStatsGroup = f10IfStatsGroup.setStatus('current')
mibBuilder.exportSymbols("F10-IF-EXTENSION-MIB", f10IfOutCollisions=f10IfOutCollisions, PYSNMP_MODULE_ID=f10IfExtensionMib, f10IfIn512To1023BytePkts=f10IfIn512To1023BytePkts, f10IfInCRC=f10IfInCRC, f10IfOut65To127BytePkts=f10IfOut65To127BytePkts, f10ifIn65To127BytePkts=f10ifIn65To127BytePkts, f10IfStaticsTable=f10IfStaticsTable, f10IfInThrottles=f10IfInThrottles, f10IfInCentRate=f10IfInCentRate, f10IfOutUnicasts=f10IfOutUnicasts, f10IfOut512To1023BytePkts=f10IfOut512To1023BytePkts, f10IfIn128To255BytePkts=f10IfIn128To255BytePkts, f10IfExtensionMibCompliance=f10IfExtensionMibCompliance, f10IfQueueingStrategy=f10IfQueueingStrategy, f10IfOutOver1023BytePkts=f10IfOutOver1023BytePkts, f10IfExtensionMibGroups=f10IfExtensionMibGroups, f10IfRxFlowCtrl=f10IfRxFlowCtrl, f10IfIn64BytePkts=f10IfIn64BytePkts, f10IfOutVlanPkts=f10IfOutVlanPkts, f10IfInOver1023BytePkts=f10IfInOver1023BytePkts, f10IfOut128To255BytePkts=f10IfOut128To255BytePkts, f10IfOut256To511BytePkts=f10IfOut256To511BytePkts, f10IfInVlanPkts=f10IfInVlanPkts, f10IfExtensionMib=f10IfExtensionMib, f10IfStaticsEntry=f10IfStaticsEntry, f10IfIn256To511BytePkts=f10IfIn256To511BytePkts, f10IfOutCentRate=f10IfOutCentRate, f10IfInOverruns=f10IfInOverruns, f10IfOut64BytePkts=f10IfOut64BytePkts, f10IfSpeed=f10IfSpeed, f10IfExtensionParams=f10IfExtensionParams, f10IfTable=f10IfTable, f10IfExtensionMibObject=f10IfExtensionMibObject, f10IfRateInterval=f10IfRateInterval, f10IfOutThrottles=f10IfOutThrottles, f10IfExtensionMibConformance=f10IfExtensionMibConformance, f10IfExtensionStats=f10IfExtensionStats, f10IfInGiants=f10IfInGiants, f10IfIpMtu=f10IfIpMtu, f10IfEntry=f10IfEntry, f10IfPortListBitPos=f10IfPortListBitPos, f10IfLastDiscontinuityTime=f10IfLastDiscontinuityTime, f10IfAdminStatus=f10IfAdminStatus, f10IfExtensionMibCompliances=f10IfExtensionMibCompliances, f10IfParamsGroup=f10IfParamsGroup, f10IfOutWredDrops=f10IfOutWredDrops, f10IfStatsGroup=f10IfStatsGroup, f10IfDuplexMode=f10IfDuplexMode, f10IfOutUnderruns=f10IfOutUnderruns, f10IfDescr=f10IfDescr, f10IfTxFlowCtrl=f10IfTxFlowCtrl, f10IfInRunts=f10IfInRunts)
