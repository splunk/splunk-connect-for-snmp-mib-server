#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMISDN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:26:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, Unsigned32, ObjectIdentity, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Counter64, Counter32, MibIdentifier, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Unsigned32", "ObjectIdentity", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Counter64", "Counter32", "MibIdentifier", "ModuleIdentity", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ncm_isdn, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-isdn")
ncmPRIPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000), )
if mibBuilder.loadTexts: ncmPRIPortConfigTable.setStatus('mandatory')
ncmPRIPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIPortNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIPortLineIndex"))
if mibBuilder.loadTexts: ncmPRIPortConfigEntry.setStatus('mandatory')
ncmPRIPortNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIPortNIDIndex.setStatus('mandatory')
ncmPRIPortLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIPortLineIndex.setStatus('mandatory')
ncmPRIPortInService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortInService.setStatus('mandatory')
ncmPRIPortNFASMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-nFas", 1), ("nFas", 2), ("nFas-on-4", 3), ("nFas-w-D", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortNFASMode.setStatus('mandatory')
ncmPRIPortDChanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortDChanMode.setStatus('mandatory')
ncmPRIPortDChanBits = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chan-8-Bit", 1), ("chan-7-Bit", 2), ("chan-6-Bit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortDChanBits.setStatus('mandatory')
ncmPRIPortTimeslotMap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortTimeslotMap.setStatus('mandatory')
ncmPRIPortSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sw-Unspecified", 1), ("sw-Att-4Ess", 2), ("sw-Att-5Ess", 3), ("sw-Att-Reserved", 4), ("sw-Nti-Dms100", 5), ("sw-Ni-2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortSwitchType.setStatus('mandatory')
ncmPRIPortOwnNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("unkn-NumPlan", 1), ("isdn-E164", 2), ("telephony-E163", 3), ("private", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortOwnNumPlan.setStatus('mandatory')
ncmPRIPortOwnNumType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("unkn-NumType", 1), ("international", 2), ("national", 3), ("local", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortOwnNumType.setStatus('mandatory')
ncmPRIPortSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-Checks", 1), ("own-Numbers", 2), ("ext-Numbers", 3), ("both-Numbers", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortSecurityLevel.setStatus('mandatory')
ncmPRIPortConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration-OK", 1), ("configuration-Error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIPortConfigStatus.setStatus('mandatory')
ncmPRIPortSetConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-Config", 1), ("not-in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortSetConfig.setStatus('mandatory')
ncmPRICallProfCallRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICallProfCallRefCount.setStatus('mandatory')
ncmPRIL2AutoEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIL2AutoEstablish.setStatus('mandatory')
ncmPRIResetCard = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset-Card", 1), ("not-in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIResetCard.setStatus('mandatory')
ncmPRICallProfileTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001), )
if mibBuilder.loadTexts: ncmPRICallProfileTable.setStatus('mandatory')
ncmPRICallProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICallProfNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICallProfLineIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICPCallProfileRef"))
if mibBuilder.loadTexts: ncmPRICallProfEntry.setStatus('mandatory')
ncmPRICallProfNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICallProfNIDIndex.setStatus('mandatory')
ncmPRICallProfLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICallProfLineIndex.setStatus('mandatory')
ncmPRICPCallProfileRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICPCallProfileRef.setStatus('mandatory')
ncmPRICallProfCallDir = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-Direction", 1), ("incoming", 2), ("outgoing", 3), ("both-Directions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfCallDir.setStatus('mandatory')
ncmPRICallProfNumOwnDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfNumOwnDigit.setStatus('mandatory')
ncmPRICallProfOwnCallNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfOwnCallNum.setStatus('mandatory')
ncmPRICallProfExtNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("unkn-NumPlan", 1), ("isdn-E164", 2), ("telephony-E163", 3), ("private", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfExtNumPlan.setStatus('mandatory')
ncmPRICallProfExtNumType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("unkn-NumType", 1), ("international", 2), ("national", 3), ("local", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfExtNumType.setStatus('mandatory')
ncmPRICallProfExtNumDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfExtNumDigit.setStatus('mandatory')
ncmPRICallProfExtCallNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfExtCallNum.setStatus('mandatory')
ncmPRICallProfTransferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9))).clone(namedValues=NamedValues(("unrestricted-digital", 8), ("restricted-digital", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfTransferMode.setStatus('mandatory')
ncmPRICallProfCallBandWth = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 19, 21, 23, 24))).clone(namedValues=NamedValues(("b1-64K", 16), ("h0-6X64K", 19), ("h11-24X64K", 21), ("h12-30X64K", 23), ("multiRate", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfCallBandWth.setStatus('mandatory')
ncmPRICallProfMultiRateCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8, 12, 23, 24, 30, 31))).clone(namedValues=NamedValues(("mR-2", 2), ("mR-4", 4), ("mR-6", 6), ("mR-8", 8), ("mR-12", 12), ("mR-23", 23), ("mR-24", 24), ("mR-30", 30), ("mR-31", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfMultiRateCnt.setStatus('mandatory')
ncmPRICallProfRateAdaptn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-Adapt", 1), ("adapt-56K", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfRateAdaptn.setStatus('mandatory')
ncmPRICallProfTestCallIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfTestCallIntvl.setStatus('mandatory')
ncmPRICallProfCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fail-Takedown-Idle", 1), ("successful-Setup", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICallProfCallStatus.setStatus('mandatory')
ncmPRICallProfCallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setup-Call", 1), ("takedown-Call", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfCallAction.setStatus('mandatory')
ncmPRICPSetCallProf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-CallProf", 1), ("not-in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICPSetCallProf.setStatus('mandatory')
ncmPRICPSetCallProfResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration-OK", 1), ("configuration-Error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPSetCallProfResp.setStatus('mandatory')
ncmPRICPCallActionResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration-OK", 1), ("configuration-Error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPCallActionResp.setStatus('mandatory')
ncmPRICallProfListTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002), )
if mibBuilder.loadTexts: ncmPRICallProfListTable.setStatus('mandatory')
ncmPRICallProfListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICPListNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICPListLineIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICPListIndex"))
if mibBuilder.loadTexts: ncmPRICallProfListEntry.setStatus('mandatory')
ncmPRICPListNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPListNIDIndex.setStatus('mandatory')
ncmPRICPListLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPListLineIndex.setStatus('mandatory')
ncmPRICPListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPListIndex.setStatus('mandatory')
ncmPRICPListValidCPRefNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPListValidCPRefNum.setStatus('mandatory')
ncmPRICurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003), )
if mibBuilder.loadTexts: ncmPRICurrentTable.setStatus('mandatory')
ncmPRICurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICurrNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICurrLineIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICurrEndType"))
if mibBuilder.loadTexts: ncmPRICurrentEntry.setStatus('mandatory')
ncmPRICurrNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrNIDIndex.setStatus('mandatory')
ncmPRICurrLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrLineIndex.setStatus('mandatory')
ncmPRICurrEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrEndType.setStatus('mandatory')
ncmPRICurrTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrTimestamp.setStatus('mandatory')
ncmPRICurrSecsInCurrIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrSecsInCurrIntvl.setStatus('mandatory')
ncmPRICurrInfoRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrInfoRx.setStatus('mandatory')
ncmPRICurrInfoTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrInfoTx.setStatus('mandatory')
ncmPRICurrCRCErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrCRCErrRx.setStatus('mandatory')
ncmPRICurrInvalidFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrInvalidFrameRx.setStatus('mandatory')
ncmPRICurrFrameAbortRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrFrameAbortRx.setStatus('mandatory')
ncmPRICurrDISCSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrDISCSRx.setStatus('mandatory')
ncmPRICurrDISCSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrDISCSTx.setStatus('mandatory')
ncmPRICurrFramerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrFramerRx.setStatus('mandatory')
ncmPRICurrFramerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrFramerTx.setStatus('mandatory')
ncmPRICurrLyr3ProtErr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrLyr3ProtErr.setStatus('mandatory')
ncmPRICurrCallSetupSent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrCallSetupSent.setStatus('mandatory')
ncmPRICurrCallSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrCallSetupSentnFail.setStatus('mandatory')
ncmPRICurrCallSetupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrCallSetupRx.setStatus('mandatory')
ncmPRICurrCallSetupRxnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrCallSetupRxnFail.setStatus('mandatory')
ncmPRICurrUnSupportMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrUnSupportMsgRx.setStatus('mandatory')
ncmPRICurrTstCalSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrTstCalSetupSentnFail.setStatus('mandatory')
ncmPRICurrValidIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrValidIntvls.setStatus('mandatory')
ncmPRICurrStatisticReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("statistic-Reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICurrStatisticReset.setStatus('mandatory')
ncmPRIIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004), )
if mibBuilder.loadTexts: ncmPRIIntervalTable.setStatus('mandatory')
ncmPRIIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIntvlNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIntvlLineIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIntvlEndType"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIntvlIndex"))
if mibBuilder.loadTexts: ncmPRIIntervalEntry.setStatus('mandatory')
ncmPRIntvlNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlNIDIndex.setStatus('mandatory')
ncmPRIntvlLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlLineIndex.setStatus('mandatory')
ncmPRIntvlEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlEndType.setStatus('mandatory')
ncmPRIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlIndex.setStatus('mandatory')
ncmPRIntvlTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlTimestamp.setStatus('mandatory')
ncmPRIntvlSecsInCurrIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlSecsInCurrIntvl.setStatus('mandatory')
ncmPRIntvlInfoRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlInfoRx.setStatus('mandatory')
ncmPRIntvlInfoTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlInfoTx.setStatus('mandatory')
ncmPRIntvlCRCErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlCRCErrRx.setStatus('mandatory')
ncmPRIntvlInvalidFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlInvalidFrameRx.setStatus('mandatory')
ncmPRIntvlFrameAbortRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlFrameAbortRx.setStatus('mandatory')
ncmPRIntvlDISCSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlDISCSRx.setStatus('mandatory')
ncmPRIntvlDISCSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlDISCSTx.setStatus('mandatory')
ncmPRIntvlFramerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlFramerRx.setStatus('mandatory')
ncmPRIntvlFramerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlFramerTx.setStatus('mandatory')
ncmPRIntvlLyr3ProtErr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlLyr3ProtErr.setStatus('mandatory')
ncmPRIntvlCallSetupSent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlCallSetupSent.setStatus('mandatory')
ncmPRIntvlCallSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlCallSetupSentnFail.setStatus('mandatory')
ncmPRIntvlCallSetupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlCallSetupRx.setStatus('mandatory')
ncmPRIntvlCallSetupRxnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlCallSetupRxnFail.setStatus('mandatory')
ncmPRIntvlUnSupportMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlUnSupportMsgRx.setStatus('mandatory')
ncmPRIntvlTstCalSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlTstCalSetupSentnFail.setStatus('mandatory')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMISDN-MIB", ncmPRICallProfMultiRateCnt=ncmPRICallProfMultiRateCnt, ncmPRICurrCallSetupSent=ncmPRICurrCallSetupSent, ncmPRICurrLineIndex=ncmPRICurrLineIndex, ncmPRIntvlLineIndex=ncmPRIntvlLineIndex, ncmPRICallProfCallBandWth=ncmPRICallProfCallBandWth, ncmPRICallProfListTable=ncmPRICallProfListTable, ncmPRICurrCRCErrRx=ncmPRICurrCRCErrRx, ncmPRIntvlIndex=ncmPRIntvlIndex, ncmPRICPSetCallProf=ncmPRICPSetCallProf, ncmPRIntvlInfoRx=ncmPRIntvlInfoRx, ncmPRIntvlDISCSRx=ncmPRIntvlDISCSRx, ncmPRIntvlEndType=ncmPRIntvlEndType, ncmPRIntvlUnSupportMsgRx=ncmPRIntvlUnSupportMsgRx, ncmPRIntvlInvalidFrameRx=ncmPRIntvlInvalidFrameRx, ncmPRIPortDChanBits=ncmPRIPortDChanBits, ncmPRICurrFramerRx=ncmPRICurrFramerRx, ncmPRIntvlTstCalSetupSentnFail=ncmPRIntvlTstCalSetupSentnFail, ncmPRICurrDISCSRx=ncmPRICurrDISCSRx, ncmPRICallProfExtNumType=ncmPRICallProfExtNumType, ncmPRIPortOwnNumType=ncmPRIPortOwnNumType, ncmPRICurrLyr3ProtErr=ncmPRICurrLyr3ProtErr, ncmPRICurrCallSetupRx=ncmPRICurrCallSetupRx, ncmPRICallProfExtNumPlan=ncmPRICallProfExtNumPlan, ncmPRICurrEndType=ncmPRICurrEndType, ncmPRICallProfExtNumDigit=ncmPRICallProfExtNumDigit, ncmPRICallProfCallStatus=ncmPRICallProfCallStatus, ncmPRICurrStatisticReset=ncmPRICurrStatisticReset, ncmPRICallProfOwnCallNum=ncmPRICallProfOwnCallNum, ncmPRIntvlCallSetupRxnFail=ncmPRIntvlCallSetupRxnFail, ncmPRIPortTimeslotMap=ncmPRIPortTimeslotMap, ncmPRIPortSwitchType=ncmPRIPortSwitchType, ncmPRICallProfCallAction=ncmPRICallProfCallAction, ncmPRICurrTstCalSetupSentnFail=ncmPRICurrTstCalSetupSentnFail, ncmPRICPCallActionResp=ncmPRICPCallActionResp, ncmPRIntvlFramerTx=ncmPRIntvlFramerTx, ncmPRICurrUnSupportMsgRx=ncmPRICurrUnSupportMsgRx, ncmPRICallProfNIDIndex=ncmPRICallProfNIDIndex, ncmPRICallProfCallRefCount=ncmPRICallProfCallRefCount, ncmPRICurrFrameAbortRx=ncmPRICurrFrameAbortRx, ncmPRIPortSetConfig=ncmPRIPortSetConfig, ncmPRICallProfRateAdaptn=ncmPRICallProfRateAdaptn, ncmPRIResetCard=ncmPRIResetCard, ncmPRICurrDISCSTx=ncmPRICurrDISCSTx, ncmPRICallProfNumOwnDigit=ncmPRICallProfNumOwnDigit, ncmPRICurrentTable=ncmPRICurrentTable, ncmPRIPortInService=ncmPRIPortInService, ncmPRICallProfTestCallIntvl=ncmPRICallProfTestCallIntvl, ncmPRIPortSecurityLevel=ncmPRIPortSecurityLevel, ncmPRICallProfExtCallNum=ncmPRICallProfExtCallNum, ncmPRIPortOwnNumPlan=ncmPRIPortOwnNumPlan, ncmPRIntvlFrameAbortRx=ncmPRIntvlFrameAbortRx, ncmPRICPSetCallProfResp=ncmPRICPSetCallProfResp, ncmPRIntvlSecsInCurrIntvl=ncmPRIntvlSecsInCurrIntvl, ncmPRICPListIndex=ncmPRICPListIndex, ncmPRICPListValidCPRefNum=ncmPRICPListValidCPRefNum, ncmPRIIntervalTable=ncmPRIIntervalTable, ncmPRIPortConfigEntry=ncmPRIPortConfigEntry, ncmPRICurrInvalidFrameRx=ncmPRICurrInvalidFrameRx, ncmPRIPortNIDIndex=ncmPRIPortNIDIndex, ncmPRICurrTimestamp=ncmPRICurrTimestamp, ncmPRIPortConfigTable=ncmPRIPortConfigTable, ncmPRICallProfLineIndex=ncmPRICallProfLineIndex, ncmPRIntvlCallSetupSentnFail=ncmPRIntvlCallSetupSentnFail, ncmPRIPortConfigStatus=ncmPRIPortConfigStatus, ncmPRICurrFramerTx=ncmPRICurrFramerTx, ncmPRICallProfCallDir=ncmPRICallProfCallDir, ncmPRIPortDChanMode=ncmPRIPortDChanMode, ncmPRIntvlTimestamp=ncmPRIntvlTimestamp, ncmPRIntvlInfoTx=ncmPRIntvlInfoTx, ncmPRICallProfEntry=ncmPRICallProfEntry, ncmPRICPCallProfileRef=ncmPRICPCallProfileRef, ncmPRIL2AutoEstablish=ncmPRIL2AutoEstablish, ncmPRICPListLineIndex=ncmPRICPListLineIndex, ncmPRICurrCallSetupRxnFail=ncmPRICurrCallSetupRxnFail, ncmPRICallProfListEntry=ncmPRICallProfListEntry, ncmPRICurrInfoRx=ncmPRICurrInfoRx, ncmPRICurrValidIntvls=ncmPRICurrValidIntvls, ncmPRIIntervalEntry=ncmPRIIntervalEntry, ncmPRIntvlDISCSTx=ncmPRIntvlDISCSTx, ncmPRICurrInfoTx=ncmPRICurrInfoTx, ncmPRIntvlNIDIndex=ncmPRIntvlNIDIndex, ncmPRICallProfTransferMode=ncmPRICallProfTransferMode, ncmPRIPortNFASMode=ncmPRIPortNFASMode, ncmPRIPortLineIndex=ncmPRIPortLineIndex, ncmPRICurrentEntry=ncmPRICurrentEntry, ncmPRICurrNIDIndex=ncmPRICurrNIDIndex, ncmPRIntvlFramerRx=ncmPRIntvlFramerRx, ncmPRIntvlCallSetupSent=ncmPRIntvlCallSetupSent, ncmPRICurrSecsInCurrIntvl=ncmPRICurrSecsInCurrIntvl, ncmPRICPListNIDIndex=ncmPRICPListNIDIndex, ncmPRIntvlLyr3ProtErr=ncmPRIntvlLyr3ProtErr, ncmPRICallProfileTable=ncmPRICallProfileTable, ncmPRIntvlCallSetupRx=ncmPRIntvlCallSetupRx, ncmPRICurrCallSetupSentnFail=ncmPRICurrCallSetupSentnFail, ncmPRIntvlCRCErrRx=ncmPRIntvlCRCErrRx)
