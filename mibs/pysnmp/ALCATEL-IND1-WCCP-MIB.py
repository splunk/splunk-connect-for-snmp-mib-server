#
# PySNMP MIB module ALCATEL-IND1-WCCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-WCCP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:04:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Wccp, wccpTraps = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Wccp", "wccpTraps")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, Gauge32, Unsigned32, Counter64, MibIdentifier, ModuleIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Integer32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Unsigned32", "Counter64", "MibIdentifier", "ModuleIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Integer32", "iso", "Bits")
TextualConvention, RowStatus, DateAndTime, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DateAndTime", "TruthValue", "DisplayString")
alcatelIND1WCCPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1))
if mibBuilder.loadTexts: alcatelIND1WCCPMIB.setLastUpdated('201008310000Z')
if mibBuilder.loadTexts: alcatelIND1WCCPMIB.setOrganization('Alcatel')
alcatelIND1WCCPMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 0))
if mibBuilder.loadTexts: alcatelIND1WCCPMIBNotifications.setStatus('current')
alcatelIND1WCCPMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1))
if mibBuilder.loadTexts: alcatelIND1WCCPMIBObjects.setStatus('current')
alcatelIND1WCCPMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2))
if mibBuilder.loadTexts: alcatelIND1WCCPMIBConformance.setStatus('current')
alcatelIND1WCCPMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1WCCPMIBGroups.setStatus('current')
alcatelIND1WCCPMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1WCCPMIBCompliances.setStatus('current')
class WccpServiceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("standard", 1), ("dynamic", 2), ("unknown", 3))

class WccpVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("version1", 1), ("version2", 2), ("unknown", 3))

class WccpServiceProtocolType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("tcp", 1), ("udp", 2), ("unknown", 3))

class WccpServiceMessageType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unicast", 1), ("multicast", 2), ("unknown", 3))

class WccpServicePortType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("source", 1), ("destination", 2), ("unknown", 3))

class WccpOperState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("outOfService", 1), ("inService", 2))

wccpFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 1))
wccpAdminEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wccpAdminEnabled.setStatus('current')
wccpServiceCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceCount.setStatus('current')
wccpGlobalStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wccpGlobalStatsReset.setStatus('current')
wccpGlobalStatsMessageInvalid = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpGlobalStatsMessageInvalid.setStatus('current')
wccpServices = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2))
wccpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1), )
if mibBuilder.loadTexts: wccpServiceTable.setStatus('current')
wccpServiceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpServiceId"))
if mibBuilder.loadTexts: wccpServiceTableEntry.setStatus('current')
wccpServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpServiceId.setStatus('current')
wccpServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 2), WccpServiceProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceProtocol.setStatus('current')
wccpServiceMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 3), WccpServiceMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceMessageType.setStatus('current')
wccpServicePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 4), WccpServicePortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServicePortType.setStatus('current')
wccpServiceAdminEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpServiceAdminEnabled.setStatus('current')
wccpServicePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpServicePassword.setStatus('current')
wccpServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 7), WccpServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceType.setStatus('current')
wccpServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 8), WccpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceVersion.setStatus('current')
wccpServiceWebCacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceWebCacheCount.setStatus('current')
wccpServiceReceiveId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceReceiveId.setStatus('current')
wccpServiceChangeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceChangeNumber.setStatus('current')
wccpServicePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServicePrecedence.setStatus('current')
wccpServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpServiceRowStatus.setStatus('current')
wccpServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 2), )
if mibBuilder.loadTexts: wccpServicePortTable.setStatus('current')
wccpServicePortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpServicePortServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpServicePortPortId"))
if mibBuilder.loadTexts: wccpServicePortTableEntry.setStatus('current')
wccpServicePortServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpServicePortServiceId.setStatus('current')
wccpServicePortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wccpServicePortPortId.setStatus('current')
wccpServicePortPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServicePortPortNum.setStatus('current')
wccpWebCaches = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3))
wccpWebCacheTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1), )
if mibBuilder.loadTexts: wccpWebCacheTable.setStatus('current')
wccpWebCacheTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpWebCacheServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpWebCacheIpAddressType"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpWebCacheIpAddress"))
if mibBuilder.loadTexts: wccpWebCacheTableEntry.setStatus('current')
wccpWebCacheServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpWebCacheServiceId.setStatus('current')
wccpWebCacheIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: wccpWebCacheIpAddressType.setStatus('current')
wccpWebCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: wccpWebCacheIpAddress.setStatus('current')
wccpWebCacheProtoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 4), WccpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheProtoVersion.setStatus('current')
wccpWebCacheReceiveId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheReceiveId.setStatus('current')
wccpWebCacheChangeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheChangeNum.setStatus('current')
wccpWebCacheNumberOfRouters = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheNumberOfRouters.setStatus('current')
wccpWebCacheNumberOfWebCaches = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheNumberOfWebCaches.setStatus('current')
wccpWebCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 9), WccpOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheState.setStatus('current')
wccpWebCacheConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheConnectTime.setStatus('current')
wccpRouters = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4))
wccpRouterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1), )
if mibBuilder.loadTexts: wccpRouterTable.setStatus('current')
wccpRouterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpRouterServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRouterIpAddressType"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRouterIpAddress"))
if mibBuilder.loadTexts: wccpRouterTableEntry.setStatus('current')
wccpRouterServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpRouterServiceId.setStatus('current')
wccpRouterIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: wccpRouterIpAddressType.setStatus('current')
wccpRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: wccpRouterIpAddress.setStatus('current')
wccpRouterProtoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1, 1, 4), WccpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpRouterProtoVersion.setStatus('current')
wccpRestrictVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5))
wccpRestrictVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5, 1), )
if mibBuilder.loadTexts: wccpRestrictVlanTable.setStatus('current')
wccpRestrictVlanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictVlanServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictVlanVlanId"))
if mibBuilder.loadTexts: wccpRestrictVlanTableEntry.setStatus('current')
wccpRestrictVlanServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpRestrictVlanServiceId.setStatus('current')
wccpRestrictVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: wccpRestrictVlanVlanId.setStatus('current')
wccpRestrictVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpRestrictVlanRowStatus.setStatus('current')
wccpRestrictWebCache = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6))
wccpRestrictWebCacheTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1), )
if mibBuilder.loadTexts: wccpRestrictWebCacheTable.setStatus('current')
wccpRestrictWebCacheTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheIpAddressType"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheIpAddress"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheIpMaskAddressType"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheIpMask"))
if mibBuilder.loadTexts: wccpRestrictWebCacheTableEntry.setStatus('current')
wccpRestrictWebCacheServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpRestrictWebCacheServiceId.setStatus('current')
wccpRestrictWebCacheIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: wccpRestrictWebCacheIpAddressType.setStatus('current')
wccpRestrictWebCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: wccpRestrictWebCacheIpAddress.setStatus('current')
wccpRestrictWebCacheIpMaskAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 4), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: wccpRestrictWebCacheIpMaskAddressType.setStatus('current')
wccpRestrictWebCacheIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: wccpRestrictWebCacheIpMask.setStatus('current')
wccpRestrictWebCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpRestrictWebCacheRowStatus.setStatus('current')
wccpRestrictPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7))
wccpRestrictPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7, 1), )
if mibBuilder.loadTexts: wccpRestrictPortTable.setStatus('current')
wccpRestrictPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictPortServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictPortIndex"))
if mibBuilder.loadTexts: wccpRestrictPortTableEntry.setStatus('current')
wccpRestrictPortServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpRestrictPortServiceId.setStatus('current')
wccpRestrictPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: wccpRestrictPortIndex.setStatus('current')
wccpRestrictPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpRestrictPortRowStatus.setStatus('current')
wccpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8))
wccpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1), )
if mibBuilder.loadTexts: wccpStatisticsTable.setStatus('current')
wccpStatisticsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpStatsServiceId"))
if mibBuilder.loadTexts: wccpStatisticsTableEntry.setStatus('current')
wccpStatsServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpStatsServiceId.setStatus('current')
wccpStatsMessagesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsMessagesReceived.setStatus('current')
wccpStatsMessagesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsMessagesTransmitted.setStatus('current')
wccpStatsMessagesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsMessagesDropped.setStatus('current')
wccpStatsPacketsRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsPacketsRedir.setStatus('current')
wccpStatsPacketsLowRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsPacketsLowRedir.setStatus('current')
wccpStatsPacketsDeniedRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsPacketsDeniedRedir.setStatus('current')
wccpStatsAuthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsAuthFailures.setStatus('current')
wccpStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wccpStatsReset.setStatus('current')
wccpTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 9))
wccpTrapOperStatus = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 0, 1)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoEntityGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoOperStatus"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoServiceId"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoWebCacheIpAddr"))
if mibBuilder.loadTexts: wccpTrapOperStatus.setStatus('current')
wccpTrapInfoServiceId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpTrapInfoServiceId.setStatus('current')
wccpTrapInfoOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 9, 2), WccpOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpTrapInfoOperStatus.setStatus('current')
wccpTrapInfoWebCacheIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpTrapInfoWebCacheIpAddr.setStatus('current')
wccpTrapInfoEntityGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wccp", 1), ("service", 2), ("webcache", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpTrapInfoEntityGroup.setStatus('current')
alcatelIND1WCCPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpFeatureGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpRouterGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpRestrictVlanGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpRestrictPortGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatisticsGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1WCCPMIBCompliance = alcatelIND1WCCPMIBCompliance.setStatus('current')
wccpFeatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpAdminEnabled"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceCount"), ("ALCATEL-IND1-WCCP-MIB", "wccpGlobalStatsMessageInvalid"), ("ALCATEL-IND1-WCCP-MIB", "wccpGlobalStatsReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpFeatureGroup = wccpFeatureGroup.setStatus('current')
wccpServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpServiceProtocol"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceMessageType"), ("ALCATEL-IND1-WCCP-MIB", "wccpServicePortType"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceAdminEnabled"), ("ALCATEL-IND1-WCCP-MIB", "wccpServicePassword"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceType"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceVersion"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceWebCacheCount"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceReceiveId"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceChangeNumber"), ("ALCATEL-IND1-WCCP-MIB", "wccpServicePrecedence"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceRowStatus"), ("ALCATEL-IND1-WCCP-MIB", "wccpServicePortPortNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpServiceGroup = wccpServiceGroup.setStatus('current')
wccpWebCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheProtoVersion"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheReceiveId"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheChangeNum"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheNumberOfRouters"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheNumberOfWebCaches"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheConnectTime"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpWebCacheGroup = wccpWebCacheGroup.setStatus('current')
wccpRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpRouterProtoVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpRouterGroup = wccpRouterGroup.setStatus('current')
wccpRestrictVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpRestrictVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpRestrictVlanGroup = wccpRestrictVlanGroup.setStatus('current')
wccpRestrictWebCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpRestrictWebCacheGroup = wccpRestrictWebCacheGroup.setStatus('current')
wccpRestrictPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpRestrictPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpRestrictPortGroup = wccpRestrictPortGroup.setStatus('current')
wccpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpStatsMessagesReceived"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsMessagesTransmitted"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsMessagesDropped"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsPacketsRedir"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsPacketsLowRedir"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsPacketsDeniedRedir"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsAuthFailures"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpStatisticsGroup = wccpStatisticsGroup.setStatus('current')
wccpTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpTrapOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpTrapsGroup = wccpTrapsGroup.setStatus('current')
wccpOperStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoEntityGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoOperStatus"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoServiceId"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoWebCacheIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpOperStatusGroup = wccpOperStatusGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-WCCP-MIB", wccpWebCacheNumberOfRouters=wccpWebCacheNumberOfRouters, wccpFeatureGroup=wccpFeatureGroup, wccpServices=wccpServices, wccpRestrictVlanTable=wccpRestrictVlanTable, wccpServicePortPortId=wccpServicePortPortId, WccpServiceMessageType=WccpServiceMessageType, wccpWebCacheTable=wccpWebCacheTable, wccpServicePassword=wccpServicePassword, wccpRestrictPortRowStatus=wccpRestrictPortRowStatus, wccpServiceProtocol=wccpServiceProtocol, WccpServiceProtocolType=WccpServiceProtocolType, wccpTrapInfoWebCacheIpAddr=wccpTrapInfoWebCacheIpAddr, WccpVersion=WccpVersion, wccpServiceReceiveId=wccpServiceReceiveId, wccpRouterTableEntry=wccpRouterTableEntry, wccpServicePortTableEntry=wccpServicePortTableEntry, wccpGlobalStatsMessageInvalid=wccpGlobalStatsMessageInvalid, WccpOperState=WccpOperState, wccpStatisticsGroup=wccpStatisticsGroup, wccpServiceTableEntry=wccpServiceTableEntry, wccpRestrictVlanRowStatus=wccpRestrictVlanRowStatus, wccpTrapInfoServiceId=wccpTrapInfoServiceId, wccpRouterGroup=wccpRouterGroup, wccpTrapInfoEntityGroup=wccpTrapInfoEntityGroup, wccpServiceCount=wccpServiceCount, wccpRestrictWebCacheIpMask=wccpRestrictWebCacheIpMask, wccpRouterIpAddressType=wccpRouterIpAddressType, wccpRestrictPortServiceId=wccpRestrictPortServiceId, wccpTrapOperStatus=wccpTrapOperStatus, wccpRestrictPortGroup=wccpRestrictPortGroup, wccpRouters=wccpRouters, wccpStatsPacketsRedir=wccpStatsPacketsRedir, wccpRestrictWebCacheIpAddressType=wccpRestrictWebCacheIpAddressType, wccpStatsPacketsDeniedRedir=wccpStatsPacketsDeniedRedir, wccpStatisticsTable=wccpStatisticsTable, wccpStatsServiceId=wccpStatsServiceId, wccpWebCacheState=wccpWebCacheState, wccpRouterTable=wccpRouterTable, wccpServicePortType=wccpServicePortType, alcatelIND1WCCPMIBCompliances=alcatelIND1WCCPMIBCompliances, wccpServiceAdminEnabled=wccpServiceAdminEnabled, wccpRestrictVlanGroup=wccpRestrictVlanGroup, wccpWebCacheServiceId=wccpWebCacheServiceId, wccpAdminEnabled=wccpAdminEnabled, wccpFeature=wccpFeature, wccpServiceMessageType=wccpServiceMessageType, alcatelIND1WCCPMIBObjects=alcatelIND1WCCPMIBObjects, WccpServiceType=WccpServiceType, wccpStatsMessagesReceived=wccpStatsMessagesReceived, wccpServiceTable=wccpServiceTable, wccpRestrictWebCacheIpAddress=wccpRestrictWebCacheIpAddress, wccpRestrictVlanTableEntry=wccpRestrictVlanTableEntry, wccpWebCacheProtoVersion=wccpWebCacheProtoVersion, wccpTrapsGroup=wccpTrapsGroup, alcatelIND1WCCPMIB=alcatelIND1WCCPMIB, wccpGlobalStatsReset=wccpGlobalStatsReset, wccpServiceChangeNumber=wccpServiceChangeNumber, wccpServiceRowStatus=wccpServiceRowStatus, wccpWebCacheTableEntry=wccpWebCacheTableEntry, wccpServiceGroup=wccpServiceGroup, wccpWebCacheIpAddress=wccpWebCacheIpAddress, wccpRestrictVlanServiceId=wccpRestrictVlanServiceId, wccpRestrictWebCacheIpMaskAddressType=wccpRestrictWebCacheIpMaskAddressType, wccpRestrictWebCacheGroup=wccpRestrictWebCacheGroup, wccpServicePortPortNum=wccpServicePortPortNum, WccpServicePortType=WccpServicePortType, wccpServiceId=wccpServiceId, wccpTrapInfoOperStatus=wccpTrapInfoOperStatus, wccpStatsReset=wccpStatsReset, wccpStatsAuthFailures=wccpStatsAuthFailures, alcatelIND1WCCPMIBCompliance=alcatelIND1WCCPMIBCompliance, wccpRestrictPortTable=wccpRestrictPortTable, alcatelIND1WCCPMIBNotifications=alcatelIND1WCCPMIBNotifications, wccpOperStatusGroup=wccpOperStatusGroup, wccpRestrictWebCacheTable=wccpRestrictWebCacheTable, wccpRouterIpAddress=wccpRouterIpAddress, wccpStatisticsTableEntry=wccpStatisticsTableEntry, wccpStatsPacketsLowRedir=wccpStatsPacketsLowRedir, wccpWebCacheNumberOfWebCaches=wccpWebCacheNumberOfWebCaches, wccpRestrictVlanVlanId=wccpRestrictVlanVlanId, wccpRestrictPort=wccpRestrictPort, wccpServiceWebCacheCount=wccpServiceWebCacheCount, wccpServicePortServiceId=wccpServicePortServiceId, wccpWebCacheIpAddressType=wccpWebCacheIpAddressType, wccpWebCacheReceiveId=wccpWebCacheReceiveId, wccpServiceVersion=wccpServiceVersion, wccpStatsMessagesDropped=wccpStatsMessagesDropped, alcatelIND1WCCPMIBConformance=alcatelIND1WCCPMIBConformance, wccpRestrictVlan=wccpRestrictVlan, wccpServicePrecedence=wccpServicePrecedence, wccpWebCaches=wccpWebCaches, wccpRestrictWebCache=wccpRestrictWebCache, wccpTrapsObj=wccpTrapsObj, wccpWebCacheGroup=wccpWebCacheGroup, wccpRouterProtoVersion=wccpRouterProtoVersion, wccpRouterServiceId=wccpRouterServiceId, wccpRestrictWebCacheTableEntry=wccpRestrictWebCacheTableEntry, wccpServiceType=wccpServiceType, PYSNMP_MODULE_ID=alcatelIND1WCCPMIB, wccpStatsMessagesTransmitted=wccpStatsMessagesTransmitted, wccpRestrictWebCacheServiceId=wccpRestrictWebCacheServiceId, wccpWebCacheConnectTime=wccpWebCacheConnectTime, wccpRestrictWebCacheRowStatus=wccpRestrictWebCacheRowStatus, wccpWebCacheChangeNum=wccpWebCacheChangeNum, alcatelIND1WCCPMIBGroups=alcatelIND1WCCPMIBGroups, wccpStatistics=wccpStatistics, wccpRestrictPortIndex=wccpRestrictPortIndex, wccpServicePortTable=wccpServicePortTable, wccpRestrictPortTableEntry=wccpRestrictPortTableEntry)
