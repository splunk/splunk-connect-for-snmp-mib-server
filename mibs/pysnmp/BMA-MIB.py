#
# PySNMP MIB module BMA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BMA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:22:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
IbDataPort, infinibandMIB = mibBuilder.importSymbols("IB-TC-MIB", "IbDataPort", "infinibandMIB")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, Gauge32, Bits, Unsigned32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Counter32, Integer32, Counter64, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Bits", "Unsigned32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Counter32", "Integer32", "Counter64", "TimeTicks", "MibIdentifier")
DisplayString, TruthValue, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "DateAndTime", "TextualConvention")
ibBmaMIB = ModuleIdentity((1, 3, 6, 1, 3, 117, 5))
ibBmaMIB.setRevisions(('2005-09-01 12:00',))
if mibBuilder.loadTexts: ibBmaMIB.setLastUpdated('200509011200Z')
if mibBuilder.loadTexts: ibBmaMIB.setOrganization('IETF IP Over IB (IPOIB) Working Group')
ibBmaObjects = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1))
ibBmaConformance = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 2))
ibBmaBmuInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 1))
ibBmaBaseboardManagedUnitType = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ibModule", 1), ("nonModule", 2), ("managedChassis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaBaseboardManagedUnitType.setStatus('current')
ibBmaIsIBMLSupported = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaIsIBMLSupported.setStatus('current')
ibBmaIBMLImplementation = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ibMlPhysical", 1), ("ibMlVirtual", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaIBMLImplementation.setStatus('current')
ibBmaBKeyInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 2))
ibBmaIsBKeyNVRAM = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaIsBKeyNVRAM.setStatus('current')
ibBmaBKeyValue = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaBKeyValue.setStatus('current')
ibBmaBKeyProtectBit = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 2, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaBKeyProtectBit.setStatus('current')
ibBmaBKeyLeasePeriod = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaBKeyLeasePeriod.setStatus('current')
ibBmaBKeyViolations = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaBKeyViolations.setStatus('current')
ibBmaVpd = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3))
ibBmaModuleInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3, 1))
ibBmaModuleInfoTable = MibTable((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1), )
if mibBuilder.loadTexts: ibBmaModuleInfoTable.setStatus('current')
ibBmaModuleInfoEntry = MibTableRow((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1), ).setIndexNames((0, "BMA-MIB", "ibBmaModuleInfoIndex"))
if mibBuilder.loadTexts: ibBmaModuleInfoEntry.setStatus('current')
ibBmaModuleInfoIndex = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: ibBmaModuleInfoIndex.setStatus('current')
ibBmaModInfoModGuid = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaModInfoModGuid.setStatus('current')
ibBmaModInfoModType = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInfiniBandModule", 1), ("infiniBandModule", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaModInfoModType.setStatus('current')
ibBmaModInfoModClass = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tca", 1), ("hca", 2), ("switch", 3), ("router", 4), ("oneXrepeater", 5), ("fourXrepeater", 6), ("twelveXrepeater", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaModInfoModClass.setStatus('current')
ibBmaModInfoNodeCount = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaModInfoNodeCount.setStatus('current')
ibBmaModInfoLinkCount = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaModInfoLinkCount.setStatus('current')
ibBmaModInfoBckplaneLinkCnt = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaModInfoBckplaneLinkCnt.setStatus('current')
ibBmaModInfoIbmlCount = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaModInfoIbmlCount.setStatus('current')
ibBmaModInfoBckPlaneIbmlCnt = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaModInfoBckPlaneIbmlCnt.setStatus('current')
ibBmaModInfoModuleSize = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaModInfoModuleSize.setStatus('current')
ibBmaModInfoFormFactor = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unspecified", 1), ("nonRemovable", 2), ("standard", 3), ("standardWide", 4), ("tall", 5), ("tallWide", 6), ("pci", 7), ("lowProfilePci", 8), ("compactPci", 9), ("vme", 10), ("internalMezzanineBoard", 11), ("cardEdgeBoard", 12), ("deviceBay", 13), ("otherRemovable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaModInfoFormFactor.setStatus('current')
ibBmaChassisInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3, 2))
ibBmaChasInfoChassisGuid = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaChasInfoChassisGuid.setStatus('current')
ibBmaChasInfoSlotCount = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaChasInfoSlotCount.setStatus('current')
ibBmaChasInfoSlotTable = MibTable((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 3), )
if mibBuilder.loadTexts: ibBmaChasInfoSlotTable.setStatus('current')
ibBmaChasInfoSlotEntry = MibTableRow((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 3, 1), ).setIndexNames((0, "BMA-MIB", "ibBmaChasInfoSlotIndex"))
if mibBuilder.loadTexts: ibBmaChasInfoSlotEntry.setStatus('current')
ibBmaChasInfoSlotIndex = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: ibBmaChasInfoSlotIndex.setStatus('current')
ibBmaChasInfoAssignedSlotNum = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaChasInfoAssignedSlotNum.setStatus('current')
ibBmaChasInfoSlotConnStatus = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notImplemented", 1), ("oneConnectToStandardSlot", 2), ("oneConnectToTallSlot", 3), ("twoConnectToTallSlot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaChasInfoSlotConnStatus.setStatus('current')
ibBmaChasInfoCmeAccess = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 1), ("accessViaPriPort", 2), ("notAccessible", 3), ("reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaChasInfoCmeAccess.setStatus('current')
ibBmaChasInfoProxyAccess = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noProxyAccess", 1), ("hasProxyAccess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaChasInfoProxyAccess.setStatus('current')
ibBmaChasInfoLockDrivesCtr = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 1), ("lockDrivesCmeCtr", 2), ("lockReleaseForCmeCtr", 3), ("reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaChasInfoLockDrivesCtr.setStatus('current')
ibBmaChasInfoMechLockPresent = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 1), ("hasLock", 2), ("noLock", 3), ("reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaChasInfoMechLockPresent.setStatus('current')
ibBmaFruInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3, 3))
ibBmaFruInfoTable = MibTable((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1), )
if mibBuilder.loadTexts: ibBmaFruInfoTable.setStatus('current')
ibBmaFruInfoEntry = MibTableRow((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1), ).setIndexNames((0, "BMA-MIB", "ibBmaFruInfoIndex"))
if mibBuilder.loadTexts: ibBmaFruInfoEntry.setStatus('current')
ibBmaFruInfoIndex = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: ibBmaFruInfoIndex.setStatus('current')
ibBmaFruInfoType = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unspecified", 1), ("infinibandModule", 2), ("infinibandModBackplane", 3), ("infinibandSwitchMod", 4), ("mainChassis", 5), ("platformSystem", 6), ("standaloneProduct", 7), ("boardOrCard", 8), ("powerConverterSuppyMod", 9), ("otherModAssembly", 10), ("coolingModule", 11), ("subChassis", 12), ("processorModule", 13), ("memoryModule", 14), ("memoryCard", 15), ("oem", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoType.setStatus('current')
ibBmaFruInfoGuidType = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("guid64", 2), ("guid48", 3), ("guid16", 4), ("guid8", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoGuidType.setStatus('current')
ibBmaFruInfoGuidValue = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoGuidValue.setStatus('current')
ibBmaFruInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoSerialNumber.setStatus('current')
ibBmaFruInfoPartNumber = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoPartNumber.setStatus('current')
ibBmaFruInfoModelName = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoModelName.setStatus('current')
ibBmaFruInfoVersion = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoVersion.setStatus('current')
ibBmaFruInfoManufacturerName = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoManufacturerName.setStatus('current')
ibBmaFruInfoProductName = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoProductName.setStatus('current')
ibBmaFruInfoManufacturerID = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoManufacturerID.setStatus('current')
ibBmaFruInfoManDateAndTime = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 3, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaFruInfoManDateAndTime.setStatus('current')
ibBmaPortConnectInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3, 4))
ibBmaPortConNumConnection = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPortConNumConnection.setStatus('current')
ibBmaPortConnectTable = MibTable((1, 3, 6, 1, 3, 117, 5, 1, 3, 4, 2), )
if mibBuilder.loadTexts: ibBmaPortConnectTable.setStatus('current')
ibBmaPortConnectEntry = MibTableRow((1, 3, 6, 1, 3, 117, 5, 1, 3, 4, 2, 1), ).setIndexNames((0, "BMA-MIB", "ibBmaPortConnectIndex"))
if mibBuilder.loadTexts: ibBmaPortConnectEntry.setStatus('current')
ibBmaPortConnectIndex = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: ibBmaPortConnectIndex.setStatus('current')
ibBmaPortConInternalCon = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 1), ("terminateWithoutGoing", 2), ("terminateAfterGoing", 3), ("noInternelConnection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPortConInternalCon.setStatus('current')
ibBmaPortConMediaClass = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unspecified", 1), ("copper", 2), ("fiber", 3), ("pcb", 4), ("repeaterThenCopper", 5), ("repeaterThenFiber", 6), ("repeaterThenNode", 7), ("reserved", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPortConMediaClass.setStatus('current')
ibBmaPortConConClass = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unspecified", 1), ("nonSpecifyRemovable", 2), ("backplaneSide", 3), ("moduleSide", 4), ("nonRemovable", 5), ("noInfo", 6), ("reserved", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPortConConClass.setStatus('current')
ibBmaModPowerInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3, 5))
ibBmaOperThermalPower = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaOperThermalPower.setStatus('current')
ibBmaOperCurrent = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaOperCurrent.setStatus('current')
ibBmaIdleCurrent = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaIdleCurrent.setStatus('current')
ibBmaInitCurrent = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaInitCurrent.setStatus('current')
ibBmaInitTime = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaInitTime.setStatus('current')
ibBmaIsMStandbySupported = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaIsMStandbySupported.setStatus('current')
ibBmaIsPowerMgmtSupported = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaIsPowerMgmtSupported.setStatus('current')
ibBmaIsUSleepSupported = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaIsUSleepSupported.setStatus('current')
ibBmaIsUStandbySupported = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaIsUStandbySupported.setStatus('current')
ibBmaPowerClass = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 1), ("powerClass1", 2), ("powerClass2", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPowerClass.setStatus('current')
ibBmaRedundantPower = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 1), ("noRedundancy", 2), ("redundancy", 3), ("reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaRedundantPower.setStatus('current')
ibBmaPowerMgmtInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3, 6))
ibBmaPowerMgmtIocCount = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPowerMgmtIocCount.setStatus('current')
ibBmaPowerMgmtIocTable = MibTable((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2), )
if mibBuilder.loadTexts: ibBmaPowerMgmtIocTable.setStatus('current')
ibBmaPowerMgmtIocEntry = MibTableRow((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1), ).setIndexNames((0, "BMA-MIB", "ibBmaPowerMgmtIocIndex"))
if mibBuilder.loadTexts: ibBmaPowerMgmtIocEntry.setStatus('current')
ibBmaPowerMgmtIocIndex = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: ibBmaPowerMgmtIocIndex.setStatus('current')
ibBmaPMIsIDozeSupported = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPMIsIDozeSupported.setStatus('current')
ibBmaPMIsINapSupported = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPMIsINapSupported.setStatus('current')
ibBmaPMIsISleepSupported = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPMIsISleepSupported.setStatus('current')
ibBmaPMIsIStandbySupported = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPMIsIStandbySupported.setStatus('current')
ibBmaPMWREIsIDozeSupported = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPMWREIsIDozeSupported.setStatus('current')
ibBmaPMWREIsINapSupported = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPMWREIsINapSupported.setStatus('current')
ibBmaPMWREIsISleepSupported = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPMWREIsISleepSupported.setStatus('current')
ibBmaPMWREIsIStandbySupported = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPMWREIsIStandbySupported.setStatus('current')
ibBmaPwrMgtIDozeCurrent = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPwrMgtIDozeCurrent.setStatus('current')
ibBmaPwrMgtINapCurrent = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPwrMgtINapCurrent.setStatus('current')
ibBmaPwrMgtISleepCurrent = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPwrMgtISleepCurrent.setStatus('current')
ibBmaPwrMgtIStandbyCurrent = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaPwrMgtIStandbyCurrent.setStatus('current')
ibBmaCmeInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3, 7))
ibBmaCmeGuidType = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("guid64", 2), ("guid48", 3), ("guid16", 4), ("guid8", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaCmeGuidType.setStatus('current')
ibBmaCmeGuidValue = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 7, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaCmeGuidValue.setStatus('current')
ibBmaCmeFirmMinorRev = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaCmeFirmMinorRev.setStatus('current')
ibBmaCmeFirmMajorRev = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaCmeFirmMajorRev.setStatus('current')
ibBmaCmeSlotNumbers = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 7, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaCmeSlotNumbers.setStatus('current')
ibBmaOemInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3, 8))
ibBmaOemTable = MibTable((1, 3, 6, 1, 3, 117, 5, 1, 3, 8, 1), )
if mibBuilder.loadTexts: ibBmaOemTable.setStatus('current')
ibBmaOemEntry = MibTableRow((1, 3, 6, 1, 3, 117, 5, 1, 3, 8, 1, 1), ).setIndexNames((0, "BMA-MIB", "ibBmaOemIndex"))
if mibBuilder.loadTexts: ibBmaOemEntry.setStatus('current')
ibBmaOemIndex = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: ibBmaOemIndex.setStatus('current')
ibBmaOemIdType = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("companyId", 2), ("enterpriseNumBased", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaOemIdType.setStatus('current')
ibBmaOemIdValue = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaOemIdValue.setStatus('current')
ibBmaOemDataLength = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaOemDataLength.setStatus('current')
ibBmaOemDataBuf = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 8, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaOemDataBuf.setStatus('current')
ibBmaBuddyInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3, 9))
ibBmaBuddyCount = MibScalar((1, 3, 6, 1, 3, 117, 5, 1, 3, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaBuddyCount.setStatus('current')
ibBmaBuddyTable = MibTable((1, 3, 6, 1, 3, 117, 5, 1, 3, 9, 2), )
if mibBuilder.loadTexts: ibBmaBuddyTable.setStatus('current')
ibBmaBuddyEntry = MibTableRow((1, 3, 6, 1, 3, 117, 5, 1, 3, 9, 2, 1), ).setIndexNames((0, "BMA-MIB", "ibBmaBuddyIndex"))
if mibBuilder.loadTexts: ibBmaBuddyEntry.setStatus('current')
ibBmaBuddyIndex = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ibBmaBuddyIndex.setStatus('current')
ibBmaBuddyGuidType = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("guid64", 2), ("guid48", 3), ("guid16", 4), ("guid8", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaBuddyGuidType.setStatus('current')
ibBmaBuddyGuidValue = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 9, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaBuddyGuidValue.setStatus('current')
ibBmaAssetTagInfo = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 1, 3, 10))
ibBmaAssetTagTable = MibTable((1, 3, 6, 1, 3, 117, 5, 1, 3, 10, 1), )
if mibBuilder.loadTexts: ibBmaAssetTagTable.setStatus('current')
ibBmaAssetTagEntry = MibTableRow((1, 3, 6, 1, 3, 117, 5, 1, 3, 10, 1, 1), ).setIndexNames((0, "BMA-MIB", "ibBmaAssetTagIndex"))
if mibBuilder.loadTexts: ibBmaAssetTagEntry.setStatus('current')
ibBmaAssetTagIndex = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ibBmaAssetTagIndex.setStatus('current')
ibBmaAssetTagFruHandle = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaAssetTagFruHandle.setStatus('current')
ibBmaAssetTagLength = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaAssetTagLength.setStatus('current')
ibBmaAssetTagValue = MibTableColumn((1, 3, 6, 1, 3, 117, 5, 1, 3, 10, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibBmaAssetTagValue.setStatus('current')
ibBmaCompliances = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 2, 1))
ibBmaGroups = MibIdentifier((1, 3, 6, 1, 3, 117, 5, 2, 2))
ibBmaBasicNodeCompliance = ModuleCompliance((1, 3, 6, 1, 3, 117, 5, 2, 1, 1)).setObjects(("BMA-MIB", "ibBmaBmuInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaBasicNodeCompliance = ibBmaBasicNodeCompliance.setStatus('current')
ibBmaFullNodeCompliance = ModuleCompliance((1, 3, 6, 1, 3, 117, 5, 2, 1, 2)).setObjects(("BMA-MIB", "ibBmaBmuInfoGroup"), ("BMA-MIB", "ibBmaBKeyInfoGroup"), ("BMA-MIB", "ibBmaModuleInfoGroup"), ("BMA-MIB", "ibBmaChassisInfoGroup"), ("BMA-MIB", "ibBmaFruInfoGroup"), ("BMA-MIB", "ibBmaPortConnectInfoGroup"), ("BMA-MIB", "ibBmaModPowerInfoGroup"), ("BMA-MIB", "ibBmaPowerMgmtInfoGroup"), ("BMA-MIB", "ibBmaCmeInfoGroup"), ("BMA-MIB", "ibBmaOemInfoGroup"), ("BMA-MIB", "ibBmaBuddyInfoGroup"), ("BMA-MIB", "ibBmaAssetTagInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaFullNodeCompliance = ibBmaFullNodeCompliance.setStatus('current')
ibBmaBmuInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 1)).setObjects(("BMA-MIB", "ibBmaBaseboardManagedUnitType"), ("BMA-MIB", "ibBmaIsIBMLSupported"), ("BMA-MIB", "ibBmaIBMLImplementation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaBmuInfoGroup = ibBmaBmuInfoGroup.setStatus('current')
ibBmaBKeyInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 2)).setObjects(("BMA-MIB", "ibBmaIsBKeyNVRAM"), ("BMA-MIB", "ibBmaBKeyValue"), ("BMA-MIB", "ibBmaBKeyProtectBit"), ("BMA-MIB", "ibBmaBKeyLeasePeriod"), ("BMA-MIB", "ibBmaBKeyViolations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaBKeyInfoGroup = ibBmaBKeyInfoGroup.setStatus('current')
ibBmaModuleInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 3)).setObjects(("BMA-MIB", "ibBmaModInfoModGuid"), ("BMA-MIB", "ibBmaModInfoModType"), ("BMA-MIB", "ibBmaModInfoModClass"), ("BMA-MIB", "ibBmaModInfoNodeCount"), ("BMA-MIB", "ibBmaModInfoLinkCount"), ("BMA-MIB", "ibBmaModInfoBckplaneLinkCnt"), ("BMA-MIB", "ibBmaModInfoIbmlCount"), ("BMA-MIB", "ibBmaModInfoBckPlaneIbmlCnt"), ("BMA-MIB", "ibBmaModInfoModuleSize"), ("BMA-MIB", "ibBmaModInfoFormFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaModuleInfoGroup = ibBmaModuleInfoGroup.setStatus('current')
ibBmaChassisInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 4)).setObjects(("BMA-MIB", "ibBmaChasInfoChassisGuid"), ("BMA-MIB", "ibBmaChasInfoSlotCount"), ("BMA-MIB", "ibBmaChasInfoAssignedSlotNum"), ("BMA-MIB", "ibBmaChasInfoSlotConnStatus"), ("BMA-MIB", "ibBmaChasInfoCmeAccess"), ("BMA-MIB", "ibBmaChasInfoProxyAccess"), ("BMA-MIB", "ibBmaChasInfoLockDrivesCtr"), ("BMA-MIB", "ibBmaChasInfoMechLockPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaChassisInfoGroup = ibBmaChassisInfoGroup.setStatus('current')
ibBmaFruInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 5)).setObjects(("BMA-MIB", "ibBmaFruInfoType"), ("BMA-MIB", "ibBmaFruInfoGuidType"), ("BMA-MIB", "ibBmaFruInfoGuidValue"), ("BMA-MIB", "ibBmaFruInfoSerialNumber"), ("BMA-MIB", "ibBmaFruInfoPartNumber"), ("BMA-MIB", "ibBmaFruInfoModelName"), ("BMA-MIB", "ibBmaFruInfoVersion"), ("BMA-MIB", "ibBmaFruInfoManufacturerName"), ("BMA-MIB", "ibBmaFruInfoProductName"), ("BMA-MIB", "ibBmaFruInfoManufacturerID"), ("BMA-MIB", "ibBmaFruInfoManDateAndTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaFruInfoGroup = ibBmaFruInfoGroup.setStatus('current')
ibBmaPortConnectInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 6)).setObjects(("BMA-MIB", "ibBmaPortConNumConnection"), ("BMA-MIB", "ibBmaPortConInternalCon"), ("BMA-MIB", "ibBmaPortConMediaClass"), ("BMA-MIB", "ibBmaPortConConClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaPortConnectInfoGroup = ibBmaPortConnectInfoGroup.setStatus('current')
ibBmaModPowerInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 7)).setObjects(("BMA-MIB", "ibBmaOperThermalPower"), ("BMA-MIB", "ibBmaOperCurrent"), ("BMA-MIB", "ibBmaIdleCurrent"), ("BMA-MIB", "ibBmaInitCurrent"), ("BMA-MIB", "ibBmaInitTime"), ("BMA-MIB", "ibBmaIsMStandbySupported"), ("BMA-MIB", "ibBmaIsPowerMgmtSupported"), ("BMA-MIB", "ibBmaIsUSleepSupported"), ("BMA-MIB", "ibBmaIsUStandbySupported"), ("BMA-MIB", "ibBmaPowerClass"), ("BMA-MIB", "ibBmaRedundantPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaModPowerInfoGroup = ibBmaModPowerInfoGroup.setStatus('current')
ibBmaPowerMgmtInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 8)).setObjects(("BMA-MIB", "ibBmaPowerMgmtIocCount"), ("BMA-MIB", "ibBmaPMIsIDozeSupported"), ("BMA-MIB", "ibBmaPMIsINapSupported"), ("BMA-MIB", "ibBmaPMIsISleepSupported"), ("BMA-MIB", "ibBmaPMIsIStandbySupported"), ("BMA-MIB", "ibBmaPMWREIsIDozeSupported"), ("BMA-MIB", "ibBmaPMWREIsINapSupported"), ("BMA-MIB", "ibBmaPMWREIsISleepSupported"), ("BMA-MIB", "ibBmaPMWREIsIStandbySupported"), ("BMA-MIB", "ibBmaPwrMgtIDozeCurrent"), ("BMA-MIB", "ibBmaPwrMgtINapCurrent"), ("BMA-MIB", "ibBmaPwrMgtISleepCurrent"), ("BMA-MIB", "ibBmaPwrMgtIStandbyCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaPowerMgmtInfoGroup = ibBmaPowerMgmtInfoGroup.setStatus('current')
ibBmaCmeInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 9)).setObjects(("BMA-MIB", "ibBmaCmeGuidType"), ("BMA-MIB", "ibBmaCmeGuidValue"), ("BMA-MIB", "ibBmaCmeFirmMinorRev"), ("BMA-MIB", "ibBmaCmeFirmMajorRev"), ("BMA-MIB", "ibBmaCmeSlotNumbers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaCmeInfoGroup = ibBmaCmeInfoGroup.setStatus('current')
ibBmaOemInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 10)).setObjects(("BMA-MIB", "ibBmaOemIdType"), ("BMA-MIB", "ibBmaOemIdValue"), ("BMA-MIB", "ibBmaOemDataLength"), ("BMA-MIB", "ibBmaOemDataBuf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaOemInfoGroup = ibBmaOemInfoGroup.setStatus('current')
ibBmaBuddyInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 11)).setObjects(("BMA-MIB", "ibBmaBuddyCount"), ("BMA-MIB", "ibBmaBuddyGuidType"), ("BMA-MIB", "ibBmaBuddyGuidValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaBuddyInfoGroup = ibBmaBuddyInfoGroup.setStatus('current')
ibBmaAssetTagInfoGroup = ObjectGroup((1, 3, 6, 1, 3, 117, 5, 2, 2, 12)).setObjects(("BMA-MIB", "ibBmaAssetTagFruHandle"), ("BMA-MIB", "ibBmaAssetTagLength"), ("BMA-MIB", "ibBmaAssetTagValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibBmaAssetTagInfoGroup = ibBmaAssetTagInfoGroup.setStatus('current')
mibBuilder.exportSymbols("BMA-MIB", ibBmaInitTime=ibBmaInitTime, ibBmaFruInfoManufacturerName=ibBmaFruInfoManufacturerName, ibBmaCmeFirmMajorRev=ibBmaCmeFirmMajorRev, ibBmaOperCurrent=ibBmaOperCurrent, ibBmaPortConnectTable=ibBmaPortConnectTable, ibBmaBKeyValue=ibBmaBKeyValue, ibBmaChasInfoCmeAccess=ibBmaChasInfoCmeAccess, ibBmaBKeyInfoGroup=ibBmaBKeyInfoGroup, ibBmaPortConNumConnection=ibBmaPortConNumConnection, ibBmaBuddyCount=ibBmaBuddyCount, ibBmaAssetTagEntry=ibBmaAssetTagEntry, ibBmaMIB=ibBmaMIB, ibBmaOemInfo=ibBmaOemInfo, ibBmaModInfoModuleSize=ibBmaModInfoModuleSize, ibBmaPortConInternalCon=ibBmaPortConInternalCon, PYSNMP_MODULE_ID=ibBmaMIB, ibBmaPortConMediaClass=ibBmaPortConMediaClass, ibBmaModuleInfo=ibBmaModuleInfo, ibBmaBuddyGuidValue=ibBmaBuddyGuidValue, ibBmaIsPowerMgmtSupported=ibBmaIsPowerMgmtSupported, ibBmaChasInfoAssignedSlotNum=ibBmaChasInfoAssignedSlotNum, ibBmaPwrMgtINapCurrent=ibBmaPwrMgtINapCurrent, ibBmaChasInfoSlotCount=ibBmaChasInfoSlotCount, ibBmaBuddyIndex=ibBmaBuddyIndex, ibBmaCmeFirmMinorRev=ibBmaCmeFirmMinorRev, ibBmaModInfoModType=ibBmaModInfoModType, ibBmaModInfoIbmlCount=ibBmaModInfoIbmlCount, ibBmaBKeyInfo=ibBmaBKeyInfo, ibBmaIdleCurrent=ibBmaIdleCurrent, ibBmaFruInfoGuidType=ibBmaFruInfoGuidType, ibBmaChassisInfo=ibBmaChassisInfo, ibBmaFruInfoVersion=ibBmaFruInfoVersion, ibBmaRedundantPower=ibBmaRedundantPower, ibBmaFruInfoGroup=ibBmaFruInfoGroup, ibBmaPMIsIStandbySupported=ibBmaPMIsIStandbySupported, ibBmaFruInfoProductName=ibBmaFruInfoProductName, ibBmaFruInfoPartNumber=ibBmaFruInfoPartNumber, ibBmaBuddyInfo=ibBmaBuddyInfo, ibBmaBaseboardManagedUnitType=ibBmaBaseboardManagedUnitType, ibBmaCmeInfo=ibBmaCmeInfo, ibBmaIsIBMLSupported=ibBmaIsIBMLSupported, ibBmaModuleInfoIndex=ibBmaModuleInfoIndex, ibBmaIsMStandbySupported=ibBmaIsMStandbySupported, ibBmaBKeyLeasePeriod=ibBmaBKeyLeasePeriod, ibBmaPowerMgmtIocTable=ibBmaPowerMgmtIocTable, ibBmaPwrMgtIDozeCurrent=ibBmaPwrMgtIDozeCurrent, ibBmaCmeGuidValue=ibBmaCmeGuidValue, ibBmaOemIndex=ibBmaOemIndex, ibBmaModInfoBckPlaneIbmlCnt=ibBmaModInfoBckPlaneIbmlCnt, ibBmaPortConnectEntry=ibBmaPortConnectEntry, ibBmaBuddyTable=ibBmaBuddyTable, ibBmaBmuInfoGroup=ibBmaBmuInfoGroup, ibBmaPMIsISleepSupported=ibBmaPMIsISleepSupported, ibBmaCompliances=ibBmaCompliances, ibBmaChasInfoSlotEntry=ibBmaChasInfoSlotEntry, ibBmaChasInfoSlotIndex=ibBmaChasInfoSlotIndex, ibBmaOemInfoGroup=ibBmaOemInfoGroup, ibBmaIsUSleepSupported=ibBmaIsUSleepSupported, ibBmaModInfoModClass=ibBmaModInfoModClass, ibBmaAssetTagLength=ibBmaAssetTagLength, ibBmaChasInfoMechLockPresent=ibBmaChasInfoMechLockPresent, ibBmaConformance=ibBmaConformance, ibBmaModInfoModGuid=ibBmaModInfoModGuid, ibBmaFruInfoTable=ibBmaFruInfoTable, ibBmaModInfoFormFactor=ibBmaModInfoFormFactor, ibBmaChasInfoLockDrivesCtr=ibBmaChasInfoLockDrivesCtr, ibBmaCmeSlotNumbers=ibBmaCmeSlotNumbers, ibBmaBmuInfo=ibBmaBmuInfo, ibBmaModuleInfoTable=ibBmaModuleInfoTable, ibBmaOemTable=ibBmaOemTable, ibBmaCmeInfoGroup=ibBmaCmeInfoGroup, ibBmaPMWREIsINapSupported=ibBmaPMWREIsINapSupported, ibBmaAssetTagIndex=ibBmaAssetTagIndex, ibBmaIsUStandbySupported=ibBmaIsUStandbySupported, ibBmaModuleInfoEntry=ibBmaModuleInfoEntry, ibBmaBuddyInfoGroup=ibBmaBuddyInfoGroup, ibBmaModPowerInfo=ibBmaModPowerInfo, ibBmaPMIsINapSupported=ibBmaPMIsINapSupported, ibBmaFruInfo=ibBmaFruInfo, ibBmaFruInfoManufacturerID=ibBmaFruInfoManufacturerID, ibBmaPowerMgmtIocIndex=ibBmaPowerMgmtIocIndex, ibBmaChasInfoChassisGuid=ibBmaChasInfoChassisGuid, ibBmaPortConnectInfo=ibBmaPortConnectInfo, ibBmaPowerMgmtInfo=ibBmaPowerMgmtInfo, ibBmaPowerMgmtIocEntry=ibBmaPowerMgmtIocEntry, ibBmaAssetTagInfo=ibBmaAssetTagInfo, ibBmaPowerMgmtInfoGroup=ibBmaPowerMgmtInfoGroup, ibBmaPMWREIsIDozeSupported=ibBmaPMWREIsIDozeSupported, ibBmaOperThermalPower=ibBmaOperThermalPower, ibBmaOemEntry=ibBmaOemEntry, ibBmaFruInfoModelName=ibBmaFruInfoModelName, ibBmaAssetTagFruHandle=ibBmaAssetTagFruHandle, ibBmaChasInfoSlotConnStatus=ibBmaChasInfoSlotConnStatus, ibBmaOemIdType=ibBmaOemIdType, ibBmaChassisInfoGroup=ibBmaChassisInfoGroup, ibBmaModInfoBckplaneLinkCnt=ibBmaModInfoBckplaneLinkCnt, ibBmaBuddyGuidType=ibBmaBuddyGuidType, ibBmaPMWREIsISleepSupported=ibBmaPMWREIsISleepSupported, ibBmaIsBKeyNVRAM=ibBmaIsBKeyNVRAM, ibBmaBKeyViolations=ibBmaBKeyViolations, ibBmaModPowerInfoGroup=ibBmaModPowerInfoGroup, ibBmaObjects=ibBmaObjects, ibBmaOemIdValue=ibBmaOemIdValue, ibBmaAssetTagValue=ibBmaAssetTagValue, ibBmaBKeyProtectBit=ibBmaBKeyProtectBit, ibBmaFruInfoEntry=ibBmaFruInfoEntry, ibBmaFruInfoIndex=ibBmaFruInfoIndex, ibBmaFruInfoType=ibBmaFruInfoType, ibBmaBasicNodeCompliance=ibBmaBasicNodeCompliance, ibBmaBuddyEntry=ibBmaBuddyEntry, ibBmaVpd=ibBmaVpd, ibBmaPortConConClass=ibBmaPortConConClass, ibBmaPortConnectIndex=ibBmaPortConnectIndex, ibBmaFruInfoManDateAndTime=ibBmaFruInfoManDateAndTime, ibBmaPwrMgtIStandbyCurrent=ibBmaPwrMgtIStandbyCurrent, ibBmaPMIsIDozeSupported=ibBmaPMIsIDozeSupported, ibBmaFruInfoGuidValue=ibBmaFruInfoGuidValue, ibBmaModuleInfoGroup=ibBmaModuleInfoGroup, ibBmaOemDataBuf=ibBmaOemDataBuf, ibBmaPortConnectInfoGroup=ibBmaPortConnectInfoGroup, ibBmaIBMLImplementation=ibBmaIBMLImplementation, ibBmaCmeGuidType=ibBmaCmeGuidType, ibBmaFullNodeCompliance=ibBmaFullNodeCompliance, ibBmaPowerMgmtIocCount=ibBmaPowerMgmtIocCount, ibBmaPowerClass=ibBmaPowerClass, ibBmaAssetTagInfoGroup=ibBmaAssetTagInfoGroup, ibBmaAssetTagTable=ibBmaAssetTagTable, ibBmaModInfoNodeCount=ibBmaModInfoNodeCount, ibBmaFruInfoSerialNumber=ibBmaFruInfoSerialNumber, ibBmaInitCurrent=ibBmaInitCurrent, ibBmaChasInfoProxyAccess=ibBmaChasInfoProxyAccess, ibBmaGroups=ibBmaGroups, ibBmaPwrMgtISleepCurrent=ibBmaPwrMgtISleepCurrent, ibBmaChasInfoSlotTable=ibBmaChasInfoSlotTable, ibBmaModInfoLinkCount=ibBmaModInfoLinkCount, ibBmaOemDataLength=ibBmaOemDataLength, ibBmaPMWREIsIStandbySupported=ibBmaPMWREIsIStandbySupported)
