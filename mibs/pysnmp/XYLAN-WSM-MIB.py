#
# PySNMP MIB module XYLAN-WSM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-WSM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:39:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, ModuleIdentity, Integer32, Gauge32, Counter32, Unsigned32, Counter64, Bits, MibIdentifier, TimeTicks, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "ModuleIdentity", "Integer32", "Gauge32", "Counter32", "Unsigned32", "Counter64", "Bits", "MibIdentifier", "TimeTicks", "IpAddress", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanWsmArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanWsmArch")
wsmPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 7, 1))
wsmLinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 7, 2))
wsmPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1), )
if mibBuilder.loadTexts: wsmPortTable.setStatus('mandatory')
wsmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1), ).setIndexNames((0, "XYLAN-WSM-MIB", "wsmPortSlotIndex"), (0, "XYLAN-WSM-MIB", "wsmPortPortIndex"))
if mibBuilder.loadTexts: wsmPortEntry.setStatus('mandatory')
wsmPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsmPortSlotIndex.setStatus('mandatory')
wsmPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsmPortPortIndex.setStatus('mandatory')
wsmPortInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("universalSerial", 1), ("isdnBRI", 2), ("ds1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsmPortInterfaceType.setStatus('mandatory')
wsmPortCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("noneAttached", 1), ("indeterminate", 2), ("unknown", 3), ("rs232DTE", 4), ("rs232DCE", 5), ("v35DTE", 6), ("v35DCE", 7), ("rs530DTE", 8), ("rs530DCE", 9), ("x21DTE", 10), ("x21DCE", 11), ("isdnU", 12), ("isdnSt", 13), ("t1", 14), ("e1", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsmPortCableType.setStatus('mandatory')
wsmPortSerialRxClockPol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("non-inverted", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsmPortSerialRxClockPol.setStatus('mandatory')
wsmPortSerialTxClockPol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("non-inverted", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsmPortSerialTxClockPol.setStatus('mandatory')
wsmPortFunctionType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frameType", 1), ("cellType", 2), ("cbrType", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsmPortFunctionType.setStatus('mandatory')
wsmPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("frameRelay", 2), ("ppp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsmPortProtocol.setStatus('mandatory')
wsmPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsmPortIfIndex.setStatus('mandatory')
wsmPortT1E1StartingTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsmPortT1E1StartingTimeSlot.setStatus('mandatory')
wsmPortT1E1NumberOfTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsmPortT1E1NumberOfTimeSlot.setStatus('mandatory')
linkxTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 7, 2, 1), )
if mibBuilder.loadTexts: linkxTable.setStatus('mandatory')
linkxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 7, 2, 1, 1), ).setIndexNames((0, "XYLAN-WSM-MIB", "linkxPeerID"), (0, "XYLAN-WSM-MIB", "linkxIfIndex"))
if mibBuilder.loadTexts: linkxEntry.setStatus('mandatory')
linkxPeerID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkxPeerID.setStatus('mandatory')
linkxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkxIfIndex.setStatus('mandatory')
linkxDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkxDescription.setStatus('mandatory')
linkxAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkxAdminStatus.setStatus('mandatory')
linkxType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wsmPort", 1), ("isdnCall", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkxType.setStatus('mandatory')
linkxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkxSlot.setStatus('mandatory')
linkxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkxPort.setStatus('mandatory')
linkxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ondemand", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkxMode.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-WSM-MIB", linkxDescription=linkxDescription, wsmPortCableType=wsmPortCableType, wsmPortFunctionType=wsmPortFunctionType, wsmPortSlotIndex=wsmPortSlotIndex, linkxMode=linkxMode, wsmPortT1E1StartingTimeSlot=wsmPortT1E1StartingTimeSlot, wsmPortProtocol=wsmPortProtocol, linkxTable=linkxTable, linkxIfIndex=linkxIfIndex, wsmPortGroup=wsmPortGroup, linkxPort=linkxPort, wsmPortIfIndex=wsmPortIfIndex, wsmPortTable=wsmPortTable, wsmPortPortIndex=wsmPortPortIndex, wsmPortSerialRxClockPol=wsmPortSerialRxClockPol, linkxPeerID=linkxPeerID, linkxSlot=linkxSlot, wsmPortEntry=wsmPortEntry, linkxEntry=linkxEntry, linkxAdminStatus=linkxAdminStatus, linkxType=linkxType, wsmPortT1E1NumberOfTimeSlot=wsmPortT1E1NumberOfTimeSlot, wsmPortSerialTxClockPol=wsmPortSerialTxClockPol, wsmLinkGroup=wsmLinkGroup, wsmPortInterfaceType=wsmPortInterfaceType)
