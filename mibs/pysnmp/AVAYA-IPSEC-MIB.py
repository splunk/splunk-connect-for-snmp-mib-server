#
# PySNMP MIB module AVAYA-IPSEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AVAYA-IPSEC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:16:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
avGatewayMibs, = mibBuilder.importSymbols("AVAYAGEN-MIB", "avGatewayMibs")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Gauge32, Bits, ObjectIdentity, Counter64, NotificationType, Unsigned32, TimeTicks, MibIdentifier, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Gauge32", "Bits", "ObjectIdentity", "Counter64", "NotificationType", "Unsigned32", "TimeTicks", "MibIdentifier", "Counter32", "IpAddress")
TimeStamp, TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
avayaIpsecMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1))
avayaIpsecMib.setRevisions(('2007-01-08 16:43',))
if mibBuilder.loadTexts: avayaIpsecMib.setLastUpdated('200701081643Z')
if mibBuilder.loadTexts: avayaIpsecMib.setOrganization('Avaya, Inc.')
class DiffHellmanGrp(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 5, 14, 15, 16, 17, 18, 255))
    namedValues = NamedValues(("dhGroup1", 1), ("dhGroup2", 2), ("dhGroup5", 5), ("dhGroup14", 14), ("dhGroup15", 15), ("dhGroup16", 16), ("dhGroup17", 17), ("dhGroup18", 18), ("none", 255))

class IkeEncryptAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 255))
    namedValues = NamedValues(("des", 2), ("des3", 3), ("aes", 4), ("aes192", 5), ("aes256", 6), ("none", 255))

class IkeHashAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("md5", 2), ("sha", 3))

class EspHashTransform(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("md5", 2), ("sha", 3))

class EspEncrTransform(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))
    namedValues = NamedValues(("null", 1), ("des", 2), ("des3", 3), ("aes", 4), ("aes192", 5), ("aes256", 6), ("none", 255))

class IsakmpIdentityType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 256, 257, 270))
    namedValues = NamedValues(("ipv4Address", 1), ("fqdn", 2), ("userFqdn", 3), ("none", 256), ("peerGroup", 257), ("ifName", 270))

class IsakmpIdentityValue(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 110)

class IsakmpDpdKeepaliveMetric(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("onDemand", 2), ("periodic", 3))

class IpsecEncapMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tunnel", 1), ("transport", 2))

avipsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1))
avipsGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 1))
avipsGlobalsInvalidSpiRecovery = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsGlobalsInvalidSpiRecovery.setStatus('current')
avipsNatTEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsNatTEnabled.setStatus('current')
avipsNatTKeepaliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 1, 3), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsNatTKeepaliveInterval.setStatus('current')
avipsCryptoEngineAccelEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsCryptoEngineAccelEnabled.setStatus('current')
avipsIsakmpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2))
avipsIsakmpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1), )
if mibBuilder.loadTexts: avipsIsakmpPeerTable.setStatus('current')
avipsIsakmpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1), ).setIndexNames((0, "AVAYA-IPSEC-MIB", "avipsIsakmpPeerIdType"), (1, "AVAYA-IPSEC-MIB", "avipsIsakmpPeerId"))
if mibBuilder.loadTexts: avipsIsakmpPeerEntry.setStatus('current')
avipsIsakmpPeerIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 1), IsakmpIdentityType().subtype(subtypeSpec=ValueRangeConstraint(1, 260)))
if mibBuilder.loadTexts: avipsIsakmpPeerIdType.setStatus('current')
avipsIsakmpPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 2), IsakmpIdentityValue())
if mibBuilder.loadTexts: avipsIsakmpPeerId.setStatus('current')
avipsIsakmpPeerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerDescription.setStatus('current')
avipsIsakmpPeerIsaPlcyId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerIsaPlcyId1.setStatus('current')
avipsIsakmpPeerInitiateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("main", 2), ("aggressive", 3))).clone('main')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerInitiateMode.setStatus('current')
avipsIsakmpPeerSelfIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 6), IsakmpIdentityType().clone('ipv4Address')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerSelfIdType.setStatus('current')
avipsIsakmpPeerSelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 7), IsakmpIdentityValue().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerSelfId.setStatus('current')
avipsIsakmpPeerKeepaliveMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 8), IsakmpDpdKeepaliveMetric().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerKeepaliveMetric.setStatus('current')
avipsIsakmpPeerKeepaliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 9), Integer32().clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerKeepaliveInterval.setStatus('current')
avipsIsakmpPeerKeepaliveRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 10), Integer32().clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerKeepaliveRetryInterval.setStatus('current')
avipsIsakmpPeerKeepaliveTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerKeepaliveTrackId.setStatus('current')
avipsIsakmpPeerContChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerContChannel.setStatus('current')
avipsIsakmpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerRowStatus.setStatus('current')
avipsIsakmpPeerGroupFailbacktoPrimaryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 1, 1, 14), Integer32().clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPeerGroupFailbacktoPrimaryInterval.setStatus('current')
avipsPeerGroupPeersTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 2), )
if mibBuilder.loadTexts: avipsPeerGroupPeersTable.setStatus('current')
avipsPeerGroupPeersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 2, 1), ).setIndexNames((0, "AVAYA-IPSEC-MIB", "avipsPeerGroupPeersPGrpName"), (0, "AVAYA-IPSEC-MIB", "avipsPeerGroupPeersPeerIndex"))
if mibBuilder.loadTexts: avipsPeerGroupPeersEntry.setStatus('current')
avipsPeerGroupPeersPGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: avipsPeerGroupPeersPGrpName.setStatus('current')
avipsPeerGroupPeersPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: avipsPeerGroupPeersPeerIndex.setStatus('current')
avipsPeerGroupPeersPIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 2, 1, 3), IsakmpIdentityType().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsPeerGroupPeersPIdType.setStatus('current')
avipsPeerGroupPeersPIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 2, 1, 4), IsakmpIdentityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsPeerGroupPeersPIdValue.setStatus('current')
avipsPeerGroupPeersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsPeerGroupPeersRowStatus.setStatus('current')
avipsIsakmpPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 3), )
if mibBuilder.loadTexts: avipsIsakmpPlcyTable.setStatus('current')
avipsIsakmpPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 3, 1), ).setIndexNames((0, "AVAYA-IPSEC-MIB", "avipsIsakmpPlcyId"))
if mibBuilder.loadTexts: avipsIsakmpPlcyEntry.setStatus('current')
avipsIsakmpPlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)))
if mibBuilder.loadTexts: avipsIsakmpPlcyId.setStatus('current')
avipsIsakmpPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPlcyDescription.setStatus('current')
avipsIsakmpPlcyDhGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 3, 1, 3), DiffHellmanGrp().clone('dhGroup1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPlcyDhGroup.setStatus('current')
avipsIsakmpPlcyEncrAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 3, 1, 4), IkeEncryptAlgo().clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPlcyEncrAlgo.setStatus('current')
avipsIsakmpPlcyHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 3, 1, 5), IkeHashAlgo().clone('sha')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPlcyHashAlgo.setStatus('current')
avipsIsakmpPlcyLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPlcyLifetime.setStatus('current')
avipsIsakmpPlcyAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("preSharedKey", 2))).clone('preSharedKey')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPlcyAuth.setStatus('current')
avipsIsakmpPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 2, 3, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsIsakmpPlcyRowStatus.setStatus('current')
avipsIpsecGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3))
avipsCryptoMapTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1), )
if mibBuilder.loadTexts: avipsCryptoMapTable.setStatus('current')
avipsCryptoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1, 1), ).setIndexNames((0, "AVAYA-IPSEC-MIB", "avipsCryptoMapId"))
if mibBuilder.loadTexts: avipsCryptoMapEntry.setStatus('current')
avipsCryptoMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)))
if mibBuilder.loadTexts: avipsCryptoMapId.setStatus('current')
avipsCryptoMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsCryptoMapDescription.setStatus('current')
avipsCryptoMapPeerIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1, 1, 3), IsakmpIdentityType().subtype(subtypeSpec=ValueRangeConstraint(1, 260))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsCryptoMapPeerIdType.setStatus('current')
avipsCryptoMapPeerIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1, 1, 4), IsakmpIdentityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsCryptoMapPeerIdValue.setStatus('current')
avipsCryptoMapTranSetName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsCryptoMapTranSetName1.setStatus('current')
avipsCryptoMapIsReady = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsCryptoMapIsReady.setStatus('current')
avipsCryptoMapTunnelDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsCryptoMapTunnelDscp.setStatus('current')
avipsCryptoMapContChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsCryptoMapContChannel.setStatus('current')
avipsCryptoMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsCryptoMapRowStatus.setStatus('current')
avipsTranSetTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2), )
if mibBuilder.loadTexts: avipsTranSetTable.setStatus('current')
avipsTranSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2, 1), ).setIndexNames((1, "AVAYA-IPSEC-MIB", "avipsTranSetName"))
if mibBuilder.loadTexts: avipsTranSetEntry.setStatus('current')
avipsTranSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: avipsTranSetName.setStatus('current')
avipsTranSetEspEncrTran = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2, 1, 2), EspEncrTransform().clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsTranSetEspEncrTran.setStatus('current')
avipsTranSetEspHashTran = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2, 1, 3), EspHashTransform().clone('sha')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsTranSetEspHashTran.setStatus('current')
avipsTranSetLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 86400), )).clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsTranSetLifetime.setStatus('current')
avipsTranSetLifesize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(2560, 536870912), )).clone(4608000)).setUnits('KBytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsTranSetLifesize.setStatus('current')
avipsTranSetPfsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2, 1, 6), DiffHellmanGrp().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsTranSetPfsGroup.setStatus('current')
avipsTranSetEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2, 1, 7), IpsecEncapMode().clone('tunnel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsTranSetEncapMode.setStatus('current')
avipsTranSetEspCompTran = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ippcpLzs", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsTranSetEspCompTran.setStatus('current')
avipsTranRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 3, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsTranRowStatus.setStatus('current')
avipsMonitoringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4))
avipsMonitoringTables = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1))
avipsMonitoringTablesGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 1))
avipsMonitorRstCntrs = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avipsMonitorRstCntrs.setStatus('current')
avipsMonitorRstCntrsLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsMonitorRstCntrsLastChange.setStatus('current')
avipsPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2), )
if mibBuilder.loadTexts: avipsPeerTable.setStatus('current')
avipsPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1), ).setIndexNames((0, "AVAYA-IPSEC-MIB", "avipsPeerLocalId"), (0, "AVAYA-IPSEC-MIB", "avipsPeerRemoteId"))
if mibBuilder.loadTexts: avipsPeerEntry.setStatus('current')
avipsPeerLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: avipsPeerLocalId.setStatus('current')
avipsPeerRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: avipsPeerRemoteId.setStatus('current')
avipsPeerLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 3), IsakmpIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerLocalType.setStatus('current')
avipsPeerLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 4), IsakmpIdentityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerLocalValue.setStatus('current')
avipsPeerRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 5), IsakmpIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerRemoteType.setStatus('current')
avipsPeerRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 6), IsakmpIdentityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerRemoteValue.setStatus('current')
avipsPeerRemoteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerRemoteDescription.setStatus('current')
avipsPeerLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerLocalAddress.setStatus('current')
avipsPeerRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerRemoteAddress.setStatus('current')
avipsPeerRemotePeerGrpActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerRemotePeerGrpActiveIndex.setStatus('current')
avipsPeerRemotePeerGrpActiveIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 11), IsakmpIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerRemotePeerGrpActiveIdType.setStatus('current')
avipsPeerRemotePeerGrpActiveIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 12), IsakmpIdentityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerRemotePeerGrpActiveIdValue.setStatus('current')
avipsPeerIsakmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("closed", 1), ("inProgress", 2), ("established", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerIsakmpState.setStatus('current')
avipsPeerIsakmpStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerIsakmpStateLastChange.setStatus('current')
avipsPeerTunnelsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerTunnelsClosed.setStatus('current')
avipsPeerTunnelsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerTunnelsInProgress.setStatus('current')
avipsPeerTunnelsEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerTunnelsEstablished.setStatus('current')
avipsPeerTunnelsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerTunnelsFailed.setStatus('current')
avipsPeerInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerInOctets.setStatus('current')
avipsPeerInOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerInOctetsWraps.setStatus('current')
avipsPeerInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerInDecompOctets.setStatus('current')
avipsPeerInDecompOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerInDecompOctetsWraps.setStatus('current')
avipsPeerInDecompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 23), Gauge32()).setUnits('Ratio * 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerInDecompRatio.setStatus('current')
avipsPeerInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerInPkts.setStatus('current')
avipsPeerInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerInDropPkts.setStatus('current')
avipsPeerOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerOutOctets.setStatus('current')
avipsPeerOutOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerOutOctetsWraps.setStatus('current')
avipsPeerOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerOutUncompOctets.setStatus('current')
avipsPeerOutUncompOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerOutUncompOctetsWraps.setStatus('current')
avipsPeerOutCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 30), Gauge32()).setUnits('Ratio * 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerOutCompRatio.setStatus('current')
avipsPeerOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerOutPkts.setStatus('current')
avipsPeerOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsPeerOutDropPkts.setStatus('current')
avipsTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3), )
if mibBuilder.loadTexts: avipsTunnelTable.setStatus('current')
avipsTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1), ).setIndexNames((0, "AVAYA-IPSEC-MIB", "avipsTunnelIndex"), (0, "AVAYA-IPSEC-MIB", "avipsTunnelSubIndex"), (0, "AVAYA-IPSEC-MIB", "avipsTunnelPeerLocalId"), (0, "AVAYA-IPSEC-MIB", "avipsTunnelPeerRemoteId"))
if mibBuilder.loadTexts: avipsTunnelEntry.setStatus('current')
avipsTunnelPeerLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: avipsTunnelPeerLocalId.setStatus('current')
avipsTunnelPeerRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: avipsTunnelPeerRemoteId.setStatus('current')
avipsTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: avipsTunnelIndex.setStatus('current')
avipsTunnelSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: avipsTunnelSubIndex.setStatus('current')
avipsTunnelPeerLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 5), IsakmpIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelPeerLocalType.setStatus('current')
avipsTunnelPeerLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 6), IsakmpIdentityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelPeerLocalValue.setStatus('current')
avipsTunnelPeerRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 7), IsakmpIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelPeerRemoteType.setStatus('current')
avipsTunnelPeerRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 8), IsakmpIdentityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelPeerRemoteValue.setStatus('current')
avipsTunnelDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelDescription.setStatus('current')
avipsTunnelLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelLocalAddress.setStatus('current')
avipsTunnelRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelRemoteAddress.setStatus('current')
avipsTunnelProxyLocalSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelProxyLocalSubnet.setStatus('current')
avipsTunnelProxyLocalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelProxyLocalMask.setStatus('current')
avipsTunnelProxyRemoteSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelProxyRemoteSubnet.setStatus('current')
avipsTunnelProxyRemoteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelProxyRemoteMask.setStatus('current')
avipsTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("closed", 1), ("inProgress", 2), ("established", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelState.setStatus('current')
avipsTunnelStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelStateLastChange.setStatus('current')
avipsTunnelLastCntrsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelLastCntrsReset.setStatus('current')
avipsTunnelInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInOctets.setStatus('current')
avipsTunnelInOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInOctetsWraps.setStatus('current')
avipsTunnelInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDecompOctets.setStatus('current')
avipsTunnelInDecompOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDecompOctetsWraps.setStatus('current')
avipsTunnelInDecompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 23), Gauge32()).setUnits('Ratio * 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDecompRatio.setStatus('current')
avipsTunnelInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInPkts.setStatus('current')
avipsTunnelInDropTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDropTotalPkts.setStatus('current')
avipsTunnelInDropAntiReplayPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDropAntiReplayPkts.setStatus('current')
avipsTunnelInDropHmacFailPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDropHmacFailPkts.setStatus('current')
avipsTunnelInDropBadTrailerPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDropBadTrailerPkts.setStatus('current')
avipsTunnelInDropInvalidIdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDropInvalidIdPkts.setStatus('current')
avipsTunnelInDropUnprotectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDropUnprotectPkts.setStatus('current')
avipsTunnelInDropInvalidLenPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDropInvalidLenPkts.setStatus('current')
avipsTunnelInDropSaExpiredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelInDropSaExpiredPkts.setStatus('current')
avipsTunnelOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelOutOctets.setStatus('current')
avipsTunnelOutOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelOutOctetsWraps.setStatus('current')
avipsTunnelOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelOutUncompOctets.setStatus('current')
avipsTunnelOutUncompOctetsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelOutUncompOctetsWraps.setStatus('current')
avipsTunnelOutCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 37), Gauge32()).setUnits('Ratio * 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelOutCompRatio.setStatus('current')
avipsTunnelOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelOutPkts.setStatus('current')
avipsTunnelOutDropTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelOutDropTotalPkts.setStatus('current')
avipsTunnelOutDropNoSaPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelOutDropNoSaPkts.setStatus('current')
avipsTunnelOutDropSeqRolPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelOutDropSeqRolPkts.setStatus('current')
avipsTunnelOutDropSaExpiredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 1, 4, 1, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avipsTunnelOutDropSaExpiredPkts.setStatus('current')
avipsMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 2))
avipsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 2, 0))
avipsIskampEstablished = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 2, 0, 1)).setObjects(("AVAYA-IPSEC-MIB", "avipsPeerLocalAddress"), ("AVAYA-IPSEC-MIB", "avipsPeerRemoteAddress"), ("AVAYA-IPSEC-MIB", "avipsPeerIsakmpStateLastChange"), ("AVAYA-IPSEC-MIB", "avipsPeerRemoteDescription"))
if mibBuilder.loadTexts: avipsIskampEstablished.setStatus('current')
avipsIskampClosed = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 2, 0, 2)).setObjects(("AVAYA-IPSEC-MIB", "avipsPeerLocalAddress"), ("AVAYA-IPSEC-MIB", "avipsPeerRemoteAddress"), ("AVAYA-IPSEC-MIB", "avipsPeerIsakmpStateLastChange"), ("AVAYA-IPSEC-MIB", "avipsPeerRemoteDescription"))
if mibBuilder.loadTexts: avipsIskampClosed.setStatus('current')
avipsIskampFailed = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 2, 0, 3)).setObjects(("AVAYA-IPSEC-MIB", "avipsPeerLocalAddress"), ("AVAYA-IPSEC-MIB", "avipsPeerRemoteAddress"), ("AVAYA-IPSEC-MIB", "avipsPeerIsakmpStateLastChange"), ("AVAYA-IPSEC-MIB", "avipsPeerRemoteDescription"))
if mibBuilder.loadTexts: avipsIskampFailed.setStatus('current')
avipsIpsecTunnelEstablished = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 2, 0, 4)).setObjects(("AVAYA-IPSEC-MIB", "avipsTunnelLocalAddress"), ("AVAYA-IPSEC-MIB", "avipsTunnelRemoteAddress"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyLocalSubnet"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyLocalMask"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyRemoteSubnet"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyRemoteMask"), ("AVAYA-IPSEC-MIB", "avipsTunnelStateLastChange"), ("AVAYA-IPSEC-MIB", "avipsTunnelDescription"))
if mibBuilder.loadTexts: avipsIpsecTunnelEstablished.setStatus('current')
avipsIpsecTunnelClosed = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 2, 0, 5)).setObjects(("AVAYA-IPSEC-MIB", "avipsTunnelLocalAddress"), ("AVAYA-IPSEC-MIB", "avipsTunnelRemoteAddress"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyLocalSubnet"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyLocalMask"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyRemoteSubnet"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyRemoteMask"), ("AVAYA-IPSEC-MIB", "avipsTunnelStateLastChange"), ("AVAYA-IPSEC-MIB", "avipsTunnelDescription"))
if mibBuilder.loadTexts: avipsIpsecTunnelClosed.setStatus('current')
avipsIpsecTunnelFailed = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 2, 0, 6)).setObjects(("AVAYA-IPSEC-MIB", "avipsTunnelLocalAddress"), ("AVAYA-IPSEC-MIB", "avipsTunnelRemoteAddress"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyLocalSubnet"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyLocalMask"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyRemoteSubnet"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyRemoteMask"), ("AVAYA-IPSEC-MIB", "avipsTunnelStateLastChange"), ("AVAYA-IPSEC-MIB", "avipsTunnelDescription"))
if mibBuilder.loadTexts: avipsIpsecTunnelFailed.setStatus('current')
avipsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 3))
avipsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 3, 1))
avipsConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 3, 1, 1)).setObjects(("AVAYA-IPSEC-MIB", "avipsGlobalsInvalidSpiRecovery"), ("AVAYA-IPSEC-MIB", "avipsNatTEnabled"), ("AVAYA-IPSEC-MIB", "avipsNatTKeepaliveInterval"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerDescription"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerIsaPlcyId1"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerSelfIdType"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerSelfId"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerKeepaliveMetric"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerKeepaliveInterval"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerKeepaliveRetryInterval"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerKeepaliveTrackId"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerContChannel"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerRowStatus"), ("AVAYA-IPSEC-MIB", "avipsPeerGroupPeersPIdType"), ("AVAYA-IPSEC-MIB", "avipsPeerGroupPeersPIdValue"), ("AVAYA-IPSEC-MIB", "avipsPeerGroupPeersRowStatus"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPlcyDescription"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPlcyDhGroup"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPlcyEncrAlgo"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPlcyHashAlgo"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPlcyLifetime"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPlcyAuth"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPlcyRowStatus"), ("AVAYA-IPSEC-MIB", "avipsCryptoMapDescription"), ("AVAYA-IPSEC-MIB", "avipsCryptoMapPeerIdType"), ("AVAYA-IPSEC-MIB", "avipsCryptoMapPeerIdValue"), ("AVAYA-IPSEC-MIB", "avipsCryptoMapTranSetName1"), ("AVAYA-IPSEC-MIB", "avipsCryptoMapIsReady"), ("AVAYA-IPSEC-MIB", "avipsCryptoMapTunnelDscp"), ("AVAYA-IPSEC-MIB", "avipsCryptoMapContChannel"), ("AVAYA-IPSEC-MIB", "avipsCryptoMapRowStatus"), ("AVAYA-IPSEC-MIB", "avipsTranSetEspEncrTran"), ("AVAYA-IPSEC-MIB", "avipsTranSetEspHashTran"), ("AVAYA-IPSEC-MIB", "avipsTranSetLifetime"), ("AVAYA-IPSEC-MIB", "avipsTranSetLifesize"), ("AVAYA-IPSEC-MIB", "avipsTranSetPfsGroup"), ("AVAYA-IPSEC-MIB", "avipsTranSetEncapMode"), ("AVAYA-IPSEC-MIB", "avipsTranSetEspCompTran"), ("AVAYA-IPSEC-MIB", "avipsTranRowStatus"), ("AVAYA-IPSEC-MIB", "avipsCryptoEngineAccelEnabled"), ("AVAYA-IPSEC-MIB", "avipsIsakmpPeerInitiateMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    avipsConfigurationGroup = avipsConfigurationGroup.setStatus('current')
avipsMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 3, 1, 2)).setObjects(("AVAYA-IPSEC-MIB", "avipsMonitorRstCntrs"), ("AVAYA-IPSEC-MIB", "avipsMonitorRstCntrsLastChange"), ("AVAYA-IPSEC-MIB", "avipsPeerRemoteDescription"), ("AVAYA-IPSEC-MIB", "avipsPeerLocalAddress"), ("AVAYA-IPSEC-MIB", "avipsPeerRemoteAddress"), ("AVAYA-IPSEC-MIB", "avipsPeerIsakmpState"), ("AVAYA-IPSEC-MIB", "avipsPeerIsakmpStateLastChange"), ("AVAYA-IPSEC-MIB", "avipsPeerInOctets"), ("AVAYA-IPSEC-MIB", "avipsPeerInOctetsWraps"), ("AVAYA-IPSEC-MIB", "avipsPeerInPkts"), ("AVAYA-IPSEC-MIB", "avipsPeerInDropPkts"), ("AVAYA-IPSEC-MIB", "avipsPeerOutOctets"), ("AVAYA-IPSEC-MIB", "avipsPeerOutOctetsWraps"), ("AVAYA-IPSEC-MIB", "avipsPeerOutPkts"), ("AVAYA-IPSEC-MIB", "avipsPeerOutDropPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelDescription"), ("AVAYA-IPSEC-MIB", "avipsTunnelLocalAddress"), ("AVAYA-IPSEC-MIB", "avipsTunnelRemoteAddress"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyLocalSubnet"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyLocalMask"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyRemoteSubnet"), ("AVAYA-IPSEC-MIB", "avipsTunnelProxyRemoteMask"), ("AVAYA-IPSEC-MIB", "avipsTunnelState"), ("AVAYA-IPSEC-MIB", "avipsTunnelStateLastChange"), ("AVAYA-IPSEC-MIB", "avipsTunnelInOctets"), ("AVAYA-IPSEC-MIB", "avipsTunnelInOctetsWraps"), ("AVAYA-IPSEC-MIB", "avipsTunnelInPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDropAntiReplayPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDropHmacFailPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDropBadTrailerPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDropInvalidIdPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDropUnprotectPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDropInvalidLenPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDropSaExpiredPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelOutOctets"), ("AVAYA-IPSEC-MIB", "avipsTunnelOutOctetsWraps"), ("AVAYA-IPSEC-MIB", "avipsTunnelOutPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelOutDropNoSaPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelOutDropSeqRolPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelOutDropSaExpiredPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelLastCntrsReset"), ("AVAYA-IPSEC-MIB", "avipsPeerRemotePeerGrpActiveIdValue"), ("AVAYA-IPSEC-MIB", "avipsPeerTunnelsClosed"), ("AVAYA-IPSEC-MIB", "avipsPeerTunnelsInProgress"), ("AVAYA-IPSEC-MIB", "avipsPeerTunnelsEstablished"), ("AVAYA-IPSEC-MIB", "avipsPeerTunnelsFailed"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDecompOctets"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDecompOctetsWraps"), ("AVAYA-IPSEC-MIB", "avipsTunnelOutUncompOctets"), ("AVAYA-IPSEC-MIB", "avipsTunnelOutUncompOctetsWraps"), ("AVAYA-IPSEC-MIB", "avipsPeerInDecompOctets"), ("AVAYA-IPSEC-MIB", "avipsPeerInDecompOctetsWraps"), ("AVAYA-IPSEC-MIB", "avipsPeerOutUncompOctetsWraps"), ("AVAYA-IPSEC-MIB", "avipsPeerOutUncompOctets"), ("AVAYA-IPSEC-MIB", "avipsPeerInDecompRatio"), ("AVAYA-IPSEC-MIB", "avipsPeerOutCompRatio"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDecompRatio"), ("AVAYA-IPSEC-MIB", "avipsTunnelOutCompRatio"), ("AVAYA-IPSEC-MIB", "avipsPeerLocalType"), ("AVAYA-IPSEC-MIB", "avipsPeerLocalValue"), ("AVAYA-IPSEC-MIB", "avipsPeerRemoteType"), ("AVAYA-IPSEC-MIB", "avipsPeerRemoteValue"), ("AVAYA-IPSEC-MIB", "avipsTunnelPeerLocalType"), ("AVAYA-IPSEC-MIB", "avipsTunnelPeerLocalValue"), ("AVAYA-IPSEC-MIB", "avipsTunnelPeerRemoteType"), ("AVAYA-IPSEC-MIB", "avipsTunnelPeerRemoteValue"), ("AVAYA-IPSEC-MIB", "avipsPeerRemotePeerGrpActiveIdType"), ("AVAYA-IPSEC-MIB", "avipsPeerRemotePeerGrpActiveIndex"), ("AVAYA-IPSEC-MIB", "avipsTunnelInDropTotalPkts"), ("AVAYA-IPSEC-MIB", "avipsTunnelOutDropTotalPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    avipsMonitorGroup = avipsMonitorGroup.setStatus('current')
avipsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 3, 2))
avipsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6889, 2, 6, 1, 3, 2, 1)).setObjects(("AVAYA-IPSEC-MIB", "avipsConfigurationGroup"), ("AVAYA-IPSEC-MIB", "avipsMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    avipsMIBCompliance = avipsMIBCompliance.setStatus('current')
mibBuilder.exportSymbols("AVAYA-IPSEC-MIB", avipsMIBCompliances=avipsMIBCompliances, avipsTranSetName=avipsTranSetName, avipsMonitoringGroup=avipsMonitoringGroup, avipsPeerInOctetsWraps=avipsPeerInOctetsWraps, avipsPeerTunnelsFailed=avipsPeerTunnelsFailed, avipsPeerOutOctetsWraps=avipsPeerOutOctetsWraps, avipsMIBNotificationPrefix=avipsMIBNotificationPrefix, avipsCryptoEngineAccelEnabled=avipsCryptoEngineAccelEnabled, avipsNatTEnabled=avipsNatTEnabled, avipsPeerOutUncompOctets=avipsPeerOutUncompOctets, avipsPeerTunnelsClosed=avipsPeerTunnelsClosed, avipsIsakmpPlcyEntry=avipsIsakmpPlcyEntry, avipsIsakmpPlcyHashAlgo=avipsIsakmpPlcyHashAlgo, avipsPeerGroupPeersPIdType=avipsPeerGroupPeersPIdType, avipsIsakmpPeerIsaPlcyId1=avipsIsakmpPeerIsaPlcyId1, avipsIsakmpPeerId=avipsIsakmpPeerId, avipsIsakmpPeerKeepaliveMetric=avipsIsakmpPeerKeepaliveMetric, avipsTunnelOutOctets=avipsTunnelOutOctets, avipsPeerTable=avipsPeerTable, avipsPeerIsakmpState=avipsPeerIsakmpState, avipsTranSetLifetime=avipsTranSetLifetime, avipsIskampEstablished=avipsIskampEstablished, avipsCryptoMapTunnelDscp=avipsCryptoMapTunnelDscp, avipsMonitorRstCntrsLastChange=avipsMonitorRstCntrsLastChange, avipsTunnelOutDropSaExpiredPkts=avipsTunnelOutDropSaExpiredPkts, avipsCryptoMapIsReady=avipsCryptoMapIsReady, avipsMIBNotifications=avipsMIBNotifications, avipsIpsecGroup=avipsIpsecGroup, avipsTunnelInOctetsWraps=avipsTunnelInOctetsWraps, avipsPeerGroupPeersEntry=avipsPeerGroupPeersEntry, avipsTranSetLifesize=avipsTranSetLifesize, avipsTunnelEntry=avipsTunnelEntry, avipsTunnelOutDropTotalPkts=avipsTunnelOutDropTotalPkts, avipsPeerInOctets=avipsPeerInOctets, avipsIsakmpPlcyId=avipsIsakmpPlcyId, avipsPeerLocalId=avipsPeerLocalId, avipsPeerOutUncompOctetsWraps=avipsPeerOutUncompOctetsWraps, avipsPeerRemotePeerGrpActiveIdValue=avipsPeerRemotePeerGrpActiveIdValue, avipsTranSetEspEncrTran=avipsTranSetEspEncrTran, avipsTranSetPfsGroup=avipsTranSetPfsGroup, avipsTranSetEntry=avipsTranSetEntry, avipsTunnelPeerRemoteType=avipsTunnelPeerRemoteType, avipsTunnelDescription=avipsTunnelDescription, avayaIpsecMib=avayaIpsecMib, avipsIsakmpPeerContChannel=avipsIsakmpPeerContChannel, avipsMIBGroups=avipsMIBGroups, avipsCryptoMapTranSetName1=avipsCryptoMapTranSetName1, avipsCryptoMapDescription=avipsCryptoMapDescription, avipsMIBConformance=avipsMIBConformance, avipsMonitoringTablesGlobals=avipsMonitoringTablesGlobals, avipsTunnelPeerRemoteId=avipsTunnelPeerRemoteId, avipsTunnelProxyRemoteMask=avipsTunnelProxyRemoteMask, avipsPeerOutDropPkts=avipsPeerOutDropPkts, EspEncrTransform=EspEncrTransform, avipsIsakmpPlcyDhGroup=avipsIsakmpPlcyDhGroup, avipsCryptoMapEntry=avipsCryptoMapEntry, avipsTunnelLastCntrsReset=avipsTunnelLastCntrsReset, avipsNatTKeepaliveInterval=avipsNatTKeepaliveInterval, avipsIsakmpPeerEntry=avipsIsakmpPeerEntry, avipsTunnelPeerLocalType=avipsTunnelPeerLocalType, avipsMIBObjects=avipsMIBObjects, avipsPeerInDecompOctetsWraps=avipsPeerInDecompOctetsWraps, avipsIpsecTunnelClosed=avipsIpsecTunnelClosed, avipsTunnelInDropSaExpiredPkts=avipsTunnelInDropSaExpiredPkts, avipsTunnelOutDropSeqRolPkts=avipsTunnelOutDropSeqRolPkts, avipsIpsecTunnelEstablished=avipsIpsecTunnelEstablished, avipsTunnelState=avipsTunnelState, avipsTunnelOutUncompOctets=avipsTunnelOutUncompOctets, avipsPeerLocalAddress=avipsPeerLocalAddress, avipsPeerLocalType=avipsPeerLocalType, PYSNMP_MODULE_ID=avayaIpsecMib, avipsIsakmpPlcyLifetime=avipsIsakmpPlcyLifetime, avipsTunnelInDecompRatio=avipsTunnelInDecompRatio, avipsPeerRemoteType=avipsPeerRemoteType, IkeHashAlgo=IkeHashAlgo, avipsTunnelInDropInvalidIdPkts=avipsTunnelInDropInvalidIdPkts, avipsIsakmpPlcyTable=avipsIsakmpPlcyTable, IsakmpIdentityValue=IsakmpIdentityValue, avipsPeerLocalValue=avipsPeerLocalValue, avipsTunnelPeerRemoteValue=avipsTunnelPeerRemoteValue, avipsIsakmpPeerSelfIdType=avipsIsakmpPeerSelfIdType, avipsIsakmpPeerInitiateMode=avipsIsakmpPeerInitiateMode, avipsIsakmpPlcyRowStatus=avipsIsakmpPlcyRowStatus, avipsIsakmpPeerKeepaliveRetryInterval=avipsIsakmpPeerKeepaliveRetryInterval, avipsPeerIsakmpStateLastChange=avipsPeerIsakmpStateLastChange, avipsPeerGroupPeersTable=avipsPeerGroupPeersTable, avipsPeerRemoteDescription=avipsPeerRemoteDescription, IkeEncryptAlgo=IkeEncryptAlgo, avipsPeerRemotePeerGrpActiveIndex=avipsPeerRemotePeerGrpActiveIndex, avipsTunnelProxyLocalMask=avipsTunnelProxyLocalMask, EspHashTransform=EspHashTransform, avipsIsakmpPlcyAuth=avipsIsakmpPlcyAuth, avipsTunnelProxyRemoteSubnet=avipsTunnelProxyRemoteSubnet, avipsPeerEntry=avipsPeerEntry, avipsMonitorRstCntrs=avipsMonitorRstCntrs, avipsIsakmpPeerIdType=avipsIsakmpPeerIdType, avipsTranSetEncapMode=avipsTranSetEncapMode, IsakmpIdentityType=IsakmpIdentityType, avipsTunnelOutPkts=avipsTunnelOutPkts, avipsTunnelInDropUnprotectPkts=avipsTunnelInDropUnprotectPkts, avipsTunnelInDropTotalPkts=avipsTunnelInDropTotalPkts, avipsIsakmpPlcyEncrAlgo=avipsIsakmpPlcyEncrAlgo, avipsPeerTunnelsEstablished=avipsPeerTunnelsEstablished, avipsPeerGroupPeersPGrpName=avipsPeerGroupPeersPGrpName, avipsTunnelInPkts=avipsTunnelInPkts, avipsTunnelLocalAddress=avipsTunnelLocalAddress, IsakmpDpdKeepaliveMetric=IsakmpDpdKeepaliveMetric, avipsTunnelInDecompOctets=avipsTunnelInDecompOctets, avipsPeerOutCompRatio=avipsPeerOutCompRatio, avipsPeerGroupPeersPeerIndex=avipsPeerGroupPeersPeerIndex, avipsTranRowStatus=avipsTranRowStatus, avipsTunnelPeerLocalId=avipsTunnelPeerLocalId, IpsecEncapMode=IpsecEncapMode, avipsConfigurationGroup=avipsConfigurationGroup, avipsIpsecTunnelFailed=avipsIpsecTunnelFailed, avipsTunnelOutDropNoSaPkts=avipsTunnelOutDropNoSaPkts, avipsIsakmpPeerDescription=avipsIsakmpPeerDescription, avipsPeerGroupPeersRowStatus=avipsPeerGroupPeersRowStatus, avipsTunnelTable=avipsTunnelTable, avipsTunnelInDropHmacFailPkts=avipsTunnelInDropHmacFailPkts, avipsMonitorGroup=avipsMonitorGroup, avipsPeerInPkts=avipsPeerInPkts, avipsPeerInDropPkts=avipsPeerInDropPkts, avipsPeerRemoteId=avipsPeerRemoteId, avipsGlobalsInvalidSpiRecovery=avipsGlobalsInvalidSpiRecovery, avipsIsakmpPeerGroupFailbacktoPrimaryInterval=avipsIsakmpPeerGroupFailbacktoPrimaryInterval, avipsPeerInDecompOctets=avipsPeerInDecompOctets, avipsTunnelIndex=avipsTunnelIndex, avipsTunnelRemoteAddress=avipsTunnelRemoteAddress, avipsTunnelSubIndex=avipsTunnelSubIndex, avipsIsakmpPeerSelfId=avipsIsakmpPeerSelfId, avipsMonitoringTables=avipsMonitoringTables, avipsIsakmpPeerRowStatus=avipsIsakmpPeerRowStatus, avipsTunnelPeerLocalValue=avipsTunnelPeerLocalValue, avipsIsakmpPlcyDescription=avipsIsakmpPlcyDescription, avipsPeerGroupPeersPIdValue=avipsPeerGroupPeersPIdValue, avipsGlobals=avipsGlobals, avipsIsakmpPeerTable=avipsIsakmpPeerTable, avipsCryptoMapId=avipsCryptoMapId, DiffHellmanGrp=DiffHellmanGrp, avipsPeerOutOctets=avipsPeerOutOctets, avipsTunnelStateLastChange=avipsTunnelStateLastChange, avipsTunnelOutOctetsWraps=avipsTunnelOutOctetsWraps, avipsTunnelInDecompOctetsWraps=avipsTunnelInDecompOctetsWraps, avipsTunnelInDropBadTrailerPkts=avipsTunnelInDropBadTrailerPkts, avipsTunnelProxyLocalSubnet=avipsTunnelProxyLocalSubnet, avipsTranSetTable=avipsTranSetTable, avipsTranSetEspHashTran=avipsTranSetEspHashTran, avipsIskampFailed=avipsIskampFailed, avipsTunnelOutCompRatio=avipsTunnelOutCompRatio, avipsTunnelInOctets=avipsTunnelInOctets, avipsIsakmpGroup=avipsIsakmpGroup, avipsPeerTunnelsInProgress=avipsPeerTunnelsInProgress, avipsCryptoMapContChannel=avipsCryptoMapContChannel, avipsIskampClosed=avipsIskampClosed, avipsCryptoMapPeerIdType=avipsCryptoMapPeerIdType, avipsTunnelInDropInvalidLenPkts=avipsTunnelInDropInvalidLenPkts, avipsPeerRemotePeerGrpActiveIdType=avipsPeerRemotePeerGrpActiveIdType, avipsPeerRemoteValue=avipsPeerRemoteValue, avipsTranSetEspCompTran=avipsTranSetEspCompTran, avipsPeerRemoteAddress=avipsPeerRemoteAddress, avipsMIBCompliance=avipsMIBCompliance, avipsPeerInDecompRatio=avipsPeerInDecompRatio, avipsIsakmpPeerKeepaliveInterval=avipsIsakmpPeerKeepaliveInterval, avipsPeerOutPkts=avipsPeerOutPkts, avipsTunnelInDropAntiReplayPkts=avipsTunnelInDropAntiReplayPkts, avipsIsakmpPeerKeepaliveTrackId=avipsIsakmpPeerKeepaliveTrackId, avipsCryptoMapPeerIdValue=avipsCryptoMapPeerIdValue, avipsTunnelOutUncompOctetsWraps=avipsTunnelOutUncompOctetsWraps, avipsCryptoMapRowStatus=avipsCryptoMapRowStatus, avipsCryptoMapTable=avipsCryptoMapTable)
