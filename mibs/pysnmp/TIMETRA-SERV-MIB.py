#
# PySNMP MIB module TIMETRA-SERV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-SERV-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:10:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressPrefixLength, InetAddressIPv4, InetAutonomousSystemNumber, InetAddressIPv6, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressIPv4", "InetAutonomousSystemNumber", "InetAddressIPv6", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, TimeTicks, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, iso, Gauge32, Bits, Integer32, NotificationType, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "iso", "Gauge32", "Bits", "Integer32", "NotificationType", "MibIdentifier", "IpAddress")
TimeStamp, RowStatus, DateAndTime, RowPointer, TextualConvention, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "DateAndTime", "RowPointer", "TextualConvention", "DisplayString", "TruthValue", "MacAddress")
tmnxCardSlotNum, tmnxMDASlotNum = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum", "tmnxMDASlotNum")
TFilterID, TItemScope, TEntryId = mibBuilder.importSymbols("TIMETRA-FILTER-MIB", "TFilterID", "TItemScope", "TEntryId")
tmnxSRObjs, timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRConfs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRObjs", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRConfs")
tVirtualSchedulerName, tSchedulerPolicyName, tQosIngQGroupName = mibBuilder.importSymbols("TIMETRA-QOS-MIB", "tVirtualSchedulerName", "tSchedulerPolicyName", "tQosIngQGroupName")
TSiteOperStatus, TmnxVRtrIDOrZero, TmnxAppProfileStringOrEmpty, BgpPeeringStatus, TmnxEnabledDisabled, TPortSchedulerPIR, TmnxPwGlobalId, TmnxPortID, TmnxSpbFid, TmnxAccessLoopEncaps1, TmnxSubIdentStringOrEmpty, TmnxAdminState, TmnxOperGrpHoldUpTime, TmnxAccessLoopEncaps2, TmnxSlaProfileStringOrEmpty, TLNamedItemOrEmpty, THPolVirtualScheCIRRate, TBurstPercentOrDefault, TmnxSubMgtIntDestIdOrEmpty, TBurstSize, TmnxVPNRouteDistinguisher, TmnxLdpFECType, TmnxPwGlobalIdOrZero, TPIRRateOverride, TPolicyID, TmnxSpbFdbState, TmnxSpbFdbLocale, TmnxSpokeSdpId, TmnxAiiType, TmnxSpbBridgePriority, ServiceAdminStatus, TPolicyStatementNameOrEmpty, TLNamedItem, TmnxBgpAutonomousSystem, TCIRRateOverride, TmnxDefSubIdSource, TmnxActionType, SvcISID, TCIRRate, TPIRRate, THPolVirtualSchePIRRate, ServiceOperStatus, TmnxCustId, TmnxSpbFidOrZero, TIngressQueueId, TmnxTlsGroupId, TmnxSpokeSdpIdOrZero, THsmdaWrrWeightOverride, TItemDescription, TNamedItemOrEmpty, TmnxServId, TmnxMsPwPeSignaling, TmnxPwPathHopId, QTag, QTagOrZero, TmnxEncapVal, TBurstSizeBytesOverride, TmnxSvcOperGrpCreationOrigin, TmnxOperGrpHoldDownTime, TDirection, TNamedItem, TmnxSubProfileStringOrEmpty, TmnxAccessLoopEncapDataLink, TQosOverrideType, SdpBindId, TmnxManagedRouteStatus, TmnxAncpStringOrZero = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TSiteOperStatus", "TmnxVRtrIDOrZero", "TmnxAppProfileStringOrEmpty", "BgpPeeringStatus", "TmnxEnabledDisabled", "TPortSchedulerPIR", "TmnxPwGlobalId", "TmnxPortID", "TmnxSpbFid", "TmnxAccessLoopEncaps1", "TmnxSubIdentStringOrEmpty", "TmnxAdminState", "TmnxOperGrpHoldUpTime", "TmnxAccessLoopEncaps2", "TmnxSlaProfileStringOrEmpty", "TLNamedItemOrEmpty", "THPolVirtualScheCIRRate", "TBurstPercentOrDefault", "TmnxSubMgtIntDestIdOrEmpty", "TBurstSize", "TmnxVPNRouteDistinguisher", "TmnxLdpFECType", "TmnxPwGlobalIdOrZero", "TPIRRateOverride", "TPolicyID", "TmnxSpbFdbState", "TmnxSpbFdbLocale", "TmnxSpokeSdpId", "TmnxAiiType", "TmnxSpbBridgePriority", "ServiceAdminStatus", "TPolicyStatementNameOrEmpty", "TLNamedItem", "TmnxBgpAutonomousSystem", "TCIRRateOverride", "TmnxDefSubIdSource", "TmnxActionType", "SvcISID", "TCIRRate", "TPIRRate", "THPolVirtualSchePIRRate", "ServiceOperStatus", "TmnxCustId", "TmnxSpbFidOrZero", "TIngressQueueId", "TmnxTlsGroupId", "TmnxSpokeSdpIdOrZero", "THsmdaWrrWeightOverride", "TItemDescription", "TNamedItemOrEmpty", "TmnxServId", "TmnxMsPwPeSignaling", "TmnxPwPathHopId", "QTag", "QTagOrZero", "TmnxEncapVal", "TBurstSizeBytesOverride", "TmnxSvcOperGrpCreationOrigin", "TmnxOperGrpHoldDownTime", "TDirection", "TNamedItem", "TmnxSubProfileStringOrEmpty", "TmnxAccessLoopEncapDataLink", "TQosOverrideType", "SdpBindId", "TmnxManagedRouteStatus", "TmnxAncpStringOrZero")
timetraServicesMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 4))
timetraServicesMIBModule.setRevisions(('1911-02-01 00:00', '1909-02-28 00:00', '1908-07-01 00:00', '1908-01-01 00:00', '1907-01-01 00:00', '1906-02-28 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1900-08-14 00:00',))
if mibBuilder.loadTexts: timetraServicesMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraServicesMIBModule.setOrganization('Alcatel-Lucent')
tmnxServObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4))
tmnxCustObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1))
tmnxSvcObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2))
tmnxTstpNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5))
tmnxSvcNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6))
tmnxServConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4))
tmnxCustConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1))
tmnxSvcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2))
tmnxTstpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 5))
tmnxServNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4))
custTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1))
custTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0))
svcTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2))
svcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0))
tstpTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5))
tstpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0))
class ArpHostInfoOrigin(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 5))
    namedValues = NamedValues(("none", 0), ("radius", 2), ("default", 5))

class ServObjName(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

class ServObjDesc(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 80)

class ServObjLongDesc(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 160)

class ServType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15))
    namedValues = NamedValues(("unknown", 0), ("epipe", 1), ("p3pipe", 2), ("tls", 3), ("vprn", 4), ("ies", 5), ("mirror", 6), ("apipe", 7), ("fpipe", 8), ("ipipe", 9), ("cpipe", 10), ("intTls", 11), ("rvpls", 15))

class VpnId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )
class SdpId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 17407), )
class SdpTemplateId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )
class PWTemplateId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )
class TlsBpduTranslation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("auto", 1), ("disabled", 2), ("pvst", 3), ("stp", 4), ("pvst-rw", 5), ("auto-rw", 6))

class TlsLimitMacMoveLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3))

class TlsLimitMacMove(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("blockable", 1), ("nonBlockable", 2))

class SdpBindVcType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("undef", 1), ("ether", 2), ("vlan", 4), ("mirror", 5), ("atmSdu", 6), ("atmCell", 7), ("atmVcc", 8), ("atmVpc", 9), ("frDlci", 10), ("ipipe", 11), ("satopE1", 12), ("satopT1", 13), ("satopE3", 14), ("satopT3", 15), ("cesopsn", 16), ("cesopsnCas", 17))

class StpExceptionCondition(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("oneWayCommuniation", 2), ("downstreamLoopDetected", 3))

class LspIdList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 68)

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class TSapIngQueueId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 32)

class TSapEgrQueueId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 8)

class TStpPortState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("discarding", 7))

class StpPortRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("master", 0), ("root", 1), ("designated", 2), ("alternate", 3), ("backup", 4), ("disabled", 5))

class StpProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("stp", 1), ("rstp", 2), ("mstp", 3))

class MfibLocation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sap", 1), ("sdp", 2))

class MfibGrpSrcFwdOrBlk(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forward", 1), ("block", 2))

class MvplsPruneState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notApplicable", 1), ("notPruned", 2), ("pruned", 3))

class TQosQueueAttribute(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("cbs", 0), ("cir", 1), ("cirAdaptRule", 2), ("mbs", 3), ("pir", 4), ("pirAdaptRule", 5), ("hiPrioOnly", 6), ("avgOverhead", 7), ("weight", 8), ("cirWeight", 9), ("pirPercent", 10), ("cirPercent", 11), ("mgmtpol", 12), ("pirWeight", 13), ("cirLevel", 14))

class TVirtSchedAttribute(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("cir", 0), ("pir", 1), ("summedCir", 2))

class MstiInstanceId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4094)

class MstiInstanceIdOrZero(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4094)

class DhcpLseStateInfoOrigin(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 0), ("dhcp", 1), ("radius", 2), ("retailerRadius", 3), ("retailerDhcp", 4), ("default", 5), ("localUserDb", 6), ("gtp", 7))

class IAIDType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("temporary", 1), ("non-temporary", 2), ("prefix", 3))

class TdmOptionsSigPkts(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noSigPkts", 0), ("dataPkts", 1), ("sigPkts", 2), ("dataAndSigPkts", 3))

class TdmOptionsCasTrunkFraming(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noCas", 0), ("e1Trunk", 1), ("t1EsfTrunk", 2), ("t1SfTrunk", 3))

class CemSapReportAlarm(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("notUsed", 0), ("strayPkts", 1), ("malformedPkts", 2), ("pktLoss", 3), ("bfrOverrun", 4), ("bfrUnderrun", 5), ("rmtPktLoss", 6), ("rmtFault", 7), ("rmtRdi", 8))

class CemSapEcid(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 1048575)

class SdpBFHundredthsOfPercent(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 10000)

class SdpBindBandwidth(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100000000)

class L2ptProtocols(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("stp", 0), ("cdp", 1), ("vtp", 2), ("dtp", 3), ("pagp", 4), ("udld", 5))

class L2RouteOrigin(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("manual", 1), ("bgp-l2vpn", 2), ("radius", 3), ("bgpSignalL2vpn", 4), ("multiSegmentPW", 5), ("vplsPmsi", 6))

class ConfigStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("created", 1), ("modified", 2), ("deleted", 3))

class ServAccessLocation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sap", 1), ("spoke", 2))

class ServShcvOperState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disabled", 1), ("undefined", 2), ("down", 3), ("up", 4))

class TMrpPolicyDefaultAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("block", 1), ("allow", 2))

class TMrpPolicyAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("block", 1), ("allow", 2), ("end-station", 3))

class TmnxSiteId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 65535), )
custNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNumEntries.setStatus('current')
custNextFreeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 2), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNextFreeId.setStatus('current')
custInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3), )
if mibBuilder.loadTexts: custInfoTable.setStatus('current')
custInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"))
if mibBuilder.loadTexts: custInfoEntry.setStatus('current')
custId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 1), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custId.setStatus('current')
custRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custRowStatus.setStatus('current')
custDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custDescription.setStatus('current')
custContact = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 4), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custContact.setStatus('current')
custPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custPhone.setStatus('current')
custLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custLastMgmtChange.setStatus('current')
custMultiServiceSiteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4), )
if mibBuilder.loadTexts: custMultiServiceSiteTable.setStatus('current')
custMultiServiceSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (1, "TIMETRA-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultiServiceSiteEntry.setStatus('current')
custMultSvcSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 1), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteName.setStatus('current')
custMultSvcSiteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteRowStatus.setStatus('current')
custMultSvcSiteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteDescription.setStatus('current')
custMultSvcSiteScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("card", 2))).clone('port')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteScope.setStatus('current')
custMultSvcSiteAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteAssignment.setStatus('current')
custMultSvcSiteIngressSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 6), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteIngressSchedulerPolicy.setStatus('current')
custMultSvcSiteEgressSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 7), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteEgressSchedulerPolicy.setStatus('current')
custMultSvcSiteLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteLastMgmtChange.setStatus('current')
custMultSvcSiteTodSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteTodSuite.setStatus('current')
custMultSvcSiteCurrentIngrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 10), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteCurrentIngrSchedPlcy.setStatus('current')
custMultSvcSiteCurrentEgrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 11), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteCurrentEgrSchedPlcy.setStatus('current')
custMultSvcSiteEgressAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 12), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteEgressAggRateLimit.setStatus('current')
custMultSvcSiteIntendedIngrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 13), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteIntendedIngrSchedPlcy.setStatus('current')
custMultSvcSiteIntendedEgrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 14), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteIntendedEgrSchedPlcy.setStatus('current')
custMultSvcSiteFrameBasedAccnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteFrameBasedAccnt.setStatus('current')
custMultSvcSiteSubscriberMss = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteSubscriberMss.setStatus('current')
custMultSvcSiteIngPolcrCtrlPolcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 17), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteIngPolcrCtrlPolcy.setStatus('current')
custMultSvcSiteEgrPolcrCtrlPolcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 18), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteEgrPolcrCtrlPolcy.setStatus('current')
custMultiSvcSiteIngStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5), )
if mibBuilder.loadTexts: custMultiSvcSiteIngStatsTable.setStatus('current')
custMultiSvcSiteIngStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "TIMETRA-SERV-MIB", "custIngQosSchedName"))
if mibBuilder.loadTexts: custMultiSvcSiteIngStatsEntry.setStatus('current')
custIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosSchedName.setStatus('current')
custIngQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedPackets.setStatus('current')
custIngQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedOctets.setStatus('current')
custMultiSvcSiteEgrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrStatsTable.setStatus('current')
custMultiSvcSiteEgrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "TIMETRA-SERV-MIB", "custEgrQosSchedName"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrStatsEntry.setStatus('current')
custEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosSchedName.setStatus('current')
custEgrQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedPackets.setStatus('current')
custEgrQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedOctets.setStatus('current')
custIngQosPortIdSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7), )
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsTable.setStatus('current')
custIngQosPortIdSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "TIMETRA-SERV-MIB", "custIngQosPortIdSchedName"), (0, "TIMETRA-SERV-MIB", "custIngQosAssignmentPortId"))
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsEntry.setStatus('current')
custIngQosPortIdSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosPortIdSchedName.setStatus('current')
custIngQosAssignmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: custIngQosAssignmentPortId.setStatus('current')
custIngQosPortSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortSchedFwdPkts.setStatus('current')
custIngQosPortSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortSchedFwdOctets.setStatus('current')
custEgrQosPortIdSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8), )
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsTable.setStatus('current')
custEgrQosPortIdSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "TIMETRA-SERV-MIB", "custEgrQosPortIdSchedName"), (0, "TIMETRA-SERV-MIB", "custEgrQosAssignmentPortId"))
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsEntry.setStatus('current')
custEgrQosPortIdSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosPortIdSchedName.setStatus('current')
custEgrQosAssignmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: custEgrQosAssignmentPortId.setStatus('current')
custEgrQosPortSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortSchedFwdPkts.setStatus('current')
custEgrQosPortSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortSchedFwdOctets.setStatus('current')
custMssIngQosSchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9), )
if mibBuilder.loadTexts: custMssIngQosSchedInfoTable.setStatus('current')
custMssIngQosSchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "TIMETRA-SERV-MIB", "custMssIngQosSName"))
if mibBuilder.loadTexts: custMssIngQosSchedInfoEntry.setStatus('current')
custMssIngQosSName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custMssIngQosSName.setStatus('current')
custMssIngQosSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSRowStatus.setStatus('current')
custMssIngQosSLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssIngQosSLastMgmtChange.setStatus('current')
custMssIngQosSOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 4), TVirtSchedAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSOverrideFlags.setStatus('current')
custMssIngQosSPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 5), THPolVirtualSchePIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSPIR.setStatus('current')
custMssIngQosSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 6), THPolVirtualScheCIRRate()).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSCIR.setStatus('current')
custMssIngQosSSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSSummedCIR.setStatus('current')
custMssEgrQosSchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10), )
if mibBuilder.loadTexts: custMssEgrQosSchedInfoTable.setStatus('current')
custMssEgrQosSchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "TIMETRA-SERV-MIB", "custMssEgrQosSName"))
if mibBuilder.loadTexts: custMssEgrQosSchedInfoEntry.setStatus('current')
custMssEgrQosSName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custMssEgrQosSName.setStatus('current')
custMssEgrQosSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSRowStatus.setStatus('current')
custMssEgrQosSLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssEgrQosSLastMgmtChange.setStatus('current')
custMssEgrQosSOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 4), TVirtSchedAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSOverrideFlags.setStatus('current')
custMssEgrQosSPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 5), THPolVirtualSchePIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSPIR.setStatus('current')
custMssEgrQosSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 6), THPolVirtualScheCIRRate()).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSCIR.setStatus('current')
custMssEgrQosSSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSSummedCIR.setStatus('current')
custMultiSvcSiteIngSchedPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11), )
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyStatsTable.setStatus('current')
custMultiSvcSiteIngSchedPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (1, "TIMETRA-QOS-MIB", "tVirtualSchedulerName"))
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyStatsEntry.setStatus('current')
custIngSchedPlcyStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyStatsFwdPkt.setStatus('current')
custIngSchedPlcyStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyStatsFwdOct.setStatus('current')
custMultiSvcSiteEgrSchedPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyStatsTable.setStatus('current')
custMultiSvcSiteEgrSchedPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (1, "TIMETRA-QOS-MIB", "tVirtualSchedulerName"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyStatsEntry.setStatus('current')
custEgrSchedPlcyStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyStatsFwdPkt.setStatus('current')
custEgrSchedPlcyStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyStatsFwdOct.setStatus('current')
custMultiSvcSiteIngSchedPlcyPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13), )
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyPortStatsTable.setStatus('current')
custMultiSvcSiteIngSchedPlcyPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "TIMETRA-QOS-MIB", "tVirtualSchedulerName"), (0, "TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsPort"))
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyPortStatsEntry.setStatus('current')
custIngSchedPlcyPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsPort.setStatus('current')
custIngSchedPlcyPortStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsFwdPkt.setStatus('current')
custIngSchedPlcyPortStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsFwdOct.setStatus('current')
custMultiSvcSiteEgrSchedPlcyPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyPortStatsTable.setStatus('current')
custMultiSvcSiteEgrSchedPlcyPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "TIMETRA-QOS-MIB", "tVirtualSchedulerName"), (0, "TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsPort"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyPortStatsEntry.setStatus('current')
custEgrSchedPlcyPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsPort.setStatus('current')
custEgrSchedPlcyPortStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsFwdPkt.setStatus('current')
custEgrSchedPlcyPortStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsFwdOct.setStatus('current')
custMssIngQosArbitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 15), )
if mibBuilder.loadTexts: custMssIngQosArbitStatsTable.setStatus('current')
custMssIngQosArbitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 15, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "TIMETRA-SERV-MIB", "custMssIngQosArbitName"))
if mibBuilder.loadTexts: custMssIngQosArbitStatsEntry.setStatus('current')
custMssIngQosArbitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 15, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custMssIngQosArbitName.setStatus('current')
custMssIngQosArbitStatsFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 15, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssIngQosArbitStatsFwdPkts.setStatus('current')
custMssIngQosArbitStatsFwdPktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssIngQosArbitStatsFwdPktsLo.setStatus('current')
custMssIngQosArbitStatsFwdPktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssIngQosArbitStatsFwdPktsHi.setStatus('current')
custMssIngQosArbitStatsFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 15, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssIngQosArbitStatsFwdOcts.setStatus('current')
custMssIngQosArbitStatsFwdOctsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssIngQosArbitStatsFwdOctsLo.setStatus('current')
custMssIngQosArbitStatsFwdOctsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssIngQosArbitStatsFwdOctsHi.setStatus('current')
custMssEgrQosArbitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 16), )
if mibBuilder.loadTexts: custMssEgrQosArbitStatsTable.setStatus('current')
custMssEgrQosArbitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 16, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "TIMETRA-SERV-MIB", "custMssEgrQosArbitName"))
if mibBuilder.loadTexts: custMssEgrQosArbitStatsEntry.setStatus('current')
custMssEgrQosArbitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 16, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custMssEgrQosArbitName.setStatus('current')
custMssEgrQosArbitStatsFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 16, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssEgrQosArbitStatsFwdPkts.setStatus('current')
custMssEgrQosArbitStatsFwdPktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssEgrQosArbitStatsFwdPktsLo.setStatus('current')
custMssEgrQosArbitStatsFwdPktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssEgrQosArbitStatsFwdPktsHi.setStatus('current')
custMssEgrQosArbitStatsFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 16, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssEgrQosArbitStatsFwdOcts.setStatus('current')
custMssEgrQosArbitStatsFwdOctsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssEgrQosArbitStatsFwdOctsLo.setStatus('current')
custMssEgrQosArbitStatsFwdOctsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssEgrQosArbitStatsFwdOctsHi.setStatus('current')
custIngQosPortIdArbitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 17), )
if mibBuilder.loadTexts: custIngQosPortIdArbitStatsTable.setStatus('current')
custIngQosPortIdArbitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 17, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "TIMETRA-SERV-MIB", "custIngQosPortIdArbitName"), (0, "TIMETRA-SERV-MIB", "custIngQosAssignmentPortId"))
if mibBuilder.loadTexts: custIngQosPortIdArbitStatsEntry.setStatus('current')
custIngQosPortIdArbitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 17, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosPortIdArbitName.setStatus('current')
custIngQosPortIdArbitFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 17, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortIdArbitFwdPkts.setStatus('current')
custIngQosPortIdArbitFwdPktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortIdArbitFwdPktsLo.setStatus('current')
custIngQosPortIdArbitFwdPktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortIdArbitFwdPktsHi.setStatus('current')
custIngQosPortIdArbitFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 17, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortIdArbitFwdOcts.setStatus('current')
custIngQosPortIdArbitFwdOctsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortIdArbitFwdOctsLo.setStatus('current')
custIngQosPortIdArbitFwdOctsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortIdArbitFwdOctsHi.setStatus('current')
custEgrQosPortIdArbitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 18), )
if mibBuilder.loadTexts: custEgrQosPortIdArbitStatsTable.setStatus('current')
custEgrQosPortIdArbitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 18, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "custId"), (0, "TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "TIMETRA-SERV-MIB", "custEgrQosPortIdArbitName"), (0, "TIMETRA-SERV-MIB", "custEgrQosAssignmentPortId"))
if mibBuilder.loadTexts: custEgrQosPortIdArbitStatsEntry.setStatus('current')
custEgrQosPortIdArbitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 18, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosPortIdArbitName.setStatus('current')
custEgrQosPortIdArbitFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 18, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortIdArbitFwdPkts.setStatus('current')
custEgrQosPortIdArbitFwdPktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortIdArbitFwdPktsLo.setStatus('current')
custEgrQosPortIdArbitFwdPktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortIdArbitFwdPktsHi.setStatus('current')
custEgrQosPortIdArbitFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 18, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortIdArbitFwdOcts.setStatus('current')
custEgrQosPortIdArbitFwdOctsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortIdArbitFwdOctsLo.setStatus('current')
custEgrQosPortIdArbitFwdOctsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortIdArbitFwdOctsHi.setStatus('current')
custCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 1)).setObjects(("TIMETRA-SERV-MIB", "custId"))
if mibBuilder.loadTexts: custCreated.setStatus('obsolete')
custDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 2)).setObjects(("TIMETRA-SERV-MIB", "custId"))
if mibBuilder.loadTexts: custDeleted.setStatus('obsolete')
custMultSvcSiteCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 3)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultSvcSiteCreated.setStatus('obsolete')
custMultSvcSiteDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 4)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultSvcSiteDeleted.setStatus('obsolete')
svcNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumEntries.setStatus('current')
svcBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2), )
if mibBuilder.loadTexts: svcBaseInfoTable.setStatus('current')
svcBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcBaseInfoEntry.setStatus('current')
svcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 1), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcId.setStatus('current')
svcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRowStatus.setStatus('current')
svcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 3), ServType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcType.setStatus('current')
svcCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 4), TmnxCustId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcCustId.setStatus('current')
svcIpRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 5), TmnxEnabledDisabled()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIpRouting.setStatus('current')
svcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 6), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcDescription.setStatus('current')
svcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9194))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMtu.setStatus('current')
svcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 8), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcAdminStatus.setStatus('current')
svcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 9), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperStatus.setStatus('current')
svcNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumSaps.setStatus('current')
svcNumSdps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumSdps.setStatus('current')
svcLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLastMgmtChange.setStatus('current')
svcDefMeshVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcDefMeshVcId.setStatus('current')
svcVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 14), VpnId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVpnId.setStatus('current')
svcVRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 15), TmnxVRtrIDOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVRouterId.setStatus('current')
svcAutoBind = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("gre", 2), ("ldp", 3), ("rsvp-te", 4), ("mpls", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcAutoBind.setStatus('current')
svcLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLastStatusChange.setStatus('current')
svcVllType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("undef", 1), ("atmSdu", 6), ("atmCell", 7), ("atmVcc", 8), ("atmVpc", 9), ("frDlci", 10), ("satopE1", 12), ("satopT1", 13), ("satopE3", 14), ("satopT3", 15), ("cesopsn", 16), ("cesopsnCas", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllType.setStatus('current')
svcMgmtVpls = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMgmtVpls.setStatus('current')
svcRadiusDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusDiscovery.setStatus('current')
svcRadiusUserNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("vpn-id", 1), ("router-distinguisher", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusUserNameType.setStatus('current')
svcRadiusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusUserName.setStatus('current')
svcVcSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVcSwitching.setStatus('current')
svcRadiusPEDiscPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 24), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusPEDiscPolicy.setStatus('current')
svcRadiusDiscoveryShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 25), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusDiscoveryShutdown.setStatus('current')
svcVplsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("none", 1), ("bVpls", 2), ("iVpls", 3), ("rVpls", 10))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVplsType.setStatus('current')
svcNumMcStandbySaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumMcStandbySaps.setStatus('current')
svcName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 29), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcName.setStatus('current')
svcInterASMvpn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcInterASMvpn.setStatus('current')
svcHashLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 31), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcHashLabel.setStatus('current')
svcTmplUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 32), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTmplUsed.setStatus('current')
svcCtrlSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 33), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCtrlSvcId.setStatus('current')
svcCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 34), L2RouteOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCreationOrigin.setStatus('current')
svcTlsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3), )
if mibBuilder.loadTexts: svcTlsInfoTable.setStatus('current')
svcTlsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcTlsInfoEntry.setStatus('current')
svcTlsMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 1), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacLearning.setStatus('current')
svcTlsDiscardUnknownDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 2), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsDiscardUnknownDest.setStatus('current')
svcTlsFdbTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 511999)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbTableSize.setStatus('current')
svcTlsFdbNumEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumEntries.setStatus('current')
svcTlsFdbNumStaticEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumStaticEntries.setStatus('current')
svcTlsFdbLocalAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbLocalAgeTime.setStatus('current')
svcTlsFdbRemoteAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbRemoteAgeTime.setStatus('current')
svcTlsStpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 8), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpAdminStatus.setStatus('current')
svcTlsStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpPriority.setStatus('current')
svcTlsStpBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpBridgeAddress.setStatus('current')
svcTlsStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpTimeSinceTopologyChange.setStatus('current')
svcTlsStpTopologyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpTopologyChanges.setStatus('current')
svcTlsStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 13), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpDesignatedRoot.setStatus('current')
svcTlsStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpRootCost.setStatus('current')
svcTlsStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpRootPort.setStatus('current')
svcTlsStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpMaxAge.setStatus('current')
svcTlsStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpHelloTime.setStatus('current')
svcTlsStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpHoldTime.setStatus('obsolete')
svcTlsStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpForwardDelay.setStatus('current')
svcTlsStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeMaxAge.setStatus('current')
svcTlsStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeHelloTime.setStatus('current')
svcTlsStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeForwardDelay.setStatus('current')
svcTlsStpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpOperStatus.setStatus('current')
svcTlsStpVirtualRootBridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpVirtualRootBridgeStatus.setStatus('current')
svcTlsMacAgeing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 32), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacAgeing.setStatus('current')
svcTlsStpTopologyChangeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpTopologyChangeActive.setStatus('current')
svcTlsFdbTableFullHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbTableFullHighWatermark.setStatus('current')
svcTlsFdbTableFullLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbTableFullLowWatermark.setStatus('current')
svcTlsVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 36), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsVpnId.setStatus('current')
svcTlsCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 37), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsCustId.setStatus('current')
svcTlsStpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rstp", 2), ("compDot1w", 3), ("dot1w", 4), ("mstp", 5), ("pmstp", 6))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpVersion.setStatus('current')
svcTlsStpHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpHoldCount.setStatus('current')
svcTlsStpPrimaryBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 40), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpPrimaryBridge.setStatus('current')
svcTlsStpBridgeInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpBridgeInstanceId.setStatus('current')
svcTlsStpVcpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 42), StpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpVcpOperProtocol.setStatus('current')
svcTlsMacMoveMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacMoveMaxRate.setStatus('current')
svcTlsMacMoveRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacMoveRetryTimeout.setStatus('current')
svcTlsMacMoveAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 45), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacMoveAdminStatus.setStatus('current')
svcTlsMacRelearnOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 46), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsMacRelearnOnly.setStatus('current')
svcTlsMfibTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40959))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMfibTableSize.setStatus('current')
svcTlsMfibTableFullHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMfibTableFullHighWatermark.setStatus('current')
svcTlsMfibTableFullLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMfibTableFullLowWatermark.setStatus('current')
svcTlsMacFlushOnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 50), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacFlushOnFail.setStatus('current')
svcTlsStpRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpRegionName.setStatus('current')
svcTlsStpRegionRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpRegionRevision.setStatus('current')
svcTlsStpBridgeMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeMaxHops.setStatus('current')
svcTlsStpCistRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 54), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistRegionalRoot.setStatus('current')
svcTlsStpCistIntRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistIntRootCost.setStatus('current')
svcTlsStpCistRemainingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistRemainingHopCount.setStatus('current')
svcTlsStpCistRegionalRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistRegionalRootPort.setStatus('current')
svcTlsFdbNumLearnedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumLearnedEntries.setStatus('current')
svcTlsFdbNumOamEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumOamEntries.setStatus('current')
svcTlsFdbNumDhcpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumDhcpEntries.setStatus('current')
svcTlsFdbNumHostEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumHostEntries.setStatus('current')
svcTlsShcvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("remove", 2))).clone('alarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvAction.setStatus('current')
svcTlsShcvSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 63), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvSrcIp.setStatus('current')
svcTlsShcvSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 64), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvSrcMac.setStatus('current')
svcTlsShcvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 65), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvInterval.setStatus('current')
svcTlsPriPortsCumulativeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 66), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsPriPortsCumulativeFactor.setStatus('current')
svcTlsSecPortsCumulativeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 67), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 9)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsSecPortsCumulativeFactor.setStatus('current')
svcTlsL2ptTermEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 68), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsL2ptTermEnabled.setStatus('current')
svcTlsPropagateMacFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 69), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsPropagateMacFlush.setStatus('current')
svcTlsMrpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 70), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpAdminStatus.setStatus('current')
svcTlsMrpMaxAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 71), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpMaxAttributes.setStatus('current')
svcTlsMrpAttributeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 72), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsMrpAttributeCount.setStatus('current')
svcTlsMrpFailedRegisterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 73), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsMrpFailedRegisterCount.setStatus('current')
svcTlsMcPathMgmtPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 74), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMcPathMgmtPlcyName.setStatus('current')
svcTlsMrpFloodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 75), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 600), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpFloodTime.setStatus('current')
svcTlsMrpAttrTblHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpAttrTblHighWatermark.setStatus('current')
svcTlsMrpAttrTblLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpAttrTblLowWatermark.setStatus('current')
svcTlsMacMoveNumRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 78), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacMoveNumRetries.setStatus('current')
svcTlsMacSubNetLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(24, 48)).clone(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacSubNetLen.setStatus('current')
svcTlsSendFlushOnBVplsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 80), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsSendFlushOnBVplsFail.setStatus('current')
svcTlsPropMacFlushFromBVpls = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 81), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsPropMacFlushFromBVpls.setStatus('current')
svcTlsMacNotifInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 82), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacNotifInterval.setStatus('current')
svcTlsMacNotifCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 83), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacNotifCount.setStatus('current')
svcTlsMacNotifAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 84), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacNotifAdminState.setStatus('current')
svcTlsPerSvcHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 85), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsPerSvcHashing.setStatus('current')
svcTlsAllowIpIfBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 86), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsAllowIpIfBinding.setStatus('current')
svcTlsShcvRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 87), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvRetryTimeout.setStatus('current')
svcTlsShcvRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 88), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 29)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvRetryCount.setStatus('current')
svcTlsTempFloodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(3, 600), )).clone(-1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsTempFloodTime.setStatus('current')
svcTlsTempFloodActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 90), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsTempFloodActive.setStatus('current')
svcTlsTempFloodChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsTempFloodChangeCount.setStatus('current')
tlsFdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4), )
if mibBuilder.loadTexts: tlsFdbInfoTable.setStatus('current')
tlsFdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsFdbMacAddr"))
if mibBuilder.loadTexts: tlsFdbInfoEntry.setStatus('current')
tlsFdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbMacAddr.setStatus('current')
tlsFdbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbRowStatus.setStatus('current')
tlsFdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("learned", 2), ("oam", 3), ("dhcp", 4), ("host", 5), ("intf", 6), ("spb", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbType.setStatus('current')
tlsFdbLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sap", 1), ("sdp", 2), ("cpm", 3), ("endpoint", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbLocale.setStatus('current')
tlsFdbPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 5), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbPortId.setStatus('current')
tlsFdbEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 6), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbEncapValue.setStatus('current')
tlsFdbSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 7), SdpId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbSdpId.setStatus('current')
tlsFdbVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbVcId.setStatus('current')
tlsFdbVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 9), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbVpnId.setStatus('current')
tlsFdbCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 10), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbCustId.setStatus('current')
tlsFdbLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbLastStateChange.setStatus('current')
tlsFdbProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbProtected.setStatus('current')
tlsFdbBackboneDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbBackboneDstMac.setStatus('current')
tlsFdbNumIVplsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbNumIVplsMac.setStatus('current')
tlsFdbEndPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 15), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbEndPointName.setStatus('current')
tlsFdbEPMacOperSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 16), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbEPMacOperSdpId.setStatus('current')
tlsFdbEPMacOperVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbEPMacOperVcId.setStatus('current')
tlsFdbPbbNumEpipes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbPbbNumEpipes.setStatus('current')
iesIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5), )
if mibBuilder.loadTexts: iesIfTable.setStatus('current')
iesIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesIfEntry.setStatus('current')
iesIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfIndex.setStatus('current')
iesIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfRowStatus.setStatus('current')
iesIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 3), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfName.setStatus('current')
iesIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 4), ServObjLongDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfDescription.setStatus('current')
iesIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 5), ServiceAdminStatus().clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfAdminStatus.setStatus('current')
iesIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 6), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfOperStatus.setStatus('current')
iesIfLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfLastMgmtChange.setStatus('current')
iesIfVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 8), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfVpnId.setStatus('obsolete')
iesIfCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 9), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfCustId.setStatus('current')
iesIfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfLoopback.setStatus('current')
iesIfLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfLastStatusChange.setStatus('current')
iesIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("service", 1), ("subscriber", 2), ("group", 3), ("redundant", 4), ("cem", 5), ("ipsec", 6), ("ipMirror", 7), ("video", 8), ("reserved9", 9), ("aarp", 10))).clone('service')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfType.setStatus('current')
iesIfParentIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfParentIf.setStatus('current')
iesIfShcvSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("vrrp", 2))).clone('interface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvSource.setStatus('current')
iesIfShcvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("remove", 2))).clone('alarm')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvAction.setStatus('current')
iesIfShcvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvInterval.setStatus('current')
iesIfFwdServId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 17), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfFwdServId.setStatus('current')
iesIfFwdSubIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 18), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfFwdSubIf.setStatus('current')
iesIfPrivateRetailSubnets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfPrivateRetailSubnets.setStatus('current')
iesIfDelegatedPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(48, 64)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfDelegatedPrefixLen.setStatus('current')
iesIfLns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfLns.setStatus('current')
iesIfVplsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 22), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfVplsName.setStatus('current')
iesIfVplsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 23), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfVplsStatus.setStatus('current')
iesIfVplsFailedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfVplsFailedReason.setStatus('current')
iesIfShcvRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvRetryTimeout.setStatus('current')
iesIfShcvRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 29)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvRetryCount.setStatus('current')
iesIfSapEgressQosId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 27), TPolicyID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfSapEgressQosId.setStatus('current')
iesIfDefaultPrimaryDnsIPv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 28), InetAddressIPv4().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfDefaultPrimaryDnsIPv4Addr.setStatus('current')
iesIfDefaultSecondaryDnsIPv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 29), InetAddressIPv4().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfDefaultSecondaryDnsIPv4Addr.setStatus('current')
iesIfDefaultPrimaryDnsIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 30), InetAddressIPv6().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfDefaultPrimaryDnsIPv6Addr.setStatus('current')
iesIfDefaultSecondaryDnsIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 31), InetAddressIPv6().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfDefaultSecondaryDnsIPv6Addr.setStatus('current')
iesIfIPv6ConfigAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 32), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfIPv6ConfigAllowed.setStatus('current')
iesIfSrrpRoutingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfSrrpRoutingEnabled.setStatus('current')
iesIfSrrpRoutingHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfSrrpRoutingHoldTime.setStatus('current')
iesIfMonitorOperGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 35), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfMonitorOperGrp.setStatus('current')
iesIfAllowUnmatchingSubnets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 36), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfAllowUnmatchingSubnets.setStatus('current')
iesIfGroupInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("plain", 1), ("lns", 2), ("softGre", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfGroupInterfaceType.setStatus('current')
iesIfShcvFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both", 0), ("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvFamily.setStatus('current')
iesIfIPv6IpoeBridgedModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 39), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfIPv6IpoeBridgedModeEnabled.setStatus('current')
iesIfIPv6AllowUnmatchingPfxs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 40), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfIPv6AllowUnmatchingPfxs.setStatus('current')
tlsShgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6), )
if mibBuilder.loadTexts: tlsShgInfoTable.setStatus('current')
tlsShgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (1, "TIMETRA-SERV-MIB", "tlsShgName"))
if mibBuilder.loadTexts: tlsShgInfoEntry.setStatus('current')
tlsShgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tlsShgName.setStatus('current')
tlsShgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRowStatus.setStatus('current')
tlsShgCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 3), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgCustId.setStatus('current')
tlsShgInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgInstanceId.setStatus('current')
tlsShgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgDescription.setStatus('current')
tlsShgLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgLastMgmtChange.setStatus('current')
tlsShgResidential = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgResidential.setStatus('current')
tlsShgRestProtSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRestProtSrcMac.setStatus('current')
tlsShgRestUnprotDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRestUnprotDstMac.setStatus('current')
tlsShgRestProtSrcMacAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("alarm-only", 2), ("discardFrame", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRestProtSrcMacAction.setStatus('current')
tlsShgCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 11), L2RouteOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgCreationOrigin.setStatus('current')
tlsShgSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 12), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgSiteName.setStatus('current')
tlsShgAutoLearnMacProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgAutoLearnMacProtect.setStatus('current')
svcApipeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 7), )
if mibBuilder.loadTexts: svcApipeInfoTable.setStatus('current')
svcApipeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 7, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcApipeInfoEntry.setStatus('current')
svcApipeInterworking = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("frf-5", 2), ("frf-8-2-translate", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcApipeInterworking.setStatus('current')
svcApipeSignaledVllTypeOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8))).clone(namedValues=NamedValues(("none", 0), ("atmVcc", 8))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcApipeSignaledVllTypeOverride.setStatus('current')
tlsMFibInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8), )
if mibBuilder.loadTexts: tlsMFibInfoTable.setStatus('obsolete')
tlsMFibInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsMFibInfoGrpAddr"), (0, "TIMETRA-SERV-MIB", "tlsMFibInfoSrcAddr"), (0, "TIMETRA-SERV-MIB", "tlsMFibInfoLocale"), (0, "TIMETRA-SERV-MIB", "tlsMFibInfoPortId"), (0, "TIMETRA-SERV-MIB", "tlsMFibInfoEncapValue"), (0, "TIMETRA-SERV-MIB", "tlsMFibInfoSdpId"), (0, "TIMETRA-SERV-MIB", "tlsMFibInfoVcId"))
if mibBuilder.loadTexts: tlsMFibInfoEntry.setStatus('obsolete')
tlsMFibInfoGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: tlsMFibInfoGrpAddr.setStatus('obsolete')
tlsMFibInfoSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: tlsMFibInfoSrcAddr.setStatus('obsolete')
tlsMFibInfoLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 3), MfibLocation())
if mibBuilder.loadTexts: tlsMFibInfoLocale.setStatus('obsolete')
tlsMFibInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 4), TmnxPortID())
if mibBuilder.loadTexts: tlsMFibInfoPortId.setStatus('obsolete')
tlsMFibInfoEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 5), TmnxEncapVal())
if mibBuilder.loadTexts: tlsMFibInfoEncapValue.setStatus('obsolete')
tlsMFibInfoSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 6), SdpId())
if mibBuilder.loadTexts: tlsMFibInfoSdpId.setStatus('obsolete')
tlsMFibInfoVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 7), Unsigned32())
if mibBuilder.loadTexts: tlsMFibInfoVcId.setStatus('obsolete')
tlsMFibInfoFwdOrBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 8), MfibGrpSrcFwdOrBlk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibInfoFwdOrBlk.setStatus('obsolete')
tlsMFibInfoSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 9), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibInfoSvcId.setStatus('obsolete')
tlsMFibGrpSrcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9), )
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsTable.setStatus('obsolete')
tlsMFibGrpSrcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsGrpAddr"), (0, "TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsSrcAddr"))
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsEntry.setStatus('obsolete')
tlsMFibGrpSrcStatsGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 1), IpAddress())
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsGrpAddr.setStatus('obsolete')
tlsMFibGrpSrcStatsSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 2), IpAddress())
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsSrcAddr.setStatus('obsolete')
tlsMFibGrpSrcStatsForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsForwardedPkts.setStatus('obsolete')
tlsMFibGrpSrcStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsForwardedOctets.setStatus('obsolete')
tlsRdntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10), )
if mibBuilder.loadTexts: tlsRdntGrpTable.setStatus('current')
tlsRdntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (1, "TIMETRA-SERV-MIB", "tlsRdntGrpName"))
if mibBuilder.loadTexts: tlsRdntGrpEntry.setStatus('current')
tlsRdntGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tlsRdntGrpName.setStatus('current')
tlsRdntGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsRdntGrpRowStatus.setStatus('current')
tlsRdntGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 3), ServObjDesc().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsRdntGrpDescription.setStatus('current')
tlsRdntGrpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsRdntGrpLastMgmtChange.setStatus('current')
tlsRdntGrpMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11), )
if mibBuilder.loadTexts: tlsRdntGrpMemberTable.setStatus('current')
tlsRdntGrpMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "tlsRdntGrpName"), (0, "TIMETRA-SERV-MIB", "tlsRdntGrpMemberRemoteNodeAddrTp"), (0, "TIMETRA-SERV-MIB", "tlsRdntGrpMemberRemoteNodeAddr"), (0, "TIMETRA-SERV-MIB", "tlsRdntGrpMemberIsSap"), (0, "TIMETRA-SERV-MIB", "tlsRdntGrpMemberPort"), (0, "TIMETRA-SERV-MIB", "tlsRdntGrpMemberEncap"))
if mibBuilder.loadTexts: tlsRdntGrpMemberEntry.setStatus('current')
tlsRdntGrpMemberRemoteNodeAddrTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tlsRdntGrpMemberRemoteNodeAddrTp.setStatus('current')
tlsRdntGrpMemberRemoteNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 2), InetAddress())
if mibBuilder.loadTexts: tlsRdntGrpMemberRemoteNodeAddr.setStatus('current')
tlsRdntGrpMemberIsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 3), TruthValue())
if mibBuilder.loadTexts: tlsRdntGrpMemberIsSap.setStatus('current')
tlsRdntGrpMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 4), TmnxPortID())
if mibBuilder.loadTexts: tlsRdntGrpMemberPort.setStatus('current')
tlsRdntGrpMemberEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 5), TmnxEncapVal())
if mibBuilder.loadTexts: tlsRdntGrpMemberEncap.setStatus('current')
tlsRdntGrpMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsRdntGrpMemberRowStatus.setStatus('current')
tlsRdntGrpMemberLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsRdntGrpMemberLastMgmtChange.setStatus('current')
tlsMstiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12), )
if mibBuilder.loadTexts: tlsMstiTable.setStatus('current')
tlsMstiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsMstiInstanceId"))
if mibBuilder.loadTexts: tlsMstiEntry.setStatus('current')
tlsMstiInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 1), MstiInstanceId())
if mibBuilder.loadTexts: tlsMstiInstanceId.setStatus('current')
tlsMstiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsMstiRowStatus.setStatus('current')
tlsMstiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsMstiPriority.setStatus('current')
tlsMstiLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiLastMgmtChange.setStatus('current')
tlsMstiRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiRegionalRoot.setStatus('current')
tlsMstiIntRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiIntRootCost.setStatus('current')
tlsMstiRemainingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiRemainingHopCount.setStatus('current')
tlsMstiRegionalRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiRegionalRootPort.setStatus('current')
tlsMstiManagedVlanListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13), )
if mibBuilder.loadTexts: tlsMstiManagedVlanListTable.setStatus('current')
tlsMstiManagedVlanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsMstiInstanceId"), (0, "TIMETRA-SERV-MIB", "tlsMstiMvplsMinVlanTag"), (0, "TIMETRA-SERV-MIB", "tlsMstiMvplsMaxVlanTag"))
if mibBuilder.loadTexts: tlsMstiManagedVlanListEntry.setStatus('current')
tlsMstiMvplsMinVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1, 1), QTag())
if mibBuilder.loadTexts: tlsMstiMvplsMinVlanTag.setStatus('current')
tlsMstiMvplsMaxVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1, 2), QTag())
if mibBuilder.loadTexts: tlsMstiMvplsMaxVlanTag.setStatus('current')
tlsMstiMvplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsMstiMvplsRowStatus.setStatus('current')
tlsEgressMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14), )
if mibBuilder.loadTexts: tlsEgressMulticastGroupTable.setStatus('current')
tlsEgressMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1), ).setIndexNames((1, "TIMETRA-SERV-MIB", "tlsEgrMcGrpName"))
if mibBuilder.loadTexts: tlsEgressMulticastGroupEntry.setStatus('current')
tlsEgrMcGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tlsEgrMcGrpName.setStatus('current')
tlsEgrMcGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpRowStatus.setStatus('current')
tlsEgrMcGrpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsEgrMcGrpLastMgmtChange.setStatus('current')
tlsEgrMcGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 4), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpDescription.setStatus('current')
tlsEgrMcGrpChainLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpChainLimit.setStatus('current')
tlsEgrMcGrpEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 10))).clone(namedValues=NamedValues(("unknown", 0), ("nullEncap", 1), ("qEncap", 2), ("qinqEncap", 10))).clone('nullEncap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpEncapType.setStatus('current')
tlsEgrMcGrpDot1qEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpDot1qEtherType.setStatus('current')
tlsEgrMcGrpMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 8), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpMacFilterId.setStatus('current')
tlsEgrMcGrpIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 9), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpIpFilterId.setStatus('current')
tlsEgrMcGrpIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 10), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpIpv6FilterId.setStatus('current')
tlsEgrMcGrpQinqEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpQinqEtherType.setStatus('current')
tlsEgrMcGrpQinqFixedTagPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("topTag", 2), ("bottomTag", 3))).clone('bottomTag')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpQinqFixedTagPosition.setStatus('current')
tlsEgrMcGrpAdminQinqFixedTagVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpAdminQinqFixedTagVal.setStatus('current')
tlsEgrMcGrpOperQinqFixedTagVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsEgrMcGrpOperQinqFixedTagVal.setStatus('current')
svcDhcpLeaseStateTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16), )
if mibBuilder.loadTexts: svcDhcpLeaseStateTable.setStatus('obsolete')
svcDhcpLeaseStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrType"), (0, "TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddr"))
if mibBuilder.loadTexts: svcDhcpLeaseStateEntry.setStatus('obsolete')
svcDhcpLseStateCiAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 1), InetAddressType())
if mibBuilder.loadTexts: svcDhcpLseStateCiAddrType.setStatus('obsolete')
svcDhcpLseStateCiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 2), InetAddress())
if mibBuilder.loadTexts: svcDhcpLseStateCiAddr.setStatus('obsolete')
svcDhcpLseStateLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sap", 1), ("sdp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateLocale.setStatus('obsolete')
svcDhcpLseStatePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 4), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePortId.setStatus('obsolete')
svcDhcpLseStateEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 5), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateEncapValue.setStatus('obsolete')
svcDhcpLseStateSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 6), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSdpId.setStatus('obsolete')
svcDhcpLseStateVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateVcId.setStatus('obsolete')
svcDhcpLseStateChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateChAddr.setStatus('obsolete')
svcDhcpLseStateRemainLseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRemainLseTime.setStatus('obsolete')
svcDhcpLseStateOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOption82.setStatus('obsolete')
svcDhcpLseStatePersistKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePersistKey.setStatus('obsolete')
svcDhcpLseStateSubscrIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSubscrIdent.setStatus('obsolete')
svcDhcpLseStateSubProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSubProfString.setStatus('obsolete')
svcDhcpLseStateSlaProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSlaProfString.setStatus('obsolete')
svcDhcpLseStateShcvOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("undefined", 2), ("down", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvOperState.setStatus('obsolete')
svcDhcpLseStateShcvChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvChecks.setStatus('obsolete')
svcDhcpLseStateShcvReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvReplies.setStatus('obsolete')
svcDhcpLseStateShcvReplyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvReplyTime.setStatus('obsolete')
svcDhcpLseStateClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateClientId.setStatus('obsolete')
svcDhcpLseStateIAID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateIAID.setStatus('obsolete')
svcDhcpLseStateIAIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 21), IAIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateIAIDType.setStatus('obsolete')
svcDhcpLseStateCiAddrMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateCiAddrMaskLen.setStatus('obsolete')
svcDhcpLseStateRetailerSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 23), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRetailerSvcId.setStatus('obsolete')
svcDhcpLseStateRetailerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 24), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRetailerIf.setStatus('obsolete')
svcDhcpLseStateAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateAncpString.setStatus('obsolete')
svcDhcpLseStateFramedIpNetMaskTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 26), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateFramedIpNetMaskTp.setStatus('obsolete')
svcDhcpLseStateFramedIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 27), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateFramedIpNetMask.setStatus('obsolete')
svcDhcpLseStateBCastIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 28), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBCastIpAddrType.setStatus('obsolete')
svcDhcpLseStateBCastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 29), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBCastIpAddr.setStatus('obsolete')
svcDhcpLseStateDefaultRouterTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 30), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDefaultRouterTp.setStatus('obsolete')
svcDhcpLseStateDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 31), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDefaultRouter.setStatus('obsolete')
svcDhcpLseStatePrimaryDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 32), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryDnsType.setStatus('obsolete')
svcDhcpLseStatePrimaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 33), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryDns.setStatus('obsolete')
svcDhcpLseStateSecondaryDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 34), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryDnsType.setStatus('obsolete')
svcDhcpLseStateSecondaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 35), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryDns.setStatus('obsolete')
svcDhcpLseStateSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSessionTimeout.setStatus('obsolete')
svcDhcpLseStateServerLeaseStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateServerLeaseStart.setStatus('obsolete')
svcDhcpLseStateServerLastRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateServerLastRenew.setStatus('obsolete')
svcDhcpLseStateServerLeaseEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateServerLeaseEnd.setStatus('obsolete')
svcDhcpLseStateDhcpServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 40), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpServerAddrType.setStatus('obsolete')
svcDhcpLseStateDhcpServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 41), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpServerAddr.setStatus('obsolete')
svcDhcpLseStateOriginSubscrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 42), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOriginSubscrId.setStatus('obsolete')
svcDhcpLseStateOriginStrings = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 43), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOriginStrings.setStatus('obsolete')
svcDhcpLseStateOriginLeaseInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 44), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOriginLeaseInfo.setStatus('obsolete')
svcDhcpLseStateDhcpClientAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 45), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpClientAddrType.setStatus('obsolete')
svcDhcpLseStateDhcpClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 46), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpClientAddr.setStatus('obsolete')
svcDhcpLseStateLeaseSplitActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 47), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateLeaseSplitActive.setStatus('obsolete')
svcDhcpLseStateInterDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateInterDestId.setStatus('obsolete')
svcDhcpLseStatePrimaryNbnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 49), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryNbnsType.setStatus('obsolete')
svcDhcpLseStatePrimaryNbns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 50), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryNbns.setStatus('obsolete')
svcDhcpLseStateSecondaryNbnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 51), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryNbnsType.setStatus('obsolete')
svcDhcpLseStateSecondaryNbns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryNbns.setStatus('obsolete')
svcDhcpLseStateAppProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateAppProfString.setStatus('obsolete')
svcDhcpLseStateNextHopMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 54), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateNextHopMacAddr.setStatus('obsolete')
svcDhcpLseStateCategoryMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 55), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateCategoryMapName.setStatus('obsolete')
svcDhcpLseStateNakNextRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateNakNextRenew.setStatus('obsolete')
svcDhcpLseStateRadiusClassAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 57), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRadiusClassAttr.setStatus('obsolete')
svcDhcpLseStateRadiusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRadiusUserName.setStatus('obsolete')
svcDhcpLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90), )
if mibBuilder.loadTexts: svcDhcpLeaseTable.setStatus('current')
svcDhcpLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseCiAddrType"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseCiAddr"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseNextHopMacAddr"))
if mibBuilder.loadTexts: svcDhcpLeaseEntry.setStatus('current')
svcDhcpLeaseCiAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 1), InetAddressType())
if mibBuilder.loadTexts: svcDhcpLeaseCiAddrType.setStatus('current')
svcDhcpLeaseCiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: svcDhcpLeaseCiAddr.setStatus('current')
svcDhcpLeaseNextHopMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 3), MacAddress())
if mibBuilder.loadTexts: svcDhcpLeaseNextHopMacAddr.setStatus('current')
svcDhcpLeaseChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseChAddr.setStatus('current')
svcDhcpLeaseLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sap", 1), ("sdp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseLocale.setStatus('current')
svcDhcpLeasePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 6), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeasePortId.setStatus('current')
svcDhcpLeaseEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 7), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseEncapValue.setStatus('current')
svcDhcpLeaseSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 8), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseSdpId.setStatus('current')
svcDhcpLeaseVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseVcId.setStatus('current')
svcDhcpLeaseRemainLseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseRemainLseTime.setStatus('current')
svcDhcpLeaseOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseOption82.setStatus('current')
svcDhcpLeasePersistKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeasePersistKey.setStatus('current')
svcDhcpLeaseSubscrIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseSubscrIdent.setStatus('current')
svcDhcpLeaseSubProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseSubProfString.setStatus('current')
svcDhcpLeaseSlaProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseSlaProfString.setStatus('current')
svcDhcpLeaseShcvOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 16), ServShcvOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseShcvOperState.setStatus('current')
svcDhcpLeaseShcvChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseShcvChecks.setStatus('current')
svcDhcpLeaseShcvReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseShcvReplies.setStatus('current')
svcDhcpLeaseShcvReplyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseShcvReplyTime.setStatus('current')
svcDhcpLeaseClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseClientId.setStatus('current')
svcDhcpLeaseIAID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseIAID.setStatus('current')
svcDhcpLeaseIAIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 22), IAIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseIAIDType.setStatus('current')
svcDhcpLeaseCiAddrMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseCiAddrMaskLen.setStatus('current')
svcDhcpLeaseRetailerSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 24), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseRetailerSvcId.setStatus('current')
svcDhcpLeaseRetailerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 25), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseRetailerIf.setStatus('current')
svcDhcpLeaseAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 26), TmnxAncpStringOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseAncpString.setStatus('current')
svcDhcpLeaseFramedIpNetMaskTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 27), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseFramedIpNetMaskTp.setStatus('current')
svcDhcpLeaseFramedIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 28), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseFramedIpNetMask.setStatus('current')
svcDhcpLeaseBCastIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 29), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseBCastIpAddrType.setStatus('current')
svcDhcpLeaseBCastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 30), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseBCastIpAddr.setStatus('current')
svcDhcpLeaseDefaultRouterTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 31), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseDefaultRouterTp.setStatus('current')
svcDhcpLeaseDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 32), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseDefaultRouter.setStatus('current')
svcDhcpLeasePrimaryDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 33), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeasePrimaryDnsType.setStatus('current')
svcDhcpLeasePrimaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 34), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeasePrimaryDns.setStatus('current')
svcDhcpLeaseSecondaryDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 35), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseSecondaryDnsType.setStatus('current')
svcDhcpLeaseSecondaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 36), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseSecondaryDns.setStatus('current')
svcDhcpLeaseSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseSessionTimeout.setStatus('current')
svcDhcpLeaseServerLeaseStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseServerLeaseStart.setStatus('current')
svcDhcpLeaseServerLastRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseServerLastRenew.setStatus('current')
svcDhcpLeaseServerLeaseEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseServerLeaseEnd.setStatus('current')
svcDhcpLeaseDhcpServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 41), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseDhcpServerAddrType.setStatus('current')
svcDhcpLeaseDhcpServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 42), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseDhcpServerAddr.setStatus('current')
svcDhcpLeaseOriginSubscrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 43), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseOriginSubscrId.setStatus('current')
svcDhcpLeaseOriginStrings = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 44), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseOriginStrings.setStatus('current')
svcDhcpLeaseOriginLeaseInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 45), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseOriginLeaseInfo.setStatus('current')
svcDhcpLeaseDhcpClientAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 46), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseDhcpClientAddrType.setStatus('current')
svcDhcpLeaseDhcpClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 47), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseDhcpClientAddr.setStatus('current')
svcDhcpLeaseLeaseSplitActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 48), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseLeaseSplitActive.setStatus('current')
svcDhcpLeaseInterDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseInterDestId.setStatus('current')
svcDhcpLeasePrimaryNbnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 50), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeasePrimaryNbnsType.setStatus('current')
svcDhcpLeasePrimaryNbns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 51), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeasePrimaryNbns.setStatus('current')
svcDhcpLeaseSecondaryNbnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 52), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseSecondaryNbnsType.setStatus('current')
svcDhcpLeaseSecondaryNbns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 53), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseSecondaryNbns.setStatus('current')
svcDhcpLeaseAppProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseAppProfString.setStatus('current')
svcDhcpLeaseCategoryMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 55), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseCategoryMapName.setStatus('current')
svcDhcpLeaseNakNextRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseNakNextRenew.setStatus('current')
svcDhcpLeaseRadiusClassAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 57), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseRadiusClassAttr.setStatus('current')
svcDhcpLeaseRadiusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseRadiusUserName.setStatus('current')
svcDhcpLeasePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 59), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeasePoolName.setStatus('current')
svcDhcpLeaseServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseServerId.setStatus('current')
svcDhcpLeaseInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseInterfaceId.setStatus('current')
svcDhcpLeaseRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseRemoteId.setStatus('current')
svcDhcpLeaseOption60 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseOption60.setStatus('current')
svcDhcpLeaseRadCalledStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 90, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseRadCalledStationId.setStatus('current')
tlsProtectedMacTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17), )
if mibBuilder.loadTexts: tlsProtectedMacTable.setStatus('current')
tlsProtectedMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsProtMacAddress"))
if mibBuilder.loadTexts: tlsProtectedMacEntry.setStatus('current')
tlsProtMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1, 1), MacAddress())
if mibBuilder.loadTexts: tlsProtMacAddress.setStatus('current')
tlsProtMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsProtMacRowStatus.setStatus('current')
tlsProtMacLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsProtMacLastMgmtChange.setStatus('current')
svcDhcpLeaseStateModifyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18), )
if mibBuilder.loadTexts: svcDhcpLeaseStateModifyTable.setStatus('obsolete')
svcDhcpLeaseStateModifyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1), )
svcDhcpLeaseStateEntry.registerAugmentions(("TIMETRA-SERV-MIB", "svcDhcpLeaseStateModifyEntry"))
svcDhcpLeaseStateModifyEntry.setIndexNames(*svcDhcpLeaseStateEntry.getIndexNames())
if mibBuilder.loadTexts: svcDhcpLeaseStateModifyEntry.setStatus('obsolete')
svcDhcpLseStateModifySubIndent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifySubIndent.setStatus('obsolete')
svcDhcpLseStateModifySubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifySubProfile.setStatus('obsolete')
svcDhcpLseStateModifySlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifySlaProfile.setStatus('obsolete')
svcDhcpLseStateEvaluateState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateEvaluateState.setStatus('obsolete')
svcDhcpLseStateModInterDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModInterDestId.setStatus('obsolete')
svcDhcpLseStateModifyAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 6), TmnxAncpStringOrZero().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifyAncpString.setStatus('obsolete')
svcDhcpLseStateModifyAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifyAppProfile.setStatus('obsolete')
svcDhcpLeaseModifyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 91), )
if mibBuilder.loadTexts: svcDhcpLeaseModifyTable.setStatus('current')
svcDhcpLeaseModifyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 91, 1), )
svcDhcpLeaseEntry.registerAugmentions(("TIMETRA-SERV-MIB", "svcDhcpLeaseModifyEntry"))
svcDhcpLeaseModifyEntry.setIndexNames(*svcDhcpLeaseEntry.getIndexNames())
if mibBuilder.loadTexts: svcDhcpLeaseModifyEntry.setStatus('current')
svcDhcpLeaseModifySubIndent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 91, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLeaseModifySubIndent.setStatus('current')
svcDhcpLeaseModifySubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 91, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLeaseModifySubProfile.setStatus('current')
svcDhcpLeaseModifySlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 91, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLeaseModifySlaProfile.setStatus('current')
svcDhcpLeaseEvaluateState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 91, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLeaseEvaluateState.setStatus('current')
svcDhcpLeaseModInterDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 91, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLeaseModInterDestId.setStatus('current')
svcDhcpLeaseModifyAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 91, 1, 6), TmnxAncpStringOrZero().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLeaseModifyAncpString.setStatus('current')
svcDhcpLeaseModifyAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 91, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLeaseModifyAppProfile.setStatus('current')
svcEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19), )
if mibBuilder.loadTexts: svcEndPointTable.setStatus('current')
svcEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcEndPointName"))
if mibBuilder.loadTexts: svcEndPointEntry.setStatus('current')
svcEndPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcEndPointName.setStatus('current')
svcEndPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointRowStatus.setStatus('current')
svcEndPointDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointDescription.setStatus('current')
svcEndPointRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 600), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointRevertTime.setStatus('current')
svcEndPointTxActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("sap", 1), ("sdpBind", 2), ("sdpFec", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveType.setStatus('current')
svcEndPointTxActivePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 6), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActivePortId.setStatus('current')
svcEndPointTxActiveEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 7), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveEncap.setStatus('current')
svcEndPointTxActiveSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 8), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveSdpId.setStatus('current')
svcEndPointForceSwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 9), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointForceSwitchOver.setStatus('current')
svcEndPointForceSwitchOverSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 10), SdpBindId().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointForceSwitchOverSdpId.setStatus('current')
svcEndPointActiveHoldDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('deci-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointActiveHoldDelay.setStatus('current')
svcEndPointIgnoreStandbySig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointIgnoreStandbySig.setStatus('current')
svcEndPointMacPinning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 13), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointMacPinning.setStatus('current')
svcEndPointMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointMacLimit.setStatus('current')
svcEndPointSuppressStandbySig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 15), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointSuppressStandbySig.setStatus('current')
svcEndPointRevertTimeCountDn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 600), ))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointRevertTimeCountDn.setStatus('current')
svcEndPointTxActiveChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveChangeCount.setStatus('current')
svcEndPointTxActiveLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveLastChange.setStatus('current')
svcEndPointTxActiveUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveUpTime.setStatus('current')
svcEndPointMCEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointMCEPId.setStatus('current')
svcEndPointMCEPPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 21), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointMCEPPeerAddrType.setStatus('current')
svcEndPointMCEPPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 22), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointMCEPPeerAddr.setStatus('current')
svcEndPointMCEPPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 23), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointMCEPPeerName.setStatus('current')
svcEndPointBlockOnMeshFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointBlockOnMeshFail.setStatus('current')
svcEndPointMCEPPsvModeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointMCEPPsvModeActive.setStatus('current')
svcEndPointStandbySigMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointStandbySigMaster.setStatus('current')
svcEndPointStandbySigSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointStandbySigSlave.setStatus('current')
svcEndPointForceSwitchOvrSdpFec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 28), TmnxSpokeSdpIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointForceSwitchOvrSdpFec.setStatus('current')
svcEndPointTxActiveSdpFec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 29), TmnxSpokeSdpIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveSdpFec.setStatus('current')
svcEndPointRestProtSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointRestProtSrcMac.setStatus('current')
svcEndPointRestProtSrcMacAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("alarmOnly", 2), ("discardFrame", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointRestProtSrcMacAction.setStatus('current')
svcEndPointAutoLearnMacProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 32), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointAutoLearnMacProtect.setStatus('current')
iesGrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21), )
if mibBuilder.loadTexts: iesGrpIfTable.setStatus('current')
iesGrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesGrpIfEntry.setStatus('current')
iesGrpIfRedInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesGrpIfRedInterface.setStatus('current')
iesGrpIfOperUpWhileEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesGrpIfOperUpWhileEmpty.setStatus('current')
iesGrpIfPolicyControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21, 1, 3), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesGrpIfPolicyControl.setStatus('current')
svcPEDiscoveryPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22), )
if mibBuilder.loadTexts: svcPEDiscoveryPolicyTable.setStatus('current')
svcPEDiscoveryPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1), ).setIndexNames((1, "TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyName"))
if mibBuilder.loadTexts: svcPEDiscoveryPolicyEntry.setStatus('current')
svcPEDiscoveryPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcPEDiscoveryPolicyName.setStatus('current')
svcPEDiscoveryPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyRowStatus.setStatus('current')
svcPEDiscoveryPolicyPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyPassword.setStatus('current')
svcPEDiscoveryPolicyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyInterval.setStatus('current')
svcPEDiscoveryPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 90)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyTimeout.setStatus('current')
svcPEDiscPolServerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23), )
if mibBuilder.loadTexts: svcPEDiscPolServerTable.setStatus('current')
svcPEDiscPolServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcPEDiscPolServerIndex"), (1, "TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyName"))
if mibBuilder.loadTexts: svcPEDiscPolServerEntry.setStatus('current')
svcPEDiscPolServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: svcPEDiscPolServerIndex.setStatus('current')
svcPEDiscPolServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerRowStatus.setStatus('current')
svcPEDiscPolServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerAddressType.setStatus('current')
svcPEDiscPolServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerAddress.setStatus('current')
svcPEDiscPolServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerSecret.setStatus('current')
svcPEDiscPolServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 6), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPEDiscPolServerOperStatus.setStatus('current')
svcPEDiscPolServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerPort.setStatus('current')
svcWholesalerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24), )
if mibBuilder.loadTexts: svcWholesalerInfoTable.setStatus('current')
svcWholesalerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcWholesalerID"))
if mibBuilder.loadTexts: svcWholesalerInfoEntry.setStatus('current')
svcWholesalerID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 1), TmnxServId())
if mibBuilder.loadTexts: svcWholesalerID.setStatus('current')
svcWholesalerNumStaticHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcWholesalerNumStaticHosts.setStatus('current')
svcWholesalerNumDynamicHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcWholesalerNumDynamicHosts.setStatus('current')
svcWholesalerNumDhcpLeaseStates = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcWholesalerNumDhcpLeaseStates.setStatus('current')
svcWholesalerNumPppoeSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcWholesalerNumPppoeSessions.setStatus('current')
svcWholesalerNumArpHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcWholesalerNumArpHosts.setStatus('current')
svcDhcpLeaseStateActionTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 25), )
if mibBuilder.loadTexts: svcDhcpLeaseStateActionTable.setStatus('obsolete')
svcDhcpLeaseStateActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 25, 1), )
svcDhcpLeaseStateEntry.registerAugmentions(("TIMETRA-SERV-MIB", "svcDhcpLeaseStateActionEntry"))
svcDhcpLeaseStateActionEntry.setIndexNames(*svcDhcpLeaseStateEntry.getIndexNames())
if mibBuilder.loadTexts: svcDhcpLeaseStateActionEntry.setStatus('obsolete')
svcDhcpLseStateForceRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 25, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateForceRenew.setStatus('obsolete')
svcDhcpLeaseActionTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 92), )
if mibBuilder.loadTexts: svcDhcpLeaseActionTable.setStatus('current')
svcDhcpLeaseActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 92, 1), )
svcDhcpLeaseEntry.registerAugmentions(("TIMETRA-SERV-MIB", "svcDhcpLeaseActionEntry"))
svcDhcpLeaseActionEntry.setIndexNames(*svcDhcpLeaseEntry.getIndexNames())
if mibBuilder.loadTexts: svcDhcpLeaseActionEntry.setStatus('current')
svcDhcpLeaseForceRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 92, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLeaseForceRenew.setStatus('current')
svcIfDHCP6MsgStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26), )
if mibBuilder.loadTexts: svcIfDHCP6MsgStatTable.setStatus('current')
svcIfDHCP6MsgStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: svcIfDHCP6MsgStatEntry.setStatus('current')
svcIfDHCP6MsgStatsLstClrd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsLstClrd.setStatus('current')
svcIfDHCP6MsgStatsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsRcvd.setStatus('current')
svcIfDHCP6MsgStatsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsSent.setStatus('current')
svcIfDHCP6MsgStatsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsDropped.setStatus('current')
svcTlsBackboneInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27), )
if mibBuilder.loadTexts: svcTlsBackboneInfoTable.setStatus('current')
svcTlsBackboneInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1), )
svcTlsInfoEntry.registerAugmentions(("TIMETRA-SERV-MIB", "svcTlsBackboneInfoEntry"))
svcTlsBackboneInfoEntry.setIndexNames(*svcTlsInfoEntry.getIndexNames())
if mibBuilder.loadTexts: svcTlsBackboneInfoEntry.setStatus('current')
svcTlsBackboneSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneSrcMac.setStatus('current')
svcTlsBackboneVplsSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 2), TmnxServId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneVplsSvcId.setStatus('current')
svcTlsBackboneVplsSvcISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 3), SvcISID().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneVplsSvcISID.setStatus('current')
svcTlsBackboneOperSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBackboneOperSrcMac.setStatus('current')
svcTlsBackboneOperVplsSvcISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 5), SvcISID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBackboneOperVplsSvcISID.setStatus('current')
svcTlsBackboneLDPMacFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneLDPMacFlush.setStatus('current')
svcTlsBackboneVplsStp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 7), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneVplsStp.setStatus('current')
svcTlsBackboneLDPMacFlushNotMine = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneLDPMacFlushNotMine.setStatus('current')
svcTlsBackboneUseSapBMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneUseSapBMac.setStatus('current')
svcTlsBackboneForceQTagFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneForceQTagFwd.setStatus('current')
tlsMFibTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28), )
if mibBuilder.loadTexts: tlsMFibTable.setStatus('current')
tlsMFibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsMFibEntryType"), (0, "TIMETRA-SERV-MIB", "tlsMFibGrpMacAddr"), (0, "TIMETRA-SERV-MIB", "tlsMFibGrpInetAddrType"), (0, "TIMETRA-SERV-MIB", "tlsMFibGrpInetAddr"), (0, "TIMETRA-SERV-MIB", "tlsMFibSrcInetAddrType"), (0, "TIMETRA-SERV-MIB", "tlsMFibSrcInetAddr"), (0, "TIMETRA-SERV-MIB", "tlsMFibLocale"), (0, "TIMETRA-SERV-MIB", "tlsMFibPortId"), (0, "TIMETRA-SERV-MIB", "tlsMFibEncapValue"), (0, "TIMETRA-SERV-MIB", "tlsMFibSdpId"), (0, "TIMETRA-SERV-MIB", "tlsMFibVcId"))
if mibBuilder.loadTexts: tlsMFibEntry.setStatus('current')
tlsMFibEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipBased", 1), ("macBased", 2))))
if mibBuilder.loadTexts: tlsMFibEntryType.setStatus('current')
tlsMFibGrpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 2), MacAddress())
if mibBuilder.loadTexts: tlsMFibGrpMacAddr.setStatus('current')
tlsMFibGrpInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 3), InetAddressType())
if mibBuilder.loadTexts: tlsMFibGrpInetAddrType.setStatus('current')
tlsMFibGrpInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibGrpInetAddr.setStatus('current')
tlsMFibSrcInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 5), InetAddressType())
if mibBuilder.loadTexts: tlsMFibSrcInetAddrType.setStatus('current')
tlsMFibSrcInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibSrcInetAddr.setStatus('current')
tlsMFibLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 7), MfibLocation())
if mibBuilder.loadTexts: tlsMFibLocale.setStatus('current')
tlsMFibPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 8), TmnxPortID())
if mibBuilder.loadTexts: tlsMFibPortId.setStatus('current')
tlsMFibEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 9), TmnxEncapVal())
if mibBuilder.loadTexts: tlsMFibEncapValue.setStatus('current')
tlsMFibSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 10), SdpId())
if mibBuilder.loadTexts: tlsMFibSdpId.setStatus('current')
tlsMFibVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 11), Unsigned32())
if mibBuilder.loadTexts: tlsMFibVcId.setStatus('current')
tlsMFibFwdOrBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 12), MfibGrpSrcFwdOrBlk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibFwdOrBlk.setStatus('current')
tlsMFibSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 13), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibSvcId.setStatus('current')
tlsMFibStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29), )
if mibBuilder.loadTexts: tlsMFibStatsTable.setStatus('current')
tlsMFibStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsMFibStatsEntryType"), (0, "TIMETRA-SERV-MIB", "tlsMFibStatsGrpMacAddr"), (0, "TIMETRA-SERV-MIB", "tlsMFibStatsGrpInetAddrType"), (0, "TIMETRA-SERV-MIB", "tlsMFibStatsGrpInetAddr"), (0, "TIMETRA-SERV-MIB", "tlsMFibStatsSrcInetAddrType"), (0, "TIMETRA-SERV-MIB", "tlsMFibStatsSrcInetAddr"))
if mibBuilder.loadTexts: tlsMFibStatsEntry.setStatus('current')
tlsMFibStatsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipBased", 1), ("macBased", 2))))
if mibBuilder.loadTexts: tlsMFibStatsEntryType.setStatus('current')
tlsMFibStatsGrpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 2), MacAddress())
if mibBuilder.loadTexts: tlsMFibStatsGrpMacAddr.setStatus('current')
tlsMFibStatsGrpInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 3), InetAddressType())
if mibBuilder.loadTexts: tlsMFibStatsGrpInetAddrType.setStatus('current')
tlsMFibStatsGrpInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibStatsGrpInetAddr.setStatus('current')
tlsMFibStatsSrcInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 5), InetAddressType())
if mibBuilder.loadTexts: tlsMFibStatsSrcInetAddrType.setStatus('current')
tlsMFibStatsSrcInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibStatsSrcInetAddr.setStatus('current')
tlsMFibStatsForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibStatsForwardedPkts.setStatus('current')
tlsMFibStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibStatsForwardedOctets.setStatus('current')
svcTlsBgpADTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADTableLastChanged.setStatus('current')
svcTlsBgpADTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31), )
if mibBuilder.loadTexts: svcTlsBgpADTable.setStatus('current')
svcTlsBgpADEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcTlsBgpADEntry.setStatus('current')
svcTlsBgpADRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADRowStatus.setStatus('current')
svcTlsBgpADLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADLastChanged.setStatus('current')
svcTlsBgpADVplsId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 3), TmnxVPNRouteDistinguisher().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVplsId.setStatus('current')
svcTlsBgpADVsiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiPrefix.setStatus('current')
svcTlsBgpADVsiRD = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 5), TmnxVPNRouteDistinguisher().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiRD.setStatus('obsolete')
svcTlsBgpADExportRteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADExportRteTarget.setStatus('obsolete')
svcTlsBgpADVsiExportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 7), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy1.setStatus('obsolete')
svcTlsBgpADVsiExportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 8), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy2.setStatus('obsolete')
svcTlsBgpADVsiExportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 9), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy3.setStatus('obsolete')
svcTlsBgpADVsiExportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 10), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy4.setStatus('obsolete')
svcTlsBgpADVsiExportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 11), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy5.setStatus('obsolete')
svcTlsBgpADImportRteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 12), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADImportRteTarget.setStatus('obsolete')
svcTlsBgpADVsiImportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 13), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy1.setStatus('obsolete')
svcTlsBgpADVsiImportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 14), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy2.setStatus('obsolete')
svcTlsBgpADVsiImportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 15), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy3.setStatus('obsolete')
svcTlsBgpADVsiImportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 16), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy4.setStatus('obsolete')
svcTlsBgpADVsiImportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 17), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy5.setStatus('obsolete')
svcTlsBgpADAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 18), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADAdminStatus.setStatus('current')
svcEpipePbbTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 36), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipePbbTableLastChanged.setStatus('current')
svcEpipePbbTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37), )
if mibBuilder.loadTexts: svcEpipePbbTable.setStatus('current')
svcEpipePbbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcEpipePbbEntry.setStatus('current')
svcEpipePbbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbRowStatus.setStatus('current')
svcEpipePbbLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipePbbLastChngd.setStatus('current')
svcEpipePbbBvplsSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 3), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbBvplsSvcId.setStatus('current')
svcEpipePbbBvplsDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 4), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbBvplsDstMac.setStatus('current')
svcEpipePbbSvcISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 5), SvcISID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbSvcISID.setStatus('current')
svcEpipePbbOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 6), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipePbbOperState.setStatus('current')
svcEpipePbbFlooding = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipePbbFlooding.setStatus('current')
svcEpipePbbLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipePbbLastStatusChange.setStatus('current')
svcEpipePbbBvplsOperDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipePbbBvplsOperDstMac.setStatus('current')
svcEpipePbbBvplsDstMacName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 10), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbBvplsDstMacName.setStatus('current')
tlsPipInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40), )
if mibBuilder.loadTexts: tlsPipInfoTable.setStatus('current')
tlsPipInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: tlsPipInfoEntry.setStatus('current')
tlsPipStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 1), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpPortState.setStatus('current')
tlsPipStpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 2), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpPortRole.setStatus('current')
tlsPipStpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpDesignatedBridge.setStatus('current')
tlsPipStpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpDesignatedPort.setStatus('current')
tlsPipStpException = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 5), StpExceptionCondition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpException.setStatus('current')
tlsPipStpForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpForwardTransitions.setStatus('current')
tlsPipStpInConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInConfigBpdus.setStatus('current')
tlsPipStpInTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInTcnBpdus.setStatus('current')
tlsPipStpInRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInRstBpdus.setStatus('current')
tlsPipStpInMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInMstBpdus.setStatus('current')
tlsPipStpInBadBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInBadBpdus.setStatus('current')
tlsPipStpOutConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutConfigBpdus.setStatus('current')
tlsPipStpOutTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutTcnBpdus.setStatus('current')
tlsPipStpOutRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutRstBpdus.setStatus('current')
tlsPipStpOutMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutMstBpdus.setStatus('current')
tlsPipStpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 16), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOperStatus.setStatus('current')
tlsPipStpMvplsPruneState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 17), MvplsPruneState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpMvplsPruneState.setStatus('current')
tlsPipStpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 18), StpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOperProtocol.setStatus('current')
tlsPipStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpPortNum.setStatus('current')
tlsPipStpInsideRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInsideRegion.setStatus('current')
tlsPipInTcBitBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipInTcBitBpdus.setStatus('current')
tlsPipOutTcBitBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipOutTcBitBpdus.setStatus('current')
tlsPipMstiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41), )
if mibBuilder.loadTexts: tlsPipMstiTable.setStatus('current')
tlsPipMstiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsMstiInstanceId"))
if mibBuilder.loadTexts: tlsPipMstiEntry.setStatus('current')
tlsPipMstiPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 1), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiPortRole.setStatus('current')
tlsPipMstiPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 2), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiPortState.setStatus('current')
tlsPipMstiDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiDesignatedBridge.setStatus('current')
tlsPipMstiDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiDesignatedPort.setStatus('current')
svcTotalFdbMimDestIdxEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalFdbMimDestIdxEntries.setStatus('current')
svcDhcpManagedRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43), )
if mibBuilder.loadTexts: svcDhcpManagedRouteTable.setStatus('current')
svcDhcpManagedRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrType"), (0, "TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddr"), (0, "TIMETRA-SERV-MIB", "svcDhcpManagedRouteInetAddrType"), (0, "TIMETRA-SERV-MIB", "svcDhcpManagedRouteInetAddr"), (0, "TIMETRA-SERV-MIB", "svcDhcpManagedRoutePrefixLen"))
if mibBuilder.loadTexts: svcDhcpManagedRouteEntry.setStatus('current')
svcDhcpManagedRouteInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 1), InetAddressType())
if mibBuilder.loadTexts: svcDhcpManagedRouteInetAddrType.setStatus('current')
svcDhcpManagedRouteInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 2), InetAddress())
if mibBuilder.loadTexts: svcDhcpManagedRouteInetAddr.setStatus('current')
svcDhcpManagedRoutePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: svcDhcpManagedRoutePrefixLen.setStatus('current')
svcDhcpManagedRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 4), TmnxManagedRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpManagedRouteStatus.setStatus('current')
svcArpHostTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 44), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostTableLastChanged.setStatus('current')
svcArpHostTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45), )
if mibBuilder.loadTexts: svcArpHostTable.setStatus('current')
svcArpHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcArpHostIpAddrType"), (0, "TIMETRA-SERV-MIB", "svcArpHostIpAddr"))
if mibBuilder.loadTexts: svcArpHostEntry.setStatus('current')
svcArpHostIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 1), InetAddressType())
if mibBuilder.loadTexts: svcArpHostIpAddrType.setStatus('current')
svcArpHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )))
if mibBuilder.loadTexts: svcArpHostIpAddr.setStatus('current')
svcArpHostLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 3), ServAccessLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostLocale.setStatus('current')
svcArpHostSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 4), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostSapPortId.setStatus('current')
svcArpHostSapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 5), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostSapEncapValue.setStatus('current')
svcArpHostSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 6), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostSdpId.setStatus('current')
svcArpHostVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostVcId.setStatus('current')
svcArpHostSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostSessionTimeout.setStatus('current')
svcArpHostStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 9), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostStart.setStatus('current')
svcArpHostLastAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 10), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostLastAuth.setStatus('current')
svcArpHostRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 11), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostRefresh.setStatus('current')
svcArpHostRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 12), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostRemainingTime.setStatus('current')
svcArpHostShcvOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 13), ServShcvOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostShcvOperState.setStatus('current')
svcArpHostShcvChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostShcvChecks.setStatus('current')
svcArpHostShcvReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostShcvReplies.setStatus('current')
svcArpHostShcvReplyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostShcvReplyTime.setStatus('current')
svcArpHostSubscrIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 17), TmnxSubIdentStringOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostSubscrIdent.setStatus('current')
svcArpHostSubProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 18), TmnxSubProfileStringOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostSubProfString.setStatus('current')
svcArpHostSlaProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 19), TmnxSlaProfileStringOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostSlaProfString.setStatus('current')
svcArpHostAppProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 20), TmnxAppProfileStringOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostAppProfString.setStatus('current')
svcArpHostAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 21), TmnxAncpStringOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostAncpString.setStatus('current')
svcArpHostInterDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 22), TmnxSubMgtIntDestIdOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostInterDestId.setStatus('current')
svcArpHostRetailerSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 23), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostRetailerSvcId.setStatus('current')
svcArpHostRetailerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 24), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostRetailerIf.setStatus('current')
svcArpHostMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 25), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostMacAddr.setStatus('current')
svcArpHostPersistKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostPersistKey.setStatus('current')
svcArpHostCategoryMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 27), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostCategoryMapName.setStatus('current')
svcArpHostRadiusClassAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostRadiusClassAttr.setStatus('current')
svcArpHostRadiusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostRadiusUserName.setStatus('current')
svcArpHostOriginSubscrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 30), ArpHostInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostOriginSubscrId.setStatus('current')
svcArpHostOriginStrings = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 45, 1, 31), ArpHostInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostOriginStrings.setStatus('current')
svcArpHostIfTableLastMgmtChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 46), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostIfTableLastMgmtChange.setStatus('current')
svcArpHostIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 47), )
if mibBuilder.loadTexts: svcArpHostIfTable.setStatus('current')
svcArpHostIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 47, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: svcArpHostIfEntry.setStatus('current')
svcArpHostIfLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 47, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostIfLastMgmtChange.setStatus('current')
svcArpHostIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 47, 1, 2), TmnxAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcArpHostIfAdminState.setStatus('current')
svcArpHostIfMaxNumHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 47, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcArpHostIfMaxNumHosts.setStatus('current')
svcArpHostIfMaxNumHostsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 47, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcArpHostIfMaxNumHostsSap.setStatus('current')
svcArpHostIfMinAuthInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 47, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcArpHostIfMinAuthInterval.setStatus('current')
svcArpHostIfNumHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 47, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostIfNumHosts.setStatus('current')
svcArpHostDefaultSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 48), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostDefaultSessionTimeout.setStatus('current')
svcIgmpTrkTableLastMgmtChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 49), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIgmpTrkTableLastMgmtChange.setStatus('current')
svcIgmpTrkTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 50), )
if mibBuilder.loadTexts: svcIgmpTrkTable.setStatus('current')
svcIgmpTrkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 50, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcIgmpTrkEntry.setStatus('current')
svcIgmpTrkLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 50, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIgmpTrkLastMgmtChange.setStatus('current')
svcIgmpTrkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 50, 1, 2), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcIgmpTrkAdminState.setStatus('current')
svcIgmpTrkExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 50, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(260)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcIgmpTrkExpiryTime.setStatus('current')
svcIpipeInfoTableLastMgmtChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 51), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIpipeInfoTableLastMgmtChange.setStatus('current')
svcIpipeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 52), )
if mibBuilder.loadTexts: svcIpipeInfoTable.setStatus('current')
svcIpipeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 52, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcIpipeInfoEntry.setStatus('current')
svcIpipeInfoLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 52, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIpipeInfoLastMgmtChange.setStatus('current')
svcIpipeCeAddressDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 52, 1, 2), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcIpipeCeAddressDiscovery.setStatus('current')
svcIpipeIpv6CeAddressDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 52, 1, 3), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcIpipeIpv6CeAddressDiscovery.setStatus('current')
svcIpipeStackCapabilitySignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 52, 1, 4), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcIpipeStackCapabilitySignaling.setStatus('current')
svcDhcpLeaseStateBgpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 53), )
if mibBuilder.loadTexts: svcDhcpLeaseStateBgpTable.setStatus('obsolete')
svcDhcpLeaseStateBgpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 53, 1), )
svcDhcpLeaseStateEntry.registerAugmentions(("TIMETRA-SERV-MIB", "svcDhcpLeaseStateBgpEntry"))
svcDhcpLeaseStateBgpEntry.setIndexNames(*svcDhcpLeaseStateEntry.getIndexNames())
if mibBuilder.loadTexts: svcDhcpLeaseStateBgpEntry.setStatus('current')
svcDhcpLseStateBgpPrngPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 53, 1, 1), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBgpPrngPlcyName.setStatus('obsolete')
svcDhcpLseStateBgpAuthKeyChain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 53, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBgpAuthKeyChain.setStatus('obsolete')
svcDhcpLseStateBgpMD5AuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 53, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBgpMD5AuthKey.setStatus('obsolete')
svcDhcpLseStateBgpImportPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 53, 1, 4), TPolicyStatementNameOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBgpImportPolicy.setStatus('obsolete')
svcDhcpLseStateBgpExportPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 53, 1, 5), TPolicyStatementNameOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBgpExportPolicy.setStatus('obsolete')
svcDhcpLseStateBgpPeerAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 53, 1, 6), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBgpPeerAS.setStatus('obsolete')
svcDhcpLseStateBgpPeeringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 53, 1, 7), BgpPeeringStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBgpPeeringStatus.setStatus('obsolete')
svcDhcpLeaseBgpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 93), )
if mibBuilder.loadTexts: svcDhcpLeaseBgpTable.setStatus('current')
svcDhcpLeaseBgpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 93, 1), )
svcDhcpLeaseEntry.registerAugmentions(("TIMETRA-SERV-MIB", "svcDhcpLeaseBgpEntry"))
svcDhcpLeaseBgpEntry.setIndexNames(*svcDhcpLeaseEntry.getIndexNames())
if mibBuilder.loadTexts: svcDhcpLeaseBgpEntry.setStatus('current')
svcDhcpLeaseBgpPrngPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 93, 1, 1), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseBgpPrngPlcyName.setStatus('current')
svcDhcpLeaseBgpAuthKeyChain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 93, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseBgpAuthKeyChain.setStatus('current')
svcDhcpLeaseBgpMD5AuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 93, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseBgpMD5AuthKey.setStatus('current')
svcDhcpLeaseBgpImportPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 93, 1, 4), TPolicyStatementNameOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseBgpImportPolicy.setStatus('current')
svcDhcpLeaseBgpExportPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 93, 1, 5), TPolicyStatementNameOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseBgpExportPolicy.setStatus('current')
svcDhcpLeaseBgpPeerAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 93, 1, 6), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseBgpPeerAS.setStatus('current')
svcDhcpLeaseBgpPeeringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 93, 1, 7), BgpPeeringStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseBgpPeeringStatus.setStatus('current')
svcArpHostMRtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 54), )
if mibBuilder.loadTexts: svcArpHostMRtTable.setStatus('current')
svcArpHostMRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 54, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcArpHostIpAddrType"), (0, "TIMETRA-SERV-MIB", "svcArpHostIpAddr"), (0, "TIMETRA-SERV-MIB", "svcArpHostMRtAddrType"), (0, "TIMETRA-SERV-MIB", "svcArpHostMRtAddr"), (0, "TIMETRA-SERV-MIB", "svcArpHostMRtPrefixLen"))
if mibBuilder.loadTexts: svcArpHostMRtEntry.setStatus('current')
svcArpHostMRtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 54, 1, 1), InetAddressType())
if mibBuilder.loadTexts: svcArpHostMRtAddrType.setStatus('current')
svcArpHostMRtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 54, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: svcArpHostMRtAddr.setStatus('current')
svcArpHostMRtPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 54, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: svcArpHostMRtPrefixLen.setStatus('current')
svcArpHostMRtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 54, 1, 4), TmnxManagedRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostMRtStatus.setStatus('current')
svcArpHostBgpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 55), )
if mibBuilder.loadTexts: svcArpHostBgpTable.setStatus('current')
svcArpHostBgpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 55, 1), )
svcArpHostEntry.registerAugmentions(("TIMETRA-SERV-MIB", "svcArpHostBgpEntry"))
svcArpHostBgpEntry.setIndexNames(*svcArpHostEntry.getIndexNames())
if mibBuilder.loadTexts: svcArpHostBgpEntry.setStatus('current')
svcArpHostBgpPrngPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 55, 1, 1), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostBgpPrngPlcyName.setStatus('current')
svcArpHostBgpAuthKeyChain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 55, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostBgpAuthKeyChain.setStatus('current')
svcArpHostBgpMD5AuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 55, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostBgpMD5AuthKey.setStatus('current')
svcArpHostBgpImportPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 55, 1, 4), TPolicyStatementNameOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostBgpImportPolicy.setStatus('current')
svcArpHostBgpExportPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 55, 1, 5), TPolicyStatementNameOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostBgpExportPolicy.setStatus('current')
svcArpHostBgpPeerAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 55, 1, 6), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostBgpPeerAS.setStatus('current')
svcArpHostBgpPeeringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 55, 1, 7), BgpPeeringStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostBgpPeeringStatus.setStatus('current')
svcEpMcEpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 56), )
if mibBuilder.loadTexts: svcEpMcEpStatsTable.setStatus('current')
svcEpMcEpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 56, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcEndPointMCEPId"))
if mibBuilder.loadTexts: svcEpMcEpStatsEntry.setStatus('current')
svcEpMcEpStatsPktsRxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 56, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpMcEpStatsPktsRxConfig.setStatus('current')
svcEpMcEpStatsPktsRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 56, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpMcEpStatsPktsRxState.setStatus('current')
svcEpMcEpStatsPktsTxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 56, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpMcEpStatsPktsTxConfig.setStatus('current')
svcEpMcEpStatsPktsTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 56, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpMcEpStatsPktsTxState.setStatus('current')
svcEpMcEpStatsPktsTxFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 56, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpMcEpStatsPktsTxFailed.setStatus('current')
svcPbbSrcBVplsMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 57), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPbbSrcBVplsMacAddr.setStatus('current')
svcMacNameTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 58), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMacNameTableLastChanged.setStatus('current')
svcMacNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 59), )
if mibBuilder.loadTexts: svcMacNameTable.setStatus('current')
svcMacNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 59, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcMacName"))
if mibBuilder.loadTexts: svcMacNameEntry.setStatus('current')
svcMacName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 59, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcMacName.setStatus('current')
svcMacNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 59, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMacNameRowStatus.setStatus('current')
svcMacNameLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 59, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMacNameLastChngd.setStatus('current')
svcMacNameAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 59, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMacNameAddr.setStatus('current')
tlsProtMacImplTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 61), )
if mibBuilder.loadTexts: tlsProtMacImplTable.setStatus('current')
tlsProtMacImplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 61, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsProtMacImplMacAddr"), (0, "TIMETRA-SERV-MIB", "tlsProtMacImplLocale"), (0, "TIMETRA-SERV-MIB", "tlsProtMacImplPortId"), (0, "TIMETRA-SERV-MIB", "tlsProtMacImplEncapValue"), (0, "TIMETRA-SERV-MIB", "tlsProtMacImplSdpBindId"))
if mibBuilder.loadTexts: tlsProtMacImplEntry.setStatus('current')
tlsProtMacImplMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 61, 1, 1), MacAddress())
if mibBuilder.loadTexts: tlsProtMacImplMacAddr.setStatus('current')
tlsProtMacImplLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 61, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("sap", 1), ("sdp", 2))))
if mibBuilder.loadTexts: tlsProtMacImplLocale.setStatus('current')
tlsProtMacImplPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 61, 1, 3), TmnxPortID())
if mibBuilder.loadTexts: tlsProtMacImplPortId.setStatus('current')
tlsProtMacImplEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 61, 1, 4), TmnxEncapVal())
if mibBuilder.loadTexts: tlsProtMacImplEncapValue.setStatus('current')
tlsProtMacImplSdpBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 61, 1, 5), SdpBindId())
if mibBuilder.loadTexts: tlsProtMacImplSdpBindId.setStatus('current')
tlsProtMacImplCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 61, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsProtMacImplCount.setStatus('current')
svcMacNotificationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 60))
svcMacNotifInterval = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 60, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMacNotifInterval.setStatus('current')
svcMacNotifCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 60, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMacNotifCount.setStatus('current')
svcNameTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 62), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNameTableLastChanged.setStatus('current')
svcNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 63), )
if mibBuilder.loadTexts: svcNameTable.setStatus('current')
svcNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 63, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcName"))
if mibBuilder.loadTexts: svcNameEntry.setStatus('current')
svcNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 63, 1, 1), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcNameId.setStatus('current')
svcNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 63, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcNameRowStatus.setStatus('current')
svcNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 63, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNameLastChanged.setStatus('current')
svcNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 63, 1, 4), ServType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcNameType.setStatus('current')
svcMrpPlcyTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 64), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMrpPlcyTableLastChgd.setStatus('current')
svcMrpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 65), )
if mibBuilder.loadTexts: svcMrpPolicyTable.setStatus('current')
svcMrpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 65, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcMrpPolicyName"))
if mibBuilder.loadTexts: svcMrpPolicyEntry.setStatus('current')
svcMrpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 65, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcMrpPolicyName.setStatus('current')
svcMrpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 65, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMrpPolicyRowStatus.setStatus('current')
svcMrpPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 65, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMrpPolicyLastChanged.setStatus('current')
svcMrpPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 65, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMrpPolicyDescription.setStatus('current')
svcMrpPolicyScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 65, 1, 5), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMrpPolicyScope.setStatus('current')
svcMrpPolicyDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 65, 1, 6), TMrpPolicyDefaultAction().clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMrpPolicyDefaultAction.setStatus('current')
svcMrpPlcyParamsTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 66), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMrpPlcyParamsTblLastChgd.setStatus('current')
svcMrpPolicyParamsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 67), )
if mibBuilder.loadTexts: svcMrpPolicyParamsTable.setStatus('current')
svcMrpPolicyParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 67, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcMrpPolicyName"), (0, "TIMETRA-SERV-MIB", "svcMrpPolicyParamsEntryId"))
if mibBuilder.loadTexts: svcMrpPolicyParamsEntry.setStatus('current')
svcMrpPolicyParamsEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 67, 1, 1), TEntryId())
if mibBuilder.loadTexts: svcMrpPolicyParamsEntryId.setStatus('current')
svcMrpPolicyParamsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 67, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMrpPolicyParamsRowStatus.setStatus('current')
svcMrpPolicyParamsLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 67, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMrpPolicyParamsLastChanged.setStatus('current')
svcMrpPolicyParamsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 67, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMrpPolicyParamsDescription.setStatus('current')
svcMrpPolicyParamsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 67, 1, 5), TMrpPolicyAction().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMrpPolicyParamsAction.setStatus('current')
svcMrpPlcyParamsISIDTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 68), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMrpPlcyParamsISIDTblLastChgd.setStatus('current')
svcMrpPolicyParamsISIDTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 69), )
if mibBuilder.loadTexts: svcMrpPolicyParamsISIDTable.setStatus('current')
svcMrpPolicyParamsISIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 69, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcMrpPolicyName"), (0, "TIMETRA-SERV-MIB", "svcMrpPolicyParamsEntryId"), (0, "TIMETRA-SERV-MIB", "svcMrpPolicyParamsISIDLow"))
if mibBuilder.loadTexts: svcMrpPolicyParamsISIDEntry.setStatus('current')
svcMrpPolicyParamsISIDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 69, 1, 1), SvcISID().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)))
if mibBuilder.loadTexts: svcMrpPolicyParamsISIDLow.setStatus('current')
svcMrpPolicyParamsISIDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 69, 1, 2), SvcISID().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMrpPolicyParamsISIDHigh.setStatus('current')
svcMrpPolicyParamsISIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 69, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMrpPolicyParamsISIDRowStatus.setStatus('current')
svcMrpPolicyParamsISIDLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 69, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMrpPolicyParamsISIDLastChgd.setStatus('current')
svcEpipeTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 70), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipeTableLastChanged.setStatus('current')
svcEpipeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 71), )
if mibBuilder.loadTexts: svcEpipeTable.setStatus('current')
svcEpipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 71, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcEpipeEntry.setStatus('current')
svcEpipeLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 71, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipeLastChngd.setStatus('current')
svcEpipePerSvcHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 71, 1, 2), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcEpipePerSvcHashing.setStatus('current')
svcEpipeBackboneTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 72), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipeBackboneTableLastChanged.setStatus('current')
svcEpipeBackboneTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 73), )
if mibBuilder.loadTexts: svcEpipeBackboneTable.setStatus('current')
svcEpipeBackboneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 73, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcEpipeBackboneEntry.setStatus('current')
svcEpipeBackboneLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 73, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipeBackboneLastChngd.setStatus('current')
svcEpipeBackboneForceQTagFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 73, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcEpipeBackboneForceQTagFwd.setStatus('current')
svcTlsSiteIdTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 74), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSiteIdTblLastChanged.setStatus('current')
svcTlsSiteIdTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75), )
if mibBuilder.loadTexts: svcTlsSiteIdTable.setStatus('current')
svcTlsSiteIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcTlsSiteIdName"))
if mibBuilder.loadTexts: svcTlsSiteIdEntry.setStatus('current')
svcTlsSiteIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcTlsSiteIdName.setStatus('current')
svcTlsSiteIdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdRowStatus.setStatus('current')
svcTlsSiteIdLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSiteIdLastChanged.setStatus('current')
svcTlsSiteIdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 4), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdAdminStatus.setStatus('current')
svcTlsSiteIdSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 5), TmnxSiteId().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdSiteId.setStatus('current')
svcTlsSiteIdPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 6), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdPortId.setStatus('current')
svcTlsSiteIdEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 7), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdEncapValue.setStatus('current')
svcTlsSiteIdSdpBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 8), SdpBindId().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdSdpBindId.setStatus('current')
svcTlsSiteIdShgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdShgName.setStatus('current')
svcTlsSiteIdShgMeshSdp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdShgMeshSdp.setStatus('current')
svcTlsSiteIdFailedThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1000), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdFailedThresh.setStatus('current')
svcTlsSiteIdOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 12), TSiteOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSiteIdOperStatus.setStatus('current')
svcTlsSiteIdDesignatedFwdr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSiteIdDesignatedFwdr.setStatus('current')
svcTlsSiteIdBootTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 600), )).clone(-1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdBootTimer.setStatus('current')
svcTlsSiteIdSiteActTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdSiteActTimer.setStatus('current')
svcTlsSiteIdDfUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 16), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSiteIdDfUpTime.setStatus('current')
svcTlsSiteIdDfChgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSiteIdDfChgCnt.setStatus('current')
svcTlsSiteIdTimerRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 18), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSiteIdTimerRemain.setStatus('current')
svcTlsSiteIdMonitorOperGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 75, 1, 19), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSiteIdMonitorOperGrp.setStatus('current')
svcBgpVplsTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 78), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBgpVplsTblLastChanged.setStatus('current')
svcBgpVplsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 79), )
if mibBuilder.loadTexts: svcBgpVplsTable.setStatus('current')
svcBgpVplsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 79, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcBgpVplsEntry.setStatus('current')
svcBgpVplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 79, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcBgpVplsRowStatus.setStatus('current')
svcBgpVplsLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 79, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBgpVplsLastChanged.setStatus('current')
svcBgpVplsMaxVeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 79, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcBgpVplsMaxVeId.setStatus('current')
svcBgpVplsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 79, 1, 4), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcBgpVplsAdminStatus.setStatus('current')
svcBgpVplsVeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 79, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcBgpVplsVeName.setStatus('current')
svcBgpVplsVeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 79, 1, 6), TmnxSiteId().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcBgpVplsVeId.setStatus('current')
svcTlsBgpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 80), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpTableLastChanged.setStatus('current')
svcTlsBgpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81), )
if mibBuilder.loadTexts: svcTlsBgpTable.setStatus('current')
svcTlsBgpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcTlsBgpEntry.setStatus('current')
svcTlsBgpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpLastChanged.setStatus('current')
svcTlsBgpVsiRD = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 2), TmnxVPNRouteDistinguisher().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiRD.setStatus('current')
svcTlsBgpExportRteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 3), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpExportRteTarget.setStatus('current')
svcTlsBgpVsiExportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 4), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiExportPolicy1.setStatus('current')
svcTlsBgpVsiExportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 5), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiExportPolicy2.setStatus('current')
svcTlsBgpVsiExportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 6), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiExportPolicy3.setStatus('current')
svcTlsBgpVsiExportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 7), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiExportPolicy4.setStatus('current')
svcTlsBgpVsiExportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 8), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiExportPolicy5.setStatus('current')
svcTlsBgpImportRteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 9), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpImportRteTarget.setStatus('current')
svcTlsBgpVsiImportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 10), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiImportPolicy1.setStatus('current')
svcTlsBgpVsiImportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 11), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiImportPolicy2.setStatus('current')
svcTlsBgpVsiImportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 12), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiImportPolicy3.setStatus('current')
svcTlsBgpVsiImportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 13), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiImportPolicy4.setStatus('current')
svcTlsBgpVsiImportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 14), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpVsiImportPolicy5.setStatus('current')
svcTlsBgpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 81, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpRowStatus.setStatus('current')
svcTlsPbbIgmpSnpgMRtrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 82), )
if mibBuilder.loadTexts: svcTlsPbbIgmpSnpgMRtrTable.setStatus('current')
svcTlsPbbIgmpSnpgMRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 82, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcTlsPbbIgmpSnpgMRtrSvcIdIVpls"), (0, "TIMETRA-SERV-MIB", "svcTlsPbbIgmpSnpgMRtrSvcIdBVpls"), (1, "TIMETRA-SERV-MIB", "svcTlsPbbIgmpSnpgMRtrMacName"))
if mibBuilder.loadTexts: svcTlsPbbIgmpSnpgMRtrEntry.setStatus('current')
svcTlsPbbIgmpSnpgMRtrSvcIdIVpls = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 82, 1, 1), TmnxServId())
if mibBuilder.loadTexts: svcTlsPbbIgmpSnpgMRtrSvcIdIVpls.setStatus('current')
svcTlsPbbIgmpSnpgMRtrSvcIdBVpls = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 82, 1, 2), TmnxServId())
if mibBuilder.loadTexts: svcTlsPbbIgmpSnpgMRtrSvcIdBVpls.setStatus('current')
svcTlsPbbIgmpSnpgMRtrMacName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 82, 1, 3), TNamedItem())
if mibBuilder.loadTexts: svcTlsPbbIgmpSnpgMRtrMacName.setStatus('current')
svcTlsPbbIgmpSnpgMRtrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 82, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsPbbIgmpSnpgMRtrRowStatus.setStatus('current')
svcTlsPbbIgmpSnpgMRtrLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 82, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsPbbIgmpSnpgMRtrLastCh.setStatus('current')
svcL2MhRteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 83), )
if mibBuilder.loadTexts: svcL2MhRteTable.setStatus('current')
svcL2MhRteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 83, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcL2MhRteSiteId"), (0, "TIMETRA-SERV-MIB", "svcL2MhRteRouteDistinguisher"), (0, "TIMETRA-SERV-MIB", "svcL2MhRteNextHopType"), (0, "TIMETRA-SERV-MIB", "svcL2MhRteNextHop"))
if mibBuilder.loadTexts: svcL2MhRteEntry.setStatus('current')
svcL2MhRteSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 83, 1, 1), TmnxSiteId())
if mibBuilder.loadTexts: svcL2MhRteSiteId.setStatus('current')
svcL2MhRteRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 83, 1, 2), TmnxVPNRouteDistinguisher())
if mibBuilder.loadTexts: svcL2MhRteRouteDistinguisher.setStatus('current')
svcL2MhRteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 83, 1, 3), InetAddressType())
if mibBuilder.loadTexts: svcL2MhRteNextHopType.setStatus('current')
svcL2MhRteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 83, 1, 4), InetAddress())
if mibBuilder.loadTexts: svcL2MhRteNextHop.setStatus('current')
svcL2MhRteState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 83, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcL2MhRteState.setStatus('current')
svcL2MhRteDf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 83, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcL2MhRteDf.setStatus('current')
svcTmplTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 85), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTmplTblLastChanged.setStatus('current')
svcTmplTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 86), )
if mibBuilder.loadTexts: svcTmplTable.setStatus('current')
svcTmplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 86, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcTmplName"))
if mibBuilder.loadTexts: svcTmplEntry.setStatus('current')
svcTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 86, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcTmplName.setStatus('current')
svcTmplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 86, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTmplRowStatus.setStatus('current')
svcTmplLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 86, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTmplLastChanged.setStatus('current')
svcTmplSvcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 86, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTmplSvcCount.setStatus('current')
svcTmplType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 86, 1, 5), ServType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTmplType.setStatus('current')
svcTmplMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 86, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9194))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTmplMtu.setStatus('current')
svcTmplCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 86, 1, 7), TmnxCustId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTmplCustId.setStatus('current')
svcTmplTlsTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 94), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTmplTlsTblLastChanged.setStatus('current')
svcTmplTlsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95), )
if mibBuilder.loadTexts: svcTmplTlsTable.setStatus('current')
svcTmplTlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcTmplName"))
if mibBuilder.loadTexts: svcTmplTlsEntry.setStatus('current')
svcTmplTlsLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTmplTlsLastChanged.setStatus('current')
svcTmplTlsMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 2), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsMacLearning.setStatus('current')
svcTmplTlsDiscardUnknownDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 3), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsDiscardUnknownDest.setStatus('current')
svcTmplTlsFdbTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 511999)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsFdbTableSize.setStatus('current')
svcTmplTlsFdbLocalAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsFdbLocalAgeTime.setStatus('current')
svcTmplTlsFdbRemoteAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsFdbRemoteAgeTime.setStatus('current')
svcTmplTlsStpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 7), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsStpAdminStatus.setStatus('current')
svcTmplTlsStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsStpPriority.setStatus('current')
svcTmplTlsStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsStpBridgeMaxAge.setStatus('current')
svcTmplTlsStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsStpBridgeHelloTime.setStatus('current')
svcTmplTlsStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsStpBridgeForwardDelay.setStatus('current')
svcTmplTlsMacAgeing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 12), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsMacAgeing.setStatus('current')
svcTmplTlsFdbTableFullHighWMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsFdbTableFullHighWMark.setStatus('current')
svcTmplTlsFdbTableFullLowWMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsFdbTableFullLowWMark.setStatus('current')
svcTmplTlsStpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rstp", 2), ("compDot1w", 3), ("dot1w", 4), ("mstp", 5), ("pmstp", 6))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsStpVersion.setStatus('current')
svcTmplTlsStpHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsStpHoldCount.setStatus('current')
svcTmplTlsPerSvcHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 17), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsPerSvcHashing.setStatus('current')
svcTmplTlsTempFloodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(3, 600), )).clone(-1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsTempFloodTime.setStatus('current')
svcTmplTlsMacMoveMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsMacMoveMaxRate.setStatus('current')
svcTmplTlsMacMoveRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsMacMoveRetryTimeout.setStatus('current')
svcTmplTlsMacMoveAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 21), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsMacMoveAdminStatus.setStatus('current')
svcTmplTlsPriPortsCumFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsPriPortsCumFactor.setStatus('current')
svcTmplTlsSecPortsCumFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 9)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsSecPortsCumFactor.setStatus('current')
svcTmplTlsMacMoveNumRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 95, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTmplTlsMacMoveNumRetries.setStatus('current')
svcTlsGroupTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 87), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsGroupTblLastChanged.setStatus('current')
svcTlsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88), )
if mibBuilder.loadTexts: svcTlsGroupTable.setStatus('current')
svcTlsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcTlsGroupId"))
if mibBuilder.loadTexts: svcTlsGroupEntry.setStatus('current')
svcTlsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 1), TmnxTlsGroupId())
if mibBuilder.loadTexts: svcTlsGroupId.setStatus('current')
svcTlsGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsGroupRowStatus.setStatus('current')
svcTlsGroupLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsGroupLastChanged.setStatus('current')
svcTlsGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 4), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsGroupAdminStatus.setStatus('current')
svcTlsGroupStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 5), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsGroupStart.setStatus('current')
svcTlsGroupEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 6), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsGroupEnd.setStatus('current')
svcTlsGroupStartVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 7), QTagOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsGroupStartVlanTag.setStatus('current')
svcTlsGroupSvcTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 8), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsGroupSvcTmplName.setStatus('current')
svcTlsGroupSapTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsGroupSapTmplName.setStatus('current')
svcTlsGroupMvrpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsGroupMvrpControl.setStatus('current')
svcTlsGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsGroupOperStatus.setStatus('current')
svcTlsGroupLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 88, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsGroupLastError.setStatus('current')
svcTmplUserTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 96), )
if mibBuilder.loadTexts: svcTmplUserTable.setStatus('current')
svcTmplUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 96, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcTmplName"), (0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcTmplUserEntry.setStatus('current')
svcTmplUserCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 96, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("mVpls", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTmplUserCreationOrigin.setStatus('current')
svcTmplUserCreatorSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 96, 1, 2), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTmplUserCreatorSvcId.setStatus('current')
svcTlsExtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97), )
if mibBuilder.loadTexts: svcTlsExtTable.setStatus('current')
svcTlsExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1), )
svcTlsInfoEntry.registerAugmentions(("TIMETRA-SERV-MIB", "svcTlsExtEntry"))
svcTlsExtEntry.setIndexNames(*svcTlsInfoEntry.getIndexNames())
if mibBuilder.loadTexts: svcTlsExtEntry.setStatus('current')
svcTlsExtMvrpMaxAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsExtMvrpMaxAttributes.setStatus('current')
svcTlsExtMvrpRegAttrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsExtMvrpRegAttrCnt.setStatus('current')
svcTlsExtMvrpDeclaredAttrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsExtMvrpDeclaredAttrCnt.setStatus('current')
svcTlsExtMvrpFailedRegCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsExtMvrpFailedRegCnt.setStatus('current')
svcTlsExtMvrpAttrTblHighWM = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsExtMvrpAttrTblHighWM.setStatus('current')
svcTlsExtMvrpAttrTblLowWM = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsExtMvrpAttrTblLowWM.setStatus('current')
svcTlsExtMvrpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 30), ))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsExtMvrpHoldTime.setStatus('current')
svcTlsExtMvrpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 8), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsExtMvrpAdminStatus.setStatus('current')
svcTlsExtMvrpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsExtMvrpOperStatus.setStatus('current')
svcTlsExtMmrpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 10), TmnxEnabledDisabled()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsExtMmrpAdminStatus.setStatus('current')
svcTlsExtMmrpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsExtMmrpOperStatus.setStatus('current')
svcTlsExtMmrpRegAttrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsExtMmrpRegAttrCnt.setStatus('current')
svcTlsExtMmrpDeclaredAttrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsExtMmrpDeclaredAttrCnt.setStatus('current')
svcTlsExtMmrpFailedRegCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsExtMmrpFailedRegCnt.setStatus('current')
svcTlsExtMvrpAttributeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsExtMvrpAttributeCount.setStatus('current')
svcTlsExtMmrpEndStationOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsExtMmrpEndStationOnly.setStatus('current')
svcTlsExtMacReNotifInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(240, 840), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsExtMacReNotifInterval.setStatus('current')
svcTlsExtSpbmCtrlVpls = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 18), TmnxServId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsExtSpbmCtrlVpls.setStatus('current')
svcTlsExtSpbmFid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 97, 1, 19), TmnxSpbFidOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsExtSpbmFid.setStatus('current')
svcPwRtLclPrefixTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 98), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtLclPrefixTblLastChanged.setStatus('current')
svcPwRtLclPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 99), )
if mibBuilder.loadTexts: svcPwRtLclPrefixTable.setStatus('current')
svcPwRtLclPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 99, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcPwRtLclPrefixGlobalId"), (0, "TIMETRA-SERV-MIB", "svcPwRtLclPrefix"))
if mibBuilder.loadTexts: svcPwRtLclPrefixEntry.setStatus('current')
svcPwRtLclPrefixGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 99, 1, 1), TmnxPwGlobalId())
if mibBuilder.loadTexts: svcPwRtLclPrefixGlobalId.setStatus('current')
svcPwRtLclPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 99, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: svcPwRtLclPrefix.setStatus('current')
svcPwRtLclPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 99, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPwRtLclPrefixRowStatus.setStatus('current')
svcPwRtLclPrefixLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 99, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtLclPrefixLastChange.setStatus('current')
svcPwRtPathTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 100), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtPathTblLastChanged.setStatus('current')
svcPwRtPathTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 101), )
if mibBuilder.loadTexts: svcPwRtPathTable.setStatus('current')
svcPwRtPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 101, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcPwRtPathName"))
if mibBuilder.loadTexts: svcPwRtPathEntry.setStatus('current')
svcPwRtPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 101, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcPwRtPathName.setStatus('current')
svcPwRtPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 101, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPwRtPathRowStatus.setStatus('current')
svcPwRtPathLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 101, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtPathLastChange.setStatus('current')
svcPwRtPathAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 101, 1, 4), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPwRtPathAdminStatus.setStatus('current')
svcPwRtPathHopTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 102), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtPathHopTblLastChgd.setStatus('current')
svcPwRtPathHopTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 103), )
if mibBuilder.loadTexts: svcPwRtPathHopTable.setStatus('current')
svcPwRtPathHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 103, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcPwRtPathName"), (0, "TIMETRA-SERV-MIB", "svcPwRtPathHopIndex"))
if mibBuilder.loadTexts: svcPwRtPathHopEntry.setStatus('current')
svcPwRtPathHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 103, 1, 1), TmnxPwPathHopId())
if mibBuilder.loadTexts: svcPwRtPathHopIndex.setStatus('current')
svcPwRtPathHopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 103, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPwRtPathHopRowStatus.setStatus('current')
svcPwRtPathHopLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 103, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtPathHopLastChange.setStatus('current')
svcPwRtPathHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 103, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPwRtPathHopAddrType.setStatus('current')
svcPwRtPathHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 103, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPwRtPathHopAddr.setStatus('current')
svcPwRtStaticRtTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 104), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtStaticRtTblLastChgd.setStatus('current')
svcPwRtStaticRtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 105), )
if mibBuilder.loadTexts: svcPwRtStaticRtTable.setStatus('current')
svcPwRtStaticRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 105, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcPwRtStaticRtDstGlobalId"), (0, "TIMETRA-SERV-MIB", "svcPwRtStaticRtDstPrefix"), (0, "TIMETRA-SERV-MIB", "svcPwRtStaticRtDstAddrType"), (0, "TIMETRA-SERV-MIB", "svcPwRtStaticRtDstAddr"))
if mibBuilder.loadTexts: svcPwRtStaticRtEntry.setStatus('current')
svcPwRtStaticRtDstGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 105, 1, 1), TmnxPwGlobalIdOrZero())
if mibBuilder.loadTexts: svcPwRtStaticRtDstGlobalId.setStatus('current')
svcPwRtStaticRtDstPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 105, 1, 2), Unsigned32())
if mibBuilder.loadTexts: svcPwRtStaticRtDstPrefix.setStatus('current')
svcPwRtStaticRtDstAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 105, 1, 3), InetAddressType())
if mibBuilder.loadTexts: svcPwRtStaticRtDstAddrType.setStatus('current')
svcPwRtStaticRtDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 105, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: svcPwRtStaticRtDstAddr.setStatus('current')
svcPwRtStaticRtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 105, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPwRtStaticRtRowStatus.setStatus('current')
svcPwRtStaticRtLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 105, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtStaticRtLastChange.setStatus('current')
svcMSPwPeTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 106), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMSPwPeTblLastChanged.setStatus('current')
svcMSPwPeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107), )
if mibBuilder.loadTexts: svcMSPwPeTable.setStatus('current')
svcMSPwPeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcMSPwPeId"))
if mibBuilder.loadTexts: svcMSPwPeEntry.setStatus('current')
svcMSPwPeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 1), TmnxSpokeSdpId())
if mibBuilder.loadTexts: svcMSPwPeId.setStatus('current')
svcMSPwPeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeRowStatus.setStatus('current')
svcMSPwPeLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMSPwPeLastChange.setStatus('current')
svcMSPwPeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 4), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeAdminStatus.setStatus('current')
svcMSPwPeFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 5), TmnxLdpFECType().clone('vpws')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeFecType.setStatus('current')
svcMSPwPeAiiType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 6), TmnxAiiType().clone('aiiType2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeAiiType.setStatus('current')
svcMSPwPeSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 7), TmnxMsPwPeSignaling().clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeSignaling.setStatus('current')
svcMSPwPeAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeAutoConfig.setStatus('current')
svcMSPwPeAgi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 9), TmnxVPNRouteDistinguisher().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeAgi.setStatus('current')
svcMSPwPePolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 10), PWTemplateId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPePolicyId.setStatus('current')
svcMSPwPePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPePrecedence.setStatus('current')
svcMSPwPeRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 480), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeRetryTimer.setStatus('current')
svcMSPwPeRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 10000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeRetryCount.setStatus('current')
svcMSPwPeSaiiGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 14), TmnxPwGlobalIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeSaiiGlobalId.setStatus('current')
svcMSPwPeSaiiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeSaiiPrefix.setStatus('current')
svcMSPwPeSaiiAcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeSaiiAcId.setStatus('current')
svcMSPwPeTaiiGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 17), TmnxPwGlobalIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeTaiiGlobalId.setStatus('current')
svcMSPwPeTaiiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeTaiiPrefix.setStatus('current')
svcMSPwPeTaiiAcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeTaiiAcId.setStatus('current')
svcMSPwPePathName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 20), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPePathName.setStatus('current')
svcMSPwPeEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 21), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeEndPoint.setStatus('current')
svcMSPwPeStandbySigSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeStandbySigSlave.setStatus('current')
svcMSPwPeIsICB = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMSPwPeIsICB.setStatus('current')
svcMSPwPeTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 24), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMSPwPeTimeRemain.setStatus('current')
svcMSPwPeRetryRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMSPwPeRetryRemain.setStatus('current')
svcMSPwPeOperSdpBind = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 26), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMSPwPeOperSdpBind.setStatus('current')
svcMSPwPeRetryExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMSPwPeRetryExpired.setStatus('current')
svcMSPwPeLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 107, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMSPwPeLastError.setStatus('current')
svcOperGrpTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 108), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperGrpTblLastChanged.setStatus('current')
svcOperGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109), )
if mibBuilder.loadTexts: svcOperGrpTable.setStatus('current')
svcOperGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcOperGrpName"))
if mibBuilder.loadTexts: svcOperGrpEntry.setStatus('current')
svcOperGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcOperGrpName.setStatus('current')
svcOperGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcOperGrpRowStatus.setStatus('current')
svcOperGrpLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperGrpLastChange.setStatus('current')
svcOperGrpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 4), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperGrpOperStatus.setStatus('current')
svcOperGrpHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 5), TmnxOperGrpHoldDownTime()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcOperGrpHoldDownTime.setStatus('current')
svcOperGrpCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 6), TmnxSvcOperGrpCreationOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperGrpCreationOrigin.setStatus('current')
svcOperGrpHoldUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 7), TmnxOperGrpHoldUpTime().clone(4)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcOperGrpHoldUpTime.setStatus('current')
svcOperGrpHoldUpTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 8), TmnxOperGrpHoldUpTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperGrpHoldUpTimeRemain.setStatus('current')
svcOperGrpHoldDownTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 9), TmnxOperGrpHoldDownTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperGrpHoldDownTimeRemain.setStatus('current')
svcOperGrpNumMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperGrpNumMembers.setStatus('current')
svcOperGrpNumMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 109, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperGrpNumMonitoring.setStatus('current')
svcDhcpLeaseAleTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 110), )
if mibBuilder.loadTexts: svcDhcpLeaseAleTable.setStatus('current')
svcDhcpLeaseAleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 110, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseCiAddrType"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseCiAddr"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseNextHopMacAddr"))
if mibBuilder.loadTexts: svcDhcpLeaseAleEntry.setStatus('current')
svcDhcpLeaseAleDatalink = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 110, 1, 1), TmnxAccessLoopEncapDataLink()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseAleDatalink.setStatus('current')
svcDhcpLeaseAleEncaps1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 110, 1, 2), TmnxAccessLoopEncaps1()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseAleEncaps1.setStatus('current')
svcDhcpLeaseAleEncaps2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 110, 1, 3), TmnxAccessLoopEncaps2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseAleEncaps2.setStatus('current')
svcEthCfmTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 111), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEthCfmTblLastChanged.setStatus('current')
svcEthCfmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 112), )
if mibBuilder.loadTexts: svcEthCfmTable.setStatus('current')
svcEthCfmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 112, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcEthCfmEntry.setStatus('current')
svcEthCfmTunnelFaultNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 112, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEthCfmTunnelFaultNotification.setStatus('current')
svcEthCfmVMepExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 112, 1, 2), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEthCfmVMepExtensions.setStatus('current')
tmnxSvcGrpObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113))
svcMacFdbRecords = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMacFdbRecords.setStatus('current')
svcPwRtSpeAddrGlobalId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 2), TmnxPwGlobalIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPwRtSpeAddrGlobalId.setStatus('current')
svcPwRtSpeAddrPrefix = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPwRtSpeAddrPrefix.setStatus('current')
svcPwRtBootTimer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPwRtBootTimer.setStatus('current')
svcPwRtRetryTimer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 480)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPwRtRetryTimer.setStatus('current')
svcPwRtRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPwRtRetryCount.setStatus('current')
svcPwRtBgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtBgpRoutes.setStatus('current')
svcPwRtStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtStaticRoutes.setStatus('current')
svcPwRtLocalRoutes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtLocalRoutes.setStatus('current')
svcPwRtHostRoutes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtHostRoutes.setStatus('current')
svcPwRtBootTimerRemain = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 113, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtBootTimerRemain.setStatus('current')
svcPwRtLclPfxRDTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 114), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtLclPfxRDTblLastChanged.setStatus('current')
svcPwRtLclPfxRDTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 115), )
if mibBuilder.loadTexts: svcPwRtLclPfxRDTable.setStatus('current')
svcPwRtLclPfxRDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 115, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcPwRtLclPrefixGlobalId"), (0, "TIMETRA-SERV-MIB", "svcPwRtLclPrefix"), (0, "TIMETRA-SERV-MIB", "svcPwRtLclPfxRD"))
if mibBuilder.loadTexts: svcPwRtLclPfxRDEntry.setStatus('current')
svcPwRtLclPfxRD = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 115, 1, 1), TmnxVPNRouteDistinguisher())
if mibBuilder.loadTexts: svcPwRtLclPfxRD.setStatus('current')
svcPwRtLclPfxRDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 115, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPwRtLclPfxRDRowStatus.setStatus('current')
svcPwRtLclPfxRDLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 115, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwRtLclPfxRDLastChange.setStatus('current')
svcPwRtLclPfxRDCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 115, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPwRtLclPfxRDCommunity.setStatus('current')
svcPwSpeSaiiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 116), )
if mibBuilder.loadTexts: svcPwSpeSaiiTable.setStatus('current')
svcPwSpeSaiiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 116, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcMSPwPeSaiiGlobalId"), (0, "TIMETRA-SERV-MIB", "svcMSPwPeSaiiPrefix"), (0, "TIMETRA-SERV-MIB", "svcMSPwPeSaiiAcId"))
if mibBuilder.loadTexts: svcPwSpeSaiiEntry.setStatus('current')
svcPwSpeSaiiTaiiGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 116, 1, 1), TmnxPwGlobalIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeSaiiTaiiGlobalId.setStatus('current')
svcPwSpeSaiiTaiiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 116, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeSaiiTaiiPrefix.setStatus('current')
svcPwSpeSaiiTaiiAcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 116, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeSaiiTaiiAcId.setStatus('current')
svcPwSpeSaiiSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 116, 1, 4), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeSaiiSvcId.setStatus('current')
svcPwSpeSaiiOperSdpBind1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 116, 1, 5), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeSaiiOperSdpBind1.setStatus('current')
svcPwSpeSaiiOperSdpBind2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 116, 1, 6), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeSaiiOperSdpBind2.setStatus('current')
svcPwSpeTaiiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 117), )
if mibBuilder.loadTexts: svcPwSpeTaiiTable.setStatus('current')
svcPwSpeTaiiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 117, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcMSPwPeTaiiGlobalId"), (0, "TIMETRA-SERV-MIB", "svcMSPwPeTaiiPrefix"), (0, "TIMETRA-SERV-MIB", "svcMSPwPeTaiiAcId"))
if mibBuilder.loadTexts: svcPwSpeTaiiEntry.setStatus('current')
svcPwSpeTaiiSaiiGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 117, 1, 1), TmnxPwGlobalIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeTaiiSaiiGlobalId.setStatus('current')
svcPwSpeTaiiSaiiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 117, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeTaiiSaiiPrefix.setStatus('current')
svcPwSpeTaiiSaiiAcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 117, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeTaiiSaiiAcId.setStatus('current')
svcPwSpeTaiiSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 117, 1, 4), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeTaiiSvcId.setStatus('current')
svcPwSpeTaiiOperSdpBind1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 117, 1, 5), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeTaiiOperSdpBind1.setStatus('current')
svcPwSpeTaiiOperSdpBind2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 117, 1, 6), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPwSpeTaiiOperSdpBind2.setStatus('current')
svcDhcpLeaseOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118), )
if mibBuilder.loadTexts: svcDhcpLeaseOvrTable.setStatus('current')
svcDhcpLeaseOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseCiAddrType"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseCiAddr"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseNextHopMacAddr"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseOvrDirection"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseOvrType"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseOvrTypeId"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseOvrTypeName"))
if mibBuilder.loadTexts: svcDhcpLeaseOvrEntry.setStatus('current')
svcDhcpLeaseOvrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118, 1, 1), TDirection().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: svcDhcpLeaseOvrDirection.setStatus('current')
svcDhcpLeaseOvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118, 1, 2), TQosOverrideType())
if mibBuilder.loadTexts: svcDhcpLeaseOvrType.setStatus('current')
svcDhcpLeaseOvrTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118, 1, 3), Integer32())
if mibBuilder.loadTexts: svcDhcpLeaseOvrTypeId.setStatus('current')
svcDhcpLeaseOvrTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118, 1, 4), TNamedItemOrEmpty())
if mibBuilder.loadTexts: svcDhcpLeaseOvrTypeName.setStatus('current')
svcDhcpLeaseOvrPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118, 1, 5), TPIRRateOverride()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseOvrPIR.setStatus('current')
svcDhcpLeaseOvrCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118, 1, 6), TCIRRateOverride()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseOvrCIR.setStatus('current')
svcDhcpLeaseOvrCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118, 1, 7), TBurstSizeBytesOverride()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseOvrCBS.setStatus('current')
svcDhcpLeaseOvrMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118, 1, 8), TBurstSizeBytesOverride()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseOvrMBS.setStatus('current')
svcDhcpLeaseOvrWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 118, 1, 9), THsmdaWrrWeightOverride()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseOvrWrrWeight.setStatus('current')
svcTlsSpbTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 119), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSpbTableLastChanged.setStatus('current')
svcTlsSpbTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120), )
if mibBuilder.loadTexts: svcTlsSpbTable.setStatus('current')
svcTlsSpbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcTlsSpbEntry.setStatus('current')
svcTlsSpbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSpbRowStatus.setStatus('current')
svcTlsSpbLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSpbLastChanged.setStatus('current')
svcTlsSpbIsisInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 2047)).clone(1024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSpbIsisInstance.setStatus('current')
svcTlsSpbFid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1, 4), TmnxSpbFid().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSpbFid.setStatus('current')
svcTlsSpbL1BridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1, 5), TmnxSpbBridgePriority().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSpbL1BridgePriority.setStatus('current')
svcTlsSpbL1FwdTreeTopoUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("spf", 0), ("st", 1))).clone('spf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSpbL1FwdTreeTopoUcast.setStatus('current')
svcTlsSpbAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1, 7), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsSpbAdminState.setStatus('current')
svcTlsSpbL1FwdTreeTopoMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("spf", 0), ("st", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSpbL1FwdTreeTopoMcast.setStatus('current')
svcTlsSpbL1BridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSpbL1BridgeId.setStatus('current')
svcTlsSpbL1McastDesigBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 120, 1, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSpbL1McastDesigBridgeId.setStatus('current')
svcVllBgpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 121), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVllBgpTableLastChanged.setStatus('current')
svcVllBgpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 122), )
if mibBuilder.loadTexts: svcVllBgpTable.setStatus('current')
svcVllBgpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 122, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcVllBgpEntry.setStatus('current')
svcVllBgpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 122, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllBgpRowStatus.setStatus('current')
svcVllBgpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 122, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVllBgpLastChanged.setStatus('current')
svcVllBgpVsiRD = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 122, 1, 3), TmnxVPNRouteDistinguisher().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllBgpVsiRD.setStatus('current')
svcVllBgpExportRteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 122, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllBgpExportRteTarget.setStatus('current')
svcVllBgpImportRteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 122, 1, 5), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllBgpImportRteTarget.setStatus('current')
svcVllSiteIdTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 123), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVllSiteIdTblLastChanged.setStatus('current')
svcVllSiteIdTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124), )
if mibBuilder.loadTexts: svcVllSiteIdTable.setStatus('current')
svcVllSiteIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcVllSiteIdName"))
if mibBuilder.loadTexts: svcVllSiteIdEntry.setStatus('current')
svcVllSiteIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcVllSiteIdName.setStatus('current')
svcVllSiteIdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllSiteIdRowStatus.setStatus('current')
svcVllSiteIdLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVllSiteIdLastChanged.setStatus('current')
svcVllSiteIdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 4), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllSiteIdAdminStatus.setStatus('current')
svcVllSiteIdSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 5), TmnxSiteId().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllSiteIdSiteId.setStatus('current')
svcVllSiteIdPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 6), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllSiteIdPortId.setStatus('current')
svcVllSiteIdEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 7), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllSiteIdEncapValue.setStatus('current')
svcVllSiteIdOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 8), TSiteOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVllSiteIdOperStatus.setStatus('current')
svcVllSiteIdDesignatedFwdr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVllSiteIdDesignatedFwdr.setStatus('current')
svcVllSiteIdBootTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 600), )).clone(-1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllSiteIdBootTimer.setStatus('current')
svcVllSiteIdSiteActTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllSiteIdSiteActTimer.setStatus('current')
svcVllSiteIdDfUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 12), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVllSiteIdDfUpTime.setStatus('current')
svcVllSiteIdDfChgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVllSiteIdDfChgCnt.setStatus('current')
svcVllSiteIdTimerRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 124, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVllSiteIdTimerRemain.setStatus('current')
svcTlsPmsiTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 125), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsPmsiTableLastChanged.setStatus('current')
svcTlsPmsiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126), )
if mibBuilder.loadTexts: svcTlsPmsiTable.setStatus('current')
svcTlsPmsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcTlsPmsiEntry.setStatus('current')
svcTlsPmsiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsPmsiRowStatus.setStatus('current')
svcTlsPmsiLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsPmsiLastChanged.setStatus('current')
svcTlsIPmsiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126, 1, 3), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsIPmsiAdminState.setStatus('current')
svcTlsIPmsiDataDelayIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 180)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsIPmsiDataDelayIntvl.setStatus('current')
svcTlsIPmsiType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("rsvp", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsIPmsiType.setStatus('current')
svcTlsIPmsiLspTmpl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126, 1, 6), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsIPmsiLspTmpl.setStatus('current')
svcTlsIPmsiRootAndLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsIPmsiRootAndLeaf.setStatus('current')
svcTlsIPmsiRemainDataDelayIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsIPmsiRemainDataDelayIntvl.setStatus('current')
svcTlsIPmsiLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 126, 1, 9), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsIPmsiLspName.setStatus('current')
svcDhcpLeaseWppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 127), )
if mibBuilder.loadTexts: svcDhcpLeaseWppTable.setStatus('current')
svcDhcpLeaseWppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 127, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseCiAddrType"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseCiAddr"), (0, "TIMETRA-SERV-MIB", "svcDhcpLeaseNextHopMacAddr"))
if mibBuilder.loadTexts: svcDhcpLeaseWppEntry.setStatus('current')
svcDhcpLeaseWppState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 127, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("initial", 1), ("registering", 2), ("registered", 3), ("authenticating", 4), ("authenticated", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseWppState.setStatus('current')
svcDhcpLeaseWppPortalRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 127, 1, 2), TmnxVRtrIDOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseWppPortalRouter.setStatus('current')
svcDhcpLeaseWppPortalName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 127, 1, 3), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLeaseWppPortalName.setStatus('current')
svcIfSapCfgTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 128), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfSapCfgTableLastChanged.setStatus('current')
svcIfSapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129), )
if mibBuilder.loadTexts: svcIfSapCfgTable.setStatus('current')
svcIfSapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: svcIfSapCfgEntry.setStatus('current')
svcIfSapCfgLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfSapCfgLastMgmtChange.setStatus('current')
svcIfSapCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129, 1, 2), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIfSapCfgDescription.setStatus('current')
svcIfSapCfgDefSubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129, 1, 3), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIfSapCfgDefSubProfile.setStatus('current')
svcIfSapCfgDefSlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIfSapCfgDefSlaProfile.setStatus('current')
svcIfSapCfgDefAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129, 1, 5), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIfSapCfgDefAppProfile.setStatus('current')
svcIfSapCfgSubIdentPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIfSapCfgSubIdentPolicy.setStatus('current')
svcIfSapCfgDefSubIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129, 1, 7), TmnxDefSubIdSource().clone('useString')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIfSapCfgDefSubIdent.setStatus('current')
svcIfSapCfgDefSubIdentString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIfSapCfgDefSubIdentString.setStatus('current')
svcIfSapCfgDefFilterProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 129, 1, 9), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIfSapCfgDefFilterProfile.setStatus('current')
svcTlsSpbUserSvcTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 130), )
if mibBuilder.loadTexts: svcTlsSpbUserSvcTable.setStatus('current')
svcTlsSpbUserSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 130, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcTlsSpbFid"), (0, "TIMETRA-SERV-MIB", "svcTlsSpbUserSvcId"))
if mibBuilder.loadTexts: svcTlsSpbUserSvcEntry.setStatus('current')
svcTlsSpbUserSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 130, 1, 1), TmnxServId())
if mibBuilder.loadTexts: svcTlsSpbUserSvcId.setStatus('current')
svcTlsSpbUserSvcLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 130, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsSpbUserSvcLastUpdate.setStatus('current')
tlsSpbFdbTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131), )
if mibBuilder.loadTexts: tlsSpbFdbTable.setStatus('current')
tlsSpbFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsSpbFdbMacAddr"))
if mibBuilder.loadTexts: tlsSpbFdbEntry.setStatus('current')
tlsSpbFdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 1), MacAddress())
if mibBuilder.loadTexts: tlsSpbFdbMacAddr.setStatus('current')
tlsSpbFdbLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 4), TmnxSpbFdbLocale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbLocale.setStatus('current')
tlsSpbFdbPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 5), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbPortId.setStatus('current')
tlsSpbFdbEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 6), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbEncapValue.setStatus('current')
tlsSpbFdbSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 7), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbSdpId.setStatus('current')
tlsSpbFdbVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbVcId.setStatus('current')
tlsSpbFdbState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 9), TmnxSpbFdbState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbState.setStatus('current')
tlsSpbFdbMLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 10), TmnxSpbFdbLocale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbMLocale.setStatus('current')
tlsSpbFdbMPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 11), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbMPortId.setStatus('current')
tlsSpbFdbMEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 12), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbMEncapValue.setStatus('current')
tlsSpbFdbMSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 13), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbMSdpId.setStatus('current')
tlsSpbFdbMVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbMVcId.setStatus('current')
tlsSpbFdbMState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 131, 1, 15), TmnxSpbFdbState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFdbMState.setStatus('current')
tlsSpbFidFdbTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132), )
if mibBuilder.loadTexts: tlsSpbFidFdbTable.setStatus('current')
tlsSpbFidFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcTlsSpbFid"), (0, "TIMETRA-SERV-MIB", "tlsSpbFidFdbMacAddr"))
if mibBuilder.loadTexts: tlsSpbFidFdbEntry.setStatus('current')
tlsSpbFidFdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 1), MacAddress())
if mibBuilder.loadTexts: tlsSpbFidFdbMacAddr.setStatus('current')
tlsSpbFidFdbLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 4), TmnxSpbFdbLocale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbLocale.setStatus('current')
tlsSpbFidFdbPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 5), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbPortId.setStatus('current')
tlsSpbFidFdbEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 6), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbEncapValue.setStatus('current')
tlsSpbFidFdbSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 7), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbSdpId.setStatus('current')
tlsSpbFidFdbVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbVcId.setStatus('current')
tlsSpbFidFdbMLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 9), TmnxSpbFdbLocale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbMLocale.setStatus('current')
tlsSpbFidFdbMPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 10), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbMPortId.setStatus('current')
tlsSpbFidFdbMEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 11), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbMEncapValue.setStatus('current')
tlsSpbFidFdbMSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 12), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbMSdpId.setStatus('current')
tlsSpbFidFdbMVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbMVcId.setStatus('current')
tlsSpbFidFdbLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbLastUpdate.setStatus('current')
tlsSpbFidFdbMLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 132, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidFdbMLastUpdate.setStatus('current')
tlsSpbMFibTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 133), )
if mibBuilder.loadTexts: tlsSpbMFibTable.setStatus('current')
tlsSpbMFibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 133, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "tlsSpbMFibMacAddr"))
if mibBuilder.loadTexts: tlsSpbMFibEntry.setStatus('current')
tlsSpbMFibMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 133, 1, 1), MacAddress())
if mibBuilder.loadTexts: tlsSpbMFibMacAddr.setStatus('current')
tlsSpbMFibIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 133, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbMFibIsid.setStatus('current')
tlsSpbMFibState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 133, 1, 3), Bits().clone(namedValues=NamedValues(("ok", 0), ("addModPending", 1), ("delPending", 2), ("sysMFibLimit", 3), ("noFateShared", 4), ("spbMFibLimit", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbMFibState.setStatus('current')
tlsSpbFidMFibTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 134), )
if mibBuilder.loadTexts: tlsSpbFidMFibTable.setStatus('current')
tlsSpbFidMFibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 134, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcTlsSpbFid"), (0, "TIMETRA-SERV-MIB", "tlsSpbFidMFibMacAddr"), (0, "TIMETRA-SERV-MIB", "tlsSpbFidMFibLocale"), (0, "TIMETRA-SERV-MIB", "tlsSpbFidMFibPortId"), (0, "TIMETRA-SERV-MIB", "tlsSpbFidMFibEncapValue"), (0, "TIMETRA-SERV-MIB", "tlsSpbFidMFibSdpId"), (0, "TIMETRA-SERV-MIB", "tlsSpbFidMFibVcId"))
if mibBuilder.loadTexts: tlsSpbFidMFibEntry.setStatus('current')
tlsSpbFidMFibMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 134, 1, 1), MacAddress())
if mibBuilder.loadTexts: tlsSpbFidMFibMacAddr.setStatus('current')
tlsSpbFidMFibLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 134, 1, 2), TmnxSpbFdbLocale())
if mibBuilder.loadTexts: tlsSpbFidMFibLocale.setStatus('current')
tlsSpbFidMFibPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 134, 1, 3), TmnxPortID())
if mibBuilder.loadTexts: tlsSpbFidMFibPortId.setStatus('current')
tlsSpbFidMFibEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 134, 1, 4), TmnxEncapVal())
if mibBuilder.loadTexts: tlsSpbFidMFibEncapValue.setStatus('current')
tlsSpbFidMFibSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 134, 1, 5), SdpId())
if mibBuilder.loadTexts: tlsSpbFidMFibSdpId.setStatus('current')
tlsSpbFidMFibVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 134, 1, 6), Unsigned32())
if mibBuilder.loadTexts: tlsSpbFidMFibVcId.setStatus('current')
tlsSpbFidMFibIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 134, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidMFibIsid.setStatus('current')
tlsSpbFidMFibLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 134, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSpbFidMFibLastUpdate.setStatus('current')
svcSpbIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 135), )
if mibBuilder.loadTexts: svcSpbIfTable.setStatus('current')
svcSpbIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 135, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcSpbIfIndex"))
if mibBuilder.loadTexts: svcSpbIfEntry.setStatus('current')
svcSpbIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 135, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: svcSpbIfIndex.setStatus('current')
svcSpbIfLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 135, 1, 4), TmnxSpbFdbLocale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSpbIfLocale.setStatus('current')
svcSpbIfPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 135, 1, 5), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSpbIfPortId.setStatus('current')
svcSpbIfEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 135, 1, 6), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSpbIfEncapValue.setStatus('current')
svcSpbIfSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 135, 1, 7), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSpbIfSdpId.setStatus('current')
svcSpbIfVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 135, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSpbIfVcId.setStatus('current')
svcSpbIfSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 135, 1, 9), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSpbIfSvcId.setStatus('current')
svcSpbIfIsisInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 135, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSpbIfIsisInstance.setStatus('current')
svcArpHostOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136), )
if mibBuilder.loadTexts: svcArpHostOvrTable.setStatus('current')
svcArpHostOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136, 1), ).setIndexNames((0, "TIMETRA-SERV-MIB", "svcId"), (0, "TIMETRA-SERV-MIB", "svcArpHostIpAddrType"), (0, "TIMETRA-SERV-MIB", "svcArpHostIpAddr"), (0, "TIMETRA-SERV-MIB", "svcArpHostOvrDirection"), (0, "TIMETRA-SERV-MIB", "svcArpHostOvrType"), (0, "TIMETRA-SERV-MIB", "svcArpHostOvrTypeId"), (0, "TIMETRA-SERV-MIB", "svcArpHostOvrTypeName"))
if mibBuilder.loadTexts: svcArpHostOvrEntry.setStatus('current')
svcArpHostOvrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136, 1, 1), TDirection().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: svcArpHostOvrDirection.setStatus('current')
svcArpHostOvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136, 1, 2), TQosOverrideType())
if mibBuilder.loadTexts: svcArpHostOvrType.setStatus('current')
svcArpHostOvrTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136, 1, 3), Integer32())
if mibBuilder.loadTexts: svcArpHostOvrTypeId.setStatus('current')
svcArpHostOvrTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136, 1, 4), TNamedItemOrEmpty())
if mibBuilder.loadTexts: svcArpHostOvrTypeName.setStatus('current')
svcArpHostOvrPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136, 1, 5), TPIRRateOverride()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostOvrPIR.setStatus('current')
svcArpHostOvrCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136, 1, 6), TCIRRateOverride()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostOvrCIR.setStatus('current')
svcArpHostOvrCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136, 1, 7), TBurstSizeBytesOverride()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostOvrCBS.setStatus('current')
svcArpHostOvrMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136, 1, 8), TBurstSizeBytesOverride()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostOvrMBS.setStatus('current')
svcArpHostOvrWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 136, 1, 9), THsmdaWrrWeightOverride()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcArpHostOvrWrrWeight.setStatus('current')
iesIfIsaTnlNHTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 137), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfIsaTnlNHTableLastChanged.setStatus('current')
iesIfIsaTnlNHTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 138), )
if mibBuilder.loadTexts: iesIfIsaTnlNHTable.setStatus('current')
iesIfIsaTnlNHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 138, 1), )
iesIfEntry.registerAugmentions(("TIMETRA-SERV-MIB", "iesIfIsaTnlNHEntry"))
iesIfIsaTnlNHEntry.setIndexNames(*iesIfEntry.getIndexNames())
if mibBuilder.loadTexts: iesIfIsaTnlNHEntry.setStatus('current')
iesIfIsaTnlNHLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 138, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfIsaTnlNHLastChanged.setStatus('current')
iesIfIsaTnlNHStaticAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 138, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesIfIsaTnlNHStaticAddrType.setStatus('current')
iesIfIsaTnlNHStaticAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 138, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesIfIsaTnlNHStaticAddr.setStatus('current')
iesIfIsaTnlNHDynAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 138, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesIfIsaTnlNHDynAddrType.setStatus('current')
iesIfIsaTnlNHDynAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 138, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesIfIsaTnlNHDynAddr.setStatus('current')
macPinningMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningMacAddress.setStatus('current')
macPinningPinnedRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 2), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningPinnedRow.setStatus('current')
macPinningPinnedRowDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningPinnedRowDescr.setStatus('current')
macPinningViolatingRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 4), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningViolatingRow.setStatus('current')
macPinningViolatingRowDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningViolatingRowDescr.setStatus('current')
tlsDHCPClientLease = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDHCPClientLease.setStatus('obsolete')
tlsDhcpLseStateOldCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateOldCiAddr.setStatus('obsolete')
tlsDhcpLseStateOldChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 8), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateOldChAddr.setStatus('obsolete')
tlsDhcpLseStateNewCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateNewCiAddr.setStatus('obsolete')
tlsDhcpLseStateNewChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 10), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateNewChAddr.setStatus('obsolete')
tlsDhcpRestoreLseStateCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateCiAddr.setStatus('obsolete')
tlsDhcpRestoreLseStateSvcId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 12), TmnxServId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateSvcId.setStatus('obsolete')
tlsDhcpRestoreLseStatePortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 13), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStatePortId.setStatus('obsolete')
tlsDhcpRestoreLseStateEncapVal = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 14), TmnxEncapVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateEncapVal.setStatus('obsolete')
tlsDhcpRestoreLseStateProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateProblem.setStatus('obsolete')
tlsDhcpPacketProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpPacketProblem.setStatus('obsolete')
tlsDhcpLseStatePopulateError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 17), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStatePopulateError.setStatus('obsolete')
svcDhcpRestoreLseStateCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 18), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpRestoreLseStateCiAddr.setStatus('current')
svcDhcpRestoreLseStateProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpRestoreLseStateProblem.setStatus('current')
svcDhcpLseStateOldCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 20), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateOldCiAddr.setStatus('current')
svcDhcpLseStateOldChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 21), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateOldChAddr.setStatus('current')
svcDhcpLseStateNewCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 22), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateNewCiAddr.setStatus('current')
svcDhcpLseStateNewChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 23), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateNewChAddr.setStatus('current')
svcDhcpClientLease = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 24), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpClientLease.setStatus('current')
svcDhcpPacketProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 25), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpPacketProblem.setStatus('current')
svcDhcpLseStatePopulateError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 26), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStatePopulateError.setStatus('current')
hostConnectivityCiAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 27), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hostConnectivityCiAddrType.setStatus('current')
hostConnectivityCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 28), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hostConnectivityCiAddr.setStatus('current')
hostConnectivityChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 29), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hostConnectivityChAddr.setStatus('current')
protectedMacForNotify = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 30), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: protectedMacForNotify.setStatus('current')
staticHostDynamicMacIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 31), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: staticHostDynamicMacIpAddress.setStatus('current')
staticHostDynamicMacConflict = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 32), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: staticHostDynamicMacConflict.setStatus('current')
tmnxSvcObjRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 33), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSvcObjRow.setStatus('current')
tmnxSvcObjRowDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 34), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSvcObjRowDescr.setStatus('current')
tmnxSvcObjTodSuite = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 35), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSvcObjTodSuite.setStatus('current')
tmnxFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 36), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxFailureDescription.setStatus('current')
svcDhcpProxyError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 37), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpProxyError.setStatus('current')
svcDhcpCoAError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 38), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpCoAError.setStatus('current')
svcDhcpSubAuthError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 39), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpSubAuthError.setStatus('current')
svcTlsMrpAttrRegFailedReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("attribute-limit-reached", 2), ("system-attr-limit-reached", 3), ("unsupported-attribute", 4), ("mfib-entry-create-failed", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcTlsMrpAttrRegFailedReason.setStatus('current')
svcTlsMrpAttrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcTlsMrpAttrType.setStatus('current')
svcTlsMrpAttrValue = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcTlsMrpAttrValue.setStatus('current')
svcMstiInstanceId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 43), MstiInstanceId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcMstiInstanceId.setStatus('current')
svcNotifSapPortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 44), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcNotifSapPortId.setStatus('current')
svcNotifSapEncapValue = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 45), TmnxEncapVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcNotifSapEncapValue.setStatus('current')
svcArpHostPopulateError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 46), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcArpHostPopulateError.setStatus('current')
svcHostAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 47), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcHostAddrType.setStatus('current')
svcHostAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 48), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcHostAddr.setStatus('current')
svcCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 1)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"), ("TIMETRA-SERV-MIB", "svcType"))
if mibBuilder.loadTexts: svcCreated.setStatus('obsolete')
svcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 2)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcDeleted.setStatus('obsolete')
svcStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 3)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"), ("TIMETRA-SERV-MIB", "svcAdminStatus"), ("TIMETRA-SERV-MIB", "svcOperStatus"))
if mibBuilder.loadTexts: svcStatusChanged.setStatus('current')
svcTlsFdbTableFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 4)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsFdbTableFullAlarmRaised.setStatus('current')
svcTlsFdbTableFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 5)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsFdbTableFullAlarmCleared.setStatus('current')
iesIfCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 6)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"), ("TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesIfCreated.setStatus('obsolete')
iesIfDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 7)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"), ("TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesIfDeleted.setStatus('obsolete')
iesIfStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 8)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"), ("TIMETRA-SERV-MIB", "iesIfIndex"), ("TIMETRA-SERV-MIB", "iesIfAdminStatus"), ("TIMETRA-SERV-MIB", "iesIfOperStatus"))
if mibBuilder.loadTexts: iesIfStatusChanged.setStatus('current')
svcTlsMfibTableFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 9)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMfibTableFullAlarmRaised.setStatus('current')
svcTlsMfibTableFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 10)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMfibTableFullAlarmCleared.setStatus('current')
svcTlsMacPinningViolation = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 11)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"), ("TIMETRA-SERV-MIB", "macPinningMacAddress"), ("TIMETRA-SERV-MIB", "macPinningPinnedRow"), ("TIMETRA-SERV-MIB", "macPinningPinnedRowDescr"), ("TIMETRA-SERV-MIB", "macPinningViolatingRow"), ("TIMETRA-SERV-MIB", "macPinningViolatingRowDescr"))
if mibBuilder.loadTexts: svcTlsMacPinningViolation.setStatus('current')
svcTlsDHCPLseStRestoreProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 12)).setObjects(("TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateSvcId"), ("TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStatePortId"), ("TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateEncapVal"), ("TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateCiAddr"), ("TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateProblem"))
if mibBuilder.loadTexts: svcTlsDHCPLseStRestoreProblem.setStatus('obsolete')
svcTlsDHCPLseStatePopulateErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 13)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "tlsDhcpLseStatePopulateError"))
if mibBuilder.loadTexts: svcTlsDHCPLseStatePopulateErr.setStatus('obsolete')
svcDHCPLseStateRestoreProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 14)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateCiAddr"), ("TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateProblem"))
if mibBuilder.loadTexts: svcDHCPLseStateRestoreProblem.setStatus('current')
tmnxSvcObjTodSuiteApplicFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 15)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcObjRow"), ("TIMETRA-SERV-MIB", "tmnxSvcObjRowDescr"), ("TIMETRA-SERV-MIB", "tmnxSvcObjTodSuite"), ("TIMETRA-SERV-MIB", "tmnxFailureDescription"))
if mibBuilder.loadTexts: tmnxSvcObjTodSuiteApplicFailed.setStatus('current')
tmnxEndPointTxActiveChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 16)).setObjects(("TIMETRA-SERV-MIB", "svcEndPointTxActiveType"), ("TIMETRA-SERV-MIB", "svcEndPointTxActivePortId"), ("TIMETRA-SERV-MIB", "svcEndPointTxActiveEncap"), ("TIMETRA-SERV-MIB", "svcEndPointTxActiveSdpId"))
if mibBuilder.loadTexts: tmnxEndPointTxActiveChanged.setStatus('current')
tmnxSvcPEDiscPolServOperStatChg = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 17)).setObjects(("TIMETRA-SERV-MIB", "svcPEDiscPolServerAddressType"), ("TIMETRA-SERV-MIB", "svcPEDiscPolServerAddress"), ("TIMETRA-SERV-MIB", "svcPEDiscPolServerOperStatus"))
if mibBuilder.loadTexts: tmnxSvcPEDiscPolServOperStatChg.setStatus('current')
svcEndPointMacLimitAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 18)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"), ("TIMETRA-SERV-MIB", "svcEndPointMacLimit"))
if mibBuilder.loadTexts: svcEndPointMacLimitAlarmRaised.setStatus('current')
svcEndPointMacLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 19)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"), ("TIMETRA-SERV-MIB", "svcEndPointMacLimit"))
if mibBuilder.loadTexts: svcEndPointMacLimitAlarmCleared.setStatus('current')
svcTlsMrpAttrRegistrationFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 20)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrRegFailedReason"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrType"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrValue"))
if mibBuilder.loadTexts: svcTlsMrpAttrRegistrationFailed.setStatus('current')
svcFdbMimDestTblFullAlrm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 21)).setObjects(("TIMETRA-SERV-MIB", "svcTotalFdbMimDestIdxEntries"))
if mibBuilder.loadTexts: svcFdbMimDestTblFullAlrm.setStatus('current')
svcFdbMimDestTblFullAlrmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 22)).setObjects(("TIMETRA-SERV-MIB", "svcTotalFdbMimDestIdxEntries"))
if mibBuilder.loadTexts: svcFdbMimDestTblFullAlrmCleared.setStatus('current')
svcDHCPMiscellaneousProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 23)).setObjects(("TIMETRA-SERV-MIB", "tmnxFailureDescription"))
if mibBuilder.loadTexts: svcDHCPMiscellaneousProblem.setStatus('current')
svcPersistencyProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 24)).setObjects(("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "tmnxFailureDescription"))
if mibBuilder.loadTexts: svcPersistencyProblem.setStatus('current')
svcTlsMrpAttrTblFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 25)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMrpAttrTblFullAlarmRaised.setStatus('current')
svcTlsMrpAttrTblFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 26)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMrpAttrTblFullAlarmCleared.setStatus('current')
svcArpHostPopulateErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 27)).setObjects(("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcNotifSapPortId"), ("TIMETRA-SERV-MIB", "svcNotifSapEncapValue"), ("TIMETRA-SERV-MIB", "svcArpHostPopulateError"))
if mibBuilder.loadTexts: svcArpHostPopulateErr.setStatus('current')
svcEpipePbbOperStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 28)).setObjects(("TIMETRA-SERV-MIB", "svcEpipePbbOperState"))
if mibBuilder.loadTexts: svcEpipePbbOperStatusChanged.setStatus('current')
svcEPMCEPConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 29)).setObjects(("TIMETRA-SERV-MIB", "svcEndPointMCEPId"))
if mibBuilder.loadTexts: svcEPMCEPConfigMismatch.setStatus('current')
svcEPMCEPConfigMismatchResolved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 30)).setObjects(("TIMETRA-SERV-MIB", "svcEndPointMCEPId"))
if mibBuilder.loadTexts: svcEPMCEPConfigMismatchResolved.setStatus('current')
svcEPMCEPPassiveModeActive = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 31)).setObjects(("TIMETRA-SERV-MIB", "svcEndPointMCEPId"))
if mibBuilder.loadTexts: svcEPMCEPPassiveModeActive.setStatus('current')
svcEPMCEPPassiveModePassive = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 32)).setObjects(("TIMETRA-SERV-MIB", "svcEndPointMCEPId"))
if mibBuilder.loadTexts: svcEPMCEPPassiveModePassive.setStatus('current')
svcRestoreHostProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 33)).setObjects(("TIMETRA-SERV-MIB", "svcHostAddrType"), ("TIMETRA-SERV-MIB", "svcHostAddr"), ("TIMETRA-SERV-MIB", "tmnxFailureDescription"))
if mibBuilder.loadTexts: svcRestoreHostProblem.setStatus('current')
svcTlsSiteDesigFwdrChg = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 34)).setObjects(("TIMETRA-SERV-MIB", "svcTlsSiteIdDesignatedFwdr"))
if mibBuilder.loadTexts: svcTlsSiteDesigFwdrChg.setStatus('current')
svcTlsGroupOperStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 35)).setObjects(("TIMETRA-SERV-MIB", "svcTlsGroupOperStatus"), ("TIMETRA-SERV-MIB", "svcTlsGroupLastError"))
if mibBuilder.loadTexts: svcTlsGroupOperStatusChanged.setStatus('current')
svcMacFdbTblFullAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 36)).setObjects(("TIMETRA-SERV-MIB", "svcMacFdbRecords"))
if mibBuilder.loadTexts: svcMacFdbTblFullAlarm.setStatus('current')
svcMacFdbTblFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 37)).setObjects(("TIMETRA-SERV-MIB", "svcMacFdbRecords"))
if mibBuilder.loadTexts: svcMacFdbTblFullAlarmCleared.setStatus('current')
svcMSPwRtMisconfig = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 38)).setObjects(("TIMETRA-SERV-MIB", "svcMSPwPeSaiiGlobalId"), ("TIMETRA-SERV-MIB", "svcMSPwPeSaiiPrefix"), ("TIMETRA-SERV-MIB", "svcMSPwPeSaiiAcId"), ("TIMETRA-SERV-MIB", "svcMSPwPeTaiiGlobalId"), ("TIMETRA-SERV-MIB", "svcMSPwPeTaiiPrefix"), ("TIMETRA-SERV-MIB", "svcMSPwPeTaiiAcId"))
if mibBuilder.loadTexts: svcMSPwRtMisconfig.setStatus('current')
svcOperGrpOperStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 39)).setObjects(("TIMETRA-SERV-MIB", "svcOperGrpOperStatus"))
if mibBuilder.loadTexts: svcOperGrpOperStatusChanged.setStatus('current')
svcMSPwRetryExpiredNotif = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 40)).setObjects(("TIMETRA-SERV-MIB", "svcMSPwPeRetryExpired"))
if mibBuilder.loadTexts: svcMSPwRetryExpiredNotif.setStatus('current')
svcVllSiteDesigFwdrChg = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 41)).setObjects(("TIMETRA-SERV-MIB", "svcVllSiteIdDesignatedFwdr"))
if mibBuilder.loadTexts: svcVllSiteDesigFwdrChg.setStatus('current')
tmnxCustomerBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 1), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCustomerBridgeId.setStatus('current')
tmnxCustomerRootBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 2), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCustomerRootBridgeId.setStatus('current')
tmnxOtherBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 3), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxOtherBridgeId.setStatus('current')
tmnxOldSdpBindTlsStpPortState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 4), TStpPortState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxOldSdpBindTlsStpPortState.setStatus('current')
tmnxVcpState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 5), TStpPortState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxVcpState.setStatus('current')
topologyChangeVcpState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 3)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "tmnxVcpState"))
if mibBuilder.loadTexts: topologyChangeVcpState.setStatus('current')
newRootVcpState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 4)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: newRootVcpState.setStatus('current')
newRootBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 7)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: newRootBridge.setStatus('current')
vcpActiveProtocolChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 32)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcTlsStpVcpOperProtocol"))
if mibBuilder.loadTexts: vcpActiveProtocolChange.setStatus('current')
tmnxNewCistRegionalRootBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 33)).setObjects(("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcTlsStpCistRegionalRoot"))
if mibBuilder.loadTexts: tmnxNewCistRegionalRootBridge.setStatus('current')
tmnxNewMstiRegionalRootBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 34)).setObjects(("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcMstiInstanceId"), ("TIMETRA-SERV-MIB", "tlsMstiRegionalRoot"))
if mibBuilder.loadTexts: tmnxNewMstiRegionalRootBridge.setStatus('current')
topologyChangePipMajorState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 39)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: topologyChangePipMajorState.setStatus('current')
topologyChangePipState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 40)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: topologyChangePipState.setStatus('current')
tmnxPipStpExcepCondStateChng = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 41)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "tlsPipStpException"))
if mibBuilder.loadTexts: tmnxPipStpExcepCondStateChng.setStatus('current')
pipActiveProtocolChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 42)).setObjects(("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: pipActiveProtocolChange.setStatus('current')
tmnxCustCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 1))
tmnxCustGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 2))
tmnxSvcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1))
tmnxSvcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2))
tmnxTstpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 5, 1))
tmnxTstpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 5, 2))
tmnxCustCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 1, 100)).setObjects(("TIMETRA-SERV-MIB", "tmnxCustV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCustCompliance = tmnxCustCompliance.setStatus('obsolete')
tmnxCustV8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 1, 101)).setObjects(("TIMETRA-SERV-MIB", "tmnxCustV8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCustV8v0Compliance = tmnxCustV8v0Compliance.setStatus('obsolete')
tmnxCustV9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 1, 102)).setObjects(("TIMETRA-SERV-MIB", "tmnxCustV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxCustV9v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCustV9v0Compliance = tmnxCustV9v0Compliance.setStatus('current')
tmnxSvc7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 100)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7450V6v0Compliance = tmnxSvc7450V6v0Compliance.setStatus('obsolete')
tmnxSvc7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 101)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV5v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7750V6v0Compliance = tmnxSvc7750V6v0Compliance.setStatus('obsolete')
tmnxSvc7710V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 102)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7710V6v0Compliance = tmnxSvc7710V6v0Compliance.setStatus('obsolete')
tmnxSvc7450V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 103)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7450V6v1Compliance = tmnxSvc7450V6v1Compliance.setStatus('obsolete')
tmnxSvc7750V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 104)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV5v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7750V6v1Compliance = tmnxSvc7750V6v1Compliance.setStatus('obsolete')
tmnxSvc7710V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 105)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV5v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpBgpV7v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7710V6v1Compliance = tmnxSvc7710V6v1Compliance.setStatus('obsolete')
tmnxSvc7450V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 106)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpBgpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7450V7v0Compliance = tmnxSvc7450V7v0Compliance.setStatus('obsolete')
tmnxSvc7750V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 107)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpBgpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7750V7v0Compliance = tmnxSvc7750V7v0Compliance.setStatus('obsolete')
tmnxSvc7710V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 108)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7710V7v0Compliance = tmnxSvc7710V7v0Compliance.setStatus('obsolete')
tmnxSvc7450V8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 109)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpBgpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMrpPolicyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcSiteV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedVplsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPwV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMvrpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMacReNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7450V8v0Compliance = tmnxSvc7450V8v0Compliance.setStatus('obsolete')
tmnxSvc7750V8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 110)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpBgpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMrpPolicyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcSiteV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedVplsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPwV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMvrpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMacReNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7750V8v0Compliance = tmnxSvc7750V8v0Compliance.setStatus('obsolete')
tmnxSvc7710V8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 111)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMrpPolicyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcSiteV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedVplsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPwV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMvrpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMacReNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7710V8v0Compliance = tmnxSvc7710V8v0Compliance.setStatus('obsolete')
tmnxSvc7450V9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 112)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpBgpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMrpPolicyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcSiteV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedVplsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPwV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMvrpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcInterAsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcOperGrpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMSPwPeV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMacReNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7450V9v0Compliance = tmnxSvc7450V9v0Compliance.setStatus('obsolete')
tmnxSvc7750V9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 113)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpBgpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMrpPolicyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcSiteV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedVplsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPwV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMvrpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcInterAsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcOperGrpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMSPwPeV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcApipeInfoV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMacReNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7750V9v0Compliance = tmnxSvc7750V9v0Compliance.setStatus('obsolete')
tmnxSvc7710V9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 114)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMrpPolicyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcSiteV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedVplsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPwV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMvrpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcInterAsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcOperGrpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMSPwPeV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEthCfmGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcV9v0R4Group"), ("TIMETRA-SERV-MIB", "tmnxSvcApipeInfoV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMacReNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7710V9v0Compliance = tmnxSvc7710V9v0Compliance.setStatus('obsolete')
tmnxSvc7450V10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 115)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpBgpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMrpPolicyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcSiteV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedVplsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPwV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMvrpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcInterAsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcOperGrpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMSPwPeV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMacReNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcSpbGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcVllBgpGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfNHV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcP2mpGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7450V10v0Compliance = tmnxSvc7450V10v0Compliance.setStatus('current')
tmnxSvc7750V10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 116)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcBsxV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpBgpV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMrpPolicyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcSiteV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedVplsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPwV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMvrpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcInterAsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcOperGrpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMSPwPeV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcApipeInfoV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMacReNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcSpbGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcVllBgpGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfNHV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcP2mpGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7750V10v0Compliance = tmnxSvc7750V10v0Compliance.setStatus('current')
tmnxSvc7710V10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 117)).setObjects(("TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcDhcpV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v1Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxArpHostNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxArpHostBgpGroup"), ("TIMETRA-SERV-MIB", "svcIgmpTrkGroup"), ("TIMETRA-SERV-MIB", "svcTlsMacV7v0Group"), ("TIMETRA-SERV-MIB", "svcTlsEndPointV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIpipeV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMCEPNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPbbMacV7v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMrpPolicyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcSiteV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcObsoletedV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcRoutedVplsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcPwV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMvrpV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcInterAsV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcTlsPipV8v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcOperGrpV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMSPwPeV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcEthCfmGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcV9v0R4Group"), ("TIMETRA-SERV-MIB", "tmnxSvcApipeInfoV9v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcMacReNotifyGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcSpbGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcVllBgpGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcIesIfNHV10v0Group"), ("TIMETRA-SERV-MIB", "tmnxSvcP2mpGroup"), ("TIMETRA-SERV-MIB", "tmnxSvcNotifyV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7710V10v0Compliance = tmnxSvc7710V10v0Compliance.setStatus('current')
tmnxCustV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 2, 100)).setObjects(("TIMETRA-SERV-MIB", "custNumEntries"), ("TIMETRA-SERV-MIB", "custNextFreeId"), ("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "custRowStatus"), ("TIMETRA-SERV-MIB", "custDescription"), ("TIMETRA-SERV-MIB", "custContact"), ("TIMETRA-SERV-MIB", "custPhone"), ("TIMETRA-SERV-MIB", "custLastMgmtChange"), ("TIMETRA-SERV-MIB", "custMultSvcSiteName"), ("TIMETRA-SERV-MIB", "custMultSvcSiteRowStatus"), ("TIMETRA-SERV-MIB", "custMultSvcSiteDescription"), ("TIMETRA-SERV-MIB", "custMultSvcSiteScope"), ("TIMETRA-SERV-MIB", "custMultSvcSiteAssignment"), ("TIMETRA-SERV-MIB", "custMultSvcSiteIngressSchedulerPolicy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteEgressSchedulerPolicy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteLastMgmtChange"), ("TIMETRA-SERV-MIB", "custMultSvcSiteTodSuite"), ("TIMETRA-SERV-MIB", "custMultSvcSiteCurrentIngrSchedPlcy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteCurrentEgrSchedPlcy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteEgressAggRateLimit"), ("TIMETRA-SERV-MIB", "custMultSvcSiteIntendedIngrSchedPlcy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteIntendedEgrSchedPlcy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteFrameBasedAccnt"), ("TIMETRA-SERV-MIB", "custIngQosSchedStatsForwardedPackets"), ("TIMETRA-SERV-MIB", "custIngQosSchedStatsForwardedOctets"), ("TIMETRA-SERV-MIB", "custEgrQosSchedStatsForwardedPackets"), ("TIMETRA-SERV-MIB", "custEgrQosSchedStatsForwardedOctets"), ("TIMETRA-SERV-MIB", "custIngQosPortSchedFwdPkts"), ("TIMETRA-SERV-MIB", "custIngQosPortSchedFwdOctets"), ("TIMETRA-SERV-MIB", "custEgrQosPortSchedFwdPkts"), ("TIMETRA-SERV-MIB", "custEgrQosPortSchedFwdOctets"), ("TIMETRA-SERV-MIB", "custMssIngQosSRowStatus"), ("TIMETRA-SERV-MIB", "custMssIngQosSLastMgmtChange"), ("TIMETRA-SERV-MIB", "custMssIngQosSOverrideFlags"), ("TIMETRA-SERV-MIB", "custMssIngQosSPIR"), ("TIMETRA-SERV-MIB", "custMssIngQosSCIR"), ("TIMETRA-SERV-MIB", "custMssIngQosSSummedCIR"), ("TIMETRA-SERV-MIB", "custMssEgrQosSRowStatus"), ("TIMETRA-SERV-MIB", "custMssEgrQosSLastMgmtChange"), ("TIMETRA-SERV-MIB", "custMssEgrQosSOverrideFlags"), ("TIMETRA-SERV-MIB", "custMssEgrQosSPIR"), ("TIMETRA-SERV-MIB", "custMssEgrQosSCIR"), ("TIMETRA-SERV-MIB", "custMssEgrQosSSummedCIR"), ("TIMETRA-SERV-MIB", "custIngSchedPlcyStatsFwdPkt"), ("TIMETRA-SERV-MIB", "custIngSchedPlcyStatsFwdOct"), ("TIMETRA-SERV-MIB", "custEgrSchedPlcyStatsFwdPkt"), ("TIMETRA-SERV-MIB", "custEgrSchedPlcyStatsFwdOct"), ("TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsFwdPkt"), ("TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsFwdOct"), ("TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsFwdPkt"), ("TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsFwdOct"), ("TIMETRA-SERV-MIB", "custMultSvcSiteFrameBasedAccnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCustV6v0Group = tmnxCustV6v0Group.setStatus('obsolete')
tmnxCustV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 2, 102)).setObjects(("TIMETRA-SERV-MIB", "custNumEntries"), ("TIMETRA-SERV-MIB", "custNextFreeId"), ("TIMETRA-SERV-MIB", "custId"), ("TIMETRA-SERV-MIB", "custRowStatus"), ("TIMETRA-SERV-MIB", "custDescription"), ("TIMETRA-SERV-MIB", "custContact"), ("TIMETRA-SERV-MIB", "custPhone"), ("TIMETRA-SERV-MIB", "custLastMgmtChange"), ("TIMETRA-SERV-MIB", "custMultSvcSiteName"), ("TIMETRA-SERV-MIB", "custMultSvcSiteRowStatus"), ("TIMETRA-SERV-MIB", "custMultSvcSiteDescription"), ("TIMETRA-SERV-MIB", "custMultSvcSiteScope"), ("TIMETRA-SERV-MIB", "custMultSvcSiteAssignment"), ("TIMETRA-SERV-MIB", "custMultSvcSiteIngressSchedulerPolicy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteEgressSchedulerPolicy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteLastMgmtChange"), ("TIMETRA-SERV-MIB", "custMultSvcSiteTodSuite"), ("TIMETRA-SERV-MIB", "custMultSvcSiteCurrentIngrSchedPlcy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteCurrentEgrSchedPlcy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteEgressAggRateLimit"), ("TIMETRA-SERV-MIB", "custMultSvcSiteIntendedIngrSchedPlcy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteIntendedEgrSchedPlcy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteFrameBasedAccnt"), ("TIMETRA-SERV-MIB", "custIngQosSchedStatsForwardedPackets"), ("TIMETRA-SERV-MIB", "custIngQosSchedStatsForwardedOctets"), ("TIMETRA-SERV-MIB", "custEgrQosSchedStatsForwardedPackets"), ("TIMETRA-SERV-MIB", "custEgrQosSchedStatsForwardedOctets"), ("TIMETRA-SERV-MIB", "custIngQosPortSchedFwdPkts"), ("TIMETRA-SERV-MIB", "custIngQosPortSchedFwdOctets"), ("TIMETRA-SERV-MIB", "custEgrQosPortSchedFwdPkts"), ("TIMETRA-SERV-MIB", "custEgrQosPortSchedFwdOctets"), ("TIMETRA-SERV-MIB", "custMssIngQosSRowStatus"), ("TIMETRA-SERV-MIB", "custMssIngQosSLastMgmtChange"), ("TIMETRA-SERV-MIB", "custMssIngQosSOverrideFlags"), ("TIMETRA-SERV-MIB", "custMssIngQosSPIR"), ("TIMETRA-SERV-MIB", "custMssIngQosSCIR"), ("TIMETRA-SERV-MIB", "custMssIngQosSSummedCIR"), ("TIMETRA-SERV-MIB", "custMssEgrQosSRowStatus"), ("TIMETRA-SERV-MIB", "custMssEgrQosSLastMgmtChange"), ("TIMETRA-SERV-MIB", "custMssEgrQosSOverrideFlags"), ("TIMETRA-SERV-MIB", "custMssEgrQosSPIR"), ("TIMETRA-SERV-MIB", "custMssEgrQosSCIR"), ("TIMETRA-SERV-MIB", "custMssEgrQosSSummedCIR"), ("TIMETRA-SERV-MIB", "custIngSchedPlcyStatsFwdPkt"), ("TIMETRA-SERV-MIB", "custIngSchedPlcyStatsFwdOct"), ("TIMETRA-SERV-MIB", "custEgrSchedPlcyStatsFwdPkt"), ("TIMETRA-SERV-MIB", "custEgrSchedPlcyStatsFwdOct"), ("TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsFwdPkt"), ("TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsFwdOct"), ("TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsFwdPkt"), ("TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsFwdOct"), ("TIMETRA-SERV-MIB", "custMultSvcSiteFrameBasedAccnt"), ("TIMETRA-SERV-MIB", "custMultSvcSiteSubscriberMss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCustV8v0Group = tmnxCustV8v0Group.setStatus('current')
tmnxCustV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 2, 103)).setObjects(("TIMETRA-SERV-MIB", "custMultSvcSiteIngPolcrCtrlPolcy"), ("TIMETRA-SERV-MIB", "custMultSvcSiteEgrPolcrCtrlPolcy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCustV9v0Group = tmnxCustV9v0Group.setStatus('current')
tmnxSvcV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 101)).setObjects(("TIMETRA-SERV-MIB", "svcNumEntries"), ("TIMETRA-SERV-MIB", "svcId"), ("TIMETRA-SERV-MIB", "svcRowStatus"), ("TIMETRA-SERV-MIB", "svcType"), ("TIMETRA-SERV-MIB", "svcCustId"), ("TIMETRA-SERV-MIB", "svcIpRouting"), ("TIMETRA-SERV-MIB", "svcDescription"), ("TIMETRA-SERV-MIB", "svcMtu"), ("TIMETRA-SERV-MIB", "svcAdminStatus"), ("TIMETRA-SERV-MIB", "svcOperStatus"), ("TIMETRA-SERV-MIB", "svcNumSaps"), ("TIMETRA-SERV-MIB", "svcNumSdps"), ("TIMETRA-SERV-MIB", "svcLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcDefMeshVcId"), ("TIMETRA-SERV-MIB", "svcVpnId"), ("TIMETRA-SERV-MIB", "svcVRouterId"), ("TIMETRA-SERV-MIB", "svcAutoBind"), ("TIMETRA-SERV-MIB", "svcLastStatusChange"), ("TIMETRA-SERV-MIB", "svcVllType"), ("TIMETRA-SERV-MIB", "svcMgmtVpls"), ("TIMETRA-SERV-MIB", "svcRadiusDiscovery"), ("TIMETRA-SERV-MIB", "svcRadiusUserName"), ("TIMETRA-SERV-MIB", "svcRadiusUserNameType"), ("TIMETRA-SERV-MIB", "svcVcSwitching"), ("TIMETRA-SERV-MIB", "svcRadiusPEDiscPolicy"), ("TIMETRA-SERV-MIB", "svcRadiusDiscoveryShutdown"), ("TIMETRA-SERV-MIB", "svcVplsType"), ("TIMETRA-SERV-MIB", "svcTotalFdbMimDestIdxEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcV6v0Group = tmnxSvcV6v0Group.setStatus('current')
tmnxSvcTlsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 102)).setObjects(("TIMETRA-SERV-MIB", "svcTlsMacLearning"), ("TIMETRA-SERV-MIB", "svcTlsDiscardUnknownDest"), ("TIMETRA-SERV-MIB", "svcTlsFdbTableSize"), ("TIMETRA-SERV-MIB", "svcTlsFdbNumEntries"), ("TIMETRA-SERV-MIB", "svcTlsFdbNumStaticEntries"), ("TIMETRA-SERV-MIB", "svcTlsFdbLocalAgeTime"), ("TIMETRA-SERV-MIB", "svcTlsFdbRemoteAgeTime"), ("TIMETRA-SERV-MIB", "svcTlsStpAdminStatus"), ("TIMETRA-SERV-MIB", "svcTlsStpPriority"), ("TIMETRA-SERV-MIB", "svcTlsStpBridgeAddress"), ("TIMETRA-SERV-MIB", "svcTlsStpTimeSinceTopologyChange"), ("TIMETRA-SERV-MIB", "svcTlsStpTopologyChanges"), ("TIMETRA-SERV-MIB", "svcTlsStpDesignatedRoot"), ("TIMETRA-SERV-MIB", "svcTlsStpRootCost"), ("TIMETRA-SERV-MIB", "svcTlsStpRootPort"), ("TIMETRA-SERV-MIB", "svcTlsStpMaxAge"), ("TIMETRA-SERV-MIB", "svcTlsStpHelloTime"), ("TIMETRA-SERV-MIB", "svcTlsStpForwardDelay"), ("TIMETRA-SERV-MIB", "svcTlsStpBridgeMaxAge"), ("TIMETRA-SERV-MIB", "svcTlsStpBridgeHelloTime"), ("TIMETRA-SERV-MIB", "svcTlsStpBridgeForwardDelay"), ("TIMETRA-SERV-MIB", "svcTlsStpOperStatus"), ("TIMETRA-SERV-MIB", "svcTlsStpVirtualRootBridgeStatus"), ("TIMETRA-SERV-MIB", "svcTlsMacAgeing"), ("TIMETRA-SERV-MIB", "svcTlsStpTopologyChangeActive"), ("TIMETRA-SERV-MIB", "svcTlsFdbTableFullHighWatermark"), ("TIMETRA-SERV-MIB", "svcTlsFdbTableFullLowWatermark"), ("TIMETRA-SERV-MIB", "svcTlsVpnId"), ("TIMETRA-SERV-MIB", "svcTlsCustId"), ("TIMETRA-SERV-MIB", "svcTlsStpVersion"), ("TIMETRA-SERV-MIB", "svcTlsStpHoldCount"), ("TIMETRA-SERV-MIB", "svcTlsStpPrimaryBridge"), ("TIMETRA-SERV-MIB", "svcTlsStpBridgeInstanceId"), ("TIMETRA-SERV-MIB", "svcTlsStpVcpOperProtocol"), ("TIMETRA-SERV-MIB", "svcTlsMacMoveMaxRate"), ("TIMETRA-SERV-MIB", "svcTlsMacMoveRetryTimeout"), ("TIMETRA-SERV-MIB", "svcTlsMacMoveAdminStatus"), ("TIMETRA-SERV-MIB", "svcTlsMacRelearnOnly"), ("TIMETRA-SERV-MIB", "svcTlsMfibTableSize"), ("TIMETRA-SERV-MIB", "svcTlsMfibTableFullHighWatermark"), ("TIMETRA-SERV-MIB", "svcTlsMfibTableFullLowWatermark"), ("TIMETRA-SERV-MIB", "svcTlsMacFlushOnFail"), ("TIMETRA-SERV-MIB", "svcTlsStpRegionName"), ("TIMETRA-SERV-MIB", "svcTlsStpRegionRevision"), ("TIMETRA-SERV-MIB", "svcTlsStpBridgeMaxHops"), ("TIMETRA-SERV-MIB", "svcTlsStpCistRegionalRoot"), ("TIMETRA-SERV-MIB", "svcTlsStpCistIntRootCost"), ("TIMETRA-SERV-MIB", "svcTlsStpCistRemainingHopCount"), ("TIMETRA-SERV-MIB", "svcTlsStpCistRegionalRootPort"), ("TIMETRA-SERV-MIB", "svcTlsFdbNumLearnedEntries"), ("TIMETRA-SERV-MIB", "svcTlsFdbNumOamEntries"), ("TIMETRA-SERV-MIB", "svcTlsFdbNumDhcpEntries"), ("TIMETRA-SERV-MIB", "svcTlsFdbNumHostEntries"), ("TIMETRA-SERV-MIB", "svcTlsShcvAction"), ("TIMETRA-SERV-MIB", "svcTlsShcvSrcIp"), ("TIMETRA-SERV-MIB", "svcTlsShcvSrcMac"), ("TIMETRA-SERV-MIB", "svcTlsShcvInterval"), ("TIMETRA-SERV-MIB", "svcTlsPriPortsCumulativeFactor"), ("TIMETRA-SERV-MIB", "svcTlsSecPortsCumulativeFactor"), ("TIMETRA-SERV-MIB", "svcTlsL2ptTermEnabled"), ("TIMETRA-SERV-MIB", "svcTlsPropagateMacFlush"), ("TIMETRA-SERV-MIB", "svcTlsMrpAdminStatus"), ("TIMETRA-SERV-MIB", "svcTlsMrpMaxAttributes"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttributeCount"), ("TIMETRA-SERV-MIB", "svcTlsMrpFailedRegisterCount"), ("TIMETRA-SERV-MIB", "svcTlsMrpFloodTime"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrTblHighWatermark"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrTblLowWatermark"), ("TIMETRA-SERV-MIB", "svcTlsMcPathMgmtPlcyName"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpAdminQinqFixedTagVal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsV6v0Group = tmnxSvcTlsV6v0Group.setStatus('current')
tmnxSvcTlsFdbV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 103)).setObjects(("TIMETRA-SERV-MIB", "tlsFdbMacAddr"), ("TIMETRA-SERV-MIB", "tlsFdbRowStatus"), ("TIMETRA-SERV-MIB", "tlsFdbType"), ("TIMETRA-SERV-MIB", "tlsFdbLocale"), ("TIMETRA-SERV-MIB", "tlsFdbPortId"), ("TIMETRA-SERV-MIB", "tlsFdbEncapValue"), ("TIMETRA-SERV-MIB", "tlsFdbSdpId"), ("TIMETRA-SERV-MIB", "tlsFdbVcId"), ("TIMETRA-SERV-MIB", "tlsFdbVpnId"), ("TIMETRA-SERV-MIB", "tlsFdbCustId"), ("TIMETRA-SERV-MIB", "tlsFdbLastStateChange"), ("TIMETRA-SERV-MIB", "tlsFdbProtected"), ("TIMETRA-SERV-MIB", "tlsFdbBackboneDstMac"), ("TIMETRA-SERV-MIB", "tlsFdbNumIVplsMac"), ("TIMETRA-SERV-MIB", "tlsFdbEndPointName"), ("TIMETRA-SERV-MIB", "tlsFdbEPMacOperSdpId"), ("TIMETRA-SERV-MIB", "tlsFdbEPMacOperVcId"), ("TIMETRA-SERV-MIB", "tlsFdbPbbNumEpipes"), ("TIMETRA-SERV-MIB", "tlsProtMacRowStatus"), ("TIMETRA-SERV-MIB", "tlsProtMacLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsFdbV6v0Group = tmnxSvcTlsFdbV6v0Group.setStatus('obsolete')
tmnxSvcIesIfV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 104)).setObjects(("TIMETRA-SERV-MIB", "iesIfIndex"), ("TIMETRA-SERV-MIB", "iesIfRowStatus"), ("TIMETRA-SERV-MIB", "iesIfName"), ("TIMETRA-SERV-MIB", "iesIfDescription"), ("TIMETRA-SERV-MIB", "iesIfAdminStatus"), ("TIMETRA-SERV-MIB", "iesIfOperStatus"), ("TIMETRA-SERV-MIB", "iesIfLastMgmtChange"), ("TIMETRA-SERV-MIB", "iesIfVpnId"), ("TIMETRA-SERV-MIB", "iesIfCustId"), ("TIMETRA-SERV-MIB", "iesIfLoopback"), ("TIMETRA-SERV-MIB", "iesIfLastStatusChange"), ("TIMETRA-SERV-MIB", "iesIfType"), ("TIMETRA-SERV-MIB", "iesIfShcvSource"), ("TIMETRA-SERV-MIB", "iesIfShcvAction"), ("TIMETRA-SERV-MIB", "iesIfShcvInterval"), ("TIMETRA-SERV-MIB", "iesGrpIfOperUpWhileEmpty"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIesIfV6v0Group = tmnxSvcIesIfV6v0Group.setStatus('current')
tmnxSvcTlsShgV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 105)).setObjects(("TIMETRA-SERV-MIB", "tlsShgRowStatus"), ("TIMETRA-SERV-MIB", "tlsShgCustId"), ("TIMETRA-SERV-MIB", "tlsShgInstanceId"), ("TIMETRA-SERV-MIB", "tlsShgDescription"), ("TIMETRA-SERV-MIB", "tlsShgLastMgmtChange"), ("TIMETRA-SERV-MIB", "tlsShgResidential"), ("TIMETRA-SERV-MIB", "tlsShgRestProtSrcMac"), ("TIMETRA-SERV-MIB", "tlsShgRestUnprotDstMac"), ("TIMETRA-SERV-MIB", "tlsShgCreationOrigin"), ("TIMETRA-SERV-MIB", "tlsShgRestProtSrcMacAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsShgV6v0Group = tmnxSvcTlsShgV6v0Group.setStatus('current')
tmnxSvcTlsMFibV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 106)).setObjects(("TIMETRA-SERV-MIB", "tlsMFibFwdOrBlk"), ("TIMETRA-SERV-MIB", "tlsMFibSvcId"), ("TIMETRA-SERV-MIB", "tlsMFibStatsForwardedPkts"), ("TIMETRA-SERV-MIB", "tlsMFibStatsForwardedOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsMFibV6v0Group = tmnxSvcTlsMFibV6v0Group.setStatus('current')
tmnxSvcRdntV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 107)).setObjects(("TIMETRA-SERV-MIB", "tlsRdntGrpRowStatus"), ("TIMETRA-SERV-MIB", "tlsRdntGrpDescription"), ("TIMETRA-SERV-MIB", "tlsRdntGrpLastMgmtChange"), ("TIMETRA-SERV-MIB", "tlsRdntGrpMemberRowStatus"), ("TIMETRA-SERV-MIB", "tlsRdntGrpMemberLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRdntV6v0Group = tmnxSvcRdntV6v0Group.setStatus('current')
tmnxSvcTlsMstiV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 108)).setObjects(("TIMETRA-SERV-MIB", "tlsMstiRowStatus"), ("TIMETRA-SERV-MIB", "tlsMstiPriority"), ("TIMETRA-SERV-MIB", "tlsMstiLastMgmtChange"), ("TIMETRA-SERV-MIB", "tlsMstiRegionalRoot"), ("TIMETRA-SERV-MIB", "tlsMstiIntRootCost"), ("TIMETRA-SERV-MIB", "tlsMstiRemainingHopCount"), ("TIMETRA-SERV-MIB", "tlsMstiRegionalRootPort"), ("TIMETRA-SERV-MIB", "tlsMstiMvplsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsMstiV6v0Group = tmnxSvcTlsMstiV6v0Group.setStatus('current')
tmnxSvcTlsEgrV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 109)).setObjects(("TIMETRA-SERV-MIB", "tlsEgrMcGrpRowStatus"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpLastMgmtChange"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpDescription"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpChainLimit"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpEncapType"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpDot1qEtherType"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpQinqEtherType"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpMacFilterId"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpIpFilterId"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpIpv6FilterId"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpQinqFixedTagPosition"), ("TIMETRA-SERV-MIB", "tlsEgrMcGrpOperQinqFixedTagVal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsEgrV6v0Group = tmnxSvcTlsEgrV6v0Group.setStatus('current')
tmnxSvcDhcpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 110)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpLseStateLocale"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePortId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateEncapValue"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSdpId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateVcId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateChAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRemainLseTime"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOption82"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePersistKey"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSubscrIdent"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSubProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSlaProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvOperState"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvChecks"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvReplies"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvReplyTime"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateClientId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateIAID"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateIAIDType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrMaskLen"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRetailerSvcId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRetailerIf"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateAncpString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateFramedIpNetMaskTp"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateFramedIpNetMask"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBCastIpAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBCastIpAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDefaultRouterTp"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDefaultRouter"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryDnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryDns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryDnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryDns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSessionTimeout"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateServerLeaseStart"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateServerLastRenew"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateServerLeaseEnd"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpServerAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpServerAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOriginSubscrId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOriginStrings"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOriginLeaseInfo"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpClientAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpClientAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateLeaseSplitActive"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateInterDestId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryNbnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryNbns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryNbnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryNbns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateNextHopMacAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifySubIndent"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifySubProfile"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifySlaProfile"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateEvaluateState"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModInterDestId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifyAncpString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateForceRenew"), ("TIMETRA-SERV-MIB", "svcDhcpManagedRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcDhcpV6v0Group = tmnxSvcDhcpV6v0Group.setStatus('obsolete')
tmnxSvcEndPointV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 111)).setObjects(("TIMETRA-SERV-MIB", "svcEndPointRowStatus"), ("TIMETRA-SERV-MIB", "svcEndPointDescription"), ("TIMETRA-SERV-MIB", "svcEndPointTxActiveType"), ("TIMETRA-SERV-MIB", "svcEndPointTxActivePortId"), ("TIMETRA-SERV-MIB", "svcEndPointTxActiveEncap"), ("TIMETRA-SERV-MIB", "svcEndPointTxActiveSdpId"), ("TIMETRA-SERV-MIB", "svcEndPointForceSwitchOver"), ("TIMETRA-SERV-MIB", "svcEndPointForceSwitchOverSdpId"), ("TIMETRA-SERV-MIB", "svcEndPointActiveHoldDelay"), ("TIMETRA-SERV-MIB", "svcEndPointIgnoreStandbySig"), ("TIMETRA-SERV-MIB", "svcEndPointMacPinning"), ("TIMETRA-SERV-MIB", "svcEndPointMacLimit"), ("TIMETRA-SERV-MIB", "svcEndPointSuppressStandbySig"), ("TIMETRA-SERV-MIB", "svcEndPointTxActiveChangeCount"), ("TIMETRA-SERV-MIB", "svcEndPointTxActiveLastChange"), ("TIMETRA-SERV-MIB", "svcEndPointTxActiveUpTime"), ("TIMETRA-SERV-MIB", "svcEndPointRevertTime"), ("TIMETRA-SERV-MIB", "svcEndPointRevertTimeCountDn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcEndPointV6v0Group = tmnxSvcEndPointV6v0Group.setStatus('current')
tmnxSvcPEV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 112)).setObjects(("TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyRowStatus"), ("TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyPassword"), ("TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyInterval"), ("TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyTimeout"), ("TIMETRA-SERV-MIB", "svcPEDiscPolServerRowStatus"), ("TIMETRA-SERV-MIB", "svcPEDiscPolServerAddressType"), ("TIMETRA-SERV-MIB", "svcPEDiscPolServerAddress"), ("TIMETRA-SERV-MIB", "svcPEDiscPolServerSecret"), ("TIMETRA-SERV-MIB", "svcPEDiscPolServerOperStatus"), ("TIMETRA-SERV-MIB", "svcPEDiscPolServerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcPEV6v0Group = tmnxSvcPEV6v0Group.setStatus('current')
tmnxSvcIfDHCP6V6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 114)).setObjects(("TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsLstClrd"), ("TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsRcvd"), ("TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsSent"), ("TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIfDHCP6V6v0Group = tmnxSvcIfDHCP6V6v0Group.setStatus('current')
tmnxSvcTlsBackbone6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 115)).setObjects(("TIMETRA-SERV-MIB", "svcTlsBackboneSrcMac"), ("TIMETRA-SERV-MIB", "svcTlsBackboneVplsSvcId"), ("TIMETRA-SERV-MIB", "svcTlsBackboneVplsSvcISID"), ("TIMETRA-SERV-MIB", "svcTlsBackboneOperSrcMac"), ("TIMETRA-SERV-MIB", "svcTlsBackboneOperVplsSvcISID"), ("TIMETRA-SERV-MIB", "svcTlsBackboneLDPMacFlush"), ("TIMETRA-SERV-MIB", "svcTlsBackboneVplsStp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsBackbone6v0Group = tmnxSvcTlsBackbone6v0Group.setStatus('obsolete')
tmnxSvcTlsBgpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 116)).setObjects(("TIMETRA-SERV-MIB", "svcTlsBgpADTableLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsBgpADRowStatus"), ("TIMETRA-SERV-MIB", "svcTlsBgpADLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVplsId"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiPrefix"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiRD"), ("TIMETRA-SERV-MIB", "svcTlsBgpADExportRteTarget"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy1"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy2"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy3"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy4"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy5"), ("TIMETRA-SERV-MIB", "svcTlsBgpADImportRteTarget"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy1"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy2"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy3"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy4"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy5"), ("TIMETRA-SERV-MIB", "svcTlsBgpADAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsBgpV6v0Group = tmnxSvcTlsBgpV6v0Group.setStatus('obsolete')
tmnxSvcEpipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 117)).setObjects(("TIMETRA-SERV-MIB", "svcEpipePbbTableLastChanged"), ("TIMETRA-SERV-MIB", "svcEpipePbbRowStatus"), ("TIMETRA-SERV-MIB", "svcEpipePbbLastChngd"), ("TIMETRA-SERV-MIB", "svcEpipePbbBvplsSvcId"), ("TIMETRA-SERV-MIB", "svcEpipePbbBvplsDstMac"), ("TIMETRA-SERV-MIB", "svcEpipePbbSvcISID"), ("TIMETRA-SERV-MIB", "svcEpipePbbOperState"), ("TIMETRA-SERV-MIB", "svcEpipePbbFlooding"), ("TIMETRA-SERV-MIB", "svcEpipePbbLastStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcEpipeV6v0Group = tmnxSvcEpipeV6v0Group.setStatus('current')
tmnxSvcTlsPipV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 118)).setObjects(("TIMETRA-SERV-MIB", "tlsPipStpPortState"), ("TIMETRA-SERV-MIB", "tlsPipStpPortRole"), ("TIMETRA-SERV-MIB", "tlsPipStpDesignatedBridge"), ("TIMETRA-SERV-MIB", "tlsPipStpDesignatedPort"), ("TIMETRA-SERV-MIB", "tlsPipStpException"), ("TIMETRA-SERV-MIB", "tlsPipStpForwardTransitions"), ("TIMETRA-SERV-MIB", "tlsPipStpInConfigBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpInTcnBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpInRstBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpInMstBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpInBadBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpOutConfigBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpOutTcnBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpOutRstBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpOutMstBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpOperStatus"), ("TIMETRA-SERV-MIB", "tlsPipStpMvplsPruneState"), ("TIMETRA-SERV-MIB", "tlsPipStpOperProtocol"), ("TIMETRA-SERV-MIB", "tlsPipStpPortNum"), ("TIMETRA-SERV-MIB", "tlsPipMstiPortRole"), ("TIMETRA-SERV-MIB", "tlsPipMstiPortState"), ("TIMETRA-SERV-MIB", "tlsPipMstiDesignatedBridge"), ("TIMETRA-SERV-MIB", "tlsPipMstiDesignatedPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsPipV6v0Group = tmnxSvcTlsPipV6v0Group.setStatus('obsolete')
tmnxApipeV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 119)).setObjects(("TIMETRA-SERV-MIB", "svcApipeInterworking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApipeV3v0Group = tmnxApipeV3v0Group.setStatus('current')
tmnxSvcRoutedCOV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 120)).setObjects(("TIMETRA-SERV-MIB", "iesIfParentIf"), ("TIMETRA-SERV-MIB", "iesIfFwdServId"), ("TIMETRA-SERV-MIB", "iesIfFwdSubIf"), ("TIMETRA-SERV-MIB", "iesGrpIfRedInterface"), ("TIMETRA-SERV-MIB", "svcWholesalerNumStaticHosts"), ("TIMETRA-SERV-MIB", "svcWholesalerNumDynamicHosts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRoutedCOV5v0Group = tmnxSvcRoutedCOV5v0Group.setStatus('obsolete')
tmnxArpHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 130)).setObjects(("TIMETRA-SERV-MIB", "svcArpHostTableLastChanged"), ("TIMETRA-SERV-MIB", "svcArpHostLocale"), ("TIMETRA-SERV-MIB", "svcArpHostSapPortId"), ("TIMETRA-SERV-MIB", "svcArpHostSapEncapValue"), ("TIMETRA-SERV-MIB", "svcArpHostSdpId"), ("TIMETRA-SERV-MIB", "svcArpHostVcId"), ("TIMETRA-SERV-MIB", "svcArpHostSessionTimeout"), ("TIMETRA-SERV-MIB", "svcArpHostStart"), ("TIMETRA-SERV-MIB", "svcArpHostLastAuth"), ("TIMETRA-SERV-MIB", "svcArpHostRefresh"), ("TIMETRA-SERV-MIB", "svcArpHostRemainingTime"), ("TIMETRA-SERV-MIB", "svcArpHostShcvOperState"), ("TIMETRA-SERV-MIB", "svcArpHostShcvChecks"), ("TIMETRA-SERV-MIB", "svcArpHostShcvReplies"), ("TIMETRA-SERV-MIB", "svcArpHostShcvReplyTime"), ("TIMETRA-SERV-MIB", "svcArpHostSubscrIdent"), ("TIMETRA-SERV-MIB", "svcArpHostSubProfString"), ("TIMETRA-SERV-MIB", "svcArpHostSlaProfString"), ("TIMETRA-SERV-MIB", "svcArpHostAppProfString"), ("TIMETRA-SERV-MIB", "svcArpHostAncpString"), ("TIMETRA-SERV-MIB", "svcArpHostInterDestId"), ("TIMETRA-SERV-MIB", "svcArpHostRetailerSvcId"), ("TIMETRA-SERV-MIB", "svcArpHostRetailerIf"), ("TIMETRA-SERV-MIB", "svcArpHostMacAddr"), ("TIMETRA-SERV-MIB", "svcArpHostPersistKey"), ("TIMETRA-SERV-MIB", "svcArpHostCategoryMapName"), ("TIMETRA-SERV-MIB", "svcArpHostRadiusClassAttr"), ("TIMETRA-SERV-MIB", "svcArpHostRadiusUserName"), ("TIMETRA-SERV-MIB", "svcArpHostIfTableLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcArpHostIfLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcArpHostIfAdminState"), ("TIMETRA-SERV-MIB", "svcArpHostIfMaxNumHosts"), ("TIMETRA-SERV-MIB", "svcArpHostIfMaxNumHostsSap"), ("TIMETRA-SERV-MIB", "svcArpHostIfMinAuthInterval"), ("TIMETRA-SERV-MIB", "svcArpHostIfNumHosts"), ("TIMETRA-SERV-MIB", "svcArpHostDefaultSessionTimeout"), ("TIMETRA-SERV-MIB", "svcArpHostMRtStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxArpHostGroup = tmnxArpHostGroup.setStatus('obsolete')
tmnxSvcBsxV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 121)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpLseStateAppProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifyAppProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcBsxV6v0Group = tmnxSvcBsxV6v0Group.setStatus('obsolete')
tmnxSvcTlsBackbone6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 122)).setObjects(("TIMETRA-SERV-MIB", "svcTlsBackboneSrcMac"), ("TIMETRA-SERV-MIB", "svcTlsBackboneVplsSvcId"), ("TIMETRA-SERV-MIB", "svcTlsBackboneVplsSvcISID"), ("TIMETRA-SERV-MIB", "svcTlsBackboneOperSrcMac"), ("TIMETRA-SERV-MIB", "svcTlsBackboneOperVplsSvcISID"), ("TIMETRA-SERV-MIB", "svcTlsBackboneLDPMacFlush"), ("TIMETRA-SERV-MIB", "svcTlsBackboneLDPMacFlushNotMine"), ("TIMETRA-SERV-MIB", "svcTlsBackboneVplsStp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsBackbone6v1Group = tmnxSvcTlsBackbone6v1Group.setStatus('current')
svcIgmpTrkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 131)).setObjects(("TIMETRA-SERV-MIB", "svcIgmpTrkTableLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcIgmpTrkLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcIgmpTrkAdminState"), ("TIMETRA-SERV-MIB", "svcIgmpTrkExpiryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    svcIgmpTrkGroup = svcIgmpTrkGroup.setStatus('current')
svcTlsMacV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 132)).setObjects(("TIMETRA-SERV-MIB", "svcTlsMacMoveNumRetries"), ("TIMETRA-SERV-MIB", "svcTlsMacSubNetLen"), ("TIMETRA-SERV-MIB", "svcTlsSendFlushOnBVplsFail"), ("TIMETRA-SERV-MIB", "svcTlsPropMacFlushFromBVpls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    svcTlsMacV7v0Group = svcTlsMacV7v0Group.setStatus('current')
tmnxSvcRoutedCOV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 133)).setObjects(("TIMETRA-SERV-MIB", "iesIfParentIf"), ("TIMETRA-SERV-MIB", "iesIfFwdServId"), ("TIMETRA-SERV-MIB", "iesIfFwdSubIf"), ("TIMETRA-SERV-MIB", "iesGrpIfRedInterface"), ("TIMETRA-SERV-MIB", "svcWholesalerNumStaticHosts"), ("TIMETRA-SERV-MIB", "svcWholesalerNumDynamicHosts"), ("TIMETRA-SERV-MIB", "iesIfPrivateRetailSubnets"), ("TIMETRA-SERV-MIB", "svcWholesalerNumDhcpLeaseStates"), ("TIMETRA-SERV-MIB", "svcWholesalerNumPppoeSessions"), ("TIMETRA-SERV-MIB", "svcWholesalerNumArpHosts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRoutedCOV7v0Group = tmnxSvcRoutedCOV7v0Group.setStatus('obsolete')
svcTlsEndPointV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 134)).setObjects(("TIMETRA-SERV-MIB", "svcEndPointMCEPId"), ("TIMETRA-SERV-MIB", "svcEndPointMCEPPeerAddr"), ("TIMETRA-SERV-MIB", "svcEndPointMCEPPeerAddrType"), ("TIMETRA-SERV-MIB", "svcEndPointMCEPPeerName"), ("TIMETRA-SERV-MIB", "svcEndPointMCEPPsvModeActive"), ("TIMETRA-SERV-MIB", "svcEndPointBlockOnMeshFail"), ("TIMETRA-SERV-MIB", "svcEpMcEpStatsPktsRxConfig"), ("TIMETRA-SERV-MIB", "svcEpMcEpStatsPktsRxState"), ("TIMETRA-SERV-MIB", "svcEpMcEpStatsPktsTxConfig"), ("TIMETRA-SERV-MIB", "svcEpMcEpStatsPktsTxFailed"), ("TIMETRA-SERV-MIB", "svcEpMcEpStatsPktsTxState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    svcTlsEndPointV7v0Group = svcTlsEndPointV7v0Group.setStatus('current')
tmnxSvcIpipeV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 135)).setObjects(("TIMETRA-SERV-MIB", "svcIpipeInfoLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcIpipeCeAddressDiscovery"), ("TIMETRA-SERV-MIB", "svcIpipeInfoTableLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIpipeV7v0Group = tmnxSvcIpipeV7v0Group.setStatus('obsolete')
tmnxSvcDhcpBgpV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 136)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpPrngPlcyName"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpAuthKeyChain"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpMD5AuthKey"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpImportPolicy"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpExportPolicy"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpPeerAS"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpPeeringStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcDhcpBgpV7v0Group = tmnxSvcDhcpBgpV7v0Group.setStatus('current')
tmnxSvcTlsPipV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 137)).setObjects(("TIMETRA-SERV-MIB", "tlsPipStpPortState"), ("TIMETRA-SERV-MIB", "tlsPipStpPortRole"), ("TIMETRA-SERV-MIB", "tlsPipStpDesignatedBridge"), ("TIMETRA-SERV-MIB", "tlsPipStpDesignatedPort"), ("TIMETRA-SERV-MIB", "tlsPipStpException"), ("TIMETRA-SERV-MIB", "tlsPipStpForwardTransitions"), ("TIMETRA-SERV-MIB", "tlsPipStpInConfigBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpInTcnBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpInRstBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpInMstBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpInBadBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpOutConfigBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpOutTcnBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpOutRstBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpOutMstBpdus"), ("TIMETRA-SERV-MIB", "tlsPipStpOperStatus"), ("TIMETRA-SERV-MIB", "tlsPipStpMvplsPruneState"), ("TIMETRA-SERV-MIB", "tlsPipStpOperProtocol"), ("TIMETRA-SERV-MIB", "tlsPipStpPortNum"), ("TIMETRA-SERV-MIB", "tlsPipMstiPortRole"), ("TIMETRA-SERV-MIB", "tlsPipMstiPortState"), ("TIMETRA-SERV-MIB", "tlsPipMstiDesignatedBridge"), ("TIMETRA-SERV-MIB", "tlsPipMstiDesignatedPort"), ("TIMETRA-SERV-MIB", "tlsPipStpInsideRegion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsPipV7v0Group = tmnxSvcTlsPipV7v0Group.setStatus('current')
tmnxArpHostBgpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 138)).setObjects(("TIMETRA-SERV-MIB", "svcArpHostBgpPrngPlcyName"), ("TIMETRA-SERV-MIB", "svcArpHostBgpAuthKeyChain"), ("TIMETRA-SERV-MIB", "svcArpHostBgpMD5AuthKey"), ("TIMETRA-SERV-MIB", "svcArpHostBgpImportPolicy"), ("TIMETRA-SERV-MIB", "svcArpHostBgpExportPolicy"), ("TIMETRA-SERV-MIB", "svcArpHostBgpPeerAS"), ("TIMETRA-SERV-MIB", "svcArpHostBgpPeeringStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxArpHostBgpGroup = tmnxArpHostBgpGroup.setStatus('current')
tmnxSvcDhcpV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 139)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpLseStateLocale"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePortId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateEncapValue"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSdpId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateVcId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateChAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRemainLseTime"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOption82"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePersistKey"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSubscrIdent"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSubProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSlaProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvOperState"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvChecks"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvReplies"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvReplyTime"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateClientId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateIAID"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateIAIDType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrMaskLen"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRetailerSvcId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRetailerIf"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateAncpString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateFramedIpNetMaskTp"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateFramedIpNetMask"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBCastIpAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBCastIpAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDefaultRouterTp"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDefaultRouter"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryDnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryDns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryDnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryDns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSessionTimeout"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateServerLeaseStart"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateServerLastRenew"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateServerLeaseEnd"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpServerAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpServerAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOriginSubscrId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOriginStrings"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOriginLeaseInfo"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpClientAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpClientAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateLeaseSplitActive"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateInterDestId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryNbnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryNbns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryNbnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryNbns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateNextHopMacAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateCategoryMapName"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateNakNextRenew"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRadiusClassAttr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRadiusUserName"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifySubIndent"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifySubProfile"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifySlaProfile"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateEvaluateState"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModInterDestId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifyAncpString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateForceRenew"), ("TIMETRA-SERV-MIB", "svcDhcpManagedRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcDhcpV7v0Group = tmnxSvcDhcpV7v0Group.setStatus('obsolete')
tmnxSvcPbbMacV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 140)).setObjects(("TIMETRA-SERV-MIB", "svcEpipePbbBvplsDstMacName"), ("TIMETRA-SERV-MIB", "svcEpipePbbBvplsOperDstMac"), ("TIMETRA-SERV-MIB", "svcMacNameAddr"), ("TIMETRA-SERV-MIB", "svcMacNameLastChngd"), ("TIMETRA-SERV-MIB", "svcMacNameRowStatus"), ("TIMETRA-SERV-MIB", "svcMacNameTableLastChanged"), ("TIMETRA-SERV-MIB", "svcPbbSrcBVplsMacAddr"), ("TIMETRA-SERV-MIB", "svcMacNotifCount"), ("TIMETRA-SERV-MIB", "svcMacNotifInterval"), ("TIMETRA-SERV-MIB", "svcTlsMacNotifAdminState"), ("TIMETRA-SERV-MIB", "svcTlsMacNotifCount"), ("TIMETRA-SERV-MIB", "svcTlsMacNotifInterval"), ("TIMETRA-SERV-MIB", "svcTlsBackboneUseSapBMac"), ("TIMETRA-SERV-MIB", "svcTlsPbbIgmpSnpgMRtrRowStatus"), ("TIMETRA-SERV-MIB", "svcTlsPbbIgmpSnpgMRtrLastCh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcPbbMacV7v0Group = tmnxSvcPbbMacV7v0Group.setStatus('current')
tmnxSvcTlsFdbV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 141)).setObjects(("TIMETRA-SERV-MIB", "tlsFdbMacAddr"), ("TIMETRA-SERV-MIB", "tlsFdbRowStatus"), ("TIMETRA-SERV-MIB", "tlsFdbType"), ("TIMETRA-SERV-MIB", "tlsFdbLocale"), ("TIMETRA-SERV-MIB", "tlsFdbPortId"), ("TIMETRA-SERV-MIB", "tlsFdbEncapValue"), ("TIMETRA-SERV-MIB", "tlsFdbSdpId"), ("TIMETRA-SERV-MIB", "tlsFdbVcId"), ("TIMETRA-SERV-MIB", "tlsFdbVpnId"), ("TIMETRA-SERV-MIB", "tlsFdbCustId"), ("TIMETRA-SERV-MIB", "tlsFdbLastStateChange"), ("TIMETRA-SERV-MIB", "tlsFdbProtected"), ("TIMETRA-SERV-MIB", "tlsFdbBackboneDstMac"), ("TIMETRA-SERV-MIB", "tlsFdbNumIVplsMac"), ("TIMETRA-SERV-MIB", "tlsFdbEndPointName"), ("TIMETRA-SERV-MIB", "tlsFdbEPMacOperSdpId"), ("TIMETRA-SERV-MIB", "tlsFdbEPMacOperVcId"), ("TIMETRA-SERV-MIB", "tlsFdbPbbNumEpipes"), ("TIMETRA-SERV-MIB", "tlsProtMacRowStatus"), ("TIMETRA-SERV-MIB", "tlsProtMacLastMgmtChange"), ("TIMETRA-SERV-MIB", "tlsProtMacImplCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsFdbV7v0Group = tmnxSvcTlsFdbV7v0Group.setStatus('current')
tmnxSvcV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 142)).setObjects(("TIMETRA-SERV-MIB", "svcNumMcStandbySaps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcV7v0Group = tmnxSvcV7v0Group.setStatus('current')
tmnxSvcTlsV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 152)).setObjects(("TIMETRA-SERV-MIB", "svcTlsShcvRetryTimeout"), ("TIMETRA-SERV-MIB", "svcTlsShcvRetryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsV7v0Group = tmnxSvcTlsV7v0Group.setStatus('current')
tmnxSvcIesIfV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 153)).setObjects(("TIMETRA-SERV-MIB", "iesIfShcvRetryTimeout"), ("TIMETRA-SERV-MIB", "iesIfShcvRetryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIesIfV7v0Group = tmnxSvcIesIfV7v0Group.setStatus('current')
tmnxSvcV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 143)).setObjects(("TIMETRA-SERV-MIB", "svcName"), ("TIMETRA-SERV-MIB", "svcNameId"), ("TIMETRA-SERV-MIB", "svcNameRowStatus"), ("TIMETRA-SERV-MIB", "svcNameLastChanged"), ("TIMETRA-SERV-MIB", "svcNameTableLastChanged"), ("TIMETRA-SERV-MIB", "svcNameType"), ("TIMETRA-SERV-MIB", "svcEndPointStandbySigMaster"), ("TIMETRA-SERV-MIB", "svcTlsPerSvcHashing"), ("TIMETRA-SERV-MIB", "svcEpipePerSvcHashing"), ("TIMETRA-SERV-MIB", "svcTlsBackboneForceQTagFwd"), ("TIMETRA-SERV-MIB", "svcEpipeBackboneForceQTagFwd"), ("TIMETRA-SERV-MIB", "svcEpipeBackboneLastChngd"), ("TIMETRA-SERV-MIB", "svcEpipeBackboneTableLastChanged"), ("TIMETRA-SERV-MIB", "svcEpipeLastChngd"), ("TIMETRA-SERV-MIB", "svcEpipeTableLastChanged"), ("TIMETRA-SERV-MIB", "svcHashLabel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcV8v0Group = tmnxSvcV8v0Group.setStatus('current')
tmnxSvcMrpPolicyV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 144)).setObjects(("TIMETRA-SERV-MIB", "svcMrpPlcyTableLastChgd"), ("TIMETRA-SERV-MIB", "svcMrpPlcyParamsTblLastChgd"), ("TIMETRA-SERV-MIB", "svcMrpPlcyParamsISIDTblLastChgd"), ("TIMETRA-SERV-MIB", "svcMrpPolicyRowStatus"), ("TIMETRA-SERV-MIB", "svcMrpPolicyLastChanged"), ("TIMETRA-SERV-MIB", "svcMrpPolicyDescription"), ("TIMETRA-SERV-MIB", "svcMrpPolicyScope"), ("TIMETRA-SERV-MIB", "svcMrpPolicyDefaultAction"), ("TIMETRA-SERV-MIB", "svcMrpPolicyParamsRowStatus"), ("TIMETRA-SERV-MIB", "svcMrpPolicyParamsLastChanged"), ("TIMETRA-SERV-MIB", "svcMrpPolicyParamsDescription"), ("TIMETRA-SERV-MIB", "svcMrpPolicyParamsAction"), ("TIMETRA-SERV-MIB", "svcMrpPolicyParamsISIDHigh"), ("TIMETRA-SERV-MIB", "svcMrpPolicyParamsISIDRowStatus"), ("TIMETRA-SERV-MIB", "svcMrpPolicyParamsISIDLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcMrpPolicyV8v0Group = tmnxSvcMrpPolicyV8v0Group.setStatus('current')
tmnxSvcSiteV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 145)).setObjects(("TIMETRA-SERV-MIB", "svcTlsSiteIdAdminStatus"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdEncapValue"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdPortId"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdRowStatus"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdSdpBindId"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdShgMeshSdp"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdShgName"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdSiteId"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdFailedThresh"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdOperStatus"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdDesignatedFwdr"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdDfUpTime"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdDfChgCnt"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdTblLastChanged"), ("TIMETRA-SERV-MIB", "svcBgpVplsVeId"), ("TIMETRA-SERV-MIB", "svcBgpVplsVeName"), ("TIMETRA-SERV-MIB", "svcBgpVplsMaxVeId"), ("TIMETRA-SERV-MIB", "svcBgpVplsAdminStatus"), ("TIMETRA-SERV-MIB", "svcBgpVplsLastChanged"), ("TIMETRA-SERV-MIB", "svcBgpVplsRowStatus"), ("TIMETRA-SERV-MIB", "svcBgpVplsTblLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsBgpExportRteTarget"), ("TIMETRA-SERV-MIB", "svcTlsBgpImportRteTarget"), ("TIMETRA-SERV-MIB", "svcTlsBgpLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsBgpTableLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiExportPolicy1"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiExportPolicy2"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiExportPolicy3"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiExportPolicy4"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiExportPolicy5"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiImportPolicy1"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiImportPolicy2"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiImportPolicy3"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiImportPolicy4"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiImportPolicy5"), ("TIMETRA-SERV-MIB", "svcTlsBgpVsiRD"), ("TIMETRA-SERV-MIB", "tlsShgSiteName"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdBootTimer"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdSiteActTimer"), ("TIMETRA-SERV-MIB", "svcTlsSiteIdTimerRemain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcSiteV8v0Group = tmnxSvcSiteV8v0Group.setStatus('current')
tmnxSvcRoutedCOV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 146)).setObjects(("TIMETRA-SERV-MIB", "iesIfParentIf"), ("TIMETRA-SERV-MIB", "iesIfFwdServId"), ("TIMETRA-SERV-MIB", "iesIfFwdSubIf"), ("TIMETRA-SERV-MIB", "iesGrpIfRedInterface"), ("TIMETRA-SERV-MIB", "svcWholesalerNumStaticHosts"), ("TIMETRA-SERV-MIB", "svcWholesalerNumDynamicHosts"), ("TIMETRA-SERV-MIB", "iesIfPrivateRetailSubnets"), ("TIMETRA-SERV-MIB", "svcWholesalerNumDhcpLeaseStates"), ("TIMETRA-SERV-MIB", "svcWholesalerNumPppoeSessions"), ("TIMETRA-SERV-MIB", "svcWholesalerNumArpHosts"), ("TIMETRA-SERV-MIB", "iesIfDelegatedPrefixLen"), ("TIMETRA-SERV-MIB", "iesIfLns"), ("TIMETRA-SERV-MIB", "iesIfDefaultPrimaryDnsIPv4Addr"), ("TIMETRA-SERV-MIB", "iesIfDefaultSecondaryDnsIPv4Addr"), ("TIMETRA-SERV-MIB", "iesIfDefaultPrimaryDnsIPv6Addr"), ("TIMETRA-SERV-MIB", "iesIfDefaultSecondaryDnsIPv6Addr"), ("TIMETRA-SERV-MIB", "iesIfIPv6ConfigAllowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRoutedCOV8v0Group = tmnxSvcRoutedCOV8v0Group.setStatus('obsolete')
tmnxArpHostV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 147)).setObjects(("TIMETRA-SERV-MIB", "svcArpHostTableLastChanged"), ("TIMETRA-SERV-MIB", "svcArpHostLocale"), ("TIMETRA-SERV-MIB", "svcArpHostSapPortId"), ("TIMETRA-SERV-MIB", "svcArpHostSapEncapValue"), ("TIMETRA-SERV-MIB", "svcArpHostSdpId"), ("TIMETRA-SERV-MIB", "svcArpHostVcId"), ("TIMETRA-SERV-MIB", "svcArpHostSessionTimeout"), ("TIMETRA-SERV-MIB", "svcArpHostStart"), ("TIMETRA-SERV-MIB", "svcArpHostLastAuth"), ("TIMETRA-SERV-MIB", "svcArpHostRefresh"), ("TIMETRA-SERV-MIB", "svcArpHostRemainingTime"), ("TIMETRA-SERV-MIB", "svcArpHostShcvOperState"), ("TIMETRA-SERV-MIB", "svcArpHostShcvChecks"), ("TIMETRA-SERV-MIB", "svcArpHostShcvReplies"), ("TIMETRA-SERV-MIB", "svcArpHostShcvReplyTime"), ("TIMETRA-SERV-MIB", "svcArpHostSubscrIdent"), ("TIMETRA-SERV-MIB", "svcArpHostSubProfString"), ("TIMETRA-SERV-MIB", "svcArpHostSlaProfString"), ("TIMETRA-SERV-MIB", "svcArpHostAppProfString"), ("TIMETRA-SERV-MIB", "svcArpHostAncpString"), ("TIMETRA-SERV-MIB", "svcArpHostInterDestId"), ("TIMETRA-SERV-MIB", "svcArpHostRetailerSvcId"), ("TIMETRA-SERV-MIB", "svcArpHostRetailerIf"), ("TIMETRA-SERV-MIB", "svcArpHostMacAddr"), ("TIMETRA-SERV-MIB", "svcArpHostPersistKey"), ("TIMETRA-SERV-MIB", "svcArpHostCategoryMapName"), ("TIMETRA-SERV-MIB", "svcArpHostRadiusClassAttr"), ("TIMETRA-SERV-MIB", "svcArpHostRadiusUserName"), ("TIMETRA-SERV-MIB", "svcArpHostOriginSubscrId"), ("TIMETRA-SERV-MIB", "svcArpHostOriginStrings"), ("TIMETRA-SERV-MIB", "svcArpHostIfTableLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcArpHostIfLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcArpHostIfAdminState"), ("TIMETRA-SERV-MIB", "svcArpHostIfMaxNumHosts"), ("TIMETRA-SERV-MIB", "svcArpHostIfMaxNumHostsSap"), ("TIMETRA-SERV-MIB", "svcArpHostIfMinAuthInterval"), ("TIMETRA-SERV-MIB", "svcArpHostIfNumHosts"), ("TIMETRA-SERV-MIB", "svcArpHostDefaultSessionTimeout"), ("TIMETRA-SERV-MIB", "svcArpHostMRtStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxArpHostV8v0Group = tmnxArpHostV8v0Group.setStatus('obsolete')
tmnxSvcTlsBgpV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 148)).setObjects(("TIMETRA-SERV-MIB", "svcTlsBgpADTableLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsBgpADRowStatus"), ("TIMETRA-SERV-MIB", "svcTlsBgpADLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVplsId"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiPrefix"), ("TIMETRA-SERV-MIB", "svcTlsBgpADAdminStatus"), ("TIMETRA-SERV-MIB", "svcL2MhRteDf"), ("TIMETRA-SERV-MIB", "svcL2MhRteState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsBgpV8v0Group = tmnxSvcTlsBgpV8v0Group.setStatus('current')
tmnxSvcDhcpV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 150)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpLeaseChAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseLocale"), ("TIMETRA-SERV-MIB", "svcDhcpLeasePortId"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseEncapValue"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseSdpId"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseVcId"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseRemainLseTime"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseOption82"), ("TIMETRA-SERV-MIB", "svcDhcpLeasePersistKey"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseSubscrIdent"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseSubProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseSlaProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseShcvOperState"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseShcvChecks"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseShcvReplies"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseShcvReplyTime"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseClientId"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseIAID"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseIAIDType"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseCiAddrMaskLen"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseRetailerSvcId"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseRetailerIf"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseAncpString"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseFramedIpNetMaskTp"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseFramedIpNetMask"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseBCastIpAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseBCastIpAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseDefaultRouterTp"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseDefaultRouter"), ("TIMETRA-SERV-MIB", "svcDhcpLeasePrimaryDnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLeasePrimaryDns"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseSecondaryDnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseSecondaryDns"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseSessionTimeout"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseServerLeaseStart"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseServerLastRenew"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseServerLeaseEnd"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseDhcpServerAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseDhcpServerAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseOriginSubscrId"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseOriginStrings"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseOriginLeaseInfo"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseDhcpClientAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseDhcpClientAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseLeaseSplitActive"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseInterDestId"), ("TIMETRA-SERV-MIB", "svcDhcpLeasePrimaryNbnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLeasePrimaryNbns"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseSecondaryNbnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseSecondaryNbns"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseCategoryMapName"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseNakNextRenew"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseRadiusClassAttr"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseRadiusUserName"), ("TIMETRA-SERV-MIB", "svcDhcpManagedRouteStatus"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseModifySubIndent"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseModifySubIndent"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseModifySubProfile"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseModifySlaProfile"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseEvaluateState"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseModInterDestId"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseModifyAncpString"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseForceRenew"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseBgpPrngPlcyName"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseBgpAuthKeyChain"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseBgpMD5AuthKey"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseBgpImportPolicy"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseBgpExportPolicy"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseBgpPeerAS"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseBgpPeeringStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcDhcpV8v0Group = tmnxSvcDhcpV8v0Group.setStatus('current')
tmnxSvcBsxV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 151)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpLeaseAppProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseModifyAppProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcBsxV8v0Group = tmnxSvcBsxV8v0Group.setStatus('current')
tmnxSvcRoutedVplsV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 154)).setObjects(("TIMETRA-SERV-MIB", "svcTlsAllowIpIfBinding"), ("TIMETRA-SERV-MIB", "iesIfVplsName"), ("TIMETRA-SERV-MIB", "iesIfVplsStatus"), ("TIMETRA-SERV-MIB", "iesIfVplsFailedReason"), ("TIMETRA-SERV-MIB", "iesIfSapEgressQosId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRoutedVplsV8v0Group = tmnxSvcRoutedVplsV8v0Group.setStatus('current')
tmnxSvcMvrpV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 155)).setObjects(("TIMETRA-SERV-MIB", "svcTmplLastChanged"), ("TIMETRA-SERV-MIB", "svcTmplMtu"), ("TIMETRA-SERV-MIB", "svcTmplRowStatus"), ("TIMETRA-SERV-MIB", "svcTmplTblLastChanged"), ("TIMETRA-SERV-MIB", "svcTmplType"), ("TIMETRA-SERV-MIB", "svcTmplTlsTblLastChanged"), ("TIMETRA-SERV-MIB", "svcTmplTlsLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsGroupAdminStatus"), ("TIMETRA-SERV-MIB", "svcTlsGroupEnd"), ("TIMETRA-SERV-MIB", "svcTlsGroupLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsGroupRowStatus"), ("TIMETRA-SERV-MIB", "svcTlsGroupSapTmplName"), ("TIMETRA-SERV-MIB", "svcTlsGroupStart"), ("TIMETRA-SERV-MIB", "svcTlsGroupSvcTmplName"), ("TIMETRA-SERV-MIB", "svcTlsGroupTblLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsGroupMvrpControl"), ("TIMETRA-SERV-MIB", "svcTlsGroupStartVlanTag"), ("TIMETRA-SERV-MIB", "svcTlsTempFloodTime"), ("TIMETRA-SERV-MIB", "svcTlsTempFloodActive"), ("TIMETRA-SERV-MIB", "svcTlsTempFloodChangeCount"), ("TIMETRA-SERV-MIB", "svcTmplSvcCount"), ("TIMETRA-SERV-MIB", "svcTmplUsed"), ("TIMETRA-SERV-MIB", "svcCtrlSvcId"), ("TIMETRA-SERV-MIB", "svcTlsExtMvrpAttributeCount"), ("TIMETRA-SERV-MIB", "svcTlsExtMmrpAdminStatus"), ("TIMETRA-SERV-MIB", "svcTlsExtMmrpOperStatus"), ("TIMETRA-SERV-MIB", "svcTmplUserCreationOrigin"), ("TIMETRA-SERV-MIB", "svcTmplUserCreatorSvcId"), ("TIMETRA-SERV-MIB", "svcTmplTlsDiscardUnknownDest"), ("TIMETRA-SERV-MIB", "svcTmplTlsFdbLocalAgeTime"), ("TIMETRA-SERV-MIB", "svcTmplTlsFdbRemoteAgeTime"), ("TIMETRA-SERV-MIB", "svcTmplTlsFdbTableFullHighWMark"), ("TIMETRA-SERV-MIB", "svcTmplTlsFdbTableFullLowWMark"), ("TIMETRA-SERV-MIB", "svcTmplTlsFdbTableSize"), ("TIMETRA-SERV-MIB", "svcTmplTlsMacAgeing"), ("TIMETRA-SERV-MIB", "svcTmplTlsMacLearning"), ("TIMETRA-SERV-MIB", "svcTmplTlsMacMoveAdminStatus"), ("TIMETRA-SERV-MIB", "svcTmplTlsMacMoveMaxRate"), ("TIMETRA-SERV-MIB", "svcTmplTlsMacMoveNumRetries"), ("TIMETRA-SERV-MIB", "svcTmplTlsMacMoveRetryTimeout"), ("TIMETRA-SERV-MIB", "svcTmplTlsPerSvcHashing"), ("TIMETRA-SERV-MIB", "svcTmplTlsPriPortsCumFactor"), ("TIMETRA-SERV-MIB", "svcTmplTlsSecPortsCumFactor"), ("TIMETRA-SERV-MIB", "svcTmplTlsStpAdminStatus"), ("TIMETRA-SERV-MIB", "svcTmplTlsStpBridgeForwardDelay"), ("TIMETRA-SERV-MIB", "svcTmplTlsStpBridgeHelloTime"), ("TIMETRA-SERV-MIB", "svcTmplTlsStpBridgeMaxAge"), ("TIMETRA-SERV-MIB", "svcTmplTlsStpHoldCount"), ("TIMETRA-SERV-MIB", "svcTmplTlsStpPriority"), ("TIMETRA-SERV-MIB", "svcTmplTlsStpVersion"), ("TIMETRA-SERV-MIB", "svcTmplTlsTempFloodTime"), ("TIMETRA-SERV-MIB", "svcTlsExtMvrpAttrTblHighWM"), ("TIMETRA-SERV-MIB", "svcTlsExtMvrpAttrTblLowWM"), ("TIMETRA-SERV-MIB", "svcTlsExtMvrpHoldTime"), ("TIMETRA-SERV-MIB", "svcTlsExtMvrpMaxAttributes"), ("TIMETRA-SERV-MIB", "svcTlsExtMvrpAdminStatus"), ("TIMETRA-SERV-MIB", "svcTlsExtMvrpOperStatus"), ("TIMETRA-SERV-MIB", "svcTlsGroupOperStatus"), ("TIMETRA-SERV-MIB", "svcTlsGroupLastError"), ("TIMETRA-SERV-MIB", "svcTlsExtMmrpDeclaredAttrCnt"), ("TIMETRA-SERV-MIB", "svcTlsExtMmrpFailedRegCnt"), ("TIMETRA-SERV-MIB", "svcTlsExtMmrpRegAttrCnt"), ("TIMETRA-SERV-MIB", "svcTlsExtMvrpDeclaredAttrCnt"), ("TIMETRA-SERV-MIB", "svcTlsExtMvrpFailedRegCnt"), ("TIMETRA-SERV-MIB", "svcTlsExtMvrpRegAttrCnt"), ("TIMETRA-SERV-MIB", "svcTmplCustId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcMvrpV8v0Group = tmnxSvcMvrpV8v0Group.setStatus('current')
tmnxSvcIpipeV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 156)).setObjects(("TIMETRA-SERV-MIB", "svcIpipeInfoLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcIpipeCeAddressDiscovery"), ("TIMETRA-SERV-MIB", "svcIpipeInfoTableLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcIpipeIpv6CeAddressDiscovery"), ("TIMETRA-SERV-MIB", "svcIpipeStackCapabilitySignaling"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIpipeV8v0Group = tmnxSvcIpipeV8v0Group.setStatus('current')
tmnxSvcInterAsV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 157)).setObjects(("TIMETRA-SERV-MIB", "svcInterASMvpn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcInterAsV8v0Group = tmnxSvcInterAsV8v0Group.setStatus('current')
tmnxSvcPwV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 158)).setObjects(("TIMETRA-SERV-MIB", "svcEndPointStandbySigSlave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcPwV8v0Group = tmnxSvcPwV8v0Group.setStatus('current')
tmnxSvcTlsPipV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 159)).setObjects(("TIMETRA-SERV-MIB", "tlsPipInTcBitBpdus"), ("TIMETRA-SERV-MIB", "tlsPipOutTcBitBpdus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsPipV8v0Group = tmnxSvcTlsPipV8v0Group.setStatus('current')
tmnxSvcIesIfV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 160)).setObjects(("TIMETRA-SERV-MIB", "iesGrpIfPolicyControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIesIfV8v0Group = tmnxSvcIesIfV8v0Group.setStatus('current')
tmnxSvcV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 161)).setObjects(("TIMETRA-SERV-MIB", "svcCreationOrigin"), ("TIMETRA-SERV-MIB", "svcMacFdbRecords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcV9v0Group = tmnxSvcV9v0Group.setStatus('current')
tmnxSvcMSPwPeV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 162)).setObjects(("TIMETRA-SERV-MIB", "svcMSPwPeAdminStatus"), ("TIMETRA-SERV-MIB", "svcMSPwPeLastChange"), ("TIMETRA-SERV-MIB", "svcMSPwPeRowStatus"), ("TIMETRA-SERV-MIB", "svcMSPwPeTblLastChanged"), ("TIMETRA-SERV-MIB", "svcMSPwPeFecType"), ("TIMETRA-SERV-MIB", "svcMSPwPeAiiType"), ("TIMETRA-SERV-MIB", "svcMSPwPeAgi"), ("TIMETRA-SERV-MIB", "svcMSPwPeAutoConfig"), ("TIMETRA-SERV-MIB", "svcMSPwPeEndPoint"), ("TIMETRA-SERV-MIB", "svcMSPwPeStandbySigSlave"), ("TIMETRA-SERV-MIB", "svcMSPwPeIsICB"), ("TIMETRA-SERV-MIB", "svcMSPwPePathName"), ("TIMETRA-SERV-MIB", "svcMSPwPePolicyId"), ("TIMETRA-SERV-MIB", "svcMSPwPePrecedence"), ("TIMETRA-SERV-MIB", "svcMSPwPeRetryCount"), ("TIMETRA-SERV-MIB", "svcMSPwPeRetryTimer"), ("TIMETRA-SERV-MIB", "svcMSPwPeSaiiAcId"), ("TIMETRA-SERV-MIB", "svcMSPwPeSaiiGlobalId"), ("TIMETRA-SERV-MIB", "svcMSPwPeSaiiPrefix"), ("TIMETRA-SERV-MIB", "svcMSPwPeSignaling"), ("TIMETRA-SERV-MIB", "svcMSPwPeTaiiAcId"), ("TIMETRA-SERV-MIB", "svcMSPwPeTaiiGlobalId"), ("TIMETRA-SERV-MIB", "svcMSPwPeTaiiPrefix"), ("TIMETRA-SERV-MIB", "svcPwRtPathAdminStatus"), ("TIMETRA-SERV-MIB", "svcPwRtPathHopAddr"), ("TIMETRA-SERV-MIB", "svcPwRtPathHopAddrType"), ("TIMETRA-SERV-MIB", "svcPwRtPathHopLastChange"), ("TIMETRA-SERV-MIB", "svcPwRtPathHopRowStatus"), ("TIMETRA-SERV-MIB", "svcPwRtPathHopTblLastChgd"), ("TIMETRA-SERV-MIB", "svcPwRtPathLastChange"), ("TIMETRA-SERV-MIB", "svcPwRtPathRowStatus"), ("TIMETRA-SERV-MIB", "svcPwRtPathTblLastChanged"), ("TIMETRA-SERV-MIB", "svcPwRtLclPrefixLastChange"), ("TIMETRA-SERV-MIB", "svcPwRtLclPrefixRowStatus"), ("TIMETRA-SERV-MIB", "svcPwRtLclPrefixTblLastChanged"), ("TIMETRA-SERV-MIB", "svcPwRtStaticRtLastChange"), ("TIMETRA-SERV-MIB", "svcPwRtStaticRtRowStatus"), ("TIMETRA-SERV-MIB", "svcPwRtStaticRtTblLastChgd"), ("TIMETRA-SERV-MIB", "svcPwSpeTaiiOperSdpBind1"), ("TIMETRA-SERV-MIB", "svcPwSpeTaiiOperSdpBind2"), ("TIMETRA-SERV-MIB", "svcPwSpeTaiiSvcId"), ("TIMETRA-SERV-MIB", "svcPwSpeTaiiSaiiAcId"), ("TIMETRA-SERV-MIB", "svcPwSpeTaiiSaiiGlobalId"), ("TIMETRA-SERV-MIB", "svcPwSpeTaiiSaiiPrefix"), ("TIMETRA-SERV-MIB", "svcPwSpeSaiiOperSdpBind1"), ("TIMETRA-SERV-MIB", "svcPwSpeSaiiOperSdpBind2"), ("TIMETRA-SERV-MIB", "svcPwSpeSaiiSvcId"), ("TIMETRA-SERV-MIB", "svcPwSpeSaiiTaiiAcId"), ("TIMETRA-SERV-MIB", "svcPwSpeSaiiTaiiGlobalId"), ("TIMETRA-SERV-MIB", "svcPwSpeSaiiTaiiPrefix"), ("TIMETRA-SERV-MIB", "svcMSPwPeRetryRemain"), ("TIMETRA-SERV-MIB", "svcMSPwPeTimeRemain"), ("TIMETRA-SERV-MIB", "svcMSPwPeOperSdpBind"), ("TIMETRA-SERV-MIB", "svcEndPointTxActiveSdpFec"), ("TIMETRA-SERV-MIB", "svcPwRtSpeAddrGlobalId"), ("TIMETRA-SERV-MIB", "svcPwRtSpeAddrPrefix"), ("TIMETRA-SERV-MIB", "svcEndPointForceSwitchOvrSdpFec"), ("TIMETRA-SERV-MIB", "svcMSPwPeRetryExpired"), ("TIMETRA-SERV-MIB", "svcMSPwPeLastError"), ("TIMETRA-SERV-MIB", "svcPwRtBgpRoutes"), ("TIMETRA-SERV-MIB", "svcPwRtBootTimer"), ("TIMETRA-SERV-MIB", "svcPwRtHostRoutes"), ("TIMETRA-SERV-MIB", "svcPwRtLocalRoutes"), ("TIMETRA-SERV-MIB", "svcPwRtRetryCount"), ("TIMETRA-SERV-MIB", "svcPwRtRetryTimer"), ("TIMETRA-SERV-MIB", "svcPwRtStaticRoutes"), ("TIMETRA-SERV-MIB", "svcPwRtLclPfxRDCommunity"), ("TIMETRA-SERV-MIB", "svcPwRtLclPfxRDLastChange"), ("TIMETRA-SERV-MIB", "svcPwRtLclPfxRDRowStatus"), ("TIMETRA-SERV-MIB", "svcPwRtLclPfxRDTblLastChanged"), ("TIMETRA-SERV-MIB", "svcPwRtBootTimerRemain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcMSPwPeV9v0Group = tmnxSvcMSPwPeV9v0Group.setStatus('current')
tmnxSvcOperGrpV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 163)).setObjects(("TIMETRA-SERV-MIB", "svcTlsSiteIdMonitorOperGrp"), ("TIMETRA-SERV-MIB", "svcOperGrpCreationOrigin"), ("TIMETRA-SERV-MIB", "svcOperGrpHoldUpTime"), ("TIMETRA-SERV-MIB", "svcOperGrpHoldDownTime"), ("TIMETRA-SERV-MIB", "svcOperGrpNumMembers"), ("TIMETRA-SERV-MIB", "svcOperGrpNumMonitoring"), ("TIMETRA-SERV-MIB", "svcOperGrpLastChange"), ("TIMETRA-SERV-MIB", "svcOperGrpOperStatus"), ("TIMETRA-SERV-MIB", "svcOperGrpRowStatus"), ("TIMETRA-SERV-MIB", "svcOperGrpTblLastChanged"), ("TIMETRA-SERV-MIB", "svcOperGrpHoldUpTimeRemain"), ("TIMETRA-SERV-MIB", "svcOperGrpHoldDownTimeRemain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcOperGrpV9v0Group = tmnxSvcOperGrpV9v0Group.setStatus('current')
tmnxSvcDhcpV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 164)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpLeaseAleDatalink"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseAleEncaps1"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseAleEncaps2"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseOvrPIR"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseOvrCIR"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseOvrCBS"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseOvrMBS"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseOvrWrrWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcDhcpV9v0Group = tmnxSvcDhcpV9v0Group.setStatus('current')
tmnxSvcRoutedCOV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 165)).setObjects(("TIMETRA-SERV-MIB", "iesIfParentIf"), ("TIMETRA-SERV-MIB", "iesIfFwdServId"), ("TIMETRA-SERV-MIB", "iesIfFwdSubIf"), ("TIMETRA-SERV-MIB", "iesGrpIfRedInterface"), ("TIMETRA-SERV-MIB", "svcWholesalerNumStaticHosts"), ("TIMETRA-SERV-MIB", "svcWholesalerNumDynamicHosts"), ("TIMETRA-SERV-MIB", "iesIfPrivateRetailSubnets"), ("TIMETRA-SERV-MIB", "svcWholesalerNumDhcpLeaseStates"), ("TIMETRA-SERV-MIB", "svcWholesalerNumPppoeSessions"), ("TIMETRA-SERV-MIB", "svcWholesalerNumArpHosts"), ("TIMETRA-SERV-MIB", "iesIfDelegatedPrefixLen"), ("TIMETRA-SERV-MIB", "iesIfLns"), ("TIMETRA-SERV-MIB", "iesIfDefaultPrimaryDnsIPv4Addr"), ("TIMETRA-SERV-MIB", "iesIfDefaultSecondaryDnsIPv4Addr"), ("TIMETRA-SERV-MIB", "iesIfDefaultPrimaryDnsIPv6Addr"), ("TIMETRA-SERV-MIB", "iesIfDefaultSecondaryDnsIPv6Addr"), ("TIMETRA-SERV-MIB", "iesIfIPv6ConfigAllowed"), ("TIMETRA-SERV-MIB", "iesIfSrrpRoutingEnabled"), ("TIMETRA-SERV-MIB", "iesIfSrrpRoutingHoldTime"), ("TIMETRA-SERV-MIB", "iesIfAllowUnmatchingSubnets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRoutedCOV9v0Group = tmnxSvcRoutedCOV9v0Group.setStatus('current')
tmnxSvcV9v0R4Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 166)).setObjects(("TIMETRA-SERV-MIB", "iesIfMonitorOperGrp"), ("TIMETRA-SERV-MIB", "svcTlsExtMmrpEndStationOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcV9v0R4Group = tmnxSvcV9v0R4Group.setStatus('current')
tmnxSvcMacReNotifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 167)).setObjects(("TIMETRA-SERV-MIB", "svcTlsExtMacReNotifInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcMacReNotifyGroup = tmnxSvcMacReNotifyGroup.setStatus('current')
tmnxSvcDhcpV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 170)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpLeaseWppState"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseWppPortalRouter"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseWppPortalName"), ("TIMETRA-SERV-MIB", "svcDhcpLeasePoolName"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseServerId"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseInterfaceId"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseRemoteId"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseOption60"), ("TIMETRA-SERV-MIB", "svcDhcpLeaseRadCalledStationId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcDhcpV10v0Group = tmnxSvcDhcpV10v0Group.setStatus('current')
tmnxSvcRoutedCOV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 171)).setObjects(("TIMETRA-SERV-MIB", "iesIfGroupInterfaceType"), ("TIMETRA-SERV-MIB", "svcIfSapCfgTableLastChanged"), ("TIMETRA-SERV-MIB", "svcIfSapCfgLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcIfSapCfgDescription"), ("TIMETRA-SERV-MIB", "svcIfSapCfgDefSubProfile"), ("TIMETRA-SERV-MIB", "svcIfSapCfgDefSlaProfile"), ("TIMETRA-SERV-MIB", "svcIfSapCfgDefAppProfile"), ("TIMETRA-SERV-MIB", "svcIfSapCfgSubIdentPolicy"), ("TIMETRA-SERV-MIB", "svcIfSapCfgDefSubIdent"), ("TIMETRA-SERV-MIB", "svcIfSapCfgDefSubIdentString"), ("TIMETRA-SERV-MIB", "svcIfSapCfgDefFilterProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRoutedCOV10v0Group = tmnxSvcRoutedCOV10v0Group.setStatus('current')
tmnxSvcV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 172)).setObjects(("TIMETRA-SERV-MIB", "svcEndPointRestProtSrcMac"), ("TIMETRA-SERV-MIB", "svcEndPointRestProtSrcMacAction"), ("TIMETRA-SERV-MIB", "svcEndPointAutoLearnMacProtect"), ("TIMETRA-SERV-MIB", "tlsShgAutoLearnMacProtect"), ("TIMETRA-SERV-MIB", "custMssIngQosArbitStatsFwdPkts"), ("TIMETRA-SERV-MIB", "custMssIngQosArbitStatsFwdPktsLo"), ("TIMETRA-SERV-MIB", "custMssIngQosArbitStatsFwdPktsHi"), ("TIMETRA-SERV-MIB", "custMssIngQosArbitStatsFwdOcts"), ("TIMETRA-SERV-MIB", "custMssIngQosArbitStatsFwdOctsLo"), ("TIMETRA-SERV-MIB", "custMssIngQosArbitStatsFwdOctsHi"), ("TIMETRA-SERV-MIB", "custMssEgrQosArbitStatsFwdPkts"), ("TIMETRA-SERV-MIB", "custMssEgrQosArbitStatsFwdPktsLo"), ("TIMETRA-SERV-MIB", "custMssEgrQosArbitStatsFwdPktsHi"), ("TIMETRA-SERV-MIB", "custMssEgrQosArbitStatsFwdOcts"), ("TIMETRA-SERV-MIB", "custMssEgrQosArbitStatsFwdOctsLo"), ("TIMETRA-SERV-MIB", "custMssEgrQosArbitStatsFwdOctsHi"), ("TIMETRA-SERV-MIB", "custIngQosPortIdArbitFwdPkts"), ("TIMETRA-SERV-MIB", "custIngQosPortIdArbitFwdPktsLo"), ("TIMETRA-SERV-MIB", "custIngQosPortIdArbitFwdPktsHi"), ("TIMETRA-SERV-MIB", "custIngQosPortIdArbitFwdOcts"), ("TIMETRA-SERV-MIB", "custIngQosPortIdArbitFwdOctsLo"), ("TIMETRA-SERV-MIB", "custIngQosPortIdArbitFwdOctsHi"), ("TIMETRA-SERV-MIB", "custEgrQosPortIdArbitFwdPkts"), ("TIMETRA-SERV-MIB", "custEgrQosPortIdArbitFwdPktsLo"), ("TIMETRA-SERV-MIB", "custEgrQosPortIdArbitFwdPktsHi"), ("TIMETRA-SERV-MIB", "custEgrQosPortIdArbitFwdOcts"), ("TIMETRA-SERV-MIB", "custEgrQosPortIdArbitFwdOctsLo"), ("TIMETRA-SERV-MIB", "custEgrQosPortIdArbitFwdOctsHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcV10v0Group = tmnxSvcV10v0Group.setStatus('current')
tmnxSvcIesIfV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 173)).setObjects(("TIMETRA-SERV-MIB", "iesIfShcvFamily"), ("TIMETRA-SERV-MIB", "iesIfIPv6IpoeBridgedModeEnabled"), ("TIMETRA-SERV-MIB", "iesIfIPv6AllowUnmatchingPfxs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIesIfV10v0Group = tmnxSvcIesIfV10v0Group.setStatus('current')
tmnxArpHostV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 174)).setObjects(("TIMETRA-SERV-MIB", "svcArpHostTableLastChanged"), ("TIMETRA-SERV-MIB", "svcArpHostLocale"), ("TIMETRA-SERV-MIB", "svcArpHostSapPortId"), ("TIMETRA-SERV-MIB", "svcArpHostSapEncapValue"), ("TIMETRA-SERV-MIB", "svcArpHostSdpId"), ("TIMETRA-SERV-MIB", "svcArpHostVcId"), ("TIMETRA-SERV-MIB", "svcArpHostSessionTimeout"), ("TIMETRA-SERV-MIB", "svcArpHostStart"), ("TIMETRA-SERV-MIB", "svcArpHostLastAuth"), ("TIMETRA-SERV-MIB", "svcArpHostRefresh"), ("TIMETRA-SERV-MIB", "svcArpHostRemainingTime"), ("TIMETRA-SERV-MIB", "svcArpHostShcvOperState"), ("TIMETRA-SERV-MIB", "svcArpHostShcvChecks"), ("TIMETRA-SERV-MIB", "svcArpHostShcvReplies"), ("TIMETRA-SERV-MIB", "svcArpHostShcvReplyTime"), ("TIMETRA-SERV-MIB", "svcArpHostSubscrIdent"), ("TIMETRA-SERV-MIB", "svcArpHostSubProfString"), ("TIMETRA-SERV-MIB", "svcArpHostSlaProfString"), ("TIMETRA-SERV-MIB", "svcArpHostAppProfString"), ("TIMETRA-SERV-MIB", "svcArpHostAncpString"), ("TIMETRA-SERV-MIB", "svcArpHostInterDestId"), ("TIMETRA-SERV-MIB", "svcArpHostRetailerSvcId"), ("TIMETRA-SERV-MIB", "svcArpHostRetailerIf"), ("TIMETRA-SERV-MIB", "svcArpHostMacAddr"), ("TIMETRA-SERV-MIB", "svcArpHostPersistKey"), ("TIMETRA-SERV-MIB", "svcArpHostCategoryMapName"), ("TIMETRA-SERV-MIB", "svcArpHostRadiusClassAttr"), ("TIMETRA-SERV-MIB", "svcArpHostRadiusUserName"), ("TIMETRA-SERV-MIB", "svcArpHostOriginSubscrId"), ("TIMETRA-SERV-MIB", "svcArpHostOriginStrings"), ("TIMETRA-SERV-MIB", "svcArpHostIfTableLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcArpHostIfLastMgmtChange"), ("TIMETRA-SERV-MIB", "svcArpHostIfAdminState"), ("TIMETRA-SERV-MIB", "svcArpHostIfMaxNumHosts"), ("TIMETRA-SERV-MIB", "svcArpHostIfMaxNumHostsSap"), ("TIMETRA-SERV-MIB", "svcArpHostIfMinAuthInterval"), ("TIMETRA-SERV-MIB", "svcArpHostIfNumHosts"), ("TIMETRA-SERV-MIB", "svcArpHostDefaultSessionTimeout"), ("TIMETRA-SERV-MIB", "svcArpHostMRtStatus"), ("TIMETRA-SERV-MIB", "svcArpHostOvrPIR"), ("TIMETRA-SERV-MIB", "svcArpHostOvrCIR"), ("TIMETRA-SERV-MIB", "svcArpHostOvrCBS"), ("TIMETRA-SERV-MIB", "svcArpHostOvrMBS"), ("TIMETRA-SERV-MIB", "svcArpHostOvrWrrWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxArpHostV10v0Group = tmnxArpHostV10v0Group.setStatus('current')
tmnxSvcIesIfNHV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 176)).setObjects(("TIMETRA-SERV-MIB", "iesIfIsaTnlNHTableLastChanged"), ("TIMETRA-SERV-MIB", "iesIfIsaTnlNHLastChanged"), ("TIMETRA-SERV-MIB", "iesIfIsaTnlNHStaticAddrType"), ("TIMETRA-SERV-MIB", "iesIfIsaTnlNHStaticAddr"), ("TIMETRA-SERV-MIB", "iesIfIsaTnlNHDynAddrType"), ("TIMETRA-SERV-MIB", "iesIfIsaTnlNHDynAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIesIfNHV10v0Group = tmnxSvcIesIfNHV10v0Group.setStatus('current')
tmnxSvcNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 200)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateCiAddr"), ("TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateProblem"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOldCiAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOldChAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("TIMETRA-SERV-MIB", "svcDhcpClientLease"), ("TIMETRA-SERV-MIB", "svcDhcpPacketProblem"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePopulateError"), ("TIMETRA-SERV-MIB", "hostConnectivityCiAddrType"), ("TIMETRA-SERV-MIB", "hostConnectivityCiAddr"), ("TIMETRA-SERV-MIB", "hostConnectivityChAddr"), ("TIMETRA-SERV-MIB", "protectedMacForNotify"), ("TIMETRA-SERV-MIB", "staticHostDynamicMacIpAddress"), ("TIMETRA-SERV-MIB", "staticHostDynamicMacConflict"), ("TIMETRA-SERV-MIB", "tmnxSvcObjRow"), ("TIMETRA-SERV-MIB", "tmnxSvcObjRowDescr"), ("TIMETRA-SERV-MIB", "tmnxSvcObjTodSuite"), ("TIMETRA-SERV-MIB", "tmnxFailureDescription"), ("TIMETRA-SERV-MIB", "svcDhcpProxyError"), ("TIMETRA-SERV-MIB", "svcDhcpCoAError"), ("TIMETRA-SERV-MIB", "svcDhcpSubAuthError"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrRegFailedReason"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrType"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrValue"), ("TIMETRA-SERV-MIB", "svcMstiInstanceId"), ("TIMETRA-SERV-MIB", "tmnxCustomerBridgeId"), ("TIMETRA-SERV-MIB", "tmnxCustomerRootBridgeId"), ("TIMETRA-SERV-MIB", "tmnxOtherBridgeId"), ("TIMETRA-SERV-MIB", "tmnxOldSdpBindTlsStpPortState"), ("TIMETRA-SERV-MIB", "tmnxVcpState"), ("TIMETRA-SERV-MIB", "macPinningMacAddress"), ("TIMETRA-SERV-MIB", "macPinningPinnedRow"), ("TIMETRA-SERV-MIB", "macPinningPinnedRowDescr"), ("TIMETRA-SERV-MIB", "macPinningViolatingRow"), ("TIMETRA-SERV-MIB", "macPinningViolatingRowDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyObjsV6v0Group = tmnxSvcNotifyObjsV6v0Group.setStatus('obsolete')
tmnxArpHostNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 201)).setObjects(("TIMETRA-SERV-MIB", "svcNotifSapPortId"), ("TIMETRA-SERV-MIB", "svcNotifSapEncapValue"), ("TIMETRA-SERV-MIB", "svcArpHostPopulateError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxArpHostNotifyObjsGroup = tmnxArpHostNotifyObjsGroup.setStatus('current')
tmnxSvcNotifyObjsV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 202)).setObjects(("TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateCiAddr"), ("TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateProblem"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOldCiAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOldChAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("TIMETRA-SERV-MIB", "svcDhcpClientLease"), ("TIMETRA-SERV-MIB", "svcDhcpPacketProblem"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePopulateError"), ("TIMETRA-SERV-MIB", "hostConnectivityCiAddrType"), ("TIMETRA-SERV-MIB", "hostConnectivityCiAddr"), ("TIMETRA-SERV-MIB", "hostConnectivityChAddr"), ("TIMETRA-SERV-MIB", "protectedMacForNotify"), ("TIMETRA-SERV-MIB", "staticHostDynamicMacIpAddress"), ("TIMETRA-SERV-MIB", "staticHostDynamicMacConflict"), ("TIMETRA-SERV-MIB", "tmnxSvcObjRow"), ("TIMETRA-SERV-MIB", "tmnxSvcObjRowDescr"), ("TIMETRA-SERV-MIB", "tmnxSvcObjTodSuite"), ("TIMETRA-SERV-MIB", "tmnxFailureDescription"), ("TIMETRA-SERV-MIB", "svcDhcpProxyError"), ("TIMETRA-SERV-MIB", "svcDhcpCoAError"), ("TIMETRA-SERV-MIB", "svcDhcpSubAuthError"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrRegFailedReason"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrType"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrValue"), ("TIMETRA-SERV-MIB", "svcMstiInstanceId"), ("TIMETRA-SERV-MIB", "tmnxCustomerBridgeId"), ("TIMETRA-SERV-MIB", "tmnxCustomerRootBridgeId"), ("TIMETRA-SERV-MIB", "tmnxOtherBridgeId"), ("TIMETRA-SERV-MIB", "tmnxOldSdpBindTlsStpPortState"), ("TIMETRA-SERV-MIB", "tmnxVcpState"), ("TIMETRA-SERV-MIB", "macPinningMacAddress"), ("TIMETRA-SERV-MIB", "macPinningPinnedRow"), ("TIMETRA-SERV-MIB", "macPinningPinnedRowDescr"), ("TIMETRA-SERV-MIB", "macPinningViolatingRow"), ("TIMETRA-SERV-MIB", "macPinningViolatingRowDescr"), ("TIMETRA-SERV-MIB", "svcHostAddrType"), ("TIMETRA-SERV-MIB", "svcHostAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyObjsV7v0Group = tmnxSvcNotifyObjsV7v0Group.setStatus('current')
tmnxSvcObsoletedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 300)).setObjects(("TIMETRA-SERV-MIB", "svcTlsStpHoldTime"), ("TIMETRA-SERV-MIB", "tlsMFibInfoFwdOrBlk"), ("TIMETRA-SERV-MIB", "tlsMFibInfoSvcId"), ("TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsForwardedPkts"), ("TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsForwardedOctets"), ("TIMETRA-SERV-MIB", "tlsDHCPClientLease"), ("TIMETRA-SERV-MIB", "tlsDhcpLseStateOldCiAddr"), ("TIMETRA-SERV-MIB", "tlsDhcpLseStateOldChAddr"), ("TIMETRA-SERV-MIB", "tlsDhcpLseStateNewCiAddr"), ("TIMETRA-SERV-MIB", "tlsDhcpLseStateNewChAddr"), ("TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateCiAddr"), ("TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateSvcId"), ("TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStatePortId"), ("TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateEncapVal"), ("TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateProblem"), ("TIMETRA-SERV-MIB", "tlsDhcpPacketProblem"), ("TIMETRA-SERV-MIB", "tlsDhcpLseStatePopulateError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcObsoletedV6v0Group = tmnxSvcObsoletedV6v0Group.setStatus('current')
tmnxSvcObsoletedV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 301)).setObjects(("TIMETRA-SERV-MIB", "svcTlsBgpADVsiRD"), ("TIMETRA-SERV-MIB", "svcTlsBgpADExportRteTarget"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy1"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy2"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy3"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy4"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy5"), ("TIMETRA-SERV-MIB", "svcTlsBgpADImportRteTarget"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy1"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy2"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy3"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy4"), ("TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy5"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateLocale"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePortId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateEncapValue"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSdpId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateVcId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateChAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRemainLseTime"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOption82"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePersistKey"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSubscrIdent"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSubProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSlaProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvOperState"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvChecks"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvReplies"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateShcvReplyTime"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateClientId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateIAID"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateIAIDType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrMaskLen"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRetailerSvcId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRetailerIf"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateAncpString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateFramedIpNetMaskTp"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateFramedIpNetMask"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBCastIpAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBCastIpAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDefaultRouterTp"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDefaultRouter"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryDnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryDns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryDnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryDns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSessionTimeout"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateServerLeaseStart"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateServerLastRenew"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateServerLeaseEnd"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpServerAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpServerAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOriginSubscrId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOriginStrings"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateOriginLeaseInfo"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpClientAddrType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpClientAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateLeaseSplitActive"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateInterDestId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryNbnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryNbns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryNbnsType"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryNbns"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateNextHopMacAddr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateCategoryMapName"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateNakNextRenew"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRadiusClassAttr"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateRadiusUserName"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifySubIndent"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifySubProfile"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifySlaProfile"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateEvaluateState"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModInterDestId"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifyAncpString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateForceRenew"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateAppProfString"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateModifyAppProfile"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpPrngPlcyName"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpAuthKeyChain"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpMD5AuthKey"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpImportPolicy"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpExportPolicy"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpPeerAS"), ("TIMETRA-SERV-MIB", "svcDhcpLseStateBgpPeeringStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcObsoletedV8v0Group = tmnxSvcObsoletedV8v0Group.setStatus('current')
tmnxSvcObsoletedV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 302)).setObjects(("TIMETRA-SERV-MIB", "iesIfVpnId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcObsoletedV9v0Group = tmnxSvcObsoletedV9v0Group.setStatus('current')
tmnxSvcNotifyV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 401)).setObjects(("TIMETRA-SERV-MIB", "svcStatusChanged"), ("TIMETRA-SERV-MIB", "svcTlsFdbTableFullAlarmRaised"), ("TIMETRA-SERV-MIB", "svcTlsFdbTableFullAlarmCleared"), ("TIMETRA-SERV-MIB", "iesIfStatusChanged"), ("TIMETRA-SERV-MIB", "svcTlsMfibTableFullAlarmRaised"), ("TIMETRA-SERV-MIB", "svcTlsMfibTableFullAlarmCleared"), ("TIMETRA-SERV-MIB", "svcTlsMacPinningViolation"), ("TIMETRA-SERV-MIB", "svcDHCPLseStateRestoreProblem"), ("TIMETRA-SERV-MIB", "tmnxSvcObjTodSuiteApplicFailed"), ("TIMETRA-SERV-MIB", "tmnxEndPointTxActiveChanged"), ("TIMETRA-SERV-MIB", "tmnxSvcPEDiscPolServOperStatChg"), ("TIMETRA-SERV-MIB", "svcEndPointMacLimitAlarmRaised"), ("TIMETRA-SERV-MIB", "svcEndPointMacLimitAlarmCleared"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrRegistrationFailed"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrTblFullAlarmRaised"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrTblFullAlarmCleared"), ("TIMETRA-SERV-MIB", "svcEpipePbbOperStatusChanged"), ("TIMETRA-SERV-MIB", "topologyChangeVcpState"), ("TIMETRA-SERV-MIB", "newRootVcpState"), ("TIMETRA-SERV-MIB", "newRootBridge"), ("TIMETRA-SERV-MIB", "vcpActiveProtocolChange"), ("TIMETRA-SERV-MIB", "tmnxNewCistRegionalRootBridge"), ("TIMETRA-SERV-MIB", "tmnxNewMstiRegionalRootBridge"), ("TIMETRA-SERV-MIB", "topologyChangePipMajorState"), ("TIMETRA-SERV-MIB", "topologyChangePipState"), ("TIMETRA-SERV-MIB", "tmnxPipStpExcepCondStateChng"), ("TIMETRA-SERV-MIB", "pipActiveProtocolChange"), ("TIMETRA-SERV-MIB", "svcFdbMimDestTblFullAlrm"), ("TIMETRA-SERV-MIB", "svcFdbMimDestTblFullAlrmCleared"), ("TIMETRA-SERV-MIB", "svcDHCPMiscellaneousProblem"), ("TIMETRA-SERV-MIB", "svcPersistencyProblem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyV6v0Group = tmnxSvcNotifyV6v0Group.setStatus('obsolete')
tmnxSvcNotifyObsoletedGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 402)).setObjects(("TIMETRA-SERV-MIB", "custCreated"), ("TIMETRA-SERV-MIB", "custDeleted"), ("TIMETRA-SERV-MIB", "custMultSvcSiteCreated"), ("TIMETRA-SERV-MIB", "custMultSvcSiteDeleted"), ("TIMETRA-SERV-MIB", "svcCreated"), ("TIMETRA-SERV-MIB", "svcDeleted"), ("TIMETRA-SERV-MIB", "iesIfCreated"), ("TIMETRA-SERV-MIB", "iesIfDeleted"), ("TIMETRA-SERV-MIB", "svcTlsDHCPLseStRestoreProblem"), ("TIMETRA-SERV-MIB", "svcTlsDHCPLseStatePopulateErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyObsoletedGroup = tmnxSvcNotifyObsoletedGroup.setStatus('current')
tmnxArpHostNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 403)).setObjects(("TIMETRA-SERV-MIB", "svcArpHostPopulateErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxArpHostNotifyGroup = tmnxArpHostNotifyGroup.setStatus('current')
tmnxSvcMCEPNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 404)).setObjects(("TIMETRA-SERV-MIB", "svcEPMCEPConfigMismatch"), ("TIMETRA-SERV-MIB", "svcEPMCEPConfigMismatchResolved"), ("TIMETRA-SERV-MIB", "svcEPMCEPPassiveModeActive"), ("TIMETRA-SERV-MIB", "svcEPMCEPPassiveModePassive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcMCEPNotifyGroup = tmnxSvcMCEPNotifyGroup.setStatus('current')
tmnxSvcNotifyV7v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 405)).setObjects(("TIMETRA-SERV-MIB", "svcStatusChanged"), ("TIMETRA-SERV-MIB", "svcTlsFdbTableFullAlarmRaised"), ("TIMETRA-SERV-MIB", "svcTlsFdbTableFullAlarmCleared"), ("TIMETRA-SERV-MIB", "iesIfStatusChanged"), ("TIMETRA-SERV-MIB", "svcTlsMfibTableFullAlarmRaised"), ("TIMETRA-SERV-MIB", "svcTlsMfibTableFullAlarmCleared"), ("TIMETRA-SERV-MIB", "svcTlsMacPinningViolation"), ("TIMETRA-SERV-MIB", "svcDHCPLseStateRestoreProblem"), ("TIMETRA-SERV-MIB", "tmnxSvcObjTodSuiteApplicFailed"), ("TIMETRA-SERV-MIB", "tmnxEndPointTxActiveChanged"), ("TIMETRA-SERV-MIB", "tmnxSvcPEDiscPolServOperStatChg"), ("TIMETRA-SERV-MIB", "svcEndPointMacLimitAlarmRaised"), ("TIMETRA-SERV-MIB", "svcEndPointMacLimitAlarmCleared"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrRegistrationFailed"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrTblFullAlarmRaised"), ("TIMETRA-SERV-MIB", "svcTlsMrpAttrTblFullAlarmCleared"), ("TIMETRA-SERV-MIB", "svcEpipePbbOperStatusChanged"), ("TIMETRA-SERV-MIB", "topologyChangeVcpState"), ("TIMETRA-SERV-MIB", "newRootVcpState"), ("TIMETRA-SERV-MIB", "newRootBridge"), ("TIMETRA-SERV-MIB", "vcpActiveProtocolChange"), ("TIMETRA-SERV-MIB", "tmnxNewCistRegionalRootBridge"), ("TIMETRA-SERV-MIB", "tmnxNewMstiRegionalRootBridge"), ("TIMETRA-SERV-MIB", "topologyChangePipMajorState"), ("TIMETRA-SERV-MIB", "topologyChangePipState"), ("TIMETRA-SERV-MIB", "tmnxPipStpExcepCondStateChng"), ("TIMETRA-SERV-MIB", "pipActiveProtocolChange"), ("TIMETRA-SERV-MIB", "svcFdbMimDestTblFullAlrm"), ("TIMETRA-SERV-MIB", "svcFdbMimDestTblFullAlrmCleared"), ("TIMETRA-SERV-MIB", "svcDHCPMiscellaneousProblem"), ("TIMETRA-SERV-MIB", "svcPersistencyProblem"), ("TIMETRA-SERV-MIB", "svcRestoreHostProblem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyV7v0Group = tmnxSvcNotifyV7v0Group.setStatus('current')
tmnxSvcNotifyV8v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 406)).setObjects(("TIMETRA-SERV-MIB", "svcTlsSiteDesigFwdrChg"), ("TIMETRA-SERV-MIB", "svcTlsGroupOperStatusChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyV8v0Group = tmnxSvcNotifyV8v0Group.setStatus('current')
tmnxSvcEthCfmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 407)).setObjects(("TIMETRA-SERV-MIB", "svcEthCfmTblLastChanged"), ("TIMETRA-SERV-MIB", "svcEthCfmTunnelFaultNotification"), ("TIMETRA-SERV-MIB", "svcEthCfmVMepExtensions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcEthCfmGroup = tmnxSvcEthCfmGroup.setStatus('current')
tmnxSvcNotifyV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 408)).setObjects(("TIMETRA-SERV-MIB", "svcMSPwRtMisconfig"), ("TIMETRA-SERV-MIB", "svcMSPwRetryExpiredNotif"), ("TIMETRA-SERV-MIB", "svcMacFdbTblFullAlarm"), ("TIMETRA-SERV-MIB", "svcMacFdbTblFullAlarmCleared"), ("TIMETRA-SERV-MIB", "svcOperGrpOperStatusChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyV9v0Group = tmnxSvcNotifyV9v0Group.setStatus('current')
tmnxSvcApipeInfoV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 409)).setObjects(("TIMETRA-SERV-MIB", "svcApipeSignaledVllTypeOverride"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcApipeInfoV9v0Group = tmnxSvcApipeInfoV9v0Group.setStatus('current')
tmnxSvcSpbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 410)).setObjects(("TIMETRA-SERV-MIB", "svcSpbIfEncapValue"), ("TIMETRA-SERV-MIB", "svcSpbIfLocale"), ("TIMETRA-SERV-MIB", "svcSpbIfPortId"), ("TIMETRA-SERV-MIB", "svcSpbIfSdpId"), ("TIMETRA-SERV-MIB", "svcSpbIfVcId"), ("TIMETRA-SERV-MIB", "svcSpbIfSvcId"), ("TIMETRA-SERV-MIB", "svcSpbIfIsisInstance"), ("TIMETRA-SERV-MIB", "tlsSpbFdbMEncapValue"), ("TIMETRA-SERV-MIB", "tlsSpbFdbMLocale"), ("TIMETRA-SERV-MIB", "tlsSpbFdbMPortId"), ("TIMETRA-SERV-MIB", "tlsSpbFdbMSdpId"), ("TIMETRA-SERV-MIB", "tlsSpbFdbMState"), ("TIMETRA-SERV-MIB", "tlsSpbFdbMVcId"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbMEncapValue"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbMLocale"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbMPortId"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbMSdpId"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbMVcId"), ("TIMETRA-SERV-MIB", "tlsSpbFidMFibIsid"), ("TIMETRA-SERV-MIB", "tlsSpbMFibState"), ("TIMETRA-SERV-MIB", "tlsSpbMFibIsid"), ("TIMETRA-SERV-MIB", "tlsSpbFdbEncapValue"), ("TIMETRA-SERV-MIB", "tlsSpbFdbLocale"), ("TIMETRA-SERV-MIB", "tlsSpbFdbPortId"), ("TIMETRA-SERV-MIB", "tlsSpbFdbSdpId"), ("TIMETRA-SERV-MIB", "tlsSpbFdbState"), ("TIMETRA-SERV-MIB", "tlsSpbFdbVcId"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbEncapValue"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbLocale"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbPortId"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbSdpId"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbVcId"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbLastUpdate"), ("TIMETRA-SERV-MIB", "tlsSpbFidFdbMLastUpdate"), ("TIMETRA-SERV-MIB", "tlsSpbFidMFibLastUpdate"), ("TIMETRA-SERV-MIB", "svcTlsSpbUserSvcLastUpdate"), ("TIMETRA-SERV-MIB", "svcTlsExtSpbmCtrlVpls"), ("TIMETRA-SERV-MIB", "svcTlsExtSpbmFid"), ("TIMETRA-SERV-MIB", "svcTlsSpbFid"), ("TIMETRA-SERV-MIB", "svcTlsSpbIsisInstance"), ("TIMETRA-SERV-MIB", "svcTlsSpbLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsSpbRowStatus"), ("TIMETRA-SERV-MIB", "svcTlsSpbTableLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsSpbL1BridgePriority"), ("TIMETRA-SERV-MIB", "svcTlsSpbL1FwdTreeTopoUcast"), ("TIMETRA-SERV-MIB", "svcTlsSpbL1FwdTreeTopoMcast"), ("TIMETRA-SERV-MIB", "svcTlsSpbL1BridgeId"), ("TIMETRA-SERV-MIB", "svcTlsSpbL1McastDesigBridgeId"), ("TIMETRA-SERV-MIB", "svcTlsSpbAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcSpbGroup = tmnxSvcSpbGroup.setStatus('current')
tmnxSvcVllBgpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 411)).setObjects(("TIMETRA-SERV-MIB", "svcVllBgpExportRteTarget"), ("TIMETRA-SERV-MIB", "svcVllBgpImportRteTarget"), ("TIMETRA-SERV-MIB", "svcVllBgpLastChanged"), ("TIMETRA-SERV-MIB", "svcVllBgpTableLastChanged"), ("TIMETRA-SERV-MIB", "svcVllBgpVsiRD"), ("TIMETRA-SERV-MIB", "svcVllSiteIdAdminStatus"), ("TIMETRA-SERV-MIB", "svcVllSiteIdBootTimer"), ("TIMETRA-SERV-MIB", "svcVllSiteIdDesignatedFwdr"), ("TIMETRA-SERV-MIB", "svcVllSiteIdDfChgCnt"), ("TIMETRA-SERV-MIB", "svcVllSiteIdDfUpTime"), ("TIMETRA-SERV-MIB", "svcVllSiteIdEncapValue"), ("TIMETRA-SERV-MIB", "svcVllSiteIdLastChanged"), ("TIMETRA-SERV-MIB", "svcVllSiteIdOperStatus"), ("TIMETRA-SERV-MIB", "svcVllSiteIdPortId"), ("TIMETRA-SERV-MIB", "svcVllSiteIdRowStatus"), ("TIMETRA-SERV-MIB", "svcVllSiteIdSiteActTimer"), ("TIMETRA-SERV-MIB", "svcVllSiteIdSiteId"), ("TIMETRA-SERV-MIB", "svcVllSiteIdTblLastChanged"), ("TIMETRA-SERV-MIB", "svcVllSiteIdTimerRemain"), ("TIMETRA-SERV-MIB", "svcVllBgpRowStatus"), ("TIMETRA-SERV-MIB", "svcTlsBgpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcVllBgpGroup = tmnxSvcVllBgpGroup.setStatus('current')
tmnxSvcP2mpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 412)).setObjects(("TIMETRA-SERV-MIB", "svcTlsIPmsiAdminState"), ("TIMETRA-SERV-MIB", "svcTlsIPmsiDataDelayIntvl"), ("TIMETRA-SERV-MIB", "svcTlsIPmsiRemainDataDelayIntvl"), ("TIMETRA-SERV-MIB", "svcTlsIPmsiType"), ("TIMETRA-SERV-MIB", "svcTlsIPmsiRootAndLeaf"), ("TIMETRA-SERV-MIB", "svcTlsIPmsiLspTmpl"), ("TIMETRA-SERV-MIB", "svcTlsIPmsiLspName"), ("TIMETRA-SERV-MIB", "svcTlsPmsiLastChanged"), ("TIMETRA-SERV-MIB", "svcTlsPmsiRowStatus"), ("TIMETRA-SERV-MIB", "svcTlsPmsiTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcP2mpGroup = tmnxSvcP2mpGroup.setStatus('current')
tmnxSvcNotifyV10v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 413)).setObjects(("TIMETRA-SERV-MIB", "svcVllSiteDesigFwdrChg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyV10v0Group = tmnxSvcNotifyV10v0Group.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-SERV-MIB", svcTlsGroupMvrpControl=svcTlsGroupMvrpControl, tmnxSvcEndPointV6v0Group=tmnxSvcEndPointV6v0Group, svcL2MhRteRouteDistinguisher=svcL2MhRteRouteDistinguisher, svcTlsStpCistRemainingHopCount=svcTlsStpCistRemainingHopCount, custEgrQosPortIdArbitFwdPktsHi=custEgrQosPortIdArbitFwdPktsHi, tmnxArpHostGroup=tmnxArpHostGroup, iesIfDelegatedPrefixLen=iesIfDelegatedPrefixLen, tlsMFibStatsGrpMacAddr=tlsMFibStatsGrpMacAddr, tlsSpbFidMFibPortId=tlsSpbFidMFibPortId, svcDhcpRestoreLseStateCiAddr=svcDhcpRestoreLseStateCiAddr, tmnxSvcNotifyV8v0Group=tmnxSvcNotifyV8v0Group, svcTlsEndPointV7v0Group=svcTlsEndPointV7v0Group, svcMSPwPeIsICB=svcMSPwPeIsICB, custIngQosPortIdArbitFwdOctsHi=custIngQosPortIdArbitFwdOctsHi, svcDhcpLseStateModifySubIndent=svcDhcpLseStateModifySubIndent, svcMrpPolicyTable=svcMrpPolicyTable, svcMSPwPeOperSdpBind=svcMSPwPeOperSdpBind, tlsMstiPriority=tlsMstiPriority, svcTlsFdbNumHostEntries=svcTlsFdbNumHostEntries, tmnxSvcEthCfmGroup=tmnxSvcEthCfmGroup, svcPwRtLclPrefixLastChange=svcPwRtLclPrefixLastChange, svcPwRtPathHopLastChange=svcPwRtPathHopLastChange, svcDhcpLseStateDhcpServerAddrType=svcDhcpLseStateDhcpServerAddrType, custMultSvcSiteEgressSchedulerPolicy=custMultSvcSiteEgressSchedulerPolicy, custMssEgrQosSchedInfoTable=custMssEgrQosSchedInfoTable, svcEpMcEpStatsPktsRxConfig=svcEpMcEpStatsPktsRxConfig, tlsMFibInfoEncapValue=tlsMFibInfoEncapValue, svcDhcpLseStateShcvChecks=svcDhcpLseStateShcvChecks, svcDhcpLeaseRemoteId=svcDhcpLeaseRemoteId, svcTlsSiteIdEntry=svcTlsSiteIdEntry, tmnxSvc7750V7v0Compliance=tmnxSvc7750V7v0Compliance, svcPwRtSpeAddrGlobalId=svcPwRtSpeAddrGlobalId, iesIfPrivateRetailSubnets=iesIfPrivateRetailSubnets, svcDhcpLeaseStateBgpTable=svcDhcpLeaseStateBgpTable, svcDhcpLseStatePopulateError=svcDhcpLseStatePopulateError, svcTmplTlsFdbTableFullHighWMark=svcTmplTlsFdbTableFullHighWMark, tlsMFibGrpSrcStatsForwardedOctets=tlsMFibGrpSrcStatsForwardedOctets, TmnxSiteId=TmnxSiteId, svcEpMcEpStatsEntry=svcEpMcEpStatsEntry, svcDhcpLeasePrimaryDnsType=svcDhcpLeasePrimaryDnsType, svcDhcpLseStateRadiusClassAttr=svcDhcpLseStateRadiusClassAttr, svcIgmpTrkAdminState=svcIgmpTrkAdminState, svcPwRtStaticRtDstGlobalId=svcPwRtStaticRtDstGlobalId, svcIfSapCfgTable=svcIfSapCfgTable, svcWholesalerInfoTable=svcWholesalerInfoTable, svcDhcpLseStateModifySubProfile=svcDhcpLseStateModifySubProfile, svcDhcpLeaseAncpString=svcDhcpLeaseAncpString, tmnxArpHostBgpGroup=tmnxArpHostBgpGroup, tlsSpbFdbVcId=tlsSpbFdbVcId, iesIfIsaTnlNHLastChanged=iesIfIsaTnlNHLastChanged, svcIpipeInfoEntry=svcIpipeInfoEntry, svcDhcpLseStateFramedIpNetMaskTp=svcDhcpLseStateFramedIpNetMaskTp, svcVllBgpEntry=svcVllBgpEntry, tlsEgrMcGrpQinqFixedTagPosition=tlsEgrMcGrpQinqFixedTagPosition, svcEndPointMCEPPeerAddr=svcEndPointMCEPPeerAddr, svcL2MhRteNextHopType=svcL2MhRteNextHopType, svcTlsStpCistIntRootCost=svcTlsStpCistIntRootCost, svcTlsPbbIgmpSnpgMRtrSvcIdBVpls=svcTlsPbbIgmpSnpgMRtrSvcIdBVpls, MfibLocation=MfibLocation, svcArpHostMRtStatus=svcArpHostMRtStatus, custMultSvcSiteLastMgmtChange=custMultSvcSiteLastMgmtChange, svcRowStatus=svcRowStatus, tlsSpbFidMFibIsid=tlsSpbFidMFibIsid, svcTlsSpbAdminState=svcTlsSpbAdminState, svcDhcpLeaseLeaseSplitActive=svcDhcpLeaseLeaseSplitActive, svcTlsBgpADTableLastChanged=svcTlsBgpADTableLastChanged, svcTlsIPmsiType=svcTlsIPmsiType, svcTlsShcvSrcMac=svcTlsShcvSrcMac, svcArpHostOvrMBS=svcArpHostOvrMBS, custMultiSvcSiteIngSchedPlcyStatsEntry=custMultiSvcSiteIngSchedPlcyStatsEntry, custIngQosPortIdSchedStatsTable=custIngQosPortIdSchedStatsTable, svcArpHostOvrDirection=svcArpHostOvrDirection, svcOperGrpOperStatus=svcOperGrpOperStatus, svcDhcpLeaseStateBgpEntry=svcDhcpLeaseStateBgpEntry, custId=custId, svcTlsMacLearning=svcTlsMacLearning, svcArpHostSdpId=svcArpHostSdpId, svcArpHostRadiusUserName=svcArpHostRadiusUserName, svcTlsShcvAction=svcTlsShcvAction, svcTlsMfibTableFullLowWatermark=svcTlsMfibTableFullLowWatermark, svcDhcpLeaseDhcpServerAddr=svcDhcpLeaseDhcpServerAddr, tlsPipStpInMstBpdus=tlsPipStpInMstBpdus, tmnxSvcMrpPolicyV8v0Group=tmnxSvcMrpPolicyV8v0Group, svcEpipeBackboneEntry=svcEpipeBackboneEntry, custMssIngQosSchedInfoEntry=custMssIngQosSchedInfoEntry, svcTmplTlsPriPortsCumFactor=svcTmplTlsPriPortsCumFactor, svcTlsMfibTableFullAlarmCleared=svcTlsMfibTableFullAlarmCleared, svcEndPointTxActiveLastChange=svcEndPointTxActiveLastChange, svcOperGrpOperStatusChanged=svcOperGrpOperStatusChanged, custIngSchedPlcyPortStatsFwdPkt=custIngSchedPlcyPortStatsFwdPkt, svcPEDiscoveryPolicyRowStatus=svcPEDiscoveryPolicyRowStatus, svcEndPointForceSwitchOver=svcEndPointForceSwitchOver, svcIpipeCeAddressDiscovery=svcIpipeCeAddressDiscovery, iesIfIPv6AllowUnmatchingPfxs=iesIfIPv6AllowUnmatchingPfxs, svcTlsMacMoveAdminStatus=svcTlsMacMoveAdminStatus, tlsPipMstiPortState=tlsPipMstiPortState, svcTlsBgpVsiExportPolicy3=svcTlsBgpVsiExportPolicy3, svcArpHostSubProfString=svcArpHostSubProfString, tlsSpbFidFdbVcId=tlsSpbFidFdbVcId, svcVllSiteIdBootTimer=svcVllSiteIdBootTimer, tmnxSvcNotifyObjs=tmnxSvcNotifyObjs, svcEndPointRestProtSrcMacAction=svcEndPointRestProtSrcMacAction, svcTlsPbbIgmpSnpgMRtrLastCh=svcTlsPbbIgmpSnpgMRtrLastCh, svcDhcpLeaseRetailerSvcId=svcDhcpLeaseRetailerSvcId, svcDhcpLeaseOvrDirection=svcDhcpLeaseOvrDirection, svcArpHostOvrTable=svcArpHostOvrTable, svcPwRtLocalRoutes=svcPwRtLocalRoutes, svcPwRtHostRoutes=svcPwRtHostRoutes, tlsPipStpPortRole=tlsPipStpPortRole, svcPEDiscPolServerIndex=svcPEDiscPolServerIndex, staticHostDynamicMacConflict=staticHostDynamicMacConflict, svcSpbIfSdpId=svcSpbIfSdpId, svcTlsSiteIdTblLastChanged=svcTlsSiteIdTblLastChanged, tmnxSvcPbbMacV7v0Group=tmnxSvcPbbMacV7v0Group, svcTlsStpBridgeMaxHops=svcTlsStpBridgeMaxHops, svcTlsBgpExportRteTarget=svcTlsBgpExportRteTarget, tmnxSvc7710V8v0Compliance=tmnxSvc7710V8v0Compliance, tlsProtMacImplMacAddr=tlsProtMacImplMacAddr, tmnxSvcTlsBgpV6v0Group=tmnxSvcTlsBgpV6v0Group, svcArpHostPersistKey=svcArpHostPersistKey, svcArpHostMRtEntry=svcArpHostMRtEntry, svcTraps=svcTraps, svcId=svcId, custMssEgrQosSPIR=custMssEgrQosSPIR, svcDhcpLeaseOvrTypeName=svcDhcpLeaseOvrTypeName, tlsShgRowStatus=tlsShgRowStatus, svcDhcpLeaseOvrCBS=svcDhcpLeaseOvrCBS, svcTlsMacSubNetLen=svcTlsMacSubNetLen, svcMSPwPeLastError=svcMSPwPeLastError, svcMSPwPeTaiiAcId=svcMSPwPeTaiiAcId, tmnxSvcV9v0R4Group=tmnxSvcV9v0R4Group, svcDhcpLeaseActionTable=svcDhcpLeaseActionTable, svcDhcpLseStateModInterDestId=svcDhcpLseStateModInterDestId, custMssIngQosSLastMgmtChange=custMssIngQosSLastMgmtChange, svcTlsMcPathMgmtPlcyName=svcTlsMcPathMgmtPlcyName, tlsShgLastMgmtChange=tlsShgLastMgmtChange, tlsSpbFidMFibTable=tlsSpbFidMFibTable, svcNameId=svcNameId, svcIgmpTrkTableLastMgmtChange=svcIgmpTrkTableLastMgmtChange, svcTlsSiteIdBootTimer=svcTlsSiteIdBootTimer, svcPwSpeSaiiTaiiGlobalId=svcPwSpeSaiiTaiiGlobalId, custTrapsPrefix=custTrapsPrefix, svcL2MhRteTable=svcL2MhRteTable, tlsPipStpOutMstBpdus=tlsPipStpOutMstBpdus, tmnxServObjs=tmnxServObjs, custEgrQosSchedName=custEgrQosSchedName, tlsPipStpDesignatedPort=tlsPipStpDesignatedPort, svcTmplTlsMacLearning=svcTmplTlsMacLearning, tmnxSvcP2mpGroup=tmnxSvcP2mpGroup, svcDhcpLeaseOvrTypeId=svcDhcpLeaseOvrTypeId, tlsMFibInfoPortId=tlsMFibInfoPortId, svcTlsBackboneSrcMac=svcTlsBackboneSrcMac, svcTlsInfoTable=svcTlsInfoTable, tlsMFibStatsForwardedPkts=tlsMFibStatsForwardedPkts, tmnxSvcV10v0Group=tmnxSvcV10v0Group, custEgrQosPortIdArbitFwdPkts=custEgrQosPortIdArbitFwdPkts, svcArpHostIfTable=svcArpHostIfTable, svcIfDHCP6MsgStatEntry=svcIfDHCP6MsgStatEntry, svcArpHostRefresh=svcArpHostRefresh, custMssEgrQosArbitStatsFwdOcts=custMssEgrQosArbitStatsFwdOcts, svcMSPwPeTable=svcMSPwPeTable, svcDhcpLeaseBCastIpAddrType=svcDhcpLeaseBCastIpAddrType, svcDhcpLseStateAppProfString=svcDhcpLseStateAppProfString, svcEpipePbbRowStatus=svcEpipePbbRowStatus, svcNameLastChanged=svcNameLastChanged, svcMrpPolicyParamsTable=svcMrpPolicyParamsTable, tmnxSvcCompliances=tmnxSvcCompliances, svcTlsBackboneForceQTagFwd=svcTlsBackboneForceQTagFwd, tlsFdbType=tlsFdbType, svcMSPwPeTaiiPrefix=svcMSPwPeTaiiPrefix, svcIpipeStackCapabilitySignaling=svcIpipeStackCapabilitySignaling, custIngSchedPlcyPortStatsPort=custIngSchedPlcyPortStatsPort, custMultSvcSiteIntendedIngrSchedPlcy=custMultSvcSiteIntendedIngrSchedPlcy, svcTlsMacRelearnOnly=svcTlsMacRelearnOnly, iesIfShcvInterval=iesIfShcvInterval, SdpBindBandwidth=SdpBindBandwidth, svcOperGrpCreationOrigin=svcOperGrpCreationOrigin, tmnxSvcRoutedCOV8v0Group=tmnxSvcRoutedCOV8v0Group, tmnxSvc7450V10v0Compliance=tmnxSvc7450V10v0Compliance, tlsEgrMcGrpDot1qEtherType=tlsEgrMcGrpDot1qEtherType, svcDhcpLseStateCategoryMapName=svcDhcpLseStateCategoryMapName, iesIfMonitorOperGrp=iesIfMonitorOperGrp, svcTlsSiteIdDesignatedFwdr=svcTlsSiteIdDesignatedFwdr, tmnxSvcTlsMFibV6v0Group=tmnxSvcTlsMFibV6v0Group, svcDhcpLeaseOvrEntry=svcDhcpLeaseOvrEntry, svcDhcpLseStateDhcpClientAddrType=svcDhcpLseStateDhcpClientAddrType, custMssIngQosArbitStatsFwdOctsLo=custMssIngQosArbitStatsFwdOctsLo, custMultSvcSiteDescription=custMultSvcSiteDescription, svcDhcpLeaseDhcpClientAddrType=svcDhcpLeaseDhcpClientAddrType, svcArpHostShcvChecks=svcArpHostShcvChecks, svcArpHostBgpPeeringStatus=svcArpHostBgpPeeringStatus, tlsFdbProtected=tlsFdbProtected, VpnId=VpnId, tlsSpbFidFdbSdpId=tlsSpbFidFdbSdpId, tlsPipStpException=tlsPipStpException, svcTlsMrpAttrType=svcTlsMrpAttrType, svcEndPointAutoLearnMacProtect=svcEndPointAutoLearnMacProtect, svcEPMCEPConfigMismatch=svcEPMCEPConfigMismatch, tlsSpbFidFdbEntry=tlsSpbFidFdbEntry, custEgrQosSchedStatsForwardedOctets=custEgrQosSchedStatsForwardedOctets, svcTmplTlsFdbTableSize=svcTmplTlsFdbTableSize, svcEpipeTableLastChanged=svcEpipeTableLastChanged, svcTlsMrpAttrTblFullAlarmCleared=svcTlsMrpAttrTblFullAlarmCleared, tlsEgrMcGrpAdminQinqFixedTagVal=tlsEgrMcGrpAdminQinqFixedTagVal, tlsMstiRowStatus=tlsMstiRowStatus, custIngQosPortIdArbitFwdOctsLo=custIngQosPortIdArbitFwdOctsLo, svcDhcpLeaseEncapValue=svcDhcpLeaseEncapValue, iesGrpIfEntry=iesGrpIfEntry, tlsFdbMacAddr=tlsFdbMacAddr, svcIfSapCfgTableLastChanged=svcIfSapCfgTableLastChanged, svcWholesalerNumDhcpLeaseStates=svcWholesalerNumDhcpLeaseStates, svcTlsPmsiEntry=svcTlsPmsiEntry, svcMacFdbRecords=svcMacFdbRecords, svcWholesalerNumPppoeSessions=svcWholesalerNumPppoeSessions, svcEndPointMacLimitAlarmCleared=svcEndPointMacLimitAlarmCleared, svcDhcpLseStateEncapValue=svcDhcpLseStateEncapValue, svcVllSiteIdTable=svcVllSiteIdTable, TQosQueueAttribute=TQosQueueAttribute, tmnxSvcNotifyV6v0Group=tmnxSvcNotifyV6v0Group, svcArpHostIfMaxNumHostsSap=svcArpHostIfMaxNumHostsSap, svcTlsIPmsiLspName=svcTlsIPmsiLspName, svcTlsMrpAttributeCount=svcTlsMrpAttributeCount, tlsFdbEncapValue=tlsFdbEncapValue, tlsRdntGrpMemberLastMgmtChange=tlsRdntGrpMemberLastMgmtChange, tmnxSvcIfDHCP6V6v0Group=tmnxSvcIfDHCP6V6v0Group, tlsMFibInfoLocale=tlsMFibInfoLocale, svcTlsSpbLastChanged=svcTlsSpbLastChanged, tmnxSvcRdntV6v0Group=tmnxSvcRdntV6v0Group, BridgeId=BridgeId, svcTlsBgpADVsiExportPolicy1=svcTlsBgpADVsiExportPolicy1, custCreated=custCreated, svcCreationOrigin=svcCreationOrigin, svcDhcpLseStateSecondaryNbns=svcDhcpLseStateSecondaryNbns, svcEthCfmTblLastChanged=svcEthCfmTblLastChanged, svcDefMeshVcId=svcDefMeshVcId, svcIfSapCfgDescription=svcIfSapCfgDescription, svcMacNameAddr=svcMacNameAddr, L2RouteOrigin=L2RouteOrigin, svcDhcpLeaseShcvReplies=svcDhcpLeaseShcvReplies, svcTlsSiteIdSiteActTimer=svcTlsSiteIdSiteActTimer, svcTlsSiteIdFailedThresh=svcTlsSiteIdFailedThresh, tmnxSvcDhcpV8v0Group=tmnxSvcDhcpV8v0Group, TStpPortState=TStpPortState, svcArpHostSessionTimeout=svcArpHostSessionTimeout, svcMrpPolicyLastChanged=svcMrpPolicyLastChanged, tlsPipStpOutRstBpdus=tlsPipStpOutRstBpdus, svcPwRtPathHopTable=svcPwRtPathHopTable, topologyChangePipState=topologyChangePipState, svcTlsMacNotifCount=svcTlsMacNotifCount, tmnxTstpGroups=tmnxTstpGroups, custMssIngQosArbitStatsFwdOctsHi=custMssIngQosArbitStatsFwdOctsHi, svcNameTable=svcNameTable, svcDhcpLeaseOption60=svcDhcpLeaseOption60, tlsDhcpLseStateOldCiAddr=tlsDhcpLseStateOldCiAddr)
mibBuilder.exportSymbols("TIMETRA-SERV-MIB", svcMstiInstanceId=svcMstiInstanceId, svcTlsBgpLastChanged=svcTlsBgpLastChanged, tlsEgrMcGrpQinqEtherType=tlsEgrMcGrpQinqEtherType, svcMSPwPeEndPoint=svcMSPwPeEndPoint, svcDhcpLseStatePortId=svcDhcpLseStatePortId, ServAccessLocation=ServAccessLocation, tlsMFibStatsTable=tlsMFibStatsTable, svcDhcpLseStateBgpPeerAS=svcDhcpLseStateBgpPeerAS, svcTmplUserEntry=svcTmplUserEntry, custMssIngQosArbitStatsFwdPktsLo=custMssIngQosArbitStatsFwdPktsLo, svcEndPointDescription=svcEndPointDescription, tmnxSvc7710V10v0Compliance=tmnxSvc7710V10v0Compliance, svcTlsStpTimeSinceTopologyChange=svcTlsStpTimeSinceTopologyChange, svcTlsStpTopologyChanges=svcTlsStpTopologyChanges, svcDhcpLeaseBgpPeerAS=svcDhcpLeaseBgpPeerAS, tlsDhcpRestoreLseStateSvcId=tlsDhcpRestoreLseStateSvcId, svcTlsSiteIdOperStatus=svcTlsSiteIdOperStatus, tlsSpbFdbEncapValue=tlsSpbFdbEncapValue, custMultSvcSiteDeleted=custMultSvcSiteDeleted, svcTlsPropMacFlushFromBVpls=svcTlsPropMacFlushFromBVpls, svcTlsMrpAttrTblLowWatermark=svcTlsMrpAttrTblLowWatermark, tlsEgrMcGrpName=tlsEgrMcGrpName, svcMSPwPeSaiiAcId=svcMSPwPeSaiiAcId, tmnxSvcObjTodSuite=tmnxSvcObjTodSuite, svcTlsSpbUserSvcId=svcTlsSpbUserSvcId, svcEpipeLastChngd=svcEpipeLastChngd, custIngQosPortIdArbitFwdPktsLo=custIngQosPortIdArbitFwdPktsLo, svcLastStatusChange=svcLastStatusChange, custPhone=custPhone, tmnxSvc7450V9v0Compliance=tmnxSvc7450V9v0Compliance, svcTmplTlsStpPriority=svcTmplTlsStpPriority, iesIfLns=iesIfLns, custMssEgrQosSName=custMssEgrQosSName, tmnxSvcTlsShgV6v0Group=tmnxSvcTlsShgV6v0Group, svcDhcpLseStateEvaluateState=svcDhcpLseStateEvaluateState, tlsFdbVcId=tlsFdbVcId, svcTlsSiteIdRowStatus=svcTlsSiteIdRowStatus, svcPwRtSpeAddrPrefix=svcPwRtSpeAddrPrefix, svcTlsBgpTableLastChanged=svcTlsBgpTableLastChanged, svcMacFdbTblFullAlarm=svcMacFdbTblFullAlarm, svcDhcpLeaseShcvReplyTime=svcDhcpLeaseShcvReplyTime, PYSNMP_MODULE_ID=timetraServicesMIBModule, MfibGrpSrcFwdOrBlk=MfibGrpSrcFwdOrBlk, tlsMFibStatsSrcInetAddr=tlsMFibStatsSrcInetAddr, svcVllBgpVsiRD=svcVllBgpVsiRD, svcTlsExtSpbmFid=svcTlsExtSpbmFid, svcPwRtPathTblLastChanged=svcPwRtPathTblLastChanged, svcDhcpLeaseServerLeaseStart=svcDhcpLeaseServerLeaseStart, tmnxSvcTlsPipV7v0Group=tmnxSvcTlsPipV7v0Group, svcEpipePbbFlooding=svcEpipePbbFlooding, tlsDhcpLseStateNewCiAddr=tlsDhcpLseStateNewCiAddr, tmnxSvcTlsPipV6v0Group=tmnxSvcTlsPipV6v0Group, custMssEgrQosSRowStatus=custMssEgrQosSRowStatus, svcDhcpLseStateModifyAppProfile=svcDhcpLseStateModifyAppProfile, svcTlsSpbTableLastChanged=svcTlsSpbTableLastChanged, svcNumSaps=svcNumSaps, svcDhcpLeaseOvrCIR=svcDhcpLeaseOvrCIR, svcSpbIfVcId=svcSpbIfVcId, svcIfDHCP6MsgStatsSent=svcIfDHCP6MsgStatsSent, svcDhcpLeaseAleTable=svcDhcpLeaseAleTable, tmnxSvcNotifyV7v0Group=tmnxSvcNotifyV7v0Group, tlsProtMacLastMgmtChange=tlsProtMacLastMgmtChange, svcEndPointTxActivePortId=svcEndPointTxActivePortId, ServObjName=ServObjName, tmnxSvc7450V6v0Compliance=tmnxSvc7450V6v0Compliance, tlsShgRestProtSrcMac=tlsShgRestProtSrcMac, svcDhcpLseStateServerLeaseStart=svcDhcpLseStateServerLeaseStart, svcTlsStpDesignatedRoot=svcTlsStpDesignatedRoot, svcTlsVpnId=svcTlsVpnId, custEgrQosPortIdArbitFwdOctsHi=custEgrQosPortIdArbitFwdOctsHi, tlsMFibGrpSrcStatsSrcAddr=tlsMFibGrpSrcStatsSrcAddr, tmnxSvcObsoletedV9v0Group=tmnxSvcObsoletedV9v0Group, tmnxSvcObjTodSuiteApplicFailed=tmnxSvcObjTodSuiteApplicFailed, tlsMFibStatsEntry=tlsMFibStatsEntry, svcDhcpLeaseDefaultRouter=svcDhcpLeaseDefaultRouter, svcNotifSapEncapValue=svcNotifSapEncapValue, tmnxSvcDhcpV7v0Group=tmnxSvcDhcpV7v0Group, tlsMstiMvplsMinVlanTag=tlsMstiMvplsMinVlanTag, svcDhcpLeaseBgpMD5AuthKey=svcDhcpLeaseBgpMD5AuthKey, custIngQosSchedStatsForwardedOctets=custIngQosSchedStatsForwardedOctets, svcEpipeTable=svcEpipeTable, svcTlsBgpVsiRD=svcTlsBgpVsiRD, custIngQosPortIdArbitFwdPktsHi=custIngQosPortIdArbitFwdPktsHi, svcTlsFdbNumStaticEntries=svcTlsFdbNumStaticEntries, svcFdbMimDestTblFullAlrm=svcFdbMimDestTblFullAlrm, svcDhcpClientLease=svcDhcpClientLease, custEgrSchedPlcyPortStatsFwdPkt=custEgrSchedPlcyPortStatsFwdPkt, svcArpHostOvrCBS=svcArpHostOvrCBS, tmnxSvcRoutedCOV7v0Group=tmnxSvcRoutedCOV7v0Group, tlsMstiManagedVlanListEntry=tlsMstiManagedVlanListEntry, macPinningMacAddress=macPinningMacAddress, tmnxSvcGroups=tmnxSvcGroups, svcTlsGroupEntry=svcTlsGroupEntry, tlsMFibStatsGrpInetAddrType=tlsMFibStatsGrpInetAddrType, svcEndPointMCEPId=svcEndPointMCEPId, svcEndPointMacPinning=svcEndPointMacPinning, tlsFdbCustId=tlsFdbCustId, svcTlsExtMmrpOperStatus=svcTlsExtMmrpOperStatus, svcTmplType=svcTmplType, svcTlsSecPortsCumulativeFactor=svcTlsSecPortsCumulativeFactor, svcTlsSiteIdDfUpTime=svcTlsSiteIdDfUpTime, svcTlsExtMvrpOperStatus=svcTlsExtMvrpOperStatus, svcTlsSpbEntry=svcTlsSpbEntry, iesIfGroupInterfaceType=iesIfGroupInterfaceType, svcDhcpLeaseBgpTable=svcDhcpLeaseBgpTable, svcBgpVplsTable=svcBgpVplsTable, tmnxApipeV3v0Group=tmnxApipeV3v0Group, tmnxSvcTlsBackbone6v1Group=tmnxSvcTlsBackbone6v1Group, svcVllSiteIdEntry=svcVllSiteIdEntry, svcVllSiteDesigFwdrChg=svcVllSiteDesigFwdrChg, tlsMFibStatsEntryType=tlsMFibStatsEntryType, TlsLimitMacMoveLevel=TlsLimitMacMoveLevel, svcPwRtStaticRtEntry=svcPwRtStaticRtEntry, svcDhcpLeaseChAddr=svcDhcpLeaseChAddr, svcDhcpLeaseWppEntry=svcDhcpLeaseWppEntry, tlsSpbFidFdbTable=tlsSpbFidFdbTable, svcRestoreHostProblem=svcRestoreHostProblem, svcTlsBgpADExportRteTarget=svcTlsBgpADExportRteTarget, svcTlsExtMvrpAttrTblHighWM=svcTlsExtMvrpAttrTblHighWM, svcEPMCEPConfigMismatchResolved=svcEPMCEPConfigMismatchResolved, svcPwSpeTaiiSvcId=svcPwSpeTaiiSvcId, custIngQosSchedStatsForwardedPackets=custIngQosSchedStatsForwardedPackets, svcArpHostIpAddr=svcArpHostIpAddr, svcTlsGroupLastChanged=svcTlsGroupLastChanged, svcTlsBgpVsiExportPolicy2=svcTlsBgpVsiExportPolicy2, custEgrQosPortIdArbitStatsEntry=custEgrQosPortIdArbitStatsEntry, custMssEgrQosSCIR=custMssEgrQosSCIR, svcTlsStpBridgeInstanceId=svcTlsStpBridgeInstanceId, svcBgpVplsVeId=svcBgpVplsVeId, svcL2MhRteDf=svcL2MhRteDf, svcTmplTlsStpBridgeForwardDelay=svcTmplTlsStpBridgeForwardDelay, svcDhcpLeaseCiAddrMaskLen=svcDhcpLeaseCiAddrMaskLen, svcDhcpLeasePortId=svcDhcpLeasePortId, svcMSPwPeId=svcMSPwPeId, tmnxSvcDhcpV10v0Group=tmnxSvcDhcpV10v0Group, svcArpHostCategoryMapName=svcArpHostCategoryMapName, svcPwRtLclPfxRDRowStatus=svcPwRtLclPfxRDRowStatus, tlsDhcpRestoreLseStatePortId=tlsDhcpRestoreLseStatePortId, custMultSvcSiteRowStatus=custMultSvcSiteRowStatus, tlsShgDescription=tlsShgDescription, svcTlsSiteIdSdpBindId=svcTlsSiteIdSdpBindId, iesIfVpnId=iesIfVpnId, tlsSpbFidMFibEncapValue=tlsSpbFidMFibEncapValue, tlsDhcpLseStateOldChAddr=tlsDhcpLseStateOldChAddr, svcTlsStpRegionName=svcTlsStpRegionName, svcSpbIfIndex=svcSpbIfIndex, svcDhcpLeaseBgpExportPolicy=svcDhcpLeaseBgpExportPolicy, svcMSPwPeSaiiPrefix=svcMSPwPeSaiiPrefix, svcTmplTlsEntry=svcTmplTlsEntry, svcDhcpLeasePrimaryDns=svcDhcpLeasePrimaryDns, svcDhcpLeaseAleDatalink=svcDhcpLeaseAleDatalink, svcTlsShcvRetryCount=svcTlsShcvRetryCount, tlsMstiTable=tlsMstiTable, svcTlsBgpADVsiRD=svcTlsBgpADVsiRD, tlsSpbFidFdbEncapValue=tlsSpbFidFdbEncapValue, tmnxSvcBsxV6v0Group=tmnxSvcBsxV6v0Group, svcMSPwPeRetryRemain=svcMSPwPeRetryRemain, svcPwRtPathHopAddr=svcPwRtPathHopAddr, custMultSvcSiteEgressAggRateLimit=custMultSvcSiteEgressAggRateLimit, svcPwRtLclPrefixTblLastChanged=svcPwRtLclPrefixTblLastChanged, tlsEgrMcGrpDescription=tlsEgrMcGrpDescription, StpProtocol=StpProtocol, svcDhcpLeaseBCastIpAddr=svcDhcpLeaseBCastIpAddr, svcPEDiscoveryPolicyTable=svcPEDiscoveryPolicyTable, svcSpbIfEntry=svcSpbIfEntry, custEgrQosPortIdArbitFwdOcts=custEgrQosPortIdArbitFwdOcts, tlsDHCPClientLease=tlsDHCPClientLease, svcDhcpLeaseNakNextRenew=svcDhcpLeaseNakNextRenew, svcEndPointStandbySigMaster=svcEndPointStandbySigMaster, svcTlsFdbNumOamEntries=svcTlsFdbNumOamEntries, ConfigStatus=ConfigStatus, svcMrpPlcyParamsTblLastChgd=svcMrpPlcyParamsTblLastChgd, svcTlsExtMvrpAdminStatus=svcTlsExtMvrpAdminStatus, TlsLimitMacMove=TlsLimitMacMove, svcIgmpTrkEntry=svcIgmpTrkEntry, SdpTemplateId=SdpTemplateId, custMssEgrQosSOverrideFlags=custMssEgrQosSOverrideFlags, tlsProtMacImplEntry=tlsProtMacImplEntry, svcMrpPolicyParamsISIDEntry=svcMrpPolicyParamsISIDEntry, svcMacNameLastChngd=svcMacNameLastChngd, tlsMFibFwdOrBlk=tlsMFibFwdOrBlk, svcSpbIfPortId=svcSpbIfPortId, svcEpipeEntry=svcEpipeEntry, svcTlsStpVersion=svcTlsStpVersion, svcTlsGroupRowStatus=svcTlsGroupRowStatus, svcTlsStpHoldCount=svcTlsStpHoldCount, svcTlsShcvSrcIp=svcTlsShcvSrcIp, custIngQosPortSchedFwdOctets=custIngQosPortSchedFwdOctets, svcTlsMacV7v0Group=svcTlsMacV7v0Group, tlsMFibTable=tlsMFibTable, svcTlsIPmsiRootAndLeaf=svcTlsIPmsiRootAndLeaf, svcTlsPerSvcHashing=svcTlsPerSvcHashing, svcTlsMacNotifInterval=svcTlsMacNotifInterval, tmnxCustomerRootBridgeId=tmnxCustomerRootBridgeId, tlsSpbFidFdbMVcId=tlsSpbFidFdbMVcId, tmnxSvc7710V6v1Compliance=tmnxSvc7710V6v1Compliance, tlsFdbPortId=tlsFdbPortId, svcEpipePbbBvplsSvcId=svcEpipePbbBvplsSvcId, iesIfDefaultPrimaryDnsIPv4Addr=iesIfDefaultPrimaryDnsIPv4Addr, DhcpLseStateInfoOrigin=DhcpLseStateInfoOrigin, tlsSpbFidMFibMacAddr=tlsSpbFidMFibMacAddr, svcEndPointMacLimitAlarmRaised=svcEndPointMacLimitAlarmRaised, svcTlsExtMmrpAdminStatus=svcTlsExtMmrpAdminStatus, svcDhcpLseStateClientId=svcDhcpLseStateClientId, svcTlsSiteIdLastChanged=svcTlsSiteIdLastChanged, svcDhcpLeaseOriginLeaseInfo=svcDhcpLeaseOriginLeaseInfo, svcTlsMrpFailedRegisterCount=svcTlsMrpFailedRegisterCount, tmnxSvcMacReNotifyGroup=tmnxSvcMacReNotifyGroup, iesIfSrrpRoutingEnabled=iesIfSrrpRoutingEnabled, macPinningPinnedRow=macPinningPinnedRow, svcDhcpLeaseVcId=svcDhcpLeaseVcId, svcFdbMimDestTblFullAlrmCleared=svcFdbMimDestTblFullAlrmCleared, svcBgpVplsRowStatus=svcBgpVplsRowStatus, svcDhcpLeaseFramedIpNetMask=svcDhcpLeaseFramedIpNetMask, svcArpHostIfTableLastMgmtChange=svcArpHostIfTableLastMgmtChange, custMssIngQosSSummedCIR=custMssIngQosSSummedCIR, tlsFdbLocale=tlsFdbLocale, tmnxSvcNotifyObsoletedGroup=tmnxSvcNotifyObsoletedGroup, svcPwRtLclPrefixEntry=svcPwRtLclPrefixEntry, tmnxSvcRoutedCOV5v0Group=tmnxSvcRoutedCOV5v0Group, macPinningViolatingRow=macPinningViolatingRow, svcMrpPolicyParamsISIDLow=svcMrpPolicyParamsISIDLow, tmnxVcpState=tmnxVcpState, svcDhcpLseStateRetailerIf=svcDhcpLseStateRetailerIf, svcPwSpeSaiiTable=svcPwSpeSaiiTable, tlsProtectedMacTable=tlsProtectedMacTable, tmnxSvcIpipeV8v0Group=tmnxSvcIpipeV8v0Group, iesIfSrrpRoutingHoldTime=iesIfSrrpRoutingHoldTime, svcTmplTable=svcTmplTable, custMssIngQosSOverrideFlags=custMssIngQosSOverrideFlags, svcArpHostInterDestId=svcArpHostInterDestId, svcPwRtPathAdminStatus=svcPwRtPathAdminStatus, tlsDhcpRestoreLseStateEncapVal=tlsDhcpRestoreLseStateEncapVal, svcPEDiscPolServerOperStatus=svcPEDiscPolServerOperStatus, svcDhcpLeaseAppProfString=svcDhcpLeaseAppProfString, svcArpHostAncpString=svcArpHostAncpString, svcTlsIPmsiRemainDataDelayIntvl=svcTlsIPmsiRemainDataDelayIntvl, tmnxSvc7710V9v0Compliance=tmnxSvc7710V9v0Compliance, tmnxSvcIesIfV7v0Group=tmnxSvcIesIfV7v0Group, tlsFdbRowStatus=tlsFdbRowStatus, svcMacFdbTblFullAlarmCleared=svcMacFdbTblFullAlarmCleared, custIngQosPortIdArbitName=custIngQosPortIdArbitName, tlsMFibInfoSvcId=tlsMFibInfoSvcId, svcDhcpLseStateCiAddr=svcDhcpLseStateCiAddr, svcDhcpLseStateAncpString=svcDhcpLseStateAncpString, tlsProtMacImplTable=tlsProtMacImplTable, svcMSPwRtMisconfig=svcMSPwRtMisconfig, custMultiSvcSiteEgrSchedPlcyPortStatsEntry=custMultiSvcSiteEgrSchedPlcyPortStatsEntry, svcLastMgmtChange=svcLastMgmtChange, tlsMstiIntRootCost=tlsMstiIntRootCost, svcDhcpRestoreLseStateProblem=svcDhcpRestoreLseStateProblem, svcDhcpLseStateServerLastRenew=svcDhcpLseStateServerLastRenew, custEgrQosPortIdArbitFwdPktsLo=custEgrQosPortIdArbitFwdPktsLo, svcTlsStpPriority=svcTlsStpPriority)
mibBuilder.exportSymbols("TIMETRA-SERV-MIB", svcEndPointBlockOnMeshFail=svcEndPointBlockOnMeshFail, tlsPipMstiDesignatedPort=tlsPipMstiDesignatedPort, iesIfDefaultSecondaryDnsIPv4Addr=iesIfDefaultSecondaryDnsIPv4Addr, tmnxSvcApipeInfoV9v0Group=tmnxSvcApipeInfoV9v0Group, iesIfFwdSubIf=iesIfFwdSubIf, svcDhcpManagedRouteInetAddr=svcDhcpManagedRouteInetAddr, svcIgmpTrkLastMgmtChange=svcIgmpTrkLastMgmtChange, svcDhcpLeaseRetailerIf=svcDhcpLeaseRetailerIf, svcDhcpLeaseOption82=svcDhcpLeaseOption82, iesIfLoopback=iesIfLoopback, svcTlsPbbIgmpSnpgMRtrEntry=svcTlsPbbIgmpSnpgMRtrEntry, svcDhcpLeaseWppPortalName=svcDhcpLeaseWppPortalName, iesIfVplsFailedReason=iesIfVplsFailedReason, svcOperGrpHoldDownTime=svcOperGrpHoldDownTime, svcAutoBind=svcAutoBind, svcIpRouting=svcIpRouting, svcArpHostSubscrIdent=svcArpHostSubscrIdent, tmnxCustConformance=tmnxCustConformance, tlsDhcpRestoreLseStateCiAddr=tlsDhcpRestoreLseStateCiAddr, custEgrQosPortIdSchedStatsTable=custEgrQosPortIdSchedStatsTable, iesIfIsaTnlNHStaticAddr=iesIfIsaTnlNHStaticAddr, svcTlsBgpADVsiExportPolicy4=svcTlsBgpADVsiExportPolicy4, svcArpHostShcvReplyTime=svcArpHostShcvReplyTime, custMssEgrQosArbitStatsFwdPktsLo=custMssEgrQosArbitStatsFwdPktsLo, tlsMFibGrpSrcStatsEntry=tlsMFibGrpSrcStatsEntry, svcTlsSiteIdPortId=svcTlsSiteIdPortId, iesIfShcvRetryTimeout=iesIfShcvRetryTimeout, tlsSpbFidMFibLocale=tlsSpbFidMFibLocale, svcPersistencyProblem=svcPersistencyProblem, MstiInstanceId=MstiInstanceId, svcDhcpLseStateSubscrIdent=svcDhcpLseStateSubscrIdent, svcDhcpLseStateLocale=svcDhcpLseStateLocale, svcTlsStpRootPort=svcTlsStpRootPort, svcDhcpLeaseEvaluateState=svcDhcpLeaseEvaluateState, custMultiSvcSiteIngStatsEntry=custMultiSvcSiteIngStatsEntry, tmnxOtherBridgeId=tmnxOtherBridgeId, svcTlsFdbTableFullLowWatermark=svcTlsFdbTableFullLowWatermark, tlsEgrMcGrpIpFilterId=tlsEgrMcGrpIpFilterId, svcBgpVplsVeName=svcBgpVplsVeName, tlsRdntGrpDescription=tlsRdntGrpDescription, svcTlsIPmsiLspTmpl=svcTlsIPmsiLspTmpl, tlsShgCreationOrigin=tlsShgCreationOrigin, svcIfSapCfgSubIdentPolicy=svcIfSapCfgSubIdentPolicy, tmnxSvcPEDiscPolServOperStatChg=tmnxSvcPEDiscPolServOperStatChg, svcDhcpLseStateNewCiAddr=svcDhcpLseStateNewCiAddr, tmnxSvcRoutedVplsV8v0Group=tmnxSvcRoutedVplsV8v0Group, svcTlsGroupStartVlanTag=svcTlsGroupStartVlanTag, tlsSpbFdbMLocale=tlsSpbFdbMLocale, svcDhcpLeaseNextHopMacAddr=svcDhcpLeaseNextHopMacAddr, svcArpHostEntry=svcArpHostEntry, svcPwSpeTaiiOperSdpBind2=svcPwSpeTaiiOperSdpBind2, iesIfStatusChanged=iesIfStatusChanged, svcMrpPolicyParamsRowStatus=svcMrpPolicyParamsRowStatus, svcDhcpLeaseSessionTimeout=svcDhcpLeaseSessionTimeout, iesIfIsaTnlNHTable=iesIfIsaTnlNHTable, svcTlsSiteIdMonitorOperGrp=svcTlsSiteIdMonitorOperGrp, iesIfIsaTnlNHTableLastChanged=iesIfIsaTnlNHTableLastChanged, svcDhcpLseStateIAIDType=svcDhcpLseStateIAIDType, svcTlsBgpADVsiExportPolicy5=svcTlsBgpADVsiExportPolicy5, StpExceptionCondition=StpExceptionCondition, ServShcvOperState=ServShcvOperState, tlsSpbFidFdbMacAddr=tlsSpbFidFdbMacAddr, svcEndPointTxActiveSdpId=svcEndPointTxActiveSdpId, tlsFdbInfoTable=tlsFdbInfoTable, custMssEgrQosArbitName=custMssEgrQosArbitName, tlsShgName=tlsShgName, tlsProtMacAddress=tlsProtMacAddress, svcTlsExtSpbmCtrlVpls=svcTlsExtSpbmCtrlVpls, svcIgmpTrkTable=svcIgmpTrkTable, svcPwRtLclPfxRD=svcPwRtLclPfxRD, tlsSpbFidMFibEntry=tlsSpbFidMFibEntry, svcTlsSpbIsisInstance=svcTlsSpbIsisInstance, tlsPipStpInBadBpdus=tlsPipStpInBadBpdus, svcTlsMrpAttrTblHighWatermark=svcTlsMrpAttrTblHighWatermark, svcEpipePerSvcHashing=svcEpipePerSvcHashing, tmnxSvcDhcpV9v0Group=tmnxSvcDhcpV9v0Group, custRowStatus=custRowStatus, svcDhcpLseStateSlaProfString=svcDhcpLseStateSlaProfString, svcTlsGroupOperStatus=svcTlsGroupOperStatus, svcDhcpLeaseRadiusClassAttr=svcDhcpLeaseRadiusClassAttr, svcNameEntry=svcNameEntry, svcNameType=svcNameType, svcTlsSiteIdEncapValue=svcTlsSiteIdEncapValue, svcVllSiteIdPortId=svcVllSiteIdPortId, svcEndPointRevertTimeCountDn=svcEndPointRevertTimeCountDn, iesIfSapEgressQosId=iesIfSapEgressQosId, svcTlsMrpAttrRegistrationFailed=svcTlsMrpAttrRegistrationFailed, svcTlsSiteIdAdminStatus=svcTlsSiteIdAdminStatus, tlsProtMacImplEncapValue=tlsProtMacImplEncapValue, svcVllType=svcVllType, custMultiSvcSiteEgrStatsTable=custMultiSvcSiteEgrStatsTable, svcPwSpeSaiiOperSdpBind2=svcPwSpeSaiiOperSdpBind2, svcVllBgpTableLastChanged=svcVllBgpTableLastChanged, svcVllSiteIdDfChgCnt=svcVllSiteIdDfChgCnt, svcDhcpLeaseOvrMBS=svcDhcpLeaseOvrMBS, svcIpipeInfoLastMgmtChange=svcIpipeInfoLastMgmtChange, svcVllSiteIdRowStatus=svcVllSiteIdRowStatus, svcTmplUserCreationOrigin=svcTmplUserCreationOrigin, ServObjLongDesc=ServObjLongDesc, svcTlsBgpVsiImportPolicy4=svcTlsBgpVsiImportPolicy4, svcDhcpLeaseCiAddr=svcDhcpLeaseCiAddr, svcOperGrpNumMembers=svcOperGrpNumMembers, svcDhcpLseStateBgpPrngPlcyName=svcDhcpLseStateBgpPrngPlcyName, tmnxSvc7710V7v0Compliance=tmnxSvc7710V7v0Compliance, svcTlsBgpADVsiImportPolicy1=svcTlsBgpADVsiImportPolicy1, tlsShgResidential=tlsShgResidential, tlsPipStpMvplsPruneState=tlsPipStpMvplsPruneState, tmnxCustV8v0Compliance=tmnxCustV8v0Compliance, custMultiSvcSiteIngStatsTable=custMultiSvcSiteIngStatsTable, tmnxTstpConformance=tmnxTstpConformance, svcWholesalerNumArpHosts=svcWholesalerNumArpHosts, svcDhcpLeaseAleEncaps1=svcDhcpLeaseAleEncaps1, tstpTraps=tstpTraps, tlsPipStpInTcnBpdus=tlsPipStpInTcnBpdus, svcTlsFdbNumLearnedEntries=svcTlsFdbNumLearnedEntries, tlsFdbEndPointName=tlsFdbEndPointName, svcIfDHCP6MsgStatTable=svcIfDHCP6MsgStatTable, svcMSPwPePolicyId=svcMSPwPePolicyId, svcArpHostBgpMD5AuthKey=svcArpHostBgpMD5AuthKey, tmnxSvcV8v0Group=tmnxSvcV8v0Group, svcTmplTlsMacMoveRetryTimeout=svcTmplTlsMacMoveRetryTimeout, svcTlsGroupEnd=svcTlsGroupEnd, svcEndPointRestProtSrcMac=svcEndPointRestProtSrcMac, tlsMFibEntryType=tlsMFibEntryType, svcPEDiscoveryPolicyEntry=svcPEDiscoveryPolicyEntry, svcPwSpeSaiiEntry=svcPwSpeSaiiEntry, iesIfIPv6IpoeBridgedModeEnabled=iesIfIPv6IpoeBridgedModeEnabled, tlsFdbPbbNumEpipes=tlsFdbPbbNumEpipes, tmnxSvcNotifyObjsV7v0Group=tmnxSvcNotifyObjsV7v0Group, svcTlsFdbNumEntries=svcTlsFdbNumEntries, svcDhcpLeaseForceRenew=svcDhcpLeaseForceRenew, tmnxSvcInterAsV8v0Group=tmnxSvcInterAsV8v0Group, svcTotalFdbMimDestIdxEntries=svcTotalFdbMimDestIdxEntries, custEgrSchedPlcyPortStatsPort=custEgrSchedPlcyPortStatsPort, svcEndPointTxActiveEncap=svcEndPointTxActiveEncap, svcPwRtPathName=svcPwRtPathName, svcEndPointStandbySigSlave=svcEndPointStandbySigSlave, iesIfCreated=iesIfCreated, svcDhcpLeaseAleEncaps2=svcDhcpLeaseAleEncaps2, svcArpHostOvrPIR=svcArpHostOvrPIR, svcDhcpLseStateSecondaryDnsType=svcDhcpLseStateSecondaryDnsType, svcDhcpLseStateShcvReplies=svcDhcpLseStateShcvReplies, svcPwRtRetryTimer=svcPwRtRetryTimer, custEgrQosAssignmentPortId=custEgrQosAssignmentPortId, svcPwSpeTaiiEntry=svcPwSpeTaiiEntry, svcDhcpLeaseOriginStrings=svcDhcpLeaseOriginStrings, svcEpipePbbLastChngd=svcEpipePbbLastChngd, svcTmplTblLastChanged=svcTmplTblLastChanged, svcVllBgpTable=svcVllBgpTable, svcTlsStpBridgeMaxAge=svcTlsStpBridgeMaxAge, svcDhcpLeaseOriginSubscrId=svcDhcpLeaseOriginSubscrId, svcArpHostMRtPrefixLen=svcArpHostMRtPrefixLen, svcTmplLastChanged=svcTmplLastChanged, tmnxSvcObjRowDescr=tmnxSvcObjRowDescr, tmnxSvcDhcpV6v0Group=tmnxSvcDhcpV6v0Group, svcDhcpLseStateBCastIpAddr=svcDhcpLseStateBCastIpAddr, tmnxSvcMCEPNotifyGroup=tmnxSvcMCEPNotifyGroup, svcMacNameTable=svcMacNameTable, tmnxNewMstiRegionalRootBridge=tmnxNewMstiRegionalRootBridge, custMultSvcSiteName=custMultSvcSiteName, svcRadiusPEDiscPolicy=svcRadiusPEDiscPolicy, svcPbbSrcBVplsMacAddr=svcPbbSrcBVplsMacAddr, tlsEgressMulticastGroupEntry=tlsEgressMulticastGroupEntry, svcVplsType=svcVplsType, newRootBridge=newRootBridge, svcTlsBgpVsiImportPolicy5=svcTlsBgpVsiImportPolicy5, svcDhcpLeaseStateActionEntry=svcDhcpLeaseStateActionEntry, svcDhcpLeaseModifyEntry=svcDhcpLeaseModifyEntry, svcEpipeBackboneTableLastChanged=svcEpipeBackboneTableLastChanged, svcDhcpLeaseRadiusUserName=svcDhcpLeaseRadiusUserName, svcTlsInfoEntry=svcTlsInfoEntry, hostConnectivityChAddr=hostConnectivityChAddr, svcDhcpLeaseServerLastRenew=svcDhcpLeaseServerLastRenew, tlsSpbMFibState=tlsSpbMFibState, svcDhcpLeaseOvrTable=svcDhcpLeaseOvrTable, custIngQosPortIdSchedStatsEntry=custIngQosPortIdSchedStatsEntry, tmnxSvcObsoletedV6v0Group=tmnxSvcObsoletedV6v0Group, svcTlsGroupSvcTmplName=svcTlsGroupSvcTmplName, custMssIngQosSPIR=custMssIngQosSPIR, tlsEgrMcGrpIpv6FilterId=tlsEgrMcGrpIpv6FilterId, pipActiveProtocolChange=pipActiveProtocolChange, svcSpbIfTable=svcSpbIfTable, svcDHCPMiscellaneousProblem=svcDHCPMiscellaneousProblem, custMultSvcSiteCreated=custMultSvcSiteCreated, svcIpipeInfoTable=svcIpipeInfoTable, tmnxCustomerBridgeId=tmnxCustomerBridgeId, svcApipeInfoEntry=svcApipeInfoEntry, svcTlsPmsiLastChanged=svcTlsPmsiLastChanged, tlsFdbLastStateChange=tlsFdbLastStateChange, svcTlsGroupStart=svcTlsGroupStart, custEgrQosPortIdSchedStatsEntry=custEgrQosPortIdSchedStatsEntry, svcDhcpLeaseSecondaryNbnsType=svcDhcpLeaseSecondaryNbnsType, svcIfSapCfgDefAppProfile=svcIfSapCfgDefAppProfile, tmnxSvcTlsBackbone6v0Group=tmnxSvcTlsBackbone6v0Group, svcVllSiteIdDfUpTime=svcVllSiteIdDfUpTime, tlsSpbFdbMSdpId=tlsSpbFdbMSdpId, svcMrpPolicyRowStatus=svcMrpPolicyRowStatus, svcEpipeBackboneLastChngd=svcEpipeBackboneLastChngd, tlsShgInfoEntry=tlsShgInfoEntry, svcPwRtLclPrefix=svcPwRtLclPrefix, svcTlsMacMoveMaxRate=svcTlsMacMoveMaxRate, iesIfLastMgmtChange=iesIfLastMgmtChange, svcDhcpLseStateDefaultRouter=svcDhcpLseStateDefaultRouter, svcTlsShcvRetryTimeout=svcTlsShcvRetryTimeout, svcTlsMacMoveNumRetries=svcTlsMacMoveNumRetries, svcMacName=svcMacName, svcDhcpLeaseOvrType=svcDhcpLeaseOvrType, svcTlsBackboneLDPMacFlush=svcTlsBackboneLDPMacFlush, custEgrQosPortIdArbitFwdOctsLo=custEgrQosPortIdArbitFwdOctsLo, svcDhcpLseStateCiAddrType=svcDhcpLseStateCiAddrType, svcEpipePbbOperStatusChanged=svcEpipePbbOperStatusChanged, svcPwRtLclPfxRDTable=svcPwRtLclPfxRDTable, svcIfSapCfgEntry=svcIfSapCfgEntry, tlsPipStpOperStatus=tlsPipStpOperStatus, svcPEDiscPolServerTable=svcPEDiscPolServerTable, tlsSpbFidFdbMLastUpdate=tlsSpbFidFdbMLastUpdate, svcTlsMrpAttrTblFullAlarmRaised=svcTlsMrpAttrTblFullAlarmRaised, LspIdList=LspIdList, svcPwRtRetryCount=svcPwRtRetryCount, svcTmplMtu=svcTmplMtu, svcTlsIPmsiAdminState=svcTlsIPmsiAdminState, svcEndPointTxActiveType=svcEndPointTxActiveType, custMultiSvcSiteEgrSchedPlcyStatsEntry=custMultiSvcSiteEgrSchedPlcyStatsEntry, custEgrQosPortIdArbitName=custEgrQosPortIdArbitName, svcDhcpLeaseSubProfString=svcDhcpLeaseSubProfString, tlsPipStpOutConfigBpdus=tlsPipStpOutConfigBpdus, svcTlsSiteIdShgMeshSdp=svcTlsSiteIdShgMeshSdp, custEgrQosPortIdArbitStatsTable=custEgrQosPortIdArbitStatsTable, tlsPipStpPortNum=tlsPipStpPortNum, svcEpipePbbEntry=svcEpipePbbEntry, svcDhcpLseStateIAID=svcDhcpLseStateIAID, svcTlsPmsiTableLastChanged=svcTlsPmsiTableLastChanged, svcArpHostShcvOperState=svcArpHostShcvOperState, svcTlsMacMoveRetryTimeout=svcTlsMacMoveRetryTimeout, CemSapEcid=CemSapEcid, custIngSchedPlcyStatsFwdPkt=custIngSchedPlcyStatsFwdPkt, custContact=custContact, svcDhcpLseStateOldCiAddr=svcDhcpLseStateOldCiAddr, tmnxSvcTlsBgpV8v0Group=tmnxSvcTlsBgpV8v0Group, svcTlsBackboneOperVplsSvcISID=svcTlsBackboneOperVplsSvcISID, svcPwRtLclPfxRDTblLastChanged=svcPwRtLclPfxRDTblLastChanged, tlsPipStpDesignatedBridge=tlsPipStpDesignatedBridge, tmnxSvcIesIfV6v0Group=tmnxSvcIesIfV6v0Group, svcDhcpLseStateBgpExportPolicy=svcDhcpLseStateBgpExportPolicy, svcVllSiteIdTblLastChanged=svcVllSiteIdTblLastChanged, custIngQosPortIdSchedName=custIngQosPortIdSchedName, svcDhcpLeaseSecondaryNbns=svcDhcpLeaseSecondaryNbns, svcPEDiscoveryPolicyPassword=svcPEDiscoveryPolicyPassword, SdpBindVcType=SdpBindVcType, tmnxSvcSiteV8v0Group=tmnxSvcSiteV8v0Group, svcTlsExtMvrpRegAttrCnt=svcTlsExtMvrpRegAttrCnt, tlsShgAutoLearnMacProtect=tlsShgAutoLearnMacProtect, svcDhcpLseStateDhcpServerAddr=svcDhcpLseStateDhcpServerAddr, svcMrpPlcyParamsISIDTblLastChgd=svcMrpPlcyParamsISIDTblLastChgd)
mibBuilder.exportSymbols("TIMETRA-SERV-MIB", svcTlsExtMvrpDeclaredAttrCnt=svcTlsExtMvrpDeclaredAttrCnt, custIngQosPortIdArbitFwdPkts=custIngQosPortIdArbitFwdPkts, custMssIngQosSchedInfoTable=custMssIngQosSchedInfoTable, svcArpHostLastAuth=svcArpHostLastAuth, svcTlsPropagateMacFlush=svcTlsPropagateMacFlush, svcDhcpLeaseAleEntry=svcDhcpLeaseAleEntry, svcTlsSendFlushOnBVplsFail=svcTlsSendFlushOnBVplsFail, tlsFdbEPMacOperVcId=tlsFdbEPMacOperVcId, svcDhcpLeaseIAID=svcDhcpLeaseIAID, tlsPipMstiPortRole=tlsPipMstiPortRole, tlsProtMacImplCount=tlsProtMacImplCount, svcDhcpLeaseBgpEntry=svcDhcpLeaseBgpEntry, tlsSpbFidMFibSdpId=tlsSpbFidMFibSdpId, tmnxSvcMSPwPeV9v0Group=tmnxSvcMSPwPeV9v0Group, svcDeleted=svcDeleted, tlsSpbFdbTable=tlsSpbFdbTable, tlsMFibInfoSrcAddr=tlsMFibInfoSrcAddr, tlsPipStpForwardTransitions=tlsPipStpForwardTransitions, tlsProtMacRowStatus=tlsProtMacRowStatus, svcArpHostTable=svcArpHostTable, svcTlsExtMvrpMaxAttributes=svcTlsExtMvrpMaxAttributes, svcArpHostIfLastMgmtChange=svcArpHostIfLastMgmtChange, svcArpHostBgpEntry=svcArpHostBgpEntry, TSapEgrQueueId=TSapEgrQueueId, svcTlsSpbL1FwdTreeTopoMcast=svcTlsSpbL1FwdTreeTopoMcast, svcDhcpLeasePersistKey=svcDhcpLeasePersistKey, custMultSvcSiteCurrentIngrSchedPlcy=custMultSvcSiteCurrentIngrSchedPlcy, svcIfDHCP6MsgStatsRcvd=svcIfDHCP6MsgStatsRcvd, svcTlsGroupSapTmplName=svcTlsGroupSapTmplName, custMssEgrQosSchedInfoEntry=custMssEgrQosSchedInfoEntry, svcRadiusDiscoveryShutdown=svcRadiusDiscoveryShutdown, svcTlsStpCistRegionalRoot=svcTlsStpCistRegionalRoot, SdpBFHundredthsOfPercent=SdpBFHundredthsOfPercent, tlsMFibStatsGrpInetAddr=tlsMFibStatsGrpInetAddr, svcEthCfmTable=svcEthCfmTable, tlsMFibInfoFwdOrBlk=tlsMFibInfoFwdOrBlk, svcArpHostOvrTypeId=svcArpHostOvrTypeId, svcDhcpLseStateFramedIpNetMask=svcDhcpLseStateFramedIpNetMask, svcDhcpManagedRouteEntry=svcDhcpManagedRouteEntry, tlsSpbFidFdbPortId=tlsSpbFidFdbPortId, IAIDType=IAIDType, tlsPipStpOutTcnBpdus=tlsPipStpOutTcnBpdus, tlsMFibSrcInetAddrType=tlsMFibSrcInetAddrType, svcEndPointName=svcEndPointName, tmnxSvcVllBgpGroup=tmnxSvcVllBgpGroup, svcTmplTlsPerSvcHashing=svcTmplTlsPerSvcHashing, svcApipeInfoTable=svcApipeInfoTable, tlsMFibInfoTable=tlsMFibInfoTable, tlsDhcpRestoreLseStateProblem=tlsDhcpRestoreLseStateProblem, svcTlsBgpVsiImportPolicy1=svcTlsBgpVsiImportPolicy1, tmnxSvcNotifyV9v0Group=tmnxSvcNotifyV9v0Group, svcDhcpLseStateLeaseSplitActive=svcDhcpLseStateLeaseSplitActive, tmnxSvc7750V6v0Compliance=tmnxSvc7750V6v0Compliance, svcDhcpLeaseSubscrIdent=svcDhcpLeaseSubscrIdent, svcTlsBgpADAdminStatus=svcTlsBgpADAdminStatus, svcTlsFdbTableFullHighWatermark=svcTlsFdbTableFullHighWatermark, svcEndPointTxActiveSdpFec=svcEndPointTxActiveSdpFec, svcTlsBgpEntry=svcTlsBgpEntry, custNextFreeId=custNextFreeId, svcTlsExtMmrpDeclaredAttrCnt=svcTlsExtMmrpDeclaredAttrCnt, svcIfSapCfgDefSlaProfile=svcIfSapCfgDefSlaProfile, svcDhcpLseStateSecondaryNbnsType=svcDhcpLseStateSecondaryNbnsType, svcMSPwPeEntry=svcMSPwPeEntry, svcMSPwPeSignaling=svcMSPwPeSignaling, staticHostDynamicMacIpAddress=staticHostDynamicMacIpAddress, tlsProtMacImplPortId=tlsProtMacImplPortId, svcTlsSiteIdDfChgCnt=svcTlsSiteIdDfChgCnt, svcBgpVplsLastChanged=svcBgpVplsLastChanged, svcTmplUserTable=svcTmplUserTable, iesIfShcvAction=iesIfShcvAction, iesIfOperStatus=iesIfOperStatus, svcPwRtStaticRtTable=svcPwRtStaticRtTable, svcMSPwPeTaiiGlobalId=svcMSPwPeTaiiGlobalId, tmnxSvc7750V8v0Compliance=tmnxSvc7750V8v0Compliance, svcTlsExtMmrpEndStationOnly=svcTlsExtMmrpEndStationOnly, tmnxArpHostV8v0Group=tmnxArpHostV8v0Group, iesIfType=iesIfType, svcDhcpLeaseOvrWrrWeight=svcDhcpLeaseOvrWrrWeight, custMultSvcSiteFrameBasedAccnt=custMultSvcSiteFrameBasedAccnt, svcArpHostTableLastChanged=svcArpHostTableLastChanged, svcDhcpLseStateSdpId=svcDhcpLseStateSdpId, tlsMFibGrpSrcStatsTable=tlsMFibGrpSrcStatsTable, svcIgmpTrkExpiryTime=svcIgmpTrkExpiryTime, svcArpHostBgpPrngPlcyName=svcArpHostBgpPrngPlcyName, tmnxSvc7450V8v0Compliance=tmnxSvc7450V8v0Compliance, tlsMFibInfoGrpAddr=tlsMFibInfoGrpAddr, svcTlsPmsiTable=svcTlsPmsiTable, custMssIngQosArbitStatsEntry=custMssIngQosArbitStatsEntry, tlsEgrMcGrpOperQinqFixedTagVal=tlsEgrMcGrpOperQinqFixedTagVal, svcMSPwPeTimeRemain=svcMSPwPeTimeRemain, tlsProtMacImplLocale=tlsProtMacImplLocale, svcL2MhRteState=svcL2MhRteState, svcEpMcEpStatsPktsTxConfig=svcEpMcEpStatsPktsTxConfig, custMssEgrQosArbitStatsFwdPkts=custMssEgrQosArbitStatsFwdPkts, svcTlsSpbUserSvcTable=svcTlsSpbUserSvcTable, tmnxSvcBsxV8v0Group=tmnxSvcBsxV8v0Group, tmnxCustV9v0Compliance=tmnxCustV9v0Compliance, svcPwRtStaticRtRowStatus=svcPwRtStaticRtRowStatus, custIngQosPortIdArbitFwdOcts=custIngQosPortIdArbitFwdOcts, svcDhcpLseStateOption82=svcDhcpLseStateOption82, svcTlsStpRootCost=svcTlsStpRootCost, svcEndPointForceSwitchOvrSdpFec=svcEndPointForceSwitchOvrSdpFec, svcPwSpeTaiiTable=svcPwSpeTaiiTable, svcArpHostBgpExportPolicy=svcArpHostBgpExportPolicy, iesIfIsaTnlNHDynAddrType=iesIfIsaTnlNHDynAddrType, svcVllBgpImportRteTarget=svcVllBgpImportRteTarget, svcTmplTlsFdbLocalAgeTime=svcTmplTlsFdbLocalAgeTime, custIngQosPortIdArbitStatsEntry=custIngQosPortIdArbitStatsEntry, svcTlsTempFloodTime=svcTlsTempFloodTime, PWTemplateId=PWTemplateId, tlsMstiRegionalRootPort=tlsMstiRegionalRootPort, svcTlsExtMmrpFailedRegCnt=svcTlsExtMmrpFailedRegCnt, svcDhcpLseStateVcId=svcDhcpLseStateVcId, svcTlsBgpADVsiPrefix=svcTlsBgpADVsiPrefix, svcEndPointTxActiveUpTime=svcEndPointTxActiveUpTime, iesIfName=iesIfName, svcTlsStpOperStatus=svcTlsStpOperStatus, tlsSpbFdbLocale=tlsSpbFdbLocale, svcArpHostOvrType=svcArpHostOvrType, svcArpHostOvrCIR=svcArpHostOvrCIR, svcNumEntries=svcNumEntries, tlsPipMstiEntry=tlsPipMstiEntry, svcDhcpLeaseBgpImportPolicy=svcDhcpLeaseBgpImportPolicy, svcMSPwPePrecedence=svcMSPwPePrecedence, svcPwRtStaticRtDstAddrType=svcPwRtStaticRtDstAddrType, svcDhcpLseStateShcvOperState=svcDhcpLseStateShcvOperState, svcDhcpLeaseStateModifyEntry=svcDhcpLeaseStateModifyEntry, svcOperGrpHoldUpTimeRemain=svcOperGrpHoldUpTimeRemain, svcTmplTlsTempFloodTime=svcTmplTlsTempFloodTime, svcBgpVplsEntry=svcBgpVplsEntry, custNumEntries=custNumEntries, svcDhcpLeaseWppState=svcDhcpLeaseWppState, svcTlsFdbTableFullAlarmCleared=svcTlsFdbTableFullAlarmCleared, svcVllSiteIdEncapValue=svcVllSiteIdEncapValue, custMultiSvcSiteIngSchedPlcyStatsTable=custMultiSvcSiteIngSchedPlcyStatsTable, svcTlsFdbTableFullAlarmRaised=svcTlsFdbTableFullAlarmRaised, tlsEgrMcGrpMacFilterId=tlsEgrMcGrpMacFilterId, svcArpHostRemainingTime=svcArpHostRemainingTime, tlsSpbFdbEntry=tlsSpbFdbEntry, custMultiSvcSiteEgrStatsEntry=custMultiSvcSiteEgrStatsEntry, svcTlsSpbL1BridgeId=svcTlsSpbL1BridgeId, svcEpipePbbTable=svcEpipePbbTable, tlsMFibInfoVcId=tlsMFibInfoVcId, svcEndPointForceSwitchOverSdpId=svcEndPointForceSwitchOverSdpId, svcDhcpLseStateBgpAuthKeyChain=svcDhcpLseStateBgpAuthKeyChain, svcEndPointIgnoreStandbySig=svcEndPointIgnoreStandbySig, custMssEgrQosArbitStatsFwdOctsLo=custMssEgrQosArbitStatsFwdOctsLo, custMultiSvcSiteIngSchedPlcyPortStatsEntry=custMultiSvcSiteIngSchedPlcyPortStatsEntry, tlsSpbFidFdbLocale=tlsSpbFidFdbLocale, svcBaseInfoTable=svcBaseInfoTable, svcTlsMacNotifAdminState=svcTlsMacNotifAdminState, svcDhcpManagedRouteStatus=svcDhcpManagedRouteStatus, svcDhcpLeaseStateModifyTable=svcDhcpLeaseStateModifyTable, svcArpHostSapEncapValue=svcArpHostSapEncapValue, svcPEDiscPolServerAddressType=svcPEDiscPolServerAddressType, svcTmplTlsStpBridgeHelloTime=svcTmplTlsStpBridgeHelloTime, svcEndPointMacLimit=svcEndPointMacLimit, svcTlsExtMmrpRegAttrCnt=svcTlsExtMmrpRegAttrCnt, tlsSpbMFibEntry=tlsSpbMFibEntry, tmnxSvcPEV6v0Group=tmnxSvcPEV6v0Group, svcDhcpLeaseCiAddrType=svcDhcpLeaseCiAddrType, svcTlsTempFloodChangeCount=svcTlsTempFloodChangeCount, tmnxSvcEpipeV6v0Group=tmnxSvcEpipeV6v0Group, svcTlsMacFlushOnFail=svcTlsMacFlushOnFail, svcTlsStpPrimaryBridge=svcTlsStpPrimaryBridge, custTraps=custTraps, svcMrpPolicyParamsAction=svcMrpPolicyParamsAction, svcDhcpLeaseSecondaryDns=svcDhcpLeaseSecondaryDns, svcDhcpLseStateModifyAncpString=svcDhcpLseStateModifyAncpString, tlsSpbFdbMEncapValue=tlsSpbFdbMEncapValue, svcTlsExtMvrpAttrTblLowWM=svcTlsExtMvrpAttrTblLowWM, tmnxSvc7710V6v0Compliance=tmnxSvc7710V6v0Compliance, iesIfVplsStatus=iesIfVplsStatus, tlsDhcpLseStatePopulateError=tlsDhcpLseStatePopulateError, svcVllBgpRowStatus=svcVllBgpRowStatus, svcMSPwPeRowStatus=svcMSPwPeRowStatus, svcDhcpLseStatePrimaryDns=svcDhcpLseStatePrimaryDns, tlsPipOutTcBitBpdus=tlsPipOutTcBitBpdus, svcArpHostSapPortId=svcArpHostSapPortId, svcTlsStpBridgeAddress=svcTlsStpBridgeAddress, svcDhcpLseStateRadiusUserName=svcDhcpLseStateRadiusUserName, svcMrpPolicyDefaultAction=svcMrpPolicyDefaultAction, svcWholesalerNumDynamicHosts=svcWholesalerNumDynamicHosts, svcRadiusUserNameType=svcRadiusUserNameType, svcPwRtPathHopIndex=svcPwRtPathHopIndex, svcDhcpLeaseSdpId=svcDhcpLeaseSdpId, svcMrpPolicyParamsISIDRowStatus=svcMrpPolicyParamsISIDRowStatus, svcArpHostLocale=svcArpHostLocale, svcPwSpeTaiiSaiiAcId=svcPwSpeTaiiSaiiAcId, svcEpipePbbSvcISID=svcEpipePbbSvcISID, svcDhcpLseStateServerLeaseEnd=svcDhcpLseStateServerLeaseEnd, custIngQosAssignmentPortId=custIngQosAssignmentPortId, protectedMacForNotify=protectedMacForNotify, svcTlsExtMvrpHoldTime=svcTlsExtMvrpHoldTime, iesIfCustId=iesIfCustId, svcPwRtLclPrefixRowStatus=svcPwRtLclPrefixRowStatus, svcMrpPlcyTableLastChgd=svcMrpPlcyTableLastChgd, svcArpHostShcvReplies=svcArpHostShcvReplies, svcDhcpLseStatePrimaryNbnsType=svcDhcpLseStatePrimaryNbnsType, svcMSPwPeAgi=svcMSPwPeAgi, svcTlsBgpADVsiExportPolicy2=svcTlsBgpADVsiExportPolicy2, svcMrpPolicyName=svcMrpPolicyName, svcTlsPbbIgmpSnpgMRtrTable=svcTlsPbbIgmpSnpgMRtrTable, tlsMstiManagedVlanListTable=tlsMstiManagedVlanListTable, StpPortRole=StpPortRole, svcDhcpLeaseModifySlaProfile=svcDhcpLeaseModifySlaProfile, svcWholesalerID=svcWholesalerID, tlsMFibLocale=tlsMFibLocale, svcPwRtPathEntry=svcPwRtPathEntry, svcPwRtStaticRoutes=svcPwRtStaticRoutes, svcArpHostStart=svcArpHostStart, TSapIngQueueId=TSapIngQueueId, svcOperGrpName=svcOperGrpName, svcPwSpeTaiiSaiiGlobalId=svcPwSpeTaiiSaiiGlobalId, tlsPipStpInConfigBpdus=tlsPipStpInConfigBpdus, iesGrpIfTable=iesGrpIfTable, tmnxTstpNotifyObjs=tmnxTstpNotifyObjs, svcTmplTlsTblLastChanged=svcTmplTlsTblLastChanged, timetraServicesMIBModule=timetraServicesMIBModule, svcArpHostOriginSubscrId=svcArpHostOriginSubscrId, svcPwRtLclPfxRDEntry=svcPwRtLclPfxRDEntry, tlsDhcpPacketProblem=tlsDhcpPacketProblem, svcEpipeBackboneTable=svcEpipeBackboneTable, svcEthCfmVMepExtensions=svcEthCfmVMepExtensions, custIngQosPortIdArbitStatsTable=custIngQosPortIdArbitStatsTable, vcpActiveProtocolChange=vcpActiveProtocolChange, svcTlsSiteIdTimerRemain=svcTlsSiteIdTimerRemain, svcTlsGroupAdminStatus=svcTlsGroupAdminStatus, svcDhcpLeasePoolName=svcDhcpLeasePoolName, svcDhcpManagedRouteInetAddrType=svcDhcpManagedRouteInetAddrType, svcTmplTlsLastChanged=svcTmplTlsLastChanged, svcTlsFdbTableSize=svcTlsFdbTableSize, svcSpbIfLocale=svcSpbIfLocale, svcTrapsPrefix=svcTrapsPrefix, TdmOptionsSigPkts=TdmOptionsSigPkts, svcDhcpLeaseBgpPrngPlcyName=svcDhcpLeaseBgpPrngPlcyName, svcTlsBgpADVsiImportPolicy3=svcTlsBgpADVsiImportPolicy3, svcTlsSiteIdSiteId=svcTlsSiteIdSiteId, custEgrSchedPlcyStatsFwdOct=custEgrSchedPlcyStatsFwdOct, ServType=ServType, svcArpHostBgpPeerAS=svcArpHostBgpPeerAS, svcTlsMrpAttrRegFailedReason=svcTlsMrpAttrRegFailedReason, svcArpHostIpAddrType=svcArpHostIpAddrType, svcTmplTlsMacMoveAdminStatus=svcTmplTlsMacMoveAdminStatus, topologyChangePipMajorState=topologyChangePipMajorState, svcArpHostIfMinAuthInterval=svcArpHostIfMinAuthInterval, custMultSvcSiteIngPolcrCtrlPolcy=custMultSvcSiteIngPolcrCtrlPolcy, svcEpipePbbBvplsDstMac=svcEpipePbbBvplsDstMac, svcDhcpLeaseCategoryMapName=svcDhcpLeaseCategoryMapName, svcSpbIfEncapValue=svcSpbIfEncapValue, svcBgpVplsAdminStatus=svcBgpVplsAdminStatus, svcTlsPbbIgmpSnpgMRtrSvcIdIVpls=svcTlsPbbIgmpSnpgMRtrSvcIdIVpls, tlsSpbFidFdbMEncapValue=tlsSpbFidFdbMEncapValue, svcDhcpLeaseServerId=svcDhcpLeaseServerId)
mibBuilder.exportSymbols("TIMETRA-SERV-MIB", svcVllBgpLastChanged=svcVllBgpLastChanged, svcArpHostMRtTable=svcArpHostMRtTable, svcTlsMrpAdminStatus=svcTlsMrpAdminStatus, tlsSpbMFibIsid=tlsSpbMFibIsid, svcTlsBgpADVsiImportPolicy4=svcTlsBgpADVsiImportPolicy4, tlsSpbFdbMPortId=tlsSpbFdbMPortId, svcPwRtBgpRoutes=svcPwRtBgpRoutes, svcDhcpLseStateNakNextRenew=svcDhcpLseStateNakNextRenew, tlsMFibStatsForwardedOctets=tlsMFibStatsForwardedOctets, svcEthCfmTunnelFaultNotification=svcEthCfmTunnelFaultNotification, svcPEDiscPolServerSecret=svcPEDiscPolServerSecret, svcPwSpeTaiiSaiiPrefix=svcPwSpeTaiiSaiiPrefix, svcTlsSpbTable=svcTlsSpbTable, svcDhcpLeaseDhcpServerAddrType=svcDhcpLeaseDhcpServerAddrType, svcMrpPolicyDescription=svcMrpPolicyDescription, iesIfIndex=iesIfIndex, tlsPipStpOperProtocol=tlsPipStpOperProtocol, svcDhcpLseStateBCastIpAddrType=svcDhcpLseStateBCastIpAddrType, svcDhcpLeaseRadCalledStationId=svcDhcpLeaseRadCalledStationId, tlsMFibSrcInetAddr=tlsMFibSrcInetAddr, svcVllSiteIdSiteActTimer=svcVllSiteIdSiteActTimer, svcAdminStatus=svcAdminStatus, tmnxCustV9v0Group=tmnxCustV9v0Group, iesGrpIfOperUpWhileEmpty=iesGrpIfOperUpWhileEmpty, svcMSPwRetryExpiredNotif=svcMSPwRetryExpiredNotif, svcTlsStpVcpOperProtocol=svcTlsStpVcpOperProtocol, svcEpMcEpStatsTable=svcEpMcEpStatsTable, custMultSvcSiteEgrPolcrCtrlPolcy=custMultSvcSiteEgrPolcrCtrlPolcy, svcDhcpLseStateBgpPeeringStatus=svcDhcpLseStateBgpPeeringStatus, custMultSvcSiteSubscriberMss=custMultSvcSiteSubscriberMss, tlsMstiInstanceId=tlsMstiInstanceId, svcEpipePbbLastStatusChange=svcEpipePbbLastStatusChange, iesIfIsaTnlNHDynAddr=iesIfIsaTnlNHDynAddr, tlsShgRestProtSrcMacAction=tlsShgRestProtSrcMacAction, svcDhcpLeaseServerLeaseEnd=svcDhcpLeaseServerLeaseEnd, svcTlsBgpTable=svcTlsBgpTable, L2ptProtocols=L2ptProtocols, tmnxSvc7750V10v0Compliance=tmnxSvc7750V10v0Compliance, tmnxSvcObjs=tmnxSvcObjs, svcDhcpSubAuthError=svcDhcpSubAuthError, svcDhcpLeaseSlaProfString=svcDhcpLeaseSlaProfString, svcMacNotifInterval=svcMacNotifInterval, svcArpHostVcId=svcArpHostVcId, svcBgpVplsTblLastChanged=svcBgpVplsTblLastChanged, tlsSpbFdbState=tlsSpbFdbState, svcVcSwitching=svcVcSwitching, svcOperGrpEntry=svcOperGrpEntry, svcTlsBgpVsiExportPolicy1=svcTlsBgpVsiExportPolicy1, iesIfDeleted=iesIfDeleted, svcDhcpLeaseClientId=svcDhcpLeaseClientId, tlsRdntGrpMemberEntry=tlsRdntGrpMemberEntry, svcVllSiteIdOperStatus=svcVllSiteIdOperStatus, svcTlsShcvInterval=svcTlsShcvInterval, custInfoTable=custInfoTable, svcPwRtPathRowStatus=svcPwRtPathRowStatus, svcArpHostOvrWrrWeight=svcArpHostOvrWrrWeight, iesIfVplsName=iesIfVplsName, CemSapReportAlarm=CemSapReportAlarm, svcDhcpLseStateNextHopMacAddr=svcDhcpLseStateNextHopMacAddr, tmnxSvcIesIfNHV10v0Group=tmnxSvcIesIfNHV10v0Group, svcEndPointTable=svcEndPointTable, tmnxCustCompliances=tmnxCustCompliances, svcDhcpCoAError=svcDhcpCoAError, svcDhcpLseStateNewChAddr=svcDhcpLseStateNewChAddr, svcMrpPolicyParamsLastChanged=svcMrpPolicyParamsLastChanged, svcSpbIfSvcId=svcSpbIfSvcId, tmnxServNotifications=tmnxServNotifications, tlsRdntGrpMemberIsSap=tlsRdntGrpMemberIsSap, tlsMFibVcId=tlsMFibVcId, svcTmplEntry=svcTmplEntry, tlsSpbFdbSdpId=tlsSpbFdbSdpId, tmnxSvcIesIfV10v0Group=tmnxSvcIesIfV10v0Group, svcTlsBgpImportRteTarget=svcTlsBgpImportRteTarget, newRootVcpState=newRootVcpState, svcDhcpLseStateSubProfString=svcDhcpLseStateSubProfString, tlsMFibGrpSrcStatsGrpAddr=tlsMFibGrpSrcStatsGrpAddr, svcPwRtPathHopRowStatus=svcPwRtPathHopRowStatus, svcTlsSpbL1FwdTreeTopoUcast=svcTlsSpbL1FwdTreeTopoUcast, svcTlsBgpADTable=svcTlsBgpADTable, svcDhcpLseStateBgpImportPolicy=svcDhcpLseStateBgpImportPolicy, svcPwSpeSaiiSvcId=svcPwSpeSaiiSvcId, iesIfParentIf=iesIfParentIf, TMrpPolicyDefaultAction=TMrpPolicyDefaultAction, svcDhcpLeaseEntry=svcDhcpLeaseEntry, tmnxTstpCompliances=tmnxTstpCompliances, tmnxSvcObjRow=tmnxSvcObjRow, svcMSPwPeTblLastChanged=svcMSPwPeTblLastChanged, svcNameTableLastChanged=svcNameTableLastChanged, svcArpHostRadiusClassAttr=svcArpHostRadiusClassAttr, svcTlsBgpRowStatus=svcTlsBgpRowStatus, svcTlsMacAgeing=svcTlsMacAgeing, svcEndPointMCEPPsvModeActive=svcEndPointMCEPPsvModeActive, tmnxSvcSpbGroup=tmnxSvcSpbGroup, svcArpHostOriginStrings=svcArpHostOriginStrings, svcCustId=svcCustId, svcDhcpLseStateInterDestId=svcDhcpLseStateInterDestId, tmnxSvcTlsV7v0Group=tmnxSvcTlsV7v0Group, svcArpHostMacAddr=svcArpHostMacAddr, tlsShgRestUnprotDstMac=tlsShgRestUnprotDstMac, svcTlsAllowIpIfBinding=svcTlsAllowIpIfBinding, TdmOptionsCasTrunkFraming=TdmOptionsCasTrunkFraming, custMultiServiceSiteEntry=custMultiServiceSiteEntry, svcTlsSpbL1McastDesigBridgeId=svcTlsSpbL1McastDesigBridgeId, tmnxSvcPwV8v0Group=tmnxSvcPwV8v0Group, svcTlsBgpADLastChanged=svcTlsBgpADLastChanged, svcEndPointMCEPPeerName=svcEndPointMCEPPeerName, svcArpHostOvrTypeName=svcArpHostOvrTypeName, svcTlsGroupTable=svcTlsGroupTable, tmnxSvcV6v0Group=tmnxSvcV6v0Group, tmnxSvcGrpObjs=tmnxSvcGrpObjs, svcTlsBackboneLDPMacFlushNotMine=svcTlsBackboneLDPMacFlushNotMine, svcTmplUsed=svcTmplUsed, tmnxSvc7750V9v0Compliance=tmnxSvc7750V9v0Compliance, tlsRdntGrpMemberRemoteNodeAddr=tlsRdntGrpMemberRemoteNodeAddr, tmnxServConformance=tmnxServConformance, MvplsPruneState=MvplsPruneState, tlsShgInfoTable=tlsShgInfoTable, svcDhcpLeaseActionEntry=svcDhcpLeaseActionEntry, svcTmplTlsMacMoveNumRetries=svcTmplTlsMacMoveNumRetries, tmnxSvcTlsPipV8v0Group=tmnxSvcTlsPipV8v0Group, custEgrQosPortIdSchedName=custEgrQosPortIdSchedName, svcArpHostIfNumHosts=svcArpHostIfNumHosts, svcArpHostRetailerIf=svcArpHostRetailerIf, svcPEDiscPolServerAddress=svcPEDiscPolServerAddress, svcMSPwPeAiiType=svcMSPwPeAiiType, svcDhcpLeaseInterDestId=svcDhcpLeaseInterDestId, tmnxSvcNotifyV10v0Group=tmnxSvcNotifyV10v0Group, svcTlsStpBridgeHelloTime=svcTlsStpBridgeHelloTime, svcTlsBgpVsiExportPolicy4=svcTlsBgpVsiExportPolicy4, svcTlsSpbUserSvcEntry=svcTlsSpbUserSvcEntry, svcTlsPmsiRowStatus=svcTlsPmsiRowStatus, svcDhcpLseStateSecondaryDns=svcDhcpLseStateSecondaryDns, svcDhcpLseStatePrimaryNbns=svcDhcpLseStatePrimaryNbns, svcArpHostIfMaxNumHosts=svcArpHostIfMaxNumHosts, svcMrpPolicyParamsDescription=svcMrpPolicyParamsDescription, svcPEDiscoveryPolicyName=svcPEDiscoveryPolicyName, svcTlsStpHoldTime=svcTlsStpHoldTime, svcTlsStpForwardDelay=svcTlsStpForwardDelay, tlsFdbVpnId=tlsFdbVpnId, svcBgpVplsMaxVeId=svcBgpVplsMaxVeId, svcPwRtStaticRtDstPrefix=svcPwRtStaticRtDstPrefix, svcMSPwPeSaiiGlobalId=svcMSPwPeSaiiGlobalId, svcTlsBgpVsiImportPolicy2=svcTlsBgpVsiImportPolicy2, iesIfDescription=iesIfDescription, svcIfSapCfgDefSubIdent=svcIfSapCfgDefSubIdent, iesIfShcvSource=iesIfShcvSource, svcMSPwPeRetryTimer=svcMSPwPeRetryTimer, tlsMstiMvplsRowStatus=tlsMstiMvplsRowStatus, iesIfFwdServId=iesIfFwdServId, svcMSPwPeAutoConfig=svcMSPwPeAutoConfig, svcDhcpLeaseOvrPIR=svcDhcpLeaseOvrPIR, svcDhcpLseStateShcvReplyTime=svcDhcpLseStateShcvReplyTime, svcDhcpManagedRoutePrefixLen=svcDhcpManagedRoutePrefixLen, svcEndPointRowStatus=svcEndPointRowStatus, svcMrpPolicyParamsISIDHigh=svcMrpPolicyParamsISIDHigh, svcTlsBackboneInfoEntry=svcTlsBackboneInfoEntry, tlsEgrMcGrpRowStatus=tlsEgrMcGrpRowStatus, iesIfEntry=iesIfEntry, tlsRdntGrpMemberPort=tlsRdntGrpMemberPort, svcTlsBackboneOperSrcMac=svcTlsBackboneOperSrcMac, svcDhcpLseStateOriginSubscrId=svcDhcpLseStateOriginSubscrId, svcTlsExtMvrpAttributeCount=svcTlsExtMvrpAttributeCount, svcArpHostIfAdminState=svcArpHostIfAdminState, svcIfDHCP6MsgStatsLstClrd=svcIfDHCP6MsgStatsLstClrd, svcInterASMvpn=svcInterASMvpn, custMultSvcSiteIngressSchedulerPolicy=custMultSvcSiteIngressSchedulerPolicy, svcOperGrpNumMonitoring=svcOperGrpNumMonitoring, svcApipeInterworking=svcApipeInterworking, tlsPipStpPortState=tlsPipStpPortState, tmnxSvcIesIfV8v0Group=tmnxSvcIesIfV8v0Group, custMssIngQosArbitStatsFwdPktsHi=custMssIngQosArbitStatsFwdPktsHi, svcIfSapCfgDefSubProfile=svcIfSapCfgDefSubProfile, svcTlsBgpADEntry=svcTlsBgpADEntry, svcTlsStpHelloTime=svcTlsStpHelloTime, tmnxSvc7450V7v0Compliance=tmnxSvc7450V7v0Compliance, svcTmplTlsDiscardUnknownDest=svcTmplTlsDiscardUnknownDest, custDeleted=custDeleted, svcTlsCustId=svcTlsCustId, svcTmplTlsFdbTableFullLowWMark=svcTmplTlsFdbTableFullLowWMark, svcOperGrpTblLastChanged=svcOperGrpTblLastChanged, svcTlsStpMaxAge=svcTlsStpMaxAge, custDescription=custDescription, svcSpbIfIsisInstance=svcSpbIfIsisInstance, tlsShgInstanceId=tlsShgInstanceId, svcTmplTlsSecPortsCumFactor=svcTmplTlsSecPortsCumFactor, custEgrSchedPlcyPortStatsFwdOct=custEgrSchedPlcyPortStatsFwdOct, svcDhcpLeaseModifyTable=svcDhcpLeaseModifyTable, tlsPipStpInsideRegion=tlsPipStpInsideRegion, svcTlsMrpFloodTime=svcTlsMrpFloodTime, svcArpHostMRtAddrType=svcArpHostMRtAddrType, svcTlsBgpADRowStatus=svcTlsBgpADRowStatus, custMultSvcSiteTodSuite=custMultSvcSiteTodSuite, svcMrpPolicyEntry=svcMrpPolicyEntry, svcEndPointActiveHoldDelay=svcEndPointActiveHoldDelay, svcIfDHCP6MsgStatsDropped=svcIfDHCP6MsgStatsDropped, tlsProtectedMacEntry=tlsProtectedMacEntry, svcOperGrpHoldUpTime=svcOperGrpHoldUpTime, tlsPipInfoEntry=tlsPipInfoEntry, svcMSPwPeAdminStatus=svcMSPwPeAdminStatus, svcHostAddr=svcHostAddr, svcDhcpLeaseDefaultRouterTp=svcDhcpLeaseDefaultRouterTp, tlsRdntGrpEntry=tlsRdntGrpEntry, svcType=svcType, svcTlsStpCistRegionalRootPort=svcTlsStpCistRegionalRootPort, svcTlsPriPortsCumulativeFactor=svcTlsPriPortsCumulativeFactor, iesIfAllowUnmatchingSubnets=iesIfAllowUnmatchingSubnets, svcDhcpLseStatePersistKey=svcDhcpLseStatePersistKey, custMssIngQosSName=custMssIngQosSName, custMultiSvcSiteEgrSchedPlcyPortStatsTable=custMultiSvcSiteEgrSchedPlcyPortStatsTable, tlsRdntGrpMemberEncap=tlsRdntGrpMemberEncap, tmnxOldSdpBindTlsStpPortState=tmnxOldSdpBindTlsStpPortState, svcVllSiteIdLastChanged=svcVllSiteIdLastChanged, svcDescription=svcDescription, iesIfLastStatusChange=iesIfLastStatusChange, custEgrSchedPlcyStatsFwdPkt=custEgrSchedPlcyStatsFwdPkt, svcDhcpLseStateCiAddrMaskLen=svcDhcpLseStateCiAddrMaskLen, svcDhcpLeaseStateTable=svcDhcpLeaseStateTable, tmnxCustCompliance=tmnxCustCompliance, svcEpipePbbTableLastChanged=svcEpipePbbTableLastChanged, svcEpipePbbOperState=svcEpipePbbOperState, custEgrQosSchedStatsForwardedPackets=custEgrQosSchedStatsForwardedPackets, svcMSPwPeRetryExpired=svcMSPwPeRetryExpired, tmnxArpHostV10v0Group=tmnxArpHostV10v0Group, svcArpHostDefaultSessionTimeout=svcArpHostDefaultSessionTimeout, svcRadiusUserName=svcRadiusUserName, custIngQosPortSchedFwdPkts=custIngQosPortSchedFwdPkts, svcOperGrpRowStatus=svcOperGrpRowStatus, svcDhcpLeaseDhcpClientAddr=svcDhcpLeaseDhcpClientAddr, svcTlsStpAdminStatus=svcTlsStpAdminStatus, tlsMFibEntry=tlsMFibEntry, svcTlsSiteIdName=svcTlsSiteIdName, svcPwRtStaticRtLastChange=svcPwRtStaticRtLastChange, svcPwSpeSaiiOperSdpBind1=svcPwSpeSaiiOperSdpBind1, ArpHostInfoOrigin=ArpHostInfoOrigin, svcArpHostRetailerSvcId=svcArpHostRetailerSvcId, tmnxCustV8v0Group=tmnxCustV8v0Group, tmnxSvcNotifyObjsV6v0Group=tmnxSvcNotifyObjsV6v0Group, svcDhcpLeaseSecondaryDnsType=svcDhcpLeaseSecondaryDnsType, iesIfRowStatus=iesIfRowStatus, svcArpHostAppProfString=svcArpHostAppProfString, custMultSvcSiteAssignment=custMultSvcSiteAssignment, svcVllSiteIdSiteId=svcVllSiteIdSiteId, svcTlsStpTopologyChangeActive=svcTlsStpTopologyChangeActive, svcCtrlSvcId=svcCtrlSvcId, svcCreated=svcCreated, svcWholesalerNumStaticHosts=svcWholesalerNumStaticHosts, svcVRouterId=svcVRouterId, ServObjDesc=ServObjDesc, tlsSpbMFibTable=tlsSpbMFibTable, custLastMgmtChange=custLastMgmtChange, svcMacNotifCount=svcMacNotifCount, macPinningPinnedRowDescr=macPinningPinnedRowDescr, tlsRdntGrpRowStatus=tlsRdntGrpRowStatus, tlsFdbBackboneDstMac=tlsFdbBackboneDstMac)
mibBuilder.exportSymbols("TIMETRA-SERV-MIB", svcTmplTlsStpVersion=svcTmplTlsStpVersion, svcIfSapCfgDefFilterProfile=svcIfSapCfgDefFilterProfile, tmnxSvcRoutedCOV9v0Group=tmnxSvcRoutedCOV9v0Group, tlsSpbFidMFibVcId=tlsSpbFidMFibVcId, svcDhcpLseStateOldChAddr=svcDhcpLseStateOldChAddr, custInfoEntry=custInfoEntry, svcTlsBgpVsiImportPolicy3=svcTlsBgpVsiImportPolicy3, svcPwSpeSaiiTaiiPrefix=svcPwSpeSaiiTaiiPrefix, svcTlsExtEntry=svcTlsExtEntry, svcDhcpLeaseStateActionTable=svcDhcpLeaseStateActionTable, svcPwSpeTaiiOperSdpBind1=svcPwSpeTaiiOperSdpBind1, tmnxArpHostNotifyGroup=tmnxArpHostNotifyGroup, svcEndPointMCEPPeerAddrType=svcEndPointMCEPPeerAddrType, iesIfIPv6ConfigAllowed=iesIfIPv6ConfigAllowed, svcPwSpeSaiiTaiiAcId=svcPwSpeSaiiTaiiAcId, custMssEgrQosSLastMgmtChange=custMssEgrQosSLastMgmtChange, svcTlsMfibTableFullHighWatermark=svcTlsMfibTableFullHighWatermark, svcArpHostBgpAuthKeyChain=svcArpHostBgpAuthKeyChain, svcPwRtStaticRtTblLastChgd=svcPwRtStaticRtTblLastChgd, svcTlsBgpADVsiImportPolicy5=svcTlsBgpADVsiImportPolicy5, svcTlsBackboneUseSapBMac=svcTlsBackboneUseSapBMac, svcTlsSpbL1BridgePriority=svcTlsSpbL1BridgePriority, svcName=svcName, custMssEgrQosArbitStatsFwdOctsHi=custMssEgrQosArbitStatsFwdOctsHi, svcL2MhRteEntry=svcL2MhRteEntry, svcL2MhRteNextHop=svcL2MhRteNextHop, tmnxArpHostNotifyObjsGroup=tmnxArpHostNotifyObjsGroup, tmnxSvc7750V6v1Compliance=tmnxSvc7750V6v1Compliance, tstpTrapsPrefix=tstpTrapsPrefix, svcTlsSiteIdShgName=svcTlsSiteIdShgName, iesIfShcvRetryCount=iesIfShcvRetryCount, svcArpHostPopulateError=svcArpHostPopulateError, svcMrpPolicyParamsISIDTable=svcMrpPolicyParamsISIDTable, tlsFdbInfoEntry=tlsFdbInfoEntry, iesIfIsaTnlNHEntry=iesIfIsaTnlNHEntry, svcDhcpLseStateChAddr=svcDhcpLseStateChAddr, tlsSpbFdbPortId=tlsSpbFdbPortId, tmnxSvcIpipeV7v0Group=tmnxSvcIpipeV7v0Group, iesIfShcvFamily=iesIfShcvFamily, custMssIngQosArbitStatsFwdOcts=custMssIngQosArbitStatsFwdOcts, tlsRdntGrpTable=tlsRdntGrpTable, tlsEgrMcGrpChainLimit=tlsEgrMcGrpChainLimit, tlsShgSiteName=tlsShgSiteName, svcDhcpLseStateSessionTimeout=svcDhcpLseStateSessionTimeout, svcTlsGroupOperStatusChanged=svcTlsGroupOperStatusChanged, svcDhcpLeaseShcvChecks=svcDhcpLeaseShcvChecks, svcOperGrpTable=svcOperGrpTable, svcTlsSpbRowStatus=svcTlsSpbRowStatus, svcTlsSpbUserSvcLastUpdate=svcTlsSpbUserSvcLastUpdate, svcTlsSiteIdTable=svcTlsSiteIdTable, tlsSpbFidFdbLastUpdate=tlsSpbFidFdbLastUpdate, tlsRdntGrpLastMgmtChange=tlsRdntGrpLastMgmtChange, svcHostAddrType=svcHostAddrType, svcOperStatus=svcOperStatus, svcTlsMfibTableSize=svcTlsMfibTableSize, custMssIngQosArbitStatsTable=custMssIngQosArbitStatsTable, svcIfSapCfgDefSubIdentString=svcIfSapCfgDefSubIdentString, svcHashLabel=svcHashLabel, tlsMFibSdpId=tlsMFibSdpId, tlsMstiMvplsMaxVlanTag=tlsMstiMvplsMaxVlanTag, tmnxSvcTlsMstiV6v0Group=tmnxSvcTlsMstiV6v0Group, svcMrpPolicyParamsISIDLastChgd=svcMrpPolicyParamsISIDLastChgd, tlsMFibInfoSdpId=tlsMFibInfoSdpId, svcPwRtPathHopEntry=svcPwRtPathHopEntry, custMultSvcSiteScope=custMultSvcSiteScope, svcTlsFdbLocalAgeTime=svcTlsFdbLocalAgeTime, svcNameRowStatus=svcNameRowStatus, custMssEgrQosArbitStatsFwdPktsHi=custMssEgrQosArbitStatsFwdPktsHi, svcTlsBgpADImportRteTarget=svcTlsBgpADImportRteTarget, svcMacNameRowStatus=svcMacNameRowStatus, svcDhcpLeaseWppPortalRouter=svcDhcpLeaseWppPortalRouter, tlsPipMstiTable=tlsPipMstiTable, tmnxSvcConformance=tmnxSvcConformance, svcDhcpLeasePrimaryNbnsType=svcDhcpLeasePrimaryNbnsType, svcEpMcEpStatsPktsTxState=svcEpMcEpStatsPktsTxState, custMssEgrQosSSummedCIR=custMssEgrQosSSummedCIR, svcTlsExtTable=svcTlsExtTable, svcMSPwPeRetryCount=svcMSPwPeRetryCount, svcDhcpProxyError=svcDhcpProxyError, svcDhcpLseStateDefaultRouterTp=svcDhcpLseStateDefaultRouterTp, svcTlsGroupLastError=svcTlsGroupLastError, svcDhcpLeaseTable=svcDhcpLeaseTable, svcRadiusDiscovery=svcRadiusDiscovery, svcDhcpLeaseModInterDestId=svcDhcpLeaseModInterDestId, svcMgmtVpls=svcMgmtVpls, svcTmplRowStatus=svcTmplRowStatus, tlsSpbFdbMVcId=tlsSpbFdbMVcId, tlsMstiEntry=tlsMstiEntry, tmnxSvcV9v0Group=tmnxSvcV9v0Group, tlsMFibGrpMacAddr=tlsMFibGrpMacAddr, tlsShgCustId=tlsShgCustId, svcTlsGroupId=svcTlsGroupId, svcTlsFdbRemoteAgeTime=svcTlsFdbRemoteAgeTime, tmnxSvcOperGrpV9v0Group=tmnxSvcOperGrpV9v0Group, svcArpHostIfEntry=svcArpHostIfEntry, tlsMFibStatsSrcInetAddrType=tlsMFibStatsSrcInetAddrType, svcTmplTlsMacAgeing=svcTmplTlsMacAgeing, svcTlsMrpAttrValue=svcTlsMrpAttrValue, tlsProtMacImplSdpBindId=tlsProtMacImplSdpBindId, tlsEgressMulticastGroupTable=tlsEgressMulticastGroupTable, svcVllSiteIdDesignatedFwdr=svcVllSiteIdDesignatedFwdr, svcPwRtPathHopAddrType=svcPwRtPathHopAddrType, custMultiServiceSiteTable=custMultiServiceSiteTable, svcTmplUserCreatorSvcId=svcTmplUserCreatorSvcId, svcArpHostPopulateErr=svcArpHostPopulateErr, tlsSpbFidFdbMSdpId=tlsSpbFidFdbMSdpId, TlsBpduTranslation=TlsBpduTranslation, svcDhcpLeaseInterfaceId=svcDhcpLeaseInterfaceId, svcPwRtLclPrefixGlobalId=svcPwRtLclPrefixGlobalId, svcPEDiscPolServerEntry=svcPEDiscPolServerEntry, topologyChangeVcpState=topologyChangeVcpState, tlsMstiLastMgmtChange=tlsMstiLastMgmtChange, svcDhcpLeaseBgpPeeringStatus=svcDhcpLeaseBgpPeeringStatus, svcPEDiscPolServerRowStatus=svcPEDiscPolServerRowStatus, iesIfDefaultPrimaryDnsIPv6Addr=iesIfDefaultPrimaryDnsIPv6Addr, TMrpPolicyAction=TMrpPolicyAction, tlsMFibInfoEntry=tlsMFibInfoEntry, tlsSpbFdbMacAddr=tlsSpbFdbMacAddr, macPinningViolatingRowDescr=macPinningViolatingRowDescr, svcDhcpLeaseStateEntry=svcDhcpLeaseStateEntry, tmnxCustV6v0Group=tmnxCustV6v0Group, iesIfIsaTnlNHStaticAddrType=iesIfIsaTnlNHStaticAddrType, svcEpipePbbBvplsDstMacName=svcEpipePbbBvplsDstMacName, tmnxSvcTlsV6v0Group=tmnxSvcTlsV6v0Group, tmnxSvcTlsFdbV6v0Group=tmnxSvcTlsFdbV6v0Group, tlsMFibEncapValue=tlsMFibEncapValue, tlsFdbNumIVplsMac=tlsFdbNumIVplsMac, svcDhcpLeaseModifyAncpString=svcDhcpLeaseModifyAncpString, tlsPipMstiDesignatedBridge=tlsPipMstiDesignatedBridge, svcDhcpLeaseShcvOperState=svcDhcpLeaseShcvOperState, svcNotifSapPortId=svcNotifSapPortId, tmnxEndPointTxActiveChanged=tmnxEndPointTxActiveChanged, svcTlsStpBridgeForwardDelay=svcTlsStpBridgeForwardDelay, svcVllBgpExportRteTarget=svcVllBgpExportRteTarget, svcArpHostOvrEntry=svcArpHostOvrEntry, svcTmplTlsTable=svcTmplTlsTable, svcDhcpLeaseModifySubProfile=svcDhcpLeaseModifySubProfile, svcDhcpLseStateOriginStrings=svcDhcpLseStateOriginStrings, svcTmplTlsStpHoldCount=svcTmplTlsStpHoldCount, svcDhcpLeaseModifyAppProfile=svcDhcpLeaseModifyAppProfile, svcTmplName=svcTmplName, svcTlsPbbIgmpSnpgMRtrMacName=svcTlsPbbIgmpSnpgMRtrMacName, svcMacNameTableLastChanged=svcMacNameTableLastChanged, svcEndPointEntry=svcEndPointEntry, svcPEDiscPolServerPort=svcPEDiscPolServerPort, tlsFdbEPMacOperSdpId=tlsFdbEPMacOperSdpId, svcMrpPolicyParamsEntryId=svcMrpPolicyParamsEntryId, svcEpipeBackboneForceQTagFwd=svcEpipeBackboneForceQTagFwd, tmnxCustGroups=tmnxCustGroups, svcArpHostBgpTable=svcArpHostBgpTable, svcDhcpManagedRouteTable=svcDhcpManagedRouteTable, svcDhcpLeaseIAIDType=svcDhcpLeaseIAIDType, svcTmplTlsStpBridgeMaxAge=svcTmplTlsStpBridgeMaxAge, tmnxSvc7450V6v1Compliance=tmnxSvc7450V6v1Compliance, tmnxSvcV7v0Group=tmnxSvcV7v0Group, custMultSvcSiteCurrentEgrSchedPlcy=custMultSvcSiteCurrentEgrSchedPlcy, svcMacNotificationGroup=svcMacNotificationGroup, svcPEDiscoveryPolicyInterval=svcPEDiscoveryPolicyInterval, iesGrpIfRedInterface=iesGrpIfRedInterface, svcDhcpLeasePrimaryNbns=svcDhcpLeasePrimaryNbns, svcDhcpLseStateOriginLeaseInfo=svcDhcpLseStateOriginLeaseInfo, tlsSpbFidFdbMLocale=tlsSpbFidFdbMLocale, svcIpipeInfoTableLastMgmtChange=svcIpipeInfoTableLastMgmtChange, svcIpipeIpv6CeAddressDiscovery=svcIpipeIpv6CeAddressDiscovery, svcDhcpPacketProblem=svcDhcpPacketProblem, tmnxSvcRoutedCOV10v0Group=tmnxSvcRoutedCOV10v0Group, svcEndPointTxActiveChangeCount=svcEndPointTxActiveChangeCount, svcTlsDHCPLseStatePopulateErr=svcTlsDHCPLseStatePopulateErr, svcTlsL2ptTermEnabled=svcTlsL2ptTermEnabled, svcDhcpLseStateModifySlaProfile=svcDhcpLseStateModifySlaProfile, svcDhcpLeaseFramedIpNetMaskTp=svcDhcpLeaseFramedIpNetMaskTp, tlsMFibPortId=tlsMFibPortId, svcDhcpLseStateDhcpClientAddr=svcDhcpLseStateDhcpClientAddr, svcMSPwPePathName=svcMSPwPePathName, custMssIngQosArbitName=custMssIngQosArbitName, custMultiSvcSiteIngSchedPlcyPortStatsTable=custMultiSvcSiteIngSchedPlcyPortStatsTable, svcPwRtLclPrefixTable=svcPwRtLclPrefixTable, tlsEgrMcGrpEncapType=tlsEgrMcGrpEncapType, svcVpnId=svcVpnId, svcArpHostSlaProfString=svcArpHostSlaProfString, svcArpHostBgpImportPolicy=svcArpHostBgpImportPolicy, svcMacNameEntry=svcMacNameEntry, svcBaseInfoEntry=svcBaseInfoEntry, svcDhcpLeaseModifySubIndent=svcDhcpLeaseModifySubIndent, svcPwRtLclPfxRDCommunity=svcPwRtLclPfxRDCommunity, tlsEgrMcGrpLastMgmtChange=tlsEgrMcGrpLastMgmtChange, custMssEgrQosArbitStatsEntry=custMssEgrQosArbitStatsEntry, svcTlsBgpADVplsId=svcTlsBgpADVplsId, custEgrQosPortSchedFwdPkts=custEgrQosPortSchedFwdPkts, custEgrQosPortSchedFwdOctets=custEgrQosPortSchedFwdOctets, svcTlsExtMacReNotifInterval=svcTlsExtMacReNotifInterval, iesIfDefaultSecondaryDnsIPv6Addr=iesIfDefaultSecondaryDnsIPv6Addr, svcTlsStpVirtualRootBridgeStatus=svcTlsStpVirtualRootBridgeStatus, svcOperGrpLastChange=svcOperGrpLastChange, svcDhcpLeaseLocale=svcDhcpLeaseLocale, svcTmplTlsMacMoveMaxRate=svcTmplTlsMacMoveMaxRate, hostConnectivityCiAddr=hostConnectivityCiAddr, svcMSPwPeLastChange=svcMSPwPeLastChange, svcEpMcEpStatsPktsTxFailed=svcEpMcEpStatsPktsTxFailed, svcOperGrpHoldDownTimeRemain=svcOperGrpHoldDownTimeRemain, tlsRdntGrpMemberRemoteNodeAddrTp=tlsRdntGrpMemberRemoteNodeAddrTp, svcIgmpTrkGroup=svcIgmpTrkGroup, svcEthCfmEntry=svcEthCfmEntry, svcTlsDHCPLseStRestoreProblem=svcTlsDHCPLseStRestoreProblem, tlsMFibGrpInetAddr=tlsMFibGrpInetAddr, hostConnectivityCiAddrType=hostConnectivityCiAddrType, svcTlsBgpADVsiExportPolicy3=svcTlsBgpADVsiExportPolicy3, svcTlsSpbFid=svcTlsSpbFid, svcDHCPLseStateRestoreProblem=svcDHCPLseStateRestoreProblem, custMssIngQosSRowStatus=custMssIngQosSRowStatus, iesIfAdminStatus=iesIfAdminStatus, tlsPipInfoTable=tlsPipInfoTable, svcEpMcEpStatsPktsRxState=svcEpMcEpStatsPktsRxState, svcTlsDiscardUnknownDest=svcTlsDiscardUnknownDest, svcTlsFdbNumDhcpEntries=svcTlsFdbNumDhcpEntries, tlsMstiRegionalRoot=tlsMstiRegionalRoot, tmnxNewCistRegionalRootBridge=tmnxNewCistRegionalRootBridge, svcTlsMfibTableFullAlarmRaised=svcTlsMfibTableFullAlarmRaised, svcMtu=svcMtu, svcEndPointSuppressStandbySig=svcEndPointSuppressStandbySig, svcEPMCEPPassiveModePassive=svcEPMCEPPassiveModePassive, MstiInstanceIdOrZero=MstiInstanceIdOrZero, svcTmplTlsStpAdminStatus=svcTmplTlsStpAdminStatus, tmnxSvcObsoletedV8v0Group=tmnxSvcObsoletedV8v0Group, svcWholesalerInfoEntry=svcWholesalerInfoEntry, custMssEgrQosArbitStatsTable=custMssEgrQosArbitStatsTable, tlsRdntGrpName=tlsRdntGrpName, svcTlsBgpVsiExportPolicy5=svcTlsBgpVsiExportPolicy5, svcNumSdps=svcNumSdps, svcVllSiteIdTimerRemain=svcVllSiteIdTimerRemain, svcTlsStpRegionRevision=svcTlsStpRegionRevision, svcDhcpLseStatePrimaryDnsType=svcDhcpLseStatePrimaryDnsType, tlsSpbMFibMacAddr=tlsSpbMFibMacAddr, svcPwRtLclPfxRDLastChange=svcPwRtLclPfxRDLastChange, svcDhcpLeaseBgpAuthKeyChain=svcDhcpLeaseBgpAuthKeyChain, svcMSPwPeStandbySigSlave=svcMSPwPeStandbySigSlave, tlsSpbFdbMState=tlsSpbFdbMState, tlsMFibGrpInetAddrType=tlsMFibGrpInetAddrType, svcDhcpLeaseRemainLseTime=svcDhcpLeaseRemainLseTime, custIngQosSchedName=custIngQosSchedName, tlsMFibSvcId=tlsMFibSvcId, svcPwRtBootTimerRemain=svcPwRtBootTimerRemain, svcTmplTlsFdbRemoteAgeTime=svcTmplTlsFdbRemoteAgeTime, custMssIngQosSCIR=custMssIngQosSCIR, custMssIngQosArbitStatsFwdPkts=custMssIngQosArbitStatsFwdPkts, svcTlsExtMvrpFailedRegCnt=svcTlsExtMvrpFailedRegCnt, svcDhcpLeaseWppTable=svcDhcpLeaseWppTable, tmnxSvcDhcpBgpV7v0Group=tmnxSvcDhcpBgpV7v0Group, svcPwRtStaticRtDstAddr=svcPwRtStaticRtDstAddr, svcL2MhRteSiteId=svcL2MhRteSiteId, svcDhcpLseStateRemainLseTime=svcDhcpLseStateRemainLseTime, svcPwRtPathLastChange=svcPwRtPathLastChange, svcTlsTempFloodActive=svcTlsTempFloodActive, iesGrpIfPolicyControl=iesGrpIfPolicyControl)
mibBuilder.exportSymbols("TIMETRA-SERV-MIB", custIngSchedPlcyPortStatsFwdOct=custIngSchedPlcyPortStatsFwdOct, svcDhcpLseStateRetailerSvcId=svcDhcpLseStateRetailerSvcId, svcVllSiteIdName=svcVllSiteIdName, svcTlsBgpADVsiImportPolicy2=svcTlsBgpADVsiImportPolicy2, svcTlsBackboneVplsSvcId=svcTlsBackboneVplsSvcId, tlsMFibGrpSrcStatsForwardedPkts=tlsMFibGrpSrcStatsForwardedPkts, tlsFdbSdpId=tlsFdbSdpId, SdpId=SdpId, tmnxSvcMvrpV8v0Group=tmnxSvcMvrpV8v0Group, svcPwRtPathHopTblLastChgd=svcPwRtPathHopTblLastChgd, custIngSchedPlcyStatsFwdOct=custIngSchedPlcyStatsFwdOct, tmnxSvcTlsFdbV7v0Group=tmnxSvcTlsFdbV7v0Group, tlsPipInTcBitBpdus=tlsPipInTcBitBpdus, svcTlsMrpMaxAttributes=svcTlsMrpMaxAttributes, svcDhcpLseStateForceRenew=svcDhcpLseStateForceRenew, svcTlsIPmsiDataDelayIntvl=svcTlsIPmsiDataDelayIntvl, tmnxFailureDescription=tmnxFailureDescription, tlsRdntGrpMemberRowStatus=tlsRdntGrpMemberRowStatus, svcTlsBackboneVplsStp=svcTlsBackboneVplsStp, svcTlsSiteDesigFwdrChg=svcTlsSiteDesigFwdrChg, tmnxSvcTlsEgrV6v0Group=tmnxSvcTlsEgrV6v0Group, svcVllSiteIdAdminStatus=svcVllSiteIdAdminStatus, svcIfSapCfgLastMgmtChange=svcIfSapCfgLastMgmtChange, svcApipeSignaledVllTypeOverride=svcApipeSignaledVllTypeOverride, svcTmplSvcCount=svcTmplSvcCount, svcTlsMacPinningViolation=svcTlsMacPinningViolation, svcPwRtBootTimer=svcPwRtBootTimer, tmnxPipStpExcepCondStateChng=tmnxPipStpExcepCondStateChng, custMultiSvcSiteEgrSchedPlcyStatsTable=custMultiSvcSiteEgrSchedPlcyStatsTable, svcTmplCustId=svcTmplCustId, custMultSvcSiteIntendedEgrSchedPlcy=custMultSvcSiteIntendedEgrSchedPlcy, tlsSpbFidMFibLastUpdate=tlsSpbFidMFibLastUpdate, svcTlsBackboneInfoTable=svcTlsBackboneInfoTable, iesIfTable=iesIfTable, tlsDhcpLseStateNewChAddr=tlsDhcpLseStateNewChAddr, svcNumMcStandbySaps=svcNumMcStandbySaps, svcPEDiscoveryPolicyTimeout=svcPEDiscoveryPolicyTimeout, svcTlsBackboneVplsSvcISID=svcTlsBackboneVplsSvcISID, svcEPMCEPPassiveModeActive=svcEPMCEPPassiveModeActive, svcTlsGroupTblLastChanged=svcTlsGroupTblLastChanged, svcDhcpLseStateBgpMD5AuthKey=svcDhcpLseStateBgpMD5AuthKey, svcPwRtPathTable=svcPwRtPathTable, svcMSPwPeFecType=svcMSPwPeFecType, svcStatusChanged=svcStatusChanged, tlsMstiRemainingHopCount=tlsMstiRemainingHopCount, tmnxCustObjs=tmnxCustObjs, svcTlsPbbIgmpSnpgMRtrRowStatus=svcTlsPbbIgmpSnpgMRtrRowStatus, svcEndPointRevertTime=svcEndPointRevertTime, svcArpHostMRtAddr=svcArpHostMRtAddr, svcEpipePbbBvplsOperDstMac=svcEpipePbbBvplsOperDstMac, svcMrpPolicyParamsEntry=svcMrpPolicyParamsEntry, tlsSpbFidFdbMPortId=tlsSpbFidFdbMPortId, TVirtSchedAttribute=TVirtSchedAttribute, tlsPipStpInRstBpdus=tlsPipStpInRstBpdus, tlsRdntGrpMemberTable=tlsRdntGrpMemberTable, svcMrpPolicyScope=svcMrpPolicyScope)
