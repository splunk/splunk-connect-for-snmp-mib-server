#
# PySNMP MIB module ISPRO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISPRO-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, Integer32, ModuleIdentity, Gauge32, iso, NotificationType, Counter64, TimeTicks, ObjectIdentity, Unsigned32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "Integer32", "ModuleIdentity", "Gauge32", "iso", "NotificationType", "Counter64", "TimeTicks", "ObjectIdentity", "Unsigned32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jacarta = MibIdentifier((1, 3, 6, 1, 4, 1, 19011))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1))
webAppliance = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3))
ispro = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2))
isObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1))
isTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 2))
isIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 1))
isConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2))
isDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3))
isDeviceMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1))
isDeviceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2))
class IsproEnuEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class IsproEnuReset(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("reset", 1), ("nothing", 2))

class IsproEnuRestart(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("restart", 1), ("nothing", 2))

class IsproEnuSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("information", 1), ("warning", 2), ("severe", 3))

class IsproEnuAccess(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noAccess", 1), ("readonly", 2), ("readwrite", 3))

class IsproEnuTempUnit(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("celsius", 1), ("fahrenheit", 2))

class IsproEnuDateFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dd-mm-yyyy", 1), ("mm-dd-yyyy", 2))

class IsproEnuTimeZone(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("gMT-1200", 1), ("gMT-1100", 2), ("gMT-1000", 3), ("gMT-0900", 4), ("gMT-0800", 5), ("gMT-0700", 6), ("gMT-0600", 7), ("gMT-0500", 8), ("gMT-0400", 9), ("gMT-0330", 10), ("gMT-0300", 11), ("gMT-0200", 12), ("gMT-0100", 13), ("gMT-0000", 14), ("gMT0100", 15), ("gMT0200", 16), ("gMT0300", 17), ("gMT0330", 18), ("gMT0400", 19), ("gMT0500", 20), ("gMT0530", 21), ("gMT0600", 22), ("gMT0700", 23), ("gMT0800", 24), ("gMT0900", 25), ("gMT1000", 26), ("gMT1100", 27), ("gMT1200", 28))

class IsproEnuSensorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknown", 1), ("sensorHT", 2))

class IsproEnuThresholdStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("unknown", 1), ("disable", 2), ("normal", 3), ("below-low-warning", 4), ("below-low-critical", 5), ("above-high-warning", 6), ("above-high-critical", 7))

class IsproEnuDigitalStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

class IsproTriggerStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("normal", 1), ("triggered", 2))

class IsproEnuSensorState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("auto", 1), ("disable", 2))

class IsproEnuTempCalibration(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("temperatureIncrease0Point0", 1), ("temperatureIncrease0Point5", 2), ("temperatureIncrease1Point0", 3), ("temperatureIncrease1Point5", 4), ("temperatureIncrease2Point0", 5), ("temperatureIncrease2Point5", 6), ("temperatureIncrease3Point0", 7), ("temperatureDecrease0Point5", 8), ("temperatureDecrease1Point0", 9), ("temperatureDecrease1Point5", 10), ("temperatureDecrease2Point0", 11), ("temperatureDecrease2Point5", 12), ("temperatureDecrease3Point0", 13))

class IsproEnuHumidityCalibration(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("humidityIncrease0Point0", 1), ("humidityIncrease0Point5", 2), ("humidityIncrease1Point0", 3), ("humidityIncrease1Point5", 4), ("humidityIncrease2Point0", 5), ("humidityIncrease2Point5", 6), ("humidityIncrease3Point0", 7), ("humidityDecrease0Point5", 8), ("humidityDecrease1Point0", 9), ("humidityDecrease1Point5", 10), ("humidityDecrease2Point0", 11), ("humidityDecrease2Point5", 12), ("humidityDecrease3Point0", 13))

class IsproEnuAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3))

class IsproEnuOnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class IsproEnuTurnOnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("turnOn", 1), ("turnOff", 2))

class IsproEnuPresent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("present", 1), ("absent", 2))

class IsproEnuDO(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("digitalOutput1", 2), ("digitalOutput2", 3))

class IsproEnuHighLow(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("high", 1), ("low", 2))

class IsproLogType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("historyLog", 1), ("extendedLog", 2), ("deviceEventLog", 3), ("systemEventLog", 4))

isIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isIdentManufacturer.setStatus('mandatory')
isIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isIdentModel.setStatus('mandatory')
isIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isIdentAgentSoftwareVersion.setStatus('mandatory')
isIdentName = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isIdentName.setStatus('mandatory')
isConfigMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isConfigMibVersion.setStatus('mandatory')
isConfigNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 2))
isConfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigIpAddress.setStatus('mandatory')
isConfigGateway = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigGateway.setStatus('mandatory')
isConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigSubnetMask.setStatus('mandatory')
isConfigDateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3))
isConfigDate = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigDate.setStatus('mandatory')
isConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTime.setStatus('mandatory')
isConfigTimeFromNtp = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 3), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTimeFromNtp.setStatus('mandatory')
isConfigNtpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigNtpIpAddress.setStatus('mandatory')
isConfigNtpTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 5), IsproEnuTimeZone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigNtpTimeZone.setStatus('mandatory')
isConfigDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 6), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigDayLightSaving.setStatus('mandatory')
isConfigLog = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 4))
isConfigHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigHistoryLogFrequency.setStatus('mandatory')
isConfigExtHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigExtHistoryLogFrequency.setStatus('mandatory')
isConfigConfigurationLog = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 4, 3), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigConfigurationLog.setStatus('mandatory')
isConfigLogType = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 4, 4), IsproLogType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isConfigLogType.setStatus('mandatory')
isConfigDhcpState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 5), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigDhcpState.setStatus('mandatory')
isConfigPingState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 6), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigPingState.setStatus('mandatory')
isConfigTftpState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 7), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTftpState.setStatus('mandatory')
isConfigTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 8))
isConfigTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 8, 1), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTelnetState.setStatus('mandatory')
isConfigTelnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTelnetPortNumber.setStatus('mandatory')
isConfigHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 9))
isConfigHttpState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 9, 1), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigHttpState.setStatus('mandatory')
isConfigHttpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigHttpPortNumber.setStatus('mandatory')
isConfigHttpSecurity = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 9, 3), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigHttpSecurity.setStatus('mandatory')
isConfigSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 10))
isConfigSnmpState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 10, 1), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigSnmpState.setStatus('mandatory')
isConfigSnmpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigSnmpPortNumber.setStatus('mandatory')
isConfigControl = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 11))
isConfigResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 11, 1), IsproEnuReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigResetToDefault.setStatus('mandatory')
isConfigRestart = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 11, 2), IsproEnuRestart()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigRestart.setStatus('mandatory')
isConfigTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 12))
isConfigTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTrapRetryCount.setStatus('mandatory')
isConfigTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTrapRetryTime.setStatus('mandatory')
isConfigTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTrapAckSignature.setStatus('mandatory')
isConfigRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigRefreshRate.setStatus('mandatory')
isConfigTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14), )
if mibBuilder.loadTexts: isConfigTrapReceiverTable.setStatus('mandatory')
isConfigTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1), ).setIndexNames((0, "ISPRO-MIB", "isReceiverIndex"))
if mibBuilder.loadTexts: isConfigTrapReceiverEntry.setStatus('mandatory')
isReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isReceiverIndex.setStatus('mandatory')
isReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isReceiverAddr.setStatus('mandatory')
isReceiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isReceiverCommunityString.setStatus('mandatory')
isReceiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1, 4), IsproEnuSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isReceiverSeverityLevel.setStatus('mandatory')
isReceiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isReceiverDescription.setStatus('mandatory')
isConfigAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15), )
if mibBuilder.loadTexts: isConfigAccessControlTable.setStatus('mandatory')
isConfigAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1), ).setIndexNames((0, "ISPRO-MIB", "isAccessIndex"))
if mibBuilder.loadTexts: isConfigAccessControlEntry.setStatus('mandatory')
isAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isAccessIndex.setStatus('mandatory')
isAccessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isAccessControlAddr.setStatus('mandatory')
isAccessCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isAccessCommunityString.setStatus('mandatory')
isAccessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1, 4), IsproEnuAccess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isAccessControlMode.setStatus('mandatory')
isAccessAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isAccessAccount.setStatus('mandatory')
isConfigTemperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 16), IsproEnuTempUnit()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTemperatureUnit.setStatus('mandatory')
isConfigDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 17), IsproEnuDateFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigDateFormat.setStatus('mandatory')
isDeviceMonitorTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: isDeviceMonitorTemperatureTable.setStatus('mandatory')
isDeviceMonitorTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceMonitorTemperatureIndex"))
if mibBuilder.loadTexts: isDeviceMonitorTemperatureEntry.setStatus('mandatory')
isDeviceMonitorTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorTemperatureIndex.setStatus('mandatory')
isDeviceMonitorTemperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorTemperatureName.setStatus('mandatory')
isDeviceMonitorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorTemperature.setStatus('mandatory')
isDeviceMonitorTemperatureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1, 1, 4), IsproEnuThresholdStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorTemperatureAlarm.setStatus('mandatory')
isDeviceMonitorHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2), )
if mibBuilder.loadTexts: isDeviceMonitorHumidityTable.setStatus('mandatory')
isDeviceMonitorHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceMonitorHumidityIndex"))
if mibBuilder.loadTexts: isDeviceMonitorHumidityEntry.setStatus('mandatory')
isDeviceMonitorHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorHumidityIndex.setStatus('mandatory')
isDeviceMonitorHumidityName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorHumidityName.setStatus('mandatory')
isDeviceMonitorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorHumidity.setStatus('mandatory')
isDeviceMonitorHumidityAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2, 1, 4), IsproEnuThresholdStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorHumidityAlarm.setStatus('mandatory')
isDeviceMonitorDigitalInTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3), )
if mibBuilder.loadTexts: isDeviceMonitorDigitalInTable.setStatus('mandatory')
isDeviceMonitorDigitalInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceMonitorDigitalInIndex"))
if mibBuilder.loadTexts: isDeviceMonitorDigitalInEntry.setStatus('mandatory')
isDeviceMonitorDigitalInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorDigitalInIndex.setStatus('mandatory')
isDeviceMonitorDigitalInName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorDigitalInName.setStatus('mandatory')
isDeviceMonitorDigitalIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3, 1, 3), IsproEnuDigitalStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorDigitalIn.setStatus('mandatory')
isDeviceMonitorDigitalInAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3, 1, 4), IsproTriggerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorDigitalInAlarm.setStatus('mandatory')
isDeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1), )
if mibBuilder.loadTexts: isDeviceConfigTable.setStatus('mandatory')
isDeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceConfigIndex"))
if mibBuilder.loadTexts: isDeviceConfigEntry.setStatus('mandatory')
isDeviceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceConfigIndex.setStatus('mandatory')
isDeviceConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigName.setStatus('mandatory')
isDeviceConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1, 1, 3), IsproEnuSensorState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigState.setStatus('mandatory')
isDeviceConfigDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1, 1, 4), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigDisplay.setStatus('mandatory')
isDeviceConfigTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2), )
if mibBuilder.loadTexts: isDeviceConfigTemperatureTable.setStatus('mandatory')
isDeviceConfigTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceConfigTemperatureIndex"))
if mibBuilder.loadTexts: isDeviceConfigTemperatureEntry.setStatus('mandatory')
isDeviceConfigTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceConfigTemperatureIndex.setStatus('mandatory')
isDeviceConfigTemperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureName.setStatus('mandatory')
isDeviceConfigTemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 6500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowWarning.setStatus('mandatory')
isDeviceConfigTemperatureLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 6500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowCritical.setStatus('mandatory')
isDeviceConfigTemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 6500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighWarning.setStatus('mandatory')
isDeviceConfigTemperatureHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 6500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighCritical.setStatus('mandatory')
isDeviceConfigTemperatureHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureHysteresis.setStatus('mandatory')
isDeviceConfigTemperatureCalibration = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 8), IsproEnuTempCalibration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureCalibration.setStatus('mandatory')
isDeviceConfigTemperatureLowWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 9), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowWarningState.setStatus('mandatory')
isDeviceConfigTemperatureLowCriticalState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 10), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowCriticalState.setStatus('mandatory')
isDeviceConfigTemperatureHighWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 11), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighWarningState.setStatus('mandatory')
isDeviceConfigTemperatureHighCriticalState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 12), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighCriticalState.setStatus('mandatory')
isDeviceConfigTemperatureEventDO = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 13), IsproEnuDO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureEventDO.setStatus('mandatory')
isDeviceConfigHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3), )
if mibBuilder.loadTexts: isDeviceConfigHumidityTable.setStatus('mandatory')
isDeviceConfigHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceConfigHumidityIndex"))
if mibBuilder.loadTexts: isDeviceConfigHumidityEntry.setStatus('mandatory')
isDeviceConfigHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceConfigHumidityIndex.setStatus('mandatory')
isDeviceConfigHumidityName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityName.setStatus('mandatory')
isDeviceConfigHumidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 9500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityLowWarning.setStatus('mandatory')
isDeviceConfigHumidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 9500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityLowCritical.setStatus('mandatory')
isDeviceConfigHumidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 9500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityHighWarning.setStatus('mandatory')
isDeviceConfigHumidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 9500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityHighCritical.setStatus('mandatory')
isDeviceConfigHumidityHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityHysteresis.setStatus('mandatory')
isDeviceConfigHumidityCalibration = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 8), IsproEnuHumidityCalibration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityCalibration.setStatus('mandatory')
isDeviceConfigHumidityLowWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 9), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityLowWarningState.setStatus('mandatory')
isDeviceConfigHumidityLowCriticalState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 10), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityLowCriticalState.setStatus('mandatory')
isDeviceConfigHumidityHighWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 11), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityHighWarningState.setStatus('mandatory')
isDeviceConfigHumidityHighCriticalState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 12), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityHighCriticalState.setStatus('mandatory')
isDeviceConfigHumidityEventDO = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 13), IsproEnuDO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityEventDO.setStatus('mandatory')
isDeviceConfigDigitalInTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4), )
if mibBuilder.loadTexts: isDeviceConfigDigitalInTable.setStatus('mandatory')
isDeviceConfigDigitalInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceConfigDigitalInIndex"))
if mibBuilder.loadTexts: isDeviceConfigDigitalInEntry.setStatus('mandatory')
isDeviceConfigDigitalInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceConfigDigitalInIndex.setStatus('mandatory')
isDeviceConfigDigitalInName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigDigitalInName.setStatus('mandatory')
isDeviceConfigDigitalInState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1, 3), IsproEnuAlarmState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigDigitalInState.setStatus('mandatory')
isDeviceConfigDigitalInHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigDigitalInHysteresis.setStatus('mandatory')
isDeviceConfigDigitalInEventDO = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1, 5), IsproEnuDO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigDigitalInEventDO.setStatus('mandatory')
isDeviceDigitalOutTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5), )
if mibBuilder.loadTexts: isDeviceDigitalOutTable.setStatus('mandatory')
isDeviceID = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceID.setStatus('mandatory')
isDeviceDigitalOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceDigitalOutIndex"))
if mibBuilder.loadTexts: isDeviceDigitalOutEntry.setStatus('mandatory')
isDeviceDigitalOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceDigitalOutIndex.setStatus('mandatory')
isDeviceDigitalOutStartState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5, 1, 2), IsproEnuOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceDigitalOutStartState.setStatus('mandatory')
isDeviceDigitalOutEventAction = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5, 1, 3), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceDigitalOutEventAction.setStatus('mandatory')
isDeviceDigitalOutManualControl = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5, 1, 4), IsproEnuTurnOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceDigitalOutManualControl.setStatus('mandatory')
isTrapsDescription = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isTrapsDescription.setStatus('mandatory')
mibBuilder.exportSymbols("ISPRO-MIB", isDeviceConfigTemperatureHighWarningState=isDeviceConfigTemperatureHighWarningState, isDeviceConfigDigitalInEntry=isDeviceConfigDigitalInEntry, IsproEnuSeverity=IsproEnuSeverity, IsproLogType=IsproLogType, IsproEnuDateFormat=IsproEnuDateFormat, isDeviceConfigTemperatureTable=isDeviceConfigTemperatureTable, isConfigTelnet=isConfigTelnet, isConfigAccessControlTable=isConfigAccessControlTable, isDeviceConfigTemperatureHysteresis=isDeviceConfigTemperatureHysteresis, isDeviceConfigHumidityLowCritical=isDeviceConfigHumidityLowCritical, IsproEnuTempCalibration=IsproEnuTempCalibration, isConfigTrapRetryTime=isConfigTrapRetryTime, isDeviceMonitorDigitalInIndex=isDeviceMonitorDigitalInIndex, isConfigIpAddress=isConfigIpAddress, isDeviceConfigEntry=isDeviceConfigEntry, isConfigHttpPortNumber=isConfigHttpPortNumber, isConfigTemperatureUnit=isConfigTemperatureUnit, ispro=ispro, isDeviceMonitorDigitalInTable=isDeviceMonitorDigitalInTable, isDeviceConfigTable=isDeviceConfigTable, isConfigDateTime=isConfigDateTime, IsproEnuEnable=IsproEnuEnable, isDeviceConfigHumidityEventDO=isDeviceConfigHumidityEventDO, isAccessControlAddr=isAccessControlAddr, isDeviceConfigHumidityIndex=isDeviceConfigHumidityIndex, isConfigTelnetPortNumber=isConfigTelnetPortNumber, isDeviceConfigHumidityLowWarningState=isDeviceConfigHumidityLowWarningState, isDeviceMonitorDigitalIn=isDeviceMonitorDigitalIn, jacarta=jacarta, isConfigDate=isConfigDate, IsproEnuTimeZone=IsproEnuTimeZone, isIdentManufacturer=isIdentManufacturer, isConfigGateway=isConfigGateway, isReceiverIndex=isReceiverIndex, isDeviceConfigTemperatureHighCriticalState=isDeviceConfigTemperatureHighCriticalState, isConfigDhcpState=isConfigDhcpState, isDeviceConfigTemperatureLowWarning=isDeviceConfigTemperatureLowWarning, isDeviceConfigHumidityCalibration=isDeviceConfigHumidityCalibration, isConfigAccessControlEntry=isConfigAccessControlEntry, IsproEnuDigitalStatus=IsproEnuDigitalStatus, isConfigDateFormat=isConfigDateFormat, isConfigConfigurationLog=isConfigConfigurationLog, isConfigControl=isConfigControl, isDeviceConfigTemperatureHighWarning=isDeviceConfigTemperatureHighWarning, isDeviceConfig=isDeviceConfig, isDeviceConfigTemperatureLowCritical=isDeviceConfigTemperatureLowCritical, isConfigTrapReceiverTable=isConfigTrapReceiverTable, isDeviceMonitorTemperatureTable=isDeviceMonitorTemperatureTable, isDeviceConfigTemperatureEntry=isDeviceConfigTemperatureEntry, isConfigDayLightSaving=isConfigDayLightSaving, webAppliance=webAppliance, isDeviceMonitorTemperatureEntry=isDeviceMonitorTemperatureEntry, isAccessControlMode=isAccessControlMode, isDeviceConfigDigitalInState=isDeviceConfigDigitalInState, isDeviceConfigDigitalInHysteresis=isDeviceConfigDigitalInHysteresis, isConfigExtHistoryLogFrequency=isConfigExtHistoryLogFrequency, isConfigTrapRetryCount=isConfigTrapRetryCount, isDeviceMonitorDigitalInAlarm=isDeviceMonitorDigitalInAlarm, IsproEnuPresent=IsproEnuPresent, isDeviceConfigHumidityEntry=isDeviceConfigHumidityEntry, IsproEnuSensorType=IsproEnuSensorType, IsproEnuReset=IsproEnuReset, isDeviceConfigHumidityTable=isDeviceConfigHumidityTable, isDeviceConfigDigitalInName=isDeviceConfigDigitalInName, isAccessCommunityString=isAccessCommunityString, isReceiverSeverityLevel=isReceiverSeverityLevel, isConfigHttpState=isConfigHttpState, isDeviceDigitalOutEventAction=isDeviceDigitalOutEventAction, isDeviceMonitorHumidityTable=isDeviceMonitorHumidityTable, isDeviceDigitalOutManualControl=isDeviceDigitalOutManualControl, isDeviceConfigHumidityLowWarning=isDeviceConfigHumidityLowWarning, IsproEnuSensorState=IsproEnuSensorState, isConfigTime=isConfigTime, isDeviceConfigHumidityHighWarning=isDeviceConfigHumidityHighWarning, isConfigHttpSecurity=isConfigHttpSecurity, IsproEnuAccess=IsproEnuAccess, IsproEnuOnOff=IsproEnuOnOff, isDeviceConfigTemperatureHighCritical=isDeviceConfigTemperatureHighCritical, isDeviceMonitorHumidity=isDeviceMonitorHumidity, isDeviceMonitorHumidityEntry=isDeviceMonitorHumidityEntry, IsproEnuHighLow=IsproEnuHighLow, isDeviceMonitorTemperatureIndex=isDeviceMonitorTemperatureIndex, IsproEnuRestart=IsproEnuRestart, isIdentAgentSoftwareVersion=isIdentAgentSoftwareVersion, isDeviceConfigTemperatureName=isDeviceConfigTemperatureName, isIdentModel=isIdentModel, isConfigLogType=isConfigLogType, isDeviceConfigIndex=isDeviceConfigIndex, isConfigTftpState=isConfigTftpState, isReceiverAddr=isReceiverAddr, isConfigTrapReceiverEntry=isConfigTrapReceiverEntry, IsproTriggerStatus=IsproTriggerStatus, isIdent=isIdent, isDeviceDigitalOutEntry=isDeviceDigitalOutEntry, isConfigSubnetMask=isConfigSubnetMask, isConfigSnmpPortNumber=isConfigSnmpPortNumber, isConfigHistoryLogFrequency=isConfigHistoryLogFrequency, isConfigTimeFromNtp=isConfigTimeFromNtp, isReceiverDescription=isReceiverDescription, isDeviceConfigTemperatureIndex=isDeviceConfigTemperatureIndex, isDeviceConfigTemperatureCalibration=isDeviceConfigTemperatureCalibration, isDeviceMonitorHumidityName=isDeviceMonitorHumidityName, isDeviceID=isDeviceID, isTraps=isTraps, isConfigSnmpState=isConfigSnmpState, IsproEnuTempUnit=IsproEnuTempUnit, isDeviceMonitorDigitalInName=isDeviceMonitorDigitalInName, isDeviceConfigHumidityHighCritical=isDeviceConfigHumidityHighCritical, isDeviceMonitor=isDeviceMonitor, isDeviceMonitorTemperatureName=isDeviceMonitorTemperatureName, isDeviceConfigTemperatureLowCriticalState=isDeviceConfigTemperatureLowCriticalState, isConfigLog=isConfigLog, isConfigNtpIpAddress=isConfigNtpIpAddress, isDeviceMonitorTemperature=isDeviceMonitorTemperature, isDeviceMonitorHumidityAlarm=isDeviceMonitorHumidityAlarm, isDeviceConfigHumidityLowCriticalState=isDeviceConfigHumidityLowCriticalState, isReceiverCommunityString=isReceiverCommunityString, isDeviceConfigDigitalInIndex=isDeviceConfigDigitalInIndex, IsproEnuDO=IsproEnuDO, isDeviceConfigDigitalInTable=isDeviceConfigDigitalInTable, isAccessAccount=isAccessAccount, IsproEnuAlarmState=IsproEnuAlarmState, isObjects=isObjects, isConfigPingState=isConfigPingState, isDeviceMonitorDigitalInEntry=isDeviceMonitorDigitalInEntry, isConfigHttp=isConfigHttp, isDeviceConfigDisplay=isDeviceConfigDisplay, isDeviceConfigTemperatureEventDO=isDeviceConfigTemperatureEventDO, isDeviceMonitorTemperatureAlarm=isDeviceMonitorTemperatureAlarm, isTrapsDescription=isTrapsDescription, isDeviceDigitalOutStartState=isDeviceDigitalOutStartState, isDeviceConfigHumidityName=isDeviceConfigHumidityName, IsproEnuHumidityCalibration=IsproEnuHumidityCalibration, isConfigResetToDefault=isConfigResetToDefault, isConfig=isConfig, isDeviceConfigHumidityHighCriticalState=isDeviceConfigHumidityHighCriticalState, isConfigMibVersion=isConfigMibVersion, isConfigNtpTimeZone=isConfigNtpTimeZone, isConfigTelnetState=isConfigTelnetState, isDeviceConfigState=isDeviceConfigState, product=product, isDeviceMonitorHumidityIndex=isDeviceMonitorHumidityIndex, isConfigTrapAckSignature=isConfigTrapAckSignature, isConfigNetwork=isConfigNetwork, isConfigRestart=isConfigRestart, IsproEnuThresholdStatus=IsproEnuThresholdStatus, isConfigSnmp=isConfigSnmp, isDeviceConfigDigitalInEventDO=isDeviceConfigDigitalInEventDO, isIdentName=isIdentName, isDeviceConfigTemperatureLowWarningState=isDeviceConfigTemperatureLowWarningState, isDeviceConfigHumidityHysteresis=isDeviceConfigHumidityHysteresis, isDeviceDigitalOutTable=isDeviceDigitalOutTable, isDeviceConfigName=isDeviceConfigName, isDeviceConfigHumidityHighWarningState=isDeviceConfigHumidityHighWarningState, isDeviceDigitalOutIndex=isDeviceDigitalOutIndex, isDevice=isDevice, isConfigRefreshRate=isConfigRefreshRate, isConfigTrap=isConfigTrap, IsproEnuTurnOnOff=IsproEnuTurnOnOff, isAccessIndex=isAccessIndex)
