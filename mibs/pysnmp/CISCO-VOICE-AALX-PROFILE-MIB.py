#
# PySNMP MIB module CISCO-VOICE-AALX-PROFILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VOICE-AALX-PROFILE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:33:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
cmgwIndex, CCallControlJitterDelayMode = mibBuilder.importSymbols("CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex", "CCallControlJitterDelayMode")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CvcSpeechCoderRate, = mibBuilder.importSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "CvcSpeechCoderRate")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, ModuleIdentity, NotificationType, Integer32, Counter32, ObjectIdentity, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "ModuleIdentity", "NotificationType", "Integer32", "Counter32", "ObjectIdentity", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ciscoVoiceAalxProfileMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 323))
ciscoVoiceAalxProfileMIB.setRevisions(('2005-04-21 00:00', '2004-10-15 00:00', '2003-07-18 00:00',))
if mibBuilder.loadTexts: ciscoVoiceAalxProfileMIB.setLastUpdated('200504210000Z')
if mibBuilder.loadTexts: ciscoVoiceAalxProfileMIB.setOrganization('Cisco Systems, Inc.')
ciscoVoiceAalxProfileMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 0))
ciscoVoiceAalxProfileMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 1))
cvapCodecConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1))
cvapAal2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 2))
cvapSvcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3))
cvapSvcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4))
class CiscoAal2ProfileType(TextualConvention, Integer32):
    reference = 'ITU I.366.2 ATM forum af-vtoa-0113.000 '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("itu", 1), ("custom", 2))

class CiscoAal2ProfileNumber(TextualConvention, Integer32):
    reference = 'ITU I.366.2 ATM forum af-vtoa-0113.000 '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7, 8, 12, 100, 101, 110, 200, 210))
    namedValues = NamedValues(("profileITU1", 1), ("profileITU2", 2), ("profileITU3", 3), ("profileITU7", 7), ("profileITU8", 8), ("profileITU12", 12), ("profileCustom100", 100), ("profileCustom101", 101), ("profileCustom110", 110), ("profileCustom200", 200), ("profileCustom210", 210))

class CiscoCodecPacketPeriod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("pktPeriod5000us", 1), ("pktPeriod5500us", 2), ("pktPeriod5785us", 3), ("pktPeriod10000us", 4), ("pktPeriod15000us", 5), ("pktPeriod20000us", 6), ("pktPeriod25000us", 7), ("pktPeriod30000us", 8), ("pktPeriod35000us", 9), ("pktPeriod40000us", 10), ("pktPeriod45000us", 11), ("pktPeriod50000us", 12), ("pktPeriod55000us", 13), ("pktPeriod60000us", 14), ("pktPeriod65000us", 15), ("pktPeriod70000us", 16), ("pktPeriod75000us", 17), ("pktPeriod80000us", 18), ("pktPeriod85000us", 19), ("pktPeriod90000us", 20))

cvapCodecTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 1), )
if mibBuilder.loadTexts: cvapCodecTable.setStatus('current')
cvapCodecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecNegotiationAdaptType"))
if mibBuilder.loadTexts: cvapCodecEntry.setStatus('current')
cvapCodecNegotiationAdaptType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal5", 1), ("aal1", 2))))
if mibBuilder.loadTexts: cvapCodecNegotiationAdaptType.setStatus('current')
cvapCodecNegotiationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lcoRcdLcl", 1), ("lcoLclRcd", 2), ("rcdLcoLcl", 3), ("rcdLclLco", 4), ("lclLcoRcd", 5), ("lclRcdLco", 6))).clone('lcoRcdLcl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecNegotiationOption.setStatus('current')
cvapCodecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2), )
if mibBuilder.loadTexts: cvapCodecConfigTable.setStatus('current')
cvapCodecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigAdaptType"), (0, "CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigType"))
if mibBuilder.loadTexts: cvapCodecConfigEntry.setStatus('current')
cvapCodecConfigAdaptType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("aal5", 2), ("aal1", 3), ("aal2", 4))))
if mibBuilder.loadTexts: cvapCodecConfigAdaptType.setStatus('current')
cvapCodecConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 2), CvcSpeechCoderRate())
if mibBuilder.loadTexts: cvapCodecConfigType.setStatus('current')
cvapCodecConfigPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigPreference.setStatus('current')
cvapCodecConfigVoicePacketPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 4), CiscoCodecPacketPeriod()).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigVoicePacketPeriod.setStatus('current')
cvapCodecConfigVbdPacketPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 5), CiscoCodecPacketPeriod()).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigVbdPacketPeriod.setStatus('deprecated')
cvapCodecConfigJitterDelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 6), CCallControlJitterDelayMode().clone('adaptive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigJitterDelayMode.setStatus('current')
cvapCodecConfigJitterMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigJitterMaxDelay.setStatus('current')
cvapCodecConfigJitterNomDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigJitterNomDelay.setStatus('deprecated')
cvapCodecConfigJitterMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigJitterMinDelay.setStatus('current')
cvapCodecConfigDtmfRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigDtmfRelay.setStatus('current')
cvapCodecConfigPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigPayloadType.setStatus('current')
cvapCodecConfigNewJtrNomDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigNewJtrNomDelay.setStatus('current')
cvapSvcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1), )
if mibBuilder.loadTexts: cvapSvcConfigTable.setStatus('current')
cvapSvcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cvapSvcConfigEntry.setStatus('current')
cvapSvcAtmQosCellDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 20000)).clone(20000)).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcAtmQosCellDelay.setStatus('current')
cvapSvcAtmQosCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000, 150000)).clone(150000)).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcAtmQosCtd.setStatus('current')
cvapSvcAtmQosClr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcAtmQosClr.setStatus('current')
cvapSvcTrfScalingFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcTrfScalingFactor.setStatus('current')
cvapSvcAal2CidNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcAal2CidNumber.setStatus('current')
cvapSvcAggTrafficClipping = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcAggTrafficClipping.setStatus('current')
cvapSvcAggLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcAggLinkState.setStatus('current')
cvapSvcPartialFillSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcPartialFillSupported.setStatus('current')
cvapSvcMgcpSelectorByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(21)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMgcpSelectorByteValue.setStatus('current')
cvapSvcH248SelectorByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcH248SelectorByteValue.setStatus('current')
cvapSvcDelNotifGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcDelNotifGuardTimer.setStatus('current')
cvapSvcMultiCIDPerSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDPerSvc.setStatus('current')
cvapSvcMultiCIDFillTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDFillTimer.setStatus('current')
cvapSvcMultiCIDCACSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 60000)).clone(450)).setUnits('Cells per Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDCACSCR.setStatus('current')
cvapSvcMultiCIDCACPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 60000)).clone(875)).setUnits('Cells per Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDCACPCR.setStatus('current')
cvapSvcMultiCIDOriginatDelTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDOriginatDelTimer.setStatus('current')
cvapSvcMultiCIDTerminatDelTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1195)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDTerminatDelTimer.setStatus('current')
cvapSvcMultiCIDGlareThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 248)).clone(243)).setUnits('number of CIDs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDGlareThreshold.setStatus('current')
cvapSvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1), )
if mibBuilder.loadTexts: cvapSvcStatsTable.setStatus('current')
cvapSvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cvapSvcStatsEntry.setStatus('current')
cvapSvcTxSetups = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxSetups.setStatus('current')
cvapSvcRxSetups = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxSetups.setStatus('current')
cvapSvcTxCallProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxCallProcs.setStatus('current')
cvapSvcRxCallProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxCallProcs.setStatus('current')
cvapSvcTxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxConns.setStatus('current')
cvapSvcTxConnAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxConnAcks.setStatus('current')
cvapSvcRxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxConns.setStatus('current')
cvapSvcRxConnAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxConnAcks.setStatus('current')
cvapSvcTxReleases = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxReleases.setStatus('current')
cvapSvcTxReleaseCompls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxReleaseCompls.setStatus('current')
cvapSvcRxReleases = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxReleases.setStatus('current')
cvapSvcRxReleaseCompls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxReleaseCompls.setStatus('current')
cvapSvcTxRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxRestarts.setStatus('current')
cvapSvcTxRestartAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxRestartAcks.setStatus('current')
cvapSvcRxRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxRestarts.setStatus('current')
cvapSvcRxRestartAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxRestartAcks.setStatus('current')
cvapSvcTxResyncStrts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxResyncStrts.setStatus('current')
cvapSvcTxResyncStrtAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxResyncStrtAcks.setStatus('current')
cvapSvcRxResyncStrts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxResyncStrts.setStatus('current')
cvapSvcRxResyncStrtAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxResyncStrtAcks.setStatus('current')
cvapSvcTxResyncEnds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxResyncEnds.setStatus('current')
cvapSvcTxResyncEndAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxResyncEndAcks.setStatus('current')
cvapSvcRxResyncEnds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxResyncEnds.setStatus('current')
cvapSvcRxResyncEndAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxResyncEndAcks.setStatus('current')
cvapSvcTxBulkResyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxBulkResyncs.setStatus('current')
cvapSvcRxBulkResyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxBulkResyncs.setStatus('current')
cvapSvcCallProcExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcCallProcExpiries.setStatus('current')
cvapSvcReleasExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcReleasExpiries.setStatus('current')
cvapSvcConnExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcConnExpiries.setStatus('current')
cvapSvcConnAckExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcConnAckExpiries.setStatus('current')
cvapSvcRestartExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRestartExpiries.setStatus('current')
cvapSvcResyncExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcResyncExpiries.setStatus('current')
cvaProfileMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 2))
cvaProfileMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 1))
cvaProfileMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 2))
cvaProfileMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 1, 1)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigGroup"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcConfigGroup"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaProfileMIBCompliance = cvaProfileMIBCompliance.setStatus('deprecated')
cvaProfileMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 1, 2)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigGroupRev1"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcConfigGroup"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaProfileMIBComplianceRev1 = cvaProfileMIBComplianceRev1.setStatus('current')
cvapCodecConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 2, 1)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecNegotiationOption"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigPreference"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigVoicePacketPeriod"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigVbdPacketPeriod"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterDelayMode"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterMaxDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterNomDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterMinDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigDtmfRelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigPayloadType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvapCodecConfigGroup = cvapCodecConfigGroup.setStatus('deprecated')
cvapSvcConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 2, 2)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAtmQosCellDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAtmQosCtd"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAtmQosClr"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTrfScalingFactor"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAal2CidNumber"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAggTrafficClipping"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAggLinkState"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcPartialFillSupported"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMgcpSelectorByteValue"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcH248SelectorByteValue"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcDelNotifGuardTimer"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDPerSvc"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDFillTimer"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDCACSCR"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDCACPCR"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDOriginatDelTimer"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDTerminatDelTimer"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDGlareThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvapSvcConfigGroup = cvapSvcConfigGroup.setStatus('current')
cvapSvcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 2, 3)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxSetups"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxSetups"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxCallProcs"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxCallProcs"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxConns"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxConnAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxConns"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxConnAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxReleases"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxReleaseCompls"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxReleases"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxReleaseCompls"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxRestarts"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxRestartAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxRestarts"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxRestartAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxResyncStrts"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxResyncStrtAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxResyncStrts"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxResyncStrtAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxResyncEnds"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxResyncEndAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxResyncEnds"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxResyncEndAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxBulkResyncs"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxBulkResyncs"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcCallProcExpiries"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcReleasExpiries"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcConnExpiries"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcConnAckExpiries"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRestartExpiries"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcResyncExpiries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvapSvcStatsGroup = cvapSvcStatsGroup.setStatus('current')
cvapCodecConfigGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 2, 4)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecNegotiationOption"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigPreference"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigVoicePacketPeriod"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterDelayMode"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterMaxDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterMinDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigDtmfRelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigPayloadType"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigNewJtrNomDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvapCodecConfigGroupRev1 = cvapCodecConfigGroupRev1.setStatus('current')
mibBuilder.exportSymbols("CISCO-VOICE-AALX-PROFILE-MIB", cvapSvcMultiCIDGlareThreshold=cvapSvcMultiCIDGlareThreshold, cvapSvcMultiCIDCACPCR=cvapSvcMultiCIDCACPCR, cvapSvcTxResyncEnds=cvapSvcTxResyncEnds, cvapSvcResyncExpiries=cvapSvcResyncExpiries, cvapCodecNegotiationAdaptType=cvapCodecNegotiationAdaptType, cvapSvcConnAckExpiries=cvapSvcConnAckExpiries, cvapSvcMultiCIDPerSvc=cvapSvcMultiCIDPerSvc, cvapCodecConfigEntry=cvapCodecConfigEntry, cvapSvcRxReleases=cvapSvcRxReleases, cvapSvcStatsEntry=cvapSvcStatsEntry, cvapCodecConfigPayloadType=cvapCodecConfigPayloadType, cvapCodecConfigTable=cvapCodecConfigTable, cvapCodecConfigVbdPacketPeriod=cvapCodecConfigVbdPacketPeriod, cvapSvcStats=cvapSvcStats, cvapSvcRxResyncStrts=cvapSvcRxResyncStrts, cvapCodecEntry=cvapCodecEntry, PYSNMP_MODULE_ID=ciscoVoiceAalxProfileMIB, cvapSvcRxBulkResyncs=cvapSvcRxBulkResyncs, cvapCodecConfigDtmfRelay=cvapCodecConfigDtmfRelay, cvapSvcRxConnAcks=cvapSvcRxConnAcks, cvapSvcMultiCIDOriginatDelTimer=cvapSvcMultiCIDOriginatDelTimer, cvapSvcTxSetups=cvapSvcTxSetups, cvapSvcAggTrafficClipping=cvapSvcAggTrafficClipping, cvapSvcDelNotifGuardTimer=cvapSvcDelNotifGuardTimer, cvapSvcMultiCIDTerminatDelTimer=cvapSvcMultiCIDTerminatDelTimer, cvapSvcTxResyncStrtAcks=cvapSvcTxResyncStrtAcks, cvaProfileMIBCompliances=cvaProfileMIBCompliances, cvapSvcConfigGroup=cvapSvcConfigGroup, cvapSvcAtmQosClr=cvapSvcAtmQosClr, CiscoAal2ProfileNumber=CiscoAal2ProfileNumber, cvapCodecConfigVoicePacketPeriod=cvapCodecConfigVoicePacketPeriod, cvapCodecNegotiationOption=cvapCodecNegotiationOption, cvapSvcConnExpiries=cvapSvcConnExpiries, cvapCodecConfigAdaptType=cvapCodecConfigAdaptType, cvapSvcTxBulkResyncs=cvapSvcTxBulkResyncs, cvapCodecConfigType=cvapCodecConfigType, ciscoVoiceAalxProfileMIBObjects=ciscoVoiceAalxProfileMIBObjects, cvapSvcTxReleaseCompls=cvapSvcTxReleaseCompls, cvapSvcAtmQosCellDelay=cvapSvcAtmQosCellDelay, cvapSvcRxRestartAcks=cvapSvcRxRestartAcks, cvapSvcRxResyncEnds=cvapSvcRxResyncEnds, cvapSvcRxRestarts=cvapSvcRxRestarts, cvapSvcReleasExpiries=cvapSvcReleasExpiries, CiscoAal2ProfileType=CiscoAal2ProfileType, cvapCodecConfigJitterMinDelay=cvapCodecConfigJitterMinDelay, cvapCodecConfigNewJtrNomDelay=cvapCodecConfigNewJtrNomDelay, cvapSvcAggLinkState=cvapSvcAggLinkState, cvaProfileMIBComplianceRev1=cvaProfileMIBComplianceRev1, cvapSvcTxReleases=cvapSvcTxReleases, cvapCodecConfigJitterNomDelay=cvapCodecConfigJitterNomDelay, cvapSvcTxResyncEndAcks=cvapSvcTxResyncEndAcks, cvapSvcCallProcExpiries=cvapSvcCallProcExpiries, cvapSvcConfigTable=cvapSvcConfigTable, cvapSvcTxRestarts=cvapSvcTxRestarts, cvapSvcPartialFillSupported=cvapSvcPartialFillSupported, cvapSvcTxConnAcks=cvapSvcTxConnAcks, cvapSvcTxCallProcs=cvapSvcTxCallProcs, cvapSvcConfigEntry=cvapSvcConfigEntry, cvapSvcRxReleaseCompls=cvapSvcRxReleaseCompls, ciscoVoiceAalxProfileMIB=ciscoVoiceAalxProfileMIB, cvapSvcStatsTable=cvapSvcStatsTable, cvapCodecConfigJitterDelayMode=cvapCodecConfigJitterDelayMode, cvapSvcRestartExpiries=cvapSvcRestartExpiries, cvapSvcTxRestartAcks=cvapSvcTxRestartAcks, cvapSvcRxCallProcs=cvapSvcRxCallProcs, cvapCodecConfigJitterMaxDelay=cvapCodecConfigJitterMaxDelay, cvaProfileMIBGroups=cvaProfileMIBGroups, cvapSvcMultiCIDCACSCR=cvapSvcMultiCIDCACSCR, cvapSvcAal2CidNumber=cvapSvcAal2CidNumber, cvapSvcTxResyncStrts=cvapSvcTxResyncStrts, cvapSvcTrfScalingFactor=cvapSvcTrfScalingFactor, cvapCodecConfigGroupRev1=cvapCodecConfigGroupRev1, ciscoVoiceAalxProfileMIBNotifs=ciscoVoiceAalxProfileMIBNotifs, cvapSvcMgcpSelectorByteValue=cvapSvcMgcpSelectorByteValue, cvapCodecConfigPreference=cvapCodecConfigPreference, cvapSvcRxConns=cvapSvcRxConns, cvapCodecTable=cvapCodecTable, CiscoCodecPacketPeriod=CiscoCodecPacketPeriod, cvapSvcRxSetups=cvapSvcRxSetups, cvaProfileMIBConformance=cvaProfileMIBConformance, cvapSvcMultiCIDFillTimer=cvapSvcMultiCIDFillTimer, cvapSvcH248SelectorByteValue=cvapSvcH248SelectorByteValue, cvapAal2Config=cvapAal2Config, cvapSvcAtmQosCtd=cvapSvcAtmQosCtd, cvapCodecConfig=cvapCodecConfig, cvapSvcConfig=cvapSvcConfig, cvapSvcStatsGroup=cvapSvcStatsGroup, cvapSvcRxResyncStrtAcks=cvapSvcRxResyncStrtAcks, cvapCodecConfigGroup=cvapCodecConfigGroup, cvapSvcRxResyncEndAcks=cvapSvcRxResyncEndAcks, cvapSvcTxConns=cvapSvcTxConns, cvaProfileMIBCompliance=cvaProfileMIBCompliance)
