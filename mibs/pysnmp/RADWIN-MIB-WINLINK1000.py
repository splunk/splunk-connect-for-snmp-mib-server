#
# PySNMP MIB module RADWIN-MIB-WINLINK1000 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADWIN-MIB-WINLINK1000
# Produced by pysmi-0.3.4 at Mon Apr 29 20:43:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, Counter32, Counter64, Bits, Integer32, NotificationType, enterprises, iso, MibIdentifier, NotificationType, Unsigned32, IpAddress, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Counter32", "Counter64", "Bits", "Integer32", "NotificationType", "enterprises", "iso", "MibIdentifier", "NotificationType", "Unsigned32", "IpAddress", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
radwin = MibIdentifier((1, 3, 6, 1, 4, 1, 4458))
winlink1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000))
winlink1000Odu = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1))
winlink1000OduAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1))
winlink1000OduAdmProductType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmProductType.setStatus('mandatory')
winlink1000OduAdmHwRev = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmHwRev.setStatus('mandatory')
winlink1000OduAdmSwRev = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSwRev.setStatus('mandatory')
winlink1000OduAdmLinkName = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmLinkName.setStatus('mandatory')
winlink1000OduAdmResetCmd = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmResetCmd.setStatus('mandatory')
winlink1000OduAdmAddres = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmAddres.setStatus('mandatory')
winlink1000OduAdmMask = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmMask.setStatus('mandatory')
winlink1000OduAdmGateway = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmGateway.setStatus('mandatory')
winlink1000OduAdmBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmBroadcast.setStatus('mandatory')
winlink1000OduAdmHostsTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12), )
if mibBuilder.loadTexts: winlink1000OduAdmHostsTable.setStatus('mandatory')
winlink1000OduAdmHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAdmHostsIndex"))
if mibBuilder.loadTexts: winlink1000OduAdmHostsEntry.setStatus('mandatory')
winlink1000OduAdmHostsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmHostsIndex.setStatus('mandatory')
winlink1000OduAdmHostsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsIp.setStatus('mandatory')
winlink1000OduAdmHostsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsPort.setStatus('mandatory')
winlink1000OduAdmHostsSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsSecurityModel.setStatus('mandatory')
winlink1000OduAdmHostsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsUserName.setStatus('mandatory')
winlink1000OduAdmHostsPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsPassword.setStatus('mandatory')
winlink1000OduAdmHostsIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsIPv6.setStatus('mandatory')
winlink1000OduBuzzerAdminState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduBuzzerAdminState.setStatus('mandatory')
winlink1000OduProductId = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduProductId.setStatus('mandatory')
winlink1000OduReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduReadCommunity.setStatus('mandatory')
winlink1000OduReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduReadWriteCommunity.setStatus('mandatory')
winlink1000OduTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduTrapCommunity.setStatus('mandatory')
winlink1000OduAdmSnmpAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSnmpAgentVersion.setStatus('mandatory')
winlink1000OduAdmRemoteSiteName = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmRemoteSiteName.setStatus('mandatory')
winlink1000OduAdmSnmpAgentMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSnmpAgentMinorVersion.setStatus('mandatory')
winlink1000OduAdmLinkPassword = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmLinkPassword.setStatus('mandatory')
winlink1000OduAdmSiteLinkPassword = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmSiteLinkPassword.setStatus('mandatory')
winlink1000OduAdmDefaultPassword = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("nonDefault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmDefaultPassword.setStatus('mandatory')
winlink1000OduAdmConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("directConnection", 1), ("indirectConnection", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmConnectionType.setStatus('mandatory')
winlink1000OduAdmBackToFactorySettingsCmd = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("withIP", 1), ("withoutIP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmBackToFactorySettingsCmd.setStatus('mandatory')
winlink1000OduAdmIpParamsCnfg = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmIpParamsCnfg.setStatus('mandatory')
winlink1000OduAdmVlanID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmVlanID.setStatus('mandatory')
winlink1000OduAdmVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmVlanPriority.setStatus('mandatory')
winlink1000OduAdmSN = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSN.setStatus('mandatory')
winlink1000OduAdmProductName = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmProductName.setStatus('mandatory')
winlink1000OduAdmActivationKey = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmActivationKey.setStatus('mandatory')
winlink1000OduAdmRmtPermittedOduType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmRmtPermittedOduType.setStatus('mandatory')
winlink1000OduAdmCpuID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmCpuID.setStatus('mandatory')
winlink1000OduAdmOvrdCmd = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmOvrdCmd.setStatus('mandatory')
winlink1000OduAdmLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pmpHbs", 1), ("pmpHsu", 2), ("pmpHsuHyb", 3), ("pmpHbsHyb", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmLinkMode.setStatus('mandatory')
winlink1000OduAdmActualConnectMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ptp", 2), ("ptmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmActualConnectMode.setStatus('mandatory')
winlink1000OduAdmAES256Support = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmAES256Support.setStatus('mandatory')
winlink1000OduAdmAES256State = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmAES256State.setStatus('mandatory')
winlink1000OduAdmAES256Status = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notOperating", 1), ("partiallyOperating", 2), ("operating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmAES256Status.setStatus('mandatory')
winlink1000OduAdmBatterySavingShutdownTime = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmBatterySavingShutdownTime.setStatus('mandatory')
winlink1000OduAdmWiFiPowerMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("powerON", 2), ("powerOFF", 3), ("alwaysON", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWiFiPowerMode.setStatus('mandatory')
winlink1000OduAdmShutdownTimer = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmShutdownTimer.setStatus('mandatory')
winlink1000OduAdmGPSState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 1), ("notSynchronized", 2), ("fixed", 3), ("shortCircuit", 4), ("faulty", 5), ("synchronized", 6), ("synchronizedGlonass", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmGPSState.setStatus('mandatory')
winlink1000OduAdmTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmTemperatureC.setStatus('mandatory')
winlink1000OduAdmIPStackMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v4", 1), ("v6", 2), ("v4andv6", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmIPStackMode.setStatus('mandatory')
winlink1000OduAdmIPv6ParamsCnfg = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmIPv6ParamsCnfg.setStatus('mandatory')
winlink1000OduAdmIPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmIPv6Address.setStatus('mandatory')
winlink1000OduAdmIPv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmIPv6Prefix.setStatus('mandatory')
winlink1000OduAdmIPv6DefaultGateWay = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmIPv6DefaultGateWay.setStatus('mandatory')
winlink1000OduAdmPowerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmPowerConsumption.setStatus('mandatory')
winlink1000OduAdmWifi = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51))
winlink1000OduAdmWifiChannel = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWifiChannel.setStatus('mandatory')
winlink1000OduAdmWifiTxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(11, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWifiTxPower.setStatus('mandatory')
winlink1000OduAdmWifiSSID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmWifiSSID.setStatus('mandatory')
winlink1000OduAdmWifiSecurityType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("wep", 2), ("wpa2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmWifiSecurityType.setStatus('mandatory')
winlink1000OduAdmWifiPassword = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWifiPassword.setStatus('mandatory')
winlink1000OduAdmWifiNetwork = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWifiNetwork.setStatus('mandatory')
winlink1000OduAdmWifiRssi = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmWifiRssi.setStatus('mandatory')
winlink1000OduAdmWifiStationMAC = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmWifiStationMAC.setStatus('mandatory')
winlink1000OduAdmWifiRestart = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWifiRestart.setStatus('mandatory')
winlink1000OduAdmWifiApStatus = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmWifiApStatus.setStatus('mandatory')
winlink1000OduAdmBsaOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("hbsTracking", 2), ("hsuAlignment", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmBsaOperationMode.setStatus('mandatory')
winlink1000OduAdmMngConnection = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmMngConnection.setStatus('mandatory')
winlink1000OduAdm1588TCSupport = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdm1588TCSupport.setStatus('mandatory')
winlink1000OduAdmSyncESupport = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSyncESupport.setStatus('mandatory')
winlink1000OduAdmRadioRev = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 56), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmRadioRev.setStatus('mandatory')
winlink1000OduAdmProductRev = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 57), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmProductRev.setStatus('mandatory')
winlink1000OduAdmPMPSUSupport = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmPMPSUSupport.setStatus('mandatory')
winlink1000OduAdmManagerDownloadURL = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 59), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmManagerDownloadURL.setStatus('mandatory')
winlink1000OduAdmAntennaDescription = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmAntennaDescription.setStatus('mandatory')
winlink1000OduAdmSwCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSwCapabilities.setStatus('mandatory')
winlink1000OduService = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2))
winlink1000OduSrvMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("installMode", 1), ("normalMode", 2), ("slaveMode", 3), ("tempInstallMode", 4), ("inactiveMode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvMode.setStatus('mandatory')
winlink1000OduSrvBridging = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvBridging.setStatus('mandatory')
winlink1000OduServiceRingTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4))
winlink1000OduSrvRingLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("independentLink", 1), ("nonRpl", 2), ("rpl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvRingLinkMode.setStatus('mandatory')
winlink1000OduSrvRingTopologySupported = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvRingTopologySupported.setStatus('mandatory')
winlink1000OduSrvRingVlanIdTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3), )
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanIdTable.setStatus('mandatory')
winlink1000OduSrvRingVlanIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduSrvRingVlanIdIndex"))
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanIdEntry.setStatus('mandatory')
winlink1000OduSrvRingVlanIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanIdIndex.setStatus('mandatory')
winlink1000OduSrvRingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanId.setStatus('mandatory')
winlink1000OduSrvRingEthStatus = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unblocked", 1), ("blocked", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvRingEthStatus.setStatus('mandatory')
winlink1000OduSrvRingMaxAllowedTimeFromLastRpm = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvRingMaxAllowedTimeFromLastRpm.setStatus('mandatory')
winlink1000OduSrvRingWTR = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvRingWTR.setStatus('mandatory')
winlink1000OduServiceQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5))
winlink1000OduSrvQoSMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("notActive", 2), ("classVlan", 3), ("classDiffserv", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvQoSMode.setStatus('mandatory')
winlink1000OduSrvQoSConfTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2), )
if mibBuilder.loadTexts: winlink1000OduSrvQoSConfTable.setStatus('mandatory')
winlink1000OduSrvQoSConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduSrvQoSConfIndex"))
if mibBuilder.loadTexts: winlink1000OduSrvQoSConfEntry.setStatus('mandatory')
winlink1000OduSrvQoSConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvQoSConfIndex.setStatus('mandatory')
winlink1000OduSrvConfVlanQGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvConfVlanQGroups.setStatus('mandatory')
winlink1000OduSrvConfDiffservQGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvConfDiffservQGroups.setStatus('mandatory')
winlink1000OduSrvConfQueMir = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvConfQueMir.setStatus('mandatory')
winlink1000OduSrvConfQueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvConfQueWeight.setStatus('mandatory')
winlink1000OduSrvQoSVlanQGroupsSetStr = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvQoSVlanQGroupsSetStr.setStatus('mandatory')
winlink1000OduSrvQoSDiffservQGroupsSetStr = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvQoSDiffservQGroupsSetStr.setStatus('mandatory')
winlink1000OduSrvQoSMaxRTQuePercent = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvQoSMaxRTQuePercent.setStatus('mandatory')
winlink1000OduServiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6))
winlink1000OduSrvVlanSupport = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2), ("available", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvVlanSupport.setStatus('mandatory')
winlink1000OduSrvVlanIngressMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transparent", 1), ("untagAll", 2), ("filter", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvVlanIngressMode.setStatus('mandatory')
winlink1000OduSrvVlanEgressMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transparent", 1), ("tag", 2), ("provider", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvVlanEgressMode.setStatus('mandatory')
winlink1000OduSrvEgressTag = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40947))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvEgressTag.setStatus('mandatory')
winlink1000OduSrvEgressProviderTag = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40947))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvEgressProviderTag.setStatus('mandatory')
winlink1000OduSrvVlanIngressAllowedVIDs = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvVlanIngressAllowedVIDs.setStatus('mandatory')
winlink1000OduSrvVlanDisable = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvVlanDisable.setStatus('mandatory')
winlink1000OduServiceVlanProviderListTPIDstr = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduServiceVlanProviderListTPIDstr.setStatus('mandatory')
winlink1000OduEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3))
winlink1000OduEthernetRemainingRate = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetRemainingRate.setStatus('mandatory')
winlink1000OduEthernetIfTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2), )
if mibBuilder.loadTexts: winlink1000OduEthernetIfTable.setStatus('mandatory')
winlink1000OduEthernetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduEthernetIfIndex"))
if mibBuilder.loadTexts: winlink1000OduEthernetIfEntry.setStatus('mandatory')
winlink1000OduEthernetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetIfIndex.setStatus('mandatory')
winlink1000OduEthernetIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetIfAddress.setStatus('mandatory')
winlink1000OduEthernetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 10, 11, 15, 16, 21, 254, 255))).clone(namedValues=NamedValues(("portAutoSense", 1), ("portAutoSense100Mbps", 5), ("forceHalfDuplex10Mbps", 10), ("forceFullDuplex10Mbps", 11), ("forceHalfDuplex100Mbps", 15), ("forceFullDuplex100Mbps", 16), ("forceFullDuplex1000Mbps", 21), ("disablePoePort", 254), ("disablePort", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduEthernetIfAdminStatus.setStatus('mandatory')
winlink1000OduEthernetIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 15, 16, 20, 21, 65535))).clone(namedValues=NamedValues(("notConnected", 1), ("connectedHalfDuplex10Mbps", 10), ("connectedFullDuplex10Mbps", 11), ("connectedHalfDuplex100Mbps", 15), ("connectedFullDuplex100Mbps", 16), ("connectedHalfDuplex1000Mbps", 20), ("connectedFullDuplex1000Mbps", 21), ("unknown", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetIfOperStatus.setStatus('mandatory')
winlink1000OduEthernetIfFailAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 255))).clone(namedValues=NamedValues(("faNoAction", 1), ("faForceHalfDuplex10Mbps", 10), ("faForceFullDuplex10Mbps", 11), ("faDisablePort", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduEthernetIfFailAction.setStatus('mandatory')
winlink1000OduEthernetIf1588v2PTPEventRXRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetIf1588v2PTPEventRXRate.setStatus('mandatory')
winlink1000OduEthernetIf1588v2PTPEventTXRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetIf1588v2PTPEventTXRate.setStatus('mandatory')
winlink1000OduEthernetNumOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetNumOfPorts.setStatus('mandatory')
winlink1000OduEthernetGbeSupported = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetGbeSupported.setStatus('mandatory')
winlink1000OduEthernetSfpProperties = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetSfpProperties.setStatus('mandatory')
winlink1000OduBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4))
winlink1000OduBridgeBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1))
winlink1000OduBridgeBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4), )
if mibBuilder.loadTexts: winlink1000OduBridgeBasePortTable.setStatus('mandatory')
winlink1000OduBridgeBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduBridgeBasePortIndex"))
if mibBuilder.loadTexts: winlink1000OduBridgeBasePortEntry.setStatus('mandatory')
winlink1000OduBridgeBasePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeBasePortIndex.setStatus('mandatory')
winlink1000OduBridgeBaseIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeBaseIfIndex.setStatus('mandatory')
winlink1000OduBridgeTp = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4))
winlink1000OduBridgeTpMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduBridgeTpMode.setStatus('mandatory')
winlink1000OduBridgeTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3), )
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortTable.setStatus('mandatory')
winlink1000OduBridgeTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduBridgeTpPortIndex"))
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortEntry.setStatus('mandatory')
winlink1000OduBridgeTpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortIndex.setStatus('mandatory')
winlink1000OduBridgeTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortInFrames.setStatus('mandatory')
winlink1000OduBridgeTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortOutFrames.setStatus('mandatory')
winlink1000OduBridgeTpPortInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortInBytes.setStatus('mandatory')
winlink1000OduBridgeTpPortOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortOutBytes.setStatus('mandatory')
winlink1000OduBridgeConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeConfigMode.setStatus('mandatory')
winlink1000OduAir = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5))
winlink1000OduAirFreq = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirFreq.setStatus('mandatory')
winlink1000OduAirDesiredRate = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirDesiredRate.setStatus('deprecated')
winlink1000OduAirSSID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirSSID.setStatus('mandatory')
winlink1000OduAirTxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirTxPower.setStatus('mandatory')
winlink1000OduAirSesState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("sessionDown", 1), ("basicRate", 2), ("active", 3), ("installation", 4), ("scanning", 5), ("probing", 6), ("transmitting", 7), ("activeWithDefaultEncryptionKey", 8), ("installationWithDefaultEncryptionKey", 9), ("bitFailed", 10), ("activeWithVersionsMismatch", 11), ("installationWithVersionsMismatch", 12), ("inactive", 13), ("iduIncompatible", 14), ("spectrumAnalysis", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirSesState.setStatus('mandatory')
winlink1000OduAirMstrSlv = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMstrSlv.setStatus('mandatory')
winlink1000OduAirResync = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirResync.setStatus('mandatory')
winlink1000OduAirPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9))
winlink1000OduAirRxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirRxPower.setStatus('mandatory')
winlink1000OduAirTotalFrames = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirTotalFrames.setStatus('mandatory')
winlink1000OduAirBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirBadFrames.setStatus('mandatory')
winlink1000OduAirCurrentRate = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentRate.setStatus('deprecated')
winlink1000OduAirCurrentRateIdx = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentRateIdx.setStatus('mandatory')
winlink1000OduAirChainsRxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChainsRxPower.setStatus('mandatory')
winlink1000OduAirCurrentRateCBW = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentRateCBW.setStatus('mandatory')
winlink1000OduAirCurrentRateGI = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentRateGI.setStatus('mandatory')
winlink1000OduAirTxPower36 = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirTxPower36.setStatus('deprecated')
winlink1000OduAirTxPower48 = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirTxPower48.setStatus('deprecated')
winlink1000OduAirCurrentTxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentTxPower.setStatus('mandatory')
winlink1000OduAirMinFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMinFrequency.setStatus('mandatory')
winlink1000OduAirMaxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMaxFrequency.setStatus('mandatory')
winlink1000OduAirFreqResolution = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirFreqResolution.setStatus('mandatory')
winlink1000OduAirCurrentFreq = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentFreq.setStatus('mandatory')
winlink1000OduAirNumberOfChannels = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirNumberOfChannels.setStatus('mandatory')
winlink1000OduAirChannelsTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18), )
if mibBuilder.loadTexts: winlink1000OduAirChannelsTable.setStatus('mandatory')
winlink1000OduAirChannelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirChannelsIndex"))
if mibBuilder.loadTexts: winlink1000OduAirChannelsEntry.setStatus('mandatory')
winlink1000OduAirChannelsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelsIndex.setStatus('mandatory')
winlink1000OduAirChannelsFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelsFrequency.setStatus('mandatory')
winlink1000OduAirChannelsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirChannelsOperState.setStatus('mandatory')
winlink1000OduAirChannelsAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelsAvail.setStatus('mandatory')
winlink1000OduAirChannelsDefaultFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelsDefaultFreq.setStatus('mandatory')
winlink1000OduAirDfsState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirDfsState.setStatus('mandatory')
winlink1000OduAirAutoChannelSelectionState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirAutoChannelSelectionState.setStatus('deprecated')
winlink1000OduAirEnableTxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirEnableTxPower.setStatus('mandatory')
winlink1000OduAirMinTxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMinTxPower.setStatus('mandatory')
winlink1000OduAirMaxTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23), )
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPowerTable.setStatus('mandatory')
winlink1000OduAirMaxTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirMaxTxPowerIndex"))
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPowerEntry.setStatus('mandatory')
winlink1000OduAirMaxTxPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPowerIndex.setStatus('mandatory')
winlink1000OduAirMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPower.setStatus('mandatory')
winlink1000OduAirChannelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirChannelBandwidth.setStatus('mandatory')
winlink1000OduAirChannelBWTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25), )
if mibBuilder.loadTexts: winlink1000OduAirChannelBWTable.setStatus('mandatory')
winlink1000OduAirChannelBWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirChannelBWIndex"))
if mibBuilder.loadTexts: winlink1000OduAirChannelBWEntry.setStatus('mandatory')
winlink1000OduAirChannelBWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("channelBW5MHz", 1), ("channelBW10MHz", 2), ("channelBW20MHz", 3), ("channelBW40MHz", 4), ("channelBW80MHz", 5), ("channelBW7MHz", 6), ("channelBW14MHz", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelBWIndex.setStatus('mandatory')
winlink1000OduAirChannelBWAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("supportedManual", 2), ("supportedWithACS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelBWAvail.setStatus('mandatory')
winlink1000OduAirChannelsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelsAdminState.setStatus('mandatory')
winlink1000OduAirChannelBWHSSATDDConflictPerCBW = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noConflict", 1), ("conflictSingle", 2), ("conflictDual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelBWHSSATDDConflictPerCBW.setStatus('mandatory')
winlink1000OduAirChannelBWMinRatioForSupporting = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelBWMinRatioForSupporting.setStatus('mandatory')
winlink1000OduAirChannelBWMaxRatioForSupporting = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelBWMaxRatioForSupporting.setStatus('mandatory')
winlink1000OduAirRFD = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirRFD.setStatus('mandatory')
winlink1000OduAirRatesTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27), )
if mibBuilder.loadTexts: winlink1000OduAirRatesTable.setStatus('mandatory')
winlink1000OduAirRatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirRatesIndex"))
if mibBuilder.loadTexts: winlink1000OduAirRatesEntry.setStatus('mandatory')
winlink1000OduAirRatesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirRatesIndex.setStatus('mandatory')
winlink1000OduAirRatesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rateNotAvailable", 1), ("rateAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirRatesAvail.setStatus('mandatory')
winlink1000OduAirDesiredRateIdx = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirDesiredRateIdx.setStatus('mandatory')
winlink1000OduAirLinkDistance = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirLinkDistance.setStatus('mandatory')
winlink1000OduAirLinkWorkingMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("fullCompatibilityRemoteUpgradeAvailable", 3), ("fullCompatibilityLocalUpgradeAvailable", 4), ("restrictedCompatibilityRemoteUpgradeRecomended", 5), ("restrictedCompatibilityLocalUpgradeRecomended", 6), ("softwareUpgradeRemoteUpgradeRequired", 7), ("softwareUpgradeLocalUpgradeRequired", 8), ("versionsIncompatibilityRemoteUpgradeRequired", 9), ("versionsIncompatibilityLocalUpgradeRequired", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirLinkWorkingMode.setStatus('mandatory')
winlink1000OduAirMajorLinkIfVersion = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMajorLinkIfVersion.setStatus('mandatory')
winlink1000OduAirMinorLinkIfVersion = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMinorLinkIfVersion.setStatus('mandatory')
winlink1000OduAirHss = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40))
winlink1000OduAirHssDesiredOpState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("independentUnit", 2), ("hubSyncMaster", 3), ("hubSyncClientContinueTx", 4), ("hubSyncClientDisableTx", 5), ("gpsSync", 6), ("independentSyncUnit-ISU", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssDesiredOpState.setStatus('mandatory')
winlink1000OduAirHssCurrentOpState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("independentUnit", 2), ("hubSyncMaster", 3), ("hubSyncClientContinueTx", 4), ("hubSyncClientDisableTx", 5), ("gpsSync", 6), ("independentSyncUnit-ISU", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssCurrentOpState.setStatus('mandatory')
winlink1000OduAirHssSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("notSynchronized", 2), ("synchronized", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssSyncStatus.setStatus('mandatory')
winlink1000OduAirHssExtPulseStatus = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notDetected", 1), ("generating", 2), ("generatingAndDetected", 3), ("generatingAndImproperDetected", 4), ("detected", 5), ("improperDetected", 6), ("multipleSourcesDetected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssExtPulseStatus.setStatus('mandatory')
winlink1000OduAirHssExtPulseType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("typeA", 2), ("typeB", 3), ("typeC", 4), ("typeD", 5), ("typeE", 6), ("typeF", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssExtPulseType.setStatus('mandatory')
winlink1000OduAirHssDesiredExtPulseType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("typeA", 2), ("typeB", 3), ("typeC", 4), ("typeD", 5), ("typeE", 6), ("typeF", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssDesiredExtPulseType.setStatus('mandatory')
winlink1000OduAirHssRfpTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7), )
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTable.setStatus('mandatory')
winlink1000OduAirHssRfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirHssRfpIndex"))
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEntry.setStatus('mandatory')
winlink1000OduAirHssRfpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpIndex.setStatus('mandatory')
winlink1000OduAirHssRfpEthChannelBW5MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW5MHz.setStatus('mandatory')
winlink1000OduAirHssRfpTdmChannelBW5MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW5MHz.setStatus('mandatory')
winlink1000OduAirHssRfpEthChannelBW10MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW10MHz.setStatus('mandatory')
winlink1000OduAirHssRfpTdmChannelBW10MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW10MHz.setStatus('mandatory')
winlink1000OduAirHssRfpEthChannelBW20MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW20MHz.setStatus('mandatory')
winlink1000OduAirHssRfpTdmChannelBW20MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW20MHz.setStatus('mandatory')
winlink1000OduAirHssRfpEthChannelBW40MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW40MHz.setStatus('mandatory')
winlink1000OduAirHssRfpTdmChannelBW40MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW40MHz.setStatus('mandatory')
winlink1000OduAirHssRfpEthChannelBW80MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW80MHz.setStatus('mandatory')
winlink1000OduAirHssRfpEthChannelBW7MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW7MHz.setStatus('mandatory')
winlink1000OduAirHssRfpEthChannelBW14MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW14MHz.setStatus('mandatory')
winlink1000OduAirHssRfpStr = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpStr.setStatus('mandatory')
winlink1000OduAirHssHsmID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssHsmID.setStatus('mandatory')
winlink1000OduAirHssTime = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssTime.setStatus('mandatory')
winlink1000OduAirHssLatitude = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssLatitude.setStatus('mandatory')
winlink1000OduAirHssNSIndicator = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssNSIndicator.setStatus('mandatory')
winlink1000OduAirHssLongitude = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssLongitude.setStatus('mandatory')
winlink1000OduAirHssEWIndicator = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssEWIndicator.setStatus('mandatory')
winlink1000OduAirHssNumSatellites = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssNumSatellites.setStatus('mandatory')
winlink1000OduAirHssAltitude = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssAltitude.setStatus('mandatory')
winlink1000OduAirHssRfpPhase = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfpNormalPhase", 1), ("rfpShiftedPhase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpPhase.setStatus('mandatory')
winlink1000OduAirHssInterSiteSynchronizationMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("independent", 1), ("synchronized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssInterSiteSynchronizationMode.setStatus('mandatory')
winlink1000OduAirHssInterSiteSynchronizationAvailability = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAvailable", 1), ("available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssInterSiteSynchronizationAvailability.setStatus('mandatory')
winlink1000OduAirHssSatellitesSatSyncRequired = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRequired", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssSatellitesSatSyncRequired.setStatus('mandatory')
winlink1000OduAirHssDomainID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssDomainID.setStatus('mandatory')
winlink1000OduAirHssSupportedSynchronizationProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serialOnly", 1), ("ethOnly", 2), ("both", 3), ("ghssAndEth", 4), ("ghssEthSerial", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssSupportedSynchronizationProtocol.setStatus('mandatory')
winlink1000OduAirHssDesiredSynchronizationProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialOnly", 1), ("ethOnly", 2), ("both", 3), ("ghssOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssDesiredSynchronizationProtocol.setStatus('mandatory')
winlink1000OduAirHssDiscover = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("startAll", 1), ("startAllMstr", 2), ("startMyDmn", 3), ("startMyMstr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssDiscover.setStatus('mandatory')
winlink1000OduAirHssNumberOfDiscoveredODUs = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssNumberOfDiscoveredODUs.setStatus('mandatory')
winlink1000OduAirHssDiscoverTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26), )
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverTable.setStatus('mandatory')
winlink1000OduAirHssDiscoverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirHssDiscoverIndex"))
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverEntry.setStatus('mandatory')
winlink1000OduAirHssDiscoverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverIndex.setStatus('mandatory')
winlink1000OduAirHssDiscoverODUDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverODUDescription.setStatus('mandatory')
winlink1000OduAirHssMasterSlaveCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("compatible", 1), ("notCompatible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssMasterSlaveCompatibility.setStatus('mandatory')
winlink1000OduAirHssNumberOfAssociatedCU = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssNumberOfAssociatedCU.setStatus('mandatory')
winlink1000OduAirHssAssociatedCUTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29), )
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUTable.setStatus('mandatory')
winlink1000OduAirHssAssociatedCUTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirHssAssociatedCUIndex"))
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUTableEntry.setStatus('mandatory')
winlink1000OduAirHssAssociatedCUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUIndex.setStatus('mandatory')
winlink1000OduAirHssAssociatedCUDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUDescription.setStatus('mandatory')
winlink1000OduAirHssSyncStatusEth = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("notSynchronized", 2), ("goodSynchronizationLevel", 3), ("mediumSynchronizationLevel", 4), ("badSynchronizationLevel", 5), ("startSynchronization", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssSyncStatusEth.setStatus('mandatory')
winlink1000OduAirHssEthVLANTag = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40947))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssEthVLANTag.setStatus('mandatory')
winlink1000OduAirHssHSMIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 32), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssHSMIPAddress.setStatus('mandatory')
winlink1000OduAirHssDelayToHSM = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssDelayToHSM.setStatus('mandatory')
winlink1000OduAirHssSyncAcquisitionSeconds = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssSyncAcquisitionSeconds.setStatus('mandatory')
winlink1000OduAirHssHSMIPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssHSMIPv6Address.setStatus('mandatory')
winlink1000OduAirLockRemote = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirLockRemote.setStatus('mandatory')
winlink1000OduAirAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirAntennaGain.setStatus('mandatory')
externalAlarmInPort1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,105)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
externalAlarmInPort2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,106)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
bitFailedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,107)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
wrongConfigurationLoadedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,108)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
lanPort1DisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,109)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
lanPort2DisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,110)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
mngPortDisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,111)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
externalAlarmInPort3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,112)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
externalAlarmInPort4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,113)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
swVersionsMismatchFullCompatibilityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,114)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
swVersionsMismatchRestrictedCompatibilityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,115)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
swVersionsMismatchSoftwareUpgradeRequired = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,116)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
swVersionsIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,117)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hssMultipleSourcesDetectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,118)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hssSyncToProperSourceStoppedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,119)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hssSyncPulseDetectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,120)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
tdmBackupAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,121)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
linkLockUnauthorizedRemoteODU = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,122)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
linkLockUnauthorizedODU = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,123)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hotStandbyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,124)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
sfpInsertion = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,126)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
sfpPort1DisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,127)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
ringRplStateActiveAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,128)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
desiredRatioCanNotBeAppliedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,129)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
cbwMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,130)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
gpsNotSynchronized = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,131)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
pdTooHighDueCbwLimitations = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,132)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hbsEncryptionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,133)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hbsEhServiceClosedToHsu = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,134)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hbsUnsynchronizedHsuAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,135)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hbsInactiveHbsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,136)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
incompatibleHsu = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,137)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hsuUnsupportedBeacon = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,138)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
lanPortDisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,139)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
poePortDisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,140)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
poePowerConsumptionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,141)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hobupFaultyStateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,149)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
gpsOverCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,150)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
gpsCommunicationFailiureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,151)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
temperatureThresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,152)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
localRouterDiscoveryStatus = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,153)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
trackRouterDiscoveryStatus = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,154)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
lastUserSnmpAccessOverHourAgo = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,155)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
btsTargetUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,156)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
tdmServiceClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,200)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
ethServiceOpened = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,201)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
encryptionClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,203)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
changeLinkPasswordClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,204)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
externalAlarmInPort1Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,205)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
externalAlarmInPort2Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,206)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
lanPort1Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,209)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
lanPort2Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,210)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
mngPortClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,211)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
externalAlarmInPort3Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,212)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
externalAlarmInPort4Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,213)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
swVersionsMatchFullCompatibilityClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,214)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
swVersionsMatchRestrictedCompatibilityClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,215)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
swVersionsMatchSoftwareUpgradeRequiredClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,216)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
swVersionsCompatibleClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,217)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hssMultipleSourcesDisappearedClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,218)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hssSyncToProperSourceAchievedClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,219)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hssSyncPulseDisappearedClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,220)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
tdmBackupClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,221)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
linkLockAuthorizedRemoteODU = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,222)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
linkLockAuthorizedODU = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,223)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
linkAuthenticationDisabled = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,224)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hotStandbyClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,225)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
sfpExtraction = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,226)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
sfpPort1Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,227)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
compatibleIdus = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,228)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
desiredRatioCanNotBeAppliedClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,229)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
cbwMatch = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,230)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
switchCbwAndChannel = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,231)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
ringRplStateIdle = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,232)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
ringEthServiceStatus = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,233)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
ringFirstRpmReceived = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,234)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
ringEthernetSrviceUnblockedTO = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,235)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
gpsSynchronized = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,236)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hbsEncryptionClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,237)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hbsEhServiceOpenedToHsu = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,238)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hbsSynchronizedHsuAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,239)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hbsActiveHbs = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,240)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
switchCBW = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,241)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
changeRatio = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,242)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
lanPortClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,243)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
poePortClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,244)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
poePowerConsumptionClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,245)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
incompatibleHbsHsu = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,246)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
mobilityLinkOff = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,247)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
enterLocalConnection = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,248)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hobupActiveStateFaultyClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,249)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
hobupStandbyState = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,250)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
gpsOverCurrentClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,251)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
temperatureThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,252)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
localRouterDiscoverySucceed = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,253)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
trackRouterDiscoverySucceed = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,254)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
qosVersion2StrictMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,255)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
qosVersion2TtlMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,256)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
btsTargetIsReachable = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,257)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
tcNotSupportedByHSU = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,258)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
syncEPortHOStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,259)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
syncEPortFailureStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,260)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
btsCpeUpdateServiceFailed = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,261)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
btsCpeUpdateServiceSucceed = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,262)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
radiusServerNoREsponse = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,263)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
noRadiusServerRespond = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,264)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
radiusServerRespondedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,265)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
bsaAlignmentStarted = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,266)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
bsaAlignmentFinished = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,267)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
bsaAlignmentTriggered = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,268)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
radwinProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20))
winlink1000Family = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 2))
radwin2000Family = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 3))
gpsSynchronizerFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4))
radwin5000HBSFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 5))
radwin5000HSUFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 6))
radwin6000Family = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 10))
radwinWiFiAPFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 20))
odu = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 2, 1))
oduIntegratedAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 2, 1, 1))
oduExternalAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 2, 1, 2))
odu2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 3, 1))
odu2KIntegratedAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 3, 1, 1))
odu2KExternalAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 3, 1, 2))
oduGSU = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4, 1))
oduGSUExternalAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4, 1, 2))
hssSyncUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4, 2))
hssISU = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4, 2, 1))
hssGSU = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4, 2, 2))
oduHBS = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 5, 1))
oduHBSIntegratedAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 5, 1, 1))
oduHBSExternalAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 5, 1, 2))
oduHSU = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 6, 1))
oduHSUIntegratedAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 6, 1, 1))
oduHSUExternalAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 6, 1, 2))
odu6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 10, 1))
odu6K = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 10, 1, 1))
gateway6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 10, 2))
gateway6K = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 10, 2, 1))
odu600 = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 20, 1))
oduWiFiAP = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 20, 1, 1))
mibBuilder.exportSymbols("RADWIN-MIB-WINLINK1000", bitFailedAlarm=bitFailedAlarm, winlink1000OduAirDfsState=winlink1000OduAirDfsState, winlink1000OduAirHssHsmID=winlink1000OduAirHssHsmID, winlink1000OduAirRatesAvail=winlink1000OduAirRatesAvail, linkAuthenticationDisabled=linkAuthenticationDisabled, radwin=radwin, hssISU=hssISU, externalAlarmInPort3Clear=externalAlarmInPort3Clear, winlink1000OduAirHssMasterSlaveCompatibility=winlink1000OduAirHssMasterSlaveCompatibility, winlink1000OduAirHssRfpEthChannelBW7MHz=winlink1000OduAirHssRfpEthChannelBW7MHz, btsTargetUnreachable=btsTargetUnreachable, winlink1000OduSrvVlanSupport=winlink1000OduSrvVlanSupport, winlink1000OduBridgeBasePortEntry=winlink1000OduBridgeBasePortEntry, winlink1000OduAirHssSyncStatus=winlink1000OduAirHssSyncStatus, hobupFaultyStateAlarm=hobupFaultyStateAlarm, winlink1000OduAdmAntennaDescription=winlink1000OduAdmAntennaDescription, winlink1000OduSrvQoSConfEntry=winlink1000OduSrvQoSConfEntry, winlink1000OduAirChannelBWIndex=winlink1000OduAirChannelBWIndex, sfpExtraction=sfpExtraction, radiusServerRespondedSuccessfully=radiusServerRespondedSuccessfully, odu600=odu600, winlink1000OduAirChannelBWTable=winlink1000OduAirChannelBWTable, winlink1000OduSrvRingTopologySupported=winlink1000OduSrvRingTopologySupported, radwinWiFiAPFamily=radwinWiFiAPFamily, winlink1000OduAdmRmtPermittedOduType=winlink1000OduAdmRmtPermittedOduType, hssSyncPulseDetectedAlarm=hssSyncPulseDetectedAlarm, externalAlarmInPort4Alarm=externalAlarmInPort4Alarm, odu2000=odu2000, odu6000=odu6000, winlink1000OduBridgeBaseIfIndex=winlink1000OduBridgeBaseIfIndex, ringFirstRpmReceived=ringFirstRpmReceived, swVersionsMismatchSoftwareUpgradeRequired=swVersionsMismatchSoftwareUpgradeRequired, winlink1000OduAirFreqResolution=winlink1000OduAirFreqResolution, pdTooHighDueCbwLimitations=pdTooHighDueCbwLimitations, hbsInactiveHbsAlarm=hbsInactiveHbsAlarm, winlink1000OduAirHssRfpEthChannelBW80MHz=winlink1000OduAirHssRfpEthChannelBW80MHz, winlink1000OduSrvEgressProviderTag=winlink1000OduSrvEgressProviderTag, winlink1000OduAdmResetCmd=winlink1000OduAdmResetCmd, winlink1000OduBridgeTpPortEntry=winlink1000OduBridgeTpPortEntry, winlink1000OduAirChannelsOperState=winlink1000OduAirChannelsOperState, winlink1000OduAdmProductName=winlink1000OduAdmProductName, winlink1000OduAdmTemperatureC=winlink1000OduAdmTemperatureC, winlink1000OduAirHssDesiredExtPulseType=winlink1000OduAirHssDesiredExtPulseType, winlink1000OduBridgeTp=winlink1000OduBridgeTp, qosVersion2StrictMismatch=qosVersion2StrictMismatch, winlink1000OduAdmMngConnection=winlink1000OduAdmMngConnection, btsCpeUpdateServiceFailed=btsCpeUpdateServiceFailed, qosVersion2TtlMismatch=qosVersion2TtlMismatch, swVersionsMatchFullCompatibilityClear=swVersionsMatchFullCompatibilityClear, winlink1000OduAirLinkDistance=winlink1000OduAirLinkDistance, winlink1000OduAirChannelsFrequency=winlink1000OduAirChannelsFrequency, winlink1000OduSrvRingVlanId=winlink1000OduSrvRingVlanId, winlink1000OduAirChannelBWMinRatioForSupporting=winlink1000OduAirChannelBWMinRatioForSupporting, winlink1000OduAdmWifiApStatus=winlink1000OduAdmWifiApStatus, winlink1000OduBridgeTpPortOutBytes=winlink1000OduBridgeTpPortOutBytes, winlink1000OduAirCurrentRateCBW=winlink1000OduAirCurrentRateCBW, tdmBackupAlarm=tdmBackupAlarm, winlink1000OduAirHssLatitude=winlink1000OduAirHssLatitude, hssSyncPulseDisappearedClear=hssSyncPulseDisappearedClear, winlink1000OduAirHssRfpStr=winlink1000OduAirHssRfpStr, winlink1000OduAdmWifiPassword=winlink1000OduAdmWifiPassword, hotStandbyAlarm=hotStandbyAlarm, winlink1000OduAirRatesIndex=winlink1000OduAirRatesIndex, oduHSUIntegratedAntenna=oduHSUIntegratedAntenna, winlink1000OduAirHssCurrentOpState=winlink1000OduAirHssCurrentOpState, winlink1000OduAdmRemoteSiteName=winlink1000OduAdmRemoteSiteName, lanPort2DisconnectedAlarm=lanPort2DisconnectedAlarm, cbwMatch=cbwMatch, winlink1000OduAdmAES256Status=winlink1000OduAdmAES256Status, gpsNotSynchronized=gpsNotSynchronized, winlink1000OduAirHssRfpEthChannelBW5MHz=winlink1000OduAirHssRfpEthChannelBW5MHz, tdmServiceClear=tdmServiceClear, gpsSynchronizerFamily=gpsSynchronizerFamily, odu=odu, winlink1000OduTrapCommunity=winlink1000OduTrapCommunity, lanPort1DisconnectedAlarm=lanPort1DisconnectedAlarm, winlink1000OduAirHssAssociatedCUIndex=winlink1000OduAirHssAssociatedCUIndex, winlink1000OduAirHssNumSatellites=winlink1000OduAirHssNumSatellites, externalAlarmInPort2Clear=externalAlarmInPort2Clear, winlink1000OduEthernetIfTable=winlink1000OduEthernetIfTable, winlink1000OduSrvQoSConfIndex=winlink1000OduSrvQoSConfIndex, winlink1000OduAirMinFrequency=winlink1000OduAirMinFrequency, winlink1000OduAirResync=winlink1000OduAirResync, externalAlarmInPort3Alarm=externalAlarmInPort3Alarm, winlink1000OduAdmSwCapabilities=winlink1000OduAdmSwCapabilities, temperatureThresholdAlarm=temperatureThresholdAlarm, winlink1000OduAirHssSyncStatusEth=winlink1000OduAirHssSyncStatusEth, winlink1000OduAdmLinkMode=winlink1000OduAdmLinkMode, swVersionsIncompatible=swVersionsIncompatible, winlink1000OduAirTxPower48=winlink1000OduAirTxPower48, winlink1000OduAdmWifiSecurityType=winlink1000OduAdmWifiSecurityType, winlink1000OduAirHssAltitude=winlink1000OduAirHssAltitude, hssMultipleSourcesDisappearedClear=hssMultipleSourcesDisappearedClear, enterLocalConnection=enterLocalConnection, winlink1000OduSrvMode=winlink1000OduSrvMode, winlink1000Family=winlink1000Family, winlink1000OduAdmActivationKey=winlink1000OduAdmActivationKey, hssSyncToProperSourceAchievedClear=hssSyncToProperSourceAchievedClear, winlink1000OduAdmDefaultPassword=winlink1000OduAdmDefaultPassword, trackRouterDiscoveryStatus=trackRouterDiscoveryStatus, ringRplStateActiveAlarm=ringRplStateActiveAlarm, bsaAlignmentStarted=bsaAlignmentStarted, winlink1000OduAirRatesEntry=winlink1000OduAirRatesEntry, oduGSU=oduGSU, oduHBSIntegratedAntenna=oduHBSIntegratedAntenna, poePortDisconnectedAlarm=poePortDisconnectedAlarm, winlink1000OduAirTxPower=winlink1000OduAirTxPower, winlink1000OduAdmHostsUserName=winlink1000OduAdmHostsUserName, localRouterDiscoveryStatus=localRouterDiscoveryStatus, winlink1000OduAdmAES256State=winlink1000OduAdmAES256State, winlink1000OduAdmAES256Support=winlink1000OduAdmAES256Support, winlink1000OduAdmBackToFactorySettingsCmd=winlink1000OduAdmBackToFactorySettingsCmd, winlink1000OduAirMaxTxPowerIndex=winlink1000OduAirMaxTxPowerIndex, hbsEhServiceOpenedToHsu=hbsEhServiceOpenedToHsu, winlink1000OduAirCurrentFreq=winlink1000OduAirCurrentFreq, winlink1000OduAirChannelBandwidth=winlink1000OduAirChannelBandwidth, winlink1000OduAdmShutdownTimer=winlink1000OduAdmShutdownTimer, winlink1000OduEthernetIfAdminStatus=winlink1000OduEthernetIfAdminStatus, winlink1000Odu=winlink1000Odu, sfpInsertion=sfpInsertion, desiredRatioCanNotBeAppliedAlarm=desiredRatioCanNotBeAppliedAlarm, winlink1000OduAirRatesTable=winlink1000OduAirRatesTable, wrongConfigurationLoadedAlarm=wrongConfigurationLoadedAlarm, winlink1000OduAirLockRemote=winlink1000OduAirLockRemote, winlink1000OduAdmOvrdCmd=winlink1000OduAdmOvrdCmd, winlink1000OduEthernetNumOfPorts=winlink1000OduEthernetNumOfPorts, winlink1000OduAirSesState=winlink1000OduAirSesState, winlink1000OduAirHssNumberOfDiscoveredODUs=winlink1000OduAirHssNumberOfDiscoveredODUs, winlink1000OduAirRFD=winlink1000OduAirRFD, hotStandbyClear=hotStandbyClear, winlink1000OduAirHssDesiredSynchronizationProtocol=winlink1000OduAirHssDesiredSynchronizationProtocol, externalAlarmInPort4Clear=externalAlarmInPort4Clear, syncEPortHOStateChange=syncEPortHOStateChange, winlink1000OduAdmVlanID=winlink1000OduAdmVlanID, winlink1000OduSrvVlanEgressMode=winlink1000OduSrvVlanEgressMode, radwin2000Family=radwin2000Family, winlink1000OduAirNumberOfChannels=winlink1000OduAirNumberOfChannels, winlink1000OduAirMinorLinkIfVersion=winlink1000OduAirMinorLinkIfVersion, winlink1000OduEthernetIfIndex=winlink1000OduEthernetIfIndex, winlink1000OduAirMstrSlv=winlink1000OduAirMstrSlv, winlink1000OduAirCurrentRateIdx=winlink1000OduAirCurrentRateIdx, winlink1000OduAirMaxTxPower=winlink1000OduAirMaxTxPower, winlink1000OduEthernetIf1588v2PTPEventTXRate=winlink1000OduEthernetIf1588v2PTPEventTXRate, linkLockUnauthorizedRemoteODU=linkLockUnauthorizedRemoteODU, winlink1000OduSrvRingVlanIdEntry=winlink1000OduSrvRingVlanIdEntry, cbwMismatch=cbwMismatch, winlink1000OduEthernetIf1588v2PTPEventRXRate=winlink1000OduEthernetIf1588v2PTPEventRXRate, winlink1000OduSrvVlanIngressMode=winlink1000OduSrvVlanIngressMode, winlink1000OduAirChannelsAdminState=winlink1000OduAirChannelsAdminState, winlink1000OduAdm1588TCSupport=winlink1000OduAdm1588TCSupport, winlink1000OduAirMaxFrequency=winlink1000OduAirMaxFrequency, winlink1000OduAirHssAssociatedCUTable=winlink1000OduAirHssAssociatedCUTable, winlink1000OduAirChannelBWHSSATDDConflictPerCBW=winlink1000OduAirChannelBWHSSATDDConflictPerCBW, winlink1000OduBridgeTpPortIndex=winlink1000OduBridgeTpPortIndex, winlink1000OduSrvConfVlanQGroups=winlink1000OduSrvConfVlanQGroups, poePowerConsumptionAlarm=poePowerConsumptionAlarm, sfpPort1Clear=sfpPort1Clear, winlink1000OduAirHssRfpIndex=winlink1000OduAirHssRfpIndex, externalAlarmInPort1Alarm=externalAlarmInPort1Alarm, winlink1000OduAirPerf=winlink1000OduAirPerf, hbsEncryptionAlarm=hbsEncryptionAlarm, winlink1000OduAdmHostsIPv6=winlink1000OduAdmHostsIPv6, winlink1000OduAirHssRfpEthChannelBW40MHz=winlink1000OduAirHssRfpEthChannelBW40MHz, winlink1000OduSrvQoSVlanQGroupsSetStr=winlink1000OduSrvQoSVlanQGroupsSetStr, winlink1000OduAirHssDomainID=winlink1000OduAirHssDomainID, winlink1000=winlink1000, winlink1000OduSrvQoSConfTable=winlink1000OduSrvQoSConfTable, lanPort2Clear=lanPort2Clear, winlink1000OduAirRxPower=winlink1000OduAirRxPower, winlink1000OduAirHssExtPulseType=winlink1000OduAirHssExtPulseType, winlink1000OduAirChannelBWMaxRatioForSupporting=winlink1000OduAirChannelBWMaxRatioForSupporting, winlink1000OduAdmSiteLinkPassword=winlink1000OduAdmSiteLinkPassword, winlink1000OduAirHssDesiredOpState=winlink1000OduAirHssDesiredOpState, hobupActiveStateFaultyClear=hobupActiveStateFaultyClear, hbsActiveHbs=hbsActiveHbs, swVersionsMatchSoftwareUpgradeRequiredClear=swVersionsMatchSoftwareUpgradeRequiredClear, winlink1000OduAdmProductType=winlink1000OduAdmProductType, winlink1000OduSrvQoSMaxRTQuePercent=winlink1000OduSrvQoSMaxRTQuePercent, winlink1000OduAirHssInterSiteSynchronizationMode=winlink1000OduAirHssInterSiteSynchronizationMode, winlink1000OduAirEnableTxPower=winlink1000OduAirEnableTxPower, winlink1000OduAirHssSyncAcquisitionSeconds=winlink1000OduAirHssSyncAcquisitionSeconds, tdmBackupClear=tdmBackupClear, gateway6K=gateway6K, mngPortDisconnectedAlarm=mngPortDisconnectedAlarm, winlink1000OduAirAntennaGain=winlink1000OduAirAntennaGain, winlink1000OduAdmBroadcast=winlink1000OduAdmBroadcast, winlink1000OduAdmIPStackMode=winlink1000OduAdmIPStackMode, winlink1000OduEthernetIfFailAction=winlink1000OduEthernetIfFailAction, winlink1000OduAirTotalFrames=winlink1000OduAirTotalFrames, winlink1000OduAdmManagerDownloadURL=winlink1000OduAdmManagerDownloadURL, winlink1000OduAirHssInterSiteSynchronizationAvailability=winlink1000OduAirHssInterSiteSynchronizationAvailability, switchCbwAndChannel=switchCbwAndChannel, winlink1000OduAirMaxTxPowerTable=winlink1000OduAirMaxTxPowerTable, winlink1000OduAirHssRfpEthChannelBW14MHz=winlink1000OduAirHssRfpEthChannelBW14MHz, linkLockUnauthorizedODU=linkLockUnauthorizedODU, lanPortDisconnectedAlarm=lanPortDisconnectedAlarm, hbsUnsynchronizedHsuAlarm=hbsUnsynchronizedHsuAlarm, winlink1000OduAdmBatterySavingShutdownTime=winlink1000OduAdmBatterySavingShutdownTime, bsaAlignmentTriggered=bsaAlignmentTriggered, winlink1000OduService=winlink1000OduService, winlink1000OduAirChannelsEntry=winlink1000OduAirChannelsEntry, mobilityLinkOff=mobilityLinkOff, winlink1000OduAdmAddres=winlink1000OduAdmAddres, hssMultipleSourcesDetectedAlarm=hssMultipleSourcesDetectedAlarm, radwin5000HSUFamily=radwin5000HSUFamily, winlink1000OduAirMinTxPower=winlink1000OduAirMinTxPower, radiusServerNoREsponse=radiusServerNoREsponse, winlink1000OduAirChannelBWEntry=winlink1000OduAirChannelBWEntry, winlink1000OduAdmWifiSSID=winlink1000OduAdmWifiSSID, winlink1000OduAirDesiredRate=winlink1000OduAirDesiredRate, btsCpeUpdateServiceSucceed=btsCpeUpdateServiceSucceed, winlink1000OduSrvRingWTR=winlink1000OduSrvRingWTR, winlink1000OduAdmHostsIndex=winlink1000OduAdmHostsIndex, winlink1000OduAdmPMPSUSupport=winlink1000OduAdmPMPSUSupport, winlink1000OduAdmMask=winlink1000OduAdmMask, changeLinkPasswordClear=changeLinkPasswordClear, winlink1000OduAdmPowerConsumption=winlink1000OduAdmPowerConsumption, winlink1000OduAdmHostsPort=winlink1000OduAdmHostsPort, winlink1000OduEthernetIfAddress=winlink1000OduEthernetIfAddress, winlink1000OduAir=winlink1000OduAir, winlink1000OduAdmSnmpAgentMinorVersion=winlink1000OduAdmSnmpAgentMinorVersion, tcNotSupportedByHSU=tcNotSupportedByHSU, winlink1000OduAdmGPSState=winlink1000OduAdmGPSState, winlink1000OduSrvConfQueMir=winlink1000OduSrvConfQueMir, winlink1000OduAdmSwRev=winlink1000OduAdmSwRev, lastUserSnmpAccessOverHourAgo=lastUserSnmpAccessOverHourAgo, bsaAlignmentFinished=bsaAlignmentFinished, winlink1000OduAirHssRfpTdmChannelBW20MHz=winlink1000OduAirHssRfpTdmChannelBW20MHz, winlink1000OduAdmHwRev=winlink1000OduAdmHwRev, lanPort1Clear=lanPort1Clear, winlink1000OduBridgeTpPortTable=winlink1000OduBridgeTpPortTable, radwin6000Family=radwin6000Family, switchCBW=switchCBW, winlink1000OduAirChannelsTable=winlink1000OduAirChannelsTable, winlink1000OduSrvRingVlanIdTable=winlink1000OduSrvRingVlanIdTable, odu2KIntegratedAntenna=odu2KIntegratedAntenna, winlink1000OduAdmHostsEntry=winlink1000OduAdmHostsEntry, winlink1000OduEthernetIfOperStatus=winlink1000OduEthernetIfOperStatus, ringEthernetSrviceUnblockedTO=ringEthernetSrviceUnblockedTO, winlink1000OduSrvVlanDisable=winlink1000OduSrvVlanDisable, oduGSUExternalAntenna=oduGSUExternalAntenna, winlink1000OduAirHssDiscoverIndex=winlink1000OduAirHssDiscoverIndex, winlink1000OduAirHssEthVLANTag=winlink1000OduAirHssEthVLANTag, temperatureThresholdClear=temperatureThresholdClear, winlink1000OduBridgeTpPortInFrames=winlink1000OduBridgeTpPortInFrames, winlink1000OduProductId=winlink1000OduProductId, desiredRatioCanNotBeAppliedClear=desiredRatioCanNotBeAppliedClear, winlink1000OduBridge=winlink1000OduBridge, hbsSynchronizedHsuAlarm=hbsSynchronizedHsuAlarm, gpsSynchronized=gpsSynchronized, winlink1000OduServiceVlanProviderListTPIDstr=winlink1000OduServiceVlanProviderListTPIDstr, winlink1000OduBridgeTpPortOutFrames=winlink1000OduBridgeTpPortOutFrames, poePortClear=poePortClear, poePowerConsumptionClear=poePowerConsumptionClear)
mibBuilder.exportSymbols("RADWIN-MIB-WINLINK1000", ethServiceOpened=ethServiceOpened, oduHBSExternalAntenna=oduHBSExternalAntenna, winlink1000OduServiceQoS=winlink1000OduServiceQoS, winlink1000OduAdmLinkPassword=winlink1000OduAdmLinkPassword, oduWiFiAP=oduWiFiAP, winlink1000OduAdmLinkName=winlink1000OduAdmLinkName, winlink1000OduEthernetRemainingRate=winlink1000OduEthernetRemainingRate, winlink1000OduAdmWifiRestart=winlink1000OduAdmWifiRestart, winlink1000OduSrvQoSMode=winlink1000OduSrvQoSMode, ringRplStateIdle=ringRplStateIdle, winlink1000OduAdmSN=winlink1000OduAdmSN, compatibleIdus=compatibleIdus, trackRouterDiscoverySucceed=trackRouterDiscoverySucceed, winlink1000OduAirHssDiscover=winlink1000OduAirHssDiscover, gpsOverCurrentAlarm=gpsOverCurrentAlarm, winlink1000OduReadCommunity=winlink1000OduReadCommunity, odu2KExternalAntenna=odu2KExternalAntenna, winlink1000OduAdmWifi=winlink1000OduAdmWifi, winlink1000OduBuzzerAdminState=winlink1000OduBuzzerAdminState, winlink1000OduBridgeConfigMode=winlink1000OduBridgeConfigMode, winlink1000OduEthernetSfpProperties=winlink1000OduEthernetSfpProperties, winlink1000OduAirHssRfpTable=winlink1000OduAirHssRfpTable, winlink1000OduEthernetIfEntry=winlink1000OduEthernetIfEntry, incompatibleHsu=incompatibleHsu, winlink1000OduSrvConfDiffservQGroups=winlink1000OduSrvConfDiffservQGroups, winlink1000OduAirHssDelayToHSM=winlink1000OduAirHssDelayToHSM, winlink1000OduAirBadFrames=winlink1000OduAirBadFrames, winlink1000OduAirHssRfpPhase=winlink1000OduAirHssRfpPhase, winlink1000OduBridgeBasePortTable=winlink1000OduBridgeBasePortTable, swVersionsCompatibleClear=swVersionsCompatibleClear, winlink1000OduAirHssNSIndicator=winlink1000OduAirHssNSIndicator, winlink1000OduAirChannelsIndex=winlink1000OduAirChannelsIndex, winlink1000OduServiceVlan=winlink1000OduServiceVlan, encryptionClear=encryptionClear, winlink1000OduSrvEgressTag=winlink1000OduSrvEgressTag, winlink1000OduAirMajorLinkIfVersion=winlink1000OduAirMajorLinkIfVersion, winlink1000OduEthernet=winlink1000OduEthernet, ringEthServiceStatus=ringEthServiceStatus, winlink1000OduAirChannelBWAvail=winlink1000OduAirChannelBWAvail, winlink1000OduAdmIPv6DefaultGateWay=winlink1000OduAdmIPv6DefaultGateWay, winlink1000OduSrvRingEthStatus=winlink1000OduSrvRingEthStatus, winlink1000OduAdmProductRev=winlink1000OduAdmProductRev, odu6K=odu6K, winlink1000OduAirHssRfpEntry=winlink1000OduAirHssRfpEntry, winlink1000OduAirMaxTxPowerEntry=winlink1000OduAirMaxTxPowerEntry, winlink1000OduAirHssNumberOfAssociatedCU=winlink1000OduAirHssNumberOfAssociatedCU, winlink1000OduAdmIPv6Address=winlink1000OduAdmIPv6Address, winlink1000OduSrvBridging=winlink1000OduSrvBridging, winlink1000OduBridgeTpMode=winlink1000OduBridgeTpMode, changeRatio=changeRatio, winlink1000OduSrvVlanIngressAllowedVIDs=winlink1000OduSrvVlanIngressAllowedVIDs, hssSyncUnits=hssSyncUnits, incompatibleHbsHsu=incompatibleHbsHsu, winlink1000OduAirFreq=winlink1000OduAirFreq, winlink1000OduAdmActualConnectMode=winlink1000OduAdmActualConnectMode, winlink1000OduAirCurrentRateGI=winlink1000OduAirCurrentRateGI, winlink1000OduAirHssDiscoverTable=winlink1000OduAirHssDiscoverTable, winlink1000OduAdmWifiRssi=winlink1000OduAdmWifiRssi, winlink1000OduAirLinkWorkingMode=winlink1000OduAirLinkWorkingMode, winlink1000OduAirHss=winlink1000OduAirHss, hbsEhServiceClosedToHsu=hbsEhServiceClosedToHsu, winlink1000OduAirHssRfpEthChannelBW10MHz=winlink1000OduAirHssRfpEthChannelBW10MHz, winlink1000OduAirDesiredRateIdx=winlink1000OduAirDesiredRateIdx, winlink1000OduSrvRingMaxAllowedTimeFromLastRpm=winlink1000OduSrvRingMaxAllowedTimeFromLastRpm, winlink1000OduAirHssHSMIPAddress=winlink1000OduAirHssHSMIPAddress, hsuUnsupportedBeacon=hsuUnsupportedBeacon, winlink1000OduAdmHostsIp=winlink1000OduAdmHostsIp, winlink1000OduBridgeBasePortIndex=winlink1000OduBridgeBasePortIndex, winlink1000OduAirAutoChannelSelectionState=winlink1000OduAirAutoChannelSelectionState, hssGSU=hssGSU, winlink1000OduAdmIPv6ParamsCnfg=winlink1000OduAdmIPv6ParamsCnfg, oduIntegratedAntenna=oduIntegratedAntenna, winlink1000OduAdmin=winlink1000OduAdmin, oduHSUExternalAntenna=oduHSUExternalAntenna, gpsOverCurrentClear=gpsOverCurrentClear, winlink1000OduAirSSID=winlink1000OduAirSSID, hobupStandbyState=hobupStandbyState, winlink1000OduBridgeBase=winlink1000OduBridgeBase, winlink1000OduAdmIpParamsCnfg=winlink1000OduAdmIpParamsCnfg, sfpPort1DisconnectedAlarm=sfpPort1DisconnectedAlarm, winlink1000OduSrvRingVlanIdIndex=winlink1000OduSrvRingVlanIdIndex, localRouterDiscoverySucceed=localRouterDiscoverySucceed, winlink1000OduAdmVlanPriority=winlink1000OduAdmVlanPriority, winlink1000OduAdmRadioRev=winlink1000OduAdmRadioRev, hssSyncToProperSourceStoppedAlarm=hssSyncToProperSourceStoppedAlarm, winlink1000OduEthernetGbeSupported=winlink1000OduEthernetGbeSupported, winlink1000OduAdmWiFiPowerMode=winlink1000OduAdmWiFiPowerMode, syncEPortFailureStateChange=syncEPortFailureStateChange, radwinProducts=radwinProducts, gateway6000=gateway6000, winlink1000OduAirCurrentTxPower=winlink1000OduAirCurrentTxPower, winlink1000OduAirHssSupportedSynchronizationProtocol=winlink1000OduAirHssSupportedSynchronizationProtocol, winlink1000OduAirChainsRxPower=winlink1000OduAirChainsRxPower, swVersionsMismatchRestrictedCompatibilityAlarm=swVersionsMismatchRestrictedCompatibilityAlarm, winlink1000OduSrvConfQueWeight=winlink1000OduSrvConfQueWeight, winlink1000OduSrvRingLinkMode=winlink1000OduSrvRingLinkMode, winlink1000OduAdmIPv6Prefix=winlink1000OduAdmIPv6Prefix, winlink1000OduAirHssRfpTdmChannelBW5MHz=winlink1000OduAirHssRfpTdmChannelBW5MHz, winlink1000OduSrvQoSDiffservQGroupsSetStr=winlink1000OduSrvQoSDiffservQGroupsSetStr, winlink1000OduAdmWifiChannel=winlink1000OduAdmWifiChannel, linkLockAuthorizedRemoteODU=linkLockAuthorizedRemoteODU, winlink1000OduAdmWifiNetwork=winlink1000OduAdmWifiNetwork, winlink1000OduAdmWifiStationMAC=winlink1000OduAdmWifiStationMAC, oduHSU=oduHSU, lanPortClear=lanPortClear, winlink1000OduReadWriteCommunity=winlink1000OduReadWriteCommunity, winlink1000OduServiceRingTopology=winlink1000OduServiceRingTopology, winlink1000OduAdmHostsTable=winlink1000OduAdmHostsTable, externalAlarmInPort1Clear=externalAlarmInPort1Clear, winlink1000OduAirHssTime=winlink1000OduAirHssTime, btsTargetIsReachable=btsTargetIsReachable, winlink1000OduAirHssAssociatedCUTableEntry=winlink1000OduAirHssAssociatedCUTableEntry, oduExternalAntenna=oduExternalAntenna, winlink1000OduAdmSnmpAgentVersion=winlink1000OduAdmSnmpAgentVersion, hbsEncryptionClear=hbsEncryptionClear, winlink1000OduAdmCpuID=winlink1000OduAdmCpuID, winlink1000OduAirHssExtPulseStatus=winlink1000OduAirHssExtPulseStatus, winlink1000OduAirHssDiscoverODUDescription=winlink1000OduAirHssDiscoverODUDescription, winlink1000OduAdmGateway=winlink1000OduAdmGateway, noRadiusServerRespond=noRadiusServerRespond, winlink1000OduAirCurrentRate=winlink1000OduAirCurrentRate, winlink1000OduAirChannelsAvail=winlink1000OduAirChannelsAvail, mngPortClear=mngPortClear, winlink1000OduAirHssLongitude=winlink1000OduAirHssLongitude, winlink1000OduAirTxPower36=winlink1000OduAirTxPower36, swVersionsMatchRestrictedCompatibilityClear=swVersionsMatchRestrictedCompatibilityClear, winlink1000OduAdmBsaOperationMode=winlink1000OduAdmBsaOperationMode, gpsCommunicationFailiureAlarm=gpsCommunicationFailiureAlarm, winlink1000OduAdmWifiTxPower=winlink1000OduAdmWifiTxPower, winlink1000OduAdmHostsSecurityModel=winlink1000OduAdmHostsSecurityModel, linkLockAuthorizedODU=linkLockAuthorizedODU, winlink1000OduAirChannelsDefaultFreq=winlink1000OduAirChannelsDefaultFreq, winlink1000OduAdmSyncESupport=winlink1000OduAdmSyncESupport, winlink1000OduBridgeTpPortInBytes=winlink1000OduBridgeTpPortInBytes, winlink1000OduAirHssRfpTdmChannelBW40MHz=winlink1000OduAirHssRfpTdmChannelBW40MHz, winlink1000OduAirHssEWIndicator=winlink1000OduAirHssEWIndicator, winlink1000OduAirHssRfpTdmChannelBW10MHz=winlink1000OduAirHssRfpTdmChannelBW10MHz, swVersionsMismatchFullCompatibilityAlarm=swVersionsMismatchFullCompatibilityAlarm, oduHBS=oduHBS, winlink1000OduAirHssRfpEthChannelBW20MHz=winlink1000OduAirHssRfpEthChannelBW20MHz, winlink1000OduAdmHostsPassword=winlink1000OduAdmHostsPassword, winlink1000OduAirHssHSMIPv6Address=winlink1000OduAirHssHSMIPv6Address, winlink1000OduAirHssDiscoverEntry=winlink1000OduAirHssDiscoverEntry, externalAlarmInPort2Alarm=externalAlarmInPort2Alarm, winlink1000OduAirHssAssociatedCUDescription=winlink1000OduAirHssAssociatedCUDescription, winlink1000OduAirHssSatellitesSatSyncRequired=winlink1000OduAirHssSatellitesSatSyncRequired, radwin5000HBSFamily=radwin5000HBSFamily, winlink1000OduAdmConnectionType=winlink1000OduAdmConnectionType)
