#
# PySNMP MIB module FOUNDRY-SN-CAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-CAM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:01:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
platform, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "platform")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, TimeTicks, IpAddress, Counter32, MibIdentifier, Counter64, ObjectIdentity, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "TimeTicks", "IpAddress", "Counter32", "MibIdentifier", "Counter64", "ObjectIdentity", "NotificationType", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snCamMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1))
snCamMIB.setRevisions(('2010-06-02 00:00', '2007-11-19 00:00',))
if mibBuilder.loadTexts: snCamMIB.setLastUpdated('201006020000Z')
if mibBuilder.loadTexts: snCamMIB.setOrganization('Brocade Communications Systems, Inc.')
class Percent(TextualConvention, Gauge32):
    status = 'current'
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 100)

snCamObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1))
snCamProfile = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("default", 1), ("ipv4", 2), ("ipv4Ipv6", 3), ("ipv4Ipv62", 4), ("ipv4Vpls", 5), ("ipv4Vpn", 6), ("ipv6", 7), ("l2Metro", 8), ("l2Metro2", 9), ("mplsL3vpn", 10), ("mplsL3vpn2", 11), ("mplsVpls", 12), ("mplsVpls2", 13), ("mplsVpnVpls", 14), ("multiService", 15), ("multiService2", 16), ("multiService3", 17), ("multiService4", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamProfile.setStatus('current')
snCamUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2))
snCamUsageL3Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 1), )
if mibBuilder.loadTexts: snCamUsageL3Table.setStatus('current')
snCamUsageL3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-CAM-MIB", "snCamUsageL3Slot"), (0, "FOUNDRY-SN-CAM-MIB", "snCamUsageL3Processor"), (0, "FOUNDRY-SN-CAM-MIB", "snCamUsageL3Type"), (0, "FOUNDRY-SN-CAM-MIB", "snCamUsageL3Supernet"))
if mibBuilder.loadTexts: snCamUsageL3Entry.setStatus('current')
snCamUsageL3Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: snCamUsageL3Slot.setStatus('current')
snCamUsageL3Processor = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: snCamUsageL3Processor.setStatus('current')
snCamUsageL3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("ipv4vpn", 3), ("ipv6vpn", 4))))
if mibBuilder.loadTexts: snCamUsageL3Type.setStatus('current')
snCamUsageL3Supernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: snCamUsageL3Supernet.setStatus('current')
snCamUsageL3Size = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 1, 1, 5), Unsigned32()).setUnits('Entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageL3Size.setStatus('current')
snCamUsageL3Free = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 1, 1, 6), Gauge32()).setUnits('Entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageL3Free.setStatus('current')
snCamUsageL3UsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 1, 1, 7), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageL3UsedPercent.setStatus('current')
snCamUsageL2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 2), )
if mibBuilder.loadTexts: snCamUsageL2Table.setStatus('current')
snCamUsageL2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-CAM-MIB", "snCamUsageL2Slot"), (0, "FOUNDRY-SN-CAM-MIB", "snCamUsageL2Processor"), (0, "FOUNDRY-SN-CAM-MIB", "snCamUsageL2Type"))
if mibBuilder.loadTexts: snCamUsageL2Entry.setStatus('current')
snCamUsageL2Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: snCamUsageL2Slot.setStatus('current')
snCamUsageL2Processor = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: snCamUsageL2Processor.setStatus('current')
snCamUsageL2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forwarding", 1), ("protocol", 2), ("flooding", 3), ("total", 4))))
if mibBuilder.loadTexts: snCamUsageL2Type.setStatus('current')
snCamUsageL2Size = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 2, 1, 4), Unsigned32()).setUnits('Entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageL2Size.setStatus('current')
snCamUsageL2Free = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 2, 1, 5), Gauge32()).setUnits('Entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageL2Free.setStatus('current')
snCamUsageL2UsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 2, 1, 6), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageL2UsedPercent.setStatus('current')
snCamUsageSessionTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 3), )
if mibBuilder.loadTexts: snCamUsageSessionTable.setStatus('current')
snCamUsageSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-CAM-MIB", "snCamUsageSessionSlot"), (0, "FOUNDRY-SN-CAM-MIB", "snCamUsageSessionProcessor"), (0, "FOUNDRY-SN-CAM-MIB", "snCamUsageSessionType"))
if mibBuilder.loadTexts: snCamUsageSessionEntry.setStatus('current')
snCamUsageSessionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: snCamUsageSessionSlot.setStatus('current')
snCamUsageSessionProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: snCamUsageSessionProcessor.setStatus('current')
snCamUsageSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ipv4Multicast", 1), ("ipv4andMacReceiveAcl", 2), ("ipv4andMacRuleAcl", 3), ("ipv4andMacTotal", 4), ("ipv4andMacOut", 5), ("ipv6Multicast", 6), ("ipv6ReceiveAcl", 7), ("ipv6RuleAcl", 8), ("ipv6Total", 9), ("ipv6Out", 10), ("labelOut", 11), ("ipv4SrcGuardDenial", 12), ("ipv4SrcGuardPermit", 13), ("internalForwardingLookup", 14))))
if mibBuilder.loadTexts: snCamUsageSessionType.setStatus('current')
snCamUsageSessionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 3, 1, 4), Unsigned32()).setUnits('Entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageSessionSize.setStatus('current')
snCamUsageSessionFree = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 3, 1, 5), Gauge32()).setUnits('Entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageSessionFree.setStatus('current')
snCamUsageSessionUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 3, 1, 6), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageSessionUsedPercent.setStatus('current')
snCamUsageOtherTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 4), )
if mibBuilder.loadTexts: snCamUsageOtherTable.setStatus('current')
snCamUsageOtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-CAM-MIB", "snCamUsageOtherSlot"), (0, "FOUNDRY-SN-CAM-MIB", "snCamUsageOtherProcessor"), (0, "FOUNDRY-SN-CAM-MIB", "snCamUsageOtherType"))
if mibBuilder.loadTexts: snCamUsageOtherEntry.setStatus('current')
snCamUsageOtherSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: snCamUsageOtherSlot.setStatus('current')
snCamUsageOtherProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: snCamUsageOtherProcessor.setStatus('current')
snCamUsageOtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gre", 1), ("multicastVpls", 2))))
if mibBuilder.loadTexts: snCamUsageOtherType.setStatus('current')
snCamUsageOtherSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 4, 1, 4), Unsigned32()).setUnits('Entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageOtherSize.setStatus('current')
snCamUsageOtherFree = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 4, 1, 5), Gauge32()).setUnits('Entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageOtherFree.setStatus('current')
snCamUsageOtherUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 1, 1, 2, 4, 1, 6), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamUsageOtherUsedPercent.setStatus('current')
mibBuilder.exportSymbols("FOUNDRY-SN-CAM-MIB", snCamUsageL2Free=snCamUsageL2Free, snCamUsageL3Supernet=snCamUsageL3Supernet, snCamUsageSessionSize=snCamUsageSessionSize, snCamUsageOtherUsedPercent=snCamUsageOtherUsedPercent, snCamUsageL3Table=snCamUsageL3Table, snCamUsageL2Processor=snCamUsageL2Processor, snCamObjects=snCamObjects, snCamUsageOtherTable=snCamUsageOtherTable, snCamMIB=snCamMIB, snCamUsageSessionFree=snCamUsageSessionFree, snCamUsageL2Entry=snCamUsageL2Entry, snCamUsageOtherFree=snCamUsageOtherFree, snCamUsageOtherEntry=snCamUsageOtherEntry, snCamUsageSessionUsedPercent=snCamUsageSessionUsedPercent, snCamUsageL3Type=snCamUsageL3Type, snCamUsageL2Table=snCamUsageL2Table, snCamUsageL2Type=snCamUsageL2Type, snCamUsageL3Slot=snCamUsageL3Slot, snCamUsageL3Size=snCamUsageL3Size, PYSNMP_MODULE_ID=snCamMIB, Percent=Percent, snCamUsageOtherType=snCamUsageOtherType, snCamProfile=snCamProfile, snCamUsageL3Free=snCamUsageL3Free, snCamUsage=snCamUsage, snCamUsageL2Size=snCamUsageL2Size, snCamUsageSessionType=snCamUsageSessionType, snCamUsageL3Processor=snCamUsageL3Processor, snCamUsageL3UsedPercent=snCamUsageL3UsedPercent, snCamUsageSessionSlot=snCamUsageSessionSlot, snCamUsageOtherSlot=snCamUsageOtherSlot, snCamUsageL3Entry=snCamUsageL3Entry, snCamUsageL2Slot=snCamUsageL2Slot, snCamUsageSessionProcessor=snCamUsageSessionProcessor, snCamUsageOtherSize=snCamUsageOtherSize, snCamUsageSessionEntry=snCamUsageSessionEntry, snCamUsageL2UsedPercent=snCamUsageL2UsedPercent, snCamUsageOtherProcessor=snCamUsageOtherProcessor, snCamUsageSessionTable=snCamUsageSessionTable)
