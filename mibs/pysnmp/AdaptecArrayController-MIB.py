#
# PySNMP MIB module AdaptecArrayController-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AdaptecArrayController-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, iso, NotificationType, Counter64, Integer32, IpAddress, MibIdentifier, Gauge32, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, TimeTicks, enterprises, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "NotificationType", "Counter64", "Integer32", "IpAddress", "MibIdentifier", "Gauge32", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "TimeTicks", "enterprises", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3))
adaptecArrayController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3, 5))
adaptecArrayControllerSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerSoftwareVersion.setStatus('mandatory')
adaptecArrayControllerAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterNumber.setStatus('mandatory')
adaptecArrayControllerAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 3), )
if mibBuilder.loadTexts: adaptecArrayControllerAdapterTable.setStatus('mandatory')
adaptecArrayControllerContainerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 4), )
if mibBuilder.loadTexts: adaptecArrayControllerContainerTable.setStatus('mandatory')
adaptecArrayControllerDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 5), )
if mibBuilder.loadTexts: adaptecArrayControllerDeviceTable.setStatus('mandatory')
adaptecArrayControllerContainerToDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 6), )
if mibBuilder.loadTexts: adaptecArrayControllerContainerToDeviceTable.setStatus('mandatory')
adaptecArrayControllerEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 20), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTable.setStatus('mandatory')
adaptecArrayControllerEnclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 21), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanTable.setStatus('mandatory')
adaptecArrayControllerEnclosurePowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 22), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyTable.setStatus('mandatory')
adaptecArrayControllerEnclosureDoorLockTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 23), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockTable.setStatus('mandatory')
adaptecArrayControllerEnclosureTemperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 24), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorTable.setStatus('mandatory')
adaptecArrayControllerEnclosureScsiIdTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 25), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdTable.setStatus('mandatory')
adaptecArrayControllerEnclosureDeviceInsertionTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 26), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionTable.setStatus('mandatory')
adaptecArrayControllerEnclosureSlotStatusTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 27), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusTable.setStatus('mandatory')
adaptecArrayControllerAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerAdapterIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerAdapterEntry.setStatus('mandatory')
adaptecArrayControllerAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterIndex.setStatus('mandatory')
adaptecArrayControllerAdapterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterDescription.setStatus('mandatory')
adaptecArrayControllerAdapterType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterType.setStatus('mandatory')
adaptecArrayControllerAdapterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterVersion.setStatus('mandatory')
adaptecArrayControllerAdapterChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterChannelCount.setStatus('mandatory')
adaptecArrayControllerAdapterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterStatus.setStatus('mandatory')
adaptecArrayControllerAdapterBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterBiosVersion.setStatus('mandatory')
adaptecArrayControllerAdapterKernelVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterKernelVersion.setStatus('mandatory')
adaptecArrayControllerAdapterMonitorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterMonitorVersion.setStatus('mandatory')
adaptecArrayControllerAdapterHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterHardwareVersion.setStatus('mandatory')
adaptecArrayControllerAdapterTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterTotalMemory.setStatus('mandatory')
adaptecArrayControllerAdapterProgramMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterProgramMemory.setStatus('mandatory')
adaptecArrayControllerAdapterBufferMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterBufferMemory.setStatus('mandatory')
adaptecArrayControllerContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerContIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerContainerEntry.setStatus('mandatory')
adaptecArrayControllerContIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContIndex.setStatus('mandatory')
adaptecArrayControllerContAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContAdapterIndex.setStatus('mandatory')
adaptecArrayControllerContNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContNumber.setStatus('mandatory')
adaptecArrayControllerContSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContSize.setStatus('mandatory')
adaptecArrayControllerContMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContMountPoint.setStatus('mandatory')
adaptecArrayControllerContType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContType.setStatus('mandatory')
adaptecArrayControllerContUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContUsage.setStatus('mandatory')
adaptecArrayControllerContStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContStatus.setStatus('mandatory')
adaptecArrayControllerContStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContStripeSize.setStatus('mandatory')
adaptecArrayControllerDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerDevIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerDeviceEntry.setStatus('mandatory')
adaptecArrayControllerDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevIndex.setStatus('mandatory')
adaptecArrayControllerDevAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevAdapterIndex.setStatus('mandatory')
adaptecArrayControllerDevChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevChannelId.setStatus('mandatory')
adaptecArrayControllerDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevId.setStatus('mandatory')
adaptecArrayControllerDevLogicalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevLogicalNumber.setStatus('mandatory')
adaptecArrayControllerDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevType.setStatus('mandatory')
adaptecArrayControllerDevVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevVendor.setStatus('mandatory')
adaptecArrayControllerDevProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevProduct.setStatus('mandatory')
adaptecArrayControllerDevRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevRevision.setStatus('mandatory')
adaptecArrayControllerDevBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevBlocks.setStatus('mandatory')
adaptecArrayControllerDevBytesPerBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevBytesPerBlock.setStatus('mandatory')
adaptecArrayControllerDevUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevUsage.setStatus('mandatory')
adaptecArrayControllerDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevStatus.setStatus('mandatory')
adaptecArrayControllerContainerToDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerContainerToDeviceIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerContainerToDeviceEntry.setStatus('mandatory')
adaptecArrayControllerContainerToDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContainerToDeviceIndex.setStatus('mandatory')
adaptecArrayControllerCDAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerCDAdapterIndex.setStatus('mandatory')
adaptecArrayControllerContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContainerIndex.setStatus('mandatory')
adaptecArrayControllerDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDeviceIndex.setStatus('mandatory')
adaptecArrayControllerPartitionOffsetLSW = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerPartitionOffsetLSW.setStatus('mandatory')
adaptecArrayControllerPartitionOffsetMSW = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerPartitionOffsetMSW.setStatus('mandatory')
adaptecArrayControllerPartitionSizeLSW = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerPartitionSizeLSW.setStatus('mandatory')
adaptecArrayControllerPartitionSizeMSW = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerPartitionSizeMSW.setStatus('mandatory')
adaptecArrayControllerEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureEntry.setStatus('mandatory')
adaptecArrayControllerEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureAdapterIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureProcessorId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureProcessorId.setStatus('mandatory')
adaptecArrayControllerEnclosureType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("decFault", 3), ("saf-te", 4), ("ses", 5), ("aemi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureType.setStatus('mandatory')
adaptecArrayControllerEnclosureNumberFans = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberFans.setStatus('mandatory')
adaptecArrayControllerEnclosureNumberPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberPowerSupplies.setStatus('mandatory')
adaptecArrayControllerEnclosureNumberSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberSlots.setStatus('mandatory')
adaptecArrayControllerEnclosureDoorLock = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLock.setStatus('mandatory')
adaptecArrayControllerEnclosureNumberTemperatureSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberTemperatureSensors.setStatus('mandatory')
adaptecArrayControllerEnclosureSpeaker = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSpeaker.setStatus('mandatory')
adaptecArrayControllerEnclosureBootTimeDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureBootTimeDiagnostic.setStatus('mandatory')
adaptecArrayControllerEnclosureVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureVendor.setStatus('mandatory')
adaptecArrayControllerEnclosureProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureProduct.setStatus('mandatory')
adaptecArrayControllerEnclosureRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureRevision.setStatus('mandatory')
adaptecArrayControllerEnclosureIdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureIdLow.setStatus('mandatory')
adaptecArrayControllerEnclosureIdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureIdHigh.setStatus('mandatory')
adaptecArrayControllerEnclosureStandardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureStandardRevision.setStatus('mandatory')
adaptecArrayControllerEnclosurePowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerOnTime.setStatus('mandatory')
adaptecArrayControllerEnclosurePowerCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerCycles.setStatus('mandatory')
adaptecArrayControllerEnclosureSpeakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSpeakerStatus.setStatus('mandatory')
adaptecArrayControllerEnclosureOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureOverTemperature.setStatus('mandatory')
adaptecArrayControllerEnclosureFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 21, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureFanIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanEntry.setStatus('mandatory')
adaptecArrayControllerEnclosureFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureFanEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanEnclosureIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6), ("notInstalled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanStatus.setStatus('mandatory')
adaptecArrayControllerEnclosurePowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 22, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosurePowerSupplyIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyEntry.setStatus('mandatory')
adaptecArrayControllerEnclosurePowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyIndex.setStatus('mandatory')
adaptecArrayControllerEnclosurePowerSupplyEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyEnclosureIndex.setStatus('mandatory')
adaptecArrayControllerEnclosurePowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("operationalAndOn", 2), ("operationalAndOff", 3), ("onAndMalfunctioning", 4), ("offAndMalfunctioning", 5), ("installed", 6), ("notInstalled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyStatus.setStatus('mandatory')
adaptecArrayControllerEnclosureDoorLockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 23, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureDoorLockIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockEntry.setStatus('mandatory')
adaptecArrayControllerEnclosureDoorLockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureDoorLockEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockEnclosureIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureDoorLockSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockSlot.setStatus('mandatory')
adaptecArrayControllerEnclosureDoorLockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("locked", 2), ("unlocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockStatus.setStatus('mandatory')
adaptecArrayControllerEnclosureTemperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 24, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureTemperatureSensorIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorEntry.setStatus('mandatory')
adaptecArrayControllerEnclosureTemperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureTemperatureSensorEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorEnclosureIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureTemperatureSensorOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorOverTemperature.setStatus('mandatory')
adaptecArrayControllerEnclosureTemperatureSensorDegrees = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorDegrees.setStatus('mandatory')
adaptecArrayControllerEnclosureScsiIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureScsiIdIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdEntry.setStatus('mandatory')
adaptecArrayControllerEnclosureScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureScsiIdEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdEnclosureIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureScsiIdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdSlot.setStatus('mandatory')
adaptecArrayControllerEnclosureChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureChannelId.setStatus('mandatory')
adaptecArrayControllerEnclosureScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiId.setStatus('mandatory')
adaptecArrayControllerEnclosureLunId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureLunId.setStatus('mandatory')
adaptecArrayControllerEnclosureDeviceInsertionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 26, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureDeviceInsertionIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionEntry.setStatus('mandatory')
adaptecArrayControllerEnclosureDeviceInsertionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureDeviceInsertionEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionEnclosureIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureDeviceInsertionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionSlot.setStatus('mandatory')
adaptecArrayControllerEnclosureDeviceInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertions.setStatus('mandatory')
adaptecArrayControllerEnclosureSlotStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 27, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureSlotStatusIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusEntry.setStatus('mandatory')
adaptecArrayControllerEnclosureSlotStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureSlotStatusEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusEnclosureIndex.setStatus('mandatory')
adaptecArrayControllerEnclosureSlotStatusSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 27, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusSlot.setStatus('mandatory')
adaptecArrayControllerEnclosureSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatus.setStatus('mandatory')
adaptecArrayControllerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000))
aacControllerId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 1), DisplayString())
if mibBuilder.loadTexts: aacControllerId.setStatus('mandatory')
aacContainerId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 2), Integer32())
if mibBuilder.loadTexts: aacContainerId.setStatus('mandatory')
aacBusId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 3), Integer32())
if mibBuilder.loadTexts: aacBusId.setStatus('mandatory')
aacScsiId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 4), Integer32())
if mibBuilder.loadTexts: aacScsiId.setStatus('mandatory')
aacLunId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 5), Integer32())
if mibBuilder.loadTexts: aacLunId.setStatus('mandatory')
aacEnclosureProcessorId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 6), Integer32())
if mibBuilder.loadTexts: aacEnclosureProcessorId.setStatus('mandatory')
aacComponentUnitId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 7), Integer32())
if mibBuilder.loadTexts: aacComponentUnitId.setStatus('mandatory')
aacDriveLetterChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,1)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacFailoverChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,2)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
aacContainerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,3)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacFileSystemChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,4)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacGeneralContainerFailure = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,6)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacMirrorNotMirroring = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,7)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacMirrorFailureNoSpace = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,8)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacMirrorFailureNoUnmirror = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,9)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacMirrorFailoverStarted = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,10)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacMirrorFailoverFailed = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,11)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacMirrorNoFailoverAssigned = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,12)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacMirrorDriveFailure = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,13)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacRaidRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,14)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacRaidRebuildRestart = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,15)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacRaidDriveFailure = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,16)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacRaidNoFailover = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,17)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacRaidNoSpace = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,18)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacSnapshotContainerAlmostFull = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,19)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacSnapshotContainerFull = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,20)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacRaidRebuildComplete = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,21)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,22)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
aacControllerResume = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,23)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
aacInterfaceUp = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,24))
aacBatteryReconditionRequired = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,25)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
aacEnclosureGeneralError = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,26)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacEnclosureProcessorId"), ("AdaptecArrayController-MIB", "aacComponentUnitId"))
aacEnclosureFanError = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,27)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacEnclosureProcessorId"), ("AdaptecArrayController-MIB", "aacComponentUnitId"))
aacEnclosurePowerSupplyError = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,28)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacEnclosureProcessorId"), ("AdaptecArrayController-MIB", "aacComponentUnitId"))
aacEnclosureTempAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,29)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacEnclosureProcessorId"), ("AdaptecArrayController-MIB", "aacComponentUnitId"))
aacEnclosureTempOver = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,30)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacEnclosureProcessorId"), ("AdaptecArrayController-MIB", "aacComponentUnitId"))
aacBatteryDead = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,31)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
aacBatteryImproving = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,32)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
aacBatteryDegrading = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,33)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
aacBatteryGood = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,34)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
aacControllerPaused = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,35)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
aacContainerCreated = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,36)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacContainerDeleted = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,37)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
aacDeviceFailurePredictionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,38)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
aacDeviceFailurePredictionTest = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,39)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
aacDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,40)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
aacDeviceTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,41)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
aacDeviceDegradedWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,42)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
aacDeviceFailurePredictionConfigurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,43)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
mibBuilder.exportSymbols("AdaptecArrayController-MIB", adaptecArrayControllerDevBytesPerBlock=adaptecArrayControllerDevBytesPerBlock, adaptecArrayControllerDevChannelId=adaptecArrayControllerDevChannelId, adaptecArrayControllerEnclosureScsiId=adaptecArrayControllerEnclosureScsiId, adaptecArrayController=adaptecArrayController, adaptecArrayControllerEnclosureFanStatus=adaptecArrayControllerEnclosureFanStatus, adaptecArrayControllerDevRevision=adaptecArrayControllerDevRevision, adaptecArrayControllerDeviceEntry=adaptecArrayControllerDeviceEntry, adaptecArrayControllerDevProduct=adaptecArrayControllerDevProduct, adaptecArrayControllerEnclosurePowerSupplyIndex=adaptecArrayControllerEnclosurePowerSupplyIndex, aacBatteryGood=aacBatteryGood, adaptecArrayControllerEnclosureSlotStatusTable=adaptecArrayControllerEnclosureSlotStatusTable, adaptecArrayControllerEnclosureSlotStatus=adaptecArrayControllerEnclosureSlotStatus, adaptecArrayControllerAdapterBufferMemory=adaptecArrayControllerAdapterBufferMemory, aacMirrorFailureNoSpace=aacMirrorFailureNoSpace, aacBatteryDead=aacBatteryDead, adaptecArrayControllerEnclosureDoorLockEntry=adaptecArrayControllerEnclosureDoorLockEntry, adaptecArrayControllerContainerToDeviceIndex=adaptecArrayControllerContainerToDeviceIndex, adaptecArrayControllerDevType=adaptecArrayControllerDevType, aacEnclosurePowerSupplyError=aacEnclosurePowerSupplyError, adaptecArrayControllerEnclosureChannelId=adaptecArrayControllerEnclosureChannelId, aacRaidRebuildRestart=aacRaidRebuildRestart, adaptecArrayControllerEnclosurePowerCycles=adaptecArrayControllerEnclosurePowerCycles, adaptecArrayControllerContainerToDeviceEntry=adaptecArrayControllerContainerToDeviceEntry, aacMirrorFailureNoUnmirror=aacMirrorFailureNoUnmirror, adaptecArrayControllerEnclosureProcessorId=adaptecArrayControllerEnclosureProcessorId, aacBatteryDegrading=aacBatteryDegrading, adaptecArrayControllerEnclosureRevision=adaptecArrayControllerEnclosureRevision, adaptecArrayControllerEnclosureFanIndex=adaptecArrayControllerEnclosureFanIndex, aacMirrorFailoverFailed=aacMirrorFailoverFailed, adaptecArrayControllerEnclosureTable=adaptecArrayControllerEnclosureTable, adaptecArrayControllerAdapterIndex=adaptecArrayControllerAdapterIndex, adaptecArrayControllerEnclosureStandardRevision=adaptecArrayControllerEnclosureStandardRevision, adaptecArrayControllerAdapterEntry=adaptecArrayControllerAdapterEntry, aacControllerId=aacControllerId, adaptecArrayControllerAdapterTotalMemory=adaptecArrayControllerAdapterTotalMemory, adaptecArrayControllerEnclosureTemperatureSensorTable=adaptecArrayControllerEnclosureTemperatureSensorTable, adaptecArrayControllerEnclosureNumberSlots=adaptecArrayControllerEnclosureNumberSlots, aacEnclosureGeneralError=aacEnclosureGeneralError, adaptecArrayControllerEnclosureProduct=adaptecArrayControllerEnclosureProduct, adaptecArrayControllerSoftwareVersion=adaptecArrayControllerSoftwareVersion, aacLunId=aacLunId, adaptecArrayControllerDevLogicalNumber=adaptecArrayControllerDevLogicalNumber, aacRaidRebuildComplete=aacRaidRebuildComplete, aacDeviceFailurePredictionConfigurationChanged=aacDeviceFailurePredictionConfigurationChanged, adaptecArrayControllerDevUsage=adaptecArrayControllerDevUsage, adaptecArrayControllerEnclosurePowerSupplyTable=adaptecArrayControllerEnclosurePowerSupplyTable, adaptecArrayControllerAdapterDescription=adaptecArrayControllerAdapterDescription, adaptecArrayControllerEnclosureSpeakerStatus=adaptecArrayControllerEnclosureSpeakerStatus, aacMirrorNoFailoverAssigned=aacMirrorNoFailoverAssigned, aacMirrorNotMirroring=aacMirrorNotMirroring, aacSnapshotContainerFull=aacSnapshotContainerFull, aacDeviceWarning=aacDeviceWarning, adaptecArrayControllerAdapterTable=adaptecArrayControllerAdapterTable, adaptecArrayControllerContNumber=adaptecArrayControllerContNumber, aacDeviceFailure=aacDeviceFailure, adaptecArrayControllerEnclosureTemperatureSensorOverTemperature=adaptecArrayControllerEnclosureTemperatureSensorOverTemperature, aacControllerPaused=aacControllerPaused, aacRaidRebuildStart=aacRaidRebuildStart, aacInterfaceUp=aacInterfaceUp, adaptecArrayControllerEnclosureDeviceInsertions=adaptecArrayControllerEnclosureDeviceInsertions, adaptecArrayControllerEnclosureScsiIdEntry=adaptecArrayControllerEnclosureScsiIdEntry, adaptecArrayControllerAdapterVersion=adaptecArrayControllerAdapterVersion, adaptec=adaptec, aacDriveLetterChange=aacDriveLetterChange, aacFailoverChange=aacFailoverChange, adaptecArrayControllerEnclosureLunId=adaptecArrayControllerEnclosureLunId, aacControllerResume=aacControllerResume, adaptecArrayControllerContType=adaptecArrayControllerContType, adaptecArrayControllerDevStatus=adaptecArrayControllerDevStatus, adaptecArrayControllerEnclosureType=adaptecArrayControllerEnclosureType, adaptecArrayControllerEnclosureScsiIdIndex=adaptecArrayControllerEnclosureScsiIdIndex, aacMirrorFailoverStarted=aacMirrorFailoverStarted, adaptecArrayControllerEnclosurePowerSupplyEntry=adaptecArrayControllerEnclosurePowerSupplyEntry, aacRaidDriveFailure=aacRaidDriveFailure, adaptecArrayControllerEnclosureBootTimeDiagnostic=adaptecArrayControllerEnclosureBootTimeDiagnostic, aacBatteryReconditionRequired=aacBatteryReconditionRequired, adaptecArrayControllerEnclosureDeviceInsertionTable=adaptecArrayControllerEnclosureDeviceInsertionTable, adaptecArrayControllerAdapterHardwareVersion=adaptecArrayControllerAdapterHardwareVersion, adaptecArrayControllerEnclosureVendor=adaptecArrayControllerEnclosureVendor, adaptecArrayControllerContSize=adaptecArrayControllerContSize, adaptecArrayControllerCDAdapterIndex=adaptecArrayControllerCDAdapterIndex, adaptecArrayControllerEnclosureDoorLockTable=adaptecArrayControllerEnclosureDoorLockTable, adaptecArrayControllerPartitionSizeMSW=adaptecArrayControllerPartitionSizeMSW, adaptecArrayControllerEnclosureSlotStatusEnclosureIndex=adaptecArrayControllerEnclosureSlotStatusEnclosureIndex, aacDeviceFailurePredictionTest=aacDeviceFailurePredictionTest, adaptecArrayControllerEnclosurePowerSupplyEnclosureIndex=adaptecArrayControllerEnclosurePowerSupplyEnclosureIndex, adaptecArrayControllerAdapterNumber=adaptecArrayControllerAdapterNumber, adaptecArrayControllerEnclosureDeviceInsertionIndex=adaptecArrayControllerEnclosureDeviceInsertionIndex, adaptecArrayControllerTraps=adaptecArrayControllerTraps, aacScsiId=aacScsiId, adaptecArrayControllerDeviceIndex=adaptecArrayControllerDeviceIndex, aacGeneralContainerFailure=aacGeneralContainerFailure, adaptecArrayControllerEnclosureTemperatureSensorDegrees=adaptecArrayControllerEnclosureTemperatureSensorDegrees, aacContainerStateChange=aacContainerStateChange, adaptecArrayControllerContStatus=adaptecArrayControllerContStatus, adaptecArrayControllerDeviceTable=adaptecArrayControllerDeviceTable, adaptecArrayControllerEnclosureIndex=adaptecArrayControllerEnclosureIndex, adaptecArrayControllerDevAdapterIndex=adaptecArrayControllerDevAdapterIndex, adaptecArrayControllerDevBlocks=adaptecArrayControllerDevBlocks, adaptecArrayControllerContAdapterIndex=adaptecArrayControllerContAdapterIndex, aacEnclosureTempOver=aacEnclosureTempOver, adaptecArrayControllerAdapterType=adaptecArrayControllerAdapterType, adaptecArrayControllerEnclosureDeviceInsertionSlot=adaptecArrayControllerEnclosureDeviceInsertionSlot, aacBatteryImproving=aacBatteryImproving, adaptecArrayControllerAdapterBiosVersion=adaptecArrayControllerAdapterBiosVersion, adaptecArrayControllerAdapterProgramMemory=adaptecArrayControllerAdapterProgramMemory, adaptecArrayControllerEnclosureScsiIdTable=adaptecArrayControllerEnclosureScsiIdTable, adaptecArrayControllerContainerIndex=adaptecArrayControllerContainerIndex, adaptecArrayControllerPartitionOffsetMSW=adaptecArrayControllerPartitionOffsetMSW, aacMirrorDriveFailure=aacMirrorDriveFailure, adaptecArrayControllerEnclosureDoorLockSlot=adaptecArrayControllerEnclosureDoorLockSlot, adaptecArrayControllerAdapterMonitorVersion=adaptecArrayControllerAdapterMonitorVersion, adaptecArrayControllerDevId=adaptecArrayControllerDevId, adaptecArrayControllerEnclosureOverTemperature=adaptecArrayControllerEnclosureOverTemperature, adaptecArrayControllerEnclosureScsiIdEnclosureIndex=adaptecArrayControllerEnclosureScsiIdEnclosureIndex, adaptecArrayControllerEnclosureNumberPowerSupplies=adaptecArrayControllerEnclosureNumberPowerSupplies, aacContainerDeleted=aacContainerDeleted, aacRaidNoFailover=aacRaidNoFailover, adaptecArrayControllerEnclosureSpeaker=adaptecArrayControllerEnclosureSpeaker, adaptecArrayControllerEnclosureIdHigh=adaptecArrayControllerEnclosureIdHigh, adaptecArrayControllerAdapterStatus=adaptecArrayControllerAdapterStatus, adaptecArrayControllerContainerTable=adaptecArrayControllerContainerTable, aacEnclosureFanError=aacEnclosureFanError, adaptecArrayControllerEnclosureSlotStatusSlot=adaptecArrayControllerEnclosureSlotStatusSlot, adaptecArrayControllerAdapterKernelVersion=adaptecArrayControllerAdapterKernelVersion, aacComponentUnitId=aacComponentUnitId, adaptecArrayControllerAdapterChannelCount=adaptecArrayControllerAdapterChannelCount, adaptecArrayControllerEnclosureDoorLockEnclosureIndex=adaptecArrayControllerEnclosureDoorLockEnclosureIndex, aacDeviceDegradedWarning=aacDeviceDegradedWarning, adaptecArrayControllerEnclosureDoorLockStatus=adaptecArrayControllerEnclosureDoorLockStatus, adaptecArrayControllerEnclosureFanEntry=adaptecArrayControllerEnclosureFanEntry, adaptecArrayControllerContMountPoint=adaptecArrayControllerContMountPoint, adaptecArrayControllerContIndex=adaptecArrayControllerContIndex, adaptecArrayControllerEnclosureSlotStatusIndex=adaptecArrayControllerEnclosureSlotStatusIndex, adaptecArrayControllerEnclosureTemperatureSensorEnclosureIndex=adaptecArrayControllerEnclosureTemperatureSensorEnclosureIndex, adaptecArrayControllerEnclosureNumberFans=adaptecArrayControllerEnclosureNumberFans, adaptecArrayControllerEnclosureDoorLock=adaptecArrayControllerEnclosureDoorLock, aacBusId=aacBusId, aacSnapshotContainerAlmostFull=aacSnapshotContainerAlmostFull, adaptecArrayControllerPartitionSizeLSW=adaptecArrayControllerPartitionSizeLSW, adaptecArrayControllerEnclosurePowerSupplyStatus=adaptecArrayControllerEnclosurePowerSupplyStatus, adaptecArrayControllerEnclosureSlotStatusEntry=adaptecArrayControllerEnclosureSlotStatusEntry, products=products, adaptecArrayControllerEnclosureFanEnclosureIndex=adaptecArrayControllerEnclosureFanEnclosureIndex, aacFileSystemChange=aacFileSystemChange, aacDeviceFailurePredictionThresholdExceeded=aacDeviceFailurePredictionThresholdExceeded, adaptecArrayControllerEnclosureScsiIdSlot=adaptecArrayControllerEnclosureScsiIdSlot, adaptecArrayControllerEnclosureIdLow=adaptecArrayControllerEnclosureIdLow, adaptecArrayControllerDevVendor=adaptecArrayControllerDevVendor, aacContainerCreated=aacContainerCreated, adaptecArrayControllerContStripeSize=adaptecArrayControllerContStripeSize, adaptecArrayControllerEnclosureTemperatureSensorEntry=adaptecArrayControllerEnclosureTemperatureSensorEntry, adaptecArrayControllerContUsage=adaptecArrayControllerContUsage, aacContainerId=aacContainerId, adaptecArrayControllerEnclosureDeviceInsertionEnclosureIndex=adaptecArrayControllerEnclosureDeviceInsertionEnclosureIndex, aacRaidNoSpace=aacRaidNoSpace, aacDeviceTemperatureWarning=aacDeviceTemperatureWarning, adaptecArrayControllerEnclosureTemperatureSensorIndex=adaptecArrayControllerEnclosureTemperatureSensorIndex, aacEnclosureProcessorId=aacEnclosureProcessorId, adaptecArrayControllerContainerToDeviceTable=adaptecArrayControllerContainerToDeviceTable, adaptecArrayControllerEnclosureDoorLockIndex=adaptecArrayControllerEnclosureDoorLockIndex, adaptecArrayControllerEnclosureNumberTemperatureSensors=adaptecArrayControllerEnclosureNumberTemperatureSensors, adaptecArrayControllerEnclosurePowerOnTime=adaptecArrayControllerEnclosurePowerOnTime, adaptecArrayControllerDevIndex=adaptecArrayControllerDevIndex, aacEnclosureTempAbnormal=aacEnclosureTempAbnormal, adaptecArrayControllerPartitionOffsetLSW=adaptecArrayControllerPartitionOffsetLSW, adaptecArrayControllerEnclosureDeviceInsertionEntry=adaptecArrayControllerEnclosureDeviceInsertionEntry, adaptecArrayControllerEnclosureFanTable=adaptecArrayControllerEnclosureFanTable, adaptecArrayControllerEnclosureAdapterIndex=adaptecArrayControllerEnclosureAdapterIndex, adaptecArrayControllerEnclosureEntry=adaptecArrayControllerEnclosureEntry, adaptecArrayControllerContainerEntry=adaptecArrayControllerContainerEntry)
