#
# PySNMP MIB module ARISTA-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ARISTA-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:09:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aristaMibs, = mibBuilder.importSymbols("ARISTA-SMI-MIB", "aristaMibs")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
PhysicalIndexOrZero, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndexOrZero")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, NotificationType, ObjectIdentity, Bits, MibIdentifier, ModuleIdentity, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, TimeTicks, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "ObjectIdentity", "Bits", "MibIdentifier", "ModuleIdentity", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "TimeTicks", "Counter64", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
aristaQosMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 30065, 3, 13))
aristaQosMib.setRevisions(('2016-07-22 00:00', '2016-03-21 00:00', '2014-08-15 00:00', '2014-05-22 00:00', '2013-06-01 00:00',))
if mibBuilder.loadTexts: aristaQosMib.setLastUpdated('201607220000Z')
if mibBuilder.loadTexts: aristaQosMib.setOrganization('Arista Networks, Inc.')
class AristaQosMapType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("controlPlane", 1), ("dataPlane", 2))

class AristaQosShortId(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 40)

aristaQosMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1))
aristaQosMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 13, 2))
aristaClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 1), )
if mibBuilder.loadTexts: aristaClassMapTable.setStatus('current')
aristaClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 1, 1), ).setIndexNames((0, "ARISTA-QOS-MIB", "aristaClassMapId"), (0, "ARISTA-QOS-MIB", "aristaClassMapType"))
if mibBuilder.loadTexts: aristaClassMapEntry.setStatus('current')
aristaClassMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 1, 1, 1), AristaQosShortId())
if mibBuilder.loadTexts: aristaClassMapId.setStatus('current')
aristaClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 1, 1, 2), AristaQosMapType())
if mibBuilder.loadTexts: aristaClassMapType.setStatus('current')
aristaClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaClassMapName.setStatus('current')
aristaClassMapMatchCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("matchConditionAny", 1), ("matchConditionAll", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaClassMapMatchCondition.setStatus('current')
aristaClassMapMatchTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 2), )
if mibBuilder.loadTexts: aristaClassMapMatchTable.setStatus('current')
aristaClassMapMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 2, 1), ).setIndexNames((0, "ARISTA-QOS-MIB", "aristaClassMapId"), (0, "ARISTA-QOS-MIB", "aristaClassMapType"), (0, "ARISTA-QOS-MIB", "aristaClassMapMatchIndex"))
if mibBuilder.loadTexts: aristaClassMapMatchEntry.setStatus('current')
aristaClassMapMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: aristaClassMapMatchIndex.setStatus('current')
aristaClassMapMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4AccessGroup", 1), ("ipv6AccessGroup", 2), ("vlan", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaClassMapMatchType.setStatus('current')
aristaClassMapMatchName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaClassMapMatchName.setStatus('current')
aristaPolicyMapTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 3), )
if mibBuilder.loadTexts: aristaPolicyMapTable.setStatus('current')
aristaPolicyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 3, 1), ).setIndexNames((0, "ARISTA-QOS-MIB", "aristaPolicyMapId"), (0, "ARISTA-QOS-MIB", "aristaPolicyMapType"))
if mibBuilder.loadTexts: aristaPolicyMapEntry.setStatus('current')
aristaPolicyMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 3, 1, 1), AristaQosShortId())
if mibBuilder.loadTexts: aristaPolicyMapId.setStatus('current')
aristaPolicyMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 3, 1, 2), AristaQosMapType())
if mibBuilder.loadTexts: aristaPolicyMapType.setStatus('current')
aristaPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaPolicyMapName.setStatus('current')
aristaPolicyMapClassTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 4), )
if mibBuilder.loadTexts: aristaPolicyMapClassTable.setStatus('current')
aristaPolicyMapClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 4, 1), ).setIndexNames((0, "ARISTA-QOS-MIB", "aristaPolicyMapId"), (0, "ARISTA-QOS-MIB", "aristaPolicyMapType"), (0, "ARISTA-QOS-MIB", "aristaPolicyMapClassIndex"))
if mibBuilder.loadTexts: aristaPolicyMapClassEntry.setStatus('current')
aristaPolicyMapClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: aristaPolicyMapClassIndex.setStatus('current')
aristaPolicyMapClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 4, 1, 2), AristaQosShortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaPolicyMapClassId.setStatus('current')
aristaPolicyMapActionTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 5), )
if mibBuilder.loadTexts: aristaPolicyMapActionTable.setStatus('current')
aristaPolicyMapActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 5, 1), ).setIndexNames((0, "ARISTA-QOS-MIB", "aristaPolicyMapId"), (0, "ARISTA-QOS-MIB", "aristaPolicyMapType"), (0, "ARISTA-QOS-MIB", "aristaClassMapId"), (0, "ARISTA-QOS-MIB", "aristaPolicyMapActionType"))
if mibBuilder.loadTexts: aristaPolicyMapActionEntry.setStatus('current')
aristaPolicyMapActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("actionSetShape", 1), ("actionSetBandwidth", 2), ("actionSetCos", 3), ("actionSetDscp", 4), ("actionSetTc", 5))))
if mibBuilder.loadTexts: aristaPolicyMapActionType.setStatus('current')
aristaPolicyMapActionRateUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("rateUnitNone", 0), ("rateUnitPps", 1), ("rateUnitKbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaPolicyMapActionRateUnit.setStatus('current')
aristaPolicyMapActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaPolicyMapActionValue.setStatus('current')
aristaServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 6), )
if mibBuilder.loadTexts: aristaServicePolicyTable.setStatus('current')
aristaServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 6, 1), ).setIndexNames((0, "ARISTA-QOS-MIB", "aristaServicePolicyIfIndex"), (0, "ARISTA-QOS-MIB", "aristaServicePolicyDirection"))
if mibBuilder.loadTexts: aristaServicePolicyEntry.setStatus('current')
aristaServicePolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: aristaServicePolicyIfIndex.setStatus('current')
aristaServicePolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2))))
if mibBuilder.loadTexts: aristaServicePolicyDirection.setStatus('current')
aristaServicePolicyMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 6, 1, 3), AristaQosShortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaServicePolicyMapId.setStatus('current')
aristaServicePolicyMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 6, 1, 4), AristaQosMapType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaServicePolicyMapType.setStatus('current')
aristaQosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 7), )
if mibBuilder.loadTexts: aristaQosStatsTable.setStatus('current')
aristaQosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 7, 1), ).setIndexNames((0, "ARISTA-QOS-MIB", "aristaPolicyMapId"), (0, "ARISTA-QOS-MIB", "aristaPolicyMapType"), (0, "ARISTA-QOS-MIB", "aristaClassMapId"), (0, "ARISTA-QOS-MIB", "aristaServicePolicyDirection"))
if mibBuilder.loadTexts: aristaQosStatsEntry.setStatus('current')
aristaQosPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaQosPktsDropped.setStatus('current')
aristaQosPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaQosPktsSent.setStatus('current')
aristaQosPktsMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaQosPktsMatched.setStatus('current')
aristaEcnCounterTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 8), )
if mibBuilder.loadTexts: aristaEcnCounterTable.setStatus('current')
aristaEcnCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 8, 1), ).setIndexNames((0, "ARISTA-QOS-MIB", "aristaEcnCounterDescriptor"))
if mibBuilder.loadTexts: aristaEcnCounterEntry.setStatus('current')
aristaEcnCounterDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: aristaEcnCounterDescriptor.setStatus('current')
aristaEcnCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaEcnCounterValue.setStatus('current')
aristaEcnCounterEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 13, 1, 8, 1, 3), PhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaEcnCounterEntity.setStatus('current')
aristaQosMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 13, 2, 1))
aristaQosMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 13, 2, 2))
aristaQosMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 30065, 3, 13, 2, 1, 1)).setObjects(("ARISTA-QOS-MIB", "aristaClassMapGroup"), ("ARISTA-QOS-MIB", "aristaPolicyMapGroup"), ("ARISTA-QOS-MIB", "aristaPolicyMapActionGroup"), ("ARISTA-QOS-MIB", "aristaServicePolicyGroup"), ("ARISTA-QOS-MIB", "aristaEcnCounterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaQosMibCompliance = aristaQosMibCompliance.setStatus('current')
aristaClassMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 13, 2, 2, 1)).setObjects(("ARISTA-QOS-MIB", "aristaClassMapName"), ("ARISTA-QOS-MIB", "aristaClassMapMatchCondition"), ("ARISTA-QOS-MIB", "aristaClassMapMatchType"), ("ARISTA-QOS-MIB", "aristaClassMapMatchName"), ("ARISTA-QOS-MIB", "aristaPolicyMapClassId"), ("ARISTA-QOS-MIB", "aristaQosPktsDropped"), ("ARISTA-QOS-MIB", "aristaQosPktsMatched"), ("ARISTA-QOS-MIB", "aristaQosPktsSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaClassMapGroup = aristaClassMapGroup.setStatus('current')
aristaPolicyMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 13, 2, 2, 2)).setObjects(("ARISTA-QOS-MIB", "aristaPolicyMapName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaPolicyMapGroup = aristaPolicyMapGroup.setStatus('current')
aristaPolicyMapActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 13, 2, 2, 3)).setObjects(("ARISTA-QOS-MIB", "aristaPolicyMapActionRateUnit"), ("ARISTA-QOS-MIB", "aristaPolicyMapActionValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaPolicyMapActionGroup = aristaPolicyMapActionGroup.setStatus('current')
aristaServicePolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 13, 2, 2, 4)).setObjects(("ARISTA-QOS-MIB", "aristaServicePolicyMapId"), ("ARISTA-QOS-MIB", "aristaServicePolicyMapType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaServicePolicyGroup = aristaServicePolicyGroup.setStatus('current')
aristaEcnCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 13, 2, 2, 5)).setObjects(("ARISTA-QOS-MIB", "aristaEcnCounterValue"), ("ARISTA-QOS-MIB", "aristaEcnCounterEntity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaEcnCounterGroup = aristaEcnCounterGroup.setStatus('current')
mibBuilder.exportSymbols("ARISTA-QOS-MIB", aristaQosStatsTable=aristaQosStatsTable, aristaQosMibConformance=aristaQosMibConformance, aristaClassMapTable=aristaClassMapTable, aristaEcnCounterValue=aristaEcnCounterValue, AristaQosMapType=AristaQosMapType, aristaEcnCounterEntity=aristaEcnCounterEntity, aristaClassMapMatchEntry=aristaClassMapMatchEntry, aristaClassMapName=aristaClassMapName, aristaClassMapId=aristaClassMapId, aristaPolicyMapClassEntry=aristaPolicyMapClassEntry, aristaServicePolicyIfIndex=aristaServicePolicyIfIndex, aristaServicePolicyMapId=aristaServicePolicyMapId, aristaClassMapType=aristaClassMapType, aristaEcnCounterGroup=aristaEcnCounterGroup, aristaClassMapMatchName=aristaClassMapMatchName, aristaPolicyMapClassIndex=aristaPolicyMapClassIndex, aristaPolicyMapActionTable=aristaPolicyMapActionTable, aristaQosStatsEntry=aristaQosStatsEntry, aristaQosPktsSent=aristaQosPktsSent, aristaClassMapMatchCondition=aristaClassMapMatchCondition, aristaPolicyMapTable=aristaPolicyMapTable, aristaClassMapMatchIndex=aristaClassMapMatchIndex, aristaPolicyMapName=aristaPolicyMapName, aristaPolicyMapGroup=aristaPolicyMapGroup, aristaEcnCounterEntry=aristaEcnCounterEntry, aristaPolicyMapId=aristaPolicyMapId, aristaPolicyMapClassTable=aristaPolicyMapClassTable, aristaQosMibObjects=aristaQosMibObjects, aristaClassMapEntry=aristaClassMapEntry, aristaPolicyMapActionRateUnit=aristaPolicyMapActionRateUnit, aristaPolicyMapActionGroup=aristaPolicyMapActionGroup, aristaEcnCounterTable=aristaEcnCounterTable, aristaQosMibCompliance=aristaQosMibCompliance, aristaServicePolicyGroup=aristaServicePolicyGroup, aristaPolicyMapActionEntry=aristaPolicyMapActionEntry, aristaServicePolicyMapType=aristaServicePolicyMapType, aristaServicePolicyDirection=aristaServicePolicyDirection, aristaQosPktsDropped=aristaQosPktsDropped, aristaQosPktsMatched=aristaQosPktsMatched, aristaPolicyMapEntry=aristaPolicyMapEntry, aristaPolicyMapType=aristaPolicyMapType, aristaServicePolicyTable=aristaServicePolicyTable, PYSNMP_MODULE_ID=aristaQosMib, aristaClassMapMatchType=aristaClassMapMatchType, aristaEcnCounterDescriptor=aristaEcnCounterDescriptor, aristaPolicyMapActionValue=aristaPolicyMapActionValue, AristaQosShortId=AristaQosShortId, aristaClassMapMatchTable=aristaClassMapMatchTable, aristaQosMibCompliances=aristaQosMibCompliances, aristaQosMibGroups=aristaQosMibGroups, aristaClassMapGroup=aristaClassMapGroup, aristaPolicyMapActionType=aristaPolicyMapActionType, aristaQosMib=aristaQosMib, aristaPolicyMapClassId=aristaPolicyMapClassId, aristaServicePolicyEntry=aristaServicePolicyEntry)
