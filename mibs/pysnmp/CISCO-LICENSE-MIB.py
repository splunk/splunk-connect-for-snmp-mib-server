#
# PySNMP MIB module CISCO-LICENSE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LICENSE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:47:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, MibIdentifier, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Counter64, NotificationType, IpAddress, Counter32, TimeTicks, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Counter64", "NotificationType", "IpAddress", "Counter32", "TimeTicks", "Integer32", "Bits")
DateAndTime, TextualConvention, DisplayString, AutonomousType = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString", "AutonomousType")
ciscoLicenseMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 359))
ciscoLicenseMIB.setRevisions(('2004-01-31 00:00', '2003-06-06 00:00',))
if mibBuilder.loadTexts: ciscoLicenseMIB.setLastUpdated('200401310000Z')
if mibBuilder.loadTexts: ciscoLicenseMIB.setOrganization('Cisco Systems, Inc.')
celMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 359, 0))
celMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 359, 1))
celGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1))
class LicenseType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unknown", 1), ("none", 2), ("reserved", 3), ("singleService", 4), ("multiService", 5), ("channelization", 6), ("ima", 7), ("mfr", 8), ("rateControl", 9), ("multilink", 10), ("ppp", 11))

celLicenseConfigHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 1), )
if mibBuilder.loadTexts: celLicenseConfigHistoryTable.setStatus('current')
celLicenseConfigHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LICENSE-MIB", "celLicenseConfigIndex"))
if mibBuilder.loadTexts: celLicenseConfigHistoryEntry.setStatus('current')
celLicenseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: celLicenseConfigIndex.setStatus('current')
celLicenseEntityVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 1, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celLicenseEntityVendorType.setStatus('current')
celLicenseSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celLicenseSerialNumber.setStatus('current')
celLicenseInstallEntitySerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celLicenseInstallEntitySerNum.setStatus('current')
celLicenseUpdateTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celLicenseUpdateTimeStamp.setStatus('current')
celLicenseConfigHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celLicenseConfigHistoryIndex.setStatus('current')
celLicenseUpdateSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celLicenseUpdateSequenceNum.setStatus('current')
celLicenseUpdateMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celLicenseUpdateMethod.setStatus('current')
celLicenseConfigDetailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 2), )
if mibBuilder.loadTexts: celLicenseConfigDetailTable.setStatus('current')
celLicenseConfigDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LICENSE-MIB", "celLicenseConfigIndex"), (0, "CISCO-LICENSE-MIB", "celLicenseConfigType"))
if mibBuilder.loadTexts: celLicenseConfigDetailEntry.setStatus('current')
celLicenseConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 2, 1, 1), LicenseType())
if mibBuilder.loadTexts: celLicenseConfigType.setStatus('current')
celLicenseTypeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celLicenseTypeDescr.setStatus('current')
celLicenseConfigCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celLicenseConfigCount.setStatus('current')
celPoolLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 3), )
if mibBuilder.loadTexts: celPoolLicenseTable.setStatus('current')
celPoolLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-LICENSE-MIB", "celPoolLicenseIndex"))
if mibBuilder.loadTexts: celPoolLicenseEntry.setStatus('current')
celPoolLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: celPoolLicenseIndex.setStatus('current')
celPoolLicenseEntityVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 3, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPoolLicenseEntityVendorType.setStatus('current')
celPoolLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 3, 1, 3), LicenseType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPoolLicenseType.setStatus('current')
celPoolLicensesInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPoolLicensesInstalled.setStatus('current')
celPoolLicensesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPoolLicensesInUse.setStatus('current')
celPoolLicenseMaxUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPoolLicenseMaxUsage.setStatus('current')
celInUseLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 4), )
if mibBuilder.loadTexts: celInUseLicenseTable.setStatus('current')
celInUseLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-LICENSE-MIB", "celInUseSlotIndex"), (0, "CISCO-LICENSE-MIB", "celInUseLicenseType"))
if mibBuilder.loadTexts: celInUseLicenseEntry.setStatus('current')
celInUseSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: celInUseSlotIndex.setStatus('current')
celInUseLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 4, 1, 2), LicenseType())
if mibBuilder.loadTexts: celInUseLicenseType.setStatus('current')
celEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 4, 1, 3), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celEntPhysicalIndex.setStatus('current')
celInUseLicenseDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celInUseLicenseDescr.setStatus('current')
celInUseLicenses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 4, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celInUseLicenses.setStatus('current')
celNeededLicenses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 4, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celNeededLicenses.setStatus('current')
celOperationExpiryTmStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celOperationExpiryTmStamp.setStatus('current')
celPhysicallyProgLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5), )
if mibBuilder.loadTexts: celPhysicallyProgLicenseTable.setStatus('current')
celPhysicallyProgLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-LICENSE-MIB", "celPhysicallyProgSlotNumber"), (0, "CISCO-LICENSE-MIB", "celPhysicallyProgLicenseType"))
if mibBuilder.loadTexts: celPhysicallyProgLicenseEntry.setStatus('current')
celPhysicallyProgSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: celPhysicallyProgSlotNumber.setStatus('current')
celPhysicallyProgLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1, 2), LicenseType())
if mibBuilder.loadTexts: celPhysicallyProgLicenseType.setStatus('current')
celPhysicallyProgEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1, 3), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPhysicallyProgEntIndex.setStatus('current')
celPhysicallyProgLicTypeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPhysicallyProgLicTypeDescr.setStatus('current')
celPhysicallyProgLicenses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPhysicallyProgLicenses.setStatus('current')
celPhysicallyProgLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("noInstallableLic", 2), ("hasInstallableLic", 3), ("alreadyInstalled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPhysicallyProgLicenseStatus.setStatus('current')
celPhysicallyProgLicInstSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPhysicallyProgLicInstSysName.setStatus('current')
celPhysicallyProgLicInstSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPhysicallyProgLicInstSerNum.setStatus('current')
celPhysicallyProgLicSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPhysicallyProgLicSerialNum.setStatus('current')
celPhysicallyProgLicUseTmStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 359, 1, 1, 5, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celPhysicallyProgLicUseTmStamp.setStatus('current')
celMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 359, 2))
celMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 359, 2, 1))
celMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 359, 2, 2))
celMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 359, 2, 1, 1)).setObjects(("CISCO-LICENSE-MIB", "celMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    celMIBCompliance = celMIBCompliance.setStatus('current')
celMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 359, 2, 2, 1)).setObjects(("CISCO-LICENSE-MIB", "celLicenseEntityVendorType"), ("CISCO-LICENSE-MIB", "celLicenseSerialNumber"), ("CISCO-LICENSE-MIB", "celLicenseInstallEntitySerNum"), ("CISCO-LICENSE-MIB", "celLicenseUpdateTimeStamp"), ("CISCO-LICENSE-MIB", "celLicenseConfigHistoryIndex"), ("CISCO-LICENSE-MIB", "celLicenseUpdateSequenceNum"), ("CISCO-LICENSE-MIB", "celLicenseUpdateMethod"), ("CISCO-LICENSE-MIB", "celLicenseConfigCount"), ("CISCO-LICENSE-MIB", "celLicenseTypeDescr"), ("CISCO-LICENSE-MIB", "celPoolLicenseEntityVendorType"), ("CISCO-LICENSE-MIB", "celPoolLicenseType"), ("CISCO-LICENSE-MIB", "celPoolLicensesInstalled"), ("CISCO-LICENSE-MIB", "celPoolLicensesInUse"), ("CISCO-LICENSE-MIB", "celPoolLicenseMaxUsage"), ("CISCO-LICENSE-MIB", "celInUseLicenseDescr"), ("CISCO-LICENSE-MIB", "celInUseLicenses"), ("CISCO-LICENSE-MIB", "celEntPhysicalIndex"), ("CISCO-LICENSE-MIB", "celNeededLicenses"), ("CISCO-LICENSE-MIB", "celOperationExpiryTmStamp"), ("CISCO-LICENSE-MIB", "celPhysicallyProgLicenses"), ("CISCO-LICENSE-MIB", "celPhysicallyProgEntIndex"), ("CISCO-LICENSE-MIB", "celPhysicallyProgLicTypeDescr"), ("CISCO-LICENSE-MIB", "celPhysicallyProgLicenseStatus"), ("CISCO-LICENSE-MIB", "celPhysicallyProgLicInstSysName"), ("CISCO-LICENSE-MIB", "celPhysicallyProgLicInstSerNum"), ("CISCO-LICENSE-MIB", "celPhysicallyProgLicSerialNum"), ("CISCO-LICENSE-MIB", "celPhysicallyProgLicUseTmStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    celMIBGroup = celMIBGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-LICENSE-MIB", celPoolLicensesInstalled=celPoolLicensesInstalled, celLicenseConfigHistoryIndex=celLicenseConfigHistoryIndex, celPhysicallyProgEntIndex=celPhysicallyProgEntIndex, celMIBConformance=celMIBConformance, celLicenseConfigType=celLicenseConfigType, celLicenseConfigIndex=celLicenseConfigIndex, celInUseSlotIndex=celInUseSlotIndex, celMIBCompliance=celMIBCompliance, celLicenseSerialNumber=celLicenseSerialNumber, celPhysicallyProgLicSerialNum=celPhysicallyProgLicSerialNum, celLicenseUpdateTimeStamp=celLicenseUpdateTimeStamp, celPoolLicenseEntry=celPoolLicenseEntry, celLicenseConfigHistoryEntry=celLicenseConfigHistoryEntry, celMIBNotifications=celMIBNotifications, celPhysicallyProgLicenseEntry=celPhysicallyProgLicenseEntry, celPhysicallyProgLicInstSysName=celPhysicallyProgLicInstSysName, celLicenseEntityVendorType=celLicenseEntityVendorType, celPoolLicenseMaxUsage=celPoolLicenseMaxUsage, celEntPhysicalIndex=celEntPhysicalIndex, celPhysicallyProgLicUseTmStamp=celPhysicallyProgLicUseTmStamp, celLicenseUpdateSequenceNum=celLicenseUpdateSequenceNum, celPoolLicenseEntityVendorType=celPoolLicenseEntityVendorType, PYSNMP_MODULE_ID=ciscoLicenseMIB, celLicenseTypeDescr=celLicenseTypeDescr, celLicenseConfigCount=celLicenseConfigCount, celLicenseUpdateMethod=celLicenseUpdateMethod, celInUseLicenseTable=celInUseLicenseTable, celPhysicallyProgLicenseTable=celPhysicallyProgLicenseTable, celPhysicallyProgLicenseType=celPhysicallyProgLicenseType, celMIBGroup=celMIBGroup, celInUseLicenses=celInUseLicenses, celInUseLicenseDescr=celInUseLicenseDescr, celOperationExpiryTmStamp=celOperationExpiryTmStamp, ciscoLicenseMIB=ciscoLicenseMIB, celPoolLicenseIndex=celPoolLicenseIndex, celNeededLicenses=celNeededLicenses, celLicenseConfigDetailTable=celLicenseConfigDetailTable, celLicenseConfigDetailEntry=celLicenseConfigDetailEntry, celPhysicallyProgSlotNumber=celPhysicallyProgSlotNumber, celInUseLicenseType=celInUseLicenseType, celLicenseConfigHistoryTable=celLicenseConfigHistoryTable, celMIBCompliances=celMIBCompliances, celPhysicallyProgLicenses=celPhysicallyProgLicenses, celPhysicallyProgLicInstSerNum=celPhysicallyProgLicInstSerNum, celMIBGroups=celMIBGroups, celInUseLicenseEntry=celInUseLicenseEntry, LicenseType=LicenseType, celPoolLicensesInUse=celPoolLicensesInUse, celPoolLicenseType=celPoolLicenseType, celPhysicallyProgLicTypeDescr=celPhysicallyProgLicTypeDescr, celPoolLicenseTable=celPoolLicenseTable, celMIBObjects=celMIBObjects, celLicenseInstallEntitySerNum=celLicenseInstallEntitySerNum, celGeneral=celGeneral, celPhysicallyProgLicenseStatus=celPhysicallyProgLicenseStatus)
