#
# PySNMP MIB module HP-SN-SWITCH-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SN-MIBS
# Produced by pysmi-0.3.4 at Mon Apr 29 19:23:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
snSwitch, = mibBuilder.importSymbols("HP-SN-ROOT-MIB", "snSwitch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Integer32, Counter32, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Gauge32, Bits, NotificationType, ObjectIdentity, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Counter32", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Gauge32", "Bits", "NotificationType", "ObjectIdentity", "MibIdentifier", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

class PortMask(Integer32):
    pass

class InterfaceId(ObjectIdentifier):
    pass

snSwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1))
snVLanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2))
snSwPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3))
snFdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 4))
snPortStpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5))
snTrunkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6))
snSwSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 7))
snDhcpGatewayListInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 8))
snDnsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 9))
snMacFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10))
snNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11))
snRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12))
snTacacs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13))
snQos = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14))
snAAA = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15))
snCAR = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 16))
snVLanCAR = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17))
snNetFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18))
snSFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 19))
snFDP = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20))
snVsrp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21))
snSwGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noVLan", 1), ("vlanByPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupOperMode.setStatus('mandatory')
snSwGroupIpL3SwMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupIpL3SwMode.setStatus('mandatory')
snSwGroupIpMcastMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupIpMcastMode.setStatus('mandatory')
snSwGroupDefaultCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("nonDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupDefaultCfgMode.setStatus('mandatory')
snSwGroupSwitchAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupSwitchAgeTime.setStatus('mandatory')
snVLanGroupVlanCurEntry = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanGroupVlanCurEntry.setStatus('mandatory')
snVLanGroupSetAllVLan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanGroupSetAllVLan.setStatus('mandatory')
snSwPortSetAll = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortSetAll.setStatus('mandatory')
snFdbTableCurEntry = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdbTableCurEntry.setStatus('mandatory')
snFdbTableStationFlush = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("error", 2), ("flush", 3), ("flushing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbTableStationFlush.setStatus('mandatory')
snPortStpSetAll = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpSetAll.setStatus('mandatory')
snSwProbePortNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwProbePortNum.setStatus('mandatory')
snSw8021qTagMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSw8021qTagMode.setStatus('mandatory')
snSwGlobalStpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGlobalStpMode.setStatus('mandatory')
snSwIpMcastQuerierMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("querier", 1), ("nonQuerier", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIpMcastQuerierMode.setStatus('mandatory')
snSwViolatorPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwViolatorPortNumber.setStatus('mandatory')
snSwViolatorMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwViolatorMacAddress.setStatus('mandatory')
snVLanGroupVlanMaxEntry = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanGroupVlanMaxEntry.setStatus('mandatory')
snSwEosBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwEosBufferSize.setStatus('mandatory')
snVLanByPortEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortEntrySize.setStatus('mandatory')
snSwPortEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortEntrySize.setStatus('mandatory')
snFdbStationEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdbStationEntrySize.setStatus('mandatory')
snPortStpEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpEntrySize.setStatus('mandatory')
snSwEnableBridgeNewRootTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwEnableBridgeNewRootTrap.setStatus('mandatory')
snSwEnableBridgeTopoChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwEnableBridgeTopoChangeTrap.setStatus('mandatory')
snSwEnableLockedAddrViolationTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwEnableLockedAddrViolationTrap.setStatus('mandatory')
snSwIpxL3SwMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIpxL3SwMode.setStatus('mandatory')
snVLanByIpSubnetMaxSubnets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetMaxSubnets.setStatus('mandatory')
snVLanByIpxNetMaxNetworks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetMaxNetworks.setStatus('mandatory')
snSwProtocolVLanMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwProtocolVLanMode.setStatus('mandatory')
snMacStationVLanId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacStationVLanId.setStatus('mandatory')
snSwClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwClearCounters.setStatus('mandatory')
snSw8021qTagType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 34), Integer32().clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSw8021qTagType.setStatus('mandatory')
snSwBroadcastLimit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwBroadcastLimit.setStatus('mandatory')
snSwMaxMacFilterPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwMaxMacFilterPerSystem.setStatus('mandatory')
snSwMaxMacFilterPerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwMaxMacFilterPerPort.setStatus('mandatory')
snSwDefaultVLanId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwDefaultVLanId.setStatus('mandatory')
snSwGlobalAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("other", 3))).clone('negFullAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGlobalAutoNegotiate.setStatus('mandatory')
snSwQosMechanism = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("strict", 0), ("weighted", 1))).clone('weighted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwQosMechanism.setStatus('mandatory')
snSwSingleStpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwSingleStpMode.setStatus('mandatory')
snSwFastStpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwFastStpMode.setStatus('mandatory')
snVLanByPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1), )
if mibBuilder.loadTexts: snVLanByPortTable.setStatus('deprecated')
snVLanByPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByPortVLanIndex"))
if mibBuilder.loadTexts: snVLanByPortEntry.setStatus('deprecated')
snVLanByPortVLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortVLanIndex.setStatus('deprecated')
snVLanByPortVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortVLanId.setStatus('deprecated')
snVLanByPortPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 3), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortPortMask.setStatus('deprecated')
snVLanByPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortQos.setStatus('deprecated')
snVLanByPortStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpMode.setStatus('deprecated')
snVLanByPortStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpPriority.setStatus('deprecated')
snVLanByPortStpGroupMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpGroupMaxAge.setStatus('deprecated')
snVLanByPortStpGroupHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpGroupHelloTime.setStatus('deprecated')
snVLanByPortStpGroupForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpGroupForwardDelay.setStatus('deprecated')
snVLanByPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortRowStatus.setStatus('deprecated')
snVLanByPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortOperState.setStatus('deprecated')
snVLanByPortBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortBaseNumPorts.setStatus('deprecated')
snVLanByPortBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortBaseType.setStatus('deprecated')
snVLanByPortStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpProtocolSpecification.setStatus('deprecated')
snVLanByPortStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 15), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpMaxAge.setStatus('deprecated')
snVLanByPortStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 16), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpHelloTime.setStatus('deprecated')
snVLanByPortStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpHoldTime.setStatus('deprecated')
snVLanByPortStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 18), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpForwardDelay.setStatus('deprecated')
snVLanByPortStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpTimeSinceTopologyChange.setStatus('deprecated')
snVLanByPortStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpTopChanges.setStatus('deprecated')
snVLanByPortStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpRootCost.setStatus('deprecated')
snVLanByPortStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpRootPort.setStatus('deprecated')
snVLanByPortStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 23), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpDesignatedRoot.setStatus('deprecated')
snVLanByPortBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 24), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortBaseBridgeAddress.setStatus('deprecated')
snVLanByPortVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortVLanName.setStatus('deprecated')
snVLanByPortRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortRouterIntf.setStatus('deprecated')
snVLanByPortChassisPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortChassisPortMask.setStatus('deprecated')
snVLanByPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 1, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortPortList.setStatus('deprecated')
snVLanByPortMemberTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 6), )
if mibBuilder.loadTexts: snVLanByPortMemberTable.setStatus('mandatory')
snVLanByPortMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 6, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByPortMemberVLanId"), (0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByPortMemberPortId"))
if mibBuilder.loadTexts: snVLanByPortMemberEntry.setStatus('mandatory')
snVLanByPortMemberVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortMemberVLanId.setStatus('mandatory')
snVLanByPortMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortMemberPortId.setStatus('mandatory')
snVLanByPortMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortMemberRowStatus.setStatus('mandatory')
snVLanByPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7), )
if mibBuilder.loadTexts: snVLanByPortCfgTable.setStatus('mandatory')
snVLanByPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"))
if mibBuilder.loadTexts: snVLanByPortCfgEntry.setStatus('mandatory')
snVLanByPortCfgVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgVLanId.setStatus('mandatory')
snVLanByPortCfgQos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgQos.setStatus('mandatory')
snVLanByPortCfgStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpMode.setStatus('mandatory')
snVLanByPortCfgStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpPriority.setStatus('mandatory')
snVLanByPortCfgStpGroupMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupMaxAge.setStatus('mandatory')
snVLanByPortCfgStpGroupHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupHelloTime.setStatus('mandatory')
snVLanByPortCfgStpGroupForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupForwardDelay.setStatus('mandatory')
snVLanByPortCfgBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgBaseNumPorts.setStatus('mandatory')
snVLanByPortCfgBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgBaseType.setStatus('mandatory')
snVLanByPortCfgStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpProtocolSpecification.setStatus('mandatory')
snVLanByPortCfgStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpMaxAge.setStatus('mandatory')
snVLanByPortCfgStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpHelloTime.setStatus('mandatory')
snVLanByPortCfgStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpHoldTime.setStatus('mandatory')
snVLanByPortCfgStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpForwardDelay.setStatus('mandatory')
snVLanByPortCfgStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpTimeSinceTopologyChange.setStatus('mandatory')
snVLanByPortCfgStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpTopChanges.setStatus('mandatory')
snVLanByPortCfgStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpRootCost.setStatus('mandatory')
snVLanByPortCfgStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpRootPort.setStatus('mandatory')
snVLanByPortCfgStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 19), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpDesignatedRoot.setStatus('mandatory')
snVLanByPortCfgBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgBaseBridgeAddress.setStatus('mandatory')
snVLanByPortCfgVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgVLanName.setStatus('mandatory')
snVLanByPortCfgRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgRouterIntf.setStatus('mandatory')
snVLanByPortCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgRowStatus.setStatus('mandatory')
snVLanByProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2), )
if mibBuilder.loadTexts: snVLanByProtocolTable.setStatus('mandatory')
snVLanByProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByProtocolVLanId"), (0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByProtocolIndex"))
if mibBuilder.loadTexts: snVLanByProtocolEntry.setStatus('mandatory')
snVLanByProtocolVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolVLanId.setStatus('mandatory')
snVLanByProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appleTalk", 3), ("decNet", 4), ("netBios", 5), ("others", 6), ("ipv6", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolIndex.setStatus('mandatory')
snVLanByProtocolDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolDynamic.setStatus('mandatory')
snVLanByProtocolStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 4), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolStaticMask.setStatus('deprecated')
snVLanByProtocolExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 5), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolExcludeMask.setStatus('deprecated')
snVLanByProtocolRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolRouterIntf.setStatus('mandatory')
snVLanByProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolRowStatus.setStatus('mandatory')
snVLanByProtocolDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 8), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolDynamicMask.setStatus('deprecated')
snVLanByProtocolChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolChassisStaticMask.setStatus('deprecated')
snVLanByProtocolChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolChassisExcludeMask.setStatus('deprecated')
snVLanByProtocolChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolChassisDynamicMask.setStatus('deprecated')
snVLanByProtocolVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolVLanName.setStatus('mandatory')
snVLanByProtocolStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolStaticPortList.setStatus('mandatory')
snVLanByProtocolExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolExcludePortList.setStatus('mandatory')
snVLanByProtocolDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolDynamicPortList.setStatus('mandatory')
snVLanByIpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3), )
if mibBuilder.loadTexts: snVLanByIpSubnetTable.setStatus('mandatory')
snVLanByIpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetVLanId"), (0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetIpAddress"), (0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetSubnetMask"))
if mibBuilder.loadTexts: snVLanByIpSubnetEntry.setStatus('mandatory')
snVLanByIpSubnetVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetVLanId.setStatus('mandatory')
snVLanByIpSubnetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetIpAddress.setStatus('mandatory')
snVLanByIpSubnetSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetSubnetMask.setStatus('mandatory')
snVLanByIpSubnetDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetDynamic.setStatus('mandatory')
snVLanByIpSubnetStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 5), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetStaticMask.setStatus('deprecated')
snVLanByIpSubnetExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 6), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetExcludeMask.setStatus('deprecated')
snVLanByIpSubnetRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetRouterIntf.setStatus('mandatory')
snVLanByIpSubnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetRowStatus.setStatus('mandatory')
snVLanByIpSubnetDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 9), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetDynamicMask.setStatus('deprecated')
snVLanByIpSubnetChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetChassisStaticMask.setStatus('deprecated')
snVLanByIpSubnetChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetChassisExcludeMask.setStatus('deprecated')
snVLanByIpSubnetChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetChassisDynamicMask.setStatus('deprecated')
snVLanByIpSubnetVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetVLanName.setStatus('mandatory')
snVLanByIpSubnetStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetStaticPortList.setStatus('mandatory')
snVLanByIpSubnetExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetExcludePortList.setStatus('mandatory')
snVLanByIpSubnetDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetDynamicPortList.setStatus('mandatory')
snVLanByIpxNetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4), )
if mibBuilder.loadTexts: snVLanByIpxNetTable.setStatus('mandatory')
snVLanByIpxNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetVLanId"), (0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetNetworkNum"), (0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetFrameType"))
if mibBuilder.loadTexts: snVLanByIpxNetEntry.setStatus('mandatory')
snVLanByIpxNetVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetVLanId.setStatus('mandatory')
snVLanByIpxNetNetworkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetNetworkNum.setStatus('mandatory')
snVLanByIpxNetFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 0), ("ipxEthernet8022", 1), ("ipxEthernet8023", 2), ("ipxEthernetII", 3), ("ipxEthernetSnap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetFrameType.setStatus('mandatory')
snVLanByIpxNetDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetDynamic.setStatus('mandatory')
snVLanByIpxNetStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 5), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetStaticMask.setStatus('deprecated')
snVLanByIpxNetExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 6), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetExcludeMask.setStatus('deprecated')
snVLanByIpxNetRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetRouterIntf.setStatus('mandatory')
snVLanByIpxNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetRowStatus.setStatus('mandatory')
snVLanByIpxNetDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 9), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetDynamicMask.setStatus('deprecated')
snVLanByIpxNetChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetChassisStaticMask.setStatus('deprecated')
snVLanByIpxNetChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetChassisExcludeMask.setStatus('deprecated')
snVLanByIpxNetChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetChassisDynamicMask.setStatus('deprecated')
snVLanByIpxNetVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetVLanName.setStatus('mandatory')
snVLanByIpxNetStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetStaticPortList.setStatus('mandatory')
snVLanByIpxNetExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetExcludePortList.setStatus('mandatory')
snVLanByIpxNetDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetDynamicPortList.setStatus('mandatory')
snVLanByATCableTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 5), )
if mibBuilder.loadTexts: snVLanByATCableTable.setStatus('mandatory')
snVLanByATCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 5, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByATCableVLanId"), (0, "HP-SN-SWITCH-GROUP-MIB", "snVLanByATCableIndex"))
if mibBuilder.loadTexts: snVLanByATCableEntry.setStatus('mandatory')
snVLanByATCableVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByATCableVLanId.setStatus('mandatory')
snVLanByATCableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByATCableIndex.setStatus('mandatory')
snVLanByATCableRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableRouterIntf.setStatus('mandatory')
snVLanByATCableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableRowStatus.setStatus('mandatory')
snVLanByATCableChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableChassisStaticMask.setStatus('deprecated')
snVLanByATCableVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableVLanName.setStatus('mandatory')
snVLanByATCableStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 2, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableStaticPortList.setStatus('mandatory')
snSwPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1), )
if mibBuilder.loadTexts: snSwPortInfoTable.setStatus('mandatory')
snSwPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snSwPortInfoPortNum"))
if mibBuilder.loadTexts: snSwPortInfoEntry.setStatus('mandatory')
snSwPortInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoPortNum.setStatus('mandatory')
snSwPortInfoMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("input", 1), ("output", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoMonitorMode.setStatus('mandatory')
snSwPortInfoTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("auto", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoTagMode.setStatus('mandatory')
snSwPortInfoChnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoChnMode.setStatus('mandatory')
snSwPortInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("sAutoSense", 1), ("s10M", 2), ("s100M", 3), ("s1G", 4), ("s45M", 5), ("s155M", 6), ("s10G", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoSpeed.setStatus('mandatory')
snSwPortInfoMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("m100BaseTX", 2), ("m100BaseFX", 3), ("m1000BaseFX", 4), ("mT3", 5), ("m155ATM", 6), ("m1000BaseTX", 7), ("m622ATM", 8), ("m155POS", 9), ("m622POS", 10), ("m2488POS", 11), ("m10000BaseFX", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoMediaType.setStatus('mandatory')
snSwPortInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoConnectorType.setStatus('mandatory')
snSwPortInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoAdminStatus.setStatus('mandatory')
snSwPortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoLinkStatus.setStatus('mandatory')
snSwPortInfoPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoPortQos.setStatus('mandatory')
snSwPortInfoPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoPhysAddress.setStatus('mandatory')
snSwPortStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInFrames.setStatus('mandatory')
snSwPortStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutFrames.setStatus('mandatory')
snSwPortStatsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsAlignErrors.setStatus('mandatory')
snSwPortStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsFCSErrors.setStatus('mandatory')
snSwPortStatsMultiColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsMultiColliFrames.setStatus('mandatory')
snSwPortStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsFrameTooLongs.setStatus('mandatory')
snSwPortStatsTxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsTxColliFrames.setStatus('mandatory')
snSwPortStatsRxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsRxColliFrames.setStatus('mandatory')
snSwPortStatsFrameTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsFrameTooShorts.setStatus('mandatory')
snSwPortLockAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortLockAddressCount.setStatus('mandatory')
snSwPortStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortStpPortEnable.setStatus('mandatory')
snSwPortDhcpGateListId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortDhcpGateListId.setStatus('mandatory')
snSwPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortName.setStatus('mandatory')
snSwPortStatsInBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInBcastFrames.setStatus('mandatory')
snSwPortStatsOutBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutBcastFrames.setStatus('mandatory')
snSwPortStatsInMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInMcastFrames.setStatus('mandatory')
snSwPortStatsOutMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutMcastFrames.setStatus('mandatory')
snSwPortStatsInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInDiscard.setStatus('mandatory')
snSwPortStatsOutDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutDiscard.setStatus('mandatory')
snSwPortStatsMacStations = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsMacStations.setStatus('mandatory')
snSwPortCacheGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortCacheGroupId.setStatus('mandatory')
snSwPortTransGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortTransGroupId.setStatus('mandatory')
snSwPortInfoAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("global", 3), ("other", 4))).clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoAutoNegotiate.setStatus('mandatory')
snSwPortInfoFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoFlowControl.setStatus('mandatory')
snSwPortInfoGigType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("m1000BaseSX", 0), ("m1000BaseLX", 1), ("m1000BaseLH", 2), ("m1000BaseLHA", 3), ("m1000BaseLHB", 4), ("m1000BaseTX", 5), ("m10000BaseSR", 6), ("m10000BaseLR", 7), ("m10000BaseER", 8), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoGigType.setStatus('mandatory')
snSwPortStatsLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsLinkChange.setStatus('mandatory')
snSwPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortIfIndex.setStatus('mandatory')
snSwPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortDescr.setStatus('mandatory')
snSwPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInOctets.setStatus('mandatory')
snSwPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortOutOctets.setStatus('mandatory')
snSwPortStatsInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInBitsPerSec.setStatus('mandatory')
snSwPortStatsOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutBitsPerSec.setStatus('mandatory')
snSwPortStatsInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInPktsPerSec.setStatus('mandatory')
snSwPortStatsOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutPktsPerSec.setStatus('mandatory')
snSwPortStatsInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInUtilization.setStatus('mandatory')
snSwPortStatsOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutUtilization.setStatus('mandatory')
snSwPortFastSpanPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortFastSpanPortEnable.setStatus('mandatory')
snSwPortFastSpanUplinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortFastSpanUplinkEnable.setStatus('mandatory')
snSwPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortVlanId.setStatus('mandatory')
snSwPortRouteOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortRouteOnly.setStatus('mandatory')
snSwPortPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortPresent.setStatus('mandatory')
snSwPortGBICStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gbic", 1), ("miniGBIC", 2), ("empty", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortGBICStatus.setStatus('mandatory')
snSwPortStatsInKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInKiloBitsPerSec.setStatus('mandatory')
snSwPortStatsOutKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutKiloBitsPerSec.setStatus('mandatory')
snSwPortLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortLoadInterval.setStatus('mandatory')
snSwPortTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 1, 1, 57), Integer32().clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortTagType.setStatus('mandatory')
snInterfaceId = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 2))
snInterfaceLookupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 3), )
if mibBuilder.loadTexts: snInterfaceLookupTable.setStatus('mandatory')
snInterfaceLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 3, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snInterfaceLookupInterfaceId"))
if mibBuilder.loadTexts: snInterfaceLookupEntry.setStatus('mandatory')
snInterfaceLookupInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 3, 1, 1), InterfaceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInterfaceLookupInterfaceId.setStatus('mandatory')
snInterfaceLookupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInterfaceLookupIfIndex.setStatus('mandatory')
snIfIndexLookupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 4), )
if mibBuilder.loadTexts: snIfIndexLookupTable.setStatus('mandatory')
snIfIndexLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 4, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snIfIndexLookupIfIndex"))
if mibBuilder.loadTexts: snIfIndexLookupEntry.setStatus('mandatory')
snIfIndexLookupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfIndexLookupIfIndex.setStatus('mandatory')
snIfIndexLookupInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 3, 4, 1, 2), InterfaceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfIndexLookupInterfaceId.setStatus('mandatory')
snFdbTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 4, 1), )
if mibBuilder.loadTexts: snFdbTable.setStatus('mandatory')
snFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 4, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snFdbStationIndex"))
if mibBuilder.loadTexts: snFdbEntry.setStatus('mandatory')
snFdbStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdbStationIndex.setStatus('mandatory')
snFdbStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 4, 1, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationAddr.setStatus('mandatory')
snFdbStationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationPort.setStatus('mandatory')
snFdbVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbVLanId.setStatus('mandatory')
snFdbStationQos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationQos.setStatus('mandatory')
snFdbStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("host", 1), ("router", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationType.setStatus('mandatory')
snFdbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbRowStatus.setStatus('mandatory')
snPortStpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1), )
if mibBuilder.loadTexts: snPortStpTable.setStatus('mandatory')
snPortStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snPortStpVLanId"), (0, "HP-SN-SWITCH-GROUP-MIB", "snPortStpPortNum"))
if mibBuilder.loadTexts: snPortStpEntry.setStatus('mandatory')
snPortStpVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpVLanId.setStatus('mandatory')
snPortStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortNum.setStatus('mandatory')
snPortStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortPriority.setStatus('mandatory')
snPortStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPathCost.setStatus('mandatory')
snPortStpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpOperState.setStatus('mandatory')
snPortStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))))
if mibBuilder.loadTexts: snPortStpPortEnable.setStatus('mandatory')
snPortStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 7), Counter32())
if mibBuilder.loadTexts: snPortStpPortForwardTransitions.setStatus('mandatory')
snPortStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortState.setStatus('mandatory')
snPortStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedCost.setStatus('mandatory')
snPortStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedRoot.setStatus('mandatory')
snPortStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 11), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedBridge.setStatus('mandatory')
snPortStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedPort.setStatus('mandatory')
snTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 1), )
if mibBuilder.loadTexts: snTrunkTable.setStatus('mandatory')
snTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snTrunkIndex"))
if mibBuilder.loadTexts: snTrunkEntry.setStatus('mandatory')
snTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTrunkIndex.setStatus('mandatory')
snTrunkPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 1, 1, 2), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTrunkPortMask.setStatus('mandatory')
snTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTrunkType.setStatus('mandatory')
snMSTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 2), )
if mibBuilder.loadTexts: snMSTrunkTable.setStatus('mandatory')
snMSTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 2, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snMSTrunkPortIndex"))
if mibBuilder.loadTexts: snMSTrunkEntry.setStatus('mandatory')
snMSTrunkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMSTrunkPortIndex.setStatus('mandatory')
snMSTrunkPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkPortList.setStatus('mandatory')
snMSTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkType.setStatus('mandatory')
snMSTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkRowStatus.setStatus('mandatory')
snSwSummaryMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwSummaryMode.setStatus('mandatory')
snDhcpGatewayListTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 8, 1), )
if mibBuilder.loadTexts: snDhcpGatewayListTable.setStatus('mandatory')
snDhcpGatewayListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 8, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snDhcpGatewayListId"))
if mibBuilder.loadTexts: snDhcpGatewayListEntry.setStatus('mandatory')
snDhcpGatewayListId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDhcpGatewayListId.setStatus('mandatory')
snDhcpGatewayListAddrList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 8, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDhcpGatewayListAddrList.setStatus('mandatory')
snDhcpGatewayListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDhcpGatewayListRowStatus.setStatus('mandatory')
snDnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDnsDomainName.setStatus('mandatory')
snDnsGatewayIpAddrList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDnsGatewayIpAddrList.setStatus('mandatory')
snMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1), )
if mibBuilder.loadTexts: snMacFilterTable.setStatus('mandatory')
snMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snMacFilterIndex"))
if mibBuilder.loadTexts: snMacFilterEntry.setStatus('mandatory')
snMacFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMacFilterIndex.setStatus('mandatory')
snMacFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterAction.setStatus('mandatory')
snMacFilterSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterSourceMac.setStatus('mandatory')
snMacFilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterSourceMask.setStatus('mandatory')
snMacFilterDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterDestMac.setStatus('mandatory')
snMacFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterDestMask.setStatus('mandatory')
snMacFilterOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("equal", 0), ("notEqual", 1), ("less", 2), ("greater", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterOperator.setStatus('mandatory')
snMacFilterFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 0), ("ethernet", 1), ("llc", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterFrameType.setStatus('mandatory')
snMacFilterFrameTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterFrameTypeNum.setStatus('mandatory')
snMacFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterRowStatus.setStatus('mandatory')
snMacFilterPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 2), )
if mibBuilder.loadTexts: snMacFilterPortAccessTable.setStatus('mandatory')
snMacFilterPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 2, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snMacFilterPortAccessPortIndex"))
if mibBuilder.loadTexts: snMacFilterPortAccessEntry.setStatus('mandatory')
snMacFilterPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMacFilterPortAccessPortIndex.setStatus('mandatory')
snMacFilterPortAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterPortAccessFilters.setStatus('mandatory')
snMacFilterPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterPortAccessRowStatus.setStatus('mandatory')
snNTPGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 1))
snNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPPollInterval.setStatus('mandatory')
snNTPTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("alaska", 0), ("aleutian", 1), ("arizona", 2), ("central", 3), ("eastIndiana", 4), ("eastern", 5), ("hawaii", 6), ("michigan", 7), ("mountain", 8), ("pacific", 9), ("samoa", 10), ("gmtPlus12", 11), ("gmtPlus11", 12), ("gmtPlus10", 13), ("gmtPlus9", 14), ("gmtPlus8", 15), ("gmtPlus7", 16), ("gmtPlus6", 17), ("gmtPlus5", 18), ("gmtPlus4", 19), ("gmtPlus3", 20), ("gmtPlus2", 21), ("gmtPlus1", 22), ("gmt", 23), ("gmtMinus1", 24), ("gmtMinus2", 25), ("gmtMinus3", 26), ("gmtMinus4", 27), ("gmtMinus5", 28), ("gmtMinus6", 29), ("gmtMinus7", 30), ("gmtMinus8", 31), ("gmtMinus9", 32), ("gmtMinus10", 33), ("gmtMinus11", 34), ("gmtMinus12", 35))).clone('gmt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPTimeZone.setStatus('mandatory')
snNTPSummerTimeEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPSummerTimeEnable.setStatus('mandatory')
snNTPSystemClock = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPSystemClock.setStatus('mandatory')
snNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("synchronize", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPSync.setStatus('mandatory')
snNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 2), )
if mibBuilder.loadTexts: snNTPServerTable.setStatus('mandatory')
snNTPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 2, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snNTPServerIp"))
if mibBuilder.loadTexts: snNTPServerEntry.setStatus('mandatory')
snNTPServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNTPServerIp.setStatus('mandatory')
snNTPServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPServerVersion.setStatus('mandatory')
snNTPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPServerRowStatus.setStatus('mandatory')
snRadiusGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1))
snRadiusSNMPAccess = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRadiusSNMPAccess.setStatus('mandatory')
snRadiusEnableTelnetAuth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusEnableTelnetAuth.setStatus('mandatory')
snRadiusRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusRetransmit.setStatus('mandatory')
snRadiusTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusTimeOut.setStatus('mandatory')
snRadiusDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusDeadTime.setStatus('mandatory')
snRadiusKey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusKey.setStatus('mandatory')
snRadiusLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusLoginMethod.setStatus('mandatory')
snRadiusEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusEnableMethod.setStatus('mandatory')
snRadiusWebServerMethod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusWebServerMethod.setStatus('mandatory')
snRadiusSNMPServerMethod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusSNMPServerMethod.setStatus('mandatory')
snRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 2), )
if mibBuilder.loadTexts: snRadiusServerTable.setStatus('mandatory')
snRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 2, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snRadiusServerIp"))
if mibBuilder.loadTexts: snRadiusServerEntry.setStatus('mandatory')
snRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRadiusServerIp.setStatus('mandatory')
snRadiusServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 2, 1, 2), Integer32().clone(1645)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerAuthPort.setStatus('mandatory')
snRadiusServerAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 2, 1, 3), Integer32().clone(1646)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerAcctPort.setStatus('mandatory')
snRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerRowStatus.setStatus('mandatory')
snRadiusServerRowKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerRowKey.setStatus('mandatory')
snRadiusServerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("authentication-only", 2), ("authorization-only", 3), ("accounting-only", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerUsage.setStatus('mandatory')
snTacacsGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 1))
snTacacsRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsRetransmit.setStatus('mandatory')
snTacacsTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsTimeOut.setStatus('mandatory')
snTacacsDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsDeadTime.setStatus('mandatory')
snTacacsKey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsKey.setStatus('mandatory')
snTacacsSNMPAccess = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTacacsSNMPAccess.setStatus('mandatory')
snTacacsServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 2), )
if mibBuilder.loadTexts: snTacacsServerTable.setStatus('mandatory')
snTacacsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 2, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snTacacsServerIp"))
if mibBuilder.loadTexts: snTacacsServerEntry.setStatus('mandatory')
snTacacsServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTacacsServerIp.setStatus('mandatory')
snTacacsServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 2, 1, 2), Integer32().clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerAuthPort.setStatus('mandatory')
snTacacsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerRowStatus.setStatus('mandatory')
snTacacsServerRowKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerRowKey.setStatus('mandatory')
snTacacsServerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("authentication-only", 2), ("authorization-only", 3), ("accounting-only", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerUsage.setStatus('mandatory')
snQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 1), )
if mibBuilder.loadTexts: snQosProfileTable.setStatus('mandatory')
snQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snQosProfileIndex"))
if mibBuilder.loadTexts: snQosProfileEntry.setStatus('mandatory')
snQosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosProfileIndex.setStatus('mandatory')
snQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snQosProfileName.setStatus('mandatory')
snQosProfileRequestedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snQosProfileRequestedBandwidth.setStatus('mandatory')
snQosProfileCalculatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosProfileCalculatedBandwidth.setStatus('mandatory')
snQosBindTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 2), )
if mibBuilder.loadTexts: snQosBindTable.setStatus('mandatory')
snQosBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 2, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snQosBindIndex"))
if mibBuilder.loadTexts: snQosBindEntry.setStatus('mandatory')
snQosBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosBindIndex.setStatus('mandatory')
snQosBindPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosBindPriority.setStatus('mandatory')
snQosBindProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snQosBindProfileIndex.setStatus('mandatory')
snAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15, 1))
snAuthorization = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15, 2))
snAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15, 3))
snAuthorizationCommandMethods = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAuthorizationCommandMethods.setStatus('mandatory')
snAuthorizationCommandLevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5))).clone(namedValues=NamedValues(("level0", 0), ("level4", 4), ("level5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAuthorizationCommandLevel.setStatus('mandatory')
snAuthorizationExec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAuthorizationExec.setStatus('mandatory')
snAccountingCommandMethods = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingCommandMethods.setStatus('mandatory')
snAccountingCommandLevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5))).clone(namedValues=NamedValues(("level0", 0), ("level4", 4), ("level5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingCommandLevel.setStatus('mandatory')
snAccountingExec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingExec.setStatus('mandatory')
snAccountingSystem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 15, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingSystem.setStatus('mandatory')
snNetFlowGlb = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 1))
snNetFlowGblEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblEnable.setStatus('mandatory')
snNetFlowGblVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5))).clone(namedValues=NamedValues(("version1", 1), ("version5", 5))).clone('version5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblVersion.setStatus('mandatory')
snNetFlowGblProtocolDisable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblProtocolDisable.setStatus('mandatory')
snNetFlowGblActiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblActiveTimeout.setStatus('mandatory')
snNetFlowGblInactiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 1, 5), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblInactiveTimeout.setStatus('mandatory')
snNetFlowCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 2), )
if mibBuilder.loadTexts: snNetFlowCollectorTable.setStatus('mandatory')
snNetFlowCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 2, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snNetFlowCollectorIndex"))
if mibBuilder.loadTexts: snNetFlowCollectorEntry.setStatus('mandatory')
snNetFlowCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNetFlowCollectorIndex.setStatus('mandatory')
snNetFlowCollectorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorIp.setStatus('mandatory')
snNetFlowCollectorUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorUdpPort.setStatus('mandatory')
snNetFlowCollectorSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorSourceInterface.setStatus('mandatory')
snNetFlowCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorRowStatus.setStatus('mandatory')
snNetFlowAggregationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3), )
if mibBuilder.loadTexts: snNetFlowAggregationTable.setStatus('mandatory')
snNetFlowAggregationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snNetFlowAggregationIndex"))
if mibBuilder.loadTexts: snNetFlowAggregationEntry.setStatus('mandatory')
snNetFlowAggregationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("as", 1), ("protocolPort", 2), ("destPrefix", 3), ("sourcePrefix", 4), ("prefix", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNetFlowAggregationIndex.setStatus('mandatory')
snNetFlowAggregationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationIp.setStatus('mandatory')
snNetFlowAggregationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationUdpPort.setStatus('mandatory')
snNetFlowAggregationSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationSourceInterface.setStatus('mandatory')
snNetFlowAggregationNumberOfCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationNumberOfCacheEntries.setStatus('mandatory')
snNetFlowAggregationActiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationActiveTimeout.setStatus('mandatory')
snNetFlowAggregationInactiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationInactiveTimeout.setStatus('mandatory')
snNetFlowAggregationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationEnable.setStatus('mandatory')
snNetFlowAggregationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationRowStatus.setStatus('mandatory')
snNetFlowIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 4), )
if mibBuilder.loadTexts: snNetFlowIfTable.setStatus('mandatory')
snNetFlowIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 4, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snNetFlowIfIndex"))
if mibBuilder.loadTexts: snNetFlowIfEntry.setStatus('mandatory')
snNetFlowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNetFlowIfIndex.setStatus('mandatory')
snNetFlowIfFlowSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowIfFlowSwitching.setStatus('mandatory')
snSFlowGlb = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 19, 1))
snSflowCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 19, 2), )
if mibBuilder.loadTexts: snSflowCollectorTable.setStatus('mandatory')
snSflowCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 19, 2, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snSflowCollectorIndex"))
if mibBuilder.loadTexts: snSflowCollectorEntry.setStatus('mandatory')
snSflowCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSflowCollectorIndex.setStatus('mandatory')
snSflowCollectorIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 19, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSflowCollectorIP.setStatus('mandatory')
snSflowCollectorUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 19, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSflowCollectorUDPPort.setStatus('mandatory')
snSflowCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noSuch", 0), ("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSflowCollectorRowStatus.setStatus('mandatory')
snFdpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1))
snFdpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 1))
snFdpCache = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2))
snFdpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 3))
snFdpCachedAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 4))
snFdpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 1, 1), )
if mibBuilder.loadTexts: snFdpInterfaceTable.setStatus('mandatory')
snFdpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 1, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snFdpInterfaceIfIndex"))
if mibBuilder.loadTexts: snFdpInterfaceEntry.setStatus('mandatory')
snFdpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: snFdpInterfaceIfIndex.setStatus('mandatory')
snFdpInterfaceFdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpInterfaceFdpEnable.setStatus('mandatory')
snFdpInterfaceCdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpInterfaceCdpEnable.setStatus('mandatory')
snFdpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1), )
if mibBuilder.loadTexts: snFdpCacheTable.setStatus('mandatory')
snFdpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snFdpCacheIfIndex"), (0, "HP-SN-SWITCH-GROUP-MIB", "snFdpCacheDeviceIndex"))
if mibBuilder.loadTexts: snFdpCacheEntry.setStatus('mandatory')
snFdpCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: snFdpCacheIfIndex.setStatus('mandatory')
snFdpCacheDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: snFdpCacheDeviceIndex.setStatus('mandatory')
snFdpCacheDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheDeviceId.setStatus('mandatory')
snFdpCacheAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appletalk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheAddressType.setStatus('mandatory')
snFdpCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheAddress.setStatus('mandatory')
snFdpCacheVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheVersion.setStatus('mandatory')
snFdpCacheDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheDevicePort.setStatus('mandatory')
snFdpCachePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachePlatform.setStatus('mandatory')
snFdpCacheCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheCapabilities.setStatus('mandatory')
snFdpCacheVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fdp", 1), ("cdp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheVendorId.setStatus('mandatory')
snFdpCacheIsAggregateVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheIsAggregateVlan.setStatus('mandatory')
snFdpCacheTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheTagType.setStatus('mandatory')
snFdpCachePortVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachePortVlanMask.setStatus('mandatory')
snFdpCachePortTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("dual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachePortTagMode.setStatus('mandatory')
snFdpCacheDefaultTrafficeVlanIdForDualMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheDefaultTrafficeVlanIdForDualMode.setStatus('mandatory')
snFdpGlobalRun = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalRun.setStatus('mandatory')
snFdpGlobalMessageInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 900)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalMessageInterval.setStatus('mandatory')
snFdpGlobalHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalHoldTime.setStatus('mandatory')
snFdpGlobalCdpRun = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalCdpRun.setStatus('mandatory')
snFdpCachedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 4, 1), )
if mibBuilder.loadTexts: snFdpCachedAddressTable.setStatus('mandatory')
snFdpCachedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 4, 1, 1), ).setIndexNames((0, "HP-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrIfIndex"), (0, "HP-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrDeviceIndex"), (0, "HP-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrDeviceAddrEntryIndex"))
if mibBuilder.loadTexts: snFdpCachedAddressEntry.setStatus('mandatory')
snFdpCachedAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: snFdpCachedAddrIfIndex.setStatus('mandatory')
snFdpCachedAddrDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 4, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: snFdpCachedAddrDeviceIndex.setStatus('mandatory')
snFdpCachedAddrDeviceAddrEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 4, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: snFdpCachedAddrDeviceAddrEntryIndex.setStatus('mandatory')
snFdpCachedAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appletalk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachedAddrType.setStatus('mandatory')
snFdpCachedAddrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 20, 1, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachedAddrValue.setStatus('mandatory')
mibBuilder.exportSymbols("HP-SN-SWITCH-GROUP-MIB", snVLanByPortStpRootPort=snVLanByPortStpRootPort, snSwPortTagType=snSwPortTagType, snSFlowGlb=snSFlowGlb, snVLanByProtocolVLanName=snVLanByProtocolVLanName, snSwIpMcastQuerierMode=snSwIpMcastQuerierMode, snNTPServerTable=snNTPServerTable, snMacFilterEntry=snMacFilterEntry, snNTPServerRowStatus=snNTPServerRowStatus, snFdbTableCurEntry=snFdbTableCurEntry, snVLanByPortStpHelloTime=snVLanByPortStpHelloTime, snNetFlowIfEntry=snNetFlowIfEntry, snFdpCachePortVlanMask=snFdpCachePortVlanMask, MacAddress=MacAddress, snRadiusServerIp=snRadiusServerIp, snDnsDomainName=snDnsDomainName, snNetFlow=snNetFlow, snVLanByProtocolRouterIntf=snVLanByProtocolRouterIntf, snSwPortEntrySize=snSwPortEntrySize, snSwPortInfoPortQos=snSwPortInfoPortQos, snVLanByIpxNetRouterIntf=snVLanByIpxNetRouterIntf, snNetFlowAggregationIndex=snNetFlowAggregationIndex, snQosProfileTable=snQosProfileTable, snVLanByProtocolStaticPortList=snVLanByProtocolStaticPortList, snNetFlowCollectorEntry=snNetFlowCollectorEntry, snDhcpGatewayListEntry=snDhcpGatewayListEntry, snFdpCacheCapabilities=snFdpCacheCapabilities, PhysAddress=PhysAddress, snVLanByIpSubnetTable=snVLanByIpSubnetTable, snSwGroupDefaultCfgMode=snSwGroupDefaultCfgMode, snVLanByIpSubnetDynamicMask=snVLanByIpSubnetDynamicMask, snNetFlowAggregationInactiveTimeout=snNetFlowAggregationInactiveTimeout, snVLanByIpSubnetRowStatus=snVLanByIpSubnetRowStatus, snNetFlowAggregationIp=snNetFlowAggregationIp, snSwPortFastSpanPortEnable=snSwPortFastSpanPortEnable, snAuthorization=snAuthorization, snVLanByPortCfgStpGroupMaxAge=snVLanByPortCfgStpGroupMaxAge, snMSTrunkPortList=snMSTrunkPortList, snSwPortOutOctets=snSwPortOutOctets, snVLanByIpSubnetSubnetMask=snVLanByIpSubnetSubnetMask, InterfaceId=InterfaceId, snVLanByIpxNetChassisExcludeMask=snVLanByIpxNetChassisExcludeMask, snVLanByPortEntrySize=snVLanByPortEntrySize, snPortStpPortState=snPortStpPortState, snMacFilterAction=snMacFilterAction, snVLanByPortStpMaxAge=snVLanByPortStpMaxAge, snVLanByPortCfgBaseType=snVLanByPortCfgBaseType, snSwPortInfo=snSwPortInfo, snDnsGatewayIpAddrList=snDnsGatewayIpAddrList, snSwPortCacheGroupId=snSwPortCacheGroupId, snVLanByPortCfgStpRootCost=snVLanByPortCfgStpRootCost, snVLanByPortMemberPortId=snVLanByPortMemberPortId, snPortStpPortDesignatedRoot=snPortStpPortDesignatedRoot, snSwPortTransGroupId=snSwPortTransGroupId, snFdpInterfaceEntry=snFdpInterfaceEntry, snVLanByProtocolDynamicPortList=snVLanByProtocolDynamicPortList, snSwPortGBICStatus=snSwPortGBICStatus, snRadiusWebServerMethod=snRadiusWebServerMethod, snSwSingleStpMode=snSwSingleStpMode, snRadiusServerEntry=snRadiusServerEntry, snFdpCachePortTagMode=snFdpCachePortTagMode, snVLanByIpSubnetMaxSubnets=snVLanByIpSubnetMaxSubnets, snTacacsServerTable=snTacacsServerTable, snSwPortStatsOutFrames=snSwPortStatsOutFrames, snSwPortStatsFCSErrors=snSwPortStatsFCSErrors, snNTPServerEntry=snNTPServerEntry, snFdpCacheIfIndex=snFdpCacheIfIndex, snFdpCachedAddressEntry=snFdpCachedAddressEntry, snFdpCacheAddress=snFdpCacheAddress, snSflowCollectorUDPPort=snSflowCollectorUDPPort, snFdpGlobalRun=snFdpGlobalRun, snQosProfileCalculatedBandwidth=snQosProfileCalculatedBandwidth, snRadiusServerRowKey=snRadiusServerRowKey, snQosProfileEntry=snQosProfileEntry, snTacacsServerEntry=snTacacsServerEntry, snQosBindIndex=snQosBindIndex, snAccountingSystem=snAccountingSystem, snPortStpPortDesignatedPort=snPortStpPortDesignatedPort, snVLanByPortCfgRowStatus=snVLanByPortCfgRowStatus, snAuthentication=snAuthentication, snSwPortStatsOutKiloBitsPerSec=snSwPortStatsOutKiloBitsPerSec, snSwSummaryMode=snSwSummaryMode, snVLanByATCableRouterIntf=snVLanByATCableRouterIntf, snVLanByProtocolVLanId=snVLanByProtocolVLanId, snVLanByProtocolRowStatus=snVLanByProtocolRowStatus, snDhcpGatewayListAddrList=snDhcpGatewayListAddrList, snMSTrunkType=snMSTrunkType, snMacFilterPortAccessPortIndex=snMacFilterPortAccessPortIndex, snSwPortInfoLinkStatus=snSwPortInfoLinkStatus, snMacFilterFrameTypeNum=snMacFilterFrameTypeNum, snTacacsServerRowStatus=snTacacsServerRowStatus, snSwPortStatsInBitsPerSec=snSwPortStatsInBitsPerSec, snSwPortInfoAdminStatus=snSwPortInfoAdminStatus, snFDP=snFDP, snTrunkTable=snTrunkTable, snIfIndexLookupInterfaceId=snIfIndexLookupInterfaceId, snFdbStationAddr=snFdbStationAddr, snNTPTimeZone=snNTPTimeZone, snFdbStationEntrySize=snFdbStationEntrySize, snSwPortStatsOutBcastFrames=snSwPortStatsOutBcastFrames, snSwPortInfoMonitorMode=snSwPortInfoMonitorMode, snFdbRowStatus=snFdbRowStatus, snVLanByPortCfgTable=snVLanByPortCfgTable, snFdbTableStationFlush=snFdbTableStationFlush, snVLanByProtocolChassisExcludeMask=snVLanByProtocolChassisExcludeMask, PortMask=PortMask, snFdbStationType=snFdbStationType, snNetFlowAggregationEntry=snNetFlowAggregationEntry, snFdpInterfaceCdpEnable=snFdpInterfaceCdpEnable, snVLanByATCableStaticPortList=snVLanByATCableStaticPortList, snVLanByPortVLanId=snVLanByPortVLanId, snVLanByIpxNetNetworkNum=snVLanByIpxNetNetworkNum, snSwPortStatsInDiscard=snSwPortStatsInDiscard, snVLanByPortCfgStpRootPort=snVLanByPortCfgStpRootPort, snTrunkInfo=snTrunkInfo, snRadiusServerAuthPort=snRadiusServerAuthPort, snSwBroadcastLimit=snSwBroadcastLimit, snSwPortStatsInFrames=snSwPortStatsInFrames, snNetFlowCollectorSourceInterface=snNetFlowCollectorSourceInterface, snFdpCacheDeviceId=snFdpCacheDeviceId, snSwPortStatsAlignErrors=snSwPortStatsAlignErrors, snQosProfileRequestedBandwidth=snQosProfileRequestedBandwidth, snQosBindProfileIndex=snQosBindProfileIndex, snVLanByIpxNetVLanId=snVLanByIpxNetVLanId, snFdpGlobalHoldTime=snFdpGlobalHoldTime, snFdpGlobalCdpRun=snFdpGlobalCdpRun, snNetFlowAggregationSourceInterface=snNetFlowAggregationSourceInterface, snVLanByPortCfgQos=snVLanByPortCfgQos, snVLanByPortQos=snVLanByPortQos, snSwPortStatsOutUtilization=snSwPortStatsOutUtilization, snSwPortStatsFrameTooLongs=snSwPortStatsFrameTooLongs, snAuthorizationCommandLevel=snAuthorizationCommandLevel, snTrunkType=snTrunkType, snFdpCachedAddrDeviceAddrEntryIndex=snFdpCachedAddrDeviceAddrEntryIndex, snDhcpGatewayListId=snDhcpGatewayListId, snAuthorizationExec=snAuthorizationExec, snFdpCacheVendorId=snFdpCacheVendorId, snVLanByPortMemberTable=snVLanByPortMemberTable, snVLanByPortPortList=snVLanByPortPortList, snQosBindEntry=snQosBindEntry, snPortStpInfo=snPortStpInfo, snFdpCacheDevicePort=snFdpCacheDevicePort, snMacFilterIndex=snMacFilterIndex, snSwViolatorPortNumber=snSwViolatorPortNumber, snVLanByPortMemberEntry=snVLanByPortMemberEntry, snTacacsTimeOut=snTacacsTimeOut, snVLanByProtocolTable=snVLanByProtocolTable, snVLanByIpxNetStaticPortList=snVLanByIpxNetStaticPortList, snFdbTable=snFdbTable, snTacacsServerIp=snTacacsServerIp, snSflowCollectorRowStatus=snSflowCollectorRowStatus, snVLanByATCableTable=snVLanByATCableTable, snNetFlowIfFlowSwitching=snNetFlowIfFlowSwitching, snVLanByPortStpProtocolSpecification=snVLanByPortStpProtocolSpecification, snTacacsServerRowKey=snTacacsServerRowKey, snSwIpxL3SwMode=snSwIpxL3SwMode, snVLanByIpxNetFrameType=snVLanByIpxNetFrameType, snSwGroupOperMode=snSwGroupOperMode, snNetFlowGblInactiveTimeout=snNetFlowGblInactiveTimeout, snVLanByPortCfgStpMode=snVLanByPortCfgStpMode, snSwPortInfoPortNum=snSwPortInfoPortNum, snRadiusServerRowStatus=snRadiusServerRowStatus, snNetFlowGblVersion=snNetFlowGblVersion, snRadius=snRadius, snNetFlowGblEnable=snNetFlowGblEnable, snVLanByProtocolChassisStaticMask=snVLanByProtocolChassisStaticMask, snPortStpPortForwardTransitions=snPortStpPortForwardTransitions, snVLanByPortRowStatus=snVLanByPortRowStatus, snVLanByIpxNetChassisDynamicMask=snVLanByIpxNetChassisDynamicMask, snPortStpVLanId=snPortStpVLanId, snVLanByProtocolDynamicMask=snVLanByProtocolDynamicMask, snVLanByProtocolIndex=snVLanByProtocolIndex, snVLanByPortStpForwardDelay=snVLanByPortStpForwardDelay, snNTPPollInterval=snNTPPollInterval, snVLanByIpxNetDynamic=snVLanByIpxNetDynamic, snQosBindPriority=snQosBindPriority, snAccountingExec=snAccountingExec, snSwPortVlanId=snSwPortVlanId, snTacacsDeadTime=snTacacsDeadTime, snFdpGlobalMessageInterval=snFdpGlobalMessageInterval, snPortStpPortNum=snPortStpPortNum, snSflowCollectorEntry=snSflowCollectorEntry, snPortStpEntry=snPortStpEntry, snNetFlowIfIndex=snNetFlowIfIndex, snNetFlowAggregationEnable=snNetFlowAggregationEnable, snVLanByPortVLanIndex=snVLanByPortVLanIndex, snPortStpEntrySize=snPortStpEntrySize, snFdpCacheDeviceIndex=snFdpCacheDeviceIndex, snAccounting=snAccounting, snNTPSystemClock=snNTPSystemClock, snVLanByPortCfgStpPriority=snVLanByPortCfgStpPriority, snFdpInterface=snFdpInterface, snRadiusSNMPAccess=snRadiusSNMPAccess, snNetFlowAggregationActiveTimeout=snNetFlowAggregationActiveTimeout, snInterfaceLookupInterfaceId=snInterfaceLookupInterfaceId, snVLanByATCableVLanName=snVLanByATCableVLanName, snVLanByIpSubnetIpAddress=snVLanByIpSubnetIpAddress, snMacFilterPortAccessFilters=snMacFilterPortAccessFilters, snSwPortInfoTable=snSwPortInfoTable, snIfIndexLookupIfIndex=snIfIndexLookupIfIndex, snSwPortInfoAutoNegotiate=snSwPortInfoAutoNegotiate, snVsrp=snVsrp, snFdpCachedAddrDeviceIndex=snFdpCachedAddrDeviceIndex, snVLanByIpSubnetExcludePortList=snVLanByIpSubnetExcludePortList, snVLanInfo=snVLanInfo, snVLanByPortCfgStpGroupForwardDelay=snVLanByPortCfgStpGroupForwardDelay, snFdpCachePlatform=snFdpCachePlatform, snVLanByPortMemberVLanId=snVLanByPortMemberVLanId, snVLanGroupSetAllVLan=snVLanGroupSetAllVLan, snFdpInterfaceIfIndex=snFdpInterfaceIfIndex, snSwGroupSwitchAgeTime=snSwGroupSwitchAgeTime, snSw8021qTagType=snSw8021qTagType, snSwDefaultVLanId=snSwDefaultVLanId, snSwPortInfoGigType=snSwPortInfoGigType, snDhcpGatewayListInfo=snDhcpGatewayListInfo, snInterfaceLookupEntry=snInterfaceLookupEntry, snSflowCollectorIndex=snSflowCollectorIndex, snIfIndexLookupEntry=snIfIndexLookupEntry, snPortStpPortDesignatedBridge=snPortStpPortDesignatedBridge, snFdpCachedAddrType=snFdpCachedAddrType, snFdpCacheTagType=snFdpCacheTagType, snVLanGroupVlanMaxEntry=snVLanGroupVlanMaxEntry, snVLanByIpSubnetStaticMask=snVLanByIpSubnetStaticMask, snVLanByProtocolDynamic=snVLanByProtocolDynamic, snVLanByPortMemberRowStatus=snVLanByPortMemberRowStatus, snVLanByPortCfgEntry=snVLanByPortCfgEntry, snInterfaceLookupIfIndex=snInterfaceLookupIfIndex, snVLanByPortStpTimeSinceTopologyChange=snVLanByPortStpTimeSinceTopologyChange, snVLanByPortStpTopChanges=snVLanByPortStpTopChanges, snNetFlowCollectorIndex=snNetFlowCollectorIndex, snMacFilterDestMask=snMacFilterDestMask, snVLanByATCableEntry=snVLanByATCableEntry, snSwGroupIpL3SwMode=snSwGroupIpL3SwMode, snVLanByATCableIndex=snVLanByATCableIndex, snRadiusLoginMethod=snRadiusLoginMethod, snVLanByPortPortMask=snVLanByPortPortMask, snVLanByIpSubnetDynamicPortList=snVLanByIpSubnetDynamicPortList, snRadiusSNMPServerMethod=snRadiusSNMPServerMethod, snVLanByPortCfgStpProtocolSpecification=snVLanByPortCfgStpProtocolSpecification, snVLanByIpSubnetEntry=snVLanByIpSubnetEntry, snMSTrunkRowStatus=snMSTrunkRowStatus, snSflowCollectorIP=snSflowCollectorIP, snSwPortStatsRxColliFrames=snSwPortStatsRxColliFrames, snSwPortStatsInKiloBitsPerSec=snSwPortStatsInKiloBitsPerSec, snVLanByPortCfgStpDesignatedRoot=snVLanByPortCfgStpDesignatedRoot, snSwPortInfoEntry=snSwPortInfoEntry, snVLanByPortStpRootCost=snVLanByPortStpRootCost, snPortStpPortEnable=snPortStpPortEnable, snSwPortName=snSwPortName, snNetFlowGblProtocolDisable=snNetFlowGblProtocolDisable, snQosProfileName=snQosProfileName, snPortStpPathCost=snPortStpPathCost, snSwPortStatsOutDiscard=snSwPortStatsOutDiscard, snRadiusDeadTime=snRadiusDeadTime, snSwPortStatsInPktsPerSec=snSwPortStatsInPktsPerSec)
mibBuilder.exportSymbols("HP-SN-SWITCH-GROUP-MIB", snSwPortInfoFlowControl=snSwPortInfoFlowControl, snRadiusGeneral=snRadiusGeneral, snTrunkPortMask=snTrunkPortMask, snNetFlowGlb=snNetFlowGlb, snVLanByPortOperState=snVLanByPortOperState, snNTP=snNTP, snVLanByPortEntry=snVLanByPortEntry, snTacacsServerAuthPort=snTacacsServerAuthPort, snMacFilterOperator=snMacFilterOperator, snSwPortDescr=snSwPortDescr, snDhcpGatewayListTable=snDhcpGatewayListTable, snVLanByPortStpGroupHelloTime=snVLanByPortStpGroupHelloTime, snSwInfo=snSwInfo, snVLanByPortStpGroupForwardDelay=snVLanByPortStpGroupForwardDelay, snAuthorizationCommandMethods=snAuthorizationCommandMethods, snVLanByPortBaseBridgeAddress=snVLanByPortBaseBridgeAddress, snFdpInterfaceFdpEnable=snFdpInterfaceFdpEnable, snFdpCachedAddrValue=snFdpCachedAddrValue, snVLanByPortCfgStpTimeSinceTopologyChange=snVLanByPortCfgStpTimeSinceTopologyChange, snSwPortLoadInterval=snSwPortLoadInterval, snVLanByIpxNetDynamicPortList=snVLanByIpxNetDynamicPortList, snSwPortStatsLinkChange=snSwPortStatsLinkChange, snSwGlobalStpMode=snSwGlobalStpMode, snNetFlowAggregationUdpPort=snNetFlowAggregationUdpPort, snMacFilterFrameType=snMacFilterFrameType, snVLanByIpxNetVLanName=snVLanByIpxNetVLanName, snSwPortSetAll=snSwPortSetAll, snSwMaxMacFilterPerPort=snSwMaxMacFilterPerPort, Timeout=Timeout, snTrunkEntry=snTrunkEntry, snVLanByIpxNetChassisStaticMask=snVLanByIpxNetChassisStaticMask, snVLanByPortStpPriority=snVLanByPortStpPriority, snSwMaxMacFilterPerSystem=snSwMaxMacFilterPerSystem, snSwPortStatsInUtilization=snSwPortStatsInUtilization, snSw8021qTagMode=snSw8021qTagMode, snMacFilterPortAccessEntry=snMacFilterPortAccessEntry, snSwPortInfoMediaType=snSwPortInfoMediaType, snSwGlobalAutoNegotiate=snSwGlobalAutoNegotiate, snPortStpPortPriority=snPortStpPortPriority, snMSTrunkPortIndex=snMSTrunkPortIndex, snInterfaceLookupTable=snInterfaceLookupTable, snPortStpOperState=snPortStpOperState, snSwPortInfoSpeed=snSwPortInfoSpeed, snNetFlowIfTable=snNetFlowIfTable, snFdpGlobal=snFdpGlobal, snVLanByPortChassisPortMask=snVLanByPortChassisPortMask, snVLanByATCableChassisStaticMask=snVLanByATCableChassisStaticMask, snVLanByIpSubnetChassisStaticMask=snVLanByIpSubnetChassisStaticMask, snVLanByATCableRowStatus=snVLanByATCableRowStatus, snVLanByPortStpGroupMaxAge=snVLanByPortStpGroupMaxAge, snRadiusServerTable=snRadiusServerTable, snVLanByIpxNetExcludePortList=snVLanByIpxNetExcludePortList, snNetFlowGblActiveTimeout=snNetFlowGblActiveTimeout, snVLanByPortCfgStpHoldTime=snVLanByPortCfgStpHoldTime, snDnsInfo=snDnsInfo, snVLanByProtocolStaticMask=snVLanByProtocolStaticMask, snSFlow=snSFlow, snVLanByIpSubnetRouterIntf=snVLanByIpSubnetRouterIntf, snSwEnableLockedAddrViolationTrap=snSwEnableLockedAddrViolationTrap, snVLanByIpxNetMaxNetworks=snVLanByIpxNetMaxNetworks, snNetFlowCollectorRowStatus=snNetFlowCollectorRowStatus, snFdpCacheDefaultTrafficeVlanIdForDualMode=snFdpCacheDefaultTrafficeVlanIdForDualMode, snDhcpGatewayListRowStatus=snDhcpGatewayListRowStatus, snVLanByIpSubnetStaticPortList=snVLanByIpSubnetStaticPortList, snVLanByPortBaseNumPorts=snVLanByPortBaseNumPorts, snPortStpSetAll=snPortStpSetAll, snFdbStationPort=snFdbStationPort, snVLanByPortCfgStpForwardDelay=snVLanByPortCfgStpForwardDelay, snAccountingCommandLevel=snAccountingCommandLevel, snRadiusRetransmit=snRadiusRetransmit, snFdbStationIndex=snFdbStationIndex, snAccountingCommandMethods=snAccountingCommandMethods, snFdbStationQos=snFdbStationQos, snVLanByIpSubnetDynamic=snVLanByIpSubnetDynamic, snCAR=snCAR, snAAA=snAAA, snNetFlowCollectorUdpPort=snNetFlowCollectorUdpPort, snPortStpPortDesignatedCost=snPortStpPortDesignatedCost, snFdpCacheVersion=snFdpCacheVersion, BridgeId=BridgeId, snVLanByIpxNetExcludeMask=snVLanByIpxNetExcludeMask, snFdpCacheEntry=snFdpCacheEntry, snMacFilterTable=snMacFilterTable, snTacacsKey=snTacacsKey, snSwFastStpMode=snSwFastStpMode, snVLanByProtocolEntry=snVLanByProtocolEntry, snVLanByIpSubnetChassisExcludeMask=snVLanByIpSubnetChassisExcludeMask, snSflowCollectorTable=snSflowCollectorTable, snVLanByPortStpDesignatedRoot=snVLanByPortStpDesignatedRoot, snFdpCachedAddressTable=snFdpCachedAddressTable, snMacFilterRowStatus=snMacFilterRowStatus, snSwPortDhcpGateListId=snSwPortDhcpGateListId, snSwProbePortNum=snSwProbePortNum, snFdpCachedAddr=snFdpCachedAddr, snSwPortInOctets=snSwPortInOctets, snVLanByPortCfgBaseBridgeAddress=snVLanByPortCfgBaseBridgeAddress, snTacacsSNMPAccess=snTacacsSNMPAccess, snSwPortInfoConnectorType=snSwPortInfoConnectorType, snMSTrunkTable=snMSTrunkTable, snTacacs=snTacacs, snFdbVLanId=snFdbVLanId, snSwGroupIpMcastMode=snSwGroupIpMcastMode, snMSTrunkEntry=snMSTrunkEntry, snNetFlowCollectorIp=snNetFlowCollectorIp, snVLanByPortCfgStpTopChanges=snVLanByPortCfgStpTopChanges, snVLanCAR=snVLanCAR, snVLanByPortCfgStpGroupHelloTime=snVLanByPortCfgStpGroupHelloTime, snNTPGeneral=snNTPGeneral, snNetFlowAggregationNumberOfCacheEntries=snNetFlowAggregationNumberOfCacheEntries, snSwPortInfoTagMode=snSwPortInfoTagMode, snVLanByPortCfgVLanId=snVLanByPortCfgVLanId, snVLanByProtocolChassisDynamicMask=snVLanByProtocolChassisDynamicMask, snFdpCacheAddressType=snFdpCacheAddressType, snVLanByPortCfgStpHelloTime=snVLanByPortCfgStpHelloTime, snNTPServerVersion=snNTPServerVersion, snRadiusServerUsage=snRadiusServerUsage, snNTPSummerTimeEnable=snNTPSummerTimeEnable, snSwPortStatsOutPktsPerSec=snSwPortStatsOutPktsPerSec, snFdpInterfaceTable=snFdpInterfaceTable, snVLanByPortStpMode=snVLanByPortStpMode, snVLanByIpSubnetChassisDynamicMask=snVLanByIpSubnetChassisDynamicMask, snVLanByPortStpHoldTime=snVLanByPortStpHoldTime, snMacFilterSourceMac=snMacFilterSourceMac, snTacacsGeneral=snTacacsGeneral, snVLanByPortRouterIntf=snVLanByPortRouterIntf, snRadiusEnableTelnetAuth=snRadiusEnableTelnetAuth, snTacacsServerUsage=snTacacsServerUsage, snVLanByPortCfgVLanName=snVLanByPortCfgVLanName, snNTPServerIp=snNTPServerIp, snQos=snQos, snSwPortStatsInMcastFrames=snSwPortStatsInMcastFrames, snNetFlowCollectorTable=snNetFlowCollectorTable, snVLanByPortTable=snVLanByPortTable, snSwPortInfoChnMode=snSwPortInfoChnMode, snSwPortStatsMacStations=snSwPortStatsMacStations, snVLanByProtocolExcludeMask=snVLanByProtocolExcludeMask, snSwPortStatsOutMcastFrames=snSwPortStatsOutMcastFrames, snSwPortLockAddressCount=snSwPortLockAddressCount, snSwEnableBridgeTopoChangeTrap=snSwEnableBridgeTopoChangeTrap, snMacFilterDestMac=snMacFilterDestMac, snVLanByPortCfgBaseNumPorts=snVLanByPortCfgBaseNumPorts, snSwPortStatsTxColliFrames=snSwPortStatsTxColliFrames, snIfIndexLookupTable=snIfIndexLookupTable, snSwPortPresent=snSwPortPresent, snSwClearCounters=snSwClearCounters, DisplayString=DisplayString, snSwPortStatsFrameTooShorts=snSwPortStatsFrameTooShorts, snVLanByIpSubnetVLanName=snVLanByIpSubnetVLanName, snSwPortInfoPhysAddress=snSwPortInfoPhysAddress, snFdbInfo=snFdbInfo, snSwEnableBridgeNewRootTrap=snSwEnableBridgeNewRootTrap, snVLanByIpxNetRowStatus=snVLanByIpxNetRowStatus, snSwPortStpPortEnable=snSwPortStpPortEnable, snSwSummary=snSwSummary, snFdbEntry=snFdbEntry, snVLanByPortCfgRouterIntf=snVLanByPortCfgRouterIntf, snRadiusEnableMethod=snRadiusEnableMethod, snFdpCacheIsAggregateVlan=snFdpCacheIsAggregateVlan, snSwPortStatsInBcastFrames=snSwPortStatsInBcastFrames, snMacFilter=snMacFilter, snVLanByIpSubnetVLanId=snVLanByIpSubnetVLanId, snRadiusServerAcctPort=snRadiusServerAcctPort, snQosProfileIndex=snQosProfileIndex, snVLanByProtocolExcludePortList=snVLanByProtocolExcludePortList, snMacStationVLanId=snMacStationVLanId, snFdpCacheTable=snFdpCacheTable, snMacFilterSourceMask=snMacFilterSourceMask, snSwQosMechanism=snSwQosMechanism, snNetFlowAggregationRowStatus=snNetFlowAggregationRowStatus, snSwPortStatsMultiColliFrames=snSwPortStatsMultiColliFrames, snQosBindTable=snQosBindTable, snVLanByPortBaseType=snVLanByPortBaseType, snNTPSync=snNTPSync, snVLanByIpxNetStaticMask=snVLanByIpxNetStaticMask, snVLanByIpxNetEntry=snVLanByIpxNetEntry, snInterfaceId=snInterfaceId, snSwPortFastSpanUplinkEnable=snSwPortFastSpanUplinkEnable, snSwProtocolVLanMode=snSwProtocolVLanMode, snMacFilterPortAccessRowStatus=snMacFilterPortAccessRowStatus, snPortStpTable=snPortStpTable, snSwEosBufferSize=snSwEosBufferSize, snFdpCachedAddrIfIndex=snFdpCachedAddrIfIndex, snVLanByATCableVLanId=snVLanByATCableVLanId, snSwPortIfIndex=snSwPortIfIndex, snFdpMIBObjects=snFdpMIBObjects, snMacFilterPortAccessTable=snMacFilterPortAccessTable, snVLanByPortVLanName=snVLanByPortVLanName, snVLanByIpxNetTable=snVLanByIpxNetTable, snSwViolatorMacAddress=snSwViolatorMacAddress, snSwPortRouteOnly=snSwPortRouteOnly, snRadiusTimeOut=snRadiusTimeOut, snVLanByPortCfgStpMaxAge=snVLanByPortCfgStpMaxAge, snRadiusKey=snRadiusKey, snVLanGroupVlanCurEntry=snVLanGroupVlanCurEntry, snNetFlowAggregationTable=snNetFlowAggregationTable, snSwPortStatsOutBitsPerSec=snSwPortStatsOutBitsPerSec, snVLanByIpSubnetExcludeMask=snVLanByIpSubnetExcludeMask, snVLanByIpxNetDynamicMask=snVLanByIpxNetDynamicMask, snTrunkIndex=snTrunkIndex, snTacacsRetransmit=snTacacsRetransmit, snFdpCache=snFdpCache)
