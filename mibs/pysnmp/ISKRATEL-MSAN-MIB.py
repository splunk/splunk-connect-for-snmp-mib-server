#
# PySNMP MIB module ISKRATEL-MSAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISKRATEL-MSAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddressIPv6, InetAddress, InetAddressType, InetAddressIPv4 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6", "InetAddress", "InetAddressType", "InetAddressIPv4")
dot1qVlanIndex, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ObjectIdentity, Bits, Bits, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, IpAddress, Integer32, Counter32, enterprises, ModuleIdentity, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "Bits", "Bits", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "IpAddress", "Integer32", "Counter32", "enterprises", "ModuleIdentity", "Unsigned32", "TimeTicks")
MacAddress, RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
vdslLineConfProfileName, = mibBuilder.importSymbols("VDSL-LINE-MIB", "vdslLineConfProfileName")
xdsl2LineConfTemplateEntry, xdsl2LineAlarmConfTemplateEntry = mibBuilder.importSymbols("VDSL2-LINE-MIB", "xdsl2LineConfTemplateEntry", "xdsl2LineAlarmConfTemplateEntry")
msan = ModuleIdentity((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5))
if mibBuilder.loadTexts: msan.setLastUpdated('201006221233Z')
if mibBuilder.loadTexts: msan.setOrganization('Iskratel')
class VlanList(TextualConvention, OctetString):
    status = 'current'

class Xdsl2PsdMaskDs(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 96)

class Xdsl2PsdMaskUs(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 48)

class PortMask(TextualConvention, OctetString):
    status = 'current'

class PercentByFives(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), ValueRangeConstraint(35, 35), ValueRangeConstraint(40, 40), ValueRangeConstraint(45, 45), ValueRangeConstraint(50, 50), ValueRangeConstraint(55, 55), ValueRangeConstraint(60, 60), ValueRangeConstraint(65, 65), ValueRangeConstraint(70, 70), ValueRangeConstraint(75, 75), ValueRangeConstraint(80, 80), ValueRangeConstraint(85, 85), ValueRangeConstraint(90, 90), ValueRangeConstraint(95, 95), ValueRangeConstraint(100, 100), )
iskratel = MibIdentifier((1, 3, 6, 1, 4, 1, 1332))
si2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1))
msanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1))
msanShelfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 1))
msanShelfId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShelfId.setStatus('current')
msanShelfType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShelfType.setStatus('current')
msanShelfSize = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShelfSize.setStatus('current')
msanBoardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2))
msanBoardTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: msanBoardTable.setStatus('deprecated')
msanBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanBoardNr"))
if mibBuilder.loadTexts: msanBoardEntry.setStatus('deprecated')
msanBoardNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: msanBoardNr.setStatus('deprecated')
msanBoardParentNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardParentNr.setStatus('deprecated')
msanBoardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardPosition.setStatus('deprecated')
msanBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardType.setStatus('deprecated')
msanBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardId.setStatus('deprecated')
msanBoardSerialNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardSerialNr.setStatus('deprecated')
msanBoardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardDescription.setStatus('deprecated')
msanSwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3))
msanSwSteerVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwSteerVersion.setStatus('current')
msanSwBuildDirectory = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBuildDirectory.setStatus('current')
msanSwBuildTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBuildTime.setStatus('current')
msanSwBranch = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBranch.setStatus('current')
msanSwBuildReference = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBuildReference.setStatus('current')
msanSwILVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwILVersion.setStatus('current')
msanSwIpmiVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwIpmiVersion.setStatus('current')
msanSwBspVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBspVersion.setStatus('current')
msanSwCPLDVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwCPLDVersion.setStatus('current')
msanReservePackage = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanReservePackage.setStatus('current')
msanSwComponentTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 11), )
if mibBuilder.loadTexts: msanSwComponentTable.setStatus('current')
msanSwComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 11, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSwComponentId"))
if mibBuilder.loadTexts: msanSwComponentEntry.setStatus('current')
msanSwComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: msanSwComponentId.setStatus('current')
msanSwComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwComponentName.setStatus('current')
msanSwComponentSteerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwComponentSteerVersion.setStatus('current')
msanOtherInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 4))
msanSnmpSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSnmpSetErrorReason.setStatus('current')
msanAdditionalConf = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3))
msanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1))
msanDateTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDateTime.setStatus('current')
msanShelfIdConf = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShelfIdConf.setStatus('current')
msanConfData = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saved", 1), ("notSaved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanConfData.setStatus('current')
msanSwUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwUpgrade.setStatus('deprecated')
msanCliScriptCreate = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCliScriptCreate.setStatus('current')
msanCliScriptTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6), )
if mibBuilder.loadTexts: msanCliScriptTable.setStatus('current')
msanCliScriptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanCliScriptName"))
if mibBuilder.loadTexts: msanCliScriptEntry.setStatus('current')
msanCliScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanCliScriptName.setStatus('current')
msanCliScriptApply = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCliScriptApply.setStatus('current')
msanCliScriptApplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInitiated", 1), ("inProcess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCliScriptApplyStatus.setStatus('current')
msanCliScriptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanCliScriptRowStatus.setStatus('current')
msanCliPrompt = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCliPrompt.setStatus('current')
msanChassisId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanChassisId.setStatus('current')
msanSwBootPackageTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 9), )
if mibBuilder.loadTexts: msanSwBootPackageTable.setStatus('current')
msanSwBootPackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 9, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSwBootPackageName"))
if mibBuilder.loadTexts: msanSwBootPackageEntry.setStatus('current')
msanSwBootPackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBootPackageName.setStatus('current')
msanSwBootPackageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("currentActive", 1), ("nextActive", 2), ("backup", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwBootPackageStatus.setStatus('current')
msanSystemSwUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10))
msanSystemSwUpgradeStart = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeStart.setStatus('current')
msanSystemSwUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("successful", 2), ("failed", 3), ("notInitiated", 4))).clone('notInitiated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSystemSwUpgradeStatus.setStatus('current')
msanSystemSwUpgradeServerIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 3), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeServerIpAddressType.setStatus('current')
msanSystemSwUpgradeServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeServerIpAddress.setStatus('current')
msanSystemSwUpgradeServerDnsName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 5), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeServerDnsName.setStatus('current')
msanSystemSwUpgradeProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2), ("sftp", 3))).clone('tftp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeProtocol.setStatus('current')
msanSystemSwUpgradeProtocolPortId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeProtocolPortId.setStatus('current')
msanSystemSwUpgradeUserName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 8), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeUserName.setStatus('current')
msanSystemSwUpgradeUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 9), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeUserPassword.setStatus('current')
msanSystemSwUpgradePath = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 10), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradePath.setStatus('current')
msanSystemSwUpgradePackageName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 11), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradePackageName.setStatus('current')
msanSystemLogsUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11))
msanSystemLogsUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadStart.setStatus('current')
msanSystemLogsUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("successful", 2), ("failed", 3), ("notInitiated", 4))).clone('notInitiated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSystemLogsUploadStatus.setStatus('current')
msanSystemLogsUploadServerIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 3), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadServerIpAddressType.setStatus('current')
msanSystemLogsUploadServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadServerIpAddress.setStatus('current')
msanSystemLogsUploadServerDnsName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 5), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadServerDnsName.setStatus('current')
msanSystemLogsUploadProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2), ("sftp", 3))).clone('tftp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadProtocol.setStatus('current')
msanSystemLogsUploadProtocolPortId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadProtocolPortId.setStatus('current')
msanSystemLogsUploadUserName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 8), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadUserName.setStatus('current')
msanSystemLogsUploadUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 9), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadUserPassword.setStatus('current')
msanSystemLogsUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 10), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadPath.setStatus('current')
msanSystemLogsUploadFileName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 11), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadFileName.setStatus('current')
msanProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3))
msanVDSLProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 1), )
if mibBuilder.loadTexts: msanVDSLProfileTable.setStatus('current')
msanVDSLProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 1, 1), ).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"))
if mibBuilder.loadTexts: msanVDSLProfileEntry.setStatus('current')
msanVDSLProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("default", 2), ("local", 3), ("global", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVDSLProfileType.setStatus('current')
msanVDSL2LineProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vdsl2profile8c", 1), ("vdsl2profile8d", 2), ("vdsl2profile12a", 3), ("vdsl2profile12b", 4), ("vdsl2profile17a", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVDSL2LineProfile.setStatus('current')
msanServiceProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2))
msanServiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1), )
if mibBuilder.loadTexts: msanServiceProfileTable.setStatus('current')
msanServiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanServiceProfileName"))
if mibBuilder.loadTexts: msanServiceProfileEntry.setStatus('current')
msanServiceProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: msanServiceProfileName.setStatus('current')
msanServiceProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileProtection.setStatus('current')
msanServiceProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanServiceProfileStatus.setStatus('current')
msanServiceProfileServiceFlowProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileServiceFlowProfileName.setStatus('current')
msanServiceProfileMulticastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileMulticastProfileName.setStatus('current')
msanServiceProfileVlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileVlanProfileName.setStatus('current')
msanServiceProfileL2cpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileL2cpProfileName.setStatus('current')
msanServiceProfileSecurityProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileSecurityProfileName.setStatus('current')
msanServiceProfileAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileAtmVpi.setStatus('current')
msanServiceProfileAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(32, 255), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileAtmVci.setStatus('current')
msanServiceProfileDhcpRa = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("allowClients", 1), ("allowServers", 2), ("allowAll", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRa.setStatus('current')
msanServiceProfileDhcpRaTrustClients = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notTrust", 0), ("trust", 1))).clone('notTrust')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRaTrustClients.setStatus('current')
msanServiceProfileDhcpRaOpt82UnicastExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notUsed", 0), ("used", 1))).clone('notUsed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRaOpt82UnicastExtension.setStatus('current')
msanServiceProfileDhcpRaOpt82Insert = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notInsert", 0), ("insert", 1))).clone('notInsert')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRaOpt82Insert.setStatus('current')
msanServiceProfileDhcpRaRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRaRemoteId.setStatus('current')
msanServiceProfileDhcpRaRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRaRateLimit.setStatus('current')
msanServiceProfilePppoeIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfilePppoeIA.setStatus('current')
msanServiceProfilePppoeIARateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfilePppoeIARateLimit.setStatus('current')
msanServiceProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDescription.setStatus('current')
msanServiceProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanServiceProfileRowStatus.setStatus('current')
msanServicePortProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 2), )
if mibBuilder.loadTexts: msanServicePortProfileTable.setStatus('current')
msanServicePortProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanServiceProfileName"))
if mibBuilder.loadTexts: msanServicePortProfileEntry.setStatus('current')
msanServicePortProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanServicePortProfileRowStatus.setStatus('current')
msanServiceFlowProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3))
msanServiceFlowProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1), )
if mibBuilder.loadTexts: msanServiceFlowProfileTable.setStatus('current')
msanServiceFlowProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanServiceFlowProfileName"))
if mibBuilder.loadTexts: msanServiceFlowProfileEntry.setStatus('current')
msanServiceFlowProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanServiceFlowProfileName.setStatus('current')
msanServiceFlowProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileProtection.setStatus('current')
msanServiceFlowProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanServiceFlowProfileStatus.setStatus('current')
msanServiceFlowProfileMatchUsAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsAny.setStatus('current')
msanServiceFlowProfileMatchUsMacDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 5), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacDestAddr.setStatus('current')
msanServiceFlowProfileMatchUsMacDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 6), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacDestMask.setStatus('current')
msanServiceFlowProfileMatchUsMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 7), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacSrcAddr.setStatus('current')
msanServiceFlowProfileMatchUsMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 8), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacSrcMask.setStatus('current')
msanServiceFlowProfileMatchUsCPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 9), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsCPcp.setStatus('current')
msanServiceFlowProfileMatchUsSPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 10), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsSPcp.setStatus('current')
msanServiceFlowProfileMatchUsVlanProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsVlanProfile.setStatus('current')
msanServiceFlowProfileMatchUsCVlanIdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsCVlanIdRange.setStatus('current')
msanServiceFlowProfileMatchUsSVlanIdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsSVlanIdRange.setStatus('current')
msanServiceFlowProfileMatchUsEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsEthertype.setStatus('current')
msanServiceFlowProfileMatchUsIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpProtocol.setStatus('current')
msanServiceFlowProfileMatchUsIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 16), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpSrcAddr.setStatus('current')
msanServiceFlowProfileMatchUsIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 17), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpSrcMask.setStatus('current')
msanServiceFlowProfileMatchUsIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 18), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDestAddr.setStatus('current')
msanServiceFlowProfileMatchUsIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 19), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDestMask.setStatus('current')
msanServiceFlowProfileMatchUsIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDscp.setStatus('current')
msanServiceFlowProfileMatchUsIpCsc = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpCsc.setStatus('current')
msanServiceFlowProfileMatchUsIpDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notDefined", -1), ("noDrop", 0), ("lowDrop", 1), ("mediumDrop", 2), ("highDrop", 3))).clone('notDefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDropPrecedence.setStatus('current')
msanServiceFlowProfileMatchUsTcpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsTcpSrcPort.setStatus('current')
msanServiceFlowProfileMatchUsTcpDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsTcpDestPort.setStatus('current')
msanServiceFlowProfileMatchUsUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsUdpSrcPort.setStatus('current')
msanServiceFlowProfileMatchUsUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsUdpDstPort.setStatus('current')
msanServiceFlowProfileMatchDsAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsAny.setStatus('current')
msanServiceFlowProfileMatchDsMacDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 28), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacDestAddr.setStatus('current')
msanServiceFlowProfileMatchDsMacDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 29), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacDestMask.setStatus('current')
msanServiceFlowProfileMatchDsMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 30), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacSrcAddr.setStatus('current')
msanServiceFlowProfileMatchDsMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 31), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacSrcMask.setStatus('current')
msanServiceFlowProfileMatchDsCPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 32), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsCPcp.setStatus('current')
msanServiceFlowProfileMatchDsSPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 33), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsSPcp.setStatus('current')
msanServiceFlowProfileMatchDsVlanProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsVlanProfile.setStatus('current')
msanServiceFlowProfileMatchDsCVlanIdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsCVlanIdRange.setStatus('current')
msanServiceFlowProfileMatchDsSVlanIdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsSVlanIdRange.setStatus('current')
msanServiceFlowProfileMatchDsEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsEthertype.setStatus('current')
msanServiceFlowProfileMatchDsIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpProtocol.setStatus('current')
msanServiceFlowProfileMatchDsIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 39), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpSrcAddr.setStatus('current')
msanServiceFlowProfileMatchDsIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 40), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpSrcMask.setStatus('current')
msanServiceFlowProfileMatchDsIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 41), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDestAddr.setStatus('current')
msanServiceFlowProfileMatchDsIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 42), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDestMask.setStatus('current')
msanServiceFlowProfileMatchDsIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDscp.setStatus('current')
msanServiceFlowProfileMatchDsIpCsc = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpCsc.setStatus('current')
msanServiceFlowProfileMatchDsIpDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notDefined", -1), ("noDrop", 0), ("lowDrop", 1), ("mediumDrop", 2), ("highDrop", 3))).clone('notDefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDropPrecedence.setStatus('current')
msanServiceFlowProfileMatchDsTcpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsTcpSrcPort.setStatus('current')
msanServiceFlowProfileMatchDsTcpDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsTcpDestPort.setStatus('current')
msanServiceFlowProfileMatchDsUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsUdpSrcPort.setStatus('current')
msanServiceFlowProfileMatchDsUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsUdpDstPort.setStatus('current')
msanServiceFlowProfileUsCdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsCdr.setStatus('current')
msanServiceFlowProfileUsCdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsCdrBurstSize.setStatus('current')
msanServiceFlowProfileUsPdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsPdr.setStatus('current')
msanServiceFlowProfileUsPdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsPdrBurstSize.setStatus('current')
msanServiceFlowProfileUsMarkPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copyFromCsc", 2), ("userValue", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkPcp.setStatus('current')
msanServiceFlowProfileUsMarkPcpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkPcpValue.setStatus('current')
msanServiceFlowProfileUsMarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copyFromPcp", 2), ("userValue", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkDscp.setStatus('current')
msanServiceFlowProfileUsMarkDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkDscpValue.setStatus('current')
msanServiceFlowProfileDsCdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsCdr.setStatus('current')
msanServiceFlowProfileDsCdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsCdrBurstSize.setStatus('current')
msanServiceFlowProfileDsPdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsPdr.setStatus('current')
msanServiceFlowProfileDsPdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsPdrBurstSize.setStatus('current')
msanServiceFlowProfileDsMarkPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copyFromCsc", 2), ("userValue", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkPcp.setStatus('current')
msanServiceFlowProfileDsMarkPcpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkPcpValue.setStatus('current')
msanServiceFlowProfileDsMarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copyFromPcp", 2), ("userValue", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkDscp.setStatus('current')
msanServiceFlowProfileDsMarkDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkDscpValue.setStatus('current')
msanServiceFlowProfileDsQueuingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsQueuingPriority.setStatus('current')
msanServiceFlowProfileDsSchedulingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("weighted", 1), ("strict", 2))).clone('weighted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsSchedulingMode.setStatus('current')
msanServiceFlowProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDescription.setStatus('current')
msanServiceFlowProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 69), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanServiceFlowProfileRowStatus.setStatus('current')
msanVlanProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4))
msanVlanProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1), )
if mibBuilder.loadTexts: msanVlanProfileTable.setStatus('current')
msanVlanProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanVlanProfileName"))
if mibBuilder.loadTexts: msanVlanProfileEntry.setStatus('current')
msanVlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanVlanProfileName.setStatus('current')
msanVlanProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileProtection.setStatus('current')
msanVlanProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanVlanProfileStatus.setStatus('current')
msanVlanProfileCVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileCVid.setStatus('current')
msanVlanProfileCVidNative = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileCVidNative.setStatus('current')
msanVlanProfileCVidRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileCVidRemark.setStatus('current')
msanVlanProfileSVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileSVid.setStatus('current')
msanVlanProfileSEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 8), Integer32().clone(34984)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileSEtherType.setStatus('current')
msanVlanProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileDescription.setStatus('current')
msanVlanProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanVlanProfileRowStatus.setStatus('current')
msanVlanProfileNetworkPortCTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use", 1), ("notUse", 2))).clone('use')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileNetworkPortCTag.setStatus('current')
msanVlanPortProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 2), )
if mibBuilder.loadTexts: msanVlanPortProfileTable.setStatus('current')
msanVlanPortProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanVlanProfileName"))
if mibBuilder.loadTexts: msanVlanPortProfileEntry.setStatus('current')
msanVlanPortProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanVlanPortProfileRowStatus.setStatus('current')
msanMulticastProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5))
msanMulticastProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1), )
if mibBuilder.loadTexts: msanMulticastProfileTable.setStatus('current')
msanMulticastProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastProfileName"))
if mibBuilder.loadTexts: msanMulticastProfileEntry.setStatus('current')
msanMulticastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanMulticastProfileName.setStatus('current')
msanMulticastProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileProtection.setStatus('current')
msanMulticastProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMulticastProfileStatus.setStatus('current')
msanMulticastProfileIgmpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpSnooping.setStatus('current')
msanMulticastProfileIgmpSnoopingFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpSnoopingFastLeave.setStatus('current')
msanMulticastProfileIgmpSnoopingSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpSnoopingSuppression.setStatus('current')
msanMulticastProfileIgmpProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpProxy.setStatus('current')
msanMulticastProfileIgmpProxyIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpProxyIpAddress.setStatus('current')
msanMulticastProfileIgmpFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("allowAll", 0), ("allowReports", 1), ("allowQueries", 2), ("dropAll", 3))).clone('allowReports')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpFiltering.setStatus('current')
msanMulticastProfileMulticastGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileMulticastGroupLimit.setStatus('current')
msanMulticastProfileMvr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileMvr.setStatus('current')
msanMulticastProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileDescription.setStatus('current')
msanMulticastProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastProfileRowStatus.setStatus('current')
msanMulticastProfileStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 2), )
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupTable.setStatus('current')
msanMulticastProfileStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastProfileName"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastProfileStaticGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupEntry.setStatus('current')
msanMulticastProfileStaticGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupIpAddr.setStatus('current')
msanMulticastProfileStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupRowStatus.setStatus('current')
msanSecurityProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6))
msanSecurityProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1), )
if mibBuilder.loadTexts: msanSecurityProfileTable.setStatus('current')
msanSecurityProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSecurityProfileName"))
if mibBuilder.loadTexts: msanSecurityProfileEntry.setStatus('current')
msanSecurityProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanSecurityProfileName.setStatus('current')
msanSecurityProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileProtection.setStatus('current')
msanSecurityProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSecurityProfileStatus.setStatus('current')
msanSecurityProfileProtectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileProtectedPort.setStatus('current')
msanSecurityProfileMacSg = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileMacSg.setStatus('current')
msanSecurityProfileMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileMacLimit.setStatus('current')
msanSecurityProfilePortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfilePortSecurity.setStatus('current')
msanSecurityProfileIpSg = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileIpSg.setStatus('current')
msanSecurityProfileIpSgBindingLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileIpSgBindingLimit.setStatus('current')
msanSecurityProfileIpSgFilteringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipSourceAddress", 1), ("ipAndMacSourceAddress", 2))).clone('ipAndMacSourceAddress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileIpSgFilteringMode.setStatus('current')
msanSecurityProfileArpInspec = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileArpInspec.setStatus('current')
msanSecurityProfileMacForward = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileMacForward.setStatus('current')
msanSecurityProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileDescription.setStatus('current')
msanSecurityProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanSecurityProfileRowStatus.setStatus('current')
msanSecurityAclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3), )
if mibBuilder.loadTexts: msanSecurityAclProfileTable.setStatus('current')
msanSecurityAclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSecurityProfileName"), (0, "ISKRATEL-MSAN-MIB", "msanSecurityAclProfileAclDirection"), (0, "ISKRATEL-MSAN-MIB", "msanSecurityAclProfileSequence"), (0, "ISKRATEL-MSAN-MIB", "msanSecurityAclProfileAclType"), (0, "ISKRATEL-MSAN-MIB", "msanSecurityAclProfileAclId"))
if mibBuilder.loadTexts: msanSecurityAclProfileEntry.setStatus('current')
msanSecurityAclProfileAclDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: msanSecurityAclProfileAclDirection.setStatus('current')
msanSecurityAclProfileSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: msanSecurityAclProfileSequence.setStatus('current')
msanSecurityAclProfileAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2))))
if mibBuilder.loadTexts: msanSecurityAclProfileAclType.setStatus('current')
msanSecurityAclProfileAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: msanSecurityAclProfileAclId.setStatus('current')
msanSecurityAclProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanSecurityAclProfileRowStatus.setStatus('current')
msanL2cpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7))
msanL2cpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1), )
if mibBuilder.loadTexts: msanL2cpProfileTable.setStatus('current')
msanL2cpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanL2cpProfileName"))
if mibBuilder.loadTexts: msanL2cpProfileEntry.setStatus('current')
msanL2cpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanL2cpProfileName.setStatus('current')
msanL2cpProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProfileProtection.setStatus('current')
msanL2cpProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanL2cpProfileStatus.setStatus('current')
msanL2cpProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProfileDescription.setStatus('current')
msanL2cpProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanL2cpProfileRowStatus.setStatus('current')
msanL2cpProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2), )
if mibBuilder.loadTexts: msanL2cpProtocolTable.setStatus('current')
msanL2cpProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanL2cpProtocolName"))
if mibBuilder.loadTexts: msanL2cpProtocolEntry.setStatus('current')
msanL2cpProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanL2cpProtocolName.setStatus('current')
msanL2cpProtocolMacDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1, 2), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProtocolMacDestAddr.setStatus('current')
msanL2cpProtocolEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProtocolEthertype.setStatus('current')
msanL2cpProtocolSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1, 4), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProtocolSubtype.setStatus('current')
msanL2cpProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanL2cpProtocolRowStatus.setStatus('current')
msanL2cpProfileProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 3), )
if mibBuilder.loadTexts: msanL2cpProfileProtocolTable.setStatus('current')
msanL2cpProfileProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanL2cpProfileName"), (0, "ISKRATEL-MSAN-MIB", "msanL2cpProtocolName"))
if mibBuilder.loadTexts: msanL2cpProfileProtocolEntry.setStatus('current')
msanL2cpProfileProtocolRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discard", 1), ("peer", 2), ("tunnel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProfileProtocolRule.setStatus('current')
msanL2cpProfileProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanL2cpProfileProtocolRowStatus.setStatus('current')
msanL2cpProfileVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 4), )
if mibBuilder.loadTexts: msanL2cpProfileVlanTable.setStatus('current')
msanL2cpProfileVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanL2cpProfileName"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanL2cpProfileVlanEntry.setStatus('current')
msanL2cpProfileVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 4, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanL2cpProfileVlanRowStatus.setStatus('current')
msanXdslProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8))
msanXdsl2LineConfTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 1), )
if mibBuilder.loadTexts: msanXdsl2LineConfTemplateTable.setStatus('current')
msanXdsl2LineConfTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 1, 1), )
xdsl2LineConfTemplateEntry.registerAugmentions(("ISKRATEL-MSAN-MIB", "msanXdsl2LineConfTemplateEntry"))
msanXdsl2LineConfTemplateEntry.setIndexNames(*xdsl2LineConfTemplateEntry.getIndexNames())
if mibBuilder.loadTexts: msanXdsl2LineConfTemplateEntry.setStatus('current')
msanXdsl2LineConfTempProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanXdsl2LineConfTempProtection.setStatus('current')
msanXdsl2LineConfTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanXdsl2LineConfTempStatus.setStatus('current')
msanXdsl2LineAlarmConfTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 2), )
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTemplateTable.setStatus('current')
msanXdsl2LineAlarmConfTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 2, 1), )
xdsl2LineAlarmConfTemplateEntry.registerAugmentions(("ISKRATEL-MSAN-MIB", "msanXdsl2LineAlarmConfTemplateEntry"))
msanXdsl2LineAlarmConfTemplateEntry.setIndexNames(*xdsl2LineAlarmConfTemplateEntry.getIndexNames())
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTemplateEntry.setStatus('current')
msanXdsl2LineAlarmConfTempProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTempProtection.setStatus('current')
msanXdsl2LineAlarmConfTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTempStatus.setStatus('current')
msanProfileConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanProfileConfigStatus.setStatus('current')
msanDhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4))
msanDhcpRaGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1))
msanDhcpRaStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaStatus.setStatus('current')
msanDhcpRaMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("simplified", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaMode.setStatus('current')
msanDhcpRaCircuitType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaCircuitType.setStatus('current')
msanDhcpRaOpt82 = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaOpt82.setStatus('current')
msanDhcpRaOpt82ReplyMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keep", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaOpt82ReplyMode.setStatus('current')
msanDhcpRaOpt82CircuitIdStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaOpt82CircuitIdStatus.setStatus('current')
msanDhcpRaOpt82RemoteIdStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaOpt82RemoteIdStatus.setStatus('current')
msanDhcpRaOpt82UnicastExtStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaOpt82UnicastExtStatus.setStatus('current')
msanDhcpRaFullModeSrvIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaFullModeSrvIpAddr.setStatus('current')
msanDhcpRaPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2), )
if mibBuilder.loadTexts: msanDhcpRaPortConfigTable.setStatus('current')
msanDhcpRaPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDhcpRaPortConfigEntry.setStatus('current')
msanDhcpRaPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("enableCli", 2), ("enableSrv", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortState.setStatus('current')
msanDhcpRaPortCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaPortCircuitId.setStatus('current')
msanDhcpRaPortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortRemoteId.setStatus('current')
msanDhcpRaPortMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortMeter.setStatus('current')
msanDhcpRaPortMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 5), Integer32()).setUnits('kb/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortMaxDataRate.setStatus('current')
msanDhcpRaPortCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortCircuitType.setStatus('current')
msanDhcpRaPortOpt82 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortOpt82.setStatus('current')
msanDhcpRaPortOpt82ReplyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keep", 1), ("remove", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortOpt82ReplyMode.setStatus('current')
msanDhcpRaPortOpt82UnicastExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortOpt82UnicastExtStatus.setStatus('current')
msanDhcpRaPortCircuitIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iskratel", 1), ("standard", 2))).clone('iskratel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortCircuitIdType.setStatus('current')
msanDhcpRaFullModeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 3), )
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanTable.setStatus('current')
msanDhcpRaFullModeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDhcpRaFullModeVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanDhcpRaFullModeVlanSrvIpAddr"))
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanEntry.setStatus('current')
msanDhcpRaFullModeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanId.setStatus('current')
msanDhcpRaFullModeVlanSrvIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanSrvIpAddr.setStatus('current')
msanDhcpRaFullModeVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanRowStatus.setStatus('current')
msanDhcpRaStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5), )
if mibBuilder.loadTexts: msanDhcpRaStatTable.setStatus('current')
msanDhcpRaStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDhcpRaStatEntry.setStatus('current')
msanDhcpRaStatDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatDiscover.setStatus('current')
msanDhcpRaStatRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatRequest.setStatus('current')
msanDhcpRaStatOffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatOffer.setStatus('current')
msanDhcpRaStatACK = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatACK.setStatus('current')
msanDhcpRaStatNAK = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatNAK.setStatus('current')
msanDhcpRaStatDecline = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatDecline.setStatus('current')
msanDhcpRaStatMaxPacketSizeExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatMaxPacketSizeExceeded.setStatus('current')
msanDhcpRaStatFrameErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatFrameErr.setStatus('current')
msanDhcpRaStatOpt82Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatOpt82Present.setStatus('current')
msanDhcpRaStatFrameUnsync = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatFrameUnsync.setStatus('current')
msanDhcpRaStatRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatRelease.setStatus('current')
msanDhcpRaStatInform = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatInform.setStatus('current')
msanDhcpRaVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6), )
if mibBuilder.loadTexts: msanDhcpRaVlanConfigTable.setStatus('current')
msanDhcpRaVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanDhcpRaVlanConfigEntry.setStatus('current')
msanDhcpRaVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("notConfigured", 2))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanState.setStatus('current')
msanDhcpRaVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("simplified", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanMode.setStatus('current')
msanDhcpRaVlanOpt82 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanOpt82.setStatus('current')
msanDhcpRaVlanOpt82ReplyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keep", 1), ("remove", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanOpt82ReplyMode.setStatus('current')
msanDhcpRaVlanOpt82UnicastExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanOpt82UnicastExtStatus.setStatus('current')
msanDhcpRaVlanCircuitIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("iskratel", 1), ("standard", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanCircuitIdType.setStatus('current')
msanDhcpRaPortVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 7), )
if mibBuilder.loadTexts: msanDhcpRaPortVlanConfigTable.setStatus('current')
msanDhcpRaPortVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanDhcpRaPortVlanConfigEntry.setStatus('current')
msanDhcpRaPortVlanRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 7, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortVlanRemoteId.setStatus('current')
msanDhcpRaPortVlanConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDhcpRaPortVlanConfigRowStatus.setStatus('current')
msanDhcpv6RaGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 100))
msanDhcpv6RaState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 100, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaState.setStatus('current')
msanDhcpv6RaMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 100, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ldra", 1))).clone('ldra')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaMode.setStatus('current')
msanDhcpv6RaInterfaceIdStandard = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 100, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaInterfaceIdStandard.setStatus('current')
msanDhcpv6Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101))
msanDhcpv6RaPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1), )
if mibBuilder.loadTexts: msanDhcpv6RaPortStatTable.setStatus('current')
msanDhcpv6RaPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDhcpv6RaPortStatEntry.setStatus('current')
msanDhcpv6PortRaStatSolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatSolicit.setStatus('current')
msanDhcpv6PortRaStatAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatAdvertise.setStatus('current')
msanDhcpv6PortRaStatRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRequest.setStatus('current')
msanDhcpv6PortRaStatReply = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatReply.setStatus('current')
msanDhcpv6PortRaStatRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRenew.setStatus('current')
msanDhcpv6PortRaStatRebind = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRebind.setStatus('current')
msanDhcpv6PortRaStatDecline = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatDecline.setStatus('current')
msanDhcpv6PortRaStatReconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatReconfigure.setStatus('current')
msanDhcpv6PortRaStatRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRelease.setStatus('current')
msanDhcpv6PortRaStatInformRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatInformRequest.setStatus('current')
msanDhcpv6PortRaStatRelayForward = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRelayForward.setStatus('current')
msanDhcpv6PortRaStatRelayReply = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRelayReply.setStatus('current')
msanDhcpv6PortRaStatOversizeError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatOversizeError.setStatus('current')
msanDhcpv6PortRaStatFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatFrameError.setStatus('current')
msanDhcpv6PortRaStatFrameUnsyncError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatFrameUnsyncError.setStatus('current')
msanDhcpv6PortRaStatSysError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatSysError.setStatus('current')
msanDhcpv6RaStatSolicit = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatSolicit.setStatus('current')
msanDhcpv6RaStatAdvertise = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatAdvertise.setStatus('current')
msanDhcpv6RaStatRequest = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRequest.setStatus('current')
msanDhcpv6RaStatReply = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatReply.setStatus('current')
msanDhcpv6RaStatRenew = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRenew.setStatus('current')
msanDhcpv6RaStatRebind = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRebind.setStatus('current')
msanDhcpv6RaStatDecline = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatDecline.setStatus('current')
msanDhcpv6RaStatReconfigure = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatReconfigure.setStatus('current')
msanDhcpv6RaStatRelease = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRelease.setStatus('current')
msanDhcpv6RaStatInformRequest = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatInformRequest.setStatus('current')
msanDhcpv6RaStatRelayForward = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRelayForward.setStatus('current')
msanDhcpv6RaStatRelayReply = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRelayReply.setStatus('current')
msanDhcpv6RaStatOversizeError = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatOversizeError.setStatus('current')
msanDhcpv6RaStatFrameError = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 201), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatFrameError.setStatus('current')
msanDhcpv6RaStatFrameUnsyncError = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 202), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatFrameUnsyncError.setStatus('current')
msanDhcpv6RaStatSysError = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 203), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatSysError.setStatus('current')
msanDhcpv6RaPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102), )
if mibBuilder.loadTexts: msanDhcpv6RaPortConfigTable.setStatus('current')
msanDhcpv6RaPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDhcpv6RaPortConfigEntry.setStatus('current')
msanDhcpv6RaPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("enableCli", 2), ("enableSrv", 3), ("disable", 4))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortState.setStatus('current')
msanDhcpv6RaPortTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortTrusted.setStatus('current')
msanDhcpv6RaPortInterfaceIdStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortInterfaceIdStandard.setStatus('current')
msanDhcpv6RaPortInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaPortInterfaceId.setStatus('current')
msanDhcpv6RaPortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortRemoteId.setStatus('current')
msanDhcpv6RaPortRemoteIdEnterpriseNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999)).clone(1332)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortRemoteIdEnterpriseNum.setStatus('current')
msanDhcpv6RaVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 103), )
if mibBuilder.loadTexts: msanDhcpv6RaVlanConfigTable.setStatus('current')
msanDhcpv6RaVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 103, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanDhcpv6RaVlanConfigEntry.setStatus('current')
msanDhcpv6RaVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaVlanState.setStatus('current')
msanDhcpv6RaVlanInterfaceIdStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaVlanInterfaceIdStandard.setStatus('current')
msanDhcpv6RaPortVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 104), )
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanConfigTable.setStatus('current')
msanDhcpv6RaPortVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 104, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanConfigEntry.setStatus('current')
msanDhcpv6RaPortVlanRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 104, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanRemoteId.setStatus('current')
msanDhcpv6RaPortVlanRemoteIdEnterpriseNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 104, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999)).clone(1332)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanRemoteIdEnterpriseNum.setStatus('current')
msanDhcpv6RaPortVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 104, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanRowStatus.setStatus('current')
msanSntp = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5))
msanSntpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1))
msanSntpTzOffset = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzOffset.setStatus('current')
msanSntpTzName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzName.setStatus('current')
msanSntpTzDstOffset = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstOffset.setStatus('current')
msanSntpTzDstStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstStartMonth.setStatus('current')
msanSntpTzDstStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstStartWeek.setStatus('current')
msanSntpTzDstStartDayInWeek = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstStartDayInWeek.setStatus('current')
msanSntpTzDstStartTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstStartTime.setStatus('current')
msanSntpTzDstEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstEndMonth.setStatus('current')
msanSntpTzDstEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstEndWeek.setStatus('current')
msanSntpTzDstEndDayInWeek = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstEndDayInWeek.setStatus('current')
msanSntpTzDstEndTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstEndTime.setStatus('current')
msanSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 7))
msanSnmpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 7, 1))
msanSnmpTrapRecvUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSnmpTrapRecvUdpPort.setStatus('current')
msanIgmpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8))
msanIgmpSnoopingGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1))
msanIgmpSnoopingReportSuppression = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingReportSuppression.setStatus('current')
msanIgmpSnoopingAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disableAndDiscard", 0), ("disableAndBroadcast", 1), ("enable", 2), ("enableAndUnknownGroupFlood", 3), ("enableAndMrouterFlood", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingAdminState.setStatus('current')
msanIgmpSnoopingLoggingVlanId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingLoggingVlanId.setStatus('current')
msanIgmpSnoopingViolationAction = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remove", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingViolationAction.setStatus('current')
msanIgmpSnoopingFastLeaveAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingFastLeaveAdminMode.setStatus('current')
msanIgmpSnoopingGroupMembershipInterval = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingGroupMembershipInterval.setStatus('current')
msanIgmpSnoopingMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3599)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingMaxResponseTime.setStatus('current')
msanIgmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpAll", 1), ("igmpVersion2", 2), ("igmpVersion3", 3))).clone('igmpAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpVersion.setStatus('current')
msanIgmpClear = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpClear.setStatus('current')
msanIgmpSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 2), )
if mibBuilder.loadTexts: msanIgmpSnoopingTable.setStatus('current')
msanIgmpSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIgmpSnoopingEntry.setStatus('current')
msanIgmpSnoopingIntfStandaloneQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 2, 1, 1), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingIntfStandaloneQuerier.setStatus('current')
msanIgmpSnoopingIntfFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("allowAll", 0), ("allowReports", 1), ("allowQueries", 2), ("dropAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingIntfFilter.setStatus('current')
msanIgmpSnoopingGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingGroupLimit.setStatus('current')
msanSwitchIGMPVlanCurrentMrouterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 3), )
if mibBuilder.loadTexts: msanSwitchIGMPVlanCurrentMrouterTable.setStatus('current')
msanSwitchIGMPVlanCurrentMrouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanSwitchIGMPVlanCurrentMrouterEntry.setStatus('current')
msanSwitchIGMPVlanCurrentMrouterEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchIGMPVlanCurrentMrouterEnableState.setStatus('current')
msanSwitchIGMPSnoopingStaticIntfMulticastRouterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4), )
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingStaticIntfMulticastRouterTable.setStatus('current')
msanSwitchIGMPSnoopingStaticIntfMulticastRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingStaticIntfMulticastRouterEntry.setStatus('current')
msanSwitchIGMPSnoopingIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfIndex.setStatus('current')
msanSwitchIGMPSnoopingIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfAdminMode.setStatus('deprecated')
msanSwitchIGMPSnoopingIntfGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfGroupMembershipInterval.setStatus('deprecated')
msanSwitchIGMPSnoopingIntfMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3599)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfMaxResponseTime.setStatus('deprecated')
msanSwitchIGMPSnoopingIntfMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfMRPExpirationTime.setStatus('deprecated')
msanSwitchIGMPSnoopingIntfFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfFastLeaveAdminMode.setStatus('deprecated')
msanSwitchIGMPSnoopingStaticIntfMulticastRouterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingStaticIntfMulticastRouterMode.setStatus('current')
msanSwitchIGMPSnoopingIntfVlanIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 8), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfVlanIDs.setStatus('deprecated')
msanSwitchIGMPVlanStaticMrouterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 5), )
if mibBuilder.loadTexts: msanSwitchIGMPVlanStaticMrouterTable.setStatus('deprecated')
msanSwitchIGMPVlanStaticMrouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanSwitchIGMPVlanStaticMrouterEntry.setStatus('deprecated')
msanSwitchIGMPVlanStaticMrouterEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanSwitchIGMPVlanStaticMrouterEnableState.setStatus('deprecated')
msanSwitchIGMPSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6), )
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanTable.setStatus('current')
msanSwitchIGMPSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanEntry.setStatus('current')
msanSwitchIGMPSnoopingVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanAdminMode.setStatus('deprecated')
msanSwitchIGMPSnoopingVlanGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanGroupMembershipInterval.setStatus('deprecated')
msanSwitchIGMPSnoopingVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3599)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanMaxResponseTime.setStatus('deprecated')
msanSwitchIGMPSnoopingVlanFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanFastLeaveAdminMode.setStatus('deprecated')
msanSwitchIGMPSnoopingVlanMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanMRPExpirationTime.setStatus('deprecated')
msanSwitchIGMPSnoopingVlanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disableAndDiscard", 0), ("disableAndBroadcast", 1), ("enable", 2), ("enableAndUnknownGroupFlood", 3))).clone('disableAndDiscard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanAdminState.setStatus('current')
msanSwitchIGMPProxyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 7), )
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanTable.setStatus('current')
msanSwitchIGMPProxyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 7, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanSwitchIGMPProxyVlanIpAddr"))
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanEntry.setStatus('current')
msanSwitchIGMPProxyVlanIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanIpAddr.setStatus('current')
msanSwitchIGMPProxyVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanRowStatus.setStatus('current')
msanIgmpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8))
msanIgmpStatGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1))
msanIgmpStatRxV1 = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxV1.setStatus('current')
msanIgmpStatRxV2Join = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxV2Join.setStatus('current')
msanIgmpStatRxV2Leave = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxV2Leave.setStatus('current')
msanIgmpStatRxV3Report = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxV3Report.setStatus('current')
msanIgmpStatRxQuery = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxQuery.setStatus('current')
msanIgmpStatRxError = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxError.setStatus('current')
msanIgmpStatRxBlockByIgmpFilter = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxBlockByIgmpFilter.setStatus('current')
msanIgmpStatRxBlockByMcastAcl = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxBlockByMcastAcl.setStatus('current')
msanIgmpStatRxBlockByMcastCac = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxBlockByMcastCac.setStatus('current')
msanIgmpStatRxBlockByIgmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxBlockByIgmpVersion.setStatus('current')
msanIgmpPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2), )
if mibBuilder.loadTexts: msanIgmpPortStatTable.setStatus('current')
msanIgmpPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIgmpPortStatEntry.setStatus('current')
msanIgmpPortStatRxV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxV1.setStatus('current')
msanIgmpPortStatTxV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatTxV1.setStatus('current')
msanIgmpPortStatRxV2Join = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxV2Join.setStatus('current')
msanIgmpPortStatTxV2Join = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatTxV2Join.setStatus('current')
msanIgmpPortStatRxV2Leave = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxV2Leave.setStatus('current')
msanIgmpPortStatTxV2Leave = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatTxV2Leave.setStatus('current')
msanIgmpPortStatRxV3Report = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxV3Report.setStatus('current')
msanIgmpPortStatTxV3Report = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatTxV3Report.setStatus('current')
msanIgmpPortStatRxQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxQuery.setStatus('current')
msanIgmpPortStatRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxError.setStatus('current')
msanIgmpPortStatRxBlockByIgmpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByIgmpFilter.setStatus('current')
msanIgmpPortStatRxBlockByMcastAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByMcastAcl.setStatus('current')
msanIgmpPortStatRxBlockByMcastCac = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByMcastCac.setStatus('current')
msanIgmpPortStatTxQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatTxQuery.setStatus('current')
msanIgmpPortStatRxBlockByIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByIgmpVersion.setStatus('current')
msanPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10))
msanPortGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 1))
msanPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2), )
if mibBuilder.loadTexts: msanPortTable.setStatus('current')
msanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPortEntry.setStatus('current')
msanPortMNFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMNFlag.setStatus('current')
msanPortMasterSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("master", 2), ("slave", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMasterSlave.setStatus('current')
msanPortNegCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 7), Bits().clone(namedValues=NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortNegCapAdvertisedBits.setStatus('current')
msanPortSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 15, 16, 18, 26, 30, 31))).clone(namedValues=NamedValues(("speed10MbpsHD", 10), ("speed10MbpsFD", 11), ("speed100MbpsHD", 15), ("speed100MbpsFD", 16), ("speed100MbpsFDFiber", 18), ("speed1000MbpsFDFiber", 26), ("speed1000MbpsFD", 30), ("speed10GbpsFDFiber", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortSpeedDuplex.setStatus('current')
msanPortStpP2PAutoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortStpP2PAutoState.setStatus('current')
msanPortUsageType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uplink", 1), ("downlink", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortUsageType.setStatus('current')
msanPppoeIA = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11))
msanPppoeIAGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 1))
msanPppoeIAStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIAStatus.setStatus('current')
msanPppoeIAVsaReplyMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keep", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIAVsaReplyMode.setStatus('current')
msanPppoeIACircuitIdStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIACircuitIdStatus.setStatus('current')
msanPppoeIARemoteIdStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIARemoteIdStatus.setStatus('current')
msanPppoeIAPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 2), )
if mibBuilder.loadTexts: msanPppoeIAPortTable.setStatus('current')
msanPppoeIAPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPppoeIAPortEntry.setStatus('current')
msanPppoeIAPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enableClient", 3), ("enableServer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIAPortStatus.setStatus('current')
msanPppoeIAPortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIAPortRemoteId.setStatus('current')
msanPppoeIAPortCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2))).clone('untrusted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIAPortCircuitType.setStatus('current')
msanPppoeIaStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3))
msanPppoeIaStatPADI = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatPADI.setStatus('current')
msanPppoeIaStatPADR = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatPADR.setStatus('current')
msanPppoeIaStatPADO = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatPADO.setStatus('current')
msanPppoeIaStatPADS = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatPADS.setStatus('current')
msanPppoeIaStatPADT = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatPADT.setStatus('current')
msanPppoeIaStatUnsutableFrames = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatUnsutableFrames.setStatus('current')
msanPppoeIaStatUnknownFrames = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatUnknownFrames.setStatus('current')
msanPppoeIaStatInvalidFrames = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatInvalidFrames.setStatus('current')
msanPppoeIaPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9), )
if mibBuilder.loadTexts: msanPppoeIaPortStatisticsTable.setStatus('current')
msanPppoeIaPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPppoeIaPortStatisticsEntry.setStatus('current')
msanPppoeIaPortStatPADI = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatPADI.setStatus('current')
msanPppoeIaPortStatPADR = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatPADR.setStatus('current')
msanPppoeIaPortStatPADO = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatPADO.setStatus('current')
msanPppoeIaPortStatPADS = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatPADS.setStatus('current')
msanPppoeIaPortStatPADT = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatPADT.setStatus('current')
msanPppoeIaPortStatUnsutableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatUnsutableFrames.setStatus('current')
msanPppoeIaPortStatUnknownFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatUnknownFrames.setStatus('current')
msanPppoeIaPortStatInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatInvalidFrames.setStatus('current')
msanPppoeIaVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 4), )
if mibBuilder.loadTexts: msanPppoeIaVlanTable.setStatus('current')
msanPppoeIaVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanPppoeIaVlanEntry.setStatus('current')
msanPppoeIaVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIaVlanStatus.setStatus('current')
msanQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12))
msanQosGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 1))
msanIpAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2), )
if mibBuilder.loadTexts: msanIpAclRuleTable.setStatus('current')
msanIpAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanIpAclIndex"), (0, "ISKRATEL-MSAN-MIB", "msanIpAclRuleIndex"))
if mibBuilder.loadTexts: msanIpAclRuleEntry.setStatus('current')
msanIpAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199)))
if mibBuilder.loadTexts: msanIpAclIndex.setStatus('current')
msanIpAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: msanIpAclRuleIndex.setStatus('current')
msanIpAclRuleAssignVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleAssignVlanId.setStatus('current')
msanIpAclRuleAssignCoSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleAssignCoSPriority.setStatus('deprecated')
msanIpAclRuleEgressIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleEgressIntf.setStatus('deprecated')
msanIpAclRuleAssignVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleAssignVlanId2.setStatus('current')
msanIpAclRuleRemoveVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleRemoveVlanId.setStatus('current')
msanIpAclRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("echoReply", 0), ("destinationUnreachable", 3), ("sourceQuench", 4), ("redirect", 5), ("echoRequest", 8), ("routerAdvertisement", 9), ("routerSolicitation", 10), ("timeExceeded", 11), ("parameterProblem", 12), ("timestampRequest", 13), ("timestampReply", 14), ("informationRequest", 15), ("informationReply", 16), ("addressMaskRequest", 17), ("addressMaskReply", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleIcmpType.setStatus('deprecated')
msanIpAclRuleDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleDestMacAddr.setStatus('current')
msanIpAclRuleDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleDestMacMask.setStatus('current')
msanIpAclRuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 11), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSrcMacAddr.setStatus('current')
msanIpAclRuleSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSrcMacMask.setStatus('current')
msanIpAclRuleCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleCos.setStatus('current')
msanIpAclRuleCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleCos2.setStatus('current')
msanIpAclRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanId.setStatus('current')
msanIpAclRuleVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanId2.setStatus('current')
msanIpAclRuleCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleCVlanId.setStatus('current')
msanIpAclRuleSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSVlanId.setStatus('current')
msanIpAclRuleAssignCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleAssignCVlanId.setStatus('current')
msanIpAclRuleAssignSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleAssignSVlanId.setStatus('current')
msanIpAclRuleRemoveSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleRemoveSVlanId.setStatus('current')
msanIpAclRuleVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanIdRangeStart.setStatus('current')
msanIpAclRuleVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanIdRangeEnd.setStatus('current')
msanIpAclRuleVlanId2RangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanId2RangeStart.setStatus('current')
msanIpAclRuleVlanId2RangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanId2RangeEnd.setStatus('current')
msanIpAclRuleSVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSVlanIdRangeStart.setStatus('current')
msanIpAclRuleSVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSVlanIdRangeEnd.setStatus('current')
msanIpAclRuleCVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleCVlanIdRangeStart.setStatus('current')
msanIpAclRuleCVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleCVlanIdRangeEnd.setStatus('current')
msanIpAclRuleSrcIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 31), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSrcIpv6Address.setStatus('current')
msanIpAclRuleSrcIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSrcIpv6AddressMaskLen.setStatus('current')
msanIpAclRuleDestIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 33), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleDestIpv6Address.setStatus('current')
msanIpAclRuleDestIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleDestIpv6AddressMaskLen.setStatus('current')
msanMacAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3), )
if mibBuilder.loadTexts: msanMacAclRuleTable.setStatus('current')
msanMacAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMacAclIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMacAclRuleIndex"))
if mibBuilder.loadTexts: msanMacAclRuleEntry.setStatus('current')
msanMacAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: msanMacAclIndex.setStatus('current')
msanMacAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: msanMacAclRuleIndex.setStatus('current')
msanMacAclRuleEgressIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleEgressIntf.setStatus('deprecated')
msanMacAclRuleAssignVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleAssignVlanId.setStatus('current')
msanMacAclRuleAssignCoSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleAssignCoSPriority.setStatus('deprecated')
msanMacAclRuleAssignVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleAssignVlanId2.setStatus('current')
msanMacAclRuleRemoveVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleRemoveVlanId.setStatus('current')
msanMacAclRuleCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleCVlanId.setStatus('current')
msanMacAclRuleSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleSVlanId.setStatus('current')
msanMacAclRuleAssignCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleAssignCVlanId.setStatus('current')
msanMacAclRuleAssignSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleAssignSVlanId.setStatus('current')
msanMacAclRuleRemoveSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleRemoveSVlanId.setStatus('current')
msanMacAclRuleSVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleSVlanIdRangeStart.setStatus('current')
msanMacAclRuleSVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleSVlanIdRangeEnd.setStatus('current')
msanMacAclRuleCVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleCVlanIdRangeStart.setStatus('current')
msanMacAclRuleCVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleCVlanIdRangeEnd.setStatus('current')
msanCosQueueControlTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 4), )
if mibBuilder.loadTexts: msanCosQueueControlTable.setStatus('current')
msanCosQueueControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanCosQueueControlEntry.setStatus('current')
msanCosQueueControlIntfBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 4, 1, 1), Integer32()).setUnits('kilobyte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCosQueueControlIntfBurstSize.setStatus('current')
msanCosQueueIntfShapingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCosQueueIntfShapingRate.setStatus('current')
msanCosQueueTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 5), )
if mibBuilder.loadTexts: msanCosQueueTable.setStatus('current')
msanCosQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanCosQueueIndex"))
if mibBuilder.loadTexts: msanCosQueueEntry.setStatus('current')
msanCosQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)))
if mibBuilder.loadTexts: msanCosQueueIndex.setStatus('current')
msanCosQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCosQueueWeight.setStatus('current')
msanCosQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 156)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCosQueueLength.setStatus('current')
msanCosMapIntfTrustTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 6), )
if mibBuilder.loadTexts: msanCosMapIntfTrustTable.setStatus('current')
msanCosMapIntfTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanCosMapIntfTrustEntry.setStatus('current')
msanCosMapIntfTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrusted", 1), ("trustDot1p", 2), ("trustIpPrecedence", 3), ("trustIpDscp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCosMapIntfTrustMode.setStatus('current')
msanQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7), )
if mibBuilder.loadTexts: msanQosProfileTable.setStatus('current')
msanQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanQosProfileName"))
if mibBuilder.loadTexts: msanQosProfileEntry.setStatus('current')
msanQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanQosProfileName.setStatus('current')
msanQosProfileMatchInAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInAny.setStatus('current')
msanQosProfileMatchInMacDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 3), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInMacDestAddr.setStatus('current')
msanQosProfileMatchInMacDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 4), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInMacDestMask.setStatus('current')
msanQosProfileMatchInMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 5), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInMacSrcAddr.setStatus('current')
msanQosProfileMatchInMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 6), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInMacSrcMask.setStatus('current')
msanQosProfileMatchInCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInCos.setStatus('current')
msanQosProfileMatchInCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInCos2.setStatus('current')
msanQosProfileMatchInVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInVlanId.setStatus('current')
msanQosProfileMatchInVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInVlanId2.setStatus('current')
msanQosProfileMatchInEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInEthertype.setStatus('current')
msanQosProfileMatchInIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpProtocol.setStatus('current')
msanQosProfileMatchInIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 13), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpSrcAddr.setStatus('current')
msanQosProfileMatchInIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 14), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpSrcMask.setStatus('current')
msanQosProfileMatchInIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 15), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpDestAddr.setStatus('current')
msanQosProfileMatchInIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 16), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpDestMask.setStatus('current')
msanQosProfileMatchInIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpDscp.setStatus('current')
msanQosProfileMatchInIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpPrecedence.setStatus('current')
msanQosProfileMatchInIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpTosBits.setStatus('current')
msanQosProfileMatchInIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpTosMask.setStatus('current')
msanQosProfileMatchInL4SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInL4SrcPort.setStatus('current')
msanQosProfileMatchInL4DestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInL4DestPort.setStatus('current')
msanQosProfileMatchOutAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutAny.setStatus('current')
msanQosProfileMatchOutMacDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 24), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutMacDestAddr.setStatus('current')
msanQosProfileMatchOutMacDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 25), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutMacDestMask.setStatus('current')
msanQosProfileMatchOutMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 26), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutMacSrcAddr.setStatus('current')
msanQosProfileMatchOutMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 27), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutMacSrcMask.setStatus('current')
msanQosProfileMatchOutCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutCos.setStatus('current')
msanQosProfileMatchOutCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutCos2.setStatus('current')
msanQosProfileMatchOutVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutVlanId.setStatus('current')
msanQosProfileMatchOutVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutVlanId2.setStatus('current')
msanQosProfileMatchOutEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutEthertype.setStatus('current')
msanQosProfileMatchOutIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpProtocol.setStatus('current')
msanQosProfileMatchOutIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 34), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpSrcAddr.setStatus('current')
msanQosProfileMatchOutIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 35), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpSrcMask.setStatus('current')
msanQosProfileMatchOutIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 36), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpDestAddr.setStatus('current')
msanQosProfileMatchOutIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 37), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpDestMask.setStatus('current')
msanQosProfileMatchOutIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpDscp.setStatus('current')
msanQosProfileMatchOutIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpPrecedence.setStatus('current')
msanQosProfileMatchOutIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpTosBits.setStatus('current')
msanQosProfileMatchOutIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpTosMask.setStatus('current')
msanQosProfileMatchOutL4SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutL4SrcPort.setStatus('current')
msanQosProfileMatchOutL4DestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutL4DestPort.setStatus('current')
msanQosProfileInCdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInCdr.setStatus('current')
msanQosProfileInPdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInPdr.setStatus('current')
msanQosProfileOutCdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileOutCdr.setStatus('current')
msanQosProfileOutPdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileOutPdr.setStatus('current')
msanQosProfileInTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("untrusted", 1), ("trustCos", 2), ("trustDscp", 3), ("untrustMarkCos", 4), ("untrustMarkDscp", 5))).clone('untrusted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInTrustMode.setStatus('current')
msanQosProfileInMarkCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInMarkCos.setStatus('current')
msanQosProfileInMarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInMarkDscp.setStatus('current')
msanQosProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanQosProfileRowStatus.setStatus('current')
msanQosProfilePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfilePriority.setStatus('current')
msanQosProfileInCdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 53), Integer32()).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInCdrBurstSize.setStatus('current')
msanQosProfileInPdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 54), Integer32()).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInPdrBurstSize.setStatus('current')
msanQosProfileOutCdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 55), Integer32()).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileOutCdrBurstSize.setStatus('current')
msanQosProfileOutPdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 56), Integer32().clone(64)).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileOutPdrBurstSize.setStatus('current')
msanQosProfileMatchInSrcIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 58), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInSrcIpv6Address.setStatus('current')
msanQosProfileMatchInSrcIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInSrcIpv6AddressMaskLen.setStatus('current')
msanQosProfileMatchInDestIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 60), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInDestIpv6Address.setStatus('current')
msanQosProfileMatchInDestIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInDestIpv6AddressMaskLen.setStatus('current')
msanQosProfileMatchOutSrcIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 63), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutSrcIpv6Address.setStatus('current')
msanQosProfileMatchOutSrcIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutSrcIpv6AddressMaskLen.setStatus('current')
msanQosProfileMatchOutDestIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 65), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutDestIpv6Address.setStatus('current')
msanQosProfileMatchOutDestIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutDestIpv6AddressMaskLen.setStatus('current')
msanQosIntfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 8), )
if mibBuilder.loadTexts: msanQosIntfProfileTable.setStatus('current')
msanQosIntfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanQosProfileName"))
if mibBuilder.loadTexts: msanQosIntfProfileEntry.setStatus('current')
msanQosIntfProfileAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosIntfProfileAtmVpi.setStatus('current')
msanQosIntfProfileAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosIntfProfileAtmVci.setStatus('current')
msanQosIntfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanQosIntfProfileRowStatus.setStatus('current')
msanQosStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9))
msanQosPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 1), )
if mibBuilder.loadTexts: msanQosPortStatTable.setStatus('current')
msanQosPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanQosPortStatEntry.setStatus('current')
msanQosPortStatInDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanQosPortStatInDroppedFrames.setStatus('current')
msanQosPortStatOutDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanQosPortStatOutDroppedFrames.setStatus('current')
msanQosPortProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 2), )
if mibBuilder.loadTexts: msanQosPortProfileStatTable.setStatus('current')
msanQosPortProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanQosProfileName"))
if mibBuilder.loadTexts: msanQosPortProfileStatEntry.setStatus('current')
msanQosPortProfileStatQueueCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanQosPortProfileStatQueueCurrent.setStatus('current')
msanQosPortProfileStatQueueAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanQosPortProfileStatQueueAverage.setStatus('current')
msanQosPortProfileStatQueueMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanQosPortProfileStatQueueMax.setStatus('current')
msanIpAclTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 10), )
if mibBuilder.loadTexts: msanIpAclTable.setStatus('current')
msanIpAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 10, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanIpAclId"))
if mibBuilder.loadTexts: msanIpAclEntry.setStatus('current')
msanIpAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199)))
if mibBuilder.loadTexts: msanIpAclId.setStatus('current')
msanIpAclProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclProtection.setStatus('current')
msanIpAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIpAclStatus.setStatus('current')
msanMacAclTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 11), )
if mibBuilder.loadTexts: msanMacAclTable.setStatus('current')
msanMacAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 11, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMacAclId"))
if mibBuilder.loadTexts: msanMacAclEntry.setStatus('current')
msanMacAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199)))
if mibBuilder.loadTexts: msanMacAclId.setStatus('current')
msanMacAclProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclProtection.setStatus('current')
msanMacAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacAclStatus.setStatus('current')
msanForwardingDb = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 13))
msanForwardingDbGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 13, 3))
msanAddressLearningMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macOnly", 1), ("noMacOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAddressLearningMode.setStatus('deprecated')
msanAddressLearningVlanId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 13, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAddressLearningVlanId.setStatus('deprecated')
msanSwitchAddressAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 13, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchAddressAgingTimeout.setStatus('current')
msanDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14))
msanDiagnosticsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 1))
msanDiagnosticsFanSpeedLevel = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsFanSpeedLevel.setStatus('current')
msanDiagnosticsMaxFanSpeedLevel = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsMaxFanSpeedLevel.setStatus('current')
msanDiagnosticsTestTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2), )
if mibBuilder.loadTexts: msanDiagnosticsTestTable.setStatus('current')
msanDiagnosticsTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsTestCode"))
if mibBuilder.loadTexts: msanDiagnosticsTestEntry.setStatus('current')
msanDiagnosticsTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999999)))
if mibBuilder.loadTexts: msanDiagnosticsTestCode.setStatus('current')
msanDiagnosticsTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTestName.setStatus('current')
msanDiagnosticsTestActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testOn", 1), ("testOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDiagnosticsTestActivity.setStatus('current')
msanDiagnosticsTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 999999900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDiagnosticsTestTime.setStatus('current')
msanDiagnosticsTestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("veryHigh", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDiagnosticsTestPriority.setStatus('current')
msanDiagnosticsTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testAtReload", 1), ("testPeriodically", 2), ("testDaily", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTestType.setStatus('current')
msanDiagnosticsTestTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTestTimeMin.setStatus('current')
msanDiagnosticsTestTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTestTimeMax.setStatus('current')
msanDiagnosticsErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3), )
if mibBuilder.loadTexts: msanDiagnosticsErrorTable.setStatus('current')
msanDiagnosticsErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsErrorCode"))
if mibBuilder.loadTexts: msanDiagnosticsErrorEntry.setStatus('current')
msanDiagnosticsErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999999)))
if mibBuilder.loadTexts: msanDiagnosticsErrorCode.setStatus('current')
msanDiagnosticsErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorDescription.setStatus('current')
msanDiagnosticsErrorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDiagnosticsErrorPriority.setStatus('current')
msanDiagnosticsErrorObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorObjectType.setStatus('current')
msanDiagnosticsErrorMeasure = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorMeasure.setStatus('current')
msanDiagnosticsErrorMeasureActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActive", 0), ("active", 1))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDiagnosticsErrorMeasureActive.setStatus('current')
msanDiagnosticsErrorProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorProbableCause.setStatus('current')
msanDiagnosticsErrorObjectTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorObjectTypeId.setStatus('current')
msanDiagnosticsErrorMeasureId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorMeasureId.setStatus('current')
msanDiagnosticsTempTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4), )
if mibBuilder.loadTexts: msanDiagnosticsTempTable.setStatus('current')
msanDiagnosticsTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsTempSensorID"))
if mibBuilder.loadTexts: msanDiagnosticsTempEntry.setStatus('current')
msanDiagnosticsTempSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: msanDiagnosticsTempSensorID.setStatus('current')
msanDiagnosticsTempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempSensorName.setStatus('current')
msanDiagnosticsTempCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempCurrent.setStatus('current')
msanDiagnosticsTempCriticUnderheatThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempCriticUnderheatThreshold.setStatus('current')
msanDiagnosticsTempUnderheatThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempUnderheatThreshold.setStatus('current')
msanDiagnosticsTempOverheatThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempOverheatThreshold.setStatus('current')
msanDiagnosticsTempCriticOverheatThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempCriticOverheatThreshold.setStatus('current')
msanDiagnosticsErrorFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 5), )
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterTable.setStatus('current')
msanDiagnosticsErrorFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 5, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsErrorFilterErrMask"), (0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsErrorFilterObjMask"))
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterEntry.setStatus('current')
msanDiagnosticsErrorFilterErrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterErrMask.setStatus('current')
msanDiagnosticsErrorFilterObjMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterObjMask.setStatus('current')
msanDiagnosticsErrorFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterRowStatus.setStatus('current')
msanDiagnosticsErrorSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6), )
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityTable.setStatus('current')
msanDiagnosticsErrorSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsErrorSeverityErrCode"), (0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsErrorSeverityObjMask"))
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityEntry.setStatus('current')
msanDiagnosticsErrorSeverityErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityErrCode.setStatus('current')
msanDiagnosticsErrorSeverityErrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityErrPriority.setStatus('current')
msanDiagnosticsErrorSeverityObjMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityObjMask.setStatus('current')
msanDiagnosticsErrorSeverityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityRowStatus.setStatus('current')
msanPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15))
msanPppGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1))
msanPppLocalIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppLocalIpAddress.setStatus('current')
msanPppRemoteIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppRemoteIpAddress.setStatus('current')
msanPppAuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("chap", 1), ("pap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppAuthProtocol.setStatus('current')
msanPppEchoInterval = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppEchoInterval.setStatus('current')
msanPppVanJacobsonCompression = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppVanJacobsonCompression.setStatus('current')
msanPppAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppAdminState.setStatus('current')
msanAlarmPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16))
msanAlarmPanelGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 1))
msanAlarmPanelAudioAlarmPriority = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelAudioAlarmPriority.setStatus('current')
msanAlarmPanelSerialPortType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noConnection", 1), ("mps", 2), ("alarmPanel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelSerialPortType.setStatus('current')
msanAlarmPanelTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 2), )
if mibBuilder.loadTexts: msanAlarmPanelTable.setStatus('current')
msanAlarmPanelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanAlarmPanelIndex"))
if mibBuilder.loadTexts: msanAlarmPanelEntry.setStatus('current')
msanAlarmPanelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: msanAlarmPanelIndex.setStatus('current')
msanAlarmPanelConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAlarmPanelConnectionState.setStatus('current')
msanAlarmPanelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unequipped", 0), ("equipped", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelAdminState.setStatus('current')
msanAlarmPanelIndicatorTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 3), )
if mibBuilder.loadTexts: msanAlarmPanelIndicatorTable.setStatus('current')
msanAlarmPanelIndicatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanAlarmPanelIndex"), (0, "ISKRATEL-MSAN-MIB", "msanAlarmPanelIndicatorIndex"))
if mibBuilder.loadTexts: msanAlarmPanelIndicatorEntry.setStatus('current')
msanAlarmPanelIndicatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: msanAlarmPanelIndicatorIndex.setStatus('current')
msanAlarmPanelIndicatorErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelIndicatorErrCode.setStatus('current')
msanAlarmPanelInputTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 4), )
if mibBuilder.loadTexts: msanAlarmPanelInputTable.setStatus('current')
msanAlarmPanelInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanAlarmPanelIndex"), (0, "ISKRATEL-MSAN-MIB", "msanAlarmPanelInputIndex"))
if mibBuilder.loadTexts: msanAlarmPanelInputEntry.setStatus('current')
msanAlarmPanelInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: msanAlarmPanelInputIndex.setStatus('current')
msanAlarmPanelInputErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelInputErrCode.setStatus('current')
msanAlarmPanelInputActiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelInputActiveLevel.setStatus('current')
msanMvr = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17))
msanMvrGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 1))
msanMvrPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 2), )
if mibBuilder.loadTexts: msanMvrPortTable.setStatus('current')
msanMvrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanMvrPortEntry.setStatus('current')
msanMvrPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMvrPortAdminMode.setStatus('current')
msanMvrMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3), )
if mibBuilder.loadTexts: msanMvrMulticastGroupTable.setStatus('current')
msanMvrMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMvrMulticastGroupMVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanMvrMulticastGroupStartIp"))
if mibBuilder.loadTexts: msanMvrMulticastGroupEntry.setStatus('current')
msanMvrMulticastGroupMVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: msanMvrMulticastGroupMVlanId.setStatus('current')
msanMvrMulticastGroupStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: msanMvrMulticastGroupStartIp.setStatus('current')
msanMvrMulticastGroupEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMvrMulticastGroupEndIp.setStatus('current')
msanMvrMulticastGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMvrMulticastGroupRowStatus.setStatus('current')
msanMvrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4), )
if mibBuilder.loadTexts: msanMvrConfigTable.setStatus('current')
msanMvrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMvrConfigCVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanMvrConfigMVlanId"))
if mibBuilder.loadTexts: msanMvrConfigEntry.setStatus('current')
msanMvrConfigCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: msanMvrConfigCVlanId.setStatus('current')
msanMvrConfigMVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4092)))
if mibBuilder.loadTexts: msanMvrConfigMVlanId.setStatus('current')
msanMvrConfigCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMvrConfigCos.setStatus('current')
msanMvrConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMvrConfigRowStatus.setStatus('current')
msanMvrDvlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 5), )
if mibBuilder.loadTexts: msanMvrDvlanTable.setStatus('current')
msanMvrDvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanMvrDvlanEntry.setStatus('current')
msanMvrDvlanRmOuterTagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMvrDvlanRmOuterTagStatus.setStatus('current')
msanMvrDvlanEthertypeRewriteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMvrDvlanEthertypeRewriteStatus.setStatus('current')
msanRemoteAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18))
msanRemoteAccessGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 1))
msanRemoteAccessFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2), )
if mibBuilder.loadTexts: msanRemoteAccessFilterTable.setStatus('deprecated')
msanRemoteAccessFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanRemoteAccessFilterRuleIndex"))
if mibBuilder.loadTexts: msanRemoteAccessFilterEntry.setStatus('deprecated')
msanRemoteAccessFilterRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)))
if mibBuilder.loadTexts: msanRemoteAccessFilterRuleIndex.setStatus('deprecated')
msanRemoteAccessFilterIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanRemoteAccessFilterIp.setStatus('deprecated')
msanRemoteAccessFilterNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanRemoteAccessFilterNetmask.setStatus('deprecated')
msanRemoteAccessFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanRemoteAccessFilterAction.setStatus('deprecated')
msanRemoteAccessFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanRemoteAccessFilterRowStatus.setStatus('deprecated')
msanDslSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19))
msanDslSpecificGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 1))
msanDslSpecificSystemState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 12))).clone(namedValues=NamedValues(("operational", 4), ("notReady", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSpecificSystemState.setStatus('current')
msanDslSpecificSystemFirmware = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSpecificSystemFirmware.setStatus('current')
msanDslSpecificTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3), )
if mibBuilder.loadTexts: msanDslSpecificTable.setStatus('current')
msanDslSpecificEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDslSpecificEntry.setStatus('current')
msanDslSpecificDsPsdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificDsPsdMask.setStatus('current')
msanDslSpecificUsPsdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 2), OctetString().clone('ANSI_FTTCab_M11')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUsPsdMask.setStatus('current')
msanDslSpecificLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("quiet", 0), ("idle", 1), ("activateInitTrain", 2), ("activeFullPower", 3), ("activeLowPower", 4), ("unitFail", 5), ("atpPtmLoopback", 6), ("dspDigitalLoopback", 7), ("lineDriverDigitalLoopback", 8), ("hybridLoopback", 9), ("testMode", 10), ("loopDiagnosticsDeltInit", 11), ("loopDiagnosticsDelt", 12), ("seltInits", 13), ("selt", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSpecificLineState.setStatus('current')
msanDslSpecificMaxDelayDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxDelayDs.setStatus('current')
msanDslSpecificMaxDelayUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxDelayUs.setStatus('current')
msanDslSpecificMinProtectionDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 160))).setUnits('symbols').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMinProtectionDs.setStatus('current')
msanDslSpecificMinProtectionUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMinProtectionUs.setStatus('current')
msanDslSpecificMaxSnrmDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxSnrmDs.setStatus('current')
msanDslSpecificMinSnrmDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMinSnrmDs.setStatus('current')
msanDslSpecificMaxSnrmUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxSnrmUs.setStatus('current')
msanDslSpecificMinSnrmUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMinSnrmUs.setStatus('current')
msanDslSpecificRaUsNrmDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaUsNrmDs.setStatus('current')
msanDslSpecificRaUsNrmUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaUsNrmUs.setStatus('current')
msanDslSpecificRaUsTimeDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaUsTimeDs.setStatus('current')
msanDslSpecificRaUsTimeUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaUsTimeUs.setStatus('current')
msanDslSpecificRaDsNrmDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaDsNrmDs.setStatus('current')
msanDslSpecificRaDsNrmUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaDsNrmUs.setStatus('current')
msanDslSpecificRaDsTimeDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaDsTimeDs.setStatus('current')
msanDslSpecificRaDsTimeUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaDsTimeUs.setStatus('current')
msanDslSpecificL0Time = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificL0Time.setStatus('current')
msanDslSpecificL2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificL2Time.setStatus('current')
msanDslSpecificL2Atpr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificL2Atpr.setStatus('current')
msanDslSpecificL2Atprt = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificL2Atprt.setStatus('current')
msanDslSpecificScMaskDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificScMaskDs.setStatus('current')
msanDslSpecificScMaskUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificScMaskUs.setStatus('current')
msanDslSpecificRfiBands = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRfiBands.setStatus('current')
msanDslSpecificMaxNomPsdDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -300))).setUnits('0.1 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxNomPsdDs.setStatus('current')
msanDslSpecificMaxNomPsdUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -300))).setUnits('0.1 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxNomPsdUs.setStatus('current')
msanDslSpecificMaxNomAtpDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxNomAtpDs.setStatus('current')
msanDslSpecificMaxNomAtpUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxNomAtpUs.setStatus('current')
msanDslSpecificMaxAggRxPwrUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxAggRxPwrUs.setStatus('current')
msanDslSpecificClassMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("b998_M1x_A", 1), ("b998_M1x_B", 2), ("b998_M1x_NUS0", 3), ("b998_M2x_A", 4), ("b998_M2x_M", 5), ("b998_M2x_B", 6), ("b998_M2x_NUS0", 7), ("b998E17_M2x_NUS0", 8), ("b998E17_M2x_NUS0_M", 9), ("b998ADE17_M2x_NUS0_M", 10), ("b998ADE17_M2x_A", 11), ("b998ADE17_M2x_B", 12), ("b997_M1c_A_7", 13), ("b997_M1x_M_8", 14), ("b997_M1x_M", 15), ("b997_M2x_M_8", 16), ("b997_M2x_A", 17), ("b997_M2x_M", 18), ("bHPE17_M1_NUS0", 19), ("bHPE30_M1_NUS0", 20), ("b997E17_M2x_A", 21))).clone('b998E17_M2x_NUS0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificClassMask.setStatus('current')
msanDslSpecificDpboEsEL = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setUnits('0.5 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificDpboEsEL.setStatus('current')
msanDslSpecificUpboKLF = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("override", 2), ("disableUpbo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboKLF.setStatus('current')
msanDslSpecificUpboKL = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1280))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboKL.setStatus('current')
msanDslSpecificSelt = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("force", 2))).clone('inhibit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificSelt.setStatus('current')
msanDslSpecificSeltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("unsupported", 4), ("cannotRun", 5), ("aborted", 6), ("failed", 7), ("illegalMode", 8), ("adminUp", 9), ("tableFull", 10), ("noResources", 11), ("undefinedError", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSpecificSeltStatus.setStatus('current')
msanDslSpecificPhyRDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificPhyRDs.setStatus('current')
msanDslSpecificPhyRUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificPhyRUs.setStatus('current')
msanDslSpecificUpboUs1a = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8095)).clone(4000)).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs1a.setStatus('current')
msanDslSpecificUpboUs1b = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs1b.setStatus('current')
msanDslSpecificUpboUs2a = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8095)).clone(4000)).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs2a.setStatus('current')
msanDslSpecificUpboUs2b = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs2b.setStatus('current')
msanDslSpecificUpboUs3a = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8095)).clone(4000)).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs3a.setStatus('current')
msanDslSpecificUpboUs3b = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs3b.setStatus('current')
msanDslSpecificUpboUs4a = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8095)).clone(4000)).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs4a.setStatus('current')
msanDslSpecificUpboUs4b = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs4b.setStatus('current')
msanDslSpecificDpboEPsdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 51), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificDpboEPsdMask.setStatus('current')
msanDslSpecificDpboEsCmA = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setUnits('2^-8').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmA.setStatus('current')
msanDslSpecificDpboEsCmB = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setUnits('2^-8').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmB.setStatus('current')
msanDslSpecificDpboEsCmC = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setUnits('2^-8').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmC.setStatus('current')
msanDslSpecificDpboMus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboMus.setStatus('current')
msanDslSpecificDpboFMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048)).clone(32)).setUnits('4.3125 kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboFMin.setStatus('current')
msanDslSpecificDpboFMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 6956)).clone(512)).setUnits('4.3125 kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboFMax.setStatus('current')
msanDslPsdMaskDsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4), )
if mibBuilder.loadTexts: msanDslPsdMaskDsTable.setStatus('current')
msanDslPsdMaskDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDslPsdMaskDsName"))
if mibBuilder.loadTexts: msanDslPsdMaskDsEntry.setStatus('current')
msanDslPsdMaskDsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanDslPsdMaskDsName.setStatus('current')
msanDslPsdMaskDsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("configured", 2))).clone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslPsdMaskDsType.setStatus('current')
msanDslPsdMaskDsShape = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4, 1, 3), Xdsl2PsdMaskDs().clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslPsdMaskDsShape.setStatus('current')
msanDslPsdMaskDsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslPsdMaskDsRowStatus.setStatus('current')
msanDslPsdMaskUsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5), )
if mibBuilder.loadTexts: msanDslPsdMaskUsTable.setStatus('current')
msanDslPsdMaskUsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDslPsdMaskUsName"))
if mibBuilder.loadTexts: msanDslPsdMaskUsEntry.setStatus('current')
msanDslPsdMaskUsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanDslPsdMaskUsName.setStatus('current')
msanDslPsdMaskUsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("configured", 2))).clone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslPsdMaskUsType.setStatus('current')
msanDslPsdMaskUsShape = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5, 1, 3), Xdsl2PsdMaskUs().clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslPsdMaskUsShape.setStatus('current')
msanDslPsdMaskUsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslPsdMaskUsRowStatus.setStatus('current')
msanDslSeltStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6), )
if mibBuilder.loadTexts: msanDslSeltStatusTable.setStatus('current')
msanDslSeltStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDslSeltStatusEntry.setStatus('current')
msanDslSeltStatusNoiseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusNoiseType.setStatus('current')
msanDslSeltStatusNoiseMrgDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusNoiseMrgDs.setStatus('current')
msanDslSeltStatusNoiseMrgUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusNoiseMrgUs.setStatus('current')
msanDslSeltStatusNumTonesDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusNumTonesDs.setStatus('current')
msanDslSeltStatusNumTonesUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusNumTonesUs.setStatus('current')
msanDslSeltStatusMaxRateDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 6), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusMaxRateDs.setStatus('current')
msanDslSeltStatusMaxRateUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 7), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusMaxRateUs.setStatus('current')
msanDslSeltStatusCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusCableType.setStatus('current')
msanDslSeltStatusCableLenght = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 9), Integer32()).setUnits('m').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusCableLenght.setStatus('current')
msanDslSeltStatusFitError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 10), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusFitError.setStatus('current')
msanDslSeltStatusLoopTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("open", 2), ("short", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusLoopTermination.setStatus('current')
msanPortMirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20))
msanPortMirroringGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 1))
msanPortMirroringTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 2), )
if mibBuilder.loadTexts: msanPortMirroringTable.setStatus('current')
msanPortMirroringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanPortMirroringSessionId"))
if mibBuilder.loadTexts: msanPortMirroringEntry.setStatus('current')
msanPortMirroringSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: msanPortMirroringSessionId.setStatus('current')
msanPortMirroringAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMirroringAdminState.setStatus('current')
msanPortMirroringDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMirroringDestPort.setStatus('current')
msanPortMirroringMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 3), )
if mibBuilder.loadTexts: msanPortMirroringMemberTable.setStatus('current')
msanPortMirroringMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanPortMirroringSessionId"), (0, "ISKRATEL-MSAN-MIB", "msanPortMirroringMemberSrcPort"))
if mibBuilder.loadTexts: msanPortMirroringMemberEntry.setStatus('current')
msanPortMirroringMemberSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: msanPortMirroringMemberSrcPort.setStatus('current')
msanPortMirroringMemberDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2), ("txAndRx", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortMirroringMemberDirection.setStatus('current')
msanPortMirroringMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortMirroringMemberRowStatus.setStatus('current')
msanResetWithDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 21))
msanResetWithDelayGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 21, 1))
msanResetDelay = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanResetDelay.setStatus('current')
msanMacTable = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22))
msanMacTableGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 1))
msanMacTableLength = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTableLength.setStatus('current')
msanMacTableUsed = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTableUsed.setStatus('current')
msanMacTableCAMTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2), )
if mibBuilder.loadTexts: msanMacTableCAMTable.setStatus('current')
msanMacTableCAMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMacTableCAMIndex"))
if mibBuilder.loadTexts: msanMacTableCAMEntry.setStatus('current')
msanMacTableCAMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: msanMacTableCAMIndex.setStatus('current')
msanMacTableMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTableMacAddress.setStatus('current')
msanMacTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTablePort.setStatus('current')
msanMacTableVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTableVLAN.setStatus('current')
msanMacTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learned", 1), ("managment", 2), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTableType.setStatus('current')
msanAcs = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23))
msanAcsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1))
msanAcsServerUrl = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAcsServerUrl.setStatus('current')
msanPrimaryDnsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPrimaryDnsIpAddress.setStatus('current')
msanSecondaryDnsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecondaryDnsIpAddress.setStatus('current')
msanAcsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAcsDomainName.setStatus('current')
msanAcsClientStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAcsClientStatus.setStatus('current')
msanAcsBackupConf = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAcsBackupConf.setStatus('current')
msanStp = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24))
msanStpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 1))
msanStpBpduFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 2), )
if mibBuilder.loadTexts: msanStpBpduFilterTable.setStatus('current')
msanStpBpduFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanStpBpduFilterEntry.setStatus('current')
msanStpBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpBpduFilter.setStatus('current')
msanStpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 3))
msanStpCstBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpCstBridgePriority.setStatus('current')
msanStpMstTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 4), )
if mibBuilder.loadTexts: msanStpMstTable.setStatus('current')
msanStpMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanStpMstId"))
if mibBuilder.loadTexts: msanStpMstEntry.setStatus('current')
msanStpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: msanStpMstId.setStatus('current')
msanStpMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanStpMstBridgePriority.setStatus('current')
msanStpMstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanStpMstRowStatus.setStatus('current')
msanStpMstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 5), )
if mibBuilder.loadTexts: msanStpMstVlanTable.setStatus('current')
msanStpMstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 5, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanStpMstId"))
if mibBuilder.loadTexts: msanStpMstVlanEntry.setStatus('current')
msanStpMstVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanStpMstVlanRowStatus.setStatus('current')
msanStpMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 6), )
if mibBuilder.loadTexts: msanStpMstPortTable.setStatus('current')
msanStpMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanStpMstId"))
if mibBuilder.loadTexts: msanStpMstPortEntry.setStatus('current')
msanStpMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpMstPortPathCost.setStatus('current')
msanStpMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpMstPortPriority.setStatus('current')
msanStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 7), )
if mibBuilder.loadTexts: msanStpPortTable.setStatus('current')
msanStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanStpPortEntry.setStatus('current')
msanStpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpPortHelloTime.setStatus('current')
msanStpCstPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 8), )
if mibBuilder.loadTexts: msanStpCstPortTable.setStatus('current')
msanStpCstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanStpCstPortEntry.setStatus('current')
msanStpCstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpCstPortPathCost.setStatus('current')
msanStpCstExtPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpCstExtPortPathCost.setStatus('current')
msanAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25))
msanAuthenticationGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 1))
msanAuthenticationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAuthenticationListCreate.setStatus('deprecated')
msanAuthenticationListTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3), )
if mibBuilder.loadTexts: msanAuthenticationListTable.setStatus('current')
msanAuthenticationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanAuthenticationListName"))
if mibBuilder.loadTexts: msanAuthenticationListEntry.setStatus('current')
msanAuthenticationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: msanAuthenticationListName.setStatus('current')
msanAuthenticationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("reject", 3), ("tacacs", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanAuthenticationListMethod1.setStatus('current')
msanAuthenticationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("local", 2), ("radius", 3), ("reject", 4), ("tacacs", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanAuthenticationListMethod2.setStatus('current')
msanAuthenticationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("local", 2), ("radius", 3), ("reject", 4), ("tacacs", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanAuthenticationListMethod3.setStatus('current')
msanAuthenticationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanAuthenticationListStatus.setStatus('current')
msanPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26))
msanPortSecurityGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 1))
msanPortSecurityStatMacTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2), )
if mibBuilder.loadTexts: msanPortSecurityStatMacTable.setStatus('current')
msanPortSecurityStatMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanPortSecurityStatMacIf"), (0, "ISKRATEL-MSAN-MIB", "msanPortSecurityStatMacVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanPortSecurityStatMacMacAddress"))
if mibBuilder.loadTexts: msanPortSecurityStatMacEntry.setStatus('current')
msanPortSecurityStatMacIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: msanPortSecurityStatMacIf.setStatus('current')
msanPortSecurityStatMacVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: msanPortSecurityStatMacVlanId.setStatus('current')
msanPortSecurityStatMacMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2, 1, 3), MacAddress())
if mibBuilder.loadTexts: msanPortSecurityStatMacMacAddress.setStatus('current')
msanPortSecurityStatMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortSecurityStatMacRowStatus.setStatus('current')
msanPortSecurityPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 3), )
if mibBuilder.loadTexts: msanPortSecurityPortVlanTable.setStatus('current')
msanPortSecurityPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanPortSecurityPortVlanEntry.setStatus('current')
msanPortSecurityPortVlanDynamicLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortSecurityPortVlanDynamicLimit.setStatus('current')
msanPortSecurityPortVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 3, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortSecurityPortVlanRowStatus.setStatus('current')
msanLag = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27))
msanLagGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 1))
msanLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2), )
if mibBuilder.loadTexts: msanLagDetailedConfigTable.setStatus('current')
msanLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanLagDetailedLagIndex"), (0, "ISKRATEL-MSAN-MIB", "msanLagDetailedIfIndex"))
if mibBuilder.loadTexts: msanLagDetailedConfigEntry.setStatus('current')
msanLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: msanLagDetailedLagIndex.setStatus('current')
msanLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: msanLagDetailedIfIndex.setStatus('current')
msanLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanLagDetailedPortSpeed.setStatus('current')
msanLagDetailedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanLagDetailedPortStatus.setStatus('current')
msanLagDetailedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanLagDetailedRowStatus.setStatus('current')
msanLagTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 3), )
if mibBuilder.loadTexts: msanLagTable.setStatus('current')
msanLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanLagIndex"))
if mibBuilder.loadTexts: msanLagEntry.setStatus('current')
msanLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: msanLagIndex.setStatus('current')
msanLagMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanLagMaxFrameSize.setStatus('current')
msanLagDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanLagDVlanTagMode.setStatus('current')
msanRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28))
msanRadiusServerGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 1))
msanRadiusServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2), )
if mibBuilder.loadTexts: msanRadiusServerConfigTable.setStatus('current')
msanRadiusServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanRadiusServerAddress"))
if mibBuilder.loadTexts: msanRadiusServerConfigEntry.setStatus('current')
msanRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanRadiusServerAddress.setStatus('current')
msanRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanRadiusServerPort.setStatus('current')
msanRadiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanRadiusServerSecret.setStatus('current')
msanRadiusServerPrimaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanRadiusServerPrimaryMode.setStatus('current')
msanRadiusServerCurrentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanRadiusServerCurrentMode.setStatus('current')
msanRadiusServerMsgAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanRadiusServerMsgAuth.setStatus('current')
msanRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanRadiusServerStatus.setStatus('current')
msanNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29))
msanNetworkGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1))
msanNetworkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkIPAddress.setStatus('current')
msanNetworkSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkSubnetMask.setStatus('current')
msanNetworkDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkDefaultGateway.setStatus('current')
msanNetworkDhcpSrvIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanNetworkDhcpSrvIpAddr.setStatus('current')
msanNetworkDhcpSrvVendorSpecific = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkDhcpSrvVendorSpecific.setStatus('current')
msanNetworkDhcpClientLeaseObtained = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanNetworkDhcpClientLeaseObtained.setStatus('current')
msanNetworkDhcpClientLeaseExpires = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanNetworkDhcpClientLeaseExpires.setStatus('current')
msanNetworkDhcpClientLocalOpt82 = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkDhcpClientLocalOpt82.setStatus('current')
msanNetworkDhcpClientVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 2), )
if mibBuilder.loadTexts: msanNetworkDhcpClientVlanTable.setStatus('current')
msanNetworkDhcpClientVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanNetworkDhcpClientVlanEntry.setStatus('current')
msanNetworkDhcpClientVlanLocalOpt82 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkDhcpClientVlanLocalOpt82.setStatus('current')
msanStormControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30))
msanStormControlGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 1))
msanPortStormControlTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2), )
if mibBuilder.loadTexts: msanPortStormControlTable.setStatus('current')
msanPortStormControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPortStormControlEntry.setStatus('current')
msanPortBroadcastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortBroadcastControlMode.setStatus('current')
msanPortBroadcastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 2), Integer32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortBroadcastControlThreshold.setStatus('current')
msanPortMulticastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMulticastControlMode.setStatus('current')
msanPortMulticastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 4), Integer32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMulticastControlThreshold.setStatus('current')
msanPortUnicastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortUnicastControlMode.setStatus('current')
msanPortUnicastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 6), Integer32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortUnicastControlThreshold.setStatus('current')
msanUserConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31))
msanUserConfigGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 1))
msanUserConfigCheckPassword = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanUserConfigCheckPassword.setStatus('current')
msanUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 2), )
if mibBuilder.loadTexts: msanUserConfigTable.setStatus('current')
msanUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanUserIndex"))
if mibBuilder.loadTexts: msanUserConfigEntry.setStatus('current')
msanUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: msanUserIndex.setStatus('current')
msanUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanUserAccessMode.setStatus('current')
msanSfp = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32))
msanSfpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 1))
msanSfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2), )
if mibBuilder.loadTexts: msanSfpInfoTable.setStatus('current')
msanSfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanSfpInfoEntry.setStatus('current')
msanSfpInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("adminOff", 1), ("operational", 2), ("operWithAl", 3), ("loss", 4), ("notAvaliable", 5), ("presNoDiag", 6), ("notPresent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoState.setStatus('current')
msanSfpInfoInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sfp", 1), ("not", 2), ("no", 3), ("ad", 4), ("xfp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoInterfaceType.setStatus('current')
msanSfpInfoNominalBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoNominalBitrate.setStatus('current')
msanSfpInfoNominalRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoNominalRange.setStatus('current')
msanSfpInfoVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoVendor.setStatus('current')
msanSfpInfoIeeeVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoIeeeVendorId.setStatus('current')
msanSfpInfoPartNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoPartNr.setStatus('current')
msanSfpInfoRevisionNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoRevisionNr.setStatus('current')
msanSfpInfoSerialNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoSerialNr.setStatus('current')
msanSfpInfoManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoManufacturingDate.setStatus('current')
msanSfpInfoWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoWavelength.setStatus('current')
msanSfpDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3), )
if mibBuilder.loadTexts: msanSfpDiagnosticsTable.setStatus('current')
msanSfpDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanSfpDiagnosticsEntry.setStatus('current')
msanSfpDiagnosticsSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loss", 1), ("ok", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsSignal.setStatus('current')
msanSfpDiagnosticsTempCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTempCurrent.setStatus('current')
msanSfpDiagnosticsTempMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTempMin.setStatus('current')
msanSfpDiagnosticsTempMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTempMax.setStatus('current')
msanSfpDiagnosticsVoltageCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 6), Integer32()).setUnits('0.01 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageCurrent.setStatus('current')
msanSfpDiagnosticsVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 7), Integer32()).setUnits('0.01 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageMin.setStatus('current')
msanSfpDiagnosticsVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 8), Integer32()).setUnits('0.01 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageMax.setStatus('current')
msanSfpDiagnosticsTxBiasCrrCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 9), Integer32()).setUnits('0.01 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasCrrCurrent.setStatus('current')
msanSfpDiagnosticsTxBiasCrrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 10), Integer32()).setUnits('0.01 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasCrrMin.setStatus('current')
msanSfpDiagnosticsTxBiasCrrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 11), Integer32()).setUnits('0.01 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasCrrMax.setStatus('current')
msanSfpDiagnosticsTxPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 12), Integer32()).setUnits('0.01 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerCurrent.setStatus('current')
msanSfpDiagnosticsTxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 13), Integer32()).setUnits('0.01 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerMin.setStatus('current')
msanSfpDiagnosticsTxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 14), Integer32()).setUnits('0.01 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerMax.setStatus('current')
msanSfpDiagnosticsRxPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 15), Integer32()).setUnits('0.0001 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerCurrent.setStatus('current')
msanSfpDiagnosticsRxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 16), Integer32()).setUnits('0.0001 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerMin.setStatus('current')
msanSfpDiagnosticsRxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 17), Integer32()).setUnits('0.0001 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerMax.setStatus('current')
msanSfpDiagnosticsTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpDiagNoAlarm", 1), ("sfpDiagAlarm", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTempStatus.setStatus('current')
msanSfpDiagnosticsVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpDiagNoAlarm", 1), ("sfpDiagAlarm", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageStatus.setStatus('current')
msanSfpDiagnosticsTxBiasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpDiagNoAlarm", 1), ("sfpDiagAlarm", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasStatus.setStatus('current')
msanSfpDiagnosticsTxPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpDiagNoAlarm", 1), ("sfpDiagAlarm", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerStatus.setStatus('current')
msanSfpDiagnosticsRxPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpDiagNoAlarm", 1), ("sfpDiagAlarm", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerStatus.setStatus('current')
msanMacSg = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34))
msanMacSgGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 1))
msanMacSgStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacSgStatus.setStatus('current')
msanMacSgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 2), )
if mibBuilder.loadTexts: msanMacSgPortTable.setStatus('current')
msanMacSgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanMacSgPortEntry.setStatus('current')
msanMacSgPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacSgPortStatus.setStatus('current')
msanMacSgPortViolationsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacSgPortViolationsCounter.setStatus('current')
msanErrorDisable = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35))
msanErrorDisableGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 1))
msanErrorDisableInterval = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 1, 1), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanErrorDisableInterval.setStatus('current')
msanErrorDisableMacSgDetectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanErrorDisableMacSgDetectionStatus.setStatus('current')
msanErrorDisableMacSgRecoveryStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanErrorDisableMacSgRecoveryStatus.setStatus('current')
msanErrorDisablePortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2), )
if mibBuilder.loadTexts: msanErrorDisablePortTable.setStatus('current')
msanErrorDisablePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanErrorDisablePortEntry.setStatus('current')
msanErrorDisablePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("errorDisable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanErrorDisablePortStatus.setStatus('current')
msanErrorDisablePortCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanErrorDisablePortCause.setStatus('current')
msanErrorDisablePortTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2, 1, 3), Integer32()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanErrorDisablePortTimeLeft.setStatus('current')
msanErrorDisablePortCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanErrorDisablePortCounter.setStatus('current')
msanAdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36))
msanAdslGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 1))
msanAdslAtucPhysExtnTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2), )
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTable.setStatus('current')
msanAdslAtucPhysExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanAdslAtucPhysExtnEntry.setStatus('current')
msanAdslAtucPhysExtnOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 16, 24, 128, 131, 132, 26, 27, 8, 133, 46, 139, 140))).clone(namedValues=NamedValues(("idle", 0), ("data", 1), ("handshake", 16), ("training", 24), ("llTest", 128), ("dlTest", 131), ("txTest", 132), ("framerSync", 26), ("fastRetrainInProg", 27), ("bootupLoad", 8), ("atmLpTest", 133), ("discovery", 46), ("deltTraining", 139), ("delt", 140)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnOpState.setStatus('current')
msanAdslAtucPhysExtnActualStd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 9, 48, 64, 26, 27, 28, 29, 30, 80))).clone(namedValues=NamedValues(("t1413", 0), ("gLite", 1), ("gDmt", 2), ("alctl14", 3), ("multimode", 4), ("adi", 5), ("alctl", 6), ("t1413auto", 9), ("adslPlus", 48), ("gspanPlus", 64), ("adsl2", 26), ("adsl2Plus", 27), ("readsl2", 28), ("adsl2Auto", 29), ("adsl2PlusAuto", 30), ("gspanPlusPlus", 80)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnActualStd.setStatus('current')
msanAdslAtucPhysExtnBertError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnBertError.setStatus('current')
msanAdslAtucPhysExtnTxAtmCellCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTxAtmCellCounter.setStatus('current')
msanAdslAtucPhysExtnRxAtmCellCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnRxAtmCellCounter.setStatus('current')
msanAdslAtucPhysExtnStartProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnStartProgress.setStatus('current')
msanAdslAtucPhysExtnIdleBertError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnIdleBertError.setStatus('current')
msanAdslAtucPhysExtnIdleBertCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnIdleBertCells.setStatus('current')
msanAdslAtucPhysExtnBertSync = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("bertOutOfSync", 0), ("bertInSync", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnBertSync.setStatus('current')
msanAdslAtucPhysExtnParametricTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("dspIfFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnParametricTestResult.setStatus('current')
msanAdslAtucPhysExtnSeltInfoValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32768, 33024, 33280))).clone(namedValues=NamedValues(("true", 1), ("notConnected", 32768), ("lostConnection", 33024), ("noResponseSeltEngine", 33280)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltInfoValid.setStatus('current')
msanAdslAtucPhysExtnSeltLoopLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltLoopLen.setStatus('current')
msanAdslAtucPhysExtnSeltLoopEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("open", 0), ("short", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltLoopEnd.setStatus('current')
msanAdslAtucPhysExtnSeltLoopGauge = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("greater26awg", -1), ("equal26awg", 0), ("equal24awg", 1), ("less26awg", 2), ("unknownAwg", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltLoopGauge.setStatus('current')
msanAdslAtucPhysExtnSeltUpShannonCap = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltUpShannonCap.setStatus('current')
msanAdslAtucPhysExtnSeltDownShannonCap = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltDownShannonCap.setStatus('current')
msanAdslAtucPhysExtnSeltInbandNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltInbandNoise.setStatus('current')
msanAdslAtucPhysExtnSeltTerminationResp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltTerminationResp.setStatus('current')
msanAdslAtucPhysExtnSeltUpMgnAtRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltUpMgnAtRate.setStatus('current')
msanAdslAtucPhysExtnSeltDownMgnAtRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltDownMgnAtRate.setStatus('current')
msanAdslAtucPhysExtnDataBoostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32768, 0))).clone(namedValues=NamedValues(("enabled", 32768), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDataBoostStatus.setStatus('current')
msanAdslAtucPhysExtnTestArray = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTestArray.setStatus('current')
msanAdslAtucPhysExtnChanPerfCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChanPerfCD.setStatus('current')
msanAdslAtucPhysExtnChanPerfBE = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChanPerfBE.setStatus('current')
msanAdslAtucPhysExtnDeltHLINSCus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLINSCus.setStatus('current')
msanAdslAtucPhysExtnDeltHLINpsus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLINpsus.setStatus('current')
msanAdslAtucPhysExtnDeltHLOGMTus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLOGMTus.setStatus('current')
msanAdslAtucPhysExtnDeltHLOGpsus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLOGpsus.setStatus('current')
msanAdslAtucPhysExtnDeltQLNMTus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltQLNMTus.setStatus('current')
msanAdslAtucPhysExtnDeltQLNpsus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltQLNpsus.setStatus('current')
msanAdslAtucPhysExtnDeltLastTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("dmtatucg9941", 0), ("dmtatucquiet1", 1), ("dmtatuccomb1", 2), ("dmtatucquiet2", 3), ("dmtatuccomb2", 4), ("dmtatucicomb1", 5), ("dmtatuclineprob", 6), ("dmtatucquiet3", 7), ("dmtatuccomb3", 8), ("dmtatucicomb2", 9), ("dmtatucmsgfmt", 10), ("dmtatucmsgpcb", 11), ("dmtatucquiet4", 12), ("dmtatucreverb1", 13), ("dmtatuctref1", 14), ("dmtatucreverb2", 15), ("dmtatucect", 16), ("dmtatucreverb3", 17), ("dmtatuctref2", 18), ("dmtatucreverb4", 19), ("dmtatucsegue1", 20), ("dmtatucmsg1", 21), ("dmtatucreverb5", 22), ("dmtatucsegue2", 23), ("dmtatucmedley", 24), ("dmtatucexchmarker", 25), ("dmtatucmsg2", 26), ("dmtatucreverb6", 27), ("dmtatucsegue3", 28), ("dmtatucparams", 29), ("dmtatucreverb7", 30), ("dmtatucsegue4", 31), ("dmtatucshowtime", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltLastTxState.setStatus('current')
msanAdslAtucPhysExtnPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("l0", 0), ("l2", 2), ("l3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnPMState.setStatus('current')
msanAdslAtucPhysExtnChanPerfCU = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChanPerfCU.setStatus('current')
msanAdslAtucPhysExtnExtendedPsdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnExtendedPsdStatus.setStatus('current')
msanAdslAtucPhysExtnChipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChipVersion.setStatus('current')
msanAdslAtucPhysExtnPilotTone = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnPilotTone.setStatus('current')
msanAdslAtucMSGds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucMSGds.setStatus('current')
msanAdslAtucPhysExtnPsdMaskMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 32768, 32771, 32772, 49152, 275, 291, 259))).clone(namedValues=NamedValues(("coMsk2", 0), ("flatMsk", 3), ("cabMsk2", 4), ("coMsk2Rfi", 32768), ("flatMskRfi", 32771), ("cabMsk2Rfi", 32772), ("coMsk2Rfi0", 49152), ("adsl2NonovlpM1", 275), ("adsl2NonovlpM2", 291), ("adsl2NonovlpFlat", 259)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnPsdMaskMode.setStatus('current')
msanAdslAtucPhysExtnDeltSNRMTus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltSNRMTus.setStatus('current')
msanAdslAtucPhysExtnDeltCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 17, 34, 68, 136, 0))).clone(namedValues=NamedValues(("success", 255), ("failedInsufficientCapacity", 17), ("failedCrcError", 34), ("failedTimeOut", 68), ("failedUnexpectedContent", 136), ("failedUnknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltCurrStatus.setStatus('current')
msanAdslAtucSATN = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucSATN.setStatus('current')
msanAdslAtucPhysExtnSystemVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSystemVendorId.setStatus('current')
msanAdslAtucPhysExtnSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSelfTestResult.setStatus('current')
msanAdslAtucPhysExtnG9941VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnG9941VendorId.setStatus('current')
msanAdslAtucPhysExtnTsspsUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTsspsUs.setStatus('current')
msanAdslAtucPhysExtnActPsdUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnActPsdUs.setStatus('current')
msanAdslAtucPhysExtnGainspsUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnGainspsUs.setStatus('current')
msanAdslAtucPhysExtnStartBin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnStartBin.setStatus('current')
msanAdslAtucPhysExtnStartupErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 65536, 2, 131072, 4, 262144))).clone(namedValues=NamedValues(("startupErrorCodeOk", 0), ("startupErrorCodeMaxnomPsdDs", 1), ("startupErrorCodeMaxnomPsdUs", 65536), ("startupErrorCodePsdMaskDs", 2), ("startupErrorCodePsdMaskUs", 131072), ("startupErrorCodeMaxnomAtpDs", 4), ("startupErrorCodeMaxnomAtpUs", 262144)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnStartupErrorCode.setStatus('current')
msanAdslAtucPhysExtnBitSwapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnBitSwapCount.setStatus('current')
msanAdslAtucPhysExtnModPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("flatRateCheck", 0), ("snrMeasure", 1), ("modRateCheck", 2), ("modShowtime", 3), ("flatShowtime", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnModPhase.setStatus('current')
msanAdslLineExtnTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3), )
if mibBuilder.loadTexts: msanAdslLineExtnTable.setStatus('current')
msanAdslLineExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanAdslLineExtnEntry.setStatus('current')
msanAdslLineExtnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5, 6, 7, 10, 26, 27, 30, 32, 8193, 8194, 8195, 8196, 8198, 8197, 4134, 101, 102, 2))).clone(namedValues=NamedValues(("startup", 0), ("spectrumReverb", 5), ("analogLb", 6), ("digitalLb", 7), ("atmLp", 10), ("spectrumMedley", 26), ("spectrumPilot", 27), ("spectrumCMtpr", 30), ("spectrumRMtpr", 32), ("hybridLossTest", 8193), ("rcvLinearityTest", 8194), ("rcvFilterTest", 8195), ("rcvPowerPerBinTest", 8196), ("idleNoisePerBinTest", 8198), ("totalIdleNoiseTest", 8197), ("selt", 4134), ("shutdown", 101), ("wakeup", 102), ("abortReq", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAdslLineExtnAction.setStatus('current')
msanAdslLineExtnUtopiaL2RxAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2RxAddr.setStatus('current')
msanAdslLineExtnUtopiaL2TxAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2TxAddr.setStatus('current')
msanAdslLineExtnTransAtucCap = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 4), Bits().clone(namedValues=NamedValues(("ansit1413", 0), ("etsi", 1), ("q9921PotsNonOverlapped", 2), ("q9921PotsOverlapped", 3), ("q9921IsdnNonOverlapped", 4), ("q9921isdnOverlapped", 5), ("q9921tcmIsdnNonOverlapped", 6), ("q9921tcmIsdnOverlapped", 7), ("q9922potsNonOverlapeed", 8), ("q9922potsOverlapped", 9), ("q9922tcmIsdnNonOverlapped", 10), ("q9922tcmIsdnOverlapped", 11), ("q9921tcmIsdnSymmetric", 12), ("adslPlusPotsNonOverlapped", 13), ("q9921GspanPlusPotsNonOverlapped", 31), ("q9921GspanPlusPotsOverlapped", 30), ("vdslNonOverlapped", 25), ("vdslOverlapped", 24), ("q9923Adsl2PotsOverlapped", 29), ("q9923Adsl2PotsNonOverlapped", 28), ("q9925Adsl2PlusPotsOverlapped", 27), ("q9925Adsl2PlusPotsNonOverlapped", 26), ("q9923Readsl2PotsOverlapped", 22), ("q9923Readsl2PotsNonOverlapped", 23), ("adslPlusPotsOverlapped", 18), ("q9921GspanPlusPlusPotsNonOverlapped", 20), ("q9921GspanPlusPlusPotsOverlapped", 21), ("q9923IsdnNonOverlapped", 34), ("q9923IsdnOverlapped", 35), ("q9925IsdnNonOverlapped", 42), ("q9925IsdnOverlapped", 43), ("q9923AnnexMPotsExtUsNonOverlapped", 56), ("q9923AnnexMPotsExtUsOverlapped", 57), ("q9925AnnexMPotsExtUsNonOverlapped", 60), ("q9925AnnexMPotsExtUsOverlapped", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnTransAtucCap.setStatus('current')
msanAdslLineExtnTransAtucActual = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 5), Bits().clone(namedValues=NamedValues(("ansit1413", 0), ("etsi", 1), ("q9921PotsNonOverlapped", 2), ("q9921PotsOverlapped", 3), ("q9921IsdnNonOverlapped", 4), ("q9921isdnOverlapped", 5), ("q9921tcmIsdnNonOverlapped", 6), ("q9921tcmIsdnOverlapped", 7), ("q9922potsNonOverlapeed", 8), ("q9922potsOverlapped", 9), ("q9922tcmIsdnNonOverlapped", 10), ("q9922tcmIsdnOverlapped", 11), ("q9921tcmIsdnSymmetric", 12), ("adslPlusPotsNonOverlapped", 13), ("q9921GspanPlusPotsNonOverlapped", 31), ("q9921GspanPlusPotsOverlapped", 30), ("vdslNonOverlapped", 25), ("vdslOverlapped", 24), ("q9923Adsl2PotsOverlapped", 29), ("q9923Adsl2PotsNonOverlapped", 28), ("q9925Adsl2PlusPotsOverlapped", 27), ("q9925Adsl2PlusPotsNonOverlapped", 26), ("q9923Readsl2PotsOverlapped", 22), ("q9923Readsl2PotsNonOverlapped", 23), ("adslPlusPotsOverlapped", 18), ("q9921GspanPlusPlusPotsNonOverlapped", 20), ("q9921GspanPlusPlusPotsOverlapped", 21), ("q9923IsdnNonOverlapped", 34), ("q9923IsdnOverlapped", 35), ("q9925IsdnNonOverlapped", 42), ("q9925IsdnOverlapped", 43), ("q9923AnnexMPotsExtUsNonOverlapped", 56), ("q9923AnnexMPotsExtUsOverlapped", 57), ("q9925AnnexMPotsExtUsNonOverlapped", 60), ("q9925AnnexMPotsExtUsOverlapped", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnTransAtucActual.setStatus('current')
msanAdslLineExtnClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4))).clone(namedValues=NamedValues(("oscillator", 0), ("crystal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnClockType.setStatus('current')
msanAdslLineExtnLineDmtTrellis = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trellisOn", 1), ("trellisOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnLineDmtTrellis.setStatus('current')
msanAdslLineExtnTransAturCap = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 8), Bits().clone(namedValues=NamedValues(("ansit1413", 0), ("etsi", 1), ("q9921PotsNonOverlapped", 2), ("q9921PotsOverlapped", 3), ("q9921IsdnNonOverlapped", 4), ("q9921isdnOverlapped", 5), ("q9921tcmIsdnNonOverlapped", 6), ("q9921tcmIsdnOverlapped", 7), ("q9922potsNonOverlapeed", 8), ("q9922potsOverlapped", 9), ("q9922tcmIsdnNonOverlapped", 10), ("q9922tcmIsdnOverlapped", 11), ("q9921tcmIsdnSymmetric", 12), ("adslPlusPotsNonOverlapped", 13), ("q9921GspanPlusPotsNonOverlapped", 31), ("q9921GspanPlusPotsOverlapped", 30), ("vdslNonOverlapped", 25), ("vdslOverlapped", 24), ("q9923Adsl2PotsOverlapped", 29), ("q9923Adsl2PotsNonOverlapped", 28), ("q9925Adsl2PlusPotsOverlapped", 27), ("q9925Adsl2PlusPotsNonOverlapped", 26), ("q9923Readsl2PotsOverlapped", 22), ("q9923Readsl2PotsNonOverlapped", 23), ("adslPlusPotsOverlapped", 18), ("q9921GspanPlusPlusPotsNonOverlapped", 20), ("q9921GspanPlusPlusPotsOverlapped", 21), ("q9923IsdnNonOverlapped", 34), ("q9923IsdnOverlapped", 35), ("q9925IsdnNonOverlapped", 42), ("q9925IsdnOverlapped", 43), ("q9923AnnexMPotsExtUsNonOverlapped", 56), ("q9923AnnexMPotsExtUsOverlapped", 57), ("q9925AnnexMPotsExtUsNonOverlapped", 60), ("q9925AnnexMPotsExtUsOverlapped", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnTransAturCap.setStatus('current')
msanAdslLineExtnPMConfPMSF = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("l3ToL0StateForce", 0), ("l0ToL2StateForce", 2), ("l3StateForce", 3), ("l2ToL0StateForce", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAdslLineExtnPMConfPMSF.setStatus('current')
msanAdslLineExtnDeltConfLDSF = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inhibit", 0), ("force", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAdslLineExtnDeltConfLDSF.setStatus('current')
msanAdslLineExtnTransAtucConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 11), Bits().clone(namedValues=NamedValues(("ansit1413", 0), ("etsi", 1), ("q9921PotsNonOverlapped", 2), ("q9921PotsOverlapped", 3), ("q9921IsdnNonOverlapped", 4), ("q9921isdnOverlapped", 5), ("q9921tcmIsdnNonOverlapped", 6), ("q9921tcmIsdnOverlapped", 7), ("q9922potsNonOverlapeed", 8), ("q9922potsOverlapped", 9), ("q9922tcmIsdnNonOverlapped", 10), ("q9922tcmIsdnOverlapped", 11), ("q9921tcmIsdnSymmetric", 12), ("adslPlusPotsNonOverlapped", 13), ("q9921GspanPlusPotsNonOverlapped", 31), ("q9921GspanPlusPotsOverlapped", 30), ("q9923Adsl2PotsOverlapped", 29), ("q9923Adsl2PotsNonOverlapped", 28), ("q9925Adsl2PlusPotsOverlapped", 27), ("q9925Adsl2PlusPotsNonOverlapped", 26), ("q9923Readsl2PotsOverlapped", 22), ("q9923Readsl2PotsNonOverlapped", 23), ("adslPlusPotsOverlapped", 18), ("q9921GspanPlusPlusPotsNonOverlapped", 20), ("q9921GspanPlusPlusPotsOverlapped", 21), ("q9923IsdnNonOverlapped", 34), ("q9923IsdnOverlapped", 35), ("q9925IsdnNonOverlapped", 42), ("q9925IsdnOverlapped", 43), ("q9923AnnexMPotsExtUsNonOverlapped", 56), ("q9923AnnexMPotsExtUsOverlapped", 57), ("q9925AnnexMPotsExtUsNonOverlapped", 60), ("q9925AnnexMPotsExtUsOverlapped", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAdslLineExtnTransAtucConfig.setStatus('current')
msanAdslLineExtnAtucCurrOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnAtucCurrOutputPwr.setStatus('current')
msanAdslLineExtnAtucBinSNRMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnAtucBinSNRMargin.setStatus('current')
msanAdslLineExtnUtopiaL2RxAddrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2RxAddrSecond.setStatus('current')
msanAdslLineExtnUtopiaL2TxAddrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2TxAddrSecond.setStatus('current')
msanAdslLineExtnDsBinSnrUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAdslLineExtnDsBinSnrUpdate.setStatus('current')
msanAdslLineExtnServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("multimode", 1), ("reserved", 2), ("t1413", 3), ("gDmt", 4), ("adsl2plus", 6), ("adsl2", 7), ("adsl2plusAutoAnnexM", 8), ("adsl2AutoAnnexM", 9), ("reAdsl2", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnServiceType.setStatus('current')
msanAdslAturPhysExtnTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4), )
if mibBuilder.loadTexts: msanAdslAturPhysExtnTable.setStatus('current')
msanAdslAturPhysExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanAdslAturPhysExtnEntry.setStatus('current')
msanAdslAturPhysExtnConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnConfig.setStatus('current')
msanAdslAturPhysExtnChanPerfCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnChanPerfCD.setStatus('current')
msanAdslAturPhysExtnChanPerfCU = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnChanPerfCU.setStatus('current')
msanAdslAturPhysExtnChanPerfBE = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnChanPerfBE.setStatus('current')
msanAdslAturPhysExtnDeltHLINSCds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLINSCds.setStatus('current')
msanAdslAturPhysExtnDeltHLINpsds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLINpsds.setStatus('current')
msanAdslAturPhysExtnDeltHLOGMTds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLOGMTds.setStatus('current')
msanAdslAturPhysExtnDeltHLOGpsus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLOGpsus.setStatus('current')
msanAdslAturPhysExtnDeltQLNMTds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltQLNMTds.setStatus('current')
msanAdslAturPhysExtnDeltQLNpsds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltQLNpsds.setStatus('current')
msanAdslAturPhysExtnDeltLastTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("dmtaturg9941", 0), ("dmtaturquiet1", 1), ("dmtaturcomb1", 2), ("dmtaturquiet2", 3), ("dmtaturcomb2", 4), ("dmtaturicomb1", 5), ("dmtaturlineprob", 6), ("dmtaturquiet3", 7), ("dmtaturcomb3", 8), ("dmtaturicomb2", 9), ("dmtaturmsgfmt", 10), ("dmtaturmsgpcb", 11), ("dmtaturreverb1", 12), ("dmtaturquiet4", 13), ("dmtaturreverb2", 14), ("dmtaturquiet5", 15), ("dmtaturreverb3", 16), ("dmtaturect", 17), ("dmtaturreverb4", 18), ("dmtatursegue1", 19), ("dmtaturreverb5", 20), ("dmtatursegue2", 21), ("dmtaturmsg1", 22), ("dmtaturmedley", 23), ("dmtaturexchmarker", 24), ("dmtaturmsg2", 25), ("dmtaturreverb6", 26), ("dmtatursegue3", 27), ("dmtaturparams", 28), ("dmtaturreverb7", 29), ("dmtatursegue4", 30), ("dmtaturshowtime", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltLastTxState.setStatus('current')
msanAdslAturMSGus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturMSGus.setStatus('current')
msanAdslAturDeltSNRMTds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturDeltSNRMTds.setStatus('current')
msanAdslAturSATN = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturSATN.setStatus('current')
msanAdslAturPhysExtnSystemVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnSystemVendorId.setStatus('current')
msanAdslAturPhysExtnGainspsDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnGainspsDs.setStatus('current')
msanAdslAturPhysExtnSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnSelfTestResult.setStatus('current')
msanAdslAturPhysExtnG9941VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnG9941VendorId.setStatus('current')
msanAdslAturPhysExtnTsspsDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnTsspsDs.setStatus('current')
msanAdslAturPhysExtnActPsdDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnActPsdDs.setStatus('current')
msanAdslAturPhysExtnBitSwapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnBitSwapCount.setStatus('current')
msanAdslAturPhysExtnPsdMaskMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 32768, 32771, 32772, 49152, 275, 291, 259))).clone(namedValues=NamedValues(("coMsk2", 0), ("flatMsk", 3), ("cabMsk2", 4), ("coMsk2Rfi", 32768), ("flatMskRfi", 32771), ("cabMsk2Rfi", 32772), ("coMsk2Rfi0", 49152), ("adsl2NonovlpM1", 275), ("adsl2NonovlpM2", 291), ("adsl2NonovlpFlat", 259)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnPsdMaskMode.setStatus('current')
msanEaps = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37))
msanEapsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 1))
msanEapsAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsAdminState.setStatus('current')
msanEapsDomainTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2), )
if mibBuilder.loadTexts: msanEapsDomainTable.setStatus('current')
msanEapsDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanEapsDomainName"))
if mibBuilder.loadTexts: msanEapsDomainEntry.setStatus('current')
msanEapsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 12)))
if mibBuilder.loadTexts: msanEapsDomainName.setStatus('current')
msanEapsDomainDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("transit", 2))).clone('transit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainDeviceRole.setStatus('current')
msanEapsDomainHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainHelloTime.setStatus('current')
msanEapsDomainFailTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainFailTimeout.setStatus('current')
msanEapsDomainAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainAdminState.setStatus('current')
msanEapsDomainPrimaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainPrimaryIfIndex.setStatus('current')
msanEapsDomainSecondaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainSecondaryIfIndex.setStatus('current')
msanEapsDomainCntrlVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainCntrlVlanId.setStatus('current')
msanEapsDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanEapsDomainRowStatus.setStatus('current')
msanEapsDomainProtVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 3), )
if mibBuilder.loadTexts: msanEapsDomainProtVlanTable.setStatus('current')
msanEapsDomainProtVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanEapsDomainName"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanEapsDomainProtVlanEntry.setStatus('current')
msanEapsDomainProtVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanEapsDomainProtVlanRowStatus.setStatus('current')
msanCpe = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38))
msanCpeGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 1))
msanCpeReset = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 1, 1), Unsigned32()).setUnits('ifIndex').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeReset.setStatus('current')
msanCpeSendConfig = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 1, 2), Unsigned32()).setUnits('ifIndex').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeSendConfig.setStatus('current')
msanCpeApiMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeApiMajorVersion.setStatus('current')
msanCpeApiMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeApiMinorVersion.setStatus('current')
msanCpeTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 2), )
if mibBuilder.loadTexts: msanCpeTypeTable.setStatus('current')
msanCpeTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanCpeTypeName"))
if mibBuilder.loadTexts: msanCpeTypeEntry.setStatus('current')
msanCpeTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: msanCpeTypeName.setStatus('current')
msanCpeTypePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeTypePortNum.setStatus('current')
msanCpeIntfTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 3), )
if mibBuilder.loadTexts: msanCpeIntfTypeTable.setStatus('current')
msanCpeIntfTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanCpeTypeName"))
if mibBuilder.loadTexts: msanCpeIntfTypeEntry.setStatus('current')
msanCpeIntfTypeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanCpeIntfTypeRowStatus.setStatus('current')
msanCpeIntfTypeHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeIntfTypeHwVersion.setStatus('current')
msanCpeIntfTypeSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeIntfTypeSwVersion.setStatus('current')
msanCpeIntfPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4), )
if mibBuilder.loadTexts: msanCpeIntfPortTable.setStatus('current')
msanCpeIntfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanCpeIntfPortId"))
if mibBuilder.loadTexts: msanCpeIntfPortEntry.setStatus('current')
msanCpeIntfPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: msanCpeIntfPortId.setStatus('current')
msanCpeIntfPortPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("fullPowerDown", 1), ("sleep", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortPowerMode.setStatus('current')
msanCpeIntfPortLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autonegotiation", 0), ("speed100MbpsFD", 1), ("speed100MbpsHD", 2), ("speed10MbpsFD", 3), ("speed10MbpsHD", 4))).clone('autonegotiation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortLinkMode.setStatus('current')
msanCpeIntfPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortPvid.setStatus('current')
msanCpeIntfPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortCos.setStatus('current')
msanCpeIntfPortOverrideVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortOverrideVid.setStatus('current')
msanCpeIntfPortOverrideCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortOverrideCos.setStatus('current')
msanCpeIntfPortProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortProtection.setStatus('current')
msanCpeIntfPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeIntfPortStatus.setStatus('current')
msanCpeTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5), )
if mibBuilder.loadTexts: msanCpeTrafficTable.setStatus('current')
msanCpeTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanCpeTrafficId"))
if mibBuilder.loadTexts: msanCpeTrafficEntry.setStatus('current')
msanCpeTrafficId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: msanCpeTrafficId.setStatus('current')
msanCpeTrafficName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeTrafficName.setStatus('current')
msanCpeTrafficSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('kbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeTrafficSpeed.setStatus('current')
msanCpeTrafficFlowCntrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeTrafficFlowCntrlMode.setStatus('current')
msanCpeTrafficRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanCpeTrafficRowStatus.setStatus('current')
msanCpeTrafficProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeTrafficProtection.setStatus('current')
msanCpeTrafficStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeTrafficStatus.setStatus('current')
msanCpeServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6), )
if mibBuilder.loadTexts: msanCpeServiceTable.setStatus('current')
msanCpeServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanCpeServiceId"))
if mibBuilder.loadTexts: msanCpeServiceEntry.setStatus('current')
msanCpeServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: msanCpeServiceId.setStatus('current')
msanCpeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceName.setStatus('current')
msanCpeServiceCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceCVlanId.setStatus('current')
msanCpeServiceCCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceCCos.setStatus('current')
msanCpeServiceTrafficId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceTrafficId.setStatus('current')
msanCpeServiceUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2)).clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceUntaggedPorts.setStatus('current')
msanCpeServiceTaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2)).clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceTaggedPorts.setStatus('current')
msanCpeServiceCMltcstMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disableIGMPprocessing", 0), ("igmpV2SnoopNormalLeave", 1), ("igmpV2SnoopFastLeave", 2))).clone('disableIGMPprocessing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceCMltcstMode.setStatus('current')
msanCpeServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanCpeServiceRowStatus.setStatus('current')
msanCpeServiceTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceTypeName.setStatus('current')
msanCpeServiceProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceProtection.setStatus('current')
msanCpeServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeServiceStatus.setStatus('current')
msanCpeIntfServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 7), )
if mibBuilder.loadTexts: msanCpeIntfServiceTable.setStatus('current')
msanCpeIntfServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanCpeServiceId"))
if mibBuilder.loadTexts: msanCpeIntfServiceEntry.setStatus('current')
msanCpeIntfServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanCpeIntfServiceRowStatus.setStatus('current')
msanBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39))
msanBoardGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 1))
msanBoardReset = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardReset.setStatus('current')
msanBoardConfTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2), )
if mibBuilder.loadTexts: msanBoardConfTable.setStatus('current')
msanBoardConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanBoardConfNr"))
if mibBuilder.loadTexts: msanBoardConfEntry.setStatus('current')
msanBoardConfNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: msanBoardConfNr.setStatus('current')
msanBoardConfParentNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardConfParentNr.setStatus('current')
msanBoardConfPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardConfPosition.setStatus('current')
msanBoardConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfType.setStatus('current')
msanBoardConfRequiredId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardConfRequiredId.setStatus('current')
msanBoardConfActualId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfActualId.setStatus('current')
msanBoardConfSerialNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSerialNr.setStatus('current')
msanBoardConfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardConfDescription.setStatus('current')
msanBoardConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("boardPresentRunning", 1), ("boardPresentNotAccessible", 2), ("boardNotPresent", 3), ("boardPresentInitProcess", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfStatus.setStatus('current')
msanBoardConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanBoardConfRowStatus.setStatus('current')
msanBoardConfSwSteerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSwSteerVersion.setStatus('current')
msanBoardConfSwBuildDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSwBuildDirectory.setStatus('current')
msanBoardConfSwBuildTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSwBuildTime.setStatus('current')
msanBoardConfSwBranch = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSwBranch.setStatus('current')
msanBoardConfSwBuildReference = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSwBuildReference.setStatus('current')
msanBoardListTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 3), )
if mibBuilder.loadTexts: msanBoardListTable.setStatus('current')
msanBoardListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanBoardListId"))
if mibBuilder.loadTexts: msanBoardListEntry.setStatus('current')
msanBoardListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardListId.setStatus('current')
msanBoardListType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardListType.setStatus('current')
msanFtpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 40))
msanFtpServerGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 40, 1))
msanFtpServerAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 40, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFtpServerAdminState.setStatus('current')
msanAppRateLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41))
msanAppRateLimitGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 1))
msanAppRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2), )
if mibBuilder.loadTexts: msanAppRateLimitTable.setStatus('current')
msanAppRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanAppRateLimitEntry.setStatus('current')
msanAppRateLimitDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitDhcp.setStatus('current')
msanAppRateLimitDhcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitDhcpState.setStatus('current')
msanAppRateLimitPppoe = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitPppoe.setStatus('current')
msanAppRateLimitPppoeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitPppoeState.setStatus('current')
msanAppRateLimitIgmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitIgmp.setStatus('current')
msanAppRateLimitIgmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitIgmpState.setStatus('current')
msanAppRateLimitStp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitStp.setStatus('current')
msanAppRateLimitStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitStpState.setStatus('current')
msanAppRateLimitMn = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitMn.setStatus('current')
msanAppRateLimitMnState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitMnState.setStatus('current')
msanMlinec = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 50))
msanMlinecGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 50, 1))
msanMlinecAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 50, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMlinecAdminState.setStatus('current')
msanMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100))
msanMulticastGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 1))
msanMulticastIntfStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 2), )
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupTable.setStatus('deprecated')
msanMulticastIntfStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastIntfStaticGroupIPAddr"))
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupEntry.setStatus('deprecated')
msanMulticastIntfStaticGroupIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupIPAddr.setStatus('deprecated')
msanMulticastIntfStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupRowStatus.setStatus('deprecated')
msanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 3), )
if mibBuilder.loadTexts: msanMulticastGroupTable.setStatus('current')
msanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 3, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastGroupEntry.setStatus('current')
msanMulticastGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastGroupIpAddr.setStatus('current')
msanMulticastGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastGroupName.setStatus('current')
msanMulticastGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastGroupRowStatus.setStatus('current')
msanMulticastAclListTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 4), )
if mibBuilder.loadTexts: msanMulticastAclListTable.setStatus('deprecated')
msanMulticastAclListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastAclListId"))
if mibBuilder.loadTexts: msanMulticastAclListEntry.setStatus('deprecated')
msanMulticastAclListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: msanMulticastAclListId.setStatus('deprecated')
msanMulticastAclListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 4, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastAclListName.setStatus('deprecated')
msanMulticastAclListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAclListRowStatus.setStatus('deprecated')
msanMulticastAclListGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 5), )
if mibBuilder.loadTexts: msanMulticastAclListGroupTable.setStatus('deprecated')
msanMulticastAclListGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 5, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastAclListId"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastAclGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastAclListGroupEntry.setStatus('deprecated')
msanMulticastAclGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastAclGroupIpAddr.setStatus('deprecated')
msanMulticastAclListGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAclListGroupRowStatus.setStatus('deprecated')
msanMulticastAclIntfListTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 6), )
if mibBuilder.loadTexts: msanMulticastAclIntfListTable.setStatus('deprecated')
msanMulticastAclIntfListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastAclListId"))
if mibBuilder.loadTexts: msanMulticastAclIntfListEntry.setStatus('deprecated')
msanMulticastAclIntfListMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastAclIntfListMode.setStatus('deprecated')
msanMulticastAclIntfListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAclIntfListRowStatus.setStatus('deprecated')
msanMulticastAclListVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 7), )
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupTable.setStatus('deprecated')
msanMulticastAclListVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 7, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastAclListId"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastAclListVlanGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupEntry.setStatus('deprecated')
msanMulticastAclListVlanGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupIpAddr.setStatus('deprecated')
msanMulticastAclListVlanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupRowStatus.setStatus('deprecated')
msanMulticastIntfVlanStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 8), )
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupTable.setStatus('current')
msanMulticastIntfVlanStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastIntfVlanStaticGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupEntry.setStatus('current')
msanMulticastIntfVlanStaticGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupIpAddr.setStatus('current')
msanMulticastIntfVlanStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupRowStatus.setStatus('current')
msanMulticastAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 9), )
if mibBuilder.loadTexts: msanMulticastAccessListTable.setStatus('current')
msanMulticastAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 9, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastAccessListName"))
if mibBuilder.loadTexts: msanMulticastAccessListEntry.setStatus('current')
msanMulticastAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanMulticastAccessListName.setStatus('current')
msanMulticastAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAccessListRowStatus.setStatus('current')
msanMulticastAccessListGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 10), )
if mibBuilder.loadTexts: msanMulticastAccessListGroupTable.setStatus('current')
msanMulticastAccessListGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 10, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastAccessListName"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastAccessListGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastAccessListGroupEntry.setStatus('current')
msanMulticastAccessListGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 10, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastAccessListGroupIpAddr.setStatus('current')
msanMulticastAccessListGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAccessListGroupRowStatus.setStatus('current')
msanMulticastAccessListIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 11), )
if mibBuilder.loadTexts: msanMulticastAccessListIntfTable.setStatus('current')
msanMulticastAccessListIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastAccessListName"))
if mibBuilder.loadTexts: msanMulticastAccessListIntfEntry.setStatus('current')
msanMulticastAccessListIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastAccessListIntfMode.setStatus('current')
msanMulticastAccessListIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAccessListIntfRowStatus.setStatus('current')
msanSwitchMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12), )
if mibBuilder.loadTexts: msanSwitchMFDBTable.setStatus('current')
msanSwitchMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSwitchMFDBProtocolType"), (0, "ISKRATEL-MSAN-MIB", "msanSwitchMFDBVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanSwitchMFDBMacAddress"))
if mibBuilder.loadTexts: msanSwitchMFDBEntry.setStatus('current')
msanSwitchMFDBProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("gmrp", 2), ("igmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBProtocolType.setStatus('current')
msanSwitchMFDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBVlanId.setStatus('current')
msanSwitchMFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBMacAddress.setStatus('current')
msanSwitchMFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBType.setStatus('current')
msanSwitchMFDBDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBDescription.setStatus('current')
msanSwitchMFDBForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 6), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBForwardingPortMask.setStatus('current')
msanSwitchMFDBFilteringPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 7), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBFilteringPortMask.setStatus('current')
msanFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101))
msanFilteringGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 2))
msanFilteringFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3), )
if mibBuilder.loadTexts: msanFilteringFilterTable.setStatus('deprecated')
msanFilteringFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanFilteringFilterId"))
if mibBuilder.loadTexts: msanFilteringFilterEntry.setStatus('deprecated')
msanFilteringFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 64), ValueRangeConstraint(301, 500), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringFilterId.setStatus('deprecated')
msanFilteringFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringFilterName.setStatus('deprecated')
msanFilteringFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanFilteringFilterType.setStatus('deprecated')
msanFilteringFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3, 1, 4), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanFilteringFilterRowStatus.setStatus('deprecated')
msanFilteringAssignFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4), )
if mibBuilder.loadTexts: msanFilteringAssignFilterTable.setStatus('deprecated')
msanFilteringAssignFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanFilteringFilterId"))
if mibBuilder.loadTexts: msanFilteringAssignFilterEntry.setStatus('deprecated')
msanFilteringAssignFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringAssignFilterVid.setStatus('deprecated')
msanFilteringAssignFilterCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringAssignFilterCos.setStatus('deprecated')
msanFilteringAssignFilterDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringAssignFilterDscp.setStatus('deprecated')
msanFilteringAssignFilterPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringAssignFilterPrec.setStatus('deprecated')
msanFilteringAssignFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1, 5), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanFilteringAssignFilterRowStatus.setStatus('deprecated')
msanFilteringRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5), )
if mibBuilder.loadTexts: msanFilteringRuleTable.setStatus('deprecated')
msanFilteringRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanFilteringRuleId"), (0, "ISKRATEL-MSAN-MIB", "msanFilteringFilterId"))
if mibBuilder.loadTexts: msanFilteringRuleEntry.setStatus('deprecated')
msanFilteringRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanFilteringRuleId.setStatus('deprecated')
msanFilteringRuleResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleResponse.setStatus('deprecated')
msanFilteringRuleFromMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromMac.setStatus('deprecated')
msanFilteringRuleFromMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromMacMask.setStatus('deprecated')
msanFilteringRuleFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromIp.setStatus('deprecated')
msanFilteringRuleFromMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromMask.setStatus('deprecated')
msanFilteringRuleFromPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromPortLow.setStatus('deprecated')
msanFilteringRuleFromPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromPortHigh.setStatus('deprecated')
msanFilteringRuleToMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToMac.setStatus('deprecated')
msanFilteringRuleToMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToMacMask.setStatus('deprecated')
msanFilteringRuleToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToIp.setStatus('deprecated')
msanFilteringRuleToMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToMask.setStatus('deprecated')
msanFilteringRuleToPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToPortLow.setStatus('deprecated')
msanFilteringRuleToPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToPortHigh.setStatus('deprecated')
msanFilteringRuleEtherProto = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleEtherProto.setStatus('deprecated')
msanFilteringRuleIpProto = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleIpProto.setStatus('deprecated')
msanFilteringRuleIcmType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleIcmType.setStatus('deprecated')
msanFilteringRulePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRulePrec.setStatus('deprecated')
msanFilteringRuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleTos.setStatus('deprecated')
msanFilteringRuleVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleVid.setStatus('deprecated')
msanFilteringRuleCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleCos.setStatus('deprecated')
msanFilteringRuleTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("qinq-tagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleTag.setStatus('deprecated')
msanFilteringRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 23), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanFilteringRuleRowStatus.setStatus('deprecated')
msanFilteringAttachedFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 6), )
if mibBuilder.loadTexts: msanFilteringAttachedFilterTable.setStatus('deprecated')
msanFilteringAttachedFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanFilteringFilterId"))
if mibBuilder.loadTexts: msanFilteringAttachedFilterEntry.setStatus('deprecated')
msanFilteringAttachedFilterDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringAttachedFilterDirect.setStatus('deprecated')
msanFilteringAttachedFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanFilteringAttachedFilterRowStatus.setStatus('deprecated')
msanBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102))
msanBridgeGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 1))
msanBridgeMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge", 1), ("ccx", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBridgeMode.setStatus('deprecated')
msanBridgeMacTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBridgeMacTableSize.setStatus('deprecated')
msanBridgeRedAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBridgeRedAdminMode.setStatus('deprecated')
msanBridgeCCXTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 2), )
if mibBuilder.loadTexts: msanBridgeCCXTable.setStatus('deprecated')
msanBridgeCCXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanBridgeCCXInterface1"), (0, "ISKRATEL-MSAN-MIB", "msanBridgeCCXInterface2"))
if mibBuilder.loadTexts: msanBridgeCCXEntry.setStatus('deprecated')
msanBridgeCCXInterface1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 2, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanBridgeCCXInterface1.setStatus('deprecated')
msanBridgeCCXInterface2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 2, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanBridgeCCXInterface2.setStatus('deprecated')
msanBridgeCCXRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanBridgeCCXRowStatus.setStatus('deprecated')
msanIPSG = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103))
msanIPSGGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 1))
msanIPSGAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGAdminMode.setStatus('current')
msanIPSGStoreAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGStoreAdminMode.setStatus('current')
msanIPSGIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIpv6AdminMode.setStatus('current')
msanIPSGClearDynamicBinds = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("clear-all", 2), ("clear-dhcpv4", 3), ("clear-dhcpv6", 4), ("clear-nd", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGClearDynamicBinds.setStatus('current')
msanIPSGIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2), )
if mibBuilder.loadTexts: msanIPSGIntfTable.setStatus('current')
msanIPSGIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIPSGIntfEntry.setStatus('current')
msanIPSGIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfAdminMode.setStatus('current')
msanIPSGIntfBindsLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfBindsLimit.setStatus('current')
msanIPSGIntfFilteringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iponly", 1), ("ipmac", 2))).clone('iponly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfFilteringMode.setStatus('current')
msanIPSGIntfIpv6AdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfIpv6AdminMode.setStatus('current')
msanIPSGIntfBindsLimitDhcpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfBindsLimitDhcpv6.setStatus('current')
msanIPSGIntfBindsLimitND = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfBindsLimitND.setStatus('current')
msanIPSGIntfClearDynamicBinds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("clear-all", 2), ("clear-dhcpv4", 3), ("clear-dhcpv6", 4), ("clear-nd", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfClearDynamicBinds.setStatus('current')
msanIPSGBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3), )
if mibBuilder.loadTexts: msanIPSGBindingsTable.setStatus('deprecated')
msanIPSGBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGBindVlan"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGBindMac"))
if mibBuilder.loadTexts: msanIPSGBindingsEntry.setStatus('deprecated')
msanIPSGBindIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGBindIp.setStatus('deprecated')
msanIPSGBindVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGBindVlan.setStatus('deprecated')
msanIPSGBindMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGBindMac.setStatus('deprecated')
msanIPSGBindLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGBindLeaseRemainingTime.setStatus('deprecated')
msanIPSGBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGBindType.setStatus('deprecated')
msanIPSGBindMatchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGBindMatchedFrames.setStatus('deprecated')
msanIPSGBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanIPSGBindRowStatus.setStatus('deprecated')
msanIPSGIpv4PortStaticBindTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4), )
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindTable.setStatus('current')
msanIPSGIpv4PortStaticBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv4PortStaticBindMacAddress"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv4PortStaticBindVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv4PortStaticBindIpAddress"))
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindEntry.setStatus('current')
msanIPSGIpv4PortStaticBindMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindMacAddress.setStatus('current')
msanIPSGIpv4PortStaticBindVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1, 2), VlanIndex())
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindVlanId.setStatus('current')
msanIPSGIpv4PortStaticBindIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindIpAddress.setStatus('current')
msanIPSGIpv4PortStaticBindMatchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindMatchedFrames.setStatus('current')
msanIPSGIpv4PortStaticBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindRowStatus.setStatus('current')
msanIPSGIpv6PortStaticBindTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5), )
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindTable.setStatus('current')
msanIPSGIpv6PortStaticBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv6PortStaticBindMacAddress"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv6PortStaticBindVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv6PortStaticBindIpAddress"))
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindEntry.setStatus('current')
msanIPSGIpv6PortStaticBindMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindMacAddress.setStatus('current')
msanIPSGIpv6PortStaticBindVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1, 2), VlanIndex())
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindVlanId.setStatus('current')
msanIPSGIpv6PortStaticBindIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindIpAddress.setStatus('current')
msanIPSGIpv6PortStaticBindMatchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindMatchedFrames.setStatus('current')
msanIPSGIpv6PortStaticBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindRowStatus.setStatus('current')
msanIPSGPortBindCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6), )
if mibBuilder.loadTexts: msanIPSGPortBindCurrentTable.setStatus('current')
msanIPSGPortBindCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanIPSGPortBindCurrentId"))
if mibBuilder.loadTexts: msanIPSGPortBindCurrentEntry.setStatus('current')
msanIPSGPortBindCurrentId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: msanIPSGPortBindCurrentId.setStatus('current')
msanIPSGPortBindCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentIfIndex.setStatus('current')
msanIPSGPortBindCurrentMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentMacAddress.setStatus('current')
msanIPSGPortBindCurrentVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 4), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentVlanId.setStatus('current')
msanIPSGPortBindCurrentIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentIpAddressType.setStatus('current')
msanIPSGPortBindCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentIpAddress.setStatus('current')
msanIPSGPortBindCurrentLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentLeaseRemainingTime.setStatus('current')
msanIPSGPortBindCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dynamic-dhcpv4", 2), ("dynamic-dhcpv6", 3), ("dynamic-nd", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentType.setStatus('current')
msanIPSGPortBindCurrentMatchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentMatchedFrames.setStatus('current')
msanVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105))
msanVlanGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 1))
msanDVlanTagMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDVlanTagMode.setStatus('deprecated')
msanVlanRemarkAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanRemarkAdminState.setStatus('deprecated')
msanInternalVlanId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanInternalVlanId.setStatus('current')
msanPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 2), )
if mibBuilder.loadTexts: msanPortVlanTable.setStatus('deprecated')
msanPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPortVlanEntry.setStatus('deprecated')
msanPortVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("access", 0), ("trunk", 1), ("dot1qtunnel", 2), ("vlanStacking", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanMode.setStatus('deprecated')
msanPortVlanStackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("mapPriorityFromOuterTag", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanStackPriority.setStatus('deprecated')
msanPortVlanStackVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanStackVlanId.setStatus('deprecated')
msanPortDVlanMapTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 3), )
if mibBuilder.loadTexts: msanPortDVlanMapTable.setStatus('deprecated')
msanPortDVlanMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanPortDVlanMapInTagVlanId"))
if mibBuilder.loadTexts: msanPortDVlanMapEntry.setStatus('deprecated')
msanPortDVlanMapInTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: msanPortDVlanMapInTagVlanId.setStatus('deprecated')
msanPortDVlanMapOutTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortDVlanMapOutTagVlanId.setStatus('deprecated')
msanPortDVlanMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortDVlanMapRowStatus.setStatus('deprecated')
msanPortVlanRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 4), )
if mibBuilder.loadTexts: msanPortVlanRemarkTable.setStatus('current')
msanPortVlanRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanPortVlanRemarkSrcVlanId"))
if mibBuilder.loadTexts: msanPortVlanRemarkEntry.setStatus('current')
msanPortVlanRemarkSrcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanRemarkSrcVlanId.setStatus('current')
msanPortVlanRemarkDstVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanRemarkDstVlanId.setStatus('current')
msanPortVlanRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortVlanRemarkRowStatus.setStatus('current')
msanPortDVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 5), )
if mibBuilder.loadTexts: msanPortDVlanTable.setStatus('current')
msanPortDVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPortDVlanEntry.setStatus('current')
msanPortDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortDVlanTagMode.setStatus('current')
msanPortDVlanStackVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortDVlanStackVlanId.setStatus('current')
msanPortDVlanStackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7))).clone('priority0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortDVlanStackPriority.setStatus('current')
msanPortDVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6), )
if mibBuilder.loadTexts: msanPortDVlanConfigTable.setStatus('current')
msanPortDVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanDVlanConfigInTagVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanDVlanConfigInTagPriority"))
if mibBuilder.loadTexts: msanPortDVlanConfigEntry.setStatus('current')
msanDVlanConfigInTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: msanDVlanConfigInTagVlanId.setStatus('current')
msanDVlanConfigInTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7), ("unspecified", 8))))
if mibBuilder.loadTexts: msanDVlanConfigInTagPriority.setStatus('current')
msanDVlanConfigOutTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDVlanConfigOutTagVlanId.setStatus('current')
msanDVlanConfigOutTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7), ("unspecified", 8))).clone('priority0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDVlanConfigOutTagPriority.setStatus('current')
msanDVlanConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDVlanConfigRowStatus.setStatus('current')
msanPortVlanRemarkAdminTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 7), )
if mibBuilder.loadTexts: msanPortVlanRemarkAdminTable.setStatus('current')
msanPortVlanRemarkAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPortVlanRemarkAdminEntry.setStatus('current')
msanPortVlanRemarkAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanRemarkAdminMode.setStatus('current')
msanAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106))
msanAtmGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 1))
msanPortAtmPvcTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2), )
if mibBuilder.loadTexts: msanPortAtmPvcTable.setStatus('current')
msanPortAtmPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanPortAtmPvcVpi"), (0, "ISKRATEL-MSAN-MIB", "msanPortAtmPvcVci"))
if mibBuilder.loadTexts: msanPortAtmPvcEntry.setStatus('current')
msanPortAtmPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: msanPortAtmPvcVpi.setStatus('current')
msanPortAtmPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 255)))
if mibBuilder.loadTexts: msanPortAtmPvcVci.setStatus('current')
msanPortAtmPvcPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortAtmPvcPvid.setStatus('current')
msanPortAtmPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortAtmPvcRowStatus.setStatus('current')
msanEnergyMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107))
msanEnergyMeterGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1))
msanEnergyMeterIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEnergyMeterIpAddress.setStatus('current')
msanEnergyMeterTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEnergyMeterTcpPort.setStatus('current')
msanEnergyMeterAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEnergyMeterAddress.setStatus('current')
msanEnergyMeterPassword = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEnergyMeterPassword.setStatus('current')
msanEnergyMeterSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterSerialNo.setStatus('current')
msanEnergyMeterDateTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterDateTime.setStatus('current')
msanEnergyMeterCurrTariff = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterCurrTariff.setStatus('current')
msanEnergyMeterCurrPower = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 8), Unsigned32()).setUnits('0.01 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterCurrPower.setStatus('current')
msanEnergyMeterCoreVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterCoreVersion.setStatus('current')
msanEnergyMeterFwType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterFwType.setStatus('current')
msanEnergyMeterFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterFwVersion.setStatus('current')
msanEnergyMeterFwCreationDate = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterFwCreationDate.setStatus('current')
msanEnergyMeterEnergyTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 2), )
if mibBuilder.loadTexts: msanEnergyMeterEnergyTable.setStatus('current')
msanEnergyMeterEnergyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanEnergyMeterTariff"), (0, "ISKRATEL-MSAN-MIB", "msanEnergyMeterDepth"))
if mibBuilder.loadTexts: msanEnergyMeterEnergyEntry.setStatus('current')
msanEnergyMeterTariff = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: msanEnergyMeterTariff.setStatus('current')
msanEnergyMeterDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 13)))
if mibBuilder.loadTexts: msanEnergyMeterDepth.setStatus('current')
msanEnergyMeterEnergyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 2, 1, 3), Unsigned32()).setUnits('0.01 kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterEnergyValue.setStatus('current')
msanEnergyMeterEnergySumTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 3), )
if mibBuilder.loadTexts: msanEnergyMeterEnergySumTable.setStatus('current')
msanEnergyMeterEnergySumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanEnergyMeterDepth"))
if mibBuilder.loadTexts: msanEnergyMeterEnergySumEntry.setStatus('current')
msanEnergyMeterEnergySumValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 3, 1, 1), Unsigned32()).setUnits('0.01 kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterEnergySumValue.setStatus('current')
msanArpInspection = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108))
msanArpInspectionGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 1))
msanArpInspectionAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanArpInspectionAdminMode.setStatus('current')
msanArpInspectionPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 2), )
if mibBuilder.loadTexts: msanArpInspectionPortTable.setStatus('current')
msanArpInspectionPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanArpInspectionPortEntry.setStatus('current')
msanArpInspectionPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanArpInspectionPortAdminMode.setStatus('current')
msanArpInspectionPortStatDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanArpInspectionPortStatDroppedFrames.setStatus('current')
msanArpInspectionVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 3), )
if mibBuilder.loadTexts: msanArpInspectionVlanTable.setStatus('current')
msanArpInspectionVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 3, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanArpInspectionVlanEntry.setStatus('current')
msanArpInspectionVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanArpInspectionVlanAdminMode.setStatus('current')
msanArpInspectionVlanStatDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanArpInspectionVlanStatDroppedFrames.setStatus('current')
msanIsa = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109))
msanIsaGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1))
msanIsaTalAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalAdminMode.setStatus('current')
msanIsaDasServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3799)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaDasServerPort.setStatus('current')
msanIsaDasServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaDasServerSecret.setStatus('current')
msanIsaRadiusServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaRadiusServerRetries.setStatus('current')
msanIsaRadiusServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaRadiusServerTimeout.setStatus('current')
msanIsaStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2))
msanIsaPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1), )
if mibBuilder.loadTexts: msanIsaPortStatTable.setStatus('current')
msanIsaPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIsaPortStatEntry.setStatus('current')
msanIsaPortStatTalMatchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatTalMatchedFrames.setStatus('current')
msanIsaPortStatTalDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatTalDroppedFrames.setStatus('current')
msanIsaPortStatAuthenReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthenReqSent.setStatus('current')
msanIsaPortStatAuthenReqConfirmed = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthenReqConfirmed.setStatus('current')
msanIsaPortStatAuthenReqRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthenReqRejected.setStatus('current')
msanIsaPortStatAuthenTimeoutExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthenTimeoutExpired.setStatus('current')
msanIsaPortStatAuthorReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthorReqSent.setStatus('current')
msanIsaPortStatAuthorReqConfirmed = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthorReqConfirmed.setStatus('current')
msanIsaPortStatAuthorReqRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthorReqRejected.setStatus('current')
msanIsaPortStatAuthorTimeoutExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthorTimeoutExpired.setStatus('current')
msanIsaStatLoginReq = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaStatLoginReq.setStatus('current')
msanIsaStatLoginUnsuccessfulReq = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaStatLoginUnsuccessfulReq.setStatus('current')
msanIsaRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3), )
if mibBuilder.loadTexts: msanIsaRadiusServerTable.setStatus('current')
msanIsaRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanIsaRadiusServerIpAddress"), (0, "ISKRATEL-MSAN-MIB", "msanIsaRadiusServerType"))
if mibBuilder.loadTexts: msanIsaRadiusServerEntry.setStatus('current')
msanIsaRadiusServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanIsaRadiusServerIpAddress.setStatus('current')
msanIsaRadiusServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authentication", 1), ("accounting", 2))))
if mibBuilder.loadTexts: msanIsaRadiusServerType.setStatus('current')
msanIsaRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaRadiusServerPort.setStatus('current')
msanIsaRadiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaRadiusServerSecret.setStatus('current')
msanIsaRadiusServerPrimaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaRadiusServerPrimaryMode.setStatus('current')
msanIsaRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanIsaRadiusServerRowStatus.setStatus('current')
msanIsaPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5), )
if mibBuilder.loadTexts: msanIsaPortTable.setStatus('current')
msanIsaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIsaPortEntry.setStatus('current')
msanIsaPortTalAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortTalAdminMode.setStatus('current')
msanIsaPortAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortAuthentication.setStatus('current')
msanIsaPortAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortAuthorization.setStatus('current')
msanIsaPortAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortAccounting.setStatus('current')
msanIsaPortLoginMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 5), Bits().clone(namedValues=NamedValues(("circuitId", 0), ("remoteId", 1), ("vendorId", 2), ("clientId", 3), ("sourceMAC", 4), ("sourceIP", 5), ("userPattern", 6))).clone(namedValues=NamedValues(("circuitId", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortLoginMask.setStatus('current')
msanIsaPortLoginUserPatternMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortLoginUserPatternMask.setStatus('current')
msanIsaPortTalAutomaticReq = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortTalAutomaticReq.setStatus('current')
msanIsaTalPortMatchTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6), )
if mibBuilder.loadTexts: msanIsaTalPortMatchTable.setStatus('current')
msanIsaTalPortMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIsaTalPortMatchEntry.setStatus('current')
msanIsaTalPortMatchEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchEthertype.setStatus('current')
msanIsaTalPortMatchMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 2), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchMacSrcAddr.setStatus('current')
msanIsaTalPortMatchMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 3), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchMacSrcMask.setStatus('current')
msanIsaTalPortMatchVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchVlanId.setStatus('current')
msanIsaTalPortMatchIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 5), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchIpSrcAddr.setStatus('current')
msanIsaTalPortMatchIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 6), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchIpSrcMask.setStatus('current')
msanIsaTalPortMatchDhcpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("discover", 1), ("request", 2))).clone('undefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpType.setStatus('current')
msanIsaTalPortMatchDhcpOpt60VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt60VendorId.setStatus('current')
msanIsaTalPortMatchDhcpOpt61ClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt61ClientId.setStatus('current')
msanIsaTalPortMatchDhcpOpt61ClientIdMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 10), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt61ClientIdMacAddr.setStatus('current')
msanIsaTalPortMatchDhcpOpt82RemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt82RemoteId.setStatus('current')
msanIsaTalPortMatchUserBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchUserBits.setStatus('current')
msanIsaTalPortMatchUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchUserMask.setStatus('current')
msanIsaTalPatternMatchTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7), )
if mibBuilder.loadTexts: msanIsaTalPatternMatchTable.setStatus('current')
msanIsaTalPatternMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanIsaTalPatternMatchName"))
if mibBuilder.loadTexts: msanIsaTalPatternMatchEntry.setStatus('current')
msanIsaTalPatternMatchName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: msanIsaTalPatternMatchName.setStatus('current')
msanIsaTalPatternMatchEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchEthertype.setStatus('current')
msanIsaTalPatternMatchMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 3), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchMacSrcAddr.setStatus('current')
msanIsaTalPatternMatchMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 4), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchMacSrcMask.setStatus('current')
msanIsaTalPatternMatchVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchVlanId.setStatus('current')
msanIsaTalPatternMatchIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 6), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchIpSrcAddr.setStatus('current')
msanIsaTalPatternMatchIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 7), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchIpSrcMask.setStatus('current')
msanIsaTalPatternMatchDhcpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("discover", 1), ("request", 2))).clone('undefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpType.setStatus('current')
msanIsaTalPatternMatchDhcpOpt60VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt60VendorId.setStatus('current')
msanIsaTalPatternMatchDhcpOpt61ClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt61ClientId.setStatus('current')
msanIsaTalPatternMatchDhcpOpt61ClientIdMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 11), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt61ClientIdMacAddr.setStatus('current')
msanIsaTalPatternMatchDhcpOpt82RemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt82RemoteId.setStatus('current')
msanIsaTalPatternMatchUserBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchUserBits.setStatus('current')
msanIsaTalPatternMatchUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchUserMask.setStatus('current')
msanIsaTalPatternMatchLoginMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 15), Bits().clone(namedValues=NamedValues(("circuitId", 0), ("remoteId", 1), ("vendorId", 2), ("clientId", 3), ("sourceMAC", 4), ("sourceIP", 5), ("userPattern", 6))).clone(namedValues=NamedValues(("circuitId", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchLoginMask.setStatus('current')
msanIsaTalPatternMatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchRowStatus.setStatus('current')
msanIsaTalPortPatternMatchTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 8), )
if mibBuilder.loadTexts: msanIsaTalPortPatternMatchTable.setStatus('current')
msanIsaTalPortPatternMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanIsaTalPatternMatchName"))
if mibBuilder.loadTexts: msanIsaTalPortPatternMatchEntry.setStatus('current')
msanIsaTalPortPatternMatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 8, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanIsaTalPortPatternMatchRowStatus.setStatus('current')
msanSync = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110))
msanSyncGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 1))
msanSyncTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2), )
if mibBuilder.loadTexts: msanSyncTable.setStatus('current')
msanSyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSyncBoardPosition"), (0, "ISKRATEL-MSAN-MIB", "msanSyncSourcePriority"))
if mibBuilder.loadTexts: msanSyncEntry.setStatus('current')
msanSyncBoardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: msanSyncBoardPosition.setStatus('current')
msanSyncSourcePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: msanSyncSourcePriority.setStatus('current')
msanSyncSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 8, 14, 15, 16, 40))).clone(namedValues=NamedValues(("ext-2mhz", 4), ("ext-10mhz", 5), ("ext-1hz", 6), ("mlvds-bp", 8), ("pps-bp", 14), ("ptp-eth", 15), ("sync-eth", 16), ("free-run", 40)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSyncSourceType.setStatus('current')
msanSyncSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input-1", 1), ("input-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSyncSourceId.setStatus('current')
msanSyncSourceEthPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 5), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSyncSourceEthPortId.setStatus('current')
msanSyncDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 10))).clone(namedValues=NamedValues(("local", 0), ("global", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSyncDestinationType.setStatus('current')
msanSyncDestinationMlvdsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mlvds-1", 1), ("mlvds-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSyncDestinationMlvdsId.setStatus('current')
msanSyncSourceSuitability = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("suitable", 1), ("unsuitable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSyncSourceSuitability.setStatus('current')
msanSyncSourceActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSyncSourceActivity.setStatus('current')
msanSyncRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanSyncRowStatus.setStatus('current')
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanQosProfileMatchOutIpSrcMask=msanQosProfileMatchOutIpSrcMask, msanRadiusServerConfigTable=msanRadiusServerConfigTable, msanIgmpStatRxBlockByIgmpVersion=msanIgmpStatRxBlockByIgmpVersion, msanSecurityProfileProtectedPort=msanSecurityProfileProtectedPort, msanDiagnosticsErrorMeasureId=msanDiagnosticsErrorMeasureId, msanIpAclTable=msanIpAclTable, msanPortBroadcastControlThreshold=msanPortBroadcastControlThreshold, msan=msan, msanPortDVlanStackPriority=msanPortDVlanStackPriority, msanIPSGIntfClearDynamicBinds=msanIPSGIntfClearDynamicBinds, msanServiceProfilePppoeIARateLimit=msanServiceProfilePppoeIARateLimit, msanQosProfileMatchInVlanId2=msanQosProfileMatchInVlanId2, msanServiceFlowProfileMatchDsMacDestAddr=msanServiceFlowProfileMatchDsMacDestAddr, msanSnmpTrapRecvUdpPort=msanSnmpTrapRecvUdpPort, msanPortSecurityPortVlanRowStatus=msanPortSecurityPortVlanRowStatus, msanAlarmPanelAdminState=msanAlarmPanelAdminState, msanSystem=msanSystem, msanMacAclTable=msanMacAclTable, msanMvrConfigRowStatus=msanMvrConfigRowStatus, msanQosProfileOutCdrBurstSize=msanQosProfileOutCdrBurstSize, msanSwitchIGMPSnoopingVlanEntry=msanSwitchIGMPSnoopingVlanEntry, msanAppRateLimitMnState=msanAppRateLimitMnState, msanMvrDvlanRmOuterTagStatus=msanMvrDvlanRmOuterTagStatus, msanDhcpRaPortMeter=msanDhcpRaPortMeter, msanCpeIntfPortOverrideCos=msanCpeIntfPortOverrideCos, msanDslSpecificMaxSnrmUs=msanDslSpecificMaxSnrmUs, msanIgmpSnoopingTable=msanIgmpSnoopingTable, msanAlarmPanelIndex=msanAlarmPanelIndex, msanBoardConfRequiredId=msanBoardConfRequiredId, msanIgmpPortStatRxQuery=msanIgmpPortStatRxQuery, PortMask=PortMask, msanMlinecGlobal=msanMlinecGlobal, msanMulticastIntfVlanStaticGroupTable=msanMulticastIntfVlanStaticGroupTable, msanQosProfileMatchOutIpDestAddr=msanQosProfileMatchOutIpDestAddr, msanSntpTzDstStartTime=msanSntpTzDstStartTime, msanServiceProfileDhcpRaRemoteId=msanServiceProfileDhcpRaRemoteId, msanFilteringAttachedFilterTable=msanFilteringAttachedFilterTable, msanIPSGIntfFilteringMode=msanIPSGIntfFilteringMode, msanMulticastAclListGroupRowStatus=msanMulticastAclListGroupRowStatus, msanServiceProfileAtmVci=msanServiceProfileAtmVci, msanServiceFlowProfileMatchDsUdpDstPort=msanServiceFlowProfileMatchDsUdpDstPort, msanServiceFlowProfileMatchUsSPcp=msanServiceFlowProfileMatchUsSPcp, msanFilteringRuleResponse=msanFilteringRuleResponse, msanFilteringRuleFromMacMask=msanFilteringRuleFromMacMask, msanForwardingDbGlobal=msanForwardingDbGlobal, msanQosIntfProfileEntry=msanQosIntfProfileEntry, msanDslSpecificRaDsNrmUs=msanDslSpecificRaDsNrmUs, msanMacTableLength=msanMacTableLength, msanMacSgPortTable=msanMacSgPortTable, msanServiceFlowProfileMatchDsIpCsc=msanServiceFlowProfileMatchDsIpCsc, msanDslSpecificMinSnrmDs=msanDslSpecificMinSnrmDs, msanPortStormControlTable=msanPortStormControlTable, msanDslSpecificMaxDelayDs=msanDslSpecificMaxDelayDs, msanCpeServiceEntry=msanCpeServiceEntry, msanMulticastAclListVlanGroupIpAddr=msanMulticastAclListVlanGroupIpAddr, msanSfpInfoInterfaceType=msanSfpInfoInterfaceType, msanServiceFlowProfileMatchUsIpDropPrecedence=msanServiceFlowProfileMatchUsIpDropPrecedence, msanPppLocalIpAddress=msanPppLocalIpAddress, msanMacSgPortViolationsCounter=msanMacSgPortViolationsCounter, msanRadiusServerSecret=msanRadiusServerSecret, msanFilteringRuleRowStatus=msanFilteringRuleRowStatus, msanServiceFlowProfileDsMarkPcp=msanServiceFlowProfileDsMarkPcp, msanDhcpRaCircuitType=msanDhcpRaCircuitType, msanDVlanConfigRowStatus=msanDVlanConfigRowStatus, msanIsaTalPatternMatchVlanId=msanIsaTalPatternMatchVlanId, msanStpCstPortTable=msanStpCstPortTable, msanFilteringAssignFilterRowStatus=msanFilteringAssignFilterRowStatus, msanIsaPortLoginUserPatternMask=msanIsaPortLoginUserPatternMask, msanDslSpecificPhyRUs=msanDslSpecificPhyRUs, msanL2cpProfileProtocolTable=msanL2cpProfileProtocolTable, msanServiceProfileDhcpRaTrustClients=msanServiceProfileDhcpRaTrustClients, msanProfileConfigStatus=msanProfileConfigStatus, msanIgmpPortStatRxV1=msanIgmpPortStatRxV1, msanErrorDisable=msanErrorDisable, products=products, msanAppRateLimitDhcp=msanAppRateLimitDhcp, msanServiceFlowProfileMatchDsSVlanIdRange=msanServiceFlowProfileMatchDsSVlanIdRange, msanCpeTrafficName=msanCpeTrafficName, msanSystemSwUpgradeProtocolPortId=msanSystemSwUpgradeProtocolPortId, msanDhcpRaPortOpt82UnicastExtStatus=msanDhcpRaPortOpt82UnicastExtStatus, msanIpAclRuleTable=msanIpAclRuleTable, msanIsaTalPatternMatchEntry=msanIsaTalPatternMatchEntry, msanIPSGIpv4PortStaticBindRowStatus=msanIPSGIpv4PortStaticBindRowStatus, msanAdslAturPhysExtnChanPerfCD=msanAdslAturPhysExtnChanPerfCD, msanQosProfileMatchInSrcIpv6AddressMaskLen=msanQosProfileMatchInSrcIpv6AddressMaskLen, msanDhcpv6RaPortVlanConfigTable=msanDhcpv6RaPortVlanConfigTable, msanAcsClientStatus=msanAcsClientStatus, msanMulticastAclGroupIpAddr=msanMulticastAclGroupIpAddr, msanDiagnosticsTempCurrent=msanDiagnosticsTempCurrent, msanDslPsdMaskUsType=msanDslPsdMaskUsType, msanEapsDomainTable=msanEapsDomainTable, msanDhcpRaVlanOpt82UnicastExtStatus=msanDhcpRaVlanOpt82UnicastExtStatus, msanSwitchIGMPProxyVlanIpAddr=msanSwitchIGMPProxyVlanIpAddr, msanDslSpecificL2Atpr=msanDslSpecificL2Atpr, msanDslPsdMaskDsName=msanDslPsdMaskDsName, msanCpeIntfPortPowerMode=msanCpeIntfPortPowerMode, msanMulticastAccessListGroupRowStatus=msanMulticastAccessListGroupRowStatus, msanIsaPortStatAuthenTimeoutExpired=msanIsaPortStatAuthenTimeoutExpired, msanBridgeCCXRowStatus=msanBridgeCCXRowStatus, msanAdslAtucPhysExtnTxAtmCellCounter=msanAdslAtucPhysExtnTxAtmCellCounter, msanServiceFlowProfileUsMarkDscp=msanServiceFlowProfileUsMarkDscp, msanSwitchIGMPSnoopingIntfFastLeaveAdminMode=msanSwitchIGMPSnoopingIntfFastLeaveAdminMode, msanCpeTrafficFlowCntrlMode=msanCpeTrafficFlowCntrlMode, msanVDSLProfileEntry=msanVDSLProfileEntry, msanSfpDiagnosticsTxPowerMin=msanSfpDiagnosticsTxPowerMin, msanIsaPortStatEntry=msanIsaPortStatEntry, msanBoardDescription=msanBoardDescription, msanSfpDiagnosticsTempCurrent=msanSfpDiagnosticsTempCurrent, msanMulticastGroupEntry=msanMulticastGroupEntry, msanAuthenticationListMethod3=msanAuthenticationListMethod3, msanPortAtmPvcVci=msanPortAtmPvcVci, msanPortVlanMode=msanPortVlanMode, msanSystemLogsUploadStatus=msanSystemLogsUploadStatus, msanDhcpRaPortConfigTable=msanDhcpRaPortConfigTable, msanServiceFlowProfileMatchUsMacDestMask=msanServiceFlowProfileMatchUsMacDestMask, msanStpMstVlanTable=msanStpMstVlanTable, msanCpeTrafficEntry=msanCpeTrafficEntry, msanCpeIntfPortTable=msanCpeIntfPortTable, msanIgmpSnoopingGroupLimit=msanIgmpSnoopingGroupLimit, msanPortSecurityStatMacMacAddress=msanPortSecurityStatMacMacAddress, msanQosProfileMatchInIpTosBits=msanQosProfileMatchInIpTosBits, msanIpAclRuleCos=msanIpAclRuleCos, msanRadiusServerConfigEntry=msanRadiusServerConfigEntry, msanPppoeIaPortStatisticsEntry=msanPppoeIaPortStatisticsEntry, msanErrorDisablePortTimeLeft=msanErrorDisablePortTimeLeft, msanAdslLineExtnAtucCurrOutputPwr=msanAdslLineExtnAtucCurrOutputPwr, PYSNMP_MODULE_ID=msan, msanCpeTrafficTable=msanCpeTrafficTable, msanAdslLineExtnTransAtucActual=msanAdslLineExtnTransAtucActual, msanDslSpecificRfiBands=msanDslSpecificRfiBands, msanMvrPortTable=msanMvrPortTable, msanDhcpRaStatFrameUnsync=msanDhcpRaStatFrameUnsync, msanAuthenticationListCreate=msanAuthenticationListCreate, msanPppGlobal=msanPppGlobal, msanAdslAtucPhysExtnChanPerfCU=msanAdslAtucPhysExtnChanPerfCU, msanMulticastAccessListIntfEntry=msanMulticastAccessListIntfEntry, msanPortMirroringMemberEntry=msanPortMirroringMemberEntry, msanUserConfigCheckPassword=msanUserConfigCheckPassword, msanQosProfileMatchInIpPrecedence=msanQosProfileMatchInIpPrecedence, msanIsaTalPortMatchMacSrcMask=msanIsaTalPortMatchMacSrcMask, msanIPSGIpv6PortStaticBindMacAddress=msanIPSGIpv6PortStaticBindMacAddress, msanCliScriptTable=msanCliScriptTable, msanBoardConfSerialNr=msanBoardConfSerialNr, msanAlarmPanelInputTable=msanAlarmPanelInputTable, msanMulticastProfileStaticGroupIpAddr=msanMulticastProfileStaticGroupIpAddr, msanIsaTalPortMatchDhcpOpt60VendorId=msanIsaTalPortMatchDhcpOpt60VendorId, msanServiceFlowProfileMatchUsUdpSrcPort=msanServiceFlowProfileMatchUsUdpSrcPort, msanMulticastAccessListGroupTable=msanMulticastAccessListGroupTable, msanLagGlobal=msanLagGlobal, msanCpeServiceId=msanCpeServiceId, msanQosProfileMatchOutVlanId=msanQosProfileMatchOutVlanId, msanIgmpPortStatRxError=msanIgmpPortStatRxError, msanDiagnosticsTestActivity=msanDiagnosticsTestActivity, msanAdsl=msanAdsl, msanCpeIntfTypeRowStatus=msanCpeIntfTypeRowStatus, msanSecurityProfileIpSg=msanSecurityProfileIpSg, msanAuthenticationListTable=msanAuthenticationListTable, msanLagDetailedIfIndex=msanLagDetailedIfIndex, msanIsaTalPortMatchDhcpOpt82RemoteId=msanIsaTalPortMatchDhcpOpt82RemoteId, msanDiagnosticsErrorProbableCause=msanDiagnosticsErrorProbableCause, msanEnergyMeterIpAddress=msanEnergyMeterIpAddress, msanAdslAtucMSGds=msanAdslAtucMSGds, msanSfpDiagnosticsTable=msanSfpDiagnosticsTable, msanPortSecurityStatMacEntry=msanPortSecurityStatMacEntry, msanAdslAturPhysExtnTsspsDs=msanAdslAturPhysExtnTsspsDs, msanAdslLineExtnPMConfPMSF=msanAdslLineExtnPMConfPMSF, msanLagEntry=msanLagEntry, msanMacAclRuleAssignVlanId2=msanMacAclRuleAssignVlanId2, msanMacTableCAMIndex=msanMacTableCAMIndex, msanServiceFlowProfileMatchDsIpDestMask=msanServiceFlowProfileMatchDsIpDestMask, msanPppoeIaStatPADT=msanPppoeIaStatPADT, msanDhcpv6RaStatRelayReply=msanDhcpv6RaStatRelayReply, msanPortMirroringSessionId=msanPortMirroringSessionId, msanDiagnosticsErrorCode=msanDiagnosticsErrorCode, msanAdslAtucPhysExtnDeltLastTxState=msanAdslAtucPhysExtnDeltLastTxState, msanIpAclProtection=msanIpAclProtection, msanAdslAtucPhysExtnDataBoostStatus=msanAdslAtucPhysExtnDataBoostStatus, msanServiceProfileServiceFlowProfileName=msanServiceProfileServiceFlowProfileName, msanMvrPortAdminMode=msanMvrPortAdminMode, msanIgmpSnoopingIntfFilter=msanIgmpSnoopingIntfFilter, msanDhcpRaPortVlanConfigRowStatus=msanDhcpRaPortVlanConfigRowStatus, msanIgmpPortStatTxV1=msanIgmpPortStatTxV1, msanDhcpv6RaStatFrameError=msanDhcpv6RaStatFrameError, msanIgmpStatRxBlockByIgmpFilter=msanIgmpStatRxBlockByIgmpFilter, msanBoardConfSwBuildTime=msanBoardConfSwBuildTime, msanShelfIdConf=msanShelfIdConf, msanPppoeIaStatistics=msanPppoeIaStatistics, msanDhcpv6RaPortVlanRemoteIdEnterpriseNum=msanDhcpv6RaPortVlanRemoteIdEnterpriseNum, msanPortMirroringMemberSrcPort=msanPortMirroringMemberSrcPort, msanSecurityProfileName=msanSecurityProfileName, msanSyncSourceType=msanSyncSourceType, msanCpeServiceRowStatus=msanCpeServiceRowStatus, msanQosProfileMatchOutSrcIpv6Address=msanQosProfileMatchOutSrcIpv6Address, msanUserConfig=msanUserConfig, msanFilteringRuleToIp=msanFilteringRuleToIp, msanDslSpecificDpboEsCmB=msanDslSpecificDpboEsCmB, msanSfpDiagnosticsRxPowerStatus=msanSfpDiagnosticsRxPowerStatus, msanEnergyMeterFwVersion=msanEnergyMeterFwVersion, msanCliScriptName=msanCliScriptName, msanIgmpStatGlobal=msanIgmpStatGlobal, msanCpeTypeEntry=msanCpeTypeEntry, msanQosProfileMatchOutIpTosMask=msanQosProfileMatchOutIpTosMask, msanPortVlanTable=msanPortVlanTable, msanDhcpv6PortRaStatAdvertise=msanDhcpv6PortRaStatAdvertise, msanSfpDiagnosticsTempMax=msanSfpDiagnosticsTempMax, msanIsaTalPortMatchVlanId=msanIsaTalPortMatchVlanId, msanIsaTalPatternMatchDhcpOpt61ClientId=msanIsaTalPatternMatchDhcpOpt61ClientId, msanServiceFlowProfileStatus=msanServiceFlowProfileStatus, msanCpeServiceCMltcstMode=msanCpeServiceCMltcstMode, msanIsaTalPortMatchMacSrcAddr=msanIsaTalPortMatchMacSrcAddr, msanCosMapIntfTrustEntry=msanCosMapIntfTrustEntry, msanBoardConfTable=msanBoardConfTable, msanAppRateLimitEntry=msanAppRateLimitEntry, msanQosProfileMatchInMacSrcMask=msanQosProfileMatchInMacSrcMask, msanDhcpv6RaStatRequest=msanDhcpv6RaStatRequest, msanIpAclRuleIndex=msanIpAclRuleIndex, msanDhcpRaStatNAK=msanDhcpRaStatNAK, msanDslSpecificUpboUs4b=msanDslSpecificUpboUs4b, msanMacTableCAMTable=msanMacTableCAMTable, msanLag=msanLag, msanAdslLineExtnDsBinSnrUpdate=msanAdslLineExtnDsBinSnrUpdate, msanIPSGPortBindCurrentIfIndex=msanIPSGPortBindCurrentIfIndex, msanPortSecurityStatMacVlanId=msanPortSecurityStatMacVlanId, msanMvrMulticastGroupTable=msanMvrMulticastGroupTable, msanArpInspectionPortStatDroppedFrames=msanArpInspectionPortStatDroppedFrames, msanDhcpRaPortOpt82=msanDhcpRaPortOpt82, msanMacAclProtection=msanMacAclProtection, msanCpeServiceCVlanId=msanCpeServiceCVlanId, msanIsaPortStatAuthorTimeoutExpired=msanIsaPortStatAuthorTimeoutExpired, msanIPSGPortBindCurrentEntry=msanIPSGPortBindCurrentEntry, msanAdslAtucPhysExtnChanPerfBE=msanAdslAtucPhysExtnChanPerfBE, msanIsaRadiusServerTimeout=msanIsaRadiusServerTimeout, msanPortBroadcastControlMode=msanPortBroadcastControlMode, msanVlanProfileCVid=msanVlanProfileCVid, msanDhcpv6RaStatOversizeError=msanDhcpv6RaStatOversizeError, msanMacAclRuleSVlanIdRangeEnd=msanMacAclRuleSVlanIdRangeEnd, msanAdslLineExtnUtopiaL2TxAddrSecond=msanAdslLineExtnUtopiaL2TxAddrSecond, msanAdslAtucPhysExtnChanPerfCD=msanAdslAtucPhysExtnChanPerfCD, msanQosIntfProfileRowStatus=msanQosIntfProfileRowStatus, msanBoardParentNr=msanBoardParentNr, msanIgmpStatRxV2Join=msanIgmpStatRxV2Join, msanMulticastGlobal=msanMulticastGlobal, msanSwitchMFDBDescription=msanSwitchMFDBDescription, msanChassisId=msanChassisId, msanIpAclRuleCVlanIdRangeStart=msanIpAclRuleCVlanIdRangeStart, msanXdsl2LineAlarmConfTempProtection=msanXdsl2LineAlarmConfTempProtection, msanEnergyMeterSerialNo=msanEnergyMeterSerialNo, msanDiagnosticsErrorEntry=msanDiagnosticsErrorEntry, msanQosProfileMatchOutL4DestPort=msanQosProfileMatchOutL4DestPort, msanMulticastAclListEntry=msanMulticastAclListEntry, msanSwitchIGMPProxyVlanRowStatus=msanSwitchIGMPProxyVlanRowStatus, msanAdslAturPhysExtnChanPerfBE=msanAdslAturPhysExtnChanPerfBE, msanPortAtmPvcRowStatus=msanPortAtmPvcRowStatus, msanPppoeIAPortTable=msanPppoeIAPortTable)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanIgmpPortStatRxBlockByIgmpFilter=msanIgmpPortStatRxBlockByIgmpFilter, msanDslSpecificUpboUs4a=msanDslSpecificUpboUs4a, msanDhcpv6RaPortRemoteIdEnterpriseNum=msanDhcpv6RaPortRemoteIdEnterpriseNum, msanMulticastAclListVlanGroupRowStatus=msanMulticastAclListVlanGroupRowStatus, msanArpInspectionVlanTable=msanArpInspectionVlanTable, Xdsl2PsdMaskDs=Xdsl2PsdMaskDs, msanQosProfileMatchOutDestIpv6Address=msanQosProfileMatchOutDestIpv6Address, msanMulticastIntfStaticGroupTable=msanMulticastIntfStaticGroupTable, msanRadiusServerAddress=msanRadiusServerAddress, msanPortMirroring=msanPortMirroring, msanMacSgPortStatus=msanMacSgPortStatus, msanAdslAtucPhysExtnPsdMaskMode=msanAdslAtucPhysExtnPsdMaskMode, msanIsaTalPatternMatchDhcpOpt61ClientIdMacAddr=msanIsaTalPatternMatchDhcpOpt61ClientIdMacAddr, msanDslSpecificL2Time=msanDslSpecificL2Time, msanIsaPortAuthentication=msanIsaPortAuthentication, msanMulticastProfile=msanMulticastProfile, msanStormControlGlobal=msanStormControlGlobal, msanDiagnosticsTempSensorID=msanDiagnosticsTempSensorID, msanCpeApiMajorVersion=msanCpeApiMajorVersion, msanIsaRadiusServerRowStatus=msanIsaRadiusServerRowStatus, msanDslSpecificMinProtectionUs=msanDslSpecificMinProtectionUs, msanAddressLearningMode=msanAddressLearningMode, msanResetWithDelay=msanResetWithDelay, msanIsaTalPatternMatchLoginMask=msanIsaTalPatternMatchLoginMask, msanDhcpRaOpt82CircuitIdStatus=msanDhcpRaOpt82CircuitIdStatus, msanIpAclRuleVlanIdRangeStart=msanIpAclRuleVlanIdRangeStart, msanDiagnosticsTempSensorName=msanDiagnosticsTempSensorName, msanStpCstExtPortPathCost=msanStpCstExtPortPathCost, msanMvrMulticastGroupEndIp=msanMvrMulticastGroupEndIp, msanIgmpStatRxV3Report=msanIgmpStatRxV3Report, msanSwBootPackageName=msanSwBootPackageName, msanQosProfileMatchOutIpTosBits=msanQosProfileMatchOutIpTosBits, msanIsaPortStatAuthorReqRejected=msanIsaPortStatAuthorReqRejected, msanIPSGBindingsEntry=msanIPSGBindingsEntry, msanDslSpecificClassMask=msanDslSpecificClassMask, msanAdslAtucPhysExtnSeltUpMgnAtRate=msanAdslAtucPhysExtnSeltUpMgnAtRate, msanAdslLineExtnAction=msanAdslLineExtnAction, msanFilteringAssignFilterDscp=msanFilteringAssignFilterDscp, msanMulticastAclListVlanGroupEntry=msanMulticastAclListVlanGroupEntry, msanSync=msanSync, msanPortMirroringGlobal=msanPortMirroringGlobal, msanIpAclRuleDestIpv6Address=msanIpAclRuleDestIpv6Address, msanFilteringFilterRowStatus=msanFilteringFilterRowStatus, msanDslSeltStatusNumTonesUs=msanDslSeltStatusNumTonesUs, msanIsaTalPatternMatchMacSrcMask=msanIsaTalPatternMatchMacSrcMask, msanResetDelay=msanResetDelay, msanMacTablePort=msanMacTablePort, msanIPSGIpv6PortStaticBindIpAddress=msanIPSGIpv6PortStaticBindIpAddress, msanAdslAturPhysExtnConfig=msanAdslAturPhysExtnConfig, msanDslSpecificDpboEsCmA=msanDslSpecificDpboEsCmA, msanAdslAtucPhysExtnSeltLoopGauge=msanAdslAtucPhysExtnSeltLoopGauge, msanIPSGIpv6AdminMode=msanIPSGIpv6AdminMode, msanSecurityProfileRowStatus=msanSecurityProfileRowStatus, msanServiceProfileL2cpProfileName=msanServiceProfileL2cpProfileName, msanAppRateLimitIgmp=msanAppRateLimitIgmp, msanServiceFlowProfileDsPdr=msanServiceFlowProfileDsPdr, msanQosIntfProfileTable=msanQosIntfProfileTable, msanDslSpecificRaDsTimeUs=msanDslSpecificRaDsTimeUs, msanBoardConfEntry=msanBoardConfEntry, msanAdslAturPhysExtnChanPerfCU=msanAdslAturPhysExtnChanPerfCU, msanDslPsdMaskDsType=msanDslPsdMaskDsType, msanPppoeIAPortRemoteId=msanPppoeIAPortRemoteId, msanServiceProfileSecurityProfileName=msanServiceProfileSecurityProfileName, msanServiceFlowProfileUsCdrBurstSize=msanServiceFlowProfileUsCdrBurstSize, msanMvrDvlanEthertypeRewriteStatus=msanMvrDvlanEthertypeRewriteStatus, msanServiceFlowProfileName=msanServiceFlowProfileName, msanErrorDisablePortStatus=msanErrorDisablePortStatus, msanVlanProfileTable=msanVlanProfileTable, msanPortVlanRemarkAdminTable=msanPortVlanRemarkAdminTable, msanIPSGGlobal=msanIPSGGlobal, msanPortSecurityStatMacRowStatus=msanPortSecurityStatMacRowStatus, msanMacAclRuleAssignCVlanId=msanMacAclRuleAssignCVlanId, msanMvrMulticastGroupEntry=msanMvrMulticastGroupEntry, msanSntpTzDstStartWeek=msanSntpTzDstStartWeek, msanMulticastIntfStaticGroupEntry=msanMulticastIntfStaticGroupEntry, msanQosProfileMatchOutL4SrcPort=msanQosProfileMatchOutL4SrcPort, msanQosProfileInCdrBurstSize=msanQosProfileInCdrBurstSize, msanIgmpPortStatRxBlockByIgmpVersion=msanIgmpPortStatRxBlockByIgmpVersion, msanDhcpv6RaVlanInterfaceIdStandard=msanDhcpv6RaVlanInterfaceIdStandard, msanAppRateLimitPppoe=msanAppRateLimitPppoe, msanMacAclId=msanMacAclId, msanReservePackage=msanReservePackage, msanSwSteerVersion=msanSwSteerVersion, msanL2cpProfileProtocolRowStatus=msanL2cpProfileProtocolRowStatus, msanAdslLineExtnTable=msanAdslLineExtnTable, msanAdslAturPhysExtnDeltQLNpsds=msanAdslAturPhysExtnDeltQLNpsds, msanSfpDiagnosticsEntry=msanSfpDiagnosticsEntry, msanSwCPLDVersion=msanSwCPLDVersion, msanIgmpPortStatRxV3Report=msanIgmpPortStatRxV3Report, msanMacSgPortEntry=msanMacSgPortEntry, msanPortSpeedDuplex=msanPortSpeedDuplex, msanDslSpecificTable=msanDslSpecificTable, msanFtpServer=msanFtpServer, msanDhcpv6RaStatSolicit=msanDhcpv6RaStatSolicit, msanSyncSourceId=msanSyncSourceId, msanL2cpProfile=msanL2cpProfile, msanCliScriptCreate=msanCliScriptCreate, msanDVlanTagMode=msanDVlanTagMode, msanErrorDisablePortCounter=msanErrorDisablePortCounter, msanPortDVlanConfigTable=msanPortDVlanConfigTable, msanDVlanConfigOutTagVlanId=msanDVlanConfigOutTagVlanId, msanCosQueueWeight=msanCosQueueWeight, msanEnergyMeterDateTime=msanEnergyMeterDateTime, msanAdslAtucPhysExtnModPhase=msanAdslAtucPhysExtnModPhase, msanInternalVlanId=msanInternalVlanId, msanIgmpStatRxBlockByMcastAcl=msanIgmpStatRxBlockByMcastAcl, msanQosProfileMatchInSrcIpv6Address=msanQosProfileMatchInSrcIpv6Address, msanAdslLineExtnClockType=msanAdslLineExtnClockType, msanDslSeltStatusFitError=msanDslSeltStatusFitError, msanServiceFlowProfileProtection=msanServiceFlowProfileProtection, msanPortNegCapAdvertisedBits=msanPortNegCapAdvertisedBits, msanAdslLineExtnUtopiaL2RxAddrSecond=msanAdslLineExtnUtopiaL2RxAddrSecond, msanCpe=msanCpe, msanDhcpRaStatRelease=msanDhcpRaStatRelease, msanFilteringAssignFilterCos=msanFilteringAssignFilterCos, msanIPSGIntfIpv6AdminMode=msanIPSGIntfIpv6AdminMode, msanServiceProfile=msanServiceProfile, msanDhcpRaPortVlanConfigEntry=msanDhcpRaPortVlanConfigEntry, msanSecurityProfileMacLimit=msanSecurityProfileMacLimit, msanIgmpPortStatTxV2Leave=msanIgmpPortStatTxV2Leave, msanDslSeltStatusNoiseMrgUs=msanDslSeltStatusNoiseMrgUs, msanShelfSize=msanShelfSize, msanDhcpRaFullModeVlanTable=msanDhcpRaFullModeVlanTable, msanAdslAtucPhysExtnRxAtmCellCounter=msanAdslAtucPhysExtnRxAtmCellCounter, msanArpInspection=msanArpInspection, msanCliScriptApplyStatus=msanCliScriptApplyStatus, msanDhcpv6RaStatRebind=msanDhcpv6RaStatRebind, msanCpeIntfPortPvid=msanCpeIntfPortPvid, msanSyncSourceSuitability=msanSyncSourceSuitability, msanSwBootPackageTable=msanSwBootPackageTable, msanSwBuildTime=msanSwBuildTime, msanSwBootPackageStatus=msanSwBootPackageStatus, msanL2cpProfileProtection=msanL2cpProfileProtection, msanServiceFlowProfileUsMarkPcp=msanServiceFlowProfileUsMarkPcp, msanSfpInfoPartNr=msanSfpInfoPartNr, msanSystemLogsUploadProtocol=msanSystemLogsUploadProtocol, msanNetworkDhcpSrvVendorSpecific=msanNetworkDhcpSrvVendorSpecific, msanSfpDiagnosticsTxBiasCrrMin=msanSfpDiagnosticsTxBiasCrrMin, msanIsaTalPatternMatchRowStatus=msanIsaTalPatternMatchRowStatus, msanL2cpProtocolRowStatus=msanL2cpProtocolRowStatus, msanAlarmPanelInputActiveLevel=msanAlarmPanelInputActiveLevel, msanServiceFlowProfileMatchDsMacDestMask=msanServiceFlowProfileMatchDsMacDestMask, msanFtpServerGlobal=msanFtpServerGlobal, msanSfpDiagnosticsVoltageMax=msanSfpDiagnosticsVoltageMax, msanIpAclRuleSVlanIdRangeStart=msanIpAclRuleSVlanIdRangeStart, msanSfpInfoEntry=msanSfpInfoEntry, msanIPSGPortBindCurrentIpAddressType=msanIPSGPortBindCurrentIpAddressType, si2000=si2000, msanDslSpecificDsPsdMask=msanDslSpecificDsPsdMask, msanAcs=msanAcs, msanAppRateLimitDhcpState=msanAppRateLimitDhcpState, msanVlanProfileStatus=msanVlanProfileStatus, msanServiceFlowProfileMatchDsIpSrcMask=msanServiceFlowProfileMatchDsIpSrcMask, msanBoardId=msanBoardId, msanNetworkDhcpClientVlanTable=msanNetworkDhcpClientVlanTable, msanServiceProfileDhcpRaOpt82Insert=msanServiceProfileDhcpRaOpt82Insert, msanDhcpRaStatTable=msanDhcpRaStatTable, msanNetworkDefaultGateway=msanNetworkDefaultGateway, msanDslSpecificUpboKLF=msanDslSpecificUpboKLF, msanArpInspectionVlanStatDroppedFrames=msanArpInspectionVlanStatDroppedFrames, msanCpeIntfServiceRowStatus=msanCpeIntfServiceRowStatus, msanAuthenticationGlobal=msanAuthenticationGlobal, msanAdslLineExtnServiceType=msanAdslLineExtnServiceType, msanEnergyMeter=msanEnergyMeter, msanFilteringFilterType=msanFilteringFilterType, msanAdslLineExtnUtopiaL2RxAddr=msanAdslLineExtnUtopiaL2RxAddr, msanVlanGlobal=msanVlanGlobal, msanProfiles=msanProfiles, msanMvrConfigCVlanId=msanMvrConfigCVlanId, msanLagDetailedRowStatus=msanLagDetailedRowStatus, msanEnergyMeterCurrPower=msanEnergyMeterCurrPower, msanFilteringFilterEntry=msanFilteringFilterEntry, msanDslSpecificEntry=msanDslSpecificEntry, msanSecurityProfileStatus=msanSecurityProfileStatus, msanServiceFlowProfileMatchDsAny=msanServiceFlowProfileMatchDsAny, msanAdslAturPhysExtnActPsdDs=msanAdslAturPhysExtnActPsdDs, msanPppoeIaPortStatInvalidFrames=msanPppoeIaPortStatInvalidFrames, msanIpAclRuleVlanId=msanIpAclRuleVlanId, msanMulticastAccessListName=msanMulticastAccessListName, msanAlarmPanelGlobal=msanAlarmPanelGlobal, msanUserConfigTable=msanUserConfigTable, msanDhcpRaStatDecline=msanDhcpRaStatDecline, msanStpGlobal=msanStpGlobal, msanIgmpStatRxQuery=msanIgmpStatRxQuery, msanAdslAtucPhysExtnIdleBertError=msanAdslAtucPhysExtnIdleBertError, msanMulticastProfileMvr=msanMulticastProfileMvr, msanPppoeIaStatPADS=msanPppoeIaStatPADS, msanStpBpduFilterTable=msanStpBpduFilterTable, msanIsaTalPatternMatchTable=msanIsaTalPatternMatchTable, msanAdslAtucPhysExtnDeltCurrStatus=msanAdslAtucPhysExtnDeltCurrStatus, msanSwitchIGMPSnoopingStaticIntfMulticastRouterMode=msanSwitchIGMPSnoopingStaticIntfMulticastRouterMode, msanQosProfileMatchInIpProtocol=msanQosProfileMatchInIpProtocol, msanDhcpRaOpt82ReplyMode=msanDhcpRaOpt82ReplyMode, msanPortMulticastControlMode=msanPortMulticastControlMode, msanEnergyMeterTcpPort=msanEnergyMeterTcpPort, msanAdslAtucPhysExtnDeltQLNpsus=msanAdslAtucPhysExtnDeltQLNpsus, msanQosProfileMatchInAny=msanQosProfileMatchInAny, msanDslSpecificSeltStatus=msanDslSpecificSeltStatus, msanRemoteAccessFilterAction=msanRemoteAccessFilterAction, msanDslSeltStatusLoopTermination=msanDslSeltStatusLoopTermination, msanPppoeIaVlanTable=msanPppoeIaVlanTable, msanArpInspectionPortTable=msanArpInspectionPortTable, msanMacAclRuleAssignSVlanId=msanMacAclRuleAssignSVlanId, msanCosQueueControlIntfBurstSize=msanCosQueueControlIntfBurstSize, msanVlanProfileNetworkPortCTag=msanVlanProfileNetworkPortCTag, msanDhcpRaVlanCircuitIdType=msanDhcpRaVlanCircuitIdType, msanSfp=msanSfp, msanPortTable=msanPortTable, msanIpAclRuleEgressIntf=msanIpAclRuleEgressIntf, msanStpBpduFilter=msanStpBpduFilter, msanDhcpRaVlanMode=msanDhcpRaVlanMode, msanMacAclIndex=msanMacAclIndex, msanStpMstPortTable=msanStpMstPortTable, msanAdslAtucPhysExtnSeltInfoValid=msanAdslAtucPhysExtnSeltInfoValid, iskratel=iskratel, msanAdslAtucPhysExtnExtendedPsdStatus=msanAdslAtucPhysExtnExtendedPsdStatus, msanFiltering=msanFiltering, msanIPSGBindMatchedFrames=msanIPSGBindMatchedFrames, msanServicePortProfileRowStatus=msanServicePortProfileRowStatus, msanServiceFlowProfileDsMarkDscp=msanServiceFlowProfileDsMarkDscp, msanMulticastProfileIgmpProxyIpAddress=msanMulticastProfileIgmpProxyIpAddress, msanIgmpPortStatRxBlockByMcastAcl=msanIgmpPortStatRxBlockByMcastAcl, msanEapsDomainSecondaryIfIndex=msanEapsDomainSecondaryIfIndex, msanAdslAtucPhysExtnBertError=msanAdslAtucPhysExtnBertError, msanAdslAtucPhysExtnSeltUpShannonCap=msanAdslAtucPhysExtnSeltUpShannonCap, msanPortMirroringDestPort=msanPortMirroringDestPort, msanBoardType=msanBoardType, msanDiagnosticsTempUnderheatThreshold=msanDiagnosticsTempUnderheatThreshold, msanQosStatistics=msanQosStatistics, msanL2cpProtocolMacDestAddr=msanL2cpProtocolMacDestAddr, msanDhcpRaVlanConfigTable=msanDhcpRaVlanConfigTable, msanSyncSourceActivity=msanSyncSourceActivity, msanDslSpecificMinSnrmUs=msanDslSpecificMinSnrmUs, msanDslSpecificSystemState=msanDslSpecificSystemState, msanDhcpv6PortRaStatRelease=msanDhcpv6PortRaStatRelease, msanMacAclRuleEgressIntf=msanMacAclRuleEgressIntf, msanAlarmPanelAudioAlarmPriority=msanAlarmPanelAudioAlarmPriority, msanVlanProfileSVid=msanVlanProfileSVid, msanEnergyMeterCoreVersion=msanEnergyMeterCoreVersion, msanIgmpStatRxBlockByMcastCac=msanIgmpStatRxBlockByMcastCac, msanIpAclRuleAssignCVlanId=msanIpAclRuleAssignCVlanId, msanSwComponentName=msanSwComponentName, msanIgmpPortStatRxV2Leave=msanIgmpPortStatRxV2Leave, msanDhcpv6RaPortVlanConfigEntry=msanDhcpv6RaPortVlanConfigEntry, msanDhcpRaVlanOpt82=msanDhcpRaVlanOpt82, msanPortVlanRemarkAdminEntry=msanPortVlanRemarkAdminEntry, msanDhcpv6RaPortConfigTable=msanDhcpv6RaPortConfigTable, msanAdslAtucPhysExtnDeltSNRMTus=msanAdslAtucPhysExtnDeltSNRMTus, msanBoardListType=msanBoardListType, msanIgmpSnoopingAdminState=msanIgmpSnoopingAdminState, msanIsaTalPortPatternMatchTable=msanIsaTalPortPatternMatchTable, msanMulticastIntfVlanStaticGroupRowStatus=msanMulticastIntfVlanStaticGroupRowStatus, msanAdslAturPhysExtnDeltHLOGpsus=msanAdslAturPhysExtnDeltHLOGpsus, msanAcsGlobal=msanAcsGlobal)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanSntpTzDstOffset=msanSntpTzDstOffset, msanServiceFlowProfileMatchUsIpDestMask=msanServiceFlowProfileMatchUsIpDestMask, msanEapsDomainCntrlVlanId=msanEapsDomainCntrlVlanId, msanQosProfileMatchOutDestIpv6AddressMaskLen=msanQosProfileMatchOutDestIpv6AddressMaskLen, msanDslSpecificRaDsTimeDs=msanDslSpecificRaDsTimeDs, msanAdslAtucPhysExtnPMState=msanAdslAtucPhysExtnPMState, msanPortUnicastControlMode=msanPortUnicastControlMode, msanMulticastAclListVlanGroupTable=msanMulticastAclListVlanGroupTable, msanSecurityAclProfileSequence=msanSecurityAclProfileSequence, msanDhcpv6RaPortState=msanDhcpv6RaPortState, msanFilteringRuleIcmType=msanFilteringRuleIcmType, msanSwitchMFDBVlanId=msanSwitchMFDBVlanId, msanDhcpRaPortRemoteId=msanDhcpRaPortRemoteId, VlanList=VlanList, msanIPSGPortBindCurrentIpAddress=msanIPSGPortBindCurrentIpAddress, msanDiagnosticsErrorObjectType=msanDiagnosticsErrorObjectType, msanIgmpSnooping=msanIgmpSnooping, msanSfpDiagnosticsSignal=msanSfpDiagnosticsSignal, msanSwitchIGMPSnoopingVlanFastLeaveAdminMode=msanSwitchIGMPSnoopingVlanFastLeaveAdminMode, msanIgmpStatRxV1=msanIgmpStatRxV1, msanNetworkDhcpClientLeaseObtained=msanNetworkDhcpClientLeaseObtained, msanRadiusServerMsgAuth=msanRadiusServerMsgAuth, msanIsaTalPatternMatchUserMask=msanIsaTalPatternMatchUserMask, msanIsaDasServerPort=msanIsaDasServerPort, msanServiceFlowProfileMatchUsIpCsc=msanServiceFlowProfileMatchUsIpCsc, msanDhcpv6RaStatInformRequest=msanDhcpv6RaStatInformRequest, msanBridgeCCXTable=msanBridgeCCXTable, msanCpeTypeName=msanCpeTypeName, msanQosProfileMatchOutEthertype=msanQosProfileMatchOutEthertype, msanEapsDomainName=msanEapsDomainName, msanIsaStatLoginUnsuccessfulReq=msanIsaStatLoginUnsuccessfulReq, msanSfpDiagnosticsTxBiasCrrMax=msanSfpDiagnosticsTxBiasCrrMax, msanDslSpecificRaUsNrmDs=msanDslSpecificRaUsNrmDs, msanSwitchIGMPSnoopingVlanAdminState=msanSwitchIGMPSnoopingVlanAdminState, msanMulticastProfileDescription=msanMulticastProfileDescription, msanServiceFlowProfileEntry=msanServiceFlowProfileEntry, msanOtherInfo=msanOtherInfo, msanDhcpRaFullModeVlanRowStatus=msanDhcpRaFullModeVlanRowStatus, msanEnergyMeterEnergySumTable=msanEnergyMeterEnergySumTable, msanIsaTalPatternMatchName=msanIsaTalPatternMatchName, msanAdslAturPhysExtnG9941VendorId=msanAdslAturPhysExtnG9941VendorId, msanIgmpPortStatTxQuery=msanIgmpPortStatTxQuery, msanQosProfileMatchOutMacDestAddr=msanQosProfileMatchOutMacDestAddr, msanRemoteAccessGlobal=msanRemoteAccessGlobal, msanDhcpRaStatRequest=msanDhcpRaStatRequest, msanAdslAturPhysExtnDeltLastTxState=msanAdslAturPhysExtnDeltLastTxState, msanSwitchIGMPVlanCurrentMrouterEntry=msanSwitchIGMPVlanCurrentMrouterEntry, msanL2cpProtocolSubtype=msanL2cpProtocolSubtype, msanMacAclStatus=msanMacAclStatus, msanSecurityProfileMacForward=msanSecurityProfileMacForward, msanPort=msanPort, msanServiceFlowProfileMatchDsMacSrcAddr=msanServiceFlowProfileMatchDsMacSrcAddr, msanEnergyMeterGlobal=msanEnergyMeterGlobal, msanAdslAturPhysExtnPsdMaskMode=msanAdslAturPhysExtnPsdMaskMode, msanSystemSwUpgradeUserName=msanSystemSwUpgradeUserName, msanDhcpv6PortRaStatDecline=msanDhcpv6PortRaStatDecline, msanIgmpPortStatEntry=msanIgmpPortStatEntry, msanQosProfilePriority=msanQosProfilePriority, msanServiceFlowProfileMatchUsCVlanIdRange=msanServiceFlowProfileMatchUsCVlanIdRange, msanQosProfileMatchInIpDestAddr=msanQosProfileMatchInIpDestAddr, msanDiagnosticsTestEntry=msanDiagnosticsTestEntry, msanDhcpv6RaPortStatTable=msanDhcpv6RaPortStatTable, msanAdslAtucPhysExtnDeltQLNMTus=msanAdslAtucPhysExtnDeltQLNMTus, msanAppRateLimitMn=msanAppRateLimitMn, msanServiceFlowProfileTable=msanServiceFlowProfileTable, msanIPSGIpv4PortStaticBindIpAddress=msanIPSGIpv4PortStaticBindIpAddress, msanDhcpv6RaPortStatEntry=msanDhcpv6RaPortStatEntry, msanDslSpecificMinProtectionDs=msanDslSpecificMinProtectionDs, msanSwBootPackageEntry=msanSwBootPackageEntry, msanNetworkDhcpClientVlanEntry=msanNetworkDhcpClientVlanEntry, msanDhcpv6RaVlanState=msanDhcpv6RaVlanState, msanQosProfileMatchOutIpProtocol=msanQosProfileMatchOutIpProtocol, msanXdsl2LineConfTemplateEntry=msanXdsl2LineConfTemplateEntry, msanAdslAturPhysExtnDeltQLNMTds=msanAdslAturPhysExtnDeltQLNMTds, msanMulticastAclIntfListEntry=msanMulticastAclIntfListEntry, msanFilteringFilterId=msanFilteringFilterId, msanBoardGlobal=msanBoardGlobal, msanSwitchMFDBForwardingPortMask=msanSwitchMFDBForwardingPortMask, msanSntpTzDstEndDayInWeek=msanSntpTzDstEndDayInWeek, msanBoardConfType=msanBoardConfType, msanBoardListId=msanBoardListId, msanSwitchIGMPVlanCurrentMrouterTable=msanSwitchIGMPVlanCurrentMrouterTable, msanCosMapIntfTrustMode=msanCosMapIntfTrustMode, msanAtm=msanAtm, msanIsaTalPortMatchEthertype=msanIsaTalPortMatchEthertype, msanRadiusServerCurrentMode=msanRadiusServerCurrentMode, msanCpeIntfPortOverrideVid=msanCpeIntfPortOverrideVid, msanIsa=msanIsa, msanFilteringRuleTos=msanFilteringRuleTos, msanSyncTable=msanSyncTable, msanErrorDisableMacSgRecoveryStatus=msanErrorDisableMacSgRecoveryStatus, msanAlarmPanelIndicatorEntry=msanAlarmPanelIndicatorEntry, msanMvrDvlanTable=msanMvrDvlanTable, msanAdslAtucPhysExtnTestArray=msanAdslAtucPhysExtnTestArray, msanEnergyMeterFwCreationDate=msanEnergyMeterFwCreationDate, msanSystemLogsUploadProtocolPortId=msanSystemLogsUploadProtocolPortId, msanCpeTypeTable=msanCpeTypeTable, msanDslSpecificUpboUs1b=msanDslSpecificUpboUs1b, msanStpSwitchConfigGroup=msanStpSwitchConfigGroup, msanFilteringRuleEtherProto=msanFilteringRuleEtherProto, msanL2cpProfileDescription=msanL2cpProfileDescription, msanIPSGIpv4PortStaticBindEntry=msanIPSGIpv4PortStaticBindEntry, msanSfpInfoWavelength=msanSfpInfoWavelength, msanMulticastProfileIgmpSnoopingSuppression=msanMulticastProfileIgmpSnoopingSuppression, msanMulticastAclListTable=msanMulticastAclListTable, msanServiceFlowProfileMatchDsTcpDestPort=msanServiceFlowProfileMatchDsTcpDestPort, msanSwitchAddressAgingTimeout=msanSwitchAddressAgingTimeout, msanSwIpmiVersion=msanSwIpmiVersion, msanDhcpRaStatus=msanDhcpRaStatus, msanIsaPortStatAuthorReqSent=msanIsaPortStatAuthorReqSent, msanFilteringRulePrec=msanFilteringRulePrec, msanEapsDomainProtVlanTable=msanEapsDomainProtVlanTable, msanPortSecurity=msanPortSecurity, msanIPSGClearDynamicBinds=msanIPSGClearDynamicBinds, msanPppAdminState=msanPppAdminState, msanMulticastAclIntfListRowStatus=msanMulticastAclIntfListRowStatus, msanQosPortProfileStatTable=msanQosPortProfileStatTable, msanQosProfileMatchOutIpSrcAddr=msanQosProfileMatchOutIpSrcAddr, msanDiagnosticsTestType=msanDiagnosticsTestType, msanDslSpecificUpboUs1a=msanDslSpecificUpboUs1a, msanAppRateLimitStp=msanAppRateLimitStp, msanMulticastAccessListIntfTable=msanMulticastAccessListIntfTable, msanAdslAturSATN=msanAdslAturSATN, msanServicePortProfileEntry=msanServicePortProfileEntry, msanSystemLogsUploadUserName=msanSystemLogsUploadUserName, msanPortMirroringMemberTable=msanPortMirroringMemberTable, msanCpeIntfPortStatus=msanCpeIntfPortStatus, msanSystemSwUpgradeServerIpAddress=msanSystemSwUpgradeServerIpAddress, msanServiceFlowProfileMatchUsTcpDestPort=msanServiceFlowProfileMatchUsTcpDestPort, msanL2cpProtocolEthertype=msanL2cpProtocolEthertype, msanIgmpSnoopingFastLeaveAdminMode=msanIgmpSnoopingFastLeaveAdminMode, msanSwitchIGMPVlanStaticMrouterEnableState=msanSwitchIGMPVlanStaticMrouterEnableState, msanPppoeIARemoteIdStatus=msanPppoeIARemoteIdStatus, msanMvrConfigEntry=msanMvrConfigEntry, msanSfpInfoTable=msanSfpInfoTable, msanIsaPortStatTalMatchedFrames=msanIsaPortStatTalMatchedFrames, msanMvrDvlanEntry=msanMvrDvlanEntry, msanIpAclRuleEntry=msanIpAclRuleEntry, msanAdslLineExtnTransAturCap=msanAdslLineExtnTransAturCap, msanIPSGIpv6PortStaticBindEntry=msanIPSGIpv6PortStaticBindEntry, msanBoardSerialNr=msanBoardSerialNr, Xdsl2PsdMaskUs=Xdsl2PsdMaskUs, msanPppoeIaPortStatPADS=msanPppoeIaPortStatPADS, msanLagIndex=msanLagIndex, msanIPSGBindingsTable=msanIPSGBindingsTable, msanErrorDisablePortEntry=msanErrorDisablePortEntry, msanSfpDiagnosticsRxPowerMax=msanSfpDiagnosticsRxPowerMax, msanCpeServiceTaggedPorts=msanCpeServiceTaggedPorts, msanIpAclRuleCVlanId=msanIpAclRuleCVlanId, msanStpMstId=msanStpMstId, msanPortVlanStackPriority=msanPortVlanStackPriority, msanL2cpProfileVlanTable=msanL2cpProfileVlanTable, msanQosPortStatOutDroppedFrames=msanQosPortStatOutDroppedFrames, msanIPSG=msanIPSG, msanSystemSwUpgradeServerIpAddressType=msanSystemSwUpgradeServerIpAddressType, msanDiagnosticsErrorFilterEntry=msanDiagnosticsErrorFilterEntry, msanSfpDiagnosticsVoltageMin=msanSfpDiagnosticsVoltageMin, msanDiagnosticsTempOverheatThreshold=msanDiagnosticsTempOverheatThreshold, msanDhcpRaPortCircuitId=msanDhcpRaPortCircuitId, msanBridgeMacTableSize=msanBridgeMacTableSize, msanServiceFlowProfileMatchDsEthertype=msanServiceFlowProfileMatchDsEthertype, msanDslSpecificSelt=msanDslSpecificSelt, msanSystemSwUpgradeStatus=msanSystemSwUpgradeStatus, msanIgmpSnoopingLoggingVlanId=msanIgmpSnoopingLoggingVlanId, msanMacTableGlobal=msanMacTableGlobal, msanDhcpRaMode=msanDhcpRaMode, msanFilteringRuleToMac=msanFilteringRuleToMac, msanSwComponentEntry=msanSwComponentEntry, msanAdslAtucPhysExtnDeltHLOGpsus=msanAdslAtucPhysExtnDeltHLOGpsus, msanXdsl2LineConfTempStatus=msanXdsl2LineConfTempStatus, msanPortMirroringTable=msanPortMirroringTable, msanMulticastAclListGroupEntry=msanMulticastAclListGroupEntry, msanStormControl=msanStormControl, msanPortMulticastControlThreshold=msanPortMulticastControlThreshold, msanPppoeIACircuitIdStatus=msanPppoeIACircuitIdStatus, msanServiceFlowProfileMatchUsEthertype=msanServiceFlowProfileMatchUsEthertype, msanAdslAtucPhysExtnSeltTerminationResp=msanAdslAtucPhysExtnSeltTerminationResp, msanMvrMulticastGroupStartIp=msanMvrMulticastGroupStartIp, msanEapsDomainEntry=msanEapsDomainEntry, msanPortVlanRemarkEntry=msanPortVlanRemarkEntry, msanMacTableType=msanMacTableType, msanPpp=msanPpp, msanQosProfileMatchInDestIpv6Address=msanQosProfileMatchInDestIpv6Address, msanIgmpPortStatTable=msanIgmpPortStatTable, msanStpMstVlanEntry=msanStpMstVlanEntry, msanSystemLogsUploadServerIpAddress=msanSystemLogsUploadServerIpAddress, msanServiceFlowProfileDsPdrBurstSize=msanServiceFlowProfileDsPdrBurstSize, msanIPSGBindType=msanIPSGBindType, msanFilteringAssignFilterVid=msanFilteringAssignFilterVid, msanStpCstPortPathCost=msanStpCstPortPathCost, msanIpAclIndex=msanIpAclIndex, msanPortDVlanMapOutTagVlanId=msanPortDVlanMapOutTagVlanId, msanBoardConfStatus=msanBoardConfStatus, msanShelfInfo=msanShelfInfo, msanSwComponentId=msanSwComponentId, msanBridgeCCXInterface2=msanBridgeCCXInterface2, msanDhcpRaGlobal=msanDhcpRaGlobal, msanArpInspectionAdminMode=msanArpInspectionAdminMode, msanIsaRadiusServerIpAddress=msanIsaRadiusServerIpAddress, msanDiagnosticsTestTimeMax=msanDiagnosticsTestTimeMax, msanBoardListTable=msanBoardListTable, msanDiagnosticsMaxFanSpeedLevel=msanDiagnosticsMaxFanSpeedLevel, msanIsaPortTalAutomaticReq=msanIsaPortTalAutomaticReq, msanPortSecurityStatMacIf=msanPortSecurityStatMacIf, msanAdslLineExtnTransAtucConfig=msanAdslLineExtnTransAtucConfig, msanAuthenticationListEntry=msanAuthenticationListEntry, msanBoardConfSwBuildReference=msanBoardConfSwBuildReference, msanIsaPortStatAuthenReqSent=msanIsaPortStatAuthenReqSent, msanInfo=msanInfo, msanPortVlanStackVlanId=msanPortVlanStackVlanId, msanMvrGlobal=msanMvrGlobal, msanDslSpecificUsPsdMask=msanDslSpecificUsPsdMask, msanSntp=msanSntp, msanDslSpecificMaxNomAtpDs=msanDslSpecificMaxNomAtpDs, msanSfpInfoManufacturingDate=msanSfpInfoManufacturingDate, msanSwBspVersion=msanSwBspVersion, msanDiagnosticsTestName=msanDiagnosticsTestName, msanDhcpRaStatACK=msanDhcpRaStatACK, msanSystemSwUpgradePath=msanSystemSwUpgradePath, msanIsaPortAuthorization=msanIsaPortAuthorization, msanDhcpRaPortMaxDataRate=msanDhcpRaPortMaxDataRate, msanMvrConfigMVlanId=msanMvrConfigMVlanId, msanPortSecurityStatMacTable=msanPortSecurityStatMacTable, msanServiceFlowProfileMatchUsVlanProfile=msanServiceFlowProfileMatchUsVlanProfile, msanSecurityProfileProtection=msanSecurityProfileProtection, msanAdslAturPhysExtnDeltHLOGMTds=msanAdslAturPhysExtnDeltHLOGMTds, msanFilteringRuleVid=msanFilteringRuleVid, msanSecurityProfileTable=msanSecurityProfileTable, msanFilteringAttachedFilterDirect=msanFilteringAttachedFilterDirect, msanPppoeIaPortStatPADO=msanPppoeIaPortStatPADO, msanSystemSwUpgradeUserPassword=msanSystemSwUpgradeUserPassword, msanFilteringRuleFromMask=msanFilteringRuleFromMask, msanDiagnosticsTestTable=msanDiagnosticsTestTable, msanRemoteAccess=msanRemoteAccess, msanSwitchIGMPSnoopingVlanGroupMembershipInterval=msanSwitchIGMPSnoopingVlanGroupMembershipInterval, msanMvrConfigTable=msanMvrConfigTable, msanAdslAtucPhysExtnOpState=msanAdslAtucPhysExtnOpState, msanBoardConfActualId=msanBoardConfActualId, msanPortVlanRemarkRowStatus=msanPortVlanRemarkRowStatus, msanAdslAtucPhysExtnPilotTone=msanAdslAtucPhysExtnPilotTone, msanSfpDiagnosticsTempStatus=msanSfpDiagnosticsTempStatus, msanIPSGBindLeaseRemainingTime=msanIPSGBindLeaseRemainingTime, msanQosProfileMatchInIpDestMask=msanQosProfileMatchInIpDestMask, msanDhcpv6RaMode=msanDhcpv6RaMode, msanIPSGIpv6PortStaticBindMatchedFrames=msanIPSGIpv6PortStaticBindMatchedFrames, msanFilteringRuleTag=msanFilteringRuleTag, msanMacSgStatus=msanMacSgStatus, msanDiagnostics=msanDiagnostics, msanSwitchMFDBType=msanSwitchMFDBType, msanAlarmPanelSerialPortType=msanAlarmPanelSerialPortType, msanL2cpProfileName=msanL2cpProfileName, msanDslSeltStatusNumTonesDs=msanDslSeltStatusNumTonesDs, msanServiceFlowProfileDsCdrBurstSize=msanServiceFlowProfileDsCdrBurstSize, msanIpAclRuleVlanId2=msanIpAclRuleVlanId2)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanDslPsdMaskDsShape=msanDslPsdMaskDsShape, msanAdslAturPhysExtnSelfTestResult=msanAdslAturPhysExtnSelfTestResult, msanCosQueueEntry=msanCosQueueEntry, msanIpAclRuleSVlanIdRangeEnd=msanIpAclRuleSVlanIdRangeEnd, msanServiceFlowProfileDsCdr=msanServiceFlowProfileDsCdr, msanDslSpecificPhyRDs=msanDslSpecificPhyRDs, msanPppoeIaPortStatUnsutableFrames=msanPppoeIaPortStatUnsutableFrames, msanMacAclRuleSVlanIdRangeStart=msanMacAclRuleSVlanIdRangeStart, msanMacAclRuleIndex=msanMacAclRuleIndex, msanDiagnosticsErrorFilterTable=msanDiagnosticsErrorFilterTable, msanIsaPortStatAuthenReqRejected=msanIsaPortStatAuthenReqRejected, msanVlanProfileEntry=msanVlanProfileEntry, msanArpInspectionPortAdminMode=msanArpInspectionPortAdminMode, msanStpCstBridgePriority=msanStpCstBridgePriority, msanDiagnosticsTestTimeMin=msanDiagnosticsTestTimeMin, msanPortDVlanTagMode=msanPortDVlanTagMode, msanIpAclRuleRemoveSVlanId=msanIpAclRuleRemoveSVlanId, msanBoardTable=msanBoardTable, msanQosPortProfileStatQueueCurrent=msanQosPortProfileStatQueueCurrent, msanSfpDiagnosticsVoltageStatus=msanSfpDiagnosticsVoltageStatus, msanMulticastAccessListGroupIpAddr=msanMulticastAccessListGroupIpAddr, msanServiceFlowProfileUsMarkPcpValue=msanServiceFlowProfileUsMarkPcpValue, msanFilteringAssignFilterTable=msanFilteringAssignFilterTable, msanArpInspectionVlanAdminMode=msanArpInspectionVlanAdminMode, msanSecurityProfileIpSgFilteringMode=msanSecurityProfileIpSgFilteringMode, msanAdslAturPhysExtnBitSwapCount=msanAdslAturPhysExtnBitSwapCount, msanSystemLogsUploadPath=msanSystemLogsUploadPath, msanDhcpv6PortRaStatOversizeError=msanDhcpv6PortRaStatOversizeError, msanSwitchIGMPSnoopingIntfMaxResponseTime=msanSwitchIGMPSnoopingIntfMaxResponseTime, msanNetworkDhcpSrvIpAddr=msanNetworkDhcpSrvIpAddr, msanIsaTalPortPatternMatchRowStatus=msanIsaTalPortPatternMatchRowStatus, msanIpAclRuleSrcMacAddr=msanIpAclRuleSrcMacAddr, msanSyncSourcePriority=msanSyncSourcePriority, msanSfpGlobal=msanSfpGlobal, msanIPSGAdminMode=msanIPSGAdminMode, msanCpeIntfPortId=msanCpeIntfPortId, msanPortEntry=msanPortEntry, msanAppRateLimitIgmpState=msanAppRateLimitIgmpState, msanMacTableCAMEntry=msanMacTableCAMEntry, msanAtmGlobal=msanAtmGlobal, msanMulticastAccessListGroupEntry=msanMulticastAccessListGroupEntry, msanEnergyMeterEnergySumValue=msanEnergyMeterEnergySumValue, msanFilteringRuleId=msanFilteringRuleId, msanMulticastProfileName=msanMulticastProfileName, msanAlarmPanelInputErrCode=msanAlarmPanelInputErrCode, msanStp=msanStp, msanDhcpv6RaStatSysError=msanDhcpv6RaStatSysError, msanQosProfileOutPdr=msanQosProfileOutPdr, msanQosProfileInPdrBurstSize=msanQosProfileInPdrBurstSize, msanVlanPortProfileEntry=msanVlanPortProfileEntry, msanDhcpv6RaStatRelease=msanDhcpv6RaStatRelease, msanServiceProfileRowStatus=msanServiceProfileRowStatus, msanDhcpv6PortRaStatReconfigure=msanDhcpv6PortRaStatReconfigure, msanSfpDiagnosticsTxBiasCrrCurrent=msanSfpDiagnosticsTxBiasCrrCurrent, msanDhcpRaFullModeVlanSrvIpAddr=msanDhcpRaFullModeVlanSrvIpAddr, msanServiceFlowProfile=msanServiceFlowProfile, msanIPSGIntfBindsLimitND=msanIPSGIntfBindsLimitND, msanPppoeIaVlanEntry=msanPppoeIaVlanEntry, msanMacAclRuleCVlanId=msanMacAclRuleCVlanId, msanCosQueueIndex=msanCosQueueIndex, msanSwBranch=msanSwBranch, msanIsaPortLoginMask=msanIsaPortLoginMask, msanDiagnosticsTempCriticUnderheatThreshold=msanDiagnosticsTempCriticUnderheatThreshold, msanIsaTalPatternMatchDhcpOpt82RemoteId=msanIsaTalPatternMatchDhcpOpt82RemoteId, msanSwitchIGMPSnoopingVlanMRPExpirationTime=msanSwitchIGMPSnoopingVlanMRPExpirationTime, msanServiceFlowProfileMatchUsMacDestAddr=msanServiceFlowProfileMatchUsMacDestAddr, msanAuthenticationListStatus=msanAuthenticationListStatus, msanIpAclEntry=msanIpAclEntry, msanBoardPosition=msanBoardPosition, msanSwitchIGMPSnoopingIntfAdminMode=msanSwitchIGMPSnoopingIntfAdminMode, msanSwitchIGMPSnoopingVlanTable=msanSwitchIGMPSnoopingVlanTable, msanPrimaryDnsIpAddress=msanPrimaryDnsIpAddress, msanQosProfileMatchOutMacSrcAddr=msanQosProfileMatchOutMacSrcAddr, msanBoardConfRowStatus=msanBoardConfRowStatus, msanServiceFlowProfileUsPdr=msanServiceFlowProfileUsPdr, msanDslSpecificRaDsNrmDs=msanDslSpecificRaDsNrmDs, msanDslSeltStatusNoiseType=msanDslSeltStatusNoiseType, msanQosProfileMatchInL4SrcPort=msanQosProfileMatchInL4SrcPort, msanStpCstPortEntry=msanStpCstPortEntry, msanServiceProfileDhcpRa=msanServiceProfileDhcpRa, msanDhcpv6PortRaStatRebind=msanDhcpv6PortRaStatRebind, msanMvrPortEntry=msanMvrPortEntry, msanPortDVlanMapRowStatus=msanPortDVlanMapRowStatus, msanSwComponentSteerVersion=msanSwComponentSteerVersion, msanSfpInfoNominalRange=msanSfpInfoNominalRange, msanPppoeIAPortEntry=msanPppoeIAPortEntry, msanDhcpv6RaPortTrusted=msanDhcpv6RaPortTrusted, msanDhcpRaPortConfigEntry=msanDhcpRaPortConfigEntry, msanServiceFlowProfileMatchDsIpDropPrecedence=msanServiceFlowProfileMatchDsIpDropPrecedence, msanCpeServiceName=msanCpeServiceName, msanMulticastGroupIpAddr=msanMulticastGroupIpAddr, msanEnergyMeterAddress=msanEnergyMeterAddress, msanXdsl2LineAlarmConfTempStatus=msanXdsl2LineAlarmConfTempStatus, msanDhcpv6RaPortVlanRowStatus=msanDhcpv6RaPortVlanRowStatus, msanCpeIntfServiceEntry=msanCpeIntfServiceEntry, msanMulticastProfileIgmpFiltering=msanMulticastProfileIgmpFiltering, msanSfpDiagnosticsTxPowerMax=msanSfpDiagnosticsTxPowerMax, msanDslSpecificMaxNomPsdDs=msanDslSpecificMaxNomPsdDs, msanCpeSendConfig=msanCpeSendConfig, msanFilteringRuleFromPortHigh=msanFilteringRuleFromPortHigh, msanDhcpRaStatMaxPacketSizeExceeded=msanDhcpRaStatMaxPacketSizeExceeded, msanStpMstPortEntry=msanStpMstPortEntry, msanAdslAtucPhysExtnGainspsUs=msanAdslAtucPhysExtnGainspsUs, msanQosProfileInCdr=msanQosProfileInCdr, msanIpAclRuleSrcIpv6Address=msanIpAclRuleSrcIpv6Address, msanNetworkDhcpClientLeaseExpires=msanNetworkDhcpClientLeaseExpires, msanSntpTzDstEndWeek=msanSntpTzDstEndWeek, msanSfpInfoSerialNr=msanSfpInfoSerialNr, msanIgmpSnoopingIntfStandaloneQuerier=msanIgmpSnoopingIntfStandaloneQuerier, msanVlanProfileCVidNative=msanVlanProfileCVidNative, msanL2cpProfileProtocolRule=msanL2cpProfileProtocolRule, msanBridgeCCXInterface1=msanBridgeCCXInterface1, msanDslSeltStatusCableType=msanDslSeltStatusCableType, msanPppoeIAStatus=msanPppoeIAStatus, msanSwUpgrade=msanSwUpgrade, msanPortSecurityPortVlanTable=msanPortSecurityPortVlanTable, msanAdslAturPhysExtnSystemVendorId=msanAdslAturPhysExtnSystemVendorId, msanCpeApiMinorVersion=msanCpeApiMinorVersion, msanIpAclRuleDestMacAddr=msanIpAclRuleDestMacAddr, msanVlanProfileProtection=msanVlanProfileProtection, msanBridgeMode=msanBridgeMode, msanCliPrompt=msanCliPrompt, msanPortAtmPvcTable=msanPortAtmPvcTable, msanSnmpGlobal=msanSnmpGlobal, msanIpAclRuleVlanId2RangeStart=msanIpAclRuleVlanId2RangeStart, msanSystemLogsUploadFileName=msanSystemLogsUploadFileName, msanSfpInfoIeeeVendorId=msanSfpInfoIeeeVendorId, msanCpeTrafficStatus=msanCpeTrafficStatus, msanFilteringRuleIpProto=msanFilteringRuleIpProto, msanQosProfileRowStatus=msanQosProfileRowStatus, msanMacAclRuleEntry=msanMacAclRuleEntry, msanDhcpRaPortVlanRemoteId=msanDhcpRaPortVlanRemoteId, msanIgmpSnoopingViolationAction=msanIgmpSnoopingViolationAction, msanMulticastProfileIgmpSnoopingFastLeave=msanMulticastProfileIgmpSnoopingFastLeave, msanIsaTalPortPatternMatchEntry=msanIsaTalPortPatternMatchEntry, msanPortMasterSlave=msanPortMasterSlave, msanAppRateLimit=msanAppRateLimit, msanIgmpStatistics=msanIgmpStatistics, msanDhcpRaPortState=msanDhcpRaPortState, msanSfpInfoRevisionNr=msanSfpInfoRevisionNr, msanDslPsdMaskUsShape=msanDslPsdMaskUsShape, msanArpInspectionVlanEntry=msanArpInspectionVlanEntry, msanIpAclId=msanIpAclId, msanIpAclRuleSrcMacMask=msanIpAclRuleSrcMacMask, msanSystemSwUpgradePackageName=msanSystemSwUpgradePackageName, msanSecurityAclProfileEntry=msanSecurityAclProfileEntry, msanCpeServiceStatus=msanCpeServiceStatus, msanServicePortProfileTable=msanServicePortProfileTable, msanBoardConfSwBuildDirectory=msanBoardConfSwBuildDirectory, msanShelfId=msanShelfId, msanIpAclRuleDestIpv6AddressMaskLen=msanIpAclRuleDestIpv6AddressMaskLen, msanIsaTalPatternMatchDhcpOpt60VendorId=msanIsaTalPatternMatchDhcpOpt60VendorId, msanCpeIntfPortProtection=msanCpeIntfPortProtection, msanAdslAturPhysExtnTable=msanAdslAturPhysExtnTable, msanDslSpecificUpboUs2a=msanDslSpecificUpboUs2a, msanQosGlobal=msanQosGlobal, msanStpMstPortPriority=msanStpMstPortPriority, msanCpeIntfTypeHwVersion=msanCpeIntfTypeHwVersion, msanPortVlanRemarkAdminMode=msanPortVlanRemarkAdminMode, msanAdslAturPhysExtnGainspsDs=msanAdslAturPhysExtnGainspsDs, msanDslSeltStatusEntry=msanDslSeltStatusEntry, msanQosProfileEntry=msanQosProfileEntry, msanIpAclRuleAssignSVlanId=msanIpAclRuleAssignSVlanId, msanAdslAturMSGus=msanAdslAturMSGus, msanDiagnosticsErrorFilterRowStatus=msanDiagnosticsErrorFilterRowStatus, msanDiagnosticsErrorSeverityErrCode=msanDiagnosticsErrorSeverityErrCode, msanAcsServerUrl=msanAcsServerUrl, msanNetworkDhcpClientLocalOpt82=msanNetworkDhcpClientLocalOpt82, msanDhcpRaPortCircuitIdType=msanDhcpRaPortCircuitIdType, msanSfpInfoVendor=msanSfpInfoVendor, msanErrorDisableInterval=msanErrorDisableInterval, msanIsaRadiusServerSecret=msanIsaRadiusServerSecret, msanPppoeIAPortStatus=msanPppoeIAPortStatus, msanDslSpecificL2Atprt=msanDslSpecificL2Atprt, msanAdslAtucPhysExtnParametricTestResult=msanAdslAtucPhysExtnParametricTestResult, msanCliScriptRowStatus=msanCliScriptRowStatus, msanQosProfileMatchOutCos=msanQosProfileMatchOutCos, msanMulticastAclIntfListTable=msanMulticastAclIntfListTable, msanAlarmPanelEntry=msanAlarmPanelEntry, msanPortDVlanMapEntry=msanPortDVlanMapEntry, msanDiagnosticsGlobal=msanDiagnosticsGlobal, msanDiagnosticsErrorObjectTypeId=msanDiagnosticsErrorObjectTypeId, msanMulticastProfileRowStatus=msanMulticastProfileRowStatus, msanServiceFlowProfileMatchDsIpDestAddr=msanServiceFlowProfileMatchDsIpDestAddr, msanDhcpRaStatEntry=msanDhcpRaStatEntry, msanIsaPortTable=msanIsaPortTable, msanIpAclRuleSVlanId=msanIpAclRuleSVlanId, msanSystemSwUpgrade=msanSystemSwUpgrade, msanXdsl2LineConfTempProtection=msanXdsl2LineConfTempProtection, msanIsaGlobal=msanIsaGlobal, msanIsaRadiusServerType=msanIsaRadiusServerType, msanDhcpv6PortRaStatSysError=msanDhcpv6PortRaStatSysError, msanL2cpProtocolEntry=msanL2cpProtocolEntry, msanSwitchIGMPSnoopingIntfMRPExpirationTime=msanSwitchIGMPSnoopingIntfMRPExpirationTime, msanMulticastAccessListIntfRowStatus=msanMulticastAccessListIntfRowStatus, msanIPSGPortBindCurrentMatchedFrames=msanIPSGPortBindCurrentMatchedFrames, msanIsaTalPortMatchDhcpOpt61ClientId=msanIsaTalPortMatchDhcpOpt61ClientId, msanMvrMulticastGroupRowStatus=msanMvrMulticastGroupRowStatus, msanShelfType=msanShelfType, msanDiagnosticsFanSpeedLevel=msanDiagnosticsFanSpeedLevel, msanIPSGIntfEntry=msanIPSGIntfEntry, msanMulticastProfileStaticGroupEntry=msanMulticastProfileStaticGroupEntry, msanIsaRadiusServerEntry=msanIsaRadiusServerEntry, msanPppoeIaStatUnknownFrames=msanPppoeIaStatUnknownFrames, msanVlanProfileDescription=msanVlanProfileDescription, msanL2cpProtocolTable=msanL2cpProtocolTable, msanIPSGPortBindCurrentType=msanIPSGPortBindCurrentType, msanL2cpProfileEntry=msanL2cpProfileEntry, msanMacAclRuleRemoveSVlanId=msanMacAclRuleRemoveSVlanId, msanCosQueueLength=msanCosQueueLength, msanIPSGPortBindCurrentMacAddress=msanIPSGPortBindCurrentMacAddress, msanDhcpRelay=msanDhcpRelay, msanPortUnicastControlThreshold=msanPortUnicastControlThreshold, msanIsaTalPortMatchUserMask=msanIsaTalPortMatchUserMask, msanCpeIntfTypeEntry=msanCpeIntfTypeEntry, msanMulticastProfileStatus=msanMulticastProfileStatus, msanDhcpv6PortRaStatSolicit=msanDhcpv6PortRaStatSolicit, msanEapsAdminState=msanEapsAdminState, msanDslPsdMaskDsEntry=msanDslPsdMaskDsEntry, msanSwitchIGMPSnoopingIntfVlanIDs=msanSwitchIGMPSnoopingIntfVlanIDs, msanErrorDisableMacSgDetectionStatus=msanErrorDisableMacSgDetectionStatus, msanArpInspectionPortEntry=msanArpInspectionPortEntry, msanDhcpv6RaPortInterfaceId=msanDhcpv6RaPortInterfaceId, msanServiceProfileStatus=msanServiceProfileStatus, msanSystemLogsUpload=msanSystemLogsUpload, msanIsaTalPortMatchDhcpOpt61ClientIdMacAddr=msanIsaTalPortMatchDhcpOpt61ClientIdMacAddr, msanStpMstBridgePriority=msanStpMstBridgePriority, msanSyncSourceEthPortId=msanSyncSourceEthPortId, msanAdslAtucPhysExtnActualStd=msanAdslAtucPhysExtnActualStd, msanMvr=msanMvr, msanQosProfileOutCdr=msanQosProfileOutCdr, msanMacAclRuleSVlanId=msanMacAclRuleSVlanId, msanDhcpRaOpt82UnicastExtStatus=msanDhcpRaOpt82UnicastExtStatus, msanMulticastAccessListIntfMode=msanMulticastAccessListIntfMode, msanServiceFlowProfileDsMarkPcpValue=msanServiceFlowProfileDsMarkPcpValue, msanPppoeIAPortCircuitType=msanPppoeIAPortCircuitType, msanDhcpv6RaPortRemoteId=msanDhcpv6RaPortRemoteId, msanServiceFlowProfileMatchUsSVlanIdRange=msanServiceFlowProfileMatchUsSVlanIdRange, msanServiceProfilePppoeIA=msanServiceProfilePppoeIA, msanPortMirroringMemberRowStatus=msanPortMirroringMemberRowStatus, msanDslSpecificMaxAggRxPwrUs=msanDslSpecificMaxAggRxPwrUs, msanSecondaryDnsIpAddress=msanSecondaryDnsIpAddress, msanSecurityAclProfileAclType=msanSecurityAclProfileAclType, msanIgmpSnoopingGroupMembershipInterval=msanIgmpSnoopingGroupMembershipInterval, msanPppAuthProtocol=msanPppAuthProtocol, msanAdslAtucPhysExtnEntry=msanAdslAtucPhysExtnEntry, msanBridgeCCXEntry=msanBridgeCCXEntry, msanDslSeltStatusNoiseMrgDs=msanDslSeltStatusNoiseMrgDs, msanPppoeIAGlobal=msanPppoeIAGlobal, msanMacTableVLAN=msanMacTableVLAN, msanDslSpecificScMaskDs=msanDslSpecificScMaskDs, msanAdslAtucPhysExtnSeltDownMgnAtRate=msanAdslAtucPhysExtnSeltDownMgnAtRate, msanDiagnosticsErrorSeverityErrPriority=msanDiagnosticsErrorSeverityErrPriority, msanResetWithDelayGlobal=msanResetWithDelayGlobal)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanIsaStatLoginReq=msanIsaStatLoginReq, msanDslSpecific=msanDslSpecific, msanIsaTalPatternMatchIpSrcAddr=msanIsaTalPatternMatchIpSrcAddr, msanNetworkIPAddress=msanNetworkIPAddress, msanDVlanConfigOutTagPriority=msanDVlanConfigOutTagPriority, msanSwitchIGMPSnoopingStaticIntfMulticastRouterTable=msanSwitchIGMPSnoopingStaticIntfMulticastRouterTable, msanSntpTzDstEndMonth=msanSntpTzDstEndMonth, msanIsaPortStatAuthorReqConfirmed=msanIsaPortStatAuthorReqConfirmed, msanNetwork=msanNetwork, msanEapsDomainProtVlanRowStatus=msanEapsDomainProtVlanRowStatus, msanIPSGIpv6PortStaticBindVlanId=msanIPSGIpv6PortStaticBindVlanId, msanAdslAtucPhysExtnActPsdUs=msanAdslAtucPhysExtnActPsdUs, msanDiagnosticsErrorFilterObjMask=msanDiagnosticsErrorFilterObjMask, PercentByFives=PercentByFives, msanAdslAtucPhysExtnDeltHLINpsus=msanAdslAtucPhysExtnDeltHLINpsus, msanVDSL2LineProfile=msanVDSL2LineProfile, msanMulticastProfileTable=msanMulticastProfileTable, msanAdslAtucPhysExtnSeltInbandNoise=msanAdslAtucPhysExtnSeltInbandNoise, msanMacAclRuleRemoveVlanId=msanMacAclRuleRemoveVlanId, msanDhcpv6PortRaStatFrameUnsyncError=msanDhcpv6PortRaStatFrameUnsyncError, msanLagDetailedPortStatus=msanLagDetailedPortStatus, msanBoardReset=msanBoardReset, msanPppoeIaPortStatPADT=msanPppoeIaPortStatPADT, msanServiceFlowProfileMatchUsAny=msanServiceFlowProfileMatchUsAny, msanIgmpSnoopingMaxResponseTime=msanIgmpSnoopingMaxResponseTime, msanServiceFlowProfileDescription=msanServiceFlowProfileDescription, msanMacAclRuleTable=msanMacAclRuleTable, msanServiceFlowProfileMatchUsIpDscp=msanServiceFlowProfileMatchUsIpDscp, msanSwInfo=msanSwInfo, msanMacTable=msanMacTable, msanBridgeRedAdminMode=msanBridgeRedAdminMode, msanIgmpStatRxV2Leave=msanIgmpStatRxV2Leave, msanQosProfileMatchOutAny=msanQosProfileMatchOutAny, msanStpPortTable=msanStpPortTable, msanServiceProfileMulticastProfileName=msanServiceProfileMulticastProfileName, msanQosProfileOutPdrBurstSize=msanQosProfileOutPdrBurstSize, msanDiagnosticsErrorDescription=msanDiagnosticsErrorDescription, msanAdslAtucPhysExtnSeltDownShannonCap=msanAdslAtucPhysExtnSeltDownShannonCap, msanPppoeIaStatInvalidFrames=msanPppoeIaStatInvalidFrames, msanAcsBackupConf=msanAcsBackupConf, msanSnmp=msanSnmp, msanErrorDisableGlobal=msanErrorDisableGlobal, msanMulticastAclIntfListMode=msanMulticastAclIntfListMode, msanDhcpv6RaPortConfigEntry=msanDhcpv6RaPortConfigEntry, msanPppoeIaStatUnsutableFrames=msanPppoeIaStatUnsutableFrames, msanIsaTalPortMatchIpSrcAddr=msanIsaTalPortMatchIpSrcAddr, msanDiagnosticsErrorMeasureActive=msanDiagnosticsErrorMeasureActive, msanDslSpecificDpboEPsdMask=msanDslSpecificDpboEPsdMask, msanMacAclRuleAssignVlanId=msanMacAclRuleAssignVlanId, msanPortSecurityPortVlanEntry=msanPortSecurityPortVlanEntry, msanIPSGBindRowStatus=msanIPSGBindRowStatus, msanIPSGPortBindCurrentVlanId=msanIPSGPortBindCurrentVlanId, msanDiagnosticsErrorFilterErrMask=msanDiagnosticsErrorFilterErrMask, msanSyncGlobal=msanSyncGlobal, msanBoardConfSwSteerVersion=msanBoardConfSwSteerVersion, msanDslPsdMaskDsTable=msanDslPsdMaskDsTable, msanIsaTalPortMatchIpSrcMask=msanIsaTalPortMatchIpSrcMask, msanBridgeGlobal=msanBridgeGlobal, msanQosProfileMatchInIpSrcMask=msanQosProfileMatchInIpSrcMask, msanPortVlanRemarkSrcVlanId=msanPortVlanRemarkSrcVlanId, msanSwitchIGMPSnoopingStaticIntfMulticastRouterEntry=msanSwitchIGMPSnoopingStaticIntfMulticastRouterEntry, msanBoardEntry=msanBoardEntry, msanRadiusServer=msanRadiusServer, msanServiceProfileAtmVpi=msanServiceProfileAtmVpi, msanCpeTrafficProtection=msanCpeTrafficProtection, msanMacSg=msanMacSg, msanXdsl2LineAlarmConfTemplateTable=msanXdsl2LineAlarmConfTemplateTable, msanSecurityProfileArpInspec=msanSecurityProfileArpInspec, msanMlinecAdminState=msanMlinecAdminState, msanDhcpv6RaVlanConfigEntry=msanDhcpv6RaVlanConfigEntry, msanIsaTalPatternMatchIpSrcMask=msanIsaTalPatternMatchIpSrcMask, msanCpeGlobal=msanCpeGlobal, msanFilteringRuleCos=msanFilteringRuleCos, msanDhcpv6RaStatDecline=msanDhcpv6RaStatDecline, msanLagDetailedLagIndex=msanLagDetailedLagIndex, msanFilteringRuleFromPortLow=msanFilteringRuleFromPortLow, msanSwitchIGMPSnoopingIntfIndex=msanSwitchIGMPSnoopingIntfIndex, msanIPSGPortBindCurrentTable=msanIPSGPortBindCurrentTable, msanRemoteAccessFilterRuleIndex=msanRemoteAccessFilterRuleIndex, msanQosProfileMatchOutIpPrecedence=msanQosProfileMatchOutIpPrecedence, msanRemoteAccessFilterIp=msanRemoteAccessFilterIp, msanNetworkDhcpClientVlanLocalOpt82=msanNetworkDhcpClientVlanLocalOpt82, msanCpeIntfPortLinkMode=msanCpeIntfPortLinkMode, msanPortSecurityPortVlanDynamicLimit=msanPortSecurityPortVlanDynamicLimit, msanBoardConfParentNr=msanBoardConfParentNr, msanQosIntfProfileAtmVpi=msanQosIntfProfileAtmVpi, msanCpeServiceCCos=msanCpeServiceCCos, msanPppoeIaPortStatisticsTable=msanPppoeIaPortStatisticsTable, msanEnergyMeterFwType=msanEnergyMeterFwType, msanIgmpPortStatTxV3Report=msanIgmpPortStatTxV3Report, msanDhcpv6RaStatRelayForward=msanDhcpv6RaStatRelayForward, msanMacAclRuleAssignCoSPriority=msanMacAclRuleAssignCoSPriority, msanStpMstTable=msanStpMstTable, msanDslSpecificSystemFirmware=msanDslSpecificSystemFirmware, msanVDSLProfileType=msanVDSLProfileType, msanServiceProfileProtection=msanServiceProfileProtection, msanBoardConfSwBranch=msanBoardConfSwBranch, msanSntpTzDstStartDayInWeek=msanSntpTzDstStartDayInWeek, msanBoardInfo=msanBoardInfo, msanSecurityProfileMacSg=msanSecurityProfileMacSg, msanDslSpecificDpboFMin=msanDslSpecificDpboFMin, msanSecurityAclProfileTable=msanSecurityAclProfileTable, msanServiceProfileTable=msanServiceProfileTable, msanPppoeIaStatPADR=msanPppoeIaStatPADR, msanIPSGIpv4PortStaticBindVlanId=msanIPSGIpv4PortStaticBindVlanId, msanSfpDiagnosticsTempMin=msanSfpDiagnosticsTempMin, msanQosProfileInMarkCos=msanQosProfileInMarkCos, msanServiceFlowProfileMatchUsMacSrcMask=msanServiceFlowProfileMatchUsMacSrcMask, msanDslSpecificMaxNomPsdUs=msanDslSpecificMaxNomPsdUs, msanAdslAtucPhysExtnIdleBertCells=msanAdslAtucPhysExtnIdleBertCells, msanL2cpProfileTable=msanL2cpProfileTable, msanLagDetailedPortSpeed=msanLagDetailedPortSpeed, msanPortStpP2PAutoState=msanPortStpP2PAutoState, msanRadiusServerPort=msanRadiusServerPort, msanIgmpClear=msanIgmpClear, msanDhcpRaPortCircuitType=msanDhcpRaPortCircuitType, msanAdslAtucPhysExtnStartupErrorCode=msanAdslAtucPhysExtnStartupErrorCode, msanAdslAturPhysExtnEntry=msanAdslAturPhysExtnEntry, msanEapsGlobal=msanEapsGlobal, msanDhcpRaStatInform=msanDhcpRaStatInform, msanSystemLogsUploadStart=msanSystemLogsUploadStart, msanAdslAtucPhysExtnBitSwapCount=msanAdslAtucPhysExtnBitSwapCount, msanSwitchMFDBEntry=msanSwitchMFDBEntry, msanServiceFlowProfileMatchDsIpSrcAddr=msanServiceFlowProfileMatchDsIpSrcAddr, msanIPSGIpv4PortStaticBindMatchedFrames=msanIPSGIpv4PortStaticBindMatchedFrames, msanAlarmPanelIndicatorIndex=msanAlarmPanelIndicatorIndex, msanMacAclEntry=msanMacAclEntry, msanFilteringRuleTable=msanFilteringRuleTable, msanDhcpRaStatOpt82Present=msanDhcpRaStatOpt82Present, msanPppoeIaPortStatUnknownFrames=msanPppoeIaPortStatUnknownFrames, msanSfpInfoState=msanSfpInfoState, msanRadiusServerStatus=msanRadiusServerStatus, msanDiagnosticsErrorMeasure=msanDiagnosticsErrorMeasure, msanDiagnosticsErrorSeverityObjMask=msanDiagnosticsErrorSeverityObjMask, msanMulticastAclListName=msanMulticastAclListName, msanQosProfileInMarkDscp=msanQosProfileInMarkDscp, msanCosQueueControlTable=msanCosQueueControlTable, msanMulticastGroupName=msanMulticastGroupName, msanAdslLineExtnDeltConfLDSF=msanAdslLineExtnDeltConfLDSF, msanAdslAtucPhysExtnBertSync=msanAdslAtucPhysExtnBertSync, msanMulticastProfileStaticGroupTable=msanMulticastProfileStaticGroupTable, msanDhcpRaOpt82RemoteIdStatus=msanDhcpRaOpt82RemoteIdStatus, msanIpAclRuleAssignVlanId=msanIpAclRuleAssignVlanId, msanEapsDomainDeviceRole=msanEapsDomainDeviceRole, msanMacAclRuleCVlanIdRangeEnd=msanMacAclRuleCVlanIdRangeEnd, msanQosProfileMatchInDestIpv6AddressMaskLen=msanQosProfileMatchInDestIpv6AddressMaskLen, msanAdslLineExtnLineDmtTrellis=msanAdslLineExtnLineDmtTrellis, msanVlanRemarkAdminState=msanVlanRemarkAdminState, msanConfData=msanConfData, msanMulticastAclListGroupTable=msanMulticastAclListGroupTable, msanIPSGBindMac=msanIPSGBindMac, msanAlarmPanel=msanAlarmPanel, msanAdslAtucPhysExtnTsspsUs=msanAdslAtucPhysExtnTsspsUs, msanIsaTalPatternMatchMacSrcAddr=msanIsaTalPatternMatchMacSrcAddr, msanIPSGIpv4PortStaticBindMacAddress=msanIPSGIpv4PortStaticBindMacAddress, msanQosPortStatInDroppedFrames=msanQosPortStatInDroppedFrames, msanDslSeltStatusMaxRateUs=msanDslSeltStatusMaxRateUs, msanAuthenticationListName=msanAuthenticationListName, msanServiceFlowProfileMatchDsIpDscp=msanServiceFlowProfileMatchDsIpDscp, msanAppRateLimitPppoeState=msanAppRateLimitPppoeState, msanAddressLearningVlanId=msanAddressLearningVlanId, msanPortVlanEntry=msanPortVlanEntry, msanDslSpecificDpboFMax=msanDslSpecificDpboFMax, msanAppRateLimitGlobal=msanAppRateLimitGlobal, msanQosProfileMatchOutIpDestMask=msanQosProfileMatchOutIpDestMask, msanAdslAtucPhysExtnSelfTestResult=msanAdslAtucPhysExtnSelfTestResult, msanPppoeIaPortStatPADI=msanPppoeIaPortStatPADI, msanAdslAtucSATN=msanAdslAtucSATN, msanServiceProfileVlanProfileName=msanServiceProfileVlanProfileName, msanServiceProfileEntry=msanServiceProfileEntry, msanVlanPortProfileRowStatus=msanVlanPortProfileRowStatus, msanMvrMulticastGroupMVlanId=msanMvrMulticastGroupMVlanId, msanNetworkGlobal=msanNetworkGlobal, msanPortDVlanTable=msanPortDVlanTable, msanServiceFlowProfileMatchDsTcpSrcPort=msanServiceFlowProfileMatchDsTcpSrcPort, msanUserConfigEntry=msanUserConfigEntry, msanSfpDiagnosticsTxBiasStatus=msanSfpDiagnosticsTxBiasStatus, msanSfpDiagnosticsRxPowerMin=msanSfpDiagnosticsRxPowerMin, msanPortDVlanMapTable=msanPortDVlanMapTable, msanSystemSwUpgradeProtocol=msanSystemSwUpgradeProtocol, msanSecurityAclProfileAclDirection=msanSecurityAclProfileAclDirection, msanBoard=msanBoard, msanDhcpv6RaStatRenew=msanDhcpv6RaStatRenew, msanAdslAtucPhysExtnStartBin=msanAdslAtucPhysExtnStartBin, msanPppRemoteIpAddress=msanPppRemoteIpAddress, msanIsaRadiusServerPrimaryMode=msanIsaRadiusServerPrimaryMode, msanAdslLineExtnEntry=msanAdslLineExtnEntry, msanDhcpv6RaStatReply=msanDhcpv6RaStatReply, msanIpAclRuleAssignCoSPriority=msanIpAclRuleAssignCoSPriority, msanFilteringGlobal=msanFilteringGlobal, msanCpeTrafficRowStatus=msanCpeTrafficRowStatus, msanL2cpProfileStatus=msanL2cpProfileStatus, msanSfpInfoNominalBitrate=msanSfpInfoNominalBitrate, msanIsaRadiusServerTable=msanIsaRadiusServerTable, msanCpeIntfPortCos=msanCpeIntfPortCos, msanMulticastAccessListTable=msanMulticastAccessListTable, msanCpeServiceProtection=msanCpeServiceProtection, msanIpAclRuleVlanIdRangeEnd=msanIpAclRuleVlanIdRangeEnd, msanDhcpRaVlanOpt82ReplyMode=msanDhcpRaVlanOpt82ReplyMode, msanAdslAtucPhysExtnSeltLoopEnd=msanAdslAtucPhysExtnSeltLoopEnd, msanServiceFlowProfileMatchUsIpProtocol=msanServiceFlowProfileMatchUsIpProtocol, msanMulticastAclListId=msanMulticastAclListId, msanSyncRowStatus=msanSyncRowStatus, msanQosProfileMatchOutSrcIpv6AddressMaskLen=msanQosProfileMatchOutSrcIpv6AddressMaskLen, msanDslSpecificUpboKL=msanDslSpecificUpboKL, msanFilteringRuleFromIp=msanFilteringRuleFromIp, msanDiagnosticsErrorPriority=msanDiagnosticsErrorPriority, msanMlinec=msanMlinec, msanSyncEntry=msanSyncEntry, msanDhcpv6RaState=msanDhcpv6RaState, msanAlarmPanelInputIndex=msanAlarmPanelInputIndex, msanSecurityAclProfileAclId=msanSecurityAclProfileAclId, msanPppoeIaStatPADO=msanPppoeIaStatPADO, msanCpeTypePortNum=msanCpeTypePortNum, msanIgmpVersion=msanIgmpVersion, msanAuthentication=msanAuthentication, msanSntpTzName=msanSntpTzName, msanQosProfileMatchInIpSrcAddr=msanQosProfileMatchInIpSrcAddr, msanQosProfileMatchInIpTosMask=msanQosProfileMatchInIpTosMask, msanDiagnosticsErrorSeverityEntry=msanDiagnosticsErrorSeverityEntry, msanPortVlanRemarkDstVlanId=msanPortVlanRemarkDstVlanId, msanQosProfileTable=msanQosProfileTable, msanSwitchIGMPVlanStaticMrouterEntry=msanSwitchIGMPVlanStaticMrouterEntry, msanEaps=msanEaps, msanPortMirroringAdminState=msanPortMirroringAdminState, msanFilteringRuleFromMac=msanFilteringRuleFromMac, msanQosProfileMatchInIpDscp=msanQosProfileMatchInIpDscp, msanIsaPortAccounting=msanIsaPortAccounting, msanDslSpecificMaxSnrmDs=msanDslSpecificMaxSnrmDs, msanServiceFlowProfileUsPdrBurstSize=msanServiceFlowProfileUsPdrBurstSize, msanAppRateLimitTable=msanAppRateLimitTable, msanUserIndex=msanUserIndex, msanCpeIntfTypeSwVersion=msanCpeIntfTypeSwVersion, msanDhcpv6RaPortInterfaceIdStandard=msanDhcpv6RaPortInterfaceIdStandard, msanSyncDestinationType=msanSyncDestinationType, msanFilteringAssignFilterPrec=msanFilteringAssignFilterPrec, msanDhcpv6PortRaStatRenew=msanDhcpv6PortRaStatRenew, msanQosPortProfileStatQueueAverage=msanQosPortProfileStatQueueAverage, msanAlarmPanelTable=msanAlarmPanelTable, msanServiceFlowProfileMatchUsUdpDstPort=msanServiceFlowProfileMatchUsUdpDstPort, msanIsaTalPortMatchEntry=msanIsaTalPortMatchEntry, msanBoardListEntry=msanBoardListEntry, msanDhcpRaStatOffer=msanDhcpRaStatOffer, msanSystemLogsUploadUserPassword=msanSystemLogsUploadUserPassword, msanAlarmPanelInputEntry=msanAlarmPanelInputEntry, msanSecurityProfile=msanSecurityProfile, msanFilteringAttachedFilterEntry=msanFilteringAttachedFilterEntry, msanCpeServiceTable=msanCpeServiceTable, msanStpPortHelloTime=msanStpPortHelloTime, msanSwitchMFDBProtocolType=msanSwitchMFDBProtocolType, msanServiceFlowProfileMatchUsMacSrcAddr=msanServiceFlowProfileMatchUsMacSrcAddr, msanDhcpv6PortRaStatRelayReply=msanDhcpv6PortRaStatRelayReply, msanIPSGIntfBindsLimitDhcpv6=msanIPSGIntfBindsLimitDhcpv6, msanMulticastGroupTable=msanMulticastGroupTable)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanServiceFlowProfileMatchUsIpSrcAddr=msanServiceFlowProfileMatchUsIpSrcAddr, msanMacAclRuleCVlanIdRangeStart=msanMacAclRuleCVlanIdRangeStart, msanDslSeltStatusMaxRateDs=msanDslSeltStatusMaxRateDs, msanSecurityProfileDescription=msanSecurityProfileDescription, msanServiceFlowProfileMatchDsIpProtocol=msanServiceFlowProfileMatchDsIpProtocol, msanSwitchIGMPSnoopingIntfGroupMembershipInterval=msanSwitchIGMPSnoopingIntfGroupMembershipInterval, msanQosPortStatTable=msanQosPortStatTable, msanEnergyMeterTariff=msanEnergyMeterTariff, msanEapsDomainFailTimeout=msanEapsDomainFailTimeout, msanCliScriptEntry=msanCliScriptEntry, msanIsaPortTalAdminMode=msanIsaPortTalAdminMode, msanSntpTzDstEndTime=msanSntpTzDstEndTime, msanDhcpv6PortRaStatFrameError=msanDhcpv6PortRaStatFrameError, msanAdslAtucPhysExtnChipVersion=msanAdslAtucPhysExtnChipVersion, msanIpAclRuleSrcIpv6AddressMaskLen=msanIpAclRuleSrcIpv6AddressMaskLen, msanRadiusServerPrimaryMode=msanRadiusServerPrimaryMode, msanMulticastAclListRowStatus=msanMulticastAclListRowStatus, msanLagDetailedConfigEntry=msanLagDetailedConfigEntry, msanIpAclRuleIcmpType=msanIpAclRuleIcmpType, msanSwitchIGMPProxyVlanTable=msanSwitchIGMPProxyVlanTable, msanDiagnosticsTempTable=msanDiagnosticsTempTable, msanVDSLProfileTable=msanVDSLProfileTable, msanPortUsageType=msanPortUsageType, msanServiceFlowProfileDsSchedulingMode=msanServiceFlowProfileDsSchedulingMode, msanVlanProfileCVidRemark=msanVlanProfileCVidRemark, msanQosProfileMatchOutIpDscp=msanQosProfileMatchOutIpDscp, msanDhcpv6PortRaStatRequest=msanDhcpv6PortRaStatRequest, msanMulticastProfileIgmpProxy=msanMulticastProfileIgmpProxy, msanIPSGIpv6PortStaticBindRowStatus=msanIPSGIpv6PortStaticBindRowStatus, msanPortDVlanMapInTagVlanId=msanPortDVlanMapInTagVlanId, msanMacTableMacAddress=msanMacTableMacAddress, msanPortVlanRemarkTable=msanPortVlanRemarkTable, msanServiceFlowProfileMatchUsIpDestAddr=msanServiceFlowProfileMatchUsIpDestAddr, msanSwitchIGMPVlanCurrentMrouterEnableState=msanSwitchIGMPVlanCurrentMrouterEnableState, msanDslPsdMaskUsRowStatus=msanDslPsdMaskUsRowStatus, msanCliScriptApply=msanCliScriptApply, msanDhcpRaVlanState=msanDhcpRaVlanState, msanIPSGPortBindCurrentLeaseRemainingTime=msanIPSGPortBindCurrentLeaseRemainingTime, msanAdslAtucPhysExtnDeltHLINSCus=msanAdslAtucPhysExtnDeltHLINSCus, msanQosProfileMatchInL4DestPort=msanQosProfileMatchInL4DestPort, msanMulticastGroupRowStatus=msanMulticastGroupRowStatus, msanIgmpPortStatRxV2Join=msanIgmpPortStatRxV2Join, msanEapsDomainRowStatus=msanEapsDomainRowStatus, msanCpeServiceTypeName=msanCpeServiceTypeName, msanAdslLineExtnAtucBinSNRMargin=msanAdslLineExtnAtucBinSNRMargin, msanQosProfileMatchInEthertype=msanQosProfileMatchInEthertype, msanDiagnosticsTempEntry=msanDiagnosticsTempEntry, msanDhcpRaPortVlanConfigTable=msanDhcpRaPortVlanConfigTable, msanIsaStatistics=msanIsaStatistics, msanServiceFlowProfileMatchUsCPcp=msanServiceFlowProfileMatchUsCPcp, msanAdslAtucPhysExtnSeltLoopLen=msanAdslAtucPhysExtnSeltLoopLen, msanMulticast=msanMulticast, msanAdslAturPhysExtnDeltHLINpsds=msanAdslAturPhysExtnDeltHLINpsds, msanAppRateLimitStpState=msanAppRateLimitStpState, msanDslSpecificRaUsTimeUs=msanDslSpecificRaUsTimeUs, msanCpeServiceUntaggedPorts=msanCpeServiceUntaggedPorts, msanIgmpSnoopingGlobal=msanIgmpSnoopingGlobal, msanQosProfileMatchOutCos2=msanQosProfileMatchOutCos2, msanMulticastAccessListRowStatus=msanMulticastAccessListRowStatus, msanCosMapIntfTrustTable=msanCosMapIntfTrustTable, msanBoardNr=msanBoardNr, msanCpeIntfTypeTable=msanCpeIntfTypeTable, msanServiceFlowProfileMatchDsCVlanIdRange=msanServiceFlowProfileMatchDsCVlanIdRange, msanMulticastProfileMulticastGroupLimit=msanMulticastProfileMulticastGroupLimit, msanIsaDasServerSecret=msanIsaDasServerSecret, msanIsaTalPortMatchTable=msanIsaTalPortMatchTable, msanEapsDomainHelloTime=msanEapsDomainHelloTime, msanAdslAtucPhysExtnSystemVendorId=msanAdslAtucPhysExtnSystemVendorId, msanIsaTalPortMatchDhcpType=msanIsaTalPortMatchDhcpType, msanPppoeIaPortStatPADR=msanPppoeIaPortStatPADR, msanPppVanJacobsonCompression=msanPppVanJacobsonCompression, msanIpAclStatus=msanIpAclStatus, msanIPSGPortBindCurrentId=msanIPSGPortBindCurrentId, msanEnergyMeterEnergyValue=msanEnergyMeterEnergyValue, msanStpMstPortPathCost=msanStpMstPortPathCost, msanSystemSwUpgradeServerDnsName=msanSystemSwUpgradeServerDnsName, msanMulticastProfileProtection=msanMulticastProfileProtection, msanVlanProfile=msanVlanProfile, msanIsaTalPortMatchUserBits=msanIsaTalPortMatchUserBits, msanQosProfileName=msanQosProfileName, msanSystemLogsUploadServerIpAddressType=msanSystemLogsUploadServerIpAddressType, msanDhcpRaFullModeVlanEntry=msanDhcpRaFullModeVlanEntry, msanDiagnosticsTestTime=msanDiagnosticsTestTime, msanQosPortStatEntry=msanQosPortStatEntry, msanIPSGBindVlan=msanIPSGBindVlan, msanAdslLineExtnUtopiaL2TxAddr=msanAdslLineExtnUtopiaL2TxAddr, msanIPSGIpv4PortStaticBindTable=msanIPSGIpv4PortStaticBindTable, msanIPSGIntfBindsLimit=msanIPSGIntfBindsLimit, msanIsaTalAdminMode=msanIsaTalAdminMode, msanL2cpProtocolName=msanL2cpProtocolName, msanVlanPortProfileTable=msanVlanPortProfileTable, msanIsaPortStatTable=msanIsaPortStatTable, msanSwitchIGMPSnoopingVlanAdminMode=msanSwitchIGMPSnoopingVlanAdminMode, msanAdslGlobal=msanAdslGlobal, msanSwitchMFDBMacAddress=msanSwitchMFDBMacAddress, msanRemoteAccessFilterTable=msanRemoteAccessFilterTable, msanEapsDomainProtVlanEntry=msanEapsDomainProtVlanEntry, msanDhcpRaPortOpt82ReplyMode=msanDhcpRaPortOpt82ReplyMode, msanIPSGIpv6PortStaticBindTable=msanIPSGIpv6PortStaticBindTable, msanDiagnosticsErrorSeverityTable=msanDiagnosticsErrorSeverityTable, msanPortMirroringMemberDirection=msanPortMirroringMemberDirection, msanPortMNFlag=msanPortMNFlag, msanArpInspectionGlobal=msanArpInspectionGlobal, msanSyncBoardPosition=msanSyncBoardPosition, msanMulticastProfileIgmpSnooping=msanMulticastProfileIgmpSnooping, msanRemoteAccessFilterEntry=msanRemoteAccessFilterEntry, msanStpPortEntry=msanStpPortEntry, msanAdslAtucPhysExtnTable=msanAdslAtucPhysExtnTable, msanL2cpProfileVlanRowStatus=msanL2cpProfileVlanRowStatus, msanDslPsdMaskUsEntry=msanDslPsdMaskUsEntry, msanDhcpv6RaVlanConfigTable=msanDhcpv6RaVlanConfigTable, msanAdslAturPhysExtnDeltHLINSCds=msanAdslAturPhysExtnDeltHLINSCds, msanEnergyMeterDepth=msanEnergyMeterDepth, msanFilteringAttachedFilterRowStatus=msanFilteringAttachedFilterRowStatus, msanSecurityProfileIpSgBindingLimit=msanSecurityProfileIpSgBindingLimit, msanVlanProfileSEtherType=msanVlanProfileSEtherType, msanIsaRadiusServerPort=msanIsaRadiusServerPort, msanServiceFlowProfileDsQueuingPriority=msanServiceFlowProfileDsQueuingPriority, msanDslSpecificLineState=msanDslSpecificLineState, msanPortSecurityGlobal=msanPortSecurityGlobal, msanDhcpRaOpt82=msanDhcpRaOpt82, msanIsaPortStatTalDroppedFrames=msanIsaPortStatTalDroppedFrames, msanIsaPortStatAuthenReqConfirmed=msanIsaPortStatAuthenReqConfirmed, msanLagMaxFrameSize=msanLagMaxFrameSize, msanUserAccessMode=msanUserAccessMode, msanDslSpecificUpboUs2b=msanDslSpecificUpboUs2b, msanDhcpRaVlanConfigEntry=msanDhcpRaVlanConfigEntry, msanServiceFlowProfileMatchDsMacSrcMask=msanServiceFlowProfileMatchDsMacSrcMask, msanSfpDiagnosticsRxPowerCurrent=msanSfpDiagnosticsRxPowerCurrent, msanDhcpv6RaInterfaceIdStandard=msanDhcpv6RaInterfaceIdStandard, msanAuthenticationListMethod1=msanAuthenticationListMethod1, msanAdslAtucPhysExtnG9941VendorId=msanAdslAtucPhysExtnG9941VendorId, msanQosIntfProfileAtmVci=msanQosIntfProfileAtmVci, msanL2cpProfileProtocolEntry=msanL2cpProfileProtocolEntry, msanQosProfileMatchInCos=msanQosProfileMatchInCos, msanDhcpv6Statistics=msanDhcpv6Statistics, msanSntpGlobal=msanSntpGlobal, msanFilteringRuleToPortHigh=msanFilteringRuleToPortHigh, msanSfpDiagnosticsTxPowerStatus=msanSfpDiagnosticsTxPowerStatus, msanQosPortProfileStatEntry=msanQosPortProfileStatEntry, msanSystemLogsUploadServerDnsName=msanSystemLogsUploadServerDnsName, msanServiceFlowProfileUsMarkDscpValue=msanServiceFlowProfileUsMarkDscpValue, msanSwitchIGMPSnoopingVlanMaxResponseTime=msanSwitchIGMPSnoopingVlanMaxResponseTime, msanAdslAtucPhysExtnDeltHLOGMTus=msanAdslAtucPhysExtnDeltHLOGMTus, msanMulticastProfileEntry=msanMulticastProfileEntry, msanDhcpRaFullModeVlanId=msanDhcpRaFullModeVlanId, msanServiceProfileDescription=msanServiceProfileDescription, msanCpeServiceTrafficId=msanCpeServiceTrafficId, msanVlanProfileRowStatus=msanVlanProfileRowStatus, msanDslSpecificUpboUs3b=msanDslSpecificUpboUs3b, msanCpeIntfServiceTable=msanCpeIntfServiceTable, msanPortAtmPvcPvid=msanPortAtmPvcPvid, msanServiceProfileName=msanServiceProfileName, msanIpAclRuleAssignVlanId2=msanIpAclRuleAssignVlanId2, msanLagTable=msanLagTable, msanQoS=msanQoS, msanDslSeltStatusTable=msanDslSeltStatusTable, msanDhcpv6RaGlobal=msanDhcpv6RaGlobal, msanDslSpecificL0Time=msanDslSpecificL0Time, msanDiagnosticsTestPriority=msanDiagnosticsTestPriority, msanServiceFlowProfileUsCdr=msanServiceFlowProfileUsCdr, msanStpBpduFilterEntry=msanStpBpduFilterEntry, msanBoardConfNr=msanBoardConfNr, msanServiceFlowProfileRowStatus=msanServiceFlowProfileRowStatus, msanSfpDiagnosticsTxPowerCurrent=msanSfpDiagnosticsTxPowerCurrent, msanAdslAturDeltSNRMTds=msanAdslAturDeltSNRMTds, msanAdditionalConf=msanAdditionalConf, msanAlarmPanelConnectionState=msanAlarmPanelConnectionState, msanServiceFlowProfileMatchDsUdpSrcPort=msanServiceFlowProfileMatchDsUdpSrcPort, msanPppEchoInterval=msanPppEchoInterval, msanDslSpecificDpboEsEL=msanDslSpecificDpboEsEL, msanLagDetailedConfigTable=msanLagDetailedConfigTable, msanFilteringAssignFilterEntry=msanFilteringAssignFilterEntry, msanErrorDisablePortTable=msanErrorDisablePortTable, msanDslSpecificRaUsTimeDs=msanDslSpecificRaUsTimeDs, msanQosProfileMatchInMacDestMask=msanQosProfileMatchInMacDestMask, msanQosPortProfileStatQueueMax=msanQosPortProfileStatQueueMax, msanSecurityProfilePortSecurity=msanSecurityProfilePortSecurity, msanEapsDomainPrimaryIfIndex=msanEapsDomainPrimaryIfIndex, msanPortAtmPvcEntry=msanPortAtmPvcEntry, msanSntpTzOffset=msanSntpTzOffset, msanServiceFlowProfileMatchDsSPcp=msanServiceFlowProfileMatchDsSPcp, msanMacSgGlobal=msanMacSgGlobal, msanQosProfileMatchInMacSrcAddr=msanQosProfileMatchInMacSrcAddr, msanIpAclRuleRemoveVlanId=msanIpAclRuleRemoveVlanId, msanPppoeIaVlanStatus=msanPppoeIaVlanStatus, msanCpeTrafficSpeed=msanCpeTrafficSpeed, msanDslPsdMaskUsName=msanDslPsdMaskUsName, msanSnmpSetErrorReason=msanSnmpSetErrorReason, msanDhcpv6RaStatReconfigure=msanDhcpv6RaStatReconfigure, msanSwBuildReference=msanSwBuildReference, msanIgmpPortStatTxV2Join=msanIgmpPortStatTxV2Join, msanPortMirroringEntry=msanPortMirroringEntry, msanIsaTalPatternMatchDhcpType=msanIsaTalPatternMatchDhcpType, msanAuthenticationListMethod2=msanAuthenticationListMethod2, msanCpeIntfPortEntry=msanCpeIntfPortEntry, msanSntpTzDstStartMonth=msanSntpTzDstStartMonth, msanIgmpSnoopingEntry=msanIgmpSnoopingEntry, msanQosProfileMatchOutVlanId2=msanQosProfileMatchOutVlanId2, msanIsaRadiusServerRetries=msanIsaRadiusServerRetries, msanRadiusServerGlobal=msanRadiusServerGlobal, msanL2cpProfileVlanEntry=msanL2cpProfileVlanEntry, msanFilteringRuleToPortLow=msanFilteringRuleToPortLow, msanDslSpecificUpboUs3a=msanDslSpecificUpboUs3a, msanQosProfileMatchOutMacSrcMask=msanQosProfileMatchOutMacSrcMask, msanIsaTalPatternMatchEthertype=msanIsaTalPatternMatchEthertype, msanIgmpPortStatRxBlockByMcastCac=msanIgmpPortStatRxBlockByMcastCac, msanMulticastIntfVlanStaticGroupEntry=msanMulticastIntfVlanStaticGroupEntry, msanDhcpv6RaStatFrameUnsyncError=msanDhcpv6RaStatFrameUnsyncError, msanEnergyMeterEnergyEntry=msanEnergyMeterEnergyEntry, msanXdsl2LineAlarmConfTemplateEntry=msanXdsl2LineAlarmConfTemplateEntry, msanQosProfileMatchInVlanId=msanQosProfileMatchInVlanId, msanQosProfileInTrustMode=msanQosProfileInTrustMode, msanFtpServerAdminState=msanFtpServerAdminState, msanPppoeIAVsaReplyMode=msanPppoeIAVsaReplyMode, msanPppoeIaStatPADI=msanPppoeIaStatPADI, msanQosProfileMatchInCos2=msanQosProfileMatchInCos2, msanQosProfileMatchOutMacDestMask=msanQosProfileMatchOutMacDestMask, msanRemoteAccessFilterNetmask=msanRemoteAccessFilterNetmask, msanSfpDiagnosticsVoltageCurrent=msanSfpDiagnosticsVoltageCurrent, msanIgmpSnoopingReportSuppression=msanIgmpSnoopingReportSuppression, msanFilteringRuleToMask=msanFilteringRuleToMask, msanDslPsdMaskDsRowStatus=msanDslPsdMaskDsRowStatus, msanCpeTrafficId=msanCpeTrafficId, msanVlan=msanVlan, msanSwILVersion=msanSwILVersion, msanDiagnosticsErrorTable=msanDiagnosticsErrorTable, msanPortGlobal=msanPortGlobal, msanSwBuildDirectory=msanSwBuildDirectory, msanEnergyMeterCurrTariff=msanEnergyMeterCurrTariff, msanMulticastIntfVlanStaticGroupIpAddr=msanMulticastIntfVlanStaticGroupIpAddr, msanDhcpRaStatFrameErr=msanDhcpRaStatFrameErr, msanXdsl2LineConfTemplateTable=msanXdsl2LineConfTemplateTable, msanSwitchIGMPProxyVlanEntry=msanSwitchIGMPProxyVlanEntry, msanSyncDestinationMlvdsId=msanSyncDestinationMlvdsId, msanDiagnosticsTestCode=msanDiagnosticsTestCode, msanPortDVlanConfigEntry=msanPortDVlanConfigEntry, msanRemoteAccessFilterRowStatus=msanRemoteAccessFilterRowStatus, msanEapsDomainAdminState=msanEapsDomainAdminState, msanServiceFlowProfileDsMarkDscpValue=msanServiceFlowProfileDsMarkDscpValue, msanDslPsdMaskUsTable=msanDslPsdMaskUsTable, msanServiceFlowProfileMatchDsVlanProfile=msanServiceFlowProfileMatchDsVlanProfile, msanStpMstRowStatus=msanStpMstRowStatus, msanXdslProfile=msanXdslProfile, msanIPSGBindIp=msanIPSGBindIp, msanCpeReset=msanCpeReset, msanPortStormControlEntry=msanPortStormControlEntry, msanSystemSwUpgradeStart=msanSystemSwUpgradeStart, msanCosQueueTable=msanCosQueueTable, msanDslSpecificMaxDelayUs=msanDslSpecificMaxDelayUs, msanQosProfileMatchInMacDestAddr=msanQosProfileMatchInMacDestAddr, msanServiceFlowProfileMatchUsTcpSrcPort=msanServiceFlowProfileMatchUsTcpSrcPort, msanVlanProfileName=msanVlanProfileName, msanCosQueueIntfShapingRate=msanCosQueueIntfShapingRate)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanPortDVlanStackVlanId=msanPortDVlanStackVlanId, msanNetworkSubnetMask=msanNetworkSubnetMask, msanServiceFlowProfileMatchUsIpSrcMask=msanServiceFlowProfileMatchUsIpSrcMask, msanServiceProfileDhcpRaRateLimit=msanServiceProfileDhcpRaRateLimit, msanAdslAtucPhysExtnStartProgress=msanAdslAtucPhysExtnStartProgress, msanFilteringRuleToMacMask=msanFilteringRuleToMacMask, msanEnergyMeterPassword=msanEnergyMeterPassword, msanIpAclRuleCVlanIdRangeEnd=msanIpAclRuleCVlanIdRangeEnd, msanMulticastProfileStaticGroupRowStatus=msanMulticastProfileStaticGroupRowStatus, msanFilteringFilterTable=msanFilteringFilterTable, msanSecurityProfileEntry=msanSecurityProfileEntry, msanDVlanConfigInTagVlanId=msanDVlanConfigInTagVlanId, msanL2cpProfileRowStatus=msanL2cpProfileRowStatus, msanStpMstVlanRowStatus=msanStpMstVlanRowStatus, msanIPSGStoreAdminMode=msanIPSGStoreAdminMode, msanSwitchMFDBFilteringPortMask=msanSwitchMFDBFilteringPortMask, msanIsaPortEntry=msanIsaPortEntry, msanPortAtmPvcVpi=msanPortAtmPvcVpi, msanDslSpecificDpboMus=msanDslSpecificDpboMus, msanMulticastIntfStaticGroupRowStatus=msanMulticastIntfStaticGroupRowStatus, msanBoardConfPosition=msanBoardConfPosition, msanFilteringRuleEntry=msanFilteringRuleEntry, msanFilteringFilterName=msanFilteringFilterName, msanDslSpecificMaxNomAtpUs=msanDslSpecificMaxNomAtpUs, msanAlarmPanelIndicatorTable=msanAlarmPanelIndicatorTable, msanAcsDomainName=msanAcsDomainName, msanLagDVlanTagMode=msanLagDVlanTagMode, msanServiceProfileDhcpRaOpt82UnicastExtension=msanServiceProfileDhcpRaOpt82UnicastExtension, msanDiagnosticsTempCriticOverheatThreshold=msanDiagnosticsTempCriticOverheatThreshold, msanDhcpv6PortRaStatRelayForward=msanDhcpv6PortRaStatRelayForward, msanIPSGIntfAdminMode=msanIPSGIntfAdminMode, msanForwardingDb=msanForwardingDb, msanCosQueueControlEntry=msanCosQueueControlEntry, msanEnergyMeterEnergySumEntry=msanEnergyMeterEnergySumEntry, msanAlarmPanelIndicatorErrCode=msanAlarmPanelIndicatorErrCode, msanQosProfileInPdr=msanQosProfileInPdr, msanUserConfigGlobal=msanUserConfigGlobal, msanIgmpStatRxError=msanIgmpStatRxError, msanPppoeIA=msanPppoeIA, msanBoardConfDescription=msanBoardConfDescription, msanDVlanConfigInTagPriority=msanDVlanConfigInTagPriority, msanSwitchIGMPVlanStaticMrouterTable=msanSwitchIGMPVlanStaticMrouterTable, msanIpAclRuleDestMacMask=msanIpAclRuleDestMacMask, msanIsaTalPatternMatchUserBits=msanIsaTalPatternMatchUserBits, msanSwComponentTable=msanSwComponentTable, msanDateTime=msanDateTime, msanDhcpRaStatDiscover=msanDhcpRaStatDiscover, msanIpAclRuleVlanId2RangeEnd=msanIpAclRuleVlanId2RangeEnd, msanMulticastAccessListEntry=msanMulticastAccessListEntry, msanDhcpv6RaPortVlanRemoteId=msanDhcpv6RaPortVlanRemoteId, msanMacTableUsed=msanMacTableUsed, msanSwitchMFDBTable=msanSwitchMFDBTable, msanPortDVlanEntry=msanPortDVlanEntry, msanDiagnosticsErrorSeverityRowStatus=msanDiagnosticsErrorSeverityRowStatus, msanDslSeltStatusCableLenght=msanDslSeltStatusCableLenght, msanDhcpv6RaStatAdvertise=msanDhcpv6RaStatAdvertise, msanDslSpecificRaUsNrmUs=msanDslSpecificRaUsNrmUs, msanMvrConfigCos=msanMvrConfigCos, msanDslSpecificGlobal=msanDslSpecificGlobal, msanDslSpecificScMaskUs=msanDslSpecificScMaskUs, msanDhcpv6PortRaStatReply=msanDhcpv6PortRaStatReply, msanIPSGIntfTable=msanIPSGIntfTable, msanStpMstEntry=msanStpMstEntry, msanEnergyMeterEnergyTable=msanEnergyMeterEnergyTable, msanDslSpecificDpboEsCmC=msanDslSpecificDpboEsCmC, msanSecurityAclProfileRowStatus=msanSecurityAclProfileRowStatus, msanDhcpRaFullModeSrvIpAddr=msanDhcpRaFullModeSrvIpAddr, msanIpAclRuleCos2=msanIpAclRuleCos2, msanErrorDisablePortCause=msanErrorDisablePortCause, msanServiceFlowProfileMatchDsCPcp=msanServiceFlowProfileMatchDsCPcp, msanDhcpv6PortRaStatInformRequest=msanDhcpv6PortRaStatInformRequest, msanAdslLineExtnTransAtucCap=msanAdslLineExtnTransAtucCap, msanMulticastIntfStaticGroupIPAddr=msanMulticastIntfStaticGroupIPAddr, msanBridge=msanBridge)
