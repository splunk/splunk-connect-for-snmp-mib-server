#
# PySNMP MIB module ZHONE-PHY-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-PHY-SONET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:41:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, NotificationType, Gauge32, Counter64, Integer32, ModuleIdentity, ObjectIdentity, TimeTicks, iso, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Gauge32", "Counter64", "Integer32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "iso", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
sonetMediumEntry, sonetPathCurrentStatus, sonetSectionCurrentStatus, sonetLineCurrentStatus = mibBuilder.importSymbols("SONET-MIB", "sonetMediumEntry", "sonetPathCurrentStatus", "sonetSectionCurrentStatus", "sonetLineCurrentStatus")
zhoneModules, zhoneSonet = mibBuilder.importSymbols("Zhone", "zhoneModules", "zhoneSonet")
phySonet = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 16))
phySonet.setRevisions(('2004-08-18 11:47', '2003-07-10 13:30', '2002-03-26 14:30', '2001-09-12 15:08', '2001-07-19 18:00', '2001-02-22 11:35', '2000-12-19 15:23', '2000-12-18 16:20',))
if mibBuilder.loadTexts: phySonet.setLastUpdated('200408181330Z')
if mibBuilder.loadTexts: phySonet.setOrganization('Zhone Technologies, Inc.')
sonetClockTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 9, 1), )
if mibBuilder.loadTexts: sonetClockTable.setStatus('current')
sonetClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 9, 1, 1), )
sonetMediumEntry.registerAugmentions(("ZHONE-PHY-SONET-MIB", "sonetClockEntry"))
sonetClockEntry.setIndexNames(*sonetMediumEntry.getIndexNames())
if mibBuilder.loadTexts: sonetClockEntry.setStatus('current')
sonetClockExternalRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetClockExternalRecovery.setStatus('current')
sonetClockTransmitSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopTiming", 1), ("throughTiming", 2), ("localTiming", 3), ("external155MHz", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetClockTransmitSource.setStatus('current')
sonetMediumExtTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 9, 2), )
if mibBuilder.loadTexts: sonetMediumExtTable.setStatus('current')
sonetMediumExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 9, 2, 1), )
sonetMediumEntry.registerAugmentions(("ZHONE-PHY-SONET-MIB", "sonetMediumExtEntry"))
sonetMediumExtEntry.setIndexNames(*sonetMediumEntry.getIndexNames())
if mibBuilder.loadTexts: sonetMediumExtEntry.setStatus('current')
sonetMediumExtScrambleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetMediumExtScrambleEnabled.setStatus('current')
sonetMediumExtLineScrmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 2, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetMediumExtLineScrmEnabled.setStatus('current')
sonetTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3))
if mibBuilder.loadTexts: sonetTraps.setStatus('current')
sonetV2Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3, 0))
if mibBuilder.loadTexts: sonetV2Traps.setStatus('current')
sonetClockTransmitSourceChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3, 0, 1)).setObjects(("ZHONE-PHY-SONET-MIB", "sonetClockExternalRecovery"), ("ZHONE-PHY-SONET-MIB", "sonetClockTransmitSource"))
if mibBuilder.loadTexts: sonetClockTransmitSourceChange.setStatus('current')
sonetSectionStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3, 0, 2)).setObjects(("SONET-MIB", "sonetSectionCurrentStatus"))
if mibBuilder.loadTexts: sonetSectionStatusChange.setStatus('current')
sonetLineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3, 0, 3)).setObjects(("SONET-MIB", "sonetLineCurrentStatus"))
if mibBuilder.loadTexts: sonetLineStatusChange.setStatus('current')
sonetPathStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3, 0, 4)).setObjects(("SONET-MIB", "sonetPathCurrentStatus"))
if mibBuilder.loadTexts: sonetPathStatusChange.setStatus('current')
zhoneSonetErrorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6), )
if mibBuilder.loadTexts: zhoneSonetErrorStatsTable.setStatus('current')
zhoneSonetErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1), ).setIndexNames((0, "ZHONE-PHY-SONET-MIB", "zhoneSonetErrorStatsIndex"))
if mibBuilder.loadTexts: zhoneSonetErrorStatsEntry.setStatus('current')
zhoneSonetErrorStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneSonetErrorStatsIndex.setStatus('current')
zhoneSonetErrorStatsLineFebeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsLineFebeCount.setStatus('current')
zhoneSonetErrorStatsPathFebeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsPathFebeCount.setStatus('current')
zhoneSonetErrorStatsLineBipCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsLineBipCount.setStatus('current')
zhoneSonetErrorStatsSectionBipCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsSectionBipCount.setStatus('current')
zhoneSonetErrorStatsPathBipCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsPathBipCount.setStatus('current')
zhoneSonetErrorStatsOofCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsOofCount.setStatus('current')
zhoneSonetErrorStatsRxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsRxCellCount.setStatus('current')
zhoneSonetErrorStatsTxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsTxCellCount.setStatus('current')
zhoneSonetErrorStatsHecCorrectedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsHecCorrectedCount.setStatus('current')
zhoneSonetErrorStatsHecUncorrectedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsHecUncorrectedCount.setStatus('current')
zhoneSonetErrorStatsCellFifoOverflowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsCellFifoOverflowCount.setStatus('current')
zhoneSonetErrorStatsLocdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsLocdCount.setStatus('current')
mibBuilder.exportSymbols("ZHONE-PHY-SONET-MIB", zhoneSonetErrorStatsCellFifoOverflowCount=zhoneSonetErrorStatsCellFifoOverflowCount, zhoneSonetErrorStatsLineBipCount=zhoneSonetErrorStatsLineBipCount, sonetClockExternalRecovery=sonetClockExternalRecovery, sonetMediumExtLineScrmEnabled=sonetMediumExtLineScrmEnabled, sonetClockTransmitSource=sonetClockTransmitSource, zhoneSonetErrorStatsHecUncorrectedCount=zhoneSonetErrorStatsHecUncorrectedCount, sonetTraps=sonetTraps, sonetMediumExtTable=sonetMediumExtTable, sonetClockEntry=sonetClockEntry, sonetLineStatusChange=sonetLineStatusChange, zhoneSonetErrorStatsLineFebeCount=zhoneSonetErrorStatsLineFebeCount, zhoneSonetErrorStatsSectionBipCount=zhoneSonetErrorStatsSectionBipCount, PYSNMP_MODULE_ID=phySonet, zhoneSonetErrorStatsTxCellCount=zhoneSonetErrorStatsTxCellCount, sonetSectionStatusChange=sonetSectionStatusChange, zhoneSonetErrorStatsPathFebeCount=zhoneSonetErrorStatsPathFebeCount, zhoneSonetErrorStatsTable=zhoneSonetErrorStatsTable, zhoneSonetErrorStatsIndex=zhoneSonetErrorStatsIndex, sonetV2Traps=sonetV2Traps, sonetMediumExtScrambleEnabled=sonetMediumExtScrambleEnabled, sonetClockTransmitSourceChange=sonetClockTransmitSourceChange, sonetPathStatusChange=sonetPathStatusChange, zhoneSonetErrorStatsPathBipCount=zhoneSonetErrorStatsPathBipCount, sonetMediumExtEntry=sonetMediumExtEntry, zhoneSonetErrorStatsEntry=zhoneSonetErrorStatsEntry, zhoneSonetErrorStatsHecCorrectedCount=zhoneSonetErrorStatsHecCorrectedCount, zhoneSonetErrorStatsOofCount=zhoneSonetErrorStatsOofCount, zhoneSonetErrorStatsLocdCount=zhoneSonetErrorStatsLocdCount, phySonet=phySonet, zhoneSonetErrorStatsRxCellCount=zhoneSonetErrorStatsRxCellCount, sonetClockTable=sonetClockTable)
