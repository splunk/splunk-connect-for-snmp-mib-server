#
# PySNMP MIB module FRF16-MFR-MIB-EXP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FRF16-MFR-MIB-EXP
# Produced by pysmi-0.3.4 at Mon Apr 29 19:02:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Gauge32, Unsigned32, MibIdentifier, IpAddress, ObjectIdentity, TimeTicks, Integer32, Counter32, Bits, Counter64, experimental = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Gauge32", "Unsigned32", "MibIdentifier", "IpAddress", "ObjectIdentity", "TimeTicks", "Integer32", "Counter32", "Bits", "Counter64", "experimental")
RowStatus, DisplayString, TextualConvention, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TestAndIncr")
mfrMib = ModuleIdentity((1, 3, 6, 1, 3, 555))
mfrMib.setRevisions(('1999-10-01 14:40', '1999-10-15 13:00', '1999-10-21 20:20',))
if mibBuilder.loadTexts: mfrMib.setLastUpdated('9910191300Z')
if mibBuilder.loadTexts: mfrMib.setOrganization('IETF Frame Relay Service MIB (frnetmib) Working Group')
class BundleLinkState(TextualConvention, Integer32):
    reference = 'FRF.16 Annex A'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("bundleLinkStateAddSent", 1), ("bundleLinkStateAddRx", 2), ("bundleLinkStateAddAckRx", 3), ("bundleLinkStateUp", 4), ("bundleLinkStateIdlePending", 5), ("bundleLinkStateIdle", 6), ("bundleLinkStateDown", 7), ("bundleLinkStateDownIdle", 8))

mfrMibObjects = MibIdentifier((1, 3, 6, 1, 3, 555, 1))
mfrMibTraps = MibIdentifier((1, 3, 6, 1, 3, 555, 2))
mfrMibConformance = MibIdentifier((1, 3, 6, 1, 3, 555, 3))
mfrMibScalarObjects = MibIdentifier((1, 3, 6, 1, 3, 555, 1, 1))
mfrMibBundleObjects = MibIdentifier((1, 3, 6, 1, 3, 555, 1, 2))
mfrMibBundleLinkObjects = MibIdentifier((1, 3, 6, 1, 3, 555, 1, 3))
mfrMibTrapsPrefix = MibIdentifier((1, 3, 6, 1, 3, 555, 2, 0))
mfrMibGroups = MibIdentifier((1, 3, 6, 1, 3, 555, 3, 1))
mfrMibCompliances = MibIdentifier((1, 3, 6, 1, 3, 555, 3, 2))
bundleMaxNumBundles = MibScalar((1, 3, 6, 1, 3, 555, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleMaxNumBundles.setStatus('current')
bundleNextIndex = MibScalar((1, 3, 6, 1, 3, 555, 1, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bundleNextIndex.setStatus('current')
bundleTable = MibTable((1, 3, 6, 1, 3, 555, 1, 2, 3), )
if mibBuilder.loadTexts: bundleTable.setStatus('current')
bundleEntry = MibTableRow((1, 3, 6, 1, 3, 555, 1, 2, 3, 1), ).setIndexNames((0, "FRF16-MFR-MIB-EXP", "bundleIndex"))
if mibBuilder.loadTexts: bundleEntry.setStatus('current')
bundleIndex = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: bundleIndex.setStatus('current')
bundleIfIndex = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleIfIndex.setStatus('current')
bundleRowStatus = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleRowStatus.setStatus('current')
bundleNearEndName = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleNearEndName.setStatus('current')
bundleFragmentation = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleFragmentation.setStatus('current')
bundleMaxFragSize = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 6), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleMaxFragSize.setStatus('current')
bundleTimerHello = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleTimerHello.setStatus('current')
bundleTimerAck = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleTimerAck.setStatus('current')
bundleCountMaxRetry = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleCountMaxRetry.setStatus('current')
bundleActivationClass = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bundleActivationClassA", 1), ("bundleActivationClassB", 2), ("bundleActivationClassC", 3), ("bundleActivationClassD", 4))).clone('bundleActivationClassA')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleActivationClass.setStatus('current')
bundleThreshold = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 11), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleThreshold.setStatus('current')
bundleMaxDiffDelay = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 12), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleMaxDiffDelay.setStatus('current')
bundleSeqNumSize = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seqNumSize12bit", 1), ("seqNumSize24bit", 2))).clone('seqNumSize12bit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleSeqNumSize.setStatus('current')
bundleMaxBundleLinks = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleMaxBundleLinks.setStatus('current')
bundleFarEndName = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleFarEndName.setStatus('current')
bundleResequencingErrors = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleResequencingErrors.setStatus('current')
bundleIfIndexMappingTable = MibTable((1, 3, 6, 1, 3, 555, 1, 2, 4), )
if mibBuilder.loadTexts: bundleIfIndexMappingTable.setStatus('current')
bundleIfIndexMappingEntry = MibTableRow((1, 3, 6, 1, 3, 555, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bundleIfIndexMappingEntry.setStatus('current')
bundleIfIndexMappingIndex = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 4, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleIfIndexMappingIndex.setStatus('current')
bundleLinkTable = MibTable((1, 3, 6, 1, 3, 555, 1, 3, 1), )
if mibBuilder.loadTexts: bundleLinkTable.setStatus('current')
bundleLinkEntry = MibTableRow((1, 3, 6, 1, 3, 555, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bundleLinkEntry.setStatus('current')
bundleLinkRowStatus = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkRowStatus.setStatus('current')
bundleLinkConfigBundleIndex = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkConfigBundleIndex.setStatus('current')
bundleLinkNearEndName = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkNearEndName.setStatus('current')
bundleLinkState = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 4), BundleLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkState.setStatus('current')
bundleLinkFarEndName = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkFarEndName.setStatus('current')
bundleLinkFarEndBundleName = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkFarEndBundleName.setStatus('current')
bundleLinkDelay = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkDelay.setStatus('current')
bundleLinkFramesControlTx = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkFramesControlTx.setStatus('current')
bundleLinkFramesControlRx = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkFramesControlRx.setStatus('current')
bundleLinkFramesControlInvalid = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkFramesControlInvalid.setStatus('current')
bundleLinkTimerExpiredCount = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkTimerExpiredCount.setStatus('current')
bundleLinkLoopbackSuspected = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkLoopbackSuspected.setStatus('current')
bundleLinkUnexpectedSequence = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkUnexpectedSequence.setStatus('current')
bundleLinkMismatch = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkMismatch.setStatus('current')
mfrMibTrapBundleLinkMismatch = NotificationType((1, 3, 6, 1, 3, 555, 2, 0, 1)).setObjects(("FRF16-MFR-MIB-EXP", "bundleNearEndName"), ("FRF16-MFR-MIB-EXP", "bundleFarEndName"), ("FRF16-MFR-MIB-EXP", "bundleLinkNearEndName"), ("FRF16-MFR-MIB-EXP", "bundleLinkFarEndName"), ("FRF16-MFR-MIB-EXP", "bundleLinkFarEndBundleName"))
if mibBuilder.loadTexts: mfrMibTrapBundleLinkMismatch.setStatus('current')
mfrMibCompliance = ModuleCompliance((1, 3, 6, 1, 3, 555, 3, 2, 1)).setObjects(("FRF16-MFR-MIB-EXP", "mfrMibBundleGroup"), ("FRF16-MFR-MIB-EXP", "mfrMibBundleLinkGroup"), ("FRF16-MFR-MIB-EXP", "mfrMibTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mfrMibCompliance = mfrMibCompliance.setStatus('current')
mfrMibBundleGroup = ObjectGroup((1, 3, 6, 1, 3, 555, 3, 1, 1)).setObjects(("FRF16-MFR-MIB-EXP", "bundleMaxNumBundles"), ("FRF16-MFR-MIB-EXP", "bundleIfIndex"), ("FRF16-MFR-MIB-EXP", "bundleRowStatus"), ("FRF16-MFR-MIB-EXP", "bundleNearEndName"), ("FRF16-MFR-MIB-EXP", "bundleFragmentation"), ("FRF16-MFR-MIB-EXP", "bundleMaxFragSize"), ("FRF16-MFR-MIB-EXP", "bundleTimerHello"), ("FRF16-MFR-MIB-EXP", "bundleTimerAck"), ("FRF16-MFR-MIB-EXP", "bundleCountMaxRetry"), ("FRF16-MFR-MIB-EXP", "bundleActivationClass"), ("FRF16-MFR-MIB-EXP", "bundleThreshold"), ("FRF16-MFR-MIB-EXP", "bundleMaxDiffDelay"), ("FRF16-MFR-MIB-EXP", "bundleMaxBundleLinks"), ("FRF16-MFR-MIB-EXP", "bundleSeqNumSize"), ("FRF16-MFR-MIB-EXP", "bundleFarEndName"), ("FRF16-MFR-MIB-EXP", "bundleResequencingErrors"), ("FRF16-MFR-MIB-EXP", "bundleIfIndexMappingIndex"), ("FRF16-MFR-MIB-EXP", "bundleNextIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mfrMibBundleGroup = mfrMibBundleGroup.setStatus('current')
mfrMibBundleLinkGroup = ObjectGroup((1, 3, 6, 1, 3, 555, 3, 1, 2)).setObjects(("FRF16-MFR-MIB-EXP", "bundleLinkRowStatus"), ("FRF16-MFR-MIB-EXP", "bundleLinkConfigBundleIndex"), ("FRF16-MFR-MIB-EXP", "bundleLinkNearEndName"), ("FRF16-MFR-MIB-EXP", "bundleLinkState"), ("FRF16-MFR-MIB-EXP", "bundleLinkFarEndName"), ("FRF16-MFR-MIB-EXP", "bundleLinkFarEndBundleName"), ("FRF16-MFR-MIB-EXP", "bundleLinkDelay"), ("FRF16-MFR-MIB-EXP", "bundleLinkFramesControlTx"), ("FRF16-MFR-MIB-EXP", "bundleLinkFramesControlRx"), ("FRF16-MFR-MIB-EXP", "bundleLinkFramesControlInvalid"), ("FRF16-MFR-MIB-EXP", "bundleLinkTimerExpiredCount"), ("FRF16-MFR-MIB-EXP", "bundleLinkLoopbackSuspected"), ("FRF16-MFR-MIB-EXP", "bundleLinkUnexpectedSequence"), ("FRF16-MFR-MIB-EXP", "bundleLinkMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mfrMibBundleLinkGroup = mfrMibBundleLinkGroup.setStatus('current')
mfrMibTrapGroup = NotificationGroup((1, 3, 6, 1, 3, 555, 3, 1, 3)).setObjects(("FRF16-MFR-MIB-EXP", "mfrMibTrapBundleLinkMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mfrMibTrapGroup = mfrMibTrapGroup.setStatus('current')
mibBuilder.exportSymbols("FRF16-MFR-MIB-EXP", bundleLinkMismatch=bundleLinkMismatch, mfrMibBundleLinkObjects=mfrMibBundleLinkObjects, mfrMibConformance=mfrMibConformance, mfrMibObjects=mfrMibObjects, bundleLinkTable=bundleLinkTable, bundleLinkConfigBundleIndex=bundleLinkConfigBundleIndex, bundleLinkLoopbackSuspected=bundleLinkLoopbackSuspected, bundleFarEndName=bundleFarEndName, bundleFragmentation=bundleFragmentation, bundleSeqNumSize=bundleSeqNumSize, bundleIfIndexMappingIndex=bundleIfIndexMappingIndex, bundleLinkNearEndName=bundleLinkNearEndName, bundleMaxNumBundles=bundleMaxNumBundles, bundleMaxFragSize=bundleMaxFragSize, bundleResequencingErrors=bundleResequencingErrors, mfrMibTrapGroup=mfrMibTrapGroup, bundleMaxDiffDelay=bundleMaxDiffDelay, bundleIfIndexMappingTable=bundleIfIndexMappingTable, mfrMibCompliances=mfrMibCompliances, mfrMibBundleLinkGroup=mfrMibBundleLinkGroup, mfrMibCompliance=mfrMibCompliance, bundleLinkDelay=bundleLinkDelay, bundleLinkTimerExpiredCount=bundleLinkTimerExpiredCount, bundleLinkFramesControlRx=bundleLinkFramesControlRx, mfrMibTrapsPrefix=mfrMibTrapsPrefix, mfrMibBundleObjects=mfrMibBundleObjects, bundleTable=bundleTable, bundleEntry=bundleEntry, bundleLinkFramesControlInvalid=bundleLinkFramesControlInvalid, bundleIndex=bundleIndex, mfrMibScalarObjects=mfrMibScalarObjects, bundleLinkState=bundleLinkState, mfrMibTrapBundleLinkMismatch=mfrMibTrapBundleLinkMismatch, bundleTimerAck=bundleTimerAck, bundleIfIndexMappingEntry=bundleIfIndexMappingEntry, bundleLinkEntry=bundleLinkEntry, bundleLinkFarEndName=bundleLinkFarEndName, bundleActivationClass=bundleActivationClass, bundleLinkFarEndBundleName=bundleLinkFarEndBundleName, bundleIfIndex=bundleIfIndex, mfrMibTraps=mfrMibTraps, bundleRowStatus=bundleRowStatus, bundleCountMaxRetry=bundleCountMaxRetry, bundleMaxBundleLinks=bundleMaxBundleLinks, mfrMib=mfrMib, mfrMibGroups=mfrMibGroups, bundleLinkFramesControlTx=bundleLinkFramesControlTx, bundleLinkUnexpectedSequence=bundleLinkUnexpectedSequence, mfrMibBundleGroup=mfrMibBundleGroup, bundleThreshold=bundleThreshold, bundleLinkRowStatus=bundleLinkRowStatus, PYSNMP_MODULE_ID=mfrMib, bundleTimerHello=bundleTimerHello, BundleLinkState=BundleLinkState, bundleNextIndex=bundleNextIndex, bundleNearEndName=bundleNearEndName)
