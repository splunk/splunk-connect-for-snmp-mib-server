#
# PySNMP MIB module Wellfleet-Modem-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-Modem-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:34:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Counter64, ObjectIdentity, IpAddress, Integer32, Bits, NotificationType, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Counter64", "ObjectIdentity", "IpAddress", "Integer32", "Bits", "NotificationType", "Counter32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfModemGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfModemGroup")
wfModemTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1), )
if mibBuilder.loadTexts: wfModemTable.setStatus('mandatory')
wfModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1), ).setIndexNames((0, "Wellfleet-Modem-MIB", "wfModemSlot"), (0, "Wellfleet-Modem-MIB", "wfModemConnector"))
if mibBuilder.loadTexts: wfModemEntry.setStatus('mandatory')
wfModemDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemDelete.setStatus('mandatory')
wfModemSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemSlot.setStatus('mandatory')
wfModemConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemConnector.setStatus('mandatory')
wfModemIdSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIdSwRev.setStatus('mandatory')
wfModemIdHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIdHwRev.setStatus('mandatory')
wfModemLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("onHook", 2), ("offHook", 3), ("connected", 4), ("busiedOut", 5), ("reset", 6))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemLineState.setStatus('mandatory')
wfModemConnectionFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("lossOfCarrier", 2), ("v42NegotiationFailed", 3), ("noCommonProtocol", 4), ("remoteDisconnect", 5), ("noResponseFromRemote", 6), ("protocolViolation", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemConnectionFailReason.setStatus('mandatory')
wfModemCfgFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemCfgFactoryDefaults.setStatus('mandatory')
wfModemCfgInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemCfgInitString.setStatus('mandatory')
wfModemCfgDefaultString = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemCfgDefaultString.setStatus('mandatory')
wfModemCfgResultCodeString = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemCfgResultCodeString.setStatus('mandatory')
wfModemCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cfgIdle", 1), ("cfgInProgress", 2), ("cfgResponseReturned", 3))).clone('cfgIdle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemCfgState.setStatus('mandatory')
wfModemCfgCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("northAmerica", 1), ("japan", 2), ("uk", 3), ("germany", 4))).clone('northAmerica')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemCfgCountry.setStatus('mandatory')
wfModemV54Lpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLpbk", 1), ("localAnlgLpbk", 2), ("localDigLpbk", 3), ("remDigLpbk", 4), ("remDigLpbkWPattern", 5), ("localAnlgLpbkWPattern", 6))).clone('noLpbk')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemV54Lpbk.setStatus('mandatory')
wfModemV54Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemV54Timer.setStatus('mandatory')
wfModemV54Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemV54Errors.setStatus('mandatory')
wfModemV54RemLpbkDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemV54RemLpbkDetect.setStatus('mandatory')
wfModemPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemPhoneNumber.setStatus('mandatory')
wfModemInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("startup", 1), ("sccInit", 2), ("getInfo", 3), ("setDefaults", 4), ("initialization", 5), ("phoneNumber", 6), ("loopback", 7), ("initComplete", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemInitState.setStatus('mandatory')
wfModemUnitReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetUnit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemUnitReset.setStatus('mandatory')
wfModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemType.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-Modem-MIB", wfModemCfgFactoryDefaults=wfModemCfgFactoryDefaults, wfModemType=wfModemType, wfModemIdHwRev=wfModemIdHwRev, wfModemIdSwRev=wfModemIdSwRev, wfModemLineState=wfModemLineState, wfModemCfgCountry=wfModemCfgCountry, wfModemCfgDefaultString=wfModemCfgDefaultString, wfModemInitState=wfModemInitState, wfModemCfgInitString=wfModemCfgInitString, wfModemSlot=wfModemSlot, wfModemV54Errors=wfModemV54Errors, wfModemV54Timer=wfModemV54Timer, wfModemEntry=wfModemEntry, wfModemV54Lpbk=wfModemV54Lpbk, wfModemCfgResultCodeString=wfModemCfgResultCodeString, wfModemV54RemLpbkDetect=wfModemV54RemLpbkDetect, wfModemDelete=wfModemDelete, wfModemCfgState=wfModemCfgState, wfModemTable=wfModemTable, wfModemPhoneNumber=wfModemPhoneNumber, wfModemUnitReset=wfModemUnitReset, wfModemConnectionFailReason=wfModemConnectionFailReason, wfModemConnector=wfModemConnector)
