#
# PySNMP MIB module CISCOSB-DNSCL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCOSB-DNSCL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:06:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
switch001, = mibBuilder.importSymbols("CISCOSB-MIB", "switch001")
dnsResConfigSbeltEntry, = mibBuilder.importSymbols("DNS-RESOLVER-MIB", "dnsResConfigSbeltEntry")
DnsTime, DnsClass, DnsName, DnsRespCode, DnsNameAsIndex, DnsQClass, DnsType, DnsQType, dns, DnsOpCode = mibBuilder.importSymbols("DNS-SERVER-MIB", "DnsTime", "DnsClass", "DnsName", "DnsRespCode", "DnsNameAsIndex", "DnsQClass", "DnsType", "DnsQType", "dns", "DnsOpCode")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Gauge32, NotificationType, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, MibIdentifier, iso, ModuleIdentity, TimeTicks, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "NotificationType", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "MibIdentifier", "iso", "ModuleIdentity", "TimeTicks", "Integer32", "Counter64")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
rlDnsCl = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93))
rlDnsCl.setRevisions(('2013-04-01 00:00',))
if mibBuilder.loadTexts: rlDnsCl.setLastUpdated('201304010000Z')
if mibBuilder.loadTexts: rlDnsCl.setOrganization('Cisco Small Business')
rlDnsClv2DomainNameTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 14), )
if mibBuilder.loadTexts: rlDnsClv2DomainNameTable.setStatus('current')
rlDnsClv2DomainNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 14, 1), ).setIndexNames((0, "CISCOSB-DNSCL-MIB", "rlDnsClv2DomainNameSource"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2DomainNameIfIndex"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2DomainNamePreference"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2DomainNameName"))
if mibBuilder.loadTexts: rlDnsClv2DomainNameEntry.setStatus('current')
rlDnsClv2DomainNameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dhcpv6", 3), ("dhcpv4", 4))).clone('static'))
if mibBuilder.loadTexts: rlDnsClv2DomainNameSource.setStatus('current')
rlDnsClv2DomainNameIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 14, 1, 2), InterfaceIndex().clone(1))
if mibBuilder.loadTexts: rlDnsClv2DomainNameIfIndex.setStatus('current')
rlDnsClv2DomainNamePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 14, 1, 3), Integer32())
if mibBuilder.loadTexts: rlDnsClv2DomainNamePreference.setStatus('current')
rlDnsClv2DomainNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 14, 1, 4), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsClv2DomainNameName.setStatus('current')
rlDnsClv2DomainNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDnsClv2DomainNameRowStatus.setStatus('current')
rlDnsClv2ServersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 15), )
if mibBuilder.loadTexts: rlDnsClv2ServersTable.setStatus('current')
rlDnsClv2ServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 15, 1), ).setIndexNames((0, "CISCOSB-DNSCL-MIB", "rlDnsClv2ServersSource"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2ServersIfIndex"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2ServersPreference"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2ServersAddrType"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2ServersInetAddr"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2ServersSubTree"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2ServersClass"))
if mibBuilder.loadTexts: rlDnsClv2ServersEntry.setStatus('current')
rlDnsClv2ServersSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dhcpv6", 3), ("dhcpv4", 4))).clone('static'))
if mibBuilder.loadTexts: rlDnsClv2ServersSource.setStatus('current')
rlDnsClv2ServersIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 15, 1, 2), InterfaceIndex().clone(1))
if mibBuilder.loadTexts: rlDnsClv2ServersIfIndex.setStatus('current')
rlDnsClv2ServersPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 15, 1, 3), Integer32())
if mibBuilder.loadTexts: rlDnsClv2ServersPreference.setStatus('current')
rlDnsClv2ServersAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 15, 1, 4), InetAddressType())
if mibBuilder.loadTexts: rlDnsClv2ServersAddrType.setStatus('current')
rlDnsClv2ServersInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 15, 1, 5), InetAddress())
if mibBuilder.loadTexts: rlDnsClv2ServersInetAddr.setStatus('current')
rlDnsClv2ServersSubTree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 15, 1, 6), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsClv2ServersSubTree.setStatus('current')
rlDnsClv2ServersClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 15, 1, 7), DnsClass())
if mibBuilder.loadTexts: rlDnsClv2ServersClass.setStatus('current')
rlDnsClv2ServersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 15, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDnsClv2ServersRowStatus.setStatus('current')
rlDnsClv2FixedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 16), )
if mibBuilder.loadTexts: rlDnsClv2FixedTable.setStatus('current')
rlDnsClv2FixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 16, 1), ).setIndexNames((0, "CISCOSB-DNSCL-MIB", "rlDnsClv2FixedName"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2FixedType"))
if mibBuilder.loadTexts: rlDnsClv2FixedEntry.setStatus('current')
rlDnsClv2FixedName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 16, 1, 1), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsClv2FixedName.setStatus('current')
rlDnsClv2FixedType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 16, 1, 2), DnsType())
if mibBuilder.loadTexts: rlDnsClv2FixedType.setStatus('current')
rlDnsClv2FixedPrettyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 16, 1, 3), DnsName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2FixedPrettyName.setStatus('current')
rlDnsClv2FixedState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 1), ("ready", 2), ("resolving", 3), ("refreshing", 4), ("polling", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2FixedState.setStatus('current')
rlDnsClv2FixedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2FixedCounter.setStatus('current')
rlDnsClv2FixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 16, 1, 6), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2FixedTTL.setStatus('current')
rlDnsClv2FixedTTRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 16, 1, 7), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2FixedTTRefresh.setStatus('current')
rlDnsClv2FixedTTPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 16, 1, 8), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2FixedTTPolling.setStatus('current')
rlDnsClv2ClearCacheTable = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("staticOnly", 1), ("dynamicOnly", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClv2ClearCacheTable.setStatus('current')
rlDnsClv2UnifiedCacheTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18), )
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheTable.setStatus('current')
rlDnsClv2UnifiedCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1), ).setIndexNames((0, "CISCOSB-DNSCL-MIB", "rlDnsClv2UnifiedCacheName"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2UnifiedCacheSource"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2UnifiedCacheState"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2UnifiedCacheType"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClv2UnifiedCacheIndex"))
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheEntry.setStatus('current')
rlDnsClv2UnifiedCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1, 1), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheName.setStatus('current')
rlDnsClv2UnifiedCacheSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("fixed", 3))))
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheSource.setStatus('current')
rlDnsClv2UnifiedCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("ne", 2), ("un", 3))))
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheState.setStatus('current')
rlDnsClv2UnifiedCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv6", 1), ("ipv4", 2))))
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheType.setStatus('current')
rlDnsClv2UnifiedCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1, 5), Integer32())
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheIndex.setStatus('current')
rlDnsClv2UnifiedCacheInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheInetAddrType.setStatus('current')
rlDnsClv2UnifiedCacheInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheInetAddr.setStatus('current')
rlDnsClv2UnifiedCacheTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1, 8), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheTTL.setStatus('current')
rlDnsClv2UnifiedCacheRemainingTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1, 9), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2UnifiedCacheRemainingTTL.setStatus('current')
rlDnsClv2UnifiedCachePrettyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 18, 1, 10), DnsName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClv2UnifiedCachePrettyName.setStatus('current')
rlDnsClMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClMibVersion.setStatus('current')
rlDnsClEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClEnable.setStatus('current')
rlDnsClDomainNameTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 3), )
if mibBuilder.loadTexts: rlDnsClDomainNameTable.setStatus('current')
rlDnsClDomainNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 3, 1), ).setIndexNames((0, "CISCOSB-DNSCL-MIB", "rlDnsClDomainNameName"))
if mibBuilder.loadTexts: rlDnsClDomainNameEntry.setStatus('current')
rlDnsClDomainNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 3, 1, 1), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsClDomainNameName.setStatus('current')
rlDnsClDomainNameOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("dhcpv6", 3))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClDomainNameOwner.setStatus('current')
rlDnsClDomainNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClDomainNameRowStatus.setStatus('current')
rlDnsClMaxNumOfRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClMaxNumOfRetransmissions.setStatus('current')
rlDnsClMinRetransmissionInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClMinRetransmissionInterval.setStatus('current')
rlDnsClNamesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 6), )
if mibBuilder.loadTexts: rlDnsClNamesTable.setStatus('current')
rlDnsClNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 6, 1), ).setIndexNames((0, "CISCOSB-DNSCL-MIB", "rlDnsClNamesName"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClNamesOwner"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClNamesIndex"))
if mibBuilder.loadTexts: rlDnsClNamesEntry.setStatus('current')
rlDnsClNamesName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 6, 1, 1), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsClNamesName.setStatus('current')
rlDnsClNamesOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("dhcpv6", 3))).clone('static'))
if mibBuilder.loadTexts: rlDnsClNamesOwner.setStatus('current')
rlDnsClNamesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 6, 1, 3), Integer32())
if mibBuilder.loadTexts: rlDnsClNamesIndex.setStatus('current')
rlDnsClNamesAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesAddr.setStatus('current')
rlDnsClNamesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 6, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesRowStatus.setStatus('current')
rlDnsResConfigSbeltExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 7), )
if mibBuilder.loadTexts: rlDnsResConfigSbeltExtTable.setStatus('current')
rlDnsResConfigSbeltExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 7, 1), )
dnsResConfigSbeltEntry.registerAugmentions(("CISCOSB-DNSCL-MIB", "rlDnsResConfigSbeltExtEntry"))
rlDnsResConfigSbeltExtEntry.setIndexNames(*dnsResConfigSbeltEntry.getIndexNames())
if mibBuilder.loadTexts: rlDnsResConfigSbeltExtEntry.setStatus('current')
rlDnsResConfigSbeltOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("dhcpv6", 3))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsResConfigSbeltOwner.setStatus('current')
rlDnsClNamesInetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 8), )
if mibBuilder.loadTexts: rlDnsClNamesInetTable.setStatus('current')
rlDnsClNamesInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 8, 1), ).setIndexNames((0, "CISCOSB-DNSCL-MIB", "rlDnsClNamesInetName"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClNamesInetOwner"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClNamesInetIndex"), (0, "CISCOSB-DNSCL-MIB", "rlDnsClNamesInetRRType"))
if mibBuilder.loadTexts: rlDnsClNamesInetEntry.setStatus('current')
rlDnsClNamesInetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 8, 1, 1), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsClNamesInetName.setStatus('current')
rlDnsClNamesInetOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("dhcpv6", 3))).clone('static'))
if mibBuilder.loadTexts: rlDnsClNamesInetOwner.setStatus('current')
rlDnsClNamesInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 8, 1, 3), Integer32())
if mibBuilder.loadTexts: rlDnsClNamesInetIndex.setStatus('current')
rlDnsClNamesInetRRType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 8, 1, 4), DnsType())
if mibBuilder.loadTexts: rlDnsClNamesInetRRType.setStatus('current')
rlDnsClNamesInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 8, 1, 5), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesInetAddrType.setStatus('current')
rlDnsClNamesInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 8, 1, 6), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesInetAddr.setStatus('current')
rlDnsClNamesInetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 8, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesInetRowStatus.setStatus('current')
rlDnsResConfigSbeltInetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 9), )
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetTable.setStatus('current')
rlDnsResConfigSbeltInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 9, 1), ).setIndexNames((0, "CISCOSB-DNSCL-MIB", "rlDnsResConfigSbeltInetAddrType"), (0, "CISCOSB-DNSCL-MIB", "rlDnsResConfigSbeltInetAddr"), (0, "CISCOSB-DNSCL-MIB", "rlDnsResConfigSbeltInetSubTree"), (0, "CISCOSB-DNSCL-MIB", "rlDnsResConfigSbeltInetClass"))
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetEntry.setStatus('current')
rlDnsResConfigSbeltInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 9, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetAddrType.setStatus('current')
rlDnsResConfigSbeltInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 9, 1, 2), InetAddress())
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetAddr.setStatus('current')
rlDnsResConfigSbeltInetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 9, 1, 3), DnsName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetName.setStatus('current')
rlDnsResConfigSbeltInetRecursion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("iterative", 1), ("recursive", 2), ("recursiveAndIterative", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetRecursion.setStatus('current')
rlDnsResConfigSbeltInetPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetPref.setStatus('current')
rlDnsResConfigSbeltInetSubTree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 9, 1, 6), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetSubTree.setStatus('current')
rlDnsResConfigSbeltInetClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 9, 1, 7), DnsClass())
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetClass.setStatus('current')
rlDnsResConfigSbeltInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 9, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetStatus.setStatus('current')
rlDnsResCacheRRInetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10), )
if mibBuilder.loadTexts: rlDnsResCacheRRInetTable.setStatus('current')
rlDnsResCacheRRInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1), ).setIndexNames((0, "CISCOSB-DNSCL-MIB", "rlDnsResCacheRRInetName"), (0, "CISCOSB-DNSCL-MIB", "rlDnsResCacheRRInetClass"), (0, "CISCOSB-DNSCL-MIB", "rlDnsResCacheRRInetType"), (0, "CISCOSB-DNSCL-MIB", "rlDnsResCacheRRInetIndex"))
if mibBuilder.loadTexts: rlDnsResCacheRRInetEntry.setStatus('current')
rlDnsResCacheRRInetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 1), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsResCacheRRInetName.setStatus('current')
rlDnsResCacheRRInetClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 2), DnsClass())
if mibBuilder.loadTexts: rlDnsResCacheRRInetClass.setStatus('current')
rlDnsResCacheRRInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 3), DnsType())
if mibBuilder.loadTexts: rlDnsResCacheRRInetType.setStatus('current')
rlDnsResCacheRRInetTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 4), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetTTL.setStatus('current')
rlDnsResCacheRRInetElapsedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 5), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetElapsedTTL.setStatus('current')
rlDnsResCacheRRInetSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetSourceAddrType.setStatus('current')
rlDnsResCacheRRInetSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetSource.setStatus('current')
rlDnsResCacheRRInetData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetData.setStatus('current')
rlDnsResCacheRRInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsResCacheRRInetStatus.setStatus('current')
rlDnsResCacheRRInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 10), Integer32())
if mibBuilder.loadTexts: rlDnsResCacheRRInetIndex.setStatus('current')
rlDnsResCacheRRInetPrettyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 10, 1, 11), DnsName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetPrettyName.setStatus('current')
rlDnsResNCacheErrInetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11), )
if mibBuilder.loadTexts: rlDnsResNCacheErrInetTable.setStatus('current')
rlDnsResNCacheErrInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1), ).setIndexNames((0, "CISCOSB-DNSCL-MIB", "rlDnsResNCacheErrInetQName"), (0, "CISCOSB-DNSCL-MIB", "rlDnsResNCacheErrInetQClass"), (0, "CISCOSB-DNSCL-MIB", "rlDnsResNCacheErrInetQType"), (0, "CISCOSB-DNSCL-MIB", "rlDnsResNCacheErrInetIndex"))
if mibBuilder.loadTexts: rlDnsResNCacheErrInetEntry.setStatus('current')
rlDnsResNCacheErrInetQName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 1), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsResNCacheErrInetQName.setStatus('current')
rlDnsResNCacheErrInetQClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 2), DnsQClass())
if mibBuilder.loadTexts: rlDnsResNCacheErrInetQClass.setStatus('current')
rlDnsResNCacheErrInetQType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 3), DnsQType())
if mibBuilder.loadTexts: rlDnsResNCacheErrInetQType.setStatus('current')
rlDnsResNCacheErrInetTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 4), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetTTL.setStatus('current')
rlDnsResNCacheErrInetElapsedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 5), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetElapsedTTL.setStatus('current')
rlDnsResNCacheErrInetSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetSourceAddrType.setStatus('current')
rlDnsResNCacheErrInetSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetSource.setStatus('current')
rlDnsResNCacheErrInetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonexistantName", 1), ("noData", 2), ("other", 3), ("unresolved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetCode.setStatus('current')
rlDnsResNCacheErrInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetStatus.setStatus('current')
rlDnsResNCacheErrInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 10), Integer32())
if mibBuilder.loadTexts: rlDnsResNCacheErrInetIndex.setStatus('current')
rlDnsResNCacheErrInetPrettyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 11, 1, 11), DnsName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetPrettyName.setStatus('current')
rlDnsResConfigSbeltExtInetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 12), )
if mibBuilder.loadTexts: rlDnsResConfigSbeltExtInetTable.setStatus('current')
rlDnsResConfigSbeltExtInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 12, 1), )
rlDnsResConfigSbeltInetEntry.registerAugmentions(("CISCOSB-DNSCL-MIB", "rlDnsResConfigSbeltExtInetEntry"))
rlDnsResConfigSbeltExtInetEntry.setIndexNames(*rlDnsResConfigSbeltInetEntry.getIndexNames())
if mibBuilder.loadTexts: rlDnsResConfigSbeltExtInetEntry.setStatus('current')
rlDnsResConfigSbeltInetOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("dhcpv6", 3))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetOwner.setStatus('current')
rlDnsClMinPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 93, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClMinPollingInterval.setStatus('current')
mibBuilder.exportSymbols("CISCOSB-DNSCL-MIB", rlDnsClv2UnifiedCacheRemainingTTL=rlDnsClv2UnifiedCacheRemainingTTL, rlDnsCl=rlDnsCl, rlDnsClv2ServersSource=rlDnsClv2ServersSource, rlDnsResNCacheErrInetTTL=rlDnsResNCacheErrInetTTL, rlDnsResCacheRRInetStatus=rlDnsResCacheRRInetStatus, rlDnsClNamesInetEntry=rlDnsClNamesInetEntry, rlDnsClv2FixedTTPolling=rlDnsClv2FixedTTPolling, rlDnsClDomainNameName=rlDnsClDomainNameName, rlDnsResConfigSbeltInetName=rlDnsResConfigSbeltInetName, rlDnsResConfigSbeltExtTable=rlDnsResConfigSbeltExtTable, rlDnsClv2UnifiedCacheEntry=rlDnsClv2UnifiedCacheEntry, rlDnsClv2ServersPreference=rlDnsClv2ServersPreference, rlDnsClNamesRowStatus=rlDnsClNamesRowStatus, rlDnsClMaxNumOfRetransmissions=rlDnsClMaxNumOfRetransmissions, rlDnsClNamesInetIndex=rlDnsClNamesInetIndex, rlDnsClv2UnifiedCacheName=rlDnsClv2UnifiedCacheName, rlDnsResConfigSbeltInetStatus=rlDnsResConfigSbeltInetStatus, rlDnsClv2DomainNameEntry=rlDnsClv2DomainNameEntry, rlDnsClEnable=rlDnsClEnable, rlDnsResNCacheErrInetSourceAddrType=rlDnsResNCacheErrInetSourceAddrType, rlDnsResCacheRRInetSourceAddrType=rlDnsResCacheRRInetSourceAddrType, rlDnsClv2UnifiedCacheTable=rlDnsClv2UnifiedCacheTable, rlDnsClv2FixedPrettyName=rlDnsClv2FixedPrettyName, rlDnsClMibVersion=rlDnsClMibVersion, rlDnsClNamesInetOwner=rlDnsClNamesInetOwner, rlDnsResCacheRRInetTTL=rlDnsResCacheRRInetTTL, rlDnsResCacheRRInetSource=rlDnsResCacheRRInetSource, rlDnsResCacheRRInetType=rlDnsResCacheRRInetType, rlDnsResNCacheErrInetEntry=rlDnsResNCacheErrInetEntry, rlDnsClv2DomainNameName=rlDnsClv2DomainNameName, rlDnsClv2ServersEntry=rlDnsClv2ServersEntry, rlDnsClNamesIndex=rlDnsClNamesIndex, rlDnsResConfigSbeltInetAddr=rlDnsResConfigSbeltInetAddr, rlDnsClDomainNameRowStatus=rlDnsClDomainNameRowStatus, rlDnsClv2FixedCounter=rlDnsClv2FixedCounter, rlDnsResConfigSbeltExtEntry=rlDnsResConfigSbeltExtEntry, rlDnsClNamesEntry=rlDnsClNamesEntry, rlDnsResConfigSbeltInetEntry=rlDnsResConfigSbeltInetEntry, rlDnsClv2FixedTTL=rlDnsClv2FixedTTL, rlDnsResCacheRRInetData=rlDnsResCacheRRInetData, rlDnsClv2UnifiedCacheState=rlDnsClv2UnifiedCacheState, rlDnsResConfigSbeltInetClass=rlDnsResConfigSbeltInetClass, rlDnsClv2FixedState=rlDnsClv2FixedState, rlDnsClv2DomainNameRowStatus=rlDnsClv2DomainNameRowStatus, rlDnsClv2UnifiedCachePrettyName=rlDnsClv2UnifiedCachePrettyName, rlDnsClv2FixedEntry=rlDnsClv2FixedEntry, rlDnsResCacheRRInetIndex=rlDnsResCacheRRInetIndex, rlDnsClv2FixedTable=rlDnsClv2FixedTable, rlDnsResCacheRRInetElapsedTTL=rlDnsResCacheRRInetElapsedTTL, rlDnsClv2FixedTTRefresh=rlDnsClv2FixedTTRefresh, rlDnsResNCacheErrInetStatus=rlDnsResNCacheErrInetStatus, rlDnsClNamesName=rlDnsClNamesName, rlDnsResCacheRRInetName=rlDnsResCacheRRInetName, rlDnsResConfigSbeltInetOwner=rlDnsResConfigSbeltInetOwner, rlDnsClv2ClearCacheTable=rlDnsClv2ClearCacheTable, rlDnsClv2UnifiedCacheInetAddrType=rlDnsClv2UnifiedCacheInetAddrType, rlDnsResCacheRRInetClass=rlDnsResCacheRRInetClass, rlDnsClNamesTable=rlDnsClNamesTable, rlDnsClv2ServersAddrType=rlDnsClv2ServersAddrType, rlDnsClNamesOwner=rlDnsClNamesOwner, rlDnsClv2DomainNamePreference=rlDnsClv2DomainNamePreference, rlDnsClNamesInetAddr=rlDnsClNamesInetAddr, rlDnsClv2UnifiedCacheType=rlDnsClv2UnifiedCacheType, rlDnsClv2DomainNameIfIndex=rlDnsClv2DomainNameIfIndex, rlDnsResNCacheErrInetElapsedTTL=rlDnsResNCacheErrInetElapsedTTL, rlDnsClv2UnifiedCacheSource=rlDnsClv2UnifiedCacheSource, rlDnsClNamesInetTable=rlDnsClNamesInetTable, rlDnsResCacheRRInetEntry=rlDnsResCacheRRInetEntry, rlDnsResConfigSbeltInetSubTree=rlDnsResConfigSbeltInetSubTree, rlDnsResConfigSbeltInetRecursion=rlDnsResConfigSbeltInetRecursion, rlDnsResNCacheErrInetIndex=rlDnsResNCacheErrInetIndex, rlDnsClv2UnifiedCacheInetAddr=rlDnsClv2UnifiedCacheInetAddr, rlDnsClv2DomainNameSource=rlDnsClv2DomainNameSource, rlDnsClDomainNameEntry=rlDnsClDomainNameEntry, rlDnsClv2ServersIfIndex=rlDnsClv2ServersIfIndex, rlDnsResNCacheErrInetCode=rlDnsResNCacheErrInetCode, rlDnsClv2ServersSubTree=rlDnsClv2ServersSubTree, rlDnsClv2ServersClass=rlDnsClv2ServersClass, rlDnsResConfigSbeltInetTable=rlDnsResConfigSbeltInetTable, rlDnsClDomainNameOwner=rlDnsClDomainNameOwner, rlDnsResConfigSbeltInetAddrType=rlDnsResConfigSbeltInetAddrType, rlDnsClNamesAddr=rlDnsClNamesAddr, rlDnsClMinRetransmissionInterval=rlDnsClMinRetransmissionInterval, rlDnsClNamesInetAddrType=rlDnsClNamesInetAddrType, rlDnsClNamesInetRowStatus=rlDnsClNamesInetRowStatus, rlDnsClv2UnifiedCacheIndex=rlDnsClv2UnifiedCacheIndex, rlDnsResCacheRRInetPrettyName=rlDnsResCacheRRInetPrettyName, rlDnsResNCacheErrInetSource=rlDnsResNCacheErrInetSource, rlDnsClDomainNameTable=rlDnsClDomainNameTable, rlDnsResNCacheErrInetQClass=rlDnsResNCacheErrInetQClass, rlDnsResNCacheErrInetTable=rlDnsResNCacheErrInetTable, rlDnsResConfigSbeltExtInetEntry=rlDnsResConfigSbeltExtInetEntry, rlDnsResNCacheErrInetQType=rlDnsResNCacheErrInetQType, rlDnsResConfigSbeltInetPref=rlDnsResConfigSbeltInetPref, rlDnsResNCacheErrInetPrettyName=rlDnsResNCacheErrInetPrettyName, rlDnsResConfigSbeltExtInetTable=rlDnsResConfigSbeltExtInetTable, rlDnsResNCacheErrInetQName=rlDnsResNCacheErrInetQName, rlDnsClv2ServersInetAddr=rlDnsClv2ServersInetAddr, PYSNMP_MODULE_ID=rlDnsCl, rlDnsClv2FixedType=rlDnsClv2FixedType, rlDnsClNamesInetName=rlDnsClNamesInetName, rlDnsResCacheRRInetTable=rlDnsResCacheRRInetTable, rlDnsClv2ServersTable=rlDnsClv2ServersTable, rlDnsClv2ServersRowStatus=rlDnsClv2ServersRowStatus, rlDnsClv2UnifiedCacheTTL=rlDnsClv2UnifiedCacheTTL, rlDnsResConfigSbeltOwner=rlDnsResConfigSbeltOwner, rlDnsClv2DomainNameTable=rlDnsClv2DomainNameTable, rlDnsClMinPollingInterval=rlDnsClMinPollingInterval, rlDnsClNamesInetRRType=rlDnsClNamesInetRRType, rlDnsClv2FixedName=rlDnsClv2FixedName)
