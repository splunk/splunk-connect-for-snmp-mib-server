#
# PySNMP MIB module HH3C-BPA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-BPA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:12:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, NotificationType, ObjectIdentity, Integer32, IpAddress, iso, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "NotificationType", "ObjectIdentity", "Integer32", "IpAddress", "iso", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "TimeTicks", "ModuleIdentity")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hh3cBpa = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 144))
hh3cBpa.setRevisions(('2013-11-13 11:28',))
if mibBuilder.loadTexts: hh3cBpa.setLastUpdated('201311131128Z')
if mibBuilder.loadTexts: hh3cBpa.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
hh3cBpaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1))
hh3cBpaCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 1), )
if mibBuilder.loadTexts: hh3cBpaCfgTable.setStatus('current')
hh3cBpaCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-BPA-MIB", "hh3cBpaDirection"))
if mibBuilder.loadTexts: hh3cBpaCfgEntry.setStatus('current')
hh3cBpaDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2))))
if mibBuilder.loadTexts: hh3cBpaDirection.setStatus('current')
hh3cBpaSrcOrDest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("both", 3))).clone('destination')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBpaSrcOrDest.setStatus('current')
hh3cBpaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBpaRowStatus.setStatus('current')
hh3cBpaStatTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2), )
if mibBuilder.loadTexts: hh3cBpaStatTable.setStatus('current')
hh3cBpaStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-BPA-MIB", "hh3cBpaTrafficType"), (0, "HH3C-BPA-MIB", "hh3cBpaTrafficIndex"))
if mibBuilder.loadTexts: hh3cBpaStatEntry.setStatus('current')
hh3cBpaTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cBpaTrafficType.setStatus('current')
hh3cBpaTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cBpaTrafficIndex.setStatus('current')
hh3cBpaInPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBpaInPacketCount.setStatus('current')
hh3cBpaInOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBpaInOctetCount.setStatus('current')
hh3cBpaOutPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBpaOutPacketCount.setStatus('current')
hh3cBpaOutOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBpaOutOctetCount.setStatus('current')
mibBuilder.exportSymbols("HH3C-BPA-MIB", hh3cBpaSrcOrDest=hh3cBpaSrcOrDest, hh3cBpaStatTable=hh3cBpaStatTable, hh3cBpaInOctetCount=hh3cBpaInOctetCount, PYSNMP_MODULE_ID=hh3cBpa, hh3cBpaTrafficType=hh3cBpaTrafficType, hh3cBpaOutOctetCount=hh3cBpaOutOctetCount, hh3cBpa=hh3cBpa, hh3cBpaDirection=hh3cBpaDirection, hh3cBpaOutPacketCount=hh3cBpaOutPacketCount, hh3cBpaTrafficIndex=hh3cBpaTrafficIndex, hh3cBpaRowStatus=hh3cBpaRowStatus, hh3cBpaInPacketCount=hh3cBpaInPacketCount, hh3cBpaCfgTable=hh3cBpaCfgTable, hh3cBpaObjects=hh3cBpaObjects, hh3cBpaStatEntry=hh3cBpaStatEntry, hh3cBpaCfgEntry=hh3cBpaCfgEntry)
