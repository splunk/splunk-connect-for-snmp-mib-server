#
# PySNMP MIB module BNET-ATM-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BNET-ATM-TOPOLOGY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:22:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
VpiInteger, = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "VpiInteger")
s5AtmTop, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5AtmTop")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, ModuleIdentity, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, ObjectIdentity, Unsigned32, iso, Gauge32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "ModuleIdentity", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Unsigned32", "iso", "Gauge32", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bnetAtmTopGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1))
bnetAtmTopLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2))
bnetAtmTopGblStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("topOn", 1), ("topOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bnetAtmTopGblStatus.setStatus('mandatory')
bnetAtmTopGblLstChg = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopGblLstChg.setStatus('mandatory')
bnetAtmTopGblCurNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopGblCurNum.setStatus('mandatory')
bnetAtmTopGblCurMibVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopGblCurMibVer.setStatus('mandatory')
bnetAtmTopGblOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("topOn", 1), ("topOff", 2), ("topUnavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopGblOperStatus.setStatus('mandatory')
bnetAtmTopLinksTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1), )
if mibBuilder.loadTexts: bnetAtmTopLinksTable.setStatus('mandatory')
bnetAtmTopLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1), ).setIndexNames((0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksSlotNumIndx"), (0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksPortNumIndx"), (0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksLcnIndx"))
if mibBuilder.loadTexts: bnetAtmTopLinksEntry.setStatus('mandatory')
bnetAtmTopLinksSlotNumIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksSlotNumIndx.setStatus('mandatory')
bnetAtmTopLinksPortNumIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPortNumIndx.setStatus('mandatory')
bnetAtmTopLinksLcnIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 3), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksLcnIndx.setStatus('mandatory')
bnetAtmTopLinksTopoState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unavailable", 1), ("notParticipating", 2), ("participating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksTopoState.setStatus('mandatory')
bnetAtmTopLinksPeerSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPeerSlotNum.setStatus('mandatory')
bnetAtmTopLinksPeerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPeerPortNum.setStatus('mandatory')
bnetAtmTopLinksPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPeerIpAddr.setStatus('mandatory')
bnetAtmTopLinksPeerChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPeerChassisType.setStatus('mandatory')
bnetAtmTopLinksPeerChassisSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPeerChassisSubType.setStatus('mandatory')
bnetAtmTopLinksEosSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksEosSize.setStatus('mandatory')
bnetAtmTopLinksEosTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 3), )
if mibBuilder.loadTexts: bnetAtmTopLinksEosTable.setStatus('mandatory')
bnetAtmTopLinksEosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 3, 1), ).setIndexNames((0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksSlotNumIndx"), (0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksPortNumIndx"), (0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksLcnIndx"))
if mibBuilder.loadTexts: bnetAtmTopLinksEosEntry.setStatus('mandatory')
bnetAtmTopLinksEos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksEos.setStatus('mandatory')
mibBuilder.exportSymbols("BNET-ATM-TOPOLOGY-MIB", bnetAtmTopLinksPortNumIndx=bnetAtmTopLinksPortNumIndx, bnetAtmTopLinksLcnIndx=bnetAtmTopLinksLcnIndx, bnetAtmTopLinksEosSize=bnetAtmTopLinksEosSize, bnetAtmTopGblCurNum=bnetAtmTopGblCurNum, bnetAtmTopLinksEntry=bnetAtmTopLinksEntry, bnetAtmTopLinksEosTable=bnetAtmTopLinksEosTable, bnetAtmTopLinksPeerChassisSubType=bnetAtmTopLinksPeerChassisSubType, bnetAtmTopGblLstChg=bnetAtmTopGblLstChg, bnetAtmTopGblStatus=bnetAtmTopGblStatus, bnetAtmTopGblOperStatus=bnetAtmTopGblOperStatus, bnetAtmTopLinks=bnetAtmTopLinks, bnetAtmTopLinksTopoState=bnetAtmTopLinksTopoState, bnetAtmTopLinksEos=bnetAtmTopLinksEos, bnetAtmTopGblCurMibVer=bnetAtmTopGblCurMibVer, bnetAtmTopLinksTable=bnetAtmTopLinksTable, bnetAtmTopLinksPeerPortNum=bnetAtmTopLinksPeerPortNum, bnetAtmTopLinksPeerChassisType=bnetAtmTopLinksPeerChassisType, bnetAtmTopLinksPeerIpAddr=bnetAtmTopLinksPeerIpAddr, bnetAtmTopLinksEosEntry=bnetAtmTopLinksEosEntry, bnetAtmTopGbl=bnetAtmTopGbl, bnetAtmTopLinksSlotNumIndx=bnetAtmTopLinksSlotNumIndx, bnetAtmTopLinksPeerSlotNum=bnetAtmTopLinksPeerSlotNum)
