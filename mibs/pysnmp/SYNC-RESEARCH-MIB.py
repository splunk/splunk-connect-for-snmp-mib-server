#
# PySNMP MIB module SYNC-RESEARCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYNC-RESEARCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:06:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, enterprises, TimeTicks, IpAddress, ModuleIdentity, Counter32, MibIdentifier, Counter64, NotificationType, Unsigned32, Bits, Gauge32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "enterprises", "TimeTicks", "IpAddress", "ModuleIdentity", "Counter32", "MibIdentifier", "Counter64", "NotificationType", "Unsigned32", "Bits", "Gauge32", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

syncResearch = MibIdentifier((1, 3, 6, 1, 4, 1, 485))
syncResearchAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1))
syncProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1))
oemProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2))
boundary = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1))
centralSite = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 2))
syncCN2R2b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 1))
syncFN2R2b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 2))
syncCN4R2b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 3))
syncFN4R2b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 4))
syncQN4R2b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 5))
syncCN4R3b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 6))
syncFN4R3b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 7))
syncQN4R3b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 8))
syncCN4R4b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 9))
syncFN4R4b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 10))
syncQN4R4b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 11))
syncCN4R4bu = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 12))
syncFN4R4bu = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 13))
syncQN4R4bu = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 14))
syncCN4R4du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 15))
syncFN4R4du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 16))
syncQN4R4du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 17))
syncCN2R2du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 18))
syncFN2R2du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 19))
syncCN3R4bu = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 20))
syncFN3R4bu = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 21))
syncCN3R4du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 22))
syncFN3R4du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 23))
syncCN4R5b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 24))
syncFN4R5b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 25))
syncQN4R5b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 26))
syncCN4R5bu = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 27))
syncFN4R5bu = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 28))
syncQN4R5bu = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 29))
syncCN4R5du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 30))
syncFN4R5du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 31))
syncQN4R5du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 32))
syncFN5R5du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 33))
syncBC4R5b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 34))
syncBF4R5b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 35))
syncBF3R5b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 36))
syncBF5R5b = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 37))
syncFN3R5du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 38))
syncCN3R5du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 39))
syncCN5R5du = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 40))
syncBF3R5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 41))
syncBC3R5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 42))
syncBF4R5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 43))
syncBC4R5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 44))
syncBF5R5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 45))
syncBC5R5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 1, 46))
syncCN4R2c = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 2, 1))
syncFN4R2c = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 2, 2))
syncQN4R2c = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 2, 3))
syncCN4R3c = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 2, 4))
syncFN4R3c = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 2, 5))
syncQN4R3c = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 2, 6))
syncCN4R4u = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 2, 7))
syncFN4R4u = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 2, 8))
syncQN4R4u = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 1, 2, 9))
threeCom = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 1))
cableTron = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2))
chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 3))
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4))
linkConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 1, 1))
linkConverter2 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 1, 2))
lc2EN2port = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 1, 3))
lc2EN4port = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 1, 4))
lc2TR2port = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 1, 5))
lc2TR6port = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 1, 6))
oemSNACXR2C = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 1))
oemSNACXR2W = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 2))
oemSNACMR2C = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 3))
oemSNACMR2W = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 4))
oemSNACMIM2 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 5))
oemSNACXR2Q = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 6))
oemSNACMR2Q = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 7))
oemSNACXR3C = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 8))
oemSNACXR3W = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 9))
oemSNACMR3C = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 10))
oemSNACMR3W = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 11))
oemSNACXR3Q = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 12))
oemSNACMR3Q = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 13))
oemSNACXR4C = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 14))
oemSNACXR4W = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 15))
oemSNACMR4C = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 16))
oemSNACMR4W = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 17))
oemSNACXR4Q = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 18))
oemSNACMR4Q = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 2, 19))
oem2490R22F = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 1))
oem2490R22C = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 2))
oem22181FR4 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 3))
oem22181CR4 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 4))
oem22183FR4 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 5))
oem22183CR4 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 6))
oem22181FR5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 7))
oem22181CR5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 8))
oem22183FR5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 9))
oem22183CR5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 10))
oem22185FR5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 11))
oem22185CR5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 12))
oem22183BF5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 13))
oem22183BC5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 14))
oem22184BF5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 15))
oem22184BC5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 16))
oem22185BF5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 17))
oem22185BC5 = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 1, 2, 4, 18))
srNodeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3))
nodeUnitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 1))
nodeNetViewPUGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 2))
nodeBridgeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 3))
nodeLANGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 4))
nodeLineGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5))
nodePUGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6))
nodeDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 7))
nodeT7Group = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 8))
nodeFrCirGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 9))
nodeSlipGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 10))
nodeIpxGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 11))
nodeIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 12))
unitControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 1, 1))
unitStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 1, 2))
unitConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 1, 3))
unitStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 1, 4))
netViewPUStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 2, 1))
netViewPUConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 2, 2))
bridgeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 3, 1))
bridgeStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 3, 2))
ipxConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 11, 1))
ipConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 12, 1))
lanControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 4, 1))
lanTokenRingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 4, 2))
lineControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 1))
linePhysicalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 2))
lineSDLCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 3))
lineBisyncGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 4))
lineFrameRelayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 5))
lineAsyncGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 6))
lineBisyncRjeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 7))
lineDialBackupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 8))
lineX25Group = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 9))
lineAlcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 10))
isdnControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2))
dsucsuControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3))
puControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6, 1))
puSDLCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6, 2))
puBisyncGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6, 3))
puMappingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6, 4))
puAsyncGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6, 5))
puLanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6, 6))
puRemoteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6, 7))
puX25Group = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6, 8))
puAlcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6, 9))
puBisyncRjeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 6, 10))
deviceControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 7, 1))
deviceBSCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 7, 2))
deviceALCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 7, 3))
t7ConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 8, 1))
t7StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 8, 2))
slipConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 10, 1))
slipStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 3, 10, 2))
srCommTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 2))
commCount = MibScalar((1, 3, 6, 1, 4, 1, 485, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commCount.setStatus('mandatory')
commTable = MibTable((1, 3, 6, 1, 4, 1, 485, 2, 2), )
if mibBuilder.loadTexts: commTable.setStatus('mandatory')
commEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 2, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "commIndex"))
if mibBuilder.loadTexts: commEntry.setStatus('mandatory')
commIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commIndex.setStatus('mandatory')
commName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commName.setStatus('mandatory')
commTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapoff", 1), ("trapon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrap.setStatus('mandatory')
commIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commIPAddr.setStatus('mandatory')
commMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commMACAddr.setStatus('mandatory')
commAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAccess", 1), ("ro", 2), ("rw", 3), ("su", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commAccess.setStatus('mandatory')
unitRestart = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart-unit", 1), ("dummy-restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitRestart.setStatus('mandatory')
dumpOnRestart = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dump-on-start", 1), ("dont-dump", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpOnRestart.setStatus('mandatory')
initiateInstall = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start-install", 1), ("dummy-install", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: initiateInstall.setStatus('mandatory')
initializeStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("init-stats", 1), ("dummy-init-stats", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: initializeStats.setStatus('mandatory')
clearDump = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-dump-file", 1), ("dummy-clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearDump.setStatus('mandatory')
acknowledgeAllStatuses = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acknowledgeAllStatuses.setStatus('mandatory')
consolidatedUnitStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("informational", 3), ("disabled", 4), ("marginal", 5), ("warning", 6), ("minor", 7), ("major", 8), ("critical", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consolidatedUnitStatus.setStatus('mandatory')
homeDialBackup = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("home-dial-backup", 1), ("dummy-home", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: homeDialBackup.setStatus('mandatory')
unitModel = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("boundary", 1), ("lic", 2), ("chipcomPED", 3), ("snacMIM", 4), ("microMac", 5), ("linkConverter", 6), ("universal-boundary", 7), ("universal-desktop", 8), ("linkConverterII", 9), ("ibm", 10), ("sync3600", 11), ("ibm3600", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitModel.setStatus('mandatory')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('mandatory')
productType = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('mandatory')
maxPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxPortNumber.setStatus('mandatory')
maxPU = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxPU.setStatus('mandatory')
maxSession = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxSession.setStatus('mandatory')
maxDevice = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxDevice.setStatus('mandatory')
msBoardType = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 17, 18, 22, 23, 26, 30))).clone(namedValues=NamedValues(("not-expected", 1), ("two-port-RS232", 16), ("two-port-RS422", 17), ("two-port-V35", 18), ("v35-RS232", 22), ("rs422-RS232", 23), ("two-port-universal", 26), ("two-port-iusc-RS232", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msBoardType.setStatus('mandatory')
msExtBoardType = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 19, 20, 21, 24, 25, 27, 28, 29))).clone(namedValues=NamedValues(("not-present", 1), ("two-port-RS232", 19), ("two-port-RS422", 20), ("two-port-V35", 21), ("two-port-hspeedRS232", 24), ("two-port-hspeedV35", 25), ("two-port-universal", 27), ("four-port-universal", 28), ("six-port-universal", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msExtBoardType.setStatus('mandatory')
dumpFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dump-available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileStatus.setStatus('mandatory')
dumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileName.setStatus('mandatory')
unitSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSerialNumber.setStatus('mandatory')
expansionSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expansionSerialNumber.setStatus('mandatory')
romVersion = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: romVersion.setStatus('mandatory')
processorType = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("i286", 1), ("i386", 2), ("i486SX", 3), ("i486DX", 4), ("i486DX-2", 5), ("i486DX-4", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorType.setStatus('mandatory')
chassisSlot = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlot.setStatus('mandatory')
lastTrapSeqNumber = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTrapSeqNumber.setStatus('mandatory')
lastInstallErrCode = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastInstallErrCode.setStatus('mandatory')
unitPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitPartNumber.setStatus('mandatory')
expansionPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expansionPartNumber.setStatus('mandatory')
wan1BoardType = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 31))).clone(namedValues=NamedValues(("not-present", 1), ("dsu-csu", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wan1BoardType.setStatus('mandatory')
wan2BoardType = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 31, 32))).clone(namedValues=NamedValues(("not-present", 1), ("dsu-csu", 31), ("isdn", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wan2BoardType.setStatus('mandatory')
patchId = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: patchId.setStatus('mandatory')
unitId = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitId.setStatus('mandatory')
nmsSerialSpeed = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 24, 48, 96, 192))).clone(namedValues=NamedValues(("speed1200", 12), ("speed2400", 24), ("speed4800", 48), ("speed9600", 96), ("speed19200", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsSerialSpeed.setStatus('mandatory')
serialPortLogoffTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortLogoffTimer.setStatus('mandatory')
callRetryTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callRetryTimer.setStatus('mandatory')
password = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('mandatory')
configPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPassword.setStatus('mandatory')
dateTimeField = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeField.setStatus('mandatory')
configId = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configId.setStatus('mandatory')
internalMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalMacAddress.setStatus('mandatory')
internalRingNumber = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalRingNumber.setStatus('mandatory')
internalBridgeNumber = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalBridgeNumber.setStatus('mandatory')
internalMacAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 12), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalMacAddress2.setStatus('mandatory')
internalRingNumber2 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalRingNumber2.setStatus('mandatory')
associatedPortNumber2 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: associatedPortNumber2.setStatus('mandatory')
associatedDLCI2 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: associatedDLCI2.setStatus('mandatory')
internalMacAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 16), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalMacAddress3.setStatus('mandatory')
internalRingNumber3 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalRingNumber3.setStatus('mandatory')
associatedPortNumber3 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: associatedPortNumber3.setStatus('mandatory')
associatedDLCI3 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: associatedDLCI3.setStatus('mandatory')
internalMacAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 20), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalMacAddress4.setStatus('mandatory')
internalRingNumber4 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalRingNumber4.setStatus('mandatory')
associatedPortNumber4 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: associatedPortNumber4.setStatus('mandatory')
associatedDLCI4 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: associatedDLCI4.setStatus('mandatory')
ipInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInactivityTimer.setStatus('mandatory')
excessBurstGovernor = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excessBurstGovernor.setStatus('mandatory')
measurementPeriod = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementPeriod.setStatus('mandatory')
markDEBit = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: markDEBit.setStatus('mandatory')
numberSamples = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSamples.setStatus('mandatory')
systemBufferFreeCounts = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBufferFreeCounts.setStatus('mandatory')
cpuIdleSumCounts = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleSumCounts.setStatus('mandatory')
netviewConnectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("not-connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netviewConnectionStatus.setStatus('mandatory')
netviewLastClearCode = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: netviewLastClearCode.setStatus('mandatory')
netviewAltConnectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("not-connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netviewAltConnectionStatus.setStatus('mandatory')
netviewAltLastClearCode = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: netviewAltLastClearCode.setStatus('mandatory')
netviewConnectionAttemptCount = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netviewConnectionAttemptCount.setStatus('mandatory')
netviewAltConnectionAttemptCount = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netviewAltConnectionAttemptCount.setStatus('mandatory')
netviewStatusIgnored = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netviewStatusIgnored.setStatus('mandatory')
netviewStatusAcknowledged = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netviewStatusAcknowledged.setStatus('mandatory')
netviewAltStatusIgnored = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netviewAltStatusIgnored.setStatus('mandatory')
netviewAltStatusAcknowledged = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netviewAltStatusAcknowledged.setStatus('mandatory')
netviewPUXID = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: netviewPUXID.setStatus('mandatory')
alternateNetviewPUXID = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateNetviewPUXID.setStatus('mandatory')
netviewConnectID = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: netviewConnectID.setStatus('mandatory')
alternateNetviewConnectID = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateNetviewConnectID.setStatus('mandatory')
netviewSpecialConnect = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netviewSpecialConnect.setStatus('mandatory')
alternateNetviewSpecialConnect = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateNetviewSpecialConnect.setStatus('mandatory')
brEnableBridging = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEnableBridging.setStatus('mandatory')
bridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePriority.setStatus('mandatory')
brMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMaxAge.setStatus('mandatory')
brHelloTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brHelloTimer.setStatus('mandatory')
brFilterIPX = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFilterIPX.setStatus('mandatory')
brFilterIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFilterIP.setStatus('mandatory')
brFilterNetBIOS = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFilterNetBIOS.setStatus('mandatory')
brFilterLLC2 = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFilterLLC2.setStatus('mandatory')
brFilterSMAN = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFilterSMAN.setStatus('mandatory')
brForwardOther = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brForwardOther.setStatus('mandatory')
brIPXtargetPort = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brIPXtargetPort.setStatus('mandatory')
brIPXtargetDLCI = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brIPXtargetDLCI.setStatus('mandatory')
brIPtargetPort = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brIPtargetPort.setStatus('mandatory')
brIPtargetDLCI = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brIPtargetDLCI.setStatus('mandatory')
brNetBIOStargetPort = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNetBIOStargetPort.setStatus('mandatory')
brNetBIOStargetDLCI = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNetBIOStargetDLCI.setStatus('mandatory')
brLLC2targetPort = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLLC2targetPort.setStatus('mandatory')
brLLC2targetDLCI = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLLC2targetDLCI.setStatus('mandatory')
brOthertargetPort = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brOthertargetPort.setStatus('mandatory')
brOthertargetDLCI = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brOthertargetDLCI.setStatus('mandatory')
brSerialPriority = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("medium", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brSerialPriority.setStatus('mandatory')
brTerminatedLLC2Priority = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("medium", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brTerminatedLLC2Priority.setStatus('mandatory')
brLLC2Priority = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("medium", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLLC2Priority.setStatus('mandatory')
brIPXPriority = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("medium", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brIPXPriority.setStatus('mandatory')
brIPPriority = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("medium", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brIPPriority.setStatus('mandatory')
brNetBIOSPriority = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("medium", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNetBIOSPriority.setStatus('mandatory')
brOtherPriority = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("medium", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brOtherPriority.setStatus('mandatory')
brHighPriorityBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brHighPriorityBandwidth.setStatus('mandatory')
brMediumPriorityBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMediumPriorityBandwidth.setStatus('mandatory')
brLowPriorityBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLowPriorityBandwidth.setStatus('mandatory')
brDelayTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brDelayTimer.setStatus('mandatory')
brEnableIPXBridging = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEnableIPXBridging.setStatus('mandatory')
brEnableIPBridging = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEnableIPBridging.setStatus('mandatory')
brEnableNetBiosBridging = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEnableNetBiosBridging.setStatus('mandatory')
brEnableSNABridging = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEnableSNABridging.setStatus('mandatory')
brEnableSyncManBridging = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEnableSyncManBridging.setStatus('mandatory')
brEnableOtherBridging = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEnableOtherBridging.setStatus('mandatory')
ipxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 3, 2, 1), )
if mibBuilder.loadTexts: ipxStatsTable.setStatus('mandatory')
ipxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 3, 2, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "ipxStatsIndex"))
if mibBuilder.loadTexts: ipxStatsEntry.setStatus('mandatory')
ipxStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxStatsIndex.setStatus('mandatory')
ipxRipRcvdFwdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRcvdFwdInterval.setStatus('mandatory')
ipxRipRcvdFiltInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRcvdFiltInterval.setStatus('mandatory')
ipxSapRcvdFwdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapRcvdFwdInterval.setStatus('mandatory')
ipxSapRcvdFiltInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapRcvdFiltInterval.setStatus('mandatory')
ipxEnableRouting = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxEnableRouting.setStatus('mandatory')
ipxRoutedTxPriority = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("urgent", 1), ("high", 2), ("medium", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRoutedTxPriority.setStatus('mandatory')
ipxEnableRipBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxEnableRipBroadcast.setStatus('mandatory')
ipxEnableSapBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxEnableSapBroadcast.setStatus('mandatory')
ipxEnableNetBIOS = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxEnableNetBIOS.setStatus('mandatory')
ipxGlobalNodeId = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxGlobalNodeId.setStatus('mandatory')
priIPHelperAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIPHelperAddress.setStatus('mandatory')
secIPHelperAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secIPHelperAddress.setStatus('mandatory')
internalIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIPAddr.setStatus('mandatory')
internalIPNetmask = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 12, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIPNetmask.setStatus('mandatory')
enableIpRouting = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableIpRouting.setStatus('mandatory')
enableIpBridging = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableIpBridging.setStatus('mandatory')
enableRipBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 485, 3, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableRipBroadcast.setStatus('mandatory')
lanControlTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 4, 1, 1), )
if mibBuilder.loadTexts: lanControlTable.setStatus('mandatory')
lanControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 4, 1, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "lanControlIndex"))
if mibBuilder.loadTexts: lanControlEntry.setStatus('mandatory')
lanControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanControlIndex.setStatus('mandatory')
lanControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(21, 17))).clone(namedValues=NamedValues(("token-ring-type", 21), ("ethernet-type", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanControlType.setStatus('mandatory')
lanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("failed", 3), ("restart", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanStatus.setStatus('mandatory')
lanControlFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanControlFailureCode.setStatus('mandatory')
lanControlNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanControlNAUName.setStatus('mandatory')
lanStatusIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanStatusIgnored.setStatus('mandatory')
lanStatusAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanStatusAcknowledged.setStatus('mandatory')
lanPortTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1), )
if mibBuilder.loadTexts: lanPortTable.setStatus('mandatory')
lanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "lanPortIndex"))
if mibBuilder.loadTexts: lanPortEntry.setStatus('mandatory')
lanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPortIndex.setStatus('mandatory')
lanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(21, 17))).clone(namedValues=NamedValues(("token-ring-type", 21), ("ethernet-type", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPortType.setStatus('mandatory')
lanMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanMACAddress.setStatus('mandatory')
lanPROMMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPROMMACAddress.setStatus('mandatory')
lanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 10, 16))).clone(namedValues=NamedValues(("speed-4Mbs", 4), ("speed-10Mbs", 10), ("speed-16Mbs", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanSpeed.setStatus('mandatory')
lanT1Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanT1Timer.setStatus('mandatory')
lanT2Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanT2Timer.setStatus('mandatory')
lanTiTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanTiTimer.setStatus('mandatory')
lanRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanRxWindowSize.setStatus('mandatory')
lanTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanTxWindowSize.setStatus('mandatory')
lanMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanMaxRetries.setStatus('mandatory')
lanRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanRingNumber.setStatus('mandatory')
lanBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanBridgeNumber.setStatus('mandatory')
lanEthernetFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("e802-3-type", 2), ("ethernet-type-2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanEthernetFrameFormat.setStatus('mandatory')
lanSendLocalTest = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanSendLocalTest.setStatus('mandatory')
lanBroadcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-applicable", 1), ("none-bc", 2), ("all-bc", 3), ("single-bc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanBroadcastType.setStatus('mandatory')
lanIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIPAddress.setStatus('mandatory')
lanNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanNetworkMask.setStatus('mandatory')
lanDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefaultGateway.setStatus('mandatory')
lanNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanNAUName.setStatus('mandatory')
lanInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-applicable", 1), ("aui", 2), ("bnc", 3), ("utp", 4), ("stp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanInterfaceType.setStatus('mandatory')
lanIPEthernetFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("e802-3-type", 2), ("ethernet-type-2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIPEthernetFrameType.setStatus('mandatory')
lanInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanInitState.setStatus('mandatory')
lanSecondDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanSecondDefaultGateway.setStatus('mandatory')
lanRIPUpdtTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanRIPUpdtTimer.setStatus('mandatory')
lanRIPAge = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 540))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanRIPAge.setStatus('mandatory')
lanSAPUpdtTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanSAPUpdtTimer.setStatus('mandatory')
lanSAPAge = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanSAPAge.setStatus('mandatory')
lanRSM = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 4, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanRSM.setStatus('mandatory')
lineControlTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 1, 1), )
if mibBuilder.loadTexts: lineControlTable.setStatus('mandatory')
lineControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 1, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "lineControlIndex"))
if mibBuilder.loadTexts: lineControlEntry.setStatus('mandatory')
lineControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineControlIndex.setStatus('mandatory')
lineControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 9, 10, 11, 12, 19, 20, 13, 14))).clone(namedValues=NamedValues(("hbsc-type", 1), ("tbsc-type", 2), ("x25dte-type", 7), ("x25dce-type", 8), ("hasc-type", 9), ("tasc-type", 10), ("hsdlc-type", 11), ("tsdlc-type", 12), ("frameRelay-type", 19), ("dial-backup-type", 20), ("secondaryRJE-type", 13), ("primaryRJE-type", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineControlType.setStatus('mandatory')
lineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("failed", 3), ("restart", 4), ("enable-all", 5), ("not-in-use", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineStatus.setStatus('mandatory')
lineControlFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineControlFailureCode.setStatus('mandatory')
lineControlNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineControlNAUName.setStatus('mandatory')
lineStatusIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineStatusIgnored.setStatus('mandatory')
lineStatusAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineStatusAcknowledged.setStatus('mandatory')
loopbackTest = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 1), ("network-or-full", 2), ("remote", 3), ("stop-test", 4), ("passive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackTest.setStatus('mandatory')
linePhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1), )
if mibBuilder.loadTexts: linePhysicalTable.setStatus('mandatory')
linePhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "linePhysicalIndex"))
if mibBuilder.loadTexts: linePhysicalEntry.setStatus('mandatory')
linePhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linePhysicalIndex.setStatus('mandatory')
linePhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 9, 10, 19, 11, 12, 20, 13, 14))).clone(namedValues=NamedValues(("hbsc-type", 1), ("tbsc-type", 2), ("x25dte-type", 7), ("x25dce-type", 8), ("tasc-type", 9), ("hasc-type", 10), ("frameRelay-type", 19), ("hsdlc-type", 11), ("tsdlc-type", 12), ("dial-backup-type", 20), ("secondaryRJE-type", 13), ("primaryRJE-type", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linePhysicalType.setStatus('mandatory')
lineEIAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineEIAStatus.setStatus('mandatory')
lineQualityFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineQualityFrameCount.setStatus('mandatory')
lineQualityCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineQualityCRCErrors.setStatus('mandatory')
lineQualityAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineQualityAborts.setStatus('mandatory')
lineInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("line-RS232", 1), ("line-V35", 2), ("line-RS530", 3), ("line-universal", 4), ("dsu-csu", 5), ("isdn", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineInterfaceType.setStatus('mandatory')
lineCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("not-applicable", 1), ("indeterminate-cable", 2), ("no-cable-attached", 3), ("rs232-DTE-cable", 4), ("rs232-DCE-cable", 5), ("v35-DTE-cable", 6), ("v35-DCE-cable", 7), ("x21-DTE-cable", 8), ("x21-DCE-cable", 9), ("rs530-DTE-cable", 10), ("rs530-DCE-cable", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCableType.setStatus('mandatory')
lineSwitchedConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("dedicated", 2), ("switched", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineSwitchedConnection.setStatus('mandatory')
isdndeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1), )
if mibBuilder.loadTexts: isdndeviceConfigTable.setStatus('mandatory')
isdndeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "isdnLineIndex"))
if mibBuilder.loadTexts: isdndeviceConfigEntry.setStatus('mandatory')
isdnLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnLineIndex.setStatus('mandatory')
serviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceType.setStatus('mandatory')
isdnSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(560, 640))).clone(namedValues=NamedValues(("speed56000", 560), ("speed64000", 640)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnSpeed.setStatus('mandatory')
connectionTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTimeOut.setStatus('mandatory')
nosConnectAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nosConnectAttempts.setStatus('mandatory')
farEndNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndNumberType.setStatus('mandatory')
farEndNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndNumberPlan.setStatus('mandatory')
farEndNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndNumber.setStatus('mandatory')
localNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localNumberType.setStatus('mandatory')
localNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localNumberPlan.setStatus('mandatory')
localNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localNumber.setStatus('mandatory')
spid = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: spid.setStatus('mandatory')
isdndeviceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2), )
if mibBuilder.loadTexts: isdndeviceStatsTable.setStatus('mandatory')
isdndeviceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "isdnIndex"))
if mibBuilder.loadTexts: isdndeviceStatsEntry.setStatus('mandatory')
isdnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnIndex.setStatus('mandatory')
channelID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelID.setStatus('mandatory')
kbytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbytesTransmitted.setStatus('mandatory')
kbytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbytesReceived.setStatus('mandatory')
packetsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetsTransmitted.setStatus('mandatory')
packetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetsReceived.setStatus('mandatory')
isdnloopbackbytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnloopbackbytesTransmitted.setStatus('mandatory')
isdnloopbackbytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnloopbackbytesReceived.setStatus('mandatory')
isdnCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnCRCErrors.setStatus('mandatory')
dsucsudeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 1), )
if mibBuilder.loadTexts: dsucsudeviceConfigTable.setStatus('mandatory')
dsucsudeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "dsucsuLineNumber"))
if mibBuilder.loadTexts: dsucsudeviceConfigEntry.setStatus('mandatory')
dsucsuLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuLineNumber.setStatus('mandatory')
dsucsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsu-csu-dds", 1), ("dsu-csu-async-dial", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuType.setStatus('mandatory')
dsucsuClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("internal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuClocking.setStatus('mandatory')
dsucsuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(560, 640))).clone(namedValues=NamedValues(("speed56000", 560), ("speed64000", 640)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSpeed.setStatus('mandatory')
dsucsudeviceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 2), )
if mibBuilder.loadTexts: dsucsudeviceStatsTable.setStatus('mandatory')
dsucsudeviceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "dsucsuLine"))
if mibBuilder.loadTexts: dsucsudeviceStatsEntry.setStatus('mandatory')
dsucsuLine = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuLine.setStatus('mandatory')
dsucsuloopbackbytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuloopbackbytesTransmitted.setStatus('mandatory')
dsucsuloopbackbytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuloopbackbytesReceived.setStatus('mandatory')
sdlcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1), )
if mibBuilder.loadTexts: sdlcConfigTable.setStatus('mandatory')
sdlcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "sdlcConfigPortIndex"))
if mibBuilder.loadTexts: sdlcConfigEntry.setStatus('mandatory')
sdlcConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcConfigPortIndex.setStatus('mandatory')
sdlcConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12))).clone(namedValues=NamedValues(("hsdlc-type", 11), ("tsdlc-type", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcConfigType.setStatus('mandatory')
sdlcInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInitState.setStatus('mandatory')
sdlcCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("constant", 1), ("switched", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCarrier.setStatus('mandatory')
sdlcClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("x21-external", 3), ("x21-internal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcClocking.setStatus('mandatory')
sdlcSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 20, 24, 36, 48, 72, 96, 144, 192, 288, 480, 560, 640, 1280))).clone(namedValues=NamedValues(("speed1200", 12), ("speed2000", 20), ("speed2400", 24), ("speed3600", 36), ("speed4800", 48), ("speed7200", 72), ("speed9600", 96), ("speed14400", 144), ("speed19200", 192), ("speed28800", 288), ("speed48000", 480), ("speed56000", 560), ("speed64000", 640), ("speed128000", 1280)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSpeed.setStatus('mandatory')
sdlcPause = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPause.setStatus('mandatory')
sdlcNRZI = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcNRZI.setStatus('mandatory')
sdlcT1Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcT1Timer.setStatus('mandatory')
sdlcSlowPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSlowPollTimer.setStatus('mandatory')
sdlcMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMaxRetries.setStatus('mandatory')
sdlcNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcNAUName.setStatus('mandatory')
sdlcMultiFlagInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMultiFlagInsertion.setStatus('mandatory')
sdlcCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCTS.setStatus('mandatory')
sdlcDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcDCD.setStatus('mandatory')
sdlcDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcDSR.setStatus('mandatory')
sdlcDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcDTR.setStatus('mandatory')
sdlcRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcRTS.setStatus('mandatory')
sdlcReturnClock = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcReturnClock.setStatus('mandatory')
sdlcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2), )
if mibBuilder.loadTexts: sdlcStatsTable.setStatus('mandatory')
sdlcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "sdlcStatsPortIndex"))
if mibBuilder.loadTexts: sdlcStatsEntry.setStatus('mandatory')
sdlcStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcStatsPortIndex.setStatus('mandatory')
sdlcPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12))).clone(namedValues=NamedValues(("hsdlc-type", 11), ("tsdlc-type", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortType.setStatus('mandatory')
sdlcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInOctets.setStatus('mandatory')
sdlcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcOutOctets.setStatus('mandatory')
sdlcInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInFrames.setStatus('mandatory')
sdlcOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcOutFrames.setStatus('mandatory')
sdlcOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcOverruns.setStatus('mandatory')
sdlcCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCRCErrors.setStatus('mandatory')
sdlcRecvAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcRecvAborts.setStatus('mandatory')
sdlcpollrsptimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcpollrsptimeouts.setStatus('mandatory')
sdlciframetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlciframetrans.setStatus('mandatory')
bisyncConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1), )
if mibBuilder.loadTexts: bisyncConfigTable.setStatus('mandatory')
bisyncConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "bisyncConfigPortIndex"))
if mibBuilder.loadTexts: bisyncConfigEntry.setStatus('mandatory')
bisyncConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncConfigPortIndex.setStatus('mandatory')
bisyncConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hbsc-type", 1), ("tbsc-type", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncConfigType.setStatus('mandatory')
bisyncNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncNAUName.setStatus('mandatory')
bisyncInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncInitState.setStatus('mandatory')
bisyncCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("constant", 1), ("switched", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncCarrier.setStatus('mandatory')
bisyncClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("x21-external", 3), ("x21-internal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncClocking.setStatus('mandatory')
bisyncSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 20, 24, 36, 48, 72, 96, 144, 192, 288, 480, 560, 640))).clone(namedValues=NamedValues(("speed1200", 12), ("speed2000", 20), ("speed2400", 24), ("speed3600", 36), ("speed4800", 48), ("speed7200", 72), ("speed9600", 96), ("speed14400", 144), ("speed19200", 192), ("speed28800", 288), ("speed48000", 480), ("speed56000", 560), ("speed64000", 640)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncSpeed.setStatus('mandatory')
bisyncPause = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPause.setStatus('mandatory')
bisyncReplyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncReplyTimer.setStatus('mandatory')
bisyncRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncRetries.setStatus('mandatory')
bisyncSlowpollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncSlowpollTimer.setStatus('mandatory')
bisyncSessTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("interventionReq", 2), ("unformattedLogoff", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncSessTerm.setStatus('mandatory')
bisyncIBS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncIBS.setStatus('mandatory')
bisyncCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncCTS.setStatus('mandatory')
bisyncDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncDCD.setStatus('mandatory')
bisyncDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncDSR.setStatus('mandatory')
bisyncDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncDTR.setStatus('mandatory')
bisyncRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncRTS.setStatus('mandatory')
bisyncReturnClock = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncReturnClock.setStatus('mandatory')
bisyncStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 2), )
if mibBuilder.loadTexts: bisyncStatsTable.setStatus('mandatory')
bisyncStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "bisyncStatsPortIndex"))
if mibBuilder.loadTexts: bisyncStatsEntry.setStatus('mandatory')
bisyncStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncStatsPortIndex.setStatus('mandatory')
bisyncPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hbsc-type", 1), ("tbsc-type", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPortType.setStatus('mandatory')
bisyncInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncInOctets.setStatus('mandatory')
bisyncOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncOutOctets.setStatus('mandatory')
bisyncOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncOverruns.setStatus('mandatory')
bisyncCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncCRCErrors.setStatus('mandatory')
bisyncRcvTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncRcvTimeout.setStatus('mandatory')
bisyncXmtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncXmtTimeout.setStatus('mandatory')
frameRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1), )
if mibBuilder.loadTexts: frameRelayConfigTable.setStatus('mandatory')
frameRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "frameRelayConfigPortIndex"))
if mibBuilder.loadTexts: frameRelayConfigEntry.setStatus('mandatory')
frameRelayConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayConfigPortIndex.setStatus('mandatory')
frameRelayPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(19, 20))).clone(namedValues=NamedValues(("frame-relay-type", 19), ("frame-relay-dialbackup-type", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayPortType.setStatus('mandatory')
frameRelayInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayInitState.setStatus('mandatory')
frameRelayClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("x21-external", 3), ("x21-internal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayClocking.setStatus('mandatory')
frameRelaySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 20, 24, 36, 48, 72, 96, 144, 192, 288, 480, 560, 640, 1280, 2560, 5120, 10240, 15440, 20480))).clone(namedValues=NamedValues(("speed1200", 12), ("speed2000", 20), ("speed2400", 24), ("speed3600", 36), ("speed4800", 48), ("speed7200", 72), ("speed9600", 96), ("speed14400", 144), ("speed19200", 192), ("speed28800", 288), ("speed48000", 480), ("speed56000", 560), ("speed64000", 640), ("speed128000", 1280), ("speed256000", 2560), ("speed512000", 5120), ("speed102400", 10240), ("speed154400", 15440), ("speed204800", 20480)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelaySpeed.setStatus('mandatory')
frameRelayLocalManagementProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("annexD", 1), ("lmi", 2), ("annexA", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayLocalManagementProtocol.setStatus('mandatory')
frameRelayLinkPollingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayLinkPollingTimer.setStatus('mandatory')
frameRelayFullStatusPollingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayFullStatusPollingCount.setStatus('mandatory')
frameRelayT1Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayT1Timer.setStatus('mandatory')
frameRelayT2Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayT2Timer.setStatus('mandatory')
frameRelayTiTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayTiTimer.setStatus('mandatory')
frameRelayRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayRxWindowSize.setStatus('mandatory')
frameRelayTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayTxWindowSize.setStatus('mandatory')
frameRelayMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayMaxRetries.setStatus('mandatory')
frameRelayNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayNAUName.setStatus('mandatory')
frameRelayVirtualMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 16), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayVirtualMACAddress.setStatus('mandatory')
frameRelayVirtualRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayVirtualRingNumber.setStatus('mandatory')
frameRelayVirtualBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayVirtualBridgeNumber.setStatus('mandatory')
frameRelayIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayIPAddress.setStatus('mandatory')
frameRelayNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayNetworkMask.setStatus('mandatory')
frameRelayDefaultGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDefaultGatewayAddress.setStatus('mandatory')
frameRelaySessSwitchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelaySessSwitchThreshold.setStatus('mandatory')
frameRelaySwitchedBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("racal-dtr-initiated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelaySwitchedBackup.setStatus('mandatory')
frameRelaySwitchedLineWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelaySwitchedLineWaitTimer.setStatus('mandatory')
frameRelayDedLineWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDedLineWaitTimer.setStatus('mandatory')
frameRelayCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameRelayCommittedBurst.setStatus('mandatory')
frameRelayExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameRelayExcessBurst.setStatus('mandatory')
frameRelayBridgingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("srb", 1), ("tbr", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameRelayBridgingProtocol.setStatus('mandatory')
frameRelayProxyARP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameRelayProxyARP.setStatus('mandatory')
frameRelaySecondDefaultGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelaySecondDefaultGatewayAddress.setStatus('mandatory')
frameRelayAlternateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayAlternateIPAddress.setStatus('mandatory')
frameRelayAlternateNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 32), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayAlternateNetmask.setStatus('mandatory')
frameRelayLLC2FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tokenRing", 1), ("ethernetVersiontwo", 2), ("iEEEeightotwothree", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameRelayLLC2FrameFormat.setStatus('mandatory')
frameRelayMultiflagSeparation = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameRelayMultiflagSeparation.setStatus('mandatory')
frameRelayRestrictTerminateSessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("spanningTree", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameRelayRestrictTerminateSessUsage.setStatus('mandatory')
frameRelayRIPUpdtTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayRIPUpdtTimer.setStatus('mandatory')
frameRelayRIPAge = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 540))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayRIPAge.setStatus('mandatory')
frameRelaySAPUpdtTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelaySAPUpdtTimer.setStatus('mandatory')
frameRelaySAPAge = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelaySAPAge.setStatus('mandatory')
frameRelayRSM = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayRSM.setStatus('mandatory')
frameRelayARP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("auto", 1), ("inverseArp", 2), ("routedArp", 3), ("tokenRing", 4), ("ethernetVersiontwo", 5), ("iEEEeightotwothree", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayARP.setStatus('mandatory')
frameRelayCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayCTS.setStatus('mandatory')
frameRelayDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDCD.setStatus('mandatory')
frameRelayDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDSR.setStatus('mandatory')
frameRelayDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDTR.setStatus('mandatory')
frameRelayRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayRTS.setStatus('mandatory')
frameRelayReturnClock = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayReturnClock.setStatus('mandatory')
frameRelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2), )
if mibBuilder.loadTexts: frameRelayStatsTable.setStatus('mandatory')
frameRelayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "frameRelayStatsPortIndex"))
if mibBuilder.loadTexts: frameRelayStatsEntry.setStatus('mandatory')
frameRelayStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayStatsPortIndex.setStatus('mandatory')
frameRelayInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayInOctets.setStatus('mandatory')
frameRelayOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayOutOctets.setStatus('mandatory')
frameRelaySampleDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelaySampleDuration.setStatus('mandatory')
frameRelayOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayOverruns.setStatus('mandatory')
frameRelayCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayCRCErrors.setStatus('mandatory')
frameRelayRecvAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayRecvAborts.setStatus('mandatory')
frameRelayTxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayTxDe.setStatus('mandatory')
frameRelayRxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayRxDe.setStatus('mandatory')
frameRelaySwitchedAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelaySwitchedAttempts.setStatus('mandatory')
frameRelaySwitchedAttemptsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelaySwitchedAttemptsSuccessful.setStatus('mandatory')
frExtCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 9, 1), )
if mibBuilder.loadTexts: frExtCircuitTable.setStatus('mandatory')
frExtCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "frExtCircuitIfIndex"), (0, "SYNC-RESEARCH-MIB", "frExtCircuitDlci"))
if mibBuilder.loadTexts: frExtCircuitEntry.setStatus('mandatory')
frExtCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frExtCircuitIfIndex.setStatus('mandatory')
frExtCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frExtCircuitDlci.setStatus('mandatory')
frExtCircuitStatusIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frExtCircuitStatusIgnored.setStatus('mandatory')
frExtCircuitStatusAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frExtCircuitStatusAcknowledged.setStatus('mandatory')
frExtCircuitPartnerId = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frExtCircuitPartnerId.setStatus('mandatory')
frExtCircuitTxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frExtCircuitTxDe.setStatus('mandatory')
frExtCircuitRxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frExtCircuitRxDe.setStatus('mandatory')
frExtCircuitMinBits = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frExtCircuitMinBits.setStatus('mandatory')
frExtCircuitMaxBits = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frExtCircuitMaxBits.setStatus('mandatory')
frExtCircuitQOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 9, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frExtCircuitQOctets.setStatus('mandatory')
asyncConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1), )
if mibBuilder.loadTexts: asyncConfigTable.setStatus('mandatory')
asyncConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "asyncConfigPortIndex"))
if mibBuilder.loadTexts: asyncConfigEntry.setStatus('mandatory')
asyncConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncConfigPortIndex.setStatus('mandatory')
asyncConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10))).clone(namedValues=NamedValues(("hasc-type", 9), ("tasc-type", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncConfigType.setStatus('mandatory')
asyncNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncNAUName.setStatus('mandatory')
asyncInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncInitState.setStatus('mandatory')
asyncCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("constant", 1), ("switched", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncCarrier.setStatus('mandatory')
asyncSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(75, 150, 300, 600, 1200, 2400, 4800, 9600, 19200))).clone(namedValues=NamedValues(("speed75", 75), ("speed150", 150), ("speed300", 300), ("speed600", 600), ("speed1200", 1200), ("speed2400", 2400), ("speed4800", 4800), ("speed9600", 9600), ("speed19200", 19200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncSpeed.setStatus('mandatory')
asyncPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPhysicalType.setStatus('mandatory')
asyncStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sto1", 1), ("sto1-5", 2), ("sto2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncStopBits.setStatus('mandatory')
asyncParity = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("odd", 1), ("even", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncParity.setStatus('mandatory')
asyncDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncDataBits.setStatus('mandatory')
asyncIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncIdleTimer.setStatus('mandatory')
asyncTxFrameGap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncTxFrameGap.setStatus('mandatory')
asyncRxForwardingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRxForwardingCount.setStatus('mandatory')
asyncEiaSignalForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncEiaSignalForwarding.setStatus('mandatory')
asyncAddressOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncAddressOffset.setStatus('mandatory')
asyncRTC = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRTC.setStatus('mandatory')
asyncCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncCTS.setStatus('mandatory')
asyncDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncDCD.setStatus('mandatory')
asyncDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncDSR.setStatus('mandatory')
asyncDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncDTR.setStatus('mandatory')
asyncRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRTS.setStatus('mandatory')
asyncReturnClock = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncReturnClock.setStatus('mandatory')
asyncOrt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncOrt.setStatus('mandatory')
asyncStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2), )
if mibBuilder.loadTexts: asyncStatsTable.setStatus('mandatory')
asyncStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "asyncStatsPortIndex"))
if mibBuilder.loadTexts: asyncStatsEntry.setStatus('mandatory')
asyncStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncStatsPortIndex.setStatus('mandatory')
asyncPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10))).clone(namedValues=NamedValues(("hasc-type", 9), ("tasc-type", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPortType.setStatus('mandatory')
asyncInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncInOctets.setStatus('mandatory')
asyncOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncOutOctets.setStatus('mandatory')
asyncInMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncInMessages.setStatus('mandatory')
asyncOutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncOutMessages.setStatus('mandatory')
asyncInMsgDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncInMsgDiscarded.setStatus('mandatory')
asyncOutMsgDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncOutMsgDiscarded.setStatus('mandatory')
asyncXmtFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncXmtFailures.setStatus('mandatory')
asyncRcvMsgForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRcvMsgForwarded.setStatus('mandatory')
asyncRcvMsgErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRcvMsgErrors.setStatus('mandatory')
asyncRcvCharsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRcvCharsDiscarded.setStatus('mandatory')
asyncRcvParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRcvParityErrors.setStatus('mandatory')
asyncRcvFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRcvFramingErrors.setStatus('mandatory')
asyncRcvFifoOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRcvFifoOverruns.setStatus('mandatory')
asyncRcvCharsOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRcvCharsOverruns.setStatus('mandatory')
asyncRcvBreakConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 6, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncRcvBreakConditions.setStatus('mandatory')
bisyncrjeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1), )
if mibBuilder.loadTexts: bisyncrjeConfigTable.setStatus('mandatory')
bisyncrjeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "bisyncrjeConfigPortIndex"))
if mibBuilder.loadTexts: bisyncrjeConfigEntry.setStatus('mandatory')
bisyncrjeConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeConfigPortIndex.setStatus('mandatory')
bisyncrjeConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 14))).clone(namedValues=NamedValues(("secondaryRJE-type", 13), ("primaryRJE-type", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeConfigType.setStatus('mandatory')
bisyncrjeNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeNAUName.setStatus('mandatory')
bisyncrjeInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeInitState.setStatus('mandatory')
bisyncrjeCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("constant", 1), ("switched", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeCarrier.setStatus('mandatory')
bisyncrjeClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("internal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeClocking.setStatus('mandatory')
bisyncrjeSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 20, 24, 36, 48, 72, 96, 144, 192, 288, 480, 560, 640, 1280))).clone(namedValues=NamedValues(("speed1200", 12), ("speed2000", 20), ("speed2400", 24), ("speed3600", 36), ("speed4800", 48), ("speed7200", 72), ("speed9600", 96), ("speed14400", 144), ("speed19200", 192), ("speed28800", 288), ("speed48000", 480), ("speed56000", 560), ("speed64000", 640), ("speed128000", 1280)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeSpeed.setStatus('mandatory')
bisyncrjeReplyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeReplyTimer.setStatus('mandatory')
bisyncrjeRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeRetries.setStatus('mandatory')
bisyncrjeCodeSet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("ebcdic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeCodeSet.setStatus('mandatory')
bisyncrjeCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeCTS.setStatus('mandatory')
bisyncrjeDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeDCD.setStatus('mandatory')
bisyncrjeDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeDSR.setStatus('mandatory')
bisyncrjeDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeDTR.setStatus('mandatory')
bisyncrjeRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeRTS.setStatus('mandatory')
bisyncrjeReturnClock = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeReturnClock.setStatus('mandatory')
bisyncrjeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2), )
if mibBuilder.loadTexts: bisyncrjeStatsTable.setStatus('mandatory')
bisyncrjeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "bisyncrjeStatsPortIndex"))
if mibBuilder.loadTexts: bisyncrjeStatsEntry.setStatus('mandatory')
bisyncrjeStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeStatsPortIndex.setStatus('mandatory')
bisyncrjePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 14))).clone(namedValues=NamedValues(("srje-SecondaryRJE", 13), ("prje-PrimaryRJE", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjePortType.setStatus('mandatory')
bisyncrjeInChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeInChrs.setStatus('mandatory')
bisyncrjeOutChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeOutChrs.setStatus('mandatory')
bisyncrjeInTrns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeInTrns.setStatus('mandatory')
bisyncrjeOutTrns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeOutTrns.setStatus('mandatory')
bisyncrjeInRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeInRetr.setStatus('mandatory')
bisyncrjeOutRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeOutRetr.setStatus('mandatory')
bisyncrjeInEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeInEnq.setStatus('mandatory')
bisyncrjeOutEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeOutEnq.setStatus('mandatory')
bisyncrjeInEtb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeInEtb.setStatus('mandatory')
bisyncrjeOutEtb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeOutEtb.setStatus('mandatory')
bisyncrjeInEtx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeInEtx.setStatus('mandatory')
bisyncrjeOutEtx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeOutEtx.setStatus('mandatory')
bisyncrjeWack = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeWack.setStatus('mandatory')
bisyncrjeRvi = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 7, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjeRvi.setStatus('mandatory')
dialbackupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1), )
if mibBuilder.loadTexts: dialbackupConfigTable.setStatus('mandatory')
dialbackupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "dialbackupConfigPortIndex"))
if mibBuilder.loadTexts: dialbackupConfigEntry.setStatus('mandatory')
dialbackupConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupConfigPortIndex.setStatus('mandatory')
dialbackupPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(20))).clone(namedValues=NamedValues(("frame-relay-dialbackup-type", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupPortType.setStatus('mandatory')
dialbackupConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hayes", 1), ("vtwentyfivebis", 2), ("nullmodem", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupConnectType.setStatus('mandatory')
dialbackupFirstDedicatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupFirstDedicatedPort.setStatus('mandatory')
dialbackupassociatedDLCIDedicated = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupassociatedDLCIDedicated.setStatus('mandatory')
dialbackupSecondDedicatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupSecondDedicatedPort.setStatus('mandatory')
dialbackupassociatedDLCISecond = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupassociatedDLCISecond.setStatus('mandatory')
dialbackupDedicatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupDedicatedPort.setStatus('mandatory')
dialbackupDedicatedLMIPort = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupDedicatedLMIPort.setStatus('mandatory')
dialbackupDialInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupDialInactivityTimer.setStatus('mandatory')
dialbackupDialSuspendTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupDialSuspendTimer.setStatus('mandatory')
dialbackupModemInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupModemInitString.setStatus('mandatory')
dialbackupModemDialString = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupModemDialString.setStatus('mandatory')
dialbackupModemHangString = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupModemHangString.setStatus('mandatory')
dialbackupDialDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupDialDelayTimer.setStatus('mandatory')
dialbackupTreatLLCControlCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupTreatLLCControlCharacters.setStatus('mandatory')
dialbackupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 2), )
if mibBuilder.loadTexts: dialbackupStatsTable.setStatus('mandatory')
dialbackupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "dialbackupStatsPortIndex"))
if mibBuilder.loadTexts: dialbackupStatsEntry.setStatus('mandatory')
dialbackupStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupStatsPortIndex.setStatus('mandatory')
dialbackupSuccatmpt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupSuccatmpt.setStatus('mandatory')
dialbackupunsuccatmpt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupunsuccatmpt.setStatus('mandatory')
dialbackupinact = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialbackupinact.setStatus('mandatory')
x25ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1), )
if mibBuilder.loadTexts: x25ConfigTable.setStatus('mandatory')
x25ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "x25ConfigPortIndex"))
if mibBuilder.loadTexts: x25ConfigEntry.setStatus('mandatory')
x25ConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ConfigPortIndex.setStatus('mandatory')
x25ConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("xDTE-XLogicalDTE", 7), ("xDCE-XLogicalDCE", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ConfigType.setStatus('mandatory')
x25NAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25NAUName.setStatus('mandatory')
x25InitState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25InitState.setStatus('mandatory')
x25Clocking = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("x21-external", 3), ("x21-internal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25Clocking.setStatus('mandatory')
x25DTEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DTEAddress.setStatus('mandatory')
x25LinkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LinkWindowSize.setStatus('mandatory')
x25T1Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1980))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25T1Timer.setStatus('mandatory')
x25MaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MaxRetries.setStatus('mandatory')
x25PortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(20, 24, 36, 48, 72, 96, 144, 192, 288, 480, 560, 640, 1280, 2560))).clone(namedValues=NamedValues(("speed2000", 20), ("speed2400", 24), ("speed3600", 36), ("speed4800", 48), ("speed7200", 72), ("speed9600", 96), ("speed14400", 144), ("speed19200", 192), ("speed28800", 288), ("speed48000", 480), ("speed56000", 560), ("speed64000", 640), ("speed128000", 1280), ("speed256000", 2560)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PortSpeed.setStatus('mandatory')
x25ReceiveWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ReceiveWindowSize.setStatus('mandatory')
x25TransmitWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TransmitWindowSize.setStatus('mandatory')
x25ReceivePacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 128, 256, 512, 1024))).clone(namedValues=NamedValues(("sixteen", 16), ("thirtytwo", 32), ("onetwentyeight", 128), ("twofiftsix", 256), ("fivetwelve", 512), ("onethousand", 1024)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ReceivePacketSize.setStatus('mandatory')
x25TransmitPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 128, 256, 512, 1024))).clone(namedValues=NamedValues(("sixteen", 16), ("thirtytwo", 32), ("onetwentyeight", 128), ("twofiftsix", 256), ("fivetwelve", 512), ("onethousand", 1024)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TransmitPacketSize.setStatus('mandatory')
x25LowTwoWayChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LowTwoWayChannel.setStatus('mandatory')
x25HighTwoWayChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25HighTwoWayChannel.setStatus('mandatory')
x25UseCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25UseCallingAddress.setStatus('mandatory')
x25ForwardingUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eom", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ForwardingUnit.setStatus('mandatory')
x25DevicePacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 128, 256, 512, 1024, 1))).clone(namedValues=NamedValues(("thirtytwo", 32), ("onetwentyeight", 128), ("twofiftsix", 256), ("fivetwelve", 512), ("onethousand", 1024), ("none", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DevicePacketSize.setStatus('mandatory')
x25DeviceWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("none", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DeviceWindowSize.setStatus('mandatory')
x25PlaceReverseChargeCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PlaceReverseChargeCalls.setStatus('mandatory')
x25AcceptReverseChargeCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25AcceptReverseChargeCalls.setStatus('mandatory')
x25NPS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25NPS.setStatus('mandatory')
x25CTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CTS.setStatus('mandatory')
x25DCD = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DCD.setStatus('mandatory')
x25DSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DSR.setStatus('mandatory')
x25DTR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DTR.setStatus('mandatory')
x25RTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RTS.setStatus('mandatory')
x25ReturnClock = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ReturnClock.setStatus('mandatory')
x25IPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25IPAddress.setStatus('mandatory')
x25NetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25NetworkMask.setStatus('mandatory')
x25DefaultGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 32), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DefaultGatewayAddress.setStatus('mandatory')
x25SecondDefaultGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 1, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SecondDefaultGatewayAddress.setStatus('mandatory')
x25StatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2), )
if mibBuilder.loadTexts: x25StatsTable.setStatus('mandatory')
x25StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "x25StatsPortIndex"))
if mibBuilder.loadTexts: x25StatsEntry.setStatus('mandatory')
x25StatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatsPortIndex.setStatus('mandatory')
x25PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("xDTE-XLogicalDTE", 7), ("xDCE-XLogicalDCE", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PortType.setStatus('mandatory')
x25InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25InFrames.setStatus('mandatory')
x25OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OutFrames.setStatus('mandatory')
x25CInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CInFrames.setStatus('mandatory')
x25COutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25COutFrames.setStatus('mandatory')
x25FRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25FRMRInFrames.setStatus('mandatory')
x25FRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25FRMROutFrames.setStatus('mandatory')
x25Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25Timeouts.setStatus('mandatory')
x25UFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25UFrames.setStatus('mandatory')
x25Samples = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25Samples.setStatus('mandatory')
x25Sum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25Sum.setStatus('mandatory')
x25SumsQ = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SumsQ.setStatus('mandatory')
x25DataInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DataInPkts.setStatus('mandatory')
x25DataOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DataOutPkts.setStatus('mandatory')
x25DataInChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DataInChrs.setStatus('mandatory')
x25DataOutChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DataOutChrs.setStatus('mandatory')
x25QInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25QInPkts.setStatus('mandatory')
x25QOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25QOutPkts.setStatus('mandatory')
x25QInChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25QInChrs.setStatus('mandatory')
x25QOutChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25QOutChrs.setStatus('mandatory')
x25SigInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SigInPkts.setStatus('mandatory')
x25SigOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SigOutPkts.setStatus('mandatory')
x25InResets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25InResets.setStatus('mandatory')
x25OutResets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OutResets.setStatus('mandatory')
x25InRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25InRestarts.setStatus('mandatory')
x25OutRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 9, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25OutRestarts.setStatus('mandatory')
alcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1), )
if mibBuilder.loadTexts: alcConfigTable.setStatus('mandatory')
alcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "alcConfigPortIndex"))
if mibBuilder.loadTexts: alcConfigEntry.setStatus('mandatory')
alcConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcConfigPortIndex.setStatus('mandatory')
alcConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(23, 24))).clone(namedValues=NamedValues(("tALC-TerminalALC", 23), ("hALC-HostALC", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcConfigType.setStatus('mandatory')
alcNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcNAUName.setStatus('mandatory')
alcInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcInitState.setStatus('mandatory')
alcClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("internal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcClocking.setStatus('mandatory')
alcPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 24, 48, 96, 192))).clone(namedValues=NamedValues(("speed1200", 12), ("speed2400", 24), ("speed4800", 48), ("speed9600", 96), ("speed19200", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPortSpeed.setStatus('mandatory')
alcLimitSegsCharsBetweenPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcLimitSegsCharsBetweenPolls.setStatus('mandatory')
alcNumberOfSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcNumberOfSegments.setStatus('mandatory')
alcNumberOfCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcNumberOfCharacters.setStatus('mandatory')
alcNumberOfNullSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcNumberOfNullSeg.setStatus('mandatory')
alcCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcCTS.setStatus('mandatory')
alcDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcDCD.setStatus('mandatory')
alcDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcDSR.setStatus('mandatory')
alcDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcDTR.setStatus('mandatory')
alcRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRTS.setStatus('mandatory')
alcReturnClock = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcReturnClock.setStatus('mandatory')
alcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2), )
if mibBuilder.loadTexts: alcStatsTable.setStatus('mandatory')
alcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "alcStatsPortIndex"))
if mibBuilder.loadTexts: alcStatsEntry.setStatus('mandatory')
alcStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcStatsPortIndex.setStatus('mandatory')
alcPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(23, 24))).clone(namedValues=NamedValues(("tALC-TerminalALC", 23), ("hALC-HostALC", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPortType.setStatus('mandatory')
alcRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxOverruns.setStatus('mandatory')
alcBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcBytesRx.setStatus('mandatory')
alcBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcBytesTx.setStatus('mandatory')
alcBytesRxDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcBytesRxDisc.setStatus('mandatory')
alcBytesTxDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcBytesTxDisc.setStatus('mandatory')
alcPortFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPortFaults.setStatus('mandatory')
alcRcvCCCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRcvCCCErrors.setStatus('mandatory')
alcPollTx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPollTx.setStatus('mandatory')
alcResponseTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcResponseTimeouts.setStatus('mandatory')
alcSegRx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcSegRx.setStatus('mandatory')
alcSegTx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcSegTx.setStatus('mandatory')
alcSegRxDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcSegRxDisc.setStatus('mandatory')
alcSegTxDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 5, 10, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcSegTxDisc.setStatus('mandatory')
puControlTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1), )
if mibBuilder.loadTexts: puControlTable.setStatus('mandatory')
puControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "puControlLineIndex"), (0, "SYNC-RESEARCH-MIB", "puControlPUAddress"))
if mibBuilder.loadTexts: puControlEntry.setStatus('mandatory')
puControlLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puControlLineIndex.setStatus('mandatory')
puControlPUAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: puControlPUAddress.setStatus('mandatory')
puStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("failed", 3), ("restart", 4), ("enable-all", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puStatus.setStatus('mandatory')
puConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("not-connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConnectionStatus.setStatus('mandatory')
puLastClearCode = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: puLastClearCode.setStatus('mandatory')
puControlFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: puControlFailureCode.setStatus('mandatory')
puControlNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puControlNAUName.setStatus('mandatory')
puConnectionAttemptCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConnectionAttemptCount.setStatus('mandatory')
puStatusIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puStatusIgnored.setStatus('mandatory')
puStatusAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puStatusAcknowledged.setStatus('mandatory')
puLastDlciCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puLastDlciCleared.setStatus('mandatory')
puCurrentDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentDlci.setStatus('mandatory')
puLastMACCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 13), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puLastMACCleared.setStatus('mandatory')
puCurrentMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 14), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentMAC.setStatus('mandatory')
puNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 17, 19, 20, 21))).clone(namedValues=NamedValues(("xDTE-XLogicalDTE", 7), ("xDCE-XLogicalDCE", 8), ("ethernet-type", 17), ("frame-relay-type", 19), ("frame-relay-dialbackup-type", 20), ("token-ring-type", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puNetworkType.setStatus('mandatory')
puCurrentConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dsp", 1), ("qllc", 2), ("llc2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentConnectionType.setStatus('mandatory')
puLastSVCCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puLastSVCCleared.setStatus('mandatory')
puCurrentSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentSVC.setStatus('mandatory')
puLastLocalDTECleared = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puLastLocalDTECleared.setStatus('mandatory')
puLastRemoteDTECleared = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puLastRemoteDTECleared.setStatus('mandatory')
puCurrentLocalDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentLocalDTE.setStatus('mandatory')
puCurrentRemoteDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentRemoteDTE.setStatus('mandatory')
puIsDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: puIsDynamic.setStatus('mandatory')
sdlcPuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1), )
if mibBuilder.loadTexts: sdlcPuConfigTable.setStatus('mandatory')
sdlcPuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "sdlcPuConfigLineIndex"), (0, "SYNC-RESEARCH-MIB", "sdlcPuConfigAddress"))
if mibBuilder.loadTexts: sdlcPuConfigEntry.setStatus('mandatory')
sdlcPuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuConfigLineIndex.setStatus('mandatory')
sdlcPuConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuConfigAddress.setStatus('mandatory')
sdlcPuNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuNAUName.setStatus('mandatory')
sdlcPuInitialState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInitialState.setStatus('mandatory')
sdlcPuXID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuXID.setStatus('mandatory')
sdlcPuType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2), ("type2-1", 3), ("type4", 4), ("type5", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuType.setStatus('mandatory')
sdlcPuGroupPollAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuGroupPollAddress.setStatus('mandatory')
sdlcPuConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuConnectionID.setStatus('mandatory')
sdlcPuMAXOUT = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuMAXOUT.setStatus('mandatory')
sdlcPuConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuConnectType.setStatus('mandatory')
sdlcPuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2), )
if mibBuilder.loadTexts: sdlcPuStatsTable.setStatus('mandatory')
sdlcPuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "sdlcPuStatsLineIndex"), (0, "SYNC-RESEARCH-MIB", "sdlcPuStatsAddress"))
if mibBuilder.loadTexts: sdlcPuStatsEntry.setStatus('mandatory')
sdlcPuStatsLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuStatsLineIndex.setStatus('mandatory')
sdlcPuStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuStatsAddress.setStatus('mandatory')
sdlcPuInIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInIFrames.setStatus('mandatory')
sdlcPuOutIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutIFrames.setStatus('mandatory')
sdlcPuInRRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInRRFrames.setStatus('mandatory')
sdlcPuOutRRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutRRFrames.setStatus('mandatory')
sdlcPuInRNRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInRNRFrames.setStatus('mandatory')
sdlcPuOutRNRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutRNRFrames.setStatus('mandatory')
sdlcPuInXIDFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInXIDFrames.setStatus('mandatory')
sdlcPuOutXIDFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutXIDFrames.setStatus('mandatory')
sdlcPuInTESTFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInTESTFrames.setStatus('mandatory')
sdlcPuOutTESTFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutTESTFrames.setStatus('mandatory')
sdlcPuInSNRMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInSNRMFrames.setStatus('mandatory')
sdlcPuOutSNRMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutSNRMFrames.setStatus('mandatory')
sdlcPuInDISCFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInDISCFrames.setStatus('mandatory')
sdlcPuOutDISCFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutDISCFrames.setStatus('mandatory')
sdlcPuInDMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInDMFrames.setStatus('mandatory')
sdlcPuOutDMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutDMFrames.setStatus('mandatory')
sdlcPuInUAFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInUAFrames.setStatus('mandatory')
sdlcPuOutUAFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutUAFrames.setStatus('mandatory')
sdlcPuInFRMRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInFRMRFrames.setStatus('mandatory')
sdlcPuOutFRMRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutFRMRFrames.setStatus('mandatory')
sdlcPuInRDFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInRDFrames.setStatus('mandatory')
sdlcPuOutRDFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutRDFrames.setStatus('mandatory')
sdlcPuInUIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuInUIFrames.setStatus('mandatory')
sdlcPuOutUIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuOutUIFrames.setStatus('mandatory')
sdlcPuReTxIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuReTxIFrames.setStatus('mandatory')
sdlcPuPollResponseTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPuPollResponseTimeouts.setStatus('mandatory')
bisyncPuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1), )
if mibBuilder.loadTexts: bisyncPuConfigTable.setStatus('mandatory')
bisyncPuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "bisyncPuConfigLineIndex"), (0, "SYNC-RESEARCH-MIB", "bisyncPuConfigAddress"))
if mibBuilder.loadTexts: bisyncPuConfigEntry.setStatus('mandatory')
bisyncPuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuConfigLineIndex.setStatus('mandatory')
bisyncPuConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuConfigAddress.setStatus('mandatory')
bisyncPuNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuNAUName.setStatus('mandatory')
bisyncPuInitialState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuInitialState.setStatus('mandatory')
bisyncPuXID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuXID.setStatus('mandatory')
bisyncPuTargetHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sna-host-type", 1), ("bisync-host-type", 2), ("ice-host-type", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuTargetHostType.setStatus('mandatory')
bisyncPuMaxData = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuMaxData.setStatus('mandatory')
bisyncPuConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuConnectionID.setStatus('mandatory')
bisyncPuConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuConnectType.setStatus('mandatory')
bisyncPuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 2), )
if mibBuilder.loadTexts: bisyncPuStatsTable.setStatus('mandatory')
bisyncPuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "bisyncPuStatsLineIndex"), (0, "SYNC-RESEARCH-MIB", "bisyncPuStatsAddress"))
if mibBuilder.loadTexts: bisyncPuStatsEntry.setStatus('mandatory')
bisyncPuStatsLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuStatsLineIndex.setStatus('mandatory')
bisyncPuStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuStatsAddress.setStatus('mandatory')
bisyncPuInTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuInTransactions.setStatus('mandatory')
bisyncPuOutTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuOutTransactions.setStatus('mandatory')
bisyncPuSlowPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuSlowPolls.setStatus('mandatory')
bisyncPuPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncPuPolls.setStatus('mandatory')
mappingPuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1), )
if mibBuilder.loadTexts: mappingPuConfigTable.setStatus('mandatory')
mappingPuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "mappingPuConfigLineIndex"), (0, "SYNC-RESEARCH-MIB", "mappingPuConfigAddress"))
if mibBuilder.loadTexts: mappingPuConfigEntry.setStatus('mandatory')
mappingPuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuConfigLineIndex.setStatus('mandatory')
mappingPuConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuConfigAddress.setStatus('mandatory')
mappingPuSourceSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuSourceSAP.setStatus('mandatory')
mappingPuDestinationSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuDestinationSAP.setStatus('mandatory')
mappingPuDestinationMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuDestinationMAC.setStatus('mandatory')
mappingPuPartnerConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuPartnerConfigLineIndex.setStatus('mandatory')
mappingPuPartnerConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuPartnerConfigAddress.setStatus('mandatory')
mappingPuPartnerSourceSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuPartnerSourceSAP.setStatus('mandatory')
mappingPuPartnerDestSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuPartnerDestSAP.setStatus('mandatory')
mappingPuPartnerDestMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 10), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuPartnerDestMAC.setStatus('mandatory')
mappingPuNAU = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuNAU.setStatus('mandatory')
mappingPuConnectID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuConnectID.setStatus('mandatory')
mappingPuXID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuXID.setStatus('mandatory')
mappingPuDirectDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuDirectDLCI.setStatus('mandatory')
mappingPuLastClearCode = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuLastClearCode.setStatus('mandatory')
mappingPuConnAttemptCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuConnAttemptCnt.setStatus('mandatory')
mappingPuPartnerLastClearCode = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuPartnerLastClearCode.setStatus('mandatory')
mappingPuPartnerConnAttemptCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappingPuPartnerConnAttemptCnt.setStatus('mandatory')
remotePuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1), )
if mibBuilder.loadTexts: remotePuConfigTable.setStatus('mandatory')
remotePuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "accessPuConfigLineIndex"), (0, "SYNC-RESEARCH-MIB", "accessPuConfigAddress"))
if mibBuilder.loadTexts: remotePuConfigEntry.setStatus('mandatory')
accessPuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPuConfigLineIndex.setStatus('mandatory')
accessPuConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPuConfigAddress.setStatus('mandatory')
remotePuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuConfigLineIndex.setStatus('mandatory')
remotePuConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuConfigAddress.setStatus('mandatory')
remotePuSourceSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuSourceSAP.setStatus('mandatory')
remotePuDestinationSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuDestinationSAP.setStatus('mandatory')
remotePuMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuMAC.setStatus('mandatory')
remotePuPrimaryDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuPrimaryDLCI.setStatus('mandatory')
remotePuParallelDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuParallelDLCI.setStatus('mandatory')
remotePuAlternateDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuAlternateDLCI.setStatus('mandatory')
remotePuAlternateMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuAlternateMACAddress.setStatus('mandatory')
remotePuTransmitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuTransmitPriority.setStatus('mandatory')
remotePuBroadcastAllDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuBroadcastAllDLCI.setStatus('mandatory')
remotePuLocalDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuLocalDTE.setStatus('mandatory')
remotePuRemoteDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 7, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePuRemoteDTE.setStatus('mandatory')
asyncPuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1), )
if mibBuilder.loadTexts: asyncPuConfigTable.setStatus('mandatory')
asyncPuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "asyncPuConfigLineIndex"), (0, "SYNC-RESEARCH-MIB", "asyncPuConfigAddress"))
if mibBuilder.loadTexts: asyncPuConfigEntry.setStatus('mandatory')
asyncPuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuConfigLineIndex.setStatus('mandatory')
asyncPuConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuConfigAddress.setStatus('mandatory')
asyncPuNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuNAUName.setStatus('mandatory')
asyncPuInitialState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuInitialState.setStatus('mandatory')
asyncPuXID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuXID.setStatus('mandatory')
asyncPuConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuConnectionID.setStatus('mandatory')
asyncPuConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuConnectType.setStatus('mandatory')
asyncPuDeviceRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuDeviceRangeLow.setStatus('mandatory')
asyncPuDeviceRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuDeviceRangeHigh.setStatus('mandatory')
asyncPuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 2), )
if mibBuilder.loadTexts: asyncPuStatsTable.setStatus('mandatory')
asyncPuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "asyncPuStatsLineIndex"), (0, "SYNC-RESEARCH-MIB", "asyncPuStatsAddress"))
if mibBuilder.loadTexts: asyncPuStatsEntry.setStatus('mandatory')
asyncPuStatsLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuStatsLineIndex.setStatus('mandatory')
asyncPuStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuStatsAddress.setStatus('mandatory')
asyncPuInChars = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuInChars.setStatus('mandatory')
asyncPuOutChars = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuOutChars.setStatus('mandatory')
asyncPuInMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuInMessages.setStatus('mandatory')
asyncPuOutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPuOutMessages.setStatus('mandatory')
lanPuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1), )
if mibBuilder.loadTexts: lanPuConfigTable.setStatus('mandatory')
lanPuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "lanPuConfigLineIndex"), (0, "SYNC-RESEARCH-MIB", "lanPuConfigAddress"))
if mibBuilder.loadTexts: lanPuConfigEntry.setStatus('mandatory')
lanPuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPuConfigLineIndex.setStatus('mandatory')
lanPuConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPuConfigAddress.setStatus('mandatory')
lanPuNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPuNAUName.setStatus('mandatory')
lanPuXID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPuXID.setStatus('mandatory')
lanPuConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPuConnectionID.setStatus('mandatory')
lanPuSourceSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPuSourceSAP.setStatus('mandatory')
lanPuDestinationSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPuDestinationSAP.setStatus('mandatory')
lanPuMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1, 1, 8), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPuMAC.setStatus('mandatory')
lanPuAlternateMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 6, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPuAlternateMACAddress.setStatus('mandatory')
x25PuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 8, 1), )
if mibBuilder.loadTexts: x25PuConfigTable.setStatus('mandatory')
x25PuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 8, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "x25PuConfigLineIndex"), (0, "SYNC-RESEARCH-MIB", "x25PuConfigAddress"))
if mibBuilder.loadTexts: x25PuConfigEntry.setStatus('mandatory')
x25PuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PuConfigLineIndex.setStatus('mandatory')
x25PuConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 8, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PuConfigAddress.setStatus('mandatory')
x25PuNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PuNAUName.setStatus('mandatory')
x25PuConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 8, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PuConnectionID.setStatus('mandatory')
x25PuXID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 8, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PuXID.setStatus('mandatory')
x25PuSolicitXID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PuSolicitXID.setStatus('mandatory')
x25PuSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 8, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PuSourceAddress.setStatus('mandatory')
x25PuRemoteDTEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 8, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PuRemoteDTEAddress.setStatus('mandatory')
alcPuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1), )
if mibBuilder.loadTexts: alcPuConfigTable.setStatus('mandatory')
alcPuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "alcPuConfigAddress"))
if mibBuilder.loadTexts: alcPuConfigEntry.setStatus('mandatory')
alcPuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuConfigLineIndex.setStatus('mandatory')
alcPuConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuConfigAddress.setStatus('mandatory')
alcPuNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuNAUName.setStatus('mandatory')
alcPuCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuCSS.setStatus('mandatory')
alcPuConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuConnectionID.setStatus('mandatory')
alcPuXID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuXID.setStatus('mandatory')
alcPuConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuConnectType.setStatus('mandatory')
alcPuLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuLineNumber.setStatus('mandatory')
alcPuMaximumFastPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuMaximumFastPoll.setStatus('mandatory')
alcPuMinimumFastPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuMinimumFastPoll.setStatus('mandatory')
alcPuMaximumSlowPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuMaximumSlowPollInterval.setStatus('mandatory')
alcPuMinimumSlowPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 990))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuMinimumSlowPollInterval.setStatus('mandatory')
alcPuResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuResponseTimeout.setStatus('mandatory')
alcPuUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuUserData.setStatus('mandatory')
alcSourceDTEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcSourceDTEAddress.setStatus('mandatory')
alcDestinationDTEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcDestinationDTEAddress.setStatus('mandatory')
alcPuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 2), )
if mibBuilder.loadTexts: alcPuStatsTable.setStatus('mandatory')
alcPuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "alcPuStatsLineIndex"), (0, "SYNC-RESEARCH-MIB", "alcPuStatsAddress"))
if mibBuilder.loadTexts: alcPuStatsEntry.setStatus('mandatory')
alcPuStatsLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuStatsLineIndex.setStatus('mandatory')
alcPuStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuStatsAddress.setStatus('mandatory')
alcPuPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuPolls.setStatus('mandatory')
alcPuDeviceFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuDeviceFaults.setStatus('mandatory')
alcPuBytesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuBytesRcv.setStatus('mandatory')
alcPuBytesXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuBytesXmit.setStatus('mandatory')
alcPuSegRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuSegRcv.setStatus('mandatory')
alcPuSegXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPuSegXmit.setStatus('mandatory')
bisyncrjePuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 6, 10, 1), )
if mibBuilder.loadTexts: bisyncrjePuConfigTable.setStatus('mandatory')
bisyncrjePuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 6, 10, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "bisyncrjePuConfigLineIndex"), (0, "SYNC-RESEARCH-MIB", "bisyncrjePuConfigAddress"))
if mibBuilder.loadTexts: bisyncrjePuConfigEntry.setStatus('mandatory')
bisyncrjePuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjePuConfigLineIndex.setStatus('mandatory')
bisyncrjePuConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjePuConfigAddress.setStatus('mandatory')
bisyncrjePuNAUName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjePuNAUName.setStatus('mandatory')
bisyncrjePuInitialState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjePuInitialState.setStatus('mandatory')
bisyncrjePuConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 10, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjePuConnectionID.setStatus('mandatory')
bisyncrjePuXID = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 10, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjePuXID.setStatus('mandatory')
bisyncrjePuConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 6, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bisyncrjePuConnectType.setStatus('mandatory')
deviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 7, 1, 1), )
if mibBuilder.loadTexts: deviceControlTable.setStatus('mandatory')
deviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 7, 1, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "deviceControlIndex"), (0, "SYNC-RESEARCH-MIB", "deviceControlCUIndex"), (0, "SYNC-RESEARCH-MIB", "deviceControlAddress"))
if mibBuilder.loadTexts: deviceControlEntry.setStatus('mandatory')
deviceControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceControlIndex.setStatus('mandatory')
deviceControlCUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceControlCUIndex.setStatus('mandatory')
deviceControlAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceControlAddress.setStatus('mandatory')
deviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("failed", 3), ("restart", 4), ("enable-all", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceStatus.setStatus('mandatory')
deviceControlFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceControlFailureCode.setStatus('mandatory')
deviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 1), )
if mibBuilder.loadTexts: deviceConfigTable.setStatus('mandatory')
deviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "deviceConfigLineIndex"), (0, "SYNC-RESEARCH-MIB", "deviceConfigCUIndex"), (0, "SYNC-RESEARCH-MIB", "deviceConfigAddress"))
if mibBuilder.loadTexts: deviceConfigEntry.setStatus('mandatory')
deviceConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceConfigLineIndex.setStatus('mandatory')
deviceConfigCUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceConfigCUIndex.setStatus('mandatory')
deviceConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceConfigAddress.setStatus('mandatory')
deviceConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crt", 1), ("printer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceConfigType.setStatus('mandatory')
deviceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 2), )
if mibBuilder.loadTexts: deviceStatsTable.setStatus('mandatory')
deviceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 2, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "bscDeviceLineIndex"), (0, "SYNC-RESEARCH-MIB", "bscDeviceCUIndex"), (0, "SYNC-RESEARCH-MIB", "bscDeviceAddress"))
if mibBuilder.loadTexts: deviceStatsEntry.setStatus('mandatory')
bscDeviceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDeviceLineIndex.setStatus('mandatory')
bscDeviceCUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDeviceCUIndex.setStatus('mandatory')
bscDeviceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDeviceAddress.setStatus('mandatory')
bscDeviceInTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDeviceInTransactions.setStatus('mandatory')
bscDeviceOutTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDeviceOutTransactions.setStatus('mandatory')
bscDeviceSumCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDeviceSumCount.setStatus('mandatory')
bscDeviceResponseDelaySum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDeviceResponseDelaySum.setStatus('mandatory')
bscDeviceResponseDelaySqSum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDeviceResponseDelaySqSum.setStatus('mandatory')
alcdeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 7, 3, 1), )
if mibBuilder.loadTexts: alcdeviceConfigTable.setStatus('mandatory')
alcdeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 7, 3, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "alcdeviceConfigLineIndex"), (0, "SYNC-RESEARCH-MIB", "alcdeviceConfigCUIndex"), (0, "SYNC-RESEARCH-MIB", "deviceConfigAddress"))
if mibBuilder.loadTexts: alcdeviceConfigEntry.setStatus('mandatory')
alcdeviceConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcdeviceConfigLineIndex.setStatus('mandatory')
alcdeviceConfigCUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcdeviceConfigCUIndex.setStatus('mandatory')
alcdeviceConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcdeviceConfigAddress.setStatus('mandatory')
alcdeviceConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crt", 1), ("printer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcdeviceConfigType.setStatus('mandatory')
t7ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1), )
if mibBuilder.loadTexts: t7ConfigTable.setStatus('mandatory')
t7ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "t7ConfigIndex"))
if mibBuilder.loadTexts: t7ConfigEntry.setStatus('mandatory')
t7ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7ConfigIndex.setStatus('mandatory')
t7ProtocolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7ProtocolEnabled.setStatus('mandatory')
t7PortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(75, 150, 300, 600, 1200, 2400, 4800, 9600, 19200))).clone(namedValues=NamedValues(("speed75", 75), ("speed150", 150), ("speed300", 300), ("speed600", 600), ("speed1200", 1200), ("speed2400", 2400), ("speed4800", 4800), ("speed9600", 9600), ("speed19200", 19200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7PortSpeed.setStatus('mandatory')
t7StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7StopBits.setStatus('mandatory')
t7PortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("odd", 1), ("even", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7PortParity.setStatus('mandatory')
t7DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7DataBits.setStatus('mandatory')
t7IdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7IdleTimer.setStatus('mandatory')
t7PortTxFrameGap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7PortTxFrameGap.setStatus('mandatory')
t7RxForwardingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7RxForwardingCount.setStatus('mandatory')
t7PortIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7PortIPAddress.setStatus('mandatory')
t7UDPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7UDPPortNumber.setStatus('mandatory')
t7StatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1), )
if mibBuilder.loadTexts: t7StatsTable.setStatus('mandatory')
t7StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "t7StatsIndex"))
if mibBuilder.loadTexts: t7StatsEntry.setStatus('mandatory')
t7StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7StatsIndex.setStatus('mandatory')
t7InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7InOctets.setStatus('mandatory')
t7OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7OutOctets.setStatus('mandatory')
t7InMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7InMessages.setStatus('mandatory')
t7OutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7OutMessages.setStatus('mandatory')
t7InMsgDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7InMsgDiscarded.setStatus('mandatory')
t7OutMsgDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7OutMsgDiscarded.setStatus('mandatory')
t7XmtFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7XmtFailures.setStatus('mandatory')
t7RcvMsgForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7RcvMsgForwarded.setStatus('mandatory')
t7RcvMsgErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7RcvMsgErrors.setStatus('mandatory')
t7RcvCharsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7RcvCharsDiscarded.setStatus('mandatory')
t7RcvParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7RcvParityErrors.setStatus('mandatory')
t7RcvFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7RcvFramingErrors.setStatus('mandatory')
t7RcvFifoOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7RcvFifoOverruns.setStatus('mandatory')
t7RcvCharsOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7RcvCharsOverruns.setStatus('mandatory')
t7RcvBreakConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 8, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t7RcvBreakConditions.setStatus('mandatory')
slipConfigTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1), )
if mibBuilder.loadTexts: slipConfigTable.setStatus('mandatory')
slipConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "slipConfigIndex"))
if mibBuilder.loadTexts: slipConfigEntry.setStatus('mandatory')
slipConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipConfigIndex.setStatus('mandatory')
slipProtocolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipProtocolEnabled.setStatus('mandatory')
slipPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(75, 150, 300, 600, 1200, 2400, 4800, 9600, 19200))).clone(namedValues=NamedValues(("speed75", 75), ("speed150", 150), ("speed300", 300), ("speed600", 600), ("speed1200", 1200), ("speed2400", 2400), ("speed4800", 4800), ("speed9600", 9600), ("speed19200", 19200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortSpeed.setStatus('mandatory')
slipStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipStopBits.setStatus('mandatory')
slipIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipIdleTimer.setStatus('mandatory')
slipPortIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortIPAddress.setStatus('mandatory')
slipUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("modem-management", 1), ("ipend-node", 2), ("ip-routing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipUsage.setStatus('mandatory')
slipNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkMask.setStatus('mandatory')
slipDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipDefaultGateway.setStatus('mandatory')
slipEnableRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipEnableRIP.setStatus('mandatory')
slipStatsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1), )
if mibBuilder.loadTexts: slipStatsTable.setStatus('mandatory')
slipStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1), ).setIndexNames((0, "SYNC-RESEARCH-MIB", "slipStatsIndex"))
if mibBuilder.loadTexts: slipStatsEntry.setStatus('mandatory')
slipStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipStatsIndex.setStatus('mandatory')
slipInChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipInChrs.setStatus('mandatory')
slipOutChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipOutChrs.setStatus('mandatory')
slipInMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipInMessages.setStatus('mandatory')
slipOutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipOutMessages.setStatus('mandatory')
slipInMsgDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipInMsgDiscarded.setStatus('mandatory')
slipOutMsgDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipOutMsgDiscarded.setStatus('mandatory')
slipXmtFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipXmtFailures.setStatus('mandatory')
slipRcvMsgForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipRcvMsgForwarded.setStatus('mandatory')
slipRcvMsgErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipRcvMsgErrors.setStatus('mandatory')
slipRcvCharsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipRcvCharsDiscarded.setStatus('mandatory')
slipRcvParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipRcvParityErrors.setStatus('mandatory')
slipRcvFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipRcvFramingErrors.setStatus('mandatory')
slipRcvFifoOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipRcvFifoOverruns.setStatus('mandatory')
slipRcvCharsOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipRcvCharsOverruns.setStatus('mandatory')
slipRcvBreakConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 3, 10, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipRcvBreakConditions.setStatus('mandatory')
configChanged = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,800)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "configId"))
configError = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,801)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "lastInstallErrCode"))
dumpExists = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,802)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "dumpFileName"))
dumpArchived = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,803)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"))
lineStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,804)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "lineStatus"), ("SYNC-RESEARCH-MIB", "lineControlFailureCode"), ("SYNC-RESEARCH-MIB", "linePhysicalIndex"), ("SYNC-RESEARCH-MIB", "lineCableType"))
lanStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,805)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "lanStatus"), ("SYNC-RESEARCH-MIB", "lanControlFailureCode"))
lineQuality = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,806)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "lineQualityFrameCount"), ("SYNC-RESEARCH-MIB", "lineQualityCRCErrors"), ("SYNC-RESEARCH-MIB", "lineQualityAborts"), ("SYNC-RESEARCH-MIB", "linePhysicalIndex"))
puStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,807)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puStatus"), ("SYNC-RESEARCH-MIB", "puControlFailureCode"), ("SYNC-RESEARCH-MIB", "linePhysicalIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"))
puConnectionStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,808)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puConnectionStatus"), ("SYNC-RESEARCH-MIB", "puLastClearCode"))
netviewConnectionStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,809)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "netviewConnectionStatus"), ("SYNC-RESEARCH-MIB", "netviewLastClearCode"))
netviewAltConnectionStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,810)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "netviewAltConnectionStatus"), ("SYNC-RESEARCH-MIB", "netviewAltLastClearCode"))
puConnectionStatusUp = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,811)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "linePhysicalIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"))
puConnectionStatusDown = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,812)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "linePhysicalIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puLastClearCode"))
netviewConnectionStatusUp = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,813)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"))
netviewConnectionStatusDown = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,814)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "netviewLastClearCode"))
netviewAltConnectionStatusUp = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,815)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"))
netviewAltConnectionStatusDown = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,816)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "netviewAltLastClearCode"))
sessSwitchedToPrimaryDLCI = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,817)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puCurrentDlci"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
sessSwitchedToParallelDLCI = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,818)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puCurrentDlci"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
sessUpOnPrimaryDLCI = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,819)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puCurrentDlci"), ("SYNC-RESEARCH-MIB", "puCurrentMAC"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
sessUpOnParallelDLCI = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,820)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puCurrentDlci"), ("SYNC-RESEARCH-MIB", "puCurrentMAC"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
sessUpOnAlternateDLCI = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,821)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puCurrentDlci"), ("SYNC-RESEARCH-MIB", "puCurrentMAC"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
sessUpOnPrimaryMAC = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,822)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puCurrentDlci"), ("SYNC-RESEARCH-MIB", "puCurrentMAC"), ("SYNC-RESEARCH-MIB", "linePhysicalType"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
sessUpOnAlternateMAC = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,823)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puCurrentDlci"), ("SYNC-RESEARCH-MIB", "puCurrentMAC"), ("SYNC-RESEARCH-MIB", "linePhysicalType"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
sessDownOnPrimaryMAC = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,824)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puLastClearCode"), ("SYNC-RESEARCH-MIB", "puLastDlciCleared"), ("SYNC-RESEARCH-MIB", "puLastMACCleared"), ("SYNC-RESEARCH-MIB", "linePhysicalType"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
sessDownOnAlternateMAC = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,825)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puLastClearCode"), ("SYNC-RESEARCH-MIB", "puLastDlciCleared"), ("SYNC-RESEARCH-MIB", "puLastMACCleared"), ("SYNC-RESEARCH-MIB", "linePhysicalType"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
lostUNI = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,826)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "linePhysicalIndex"))
restoredUNI = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,827)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "linePhysicalIndex"))
switchedToBackup = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,828)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "linePhysicalIndex"))
switchedToDed = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,829)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "linePhysicalIndex"))
dialConnStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,830)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "lineStatus"), ("SYNC-RESEARCH-MIB", "lineControlFailureCode"), ("SYNC-RESEARCH-MIB", "linePhysicalIndex"))
sessUpOnSVC = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,831)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puCurrentSVC"), ("SYNC-RESEARCH-MIB", "puCurrentLocalDTE"), ("SYNC-RESEARCH-MIB", "puCurrentRemoteDTE"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
sessDownOnSVC = NotificationType((1, 3, 6, 1, 4, 1, 485) + (0,832)).setObjects(("SYNC-RESEARCH-MIB", "lastTrapSeqNumber"), ("SYNC-RESEARCH-MIB", "puControlLineIndex"), ("SYNC-RESEARCH-MIB", "puControlPUAddress"), ("SYNC-RESEARCH-MIB", "puLastClearCode"), ("SYNC-RESEARCH-MIB", "puLastSVCCleared"), ("SYNC-RESEARCH-MIB", "puLastLocalDTECleared"), ("SYNC-RESEARCH-MIB", "puLastRemoteDTECleared"), ("SYNC-RESEARCH-MIB", "puIsDynamic"))
mibBuilder.exportSymbols("SYNC-RESEARCH-MIB", lanEthernetFrameFormat=lanEthernetFrameFormat, frameRelayARP=frameRelayARP, frameRelayLLC2FrameFormat=frameRelayLLC2FrameFormat, puStatusIgnored=puStatusIgnored, lanStatusIgnored=lanStatusIgnored, asyncPuOutMessages=asyncPuOutMessages, sdlcPuConfigLineIndex=sdlcPuConfigLineIndex, deviceControlAddress=deviceControlAddress, x25InRestarts=x25InRestarts, alcPuMaximumSlowPollInterval=alcPuMaximumSlowPollInterval, frameRelayT2Timer=frameRelayT2Timer, alcPuUserData=alcPuUserData, sdlcCTS=sdlcCTS, sdlcPuInRDFrames=sdlcPuInRDFrames, lineBisyncGroup=lineBisyncGroup, chipcom=chipcom, asyncDataBits=asyncDataBits, puX25Group=puX25Group, puLastDlciCleared=puLastDlciCleared, x25COutFrames=x25COutFrames, puLastLocalDTECleared=puLastLocalDTECleared, sdlcPuOutUAFrames=sdlcPuOutUAFrames, frameRelayMaxRetries=frameRelayMaxRetries, accessPuConfigLineIndex=accessPuConfigLineIndex, slipEnableRIP=slipEnableRIP, slipXmtFailures=slipXmtFailures, oem22181FR4=oem22181FR4, oem22183FR4=oem22183FR4, x25StatsEntry=x25StatsEntry, lineControlNAUName=lineControlNAUName, x25InResets=x25InResets, syncQN4R4b=syncQN4R4b, bscDeviceAddress=bscDeviceAddress, asyncInOctets=asyncInOctets, syncBC4R5=syncBC4R5, sdlcOverruns=sdlcOverruns, x25DataInPkts=x25DataInPkts, bisyncClocking=bisyncClocking, asyncRcvFramingErrors=asyncRcvFramingErrors, syncCN4R3b=syncCN4R3b, puLastRemoteDTECleared=puLastRemoteDTECleared, x25OutFrames=x25OutFrames, alcPuNAUName=alcPuNAUName, asyncRcvFifoOverruns=asyncRcvFifoOverruns, alcPuStatsTable=alcPuStatsTable, brIPXtargetDLCI=brIPXtargetDLCI, lineControlType=lineControlType, slipStatsGroup=slipStatsGroup, consolidatedUnitStatus=consolidatedUnitStatus, frameRelayRxDe=frameRelayRxDe, x25ReceiveWindowSize=x25ReceiveWindowSize, sdlcPuInitialState=sdlcPuInitialState, x25Clocking=x25Clocking, x25InFrames=x25InFrames, remotePuBroadcastAllDLCI=remotePuBroadcastAllDLCI, puAsyncGroup=puAsyncGroup, oem22181CR5=oem22181CR5, serviceType=serviceType, syncCN4R4du=syncCN4R4du, bisyncPuInTransactions=bisyncPuInTransactions, bisyncPuStatsEntry=bisyncPuStatsEntry, asyncDSR=asyncDSR, syncCN4R5b=syncCN4R5b, remotePuPrimaryDLCI=remotePuPrimaryDLCI, sdlcT1Timer=sdlcT1Timer, loopbackTest=loopbackTest, oemSNACMR4Q=oemSNACMR4Q, x25PlaceReverseChargeCalls=x25PlaceReverseChargeCalls, x25SigOutPkts=x25SigOutPkts, ipxEnableRipBroadcast=ipxEnableRipBroadcast, acknowledgeAllStatuses=acknowledgeAllStatuses, dialbackupFirstDedicatedPort=dialbackupFirstDedicatedPort, sdlcPuInRRFrames=sdlcPuInRRFrames, remotePuDestinationSAP=remotePuDestinationSAP, remotePuParallelDLCI=remotePuParallelDLCI, asyncPuNAUName=asyncPuNAUName, alcdeviceConfigEntry=alcdeviceConfigEntry, brLLC2targetPort=brLLC2targetPort, lanSendLocalTest=lanSendLocalTest, netviewPUXID=netviewPUXID, frameRelayInOctets=frameRelayInOctets, remotePuSourceSAP=remotePuSourceSAP, x25DSR=x25DSR, brNetBIOStargetDLCI=brNetBIOStargetDLCI, t7RcvParityErrors=t7RcvParityErrors, lanPuConfigEntry=lanPuConfigEntry, netviewConnectionStatusDown=netviewConnectionStatusDown, sdlcNRZI=sdlcNRZI, deviceStatus=deviceStatus, t7StatsEntry=t7StatsEntry, frameRelayRestrictTerminateSessUsage=frameRelayRestrictTerminateSessUsage, x25PuConfigAddress=x25PuConfigAddress, alcPuDeviceFaults=alcPuDeviceFaults, switchedToBackup=switchedToBackup, lineX25Group=lineX25Group, sessUpOnPrimaryDLCI=sessUpOnPrimaryDLCI, lanSecondDefaultGateway=lanSecondDefaultGateway, dialbackupConfigEntry=dialbackupConfigEntry, lineControlIndex=lineControlIndex, remotePuConfigTable=remotePuConfigTable, syncCN4R4b=syncCN4R4b, sdlcPuOutUIFrames=sdlcPuOutUIFrames, ipxStatsIndex=ipxStatsIndex, frameRelaySwitchedLineWaitTimer=frameRelaySwitchedLineWaitTimer, puControlPUAddress=puControlPUAddress, lanPROMMACAddress=lanPROMMACAddress, bisyncrjeDTR=bisyncrjeDTR, nodeUnitGroup=nodeUnitGroup, alcPuCSS=alcPuCSS, lanPuConfigTable=lanPuConfigTable, syncFN4R2c=syncFN4R2c, asyncRcvBreakConditions=asyncRcvBreakConditions, dialbackupDialDelayTimer=dialbackupDialDelayTimer, bisyncrjePuNAUName=bisyncrjePuNAUName, netviewSpecialConnect=netviewSpecialConnect, lanSpeed=lanSpeed, linePhysicalTable=linePhysicalTable, syncCN2R2b=syncCN2R2b, unitControlGroup=unitControlGroup, asyncPuXID=asyncPuXID, slipPortIPAddress=slipPortIPAddress, lineQualityFrameCount=lineQualityFrameCount, brEnableIPBridging=brEnableIPBridging, bisyncrjeCarrier=bisyncrjeCarrier, bisyncrjeNAUName=bisyncrjeNAUName, bisyncPuMaxData=bisyncPuMaxData, linePhysicalEntry=linePhysicalEntry, dsucsudeviceStatsEntry=dsucsudeviceStatsEntry, asyncPuDeviceRangeHigh=asyncPuDeviceRangeHigh, bisyncrjeStatsTable=bisyncrjeStatsTable, sdlcConfigPortIndex=sdlcConfigPortIndex, frExtCircuitEntry=frExtCircuitEntry, remotePuConfigAddress=remotePuConfigAddress, frameRelayDCD=frameRelayDCD, bisyncRetries=bisyncRetries, dialbackupModemDialString=dialbackupModemDialString, brOthertargetPort=brOthertargetPort, farEndNumberType=farEndNumberType, x25DeviceWindowSize=x25DeviceWindowSize, brNetBIOSPriority=brNetBIOSPriority, alcPuBytesRcv=alcPuBytesRcv, deviceConfigEntry=deviceConfigEntry, puConnectionStatusDown=puConnectionStatusDown, frameRelayBridgingProtocol=frameRelayBridgingProtocol, dialbackupConnectType=dialbackupConnectType, x25LowTwoWayChannel=x25LowTwoWayChannel, brOtherPriority=brOtherPriority, dialbackupStatsEntry=dialbackupStatsEntry, sessDownOnSVC=sessDownOnSVC, x25FRMRInFrames=x25FRMRInFrames, mappingPuXID=mappingPuXID, brMaxAge=brMaxAge, sessSwitchedToParallelDLCI=sessSwitchedToParallelDLCI, markDEBit=markDEBit, brNetBIOStargetPort=brNetBIOStargetPort, alcCTS=alcCTS, lanMaxRetries=lanMaxRetries, frameRelayLocalManagementProtocol=frameRelayLocalManagementProtocol, syncQN4R3b=syncQN4R3b, callRetryTimer=callRetryTimer, slipInMessages=slipInMessages, alcDCD=alcDCD, x25ConfigType=x25ConfigType, frameRelayOverruns=frameRelayOverruns, sdlcPuInRNRFrames=sdlcPuInRNRFrames, slipOutChrs=slipOutChrs, bisyncPuConfigLineIndex=bisyncPuConfigLineIndex, softwareVersion=softwareVersion, brIPtargetDLCI=brIPtargetDLCI, sdlcPuReTxIFrames=sdlcPuReTxIFrames, slipRcvCharsDiscarded=slipRcvCharsDiscarded, x25SecondDefaultGatewayAddress=x25SecondDefaultGatewayAddress, dsucsuSpeed=dsucsuSpeed, lanControlNAUName=lanControlNAUName, slipRcvBreakConditions=slipRcvBreakConditions, syncCN4R4u=syncCN4R4u, bisyncrjeStatsPortIndex=bisyncrjeStatsPortIndex, syncQN4R3c=syncQN4R3c, internalRingNumber=internalRingNumber, connectionTimeOut=connectionTimeOut, bisyncInitState=bisyncInitState, oem22183CR4=oem22183CR4, lastInstallErrCode=lastInstallErrCode, asyncRcvCharsDiscarded=asyncRcvCharsDiscarded, ibm=ibm, sdlcOutFrames=sdlcOutFrames, mappingPuDestinationSAP=mappingPuDestinationSAP, dsucsuControlGroup=dsucsuControlGroup, puControlGroup=puControlGroup, frameRelaySAPUpdtTimer=frameRelaySAPUpdtTimer, frameRelaySampleDuration=frameRelaySampleDuration, sdlcReturnClock=sdlcReturnClock, x25OutResets=x25OutResets, frExtCircuitDlci=frExtCircuitDlci, commEntry=commEntry, alcSegRx=alcSegRx, oem22184BC5=oem22184BC5, configId=configId, bisyncrjeCodeSet=bisyncrjeCodeSet, bisyncIBS=bisyncIBS, x25ReceivePacketSize=x25ReceivePacketSize, sdlcPuStatsEntry=sdlcPuStatsEntry, mappingPuPartnerConfigLineIndex=mappingPuPartnerConfigLineIndex, alcPuSegXmit=alcPuSegXmit, frameRelayClocking=frameRelayClocking, asyncInMsgDiscarded=asyncInMsgDiscarded, syncCN5R5du=syncCN5R5du, bisyncrjeRvi=bisyncrjeRvi, frameRelayCRCErrors=frameRelayCRCErrors, x25PortType=x25PortType, isdnControlGroup=isdnControlGroup, lineBisyncRjeGroup=lineBisyncRjeGroup, sdlcPuConfigTable=sdlcPuConfigTable, expansionSerialNumber=expansionSerialNumber, brSerialPriority=brSerialPriority, lineStatusIgnored=lineStatusIgnored, mappingPuPartnerConfigAddress=mappingPuPartnerConfigAddress, dumpExists=dumpExists, alcPuXID=alcPuXID, asyncPuDeviceRangeLow=asyncPuDeviceRangeLow, bisyncReplyTimer=bisyncReplyTimer, sdlcPuInFRMRFrames=sdlcPuInFRMRFrames, dialbackupassociatedDLCISecond=dialbackupassociatedDLCISecond, alcSegTxDisc=alcSegTxDisc, t7PortParity=t7PortParity, alcNumberOfSegments=alcNumberOfSegments, commTrap=commTrap, lineQualityAborts=lineQualityAborts, t7OutOctets=t7OutOctets, asyncRTC=asyncRTC, alcPuStatsEntry=alcPuStatsEntry, nodeLineGroup=nodeLineGroup, bisyncrjeOutTrns=bisyncrjeOutTrns, sessUpOnAlternateDLCI=sessUpOnAlternateDLCI, oemSNACMR2W=oemSNACMR2W, puBisyncGroup=puBisyncGroup, bisyncSlowpollTimer=bisyncSlowpollTimer, frameRelaySwitchedAttemptsSuccessful=frameRelaySwitchedAttemptsSuccessful, associatedDLCI3=associatedDLCI3, deviceConfigCUIndex=deviceConfigCUIndex, syncBF3R5b=syncBF3R5b, bisyncPuConfigAddress=bisyncPuConfigAddress, x25PuConfigEntry=x25PuConfigEntry, oem22185FR5=oem22185FR5, oemSNACMR3C=oemSNACMR3C, dialbackupTreatLLCControlCharacters=dialbackupTreatLLCControlCharacters, asyncOutMessages=asyncOutMessages, frameRelayConfigEntry=frameRelayConfigEntry, oem22184BF5=oem22184BF5, ipxRipRcvdFwdInterval=ipxRipRcvdFwdInterval, mappingPuPartnerDestSAP=mappingPuPartnerDestSAP, alcSegTx=alcSegTx, mappingPuConnectID=mappingPuConnectID, t7ConfigEntry=t7ConfigEntry)
mibBuilder.exportSymbols("SYNC-RESEARCH-MIB", sdlcPuInDISCFrames=sdlcPuInDISCFrames, alcSourceDTEAddress=alcSourceDTEAddress, x25PuConfigTable=x25PuConfigTable, configPassword=configPassword, frameRelaySwitchedAttempts=frameRelaySwitchedAttempts, x25NAUName=x25NAUName, alcReturnClock=alcReturnClock, sdlcPuGroupPollAddress=sdlcPuGroupPollAddress, bisyncrjePuConfigLineIndex=bisyncrjePuConfigLineIndex, asyncPuStatsEntry=asyncPuStatsEntry, brEnableSNABridging=brEnableSNABridging, alcBytesTxDisc=alcBytesTxDisc, sdlcPuInUIFrames=sdlcPuInUIFrames, asyncPhysicalType=asyncPhysicalType, sdlcPuOutDMFrames=sdlcPuOutDMFrames, brEnableSyncManBridging=brEnableSyncManBridging, bisyncCarrier=bisyncCarrier, bisyncPuInitialState=bisyncPuInitialState, t7RcvFramingErrors=t7RcvFramingErrors, alcPuStatsAddress=alcPuStatsAddress, sessSwitchedToPrimaryDLCI=sessSwitchedToPrimaryDLCI, localNumberType=localNumberType, syncBF5R5=syncBF5R5, lc2EN2port=lc2EN2port, asyncStatsPortIndex=asyncStatsPortIndex, dsucsudeviceConfigTable=dsucsudeviceConfigTable, lineDialBackupGroup=lineDialBackupGroup, x25TransmitWindowSize=x25TransmitWindowSize, slipOutMsgDiscarded=slipOutMsgDiscarded, puStatusAcknowledged=puStatusAcknowledged, restoredUNI=restoredUNI, nmsSerialSpeed=nmsSerialSpeed, expansionPartNumber=expansionPartNumber, bisyncrjeInRetr=bisyncrjeInRetr, x25LinkWindowSize=x25LinkWindowSize, slipPortSpeed=slipPortSpeed, oemSNACXR4W=oemSNACXR4W, bisyncrjePuXID=bisyncrjePuXID, syncProducts=syncProducts, bisyncPuStatsLineIndex=bisyncPuStatsLineIndex, t7InMsgDiscarded=t7InMsgDiscarded, bscDeviceInTransactions=bscDeviceInTransactions, bisyncrjeDSR=bisyncrjeDSR, dialbackupDialInactivityTimer=dialbackupDialInactivityTimer, syncQN4R4u=syncQN4R4u, syncFN4R2b=syncFN4R2b, dialbackupStatsTable=dialbackupStatsTable, x25StatsPortIndex=x25StatsPortIndex, bisyncPuSlowPolls=bisyncPuSlowPolls, alcStatsEntry=alcStatsEntry, bisyncrjePuConfigAddress=bisyncrjePuConfigAddress, lanRIPAge=lanRIPAge, brLowPriorityBandwidth=brLowPriorityBandwidth, bisyncPuOutTransactions=bisyncPuOutTransactions, x25T1Timer=x25T1Timer, wan2BoardType=wan2BoardType, netviewAltConnectionStatusDown=netviewAltConnectionStatusDown, bscDeviceCUIndex=bscDeviceCUIndex, bscDeviceLineIndex=bscDeviceLineIndex, localNumber=localNumber, t7XmtFailures=t7XmtFailures, puMappingGroup=puMappingGroup, internalBridgeNumber=internalBridgeNumber, associatedDLCI4=associatedDLCI4, bisyncPuStatsTable=bisyncPuStatsTable, oemSNACMR2Q=oemSNACMR2Q, sdlcPuOutFRMRFrames=sdlcPuOutFRMRFrames, bisyncPuXID=bisyncPuXID, msBoardType=msBoardType, syncCN4R5du=syncCN4R5du, brIPPriority=brIPPriority, ipxStatsEntry=ipxStatsEntry, bisyncStatsTable=bisyncStatsTable, serialPortLogoffTimer=serialPortLogoffTimer, x25CTS=x25CTS, bisyncrjePuConfigEntry=bisyncrjePuConfigEntry, alcdeviceConfigType=alcdeviceConfigType, mappingPuDirectDLCI=mappingPuDirectDLCI, cableTron=cableTron, bisyncPuNAUName=bisyncPuNAUName, nodeBridgeGroup=nodeBridgeGroup, asyncInitState=asyncInitState, x25DataOutPkts=x25DataOutPkts, brIPXtargetPort=brIPXtargetPort, packetsReceived=packetsReceived, unitId=unitId, bisyncXmtTimeout=bisyncXmtTimeout, dialbackupModemHangString=dialbackupModemHangString, lanIPAddress=lanIPAddress, asyncRcvCharsOverruns=asyncRcvCharsOverruns, frameRelayLinkPollingTimer=frameRelayLinkPollingTimer, syncQN4R5du=syncQN4R5du, asyncRxForwardingCount=asyncRxForwardingCount, dialbackupDedicatedPort=dialbackupDedicatedPort, slipRcvParityErrors=slipRcvParityErrors, nosConnectAttempts=nosConnectAttempts, x25PuSolicitXID=x25PuSolicitXID, lineInterfaceType=lineInterfaceType, deviceStatsEntry=deviceStatsEntry, frameRelayNetworkMask=frameRelayNetworkMask, nodeLANGroup=nodeLANGroup, frExtCircuitIfIndex=frExtCircuitIfIndex, sessUpOnAlternateMAC=sessUpOnAlternateMAC, bscDeviceResponseDelaySum=bscDeviceResponseDelaySum, alternateNetviewSpecialConnect=alternateNetviewSpecialConnect, accessPuConfigAddress=accessPuConfigAddress, x25UFrames=x25UFrames, syncQN4R4bu=syncQN4R4bu, sdlcPuStatsLineIndex=sdlcPuStatsLineIndex, frameRelaySessSwitchThreshold=frameRelaySessSwitchThreshold, bisyncrjeOutEtx=bisyncrjeOutEtx, syncFN3R4bu=syncFN3R4bu, chassisSlot=chassisSlot, netviewAltStatusAcknowledged=netviewAltStatusAcknowledged, asyncStopBits=asyncStopBits, asyncInMessages=asyncInMessages, x25CInFrames=x25CInFrames, puConnectionStatusChanged=puConnectionStatusChanged, lanStatusChanged=lanStatusChanged, netviewAltConnectionStatusUp=netviewAltConnectionStatusUp, ipxEnableRouting=ipxEnableRouting, lineControlFailureCode=lineControlFailureCode, lostUNI=lostUNI, switchedToDed=switchedToDed, sdlcPuInDMFrames=sdlcPuInDMFrames, oemSNACXR4Q=oemSNACXR4Q, slipConfigTable=slipConfigTable, frameRelayIPAddress=frameRelayIPAddress, asyncIdleTimer=asyncIdleTimer, farEndNumber=farEndNumber, bisyncReturnClock=bisyncReturnClock, slipRcvFramingErrors=slipRcvFramingErrors, dsucsuloopbackbytesTransmitted=dsucsuloopbackbytesTransmitted, mappingPuPartnerLastClearCode=mappingPuPartnerLastClearCode, associatedPortNumber4=associatedPortNumber4, puCurrentMAC=puCurrentMAC, remotePuTransmitPriority=remotePuTransmitPriority, sdlcNAUName=sdlcNAUName, lanControlEntry=lanControlEntry, deviceControlEntry=deviceControlEntry, bisyncrjeInEtx=bisyncrjeInEtx, asyncParity=asyncParity, bisyncrjeInEnq=bisyncrjeInEnq, puControlFailureCode=puControlFailureCode, netviewConnectionStatusUp=netviewConnectionStatusUp, asyncRcvMsgForwarded=asyncRcvMsgForwarded, t7RxForwardingCount=t7RxForwardingCount, alcBytesRxDisc=alcBytesRxDisc, frameRelaySwitchedBackup=frameRelaySwitchedBackup, bscDeviceSumCount=bscDeviceSumCount, associatedDLCI2=associatedDLCI2, excessBurstGovernor=excessBurstGovernor, asyncDCD=asyncDCD, bisyncrjeSpeed=bisyncrjeSpeed, mappingPuPartnerDestMAC=mappingPuPartnerDestMAC, sdlcClocking=sdlcClocking, isdndeviceConfigTable=isdndeviceConfigTable, ipxStatsTable=ipxStatsTable, configError=configError, syncFN4R4bu=syncFN4R4bu, linePhysicalGroup=linePhysicalGroup, lineCableType=lineCableType, syncCN2R2du=syncCN2R2du, syncCN4R2b=syncCN4R2b, priIPHelperAddress=priIPHelperAddress, sdlcStatsPortIndex=sdlcStatsPortIndex, frameRelayMultiflagSeparation=frameRelayMultiflagSeparation, frameRelayDTR=frameRelayDTR, deviceBSCGroup=deviceBSCGroup, puLastMACCleared=puLastMACCleared, asyncPuConfigAddress=asyncPuConfigAddress, oemSNACXR3C=oemSNACXR3C, lanPuAlternateMACAddress=lanPuAlternateMACAddress, dialConnStatusChanged=dialConnStatusChanged, oem22185BC5=oem22185BC5, sdlcPuOutDISCFrames=sdlcPuOutDISCFrames, alcDestinationDTEAddress=alcDestinationDTEAddress, syncResearch=syncResearch, lineAlcGroup=lineAlcGroup, sessDownOnPrimaryMAC=sessDownOnPrimaryMAC, slipInChrs=slipInChrs, asyncOrt=asyncOrt, t7PortSpeed=t7PortSpeed, oem22185BF5=oem22185BF5, sdlcPuType=sdlcPuType, alcBytesTx=alcBytesTx, dumpArchived=dumpArchived, t7StopBits=t7StopBits, x25QInPkts=x25QInPkts, dsucsudeviceConfigEntry=dsucsudeviceConfigEntry, alcPuConnectType=alcPuConnectType, frameRelayNAUName=frameRelayNAUName, frameRelayReturnClock=frameRelayReturnClock, dsucsuLine=dsucsuLine, frameRelayVirtualMACAddress=frameRelayVirtualMACAddress, syncBF3R5=syncBF3R5, romVersion=romVersion, frameRelayVirtualBridgeNumber=frameRelayVirtualBridgeNumber, associatedPortNumber2=associatedPortNumber2, alcResponseTimeouts=alcResponseTimeouts, alcConfigType=alcConfigType, dsucsuloopbackbytesReceived=dsucsuloopbackbytesReceived, asyncDTR=asyncDTR, bisyncrjeConfigType=bisyncrjeConfigType, puCurrentRemoteDTE=puCurrentRemoteDTE, asyncPuInMessages=asyncPuInMessages, asyncStatsTable=asyncStatsTable, t7DataBits=t7DataBits, puConnectionStatusUp=puConnectionStatusUp, unitStatisticsGroup=unitStatisticsGroup, t7RcvCharsOverruns=t7RcvCharsOverruns, deviceControlCUIndex=deviceControlCUIndex, sdlcPuInXIDFrames=sdlcPuInXIDFrames, lineAsyncGroup=lineAsyncGroup, mappingPuSourceSAP=mappingPuSourceSAP, bisyncrjeWack=bisyncrjeWack, sdlcOutOctets=sdlcOutOctets, puBisyncRjeGroup=puBisyncRjeGroup, boundary=boundary, syncCN4R2c=syncCN4R2c, srCommTrapGroup=srCommTrapGroup, commIPAddr=commIPAddr, syncFN2R2du=syncFN2R2du, syncQN4R2b=syncQN4R2b, oem22181CR4=oem22181CR4, x25AcceptReverseChargeCalls=x25AcceptReverseChargeCalls, channelID=channelID, asyncOutOctets=asyncOutOctets, lanDefaultGateway=lanDefaultGateway, bisyncrjeConfigTable=bisyncrjeConfigTable, sdlcPuConnectionID=sdlcPuConnectionID, brEnableIPXBridging=brEnableIPXBridging, maxPortNumber=maxPortNumber, t7RcvMsgForwarded=t7RcvMsgForwarded, puLanGroup=puLanGroup, slipConfigGroup=slipConfigGroup, alcPuBytesXmit=alcPuBytesXmit, asyncConfigPortIndex=asyncConfigPortIndex, sdlcPuXID=sdlcPuXID, cpuIdleSumCounts=cpuIdleSumCounts, frameRelayConfigPortIndex=frameRelayConfigPortIndex, frameRelayTxWindowSize=frameRelayTxWindowSize, frameRelayVirtualRingNumber=frameRelayVirtualRingNumber, sdlcPuConfigEntry=sdlcPuConfigEntry, t7RcvFifoOverruns=t7RcvFifoOverruns, bisyncConfigPortIndex=bisyncConfigPortIndex, enableRipBroadcast=enableRipBroadcast, deviceStatsTable=deviceStatsTable, lanPortEntry=lanPortEntry, linePhysicalIndex=linePhysicalIndex, lineEIAStatus=lineEIAStatus, frameRelayFullStatusPollingCount=frameRelayFullStatusPollingCount, bisyncSessTerm=bisyncSessTerm, bisyncOverruns=bisyncOverruns)
mibBuilder.exportSymbols("SYNC-RESEARCH-MIB", internalMacAddress=internalMacAddress, frameRelayPortType=frameRelayPortType, lanPortType=lanPortType, bisyncCRCErrors=bisyncCRCErrors, lanBroadcastType=lanBroadcastType, netviewLastClearCode=netviewLastClearCode, lanIPEthernetFrameType=lanIPEthernetFrameType, oemSNACMR3W=oemSNACMR3W, asyncConfigEntry=asyncConfigEntry, asyncConfigType=asyncConfigType, x25DevicePacketSize=x25DevicePacketSize, lanPuConnectionID=lanPuConnectionID, alcDTR=alcDTR, alcPuMinimumFastPoll=alcPuMinimumFastPoll, brIPXPriority=brIPXPriority, measurementPeriod=measurementPeriod, sdlcConfigEntry=sdlcConfigEntry, asyncRcvMsgErrors=asyncRcvMsgErrors, x25ForwardingUnit=x25ForwardingUnit, wan1BoardType=wan1BoardType, deviceControlGroup=deviceControlGroup, alcdeviceConfigCUIndex=alcdeviceConfigCUIndex, ipxEnableSapBroadcast=ipxEnableSapBroadcast, asyncPuConnectType=asyncPuConnectType, bridgePriority=bridgePriority, syncFN4R5b=syncFN4R5b, bisyncrjeRTS=bisyncrjeRTS, x25PuSourceAddress=x25PuSourceAddress, bisyncrjeDCD=bisyncrjeDCD, frameRelayAlternateIPAddress=frameRelayAlternateIPAddress, bisyncrjeRetries=bisyncrjeRetries, sdlcPause=sdlcPause, frameRelayCTS=frameRelayCTS, deviceControlFailureCode=deviceControlFailureCode, lanRIPUpdtTimer=lanRIPUpdtTimer, sdlcPuNAUName=sdlcPuNAUName, bisyncRcvTimeout=bisyncRcvTimeout, deviceConfigLineIndex=deviceConfigLineIndex, slipProtocolEnabled=slipProtocolEnabled, syncBF4R5=syncBF4R5, lanNetworkMask=lanNetworkMask, lanT2Timer=lanT2Timer, asyncPuStatsTable=asyncPuStatsTable, asyncPuStatsLineIndex=asyncPuStatsLineIndex, t7PortTxFrameGap=t7PortTxFrameGap, secIPHelperAddress=secIPHelperAddress, bisyncrjeInChrs=bisyncrjeInChrs, frameRelayRIPUpdtTimer=frameRelayRIPUpdtTimer, dialbackupConfigTable=dialbackupConfigTable, frameRelayDefaultGatewayAddress=frameRelayDefaultGatewayAddress, x25IPAddress=x25IPAddress, asyncPuStatsAddress=asyncPuStatsAddress, asyncRTS=asyncRTS, oemSNACXR2W=oemSNACXR2W, alcStatsTable=alcStatsTable, lanPuMAC=lanPuMAC, x25DTEAddress=x25DTEAddress, t7UDPPortNumber=t7UDPPortNumber, sdlcRecvAborts=sdlcRecvAborts, dsucsuClocking=dsucsuClocking, frExtCircuitTable=frExtCircuitTable, lanPuXID=lanPuXID, syncBC5R5=syncBC5R5, lineQualityCRCErrors=lineQualityCRCErrors, internalIPNetmask=internalIPNetmask, x25PortSpeed=x25PortSpeed, x25SigInPkts=x25SigInPkts, alcStatsPortIndex=alcStatsPortIndex, remotePuMAC=remotePuMAC, syncResearchAgent=syncResearchAgent, puCurrentSVC=puCurrentSVC, puCurrentLocalDTE=puCurrentLocalDTE, ipxSapRcvdFwdInterval=ipxSapRcvdFwdInterval, patchId=patchId, internalRingNumber4=internalRingNumber4, frameRelayDSR=frameRelayDSR, lanPuConfigLineIndex=lanPuConfigLineIndex, bisyncrjeClocking=bisyncrjeClocking, alcLimitSegsCharsBetweenPolls=alcLimitSegsCharsBetweenPolls, lanPortIndex=lanPortIndex, oem2490R22F=oem2490R22F, x25InitState=x25InitState, x25QOutPkts=x25QOutPkts, sdlcPuPollResponseTimeouts=sdlcPuPollResponseTimeouts, dialbackupassociatedDLCIDedicated=dialbackupassociatedDLCIDedicated, brHelloTimer=brHelloTimer, dialbackupStatsPortIndex=dialbackupStatsPortIndex, unitSerialNumber=unitSerialNumber, oemProducts=oemProducts, linkConverter2=linkConverter2, syncFN4R5bu=syncFN4R5bu, brFilterIP=brFilterIP, sessUpOnParallelDLCI=sessUpOnParallelDLCI, bisyncrjePuConfigTable=bisyncrjePuConfigTable, lineControlEntry=lineControlEntry, netViewPUConfigGroup=netViewPUConfigGroup, asyncReturnClock=asyncReturnClock, alcConfigPortIndex=alcConfigPortIndex, syncFN5R5du=syncFN5R5du, puLastClearCode=puLastClearCode, slipConfigEntry=slipConfigEntry, x25DTR=x25DTR, commTable=commTable, bisyncDSR=bisyncDSR, alcdeviceConfigTable=alcdeviceConfigTable, puStatusChanged=puStatusChanged, oem22183BC5=oem22183BC5, bisyncNAUName=bisyncNAUName, alcRTS=alcRTS, internalIPAddr=internalIPAddr, alcPuConfigLineIndex=alcPuConfigLineIndex, isdndeviceConfigEntry=isdndeviceConfigEntry, netViewPUStatusGroup=netViewPUStatusGroup, lanMACAddress=lanMACAddress, sdlciframetrans=sdlciframetrans, syncQN4R5bu=syncQN4R5bu, dialbackupSecondDedicatedPort=dialbackupSecondDedicatedPort, slipConfigIndex=slipConfigIndex, deviceControlTable=deviceControlTable, frameRelayStatsPortIndex=frameRelayStatsPortIndex, asyncPuConfigLineIndex=asyncPuConfigLineIndex, brMediumPriorityBandwidth=brMediumPriorityBandwidth, bisyncPuConfigEntry=bisyncPuConfigEntry, bscDeviceResponseDelaySqSum=bscDeviceResponseDelaySqSum, bisyncPuConnectType=bisyncPuConnectType, unitPartNumber=unitPartNumber, lineControlTable=lineControlTable, puCurrentDlci=puCurrentDlci, netviewAltConnectionAttemptCount=netviewAltConnectionAttemptCount, bisyncrjeOutRetr=bisyncrjeOutRetr, brFilterSMAN=brFilterSMAN, lanNAUName=lanNAUName, x25NPS=x25NPS, alcBytesRx=alcBytesRx, oemSNACXR4C=oemSNACXR4C, oem22185CR5=oem22185CR5, sdlcInOctets=sdlcInOctets, frameRelayDedLineWaitTimer=frameRelayDedLineWaitTimer, puNetworkType=puNetworkType, sdlcPuOutRRFrames=sdlcPuOutRRFrames, oem22183BF5=oem22183BF5, lanControlIndex=lanControlIndex, mappingPuConnAttemptCnt=mappingPuConnAttemptCnt, x25PuConnectionID=x25PuConnectionID, brHighPriorityBandwidth=brHighPriorityBandwidth, slipStatsTable=slipStatsTable, dialbackupModemInitString=dialbackupModemInitString, bisyncPuConfigTable=bisyncPuConfigTable, centralSite=centralSite, frameRelayProxyARP=frameRelayProxyARP, oemSNACMR4W=oemSNACMR4W, alcConfigEntry=alcConfigEntry, brLLC2Priority=brLLC2Priority, bisyncStatsPortIndex=bisyncStatsPortIndex, frameRelayTiTimer=frameRelayTiTimer, syncBC4R5b=syncBC4R5b, netviewAltStatusIgnored=netviewAltStatusIgnored, slipStatsIndex=slipStatsIndex, nodeSlipGroup=nodeSlipGroup, oem22183FR5=oem22183FR5, lc2EN4port=lc2EN4port, password=password, x25Samples=x25Samples, lanRxWindowSize=lanRxWindowSize, bridgeStatsGroup=bridgeStatsGroup, sdlcMaxRetries=sdlcMaxRetries, sdlcPuInIFrames=sdlcPuInIFrames, lanPuDestinationSAP=lanPuDestinationSAP, brEnableNetBiosBridging=brEnableNetBiosBridging, isdnloopbackbytesTransmitted=isdnloopbackbytesTransmitted, x25DefaultGatewayAddress=x25DefaultGatewayAddress, msExtBoardType=msExtBoardType, configChanged=configChanged, slipIdleTimer=slipIdleTimer, alcPuConfigTable=alcPuConfigTable, x25SumsQ=x25SumsQ, brEnableOtherBridging=brEnableOtherBridging, bisyncPuPolls=bisyncPuPolls, syncFN4R4b=syncFN4R4b, mappingPuConfigAddress=mappingPuConfigAddress, nodeT7Group=nodeT7Group, internalMacAddress3=internalMacAddress3, sessDownOnAlternateMAC=sessDownOnAlternateMAC, commMACAddr=commMACAddr, systemBufferFreeCounts=systemBufferFreeCounts, unitConfigGroup=unitConfigGroup, asyncAddressOffset=asyncAddressOffset, clearDump=clearDump, t7ConfigTable=t7ConfigTable, internalRingNumber3=internalRingNumber3, slipOutMessages=slipOutMessages, ipInactivityTimer=ipInactivityTimer, lanControlGroup=lanControlGroup, syncCN4R3c=syncCN4R3c, lineControlGroup=lineControlGroup, slipRcvMsgForwarded=slipRcvMsgForwarded, t7ConfigGroup=t7ConfigGroup, sdlcPuInTESTFrames=sdlcPuInTESTFrames, numberSamples=numberSamples, puConnectionStatus=puConnectionStatus, sdlcPuOutRDFrames=sdlcPuOutRDFrames, puControlLineIndex=puControlLineIndex, syncFN4R5du=syncFN4R5du, commName=commName, lastTrapSeqNumber=lastTrapSeqNumber, asyncOutMsgDiscarded=asyncOutMsgDiscarded, mappingPuPartnerSourceSAP=mappingPuPartnerSourceSAP, alcPortSpeed=alcPortSpeed, nodePUGroup=nodePUGroup, alcPortFaults=alcPortFaults, asyncSpeed=asyncSpeed, sdlcPuMAXOUT=sdlcPuMAXOUT, frameRelayRTS=frameRelayRTS, puControlNAUName=puControlNAUName, slipStatsEntry=slipStatsEntry, slipRcvFifoOverruns=slipRcvFifoOverruns, brTerminatedLLC2Priority=brTerminatedLLC2Priority, netviewStatusIgnored=netviewStatusIgnored, lanPortTable=lanPortTable, x25PuNAUName=x25PuNAUName, oemSNACMIM2=oemSNACMIM2, alcPuConfigEntry=alcPuConfigEntry, lanSAPAge=lanSAPAge, processorType=processorType, asyncPuConfigTable=asyncPuConfigTable, sdlcPuStatsTable=sdlcPuStatsTable, remotePuLocalDTE=remotePuLocalDTE, syncFN4R4du=syncFN4R4du, sdlcSpeed=sdlcSpeed, syncCN4R4bu=syncCN4R4bu, frameRelayRSM=frameRelayRSM, frameRelayT1Timer=frameRelayT1Timer, sdlcConfigTable=sdlcConfigTable, frameRelayOutOctets=frameRelayOutOctets, bisyncDTR=bisyncDTR, bisyncrjeInEtb=bisyncrjeInEtb, syncBF5R5b=syncBF5R5b, x25ConfigEntry=x25ConfigEntry, puCurrentConnectionType=puCurrentConnectionType, syncCN3R4bu=syncCN3R4bu, lanRingNumber=lanRingNumber, lanBridgeNumber=lanBridgeNumber, spid=spid, isdnCRCErrors=isdnCRCErrors, syncCN3R5du=syncCN3R5du, t7RcvMsgErrors=t7RcvMsgErrors, sdlcSlowPollTimer=sdlcSlowPollTimer, lineFrameRelayGroup=lineFrameRelayGroup, sdlcStatsTable=sdlcStatsTable, x25TransmitPacketSize=x25TransmitPacketSize, x25DataInChrs=x25DataInChrs, frameRelayExcessBurst=frameRelayExcessBurst, lc2TR6port=lc2TR6port, x25PuRemoteDTEAddress=x25PuRemoteDTEAddress)
mibBuilder.exportSymbols("SYNC-RESEARCH-MIB", lanStatusAcknowledged=lanStatusAcknowledged, oemSNACXR2C=oemSNACXR2C, sdlcPuStatsAddress=sdlcPuStatsAddress, alcConfigTable=alcConfigTable, sdlcPuOutIFrames=sdlcPuOutIFrames, asyncPuConnectionID=asyncPuConnectionID, sdlcPuOutRNRFrames=sdlcPuOutRNRFrames, lanControlFailureCode=lanControlFailureCode, bisyncrjeOutChrs=bisyncrjeOutChrs, nodeFrCirGroup=nodeFrCirGroup, brOthertargetDLCI=brOthertargetDLCI, puControlEntry=puControlEntry, sdlcPuInUAFrames=sdlcPuInUAFrames, puControlTable=puControlTable, t7OutMsgDiscarded=t7OutMsgDiscarded, bisyncOutOctets=bisyncOutOctets, bisyncrjePuConnectType=bisyncrjePuConnectType, frExtCircuitStatusIgnored=frExtCircuitStatusIgnored, netviewConnectionAttemptCount=netviewConnectionAttemptCount, productType=productType, sdlcMultiFlagInsertion=sdlcMultiFlagInsertion, bisyncRTS=bisyncRTS, alcPuSegRcv=alcPuSegRcv, mappingPuConfigEntry=mappingPuConfigEntry, oem22181FR5=oem22181FR5, frExtCircuitRxDe=frExtCircuitRxDe, sdlcInitState=sdlcInitState, frExtCircuitMaxBits=frExtCircuitMaxBits, unitRestart=unitRestart, t7InMessages=t7InMessages, lanSAPUpdtTimer=lanSAPUpdtTimer, kbytesTransmitted=kbytesTransmitted, bisyncPuConnectionID=bisyncPuConnectionID, mappingPuPartnerConnAttemptCnt=mappingPuPartnerConnAttemptCnt, alcPuResponseTimeout=alcPuResponseTimeout, x25Sum=x25Sum, nodeIpGroup=nodeIpGroup, dialbackupPortType=dialbackupPortType, netviewAltLastClearCode=netviewAltLastClearCode, lanControlType=lanControlType, sdlcDCD=sdlcDCD, isdndeviceStatsTable=isdndeviceStatsTable, bisyncPause=bisyncPause, dsucsuLineNumber=dsucsuLineNumber, x25QInChrs=x25QInChrs, maxDevice=maxDevice, t7ConfigIndex=t7ConfigIndex, frExtCircuitPartnerId=frExtCircuitPartnerId, t7OutMessages=t7OutMessages, isdndeviceStatsEntry=isdndeviceStatsEntry, slipDefaultGateway=slipDefaultGateway, sdlcPuOutSNRMFrames=sdlcPuOutSNRMFrames, syncBF4R5b=syncBF4R5b, brIPtargetPort=brIPtargetPort, sdlcPuOutXIDFrames=sdlcPuOutXIDFrames, sdlcpollrsptimeouts=sdlcpollrsptimeouts, asyncXmtFailures=asyncXmtFailures, packetsTransmitted=packetsTransmitted, deviceConfigType=deviceConfigType, lanInterfaceType=lanInterfaceType, syncQN4R5b=syncQN4R5b, lanTiTimer=lanTiTimer, lineSwitchedConnection=lineSwitchedConnection, x25PuXID=x25PuXID, deviceALCGroup=deviceALCGroup, t7InOctets=t7InOctets, bisyncPuTargetHostType=bisyncPuTargetHostType, slipRcvMsgErrors=slipRcvMsgErrors, maxSession=maxSession, frameRelayRecvAborts=frameRelayRecvAborts, frExtCircuitTxDe=frExtCircuitTxDe, netviewConnectionStatusChanged=netviewConnectionStatusChanged, x25ReturnClock=x25ReturnClock, netviewAltConnectionStatus=netviewAltConnectionStatus, mappingPuDestinationMAC=mappingPuDestinationMAC, asyncPuConfigEntry=asyncPuConfigEntry, asyncPuInitialState=asyncPuInitialState, alcNumberOfNullSeg=alcNumberOfNullSeg, initiateInstall=initiateInstall, x25MaxRetries=x25MaxRetries, frameRelayStatsEntry=frameRelayStatsEntry, alternateNetviewConnectID=alternateNetviewConnectID, bisyncrjeInTrns=bisyncrjeInTrns, lanTokenRingGroup=lanTokenRingGroup, lanTxWindowSize=lanTxWindowSize, frameRelaySAPAge=frameRelaySAPAge, lineStatus=lineStatus, lanStatus=lanStatus, syncFN2R2b=syncFN2R2b, homeDialBackup=homeDialBackup, nodeIpxGroup=nodeIpxGroup, frameRelayRxWindowSize=frameRelayRxWindowSize, slipNetworkMask=slipNetworkMask, asyncTxFrameGap=asyncTxFrameGap, dialbackupSuccatmpt=dialbackupSuccatmpt, x25ConfigTable=x25ConfigTable, slipInMsgDiscarded=slipInMsgDiscarded, alcPuPolls=alcPuPolls, lineStatusChanged=lineStatusChanged, dialbackupConfigPortIndex=dialbackupConfigPortIndex, dumpOnRestart=dumpOnRestart, x25DCD=x25DCD, linkConverter=linkConverter, lineQuality=lineQuality, frameRelayAlternateNetmask=frameRelayAlternateNetmask, unitModel=unitModel, sdlcConfigType=sdlcConfigType, lanPuConfigAddress=lanPuConfigAddress, bisyncrjePuConnectionID=bisyncrjePuConnectionID, netviewAltConnectionStatusChanged=netviewAltConnectionStatusChanged, commAccess=commAccess, brLLC2targetDLCI=brLLC2targetDLCI, asyncCTS=asyncCTS, deviceConfigAddress=deviceConfigAddress, frameRelaySecondDefaultGatewayAddress=frameRelaySecondDefaultGatewayAddress, dumpFileStatus=dumpFileStatus, netviewConnectionStatus=netviewConnectionStatus, puStatus=puStatus, alcPuConfigAddress=alcPuConfigAddress, frameRelaySpeed=frameRelaySpeed, netviewStatusAcknowledged=netviewStatusAcknowledged, lineSDLCGroup=lineSDLCGroup, sdlcPortType=sdlcPortType, asyncCarrier=asyncCarrier, bisyncrjeReplyTimer=bisyncrjeReplyTimer, asyncPuInChars=asyncPuInChars, ipxSapRcvdFiltInterval=ipxSapRcvdFiltInterval, bisyncConfigType=bisyncConfigType, oemSNACXR3Q=oemSNACXR3Q, t7PortIPAddress=t7PortIPAddress, remotePuConfigLineIndex=remotePuConfigLineIndex, sdlcPuConnectType=sdlcPuConnectType, frameRelayCommittedBurst=frameRelayCommittedBurst, puIsDynamic=puIsDynamic, farEndNumberPlan=farEndNumberPlan, sdlcDTR=sdlcDTR, frameRelayStatsTable=frameRelayStatsTable, alcPuMaximumFastPoll=alcPuMaximumFastPoll, dialbackupunsuccatmpt=dialbackupunsuccatmpt, brFilterLLC2=brFilterLLC2, syncQN4R2c=syncQN4R2c, bisyncPortType=bisyncPortType, alcInitState=alcInitState, oemSNACMR4C=oemSNACMR4C, x25DataOutChrs=x25DataOutChrs, alcPuMinimumSlowPollInterval=alcPuMinimumSlowPollInterval, sdlcRTS=sdlcRTS, bisyncConfigEntry=bisyncConfigEntry, bisyncrjeInitState=bisyncrjeInitState, bisyncPuStatsAddress=bisyncPuStatsAddress, alcPuConnectionID=alcPuConnectionID, asyncStatsEntry=asyncStatsEntry, syncFN3R5du=syncFN3R5du, brEnableBridging=brEnableBridging, alcPollTx=alcPollTx, bisyncCTS=bisyncCTS, srNodeGroup=srNodeGroup, asyncPortType=asyncPortType, x25QOutChrs=x25QOutChrs, alcPuStatsLineIndex=alcPuStatsLineIndex, oem2490R22C=oem2490R22C, asyncEiaSignalForwarding=asyncEiaSignalForwarding, sdlcCRCErrors=sdlcCRCErrors, bisyncrjeOutEtb=bisyncrjeOutEtb, slipStopBits=slipStopBits, commIndex=commIndex, t7ProtocolEnabled=t7ProtocolEnabled, ipxEnableNetBIOS=ipxEnableNetBIOS, x25HighTwoWayChannel=x25HighTwoWayChannel, sessUpOnSVC=sessUpOnSVC, syncCN4R5bu=syncCN4R5bu, bisyncrjePortType=bisyncrjePortType, alcClocking=alcClocking, oemSNACMR2C=oemSNACMR2C, brFilterNetBIOS=brFilterNetBIOS, associatedPortNumber3=associatedPortNumber3, x25ConfigPortIndex=x25ConfigPortIndex, bisyncrjeConfigPortIndex=bisyncrjeConfigPortIndex, enableIpBridging=enableIpBridging, alcDSR=alcDSR, t7StatsGroup=t7StatsGroup, lanRSM=lanRSM, asyncPuOutChars=asyncPuOutChars, frExtCircuitStatusAcknowledged=frExtCircuitStatusAcknowledged, mappingPuConfigTable=mappingPuConfigTable, unitStatusGroup=unitStatusGroup, alcPuLineNumber=alcPuLineNumber, puConnectionAttemptCount=puConnectionAttemptCount, syncFN4R3b=syncFN4R3b, remotePuRemoteDTE=remotePuRemoteDTE, bscDeviceOutTransactions=bscDeviceOutTransactions, x25NetworkMask=x25NetworkMask, alcPortType=alcPortType, frExtCircuitMinBits=frExtCircuitMinBits, x25OutRestarts=x25OutRestarts, syncBC3R5=syncBC3R5, puAlcGroup=puAlcGroup, x25RTS=x25RTS, slipUsage=slipUsage, slipRcvCharsOverruns=slipRcvCharsOverruns, localNumberPlan=localNumberPlan, initializeStats=initializeStats, alcNumberOfCharacters=alcNumberOfCharacters, t7RcvBreakConditions=t7RcvBreakConditions, sdlcCarrier=sdlcCarrier, brDelayTimer=brDelayTimer, alcRxOverruns=alcRxOverruns, dialbackupDialSuspendTimer=dialbackupDialSuspendTimer, x25FRMROutFrames=x25FRMROutFrames, sdlcDSR=sdlcDSR, oemSNACMR3Q=oemSNACMR3Q, dumpFileName=dumpFileName, bisyncDCD=bisyncDCD, frameRelayConfigTable=frameRelayConfigTable, PhysAddress=PhysAddress, syncFN4R3c=syncFN4R3c, remotePuConfigEntry=remotePuConfigEntry, lanPuNAUName=lanPuNAUName, bisyncStatsEntry=bisyncStatsEntry, lanControlTable=lanControlTable, t7StatsIndex=t7StatsIndex, frameRelayRIPAge=frameRelayRIPAge, alcRcvCCCErrors=alcRcvCCCErrors, ipxConfigGroup=ipxConfigGroup, dialbackupinact=dialbackupinact, mappingPuNAU=mappingPuNAU, internalMacAddress4=internalMacAddress4, isdnloopbackbytesReceived=isdnloopbackbytesReceived, netviewConnectID=netviewConnectID, nodeNetViewPUGroup=nodeNetViewPUGroup, puRemoteGroup=puRemoteGroup, kbytesReceived=kbytesReceived, mappingPuLastClearCode=mappingPuLastClearCode, deviceControlIndex=deviceControlIndex, isdnLineIndex=isdnLineIndex, sessUpOnPrimaryMAC=sessUpOnPrimaryMAC, alternateNetviewPUXID=alternateNetviewPUXID, x25StatsTable=x25StatsTable, brForwardOther=brForwardOther, dsucsuType=dsucsuType, remotePuAlternateDLCI=remotePuAlternateDLCI, commCount=commCount, lanInitState=lanInitState, ipxGlobalNodeId=ipxGlobalNodeId, sdlcStatsEntry=sdlcStatsEntry, asyncConfigTable=asyncConfigTable, syncCN3R4du=syncCN3R4du, ipxRipRcvdFiltInterval=ipxRipRcvdFiltInterval, bisyncrjeConfigEntry=bisyncrjeConfigEntry, internalRingNumber2=internalRingNumber2, lanT1Timer=lanT1Timer, oem22183CR5=oem22183CR5, dialbackupDedicatedLMIPort=dialbackupDedicatedLMIPort, bisyncrjeReturnClock=bisyncrjeReturnClock)
mibBuilder.exportSymbols("SYNC-RESEARCH-MIB", frExtCircuitQOctets=frExtCircuitQOctets, enableIpRouting=enableIpRouting, frameRelayInitState=frameRelayInitState, isdnIndex=isdnIndex, DisplayString=DisplayString, nodeDeviceGroup=nodeDeviceGroup, lc2TR2port=lc2TR2port, x25Timeouts=x25Timeouts, x25PuConfigLineIndex=x25PuConfigLineIndex, t7IdleTimer=t7IdleTimer, puSDLCGroup=puSDLCGroup, maxPU=maxPU, asyncRcvParityErrors=asyncRcvParityErrors, mappingPuConfigLineIndex=mappingPuConfigLineIndex, ipConfigGroup=ipConfigGroup, threeCom=threeCom, brFilterIPX=brFilterIPX, lineStatusAcknowledged=lineStatusAcknowledged, bisyncrjePuInitialState=bisyncrjePuInitialState, dateTimeField=dateTimeField, asyncNAUName=asyncNAUName, remotePuAlternateMACAddress=remotePuAlternateMACAddress, lanPuSourceSAP=lanPuSourceSAP, oemSNACXR3W=oemSNACXR3W, t7StatsTable=t7StatsTable, syncQN4R4du=syncQN4R4du, puLastSVCCleared=puLastSVCCleared, isdnSpeed=isdnSpeed, bisyncSpeed=bisyncSpeed, sdlcPuInSNRMFrames=sdlcPuInSNRMFrames, alcdeviceConfigLineIndex=alcdeviceConfigLineIndex, linePhysicalType=linePhysicalType, x25UseCallingAddress=x25UseCallingAddress, bridgeConfigGroup=bridgeConfigGroup, ipxRoutedTxPriority=ipxRoutedTxPriority, syncFN3R4du=syncFN3R4du, bisyncConfigTable=bisyncConfigTable, internalMacAddress2=internalMacAddress2, sdlcPuConfigAddress=sdlcPuConfigAddress, bisyncrjeCTS=bisyncrjeCTS, alcdeviceConfigAddress=alcdeviceConfigAddress, t7RcvCharsDiscarded=t7RcvCharsDiscarded, deviceConfigTable=deviceConfigTable, bisyncrjeOutEnq=bisyncrjeOutEnq, syncFN4R4u=syncFN4R4u, bisyncInOctets=bisyncInOctets, sdlcPuOutTESTFrames=sdlcPuOutTESTFrames, alcSegRxDisc=alcSegRxDisc, oemSNACXR2Q=oemSNACXR2Q, bisyncrjeStatsEntry=bisyncrjeStatsEntry, frameRelayTxDe=frameRelayTxDe, dsucsudeviceStatsTable=dsucsudeviceStatsTable, alcNAUName=alcNAUName, sdlcInFrames=sdlcInFrames)
