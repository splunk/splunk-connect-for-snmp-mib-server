#
# PySNMP MIB module GDCDS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCDS1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ds1, = mibBuilder.importSymbols("RFC1406-MIB", "ds1")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Integer32, Counter32, NotificationType, IpAddress, ModuleIdentity, Gauge32, iso, ObjectIdentity, enterprises, Unsigned32, transmission, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Integer32", "Counter32", "NotificationType", "IpAddress", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "enterprises", "Unsigned32", "transmission", "Counter64", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
csu = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 2))
csuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 1), )
if mibBuilder.loadTexts: csuConfigTable.setStatus('mandatory')
csuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 1, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuConfigLineIndex"))
if mibBuilder.loadTexts: csuConfigEntry.setStatus('mandatory')
csuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuConfigLineIndex.setStatus('mandatory')
csuOnesDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inhibit", 1), ("csuMax15Zeros", 2), ("csuMax39Zeros", 3), ("csu8N1Restrict", 4), ("csuMin1in8", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuOnesDensity.setStatus('mandatory')
csuFrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuFrontPanel.setStatus('mandatory')
csuInbandLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuInbandLoop.setStatus('mandatory')
csuILBFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unframed", 1), ("framed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuILBFrame.setStatus('mandatory')
csuLineBuildOutCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuMan", 1), ("csuAuto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuLineBuildOutCtrl.setStatus('mandatory')
csuLineBuildOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("csu00dB", 2), ("csu75dB", 3), ("csu150dB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuLineBuildOutValue.setStatus('mandatory')
csuLineTypeCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("csuMan", 2), ("csuAuto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuLineTypeCtrl.setStatus('mandatory')
csuAISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuAISLoopdown.setStatus('mandatory')
csuPreEqualizer = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("csuNoEqual", 1), ("csu130ft", 2), ("csu260ft", 3), ("csu390ft", 4), ("csu530ft", 5), ("csu655ft", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuPreEqualizer.setStatus('mandatory')
csuInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuAlarmHistory", 1), ("csu24HourCounter", 2), ("csuFactoryDefaults", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: csuInitialize.setStatus('mandatory')
csuTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuTime.setStatus('mandatory')
csuDate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuDate.setStatus('mandatory')
csuTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuLLB", 1), ("csuTLB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuTestType.setStatus('mandatory')
csuReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuReceiveLevel.setStatus('mandatory')
csuChanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 2), )
if mibBuilder.loadTexts: csuChanConfigTable.setStatus('mandatory')
csuChanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 2, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuChanConfigLineIndex"), (0, "GDCDS1-MIB", "csuChanConfigNum"))
if mibBuilder.loadTexts: csuChanConfigEntry.setStatus('mandatory')
csuChanConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanConfigLineIndex.setStatus('mandatory')
csuChanConfigNum = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanConfigNum.setStatus('mandatory')
csuStartDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuStartDS0.setStatus('mandatory')
csuRTSCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("csuCTSDelayed", 2), ("csuCTSForcedOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuRTSCTS.setStatus('mandatory')
csuControlModeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuControlModeIdle.setStatus('mandatory')
csuRDLInbandCode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("csuPN127", 2), ("csuFixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuRDLInbandCode.setStatus('mandatory')
csuChanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuChanRate.setStatus('mandatory')
csuAlternateDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuAlternateDS0.setStatus('mandatory')
csuRespondRDL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuRespondRDL.setStatus('mandatory')
csuInbandDLTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("csuEnable10Min", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuInbandDLTimeout.setStatus('mandatory')
csuChanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanStatus.setStatus('mandatory')
csuChan6456 = MibScalar((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode56", 1), ("mode64", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuChan6456.setStatus('mandatory')
csuIndicatorTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 3), )
if mibBuilder.loadTexts: csuIndicatorTable.setStatus('mandatory')
csuIndicatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 3, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuIndicatorIndex"))
if mibBuilder.loadTexts: csuIndicatorEntry.setStatus('mandatory')
csuIndicatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorIndex.setStatus('mandatory')
csuIndicatorOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-synchronized", 1), ("synchronized", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorOOF.setStatus('mandatory')
csuIndicatorNNS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-signal", 1), ("signal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorNNS.setStatus('mandatory')
csuIndicatorYEL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorYEL.setStatus('mandatory')
csuIndicatorAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorAIS.setStatus('mandatory')
csuIndicatorNLB = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-loopback", 1), ("loopback", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorNLB.setStatus('mandatory')
csuIndicatorBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorBPV.setStatus('mandatory')
csuIndicatorCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorCRC.setStatus('mandatory')
csuIndicatorTSY = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-synchronized", 1), ("synchronized", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorTSY.setStatus('mandatory')
csuIndicatorTNS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorTNS.setStatus('mandatory')
csuIndicatorOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorOS.setStatus('mandatory')
csuIndicatorLAD = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorLAD.setStatus('mandatory')
csuIndicatorCascadeOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-synchronized", 1), ("synchronized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorCascadeOOF.setStatus('mandatory')
csuIndicatorCascadeNS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorCascadeNS.setStatus('mandatory')
csuIndicatorNetworkLT = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-active", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorNetworkLT.setStatus('mandatory')
csuIndicatorNetworkST = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-active", 1), ("active-DS0", 2), ("active-DS1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorNetworkST.setStatus('mandatory')
csuIndicatorNetworkRT = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-active", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorNetworkRT.setStatus('mandatory')
csuIndicatorChannelRDL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-active", 1), ("active-chA", 2), ("active-chB", 3), ("active-chAB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorChannelRDL.setStatus('mandatory')
csuIndicatorChannelST = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-active", 1), ("active-chA", 2), ("active-chB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorChannelST.setStatus('mandatory')
csuIndicatorChannelDL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-active", 1), ("active-chA", 2), ("active-chB", 3), ("active-chAB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorChannelDL.setStatus('mandatory')
csuIndicatorChannelLL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-active", 1), ("active-chA", 2), ("active-chB", 3), ("active-chAB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorChannelLL.setStatus('mandatory')
csuIndicatorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hard", 2), ("soft", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorMode.setStatus('mandatory')
csuIndicatorDS0LB = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-loopback", 1), ("loopback", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorDS0LB.setStatus('mandatory')
csuSelftestDiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 4), )
if mibBuilder.loadTexts: csuSelftestDiagTable.setStatus('mandatory')
csuSelftestDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 4, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuSelftestDiagLineIndex"))
if mibBuilder.loadTexts: csuSelftestDiagEntry.setStatus('mandatory')
csuSelftestDiagLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSelftestDiagLineIndex.setStatus('mandatory')
csuDiagSelftest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuDiagSelftest.setStatus('obsolete')
csuGDCSelftestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("csu2047", 2), ("csuPROG", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuGDCSelftestPattern.setStatus('mandatory')
csuSelftestUserPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuSelftestUserPattern.setStatus('mandatory')
csuSelftestFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unframed", 1), ("framed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuSelftestFrame.setStatus('mandatory')
csuSelftestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSelftestResults.setStatus('mandatory')
csuSelftestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSelftestTime.setStatus('mandatory')
csuLoopbackDiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 5), )
if mibBuilder.loadTexts: csuLoopbackDiagTable.setStatus('mandatory')
csuLoopbackDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 5, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuLoopbackDiagLineIndex"))
if mibBuilder.loadTexts: csuLoopbackDiagEntry.setStatus('mandatory')
csuLoopbackDiagLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLoopbackDiagLineIndex.setStatus('mandatory')
csuGDCLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("csuLocalTest", 2), ("csuNILoop", 3), ("csuCascadeDigitalLoop", 4), ("csuRemoteLoop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuGDCLoopback.setStatus('mandatory')
csuDS0DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 6), )
if mibBuilder.loadTexts: csuDS0DiagTable.setStatus('mandatory')
csuDS0DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 6, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuDS0LineIndex"))
if mibBuilder.loadTexts: csuDS0DiagEntry.setStatus('mandatory')
csuDS0LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuDS0LineIndex.setStatus('mandatory')
csuDS0Num = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuDS0Num.setStatus('mandatory')
csuTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("csu511", 2), ("csuQRS", 3), ("csu2047", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuTestPattern.setStatus('mandatory')
csuResetResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: csuResetResults.setStatus('mandatory')
csuBERtest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds0BERoff", 1), ("ds0BERon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuBERtest.setStatus('mandatory')
csuCumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCumErrs.setStatus('mandatory')
csuDataBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuDataBlocks.setStatus('mandatory')
csuCircuitDelayCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: csuCircuitDelayCtrl.setStatus('mandatory')
csuCircuitDelayResult = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCircuitDelayResult.setStatus('mandatory')
csuLBtest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds0LBoff", 1), ("ds0LBon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuLBtest.setStatus('mandatory')
csuChanDiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 7), )
if mibBuilder.loadTexts: csuChanDiagTable.setStatus('mandatory')
csuChanDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 7, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuChanLineIndex"), (0, "GDCDS1-MIB", "csuChanNum"))
if mibBuilder.loadTexts: csuChanDiagEntry.setStatus('mandatory')
csuChanLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanLineIndex.setStatus('mandatory')
csuChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanNum.setStatus('mandatory')
csuChanSelftest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuChanSelftest.setStatus('mandatory')
csuChanLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("csuNoLoop", 1), ("csuRDL", 2), ("csuDL", 3), ("csuLL", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuChanLoopback.setStatus('mandatory')
csuChanSelftestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanSelftestStatus.setStatus('mandatory')
csuAlarmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 8), )
if mibBuilder.loadTexts: csuAlarmHistoryTable.setStatus('mandatory')
csuAlarmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 8, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuAlarmHistoryIndex"), (0, "GDCDS1-MIB", "csuAlarmType"))
if mibBuilder.loadTexts: csuAlarmHistoryEntry.setStatus('mandatory')
csuAlarmHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAlarmHistoryIndex.setStatus('mandatory')
csuAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("csuNetworkLossOfSignal", 1), ("csuNetworkOutOfFrame", 2), ("csuAlarmIndication", 3), ("csuFailedSignalState", 4), ("csuReceivedYellow", 5), ("csuExcessiveZeros", 6), ("csuLowAverageDensity", 7), ("csuBipolarViolations", 8), ("csuCRCErrors", 9), ("csuControlledSlips", 10), ("csuUnavailableSignalState", 11), ("csuCascadeLossOfSignal", 12), ("csuCascadeOutOfFrame", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAlarmType.setStatus('mandatory')
csuAlarmHistoryStart = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAlarmHistoryStart.setStatus('mandatory')
csuCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCount.setStatus('mandatory')
csuFirstOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFirstOccur.setStatus('mandatory')
csuLastOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLastOccur.setStatus('mandatory')
csuSchedPerfRprtTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 9), )
if mibBuilder.loadTexts: csuSchedPerfRprtTable.setStatus('mandatory')
csuSchedPerfRprtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 9, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuSchedPerfRprtIndex"), (0, "GDCDS1-MIB", "csuPerfRprtIntervalNumber"))
if mibBuilder.loadTexts: csuSchedPerfRprtEntry.setStatus('mandatory')
csuSchedPerfRprtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSchedPerfRprtIndex.setStatus('mandatory')
csuPerfRprtIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuPerfRprtIntervalNumber.setStatus('mandatory')
csuPerfRprtMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuPerfRprtMsg.setStatus('mandatory')
csuCRCErrEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuOneError", 2), ("csuLessFive", 3), ("csuLessTen", 4), ("csuLess100", 5), ("csuLess320", 6), ("csuGreater320", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCRCErrEvent.setStatus('mandatory')
csuSEEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuOneOrMore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSEEvent.setStatus('mandatory')
csuFEEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuOneOrMore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFEEvent.setStatus('mandatory')
csuCVEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuOneOrMore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCVEvent.setStatus('mandatory')
csuCSEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuOneOrMore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCSEvent.setStatus('mandatory')
csuAPLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuInPayload", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAPLoop.setStatus('mandatory')
csuCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 10), )
if mibBuilder.loadTexts: csuCurrentStatsTable.setStatus('mandatory')
csuCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 10, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuCurrentIndex"))
if mibBuilder.loadTexts: csuCurrentStatsEntry.setStatus('mandatory')
csuCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCurrentIndex.setStatus('mandatory')
csuCurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCurrentLOFC.setStatus('mandatory')
csuIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 11), )
if mibBuilder.loadTexts: csuIntervalStatsTable.setStatus('mandatory')
csuIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 11, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuIntervalIndex"), (0, "GDCDS1-MIB", "csuIntervalNumber"))
if mibBuilder.loadTexts: csuIntervalStatsEntry.setStatus('mandatory')
csuIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIntervalIndex.setStatus('mandatory')
csuIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIntervalNumber.setStatus('mandatory')
csuIntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIntervalLOFC.setStatus('mandatory')
csuTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 12), )
if mibBuilder.loadTexts: csuTotalStatsTable.setStatus('mandatory')
csuTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 12, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuTotalIndex"))
if mibBuilder.loadTexts: csuTotalStatsEntry.setStatus('mandatory')
csuTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuTotalIndex.setStatus('mandatory')
csuTotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuTotalLOFC.setStatus('mandatory')
csuFarEndCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 13), )
if mibBuilder.loadTexts: csuFarEndCurrentStatsTable.setStatus('mandatory')
csuFarEndCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 13, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuFarEndCurrentIndex"))
if mibBuilder.loadTexts: csuFarEndCurrentStatsEntry.setStatus('mandatory')
csuFarEndCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndCurrentIndex.setStatus('mandatory')
csuFarEndCurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 13, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndCurrentLOFC.setStatus('mandatory')
csuFarEndIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 14), )
if mibBuilder.loadTexts: csuFarEndIntervalStatsTable.setStatus('mandatory')
csuFarEndIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 14, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuFarEndIntervalIndex"), (0, "GDCDS1-MIB", "csuFarEndIntervalNumber"))
if mibBuilder.loadTexts: csuFarEndIntervalStatsEntry.setStatus('mandatory')
csuFarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndIntervalIndex.setStatus('mandatory')
csuFarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndIntervalNumber.setStatus('mandatory')
csuFarEndIntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndIntervalLOFC.setStatus('mandatory')
csuFarEndTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 15), )
if mibBuilder.loadTexts: csuFarEndTotalStatsTable.setStatus('mandatory')
csuFarEndTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 15, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuFarEndTotalIndex"))
if mibBuilder.loadTexts: csuFarEndTotalStatsEntry.setStatus('mandatory')
csuFarEndTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndTotalIndex.setStatus('mandatory')
csuFarEndTotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 15, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndTotalLOFC.setStatus('mandatory')
mibBuilder.exportSymbols("GDCDS1-MIB", csuIndicatorCRC=csuIndicatorCRC, csuFEEvent=csuFEEvent, csuLineTypeCtrl=csuLineTypeCtrl, csuInbandLoop=csuInbandLoop, csuCSEvent=csuCSEvent, csuIndicatorMode=csuIndicatorMode, csuCurrentStatsEntry=csuCurrentStatsEntry, csuCurrentLOFC=csuCurrentLOFC, csuConfigEntry=csuConfigEntry, csuSelftestFrame=csuSelftestFrame, csuFarEndTotalStatsEntry=csuFarEndTotalStatsEntry, csuAlternateDS0=csuAlternateDS0, csuChan6456=csuChan6456, csuAlarmHistoryIndex=csuAlarmHistoryIndex, csuCumErrs=csuCumErrs, csuOnesDensity=csuOnesDensity, csuChanConfigNum=csuChanConfigNum, csuChanSelftestStatus=csuChanSelftestStatus, csuFarEndTotalStatsTable=csuFarEndTotalStatsTable, csuIndicatorChannelST=csuIndicatorChannelST, csuSelftestTime=csuSelftestTime, csuChanDiagEntry=csuChanDiagEntry, csuChanStatus=csuChanStatus, csuIndicatorNetworkST=csuIndicatorNetworkST, csuIntervalStatsEntry=csuIntervalStatsEntry, csuFarEndIntervalIndex=csuFarEndIntervalIndex, csuIndicatorNetworkLT=csuIndicatorNetworkLT, csuDS0DiagEntry=csuDS0DiagEntry, csuDS0DiagTable=csuDS0DiagTable, csuConfigLineIndex=csuConfigLineIndex, csuDS0LineIndex=csuDS0LineIndex, csuSelftestDiagEntry=csuSelftestDiagEntry, csuILBFrame=csuILBFrame, csuPreEqualizer=csuPreEqualizer, csuTestType=csuTestType, csuIndicatorAIS=csuIndicatorAIS, csuIndicatorChannelRDL=csuIndicatorChannelRDL, csuFarEndTotalLOFC=csuFarEndTotalLOFC, csuTestPattern=csuTestPattern, csuDiagSelftest=csuDiagSelftest, csuIndicatorOS=csuIndicatorOS, csuAlarmHistoryStart=csuAlarmHistoryStart, csuTotalStatsEntry=csuTotalStatsEntry, csuAlarmType=csuAlarmType, csuRDLInbandCode=csuRDLInbandCode, csuCircuitDelayCtrl=csuCircuitDelayCtrl, csuChanConfigTable=csuChanConfigTable, csuFarEndCurrentIndex=csuFarEndCurrentIndex, csuCount=csuCount, csu=csu, csuFarEndIntervalStatsTable=csuFarEndIntervalStatsTable, csuStartDS0=csuStartDS0, csuFarEndIntervalStatsEntry=csuFarEndIntervalStatsEntry, csuIndicatorChannelDL=csuIndicatorChannelDL, csuLoopbackDiagEntry=csuLoopbackDiagEntry, csuSelftestResults=csuSelftestResults, csuChanDiagTable=csuChanDiagTable, csuConfigTable=csuConfigTable, csuFarEndCurrentStatsTable=csuFarEndCurrentStatsTable, csuCurrentStatsTable=csuCurrentStatsTable, csuIntervalStatsTable=csuIntervalStatsTable, csuIndicatorCascadeNS=csuIndicatorCascadeNS, csuIndicatorDS0LB=csuIndicatorDS0LB, csuFarEndTotalIndex=csuFarEndTotalIndex, csuIndicatorNNS=csuIndicatorNNS, csuLBtest=csuLBtest, csuCircuitDelayResult=csuCircuitDelayResult, csuCVEvent=csuCVEvent, csuFirstOccur=csuFirstOccur, csuIntervalIndex=csuIntervalIndex, csuSchedPerfRprtEntry=csuSchedPerfRprtEntry, csuIndicatorChannelLL=csuIndicatorChannelLL, csuChanSelftest=csuChanSelftest, csuFarEndIntervalLOFC=csuFarEndIntervalLOFC, csuFarEndIntervalNumber=csuFarEndIntervalNumber, csuIndicatorLAD=csuIndicatorLAD, csuTotalStatsTable=csuTotalStatsTable, csuDS0Num=csuDS0Num, csuIndicatorIndex=csuIndicatorIndex, csuCRCErrEvent=csuCRCErrEvent, csuRespondRDL=csuRespondRDL, csuSelftestUserPattern=csuSelftestUserPattern, csuAISLoopdown=csuAISLoopdown, csuBERtest=csuBERtest, csuCurrentIndex=csuCurrentIndex, csuIndicatorYEL=csuIndicatorYEL, csuAlarmHistoryEntry=csuAlarmHistoryEntry, csuFarEndCurrentStatsEntry=csuFarEndCurrentStatsEntry, csuLastOccur=csuLastOccur, csuChanLineIndex=csuChanLineIndex, csuAlarmHistoryTable=csuAlarmHistoryTable, csuIntervalNumber=csuIntervalNumber, csuIndicatorTSY=csuIndicatorTSY, csuSEEvent=csuSEEvent, gdc=gdc, csuChanNum=csuChanNum, csuLoopbackDiagLineIndex=csuLoopbackDiagLineIndex, csuGDCLoopback=csuGDCLoopback, csuChanConfigLineIndex=csuChanConfigLineIndex, csuIndicatorBPV=csuIndicatorBPV, csuSchedPerfRprtTable=csuSchedPerfRprtTable, csuChanConfigEntry=csuChanConfigEntry, csuDate=csuDate, csuRTSCTS=csuRTSCTS, csuChanLoopback=csuChanLoopback, csuReceiveLevel=csuReceiveLevel, csuChanRate=csuChanRate, csuPerfRprtMsg=csuPerfRprtMsg, csuIndicatorTable=csuIndicatorTable, csuAPLoop=csuAPLoop, csuGDCSelftestPattern=csuGDCSelftestPattern, csuResetResults=csuResetResults, csuIndicatorCascadeOOF=csuIndicatorCascadeOOF, csuIndicatorEntry=csuIndicatorEntry, csuTime=csuTime, csuPerfRprtIntervalNumber=csuPerfRprtIntervalNumber, csuIndicatorOOF=csuIndicatorOOF, csuInbandDLTimeout=csuInbandDLTimeout, csuDataBlocks=csuDataBlocks, csuIndicatorTNS=csuIndicatorTNS, csuIntervalLOFC=csuIntervalLOFC, csuInitialize=csuInitialize, csuIndicatorNetworkRT=csuIndicatorNetworkRT, csuTotalIndex=csuTotalIndex, csuFarEndCurrentLOFC=csuFarEndCurrentLOFC, csuSchedPerfRprtIndex=csuSchedPerfRprtIndex, csuIndicatorNLB=csuIndicatorNLB, csuFrontPanel=csuFrontPanel, csuTotalLOFC=csuTotalLOFC, csuSelftestDiagLineIndex=csuSelftestDiagLineIndex, csuLineBuildOutValue=csuLineBuildOutValue, csuSelftestDiagTable=csuSelftestDiagTable, csuLineBuildOutCtrl=csuLineBuildOutCtrl, csuControlModeIdle=csuControlModeIdle, csuLoopbackDiagTable=csuLoopbackDiagTable)
