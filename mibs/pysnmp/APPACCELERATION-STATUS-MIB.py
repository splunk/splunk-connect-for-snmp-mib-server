#
# PySNMP MIB module APPACCELERATION-STATUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPACCELERATION-STATUS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
appAccelerationMgmt, appAccelerationNotifications = mibBuilder.importSymbols("APPACCELERATION-SMI", "appAccelerationMgmt", "appAccelerationNotifications")
AppAccelerationAlarmSeverity, AppAccelerationSeqNum, AppAccelerationYesNo, AppAccelerationDescription = mibBuilder.importSymbols("APPACCELERATION-TC", "AppAccelerationAlarmSeverity", "AppAccelerationSeqNum", "AppAccelerationYesNo", "AppAccelerationDescription")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter32, Gauge32, MibIdentifier, TimeTicks, Unsigned32, ModuleIdentity, Counter64, iso, Bits, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Gauge32", "MibIdentifier", "TimeTicks", "Unsigned32", "ModuleIdentity", "Counter64", "iso", "Bits", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
appAccelerationStatusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1))
if mibBuilder.loadTexts: appAccelerationStatusMIB.setLastUpdated('201310110000Z')
if mibBuilder.loadTexts: appAccelerationStatusMIB.setOrganization('www.citrix.com')
wsStatusMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1))
wsStatusMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1))
wsStatusMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2))
wsStatusMIBScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1))
wsOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 100, 101, 102, 103))).clone(namedValues=NamedValues(("active", 1), ("busy", 100), ("down", 101), ("licenseExpired", 102), ("bypassTraffic", 103)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsOperStatus.setStatus('current')
wsLoad1Min = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLoad1Min.setStatus('deprecated')
wsLoad5Min = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLoad5Min.setStatus('deprecated')
wsLoad15Min = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLoad15Min.setStatus('deprecated')
wsBypass = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBypass.setStatus('current')
wsLastAlarmSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 6), AppAccelerationSeqNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLastAlarmSeqNum.setStatus('current')
wsBoostStatus = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardboost", 1), ("softboost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBoostStatus.setStatus('deprecated')
wsBandwidthMode = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("partial", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBandwidthMode.setStatus('current')
wsBandwidthLimit = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 9), Integer32()).setUnits('K-Bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBandwidthLimit.setStatus('current')
wsWanOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsWanOutOctets.setStatus('current')
wsWanInOctets = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 11), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsWanInOctets.setStatus('current')
wsLanOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 12), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLanOutOctets.setStatus('current')
wsLanInOctets = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 13), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLanInOctets.setStatus('current')
wsCompressionEffectiveBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 14), Integer32()).setUnits('K-Bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCompressionEffectiveBandwidth.setStatus('current')
wsSendCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSendCompressionRatio.setStatus('current')
wsReceiveCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsReceiveCompressionRatio.setStatus('current')
wsCompressionStatsCollectionTime = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCompressionStatsCollectionTime.setStatus('current')
wsAcceleratedConnections = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAcceleratedConnections.setStatus('current')
wsNonAcceleratedConnections = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNonAcceleratedConnections.setStatus('current')
wsHaState = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standalone", 0), ("primary", 1), ("secondary", 2), ("restarting", 3), ("starting", 4), ("invalid", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsHaState.setStatus('current')
wsHaVmIp = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsHaVmIp.setStatus('current')
wsHaSecondaryIp = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsHaSecondaryIp.setStatus('current')
wsPrimaryIp = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPrimaryIp.setStatus('current')
wsCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 24), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCpuUsage.setStatus('current')
wsConnectedPlugIns = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsConnectedPlugIns.setStatus('current')
wsMaxPlugIns = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaxPlugIns.setStatus('current')
wsQosStatsCollectionTime = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosStatsCollectionTime.setStatus('current')
wsUpTime = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsUpTime.setStatus('current')
wsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSerialNumber.setStatus('current')
wsNonAcceleratedVolume = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 30), Counter64()).setUnits('1000-Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNonAcceleratedVolume.setStatus('current')
wsActiveConnections = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveConnections.setStatus('current')
wsAccelerationStatus = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAccelerationStatus.setStatus('current')
wsTrafficShapingStatus = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTrafficShapingStatus.setStatus('current')
wsSystemLoad = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 34), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSystemLoad.setStatus('current')
wsWanSendRate = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 35), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsWanSendRate.setStatus('current')
wsWanReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 36), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsWanReceiveRate.setStatus('current')
wsLanSendRate = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 37), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLanSendRate.setStatus('current')
wsLanReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 38), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLanReceiveRate.setStatus('current')
wsNonAcceleratedRate = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 39), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNonAcceleratedRate.setStatus('current')
wsModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsModelNumber.setStatus('current')
wsWccpStatus = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsWccpStatus.setStatus('current')
wsStatusMIBTables = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2))
wsActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1), )
if mibBuilder.loadTexts: wsActiveAlarmTable.setStatus('current')
activeAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "wsActiveAlarmIndex"))
if mibBuilder.loadTexts: activeAlarmEntry.setStatus('current')
wsActiveAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmIndex.setStatus('current')
wsActiveAlarmSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 2), AppAccelerationSeqNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmSeqNum.setStatus('current')
wsActiveAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmID.setStatus('current')
wsActiveAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 4), AppAccelerationAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmSeverity.setStatus('current')
wsActiveAlarmLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmLogTime.setStatus('current')
wsActiveAlarmDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 6), AppAccelerationDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmDesc.setStatus('current')
wsActiveAlarmAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 7), AppAccelerationYesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsActiveAlarmAcked.setStatus('current')
wsActiveAlarmServiceAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 8), AppAccelerationYesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmServiceAffect.setStatus('current')
wsServiceClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2), )
if mibBuilder.loadTexts: wsServiceClassStatsTable.setStatus('current')
wsServiceClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "wsServiceClassIndex"))
if mibBuilder.loadTexts: wsServiceClassStatsEntry.setStatus('current')
wsServiceClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsServiceClassIndex.setStatus('current')
wsServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsServiceClassName.setStatus('current')
wsScsCurrentAcceleratedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsCurrentAcceleratedConnections.setStatus('current')
wsScsTotalAcceleratedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsTotalAcceleratedConnections.setStatus('current')
wsScsTotalAcceleratedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 5), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsTotalAcceleratedOctets.setStatus('current')
wsScsTotalNonAcceleratedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsTotalNonAcceleratedConnections.setStatus('current')
wsScsTotalNonAcceleratedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 7), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsTotalNonAcceleratedOctets.setStatus('current')
wsScsTotalPreCompressionOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsTotalPreCompressionOctets.setStatus('current')
wsScsCompressSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsCompressSentOctets.setStatus('current')
wsScsCompressReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsCompressReceivedOctets.setStatus('current')
wsScsPreCompressSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 11), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsPreCompressSentOctets.setStatus('current')
wsScsPreCompressReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 12), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsPreCompressReceivedOctets.setStatus('current')
wsScsSendBWSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 13), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsSendBWSavings.setStatus('current')
wsScsRecvBWSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 14), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsRecvBWSavings.setStatus('current')
wsScsSendRecvBWSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 15), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsSendRecvBWSavings.setStatus('current')
wsScsSendCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsSendCompressionRatio.setStatus('current')
wsScsRecvCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsRecvCompressionRatio.setStatus('current')
wsScsSendRecvCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsSendRecvCompressionRatio.setStatus('current')
wsQosTrafficClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3), )
if mibBuilder.loadTexts: wsQosTrafficClassStatsTable.setStatus('deprecated')
wsQosTcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "wsQosIndex"))
if mibBuilder.loadTexts: wsQosTcStatsEntry.setStatus('deprecated')
wsQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosIndex.setStatus('deprecated')
wsQosName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosName.setStatus('deprecated')
wsQosConfiguredSendRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1, 3), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosConfiguredSendRatio.setStatus('deprecated')
wsQosSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1, 4), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosSentVolume.setStatus('deprecated')
wsQosActualSendRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1, 5), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosActualSendRatio.setStatus('deprecated')
wsIcaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4), )
if mibBuilder.loadTexts: wsIcaStatsTable.setStatus('current')
wsIcaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "wsIcaIndex"))
if mibBuilder.loadTexts: wsIcaStatsEntry.setStatus('current')
wsIcaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaIndex.setStatus('current')
wsIcaServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaServiceName.setStatus('current')
wsIcaPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 9999))).clone(namedValues=NamedValues(("high", 0), ("medium", 1), ("low", 2), ("background", 3), ("notApplicable", 9999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaPriority.setStatus('deprecated')
wsIcaSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 4), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaSentVolume.setStatus('current')
wsIcaSentRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 5), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaSentRatio.setStatus('current')
wsIcaReceivedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 6), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaReceivedVolume.setStatus('current')
wsIcaReceivedRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 7), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaReceivedRatio.setStatus('current')
wsIcaSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 8), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaSendRate.setStatus('current')
wsIcaReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 9), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaReceiveRate.setStatus('current')
wsAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5), )
if mibBuilder.loadTexts: wsAdapterTable.setStatus('current')
wsAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "wsAdapterIndex"))
if mibBuilder.loadTexts: wsAdapterEntry.setStatus('current')
wsAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterIndex.setStatus('current')
wsAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterName.setStatus('current')
wsAdapterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterEnabled.setStatus('current')
wsAdapterIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterIp.setStatus('current')
wsAdapterNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterNetmask.setStatus('current')
wsAdapterGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterGateway.setStatus('current')
wsAdapterVirtualIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterVirtualIp.setStatus('current')
wsAdapterVLanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterVLanEnabled.setStatus('current')
wsAdapterVLanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterVLanGroup.setStatus('current')
wsLinkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6), )
if mibBuilder.loadTexts: wsLinkStatsTable.setStatus('current')
linkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkStatsEntry.setStatus('current')
linkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIndex.setStatus('current')
linkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('current')
linkSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 3), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSentVolume.setStatus('current')
linkReceivedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 4), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReceivedVolume.setStatus('current')
linkSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSentPackets.setStatus('current')
linkReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReceivedPackets.setStatus('current')
linkDroppedSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 7), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDroppedSentVolume.setStatus('current')
linkDroppedReceivedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 8), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDroppedReceivedVolume.setStatus('current')
linkDroppedSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDroppedSentPackets.setStatus('current')
linkDroppedReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDroppedReceivedPackets.setStatus('current')
wsAppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7), )
if mibBuilder.loadTexts: wsAppStatsTable.setStatus('current')
appStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "appIndex"))
if mibBuilder.loadTexts: appStatsEntry.setStatus('current')
appIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appIndex.setStatus('current')
appName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appName.setStatus('current')
appId = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appId.setStatus('current')
appParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appParentId.setStatus('current')
appGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appGroupId.setStatus('current')
appSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 6), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appSentVolume.setStatus('current')
appReceivedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 7), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appReceivedVolume.setStatus('current')
appSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appSentPackets.setStatus('current')
appReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appReceivedPackets.setStatus('current')
appDroppedSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 10), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appDroppedSentVolume.setStatus('current')
appDroppedReceiveVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 11), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appDroppedReceiveVolume.setStatus('current')
appDroppedSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appDroppedSentPackets.setStatus('current')
appDroppedReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 13), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appDroppedReceivedPackets.setStatus('current')
appSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 14), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: appSendRate.setStatus('current')
appReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 15), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: appReceiveRate.setStatus('current')
wsQosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8), )
if mibBuilder.loadTexts: wsQosStatsTable.setStatus('current')
qosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "qosIndex"))
if mibBuilder.loadTexts: qosStatsEntry.setStatus('current')
qosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIndex.setStatus('current')
qosPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyName.setStatus('current')
qosLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLink.setStatus('current')
qosSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 4), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosSentVolume.setStatus('current')
qosReceiveVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 5), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReceiveVolume.setStatus('current')
qosSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosSentPackets.setStatus('current')
qosReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReceivedPackets.setStatus('current')
qosDroppedSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 8), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDroppedSentVolume.setStatus('current')
qosDroppedReceiveVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 9), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDroppedReceiveVolume.setStatus('current')
qosDroppedSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDroppedSentPackets.setStatus('current')
qosDroppedReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDroppedReceivedPackets.setStatus('current')
wsLscStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9), )
if mibBuilder.loadTexts: wsLscStatsTable.setStatus('current')
lscStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "lscIndex"))
if mibBuilder.loadTexts: lscStatsEntry.setStatus('current')
lscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lscIndex.setStatus('current')
lscServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lscServiceClassName.setStatus('current')
lscLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lscLink.setStatus('current')
lscSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 4), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscSentVolume.setStatus('current')
lscReceivedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 5), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscReceivedVolume.setStatus('current')
lscSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscSentPackets.setStatus('current')
lscReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscReceivedPackets.setStatus('current')
lscDroppedSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 8), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscDroppedSentVolume.setStatus('current')
lscDroppedReceiveVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 9), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscDroppedReceiveVolume.setStatus('current')
lscDroppedSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscDroppedSentPackets.setStatus('current')
lscDroppedReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscDroppedReceivedPackets.setStatus('current')
wsPartnerTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10), )
if mibBuilder.loadTexts: wsPartnerTable.setStatus('current')
partnerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "partnerAddrType"), (0, "APPACCELERATION-STATUS-MIB", "partnerAddr"))
if mibBuilder.loadTexts: partnerEntry.setStatus('current')
partnerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerAddrType.setStatus('current')
partnerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerAddr.setStatus('current')
partnerConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerConnections.setStatus('current')
partnerSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 4), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerSendRate.setStatus('current')
partnerReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 5), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerReceiveRate.setStatus('current')
partnerIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerIdleTime.setStatus('current')
wsHAMasterIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wsHAMasterIpAddr.setStatus('current')
wsSourceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wsSourceIpAddr.setStatus('current')
wsStatusMIBAlertTables = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 4))
wsAlertAction = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("oneShot", 0), ("set", 1), ("reset", 2), ("expired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAlertAction.setStatus('current')
wsAlertClass = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75))).clone(namedValues=NamedValues(("slowLossRate", 0), ("fastLossRate", 1), ("connectionStalled", 2), ("connectionTimeout", 3), ("connectionInvalid", 4), ("nicHalfDuplex", 5), ("arpTimeout", 6), ("badLicense", 7), ("limitExceeded", 8), ("asymmetric", 9), ("badPackets", 10), ("lowOnCpu", 11), ("lowOnMemory", 12), ("internal", 13), ("restartRequired", 14), ("vridNotSet", 15), ("haConfigurationChanged", 16), ("haNoSecondary", 17), ("haPairCommError", 18), ("haNotCapable", 19), ("haPeerVersion", 20), ("compressionError", 21), ("bwTypeMismatch", 22), ("cpuPegged", 23), ("lowOnVm", 24), ("numSlowRtosExceeded", 25), ("numFastRtosExceeded", 26), ("numBootoutsExceeded", 27), ("numRewindsExceeded", 28), ("diskDriveFailing", 29), ("diskDriveDegraded", 30), ("diskDriveFailed", 31), ("groupModeError", 32), ("nicBypassEvent", 33), ("haMisMatchVmip", 34), ("diskFragmented", 35), ("redirectorModeSyn", 36), ("unreachable", 37), ("dnsLookup", 38), ("redirectorModeFailure", 39), ("applianceInTheMiddle", 40), ("internalCritical", 41), ("internalMajor", 42), ("internalMinor", 43), ("internalWarning", 44), ("wccpMajor", 45), ("wccpMinor", 46), ("wccpWarning", 47), ("driverHung", 48), ("signalingChannelError", 49), ("scpsError", 50), ("plugInNearLimit", 51), ("sslError", 52), ("haDispositionError", 53), ("haVIPNotSet", 54), ("vlanNotSupported", 55), ("tooManyBadTcpChecksum", 56), ("invalidGateway", 57), ("haPeerKeyStoreLocked", 58), ("sslProxyMajor", 59), ("sslProxyMinor", 60), ("sslProxyWarning", 61), ("sslTunnelMajor", 62), ("sslTunnelMinor", 63), ("sslTunnelWarning", 64), ("excessiveIpFragments", 65), ("userAccountLocked", 66), ("smb2AccelerationFailure", 67), ("invalidBridgeConfig", 68), ("invalidHttpCachingConfigFile", 69), ("qosEngineError", 70), ("mapiNtlmError", 71), ("ethernetCrcError", 72), ("qosLinkConfigError", 73), ("maxUnacceleratedConnectionsExceeded", 74), ("badHardware", 75)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAlertClass.setStatus('current')
wsAlertMsg = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 4, 3), AppAccelerationDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAlertMsg.setStatus('current')
wsNotifyStart = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 1)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyStart.setStatus('current')
wsNotifyShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 2)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyShutdown.setStatus('current')
wsNotifyRestart = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 3)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"))
if mibBuilder.loadTexts: wsNotifyRestart.setStatus('deprecated')
wsHANotifyNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 4)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsHAMasterIpAddr"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsHANotifyNewMaster.setStatus('current')
wsNotifyAvailBWChange = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 5)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"))
if mibBuilder.loadTexts: wsNotifyAvailBWChange.setStatus('deprecated')
wsNotifyUnexpectedRestart = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 6)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyUnexpectedRestart.setStatus('current')
wsNotifyPersistentError = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 7)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyPersistentError.setStatus('current')
wsNotifyAlert = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 8)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsAlertAction"), ("APPACCELERATION-STATUS-MIB", "wsAlertClass"), ("APPACCELERATION-STATUS-MIB", "wsAlertMsg"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyAlert.setStatus('current')
wsNotifyConfigurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 9)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyConfigurationChanged.setStatus('current')
wsStatusMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 1))
wsStatusMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 2))
wsStatusCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 1, 1)).setObjects(("APPACCELERATION-STATUS-MIB", "wsStatusGroup"), ("APPACCELERATION-STATUS-MIB", "wsStatusTrapGroup"), ("APPACCELERATION-STATUS-MIB", "wsStatusNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsStatusCompliance = wsStatusCompliance.setStatus('current')
wsStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 2, 1)).setObjects(("APPACCELERATION-STATUS-MIB", "wsOperStatus"), ("APPACCELERATION-STATUS-MIB", "wsLoad1Min"), ("APPACCELERATION-STATUS-MIB", "wsLoad5Min"), ("APPACCELERATION-STATUS-MIB", "wsLoad15Min"), ("APPACCELERATION-STATUS-MIB", "wsBypass"), ("APPACCELERATION-STATUS-MIB", "wsLastAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsBoostStatus"), ("APPACCELERATION-STATUS-MIB", "wsBandwidthMode"), ("APPACCELERATION-STATUS-MIB", "wsBandwidthLimit"), ("APPACCELERATION-STATUS-MIB", "wsWanOutOctets"), ("APPACCELERATION-STATUS-MIB", "wsWanInOctets"), ("APPACCELERATION-STATUS-MIB", "wsLanOutOctets"), ("APPACCELERATION-STATUS-MIB", "wsLanInOctets"), ("APPACCELERATION-STATUS-MIB", "wsCompressionEffectiveBandwidth"), ("APPACCELERATION-STATUS-MIB", "wsSendCompressionRatio"), ("APPACCELERATION-STATUS-MIB", "wsReceiveCompressionRatio"), ("APPACCELERATION-STATUS-MIB", "wsCompressionStatsCollectionTime"), ("APPACCELERATION-STATUS-MIB", "wsAcceleratedConnections"), ("APPACCELERATION-STATUS-MIB", "wsNonAcceleratedConnections"), ("APPACCELERATION-STATUS-MIB", "wsHaState"), ("APPACCELERATION-STATUS-MIB", "wsHaVmIp"), ("APPACCELERATION-STATUS-MIB", "wsHaSecondaryIp"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"), ("APPACCELERATION-STATUS-MIB", "wsCpuUsage"), ("APPACCELERATION-STATUS-MIB", "wsConnectedPlugIns"), ("APPACCELERATION-STATUS-MIB", "wsMaxPlugIns"), ("APPACCELERATION-STATUS-MIB", "wsQosStatsCollectionTime"), ("APPACCELERATION-STATUS-MIB", "wsUpTime"), ("APPACCELERATION-STATUS-MIB", "wsSerialNumber"), ("APPACCELERATION-STATUS-MIB", "wsNonAcceleratedVolume"), ("APPACCELERATION-STATUS-MIB", "wsActiveConnections"), ("APPACCELERATION-STATUS-MIB", "wsAccelerationStatus"), ("APPACCELERATION-STATUS-MIB", "wsTrafficShapingStatus"), ("APPACCELERATION-STATUS-MIB", "wsSystemLoad"), ("APPACCELERATION-STATUS-MIB", "wsWanSendRate"), ("APPACCELERATION-STATUS-MIB", "wsWanReceiveRate"), ("APPACCELERATION-STATUS-MIB", "wsLanSendRate"), ("APPACCELERATION-STATUS-MIB", "wsLanReceiveRate"), ("APPACCELERATION-STATUS-MIB", "wsNonAcceleratedRate"), ("APPACCELERATION-STATUS-MIB", "wsModelNumber"), ("APPACCELERATION-STATUS-MIB", "wsWccpStatus"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmIndex"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmID"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmLogTime"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmAcked"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsServiceClassIndex"), ("APPACCELERATION-STATUS-MIB", "wsServiceClassName"), ("APPACCELERATION-STATUS-MIB", "wsScsCurrentAcceleratedConnections"), ("APPACCELERATION-STATUS-MIB", "wsScsTotalAcceleratedConnections"), ("APPACCELERATION-STATUS-MIB", "wsScsTotalAcceleratedOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsTotalNonAcceleratedConnections"), ("APPACCELERATION-STATUS-MIB", "wsScsTotalNonAcceleratedOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsTotalPreCompressionOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsCompressSentOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsCompressReceivedOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsPreCompressSentOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsPreCompressReceivedOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsSendBWSavings"), ("APPACCELERATION-STATUS-MIB", "wsScsRecvBWSavings"), ("APPACCELERATION-STATUS-MIB", "wsScsSendRecvBWSavings"), ("APPACCELERATION-STATUS-MIB", "wsScsSendCompressionRatio"), ("APPACCELERATION-STATUS-MIB", "wsScsRecvCompressionRatio"), ("APPACCELERATION-STATUS-MIB", "wsScsSendRecvCompressionRatio"), ("APPACCELERATION-STATUS-MIB", "wsQosIndex"), ("APPACCELERATION-STATUS-MIB", "wsQosName"), ("APPACCELERATION-STATUS-MIB", "wsQosConfiguredSendRatio"), ("APPACCELERATION-STATUS-MIB", "wsQosSentVolume"), ("APPACCELERATION-STATUS-MIB", "wsQosActualSendRatio"), ("APPACCELERATION-STATUS-MIB", "wsIcaIndex"), ("APPACCELERATION-STATUS-MIB", "wsIcaServiceName"), ("APPACCELERATION-STATUS-MIB", "wsIcaPriority"), ("APPACCELERATION-STATUS-MIB", "wsIcaSentVolume"), ("APPACCELERATION-STATUS-MIB", "wsIcaSentRatio"), ("APPACCELERATION-STATUS-MIB", "wsIcaReceivedVolume"), ("APPACCELERATION-STATUS-MIB", "wsIcaReceivedRatio"), ("APPACCELERATION-STATUS-MIB", "wsIcaSendRate"), ("APPACCELERATION-STATUS-MIB", "wsIcaReceiveRate"), ("APPACCELERATION-STATUS-MIB", "wsAdapterIndex"), ("APPACCELERATION-STATUS-MIB", "wsAdapterName"), ("APPACCELERATION-STATUS-MIB", "wsAdapterEnabled"), ("APPACCELERATION-STATUS-MIB", "wsAdapterIp"), ("APPACCELERATION-STATUS-MIB", "wsAdapterNetmask"), ("APPACCELERATION-STATUS-MIB", "wsAdapterGateway"), ("APPACCELERATION-STATUS-MIB", "wsAdapterVirtualIp"), ("APPACCELERATION-STATUS-MIB", "wsAdapterVLanEnabled"), ("APPACCELERATION-STATUS-MIB", "wsAdapterVLanGroup"), ("APPACCELERATION-STATUS-MIB", "linkIndex"), ("APPACCELERATION-STATUS-MIB", "linkName"), ("APPACCELERATION-STATUS-MIB", "linkSentVolume"), ("APPACCELERATION-STATUS-MIB", "linkReceivedVolume"), ("APPACCELERATION-STATUS-MIB", "linkSentPackets"), ("APPACCELERATION-STATUS-MIB", "linkReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "linkDroppedSentVolume"), ("APPACCELERATION-STATUS-MIB", "linkDroppedReceivedVolume"), ("APPACCELERATION-STATUS-MIB", "linkDroppedSentPackets"), ("APPACCELERATION-STATUS-MIB", "linkDroppedReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "appIndex"), ("APPACCELERATION-STATUS-MIB", "appName"), ("APPACCELERATION-STATUS-MIB", "appId"), ("APPACCELERATION-STATUS-MIB", "appParentId"), ("APPACCELERATION-STATUS-MIB", "appGroupId"), ("APPACCELERATION-STATUS-MIB", "appSentVolume"), ("APPACCELERATION-STATUS-MIB", "appReceivedVolume"), ("APPACCELERATION-STATUS-MIB", "appSentPackets"), ("APPACCELERATION-STATUS-MIB", "appReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "appDroppedSentVolume"), ("APPACCELERATION-STATUS-MIB", "appDroppedReceiveVolume"), ("APPACCELERATION-STATUS-MIB", "appDroppedSentPackets"), ("APPACCELERATION-STATUS-MIB", "appDroppedReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "appSendRate"), ("APPACCELERATION-STATUS-MIB", "appReceiveRate"), ("APPACCELERATION-STATUS-MIB", "qosIndex"), ("APPACCELERATION-STATUS-MIB", "qosPolicyName"), ("APPACCELERATION-STATUS-MIB", "qosLink"), ("APPACCELERATION-STATUS-MIB", "qosSentVolume"), ("APPACCELERATION-STATUS-MIB", "qosReceiveVolume"), ("APPACCELERATION-STATUS-MIB", "qosSentPackets"), ("APPACCELERATION-STATUS-MIB", "qosReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "qosDroppedSentVolume"), ("APPACCELERATION-STATUS-MIB", "qosDroppedReceiveVolume"), ("APPACCELERATION-STATUS-MIB", "qosDroppedSentPackets"), ("APPACCELERATION-STATUS-MIB", "qosDroppedReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "lscIndex"), ("APPACCELERATION-STATUS-MIB", "lscServiceClassName"), ("APPACCELERATION-STATUS-MIB", "lscLink"), ("APPACCELERATION-STATUS-MIB", "lscSentVolume"), ("APPACCELERATION-STATUS-MIB", "lscReceivedVolume"), ("APPACCELERATION-STATUS-MIB", "lscSentPackets"), ("APPACCELERATION-STATUS-MIB", "lscReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "lscDroppedSentVolume"), ("APPACCELERATION-STATUS-MIB", "lscDroppedReceiveVolume"), ("APPACCELERATION-STATUS-MIB", "lscDroppedSentPackets"), ("APPACCELERATION-STATUS-MIB", "lscDroppedReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "partnerAddrType"), ("APPACCELERATION-STATUS-MIB", "partnerAddr"), ("APPACCELERATION-STATUS-MIB", "partnerConnections"), ("APPACCELERATION-STATUS-MIB", "partnerSendRate"), ("APPACCELERATION-STATUS-MIB", "partnerReceiveRate"), ("APPACCELERATION-STATUS-MIB", "partnerIdleTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsStatusGroup = wsStatusGroup.setStatus('current')
wsStatusTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 2, 2)).setObjects(("APPACCELERATION-STATUS-MIB", "wsHAMasterIpAddr"), ("APPACCELERATION-STATUS-MIB", "wsAlertAction"), ("APPACCELERATION-STATUS-MIB", "wsAlertClass"), ("APPACCELERATION-STATUS-MIB", "wsAlertMsg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsStatusTrapGroup = wsStatusTrapGroup.setStatus('current')
wsStatusNotifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 2, 3)).setObjects(("APPACCELERATION-STATUS-MIB", "wsNotifyStart"), ("APPACCELERATION-STATUS-MIB", "wsNotifyShutdown"), ("APPACCELERATION-STATUS-MIB", "wsNotifyRestart"), ("APPACCELERATION-STATUS-MIB", "wsHANotifyNewMaster"), ("APPACCELERATION-STATUS-MIB", "wsNotifyAvailBWChange"), ("APPACCELERATION-STATUS-MIB", "wsNotifyUnexpectedRestart"), ("APPACCELERATION-STATUS-MIB", "wsNotifyPersistentError"), ("APPACCELERATION-STATUS-MIB", "wsNotifyAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsStatusNotifyGroup = wsStatusNotifyGroup.setStatus('current')
mibBuilder.exportSymbols("APPACCELERATION-STATUS-MIB", wsNotifyShutdown=wsNotifyShutdown, wsNotifyPersistentError=wsNotifyPersistentError, wsQosTrafficClassStatsTable=wsQosTrafficClassStatsTable, wsActiveAlarmAcked=wsActiveAlarmAcked, PYSNMP_MODULE_ID=appAccelerationStatusMIB, wsNotifyRestart=wsNotifyRestart, wsActiveConnections=wsActiveConnections, wsPrimaryIp=wsPrimaryIp, partnerConnections=partnerConnections, wsQosSentVolume=wsQosSentVolume, wsAdapterNetmask=wsAdapterNetmask, appId=appId, wsPartnerTable=wsPartnerTable, wsUpTime=wsUpTime, wsActiveAlarmIndex=wsActiveAlarmIndex, wsActiveAlarmSeverity=wsActiveAlarmSeverity, wsQosIndex=wsQosIndex, lscLink=lscLink, appParentId=appParentId, wsAdapterName=wsAdapterName, wsQosActualSendRatio=wsQosActualSendRatio, wsQosConfiguredSendRatio=wsQosConfiguredSendRatio, wsIcaStatsTable=wsIcaStatsTable, wsBypass=wsBypass, wsScsRecvBWSavings=wsScsRecvBWSavings, appDroppedReceiveVolume=appDroppedReceiveVolume, qosStatsEntry=qosStatsEntry, lscSentVolume=lscSentVolume, appGroupId=appGroupId, wsMaxPlugIns=wsMaxPlugIns, qosReceivedPackets=qosReceivedPackets, wsScsCompressReceivedOctets=wsScsCompressReceivedOctets, linkReceivedVolume=linkReceivedVolume, wsScsRecvCompressionRatio=wsScsRecvCompressionRatio, appSendRate=appSendRate, wsStatusNotifyGroup=wsStatusNotifyGroup, linkIndex=linkIndex, wsHaVmIp=wsHaVmIp, wsScsTotalNonAcceleratedOctets=wsScsTotalNonAcceleratedOctets, appReceivedPackets=appReceivedPackets, wsScsPreCompressSentOctets=wsScsPreCompressSentOctets, qosSentPackets=qosSentPackets, wsHaSecondaryIp=wsHaSecondaryIp, linkDroppedReceivedPackets=linkDroppedReceivedPackets, lscDroppedSentPackets=lscDroppedSentPackets, wsActiveAlarmServiceAffect=wsActiveAlarmServiceAffect, wsScsSendRecvCompressionRatio=wsScsSendRecvCompressionRatio, qosDroppedReceiveVolume=qosDroppedReceiveVolume, wsHAMasterIpAddr=wsHAMasterIpAddr, qosIndex=qosIndex, qosLink=qosLink, linkSentPackets=linkSentPackets, wsSendCompressionRatio=wsSendCompressionRatio, wsAlertAction=wsAlertAction, wsSystemLoad=wsSystemLoad, wsScsSendBWSavings=wsScsSendBWSavings, wsStatusMIBNotifications=wsStatusMIBNotifications, wsIcaServiceName=wsIcaServiceName, qosReceiveVolume=qosReceiveVolume, wsStatusMIBCompliances=wsStatusMIBCompliances, linkName=linkName, wsLoad5Min=wsLoad5Min, linkDroppedReceivedVolume=linkDroppedReceivedVolume, wsServiceClassIndex=wsServiceClassIndex, wsAdapterIndex=wsAdapterIndex, lscIndex=lscIndex, partnerReceiveRate=partnerReceiveRate, linkDroppedSentVolume=linkDroppedSentVolume, lscSentPackets=lscSentPackets, wsAcceleratedConnections=wsAcceleratedConnections, wsLscStatsTable=wsLscStatsTable, wsStatusMIBConformance=wsStatusMIBConformance, wsNonAcceleratedRate=wsNonAcceleratedRate, wsWccpStatus=wsWccpStatus, wsIcaIndex=wsIcaIndex, qosDroppedReceivedPackets=qosDroppedReceivedPackets, lscDroppedSentVolume=lscDroppedSentVolume, appSentVolume=appSentVolume, partnerEntry=partnerEntry, partnerAddr=partnerAddr, wsStatusMIBScalars=wsStatusMIBScalars, wsScsTotalNonAcceleratedConnections=wsScsTotalNonAcceleratedConnections, lscStatsEntry=lscStatsEntry, qosPolicyName=qosPolicyName, wsWanOutOctets=wsWanOutOctets, wsActiveAlarmLogTime=wsActiveAlarmLogTime, wsModelNumber=wsModelNumber, wsAlertMsg=wsAlertMsg, wsIcaReceiveRate=wsIcaReceiveRate, wsQosStatsCollectionTime=wsQosStatsCollectionTime, appStatsEntry=appStatsEntry, wsTrafficShapingStatus=wsTrafficShapingStatus, wsAdapterVirtualIp=wsAdapterVirtualIp, wsHaState=wsHaState, wsScsCompressSentOctets=wsScsCompressSentOctets, wsSerialNumber=wsSerialNumber, wsBoostStatus=wsBoostStatus, wsScsTotalAcceleratedOctets=wsScsTotalAcceleratedOctets, wsIcaStatsEntry=wsIcaStatsEntry, wsServiceClassStatsEntry=wsServiceClassStatsEntry, wsNotifyAlert=wsNotifyAlert, wsAppStatsTable=wsAppStatsTable, wsLoad1Min=wsLoad1Min, wsWanReceiveRate=wsWanReceiveRate, wsHANotifyNewMaster=wsHANotifyNewMaster, wsIcaSentRatio=wsIcaSentRatio, wsLanSendRate=wsLanSendRate, wsLanInOctets=wsLanInOctets, appDroppedSentVolume=appDroppedSentVolume, wsStatusMIBGroups=wsStatusMIBGroups, wsCompressionEffectiveBandwidth=wsCompressionEffectiveBandwidth, wsIcaReceivedVolume=wsIcaReceivedVolume, wsWanInOctets=wsWanInOctets, wsScsTotalPreCompressionOctets=wsScsTotalPreCompressionOctets, partnerIdleTime=partnerIdleTime, appDroppedReceivedPackets=appDroppedReceivedPackets, lscReceivedPackets=lscReceivedPackets, qosDroppedSentPackets=qosDroppedSentPackets, wsLastAlarmSeqNum=wsLastAlarmSeqNum, wsAdapterIp=wsAdapterIp, linkStatsEntry=linkStatsEntry, wsAdapterEnabled=wsAdapterEnabled, wsWanSendRate=wsWanSendRate, wsBandwidthMode=wsBandwidthMode, wsSourceIpAddr=wsSourceIpAddr, appSentPackets=appSentPackets, wsLanReceiveRate=wsLanReceiveRate, wsIcaSendRate=wsIcaSendRate, wsStatusMIBObjects=wsStatusMIBObjects, wsAlertClass=wsAlertClass, wsCompressionStatsCollectionTime=wsCompressionStatsCollectionTime, appIndex=appIndex, wsLinkStatsTable=wsLinkStatsTable, wsNonAcceleratedConnections=wsNonAcceleratedConnections, wsScsCurrentAcceleratedConnections=wsScsCurrentAcceleratedConnections, wsNonAcceleratedVolume=wsNonAcceleratedVolume, wsAdapterGateway=wsAdapterGateway, linkReceivedPackets=linkReceivedPackets, wsServiceClassStatsTable=wsServiceClassStatsTable, wsActiveAlarmID=wsActiveAlarmID, wsNotifyStart=wsNotifyStart, appName=appName, appReceiveRate=appReceiveRate, wsCpuUsage=wsCpuUsage, wsActiveAlarmSeqNum=wsActiveAlarmSeqNum, linkSentVolume=linkSentVolume, qosSentVolume=qosSentVolume, wsStatusTrapGroup=wsStatusTrapGroup, wsReceiveCompressionRatio=wsReceiveCompressionRatio, lscServiceClassName=lscServiceClassName, wsScsSendCompressionRatio=wsScsSendCompressionRatio, wsServiceClassName=wsServiceClassName, wsLoad15Min=wsLoad15Min, appReceivedVolume=appReceivedVolume, wsScsPreCompressReceivedOctets=wsScsPreCompressReceivedOctets, wsActiveAlarmDesc=wsActiveAlarmDesc, wsAdapterVLanEnabled=wsAdapterVLanEnabled, wsQosTcStatsEntry=wsQosTcStatsEntry, linkDroppedSentPackets=linkDroppedSentPackets, wsStatusMIBTables=wsStatusMIBTables, wsNotifyConfigurationChanged=wsNotifyConfigurationChanged, wsScsSendRecvBWSavings=wsScsSendRecvBWSavings, wsScsTotalAcceleratedConnections=wsScsTotalAcceleratedConnections, wsActiveAlarmTable=wsActiveAlarmTable, wsAdapterVLanGroup=wsAdapterVLanGroup, wsQosName=wsQosName, partnerAddrType=partnerAddrType, lscReceivedVolume=lscReceivedVolume, wsAccelerationStatus=wsAccelerationStatus, partnerSendRate=partnerSendRate, wsOperStatus=wsOperStatus, wsAdapterEntry=wsAdapterEntry, wsConnectedPlugIns=wsConnectedPlugIns, wsBandwidthLimit=wsBandwidthLimit, appDroppedSentPackets=appDroppedSentPackets, wsQosStatsTable=wsQosStatsTable, wsIcaSentVolume=wsIcaSentVolume, wsStatusGroup=wsStatusGroup, activeAlarmEntry=activeAlarmEntry, qosDroppedSentVolume=qosDroppedSentVolume, wsNotifyAvailBWChange=wsNotifyAvailBWChange, wsStatusMIBAlertTables=wsStatusMIBAlertTables, wsAdapterTable=wsAdapterTable, wsStatusCompliance=wsStatusCompliance, appAccelerationStatusMIB=appAccelerationStatusMIB, lscDroppedReceiveVolume=lscDroppedReceiveVolume, wsIcaPriority=wsIcaPriority, wsNotifyUnexpectedRestart=wsNotifyUnexpectedRestart, lscDroppedReceivedPackets=lscDroppedReceivedPackets, wsLanOutOctets=wsLanOutOctets, wsIcaReceivedRatio=wsIcaReceivedRatio)
