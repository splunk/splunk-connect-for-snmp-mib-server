#
# PySNMP MIB module JUNIPER-IDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-IDP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:48:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
jnxTraps, jnxMibs = mibBuilder.importSymbols("JUNIPER-SMI", "jnxTraps", "jnxMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Bits, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, Counter64, NotificationType, IpAddress, MibIdentifier, ObjectIdentity, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "Counter64", "NotificationType", "IpAddress", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxIdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 9))
if mibBuilder.loadTexts: jnxIdpMIB.setLastUpdated('200605180000Z')
if mibBuilder.loadTexts: jnxIdpMIB.setOrganization('Juniper Networks, Inc.')
jnxIdpSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1))
jnxIdpSensorCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorCpuUsage.setStatus('current')
jnxIdpSensorMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorMemUsage.setStatus('mandatory')
jnxIdpSensorSessAllocated = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorSessAllocated.setStatus('mandatory')
jnxIdpSensorSessMaximum = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorSessMaximum.setStatus('mandatory')
jnxIdpSensorFreeDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 5), Gauge32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorFreeDiskSpace.setStatus('mandatory')
jnxIdpSensorCpuThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorCpuThreshold.setStatus('current')
jnxIdpSensorMemThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorMemThreshold.setStatus('mandatory')
jnxIdpSensorSessThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorSessThreshold.setStatus('mandatory')
jnxIdpSensorDiskSpaceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorDiskSpaceThreshold.setStatus('mandatory')
jnxIdpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 12))
jnxIdpTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0))
jnxIdpSessionCountNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 1)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorSessAllocated"), ("JUNIPER-IDP-MIB", "jnxIdpSensorSessThreshold"))
if mibBuilder.loadTexts: jnxIdpSessionCountNotify.setStatus('current')
jnxIdpSessionCountLimitRestored = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 2)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorSessAllocated"))
if mibBuilder.loadTexts: jnxIdpSessionCountLimitRestored.setStatus('current')
jnxIdpCPUUtilizationNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 3)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorCpuUsage"), ("JUNIPER-IDP-MIB", "jnxIdpSensorCpuThreshold"))
if mibBuilder.loadTexts: jnxIdpCPUUtilizationNotify.setStatus('current')
jnxIdpCPUUtilizationLimitRestored = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 4)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorCpuUsage"))
if mibBuilder.loadTexts: jnxIdpCPUUtilizationLimitRestored.setStatus('current')
jnxIdpMemoryNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 5)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorMemUsage"), ("JUNIPER-IDP-MIB", "jnxIdpSensorMemThreshold"))
if mibBuilder.loadTexts: jnxIdpMemoryNotify.setStatus('current')
jnxIdpMemoryLimitRestored = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 6)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorMemUsage"))
if mibBuilder.loadTexts: jnxIdpMemoryLimitRestored.setStatus('current')
jnxIdpDiskUtilizationNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 7)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorFreeDiskSpace"), ("JUNIPER-IDP-MIB", "jnxIdpSensorDiskSpaceThreshold"))
if mibBuilder.loadTexts: jnxIdpDiskUtilizationNotify.setStatus('current')
jnxIdpDiskUtilizationLimitRestored = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 8)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorFreeDiskSpace"))
if mibBuilder.loadTexts: jnxIdpDiskUtilizationLimitRestored.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-IDP-MIB", jnxIdpSensorMemThreshold=jnxIdpSensorMemThreshold, jnxIdpTrapsPrefix=jnxIdpTrapsPrefix, jnxIdpSensorCpuUsage=jnxIdpSensorCpuUsage, jnxIdpSensorFreeDiskSpace=jnxIdpSensorFreeDiskSpace, jnxIdpSensorDiskSpaceThreshold=jnxIdpSensorDiskSpaceThreshold, jnxIdpDiskUtilizationNotify=jnxIdpDiskUtilizationNotify, jnxIdpSensorCpuThreshold=jnxIdpSensorCpuThreshold, jnxIdpMemoryLimitRestored=jnxIdpMemoryLimitRestored, jnxIdpSensor=jnxIdpSensor, jnxIdpCPUUtilizationLimitRestored=jnxIdpCPUUtilizationLimitRestored, jnxIdpSessionCountNotify=jnxIdpSessionCountNotify, jnxIdpDiskUtilizationLimitRestored=jnxIdpDiskUtilizationLimitRestored, jnxIdpTrap=jnxIdpTrap, PYSNMP_MODULE_ID=jnxIdpMIB, jnxIdpCPUUtilizationNotify=jnxIdpCPUUtilizationNotify, jnxIdpSensorSessThreshold=jnxIdpSensorSessThreshold, jnxIdpSessionCountLimitRestored=jnxIdpSessionCountLimitRestored, jnxIdpMemoryNotify=jnxIdpMemoryNotify, jnxIdpMIB=jnxIdpMIB, jnxIdpSensorSessMaximum=jnxIdpSensorSessMaximum, jnxIdpSensorSessAllocated=jnxIdpSensorSessAllocated, jnxIdpSensorMemUsage=jnxIdpSensorMemUsage)
