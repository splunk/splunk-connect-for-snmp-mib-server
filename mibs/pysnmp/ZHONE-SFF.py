#
# PySNMP MIB module ZHONE-SFF (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-SFF
# Produced by pysmi-0.3.4 at Mon Apr 29 21:41:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, ModuleIdentity, Unsigned32, TimeTicks, NotificationType, iso, Bits, Counter64, ObjectIdentity, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "ModuleIdentity", "Unsigned32", "TimeTicks", "NotificationType", "iso", "Bits", "Counter64", "ObjectIdentity", "Integer32", "Gauge32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
zhoneSFF, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneSFF", "zhoneModules")
ZhoneAdminString, = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString")
zhoneSFFModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 114))
zhoneSFFModule.setRevisions(('2014-04-07 12:13', '2009-04-27 16:52', '2008-05-21 12:47', '2008-02-13 10:49', '2007-11-07 19:07',))
if mibBuilder.loadTexts: zhoneSFFModule.setLastUpdated('201404071205Z')
if mibBuilder.loadTexts: zhoneSFFModule.setOrganization('Zhone Technologies, Inc.')
zhoneSFFObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1))
if mibBuilder.loadTexts: zhoneSFFObjects.setStatus('current')
zhoneSFPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1), )
if mibBuilder.loadTexts: zhoneSFPTable.setStatus('current')
zhoneSFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneSFPEntry.setStatus('current')
zhoneSFPVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 1), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPVendorName.setStatus('current')
zhoneSFPVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 2), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPVendorOUI.setStatus('current')
zhoneSFPVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 3), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPVendorPartNumber.setStatus('current')
zhoneSFPVendorRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 4), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPVendorRevisionLevel.setStatus('current')
zhoneSFPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 5), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPSerialNumber.setStatus('current')
zhoneSFPManufacturingDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 6), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPManufacturingDateCode.setStatus('current')
zhoneSFPGigeComplianceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 7), Bits().clone(namedValues=NamedValues(("base-1000-SX", 0), ("base-1000-LX", 1), ("base-1000-CX", 2), ("base-1000-T", 3), ("base-100-LX", 4), ("base-100-FX", 5), ("base-100-BX", 6), ("base-PX", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPGigeComplianceCode.setStatus('current')
zhoneSFPConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("unknownOrUnspecified", 0), ("sc", 1), ("fibreStyle1Copper", 2), ("fibreStyle2Copper", 3), ("bnc-tnc", 4), ("fibreCoaxialHeaders", 5), ("fiberJack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdc-II", 32), ("copperPigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPConnectorType.setStatus('current')
zhoneSFPIdTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknownOrUnspecified", 0), ("gbic", 1), ("connector", 2), ("sfp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPIdTransceiverType.setStatus('current')
zhoneSFPExtendedIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPExtendedIdentifier.setStatus('current')
zhoneSFPSerialEncodingAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("eightB10B", 1), ("fourB5B", 2), ("nrz", 3), ("manchester", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPSerialEncodingAlgorithm.setStatus('current')
zhoneSFPFiberChannelLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 12), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("unused3", 3), ("longDistance", 4), ("intermediateDistance", 5), ("shortDistance", 6), ("veryLongDistance", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPFiberChannelLinkLength.setStatus('current')
zhoneSFPFiberChannelTransmitterTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 13), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("unused3", 3), ("longwaveLaserLL", 4), ("shortwaveLaserWithOFC", 5), ("shortwaveLaserWithoutOFC", 6), ("electrical-Intra-Enclosure", 7), ("electrical-Inter-Enclosure", 8), ("longwabeLaserLC", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPFiberChannelTransmitterTechnology.setStatus('current')
zhoneSFPFiberChannelTransmissionMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 14), Bits().clone(namedValues=NamedValues(("singleMode", 0), ("unused1", 1), ("multiMode-50m", 2), ("multiMode-62dot5m", 3), ("videoCoax", 4), ("miniatureCoax", 5), ("shieldedTwistedPair", 6), ("twinAxialPair", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPFiberChannelTransmissionMedia.setStatus('current')
zhoneSFPFiberChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 15), Bits().clone(namedValues=NamedValues(("oneHundredMbytesperSec", 0), ("unused1", 1), ("twoHundredMbytesperSec", 2), ("fourHundredMbytesperSec", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPFiberChannelSpeed.setStatus('current')
zhoneSFP9To125mmFiberLinkLengthKm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 16), Unsigned32()).setUnits('Km').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFP9To125mmFiberLinkLengthKm.setStatus('current')
zhoneSFP9To125mmFiberLinkLength100m = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 17), Unsigned32()).setUnits('100m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFP9To125mmFiberLinkLength100m.setStatus('current')
zhoneSFP50To125mmFiberLinkLength10m = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 18), Unsigned32()).setUnits('10m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFP50To125mmFiberLinkLength10m.setStatus('current')
zhoneSFP62Dot5To125FiberLinkLength10m = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 19), Unsigned32()).setUnits('10m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFP62Dot5To125FiberLinkLength10m.setStatus('current')
zhoneSFPNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 20), Unsigned32()).setUnits('100 Mbits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPNominalBitRate.setStatus('current')
zhoneSFPUpperBitRateMarginPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 21), Unsigned32()).setUnits('Percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPUpperBitRateMarginPercentage.setStatus('current')
zhoneSFPLowerBitRatePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 22), Unsigned32()).setUnits('Percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPLowerBitRatePercentage.setStatus('current')
zhoneSFPCopperLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPCopperLinkLength.setStatus('current')
zhoneSFPIsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPIsPresent.setStatus('current')
zhoneXFPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2), )
if mibBuilder.loadTexts: zhoneXFPTable.setStatus('current')
zhoneXFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneXFPEntry.setStatus('current')
zhoneXFPVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 1), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPVendorName.setStatus('current')
zhoneXFPVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 2), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPVendorOUI.setStatus('current')
zhoneXFPManufacturingDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPManufacturingDateCode.setStatus('current')
zhoneXFPComplianceCode10GbEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("unused", 0), ("ew", 1), ("lw", 2), ("sw", 3), ("lrm", 4), ("er", 5), ("lr", 6), ("sr", 7)))).setUnits('10Gb').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPComplianceCode10GbEthernet.setStatus('current')
zhoneXFPComplianceCode10GbFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("unused3", 3), ("intReach100nmFp", 4), ("extReach1550nm", 5), ("sM-LL-L-1200", 6), ("mX-SN-I-1200", 7)))).setUnits('10Gb').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPComplianceCode10GbFiber.setStatus('current')
zhoneXFPLowerSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("unused0", 0), ("oC-48-LR", 1), ("oC-48-IR", 2), ("oC-48-SR", 3), ("sMF-2xFC", 4), ("sMFM-2xFC", 5), ("base100Lx-1xFcSmf", 6), ("base100Sx-1xFcMmf", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPLowerSpeed.setStatus('current')
zhoneXFPConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("unknownOrUnspecified", 0), ("sc", 1), ("fibreStyle1Copper", 2), ("fibreStyle2Copper", 3), ("bnc-tnc", 4), ("fibreCoaxialHeaders", 5), ("fiberJack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdc-ii", 32), ("copperPigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPConnectorType.setStatus('current')
zhoneXFPIdTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknownOrUnspecified", 0), ("gbic", 1), ("connector", 2), ("sfp", 3), ("xpi300Pin", 4), ("xenpak", 5), ("xfp", 6), ("xff", 7), ("xfpE", 8), ("xpak", 9), ("x2", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPIdTransceiverType.setStatus('current')
zhoneXFPExtendedIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPExtendedIdentifier.setStatus('current')
zhoneXFPEncodingSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 10), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("rz", 3), ("nrz", 4), ("sonetScrambled", 5), ("eightB10B", 6), ("sixtyFourBper66B", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPEncodingSupport.setStatus('current')
zhoneXFPDeviceTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPDeviceTechnology.setStatus('current')
zhoneXFPSMFiberLinkLength1Km = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 12), Unsigned32()).setUnits('Km').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPSMFiberLinkLength1Km.setStatus('current')
zhoneXFPMMExtendedFiberLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 13), Unsigned32()).setUnits('2m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPMMExtendedFiberLinkLength.setStatus('current')
zhoneXFPMM50umFiberLinkLength1m = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 14), Unsigned32()).setUnits('1m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPMM50umFiberLinkLength1m.setStatus('current')
zhoneXFPMM62Dot5umFiberLinkLength1m = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 15), Unsigned32()).setUnits('1m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPMM62Dot5umFiberLinkLength1m.setStatus('current')
zhoneXFPMinimumBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 16), Unsigned32()).setUnits('100Mbits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPMinimumBitRate.setStatus('current')
zhoneXFPMaximumBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 17), Unsigned32()).setUnits('100Mbits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPMaximumBitRate.setStatus('current')
zhoneXFPEnhancedOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 18), Bits().clone(namedValues=NamedValues(("cMU-Support", 0), ("wavelengthTurnability", 1), ("activeFEC-Control", 2), ("vPS-BypassedRegulator", 3), ("vPS-LVRegulator", 4), ("soft-P-Down", 5), ("soft-Tx-Disable", 6), ("vps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPEnhancedOptions.setStatus('current')
zhoneXFPVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 19), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPVendorPartNumber.setStatus('current')
zhoneXFPVendorRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 20), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPVendorRevisionLevel.setStatus('current')
zhoneXFPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 21), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPSerialNumber.setStatus('current')
zhoneXFPIsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPIsPresent.setStatus('current')
zhoneDDMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3), )
if mibBuilder.loadTexts: zhoneDDMStatusTable.setStatus('current')
zhoneDDMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneDDMStatusEntry.setStatus('current')
zhoneDDMTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 128))).setUnits('Degrees celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMTemperature.setStatus('current')
zhoneDDMVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 655))).setUnits('Hundredths of volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMVoltage.setStatus('current')
zhoneDDMTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131))).setUnits('milliamperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMTxBiasCurrent.setStatus('current')
zhoneDDMTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 200))).setUnits('tenths of dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMTxPower.setStatus('current')
zhoneDDMRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 200))).setUnits('tenths of dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMRxPower.setStatus('current')
zhoneDDMStatusWord = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("alarm", 4), ("sfpnotpresent", 8), ("ddmnotsupported", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMStatusWord.setStatus('current')
zhoneDDMAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 7), Bits().clone(namedValues=NamedValues(("tempHigh", 0), ("tempLow", 1), ("vccHigh", 2), ("vccLow", 3), ("txBiasHigh", 4), ("txBiasLow", 5), ("txPwrHigh", 6), ("txPwrLow", 7), ("rxPwrHigh", 8), ("rxPwrLow", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMAlarms.setStatus('current')
mibBuilder.exportSymbols("ZHONE-SFF", zhoneXFPSerialNumber=zhoneXFPSerialNumber, zhoneSFPEntry=zhoneSFPEntry, zhoneSFP9To125mmFiberLinkLength100m=zhoneSFP9To125mmFiberLinkLength100m, zhoneXFPDeviceTechnology=zhoneXFPDeviceTechnology, zhoneXFPIdTransceiverType=zhoneXFPIdTransceiverType, zhoneSFFModule=zhoneSFFModule, zhoneXFPExtendedIdentifier=zhoneXFPExtendedIdentifier, zhoneDDMStatusWord=zhoneDDMStatusWord, zhoneSFP62Dot5To125FiberLinkLength10m=zhoneSFP62Dot5To125FiberLinkLength10m, zhoneSFPManufacturingDateCode=zhoneSFPManufacturingDateCode, zhoneSFPNominalBitRate=zhoneSFPNominalBitRate, zhoneDDMStatusTable=zhoneDDMStatusTable, zhoneXFPVendorName=zhoneXFPVendorName, zhoneSFPGigeComplianceCode=zhoneSFPGigeComplianceCode, zhoneDDMRxPower=zhoneDDMRxPower, zhoneXFPMM50umFiberLinkLength1m=zhoneXFPMM50umFiberLinkLength1m, zhoneSFPSerialNumber=zhoneSFPSerialNumber, zhoneXFPMM62Dot5umFiberLinkLength1m=zhoneXFPMM62Dot5umFiberLinkLength1m, zhoneXFPEnhancedOptions=zhoneXFPEnhancedOptions, zhoneXFPIsPresent=zhoneXFPIsPresent, zhoneSFPConnectorType=zhoneSFPConnectorType, zhoneSFPSerialEncodingAlgorithm=zhoneSFPSerialEncodingAlgorithm, zhoneSFPFiberChannelLinkLength=zhoneSFPFiberChannelLinkLength, zhoneXFPMinimumBitRate=zhoneXFPMinimumBitRate, zhoneXFPMMExtendedFiberLinkLength=zhoneXFPMMExtendedFiberLinkLength, zhoneSFP50To125mmFiberLinkLength10m=zhoneSFP50To125mmFiberLinkLength10m, zhoneXFPSMFiberLinkLength1Km=zhoneXFPSMFiberLinkLength1Km, zhoneDDMTemperature=zhoneDDMTemperature, zhoneSFP9To125mmFiberLinkLengthKm=zhoneSFP9To125mmFiberLinkLengthKm, zhoneXFPEntry=zhoneXFPEntry, zhoneSFPVendorName=zhoneSFPVendorName, zhoneSFPVendorPartNumber=zhoneSFPVendorPartNumber, zhoneSFPVendorRevisionLevel=zhoneSFPVendorRevisionLevel, zhoneSFPVendorOUI=zhoneSFPVendorOUI, zhoneXFPVendorOUI=zhoneXFPVendorOUI, zhoneXFPManufacturingDateCode=zhoneXFPManufacturingDateCode, zhoneXFPVendorPartNumber=zhoneXFPVendorPartNumber, zhoneXFPComplianceCode10GbFiber=zhoneXFPComplianceCode10GbFiber, zhoneDDMAlarms=zhoneDDMAlarms, zhoneXFPEncodingSupport=zhoneXFPEncodingSupport, zhoneSFPTable=zhoneSFPTable, PYSNMP_MODULE_ID=zhoneSFFModule, zhoneSFPUpperBitRateMarginPercentage=zhoneSFPUpperBitRateMarginPercentage, zhoneSFPCopperLinkLength=zhoneSFPCopperLinkLength, zhoneXFPVendorRevisionLevel=zhoneXFPVendorRevisionLevel, zhoneDDMTxPower=zhoneDDMTxPower, zhoneDDMTxBiasCurrent=zhoneDDMTxBiasCurrent, zhoneXFPLowerSpeed=zhoneXFPLowerSpeed, zhoneSFPLowerBitRatePercentage=zhoneSFPLowerBitRatePercentage, zhoneXFPMaximumBitRate=zhoneXFPMaximumBitRate, zhoneDDMVoltage=zhoneDDMVoltage, zhoneSFPFiberChannelTransmitterTechnology=zhoneSFPFiberChannelTransmitterTechnology, zhoneXFPTable=zhoneXFPTable, zhoneSFFObjects=zhoneSFFObjects, zhoneDDMStatusEntry=zhoneDDMStatusEntry, zhoneSFPIdTransceiverType=zhoneSFPIdTransceiverType, zhoneXFPConnectorType=zhoneXFPConnectorType, zhoneSFPIsPresent=zhoneSFPIsPresent, zhoneSFPExtendedIdentifier=zhoneSFPExtendedIdentifier, zhoneSFPFiberChannelSpeed=zhoneSFPFiberChannelSpeed, zhoneXFPComplianceCode10GbEthernet=zhoneXFPComplianceCode10GbEthernet, zhoneSFPFiberChannelTransmissionMedia=zhoneSFPFiberChannelTransmissionMedia)
