#
# PySNMP MIB module CPQOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:12:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Unsigned32, NotificationType, ObjectIdentity, Gauge32, iso, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Bits, ModuleIdentity, Integer32, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "ObjectIdentity", "Gauge32", "iso", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Bits", "ModuleIdentity", "Integer32", "TimeTicks", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqWinOsMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19))
cpqOsMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 1))
cpqOsComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2))
cpqOsInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 1))
cpqOsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 2))
cpqOsProcessor = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 3))
cpqOsMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 4))
cpqOsCache = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 5))
cpqOsPagingFile = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 6))
cpqOsPhysicalDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 7))
cpqOsLogicalDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 8))
cpqOsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 9))
cpqOsNetworkInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 10))
cpqOsTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 11))
cpqOsProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 12))
cpqOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 1, 4))
cpqOsMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMibRevMajor.setStatus('mandatory')
cpqOsMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMibRevMinor.setStatus('mandatory')
cpqOsMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMibCondition.setStatus('mandatory')
cpqOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsCommonPollFreq.setStatus('mandatory')
cpqOsSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSystemStatus.setStatus('mandatory')
cpqOsSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSystemUpTime.setStatus('mandatory')
cpqOsSystemThreads = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSystemThreads.setStatus('mandatory')
cpqOsSysContextSwitchesPersec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSysContextSwitchesPersec.setStatus('mandatory')
cpqOsSysCpuQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSysCpuQueueLength.setStatus('mandatory')
cpqOsSysProcesses = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSysProcesses.setStatus('mandatory')
cpqOsSysRegistryInUsePercent = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSysRegistryInUsePercent.setStatus('mandatory')
cpqOsProcessorStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessorStatus.setStatus('mandatory')
cpqOsProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2), )
if mibBuilder.loadTexts: cpqOsProcessorTable.setStatus('mandatory')
cpqOsProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsCpuIndex"))
if mibBuilder.loadTexts: cpqOsProcessorEntry.setStatus('mandatory')
cpqOsCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuIndex.setStatus('mandatory')
cpqOsCpuInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuInstance.setStatus('mandatory')
cpqOsCpuInterruptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuInterruptsPerSec.setStatus('mandatory')
cpqOsCpuTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuTimePercent.setStatus('mandatory')
cpqOsWarCpuTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsWarCpuTimePercent.setStatus('mandatory')
cpqOsCriCpuTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsCriCpuTimePercent.setStatus('mandatory')
cpqOsCpuUserTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuUserTimePercent.setStatus('mandatory')
cpqOsCpuPrivilegedTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuPrivilegedTimePercent.setStatus('mandatory')
cpqOsCpuCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuCondition.setStatus('mandatory')
cpqOsCpuPercentDPCTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuPercentDPCTime.setStatus('mandatory')
cpqOsCpuPercentInterruptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuPercentInterruptTime.setStatus('mandatory')
cpqOsMemoryStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemoryStatus.setStatus('mandatory')
cpqOsMemAvailableKBytes = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemAvailableKBytes.setStatus('mandatory')
cpqOsMemPagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPagesPerSec.setStatus('mandatory')
cpqOsMemPagesInputPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPagesInputPerSec.setStatus('mandatory')
cpqOsMemPagesOutputPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPagesOutputPerSec.setStatus('mandatory')
cpqOsMemPageFaultsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPageFaultsPerSec.setStatus('mandatory')
cpqOsMemCacheFaultsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemCacheFaultsPerSec.setStatus('mandatory')
cpqOsMemPageReadsPerSecx1000 = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPageReadsPerSecx1000.setStatus('mandatory')
cpqOsMemPageWritesPerSecx1000 = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPageWritesPerSecx1000.setStatus('mandatory')
cpqOsMemPoolNonpagedBytes = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPoolNonpagedBytes.setStatus('mandatory')
cpqOsMemCacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemCacheBytes.setStatus('mandatory')
cpqOsCacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheStatus.setStatus('mandatory')
cpqOsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2), )
if mibBuilder.loadTexts: cpqOsCacheTable.setStatus('mandatory')
cpqOsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsCacheIndex"))
if mibBuilder.loadTexts: cpqOsCacheEntry.setStatus('mandatory')
cpqOsCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheIndex.setStatus('mandatory')
cpqOsCacheInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheInstance.setStatus('mandatory')
cpqOsCacheCopyReadHitsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheCopyReadHitsPercent.setStatus('mandatory')
cpqOsWarCacheCopyReadHitsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsWarCacheCopyReadHitsPercent.setStatus('mandatory')
cpqOsCriCacheCopyReadHitsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsCriCacheCopyReadHitsPercent.setStatus('mandatory')
cpqOsCacheCopyReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheCopyReadsPerSec.setStatus('mandatory')
cpqOsCacheCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheCondition.setStatus('mandatory')
cpqOsPagingFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPagingFileStatus.setStatus('mandatory')
cpqOsPagingFileTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2), )
if mibBuilder.loadTexts: cpqOsPagingFileTable.setStatus('mandatory')
cpqOsPagingFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsPagingFileIndex"))
if mibBuilder.loadTexts: cpqOsPagingFileEntry.setStatus('mandatory')
cpqOsPagingFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPagingFileIndex.setStatus('mandatory')
cpqOsPagingFileInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPagingFileInstance.setStatus('mandatory')
cpqOsPageFileUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPageFileUsagePercent.setStatus('mandatory')
cpqOsWarPageFileUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsWarPageFileUsagePercent.setStatus('mandatory')
cpqOsCriPageFileUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsCriPageFileUsagePercent.setStatus('mandatory')
cpqOsPagingFileCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPagingFileCondition.setStatus('mandatory')
cpqOsPhysicalDiskStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskStatus.setStatus('mandatory')
cpqOsPhysicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2), )
if mibBuilder.loadTexts: cpqOsPhysicalDiskTable.setStatus('mandatory')
cpqOsPhysicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsPhysicalDiskIndex"))
if mibBuilder.loadTexts: cpqOsPhysicalDiskEntry.setStatus('mandatory')
cpqOsPhysicalDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskIndex.setStatus('mandatory')
cpqOsPhysicalDiskInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskInstance.setStatus('mandatory')
cpqOsPhysicalDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskQueueLength.setStatus('mandatory')
cpqOsPhysicalDiskBusyTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskBusyTimePercent.setStatus('mandatory')
cpqOsPhysicalDiskCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskCondition.setStatus('mandatory')
cpqOsPhysicalDiskBytesPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskBytesPersec.setStatus('mandatory')
cpqOsPhysicalDiskTransfersPersecx1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskTransfersPersecx1000.setStatus('mandatory')
cpqOsPhysicalDiskReadsPersecx1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskReadsPersecx1000.setStatus('mandatory')
cpqOsPhysicalDiskWritesPersecx1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskWritesPersecx1000.setStatus('mandatory')
cpqOsPhysicalDiskReadBytesPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskReadBytesPersec.setStatus('mandatory')
cpqOsPhysicalDiskWriteBytesPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskWriteBytesPersec.setStatus('mandatory')
cpqOsPhysicalDiskAvgDisksecPerReadx10000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskAvgDisksecPerReadx10000.setStatus('mandatory')
cpqOsPhysicalDiskAvgDisksecPerWritex10000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskAvgDisksecPerWritex10000.setStatus('mandatory')
cpqOsPhysicalDiskCurrentDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskCurrentDiskQueueLength.setStatus('mandatory')
cpqOsLogicalDiskStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskStatus.setStatus('mandatory')
cpqOsLogicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2), )
if mibBuilder.loadTexts: cpqOsLogicalDiskTable.setStatus('mandatory')
cpqOsLogicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsLogicalDiskIndex"))
if mibBuilder.loadTexts: cpqOsLogicalDiskEntry.setStatus('mandatory')
cpqOsLogicalDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskIndex.setStatus('mandatory')
cpqOsLogicalDiskInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskInstance.setStatus('mandatory')
cpqOsLogicalDiskFreeSpaceMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskFreeSpaceMBytes.setStatus('mandatory')
cpqOsLogicalDiskFreeSpacePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskFreeSpacePercent.setStatus('mandatory')
cpqOsLogicalDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskQueueLength.setStatus('mandatory')
cpqOsLogicalDiskBusyTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskBusyTimePercent.setStatus('mandatory')
cpqOsWarLogicalDiskBusyTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsWarLogicalDiskBusyTimePercent.setStatus('mandatory')
cpqOsCriLogicalDiskBusyTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsCriLogicalDiskBusyTimePercent.setStatus('mandatory')
cpqOsLogicalDiskCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskCondition.setStatus('mandatory')
cpqOsServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerStatus.setStatus('mandatory')
cpqOsServerTotalNetworkUtilizationBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerTotalNetworkUtilizationBytesPerSec.setStatus('mandatory')
cpqOsServerSessions = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerSessions.setStatus('mandatory')
cpqOsServerAccessPermissionErrors = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerAccessPermissionErrors.setStatus('mandatory')
cpqOsServerAccessGrantedErrors = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerAccessGrantedErrors.setStatus('mandatory')
cpqOsServerLogonErrors = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerLogonErrors.setStatus('mandatory')
cpqOsServerSessionsErroredOut = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerSessionsErroredOut.setStatus('mandatory')
cpqOsServerContextBlocksQueuePerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerContextBlocksQueuePerSec.setStatus('mandatory')
cpqOsNetworkInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkInterfaceStatus.setStatus('mandatory')
cpqOsNetworkInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2), )
if mibBuilder.loadTexts: cpqOsNetworkInterfaceTable.setStatus('mandatory')
cpqOsNetworkInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsNetworkInterfaceIndex"))
if mibBuilder.loadTexts: cpqOsNetworkInterfaceEntry.setStatus('mandatory')
cpqOsNetworkInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkInterfaceIndex.setStatus('mandatory')
cpqOsNetworkInterfaceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkInterfaceInstance.setStatus('mandatory')
cpqOsNetworkTotalBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkTotalBytesPerSec.setStatus('mandatory')
cpqOsNetworkPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkPacketsPerSec.setStatus('mandatory')
cpqOsNetworkOutputQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkOutputQueueLength.setStatus('mandatory')
cpqOsNetworkPktOutboundErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkPktOutboundErrors.setStatus('mandatory')
cpqOsNetworkPktReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkPktReceiveErrors.setStatus('mandatory')
cpqOsNetworkCurrentBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkCurrentBandWidth.setStatus('mandatory')
cpqOsNetworkInterfaceCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkInterfaceCondition.setStatus('mandatory')
cpqOsNetworkBytesSentPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkBytesSentPersec.setStatus('mandatory')
cpqOsNetworkBytesReceivedPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkBytesReceivedPersec.setStatus('mandatory')
cpqOsNetworkPacketsSentPersecx1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkPacketsSentPersecx1000.setStatus('mandatory')
cpqOsNetworkPacketsReceivedPersecx1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkPacketsReceivedPersecx1000.setStatus('mandatory')
cpqOsTcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpStatus.setStatus('mandatory')
cpqOsTcpTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2), )
if mibBuilder.loadTexts: cpqOsTcpTable.setStatus('mandatory')
cpqOsTcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsTcpIndex"))
if mibBuilder.loadTexts: cpqOsTcpEntry.setStatus('mandatory')
cpqOsTcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpIndex.setStatus('mandatory')
cpqOsTcpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpInstance.setStatus('mandatory')
cpqOsTcpActiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpActiveConnections.setStatus('mandatory')
cpqOsTcpEstablishedConections = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpEstablishedConections.setStatus('mandatory')
cpqOsTcpSegmentsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpSegmentsPerSec.setStatus('mandatory')
cpqOsTcpRetransmittedSegmentsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpRetransmittedSegmentsPerSec.setStatus('mandatory')
cpqOsTcpConnectionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpConnectionFailures.setStatus('mandatory')
cpqOsTcpCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpCondition.setStatus('mandatory')
cpqOsProcessStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessStatus.setStatus('mandatory')
cpqOsProcessTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2), )
if mibBuilder.loadTexts: cpqOsProcessTable.setStatus('mandatory')
cpqOsProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsProcessIndex"))
if mibBuilder.loadTexts: cpqOsProcessEntry.setStatus('mandatory')
cpqOsProcessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessIndex.setStatus('mandatory')
cpqOsProcessInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessInstance.setStatus('mandatory')
cpqOsProcessThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessThreadCount.setStatus('mandatory')
cpqOsProcessPrivateBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessPrivateBytes.setStatus('mandatory')
cpqOsProcessPageFileBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessPageFileBytes.setStatus('mandatory')
cpqOsProcessWorkingSet = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessWorkingSet.setStatus('mandatory')
cpqOsProcessCpuTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessCpuTimePercent.setStatus('mandatory')
cpqOsProcessPrivilegedTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessPrivilegedTimePercent.setStatus('mandatory')
cpqOsProcessPageFaultsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessPageFaultsPerSec.setStatus('mandatory')
cpqOsProcessCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessCondition.setStatus('mandatory')
cpqOsCpuTimeDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsCpuIndex"), ("CPQOS-MIB", "cpqOsCpuInstance"), ("CPQOS-MIB", "cpqOsCpuTimePercent"))
cpqOsCpuTimeFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsCpuIndex"), ("CPQOS-MIB", "cpqOsCpuInstance"), ("CPQOS-MIB", "cpqOsCpuTimePercent"))
cpqOsCacheCopyReadHitsDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsCacheIndex"), ("CPQOS-MIB", "cpqOsCacheInstance"), ("CPQOS-MIB", "cpqOsCacheCopyReadHitsPercent"))
cpqOsCacheCopyReadHitsFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsCacheIndex"), ("CPQOS-MIB", "cpqOsCacheInstance"), ("CPQOS-MIB", "cpqOsCacheCopyReadHitsPercent"))
cpqOsPageFileUsageDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsPagingFileIndex"), ("CPQOS-MIB", "cpqOsPagingFileInstance"), ("CPQOS-MIB", "cpqOsPageFileUsagePercent"))
cpqOsPageFileUsageFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsPagingFileIndex"), ("CPQOS-MIB", "cpqOsPagingFileInstance"), ("CPQOS-MIB", "cpqOsPageFileUsagePercent"))
cpqOsLogicalDiskBusyTimeDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsLogicalDiskIndex"), ("CPQOS-MIB", "cpqOsLogicalDiskInstance"), ("CPQOS-MIB", "cpqOsLogicalDiskBusyTimePercent"))
cpqOsLogicalDiskBusyTimeFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsLogicalDiskIndex"), ("CPQOS-MIB", "cpqOsLogicalDiskInstance"), ("CPQOS-MIB", "cpqOsLogicalDiskBusyTimePercent"))
mibBuilder.exportSymbols("CPQOS-MIB", cpqOsNetworkInterfaceStatus=cpqOsNetworkInterfaceStatus, cpqOsLogicalDiskTable=cpqOsLogicalDiskTable, cpqOsPhysicalDiskAvgDisksecPerWritex10000=cpqOsPhysicalDiskAvgDisksecPerWritex10000, cpqOsSystem=cpqOsSystem, cpqOsPageFileUsageFailed=cpqOsPageFileUsageFailed, cpqOsSystemUpTime=cpqOsSystemUpTime, cpqOsPagingFileIndex=cpqOsPagingFileIndex, cpqOsNetworkInterfaceIndex=cpqOsNetworkInterfaceIndex, cpqOsProcessTable=cpqOsProcessTable, cpqOsCache=cpqOsCache, cpqOsPageFileUsagePercent=cpqOsPageFileUsagePercent, cpqOsSysCpuQueueLength=cpqOsSysCpuQueueLength, cpqOsPhysicalDiskStatus=cpqOsPhysicalDiskStatus, cpqOsCriLogicalDiskBusyTimePercent=cpqOsCriLogicalDiskBusyTimePercent, cpqOsMibRevMajor=cpqOsMibRevMajor, cpqOsCpuTimePercent=cpqOsCpuTimePercent, cpqOsProcessorEntry=cpqOsProcessorEntry, cpqOsWarPageFileUsagePercent=cpqOsWarPageFileUsagePercent, cpqOsLogicalDiskFreeSpacePercent=cpqOsLogicalDiskFreeSpacePercent, cpqOsProcessThreadCount=cpqOsProcessThreadCount, cpqOsNetworkInterfaceInstance=cpqOsNetworkInterfaceInstance, cpqOsServerStatus=cpqOsServerStatus, cpqOsMemory=cpqOsMemory, cpqOsTcpInstance=cpqOsTcpInstance, cpqOsTcpStatus=cpqOsTcpStatus, cpqOsPhysicalDiskTransfersPersecx1000=cpqOsPhysicalDiskTransfersPersecx1000, cpqOsProcessorStatus=cpqOsProcessorStatus, cpqOsPhysicalDiskTable=cpqOsPhysicalDiskTable, cpqOsCriCpuTimePercent=cpqOsCriCpuTimePercent, cpqOsLogicalDiskQueueLength=cpqOsLogicalDiskQueueLength, cpqOsPhysicalDiskBytesPersec=cpqOsPhysicalDiskBytesPersec, cpqOsWarLogicalDiskBusyTimePercent=cpqOsWarLogicalDiskBusyTimePercent, cpqOsMemoryStatus=cpqOsMemoryStatus, cpqOsMibCondition=cpqOsMibCondition, cpqOsInterface=cpqOsInterface, cpqOsNetworkTotalBytesPerSec=cpqOsNetworkTotalBytesPerSec, cpqOsMemPagesPerSec=cpqOsMemPagesPerSec, cpqOsProcessor=cpqOsProcessor, cpqOsPhysicalDiskCurrentDiskQueueLength=cpqOsPhysicalDiskCurrentDiskQueueLength, cpqOsProcessCpuTimePercent=cpqOsProcessCpuTimePercent, cpqOsServerSessions=cpqOsServerSessions, cpqOsCpuTimeFailed=cpqOsCpuTimeFailed, cpqOsProcess=cpqOsProcess, cpqOsServerAccessGrantedErrors=cpqOsServerAccessGrantedErrors, cpqOsSysProcesses=cpqOsSysProcesses, cpqOsCacheStatus=cpqOsCacheStatus, cpqOsMemPageWritesPerSecx1000=cpqOsMemPageWritesPerSecx1000, cpqOsTcpEstablishedConections=cpqOsTcpEstablishedConections, cpqOsProcessPrivilegedTimePercent=cpqOsProcessPrivilegedTimePercent, cpqOsCommonPollFreq=cpqOsCommonPollFreq, cpqOsCpuTimeDegraded=cpqOsCpuTimeDegraded, cpqOsProcessIndex=cpqOsProcessIndex, cpqOsLogicalDiskBusyTimeDegraded=cpqOsLogicalDiskBusyTimeDegraded, cpqOsCommon=cpqOsCommon, cpqOsNetworkInterfaceTable=cpqOsNetworkInterfaceTable, cpqOsTcpEntry=cpqOsTcpEntry, cpqOsNetworkPktReceiveErrors=cpqOsNetworkPktReceiveErrors, cpqOsMemPageFaultsPerSec=cpqOsMemPageFaultsPerSec, cpqOsPagingFileCondition=cpqOsPagingFileCondition, cpqOsProcessEntry=cpqOsProcessEntry, cpqOsPagingFileTable=cpqOsPagingFileTable, cpqOsPagingFileStatus=cpqOsPagingFileStatus, cpqOsCacheTable=cpqOsCacheTable, cpqOsCacheCopyReadsPerSec=cpqOsCacheCopyReadsPerSec, cpqOsPhysicalDisk=cpqOsPhysicalDisk, cpqOsPhysicalDiskWritesPersecx1000=cpqOsPhysicalDiskWritesPersecx1000, cpqOsLogicalDiskIndex=cpqOsLogicalDiskIndex, cpqOsWarCpuTimePercent=cpqOsWarCpuTimePercent, cpqOsSystemStatus=cpqOsSystemStatus, cpqOsCpuPercentDPCTime=cpqOsCpuPercentDPCTime, cpqOsNetworkBytesReceivedPersec=cpqOsNetworkBytesReceivedPersec, cpqOsPhysicalDiskReadBytesPersec=cpqOsPhysicalDiskReadBytesPersec, cpqOsTcpIndex=cpqOsTcpIndex, cpqOsCacheCopyReadHitsFailed=cpqOsCacheCopyReadHitsFailed, cpqOsCacheCopyReadHitsDegraded=cpqOsCacheCopyReadHitsDegraded, cpqOsTcpTable=cpqOsTcpTable, cpqOsMemPagesInputPerSec=cpqOsMemPagesInputPerSec, cpqOsTcpSegmentsPerSec=cpqOsTcpSegmentsPerSec, cpqOsNetworkPacketsPerSec=cpqOsNetworkPacketsPerSec, cpqOsPagingFileEntry=cpqOsPagingFileEntry, cpqOsMemPageReadsPerSecx1000=cpqOsMemPageReadsPerSecx1000, cpqOsNetworkPktOutboundErrors=cpqOsNetworkPktOutboundErrors, cpqOsProcessPrivateBytes=cpqOsProcessPrivateBytes, cpqOsServerAccessPermissionErrors=cpqOsServerAccessPermissionErrors, cpqOsCpuPrivilegedTimePercent=cpqOsCpuPrivilegedTimePercent, cpqOsMemAvailableKBytes=cpqOsMemAvailableKBytes, cpqOsServerTotalNetworkUtilizationBytesPerSec=cpqOsServerTotalNetworkUtilizationBytesPerSec, cpqOsLogicalDisk=cpqOsLogicalDisk, cpqOsLogicalDiskCondition=cpqOsLogicalDiskCondition, cpqOsCacheCopyReadHitsPercent=cpqOsCacheCopyReadHitsPercent, cpqOsCriCacheCopyReadHitsPercent=cpqOsCriCacheCopyReadHitsPercent, cpqOsPhysicalDiskWriteBytesPersec=cpqOsPhysicalDiskWriteBytesPersec, cpqOsLogicalDiskInstance=cpqOsLogicalDiskInstance, cpqOsProcessWorkingSet=cpqOsProcessWorkingSet, cpqOsMemCacheBytes=cpqOsMemCacheBytes, cpqOsServerLogonErrors=cpqOsServerLogonErrors, cpqOsNetworkBytesSentPersec=cpqOsNetworkBytesSentPersec, cpqOsServerSessionsErroredOut=cpqOsServerSessionsErroredOut, cpqOsTcp=cpqOsTcp, cpqOsNetworkPacketsSentPersecx1000=cpqOsNetworkPacketsSentPersecx1000, cpqOsPhysicalDiskEntry=cpqOsPhysicalDiskEntry, cpqOsServer=cpqOsServer, cpqOsCacheEntry=cpqOsCacheEntry, cpqOsPageFileUsageDegraded=cpqOsPageFileUsageDegraded, cpqOsTcpConnectionFailures=cpqOsTcpConnectionFailures, cpqOsPhysicalDiskIndex=cpqOsPhysicalDiskIndex, cpqOsCpuInstance=cpqOsCpuInstance, cpqOsCpuUserTimePercent=cpqOsCpuUserTimePercent, cpqOsCpuInterruptsPerSec=cpqOsCpuInterruptsPerSec, cpqOsMemPagesOutputPerSec=cpqOsMemPagesOutputPerSec, cpqOsProcessPageFaultsPerSec=cpqOsProcessPageFaultsPerSec, cpqOsCacheIndex=cpqOsCacheIndex, cpqOsPhysicalDiskCondition=cpqOsPhysicalDiskCondition, cpqOsNetworkInterfaceEntry=cpqOsNetworkInterfaceEntry, cpqWinOsMgmt=cpqWinOsMgmt, cpqOsNetworkOutputQueueLength=cpqOsNetworkOutputQueueLength, cpqOsPagingFile=cpqOsPagingFile, cpqOsPhysicalDiskReadsPersecx1000=cpqOsPhysicalDiskReadsPersecx1000, cpqOsNetworkInterfaceCondition=cpqOsNetworkInterfaceCondition, cpqOsMemCacheFaultsPerSec=cpqOsMemCacheFaultsPerSec, cpqOsLogicalDiskBusyTimePercent=cpqOsLogicalDiskBusyTimePercent, cpqOsProcessCondition=cpqOsProcessCondition, cpqOsLogicalDiskStatus=cpqOsLogicalDiskStatus, cpqOsTcpCondition=cpqOsTcpCondition, cpqOsCacheCondition=cpqOsCacheCondition, cpqOsPhysicalDiskBusyTimePercent=cpqOsPhysicalDiskBusyTimePercent, cpqOsSysContextSwitchesPersec=cpqOsSysContextSwitchesPersec, cpqOsMibRev=cpqOsMibRev, cpqOsCpuPercentInterruptTime=cpqOsCpuPercentInterruptTime, cpqOsCpuIndex=cpqOsCpuIndex, cpqOsMemPoolNonpagedBytes=cpqOsMemPoolNonpagedBytes, cpqOsCriPageFileUsagePercent=cpqOsCriPageFileUsagePercent, cpqOsLogicalDiskFreeSpaceMBytes=cpqOsLogicalDiskFreeSpaceMBytes, cpqOsMibRevMinor=cpqOsMibRevMinor, cpqOsNetworkPacketsReceivedPersecx1000=cpqOsNetworkPacketsReceivedPersecx1000, cpqOsLogicalDiskBusyTimeFailed=cpqOsLogicalDiskBusyTimeFailed, cpqOsComponent=cpqOsComponent, cpqOsTcpActiveConnections=cpqOsTcpActiveConnections, cpqOsProcessorTable=cpqOsProcessorTable, cpqOsProcessInstance=cpqOsProcessInstance, cpqOsCacheInstance=cpqOsCacheInstance, cpqOsPagingFileInstance=cpqOsPagingFileInstance, cpqOsTcpRetransmittedSegmentsPerSec=cpqOsTcpRetransmittedSegmentsPerSec, cpqOsNetworkInterface=cpqOsNetworkInterface, cpqOsSystemThreads=cpqOsSystemThreads, cpqOsPhysicalDiskInstance=cpqOsPhysicalDiskInstance, cpqOsCpuCondition=cpqOsCpuCondition, cpqOsProcessStatus=cpqOsProcessStatus, cpqOsProcessPageFileBytes=cpqOsProcessPageFileBytes, cpqOsPhysicalDiskAvgDisksecPerReadx10000=cpqOsPhysicalDiskAvgDisksecPerReadx10000, cpqOsSysRegistryInUsePercent=cpqOsSysRegistryInUsePercent, cpqOsWarCacheCopyReadHitsPercent=cpqOsWarCacheCopyReadHitsPercent, cpqOsServerContextBlocksQueuePerSec=cpqOsServerContextBlocksQueuePerSec, cpqOsNetworkCurrentBandWidth=cpqOsNetworkCurrentBandWidth, cpqOsLogicalDiskEntry=cpqOsLogicalDiskEntry, cpqOsPhysicalDiskQueueLength=cpqOsPhysicalDiskQueueLength)
